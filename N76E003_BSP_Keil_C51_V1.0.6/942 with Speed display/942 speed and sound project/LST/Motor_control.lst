C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/08/2021 17:57:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR_CONTROL
OBJECT MODULE PLACED IN .\Output\Motor_control.obj
COMPILER INVOKED BY: C:\keil5\C51\BIN\C51.EXE Code\Motor_control.c OPTIMIZE(2,SPEED) BROWSE INCDIR(..\..\Include) DEFINE
                    -(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Motor_control.lst) OBJECT(.\Output\Motor_control.obj)

line level    source

   1          #include "Motor_control.h"
   2          #include "common.h"
   3          #include "Function_define.h"
   4          #include "N76E003.h"
   5          #include "SFR_Macro.h"
   6          #include "Delay.h" 
   7          #include "SFR_Macro.h"
   8          
   9          #define Vref  3072;
  10          #define Ramp_up Timer0_Delay1ms(10); set_LOAD;set_PWMRUN//from 0->0x97 150 step, 10ms*150=1.5s
  11          #define set_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT0 ;EA=BIT_TMP
  12          #define set_IAPGO BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPTRG|=SET_BIT0 ;EA=BIT_TMP
  13          #define clr_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT0;EA=BIT_TMP
  14          //#define TIM1_INIT  TH0 = 0XFC
  15          ////////////Variables////////////////
  16          double bgvalue, ADCValue, bgvol, ADC_Vol;
  17          uint8_t  bgmark;
  18          uint8_t  bgh;
  19          uint8_t  bgl;
  20          static uint8_t  flag=1;
  21          
  22          
  23          // PWM+=KP[e(k) -e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  24          // e(k) the value difference of actual and setting e(k-1) the last time difference
  25          // In this motor control we use P
  26          // PWM = Kp[e(k) - e(k-1)]
  27          // Cbat == the current value  IO:P05 ADC value
  28          int Incremental_P(UINT8 Cbat, UINT8 CC_Value)//int can have negative num
  29          {
  30   1              static UINT8 Kp=1,Bias,Last_bias;
  31   1              static float PWM;
  32   1              Bias= Cbat-CC_Value;
  33   1              PWM-= Kp*(Bias-Last_bias);// Decreasement output
  34   1              Last_bias = Bias;
  35   1              return PWM; //The percentage of decreasment
  36   1      }
  37          
  38          void ADC_Init(void)
  39          {
  40   1      //      set_EA;
  41   1      //      set_EPI;//Enable Pin interrupt
  42   1      //      P13_Input_Mode;
  43   1      //      
  44   1      //      clr_PIPS1;
  45   1      //      clr_PIPS0;//pin1.
  46   1      //      set_PIT3;//cHANNEL 3 Edge triggered
  47   1      //      clr_PIPEN3;//P13 falling triggered
  48   1      //      set_PINEN3;
  49   1              set_P02;//off all sound
  50   1              set_P13;
  51   1              clr_P12; //LED on
  52   1              clr_P10;//BC
  53   1              P17_Input_Mode;//Hall
  54   1              P30_Input_Mode;//Speed shift
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/08/2021 17:57:04 PAGE 2   

  55   1              P05_Input_Mode; //current value
  56   1              clr_P05;
  57   1              P01_PushPull_Mode;
  58   1              P03_PushPull_Mode;
  59   1              P14_PushPull_Mode;
  60   1              P00_PushPull_Mode;//Forward relay
  61   1              P10_PushPull_Mode;
  62   1              set_P14; //Enable DCDC
  63   1              clr_P00, clr_P10;
  64   1              
  65   1              set_IAPEN;
  66   1              IAPAL = 0x0d; IAPAH = 0x00; IAPCN = 0x04;//0x04 =Read UID
  67   1              set_IAPGO;
  68   1              bgl = IAPFD;
  69   1              bgmark = bgl&0xf0;
  70   1              
  71   1              if(bgmark == 0x80)
  72   1              {
  73   2                      bgl = bgl&0x0f;                 
  74   2                      IAPAL = 0x0c;
  75   2                      IAPAH = 0x00; 
  76   2                      set_IAPGO;
  77   2                      bgh = IAPFD;
  78   2                      bgvalue = (bgh<<4)+bgl;
  79   2                      bgvol = bgvalue*3/4;
  80   2                      bgvol = bgvol- 33;
  81   2              }
  82   1              if(bgmark==0x00)
  83   1              {
  84   2                      bgl = bgl&0x0f;
  85   2                      IAPAL = 0X0C;
  86   2                      IAPAH = 0X00;
  87   2                      set_IAPGO;
  88   2                      bgh = IAPFD;
  89   2                      bgvalue = (bgh<<4)+bgl;
  90   2                      bgvol = bgvalue*3/4;
  91   2              }
  92   1              if(bgmark==0x90)
  93   1              {
  94   2                      IAPAL = 0x0E;
  95   2                      IAPAH = 0x00;
  96   2                      set_IAPGO;
  97   2                      bgh   = IAPFD;
  98   2                      IAPAL = 0x0F;
  99   2                      IAPAH = 0x00;
 100   2                      set_IAPGO;
 101   2                      bgl = IAPFD;
 102   2                      bgl = bgl&0x0f; 
 103   2                      bgvalue = (bgh<<4)+bgl;
 104   2                      bgvol = bgvalue*3/4;
 105   2              }
 106   1              printf("\nBandgap value:%d\n", bgvalue);
 107   1              printf("\nBandgap vo ltage:%dmV\n",bgvol);
 108   1              clr_IAPEN;              // turn off IAP
 109   1              
 110   1              Enable_ADC_AIN0;                //P17 Hall pedal
 111   1      //      Enable_ADC_AIN4;                //P05 A_Det
 112   1      //      Enable_ADC_AIN1;                //P30 Speed
 113   1              for(bgh =0;bgh<3;bgh++)
 114   1              {
 115   2                      clr_ADCF;
 116   2                      set_ADCS;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/08/2021 17:57:04 PAGE 3   

 117   2                      while(ADCF==0);
 118   2                      ADCValue = (ADCRH<<4)+ADCRL;
 119   2                      printf("ADC value:%d",ADCValue);
 120   2              }
 121   1      }
 122          /* AD value= Voltage*255/5  20A=57*/
 123          UINT16 Get_CurrentValue(void)
 124          {
 125   1              Enable_ADC_AIN4;
 126   1              clr_ADCF;
 127   1              set_ADCS;
 128   1              while(ADCF==0);
 129   1      //      ADCValue = (ADCRH<<4)+ADCRL;
 130   1      //      printf("ADC value:%d",ADCValue);
 131   1              return ADCRH;
 132   1      }
 133          
 134          UINT16 Get_HallValue(void)
 135          {
 136   1              Enable_ADC_AIN0;
 137   1              clr_ADCF;
 138   1              set_ADCS;//Enable ADC transfer
 139   1      //      ADCValue = (ADCRH<<4)+ADCRL
 140   1      //      ADC_Vol = (bgvol*ADCValue/bgvalue);//All are decimal
 141   1      //      printf("ADCRH:%x\n",ADCRH);
 142   1      //      printf("ADCRL:%d",ADCRL);
 143   1      //      printf("ADC_voltage:%gmV\n",ADC_Vol);//%g don't print no meaning 0
 144   1              while(ADCF==0);//ADC transfer done
 145   1              return ADCRH; //High 8 bits+ low 4 bits
 146   1      }
 147          
 148          UINT8 Get_Speedvalue(void)
 149          {
 150   1              Enable_ADC_AIN1;
 151   1              clr_ADCF;
 152   1              set_ADCS;
 153   1              while(ADCF==0);
 154   1              if(ADCRH>100)
 155   1                      return 1;
 156   1              else 
 157   1                      return 0;
 158   1      }
 159          
 160          void Relay_On(UINT8 On_FB)//1= F 0 = B
 161          {
 162   1              if(On_FB==1)
 163   1              {
 164   2                      clr_P10;
 165   2                      set_P00;
 166   2              }
 167   1              else
 168   1              {
 169   2                      clr_P00;
 170   2                      set_P10;
 171   2              }
 172   1                      
 173   1      }
 174          
 175          void Relay_Off(void)
 176          {
 177   1              clr_P00;
 178   1              clr_P10;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/08/2021 17:57:04 PAGE 4   

 179   1      }
 180                  /**********************************************************************
 181                                                                  Dead time setting
 182                                                          DT=PDTCNT+1/Fsys  >Ton+Toff
 183                                                          2us= 32/16M
 184                  ********************************** 3  5************************************/
 185          void PWM_DEAD_TIME_VALUE(UINT16 DeadTimeData) //problem:when the deadtemphigh!=1, there is no dead time
 186          {
 187   1              UINT8 deadtmphigh,deadtmplow;
 188   1              deadtmplow = DeadTimeData;
 189   1              deadtmphigh = DeadTimeData>>8;
 190   1              BIT_TMP = EA;
 191   1              if (deadtmphigh==0x01)
 192   1              {
 193   2                      EA = 0;
 194   2                      TA = 0xAA;
 195   2                      TA = 0x55;
 196   2                      PDTEN|=0x10;
 197   2              }
 198   1              TA = 0xAA;
 199   1              TA = 0x55;
 200   1              PDTCNT = deadtmplow;
 201   1              EA = BIT_TMP;
 202   1      }
 203          
 204          void PWM_Init()
 205          {
 206   1              PWM5_P03_OUTPUT_ENABLE;
 207   1              PWM4_P01_OUTPUT_ENABLE;//Upper bridge
 208   1              PWM4_OUTPUT_INVERSE;
 209   1      //      PWM5_OUTPUT_INVERSE;    
 210   1              PWM_COMPLEMENTARY_MODE;//In this mode the dead time can work
 211   1              
 212   1              PWM_CLOCK_DIV_32;
 213   1      //      PWMPH = 0x07;
 214   1      //      PWMPL = 0xcf;   //1K
 215   1              PWMPH = 0x00;   //Period setting;
 216   1              PWMPL = 0xff;   //1.9KHz
 217   1              
 218   1              set_SFRPAGE;
 219   1              PWM4H = 0x00;
 220   1              PWM4L = 0x00;
 221   1              clr_SFRPAGE;
 222   1              
 223   1              PWM45_DEADTIME_ENABLE;
 224   1              PWM_DEAD_TIME_VALUE(64); //31=2us dead time      95=6us 63=4us input PDTCNT value
 225   1              set_LOAD;
 226   1              set_PWMRUN;
 227   1              /**********************************************************************
 228   1              PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV> 
 229   1                                                                      = (16MHz/8)/(0x7CF + 1)
 230   1                                                                      = 1KHz (1ms)
 231   1              =(16MHz/8)/(0x96+1)
 232   1      
 233   1              ***********************************************************************/
 234   1      }
 235          
 236          void PWM_Setting(UINT8 n, UINT8 FB)     //1n = 1%
 237          {
 238   1              set_SFRPAGE; //PWM4\5 SETTING
 239   1              flag = 1;
 240   1              n = n>100? 100: n;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/08/2021 17:57:04 PAGE 5   

 241   1              if(flag)
 242   1              {
 243   2                      UINT8 i = n*5/2;
 244   2                      if(n>=0&&n<=100)
 245   2                      {
 246   3                              if(PWM4L<i)
 247   3                              {
 248   4                                      PWM4L++;
 249   4                              }
 250   3                              else if(PWM4L==i)// jump out
 251   3                              {
 252   4                                      flag = 0;
 253   4                              }
 254   3                              else
 255   3                              {
 256   4                                      PWM4L=i;
 257   4                              }
 258   3                      }
 259   2                      if(PWM4L>10)
 260   2                              Relay_On(FB);
 261   2      //              else
 262   2      //                      Relay_Off();
 263   2                      Ramp_up;// 10 = 2.55s ramp up
 264   2              }
 265   1              
 266   1      }
 267          
 268          //void PinInterrupt (void) interrupt 7
 269          //{
 270          //      printf("Falling edge intterrupt triggered");
 271          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1247    ----
   CONSTANT SIZE    =     56    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
