C51 COMPILER V9.60.0.0   ADC                                                               12/08/2021 17:57:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\ADC.obj
COMPILER INVOKED BY: C:\keil5\C51\BIN\C51.EXE Code\ADC.C OPTIMIZE(2,SPEED) BROWSE INCDIR(..\..\Include) DEFINE(FOSC_1600
                    -00) DEBUG OBJECTEXTEND PRINT(.\LST\ADC.lst) OBJECT(.\Output\ADC.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "Common.h"
   5          #include "Delay.h"
   6          #include "Motor_control.h"
   7          #include "Speed_display.h"
   8          
   9          //*****************  The Following is in define in Fucntion_define.h  ***************************
  10          //****** Always include Function_define.h call the define you want, detail see main(void) *******
  11          //***********************************************************************************************
  12          #define CCvalue 0x14; //change the current regulation value
  13          
  14          #define Not_Pressed PWM5_P03_OUTPUT_DISABLE; PWM4_P01_OUTPUT_DISABLE; clr_P01; set_P03;
  15          #define Pressed PWM5_P03_OUTPUT_ENABLE; PWM4_P01_OUTPUT_ENABLE;
  16          UINT8 arg;
  17          UINT16 sum;
  18          #if 0
              //#define Enable_ADC_AIN0                       ADCCON0&=0xF0;P17_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT0;ADCCON1|=SET_BIT0   
             -                                                                //P17
              //#define Enable_ADC_AIN1                       ADCCON0&=0xF0;ADCCON0|=0x01;P30_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT1;ADCC
             -ON1|=SET_BIT0                //P30
              //#define Enable_ADC_AIN2                       ADCCON0&=0xF0;ADCCON0|=0x02;P07_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT2;ADCC
             -ON1|=SET_BIT0                //P07
              //#define Enable_ADC_AIN3                       ADCCON0&=0xF0;ADCCON0|=0x03;P06_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT3;ADCC
             -ON1|=SET_BIT0                //P06
              //#define Enable_ADC_AIN4                       ADCCON0&=0xF0;ADCCON0|=0x04;P05_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT4;ADCC
             -ON1|=SET_BIT0                //P05
              //#define Enable_ADC_AIN5                       ADCCON0&=0xF0;ADCCON0|=0x05;P04_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT5;ADCC
             -ON1|=SET_BIT0                //P04
              //#define Enable_ADC_AIN6                       ADCCON0&=0xF0;ADCCON0|=0x06;P03_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT6;ADCC
             -ON1|=SET_BIT0                //P03
              //#define Enable_ADC_AIN7                       ADCCON0&=0xF0;ADCCON0|=0x07;P11_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT7;ADCC
             -ON1|=SET_BIT0                //P11
              //#define Enable_ADC_BandGap    ADCCON0|=SET_BIT3;ADCCON0&=0xF8;                                                                                                                                                                                                                                                        //Band-gap 1.2
             -2V
              
              //#define PWM0_FALLINGEDGE_TRIG_ADC             ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SE
             -T_BIT2;ADCCON1|=SET_BIT1
              //#define PWM2_FALLINGEDGE_TRIG_ADC             ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET
             -_BIT2;ADCCON1|=SET_BIT1
              //#define PWM4_FALLINGEDGE_TRIG_ADC             ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET
             -_BIT2;ADCCON1|=SET_BIT1
              //#define PWM0_RISINGEDGE_TRIG_ADC              ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_
             -BIT2;ADCCON1|=SET_BIT1
              //#define PWM2_RISINGEDGE_TRIG_ADC              ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_B
             -IT2;ADCCON1|=SET_BIT1
              //#define PWM4_RISINGEDGE_TRIG_ADC              ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_B
             -IT2;ADCCON1|=SET_BIT1
              
              //#define P04_FALLINGEDGE_TRIG_ADC              ADCCON0|=0x30;ADCCON1&=0xF3;ADCCON1|=SET_BIT1;ADCCON1&=~SET_BIT6
              //#define P13_FALLINGEDGE_TRIG_ADC              ADCCON0|=0x30;ADCCON1&=0xF3;ADCCON1|=SET_BIT1;ADCCON1|=SET_BIT6
              //#define P04_RISINGEDGE_TRIG_ADC                       ADCCON0|=0x30;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT2;ADCCON1|=SET_BIT1;A
             -DCCON1&=~SET_BIT6
C51 COMPILER V9.60.0.0   ADC                                                               12/08/2021 17:57:04 PAGE 2   

              //#define P13_RISINGEDGE_TRIG_ADC                       ADCCON0|=0x30;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT2;ADCCON1|=SET_BIT1;A
             -DCCON1|=SET_BIT6
              #endif
  41          
  42          /******************************************************************************
  43          The main C function.  Program execution starts
  44          here after stack initialization.
  45          ******************************************************************************/
  46          
  47          void main (void) 
  48          {
  49   1              Set_All_GPIO_Quasi_Mode;                        //For GPIO1 output, Find in "Function_define.h" - "GPIO INIT"
  50   1              InitialUART0_Timer1(115200);
  51   1              ADC_Init();                                                     //
  52   1                                                                                      //reverved for timer_init   Sleep2
  53   1              PWM_Init();
  54   1              while(1)
  55   1              {
  56   2                      UINT8 i = Get_HallValue();// can use public structure or ...
  57   2                      UINT8 j = Get_CurrentValue();
  58   2                      UINT8 k = Get_Speedvalue();
  59   2                      UINT8 pwm_step = (i-51)>=0? (i-51)*2/3:0;  //return  %
  60   2                      if(i>52)// to prevent hall initial voltage is 1.0v
  61   2                      {
  62   3                              Pressed
  63   3                              P02 = 0;
  64   3                              P13 = 1;
  65   3                              switch(j>57)//20A=57
  66   3                              {
  67   4                                      case 0:
  68   4                                      {
  69   5                                              if(arg<8)
  70   5                                              {
  71   6                                                      sum+=pwm_step;
  72   6                                                      arg++;
  73   6                                              }
  74   5                                              else 
  75   5                                              {
  76   6                                                      arg=0;
  77   6                                                      sum=sum/8;
  78   6                                                      PWM_Setting(pwm_step,k);// PWM first, or the 55moment relay on, PWM still 0 cause big inrush
  79   6                                              }
  80   5                                      }
  81   4                                      break;
  82   4                                      case 1:
  83   4                                      {
  84   5                                              if(PWM4L>125)// PWM>50%
  85   5                                              {
  86   6                                                      j=j*0.35;// Current calculation from current shunt-> OA-> ADC j=actural current
  87   6                                                      PWM4L=(PWM4L+Incremental_P(j, 20)*3/2)>50? (PWM4L+Incremental_P(j, 20)*3/2):50;;//PWM delta value, i
             -f the 
  88   6                                                                                                      //reserve for timer counting
  89   6                                                      set_LOAD;set_PWMRUN;
  90   6              //                                      Relay_On(k);            //Forward Relay open
  91   6                                                      j=0;
  92   6                                              }
  93   5                                      }
  94   4                                      break;
  95   4                                      default:
  96   4                                              break;
  97   4                              }
  98   3                      }
C51 COMPILER V9.60.0.0   ADC                                                               12/08/2021 17:57:04 PAGE 3   

  99   2                      else//the brake should only works when pedal released
 100   2                      {
 101   3                              if(P00==1||P10==1)
 102   3                              {
 103   4                                      P02 = 1; //engine off
 104   4                                      P13 = 0; //Brake on
 105   4                                      PWM4L=0;
 106   4                                      set_LOAD;set_PWMRUN;
 107   4                                      Timer0_Delay1ms(400);           
 108   4                                      PWM4L=7;
 109   4                                      set_LOAD;set_PWMRUN;
 110   4                                      Timer0_Delay1ms(400);
 111   4                                      Relay_Off();
 112   4                                      Not_Pressed
 113   4                              }
 114   3                              else
 115   3                              {
 116   4                                      PWM4L=0;
 117   4                                      set_LOAD;set_PWMRUN;
 118   4                                      Relay_Off();
 119   4                              }
 120   3                      }
 121   2      
 122   2              }
 123   1      }
 124          
 125          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
