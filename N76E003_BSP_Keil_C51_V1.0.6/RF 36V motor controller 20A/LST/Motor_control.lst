C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/01/2021 16:02:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR_CONTROL
OBJECT MODULE PLACED IN .\Output\Motor_control.obj
COMPILER INVOKED BY: C:\keil5\C51\BIN\C51.EXE Code\Motor_control.c OPTIMIZE(2,SPEED) BROWSE INCDIR(..\Include) DEFINE(FO
                    -SC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Motor_control.lst) OBJECT(.\Output\Motor_control.obj)

line level    source

   1          #include "Motor_control.h"
   2          #include "common.h"
   3          #include "Function_define.h"
   4          #include "N76E003.h"
   5          #include "SFR_Macro.h"
   6          #include "Delay.h" 
   7          #include "SFR_Macro.h"
   8          
   9          #define Vref  3072;
  10          #define Ramp_up Timer0_Delay1ms(10); set_LOAD;set_PWMRUN//from 0->0x97 150 step, 10ms*150=1.5s
  11          #define set_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT0 ;EA=BIT_TMP
  12          #define set_IAPGO BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPTRG|=SET_BIT0 ;EA=BIT_TMP
  13          #define clr_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT0;EA=BIT_TMP
  14          ////////////Variables////////////////
  15          double bgvalue, ADCValue, bgvol, ADC_Vol;
  16          uint8_t  bgmark;
  17          uint8_t  bgh;
  18          uint8_t  bgl;
  19          
  20          
  21          // PWM+=KP[e(k) -e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  22          // e(k) the value difference of actual and setting e(k-1) the last time difference
  23          // In this motor control we use P
  24          // PWM = Kp[e(k) - e(k-1)]
  25          // Cbat == the current value  IO:P05 ADC value
  26          int Incremental_P(UINT8 Cbat, UINT8 CC_Value)//int can have negative num
  27          {
  28   1              static UINT8 Kp=1,Bias,Last_bias;
  29   1              static float PWM;
  30   1              Bias= Cbat-CC_Value;
  31   1              PWM-= Kp*(Bias-Last_bias);// Decreasement output
  32   1              Last_bias = Bias;
  33   1              return PWM; //The percentage of decreasment
  34   1      }
  35          
  36          void ADC_Init(void)
  37          {
  38   1      //      set_EA;
  39   1      //      set_EPI;//Enable Pin interrupt
  40   1      //      P13_Input_Mode;
  41   1      //      
  42   1      //      clr_PIPS1;
  43   1      //      clr_PIPS0;//pin1.
  44   1      //      set_PIT3;//cHANNEL 3 Edge triggered
  45   1      //      clr_PIPEN3;//P13 falling triggered
  46   1      //      set_PINEN3;
  47   1              clr_P00, clr_P10;
  48   1              clr_P12; //LED on
  49   1              clr_P10;//BC
  50   1              P17_Input_Mode;//Hall
  51   1      //      P05_Input_Mode; //current value
  52   1              clr_P05;
  53   1              P14_PushPull_Mode;
  54   1              P00_PushPull_Mode;//Forward relay
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/01/2021 16:02:36 PAGE 2   

  55   1              P10_PushPull_Mode;
  56   1              set_P14; //Enable DCDC
  57   1              
  58   1              set_IAPEN;
  59   1              IAPAL = 0x0d; IAPAH = 0x00; IAPCN = 0x04;//0x04 =Read UID
  60   1              set_IAPGO;
  61   1              bgl = IAPFD;
  62   1              bgmark = bgl&0xf0;
  63   1              
  64   1              if(bgmark == 0x80)
  65   1              {
  66   2                      bgl = bgl&0x0f;                 
  67   2                      IAPAL = 0x0c;
  68   2                      IAPAH = 0x00; 
  69   2                      set_IAPGO;
  70   2                      bgh = IAPFD;
  71   2                      bgvalue = (bgh<<4)+bgl;
  72   2                      bgvol = bgvalue*3/4;
  73   2                      bgvol = bgvol- 33;
  74   2              }
  75   1              if(bgmark==0x00)
  76   1              {
  77   2                      bgl = bgl&0x0f;
  78   2                      IAPAL = 0X0C;
  79   2                      IAPAH = 0X00;
  80   2                      set_IAPGO;
  81   2                      bgh = IAPFD;
  82   2                      bgvalue = (bgh<<4)+bgl;
  83   2                      bgvol = bgvalue*3/4;
  84   2              }
  85   1              if(bgmark==0x90)
  86   1              {
  87   2                      IAPAL = 0x0E;
  88   2                      IAPAH = 0x00;
  89   2                      set_IAPGO;
  90   2                      bgh   = IAPFD;
  91   2                      IAPAL = 0x0F;
  92   2                      IAPAH = 0x00;
  93   2                      set_IAPGO;
  94   2                      bgl = IAPFD;
  95   2                      bgl = bgl&0x0f; 
  96   2                      bgvalue = (bgh<<4)+bgl;
  97   2                      bgvol = bgvalue*3/4;
  98   2              }
  99   1              printf("\nBandgap value:%d\n", bgvalue);
 100   1              printf("\nBandgap vo ltage:%dmV\n",bgvol);
 101   1              clr_IAPEN;              // turn off IAP
 102   1              
 103   1              Enable_ADC_AIN0;                //P17 Hall pedal
 104   1      //      Enable_ADC_AIN4;                //P05 A_Det
 105   1      //      Enable_ADC_AIN1;                //P30 Speed
 106   1              for(bgh =0;bgh<3;bgh++)
 107   1              {
 108   2                      clr_ADCF;
 109   2                      set_ADCS;
 110   2                      while(ADCF==0);
 111   2                      ADCValue = (ADCRH<<4)+ADCRL;
 112   2                      printf("ADC value:%d",ADCValue);
 113   2              }
 114   1      }
 115          /* AD value= Voltage*255/5  20A=57*/
 116          UINT16 Get_CurrentValue(void)
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/01/2021 16:02:36 PAGE 3   

 117          {
 118   1              Enable_ADC_AIN4;
 119   1              clr_ADCF;
 120   1              set_ADCS;
 121   1      //      ADCValue = (ADCRH<<4)+ADCRL;
 122   1              printf("ADC value:%d",ADCValue);
 123   1              return ADCRH;
 124   1      }
 125          
 126          UINT16 Get_HallValue(void)
 127          {
 128   1              Enable_ADC_AIN0;
 129   1              clr_ADCF;
 130   1              set_ADCS;
 131   1      //      ADCValue = (ADCRH<<4)+ADCRL
 132   1      //      ADC_Vol = (bgvol*ADCValue/bgvalue);//All are decimal
 133   1              printf("ADCRH:%x\n",ADCRH);
 134   1      //      printf("ADCRL:%d",ADCRL);
 135   1      //      printf("ADC_voltage:%gmV\n",ADC_Vol);//%g don't print no meaning 0
 136   1              return ADCRH; //High 8 bits+ low 4 bits
 137   1      }
 138          
 139                  /**********************************************************************
 140                                                                  Dead time setting
 141                                                          DT=PDTCNT+1/Fsys  >Ton+Toff
 142                                                          2us= 32/16M
 143                  ********************************** 3  5************************************/
 144          void PWM_DEAD_TIME_VALUE(UINT16 DeadTimeData) //problem:when the deadtemphigh!=1, there is no dead time
 145          {
 146   1              UINT8 deadtmphigh,deadtmplow;
 147   1              deadtmplow = DeadTimeData;
 148   1              deadtmphigh = DeadTimeData>>8;
 149   1              BIT_TMP = EA;
 150   1              if (deadtmphigh==0x01)
 151   1              {
 152   2                      EA = 0;
 153   2                      TA = 0xAA;
 154   2                      TA = 0x55;
 155   2                      PDTEN|=0x10;
 156   2              }
 157   1              TA = 0xAA;
 158   1              TA = 0x55;
 159   1              PDTCNT = deadtmplow;
 160   1              EA = BIT_TMP;
 161   1      }
 162          
 163          void PWM_Init()
 164          {
 165   1              PWM5_P03_OUTPUT_ENABLE;
 166   1              PWM4_P01_OUTPUT_ENABLE;//Upper bridge
 167   1              PWM4_OUTPUT_INVERSE;
 168   1              PWM5_OUTPUT_INVERSE;    
 169   1              PWM_COMPLEMENTARY_MODE;//In this mode the dead time can work
 170   1              
 171   1              PWM_CLOCK_DIV_8;
 172   1      //      PWMPH = 0x07;
 173   1      //      PWMPL = 0xcf;   //1K
 174   1              PWMPH = 0x00;   //Period setting;
 175   1              PWMPL = 0x96;   //13.3KHz
 176   1              
 177   1              set_SFRPAGE;
 178   1              PWM5H = 0x00;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/01/2021 16:02:36 PAGE 4   

 179   1              PWM5L = 0x00;
 180   1              clr_SFRPAGE;
 181   1              
 182   1              PWM45_DEADTIME_ENABLE;
 183   1              PWM_DEAD_TIME_VALUE(32); //32=2us dead time     
 184   1              set_LOAD;
 185   1              set_PWMRUN;
 186   1              /**********************************************************************
 187   1              PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV> 
 188   1                                                                      = (16MHz/8)/(0x7CF + 1)
 189   1                                                                      = 1KHz (1ms)
 190   1              =(16MHz/8)/(0x96+1)
 191   1      
 192   1              ***********************************************************************/
 193   1      }
 194          
 195          void PWM_Setting(UINT16 n)      //1n = 1%
 196          {
 197   1              set_SFRPAGE; //PWM4\5 SETTING
 198   1              PWM4H = (0xff00&n)>>8;//Lower bridge P01
 199   1              if(n>100)
 200   1              {
 201   2      //              PWM4L = 0x97;
 202   2                      for(PWM4L;PWM4L<0X97;PWM4L++)
 203   2                      {
 204   3                              Ramp_up;
 205   3                      }
 206   2      //              PWM4L = 0x00;  // In complementary mode it is inversed
 207   2              }
 208   1              else if(n<=0)
 209   1              {
 210   2                      PWM4L = 0X00;
 211   2      //              PWM4L = 0x97;
 212   2              }
 213   1              else
 214   1              {
 215   2      //              PWM4L = n&&0xf;
 216   2                      UINT8 i = n*3/2;
 217   2                      if(PWM4L<i)
 218   2                      {
 219   3                              for(PWM4L;PWM4L<i;PWM4L++)
 220   3                              {
 221   4                                      Ramp_up;
 222   4                              }
 223   3                      }
 224   2                      else
 225   2                      {
 226   3                              for(PWM4L;PWM4L>i;PWM4L--)
 227   3                              {
 228   4                                      Ramp_up;
 229   4                              }
 230   3                      }
 231   2      //              PWM4L = (n*3/2);
 232   2              }
 233   1      
 234   1      }
 235          
 236          //void PinInterrupt (void) interrupt 7
 237          //{
 238          //      printf("Falling edge intterrupt triggered");
 239          //}

C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/01/2021 16:02:36 PAGE 5   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1190    ----
   CONSTANT SIZE    =     66    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
