C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/15/2021 22:52:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR_CONTROL
OBJECT MODULE PLACED IN .\Output\Motor_control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\Motor_control.c OPTIMIZE(0,SPEED) BROWSE INCDIR(..\Include) DEFINE(
                    -FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Motor_control.lst) OBJECT(.\Output\Motor_control.obj)

line level    source

   1          #include "Motor_control.h"
   2          #include "common.h"
   3          #include "Function_define.h"
   4          #include "N76E003.h"
   5          #include "SFR_Macro.h"
   6          #include "Delay.h" 
   7          #include "SFR_Macro.h"
   8          
   9          #define Vref  3072;
  10          #define Ramp_up Timer2_Delay500us(20); set_LOAD;set_PWMRUN//from 0->0x97 150 step, 10ms*150=1.5s
  11          #define set_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT0 ;EA=BIT_TMP
  12          #define set_IAPGO BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPTRG|=SET_BIT0 ;EA=BIT_TMP
  13          #define clr_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT0;EA=BIT_TMP
  14          //#define TIM1_INIT  TH0 = 0XFC
  15          ////////////Variables////////////////
  16          double bgvalue, ADCValue, bgvol, ADC_Vol;
  17          uint8_t  bgmark;
  18          uint8_t  bgh;
  19          uint8_t  bgl;
  20          static uint8_t  flag=1;
  21          
  22          
  23          // PWM+=KP[e(k) -e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  24          // e(k) the value difference of actual and setting e(k-1) the last time difference
  25          // In this motor control we use P
  26          // PWM = Kp[e(k) - e(k-1)]
  27          // Cbat == the current value  IO:P05 ADC value
  28          int Incremental_P(UINT8 Cbat, UINT8 CC_Value)//int can have negative num
  29          {
  30   1              static UINT8 Kp=1,Bias,Last_bias;
  31   1              static float PWM;
  32   1              Bias= Cbat-CC_Value;
  33   1              PWM-= Kp*(Bias-Last_bias);// Decreasement output
  34   1              Last_bias = Bias;
  35   1              return PWM; //The percentage of decreasment
  36   1      }
  37          void ADC_Init(void)
  38          {
  39   1              P17_Input_Mode;//Hall
  40   1              P30_Input_Mode;//Speed shift
  41   1              P05_Input_Mode; //current value
  42   1              P13_Input_Mode;
  43   1              P12_PushPull_Mode;
  44   1              P01_PushPull_Mode;
  45   1              P03_PushPull_Mode;
  46   1              P14_PushPull_Mode;
  47   1              P00_PushPull_Mode;//Forward relay
  48   1              P10_PushPull_Mode;
  49   1              
  50   1              clr_P12; //LED on
  51   1              clr_P10;//BC
  52   1              clr_P05;
  53   1              set_P14; //Enable DCDC
  54   1              set_P13;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/15/2021 22:52:22 PAGE 2   

  55   1              clr_P00, clr_P10;
  56   1              
  57   1              set_IAPEN;
  58   1              IAPAL = 0x0d; IAPAH = 0x00; IAPCN = 0x04;//0x04 =Read UID
  59   1              set_IAPGO;
  60   1              bgl = IAPFD;
  61   1              bgmark = bgl&0xf0;
  62   1              
  63   1              if(bgmark == 0x80)
  64   1              {
  65   2                      bgl = bgl&0x0f;                 
  66   2                      IAPAL = 0x0c;
  67   2                      IAPAH = 0x00; 
  68   2                      set_IAPGO;
  69   2                      bgh = IAPFD;
  70   2                      bgvalue = (bgh<<4)+bgl;
  71   2                      bgvol = bgvalue*3/4;
  72   2                      bgvol = bgvol- 33;
  73   2              }
  74   1              if(bgmark==0x00)
  75   1              {
  76   2                      bgl = bgl&0x0f;
  77   2                      IAPAL = 0X0C;
  78   2                      IAPAH = 0X00;
  79   2                      set_IAPGO;
  80   2                      bgh = IAPFD;
  81   2                      bgvalue = (bgh<<4)+bgl;
  82   2                      bgvol = bgvalue*3/4;
  83   2              }
  84   1              if(bgmark==0x90)
  85   1              {
  86   2                      IAPAL = 0x0E;
  87   2                      IAPAH = 0x00;
  88   2                      set_IAPGO;
  89   2                      bgh   = IAPFD;
  90   2                      IAPAL = 0x0F;
  91   2                      IAPAH = 0x00;
  92   2                      set_IAPGO;
  93   2                      bgl = IAPFD;
  94   2                      bgl = bgl&0x0f; 
  95   2                      bgvalue = (bgh<<4)+bgl;
  96   2                      bgvol = bgvalue*3/4;
  97   2              }
  98   1              printf("\nBandgap value:%d\n", bgvalue);
  99   1              printf("\nBandgap vo ltage:%dmV\n",bgvol);
 100   1              clr_IAPEN;              // turn off IAP
 101   1              Enable_ADC_AIN0;                //P17 Hall pedal
 102   1              for(bgh =0;bgh<3;bgh++)
 103   1              {
 104   2                      clr_ADCF;
 105   2                      set_ADCS;
 106   2                      while(ADCF==0);
 107   2                      ADCValue = (ADCRH<<4)+ADCRL;
 108   2                      printf("ADC value:%d",ADCValue);
 109   2              }
 110   1      }
 111          /* AD value= Voltage*255/5  20A=57*/
 112          UINT16 Get_CurrentValue(void)
 113          {
 114   1              Enable_ADC_AIN4;
 115   1              clr_ADCF;
 116   1              set_ADCS;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/15/2021 22:52:22 PAGE 3   

 117   1              while(ADCF==0);
 118   1              printf("ADC value:%d",ADCRH);
 119   1              return ADCRH;
 120   1      }
 121          
 122          UINT16 Get_HallValue(void)
 123          {
 124   1              Enable_ADC_AIN0;
 125   1              clr_ADCF;
 126   1              set_ADCS;//Enable ADC transfer
 127   1              printf("ADC_voltage:%gmV\n",ADCRH);//%g don't print no meaning 0
 128   1              while(ADCF==0);//ADC transfer done
 129   1              return ADCRH; //High 8 bits+ low 4 bits
 130   1      }
 131          
 132          UINT8 Get_Speedvalue(void)
 133          {
 134   1              Enable_ADC_AIN1;
 135   1              clr_ADCF;
 136   1              set_ADCS;
 137   1              while(ADCF==0);
 138   1              if(ADCRH>100)
 139   1                      return 1;
 140   1              else 
 141   1                      return 0;
 142   1      }
 143          
 144          void Relay_On(UINT8 On_FB)//1= F 0 = B
 145          {
 146   1              if(On_FB==1)
 147   1              {
 148   2                      clr_P10;
 149   2                      set_P00;
 150   2              }
 151   1              else
 152   1              {
 153   2                      clr_P00;
 154   2                      set_P10;
 155   2              }
 156   1                      
 157   1      }
 158          
 159          void Relay_Off(void)
 160          {
 161   1              clr_P00;
 162   1              clr_P10;
 163   1      }
 164                  /**********************************************************************
 165                                                                  Dead time setting
 166                                                          DT=PDTCNT+1/Fsys  >Ton+Toff
 167                                                          2us= 32/16M
 168                  ********************************** 3  5************************************/
 169          void PWM_DEAD_TIME_VALUE(UINT16 DeadTimeData) //problem:when the deadtemphigh!=1, there is no dead time
 170          {
 171   1              UINT8 deadtmphigh,deadtmplow;
 172   1              deadtmplow = DeadTimeData;
 173   1              deadtmphigh = DeadTimeData>>8;
 174   1              BIT_TMP = EA;
 175   1              if (deadtmphigh==0x01)
 176   1              {
 177   2                      EA = 0;
 178   2                      TA = 0xAA;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/15/2021 22:52:22 PAGE 4   

 179   2                      TA = 0x55;
 180   2                      PDTEN|=0x10;
 181   2              }
 182   1              TA = 0xAA;
 183   1              TA = 0x55;
 184   1              PDTCNT = deadtmplow;
 185   1              EA = BIT_TMP;
 186   1      }
 187          
 188          void PWM_Init()
 189          {
 190   1              PWM5_P03_OUTPUT_ENABLE;
 191   1              PWM4_P01_OUTPUT_ENABLE;//Upper bridge
 192   1              PWM4_OUTPUT_INVERSE;
 193   1              PWM_COMPLEMENTARY_MODE;//In this mode the dead time can work
 194   1              
 195   1              PWM_CLOCK_DIV_32;
 196   1      //#if 0
 197   1      //      PWMPH = 0x07;
 198   1      //      PWMPL = 0xcf;   //1K
 199   1      //#endif
 200   1              PWMPH = 0x00;   //Period setting;
 201   1              PWMPL = 0xff;   //1.9KHz
 202   1              
 203   1              set_SFRPAGE;
 204   1              PWM4H = 0x00;
 205   1              PWM4L = 0x00;
 206   1              clr_SFRPAGE;
 207   1              
 208   1              PWM45_DEADTIME_ENABLE;
 209   1              PWM_DEAD_TIME_VALUE(64); //31=2us dead time      95=6us 63=4us input PDTCNT value
 210   1              set_LOAD;
 211   1              set_PWMRUN;
 212   1              /**********************************************************************
 213   1              PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV> 
 214   1                                                                      = (16MHz/8)/(0x7CF + 1)
 215   1                                                                      = 1KHz (1ms)
 216   1              =(16MHz/8)/(0x96+1)
 217   1      
 218   1              ***********************************************************************/
 219   1      }
 220          
 221          void PWM_Setting(UINT8 n, UINT8 FB)     //1n = 1%
 222          {
 223   1              set_SFRPAGE; //PWM4\5 SETTING
 224   1              flag = 1;
 225   1              n = n>100? 100: n;
 226   1              if(flag)
 227   1              {
 228   2                      UINT8 i = n*5/2;
 229   2                      if(n>=0&&n<=100)
 230   2                      {
 231   3                              if(PWM4L<i)
 232   3                              {
 233   4                                      PWM4L++;
 234   4                              }
 235   3                              else if(PWM4L==i)// jump out
 236   3                              {
 237   4                                      flag = 0;
 238   4                              }
 239   3                              else
 240   3                              {
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     12/15/2021 22:52:22 PAGE 5   

 241   4                                      PWM4L=i;
 242   4                              }
 243   3                      }
 244   2                      if(PWM4L>10)
 245   2                              Relay_On(FB);
 246   2      //              else
 247   2      //                      Relay_Off();
 248   2                      Ramp_up;// 10 = 2.55s ramp up
 249   2              }
 250   1              
 251   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1281    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
