<<<<<<< HEAD
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 18:41:41 PAGE 1   
=======
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 17:40:15 PAGE 1   
>>>>>>> c548ccf3cf9bf155944ad87c21ee7a5ac83c4a3a


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR_CONTROL
OBJECT MODULE PLACED IN .\Output\Motor_control.obj
COMPILER INVOKED BY: C:\keil5\C51\BIN\C51.EXE Code\Motor_control.c OPTIMIZE(2,SPEED) BROWSE INCDIR(..\Include) DEFINE(FO
                    -SC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Motor_control.lst) OBJECT(.\Output\Motor_control.obj)

line level    source

   1          #include "Motor_control.h"
   2          #include "common.h"
   3          #include "Function_define.h"
   4          #include "N76E003.h"
   5          #include "SFR_Macro.h"
   6          #include "Delay.h" 
   7          #include "SFR_Macro.h"
   8          
   9          #define Vref  3072;
  10          #define Ramp_up Timer0_Delay1ms(5); set_LOAD;set_PWMRUN//from 0->0x97 150 step, 10ms*150=1.5s
  11          #define set_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON|=SET_BIT0 ;EA=BIT_TMP
  12          #define set_IAPGO BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;IAPTRG|=SET_BIT0 ;EA=BIT_TMP
  13          #define clr_IAPEN BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CHPCON&=~SET_BIT0;EA=BIT_TMP
  14          ////////////Variables////////////////
  15          double bgvalue, ADCValue, bgvol, ADC_Vol;
  16          uint8_t  bgmark;
  17          uint8_t  bgh;
  18          uint8_t  bgl;
  19          
  20          
  21          // PWM+=KP[e(k) -e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  22          // e(k) the value difference of actual and setting e(k-1) the last time difference
  23          // In this motor control we use P
  24          // PWM = Kp[e(k) - e(k-1)]
  25          // Cbat == the current value  IO:P05 ADC value
  26          int Incremental_P(UINT8 Cbat, UINT8 CC_Value)//int can have negative num
  27          {
  28   1              static UINT8 Kp=1,Bias,Last_bias;
  29   1              static float PWM;
  30   1              Bias= Cbat-CC_Value;
  31   1              PWM-= Kp*(Bias-Last_bias);// Decreasement output
  32   1              Last_bias = Bias;
  33   1              return PWM; //The percentage of decreasment
  34   1      }
  35          
  36          void ADC_Init(void)
  37          {
  38   1      //      set_EA;
  39   1      //      set_EPI;//Enable Pin interrupt
  40   1      //      P13_Input_Mode;
  41   1      //      
  42   1      //      clr_PIPS1;
  43   1      //      clr_PIPS0;//pin1.
  44   1      //      set_PIT3;//cHANNEL 3 Edge triggered
  45   1      //      clr_PIPEN3;//P13 falling triggered
  46   1      //      set_PINEN3;
  47   1              set_P12; //LED on
  48   1              clr_P10;//BC
  49   1              P17_Input_Mode;//Hall
  50   1      //      P05_Input_Mode; //current value
  51   1              clr_P05;
  52   1              P01_PushPull_Mode;
  53   1              P14_PushPull_Mode;
  54   1              P14_PushPull_Mode;
<<<<<<< HEAD
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 18:41:41 PAGE 2   
=======
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 17:40:15 PAGE 2   
>>>>>>> c548ccf3cf9bf155944ad87c21ee7a5ac83c4a3a

  55   1              P00_PushPull_Mode;//Forward relay
  56   1              P10_PushPull_Mode;
  57   1              set_P14; //Enable DCDC
  58   1              clr_P00, clr_P10;
  59   1              
  60   1              set_IAPEN;
  61   1              IAPAL = 0x0d; IAPAH = 0x00; IAPCN = 0x04;//0x04 =Read UID
  62   1              set_IAPGO;
  63   1              bgl = IAPFD;
  64   1              bgmark = bgl&0xf0;
  65   1              
  66   1              if(bgmark == 0x80)
  67   1              {
  68   2                      bgl = bgl&0x0f;                 
  69   2                      IAPAL = 0x0c;
  70   2                      IAPAH = 0x00; 
  71   2                      set_IAPGO;
  72   2                      bgh = IAPFD;
  73   2                      bgvalue = (bgh<<4)+bgl;
  74   2                      bgvol = bgvalue*3/4;
  75   2                      bgvol = bgvol- 33;
  76   2              }
  77   1              if(bgmark==0x00)
  78   1              {
  79   2                      bgl = bgl&0x0f;
  80   2                      IAPAL = 0X0C;
  81   2                      IAPAH = 0X00;
  82   2                      set_IAPGO;
  83   2                      bgh = IAPFD;
  84   2                      bgvalue = (bgh<<4)+bgl;
  85   2                      bgvol = bgvalue*3/4;
  86   2              }
  87   1              if(bgmark==0x90)
  88   1              {
  89   2                      IAPAL = 0x0E;
  90   2                      IAPAH = 0x00;
  91   2                      set_IAPGO;
  92   2                      bgh   = IAPFD;
  93   2                      IAPAL = 0x0F;
  94   2                      IAPAH = 0x00;
  95   2                      set_IAPGO;
  96   2                      bgl = IAPFD;
  97   2                      bgl = bgl&0x0f; 
  98   2                      bgvalue = (bgh<<4)+bgl;
  99   2                      bgvol = bgvalue*3/4;
 100   2              }
 101   1              printf("\nBandgap value:%d\n", bgvalue);
 102   1              printf("\nBandgap vo ltage:%dmV\n",bgvol);
 103   1              clr_IAPEN;              // turn off IAP
 104   1              
 105   1              Enable_ADC_AIN0;                //P17 Hall pedal
 106   1      //      Enable_ADC_AIN4;                //P05 A_Det
 107   1      //      Enable_ADC_AIN1;                //P30 Speed
 108   1              for(bgh =0;bgh<3;bgh++)
 109   1              {
 110   2                      clr_ADCF;
 111   2                      set_ADCS;
 112   2                      while(ADCF==0);
 113   2                      ADCValue = (ADCRH<<4)+ADCRL;
 114   2                      printf("ADC value:%d",ADCValue);
 115   2              }
 116   1      }
<<<<<<< HEAD
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 18:41:41 PAGE 3   
=======
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 17:40:15 PAGE 3   
>>>>>>> c548ccf3cf9bf155944ad87c21ee7a5ac83c4a3a

 117          /* AD value= Voltage*255/5  20A=57*/
 118          UINT16 Get_CurrentValue(void)
 119          {
 120   1              Enable_ADC_AIN4;
 121   1              clr_ADCF;
 122   1              set_ADCS;
 123   1      //      ADCValue = (ADCRH<<4)+ADCRL;
 124   1              printf("ADC value:%d",ADCValue);
 125   1              return ADCRH;
 126   1      }
 127          
 128          UINT16 Get_HallValue(void)
 129          {
 130   1              Enable_ADC_AIN0;
 131   1              clr_ADCF;
 132   1              set_ADCS;
 133   1      //      ADCValue = (ADCRH<<4)+ADCRL
 134   1      //      ADC_Vol = (bgvol*ADCValue/bgvalue);//All are decimal
 135   1              printf("ADCRH:%x\n",ADCRH);
 136   1      //      printf("ADCRL:%d",ADCRL);
 137   1      //      printf("ADC_voltage:%gmV\n",ADC_Vol);//%g don't print no meaning 0
 138   1              return ADCRH; //High 8 bits+ low 4 bits
 139   1      }
 140          
 141                  /**********************************************************************
 142                                                                  Dead time setting
 143                                                          DT=PDTCNT+1/Fsys  >Ton+Toff
 144                                                          2us= 32/16M
 145                  ********************************** 3  5************************************/
 146          void PWM_DEAD_TIME_VALUE(UINT16 DeadTimeData) //problem:when the deadtemphigh!=1, there is no dead time
 147          {
 148   1              UINT8 deadtmphigh,deadtmplow;
 149   1              deadtmplow = DeadTimeData;
 150   1              deadtmphigh = DeadTimeData>>8;
 151   1              BIT_TMP = EA;
 152   1              if (deadtmphigh==0x01)
 153   1              {
 154   2                      EA = 0;
 155   2                      TA = 0xAA;
 156   2                      TA = 0x55;
 157   2                      PDTEN|=0x10;
 158   2              }
 159   1              TA = 0xAA;
 160   1              TA = 0x55;
 161   1              PDTCNT = deadtmplow;
 162   1              EA = BIT_TMP;
 163   1      }
 164          
 165          void PWM_Init()
 166          {
 167   1              PWM5_P03_OUTPUT_ENABLE;
 168   1              PWM4_P01_OUTPUT_ENABLE;//Upper bridge
 169   1      //      PWM4_OUTPUT_INVERSE;
 170   1              PWM5_OUTPUT_INVERSE;    
 171   1              PWM_COMPLEMENTARY_MODE;//In this mode the dead time can work
 172   1              
 173   1              PWM_CLOCK_DIV_32;
 174   1      //      PWMPH = 0x07;
 175   1      //      PWMPL = 0xcf;   //1K
 176   1              PWMPH = 0x00;   //Period setting;
 177   1              PWMPL = 0xff;   //1.9KHz
 178   1              
<<<<<<< HEAD
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 18:41:41 PAGE 4   
=======
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 17:40:15 PAGE 4   
>>>>>>> c548ccf3cf9bf155944ad87c21ee7a5ac83c4a3a

 179   1              set_SFRPAGE;
 180   1              PWM4H = 0x00;
 181   1              PWM4L = 0xff;
 182   1              clr_SFRPAGE;
 183   1              
 184   1              PWM45_DEADTIME_ENABLE;
 185   1              PWM_DEAD_TIME_VALUE(64); //31=2us dead time      95=6us 63=4us input PDTCNT value
 186   1              set_LOAD;
 187   1              set_PWMRUN;
 188   1              /**********************************************************************
 189   1              PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV> 
 190   1                                                                      = (16MHz/8)/(0x7CF + 1)
 191   1                                                                      = 1KHz (1ms)
 192   1              =(16MHz/8)/(0x96+1)
 193   1      
 194   1              ***********************************************************************/
 195   1      }
 196          
 197          void PWM_Setting(UINT16 n)      //1n = 1%
 198          {
 199   1              set_SFRPAGE; //PWM4\5 SETTING
 200   1      //      PWM4H = (0xff00&n)>>8;//Lower bridge P01
 201   1              if(n>100)
 202   1              {
 203   2      //              PWM4L = 0x97;
 204   2                      for(PWM4L;PWM4L>0X00;PWM4L--)
 205   2                      {
 206   3                              Ramp_up;
 207   3                      }
 208   2      //              PWM4L = 0x00;  // In complementary mode it is inversed
 209   2              }
 210   1              else if(n<=0)
 211   1              {
 212   2                      for(PWM4L;PWM4L<0Xff;PWM4L++)
 213   2                      {
 214   3                              Ramp_up;
 215   3                      }
 216   2              }
 217   1              else
 218   1              {
 219   2      //              PWM4L = n&&0xf;
 220   2                      UINT8 i =255- n*5/2;
 221   2                      if(PWM4L<i)
 222   2                      {
 223   3                              for(PWM4L;PWM4L<i;PWM4L++)
 224   3                              {
 225   4                                      Ramp_up;
 226   4                              }
 227   3                      }
 228   2                      else
 229   2                      {
<<<<<<< HEAD
 230   3                              PWM4L=i;
 231   3                              Ramp_up;
 232   3      //                      for(PWM4L;PWM4L>i;PWM4L--)
 233   3      //                      {
 234   3      //                              Ramp_up;
 235   3      //                      }
 236   3                      }
 237   2      //              PWM4L = (n*3/2);
 238   2              }
 239   1      
 240   1      }
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 18:41:41 PAGE 5   
=======
 230   3                              for(PWM4L;PWM4L>i;PWM4L--)
 231   3                              {
 232   4                                      Ramp_up;
 233   4                              }
 234   3                      }
 235   2      //              PWM4L = (n*3/2);
 236   2              }
 237   1      
 238   1      }
 239          
 240          //void PinInterrupt (void) interrupt 7
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     11/05/2021 17:40:15 PAGE 5   
>>>>>>> c548ccf3cf9bf155944ad87c21ee7a5ac83c4a3a

 241          
 242          //void PinInterrupt (void) interrupt 7
 243          //{
 244          //      printf("Falling edge intterrupt triggered");
 245          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1218    ----
   CONSTANT SIZE    =     66    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
