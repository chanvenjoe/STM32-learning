C51 COMPILER V9.60.0.0   ADC                                                               12/17/2021 18:19:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\ADC.obj
COMPILER INVOKED BY: C:\keil5\C51\BIN\C51.EXE Code\ADC.C OPTIMIZE(0,SPEED) BROWSE INCDIR(..\Include) DEFINE(FOSC_160000)
                    - DEBUG OBJECTEXTEND PRINT(.\LST\ADC.lst) OBJECT(.\Output\ADC.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "Common.h"
   5          #include "Delay.h"
   6          #include "Motor_control.h"
   7          
   8          //*****************  The Following is in define in Fucntion_define.h  ***************************
   9          //****** Always include Function_define.h call the define you want, detail see main(void) *******
  10          //***********************************************************************************************
  11          #define CCvalue 5 //  change the current regulation value  if it is a number, don't use ";"
  12          #define TH0_INIT                (65536-65536)           //(65536-55536=10000)= 7.5MS @16MHz/12==1.333333M =>0.00000075s/clock   =>1
             -0000 clocks = 0.0075s= 7.5ms  1333=1ms
  13          #define TL0_INIT        (65536-1334)
  14          
  15          #define Not_Pressed PWM5_P03_OUTPUT_DISABLE; PWM4_P01_OUTPUT_DISABLE; clr_P01; set_P03;
  16          #define Pressed PWM5_P03_OUTPUT_ENABLE; PWM4_P01_OUTPUT_ENABLE;
  17          
  18          bit pwr_d=0;
  19          static u8 u8TL1_Tmp;
  20          
  21          
  22          /******************************************************************************
  23          The main C function.  Program execution starts
  24          here after stack initialization.
  25          ******************************************************************************/
  26          void WTD_Init();
  27          void Timer_Init();
  28          void Pin_Interruput_Init();
  29          
  30          void main (void)
  31          {       
  32   1              Set_All_GPIO_Quasi_Mode;                        //For GPIO1 output, Find in "Function_define.h" - "GPIO INIT"
  33   1              InitialUART0_Timer1(115200);
  34   1              Timer_Init();
  35   1              WTD_Init();
  36   1              Pin_Interruput_Init();
  37   1              ADC_Init();                                                     
  38   1              PWM_Init();
  39   1              while(1)
  40   1              {
  41   2                      UINT8 i = Get_HallValue();// can use public structure or ...            The variables should be define at the firs
             -t line
  42   2                      UINT8 j = Get_CurrentValue();
  43   2                      UINT8 k = Get_Speedvalue();
  44   2                      UINT8 pwm_step = (i-51)>=0? (i-51)*2/3:0;  //return  %
  45   2                      set_WDCLR;
  46   2                      if(i>80)// to prevent hall initial voltage is 1.0v
  47   2                      {
  48   3                              Pressed
  49   3                              switch(j>57)//20A=57
  50   3                              {
  51   4                                      case 0:
  52   4                                      {
C51 COMPILER V9.60.0.0   ADC                                                               12/17/2021 18:19:47 PAGE 2   

  53   5                                              PWM_Setting(pwm_step,k);// PWM first, or the moment relay on, PWM still 0 cause big inrush
  54   5                                      }
  55   4                                      break;
  56   4                                      case 1:
  57   4                                      {
  58   5                                              if(PWM4L>125)// PWM>50%
  59   5                                              {
  60   6                                                      j=j*0.35;// Current calculation from current shunt-> OA-> ADC j=actural current
  61   6                                                      PWM4L=(PWM4L+Incremental_P(j, CCvalue)*3/2)>50? (PWM4L+Incremental_P(j, 20)*3/2):50;;//PWM delta val
             -ue, if the 
  62   6                                                                                                      //reserve for timer counting
  63   6                                                      set_LOAD;set_PWMRUN;
  64   6              //                                      Relay_On(k);            //Forward Relay open
  65   6                                                      j=0;
  66   6                                              }
  67   5                                      }
  68   4                                      break;
  69   4                                      default:
  70   4                                              break;
  71   4                              }
  72   3                      }
  73   2                      else//the brake should only works when pedal released
  74   2                      {
  75   3                              if(P00==1||P10==1)
  76   3                              {
  77   4                                      PWM4L=0;
  78   4                                      set_LOAD;set_PWMRUN;
  79   4                                      Timer1_Delay10ms(40);   
  80   4                                      PWM4L=7;
  81   4                                      set_LOAD;set_PWMRUN;
  82   4                                      Timer1_Delay10ms(40);
  83   4                                      Relay_Off();
  84   4                                      Not_Pressed
  85   4                              }
  86   3                              else
  87   3                              {
  88   4                                      PWM4L=0;
  89   4                                      set_LOAD;set_PWMRUN;
  90   4                                      Relay_Off();
  91   4                              }
  92   3                      }
  93   2                      if(pwr_d==1)
  94   2                      {
  95   3                              set_P12;
  96   3                              set_PD;
  97   3                      }
  98   2              }
  99   1      }
 100          
 101          void WTD_Init()
 102          {
 103   1              EA =1; //Global inter_rupt enable
 104   1              TA=0xAA;TA=0x55;WDCON=0x07;             //Setting WDT prescale 
 105   1              set_WDTR;                       //WDT run
 106   1              set_WDCLR;                                              //Clear WDT timer
 107   1              set_EWDT;// WTD inter_rupt enable
 108   1      }
 109          
 110          void Timer_Init()
 111          {
 112   1              TMOD = 0x01;
 113   1              clr_T0M; //timer0 clk=Fsys/12
C51 COMPILER V9.60.0.0   ADC                                                               12/17/2021 18:19:47 PAGE 3   

 114   1              TH0 = HIBYTE(TH0_INIT);
 115   1              TL0 = LOBYTE(TH0_INIT);
 116   1          set_ET0;                                    //enable Timer0 interrupt
 117   1          set_EA;                                     //enable interrupts
 118   1          set_TR0;                                    //Timer0 run
 119   1              IPH = 0X02;
 120   1              IP=0X02;
 121   1      }
 122          
 123          void Pin_Interruput_Init()
 124          {
 125   1              PICON = 0x21;// Port1 Pin3 edge trigger
 126   1              PINEN = 0x08; //PIN3 falling/low trigger PIPEN: Rising/high trigger
 127   1              PIPEN = 0X00; 
 128   1              EIE   = 0x02; // PIN interrupt enable
 129   1              EIP   = 0x02;           //Priority  1 1 (highest)
 130   1              EIPH  = 0X02;
 131   1              set_P1S_3; // Pin3 Schmitt trigger
 132   1      }
 133          
 134          void Timer0_IRS() interrupt 1
 135          {
 136   1      //      TF0 = 0;
 137   1              TH0 = HIBYTE(TH0_INIT);
 138   1              TL0 = LOBYTE(TH0_INIT);  
 139   1          if(u8TL1_Tmp++>9)
 140   1              {
 141   2                      P12 = ~P12;   
 142   2                      u8TL1_Tmp=0;
 143   2              }
 144   1      }
 145          
 146          void Pin_Interruput() interrupt 7
 147          {
 148   1              pwr_d =~ pwr_d;
 149   1              clr_PIF3;
 150   1              TR0=~TR0;
 151   1              
 152   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    597    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
