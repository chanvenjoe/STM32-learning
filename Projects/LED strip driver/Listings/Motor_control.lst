C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR_CONTROL
OBJECT MODULE PLACED IN .\Objects\Motor_control.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Functions\Motor_control.c COMPACT OPTIMIZE(0,SPEED) BROWSE INCDIR(..\Inc
                    -lude) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\Motor_control.lst) OBJECT(.\Objects\Motor_control.obj)

line level    source

   1          #include "Motor_control.h"
   2          #include "common.h"
   3          #include "Function_define.h"
   4          #include "N76E003.h"
   5          #include "SFR_Macro.h"
   6          #include "Delay.h" 
   7          #include "SFR_Macro.h"
   8          
   9          
  10          //#define TIM1_INIT  TH0 = 0XFC
  11          
  12          ////////////Variables////////////////
  13          bit pwr_d=0;
  14          double bgvalue, ADCValue, bgvol, ADC_Vol;
  15          
  16          u8  bgmark;
  17          u8  bgh;
  18          u8  bgl;
  19          static u8  flag=1;
  20          static u8 u8TL1_Tmp;
  21          
  22          enum Speed
  23          {
  24                  Rev     ,
  25                  S1      ,
  26                  S2      ,
  27                  S3      ,
  28                  ERR
  29          };
  30          
  31          // PWM+=KP[e(k) -e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  32          // e(k) the value difference of actual and setting e(k-1) the last time difference
  33          // In this motor control we use P
  34          // PWM = Kp[e(k) - e(k-1)]
  35          // Cbat == the current value  IO:P05 ADC value
  36          int Incremental_P(UINT8 Cbat, UINT8 CC_Value)//int can have negative num
  37          {
  38   1              static UINT8 Kp=1,Bias,Last_bias;
  39   1              static float PWM;
  40   1              Bias= Cbat-CC_Value;
  41   1              PWM-= Kp*(Bias-Last_bias);// Decreasement output
  42   1              Last_bias = Bias;
  43   1              return PWM; //The percentage of decreasment
  44   1      }
  45          
  46          void System_init()
  47          {
  48   1              Set_All_GPIO_Quasi_Mode;                        //For GPIO1 output, Find in "Function_define.h" - "GPIO INIT"
  49   1              InitialUART0_Timer1(115200);
  50   1              Timer_Init();
  51   1              WTD_Init();
  52   1              Pin_Interruput_Init();
  53   1              ADC_Init();                                                     
  54   1              PWM_Init();
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 2   

  55   1      }
  56          
  57          void ADC_Init(void)/* AD value= Voltage*255/5  20A=57*/
  58          {
  59   1              P17_Input_Mode;//Hall
  60   1              P30_Input_Mode;//Speed shift
  61   1              P05_Input_Mode; //current value
  62   1              P13_Input_Mode;
  63   1              P12_PushPull_Mode;
  64   1              P01_PushPull_Mode;
  65   1              P03_PushPull_Mode;
  66   1              P14_PushPull_Mode;
  67   1              P00_PushPull_Mode;//Forward relay
  68   1              P10_PushPull_Mode;
  69   1              
  70   1              clr_P12; //LED on
  71   1              clr_P10;//BC
  72   1              clr_P05;
  73   1              set_P14; //Enable DCDC
  74   1              set_P13;
  75   1              clr_P00, clr_P10;
  76   1              
  77   1              set_IAPEN;
  78   1              IAPAL = 0x0d; IAPAH = 0x00; IAPCN = 0x04;//0x04 =Read UID
  79   1              set_IAPGO;
  80   1              bgl = IAPFD;
  81   1              bgmark = bgl&0xf0;
  82   1              
  83   1              if(bgmark == 0x80)
  84   1              {
  85   2                      bgl = bgl&0x0f;                 
  86   2                      IAPAL = 0x0c;
  87   2                      IAPAH = 0x00; 
  88   2                      set_IAPGO;
  89   2                      bgh = IAPFD;
  90   2                      bgvalue = (bgh<<4)+bgl;
  91   2                      bgvol = bgvalue*3/4;
  92   2                      bgvol = bgvol- 33;
  93   2              }
  94   1              if(bgmark==0x00)
  95   1              {
  96   2                      bgl = bgl&0x0f;
  97   2                      IAPAL = 0X0C;
  98   2                      IAPAH = 0X00;
  99   2                      set_IAPGO;
 100   2                      bgh = IAPFD;
 101   2                      bgvalue = (bgh<<4)+bgl;
 102   2                      bgvol = bgvalue*3/4;
 103   2              }
 104   1              if(bgmark==0x90)
 105   1              {
 106   2                      IAPAL = 0x0E;
 107   2                      IAPAH = 0x00;
 108   2                      set_IAPGO;
 109   2                      bgh   = IAPFD;
 110   2                      IAPAL = 0x0F;
 111   2                      IAPAH = 0x00;
 112   2                      set_IAPGO;
 113   2                      bgl = IAPFD;
 114   2                      bgl = bgl&0x0f; 
 115   2                      bgvalue = (bgh<<4)+bgl;
 116   2                      bgvol = bgvalue*3/4;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 3   

 117   2              }
 118   1      //      printf("\nBandgap value:%d\n", bgvalue);
 119   1      //      printf("\nBandgap vo ltage:%dmV\n",bgvol);
 120   1              clr_IAPEN;              // turn off IAP
 121   1              Enable_ADC_AIN0;                //P17 Hall pedal
 122   1              for(bgh =0;bgh<3;bgh++)
 123   1              {
 124   2                      clr_ADCF;
 125   2                      set_ADCS;
 126   2                      while(ADCF==0);
 127   2                      ADCValue = (ADCRH<<4)+ADCRL;
 128   2      //              printf("ADC value:%d",ADCValue);
 129   2              }
 130   1      }
 131          
 132          
 133          
 134          
 135          void PWM_Init()
 136          {
 137   1      //      PWM5_P03_OUTPUT_ENABLE;
 138   1      //      PWM4_P01_OUTPUT_ENABLE;//Upper bridge
 139   1              PWM2_P10_OUTPUT_ENABLE;
 140   1              PWM1_P11_OUTPUT_ENABLE;
 141   1              PWM0_P12_OUTPUT_ENABLE;
 142   1      //      PWM4_OUTPUT_INVERSE;
 143   1      //      PWM_COMPLEMENTARY_MODE;//In this mode the dead time can work
 144   1              
 145   1              PWM_CLOCK_DIV_32;
 146   1              
 147   1      //#if 0
 148   1      //      PWMPH = 0x07;
 149   1      //      PWMPL = 0xcf;   //1K
 150   1      //#endif
 151   1              
 152   1              PWMPH = 0x00;   //Period setting;
 153   1              PWMPL = 0xff;   //1.9KHz
 154   1              
 155   1              set_SFRPAGE;
 156   1      //      PWM4H = 0x00;
 157   1      //      PWM4L = 0x00;
 158   1              PWM2H = 0x00;
 159   1              PWM2L = 0x00;
 160   1              PWM1H = 0x00;
 161   1              PWM1L = 0x00;
 162   1              PWM0H = 0x00;
 163   1              PWM0L = 0x00;
 164   1              clr_SFRPAGE;
 165   1              
 166   1              PWM45_DEADTIME_ENABLE;
 167   1              PWM_DEAD_TIME_VALUE(64); //31=2us dead time      95=6us 63=4us input PDTCNT value
 168   1              set_LOAD;
 169   1              set_PWMRUN;
 170   1              /**********************************************************************
 171   1              PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV> 
 172   1                                                                      = (16MHz/8)/(0x7CF + 1)
 173   1                                                                      = 1KHz (1ms)
 174   1              =(16MHz/8)/(0x96+1)
 175   1      
 176   1              ***********************************************************************/
 177   1      }
 178          
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 4   

 179          void WTD_Init()
 180          {
 181   1      
 182   1              EA =1; //Global inter_rupt enable
 183   1              TA=0xAA;TA=0x55;WDCON=0x07;             //Setting WDT prescale 
 184   1              set_WDTR;                       //WDT run
 185   1              set_WDCLR;                                              //Clear WDT timer
 186   1              set_EWDT;// WTD inter_rupt enable
 187   1      }
 188          
 189          void Timer_Init()
 190          {
 191   1              TMOD = 0x01;
 192   1              clr_T0M; //timer0 clk=Fsys/12
 193   1              TH0 = HIBYTE(TH0_INIT);
 194   1              TL0 = LOBYTE(TH0_INIT);
 195   1          set_ET0;                                    //enable Timer0 interrupt
 196   1          set_EA;                                     //enable interrupts
 197   1          set_TR0;                                    //Timer0 run
 198   1              IPH = 0X02;
 199   1              IP=0X02;
 200   1              
 201   1              
 202   1      }
 203          
 204          
 205          void Pin_Interruput_Init()
 206          {
 207   1              PICON = 0x21;// Port1 Pin3 edge trigger
 208   1              PINEN = 0x08; //PIN3 falling/low trigger PIPEN: Rising/high trigger
 209   1              PIPEN = 0X00; 
 210   1              EIE   = 0x02; // PIN interrupt enable
 211   1              EIP   = 0x02;           //Priority  1 1 (highest)
 212   1              EIPH  = 0X02;
 213   1              set_P1S_3; // Pin3 Schmitt trigger
 214   1      }
 215          
 216          void Movement_control(void)
 217          {
 218   1              UINT8 i = Get_HallValue();// can use public structure or ...            The variables should be define at the first
             - line
 219   1              UINT8 j = Get_CurrentValue();
 220   1              UINT8 k = Get_Speedvalue();
 221   1              UINT8 pwm_step = (i-51)>=0? (i-51)*2/3:0;  //return  %
 222   1              set_WDCLR;
 223   1              if(i>80)// to prevent hall initial voltage is 1.0v      1.0v = 51 
 224   1              {
 225   2                      Pressed
 226   2                      switch(0/*j>57*/)//20A=57
 227   2                      {
 228   3                              case 0:
 229   3                              {
 230   4                                      PWM_Setting(pwm_step,k);// PWM first, or the moment relay on, PWM still 0 cause big inrush
 231   4                              }
 232   3                              break;
 233   3                              case 1:
 234   3                              {
 235   4                                      if(PWM4L>125)// PWM>50%
 236   4                                      {
 237   5                                              j=j*0.35;// Current calculation from current shunt-> OA-> ADC j=actural current
 238   5                                              PWM4L=(PWM4L+Incremental_P(j, CCvalue)*3/2)>50? (PWM4L+Incremental_P(j, 20)*3/2):50;;//PWM delta valu
             -e, if the 
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 5   

 239   5                                                                                              //reserve for timer counting
 240   5                                              set_LOAD;set_PWMRUN;
 241   5              //                                      Relay_On(k);            //Forward Relay open
 242   5                                              j=0;
 243   5                                      }
 244   4                              }
 245   3                              break;
 246   3                              default:
 247   3                                      break;
 248   3                      }
 249   2              }
 250   1              else//the brake should only works when pedal released
 251   1              {
 252   2                      if(P00==1||P10==1)
 253   2                      {
 254   3                              PWM4L=0;
 255   3                              set_LOAD;set_PWMRUN;
 256   3                              Timer1_Delay10ms(40);   
 257   3                              PWM4L=7;
 258   3                              set_LOAD;set_PWMRUN;
 259   3                              Timer1_Delay10ms(40);
 260   3                              Relay_Off();
 261   3                              Not_Pressed
 262   3                      }
 263   2                      else
 264   2                      {
 265   3                              PWM4L=0;
 266   3                              set_LOAD;set_PWMRUN;
 267   3                              Relay_Off();
 268   3                      }
 269   2              }
 270   1              if(pwr_d==1)
 271   1              {
 272   2                      set_P12;
 273   2                      set_PD;
 274   2              }
 275   1      }
 276          
 277          
 278          UINT16 Get_CurrentValue(void)
 279          {
 280   1              Enable_ADC_AIN4;
 281   1              clr_ADCF;
 282   1              set_ADCS;
 283   1              while(ADCF==0);
 284   1      //      printf("ADC value:%d",ADCRH);
 285   1              return ADCRH;
 286   1      }
 287          
 288          
 289          UINT16 Get_HallValue(void)
 290          {
 291   1              Enable_ADC_AIN0;
 292   1              clr_ADCF;
 293   1              set_ADCS;//Enable ADC transfer
 294   1      //      printf("ADC_voltage:%gmV\n",ADCRH);//%g don't print no meaning 0
 295   1              while(ADCF==0);//ADC transfer done
 296   1              return ADCRH; //High 8 bits+ low 4 bits
 297   1      }
 298          
 299          
 300          UINT8 Get_Speedvalue(void)
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 6   

 301          {
 302   1      //      enum Speed speed_sft;
 303   1              Enable_ADC_AIN1;
 304   1              clr_ADCF;
 305   1              set_ADCS;
 306   1              while(ADCF==0);
 307   1              if((ADCRH>Speed3)&&(ADCRH<ADC_limit))
 308   1                      return S3;
 309   1              else if((ADCRH>Speed2)&&(ADCRH<Speed3))
 310   1                      return S2;
 311   1              else if((ADCRH>Speed1)&&(ADCRH<Speed2))
 312   1                      return S1;
 313   1              else if((ADCRH>Reverse)&&(ADCRH<Speed1))
 314   1                      return Rev;
 315   1              else
 316   1                      return ERR;
 317   1      }
 318          
 319          
 320          void Relay_On(UINT8 On_FB)//1= F 0 = B
 321          {
 322   1              if(On_FB==1)
 323   1              {
 324   2                      clr_P10;
 325   2                      set_P00;
 326   2              }
 327   1              else
 328   1              {
 329   2                      clr_P00;
 330   2                      set_P10;
 331   2              }
 332   1                      
 333   1      }
 334          
 335          
 336          void Relay_Off(void)
 337          {
 338   1              clr_P00;
 339   1              clr_P10;
 340   1      }
 341                  /**********************************************************************
 342                                                                  Dead time setting
 343                                                          DT=PDTCNT+1/Fsys  >Ton+Toff
 344                                                          2us= 32/16M
 345                  ********************************** 3  5************************************/
 346          void PWM_DEAD_TIME_VALUE(UINT16 DeadTimeData) //problem:when the deadtemphigh!=1, there is no dead time
 347          {
 348   1              UINT8 deadtmphigh,deadtmplow;
 349   1              deadtmplow = DeadTimeData;
 350   1              deadtmphigh = DeadTimeData>>8;
 351   1              BIT_TMP = EA;
 352   1              if (deadtmphigh==0x01)
 353   1              {
 354   2                      EA = 0;
 355   2                      TA = 0xAA;
 356   2                      TA = 0x55;
 357   2                      PDTEN|=0x10;
 358   2              }
 359   1              TA = 0xAA;
 360   1              TA = 0x55;
 361   1              PDTCNT = deadtmplow;
 362   1              EA = BIT_TMP;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 7   

 363   1      }
 364          
 365          void PWM_Setting(UINT8 n, UINT8 FB)     //1n = 1%
 366          {
 367   1              set_SFRPAGE; //PWM4\5 SETTING
 368   1              flag = 1;
 369   1              n = n>100? 100: n;
 370   1              while(flag)
 371   1              {
 372   2                      UINT8 i = n*5/2;
 373   2                      if(n>=0&&n<=100)
 374   2                      {
 375   3                              if(PWM4L<i)
 376   3                              {
 377   4                                      PWM4L++;
 378   4                              }
 379   3                              else if(PWM4L==i)// jump out
 380   3                              {
 381   4                                      flag = 0;
 382   4                              }
 383   3                              else
 384   3                              {
 385   4                                      PWM4L=i;
 386   4                                      flag = 0;
 387   4                              }
 388   3                      }
 389   2                      if(PWM4L>10)
 390   2                              Relay_On(FB);
 391   2      //              else
 392   2      //                      Relay_Off();
 393   2                      Ramp_up;// 10ms = 2.55s ramp up
 394   2              }
 395   1              
 396   1      }
 397          
 398          void Timer0_IRS_OCP() interrupt 1
 399          {
 400   1              TF0 = 0;                //clr T0 itrpt flag
 401   1              TH0 = HIBYTE(TH0_INIT);
 402   1              TL0 = LOBYTE(TH0_INIT); 
 403   1              
 404   1      }
 405                  
 406          void Timer1_IRS() interrupt 3
 407          {
 408   1      //      TF0 = 0;
 409   1              TH0 = HIBYTE(TH0_INIT);
 410   1              TL0 = LOBYTE(TH0_INIT);  
 411   1          if(u8TL1_Tmp++>9)
 412   1              {
 413   2                      P12 = ~P12;   
 414   2                      u8TL1_Tmp=0;
 415   2              }
 416   1      }
 417          
 418          void Pin_Interruput() interrupt 7
 419          {
 420   1              pwr_d =~ pwr_d;
 421   1              clr_PIF3;
 422   1              TR0=~TR0;
 423   1      }
 424          
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     04/17/2022 16:55:34 PAGE 8   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2095    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     42    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
