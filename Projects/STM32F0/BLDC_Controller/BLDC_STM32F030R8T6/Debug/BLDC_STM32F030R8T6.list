
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800d1a0  0800d1a0  0001d1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b4  0800d7b4  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7b4  0800d7b4  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7b4  0800d7b4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7b4  0800d7b4  0001d7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d7bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000204  0800d9c0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800d9c0  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001198c  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9b  00000000  00000000  00031bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00035510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013118  00000000  00000000  00036290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a29  00000000  00000000  000493a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bdfb  00000000  00000000  0005ddd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  000c9c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d188 	.word	0x0800d188

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800d188 	.word	0x0800d188

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ff7d 	bl	8001350 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fecd 	bl	8001200 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6f 	bl	8001350 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff65 	bl	8001350 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fef5 	bl	8001284 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 feeb 	bl	8001284 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f001 fdbd 	bl	8002050 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fa06 	bl	80018f0 <__aeabi_dsub>
 80004e4:	f001 fdb4 	bl	8002050 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f000 ff6b 	bl	8001418 <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f001 fde8 	bl	800211c <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f000 ff62 	bl	8001418 <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 f9c8 	bl	80018f0 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f001 fda1 	bl	80020bc <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f000 ff4b 	bl	8001418 <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f001 fdc8 	bl	800211c <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 f804 	bl	800059c <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_dadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	464f      	mov	r7, r9
 80005a0:	4646      	mov	r6, r8
 80005a2:	46d6      	mov	lr, sl
 80005a4:	000d      	movs	r5, r1
 80005a6:	0004      	movs	r4, r0
 80005a8:	b5c0      	push	{r6, r7, lr}
 80005aa:	001f      	movs	r7, r3
 80005ac:	0011      	movs	r1, r2
 80005ae:	0328      	lsls	r0, r5, #12
 80005b0:	0f62      	lsrs	r2, r4, #29
 80005b2:	0a40      	lsrs	r0, r0, #9
 80005b4:	4310      	orrs	r0, r2
 80005b6:	007a      	lsls	r2, r7, #1
 80005b8:	0d52      	lsrs	r2, r2, #21
 80005ba:	00e3      	lsls	r3, r4, #3
 80005bc:	033c      	lsls	r4, r7, #12
 80005be:	4691      	mov	r9, r2
 80005c0:	0a64      	lsrs	r4, r4, #9
 80005c2:	0ffa      	lsrs	r2, r7, #31
 80005c4:	0f4f      	lsrs	r7, r1, #29
 80005c6:	006e      	lsls	r6, r5, #1
 80005c8:	4327      	orrs	r7, r4
 80005ca:	4692      	mov	sl, r2
 80005cc:	46b8      	mov	r8, r7
 80005ce:	0d76      	lsrs	r6, r6, #21
 80005d0:	0fed      	lsrs	r5, r5, #31
 80005d2:	00c9      	lsls	r1, r1, #3
 80005d4:	4295      	cmp	r5, r2
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x3e>
 80005d8:	e099      	b.n	800070e <__aeabi_dadd+0x172>
 80005da:	464c      	mov	r4, r9
 80005dc:	1b34      	subs	r4, r6, r4
 80005de:	46a4      	mov	ip, r4
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_dadd+0x4a>
 80005e4:	e07c      	b.n	80006e0 <__aeabi_dadd+0x144>
 80005e6:	464a      	mov	r2, r9
 80005e8:	2a00      	cmp	r2, #0
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x52>
 80005ec:	e0b8      	b.n	8000760 <__aeabi_dadd+0x1c4>
 80005ee:	4ac5      	ldr	r2, [pc, #788]	; (8000904 <__aeabi_dadd+0x368>)
 80005f0:	4296      	cmp	r6, r2
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x5a>
 80005f4:	e11c      	b.n	8000830 <__aeabi_dadd+0x294>
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	003c      	movs	r4, r7
 80005fa:	0412      	lsls	r2, r2, #16
 80005fc:	4314      	orrs	r4, r2
 80005fe:	46a0      	mov	r8, r4
 8000600:	4662      	mov	r2, ip
 8000602:	2a38      	cmp	r2, #56	; 0x38
 8000604:	dd00      	ble.n	8000608 <__aeabi_dadd+0x6c>
 8000606:	e161      	b.n	80008cc <__aeabi_dadd+0x330>
 8000608:	2a1f      	cmp	r2, #31
 800060a:	dd00      	ble.n	800060e <__aeabi_dadd+0x72>
 800060c:	e1cc      	b.n	80009a8 <__aeabi_dadd+0x40c>
 800060e:	4664      	mov	r4, ip
 8000610:	2220      	movs	r2, #32
 8000612:	1b12      	subs	r2, r2, r4
 8000614:	4644      	mov	r4, r8
 8000616:	4094      	lsls	r4, r2
 8000618:	000f      	movs	r7, r1
 800061a:	46a1      	mov	r9, r4
 800061c:	4664      	mov	r4, ip
 800061e:	4091      	lsls	r1, r2
 8000620:	40e7      	lsrs	r7, r4
 8000622:	464c      	mov	r4, r9
 8000624:	1e4a      	subs	r2, r1, #1
 8000626:	4191      	sbcs	r1, r2
 8000628:	433c      	orrs	r4, r7
 800062a:	4642      	mov	r2, r8
 800062c:	4321      	orrs	r1, r4
 800062e:	4664      	mov	r4, ip
 8000630:	40e2      	lsrs	r2, r4
 8000632:	1a80      	subs	r0, r0, r2
 8000634:	1a5c      	subs	r4, r3, r1
 8000636:	42a3      	cmp	r3, r4
 8000638:	419b      	sbcs	r3, r3
 800063a:	425f      	negs	r7, r3
 800063c:	1bc7      	subs	r7, r0, r7
 800063e:	023b      	lsls	r3, r7, #8
 8000640:	d400      	bmi.n	8000644 <__aeabi_dadd+0xa8>
 8000642:	e0d0      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000644:	027f      	lsls	r7, r7, #9
 8000646:	0a7f      	lsrs	r7, r7, #9
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0xb2>
 800064c:	e0ff      	b.n	800084e <__aeabi_dadd+0x2b2>
 800064e:	0038      	movs	r0, r7
 8000650:	f001 fe12 	bl	8002278 <__clzsi2>
 8000654:	0001      	movs	r1, r0
 8000656:	3908      	subs	r1, #8
 8000658:	2320      	movs	r3, #32
 800065a:	0022      	movs	r2, r4
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	408f      	lsls	r7, r1
 8000660:	40da      	lsrs	r2, r3
 8000662:	408c      	lsls	r4, r1
 8000664:	4317      	orrs	r7, r2
 8000666:	42b1      	cmp	r1, r6
 8000668:	da00      	bge.n	800066c <__aeabi_dadd+0xd0>
 800066a:	e0ff      	b.n	800086c <__aeabi_dadd+0x2d0>
 800066c:	1b89      	subs	r1, r1, r6
 800066e:	1c4b      	adds	r3, r1, #1
 8000670:	2b1f      	cmp	r3, #31
 8000672:	dd00      	ble.n	8000676 <__aeabi_dadd+0xda>
 8000674:	e0a8      	b.n	80007c8 <__aeabi_dadd+0x22c>
 8000676:	2220      	movs	r2, #32
 8000678:	0039      	movs	r1, r7
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	0020      	movs	r0, r4
 800067e:	4094      	lsls	r4, r2
 8000680:	4091      	lsls	r1, r2
 8000682:	40d8      	lsrs	r0, r3
 8000684:	1e62      	subs	r2, r4, #1
 8000686:	4194      	sbcs	r4, r2
 8000688:	40df      	lsrs	r7, r3
 800068a:	2600      	movs	r6, #0
 800068c:	4301      	orrs	r1, r0
 800068e:	430c      	orrs	r4, r1
 8000690:	0763      	lsls	r3, r4, #29
 8000692:	d009      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 8000694:	230f      	movs	r3, #15
 8000696:	4023      	ands	r3, r4
 8000698:	2b04      	cmp	r3, #4
 800069a:	d005      	beq.n	80006a8 <__aeabi_dadd+0x10c>
 800069c:	1d23      	adds	r3, r4, #4
 800069e:	42a3      	cmp	r3, r4
 80006a0:	41a4      	sbcs	r4, r4
 80006a2:	4264      	negs	r4, r4
 80006a4:	193f      	adds	r7, r7, r4
 80006a6:	001c      	movs	r4, r3
 80006a8:	023b      	lsls	r3, r7, #8
 80006aa:	d400      	bmi.n	80006ae <__aeabi_dadd+0x112>
 80006ac:	e09e      	b.n	80007ec <__aeabi_dadd+0x250>
 80006ae:	4b95      	ldr	r3, [pc, #596]	; (8000904 <__aeabi_dadd+0x368>)
 80006b0:	3601      	adds	r6, #1
 80006b2:	429e      	cmp	r6, r3
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x11c>
 80006b6:	e0b7      	b.n	8000828 <__aeabi_dadd+0x28c>
 80006b8:	4a93      	ldr	r2, [pc, #588]	; (8000908 <__aeabi_dadd+0x36c>)
 80006ba:	08e4      	lsrs	r4, r4, #3
 80006bc:	4017      	ands	r7, r2
 80006be:	077b      	lsls	r3, r7, #29
 80006c0:	0571      	lsls	r1, r6, #21
 80006c2:	027f      	lsls	r7, r7, #9
 80006c4:	4323      	orrs	r3, r4
 80006c6:	0b3f      	lsrs	r7, r7, #12
 80006c8:	0d4a      	lsrs	r2, r1, #21
 80006ca:	0512      	lsls	r2, r2, #20
 80006cc:	433a      	orrs	r2, r7
 80006ce:	07ed      	lsls	r5, r5, #31
 80006d0:	432a      	orrs	r2, r5
 80006d2:	0018      	movs	r0, r3
 80006d4:	0011      	movs	r1, r2
 80006d6:	bce0      	pop	{r5, r6, r7}
 80006d8:	46ba      	mov	sl, r7
 80006da:	46b1      	mov	r9, r6
 80006dc:	46a8      	mov	r8, r5
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	2c00      	cmp	r4, #0
 80006e2:	d04b      	beq.n	800077c <__aeabi_dadd+0x1e0>
 80006e4:	464c      	mov	r4, r9
 80006e6:	1ba4      	subs	r4, r4, r6
 80006e8:	46a4      	mov	ip, r4
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d000      	beq.n	80006f0 <__aeabi_dadd+0x154>
 80006ee:	e123      	b.n	8000938 <__aeabi_dadd+0x39c>
 80006f0:	0004      	movs	r4, r0
 80006f2:	431c      	orrs	r4, r3
 80006f4:	d100      	bne.n	80006f8 <__aeabi_dadd+0x15c>
 80006f6:	e1af      	b.n	8000a58 <__aeabi_dadd+0x4bc>
 80006f8:	4662      	mov	r2, ip
 80006fa:	1e54      	subs	r4, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x166>
 8000700:	e215      	b.n	8000b2e <__aeabi_dadd+0x592>
 8000702:	4d80      	ldr	r5, [pc, #512]	; (8000904 <__aeabi_dadd+0x368>)
 8000704:	45ac      	cmp	ip, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x16e>
 8000708:	e1c8      	b.n	8000a9c <__aeabi_dadd+0x500>
 800070a:	46a4      	mov	ip, r4
 800070c:	e11b      	b.n	8000946 <__aeabi_dadd+0x3aa>
 800070e:	464a      	mov	r2, r9
 8000710:	1ab2      	subs	r2, r6, r2
 8000712:	4694      	mov	ip, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	dc00      	bgt.n	800071a <__aeabi_dadd+0x17e>
 8000718:	e0ac      	b.n	8000874 <__aeabi_dadd+0x2d8>
 800071a:	464a      	mov	r2, r9
 800071c:	2a00      	cmp	r2, #0
 800071e:	d043      	beq.n	80007a8 <__aeabi_dadd+0x20c>
 8000720:	4a78      	ldr	r2, [pc, #480]	; (8000904 <__aeabi_dadd+0x368>)
 8000722:	4296      	cmp	r6, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x18c>
 8000726:	e1af      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	003c      	movs	r4, r7
 800072c:	0412      	lsls	r2, r2, #16
 800072e:	4314      	orrs	r4, r2
 8000730:	46a0      	mov	r8, r4
 8000732:	4662      	mov	r2, ip
 8000734:	2a38      	cmp	r2, #56	; 0x38
 8000736:	dc67      	bgt.n	8000808 <__aeabi_dadd+0x26c>
 8000738:	2a1f      	cmp	r2, #31
 800073a:	dc00      	bgt.n	800073e <__aeabi_dadd+0x1a2>
 800073c:	e15f      	b.n	80009fe <__aeabi_dadd+0x462>
 800073e:	4647      	mov	r7, r8
 8000740:	3a20      	subs	r2, #32
 8000742:	40d7      	lsrs	r7, r2
 8000744:	4662      	mov	r2, ip
 8000746:	2a20      	cmp	r2, #32
 8000748:	d005      	beq.n	8000756 <__aeabi_dadd+0x1ba>
 800074a:	4664      	mov	r4, ip
 800074c:	2240      	movs	r2, #64	; 0x40
 800074e:	1b12      	subs	r2, r2, r4
 8000750:	4644      	mov	r4, r8
 8000752:	4094      	lsls	r4, r2
 8000754:	4321      	orrs	r1, r4
 8000756:	1e4a      	subs	r2, r1, #1
 8000758:	4191      	sbcs	r1, r2
 800075a:	000c      	movs	r4, r1
 800075c:	433c      	orrs	r4, r7
 800075e:	e057      	b.n	8000810 <__aeabi_dadd+0x274>
 8000760:	003a      	movs	r2, r7
 8000762:	430a      	orrs	r2, r1
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x1cc>
 8000766:	e105      	b.n	8000974 <__aeabi_dadd+0x3d8>
 8000768:	0022      	movs	r2, r4
 800076a:	3a01      	subs	r2, #1
 800076c:	2c01      	cmp	r4, #1
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x1d6>
 8000770:	e182      	b.n	8000a78 <__aeabi_dadd+0x4dc>
 8000772:	4c64      	ldr	r4, [pc, #400]	; (8000904 <__aeabi_dadd+0x368>)
 8000774:	45a4      	cmp	ip, r4
 8000776:	d05b      	beq.n	8000830 <__aeabi_dadd+0x294>
 8000778:	4694      	mov	ip, r2
 800077a:	e741      	b.n	8000600 <__aeabi_dadd+0x64>
 800077c:	4c63      	ldr	r4, [pc, #396]	; (800090c <__aeabi_dadd+0x370>)
 800077e:	1c77      	adds	r7, r6, #1
 8000780:	4227      	tst	r7, r4
 8000782:	d000      	beq.n	8000786 <__aeabi_dadd+0x1ea>
 8000784:	e0c4      	b.n	8000910 <__aeabi_dadd+0x374>
 8000786:	0004      	movs	r4, r0
 8000788:	431c      	orrs	r4, r3
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_dadd+0x1f4>
 800078e:	e169      	b.n	8000a64 <__aeabi_dadd+0x4c8>
 8000790:	2c00      	cmp	r4, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x1fa>
 8000794:	e1bf      	b.n	8000b16 <__aeabi_dadd+0x57a>
 8000796:	4644      	mov	r4, r8
 8000798:	430c      	orrs	r4, r1
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x202>
 800079c:	e1d0      	b.n	8000b40 <__aeabi_dadd+0x5a4>
 800079e:	0742      	lsls	r2, r0, #29
 80007a0:	08db      	lsrs	r3, r3, #3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	08c0      	lsrs	r0, r0, #3
 80007a6:	e029      	b.n	80007fc <__aeabi_dadd+0x260>
 80007a8:	003a      	movs	r2, r7
 80007aa:	430a      	orrs	r2, r1
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x214>
 80007ae:	e170      	b.n	8000a92 <__aeabi_dadd+0x4f6>
 80007b0:	4662      	mov	r2, ip
 80007b2:	4664      	mov	r4, ip
 80007b4:	3a01      	subs	r2, #1
 80007b6:	2c01      	cmp	r4, #1
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x220>
 80007ba:	e0e0      	b.n	800097e <__aeabi_dadd+0x3e2>
 80007bc:	4c51      	ldr	r4, [pc, #324]	; (8000904 <__aeabi_dadd+0x368>)
 80007be:	45a4      	cmp	ip, r4
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x228>
 80007c2:	e161      	b.n	8000a88 <__aeabi_dadd+0x4ec>
 80007c4:	4694      	mov	ip, r2
 80007c6:	e7b4      	b.n	8000732 <__aeabi_dadd+0x196>
 80007c8:	003a      	movs	r2, r7
 80007ca:	391f      	subs	r1, #31
 80007cc:	40ca      	lsrs	r2, r1
 80007ce:	0011      	movs	r1, r2
 80007d0:	2b20      	cmp	r3, #32
 80007d2:	d003      	beq.n	80007dc <__aeabi_dadd+0x240>
 80007d4:	2240      	movs	r2, #64	; 0x40
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	409f      	lsls	r7, r3
 80007da:	433c      	orrs	r4, r7
 80007dc:	1e63      	subs	r3, r4, #1
 80007de:	419c      	sbcs	r4, r3
 80007e0:	2700      	movs	r7, #0
 80007e2:	2600      	movs	r6, #0
 80007e4:	430c      	orrs	r4, r1
 80007e6:	0763      	lsls	r3, r4, #29
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x250>
 80007ea:	e753      	b.n	8000694 <__aeabi_dadd+0xf8>
 80007ec:	46b4      	mov	ip, r6
 80007ee:	08e4      	lsrs	r4, r4, #3
 80007f0:	077b      	lsls	r3, r7, #29
 80007f2:	4323      	orrs	r3, r4
 80007f4:	08f8      	lsrs	r0, r7, #3
 80007f6:	4a43      	ldr	r2, [pc, #268]	; (8000904 <__aeabi_dadd+0x368>)
 80007f8:	4594      	cmp	ip, r2
 80007fa:	d01d      	beq.n	8000838 <__aeabi_dadd+0x29c>
 80007fc:	4662      	mov	r2, ip
 80007fe:	0307      	lsls	r7, r0, #12
 8000800:	0552      	lsls	r2, r2, #21
 8000802:	0b3f      	lsrs	r7, r7, #12
 8000804:	0d52      	lsrs	r2, r2, #21
 8000806:	e760      	b.n	80006ca <__aeabi_dadd+0x12e>
 8000808:	4644      	mov	r4, r8
 800080a:	430c      	orrs	r4, r1
 800080c:	1e62      	subs	r2, r4, #1
 800080e:	4194      	sbcs	r4, r2
 8000810:	18e4      	adds	r4, r4, r3
 8000812:	429c      	cmp	r4, r3
 8000814:	419b      	sbcs	r3, r3
 8000816:	425f      	negs	r7, r3
 8000818:	183f      	adds	r7, r7, r0
 800081a:	023b      	lsls	r3, r7, #8
 800081c:	d5e3      	bpl.n	80007e6 <__aeabi_dadd+0x24a>
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <__aeabi_dadd+0x368>)
 8000820:	3601      	adds	r6, #1
 8000822:	429e      	cmp	r6, r3
 8000824:	d000      	beq.n	8000828 <__aeabi_dadd+0x28c>
 8000826:	e0b5      	b.n	8000994 <__aeabi_dadd+0x3f8>
 8000828:	0032      	movs	r2, r6
 800082a:	2700      	movs	r7, #0
 800082c:	2300      	movs	r3, #0
 800082e:	e74c      	b.n	80006ca <__aeabi_dadd+0x12e>
 8000830:	0742      	lsls	r2, r0, #29
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	4313      	orrs	r3, r2
 8000836:	08c0      	lsrs	r0, r0, #3
 8000838:	001a      	movs	r2, r3
 800083a:	4302      	orrs	r2, r0
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x2a4>
 800083e:	e1e1      	b.n	8000c04 <__aeabi_dadd+0x668>
 8000840:	2780      	movs	r7, #128	; 0x80
 8000842:	033f      	lsls	r7, r7, #12
 8000844:	4307      	orrs	r7, r0
 8000846:	033f      	lsls	r7, r7, #12
 8000848:	4a2e      	ldr	r2, [pc, #184]	; (8000904 <__aeabi_dadd+0x368>)
 800084a:	0b3f      	lsrs	r7, r7, #12
 800084c:	e73d      	b.n	80006ca <__aeabi_dadd+0x12e>
 800084e:	0020      	movs	r0, r4
 8000850:	f001 fd12 	bl	8002278 <__clzsi2>
 8000854:	0001      	movs	r1, r0
 8000856:	3118      	adds	r1, #24
 8000858:	291f      	cmp	r1, #31
 800085a:	dc00      	bgt.n	800085e <__aeabi_dadd+0x2c2>
 800085c:	e6fc      	b.n	8000658 <__aeabi_dadd+0xbc>
 800085e:	3808      	subs	r0, #8
 8000860:	4084      	lsls	r4, r0
 8000862:	0027      	movs	r7, r4
 8000864:	2400      	movs	r4, #0
 8000866:	42b1      	cmp	r1, r6
 8000868:	db00      	blt.n	800086c <__aeabi_dadd+0x2d0>
 800086a:	e6ff      	b.n	800066c <__aeabi_dadd+0xd0>
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <__aeabi_dadd+0x36c>)
 800086e:	1a76      	subs	r6, r6, r1
 8000870:	4017      	ands	r7, r2
 8000872:	e70d      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d02f      	beq.n	80008d8 <__aeabi_dadd+0x33c>
 8000878:	464a      	mov	r2, r9
 800087a:	1b92      	subs	r2, r2, r6
 800087c:	4694      	mov	ip, r2
 800087e:	2e00      	cmp	r6, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x2e8>
 8000882:	e0ad      	b.n	80009e0 <__aeabi_dadd+0x444>
 8000884:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <__aeabi_dadd+0x368>)
 8000886:	4591      	cmp	r9, r2
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x2f0>
 800088a:	e10f      	b.n	8000aac <__aeabi_dadd+0x510>
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	0412      	lsls	r2, r2, #16
 8000890:	4310      	orrs	r0, r2
 8000892:	4662      	mov	r2, ip
 8000894:	2a38      	cmp	r2, #56	; 0x38
 8000896:	dd00      	ble.n	800089a <__aeabi_dadd+0x2fe>
 8000898:	e10f      	b.n	8000aba <__aeabi_dadd+0x51e>
 800089a:	2a1f      	cmp	r2, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x304>
 800089e:	e180      	b.n	8000ba2 <__aeabi_dadd+0x606>
 80008a0:	4664      	mov	r4, ip
 80008a2:	2220      	movs	r2, #32
 80008a4:	001e      	movs	r6, r3
 80008a6:	1b12      	subs	r2, r2, r4
 80008a8:	4667      	mov	r7, ip
 80008aa:	0004      	movs	r4, r0
 80008ac:	4093      	lsls	r3, r2
 80008ae:	4094      	lsls	r4, r2
 80008b0:	40fe      	lsrs	r6, r7
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	4193      	sbcs	r3, r2
 80008b6:	40f8      	lsrs	r0, r7
 80008b8:	4334      	orrs	r4, r6
 80008ba:	431c      	orrs	r4, r3
 80008bc:	4480      	add	r8, r0
 80008be:	1864      	adds	r4, r4, r1
 80008c0:	428c      	cmp	r4, r1
 80008c2:	41bf      	sbcs	r7, r7
 80008c4:	427f      	negs	r7, r7
 80008c6:	464e      	mov	r6, r9
 80008c8:	4447      	add	r7, r8
 80008ca:	e7a6      	b.n	800081a <__aeabi_dadd+0x27e>
 80008cc:	4642      	mov	r2, r8
 80008ce:	430a      	orrs	r2, r1
 80008d0:	0011      	movs	r1, r2
 80008d2:	1e4a      	subs	r2, r1, #1
 80008d4:	4191      	sbcs	r1, r2
 80008d6:	e6ad      	b.n	8000634 <__aeabi_dadd+0x98>
 80008d8:	4c0c      	ldr	r4, [pc, #48]	; (800090c <__aeabi_dadd+0x370>)
 80008da:	1c72      	adds	r2, r6, #1
 80008dc:	4222      	tst	r2, r4
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x346>
 80008e0:	e0a1      	b.n	8000a26 <__aeabi_dadd+0x48a>
 80008e2:	0002      	movs	r2, r0
 80008e4:	431a      	orrs	r2, r3
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x350>
 80008ea:	e0fa      	b.n	8000ae2 <__aeabi_dadd+0x546>
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x356>
 80008f0:	e145      	b.n	8000b7e <__aeabi_dadd+0x5e2>
 80008f2:	003a      	movs	r2, r7
 80008f4:	430a      	orrs	r2, r1
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x35e>
 80008f8:	e146      	b.n	8000b88 <__aeabi_dadd+0x5ec>
 80008fa:	0742      	lsls	r2, r0, #29
 80008fc:	08db      	lsrs	r3, r3, #3
 80008fe:	4313      	orrs	r3, r2
 8000900:	08c0      	lsrs	r0, r0, #3
 8000902:	e77b      	b.n	80007fc <__aeabi_dadd+0x260>
 8000904:	000007ff 	.word	0x000007ff
 8000908:	ff7fffff 	.word	0xff7fffff
 800090c:	000007fe 	.word	0x000007fe
 8000910:	4647      	mov	r7, r8
 8000912:	1a5c      	subs	r4, r3, r1
 8000914:	1bc2      	subs	r2, r0, r7
 8000916:	42a3      	cmp	r3, r4
 8000918:	41bf      	sbcs	r7, r7
 800091a:	427f      	negs	r7, r7
 800091c:	46b9      	mov	r9, r7
 800091e:	0017      	movs	r7, r2
 8000920:	464a      	mov	r2, r9
 8000922:	1abf      	subs	r7, r7, r2
 8000924:	023a      	lsls	r2, r7, #8
 8000926:	d500      	bpl.n	800092a <__aeabi_dadd+0x38e>
 8000928:	e08d      	b.n	8000a46 <__aeabi_dadd+0x4aa>
 800092a:	0023      	movs	r3, r4
 800092c:	433b      	orrs	r3, r7
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x396>
 8000930:	e68a      	b.n	8000648 <__aeabi_dadd+0xac>
 8000932:	2000      	movs	r0, #0
 8000934:	2500      	movs	r5, #0
 8000936:	e761      	b.n	80007fc <__aeabi_dadd+0x260>
 8000938:	4cb4      	ldr	r4, [pc, #720]	; (8000c0c <__aeabi_dadd+0x670>)
 800093a:	45a1      	cmp	r9, r4
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x3a4>
 800093e:	e0ad      	b.n	8000a9c <__aeabi_dadd+0x500>
 8000940:	2480      	movs	r4, #128	; 0x80
 8000942:	0424      	lsls	r4, r4, #16
 8000944:	4320      	orrs	r0, r4
 8000946:	4664      	mov	r4, ip
 8000948:	2c38      	cmp	r4, #56	; 0x38
 800094a:	dc3d      	bgt.n	80009c8 <__aeabi_dadd+0x42c>
 800094c:	4662      	mov	r2, ip
 800094e:	2c1f      	cmp	r4, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0x3b8>
 8000952:	e0b7      	b.n	8000ac4 <__aeabi_dadd+0x528>
 8000954:	2520      	movs	r5, #32
 8000956:	001e      	movs	r6, r3
 8000958:	1b2d      	subs	r5, r5, r4
 800095a:	0004      	movs	r4, r0
 800095c:	40ab      	lsls	r3, r5
 800095e:	40ac      	lsls	r4, r5
 8000960:	40d6      	lsrs	r6, r2
 8000962:	40d0      	lsrs	r0, r2
 8000964:	4642      	mov	r2, r8
 8000966:	1e5d      	subs	r5, r3, #1
 8000968:	41ab      	sbcs	r3, r5
 800096a:	4334      	orrs	r4, r6
 800096c:	1a12      	subs	r2, r2, r0
 800096e:	4690      	mov	r8, r2
 8000970:	4323      	orrs	r3, r4
 8000972:	e02c      	b.n	80009ce <__aeabi_dadd+0x432>
 8000974:	0742      	lsls	r2, r0, #29
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	4313      	orrs	r3, r2
 800097a:	08c0      	lsrs	r0, r0, #3
 800097c:	e73b      	b.n	80007f6 <__aeabi_dadd+0x25a>
 800097e:	185c      	adds	r4, r3, r1
 8000980:	429c      	cmp	r4, r3
 8000982:	419b      	sbcs	r3, r3
 8000984:	4440      	add	r0, r8
 8000986:	425b      	negs	r3, r3
 8000988:	18c7      	adds	r7, r0, r3
 800098a:	2601      	movs	r6, #1
 800098c:	023b      	lsls	r3, r7, #8
 800098e:	d400      	bmi.n	8000992 <__aeabi_dadd+0x3f6>
 8000990:	e729      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000992:	2602      	movs	r6, #2
 8000994:	4a9e      	ldr	r2, [pc, #632]	; (8000c10 <__aeabi_dadd+0x674>)
 8000996:	0863      	lsrs	r3, r4, #1
 8000998:	4017      	ands	r7, r2
 800099a:	2201      	movs	r2, #1
 800099c:	4014      	ands	r4, r2
 800099e:	431c      	orrs	r4, r3
 80009a0:	07fb      	lsls	r3, r7, #31
 80009a2:	431c      	orrs	r4, r3
 80009a4:	087f      	lsrs	r7, r7, #1
 80009a6:	e673      	b.n	8000690 <__aeabi_dadd+0xf4>
 80009a8:	4644      	mov	r4, r8
 80009aa:	3a20      	subs	r2, #32
 80009ac:	40d4      	lsrs	r4, r2
 80009ae:	4662      	mov	r2, ip
 80009b0:	2a20      	cmp	r2, #32
 80009b2:	d005      	beq.n	80009c0 <__aeabi_dadd+0x424>
 80009b4:	4667      	mov	r7, ip
 80009b6:	2240      	movs	r2, #64	; 0x40
 80009b8:	1bd2      	subs	r2, r2, r7
 80009ba:	4647      	mov	r7, r8
 80009bc:	4097      	lsls	r7, r2
 80009be:	4339      	orrs	r1, r7
 80009c0:	1e4a      	subs	r2, r1, #1
 80009c2:	4191      	sbcs	r1, r2
 80009c4:	4321      	orrs	r1, r4
 80009c6:	e635      	b.n	8000634 <__aeabi_dadd+0x98>
 80009c8:	4303      	orrs	r3, r0
 80009ca:	1e58      	subs	r0, r3, #1
 80009cc:	4183      	sbcs	r3, r0
 80009ce:	1acc      	subs	r4, r1, r3
 80009d0:	42a1      	cmp	r1, r4
 80009d2:	41bf      	sbcs	r7, r7
 80009d4:	4643      	mov	r3, r8
 80009d6:	427f      	negs	r7, r7
 80009d8:	4655      	mov	r5, sl
 80009da:	464e      	mov	r6, r9
 80009dc:	1bdf      	subs	r7, r3, r7
 80009de:	e62e      	b.n	800063e <__aeabi_dadd+0xa2>
 80009e0:	0002      	movs	r2, r0
 80009e2:	431a      	orrs	r2, r3
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x44c>
 80009e6:	e0bd      	b.n	8000b64 <__aeabi_dadd+0x5c8>
 80009e8:	4662      	mov	r2, ip
 80009ea:	4664      	mov	r4, ip
 80009ec:	3a01      	subs	r2, #1
 80009ee:	2c01      	cmp	r4, #1
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x458>
 80009f2:	e0e5      	b.n	8000bc0 <__aeabi_dadd+0x624>
 80009f4:	4c85      	ldr	r4, [pc, #532]	; (8000c0c <__aeabi_dadd+0x670>)
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d058      	beq.n	8000aac <__aeabi_dadd+0x510>
 80009fa:	4694      	mov	ip, r2
 80009fc:	e749      	b.n	8000892 <__aeabi_dadd+0x2f6>
 80009fe:	4664      	mov	r4, ip
 8000a00:	2220      	movs	r2, #32
 8000a02:	1b12      	subs	r2, r2, r4
 8000a04:	4644      	mov	r4, r8
 8000a06:	4094      	lsls	r4, r2
 8000a08:	000f      	movs	r7, r1
 8000a0a:	46a1      	mov	r9, r4
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	4091      	lsls	r1, r2
 8000a10:	40e7      	lsrs	r7, r4
 8000a12:	464c      	mov	r4, r9
 8000a14:	1e4a      	subs	r2, r1, #1
 8000a16:	4191      	sbcs	r1, r2
 8000a18:	433c      	orrs	r4, r7
 8000a1a:	4642      	mov	r2, r8
 8000a1c:	430c      	orrs	r4, r1
 8000a1e:	4661      	mov	r1, ip
 8000a20:	40ca      	lsrs	r2, r1
 8000a22:	1880      	adds	r0, r0, r2
 8000a24:	e6f4      	b.n	8000810 <__aeabi_dadd+0x274>
 8000a26:	4c79      	ldr	r4, [pc, #484]	; (8000c0c <__aeabi_dadd+0x670>)
 8000a28:	42a2      	cmp	r2, r4
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x492>
 8000a2c:	e6fd      	b.n	800082a <__aeabi_dadd+0x28e>
 8000a2e:	1859      	adds	r1, r3, r1
 8000a30:	4299      	cmp	r1, r3
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	4440      	add	r0, r8
 8000a36:	425f      	negs	r7, r3
 8000a38:	19c7      	adds	r7, r0, r7
 8000a3a:	07fc      	lsls	r4, r7, #31
 8000a3c:	0849      	lsrs	r1, r1, #1
 8000a3e:	0016      	movs	r6, r2
 8000a40:	430c      	orrs	r4, r1
 8000a42:	087f      	lsrs	r7, r7, #1
 8000a44:	e6cf      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000a46:	1acc      	subs	r4, r1, r3
 8000a48:	42a1      	cmp	r1, r4
 8000a4a:	41bf      	sbcs	r7, r7
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	427f      	negs	r7, r7
 8000a50:	1a18      	subs	r0, r3, r0
 8000a52:	4655      	mov	r5, sl
 8000a54:	1bc7      	subs	r7, r0, r7
 8000a56:	e5f7      	b.n	8000648 <__aeabi_dadd+0xac>
 8000a58:	08c9      	lsrs	r1, r1, #3
 8000a5a:	077b      	lsls	r3, r7, #29
 8000a5c:	4655      	mov	r5, sl
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	08f8      	lsrs	r0, r7, #3
 8000a62:	e6c8      	b.n	80007f6 <__aeabi_dadd+0x25a>
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x4ce>
 8000a68:	e081      	b.n	8000b6e <__aeabi_dadd+0x5d2>
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	d115      	bne.n	8000a9c <__aeabi_dadd+0x500>
 8000a70:	2080      	movs	r0, #128	; 0x80
 8000a72:	2500      	movs	r5, #0
 8000a74:	0300      	lsls	r0, r0, #12
 8000a76:	e6e3      	b.n	8000840 <__aeabi_dadd+0x2a4>
 8000a78:	1a5c      	subs	r4, r3, r1
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	419b      	sbcs	r3, r3
 8000a7e:	1bc7      	subs	r7, r0, r7
 8000a80:	425b      	negs	r3, r3
 8000a82:	2601      	movs	r6, #1
 8000a84:	1aff      	subs	r7, r7, r3
 8000a86:	e5da      	b.n	800063e <__aeabi_dadd+0xa2>
 8000a88:	0742      	lsls	r2, r0, #29
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	08c0      	lsrs	r0, r0, #3
 8000a90:	e6d2      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000a92:	0742      	lsls	r2, r0, #29
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	08c0      	lsrs	r0, r0, #3
 8000a9a:	e6ac      	b.n	80007f6 <__aeabi_dadd+0x25a>
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	08c9      	lsrs	r1, r1, #3
 8000aa2:	075b      	lsls	r3, r3, #29
 8000aa4:	4655      	mov	r5, sl
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	08d0      	lsrs	r0, r2, #3
 8000aaa:	e6c5      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000aac:	4643      	mov	r3, r8
 8000aae:	4642      	mov	r2, r8
 8000ab0:	075b      	lsls	r3, r3, #29
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	08d0      	lsrs	r0, r2, #3
 8000ab8:	e6be      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000aba:	4303      	orrs	r3, r0
 8000abc:	001c      	movs	r4, r3
 8000abe:	1e63      	subs	r3, r4, #1
 8000ac0:	419c      	sbcs	r4, r3
 8000ac2:	e6fc      	b.n	80008be <__aeabi_dadd+0x322>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	3c20      	subs	r4, #32
 8000ac8:	40e2      	lsrs	r2, r4
 8000aca:	0014      	movs	r4, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	2a20      	cmp	r2, #32
 8000ad0:	d003      	beq.n	8000ada <__aeabi_dadd+0x53e>
 8000ad2:	2540      	movs	r5, #64	; 0x40
 8000ad4:	1aad      	subs	r5, r5, r2
 8000ad6:	40a8      	lsls	r0, r5
 8000ad8:	4303      	orrs	r3, r0
 8000ada:	1e58      	subs	r0, r3, #1
 8000adc:	4183      	sbcs	r3, r0
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	e775      	b.n	80009ce <__aeabi_dadd+0x432>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d0e2      	beq.n	8000aac <__aeabi_dadd+0x510>
 8000ae6:	003a      	movs	r2, r7
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	d0cd      	beq.n	8000a88 <__aeabi_dadd+0x4ec>
 8000aec:	0742      	lsls	r2, r0, #29
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	08c0      	lsrs	r0, r0, #3
 8000af6:	0312      	lsls	r2, r2, #12
 8000af8:	4210      	tst	r0, r2
 8000afa:	d006      	beq.n	8000b0a <__aeabi_dadd+0x56e>
 8000afc:	08fc      	lsrs	r4, r7, #3
 8000afe:	4214      	tst	r4, r2
 8000b00:	d103      	bne.n	8000b0a <__aeabi_dadd+0x56e>
 8000b02:	0020      	movs	r0, r4
 8000b04:	08cb      	lsrs	r3, r1, #3
 8000b06:	077a      	lsls	r2, r7, #29
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	0f5a      	lsrs	r2, r3, #29
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	0752      	lsls	r2, r2, #29
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	e690      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000b16:	4643      	mov	r3, r8
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x582>
 8000b1c:	e709      	b.n	8000932 <__aeabi_dadd+0x396>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	4642      	mov	r2, r8
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	075b      	lsls	r3, r3, #29
 8000b26:	4655      	mov	r5, sl
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	08d0      	lsrs	r0, r2, #3
 8000b2c:	e666      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b2e:	1acc      	subs	r4, r1, r3
 8000b30:	42a1      	cmp	r1, r4
 8000b32:	4189      	sbcs	r1, r1
 8000b34:	1a3f      	subs	r7, r7, r0
 8000b36:	4249      	negs	r1, r1
 8000b38:	4655      	mov	r5, sl
 8000b3a:	2601      	movs	r6, #1
 8000b3c:	1a7f      	subs	r7, r7, r1
 8000b3e:	e57e      	b.n	800063e <__aeabi_dadd+0xa2>
 8000b40:	4642      	mov	r2, r8
 8000b42:	1a5c      	subs	r4, r3, r1
 8000b44:	1a87      	subs	r7, r0, r2
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	4192      	sbcs	r2, r2
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	1abf      	subs	r7, r7, r2
 8000b4e:	023a      	lsls	r2, r7, #8
 8000b50:	d53d      	bpl.n	8000bce <__aeabi_dadd+0x632>
 8000b52:	1acc      	subs	r4, r1, r3
 8000b54:	42a1      	cmp	r1, r4
 8000b56:	4189      	sbcs	r1, r1
 8000b58:	4643      	mov	r3, r8
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	1a1f      	subs	r7, r3, r0
 8000b5e:	4655      	mov	r5, sl
 8000b60:	1a7f      	subs	r7, r7, r1
 8000b62:	e595      	b.n	8000690 <__aeabi_dadd+0xf4>
 8000b64:	077b      	lsls	r3, r7, #29
 8000b66:	08c9      	lsrs	r1, r1, #3
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	08f8      	lsrs	r0, r7, #3
 8000b6c:	e643      	b.n	80007f6 <__aeabi_dadd+0x25a>
 8000b6e:	4644      	mov	r4, r8
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	430c      	orrs	r4, r1
 8000b74:	d130      	bne.n	8000bd8 <__aeabi_dadd+0x63c>
 8000b76:	0742      	lsls	r2, r0, #29
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	e65c      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000b7e:	077b      	lsls	r3, r7, #29
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	430b      	orrs	r3, r1
 8000b84:	08f8      	lsrs	r0, r7, #3
 8000b86:	e639      	b.n	80007fc <__aeabi_dadd+0x260>
 8000b88:	185c      	adds	r4, r3, r1
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	419b      	sbcs	r3, r3
 8000b8e:	4440      	add	r0, r8
 8000b90:	425b      	negs	r3, r3
 8000b92:	18c7      	adds	r7, r0, r3
 8000b94:	023b      	lsls	r3, r7, #8
 8000b96:	d400      	bmi.n	8000b9a <__aeabi_dadd+0x5fe>
 8000b98:	e625      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <__aeabi_dadd+0x674>)
 8000b9c:	2601      	movs	r6, #1
 8000b9e:	401f      	ands	r7, r3
 8000ba0:	e621      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	3a20      	subs	r2, #32
 8000ba6:	40d4      	lsrs	r4, r2
 8000ba8:	4662      	mov	r2, ip
 8000baa:	2a20      	cmp	r2, #32
 8000bac:	d004      	beq.n	8000bb8 <__aeabi_dadd+0x61c>
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	4666      	mov	r6, ip
 8000bb2:	1b92      	subs	r2, r2, r6
 8000bb4:	4090      	lsls	r0, r2
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	4193      	sbcs	r3, r2
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	e67e      	b.n	80008be <__aeabi_dadd+0x322>
 8000bc0:	185c      	adds	r4, r3, r1
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	4189      	sbcs	r1, r1
 8000bc6:	4440      	add	r0, r8
 8000bc8:	4249      	negs	r1, r1
 8000bca:	1847      	adds	r7, r0, r1
 8000bcc:	e6dd      	b.n	800098a <__aeabi_dadd+0x3ee>
 8000bce:	0023      	movs	r3, r4
 8000bd0:	433b      	orrs	r3, r7
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x63a>
 8000bd4:	e6ad      	b.n	8000932 <__aeabi_dadd+0x396>
 8000bd6:	e606      	b.n	80007e6 <__aeabi_dadd+0x24a>
 8000bd8:	0744      	lsls	r4, r0, #29
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	2480      	movs	r4, #128	; 0x80
 8000bde:	08c0      	lsrs	r0, r0, #3
 8000be0:	0324      	lsls	r4, r4, #12
 8000be2:	4220      	tst	r0, r4
 8000be4:	d008      	beq.n	8000bf8 <__aeabi_dadd+0x65c>
 8000be6:	4642      	mov	r2, r8
 8000be8:	08d6      	lsrs	r6, r2, #3
 8000bea:	4226      	tst	r6, r4
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_dadd+0x65c>
 8000bee:	4655      	mov	r5, sl
 8000bf0:	0030      	movs	r0, r6
 8000bf2:	08cb      	lsrs	r3, r1, #3
 8000bf4:	0751      	lsls	r1, r2, #29
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	0f5a      	lsrs	r2, r3, #29
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	0752      	lsls	r2, r2, #29
 8000c00:	4313      	orrs	r3, r2
 8000c02:	e619      	b.n	8000838 <__aeabi_dadd+0x29c>
 8000c04:	2300      	movs	r3, #0
 8000c06:	4a01      	ldr	r2, [pc, #4]	; (8000c0c <__aeabi_dadd+0x670>)
 8000c08:	001f      	movs	r7, r3
 8000c0a:	e55e      	b.n	80006ca <__aeabi_dadd+0x12e>
 8000c0c:	000007ff 	.word	0x000007ff
 8000c10:	ff7fffff 	.word	0xff7fffff

08000c14 <__aeabi_ddiv>:
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	4657      	mov	r7, sl
 8000c18:	464e      	mov	r6, r9
 8000c1a:	4645      	mov	r5, r8
 8000c1c:	46de      	mov	lr, fp
 8000c1e:	b5e0      	push	{r5, r6, r7, lr}
 8000c20:	4681      	mov	r9, r0
 8000c22:	0005      	movs	r5, r0
 8000c24:	030c      	lsls	r4, r1, #12
 8000c26:	0048      	lsls	r0, r1, #1
 8000c28:	4692      	mov	sl, r2
 8000c2a:	001f      	movs	r7, r3
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	0b24      	lsrs	r4, r4, #12
 8000c30:	0d40      	lsrs	r0, r0, #21
 8000c32:	0fce      	lsrs	r6, r1, #31
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_ddiv+0x26>
 8000c38:	e156      	b.n	8000ee8 <__aeabi_ddiv+0x2d4>
 8000c3a:	4bd4      	ldr	r3, [pc, #848]	; (8000f8c <__aeabi_ddiv+0x378>)
 8000c3c:	4298      	cmp	r0, r3
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0x2e>
 8000c40:	e172      	b.n	8000f28 <__aeabi_ddiv+0x314>
 8000c42:	0f6b      	lsrs	r3, r5, #29
 8000c44:	00e4      	lsls	r4, r4, #3
 8000c46:	431c      	orrs	r4, r3
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	041b      	lsls	r3, r3, #16
 8000c4c:	4323      	orrs	r3, r4
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4bcf      	ldr	r3, [pc, #828]	; (8000f90 <__aeabi_ddiv+0x37c>)
 8000c52:	00ed      	lsls	r5, r5, #3
 8000c54:	469b      	mov	fp, r3
 8000c56:	2300      	movs	r3, #0
 8000c58:	4699      	mov	r9, r3
 8000c5a:	4483      	add	fp, r0
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	033c      	lsls	r4, r7, #12
 8000c60:	007b      	lsls	r3, r7, #1
 8000c62:	4650      	mov	r0, sl
 8000c64:	0b24      	lsrs	r4, r4, #12
 8000c66:	0d5b      	lsrs	r3, r3, #21
 8000c68:	0fff      	lsrs	r7, r7, #31
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x5c>
 8000c6e:	e11f      	b.n	8000eb0 <__aeabi_ddiv+0x29c>
 8000c70:	4ac6      	ldr	r2, [pc, #792]	; (8000f8c <__aeabi_ddiv+0x378>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x64>
 8000c76:	e162      	b.n	8000f3e <__aeabi_ddiv+0x32a>
 8000c78:	49c5      	ldr	r1, [pc, #788]	; (8000f90 <__aeabi_ddiv+0x37c>)
 8000c7a:	0f42      	lsrs	r2, r0, #29
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	00e4      	lsls	r4, r4, #3
 8000c80:	4659      	mov	r1, fp
 8000c82:	4314      	orrs	r4, r2
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	4463      	add	r3, ip
 8000c88:	0412      	lsls	r2, r2, #16
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	4314      	orrs	r4, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	00c2      	lsls	r2, r0, #3
 8000c92:	2000      	movs	r0, #0
 8000c94:	0033      	movs	r3, r6
 8000c96:	407b      	eors	r3, r7
 8000c98:	469a      	mov	sl, r3
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d827      	bhi.n	8000cf0 <__aeabi_ddiv+0xdc>
 8000ca0:	49bc      	ldr	r1, [pc, #752]	; (8000f94 <__aeabi_ddiv+0x380>)
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	58cb      	ldr	r3, [r1, r3]
 8000ca6:	469f      	mov	pc, r3
 8000ca8:	46b2      	mov	sl, r6
 8000caa:	9b00      	ldr	r3, [sp, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d016      	beq.n	8000cde <__aeabi_ddiv+0xca>
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_ddiv+0xa2>
 8000cb4:	e28e      	b.n	80011d4 <__aeabi_ddiv+0x5c0>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_ddiv+0xa8>
 8000cba:	e0d9      	b.n	8000e70 <__aeabi_ddiv+0x25c>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	4652      	mov	r2, sl
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	07d2      	lsls	r2, r2, #31
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	0028      	movs	r0, r5
 8000cce:	0019      	movs	r1, r3
 8000cd0:	b005      	add	sp, #20
 8000cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd4:	46bb      	mov	fp, r7
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	46a9      	mov	r9, r5
 8000cda:	46a0      	mov	r8, r4
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	4baa      	ldr	r3, [pc, #680]	; (8000f8c <__aeabi_ddiv+0x378>)
 8000ce4:	e7ed      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8000ce6:	46ba      	mov	sl, r7
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	0015      	movs	r5, r2
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	e7dc      	b.n	8000caa <__aeabi_ddiv+0x96>
 8000cf0:	4544      	cmp	r4, r8
 8000cf2:	d200      	bcs.n	8000cf6 <__aeabi_ddiv+0xe2>
 8000cf4:	e1c7      	b.n	8001086 <__aeabi_ddiv+0x472>
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_ddiv+0xe6>
 8000cf8:	e1c2      	b.n	8001080 <__aeabi_ddiv+0x46c>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	469c      	mov	ip, r3
 8000d00:	002e      	movs	r6, r5
 8000d02:	4640      	mov	r0, r8
 8000d04:	2500      	movs	r5, #0
 8000d06:	44e3      	add	fp, ip
 8000d08:	0223      	lsls	r3, r4, #8
 8000d0a:	0e14      	lsrs	r4, r2, #24
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	4699      	mov	r9, r3
 8000d12:	0423      	lsls	r3, r4, #16
 8000d14:	0c1f      	lsrs	r7, r3, #16
 8000d16:	0212      	lsls	r2, r2, #8
 8000d18:	4649      	mov	r1, r9
 8000d1a:	9200      	str	r2, [sp, #0]
 8000d1c:	9701      	str	r7, [sp, #4]
 8000d1e:	f7ff fa9f 	bl	8000260 <__aeabi_uidivmod>
 8000d22:	0002      	movs	r2, r0
 8000d24:	437a      	muls	r2, r7
 8000d26:	040b      	lsls	r3, r1, #16
 8000d28:	0c31      	lsrs	r1, r6, #16
 8000d2a:	4680      	mov	r8, r0
 8000d2c:	4319      	orrs	r1, r3
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d907      	bls.n	8000d42 <__aeabi_ddiv+0x12e>
 8000d32:	2301      	movs	r3, #1
 8000d34:	425b      	negs	r3, r3
 8000d36:	469c      	mov	ip, r3
 8000d38:	1909      	adds	r1, r1, r4
 8000d3a:	44e0      	add	r8, ip
 8000d3c:	428c      	cmp	r4, r1
 8000d3e:	d800      	bhi.n	8000d42 <__aeabi_ddiv+0x12e>
 8000d40:	e207      	b.n	8001152 <__aeabi_ddiv+0x53e>
 8000d42:	1a88      	subs	r0, r1, r2
 8000d44:	4649      	mov	r1, r9
 8000d46:	f7ff fa8b 	bl	8000260 <__aeabi_uidivmod>
 8000d4a:	0409      	lsls	r1, r1, #16
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	0431      	lsls	r1, r6, #16
 8000d50:	4666      	mov	r6, ip
 8000d52:	9a01      	ldr	r2, [sp, #4]
 8000d54:	0c09      	lsrs	r1, r1, #16
 8000d56:	4342      	muls	r2, r0
 8000d58:	0003      	movs	r3, r0
 8000d5a:	4331      	orrs	r1, r6
 8000d5c:	428a      	cmp	r2, r1
 8000d5e:	d904      	bls.n	8000d6a <__aeabi_ddiv+0x156>
 8000d60:	1909      	adds	r1, r1, r4
 8000d62:	3b01      	subs	r3, #1
 8000d64:	428c      	cmp	r4, r1
 8000d66:	d800      	bhi.n	8000d6a <__aeabi_ddiv+0x156>
 8000d68:	e1ed      	b.n	8001146 <__aeabi_ddiv+0x532>
 8000d6a:	1a88      	subs	r0, r1, r2
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	431a      	orrs	r2, r3
 8000d72:	4690      	mov	r8, r2
 8000d74:	4641      	mov	r1, r8
 8000d76:	9b00      	ldr	r3, [sp, #0]
 8000d78:	040e      	lsls	r6, r1, #16
 8000d7a:	0c1b      	lsrs	r3, r3, #16
 8000d7c:	001f      	movs	r7, r3
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	0c36      	lsrs	r6, r6, #16
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	0c19      	lsrs	r1, r3, #16
 8000d88:	000b      	movs	r3, r1
 8000d8a:	4373      	muls	r3, r6
 8000d8c:	0c12      	lsrs	r2, r2, #16
 8000d8e:	437e      	muls	r6, r7
 8000d90:	9103      	str	r1, [sp, #12]
 8000d92:	4351      	muls	r1, r2
 8000d94:	437a      	muls	r2, r7
 8000d96:	0c1f      	lsrs	r7, r3, #16
 8000d98:	46bc      	mov	ip, r7
 8000d9a:	1876      	adds	r6, r6, r1
 8000d9c:	4466      	add	r6, ip
 8000d9e:	42b1      	cmp	r1, r6
 8000da0:	d903      	bls.n	8000daa <__aeabi_ddiv+0x196>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0249      	lsls	r1, r1, #9
 8000da6:	468c      	mov	ip, r1
 8000da8:	4462      	add	r2, ip
 8000daa:	0c31      	lsrs	r1, r6, #16
 8000dac:	188a      	adds	r2, r1, r2
 8000dae:	0431      	lsls	r1, r6, #16
 8000db0:	041e      	lsls	r6, r3, #16
 8000db2:	0c36      	lsrs	r6, r6, #16
 8000db4:	198e      	adds	r6, r1, r6
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d302      	bcc.n	8000dc0 <__aeabi_ddiv+0x1ac>
 8000dba:	d112      	bne.n	8000de2 <__aeabi_ddiv+0x1ce>
 8000dbc:	42b5      	cmp	r5, r6
 8000dbe:	d210      	bcs.n	8000de2 <__aeabi_ddiv+0x1ce>
 8000dc0:	4643      	mov	r3, r8
 8000dc2:	1e59      	subs	r1, r3, #1
 8000dc4:	9b00      	ldr	r3, [sp, #0]
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	4465      	add	r5, ip
 8000dca:	001f      	movs	r7, r3
 8000dcc:	429d      	cmp	r5, r3
 8000dce:	419b      	sbcs	r3, r3
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	191b      	adds	r3, r3, r4
 8000dd4:	18c0      	adds	r0, r0, r3
 8000dd6:	4284      	cmp	r4, r0
 8000dd8:	d200      	bcs.n	8000ddc <__aeabi_ddiv+0x1c8>
 8000dda:	e1a0      	b.n	800111e <__aeabi_ddiv+0x50a>
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1cc>
 8000dde:	e19b      	b.n	8001118 <__aeabi_ddiv+0x504>
 8000de0:	4688      	mov	r8, r1
 8000de2:	1bae      	subs	r6, r5, r6
 8000de4:	42b5      	cmp	r5, r6
 8000de6:	41ad      	sbcs	r5, r5
 8000de8:	1a80      	subs	r0, r0, r2
 8000dea:	426d      	negs	r5, r5
 8000dec:	1b40      	subs	r0, r0, r5
 8000dee:	4284      	cmp	r4, r0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x1e0>
 8000df2:	e1d5      	b.n	80011a0 <__aeabi_ddiv+0x58c>
 8000df4:	4649      	mov	r1, r9
 8000df6:	f7ff fa33 	bl	8000260 <__aeabi_uidivmod>
 8000dfa:	9a01      	ldr	r2, [sp, #4]
 8000dfc:	040b      	lsls	r3, r1, #16
 8000dfe:	4342      	muls	r2, r0
 8000e00:	0c31      	lsrs	r1, r6, #16
 8000e02:	0005      	movs	r5, r0
 8000e04:	4319      	orrs	r1, r3
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d900      	bls.n	8000e0c <__aeabi_ddiv+0x1f8>
 8000e0a:	e16c      	b.n	80010e6 <__aeabi_ddiv+0x4d2>
 8000e0c:	1a88      	subs	r0, r1, r2
 8000e0e:	4649      	mov	r1, r9
 8000e10:	f7ff fa26 	bl	8000260 <__aeabi_uidivmod>
 8000e14:	9a01      	ldr	r2, [sp, #4]
 8000e16:	0436      	lsls	r6, r6, #16
 8000e18:	4342      	muls	r2, r0
 8000e1a:	0409      	lsls	r1, r1, #16
 8000e1c:	0c36      	lsrs	r6, r6, #16
 8000e1e:	0003      	movs	r3, r0
 8000e20:	430e      	orrs	r6, r1
 8000e22:	42b2      	cmp	r2, r6
 8000e24:	d900      	bls.n	8000e28 <__aeabi_ddiv+0x214>
 8000e26:	e153      	b.n	80010d0 <__aeabi_ddiv+0x4bc>
 8000e28:	9803      	ldr	r0, [sp, #12]
 8000e2a:	1ab6      	subs	r6, r6, r2
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	042d      	lsls	r5, r5, #16
 8000e30:	431d      	orrs	r5, r3
 8000e32:	9f02      	ldr	r7, [sp, #8]
 8000e34:	042b      	lsls	r3, r5, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	435a      	muls	r2, r3
 8000e3a:	437b      	muls	r3, r7
 8000e3c:	469c      	mov	ip, r3
 8000e3e:	0c29      	lsrs	r1, r5, #16
 8000e40:	4348      	muls	r0, r1
 8000e42:	0c13      	lsrs	r3, r2, #16
 8000e44:	4484      	add	ip, r0
 8000e46:	4463      	add	r3, ip
 8000e48:	4379      	muls	r1, r7
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d903      	bls.n	8000e56 <__aeabi_ddiv+0x242>
 8000e4e:	2080      	movs	r0, #128	; 0x80
 8000e50:	0240      	lsls	r0, r0, #9
 8000e52:	4684      	mov	ip, r0
 8000e54:	4461      	add	r1, ip
 8000e56:	0c18      	lsrs	r0, r3, #16
 8000e58:	0412      	lsls	r2, r2, #16
 8000e5a:	041b      	lsls	r3, r3, #16
 8000e5c:	0c12      	lsrs	r2, r2, #16
 8000e5e:	1841      	adds	r1, r0, r1
 8000e60:	189b      	adds	r3, r3, r2
 8000e62:	428e      	cmp	r6, r1
 8000e64:	d200      	bcs.n	8000e68 <__aeabi_ddiv+0x254>
 8000e66:	e0ff      	b.n	8001068 <__aeabi_ddiv+0x454>
 8000e68:	d100      	bne.n	8000e6c <__aeabi_ddiv+0x258>
 8000e6a:	e0fa      	b.n	8001062 <__aeabi_ddiv+0x44e>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	431d      	orrs	r5, r3
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <__aeabi_ddiv+0x384>)
 8000e72:	445a      	add	r2, fp
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_ddiv+0x266>
 8000e78:	e0aa      	b.n	8000fd0 <__aeabi_ddiv+0x3bc>
 8000e7a:	076b      	lsls	r3, r5, #29
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_ddiv+0x26c>
 8000e7e:	e13d      	b.n	80010fc <__aeabi_ddiv+0x4e8>
 8000e80:	08ed      	lsrs	r5, r5, #3
 8000e82:	4643      	mov	r3, r8
 8000e84:	01db      	lsls	r3, r3, #7
 8000e86:	d506      	bpl.n	8000e96 <__aeabi_ddiv+0x282>
 8000e88:	4642      	mov	r2, r8
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <__aeabi_ddiv+0x388>)
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	4690      	mov	r8, r2
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	00d2      	lsls	r2, r2, #3
 8000e94:	445a      	add	r2, fp
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <__aeabi_ddiv+0x38c>)
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dd00      	ble.n	8000e9e <__aeabi_ddiv+0x28a>
 8000e9c:	e71f      	b.n	8000cde <__aeabi_ddiv+0xca>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	075b      	lsls	r3, r3, #29
 8000ea2:	431d      	orrs	r5, r3
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	0552      	lsls	r2, r2, #21
 8000ea8:	025c      	lsls	r4, r3, #9
 8000eaa:	0b24      	lsrs	r4, r4, #12
 8000eac:	0d53      	lsrs	r3, r2, #21
 8000eae:	e708      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	4322      	orrs	r2, r4
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x2a4>
 8000eb6:	e07b      	b.n	8000fb0 <__aeabi_ddiv+0x39c>
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0x2aa>
 8000ebc:	e0fa      	b.n	80010b4 <__aeabi_ddiv+0x4a0>
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f001 f9da 	bl	8002278 <__clzsi2>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	3a0b      	subs	r2, #11
 8000ec8:	231d      	movs	r3, #29
 8000eca:	0001      	movs	r1, r0
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	3908      	subs	r1, #8
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	408c      	lsls	r4, r1
 8000ed6:	4314      	orrs	r4, r2
 8000ed8:	4652      	mov	r2, sl
 8000eda:	408a      	lsls	r2, r1
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <__aeabi_ddiv+0x390>)
 8000ede:	4458      	add	r0, fp
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	4483      	add	fp, r0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e6d5      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000ee8:	464b      	mov	r3, r9
 8000eea:	4323      	orrs	r3, r4
 8000eec:	4698      	mov	r8, r3
 8000eee:	d044      	beq.n	8000f7a <__aeabi_ddiv+0x366>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x2e2>
 8000ef4:	e0ce      	b.n	8001094 <__aeabi_ddiv+0x480>
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	f001 f9be 	bl	8002278 <__clzsi2>
 8000efc:	0001      	movs	r1, r0
 8000efe:	0002      	movs	r2, r0
 8000f00:	390b      	subs	r1, #11
 8000f02:	231d      	movs	r3, #29
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	4649      	mov	r1, r9
 8000f08:	0010      	movs	r0, r2
 8000f0a:	40d9      	lsrs	r1, r3
 8000f0c:	3808      	subs	r0, #8
 8000f0e:	4084      	lsls	r4, r0
 8000f10:	000b      	movs	r3, r1
 8000f12:	464d      	mov	r5, r9
 8000f14:	4323      	orrs	r3, r4
 8000f16:	4698      	mov	r8, r3
 8000f18:	4085      	lsls	r5, r0
 8000f1a:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <__aeabi_ddiv+0x394>)
 8000f1c:	1a83      	subs	r3, r0, r2
 8000f1e:	469b      	mov	fp, r3
 8000f20:	2300      	movs	r3, #0
 8000f22:	4699      	mov	r9, r3
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	e69a      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f28:	464b      	mov	r3, r9
 8000f2a:	4323      	orrs	r3, r4
 8000f2c:	4698      	mov	r8, r3
 8000f2e:	d11d      	bne.n	8000f6c <__aeabi_ddiv+0x358>
 8000f30:	2308      	movs	r3, #8
 8000f32:	4699      	mov	r9, r3
 8000f34:	3b06      	subs	r3, #6
 8000f36:	2500      	movs	r5, #0
 8000f38:	4683      	mov	fp, r0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	e68f      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f3e:	4652      	mov	r2, sl
 8000f40:	4322      	orrs	r2, r4
 8000f42:	d109      	bne.n	8000f58 <__aeabi_ddiv+0x344>
 8000f44:	2302      	movs	r3, #2
 8000f46:	4649      	mov	r1, r9
 8000f48:	4319      	orrs	r1, r3
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <__aeabi_ddiv+0x398>)
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	469c      	mov	ip, r3
 8000f50:	2400      	movs	r4, #0
 8000f52:	2002      	movs	r0, #2
 8000f54:	44e3      	add	fp, ip
 8000f56:	e69d      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	464a      	mov	r2, r9
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <__aeabi_ddiv+0x398>)
 8000f60:	4691      	mov	r9, r2
 8000f62:	469c      	mov	ip, r3
 8000f64:	4652      	mov	r2, sl
 8000f66:	2003      	movs	r0, #3
 8000f68:	44e3      	add	fp, ip
 8000f6a:	e693      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	4699      	mov	r9, r3
 8000f70:	3b09      	subs	r3, #9
 8000f72:	46a0      	mov	r8, r4
 8000f74:	4683      	mov	fp, r0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	e671      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	2300      	movs	r3, #0
 8000f80:	469b      	mov	fp, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	2500      	movs	r5, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	e669      	b.n	8000c5e <__aeabi_ddiv+0x4a>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	000007ff 	.word	0x000007ff
 8000f90:	fffffc01 	.word	0xfffffc01
 8000f94:	0800d234 	.word	0x0800d234
 8000f98:	000003ff 	.word	0x000003ff
 8000f9c:	feffffff 	.word	0xfeffffff
 8000fa0:	000007fe 	.word	0x000007fe
 8000fa4:	000003f3 	.word	0x000003f3
 8000fa8:	fffffc0d 	.word	0xfffffc0d
 8000fac:	fffff801 	.word	0xfffff801
 8000fb0:	4649      	mov	r1, r9
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	4689      	mov	r9, r1
 8000fb8:	2400      	movs	r4, #0
 8000fba:	2001      	movs	r0, #1
 8000fbc:	e66a      	b.n	8000c94 <__aeabi_ddiv+0x80>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2480      	movs	r4, #128	; 0x80
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	e67a      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8000fcc:	2501      	movs	r5, #1
 8000fce:	426d      	negs	r5, r5
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	2b38      	cmp	r3, #56	; 0x38
 8000fd6:	dd00      	ble.n	8000fda <__aeabi_ddiv+0x3c6>
 8000fd8:	e670      	b.n	8000cbc <__aeabi_ddiv+0xa8>
 8000fda:	2b1f      	cmp	r3, #31
 8000fdc:	dc00      	bgt.n	8000fe0 <__aeabi_ddiv+0x3cc>
 8000fde:	e0bf      	b.n	8001160 <__aeabi_ddiv+0x54c>
 8000fe0:	211f      	movs	r1, #31
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	1a8a      	subs	r2, r1, r2
 8000fe6:	4641      	mov	r1, r8
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d004      	beq.n	8000ffa <__aeabi_ddiv+0x3e6>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	4b80      	ldr	r3, [pc, #512]	; (80011f4 <__aeabi_ddiv+0x5e0>)
 8000ff4:	445b      	add	r3, fp
 8000ff6:	4099      	lsls	r1, r3
 8000ff8:	430d      	orrs	r5, r1
 8000ffa:	1e6b      	subs	r3, r5, #1
 8000ffc:	419d      	sbcs	r5, r3
 8000ffe:	2307      	movs	r3, #7
 8001000:	432a      	orrs	r2, r5
 8001002:	001d      	movs	r5, r3
 8001004:	2400      	movs	r4, #0
 8001006:	4015      	ands	r5, r2
 8001008:	4213      	tst	r3, r2
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x3fa>
 800100c:	e0d4      	b.n	80011b8 <__aeabi_ddiv+0x5a4>
 800100e:	210f      	movs	r1, #15
 8001010:	2300      	movs	r3, #0
 8001012:	4011      	ands	r1, r2
 8001014:	2904      	cmp	r1, #4
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0x406>
 8001018:	e0cb      	b.n	80011b2 <__aeabi_ddiv+0x59e>
 800101a:	1d11      	adds	r1, r2, #4
 800101c:	4291      	cmp	r1, r2
 800101e:	4192      	sbcs	r2, r2
 8001020:	4252      	negs	r2, r2
 8001022:	189b      	adds	r3, r3, r2
 8001024:	000a      	movs	r2, r1
 8001026:	0219      	lsls	r1, r3, #8
 8001028:	d400      	bmi.n	800102c <__aeabi_ddiv+0x418>
 800102a:	e0c2      	b.n	80011b2 <__aeabi_ddiv+0x59e>
 800102c:	2301      	movs	r3, #1
 800102e:	2400      	movs	r4, #0
 8001030:	2500      	movs	r5, #0
 8001032:	e646      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	4641      	mov	r1, r8
 8001038:	031b      	lsls	r3, r3, #12
 800103a:	4219      	tst	r1, r3
 800103c:	d008      	beq.n	8001050 <__aeabi_ddiv+0x43c>
 800103e:	421c      	tst	r4, r3
 8001040:	d106      	bne.n	8001050 <__aeabi_ddiv+0x43c>
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46ba      	mov	sl, r7
 8001048:	0015      	movs	r5, r2
 800104a:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	e638      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8001050:	2480      	movs	r4, #128	; 0x80
 8001052:	4643      	mov	r3, r8
 8001054:	0324      	lsls	r4, r4, #12
 8001056:	431c      	orrs	r4, r3
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	46b2      	mov	sl, r6
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 800105e:	0b24      	lsrs	r4, r4, #12
 8001060:	e62f      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x454>
 8001066:	e703      	b.n	8000e70 <__aeabi_ddiv+0x25c>
 8001068:	19a6      	adds	r6, r4, r6
 800106a:	1e68      	subs	r0, r5, #1
 800106c:	42a6      	cmp	r6, r4
 800106e:	d200      	bcs.n	8001072 <__aeabi_ddiv+0x45e>
 8001070:	e08d      	b.n	800118e <__aeabi_ddiv+0x57a>
 8001072:	428e      	cmp	r6, r1
 8001074:	d200      	bcs.n	8001078 <__aeabi_ddiv+0x464>
 8001076:	e0a3      	b.n	80011c0 <__aeabi_ddiv+0x5ac>
 8001078:	d100      	bne.n	800107c <__aeabi_ddiv+0x468>
 800107a:	e0b3      	b.n	80011e4 <__aeabi_ddiv+0x5d0>
 800107c:	0005      	movs	r5, r0
 800107e:	e6f5      	b.n	8000e6c <__aeabi_ddiv+0x258>
 8001080:	42aa      	cmp	r2, r5
 8001082:	d900      	bls.n	8001086 <__aeabi_ddiv+0x472>
 8001084:	e639      	b.n	8000cfa <__aeabi_ddiv+0xe6>
 8001086:	4643      	mov	r3, r8
 8001088:	07de      	lsls	r6, r3, #31
 800108a:	0858      	lsrs	r0, r3, #1
 800108c:	086b      	lsrs	r3, r5, #1
 800108e:	431e      	orrs	r6, r3
 8001090:	07ed      	lsls	r5, r5, #31
 8001092:	e639      	b.n	8000d08 <__aeabi_ddiv+0xf4>
 8001094:	4648      	mov	r0, r9
 8001096:	f001 f8ef 	bl	8002278 <__clzsi2>
 800109a:	0001      	movs	r1, r0
 800109c:	0002      	movs	r2, r0
 800109e:	3115      	adds	r1, #21
 80010a0:	3220      	adds	r2, #32
 80010a2:	291c      	cmp	r1, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_ddiv+0x494>
 80010a6:	e72c      	b.n	8000f02 <__aeabi_ddiv+0x2ee>
 80010a8:	464b      	mov	r3, r9
 80010aa:	3808      	subs	r0, #8
 80010ac:	4083      	lsls	r3, r0
 80010ae:	2500      	movs	r5, #0
 80010b0:	4698      	mov	r8, r3
 80010b2:	e732      	b.n	8000f1a <__aeabi_ddiv+0x306>
 80010b4:	f001 f8e0 	bl	8002278 <__clzsi2>
 80010b8:	0003      	movs	r3, r0
 80010ba:	001a      	movs	r2, r3
 80010bc:	3215      	adds	r2, #21
 80010be:	3020      	adds	r0, #32
 80010c0:	2a1c      	cmp	r2, #28
 80010c2:	dc00      	bgt.n	80010c6 <__aeabi_ddiv+0x4b2>
 80010c4:	e700      	b.n	8000ec8 <__aeabi_ddiv+0x2b4>
 80010c6:	4654      	mov	r4, sl
 80010c8:	3b08      	subs	r3, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	409c      	lsls	r4, r3
 80010ce:	e705      	b.n	8000edc <__aeabi_ddiv+0x2c8>
 80010d0:	1936      	adds	r6, r6, r4
 80010d2:	3b01      	subs	r3, #1
 80010d4:	42b4      	cmp	r4, r6
 80010d6:	d900      	bls.n	80010da <__aeabi_ddiv+0x4c6>
 80010d8:	e6a6      	b.n	8000e28 <__aeabi_ddiv+0x214>
 80010da:	42b2      	cmp	r2, r6
 80010dc:	d800      	bhi.n	80010e0 <__aeabi_ddiv+0x4cc>
 80010de:	e6a3      	b.n	8000e28 <__aeabi_ddiv+0x214>
 80010e0:	1e83      	subs	r3, r0, #2
 80010e2:	1936      	adds	r6, r6, r4
 80010e4:	e6a0      	b.n	8000e28 <__aeabi_ddiv+0x214>
 80010e6:	1909      	adds	r1, r1, r4
 80010e8:	3d01      	subs	r5, #1
 80010ea:	428c      	cmp	r4, r1
 80010ec:	d900      	bls.n	80010f0 <__aeabi_ddiv+0x4dc>
 80010ee:	e68d      	b.n	8000e0c <__aeabi_ddiv+0x1f8>
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d800      	bhi.n	80010f6 <__aeabi_ddiv+0x4e2>
 80010f4:	e68a      	b.n	8000e0c <__aeabi_ddiv+0x1f8>
 80010f6:	1e85      	subs	r5, r0, #2
 80010f8:	1909      	adds	r1, r1, r4
 80010fa:	e687      	b.n	8000e0c <__aeabi_ddiv+0x1f8>
 80010fc:	230f      	movs	r3, #15
 80010fe:	402b      	ands	r3, r5
 8001100:	2b04      	cmp	r3, #4
 8001102:	d100      	bne.n	8001106 <__aeabi_ddiv+0x4f2>
 8001104:	e6bc      	b.n	8000e80 <__aeabi_ddiv+0x26c>
 8001106:	2305      	movs	r3, #5
 8001108:	425b      	negs	r3, r3
 800110a:	42ab      	cmp	r3, r5
 800110c:	419b      	sbcs	r3, r3
 800110e:	3504      	adds	r5, #4
 8001110:	425b      	negs	r3, r3
 8001112:	08ed      	lsrs	r5, r5, #3
 8001114:	4498      	add	r8, r3
 8001116:	e6b4      	b.n	8000e82 <__aeabi_ddiv+0x26e>
 8001118:	42af      	cmp	r7, r5
 800111a:	d900      	bls.n	800111e <__aeabi_ddiv+0x50a>
 800111c:	e660      	b.n	8000de0 <__aeabi_ddiv+0x1cc>
 800111e:	4282      	cmp	r2, r0
 8001120:	d804      	bhi.n	800112c <__aeabi_ddiv+0x518>
 8001122:	d000      	beq.n	8001126 <__aeabi_ddiv+0x512>
 8001124:	e65c      	b.n	8000de0 <__aeabi_ddiv+0x1cc>
 8001126:	42ae      	cmp	r6, r5
 8001128:	d800      	bhi.n	800112c <__aeabi_ddiv+0x518>
 800112a:	e659      	b.n	8000de0 <__aeabi_ddiv+0x1cc>
 800112c:	2302      	movs	r3, #2
 800112e:	425b      	negs	r3, r3
 8001130:	469c      	mov	ip, r3
 8001132:	9b00      	ldr	r3, [sp, #0]
 8001134:	44e0      	add	r8, ip
 8001136:	469c      	mov	ip, r3
 8001138:	4465      	add	r5, ip
 800113a:	429d      	cmp	r5, r3
 800113c:	419b      	sbcs	r3, r3
 800113e:	425b      	negs	r3, r3
 8001140:	191b      	adds	r3, r3, r4
 8001142:	18c0      	adds	r0, r0, r3
 8001144:	e64d      	b.n	8000de2 <__aeabi_ddiv+0x1ce>
 8001146:	428a      	cmp	r2, r1
 8001148:	d800      	bhi.n	800114c <__aeabi_ddiv+0x538>
 800114a:	e60e      	b.n	8000d6a <__aeabi_ddiv+0x156>
 800114c:	1e83      	subs	r3, r0, #2
 800114e:	1909      	adds	r1, r1, r4
 8001150:	e60b      	b.n	8000d6a <__aeabi_ddiv+0x156>
 8001152:	428a      	cmp	r2, r1
 8001154:	d800      	bhi.n	8001158 <__aeabi_ddiv+0x544>
 8001156:	e5f4      	b.n	8000d42 <__aeabi_ddiv+0x12e>
 8001158:	1e83      	subs	r3, r0, #2
 800115a:	4698      	mov	r8, r3
 800115c:	1909      	adds	r1, r1, r4
 800115e:	e5f0      	b.n	8000d42 <__aeabi_ddiv+0x12e>
 8001160:	4925      	ldr	r1, [pc, #148]	; (80011f8 <__aeabi_ddiv+0x5e4>)
 8001162:	0028      	movs	r0, r5
 8001164:	4459      	add	r1, fp
 8001166:	408d      	lsls	r5, r1
 8001168:	4642      	mov	r2, r8
 800116a:	408a      	lsls	r2, r1
 800116c:	1e69      	subs	r1, r5, #1
 800116e:	418d      	sbcs	r5, r1
 8001170:	4641      	mov	r1, r8
 8001172:	40d8      	lsrs	r0, r3
 8001174:	40d9      	lsrs	r1, r3
 8001176:	4302      	orrs	r2, r0
 8001178:	432a      	orrs	r2, r5
 800117a:	000b      	movs	r3, r1
 800117c:	0751      	lsls	r1, r2, #29
 800117e:	d100      	bne.n	8001182 <__aeabi_ddiv+0x56e>
 8001180:	e751      	b.n	8001026 <__aeabi_ddiv+0x412>
 8001182:	210f      	movs	r1, #15
 8001184:	4011      	ands	r1, r2
 8001186:	2904      	cmp	r1, #4
 8001188:	d000      	beq.n	800118c <__aeabi_ddiv+0x578>
 800118a:	e746      	b.n	800101a <__aeabi_ddiv+0x406>
 800118c:	e74b      	b.n	8001026 <__aeabi_ddiv+0x412>
 800118e:	0005      	movs	r5, r0
 8001190:	428e      	cmp	r6, r1
 8001192:	d000      	beq.n	8001196 <__aeabi_ddiv+0x582>
 8001194:	e66a      	b.n	8000e6c <__aeabi_ddiv+0x258>
 8001196:	9a00      	ldr	r2, [sp, #0]
 8001198:	4293      	cmp	r3, r2
 800119a:	d000      	beq.n	800119e <__aeabi_ddiv+0x58a>
 800119c:	e666      	b.n	8000e6c <__aeabi_ddiv+0x258>
 800119e:	e667      	b.n	8000e70 <__aeabi_ddiv+0x25c>
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <__aeabi_ddiv+0x5e8>)
 80011a2:	445a      	add	r2, fp
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_ddiv+0x596>
 80011a8:	e710      	b.n	8000fcc <__aeabi_ddiv+0x3b8>
 80011aa:	2301      	movs	r3, #1
 80011ac:	2500      	movs	r5, #0
 80011ae:	4498      	add	r8, r3
 80011b0:	e667      	b.n	8000e82 <__aeabi_ddiv+0x26e>
 80011b2:	075d      	lsls	r5, r3, #29
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	0b1c      	lsrs	r4, r3, #12
 80011b8:	08d2      	lsrs	r2, r2, #3
 80011ba:	2300      	movs	r3, #0
 80011bc:	4315      	orrs	r5, r2
 80011be:	e580      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 80011c0:	9800      	ldr	r0, [sp, #0]
 80011c2:	3d02      	subs	r5, #2
 80011c4:	0042      	lsls	r2, r0, #1
 80011c6:	4282      	cmp	r2, r0
 80011c8:	41bf      	sbcs	r7, r7
 80011ca:	427f      	negs	r7, r7
 80011cc:	193c      	adds	r4, r7, r4
 80011ce:	1936      	adds	r6, r6, r4
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	e7dd      	b.n	8001190 <__aeabi_ddiv+0x57c>
 80011d4:	2480      	movs	r4, #128	; 0x80
 80011d6:	4643      	mov	r3, r8
 80011d8:	0324      	lsls	r4, r4, #12
 80011da:	431c      	orrs	r4, r3
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__aeabi_ddiv+0x5dc>)
 80011e0:	0b24      	lsrs	r4, r4, #12
 80011e2:	e56e      	b.n	8000cc2 <__aeabi_ddiv+0xae>
 80011e4:	9a00      	ldr	r2, [sp, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3ea      	bcc.n	80011c0 <__aeabi_ddiv+0x5ac>
 80011ea:	0005      	movs	r5, r0
 80011ec:	e7d3      	b.n	8001196 <__aeabi_ddiv+0x582>
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	000007ff 	.word	0x000007ff
 80011f4:	0000043e 	.word	0x0000043e
 80011f8:	0000041e 	.word	0x0000041e
 80011fc:	000003ff 	.word	0x000003ff

08001200 <__eqdf2>:
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	464e      	mov	r6, r9
 8001204:	4645      	mov	r5, r8
 8001206:	46de      	mov	lr, fp
 8001208:	4657      	mov	r7, sl
 800120a:	4690      	mov	r8, r2
 800120c:	b5e0      	push	{r5, r6, r7, lr}
 800120e:	0017      	movs	r7, r2
 8001210:	031a      	lsls	r2, r3, #12
 8001212:	0b12      	lsrs	r2, r2, #12
 8001214:	0005      	movs	r5, r0
 8001216:	4684      	mov	ip, r0
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <__eqdf2+0x80>)
 800121a:	030e      	lsls	r6, r1, #12
 800121c:	004c      	lsls	r4, r1, #1
 800121e:	4691      	mov	r9, r2
 8001220:	005a      	lsls	r2, r3, #1
 8001222:	0fdb      	lsrs	r3, r3, #31
 8001224:	469b      	mov	fp, r3
 8001226:	0b36      	lsrs	r6, r6, #12
 8001228:	0d64      	lsrs	r4, r4, #21
 800122a:	0fc9      	lsrs	r1, r1, #31
 800122c:	0d52      	lsrs	r2, r2, #21
 800122e:	4284      	cmp	r4, r0
 8001230:	d019      	beq.n	8001266 <__eqdf2+0x66>
 8001232:	4282      	cmp	r2, r0
 8001234:	d010      	beq.n	8001258 <__eqdf2+0x58>
 8001236:	2001      	movs	r0, #1
 8001238:	4294      	cmp	r4, r2
 800123a:	d10e      	bne.n	800125a <__eqdf2+0x5a>
 800123c:	454e      	cmp	r6, r9
 800123e:	d10c      	bne.n	800125a <__eqdf2+0x5a>
 8001240:	2001      	movs	r0, #1
 8001242:	45c4      	cmp	ip, r8
 8001244:	d109      	bne.n	800125a <__eqdf2+0x5a>
 8001246:	4559      	cmp	r1, fp
 8001248:	d017      	beq.n	800127a <__eqdf2+0x7a>
 800124a:	2c00      	cmp	r4, #0
 800124c:	d105      	bne.n	800125a <__eqdf2+0x5a>
 800124e:	0030      	movs	r0, r6
 8001250:	4328      	orrs	r0, r5
 8001252:	1e43      	subs	r3, r0, #1
 8001254:	4198      	sbcs	r0, r3
 8001256:	e000      	b.n	800125a <__eqdf2+0x5a>
 8001258:	2001      	movs	r0, #1
 800125a:	bcf0      	pop	{r4, r5, r6, r7}
 800125c:	46bb      	mov	fp, r7
 800125e:	46b2      	mov	sl, r6
 8001260:	46a9      	mov	r9, r5
 8001262:	46a0      	mov	r8, r4
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	0033      	movs	r3, r6
 8001268:	2001      	movs	r0, #1
 800126a:	432b      	orrs	r3, r5
 800126c:	d1f5      	bne.n	800125a <__eqdf2+0x5a>
 800126e:	42a2      	cmp	r2, r4
 8001270:	d1f3      	bne.n	800125a <__eqdf2+0x5a>
 8001272:	464b      	mov	r3, r9
 8001274:	433b      	orrs	r3, r7
 8001276:	d1f0      	bne.n	800125a <__eqdf2+0x5a>
 8001278:	e7e2      	b.n	8001240 <__eqdf2+0x40>
 800127a:	2000      	movs	r0, #0
 800127c:	e7ed      	b.n	800125a <__eqdf2+0x5a>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff

08001284 <__gedf2>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	4647      	mov	r7, r8
 8001288:	46ce      	mov	lr, r9
 800128a:	0004      	movs	r4, r0
 800128c:	0018      	movs	r0, r3
 800128e:	0016      	movs	r6, r2
 8001290:	031b      	lsls	r3, r3, #12
 8001292:	0b1b      	lsrs	r3, r3, #12
 8001294:	4d2d      	ldr	r5, [pc, #180]	; (800134c <__gedf2+0xc8>)
 8001296:	004a      	lsls	r2, r1, #1
 8001298:	4699      	mov	r9, r3
 800129a:	b580      	push	{r7, lr}
 800129c:	0043      	lsls	r3, r0, #1
 800129e:	030f      	lsls	r7, r1, #12
 80012a0:	46a4      	mov	ip, r4
 80012a2:	46b0      	mov	r8, r6
 80012a4:	0b3f      	lsrs	r7, r7, #12
 80012a6:	0d52      	lsrs	r2, r2, #21
 80012a8:	0fc9      	lsrs	r1, r1, #31
 80012aa:	0d5b      	lsrs	r3, r3, #21
 80012ac:	0fc0      	lsrs	r0, r0, #31
 80012ae:	42aa      	cmp	r2, r5
 80012b0:	d021      	beq.n	80012f6 <__gedf2+0x72>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d013      	beq.n	80012de <__gedf2+0x5a>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d122      	bne.n	8001300 <__gedf2+0x7c>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <__gedf2+0x42>
 80012c0:	464d      	mov	r5, r9
 80012c2:	432e      	orrs	r6, r5
 80012c4:	d022      	beq.n	800130c <__gedf2+0x88>
 80012c6:	2c00      	cmp	r4, #0
 80012c8:	d010      	beq.n	80012ec <__gedf2+0x68>
 80012ca:	4281      	cmp	r1, r0
 80012cc:	d022      	beq.n	8001314 <__gedf2+0x90>
 80012ce:	2002      	movs	r0, #2
 80012d0:	3901      	subs	r1, #1
 80012d2:	4008      	ands	r0, r1
 80012d4:	3801      	subs	r0, #1
 80012d6:	bcc0      	pop	{r6, r7}
 80012d8:	46b9      	mov	r9, r7
 80012da:	46b0      	mov	r8, r6
 80012dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012de:	464d      	mov	r5, r9
 80012e0:	432e      	orrs	r6, r5
 80012e2:	d129      	bne.n	8001338 <__gedf2+0xb4>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d1f0      	bne.n	80012ca <__gedf2+0x46>
 80012e8:	433c      	orrs	r4, r7
 80012ea:	d1ee      	bne.n	80012ca <__gedf2+0x46>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d1f2      	bne.n	80012d6 <__gedf2+0x52>
 80012f0:	2001      	movs	r0, #1
 80012f2:	4240      	negs	r0, r0
 80012f4:	e7ef      	b.n	80012d6 <__gedf2+0x52>
 80012f6:	003d      	movs	r5, r7
 80012f8:	4325      	orrs	r5, r4
 80012fa:	d11d      	bne.n	8001338 <__gedf2+0xb4>
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d0ee      	beq.n	80012de <__gedf2+0x5a>
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e2      	bne.n	80012ca <__gedf2+0x46>
 8001304:	464c      	mov	r4, r9
 8001306:	4326      	orrs	r6, r4
 8001308:	d1df      	bne.n	80012ca <__gedf2+0x46>
 800130a:	e7e0      	b.n	80012ce <__gedf2+0x4a>
 800130c:	2000      	movs	r0, #0
 800130e:	2c00      	cmp	r4, #0
 8001310:	d0e1      	beq.n	80012d6 <__gedf2+0x52>
 8001312:	e7dc      	b.n	80012ce <__gedf2+0x4a>
 8001314:	429a      	cmp	r2, r3
 8001316:	dc0a      	bgt.n	800132e <__gedf2+0xaa>
 8001318:	dbe8      	blt.n	80012ec <__gedf2+0x68>
 800131a:	454f      	cmp	r7, r9
 800131c:	d8d7      	bhi.n	80012ce <__gedf2+0x4a>
 800131e:	d00e      	beq.n	800133e <__gedf2+0xba>
 8001320:	2000      	movs	r0, #0
 8001322:	454f      	cmp	r7, r9
 8001324:	d2d7      	bcs.n	80012d6 <__gedf2+0x52>
 8001326:	2900      	cmp	r1, #0
 8001328:	d0e2      	beq.n	80012f0 <__gedf2+0x6c>
 800132a:	0008      	movs	r0, r1
 800132c:	e7d3      	b.n	80012d6 <__gedf2+0x52>
 800132e:	4243      	negs	r3, r0
 8001330:	4158      	adcs	r0, r3
 8001332:	0040      	lsls	r0, r0, #1
 8001334:	3801      	subs	r0, #1
 8001336:	e7ce      	b.n	80012d6 <__gedf2+0x52>
 8001338:	2002      	movs	r0, #2
 800133a:	4240      	negs	r0, r0
 800133c:	e7cb      	b.n	80012d6 <__gedf2+0x52>
 800133e:	45c4      	cmp	ip, r8
 8001340:	d8c5      	bhi.n	80012ce <__gedf2+0x4a>
 8001342:	2000      	movs	r0, #0
 8001344:	45c4      	cmp	ip, r8
 8001346:	d2c6      	bcs.n	80012d6 <__gedf2+0x52>
 8001348:	e7ed      	b.n	8001326 <__gedf2+0xa2>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	000007ff 	.word	0x000007ff

08001350 <__ledf2>:
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	4647      	mov	r7, r8
 8001354:	46ce      	mov	lr, r9
 8001356:	0004      	movs	r4, r0
 8001358:	0018      	movs	r0, r3
 800135a:	0016      	movs	r6, r2
 800135c:	031b      	lsls	r3, r3, #12
 800135e:	0b1b      	lsrs	r3, r3, #12
 8001360:	4d2c      	ldr	r5, [pc, #176]	; (8001414 <__ledf2+0xc4>)
 8001362:	004a      	lsls	r2, r1, #1
 8001364:	4699      	mov	r9, r3
 8001366:	b580      	push	{r7, lr}
 8001368:	0043      	lsls	r3, r0, #1
 800136a:	030f      	lsls	r7, r1, #12
 800136c:	46a4      	mov	ip, r4
 800136e:	46b0      	mov	r8, r6
 8001370:	0b3f      	lsrs	r7, r7, #12
 8001372:	0d52      	lsrs	r2, r2, #21
 8001374:	0fc9      	lsrs	r1, r1, #31
 8001376:	0d5b      	lsrs	r3, r3, #21
 8001378:	0fc0      	lsrs	r0, r0, #31
 800137a:	42aa      	cmp	r2, r5
 800137c:	d00d      	beq.n	800139a <__ledf2+0x4a>
 800137e:	42ab      	cmp	r3, r5
 8001380:	d010      	beq.n	80013a4 <__ledf2+0x54>
 8001382:	2a00      	cmp	r2, #0
 8001384:	d127      	bne.n	80013d6 <__ledf2+0x86>
 8001386:	433c      	orrs	r4, r7
 8001388:	2b00      	cmp	r3, #0
 800138a:	d111      	bne.n	80013b0 <__ledf2+0x60>
 800138c:	464d      	mov	r5, r9
 800138e:	432e      	orrs	r6, r5
 8001390:	d10e      	bne.n	80013b0 <__ledf2+0x60>
 8001392:	2000      	movs	r0, #0
 8001394:	2c00      	cmp	r4, #0
 8001396:	d015      	beq.n	80013c4 <__ledf2+0x74>
 8001398:	e00e      	b.n	80013b8 <__ledf2+0x68>
 800139a:	003d      	movs	r5, r7
 800139c:	4325      	orrs	r5, r4
 800139e:	d110      	bne.n	80013c2 <__ledf2+0x72>
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d118      	bne.n	80013d6 <__ledf2+0x86>
 80013a4:	464d      	mov	r5, r9
 80013a6:	432e      	orrs	r6, r5
 80013a8:	d10b      	bne.n	80013c2 <__ledf2+0x72>
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d102      	bne.n	80013b4 <__ledf2+0x64>
 80013ae:	433c      	orrs	r4, r7
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d00b      	beq.n	80013cc <__ledf2+0x7c>
 80013b4:	4281      	cmp	r1, r0
 80013b6:	d014      	beq.n	80013e2 <__ledf2+0x92>
 80013b8:	2002      	movs	r0, #2
 80013ba:	3901      	subs	r1, #1
 80013bc:	4008      	ands	r0, r1
 80013be:	3801      	subs	r0, #1
 80013c0:	e000      	b.n	80013c4 <__ledf2+0x74>
 80013c2:	2002      	movs	r0, #2
 80013c4:	bcc0      	pop	{r6, r7}
 80013c6:	46b9      	mov	r9, r7
 80013c8:	46b0      	mov	r8, r6
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f9      	bne.n	80013c4 <__ledf2+0x74>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7f6      	b.n	80013c4 <__ledf2+0x74>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ec      	bne.n	80013b4 <__ledf2+0x64>
 80013da:	464c      	mov	r4, r9
 80013dc:	4326      	orrs	r6, r4
 80013de:	d1e9      	bne.n	80013b4 <__ledf2+0x64>
 80013e0:	e7ea      	b.n	80013b8 <__ledf2+0x68>
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dd04      	ble.n	80013f0 <__ledf2+0xa0>
 80013e6:	4243      	negs	r3, r0
 80013e8:	4158      	adcs	r0, r3
 80013ea:	0040      	lsls	r0, r0, #1
 80013ec:	3801      	subs	r0, #1
 80013ee:	e7e9      	b.n	80013c4 <__ledf2+0x74>
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbeb      	blt.n	80013cc <__ledf2+0x7c>
 80013f4:	454f      	cmp	r7, r9
 80013f6:	d8df      	bhi.n	80013b8 <__ledf2+0x68>
 80013f8:	d006      	beq.n	8001408 <__ledf2+0xb8>
 80013fa:	2000      	movs	r0, #0
 80013fc:	454f      	cmp	r7, r9
 80013fe:	d2e1      	bcs.n	80013c4 <__ledf2+0x74>
 8001400:	2900      	cmp	r1, #0
 8001402:	d0e5      	beq.n	80013d0 <__ledf2+0x80>
 8001404:	0008      	movs	r0, r1
 8001406:	e7dd      	b.n	80013c4 <__ledf2+0x74>
 8001408:	45c4      	cmp	ip, r8
 800140a:	d8d5      	bhi.n	80013b8 <__ledf2+0x68>
 800140c:	2000      	movs	r0, #0
 800140e:	45c4      	cmp	ip, r8
 8001410:	d2d8      	bcs.n	80013c4 <__ledf2+0x74>
 8001412:	e7f5      	b.n	8001400 <__ledf2+0xb0>
 8001414:	000007ff 	.word	0x000007ff

08001418 <__aeabi_dmul>:
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	4657      	mov	r7, sl
 800141c:	464e      	mov	r6, r9
 800141e:	4645      	mov	r5, r8
 8001420:	46de      	mov	lr, fp
 8001422:	b5e0      	push	{r5, r6, r7, lr}
 8001424:	4698      	mov	r8, r3
 8001426:	030c      	lsls	r4, r1, #12
 8001428:	004b      	lsls	r3, r1, #1
 800142a:	0006      	movs	r6, r0
 800142c:	4692      	mov	sl, r2
 800142e:	b087      	sub	sp, #28
 8001430:	0b24      	lsrs	r4, r4, #12
 8001432:	0d5b      	lsrs	r3, r3, #21
 8001434:	0fcf      	lsrs	r7, r1, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <__aeabi_dmul+0x24>
 800143a:	e15c      	b.n	80016f6 <__aeabi_dmul+0x2de>
 800143c:	4ad9      	ldr	r2, [pc, #868]	; (80017a4 <__aeabi_dmul+0x38c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d100      	bne.n	8001444 <__aeabi_dmul+0x2c>
 8001442:	e175      	b.n	8001730 <__aeabi_dmul+0x318>
 8001444:	0f42      	lsrs	r2, r0, #29
 8001446:	00e4      	lsls	r4, r4, #3
 8001448:	4314      	orrs	r4, r2
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	0412      	lsls	r2, r2, #16
 800144e:	4314      	orrs	r4, r2
 8001450:	4ad5      	ldr	r2, [pc, #852]	; (80017a8 <__aeabi_dmul+0x390>)
 8001452:	00c5      	lsls	r5, r0, #3
 8001454:	4694      	mov	ip, r2
 8001456:	4463      	add	r3, ip
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	4699      	mov	r9, r3
 800145e:	469b      	mov	fp, r3
 8001460:	4643      	mov	r3, r8
 8001462:	4642      	mov	r2, r8
 8001464:	031e      	lsls	r6, r3, #12
 8001466:	0fd2      	lsrs	r2, r2, #31
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4650      	mov	r0, sl
 800146c:	4690      	mov	r8, r2
 800146e:	0b36      	lsrs	r6, r6, #12
 8001470:	0d5b      	lsrs	r3, r3, #21
 8001472:	d100      	bne.n	8001476 <__aeabi_dmul+0x5e>
 8001474:	e120      	b.n	80016b8 <__aeabi_dmul+0x2a0>
 8001476:	4acb      	ldr	r2, [pc, #812]	; (80017a4 <__aeabi_dmul+0x38c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d100      	bne.n	800147e <__aeabi_dmul+0x66>
 800147c:	e162      	b.n	8001744 <__aeabi_dmul+0x32c>
 800147e:	49ca      	ldr	r1, [pc, #808]	; (80017a8 <__aeabi_dmul+0x390>)
 8001480:	0f42      	lsrs	r2, r0, #29
 8001482:	468c      	mov	ip, r1
 8001484:	9900      	ldr	r1, [sp, #0]
 8001486:	4463      	add	r3, ip
 8001488:	00f6      	lsls	r6, r6, #3
 800148a:	468c      	mov	ip, r1
 800148c:	4316      	orrs	r6, r2
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	449c      	add	ip, r3
 8001492:	0412      	lsls	r2, r2, #16
 8001494:	4663      	mov	r3, ip
 8001496:	4316      	orrs	r6, r2
 8001498:	00c2      	lsls	r2, r0, #3
 800149a:	2000      	movs	r0, #0
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	9900      	ldr	r1, [sp, #0]
 80014a0:	4643      	mov	r3, r8
 80014a2:	3101      	adds	r1, #1
 80014a4:	468c      	mov	ip, r1
 80014a6:	4649      	mov	r1, r9
 80014a8:	407b      	eors	r3, r7
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	290f      	cmp	r1, #15
 80014ae:	d826      	bhi.n	80014fe <__aeabi_dmul+0xe6>
 80014b0:	4bbe      	ldr	r3, [pc, #760]	; (80017ac <__aeabi_dmul+0x394>)
 80014b2:	0089      	lsls	r1, r1, #2
 80014b4:	5859      	ldr	r1, [r3, r1]
 80014b6:	468f      	mov	pc, r1
 80014b8:	4643      	mov	r3, r8
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	0034      	movs	r4, r6
 80014be:	0015      	movs	r5, r2
 80014c0:	4683      	mov	fp, r0
 80014c2:	465b      	mov	r3, fp
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d016      	beq.n	80014f6 <__aeabi_dmul+0xde>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d100      	bne.n	80014ce <__aeabi_dmul+0xb6>
 80014cc:	e203      	b.n	80018d6 <__aeabi_dmul+0x4be>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0xbc>
 80014d2:	e0cd      	b.n	8001670 <__aeabi_dmul+0x258>
 80014d4:	2200      	movs	r2, #0
 80014d6:	2400      	movs	r4, #0
 80014d8:	2500      	movs	r5, #0
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	0512      	lsls	r2, r2, #20
 80014de:	4322      	orrs	r2, r4
 80014e0:	07db      	lsls	r3, r3, #31
 80014e2:	431a      	orrs	r2, r3
 80014e4:	0028      	movs	r0, r5
 80014e6:	0011      	movs	r1, r2
 80014e8:	b007      	add	sp, #28
 80014ea:	bcf0      	pop	{r4, r5, r6, r7}
 80014ec:	46bb      	mov	fp, r7
 80014ee:	46b2      	mov	sl, r6
 80014f0:	46a9      	mov	r9, r5
 80014f2:	46a0      	mov	r8, r4
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f6:	2400      	movs	r4, #0
 80014f8:	2500      	movs	r5, #0
 80014fa:	4aaa      	ldr	r2, [pc, #680]	; (80017a4 <__aeabi_dmul+0x38c>)
 80014fc:	e7ed      	b.n	80014da <__aeabi_dmul+0xc2>
 80014fe:	0c28      	lsrs	r0, r5, #16
 8001500:	042d      	lsls	r5, r5, #16
 8001502:	0c2d      	lsrs	r5, r5, #16
 8001504:	002b      	movs	r3, r5
 8001506:	0c11      	lsrs	r1, r2, #16
 8001508:	0412      	lsls	r2, r2, #16
 800150a:	0c12      	lsrs	r2, r2, #16
 800150c:	4353      	muls	r3, r2
 800150e:	4698      	mov	r8, r3
 8001510:	0013      	movs	r3, r2
 8001512:	002f      	movs	r7, r5
 8001514:	4343      	muls	r3, r0
 8001516:	4699      	mov	r9, r3
 8001518:	434f      	muls	r7, r1
 800151a:	444f      	add	r7, r9
 800151c:	46bb      	mov	fp, r7
 800151e:	4647      	mov	r7, r8
 8001520:	000b      	movs	r3, r1
 8001522:	0c3f      	lsrs	r7, r7, #16
 8001524:	46ba      	mov	sl, r7
 8001526:	4343      	muls	r3, r0
 8001528:	44da      	add	sl, fp
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	45d1      	cmp	r9, sl
 800152e:	d904      	bls.n	800153a <__aeabi_dmul+0x122>
 8001530:	2780      	movs	r7, #128	; 0x80
 8001532:	027f      	lsls	r7, r7, #9
 8001534:	46b9      	mov	r9, r7
 8001536:	444b      	add	r3, r9
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	4653      	mov	r3, sl
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	469b      	mov	fp, r3
 8001540:	4653      	mov	r3, sl
 8001542:	041f      	lsls	r7, r3, #16
 8001544:	4643      	mov	r3, r8
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	0c1b      	lsrs	r3, r3, #16
 800154a:	4698      	mov	r8, r3
 800154c:	003b      	movs	r3, r7
 800154e:	4443      	add	r3, r8
 8001550:	9304      	str	r3, [sp, #16]
 8001552:	0c33      	lsrs	r3, r6, #16
 8001554:	0436      	lsls	r6, r6, #16
 8001556:	0c36      	lsrs	r6, r6, #16
 8001558:	4698      	mov	r8, r3
 800155a:	0033      	movs	r3, r6
 800155c:	4343      	muls	r3, r0
 800155e:	4699      	mov	r9, r3
 8001560:	4643      	mov	r3, r8
 8001562:	4343      	muls	r3, r0
 8001564:	002f      	movs	r7, r5
 8001566:	469a      	mov	sl, r3
 8001568:	4643      	mov	r3, r8
 800156a:	4377      	muls	r7, r6
 800156c:	435d      	muls	r5, r3
 800156e:	0c38      	lsrs	r0, r7, #16
 8001570:	444d      	add	r5, r9
 8001572:	1945      	adds	r5, r0, r5
 8001574:	45a9      	cmp	r9, r5
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x168>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4699      	mov	r9, r3
 800157e:	44ca      	add	sl, r9
 8001580:	043f      	lsls	r7, r7, #16
 8001582:	0c28      	lsrs	r0, r5, #16
 8001584:	0c3f      	lsrs	r7, r7, #16
 8001586:	042d      	lsls	r5, r5, #16
 8001588:	19ed      	adds	r5, r5, r7
 800158a:	0c27      	lsrs	r7, r4, #16
 800158c:	0424      	lsls	r4, r4, #16
 800158e:	0c24      	lsrs	r4, r4, #16
 8001590:	0003      	movs	r3, r0
 8001592:	0020      	movs	r0, r4
 8001594:	4350      	muls	r0, r2
 8001596:	437a      	muls	r2, r7
 8001598:	4691      	mov	r9, r2
 800159a:	003a      	movs	r2, r7
 800159c:	4453      	add	r3, sl
 800159e:	9305      	str	r3, [sp, #20]
 80015a0:	0c03      	lsrs	r3, r0, #16
 80015a2:	469a      	mov	sl, r3
 80015a4:	434a      	muls	r2, r1
 80015a6:	4361      	muls	r1, r4
 80015a8:	4449      	add	r1, r9
 80015aa:	4451      	add	r1, sl
 80015ac:	44ab      	add	fp, r5
 80015ae:	4589      	cmp	r9, r1
 80015b0:	d903      	bls.n	80015ba <__aeabi_dmul+0x1a2>
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4699      	mov	r9, r3
 80015b8:	444a      	add	r2, r9
 80015ba:	0400      	lsls	r0, r0, #16
 80015bc:	0c0b      	lsrs	r3, r1, #16
 80015be:	0c00      	lsrs	r0, r0, #16
 80015c0:	0409      	lsls	r1, r1, #16
 80015c2:	1809      	adds	r1, r1, r0
 80015c4:	0020      	movs	r0, r4
 80015c6:	4699      	mov	r9, r3
 80015c8:	4643      	mov	r3, r8
 80015ca:	4370      	muls	r0, r6
 80015cc:	435c      	muls	r4, r3
 80015ce:	437e      	muls	r6, r7
 80015d0:	435f      	muls	r7, r3
 80015d2:	0c03      	lsrs	r3, r0, #16
 80015d4:	4698      	mov	r8, r3
 80015d6:	19a4      	adds	r4, r4, r6
 80015d8:	4444      	add	r4, r8
 80015da:	444a      	add	r2, r9
 80015dc:	9703      	str	r7, [sp, #12]
 80015de:	42a6      	cmp	r6, r4
 80015e0:	d904      	bls.n	80015ec <__aeabi_dmul+0x1d4>
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4698      	mov	r8, r3
 80015e8:	4447      	add	r7, r8
 80015ea:	9703      	str	r7, [sp, #12]
 80015ec:	0423      	lsls	r3, r4, #16
 80015ee:	9e02      	ldr	r6, [sp, #8]
 80015f0:	469a      	mov	sl, r3
 80015f2:	9b05      	ldr	r3, [sp, #20]
 80015f4:	445e      	add	r6, fp
 80015f6:	4698      	mov	r8, r3
 80015f8:	42ae      	cmp	r6, r5
 80015fa:	41ad      	sbcs	r5, r5
 80015fc:	1876      	adds	r6, r6, r1
 80015fe:	428e      	cmp	r6, r1
 8001600:	4189      	sbcs	r1, r1
 8001602:	0400      	lsls	r0, r0, #16
 8001604:	0c00      	lsrs	r0, r0, #16
 8001606:	4450      	add	r0, sl
 8001608:	4440      	add	r0, r8
 800160a:	426d      	negs	r5, r5
 800160c:	1947      	adds	r7, r0, r5
 800160e:	46b8      	mov	r8, r7
 8001610:	4693      	mov	fp, r2
 8001612:	4249      	negs	r1, r1
 8001614:	4689      	mov	r9, r1
 8001616:	44c3      	add	fp, r8
 8001618:	44d9      	add	r9, fp
 800161a:	4298      	cmp	r0, r3
 800161c:	4180      	sbcs	r0, r0
 800161e:	45a8      	cmp	r8, r5
 8001620:	41ad      	sbcs	r5, r5
 8001622:	4593      	cmp	fp, r2
 8001624:	4192      	sbcs	r2, r2
 8001626:	4589      	cmp	r9, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	426d      	negs	r5, r5
 800162c:	4240      	negs	r0, r0
 800162e:	4328      	orrs	r0, r5
 8001630:	0c24      	lsrs	r4, r4, #16
 8001632:	4252      	negs	r2, r2
 8001634:	4249      	negs	r1, r1
 8001636:	430a      	orrs	r2, r1
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	1900      	adds	r0, r0, r4
 800163c:	1880      	adds	r0, r0, r2
 800163e:	18c7      	adds	r7, r0, r3
 8001640:	464b      	mov	r3, r9
 8001642:	0ddc      	lsrs	r4, r3, #23
 8001644:	9b04      	ldr	r3, [sp, #16]
 8001646:	0275      	lsls	r5, r6, #9
 8001648:	431d      	orrs	r5, r3
 800164a:	1e6a      	subs	r2, r5, #1
 800164c:	4195      	sbcs	r5, r2
 800164e:	464b      	mov	r3, r9
 8001650:	0df6      	lsrs	r6, r6, #23
 8001652:	027f      	lsls	r7, r7, #9
 8001654:	4335      	orrs	r5, r6
 8001656:	025a      	lsls	r2, r3, #9
 8001658:	433c      	orrs	r4, r7
 800165a:	4315      	orrs	r5, r2
 800165c:	01fb      	lsls	r3, r7, #7
 800165e:	d400      	bmi.n	8001662 <__aeabi_dmul+0x24a>
 8001660:	e11c      	b.n	800189c <__aeabi_dmul+0x484>
 8001662:	2101      	movs	r1, #1
 8001664:	086a      	lsrs	r2, r5, #1
 8001666:	400d      	ands	r5, r1
 8001668:	4315      	orrs	r5, r2
 800166a:	07e2      	lsls	r2, r4, #31
 800166c:	4315      	orrs	r5, r2
 800166e:	0864      	lsrs	r4, r4, #1
 8001670:	494f      	ldr	r1, [pc, #316]	; (80017b0 <__aeabi_dmul+0x398>)
 8001672:	4461      	add	r1, ip
 8001674:	2900      	cmp	r1, #0
 8001676:	dc00      	bgt.n	800167a <__aeabi_dmul+0x262>
 8001678:	e0b0      	b.n	80017dc <__aeabi_dmul+0x3c4>
 800167a:	076b      	lsls	r3, r5, #29
 800167c:	d009      	beq.n	8001692 <__aeabi_dmul+0x27a>
 800167e:	220f      	movs	r2, #15
 8001680:	402a      	ands	r2, r5
 8001682:	2a04      	cmp	r2, #4
 8001684:	d005      	beq.n	8001692 <__aeabi_dmul+0x27a>
 8001686:	1d2a      	adds	r2, r5, #4
 8001688:	42aa      	cmp	r2, r5
 800168a:	41ad      	sbcs	r5, r5
 800168c:	426d      	negs	r5, r5
 800168e:	1964      	adds	r4, r4, r5
 8001690:	0015      	movs	r5, r2
 8001692:	01e3      	lsls	r3, r4, #7
 8001694:	d504      	bpl.n	80016a0 <__aeabi_dmul+0x288>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	4a46      	ldr	r2, [pc, #280]	; (80017b4 <__aeabi_dmul+0x39c>)
 800169a:	00c9      	lsls	r1, r1, #3
 800169c:	4014      	ands	r4, r2
 800169e:	4461      	add	r1, ip
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <__aeabi_dmul+0x3a0>)
 80016a2:	4291      	cmp	r1, r2
 80016a4:	dd00      	ble.n	80016a8 <__aeabi_dmul+0x290>
 80016a6:	e726      	b.n	80014f6 <__aeabi_dmul+0xde>
 80016a8:	0762      	lsls	r2, r4, #29
 80016aa:	08ed      	lsrs	r5, r5, #3
 80016ac:	0264      	lsls	r4, r4, #9
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	4315      	orrs	r5, r2
 80016b2:	0b24      	lsrs	r4, r4, #12
 80016b4:	0d4a      	lsrs	r2, r1, #21
 80016b6:	e710      	b.n	80014da <__aeabi_dmul+0xc2>
 80016b8:	4652      	mov	r2, sl
 80016ba:	4332      	orrs	r2, r6
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dmul+0x2a8>
 80016be:	e07f      	b.n	80017c0 <__aeabi_dmul+0x3a8>
 80016c0:	2e00      	cmp	r6, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dmul+0x2ae>
 80016c4:	e0dc      	b.n	8001880 <__aeabi_dmul+0x468>
 80016c6:	0030      	movs	r0, r6
 80016c8:	f000 fdd6 	bl	8002278 <__clzsi2>
 80016cc:	0002      	movs	r2, r0
 80016ce:	3a0b      	subs	r2, #11
 80016d0:	231d      	movs	r3, #29
 80016d2:	0001      	movs	r1, r0
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	3908      	subs	r1, #8
 80016da:	40da      	lsrs	r2, r3
 80016dc:	408e      	lsls	r6, r1
 80016de:	4316      	orrs	r6, r2
 80016e0:	4652      	mov	r2, sl
 80016e2:	408a      	lsls	r2, r1
 80016e4:	9b00      	ldr	r3, [sp, #0]
 80016e6:	4935      	ldr	r1, [pc, #212]	; (80017bc <__aeabi_dmul+0x3a4>)
 80016e8:	1a18      	subs	r0, r3, r0
 80016ea:	0003      	movs	r3, r0
 80016ec:	468c      	mov	ip, r1
 80016ee:	4463      	add	r3, ip
 80016f0:	2000      	movs	r0, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	e6d3      	b.n	800149e <__aeabi_dmul+0x86>
 80016f6:	0025      	movs	r5, r4
 80016f8:	4305      	orrs	r5, r0
 80016fa:	d04a      	beq.n	8001792 <__aeabi_dmul+0x37a>
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_dmul+0x2ea>
 8001700:	e0b0      	b.n	8001864 <__aeabi_dmul+0x44c>
 8001702:	0020      	movs	r0, r4
 8001704:	f000 fdb8 	bl	8002278 <__clzsi2>
 8001708:	0001      	movs	r1, r0
 800170a:	0002      	movs	r2, r0
 800170c:	390b      	subs	r1, #11
 800170e:	231d      	movs	r3, #29
 8001710:	0010      	movs	r0, r2
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	0031      	movs	r1, r6
 8001716:	0035      	movs	r5, r6
 8001718:	3808      	subs	r0, #8
 800171a:	4084      	lsls	r4, r0
 800171c:	40d9      	lsrs	r1, r3
 800171e:	4085      	lsls	r5, r0
 8001720:	430c      	orrs	r4, r1
 8001722:	4826      	ldr	r0, [pc, #152]	; (80017bc <__aeabi_dmul+0x3a4>)
 8001724:	1a83      	subs	r3, r0, r2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	4699      	mov	r9, r3
 800172c:	469b      	mov	fp, r3
 800172e:	e697      	b.n	8001460 <__aeabi_dmul+0x48>
 8001730:	0005      	movs	r5, r0
 8001732:	4325      	orrs	r5, r4
 8001734:	d126      	bne.n	8001784 <__aeabi_dmul+0x36c>
 8001736:	2208      	movs	r2, #8
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	2400      	movs	r4, #0
 800173e:	4691      	mov	r9, r2
 8001740:	469b      	mov	fp, r3
 8001742:	e68d      	b.n	8001460 <__aeabi_dmul+0x48>
 8001744:	4652      	mov	r2, sl
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	4332      	orrs	r2, r6
 800174a:	d110      	bne.n	800176e <__aeabi_dmul+0x356>
 800174c:	4915      	ldr	r1, [pc, #84]	; (80017a4 <__aeabi_dmul+0x38c>)
 800174e:	2600      	movs	r6, #0
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	4649      	mov	r1, r9
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	4319      	orrs	r1, r3
 800175c:	4689      	mov	r9, r1
 800175e:	2002      	movs	r0, #2
 8001760:	e69d      	b.n	800149e <__aeabi_dmul+0x86>
 8001762:	465b      	mov	r3, fp
 8001764:	9701      	str	r7, [sp, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d000      	beq.n	800176c <__aeabi_dmul+0x354>
 800176a:	e6ad      	b.n	80014c8 <__aeabi_dmul+0xb0>
 800176c:	e6c3      	b.n	80014f6 <__aeabi_dmul+0xde>
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <__aeabi_dmul+0x38c>)
 8001770:	2003      	movs	r0, #3
 8001772:	4694      	mov	ip, r2
 8001774:	4463      	add	r3, ip
 8001776:	464a      	mov	r2, r9
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2303      	movs	r3, #3
 800177c:	431a      	orrs	r2, r3
 800177e:	4691      	mov	r9, r2
 8001780:	4652      	mov	r2, sl
 8001782:	e68c      	b.n	800149e <__aeabi_dmul+0x86>
 8001784:	220c      	movs	r2, #12
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2303      	movs	r3, #3
 800178a:	0005      	movs	r5, r0
 800178c:	4691      	mov	r9, r2
 800178e:	469b      	mov	fp, r3
 8001790:	e666      	b.n	8001460 <__aeabi_dmul+0x48>
 8001792:	2304      	movs	r3, #4
 8001794:	4699      	mov	r9, r3
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	2400      	movs	r4, #0
 800179e:	469b      	mov	fp, r3
 80017a0:	e65e      	b.n	8001460 <__aeabi_dmul+0x48>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	fffffc01 	.word	0xfffffc01
 80017ac:	0800d274 	.word	0x0800d274
 80017b0:	000003ff 	.word	0x000003ff
 80017b4:	feffffff 	.word	0xfeffffff
 80017b8:	000007fe 	.word	0x000007fe
 80017bc:	fffffc0d 	.word	0xfffffc0d
 80017c0:	4649      	mov	r1, r9
 80017c2:	2301      	movs	r3, #1
 80017c4:	4319      	orrs	r1, r3
 80017c6:	4689      	mov	r9, r1
 80017c8:	2600      	movs	r6, #0
 80017ca:	2001      	movs	r0, #1
 80017cc:	e667      	b.n	800149e <__aeabi_dmul+0x86>
 80017ce:	2300      	movs	r3, #0
 80017d0:	2480      	movs	r4, #128	; 0x80
 80017d2:	2500      	movs	r5, #0
 80017d4:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <__aeabi_dmul+0x4cc>)
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	0324      	lsls	r4, r4, #12
 80017da:	e67e      	b.n	80014da <__aeabi_dmul+0xc2>
 80017dc:	2001      	movs	r0, #1
 80017de:	1a40      	subs	r0, r0, r1
 80017e0:	2838      	cmp	r0, #56	; 0x38
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dmul+0x3ce>
 80017e4:	e676      	b.n	80014d4 <__aeabi_dmul+0xbc>
 80017e6:	281f      	cmp	r0, #31
 80017e8:	dd5b      	ble.n	80018a2 <__aeabi_dmul+0x48a>
 80017ea:	221f      	movs	r2, #31
 80017ec:	0023      	movs	r3, r4
 80017ee:	4252      	negs	r2, r2
 80017f0:	1a51      	subs	r1, r2, r1
 80017f2:	40cb      	lsrs	r3, r1
 80017f4:	0019      	movs	r1, r3
 80017f6:	2820      	cmp	r0, #32
 80017f8:	d003      	beq.n	8001802 <__aeabi_dmul+0x3ea>
 80017fa:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <__aeabi_dmul+0x4d0>)
 80017fc:	4462      	add	r2, ip
 80017fe:	4094      	lsls	r4, r2
 8001800:	4325      	orrs	r5, r4
 8001802:	1e6a      	subs	r2, r5, #1
 8001804:	4195      	sbcs	r5, r2
 8001806:	002a      	movs	r2, r5
 8001808:	430a      	orrs	r2, r1
 800180a:	2107      	movs	r1, #7
 800180c:	000d      	movs	r5, r1
 800180e:	2400      	movs	r4, #0
 8001810:	4015      	ands	r5, r2
 8001812:	4211      	tst	r1, r2
 8001814:	d05b      	beq.n	80018ce <__aeabi_dmul+0x4b6>
 8001816:	210f      	movs	r1, #15
 8001818:	2400      	movs	r4, #0
 800181a:	4011      	ands	r1, r2
 800181c:	2904      	cmp	r1, #4
 800181e:	d053      	beq.n	80018c8 <__aeabi_dmul+0x4b0>
 8001820:	1d11      	adds	r1, r2, #4
 8001822:	4291      	cmp	r1, r2
 8001824:	4192      	sbcs	r2, r2
 8001826:	4252      	negs	r2, r2
 8001828:	18a4      	adds	r4, r4, r2
 800182a:	000a      	movs	r2, r1
 800182c:	0223      	lsls	r3, r4, #8
 800182e:	d54b      	bpl.n	80018c8 <__aeabi_dmul+0x4b0>
 8001830:	2201      	movs	r2, #1
 8001832:	2400      	movs	r4, #0
 8001834:	2500      	movs	r5, #0
 8001836:	e650      	b.n	80014da <__aeabi_dmul+0xc2>
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	031b      	lsls	r3, r3, #12
 800183c:	421c      	tst	r4, r3
 800183e:	d009      	beq.n	8001854 <__aeabi_dmul+0x43c>
 8001840:	421e      	tst	r6, r3
 8001842:	d107      	bne.n	8001854 <__aeabi_dmul+0x43c>
 8001844:	4333      	orrs	r3, r6
 8001846:	031c      	lsls	r4, r3, #12
 8001848:	4643      	mov	r3, r8
 800184a:	0015      	movs	r5, r2
 800184c:	0b24      	lsrs	r4, r4, #12
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <__aeabi_dmul+0x4cc>)
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	e642      	b.n	80014da <__aeabi_dmul+0xc2>
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	0312      	lsls	r2, r2, #12
 8001858:	4314      	orrs	r4, r2
 800185a:	0324      	lsls	r4, r4, #12
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <__aeabi_dmul+0x4cc>)
 800185e:	0b24      	lsrs	r4, r4, #12
 8001860:	9701      	str	r7, [sp, #4]
 8001862:	e63a      	b.n	80014da <__aeabi_dmul+0xc2>
 8001864:	f000 fd08 	bl	8002278 <__clzsi2>
 8001868:	0001      	movs	r1, r0
 800186a:	0002      	movs	r2, r0
 800186c:	3115      	adds	r1, #21
 800186e:	3220      	adds	r2, #32
 8001870:	291c      	cmp	r1, #28
 8001872:	dc00      	bgt.n	8001876 <__aeabi_dmul+0x45e>
 8001874:	e74b      	b.n	800170e <__aeabi_dmul+0x2f6>
 8001876:	0034      	movs	r4, r6
 8001878:	3808      	subs	r0, #8
 800187a:	2500      	movs	r5, #0
 800187c:	4084      	lsls	r4, r0
 800187e:	e750      	b.n	8001722 <__aeabi_dmul+0x30a>
 8001880:	f000 fcfa 	bl	8002278 <__clzsi2>
 8001884:	0003      	movs	r3, r0
 8001886:	001a      	movs	r2, r3
 8001888:	3215      	adds	r2, #21
 800188a:	3020      	adds	r0, #32
 800188c:	2a1c      	cmp	r2, #28
 800188e:	dc00      	bgt.n	8001892 <__aeabi_dmul+0x47a>
 8001890:	e71e      	b.n	80016d0 <__aeabi_dmul+0x2b8>
 8001892:	4656      	mov	r6, sl
 8001894:	3b08      	subs	r3, #8
 8001896:	2200      	movs	r2, #0
 8001898:	409e      	lsls	r6, r3
 800189a:	e723      	b.n	80016e4 <__aeabi_dmul+0x2cc>
 800189c:	9b00      	ldr	r3, [sp, #0]
 800189e:	469c      	mov	ip, r3
 80018a0:	e6e6      	b.n	8001670 <__aeabi_dmul+0x258>
 80018a2:	4912      	ldr	r1, [pc, #72]	; (80018ec <__aeabi_dmul+0x4d4>)
 80018a4:	0022      	movs	r2, r4
 80018a6:	4461      	add	r1, ip
 80018a8:	002e      	movs	r6, r5
 80018aa:	408d      	lsls	r5, r1
 80018ac:	408a      	lsls	r2, r1
 80018ae:	40c6      	lsrs	r6, r0
 80018b0:	1e69      	subs	r1, r5, #1
 80018b2:	418d      	sbcs	r5, r1
 80018b4:	4332      	orrs	r2, r6
 80018b6:	432a      	orrs	r2, r5
 80018b8:	40c4      	lsrs	r4, r0
 80018ba:	0753      	lsls	r3, r2, #29
 80018bc:	d0b6      	beq.n	800182c <__aeabi_dmul+0x414>
 80018be:	210f      	movs	r1, #15
 80018c0:	4011      	ands	r1, r2
 80018c2:	2904      	cmp	r1, #4
 80018c4:	d1ac      	bne.n	8001820 <__aeabi_dmul+0x408>
 80018c6:	e7b1      	b.n	800182c <__aeabi_dmul+0x414>
 80018c8:	0765      	lsls	r5, r4, #29
 80018ca:	0264      	lsls	r4, r4, #9
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	08d2      	lsrs	r2, r2, #3
 80018d0:	4315      	orrs	r5, r2
 80018d2:	2200      	movs	r2, #0
 80018d4:	e601      	b.n	80014da <__aeabi_dmul+0xc2>
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	0312      	lsls	r2, r2, #12
 80018da:	4314      	orrs	r4, r2
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	4a01      	ldr	r2, [pc, #4]	; (80018e4 <__aeabi_dmul+0x4cc>)
 80018e0:	0b24      	lsrs	r4, r4, #12
 80018e2:	e5fa      	b.n	80014da <__aeabi_dmul+0xc2>
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	0000043e 	.word	0x0000043e
 80018ec:	0000041e 	.word	0x0000041e

080018f0 <__aeabi_dsub>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	4657      	mov	r7, sl
 80018f4:	464e      	mov	r6, r9
 80018f6:	4645      	mov	r5, r8
 80018f8:	46de      	mov	lr, fp
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	001e      	movs	r6, r3
 80018fe:	0017      	movs	r7, r2
 8001900:	004a      	lsls	r2, r1, #1
 8001902:	030b      	lsls	r3, r1, #12
 8001904:	0d52      	lsrs	r2, r2, #21
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	4690      	mov	r8, r2
 800190a:	0f42      	lsrs	r2, r0, #29
 800190c:	431a      	orrs	r2, r3
 800190e:	0fcd      	lsrs	r5, r1, #31
 8001910:	4ccd      	ldr	r4, [pc, #820]	; (8001c48 <__aeabi_dsub+0x358>)
 8001912:	0331      	lsls	r1, r6, #12
 8001914:	00c3      	lsls	r3, r0, #3
 8001916:	4694      	mov	ip, r2
 8001918:	0070      	lsls	r0, r6, #1
 800191a:	0f7a      	lsrs	r2, r7, #29
 800191c:	0a49      	lsrs	r1, r1, #9
 800191e:	00ff      	lsls	r7, r7, #3
 8001920:	469a      	mov	sl, r3
 8001922:	46b9      	mov	r9, r7
 8001924:	0d40      	lsrs	r0, r0, #21
 8001926:	0ff6      	lsrs	r6, r6, #31
 8001928:	4311      	orrs	r1, r2
 800192a:	42a0      	cmp	r0, r4
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x40>
 800192e:	e0b1      	b.n	8001a94 <__aeabi_dsub+0x1a4>
 8001930:	2201      	movs	r2, #1
 8001932:	4056      	eors	r6, r2
 8001934:	46b3      	mov	fp, r6
 8001936:	42b5      	cmp	r5, r6
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x4c>
 800193a:	e088      	b.n	8001a4e <__aeabi_dsub+0x15e>
 800193c:	4642      	mov	r2, r8
 800193e:	1a12      	subs	r2, r2, r0
 8001940:	2a00      	cmp	r2, #0
 8001942:	dc00      	bgt.n	8001946 <__aeabi_dsub+0x56>
 8001944:	e0ae      	b.n	8001aa4 <__aeabi_dsub+0x1b4>
 8001946:	2800      	cmp	r0, #0
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x5c>
 800194a:	e0c1      	b.n	8001ad0 <__aeabi_dsub+0x1e0>
 800194c:	48be      	ldr	r0, [pc, #760]	; (8001c48 <__aeabi_dsub+0x358>)
 800194e:	4580      	cmp	r8, r0
 8001950:	d100      	bne.n	8001954 <__aeabi_dsub+0x64>
 8001952:	e151      	b.n	8001bf8 <__aeabi_dsub+0x308>
 8001954:	2080      	movs	r0, #128	; 0x80
 8001956:	0400      	lsls	r0, r0, #16
 8001958:	4301      	orrs	r1, r0
 800195a:	2a38      	cmp	r2, #56	; 0x38
 800195c:	dd00      	ble.n	8001960 <__aeabi_dsub+0x70>
 800195e:	e17b      	b.n	8001c58 <__aeabi_dsub+0x368>
 8001960:	2a1f      	cmp	r2, #31
 8001962:	dd00      	ble.n	8001966 <__aeabi_dsub+0x76>
 8001964:	e1ee      	b.n	8001d44 <__aeabi_dsub+0x454>
 8001966:	2020      	movs	r0, #32
 8001968:	003e      	movs	r6, r7
 800196a:	1a80      	subs	r0, r0, r2
 800196c:	000c      	movs	r4, r1
 800196e:	40d6      	lsrs	r6, r2
 8001970:	40d1      	lsrs	r1, r2
 8001972:	4087      	lsls	r7, r0
 8001974:	4662      	mov	r2, ip
 8001976:	4084      	lsls	r4, r0
 8001978:	1a52      	subs	r2, r2, r1
 800197a:	1e78      	subs	r0, r7, #1
 800197c:	4187      	sbcs	r7, r0
 800197e:	4694      	mov	ip, r2
 8001980:	4334      	orrs	r4, r6
 8001982:	4327      	orrs	r7, r4
 8001984:	1bdc      	subs	r4, r3, r7
 8001986:	42a3      	cmp	r3, r4
 8001988:	419b      	sbcs	r3, r3
 800198a:	4662      	mov	r2, ip
 800198c:	425b      	negs	r3, r3
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4699      	mov	r9, r3
 8001992:	464b      	mov	r3, r9
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	d400      	bmi.n	800199a <__aeabi_dsub+0xaa>
 8001998:	e118      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 800199a:	464b      	mov	r3, r9
 800199c:	0258      	lsls	r0, r3, #9
 800199e:	0a43      	lsrs	r3, r0, #9
 80019a0:	4699      	mov	r9, r3
 80019a2:	464b      	mov	r3, r9
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dsub+0xba>
 80019a8:	e137      	b.n	8001c1a <__aeabi_dsub+0x32a>
 80019aa:	4648      	mov	r0, r9
 80019ac:	f000 fc64 	bl	8002278 <__clzsi2>
 80019b0:	0001      	movs	r1, r0
 80019b2:	3908      	subs	r1, #8
 80019b4:	2320      	movs	r3, #32
 80019b6:	0022      	movs	r2, r4
 80019b8:	4648      	mov	r0, r9
 80019ba:	1a5b      	subs	r3, r3, r1
 80019bc:	40da      	lsrs	r2, r3
 80019be:	4088      	lsls	r0, r1
 80019c0:	408c      	lsls	r4, r1
 80019c2:	4643      	mov	r3, r8
 80019c4:	4310      	orrs	r0, r2
 80019c6:	4588      	cmp	r8, r1
 80019c8:	dd00      	ble.n	80019cc <__aeabi_dsub+0xdc>
 80019ca:	e136      	b.n	8001c3a <__aeabi_dsub+0x34a>
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	1c4b      	adds	r3, r1, #1
 80019d0:	2b1f      	cmp	r3, #31
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dsub+0xe6>
 80019d4:	e0ea      	b.n	8001bac <__aeabi_dsub+0x2bc>
 80019d6:	2220      	movs	r2, #32
 80019d8:	0026      	movs	r6, r4
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	0001      	movs	r1, r0
 80019de:	4094      	lsls	r4, r2
 80019e0:	40de      	lsrs	r6, r3
 80019e2:	40d8      	lsrs	r0, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	4091      	lsls	r1, r2
 80019e8:	1e62      	subs	r2, r4, #1
 80019ea:	4194      	sbcs	r4, r2
 80019ec:	4681      	mov	r9, r0
 80019ee:	4698      	mov	r8, r3
 80019f0:	4331      	orrs	r1, r6
 80019f2:	430c      	orrs	r4, r1
 80019f4:	0763      	lsls	r3, r4, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dsub+0x11c>
 80019f8:	230f      	movs	r3, #15
 80019fa:	4023      	ands	r3, r4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dsub+0x11c>
 8001a00:	1d23      	adds	r3, r4, #4
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	41a4      	sbcs	r4, r4
 8001a06:	4264      	negs	r4, r4
 8001a08:	44a1      	add	r9, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_dsub+0x124>
 8001a12:	e0de      	b.n	8001bd2 <__aeabi_dsub+0x2e2>
 8001a14:	4641      	mov	r1, r8
 8001a16:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <__aeabi_dsub+0x358>)
 8001a18:	3101      	adds	r1, #1
 8001a1a:	4299      	cmp	r1, r3
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x130>
 8001a1e:	e0e7      	b.n	8001bf0 <__aeabi_dsub+0x300>
 8001a20:	464b      	mov	r3, r9
 8001a22:	488a      	ldr	r0, [pc, #552]	; (8001c4c <__aeabi_dsub+0x35c>)
 8001a24:	08e4      	lsrs	r4, r4, #3
 8001a26:	4003      	ands	r3, r0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	0549      	lsls	r1, r1, #21
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	0240      	lsls	r0, r0, #9
 8001a30:	4323      	orrs	r3, r4
 8001a32:	0d4a      	lsrs	r2, r1, #21
 8001a34:	0b04      	lsrs	r4, r0, #12
 8001a36:	0512      	lsls	r2, r2, #20
 8001a38:	07ed      	lsls	r5, r5, #31
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	432a      	orrs	r2, r5
 8001a3e:	0018      	movs	r0, r3
 8001a40:	0011      	movs	r1, r2
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a4e:	4642      	mov	r2, r8
 8001a50:	1a12      	subs	r2, r2, r0
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	dd52      	ble.n	8001afc <__aeabi_dsub+0x20c>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x16c>
 8001a5a:	e09c      	b.n	8001b96 <__aeabi_dsub+0x2a6>
 8001a5c:	45a0      	cmp	r8, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x172>
 8001a60:	e0ca      	b.n	8001bf8 <__aeabi_dsub+0x308>
 8001a62:	2080      	movs	r0, #128	; 0x80
 8001a64:	0400      	lsls	r0, r0, #16
 8001a66:	4301      	orrs	r1, r0
 8001a68:	2a38      	cmp	r2, #56	; 0x38
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_dsub+0x17e>
 8001a6c:	e149      	b.n	8001d02 <__aeabi_dsub+0x412>
 8001a6e:	2a1f      	cmp	r2, #31
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_dsub+0x184>
 8001a72:	e197      	b.n	8001da4 <__aeabi_dsub+0x4b4>
 8001a74:	0010      	movs	r0, r2
 8001a76:	000e      	movs	r6, r1
 8001a78:	3820      	subs	r0, #32
 8001a7a:	40c6      	lsrs	r6, r0
 8001a7c:	2a20      	cmp	r2, #32
 8001a7e:	d004      	beq.n	8001a8a <__aeabi_dsub+0x19a>
 8001a80:	2040      	movs	r0, #64	; 0x40
 8001a82:	1a82      	subs	r2, r0, r2
 8001a84:	4091      	lsls	r1, r2
 8001a86:	430f      	orrs	r7, r1
 8001a88:	46b9      	mov	r9, r7
 8001a8a:	464c      	mov	r4, r9
 8001a8c:	1e62      	subs	r2, r4, #1
 8001a8e:	4194      	sbcs	r4, r2
 8001a90:	4334      	orrs	r4, r6
 8001a92:	e13a      	b.n	8001d0a <__aeabi_dsub+0x41a>
 8001a94:	000a      	movs	r2, r1
 8001a96:	433a      	orrs	r2, r7
 8001a98:	d028      	beq.n	8001aec <__aeabi_dsub+0x1fc>
 8001a9a:	46b3      	mov	fp, r6
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	d02b      	beq.n	8001af8 <__aeabi_dsub+0x208>
 8001aa0:	4a6b      	ldr	r2, [pc, #428]	; (8001c50 <__aeabi_dsub+0x360>)
 8001aa2:	4442      	add	r2, r8
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d05d      	beq.n	8001b64 <__aeabi_dsub+0x274>
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	4644      	mov	r4, r8
 8001aac:	1a82      	subs	r2, r0, r2
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dsub+0x1c4>
 8001ab2:	e0f5      	b.n	8001ca0 <__aeabi_dsub+0x3b0>
 8001ab4:	4665      	mov	r5, ip
 8001ab6:	431d      	orrs	r5, r3
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x1cc>
 8001aba:	e19c      	b.n	8001df6 <__aeabi_dsub+0x506>
 8001abc:	1e55      	subs	r5, r2, #1
 8001abe:	2a01      	cmp	r2, #1
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1d4>
 8001ac2:	e1fb      	b.n	8001ebc <__aeabi_dsub+0x5cc>
 8001ac4:	4c60      	ldr	r4, [pc, #384]	; (8001c48 <__aeabi_dsub+0x358>)
 8001ac6:	42a2      	cmp	r2, r4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1dc>
 8001aca:	e1bd      	b.n	8001e48 <__aeabi_dsub+0x558>
 8001acc:	002a      	movs	r2, r5
 8001ace:	e0f0      	b.n	8001cb2 <__aeabi_dsub+0x3c2>
 8001ad0:	0008      	movs	r0, r1
 8001ad2:	4338      	orrs	r0, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x1e8>
 8001ad6:	e0c3      	b.n	8001c60 <__aeabi_dsub+0x370>
 8001ad8:	1e50      	subs	r0, r2, #1
 8001ada:	2a01      	cmp	r2, #1
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x1f0>
 8001ade:	e1a8      	b.n	8001e32 <__aeabi_dsub+0x542>
 8001ae0:	4c59      	ldr	r4, [pc, #356]	; (8001c48 <__aeabi_dsub+0x358>)
 8001ae2:	42a2      	cmp	r2, r4
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x1f8>
 8001ae6:	e087      	b.n	8001bf8 <__aeabi_dsub+0x308>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	e736      	b.n	800195a <__aeabi_dsub+0x6a>
 8001aec:	2201      	movs	r2, #1
 8001aee:	4056      	eors	r6, r2
 8001af0:	46b3      	mov	fp, r6
 8001af2:	42b5      	cmp	r5, r6
 8001af4:	d000      	beq.n	8001af8 <__aeabi_dsub+0x208>
 8001af6:	e721      	b.n	800193c <__aeabi_dsub+0x4c>
 8001af8:	4a55      	ldr	r2, [pc, #340]	; (8001c50 <__aeabi_dsub+0x360>)
 8001afa:	4442      	add	r2, r8
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x212>
 8001b00:	e0b5      	b.n	8001c6e <__aeabi_dsub+0x37e>
 8001b02:	4642      	mov	r2, r8
 8001b04:	4644      	mov	r4, r8
 8001b06:	1a82      	subs	r2, r0, r2
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x21e>
 8001b0c:	e138      	b.n	8001d80 <__aeabi_dsub+0x490>
 8001b0e:	4e4e      	ldr	r6, [pc, #312]	; (8001c48 <__aeabi_dsub+0x358>)
 8001b10:	42b0      	cmp	r0, r6
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x226>
 8001b14:	e1de      	b.n	8001ed4 <__aeabi_dsub+0x5e4>
 8001b16:	2680      	movs	r6, #128	; 0x80
 8001b18:	4664      	mov	r4, ip
 8001b1a:	0436      	lsls	r6, r6, #16
 8001b1c:	4334      	orrs	r4, r6
 8001b1e:	46a4      	mov	ip, r4
 8001b20:	2a38      	cmp	r2, #56	; 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x236>
 8001b24:	e196      	b.n	8001e54 <__aeabi_dsub+0x564>
 8001b26:	2a1f      	cmp	r2, #31
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x23c>
 8001b2a:	e224      	b.n	8001f76 <__aeabi_dsub+0x686>
 8001b2c:	2620      	movs	r6, #32
 8001b2e:	1ab4      	subs	r4, r6, r2
 8001b30:	46a2      	mov	sl, r4
 8001b32:	4664      	mov	r4, ip
 8001b34:	4656      	mov	r6, sl
 8001b36:	40b4      	lsls	r4, r6
 8001b38:	46a1      	mov	r9, r4
 8001b3a:	001c      	movs	r4, r3
 8001b3c:	464e      	mov	r6, r9
 8001b3e:	40d4      	lsrs	r4, r2
 8001b40:	4326      	orrs	r6, r4
 8001b42:	0034      	movs	r4, r6
 8001b44:	4656      	mov	r6, sl
 8001b46:	40b3      	lsls	r3, r6
 8001b48:	1e5e      	subs	r6, r3, #1
 8001b4a:	41b3      	sbcs	r3, r6
 8001b4c:	431c      	orrs	r4, r3
 8001b4e:	4663      	mov	r3, ip
 8001b50:	40d3      	lsrs	r3, r2
 8001b52:	18c9      	adds	r1, r1, r3
 8001b54:	19e4      	adds	r4, r4, r7
 8001b56:	42bc      	cmp	r4, r7
 8001b58:	41bf      	sbcs	r7, r7
 8001b5a:	427f      	negs	r7, r7
 8001b5c:	46b9      	mov	r9, r7
 8001b5e:	4680      	mov	r8, r0
 8001b60:	4489      	add	r9, r1
 8001b62:	e0d8      	b.n	8001d16 <__aeabi_dsub+0x426>
 8001b64:	4640      	mov	r0, r8
 8001b66:	4c3b      	ldr	r4, [pc, #236]	; (8001c54 <__aeabi_dsub+0x364>)
 8001b68:	3001      	adds	r0, #1
 8001b6a:	4220      	tst	r0, r4
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dsub+0x280>
 8001b6e:	e0b4      	b.n	8001cda <__aeabi_dsub+0x3ea>
 8001b70:	4640      	mov	r0, r8
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_dsub+0x288>
 8001b76:	e144      	b.n	8001e02 <__aeabi_dsub+0x512>
 8001b78:	4660      	mov	r0, ip
 8001b7a:	4318      	orrs	r0, r3
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x290>
 8001b7e:	e190      	b.n	8001ea2 <__aeabi_dsub+0x5b2>
 8001b80:	0008      	movs	r0, r1
 8001b82:	4338      	orrs	r0, r7
 8001b84:	d000      	beq.n	8001b88 <__aeabi_dsub+0x298>
 8001b86:	e1aa      	b.n	8001ede <__aeabi_dsub+0x5ee>
 8001b88:	4661      	mov	r1, ip
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	0749      	lsls	r1, r1, #29
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	4661      	mov	r1, ip
 8001b92:	08cc      	lsrs	r4, r1, #3
 8001b94:	e027      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d061      	beq.n	8001c60 <__aeabi_dsub+0x370>
 8001b9c:	1e50      	subs	r0, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x2b4>
 8001ba2:	e139      	b.n	8001e18 <__aeabi_dsub+0x528>
 8001ba4:	42a2      	cmp	r2, r4
 8001ba6:	d027      	beq.n	8001bf8 <__aeabi_dsub+0x308>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	e75d      	b.n	8001a68 <__aeabi_dsub+0x178>
 8001bac:	0002      	movs	r2, r0
 8001bae:	391f      	subs	r1, #31
 8001bb0:	40ca      	lsrs	r2, r1
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x2d0>
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4098      	lsls	r0, r3
 8001bbe:	4304      	orrs	r4, r0
 8001bc0:	1e63      	subs	r3, r4, #1
 8001bc2:	419c      	sbcs	r4, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	4698      	mov	r8, r3
 8001bca:	430c      	orrs	r4, r1
 8001bcc:	0763      	lsls	r3, r4, #29
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_dsub+0x2e2>
 8001bd0:	e712      	b.n	80019f8 <__aeabi_dsub+0x108>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	464a      	mov	r2, r9
 8001bd6:	08e4      	lsrs	r4, r4, #3
 8001bd8:	075b      	lsls	r3, r3, #29
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	08d4      	lsrs	r4, r2, #3
 8001bde:	4642      	mov	r2, r8
 8001be0:	4919      	ldr	r1, [pc, #100]	; (8001c48 <__aeabi_dsub+0x358>)
 8001be2:	428a      	cmp	r2, r1
 8001be4:	d00e      	beq.n	8001c04 <__aeabi_dsub+0x314>
 8001be6:	0324      	lsls	r4, r4, #12
 8001be8:	0552      	lsls	r2, r2, #21
 8001bea:	0b24      	lsrs	r4, r4, #12
 8001bec:	0d52      	lsrs	r2, r2, #21
 8001bee:	e722      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e71e      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	4662      	mov	r2, ip
 8001bfc:	0752      	lsls	r2, r2, #29
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	4662      	mov	r2, ip
 8001c02:	08d4      	lsrs	r4, r2, #3
 8001c04:	001a      	movs	r2, r3
 8001c06:	4322      	orrs	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x31c>
 8001c0a:	e1fc      	b.n	8002006 <__aeabi_dsub+0x716>
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	4314      	orrs	r4, r2
 8001c12:	0324      	lsls	r4, r4, #12
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <__aeabi_dsub+0x358>)
 8001c16:	0b24      	lsrs	r4, r4, #12
 8001c18:	e70d      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001c1a:	0020      	movs	r0, r4
 8001c1c:	f000 fb2c 	bl	8002278 <__clzsi2>
 8001c20:	0001      	movs	r1, r0
 8001c22:	3118      	adds	r1, #24
 8001c24:	291f      	cmp	r1, #31
 8001c26:	dc00      	bgt.n	8001c2a <__aeabi_dsub+0x33a>
 8001c28:	e6c4      	b.n	80019b4 <__aeabi_dsub+0xc4>
 8001c2a:	3808      	subs	r0, #8
 8001c2c:	4084      	lsls	r4, r0
 8001c2e:	4643      	mov	r3, r8
 8001c30:	0020      	movs	r0, r4
 8001c32:	2400      	movs	r4, #0
 8001c34:	4588      	cmp	r8, r1
 8001c36:	dc00      	bgt.n	8001c3a <__aeabi_dsub+0x34a>
 8001c38:	e6c8      	b.n	80019cc <__aeabi_dsub+0xdc>
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__aeabi_dsub+0x35c>)
 8001c3c:	1a5b      	subs	r3, r3, r1
 8001c3e:	4010      	ands	r0, r2
 8001c40:	4698      	mov	r8, r3
 8001c42:	4681      	mov	r9, r0
 8001c44:	e6d6      	b.n	80019f4 <__aeabi_dsub+0x104>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	ff7fffff 	.word	0xff7fffff
 8001c50:	fffff801 	.word	0xfffff801
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	430f      	orrs	r7, r1
 8001c5a:	1e7a      	subs	r2, r7, #1
 8001c5c:	4197      	sbcs	r7, r2
 8001c5e:	e691      	b.n	8001984 <__aeabi_dsub+0x94>
 8001c60:	4661      	mov	r1, ip
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	0749      	lsls	r1, r1, #29
 8001c66:	430b      	orrs	r3, r1
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08cc      	lsrs	r4, r1, #3
 8001c6c:	e7b8      	b.n	8001be0 <__aeabi_dsub+0x2f0>
 8001c6e:	4640      	mov	r0, r8
 8001c70:	4cd3      	ldr	r4, [pc, #844]	; (8001fc0 <__aeabi_dsub+0x6d0>)
 8001c72:	3001      	adds	r0, #1
 8001c74:	4220      	tst	r0, r4
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dsub+0x38a>
 8001c78:	e0a2      	b.n	8001dc0 <__aeabi_dsub+0x4d0>
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x392>
 8001c80:	e101      	b.n	8001e86 <__aeabi_dsub+0x596>
 8001c82:	4660      	mov	r0, ip
 8001c84:	4318      	orrs	r0, r3
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x39a>
 8001c88:	e15e      	b.n	8001f48 <__aeabi_dsub+0x658>
 8001c8a:	0008      	movs	r0, r1
 8001c8c:	4338      	orrs	r0, r7
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_dsub+0x3a2>
 8001c90:	e15f      	b.n	8001f52 <__aeabi_dsub+0x662>
 8001c92:	4661      	mov	r1, ip
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	0749      	lsls	r1, r1, #29
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	4661      	mov	r1, ip
 8001c9c:	08cc      	lsrs	r4, r1, #3
 8001c9e:	e7a2      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001ca0:	4dc8      	ldr	r5, [pc, #800]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x3b8>
 8001ca6:	e0cf      	b.n	8001e48 <__aeabi_dsub+0x558>
 8001ca8:	2580      	movs	r5, #128	; 0x80
 8001caa:	4664      	mov	r4, ip
 8001cac:	042d      	lsls	r5, r5, #16
 8001cae:	432c      	orrs	r4, r5
 8001cb0:	46a4      	mov	ip, r4
 8001cb2:	2a38      	cmp	r2, #56	; 0x38
 8001cb4:	dc56      	bgt.n	8001d64 <__aeabi_dsub+0x474>
 8001cb6:	2a1f      	cmp	r2, #31
 8001cb8:	dd00      	ble.n	8001cbc <__aeabi_dsub+0x3cc>
 8001cba:	e0d1      	b.n	8001e60 <__aeabi_dsub+0x570>
 8001cbc:	2520      	movs	r5, #32
 8001cbe:	001e      	movs	r6, r3
 8001cc0:	1aad      	subs	r5, r5, r2
 8001cc2:	4664      	mov	r4, ip
 8001cc4:	40ab      	lsls	r3, r5
 8001cc6:	40ac      	lsls	r4, r5
 8001cc8:	40d6      	lsrs	r6, r2
 8001cca:	1e5d      	subs	r5, r3, #1
 8001ccc:	41ab      	sbcs	r3, r5
 8001cce:	4334      	orrs	r4, r6
 8001cd0:	4323      	orrs	r3, r4
 8001cd2:	4664      	mov	r4, ip
 8001cd4:	40d4      	lsrs	r4, r2
 8001cd6:	1b09      	subs	r1, r1, r4
 8001cd8:	e049      	b.n	8001d6e <__aeabi_dsub+0x47e>
 8001cda:	4660      	mov	r0, ip
 8001cdc:	1bdc      	subs	r4, r3, r7
 8001cde:	1a46      	subs	r6, r0, r1
 8001ce0:	42a3      	cmp	r3, r4
 8001ce2:	4180      	sbcs	r0, r0
 8001ce4:	4240      	negs	r0, r0
 8001ce6:	4681      	mov	r9, r0
 8001ce8:	0030      	movs	r0, r6
 8001cea:	464e      	mov	r6, r9
 8001cec:	1b80      	subs	r0, r0, r6
 8001cee:	4681      	mov	r9, r0
 8001cf0:	0200      	lsls	r0, r0, #8
 8001cf2:	d476      	bmi.n	8001de2 <__aeabi_dsub+0x4f2>
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_dsub+0x40c>
 8001cfa:	e652      	b.n	80019a2 <__aeabi_dsub+0xb2>
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	2500      	movs	r5, #0
 8001d00:	e771      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001d02:	4339      	orrs	r1, r7
 8001d04:	000c      	movs	r4, r1
 8001d06:	1e62      	subs	r2, r4, #1
 8001d08:	4194      	sbcs	r4, r2
 8001d0a:	18e4      	adds	r4, r4, r3
 8001d0c:	429c      	cmp	r4, r3
 8001d0e:	419b      	sbcs	r3, r3
 8001d10:	425b      	negs	r3, r3
 8001d12:	4463      	add	r3, ip
 8001d14:	4699      	mov	r9, r3
 8001d16:	464b      	mov	r3, r9
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	d400      	bmi.n	8001d1e <__aeabi_dsub+0x42e>
 8001d1c:	e756      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	469c      	mov	ip, r3
 8001d22:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001d24:	44e0      	add	r8, ip
 8001d26:	4598      	cmp	r8, r3
 8001d28:	d038      	beq.n	8001d9c <__aeabi_dsub+0x4ac>
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	48a6      	ldr	r0, [pc, #664]	; (8001fc8 <__aeabi_dsub+0x6d8>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4003      	ands	r3, r0
 8001d32:	0018      	movs	r0, r3
 8001d34:	0863      	lsrs	r3, r4, #1
 8001d36:	4014      	ands	r4, r2
 8001d38:	431c      	orrs	r4, r3
 8001d3a:	07c3      	lsls	r3, r0, #31
 8001d3c:	431c      	orrs	r4, r3
 8001d3e:	0843      	lsrs	r3, r0, #1
 8001d40:	4699      	mov	r9, r3
 8001d42:	e657      	b.n	80019f4 <__aeabi_dsub+0x104>
 8001d44:	0010      	movs	r0, r2
 8001d46:	000e      	movs	r6, r1
 8001d48:	3820      	subs	r0, #32
 8001d4a:	40c6      	lsrs	r6, r0
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d004      	beq.n	8001d5a <__aeabi_dsub+0x46a>
 8001d50:	2040      	movs	r0, #64	; 0x40
 8001d52:	1a82      	subs	r2, r0, r2
 8001d54:	4091      	lsls	r1, r2
 8001d56:	430f      	orrs	r7, r1
 8001d58:	46b9      	mov	r9, r7
 8001d5a:	464f      	mov	r7, r9
 8001d5c:	1e7a      	subs	r2, r7, #1
 8001d5e:	4197      	sbcs	r7, r2
 8001d60:	4337      	orrs	r7, r6
 8001d62:	e60f      	b.n	8001984 <__aeabi_dsub+0x94>
 8001d64:	4662      	mov	r2, ip
 8001d66:	431a      	orrs	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	4193      	sbcs	r3, r2
 8001d6e:	1afc      	subs	r4, r7, r3
 8001d70:	42a7      	cmp	r7, r4
 8001d72:	41bf      	sbcs	r7, r7
 8001d74:	427f      	negs	r7, r7
 8001d76:	1bcb      	subs	r3, r1, r7
 8001d78:	4699      	mov	r9, r3
 8001d7a:	465d      	mov	r5, fp
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	e608      	b.n	8001992 <__aeabi_dsub+0xa2>
 8001d80:	4666      	mov	r6, ip
 8001d82:	431e      	orrs	r6, r3
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x498>
 8001d86:	e0be      	b.n	8001f06 <__aeabi_dsub+0x616>
 8001d88:	1e56      	subs	r6, r2, #1
 8001d8a:	2a01      	cmp	r2, #1
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x4a0>
 8001d8e:	e109      	b.n	8001fa4 <__aeabi_dsub+0x6b4>
 8001d90:	4c8c      	ldr	r4, [pc, #560]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001d92:	42a2      	cmp	r2, r4
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x4a8>
 8001d96:	e119      	b.n	8001fcc <__aeabi_dsub+0x6dc>
 8001d98:	0032      	movs	r2, r6
 8001d9a:	e6c1      	b.n	8001b20 <__aeabi_dsub+0x230>
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	2400      	movs	r4, #0
 8001da0:	2300      	movs	r3, #0
 8001da2:	e648      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001da4:	2020      	movs	r0, #32
 8001da6:	000c      	movs	r4, r1
 8001da8:	1a80      	subs	r0, r0, r2
 8001daa:	003e      	movs	r6, r7
 8001dac:	4087      	lsls	r7, r0
 8001dae:	4084      	lsls	r4, r0
 8001db0:	40d6      	lsrs	r6, r2
 8001db2:	1e78      	subs	r0, r7, #1
 8001db4:	4187      	sbcs	r7, r0
 8001db6:	40d1      	lsrs	r1, r2
 8001db8:	4334      	orrs	r4, r6
 8001dba:	433c      	orrs	r4, r7
 8001dbc:	448c      	add	ip, r1
 8001dbe:	e7a4      	b.n	8001d0a <__aeabi_dsub+0x41a>
 8001dc0:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <__aeabi_dsub+0x6d4>)
 8001dc2:	4290      	cmp	r0, r2
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x4d8>
 8001dc6:	e0e9      	b.n	8001f9c <__aeabi_dsub+0x6ac>
 8001dc8:	19df      	adds	r7, r3, r7
 8001dca:	429f      	cmp	r7, r3
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	4461      	add	r1, ip
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	18c9      	adds	r1, r1, r3
 8001dd4:	07cc      	lsls	r4, r1, #31
 8001dd6:	087f      	lsrs	r7, r7, #1
 8001dd8:	084b      	lsrs	r3, r1, #1
 8001dda:	4699      	mov	r9, r3
 8001ddc:	4680      	mov	r8, r0
 8001dde:	433c      	orrs	r4, r7
 8001de0:	e6f4      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001de2:	1afc      	subs	r4, r7, r3
 8001de4:	42a7      	cmp	r7, r4
 8001de6:	41bf      	sbcs	r7, r7
 8001de8:	4663      	mov	r3, ip
 8001dea:	427f      	negs	r7, r7
 8001dec:	1ac9      	subs	r1, r1, r3
 8001dee:	1bcb      	subs	r3, r1, r7
 8001df0:	4699      	mov	r9, r3
 8001df2:	465d      	mov	r5, fp
 8001df4:	e5d5      	b.n	80019a2 <__aeabi_dsub+0xb2>
 8001df6:	08ff      	lsrs	r7, r7, #3
 8001df8:	074b      	lsls	r3, r1, #29
 8001dfa:	465d      	mov	r5, fp
 8001dfc:	433b      	orrs	r3, r7
 8001dfe:	08cc      	lsrs	r4, r1, #3
 8001e00:	e6ee      	b.n	8001be0 <__aeabi_dsub+0x2f0>
 8001e02:	4662      	mov	r2, ip
 8001e04:	431a      	orrs	r2, r3
 8001e06:	d000      	beq.n	8001e0a <__aeabi_dsub+0x51a>
 8001e08:	e082      	b.n	8001f10 <__aeabi_dsub+0x620>
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	433b      	orrs	r3, r7
 8001e0e:	d11b      	bne.n	8001e48 <__aeabi_dsub+0x558>
 8001e10:	2480      	movs	r4, #128	; 0x80
 8001e12:	2500      	movs	r5, #0
 8001e14:	0324      	lsls	r4, r4, #12
 8001e16:	e6f9      	b.n	8001c0c <__aeabi_dsub+0x31c>
 8001e18:	19dc      	adds	r4, r3, r7
 8001e1a:	429c      	cmp	r4, r3
 8001e1c:	419b      	sbcs	r3, r3
 8001e1e:	4461      	add	r1, ip
 8001e20:	4689      	mov	r9, r1
 8001e22:	425b      	negs	r3, r3
 8001e24:	4499      	add	r9, r3
 8001e26:	464b      	mov	r3, r9
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	d444      	bmi.n	8001eb6 <__aeabi_dsub+0x5c6>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4698      	mov	r8, r3
 8001e30:	e6cc      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001e32:	1bdc      	subs	r4, r3, r7
 8001e34:	4662      	mov	r2, ip
 8001e36:	42a3      	cmp	r3, r4
 8001e38:	419b      	sbcs	r3, r3
 8001e3a:	1a51      	subs	r1, r2, r1
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	4699      	mov	r9, r3
 8001e42:	2301      	movs	r3, #1
 8001e44:	4698      	mov	r8, r3
 8001e46:	e5a4      	b.n	8001992 <__aeabi_dsub+0xa2>
 8001e48:	08ff      	lsrs	r7, r7, #3
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	465d      	mov	r5, fp
 8001e4e:	433b      	orrs	r3, r7
 8001e50:	08cc      	lsrs	r4, r1, #3
 8001e52:	e6d7      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001e54:	4662      	mov	r2, ip
 8001e56:	431a      	orrs	r2, r3
 8001e58:	0014      	movs	r4, r2
 8001e5a:	1e63      	subs	r3, r4, #1
 8001e5c:	419c      	sbcs	r4, r3
 8001e5e:	e679      	b.n	8001b54 <__aeabi_dsub+0x264>
 8001e60:	0015      	movs	r5, r2
 8001e62:	4664      	mov	r4, ip
 8001e64:	3d20      	subs	r5, #32
 8001e66:	40ec      	lsrs	r4, r5
 8001e68:	46a0      	mov	r8, r4
 8001e6a:	2a20      	cmp	r2, #32
 8001e6c:	d005      	beq.n	8001e7a <__aeabi_dsub+0x58a>
 8001e6e:	2540      	movs	r5, #64	; 0x40
 8001e70:	4664      	mov	r4, ip
 8001e72:	1aaa      	subs	r2, r5, r2
 8001e74:	4094      	lsls	r4, r2
 8001e76:	4323      	orrs	r3, r4
 8001e78:	469a      	mov	sl, r3
 8001e7a:	4654      	mov	r4, sl
 8001e7c:	1e63      	subs	r3, r4, #1
 8001e7e:	419c      	sbcs	r4, r3
 8001e80:	4643      	mov	r3, r8
 8001e82:	4323      	orrs	r3, r4
 8001e84:	e773      	b.n	8001d6e <__aeabi_dsub+0x47e>
 8001e86:	4662      	mov	r2, ip
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	d023      	beq.n	8001ed4 <__aeabi_dsub+0x5e4>
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	433a      	orrs	r2, r7
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x5a4>
 8001e92:	e0a0      	b.n	8001fd6 <__aeabi_dsub+0x6e6>
 8001e94:	4662      	mov	r2, ip
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	4662      	mov	r2, ip
 8001e9e:	08d4      	lsrs	r4, r2, #3
 8001ea0:	e6b0      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x5ba>
 8001ea8:	e728      	b.n	8001cfc <__aeabi_dsub+0x40c>
 8001eaa:	08ff      	lsrs	r7, r7, #3
 8001eac:	074b      	lsls	r3, r1, #29
 8001eae:	465d      	mov	r5, fp
 8001eb0:	433b      	orrs	r3, r7
 8001eb2:	08cc      	lsrs	r4, r1, #3
 8001eb4:	e697      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	4698      	mov	r8, r3
 8001eba:	e736      	b.n	8001d2a <__aeabi_dsub+0x43a>
 8001ebc:	1afc      	subs	r4, r7, r3
 8001ebe:	42a7      	cmp	r7, r4
 8001ec0:	41bf      	sbcs	r7, r7
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	427f      	negs	r7, r7
 8001ec6:	1ac9      	subs	r1, r1, r3
 8001ec8:	1bcb      	subs	r3, r1, r7
 8001eca:	4699      	mov	r9, r3
 8001ecc:	2301      	movs	r3, #1
 8001ece:	465d      	mov	r5, fp
 8001ed0:	4698      	mov	r8, r3
 8001ed2:	e55e      	b.n	8001992 <__aeabi_dsub+0xa2>
 8001ed4:	074b      	lsls	r3, r1, #29
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	433b      	orrs	r3, r7
 8001eda:	08cc      	lsrs	r4, r1, #3
 8001edc:	e692      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001ede:	1bdc      	subs	r4, r3, r7
 8001ee0:	4660      	mov	r0, ip
 8001ee2:	42a3      	cmp	r3, r4
 8001ee4:	41b6      	sbcs	r6, r6
 8001ee6:	1a40      	subs	r0, r0, r1
 8001ee8:	4276      	negs	r6, r6
 8001eea:	1b80      	subs	r0, r0, r6
 8001eec:	4681      	mov	r9, r0
 8001eee:	0200      	lsls	r0, r0, #8
 8001ef0:	d560      	bpl.n	8001fb4 <__aeabi_dsub+0x6c4>
 8001ef2:	1afc      	subs	r4, r7, r3
 8001ef4:	42a7      	cmp	r7, r4
 8001ef6:	41bf      	sbcs	r7, r7
 8001ef8:	4663      	mov	r3, ip
 8001efa:	427f      	negs	r7, r7
 8001efc:	1ac9      	subs	r1, r1, r3
 8001efe:	1bcb      	subs	r3, r1, r7
 8001f00:	4699      	mov	r9, r3
 8001f02:	465d      	mov	r5, fp
 8001f04:	e576      	b.n	80019f4 <__aeabi_dsub+0x104>
 8001f06:	08ff      	lsrs	r7, r7, #3
 8001f08:	074b      	lsls	r3, r1, #29
 8001f0a:	433b      	orrs	r3, r7
 8001f0c:	08cc      	lsrs	r4, r1, #3
 8001f0e:	e667      	b.n	8001be0 <__aeabi_dsub+0x2f0>
 8001f10:	000a      	movs	r2, r1
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	433a      	orrs	r2, r7
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x62a>
 8001f18:	e66f      	b.n	8001bfa <__aeabi_dsub+0x30a>
 8001f1a:	4662      	mov	r2, ip
 8001f1c:	0752      	lsls	r2, r2, #29
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	4662      	mov	r2, ip
 8001f22:	08d4      	lsrs	r4, r2, #3
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	0312      	lsls	r2, r2, #12
 8001f28:	4214      	tst	r4, r2
 8001f2a:	d007      	beq.n	8001f3c <__aeabi_dsub+0x64c>
 8001f2c:	08c8      	lsrs	r0, r1, #3
 8001f2e:	4210      	tst	r0, r2
 8001f30:	d104      	bne.n	8001f3c <__aeabi_dsub+0x64c>
 8001f32:	465d      	mov	r5, fp
 8001f34:	0004      	movs	r4, r0
 8001f36:	08fb      	lsrs	r3, r7, #3
 8001f38:	0749      	lsls	r1, r1, #29
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	0f5a      	lsrs	r2, r3, #29
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	0752      	lsls	r2, r2, #29
 8001f44:	4313      	orrs	r3, r2
 8001f46:	e65d      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001f48:	074b      	lsls	r3, r1, #29
 8001f4a:	08ff      	lsrs	r7, r7, #3
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	08cc      	lsrs	r4, r1, #3
 8001f50:	e649      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 8001f52:	19dc      	adds	r4, r3, r7
 8001f54:	429c      	cmp	r4, r3
 8001f56:	419b      	sbcs	r3, r3
 8001f58:	4461      	add	r1, ip
 8001f5a:	4689      	mov	r9, r1
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	4499      	add	r9, r3
 8001f60:	464b      	mov	r3, r9
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	d400      	bmi.n	8001f68 <__aeabi_dsub+0x678>
 8001f66:	e631      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001f68:	464a      	mov	r2, r9
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <__aeabi_dsub+0x6d8>)
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	2301      	movs	r3, #1
 8001f70:	4691      	mov	r9, r2
 8001f72:	4698      	mov	r8, r3
 8001f74:	e62a      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001f76:	0016      	movs	r6, r2
 8001f78:	4664      	mov	r4, ip
 8001f7a:	3e20      	subs	r6, #32
 8001f7c:	40f4      	lsrs	r4, r6
 8001f7e:	46a0      	mov	r8, r4
 8001f80:	2a20      	cmp	r2, #32
 8001f82:	d005      	beq.n	8001f90 <__aeabi_dsub+0x6a0>
 8001f84:	2640      	movs	r6, #64	; 0x40
 8001f86:	4664      	mov	r4, ip
 8001f88:	1ab2      	subs	r2, r6, r2
 8001f8a:	4094      	lsls	r4, r2
 8001f8c:	4323      	orrs	r3, r4
 8001f8e:	469a      	mov	sl, r3
 8001f90:	4654      	mov	r4, sl
 8001f92:	1e63      	subs	r3, r4, #1
 8001f94:	419c      	sbcs	r4, r3
 8001f96:	4643      	mov	r3, r8
 8001f98:	431c      	orrs	r4, r3
 8001f9a:	e5db      	b.n	8001b54 <__aeabi_dsub+0x264>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e548      	b.n	8001a36 <__aeabi_dsub+0x146>
 8001fa4:	19dc      	adds	r4, r3, r7
 8001fa6:	42bc      	cmp	r4, r7
 8001fa8:	41bf      	sbcs	r7, r7
 8001faa:	4461      	add	r1, ip
 8001fac:	4689      	mov	r9, r1
 8001fae:	427f      	negs	r7, r7
 8001fb0:	44b9      	add	r9, r7
 8001fb2:	e738      	b.n	8001e26 <__aeabi_dsub+0x536>
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x6cc>
 8001fba:	e69f      	b.n	8001cfc <__aeabi_dsub+0x40c>
 8001fbc:	e606      	b.n	8001bcc <__aeabi_dsub+0x2dc>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	000007fe 	.word	0x000007fe
 8001fc4:	000007ff 	.word	0x000007ff
 8001fc8:	ff7fffff 	.word	0xff7fffff
 8001fcc:	08ff      	lsrs	r7, r7, #3
 8001fce:	074b      	lsls	r3, r1, #29
 8001fd0:	433b      	orrs	r3, r7
 8001fd2:	08cc      	lsrs	r4, r1, #3
 8001fd4:	e616      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001fd6:	4662      	mov	r2, ip
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	0752      	lsls	r2, r2, #29
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	4662      	mov	r2, ip
 8001fe0:	08d4      	lsrs	r4, r2, #3
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d007      	beq.n	8001ffa <__aeabi_dsub+0x70a>
 8001fea:	08c8      	lsrs	r0, r1, #3
 8001fec:	4210      	tst	r0, r2
 8001fee:	d104      	bne.n	8001ffa <__aeabi_dsub+0x70a>
 8001ff0:	465d      	mov	r5, fp
 8001ff2:	0004      	movs	r4, r0
 8001ff4:	08fb      	lsrs	r3, r7, #3
 8001ff6:	0749      	lsls	r1, r1, #29
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	0f5a      	lsrs	r2, r3, #29
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	0752      	lsls	r2, r2, #29
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	4313      	orrs	r3, r2
 8002004:	e5fe      	b.n	8001c04 <__aeabi_dsub+0x314>
 8002006:	2300      	movs	r3, #0
 8002008:	4a01      	ldr	r2, [pc, #4]	; (8002010 <__aeabi_dsub+0x720>)
 800200a:	001c      	movs	r4, r3
 800200c:	e513      	b.n	8001a36 <__aeabi_dsub+0x146>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	000007ff 	.word	0x000007ff

08002014 <__aeabi_dcmpun>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	0005      	movs	r5, r0
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <__aeabi_dcmpun+0x38>)
 800201a:	031c      	lsls	r4, r3, #12
 800201c:	0016      	movs	r6, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	030a      	lsls	r2, r1, #12
 8002022:	0049      	lsls	r1, r1, #1
 8002024:	0b12      	lsrs	r2, r2, #12
 8002026:	0d49      	lsrs	r1, r1, #21
 8002028:	0b24      	lsrs	r4, r4, #12
 800202a:	0d5b      	lsrs	r3, r3, #21
 800202c:	4281      	cmp	r1, r0
 800202e:	d008      	beq.n	8002042 <__aeabi_dcmpun+0x2e>
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <__aeabi_dcmpun+0x38>)
 8002032:	2000      	movs	r0, #0
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <__aeabi_dcmpun+0x2c>
 8002038:	0020      	movs	r0, r4
 800203a:	4330      	orrs	r0, r6
 800203c:	1e43      	subs	r3, r0, #1
 800203e:	4198      	sbcs	r0, r3
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	2001      	movs	r0, #1
 8002044:	432a      	orrs	r2, r5
 8002046:	d1fb      	bne.n	8002040 <__aeabi_dcmpun+0x2c>
 8002048:	e7f2      	b.n	8002030 <__aeabi_dcmpun+0x1c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff

08002050 <__aeabi_d2iz>:
 8002050:	000a      	movs	r2, r1
 8002052:	b530      	push	{r4, r5, lr}
 8002054:	4c13      	ldr	r4, [pc, #76]	; (80020a4 <__aeabi_d2iz+0x54>)
 8002056:	0053      	lsls	r3, r2, #1
 8002058:	0309      	lsls	r1, r1, #12
 800205a:	0005      	movs	r5, r0
 800205c:	0b09      	lsrs	r1, r1, #12
 800205e:	2000      	movs	r0, #0
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	0fd2      	lsrs	r2, r2, #31
 8002064:	42a3      	cmp	r3, r4
 8002066:	dd04      	ble.n	8002072 <__aeabi_d2iz+0x22>
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <__aeabi_d2iz+0x58>)
 800206a:	4283      	cmp	r3, r0
 800206c:	dd02      	ble.n	8002074 <__aeabi_d2iz+0x24>
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <__aeabi_d2iz+0x5c>)
 8002070:	18d0      	adds	r0, r2, r3
 8002072:	bd30      	pop	{r4, r5, pc}
 8002074:	2080      	movs	r0, #128	; 0x80
 8002076:	0340      	lsls	r0, r0, #13
 8002078:	4301      	orrs	r1, r0
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <__aeabi_d2iz+0x60>)
 800207c:	1ac0      	subs	r0, r0, r3
 800207e:	281f      	cmp	r0, #31
 8002080:	dd08      	ble.n	8002094 <__aeabi_d2iz+0x44>
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <__aeabi_d2iz+0x64>)
 8002084:	1ac3      	subs	r3, r0, r3
 8002086:	40d9      	lsrs	r1, r3
 8002088:	000b      	movs	r3, r1
 800208a:	4258      	negs	r0, r3
 800208c:	2a00      	cmp	r2, #0
 800208e:	d1f0      	bne.n	8002072 <__aeabi_d2iz+0x22>
 8002090:	0018      	movs	r0, r3
 8002092:	e7ee      	b.n	8002072 <__aeabi_d2iz+0x22>
 8002094:	4c08      	ldr	r4, [pc, #32]	; (80020b8 <__aeabi_d2iz+0x68>)
 8002096:	40c5      	lsrs	r5, r0
 8002098:	46a4      	mov	ip, r4
 800209a:	4463      	add	r3, ip
 800209c:	4099      	lsls	r1, r3
 800209e:	000b      	movs	r3, r1
 80020a0:	432b      	orrs	r3, r5
 80020a2:	e7f2      	b.n	800208a <__aeabi_d2iz+0x3a>
 80020a4:	000003fe 	.word	0x000003fe
 80020a8:	0000041d 	.word	0x0000041d
 80020ac:	7fffffff 	.word	0x7fffffff
 80020b0:	00000433 	.word	0x00000433
 80020b4:	00000413 	.word	0x00000413
 80020b8:	fffffbed 	.word	0xfffffbed

080020bc <__aeabi_i2d>:
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	2800      	cmp	r0, #0
 80020c0:	d016      	beq.n	80020f0 <__aeabi_i2d+0x34>
 80020c2:	17c3      	asrs	r3, r0, #31
 80020c4:	18c5      	adds	r5, r0, r3
 80020c6:	405d      	eors	r5, r3
 80020c8:	0fc4      	lsrs	r4, r0, #31
 80020ca:	0028      	movs	r0, r5
 80020cc:	f000 f8d4 	bl	8002278 <__clzsi2>
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <__aeabi_i2d+0x5c>)
 80020d2:	1a12      	subs	r2, r2, r0
 80020d4:	280a      	cmp	r0, #10
 80020d6:	dc16      	bgt.n	8002106 <__aeabi_i2d+0x4a>
 80020d8:	0003      	movs	r3, r0
 80020da:	002e      	movs	r6, r5
 80020dc:	3315      	adds	r3, #21
 80020de:	409e      	lsls	r6, r3
 80020e0:	230b      	movs	r3, #11
 80020e2:	1a18      	subs	r0, r3, r0
 80020e4:	40c5      	lsrs	r5, r0
 80020e6:	0552      	lsls	r2, r2, #21
 80020e8:	032d      	lsls	r5, r5, #12
 80020ea:	0b2d      	lsrs	r5, r5, #12
 80020ec:	0d53      	lsrs	r3, r2, #21
 80020ee:	e003      	b.n	80020f8 <__aeabi_i2d+0x3c>
 80020f0:	2400      	movs	r4, #0
 80020f2:	2300      	movs	r3, #0
 80020f4:	2500      	movs	r5, #0
 80020f6:	2600      	movs	r6, #0
 80020f8:	051b      	lsls	r3, r3, #20
 80020fa:	432b      	orrs	r3, r5
 80020fc:	07e4      	lsls	r4, r4, #31
 80020fe:	4323      	orrs	r3, r4
 8002100:	0030      	movs	r0, r6
 8002102:	0019      	movs	r1, r3
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	380b      	subs	r0, #11
 8002108:	4085      	lsls	r5, r0
 800210a:	0552      	lsls	r2, r2, #21
 800210c:	032d      	lsls	r5, r5, #12
 800210e:	2600      	movs	r6, #0
 8002110:	0b2d      	lsrs	r5, r5, #12
 8002112:	0d53      	lsrs	r3, r2, #21
 8002114:	e7f0      	b.n	80020f8 <__aeabi_i2d+0x3c>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	0000041e 	.word	0x0000041e

0800211c <__aeabi_ui2d>:
 800211c:	b510      	push	{r4, lr}
 800211e:	1e04      	subs	r4, r0, #0
 8002120:	d010      	beq.n	8002144 <__aeabi_ui2d+0x28>
 8002122:	f000 f8a9 	bl	8002278 <__clzsi2>
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <__aeabi_ui2d+0x48>)
 8002128:	1a1b      	subs	r3, r3, r0
 800212a:	280a      	cmp	r0, #10
 800212c:	dc11      	bgt.n	8002152 <__aeabi_ui2d+0x36>
 800212e:	220b      	movs	r2, #11
 8002130:	0021      	movs	r1, r4
 8002132:	1a12      	subs	r2, r2, r0
 8002134:	40d1      	lsrs	r1, r2
 8002136:	3015      	adds	r0, #21
 8002138:	030a      	lsls	r2, r1, #12
 800213a:	055b      	lsls	r3, r3, #21
 800213c:	4084      	lsls	r4, r0
 800213e:	0b12      	lsrs	r2, r2, #12
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	e001      	b.n	8002148 <__aeabi_ui2d+0x2c>
 8002144:	2300      	movs	r3, #0
 8002146:	2200      	movs	r2, #0
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	4313      	orrs	r3, r2
 800214c:	0020      	movs	r0, r4
 800214e:	0019      	movs	r1, r3
 8002150:	bd10      	pop	{r4, pc}
 8002152:	0022      	movs	r2, r4
 8002154:	380b      	subs	r0, #11
 8002156:	4082      	lsls	r2, r0
 8002158:	055b      	lsls	r3, r3, #21
 800215a:	0312      	lsls	r2, r2, #12
 800215c:	2400      	movs	r4, #0
 800215e:	0b12      	lsrs	r2, r2, #12
 8002160:	0d5b      	lsrs	r3, r3, #21
 8002162:	e7f1      	b.n	8002148 <__aeabi_ui2d+0x2c>
 8002164:	0000041e 	.word	0x0000041e

08002168 <__aeabi_d2f>:
 8002168:	0002      	movs	r2, r0
 800216a:	004b      	lsls	r3, r1, #1
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	0d5b      	lsrs	r3, r3, #21
 8002170:	030c      	lsls	r4, r1, #12
 8002172:	4e3d      	ldr	r6, [pc, #244]	; (8002268 <__aeabi_d2f+0x100>)
 8002174:	0a64      	lsrs	r4, r4, #9
 8002176:	0f40      	lsrs	r0, r0, #29
 8002178:	1c5f      	adds	r7, r3, #1
 800217a:	0fc9      	lsrs	r1, r1, #31
 800217c:	4304      	orrs	r4, r0
 800217e:	00d5      	lsls	r5, r2, #3
 8002180:	4237      	tst	r7, r6
 8002182:	d00a      	beq.n	800219a <__aeabi_d2f+0x32>
 8002184:	4839      	ldr	r0, [pc, #228]	; (800226c <__aeabi_d2f+0x104>)
 8002186:	181e      	adds	r6, r3, r0
 8002188:	2efe      	cmp	r6, #254	; 0xfe
 800218a:	dd16      	ble.n	80021ba <__aeabi_d2f+0x52>
 800218c:	20ff      	movs	r0, #255	; 0xff
 800218e:	2400      	movs	r4, #0
 8002190:	05c0      	lsls	r0, r0, #23
 8002192:	4320      	orrs	r0, r4
 8002194:	07c9      	lsls	r1, r1, #31
 8002196:	4308      	orrs	r0, r1
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <__aeabi_d2f+0x44>
 800219e:	432c      	orrs	r4, r5
 80021a0:	d026      	beq.n	80021f0 <__aeabi_d2f+0x88>
 80021a2:	2205      	movs	r2, #5
 80021a4:	0192      	lsls	r2, r2, #6
 80021a6:	0a54      	lsrs	r4, r2, #9
 80021a8:	b2d8      	uxtb	r0, r3
 80021aa:	e7f1      	b.n	8002190 <__aeabi_d2f+0x28>
 80021ac:	4325      	orrs	r5, r4
 80021ae:	d0ed      	beq.n	800218c <__aeabi_d2f+0x24>
 80021b0:	2080      	movs	r0, #128	; 0x80
 80021b2:	03c0      	lsls	r0, r0, #15
 80021b4:	4304      	orrs	r4, r0
 80021b6:	20ff      	movs	r0, #255	; 0xff
 80021b8:	e7ea      	b.n	8002190 <__aeabi_d2f+0x28>
 80021ba:	2e00      	cmp	r6, #0
 80021bc:	dd1b      	ble.n	80021f6 <__aeabi_d2f+0x8e>
 80021be:	0192      	lsls	r2, r2, #6
 80021c0:	1e53      	subs	r3, r2, #1
 80021c2:	419a      	sbcs	r2, r3
 80021c4:	00e4      	lsls	r4, r4, #3
 80021c6:	0f6d      	lsrs	r5, r5, #29
 80021c8:	4322      	orrs	r2, r4
 80021ca:	432a      	orrs	r2, r5
 80021cc:	0753      	lsls	r3, r2, #29
 80021ce:	d048      	beq.n	8002262 <__aeabi_d2f+0xfa>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d000      	beq.n	80021da <__aeabi_d2f+0x72>
 80021d8:	3204      	adds	r2, #4
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	04db      	lsls	r3, r3, #19
 80021de:	4013      	ands	r3, r2
 80021e0:	d03f      	beq.n	8002262 <__aeabi_d2f+0xfa>
 80021e2:	1c70      	adds	r0, r6, #1
 80021e4:	2efe      	cmp	r6, #254	; 0xfe
 80021e6:	d0d1      	beq.n	800218c <__aeabi_d2f+0x24>
 80021e8:	0192      	lsls	r2, r2, #6
 80021ea:	0a54      	lsrs	r4, r2, #9
 80021ec:	b2c0      	uxtb	r0, r0
 80021ee:	e7cf      	b.n	8002190 <__aeabi_d2f+0x28>
 80021f0:	2000      	movs	r0, #0
 80021f2:	2400      	movs	r4, #0
 80021f4:	e7cc      	b.n	8002190 <__aeabi_d2f+0x28>
 80021f6:	0032      	movs	r2, r6
 80021f8:	3217      	adds	r2, #23
 80021fa:	db22      	blt.n	8002242 <__aeabi_d2f+0xda>
 80021fc:	2080      	movs	r0, #128	; 0x80
 80021fe:	0400      	lsls	r0, r0, #16
 8002200:	4320      	orrs	r0, r4
 8002202:	241e      	movs	r4, #30
 8002204:	1ba4      	subs	r4, r4, r6
 8002206:	2c1f      	cmp	r4, #31
 8002208:	dd1d      	ble.n	8002246 <__aeabi_d2f+0xde>
 800220a:	2202      	movs	r2, #2
 800220c:	4252      	negs	r2, r2
 800220e:	1b96      	subs	r6, r2, r6
 8002210:	0002      	movs	r2, r0
 8002212:	40f2      	lsrs	r2, r6
 8002214:	0016      	movs	r6, r2
 8002216:	2c20      	cmp	r4, #32
 8002218:	d004      	beq.n	8002224 <__aeabi_d2f+0xbc>
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <__aeabi_d2f+0x108>)
 800221c:	4694      	mov	ip, r2
 800221e:	4463      	add	r3, ip
 8002220:	4098      	lsls	r0, r3
 8002222:	4305      	orrs	r5, r0
 8002224:	002a      	movs	r2, r5
 8002226:	1e53      	subs	r3, r2, #1
 8002228:	419a      	sbcs	r2, r3
 800222a:	4332      	orrs	r2, r6
 800222c:	2600      	movs	r6, #0
 800222e:	0753      	lsls	r3, r2, #29
 8002230:	d1ce      	bne.n	80021d0 <__aeabi_d2f+0x68>
 8002232:	2480      	movs	r4, #128	; 0x80
 8002234:	0013      	movs	r3, r2
 8002236:	04e4      	lsls	r4, r4, #19
 8002238:	2001      	movs	r0, #1
 800223a:	4023      	ands	r3, r4
 800223c:	4222      	tst	r2, r4
 800223e:	d1d3      	bne.n	80021e8 <__aeabi_d2f+0x80>
 8002240:	e7b0      	b.n	80021a4 <__aeabi_d2f+0x3c>
 8002242:	2300      	movs	r3, #0
 8002244:	e7ad      	b.n	80021a2 <__aeabi_d2f+0x3a>
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <__aeabi_d2f+0x10c>)
 8002248:	4694      	mov	ip, r2
 800224a:	002a      	movs	r2, r5
 800224c:	40e2      	lsrs	r2, r4
 800224e:	0014      	movs	r4, r2
 8002250:	002a      	movs	r2, r5
 8002252:	4463      	add	r3, ip
 8002254:	409a      	lsls	r2, r3
 8002256:	4098      	lsls	r0, r3
 8002258:	1e55      	subs	r5, r2, #1
 800225a:	41aa      	sbcs	r2, r5
 800225c:	4302      	orrs	r2, r0
 800225e:	4322      	orrs	r2, r4
 8002260:	e7e4      	b.n	800222c <__aeabi_d2f+0xc4>
 8002262:	0033      	movs	r3, r6
 8002264:	e79e      	b.n	80021a4 <__aeabi_d2f+0x3c>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	000007fe 	.word	0x000007fe
 800226c:	fffffc80 	.word	0xfffffc80
 8002270:	fffffca2 	.word	0xfffffca2
 8002274:	fffffc82 	.word	0xfffffc82

08002278 <__clzsi2>:
 8002278:	211c      	movs	r1, #28
 800227a:	2301      	movs	r3, #1
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0xe>
 8002282:	0c00      	lsrs	r0, r0, #16
 8002284:	3910      	subs	r1, #16
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	4298      	cmp	r0, r3
 800228a:	d301      	bcc.n	8002290 <__clzsi2+0x18>
 800228c:	0a00      	lsrs	r0, r0, #8
 800228e:	3908      	subs	r1, #8
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	4298      	cmp	r0, r3
 8002294:	d301      	bcc.n	800229a <__clzsi2+0x22>
 8002296:	0900      	lsrs	r0, r0, #4
 8002298:	3904      	subs	r1, #4
 800229a:	a202      	add	r2, pc, #8	; (adr r2, 80022a4 <__clzsi2+0x2c>)
 800229c:	5c10      	ldrb	r0, [r2, r0]
 800229e:	1840      	adds	r0, r0, r1
 80022a0:	4770      	bx	lr
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	02020304 	.word	0x02020304
 80022a8:	01010101 	.word	0x01010101
	...

080022b4 <BLDC_Driving_test>:
		delay_us(j);
		AHCL_ON;
	}
}
void BLDC_Driving_test(MADC_Structure * adc_val)// The driving sequence is 1-5-4-6-2-3 CBA
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	static int i=1;
	switch(i)
 80022bc:	4b6f      	ldr	r3, [pc, #444]	; (800247c <BLDC_Driving_test+0x1c8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d900      	bls.n	80022c6 <BLDC_Driving_test+0x12>
 80022c4:	e0ca      	b.n	800245c <BLDC_Driving_test+0x1a8>
 80022c6:	009a      	lsls	r2, r3, #2
 80022c8:	4b6d      	ldr	r3, [pc, #436]	; (8002480 <BLDC_Driving_test+0x1cc>)
 80022ca:	18d3      	adds	r3, r2, r3
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	469f      	mov	pc, r3
	{
	case 1:
		AHBL_ON;
 80022d0:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80022d2:	2104      	movs	r1, #4
 80022d4:	0018      	movs	r0, r3
 80022d6:	f003 fea9 	bl	800602c <HAL_TIM_PWM_Stop>
 80022da:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80022dc:	2108      	movs	r1, #8
 80022de:	0018      	movs	r0, r3
 80022e0:	f003 fea4 	bl	800602c <HAL_TIM_PWM_Stop>
 80022e4:	23a0      	movs	r3, #160	; 0xa0
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4867      	ldr	r0, [pc, #412]	; (8002488 <BLDC_Driving_test+0x1d4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	0019      	movs	r1, r3
 80022ee:	f002 fdd4 	bl	8004e9a <HAL_GPIO_WritePin>
 80022f2:	4b64      	ldr	r3, [pc, #400]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	0018      	movs	r0, r3
 80022f8:	f003 fde6 	bl	8005ec8 <HAL_TIM_PWM_Start>
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	01db      	lsls	r3, r3, #7
 8002300:	4861      	ldr	r0, [pc, #388]	; (8002488 <BLDC_Driving_test+0x1d4>)
 8002302:	2201      	movs	r2, #1
 8002304:	0019      	movs	r1, r3
 8002306:	f002 fdc8 	bl	8004e9a <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim15, 0);//the auto reload is set to 65535 1us time base
 800230a:	4b60      	ldr	r3, [pc, #384]	; (800248c <BLDC_Driving_test+0x1d8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim15);
 8002312:	4b5e      	ldr	r3, [pc, #376]	; (800248c <BLDC_Driving_test+0x1d8>)
 8002314:	0018      	movs	r0, r3
 8002316:	f003 fb91 	bl	8005a3c <HAL_TIM_Base_Start>
//		printf("AB\r\n");
		break;
 800231a:	e0a0      	b.n	800245e <BLDC_Driving_test+0x1aa>
	case 2:
		AHCL_ON;
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <BLDC_Driving_test+0x1d0>)
 800231e:	2104      	movs	r1, #4
 8002320:	0018      	movs	r0, r3
 8002322:	f003 fe83 	bl	800602c <HAL_TIM_PWM_Stop>
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <BLDC_Driving_test+0x1d0>)
 8002328:	2108      	movs	r1, #8
 800232a:	0018      	movs	r0, r3
 800232c:	f003 fe7e 	bl	800602c <HAL_TIM_PWM_Stop>
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	01db      	lsls	r3, r3, #7
 8002334:	4854      	ldr	r0, [pc, #336]	; (8002488 <BLDC_Driving_test+0x1d4>)
 8002336:	2200      	movs	r2, #0
 8002338:	0019      	movs	r1, r3
 800233a:	f002 fdae 	bl	8004e9a <HAL_GPIO_WritePin>
 800233e:	4b51      	ldr	r3, [pc, #324]	; (8002484 <BLDC_Driving_test+0x1d0>)
 8002340:	2100      	movs	r1, #0
 8002342:	0018      	movs	r0, r3
 8002344:	f003 fdc0 	bl	8005ec8 <HAL_TIM_PWM_Start>
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	484e      	ldr	r0, [pc, #312]	; (8002488 <BLDC_Driving_test+0x1d4>)
 800234e:	2201      	movs	r2, #1
 8002350:	0019      	movs	r1, r3
 8002352:	f002 fda2 	bl	8004e9a <HAL_GPIO_WritePin>
//		printf("CB\r\n");
		break;
 8002356:	e082      	b.n	800245e <BLDC_Driving_test+0x1aa>
	case 3:
		BHCL_ON;
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <BLDC_Driving_test+0x1d0>)
 800235a:	2100      	movs	r1, #0
 800235c:	0018      	movs	r0, r3
 800235e:	f003 fe65 	bl	800602c <HAL_TIM_PWM_Stop>
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <BLDC_Driving_test+0x1d0>)
 8002364:	2108      	movs	r1, #8
 8002366:	0018      	movs	r0, r3
 8002368:	f003 fe60 	bl	800602c <HAL_TIM_PWM_Stop>
 800236c:	23c0      	movs	r3, #192	; 0xc0
 800236e:	01db      	lsls	r3, r3, #7
 8002370:	4845      	ldr	r0, [pc, #276]	; (8002488 <BLDC_Driving_test+0x1d4>)
 8002372:	2200      	movs	r2, #0
 8002374:	0019      	movs	r1, r3
 8002376:	f002 fd90 	bl	8004e9a <HAL_GPIO_WritePin>
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <BLDC_Driving_test+0x1d0>)
 800237c:	2104      	movs	r1, #4
 800237e:	0018      	movs	r0, r3
 8002380:	f003 fda2 	bl	8005ec8 <HAL_TIM_PWM_Start>
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	483f      	ldr	r0, [pc, #252]	; (8002488 <BLDC_Driving_test+0x1d4>)
 800238a:	2201      	movs	r2, #1
 800238c:	0019      	movs	r1, r3
 800238e:	f002 fd84 	bl	8004e9a <HAL_GPIO_WritePin>
//		printf("CA\r\n");
		break;
 8002392:	e064      	b.n	800245e <BLDC_Driving_test+0x1aa>
	case 4:
		BHAL_ON;
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <BLDC_Driving_test+0x1d0>)
 8002396:	2100      	movs	r1, #0
 8002398:	0018      	movs	r0, r3
 800239a:	f003 fe47 	bl	800602c <HAL_TIM_PWM_Stop>
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80023a0:	2108      	movs	r1, #8
 80023a2:	0018      	movs	r0, r3
 80023a4:	f003 fe42 	bl	800602c <HAL_TIM_PWM_Stop>
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	4836      	ldr	r0, [pc, #216]	; (8002488 <BLDC_Driving_test+0x1d4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	0019      	movs	r1, r3
 80023b2:	f002 fd72 	bl	8004e9a <HAL_GPIO_WritePin>
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80023b8:	2104      	movs	r1, #4
 80023ba:	0018      	movs	r0, r3
 80023bc:	f003 fd84 	bl	8005ec8 <HAL_TIM_PWM_Start>
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	019b      	lsls	r3, r3, #6
 80023c4:	4830      	ldr	r0, [pc, #192]	; (8002488 <BLDC_Driving_test+0x1d4>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	0019      	movs	r1, r3
 80023ca:	f002 fd66 	bl	8004e9a <HAL_GPIO_WritePin>
//		printf("BA\r\n");
		break;
 80023ce:	e046      	b.n	800245e <BLDC_Driving_test+0x1aa>
	case 5:
		CHAL_ON;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80023d2:	2100      	movs	r1, #0
 80023d4:	0018      	movs	r0, r3
 80023d6:	f003 fe29 	bl	800602c <HAL_TIM_PWM_Stop>
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80023dc:	2104      	movs	r1, #4
 80023de:	0018      	movs	r0, r3
 80023e0:	f003 fe24 	bl	800602c <HAL_TIM_PWM_Stop>
 80023e4:	23c0      	movs	r3, #192	; 0xc0
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4827      	ldr	r0, [pc, #156]	; (8002488 <BLDC_Driving_test+0x1d4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	0019      	movs	r1, r3
 80023ee:	f002 fd54 	bl	8004e9a <HAL_GPIO_WritePin>
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <BLDC_Driving_test+0x1d0>)
 80023f4:	2108      	movs	r1, #8
 80023f6:	0018      	movs	r0, r3
 80023f8:	f003 fd66 	bl	8005ec8 <HAL_TIM_PWM_Start>
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	019b      	lsls	r3, r3, #6
 8002400:	4821      	ldr	r0, [pc, #132]	; (8002488 <BLDC_Driving_test+0x1d4>)
 8002402:	2201      	movs	r2, #1
 8002404:	0019      	movs	r1, r3
 8002406:	f002 fd48 	bl	8004e9a <HAL_GPIO_WritePin>
//		printf("BC\r\n");
		break;
 800240a:	e028      	b.n	800245e <BLDC_Driving_test+0x1aa>
	case 6:
		CHBL_ON;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <BLDC_Driving_test+0x1d0>)
 800240e:	2100      	movs	r1, #0
 8002410:	0018      	movs	r0, r3
 8002412:	f003 fe0b 	bl	800602c <HAL_TIM_PWM_Stop>
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <BLDC_Driving_test+0x1d0>)
 8002418:	2104      	movs	r1, #4
 800241a:	0018      	movs	r0, r3
 800241c:	f003 fe06 	bl	800602c <HAL_TIM_PWM_Stop>
 8002420:	23a0      	movs	r3, #160	; 0xa0
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	4818      	ldr	r0, [pc, #96]	; (8002488 <BLDC_Driving_test+0x1d4>)
 8002426:	2200      	movs	r2, #0
 8002428:	0019      	movs	r1, r3
 800242a:	f002 fd36 	bl	8004e9a <HAL_GPIO_WritePin>
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <BLDC_Driving_test+0x1d0>)
 8002430:	2108      	movs	r1, #8
 8002432:	0018      	movs	r0, r3
 8002434:	f003 fd48 	bl	8005ec8 <HAL_TIM_PWM_Start>
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	01db      	lsls	r3, r3, #7
 800243c:	4812      	ldr	r0, [pc, #72]	; (8002488 <BLDC_Driving_test+0x1d4>)
 800243e:	2201      	movs	r2, #1
 8002440:	0019      	movs	r1, r3
 8002442:	f002 fd2a 	bl	8004e9a <HAL_GPIO_WritePin>
		adc_val->speed = __HAL_TIM_GET_COUNTER(&htim15);//1us base  //but only count 5 times
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <BLDC_Driving_test+0x1d8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	83da      	strh	r2, [r3, #30]
		HAL_TIM_Base_Stop(&htim15);
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <BLDC_Driving_test+0x1d8>)
 8002454:	0018      	movs	r0, r3
 8002456:	f003 fb35 	bl	8005ac4 <HAL_TIM_Base_Stop>
//		printf("AC\r\n");
		break;
 800245a:	e000      	b.n	800245e <BLDC_Driving_test+0x1aa>
	default:
//		CLOSE_ALL;
		break;
 800245c:	46c0      	nop			; (mov r8, r8)
	}
	i= i==6? 1:i+1;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <BLDC_Driving_test+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d003      	beq.n	800246e <BLDC_Driving_test+0x1ba>
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <BLDC_Driving_test+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	e000      	b.n	8002470 <BLDC_Driving_test+0x1bc>
 800246e:	2201      	movs	r2, #1
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <BLDC_Driving_test+0x1c8>)
 8002472:	601a      	str	r2, [r3, #0]

}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000000 	.word	0x20000000
 8002480:	0800d2b4 	.word	0x0800d2b4
 8002484:	200002d0 	.word	0x200002d0
 8002488:	48000400 	.word	0x48000400
 800248c:	200003f0 	.word	0x200003f0

08002490 <BLDC_PWM_Handle>:
		}

}

void BLDC_PWM_Handle(uint8_t duty)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	701a      	strb	r2, [r3, #0]
	duty = duty>=0&&duty<=50? duty:0;//Value range confirm
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b32      	cmp	r3, #50	; 0x32
 80024a2:	d802      	bhi.n	80024aa <BLDC_PWM_Handle+0x1a>
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	e000      	b.n	80024ac <BLDC_PWM_Handle+0x1c>
 80024aa:	2200      	movs	r2, #0
 80024ac:	1dfb      	adds	r3, r7, #7
 80024ae:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <BLDC_PWM_Handle+0x48>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1dfa      	adds	r2, r7, #7
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <BLDC_PWM_Handle+0x48>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1dfa      	adds	r2, r7, #7
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <BLDC_PWM_Handle+0x48>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1dfa      	adds	r2, r7, #7
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	200002d0 	.word	0x200002d0

080024dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80024e0:	f001 fc26 	bl	8003d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024e4:	f000 f85e 	bl	80025a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e8:	f000 fcf0 	bl	8002ecc <MX_GPIO_Init>
  MX_DMA_Init();
 80024ec:	f000 fcd0 	bl	8002e90 <MX_DMA_Init>
  MX_ADC_Init();
 80024f0:	f000 fade 	bl	8002ab0 <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_TIM1_Init();
 80024f4:	f000 ffa0 	bl	8003438 <MX_TIM1_Init>
  MX_TIM3_Init();
 80024f8:	f001 f8a8 	bl	800364c <MX_TIM3_Init>
  MX_TIM6_Init();
 80024fc:	f001 f942 	bl	8003784 <MX_TIM6_Init>
  MX_TIM14_Init();
 8002500:	f001 f964 	bl	80037cc <MX_TIM14_Init>
  MX_TIM15_Init();
 8002504:	f001 f9ae 	bl	8003864 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002508:	f001 fb16 	bl	8003b38 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <main+0xa8>)
 800250e:	0018      	movs	r0, r3
 8002510:	f003 fafe 	bl	8005b10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <main+0xac>)
 8002516:	0018      	movs	r0, r3
 8002518:	f003 fafa 	bl	8005b10 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 800251c:	491b      	ldr	r1, [pc, #108]	; (800258c <main+0xb0>)
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <main+0xb4>)
 8002520:	2201      	movs	r2, #1
 8002522:	0018      	movs	r0, r3
 8002524:	f004 fee8 	bl	80072f8 <HAL_UART_Receive_IT>
	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 8002528:	491a      	ldr	r1, [pc, #104]	; (8002594 <main+0xb8>)
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <main+0xbc>)
 800252c:	220a      	movs	r2, #10
 800252e:	0018      	movs	r0, r3
 8002530:	f001 fda2 	bl	8004078 <HAL_ADC_Start_DMA>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d001      	beq.n	800253c <main+0x60>
	{
	 Error_Handler(); //This function also enable the interruption
 8002538:	f000 f8aa 	bl	8002690 <Error_Handler>

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <main+0xc0>)
 800253e:	210c      	movs	r1, #12
 8002540:	0018      	movs	r0, r3
 8002542:	f003 fbb7 	bl	8005cb4 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <main+0xc4>)
 8002548:	2100      	movs	r1, #0
 800254a:	0018      	movs	r0, r3
 800254c:	f003 fcbc 	bl	8005ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <main+0xc4>)
 8002552:	2104      	movs	r1, #4
 8002554:	0018      	movs	r0, r3
 8002556:	f003 fcb7 	bl	8005ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <main+0xc4>)
 800255c:	2108      	movs	r1, #8
 800255e:	0018      	movs	r0, r3
 8002560:	f003 fcb2 	bl	8005ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <main+0xc4>)
 8002566:	210c      	movs	r1, #12
 8002568:	0018      	movs	r0, r3
 800256a:	f003 fcad 	bl	8005ec8 <HAL_TIM_PWM_Start>
  while (1)
  {
	  if(1)//adc_val.commutation_delay!=0)
	  {
//		printf("\r\n threshole:%d", adc_val.cross_zero_threshole);
		Delay_ms(100);
 800256e:	2064      	movs	r0, #100	; 0x64
 8002570:	f000 fa7c 	bl	8002a6c <Delay_ms>
//		printf("\r\n BEMF next:%d", adc_val.bemf_next);
//		printf("\r\n STATUS:%d", adc_val.zero_across_flag);
//		printf("\r\n zero_ac_COUNT:%d", adc_val.zero_across_count);
//		printf("\r\n zero_across_thr:%d",adc_val.zero_across_threshole);
//		printf("\r\n Speed:%dms/round", adc_val.speed*POLOAR_PARIRS/1000);
		Delay_ms(100);
 8002574:	2064      	movs	r0, #100	; 0x64
 8002576:	f000 fa79 	bl	8002a6c <Delay_ms>
//		printf("%0.2fV\n",	adc_val.vbat*(Vrefint*4095/adc_val.vref_data)/4095/VBAT_FACTOR);
		Delay_ms(100);
 800257a:	2064      	movs	r0, #100	; 0x64
 800257c:	f000 fa76 	bl	8002a6c <Delay_ms>
	  if(1)//adc_val.commutation_delay!=0)
 8002580:	e7f5      	b.n	800256e <main+0x92>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	20000360 	.word	0x20000360
 8002588:	200003a8 	.word	0x200003a8
 800258c:	20000451 	.word	0x20000451
 8002590:	20000454 	.word	0x20000454
 8002594:	20000220 	.word	0x20000220
 8002598:	20000244 	.word	0x20000244
 800259c:	200002d0 	.word	0x200002d0
 80025a0:	20000318 	.word	0x20000318

080025a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b095      	sub	sp, #84	; 0x54
 80025a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025aa:	2420      	movs	r4, #32
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	0018      	movs	r0, r3
 80025b0:	2330      	movs	r3, #48	; 0x30
 80025b2:	001a      	movs	r2, r3
 80025b4:	2100      	movs	r1, #0
 80025b6:	f006 f828 	bl	800860a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ba:	2310      	movs	r3, #16
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	0018      	movs	r0, r3
 80025c0:	2310      	movs	r3, #16
 80025c2:	001a      	movs	r2, r3
 80025c4:	2100      	movs	r1, #0
 80025c6:	f006 f820 	bl	800860a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ca:	003b      	movs	r3, r7
 80025cc:	0018      	movs	r0, r3
 80025ce:	2310      	movs	r3, #16
 80025d0:	001a      	movs	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f006 f819 	bl	800860a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d8:	0021      	movs	r1, r4
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2201      	movs	r2, #1
 80025e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	2210      	movs	r2, #16
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	2202      	movs	r2, #2
 80025f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	22a0      	movs	r2, #160	; 0xa0
 80025fc:	0392      	lsls	r2, r2, #14
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002606:	187b      	adds	r3, r7, r1
 8002608:	0018      	movs	r0, r3
 800260a:	f002 fc9b 	bl	8004f44 <HAL_RCC_OscConfig>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002612:	f000 f83d 	bl	8002690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002616:	2110      	movs	r1, #16
 8002618:	187b      	adds	r3, r7, r1
 800261a:	2207      	movs	r2, #7
 800261c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2202      	movs	r2, #2
 8002622:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2101      	movs	r1, #1
 8002634:	0018      	movs	r0, r3
 8002636:	f002 ff9f 	bl	8005578 <HAL_RCC_ClockConfig>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800263e:	f000 f827 	bl	8002690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002642:	003b      	movs	r3, r7
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002648:	003b      	movs	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264e:	003b      	movs	r3, r7
 8002650:	0018      	movs	r0, r3
 8002652:	f003 f8d5 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d001      	beq.n	800265e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800265a:	f000 f819 	bl	8002690 <Error_Handler>
  }
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b015      	add	sp, #84	; 0x54
 8002664:	bd90      	pop	{r4, r7, pc}
	...

08002668 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <__io_putchar+0x20>)
 8002672:	1d39      	adds	r1, r7, #4
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <__io_putchar+0x24>)
 8002676:	2201      	movs	r2, #1
 8002678:	f004 fd9e 	bl	80071b8 <HAL_UART_Transmit>
    return ch;
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	0000ffff 	.word	0x0000ffff
 800268c:	20000454 	.word	0x20000454

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002698:	e7fe      	b.n	8002698 <Error_Handler+0x8>
	...

0800269c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	static char bldc_duty = 0;
	static int period1;
	if(htim == &htim6)//1s base
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d115      	bne.n	80026d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	/*	if(period1==20&&bldc_duty<50)
		{
			bldc_duty+=1;
			BLDC_PWM_Handle(bldc_duty);
		}*/
		if(period1>20)					//200ms initial and 4.5ms stable are for the large motor
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b14      	cmp	r3, #20
 80026b2:	dd08      	ble.n	80026c6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			period1-=1;
 80026b4:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1e5a      	subs	r2, r3, #1
 80026ba:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80026bc:	601a      	str	r2, [r3, #0]
			TIM14->ARR=period1;
 80026be:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		MFlag.IsLEDOn = true;
 80026c6:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80026cc:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	0018      	movs	r0, r3
 80026d2:	f002 fbff 	bl	8004ed4 <HAL_GPIO_TogglePin>
			}*/
		}


	}
}
 80026d6:	e08b      	b.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x154>
	else if(htim == &htim14)//0.1ms base
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d000      	beq.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x46>
 80026e0:	e086      	b.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x154>
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80026e4:	8b5a      	ldrh	r2, [r3, #26]
 80026e6:	23fa      	movs	r3, #250	; 0xfa
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d921      	bls.n	8002732 <HAL_TIM_PeriodElapsedCallback+0x96>
			adc_val.commutation_timeout = 0;
 80026ee:	4b48      	ldr	r3, [pc, #288]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	831a      	strh	r2, [r3, #24]
			adc_val.zero_across_flag	= TIMEOUT;
 80026fa:	4b45      	ldr	r3, [pc, #276]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	755a      	strb	r2, [r3, #21]
			MFlag.IsPWMOutput			= false;
 8002700:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002702:	2200      	movs	r2, #0
 8002704:	705a      	strb	r2, [r3, #1]
			CLOSE_ALL;
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002708:	2100      	movs	r1, #0
 800270a:	0018      	movs	r0, r3
 800270c:	f003 fc8e 	bl	800602c <HAL_TIM_PWM_Stop>
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002712:	2104      	movs	r1, #4
 8002714:	0018      	movs	r0, r3
 8002716:	f003 fc89 	bl	800602c <HAL_TIM_PWM_Stop>
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800271c:	2108      	movs	r1, #8
 800271e:	0018      	movs	r0, r3
 8002720:	f003 fc84 	bl	800602c <HAL_TIM_PWM_Stop>
 8002724:	23e0      	movs	r3, #224	; 0xe0
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	483b      	ldr	r0, [pc, #236]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800272a:	2200      	movs	r2, #0
 800272c:	0019      	movs	r1, r3
 800272e:	f002 fbb4 	bl	8004e9a <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==0||MFlag.IsAPPMotorOn==false)//button reset, stop outputing
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002734:	2104      	movs	r1, #4
 8002736:	0018      	movs	r0, r3
 8002738:	f002 fb92 	bl	8004e60 <HAL_GPIO_ReadPin>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d006      	beq.n	800274e <HAL_TIM_PeriodElapsedCallback+0xb2>
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002742:	78db      	ldrb	r3, [r3, #3]
 8002744:	2201      	movs	r2, #1
 8002746:	4053      	eors	r3, r2
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d036      	beq.n	80027bc <HAL_TIM_PeriodElapsedCallback+0x120>
			bldc_duty = 10;
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002750:	220a      	movs	r2, #10
 8002752:	701a      	strb	r2, [r3, #0]
			CLOSE_ALL;
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002756:	2100      	movs	r1, #0
 8002758:	0018      	movs	r0, r3
 800275a:	f003 fc67 	bl	800602c <HAL_TIM_PWM_Stop>
 800275e:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002760:	2104      	movs	r1, #4
 8002762:	0018      	movs	r0, r3
 8002764:	f003 fc62 	bl	800602c <HAL_TIM_PWM_Stop>
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800276a:	2108      	movs	r1, #8
 800276c:	0018      	movs	r0, r3
 800276e:	f003 fc5d 	bl	800602c <HAL_TIM_PWM_Stop>
 8002772:	23e0      	movs	r3, #224	; 0xe0
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	4828      	ldr	r0, [pc, #160]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002778:	2200      	movs	r2, #0
 800277a:	0019      	movs	r1, r3
 800277c:	f002 fb8d 	bl	8004e9a <HAL_GPIO_WritePin>
			BLDC_PWM_Handle(bldc_duty);
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff fe83 	bl	8002490 <BLDC_PWM_Handle>
			period1=100;
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 800278c:	2264      	movs	r2, #100	; 0x64
 800278e:	601a      	str	r2, [r3, #0]
			MFlag.IsPWMOutput			= false;
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002792:	2200      	movs	r2, #0
 8002794:	705a      	strb	r2, [r3, #1]
			MFlag.IsSwitchOn			= false;
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
			adc_val.zero_across_flag	= START_UP;
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800279e:	2200      	movs	r2, #0
 80027a0:	755a      	strb	r2, [r3, #21]
			adc_val.commutation_timeout = 0;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	831a      	strh	r2, [r3, #24]
			adc_val.zero_across_count 	= 0;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	82da      	strh	r2, [r3, #22]
			adc_val.speed 				= 0;
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	83da      	strh	r2, [r3, #30]
}
 80027ba:	e019      	b.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x154>
		else if((MFlag.IsAPPMotorOn&&HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==1) && adc_val.zero_across_flag==START_UP)
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80027be:	78db      	ldrb	r3, [r3, #3]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x154>
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027c6:	2104      	movs	r1, #4
 80027c8:	0018      	movs	r0, r3
 80027ca:	f002 fb49 	bl	8004e60 <HAL_GPIO_ReadPin>
 80027ce:	0003      	movs	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10d      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x154>
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027d6:	7d5b      	ldrb	r3, [r3, #21]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x154>
			MFlag.IsPWMOutput			= true;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80027de:	2201      	movs	r2, #1
 80027e0:	705a      	strb	r2, [r3, #1]
			MFlag.IsSwitchOn			= true;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
			BLDC_Driving_test(&adc_val);
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff fd62 	bl	80022b4 <BLDC_Driving_test>
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000360 	.word	0x20000360
 80027fc:	2000023c 	.word	0x2000023c
 8002800:	40002000 	.word	0x40002000
 8002804:	20000234 	.word	0x20000234
 8002808:	48000800 	.word	0x48000800
 800280c:	200003a8 	.word	0x200003a8
 8002810:	20000004 	.word	0x20000004
 8002814:	200002d0 	.word	0x200002d0
 8002818:	48000400 	.word	0x48000400
 800281c:	20000240 	.word	0x20000240

08002820 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_UART_RxCpltCallback+0x1ac>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d000      	beq.n	8002832 <HAL_UART_RxCpltCallback+0x12>
 8002830:	e0c7      	b.n	80029c2 <HAL_UART_RxCpltCallback+0x1a2>
	{
		extern uint8_t cnt;
		rxbuf[cnt] = rxdata;
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	001a      	movs	r2, r3
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800283a:	7819      	ldrb	r1, [r3, #0]
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 800283e:	5499      	strb	r1, [r3, r2]
		const char cat[] = "0X13\r\n"; //APP(A:1) to Controller(C:3)
 8002840:	230c      	movs	r3, #12
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_UART_RxCpltCallback+0x1bc>)
 8002846:	6811      	ldr	r1, [r2, #0]
 8002848:	6019      	str	r1, [r3, #0]
 800284a:	8891      	ldrh	r1, [r2, #4]
 800284c:	8099      	strh	r1, [r3, #4]
 800284e:	7992      	ldrb	r2, [r2, #6]
 8002850:	719a      	strb	r2, [r3, #6]
		cnt=cnt==RX_BUF_NUM?1:cnt+1;
 8002852:	4b5f      	ldr	r3, [pc, #380]	; (80029d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b19      	cmp	r3, #25
 8002858:	d004      	beq.n	8002864 <HAL_UART_RxCpltCallback+0x44>
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_UART_RxCpltCallback+0x1b0>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	e000      	b.n	8002866 <HAL_UART_RxCpltCallback+0x46>
 8002864:	2201      	movs	r2, #1
 8002866:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8002868:	701a      	strb	r2, [r3, #0]

		if(rxdata == 'e')//'\n')
 800286a:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b65      	cmp	r3, #101	; 0x65
 8002870:	d000      	beq.n	8002874 <HAL_UART_RxCpltCallback+0x54>
 8002872:	e0a0      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
		{
			printf("sting:%s\r\n", rxbuf);
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8002876:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <HAL_UART_RxCpltCallback+0x1c0>)
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f006 fd44 	bl	8009308 <iprintf>

			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e007      	b.n	8002898 <HAL_UART_RxCpltCallback+0x78>
				rxbuf[t]=0;
 8002888:	4a53      	ldr	r2, [pc, #332]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	18d3      	adds	r3, r2, r3
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b18      	cmp	r3, #24
 800289c:	ddf4      	ble.n	8002888 <HAL_UART_RxCpltCallback+0x68>
			cnt = 0;
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_UART_RxCpltCallback+0x1b0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]

			if(0 == strcmp((char*) rxbuf,"0x00"))
 80028a4:	4a4f      	ldr	r2, [pc, #316]	; (80029e4 <HAL_UART_RxCpltCallback+0x1c4>)
 80028a6:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fd fc2c 	bl	8000108 <strcmp>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d104      	bne.n	80028be <HAL_UART_RxCpltCallback+0x9e>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_UART_RxCpltCallback+0x1c8>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f003 f976 	bl	8005ba8 <HAL_TIM_Base_Stop_IT>
 80028bc:	e07b      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp((char*) rxbuf, "0x01"))
 80028be:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_UART_RxCpltCallback+0x1cc>)
 80028c0:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fd fc1f 	bl	8000108 <strcmp>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_UART_RxCpltCallback+0xb8>
			{
				HAL_TIM_Base_Start_IT(&htim6);
 80028ce:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <HAL_UART_RxCpltCallback+0x1c8>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f003 f91d 	bl	8005b10 <HAL_TIM_Base_Start_IT>
 80028d6:	e06e      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp((char*)rxbuf, "0x02"))
 80028d8:	4a45      	ldr	r2, [pc, #276]	; (80029f0 <HAL_UART_RxCpltCallback+0x1d0>)
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 80028dc:	0011      	movs	r1, r2
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc12 	bl	8000108 <strcmp>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d103      	bne.n	80028f0 <HAL_UART_RxCpltCallback+0xd0>
			{
				BT_PWM_handle(TURE);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f001 f9ab 	bl	8003c44 <BT_PWM_handle>
 80028ee:	e062      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp(cat, "0x03"))
 80028f0:	4a40      	ldr	r2, [pc, #256]	; (80029f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80028f2:	230c      	movs	r3, #12
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	0011      	movs	r1, r2
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fd fc05 	bl	8000108 <strcmp>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d103      	bne.n	800290a <HAL_UART_RxCpltCallback+0xea>
			{
				BT_PWM_handle(FALSE);
 8002902:	2000      	movs	r0, #0
 8002904:	f001 f99e 	bl	8003c44 <BT_PWM_handle>
 8002908:	e055      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp(cat, "0x04"))
 800290a:	4a3b      	ldr	r2, [pc, #236]	; (80029f8 <HAL_UART_RxCpltCallback+0x1d8>)
 800290c:	230c      	movs	r3, #12
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f7fd fbf8 	bl	8000108 <strcmp>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d10f      	bne.n	800293c <HAL_UART_RxCpltCallback+0x11c>
			{
				htim1.Instance->CCR1++;
 800291c:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_UART_RxCpltCallback+0x1dc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	3201      	adds	r2, #1
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
				htim1.Instance->CCR2++;
 8002926:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_UART_RxCpltCallback+0x1dc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292c:	3201      	adds	r2, #1
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
				htim1.Instance->CCR3++;
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_UART_RxCpltCallback+0x1dc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002936:	3201      	adds	r2, #1
 8002938:	63da      	str	r2, [r3, #60]	; 0x3c
 800293a:	e03c      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp(cat, "0x05"))
 800293c:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <HAL_UART_RxCpltCallback+0x1e0>)
 800293e:	230c      	movs	r3, #12
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f7fd fbdf 	bl	8000108 <strcmp>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d104      	bne.n	8002958 <HAL_UART_RxCpltCallback+0x138>
			{
				TIM14->ARR--;
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_UART_RxCpltCallback+0x1e4>)
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	3a01      	subs	r2, #1
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c
 8002956:	e02e      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp(cat, "0x06"))
 8002958:	4a2b      	ldr	r2, [pc, #172]	; (8002a08 <HAL_UART_RxCpltCallback+0x1e8>)
 800295a:	230c      	movs	r3, #12
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f7fd fbd1 	bl	8000108 <strcmp>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d103      	bne.n	8002972 <HAL_UART_RxCpltCallback+0x152>
			{
				adc_val.zero_across_flag = BEMF_DETECTION;
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <HAL_UART_RxCpltCallback+0x1ec>)
 800296c:	2201      	movs	r2, #1
 800296e:	755a      	strb	r2, [r3, #21]
 8002970:	e021      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp((char*) rxbuf, MotorOn))
 8002972:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <HAL_UART_RxCpltCallback+0x1f0>)
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f7fd fbc5 	bl	8000108 <strcmp>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d107      	bne.n	8002992 <HAL_UART_RxCpltCallback+0x172>
			{
				MFlag.IsAPPMotorOn = true;
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_UART_RxCpltCallback+0x1f4>)
 8002984:	2201      	movs	r2, #1
 8002986:	70da      	strb	r2, [r3, #3]
				printf("Start command correct\n");
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_UART_RxCpltCallback+0x1f8>)
 800298a:	0018      	movs	r0, r3
 800298c:	f006 fd48 	bl	8009420 <puts>
 8002990:	e011      	b.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			}
			else if(0 == strcmp((char*) rxbuf, MotorOff)) // 0X13MOff
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_UART_RxCpltCallback+0x1fc>)
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f7fd fbb5 	bl	8000108 <strcmp>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_UART_RxCpltCallback+0x196>
			{
				printf("Stop command correct\n");
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_UART_RxCpltCallback+0x200>)
 80029a4:	0018      	movs	r0, r3
 80029a6:	f006 fd3b 	bl	8009420 <puts>
				MFlag.IsAPPMotorOn = false;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_UART_RxCpltCallback+0x1f4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	70da      	strb	r2, [r3, #3]
				MFlag.IsPWMOutput	= false;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_UART_RxCpltCallback+0x1f4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	705a      	strb	r2, [r3, #1]
			}

		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 80029b6:	4907      	ldr	r1, [pc, #28]	; (80029d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HAL_UART_RxCpltCallback+0x1ac>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	0018      	movs	r0, r3
 80029be:	f004 fc9b 	bl	80072f8 <HAL_UART_Receive_IT>
	}
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b006      	add	sp, #24
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	20000454 	.word	0x20000454
 80029d0:	20000452 	.word	0x20000452
 80029d4:	20000451 	.word	0x20000451
 80029d8:	20000438 	.word	0x20000438
 80029dc:	0800d22c 	.word	0x0800d22c
 80029e0:	0800d1a0 	.word	0x0800d1a0
 80029e4:	0800d1ac 	.word	0x0800d1ac
 80029e8:	20000360 	.word	0x20000360
 80029ec:	0800d1b4 	.word	0x0800d1b4
 80029f0:	0800d1bc 	.word	0x0800d1bc
 80029f4:	0800d1c4 	.word	0x0800d1c4
 80029f8:	0800d1cc 	.word	0x0800d1cc
 80029fc:	200002d0 	.word	0x200002d0
 8002a00:	0800d1d4 	.word	0x0800d1d4
 8002a04:	40002000 	.word	0x40002000
 8002a08:	0800d1dc 	.word	0x0800d1dc
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	0800d1e4 	.word	0x0800d1e4
 8002a14:	20000234 	.word	0x20000234
 8002a18:	0800d1f0 	.word	0x0800d1f0
 8002a1c:	0800d208 	.word	0x0800d208
 8002a20:	0800d214 	.word	0x0800d214

08002a24 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37us to complete conversion
{											  // The ADC sample time is for all channel, the DMA
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b08b      	sub	sp, #44	; 0x2c
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24
	adc_val = My_ADC_getvalue(adc_buf, &adc_val);
 8002a2c:	4c0d      	ldr	r4, [pc, #52]	; (8002a64 <HAL_ADC_ConvCpltCallback+0x40>)
 8002a2e:	003b      	movs	r3, r7
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <HAL_ADC_ConvCpltCallback+0x40>)
 8002a32:	490d      	ldr	r1, [pc, #52]	; (8002a68 <HAL_ADC_ConvCpltCallback+0x44>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f99b 	bl	8002d70 <My_ADC_getvalue>
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	0020      	movs	r0, r4
 8002a3e:	0019      	movs	r1, r3
 8002a40:	2320      	movs	r3, #32
 8002a42:	001a      	movs	r2, r3
 8002a44:	f005 fdd8 	bl	80085f8 <memcpy>
	adc_val.commutation_delay = (adc_val.speed/10);// 10: since the speed is 5 phase switching time
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_ADC_ConvCpltCallback+0x40>)
 8002a4a:	8bdb      	ldrh	r3, [r3, #30]
 8002a4c:	210a      	movs	r1, #10
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fd fb80 	bl	8000154 <__udivsi3>
 8002a54:	0003      	movs	r3, r0
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <HAL_ADC_ConvCpltCallback+0x40>)
 8002a5a:	831a      	strh	r2, [r3, #24]
	{
//		adc_val.zero_across_flag = BEMF_DETECTION;
//		BLDC_Phase_switching(&adc_val);//The real speed should be read from this function
	}

}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b00b      	add	sp, #44	; 0x2c
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	20000004 	.word	0x20000004
 8002a68:	20000220 	.word	0x20000220

08002a6c <Delay_ms>:

void Delay_ms(uint32_t delay)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	uint32_t tick_start;
	tick_start = HAL_GetTick();
 8002a74:	f001 f9b6 	bl	8003de4 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick()-tick_start)<delay)
 8002a7c:	e000      	b.n	8002a80 <Delay_ms+0x14>
		__NOP();
 8002a7e:	46c0      	nop			; (mov r8, r8)
	while((HAL_GetTick()-tick_start)<delay)
 8002a80:	f001 f9b0 	bl	8003de4 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f6      	bhi.n	8002a7e <Delay_ms+0x12>
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b004      	add	sp, #16
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)//Needs external circuit to pull up/down
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	1dbb      	adds	r3, r7, #6
 8002aa4:	801a      	strh	r2, [r3, #0]

}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	0018      	movs	r0, r3
 8002aba:	230c      	movs	r3, #12
 8002abc:	001a      	movs	r2, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f005 fda3 	bl	800860a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <MX_ADC_Init+0x198>)
 8002ac6:	4a61      	ldr	r2, [pc, #388]	; (8002c4c <MX_ADC_Init+0x19c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <MX_ADC_Init+0x198>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <MX_ADC_Init+0x198>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <MX_ADC_Init+0x198>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002adc:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <MX_ADC_Init+0x198>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ae2:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <MX_ADC_Init+0x198>)
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002ae8:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <MX_ADC_Init+0x198>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002aee:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <MX_ADC_Init+0x198>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002af4:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <MX_ADC_Init+0x198>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002afa:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <MX_ADC_Init+0x198>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b02:	2240      	movs	r2, #64	; 0x40
 8002b04:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b06:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	00d2      	lsls	r2, r2, #3
 8002b0c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 f96a 	bl	8003df8 <HAL_ADC_Init>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002b28:	f7ff fdb2 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	0152      	lsls	r2, r2, #5
 8002b38:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b40:	1d3a      	adds	r2, r7, #4
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b44:	0011      	movs	r1, r2
 8002b46:	0018      	movs	r0, r3
 8002b48:	f001 fb28 	bl	800419c <HAL_ADC_ConfigChannel>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002b50:	f7ff fd9e 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b5a:	1d3a      	adds	r2, r7, #4
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b5e:	0011      	movs	r1, r2
 8002b60:	0018      	movs	r0, r3
 8002b62:	f001 fb1b 	bl	800419c <HAL_ADC_ConfigChannel>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002b6a:	f7ff fd91 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2202      	movs	r2, #2
 8002b72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b74:	1d3a      	adds	r2, r7, #4
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b78:	0011      	movs	r1, r2
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f001 fb0e 	bl	800419c <HAL_ADC_ConfigChannel>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d001      	beq.n	8002b88 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002b84:	f7ff fd84 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b8e:	1d3a      	adds	r2, r7, #4
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <MX_ADC_Init+0x198>)
 8002b92:	0011      	movs	r1, r2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f001 fb01 	bl	800419c <HAL_ADC_ConfigChannel>
 8002b9a:	1e03      	subs	r3, r0, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8002b9e:	f7ff fd77 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ba8:	1d3a      	adds	r2, r7, #4
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <MX_ADC_Init+0x198>)
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f001 faf4 	bl	800419c <HAL_ADC_ConfigChannel>
 8002bb4:	1e03      	subs	r3, r0, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002bb8:	f7ff fd6a 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2205      	movs	r2, #5
 8002bc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002bc2:	1d3a      	adds	r2, r7, #4
 8002bc4:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <MX_ADC_Init+0x198>)
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f001 fae7 	bl	800419c <HAL_ADC_ConfigChannel>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8002bd2:	f7ff fd5d 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2206      	movs	r2, #6
 8002bda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002bdc:	1d3a      	adds	r2, r7, #4
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <MX_ADC_Init+0x198>)
 8002be0:	0011      	movs	r1, r2
 8002be2:	0018      	movs	r0, r3
 8002be4:	f001 fada 	bl	800419c <HAL_ADC_ConfigChannel>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8002bec:	f7ff fd50 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002bf6:	1d3a      	adds	r2, r7, #4
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <MX_ADC_Init+0x198>)
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f001 facd 	bl	800419c <HAL_ADC_ConfigChannel>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8002c06:	f7ff fd43 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c10:	1d3a      	adds	r2, r7, #4
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <MX_ADC_Init+0x198>)
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 fac0 	bl	800419c <HAL_ADC_ConfigChannel>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8002c20:	f7ff fd36 	bl	8002690 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2211      	movs	r2, #17
 8002c28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c2a:	1d3a      	adds	r2, r7, #4
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <MX_ADC_Init+0x198>)
 8002c2e:	0011      	movs	r1, r2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f001 fab3 	bl	800419c <HAL_ADC_ConfigChannel>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8002c3a:	f7ff fd29 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	20000244 	.word	0x20000244
 8002c4c:	40012400 	.word	0x40012400

08002c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	2414      	movs	r4, #20
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	2314      	movs	r3, #20
 8002c60:	001a      	movs	r2, r3
 8002c62:	2100      	movs	r1, #0
 8002c64:	f005 fcd1 	bl	800860a <memset>
  if(adcHandle->Instance==ADC1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_ADC_MspInit+0x10c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d170      	bne.n	8002d54 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0089      	lsls	r1, r1, #2
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	619a      	str	r2, [r3, #24]
 8002c80:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0289      	lsls	r1, r1, #10
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	615a      	str	r2, [r3, #20]
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	02c9      	lsls	r1, r1, #11
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	615a      	str	r2, [r3, #20]
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_ADC_MspInit+0x110>)
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	02db      	lsls	r3, r3, #11
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2203      	movs	r2, #3
 8002cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	193a      	adds	r2, r7, r4
 8002cda:	2390      	movs	r3, #144	; 0x90
 8002cdc:	05db      	lsls	r3, r3, #23
 8002cde:	0011      	movs	r1, r2
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f001 ff4d 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	2203      	movs	r2, #3
 8002cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_ADC_MspInit+0x114>)
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	0010      	movs	r0, r2
 8002d00:	f001 ff3e 	bl	8004b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d06:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_ADC_MspInit+0x11c>)
 8002d08:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	00d2      	lsls	r2, r2, #3
 8002d2a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d2e:	2220      	movs	r2, #32
 8002d30:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f001 fd0a 	bl	8004754 <HAL_DMA_Init>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002d44:	f7ff fca4 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_ADC_MspInit+0x118>)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b00b      	add	sp, #44	; 0x2c
 8002d5a:	bd90      	pop	{r4, r7, pc}
 8002d5c:	40012400 	.word	0x40012400
 8002d60:	40021000 	.word	0x40021000
 8002d64:	48000400 	.word	0x48000400
 8002d68:	20000284 	.word	0x20000284
 8002d6c:	40020008 	.word	0x40020008

08002d70 <My_ADC_getvalue>:
//How to get the actual Vdda
//Vrefint_cal is based on 3.3V VDDA, while Vrefint_data is based on actual VDDA
//Vref_int/Vref_cal == 3.3/4095	   Vref_int/Vrefint_data == VDDA/4095 ==> VDDA = 3.3V*Vreint_cal/Vrefint_data
//Then using the actual Vdda to get the actual Vrevint and Voltage of other channels
MADC_Structure My_ADC_getvalue(uint16_t* adc_buf, MADC_Structure * adc_val)// the local array addr is not valid after function done
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	static uint8_t majority_temp = 0;
	static uint8_t majority_count = 0;
//	adc_val->zero_across_threshole = adc_val->vbat*(Vrefint*4095/adc_val->vref_data)/4095*1000;//Why no need to /1000 back
//	adc_val->zero_across_threshole = adc_val->zero_across_threshole/0.126*0.1/1000*12.41;
//	adc_val->zero_across_threshole = adc_val->zero_across_threshole*(&htim1)->Instance->CCR1;
	adc_val->bemf_pa 		= adc_buf[0] / 500>1?1:0; //620 == 0.5V
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	8819      	ldrh	r1, [r3, #0]
 8002d80:	23fa      	movs	r3, #250	; 0xfa
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	2300      	movs	r3, #0
 8002d86:	4291      	cmp	r1, r2
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	701a      	strb	r2, [r3, #0]
	adc_val->bemf_pb 		= adc_buf[1] / 500>1?1:0;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3302      	adds	r3, #2
 8002d96:	8819      	ldrh	r1, [r3, #0]
 8002d98:	23fa      	movs	r3, #250	; 0xfa
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4291      	cmp	r1, r2
 8002da0:	415b      	adcs	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	001a      	movs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	705a      	strb	r2, [r3, #1]
	adc_val->bemf_pc 		= adc_buf[2] / 500>1?1:0;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3304      	adds	r3, #4
 8002dae:	8819      	ldrh	r1, [r3, #0]
 8002db0:	23fa      	movs	r3, #250	; 0xfa
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	2300      	movs	r3, #0
 8002db6:	4291      	cmp	r1, r2
 8002db8:	415b      	adcs	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	709a      	strb	r2, [r3, #2]
	adc_val->vbat 			= adc_buf[3];
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	88da      	ldrh	r2, [r3, #6]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	81da      	strh	r2, [r3, #14]
/*	adc_val->ia				= adc_buf[4];
	adc_val->ib				= adc_buf[5];
	adc_val->isum			= adc_buf[6];
	adc_val->isum_filtered 	= adc_buf[7];*/
	adc_val->bemf_mid		= adc_buf[8];
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	8a1a      	ldrh	r2, [r3, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	809a      	strh	r2, [r3, #4]
	adc_val->vref_data 		= adc_buf[9];
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	8a5a      	ldrh	r2, [r3, #18]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	821a      	strh	r2, [r3, #16]


	adc_val->bemf_last = adc_val->bemf_now;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7c9a      	ldrb	r2, [r3, #18]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	74da      	strb	r2, [r3, #19]
	adc_val->bemf_now  = adc_val->bemf_pa * 4 + adc_val->bemf_pb * 2 + adc_val->bemf_pc * 1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	7852      	ldrb	r2, [r2, #1]
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	18db      	adds	r3, r3, r3
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	789b      	ldrb	r3, [r3, #2]
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	749a      	strb	r2, [r3, #18]


	if(majority_count==MAJORITY_CONST)//
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <My_ADC_getvalue+0x114>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d10d      	bne.n	8002e24 <My_ADC_getvalue+0xb4>
	{
		majority_count = 0;
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <My_ADC_getvalue+0x114>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
		adc_val->bemf_next = majority_temp>=MAJORITY_CONST/2? adc_val->bemf_now : 0;//Set the next hall
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <My_ADC_getvalue+0x118>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <My_ADC_getvalue+0xac>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7c9a      	ldrb	r2, [r3, #18]
 8002e1a:	e000      	b.n	8002e1e <My_ADC_getvalue+0xae>
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	751a      	strb	r2, [r3, #20]
 8002e22:	e005      	b.n	8002e30 <My_ADC_getvalue+0xc0>
	}
	else
	{
		majority_count++;
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <My_ADC_getvalue+0x114>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <My_ADC_getvalue+0x114>)
 8002e2e:	701a      	strb	r2, [r3, #0]
	}
	if((adc_val->bemf_now==adc_val->bemf_last)&&adc_val->bemf_last!=0)//Zero_accross Should allow 1 or 2 "0" in a sequence
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7c9a      	ldrb	r2, [r3, #18]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7cdb      	ldrb	r3, [r3, #19]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d117      	bne.n	8002e6c <My_ADC_getvalue+0xfc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7cdb      	ldrb	r3, [r3, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <My_ADC_getvalue+0xfc>
	{
		majority_temp++;
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <My_ADC_getvalue+0x118>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <My_ADC_getvalue+0x118>)
 8002e4e:	701a      	strb	r2, [r3, #0]
		adc_val->zero_across_count = adc_val->zero_across_count<65500? adc_val->zero_across_count+1: adc_val->zero_across_count;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8adb      	ldrh	r3, [r3, #22]
 8002e54:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <My_ADC_getvalue+0x11c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d804      	bhi.n	8002e64 <My_ADC_getvalue+0xf4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8adb      	ldrh	r3, [r3, #22]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	e001      	b.n	8002e68 <My_ADC_getvalue+0xf8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8adb      	ldrh	r3, [r3, #22]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	82d3      	strh	r3, [r2, #22]
	}
	return *adc_val;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0010      	movs	r0, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	2320      	movs	r3, #32
 8002e76:	001a      	movs	r2, r3
 8002e78:	f005 fbbe 	bl	80085f8 <memcpy>
}
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200002c8 	.word	0x200002c8
 8002e88:	200002c9 	.word	0x200002c9
 8002e8c:	0000ffdb 	.word	0x0000ffdb

08002e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_DMA_Init+0x38>)
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_DMA_Init+0x38>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	615a      	str	r2, [r3, #20]
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_DMA_Init+0x38>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2009      	movs	r0, #9
 8002eb4:	f001 fc1c 	bl	80046f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002eb8:	2009      	movs	r0, #9
 8002eba:	f001 fc2e 	bl	800471a <HAL_NVIC_EnableIRQ>

}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021000 	.word	0x40021000

08002ecc <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b08b      	sub	sp, #44	; 0x2c
 8002ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed2:	2414      	movs	r4, #20
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	2314      	movs	r3, #20
 8002eda:	001a      	movs	r2, r3
 8002edc:	2100      	movs	r1, #0
 8002ede:	f005 fb94 	bl	800860a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee2:	4bab      	ldr	r3, [pc, #684]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	4baa      	ldr	r3, [pc, #680]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0309      	lsls	r1, r1, #12
 8002eec:	430a      	orrs	r2, r1
 8002eee:	615a      	str	r2, [r3, #20]
 8002ef0:	4ba7      	ldr	r3, [pc, #668]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	031b      	lsls	r3, r3, #12
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002efe:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	4ba3      	ldr	r3, [pc, #652]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	03c9      	lsls	r1, r1, #15
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	615a      	str	r2, [r3, #20]
 8002f0c:	4ba0      	ldr	r3, [pc, #640]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	03db      	lsls	r3, r3, #15
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	4b9d      	ldr	r3, [pc, #628]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	4b9c      	ldr	r3, [pc, #624]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	0289      	lsls	r1, r1, #10
 8002f24:	430a      	orrs	r2, r1
 8002f26:	615a      	str	r2, [r3, #20]
 8002f28:	4b99      	ldr	r3, [pc, #612]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	4b96      	ldr	r3, [pc, #600]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	4b95      	ldr	r3, [pc, #596]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	02c9      	lsls	r1, r1, #11
 8002f40:	430a      	orrs	r2, r1
 8002f42:	615a      	str	r2, [r3, #20]
 8002f44:	4b92      	ldr	r3, [pc, #584]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	02db      	lsls	r3, r3, #11
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f52:	4b8f      	ldr	r3, [pc, #572]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	4b8e      	ldr	r3, [pc, #568]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0349      	lsls	r1, r1, #13
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	615a      	str	r2, [r3, #20]
 8002f60:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <MX_GPIO_Init+0x2c4>)
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	035b      	lsls	r3, r3, #13
 8002f68:	4013      	ands	r3, r2
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10
 8002f6e:	4989      	ldr	r1, [pc, #548]	; (8003194 <MX_GPIO_Init+0x2c8>)
 8002f70:	4b89      	ldr	r3, [pc, #548]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 ff90 	bl	8004e9a <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002f7a:	4b87      	ldr	r3, [pc, #540]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2102      	movs	r1, #2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f001 ff8a 	bl	8004e9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002f86:	4985      	ldr	r1, [pc, #532]	; (800319c <MX_GPIO_Init+0x2d0>)
 8002f88:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <MX_GPIO_Init+0x2d4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f001 ff84 	bl	8004e9a <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	0219      	lsls	r1, r3, #8
 8002f96:	2390      	movs	r3, #144	; 0x90
 8002f98:	05db      	lsls	r3, r3, #23
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f001 ff7c 	bl	8004e9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	01d2      	lsls	r2, r2, #7
 8002fa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	2203      	movs	r2, #3
 8002fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	4a77      	ldr	r2, [pc, #476]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f001 fddf 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fc2:	0021      	movs	r1, r4
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	0212      	lsls	r2, r2, #8
 8002fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2288      	movs	r2, #136	; 0x88
 8002fd0:	0352      	lsls	r2, r2, #13
 8002fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	000c      	movs	r4, r1
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	f001 fdcc 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2243      	movs	r2, #67	; 0x43
 8002fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	4a69      	ldr	r2, [pc, #420]	; (80031a4 <MX_GPIO_Init+0x2d8>)
 8002ffe:	0019      	movs	r1, r3
 8003000:	0010      	movs	r0, r2
 8003002:	f001 fdbd 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC5 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 8003006:	193b      	adds	r3, r7, r4
 8003008:	4a67      	ldr	r2, [pc, #412]	; (80031a8 <MX_GPIO_Init+0x2dc>)
 800300a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300c:	193b      	adds	r3, r7, r4
 800300e:	2201      	movs	r2, #1
 8003010:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	193b      	adds	r3, r7, r4
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	193b      	adds	r3, r7, r4
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301e:	193b      	adds	r3, r7, r4
 8003020:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f001 fdab 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800302a:	193b      	adds	r3, r7, r4
 800302c:	2202      	movs	r2, #2
 800302e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2201      	movs	r2, #1
 8003034:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2201      	movs	r2, #1
 800303a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003042:	193b      	adds	r3, r7, r4
 8003044:	4a54      	ldr	r2, [pc, #336]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8003046:	0019      	movs	r1, r3
 8003048:	0010      	movs	r0, r2
 800304a:	f001 fd99 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800304e:	193b      	adds	r3, r7, r4
 8003050:	2204      	movs	r2, #4
 8003052:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003054:	193b      	adds	r3, r7, r4
 8003056:	2200      	movs	r2, #0
 8003058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003060:	193b      	adds	r3, r7, r4
 8003062:	4a4d      	ldr	r2, [pc, #308]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8003064:	0019      	movs	r1, r3
 8003066:	0010      	movs	r0, r2
 8003068:	f001 fd8a 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2208      	movs	r2, #8
 8003070:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003072:	193b      	adds	r3, r7, r4
 8003074:	2201      	movs	r2, #1
 8003076:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003078:	193b      	adds	r3, r7, r4
 800307a:	2202      	movs	r2, #2
 800307c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003084:	193b      	adds	r3, r7, r4
 8003086:	4a44      	ldr	r2, [pc, #272]	; (8003198 <MX_GPIO_Init+0x2cc>)
 8003088:	0019      	movs	r1, r3
 800308a:	0010      	movs	r0, r2
 800308c:	f001 fd78 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8003090:	0021      	movs	r1, r4
 8003092:	187b      	adds	r3, r7, r1
 8003094:	22b0      	movs	r2, #176	; 0xb0
 8003096:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003098:	187b      	adds	r3, r7, r1
 800309a:	2288      	movs	r2, #136	; 0x88
 800309c:	0352      	lsls	r2, r2, #13
 800309e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	000c      	movs	r4, r1
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	4a3e      	ldr	r2, [pc, #248]	; (80031a4 <MX_GPIO_Init+0x2d8>)
 80030ac:	0019      	movs	r1, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	f001 fd66 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	4a39      	ldr	r2, [pc, #228]	; (800319c <MX_GPIO_Init+0x2d0>)
 80030b8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	2201      	movs	r2, #1
 80030be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	4a34      	ldr	r2, [pc, #208]	; (80031a0 <MX_GPIO_Init+0x2d4>)
 80030d0:	0019      	movs	r1, r3
 80030d2:	0010      	movs	r0, r2
 80030d4:	f001 fd54 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	22c0      	movs	r2, #192	; 0xc0
 80030dc:	0152      	lsls	r2, r2, #5
 80030de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	2203      	movs	r2, #3
 80030e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	193b      	adds	r3, r7, r4
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	193a      	adds	r2, r7, r4
 80030ee:	2390      	movs	r3, #144	; 0x90
 80030f0:	05db      	lsls	r3, r3, #23
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f001 fd43 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030fa:	0021      	movs	r1, r4
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	0212      	lsls	r2, r2, #8
 8003102:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003104:	000c      	movs	r4, r1
 8003106:	193b      	adds	r3, r7, r4
 8003108:	2201      	movs	r2, #1
 800310a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	193b      	adds	r3, r7, r4
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	193b      	adds	r3, r7, r4
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003118:	193a      	adds	r2, r7, r4
 800311a:	2390      	movs	r3, #144	; 0x90
 800311c:	05db      	lsls	r3, r3, #23
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f001 fd2d 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003126:	0021      	movs	r1, r4
 8003128:	187b      	adds	r3, r7, r1
 800312a:	2204      	movs	r2, #4
 800312c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312e:	187b      	adds	r3, r7, r1
 8003130:	2288      	movs	r2, #136	; 0x88
 8003132:	0352      	lsls	r2, r2, #13
 8003134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313c:	000c      	movs	r4, r1
 800313e:	187b      	adds	r3, r7, r1
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <MX_GPIO_Init+0x2e0>)
 8003142:	0019      	movs	r1, r3
 8003144:	0010      	movs	r0, r2
 8003146:	f001 fd1b 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800314a:	0021      	movs	r1, r4
 800314c:	187b      	adds	r3, r7, r1
 800314e:	22c0      	movs	r2, #192	; 0xc0
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003154:	187b      	adds	r3, r7, r1
 8003156:	2212      	movs	r2, #18
 8003158:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	187b      	adds	r3, r7, r1
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003160:	187b      	adds	r3, r7, r1
 8003162:	2203      	movs	r2, #3
 8003164:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2201      	movs	r2, #1
 800316a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	187b      	adds	r3, r7, r1
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <MX_GPIO_Init+0x2d4>)
 8003170:	0019      	movs	r1, r3
 8003172:	0010      	movs	r0, r2
 8003174:	f001 fd04 	bl	8004b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2103      	movs	r1, #3
 800317c:	2006      	movs	r0, #6
 800317e:	f001 fab7 	bl	80046f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003182:	2006      	movs	r0, #6
 8003184:	f001 fac9 	bl	800471a <HAL_NVIC_EnableIRQ>

}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b00b      	add	sp, #44	; 0x2c
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	00001c29 	.word	0x00001c29
 8003198:	48000800 	.word	0x48000800
 800319c:	0000fc04 	.word	0x0000fc04
 80031a0:	48000400 	.word	0x48000400
 80031a4:	48001400 	.word	0x48001400
 80031a8:	00001c21 	.word	0x00001c21
 80031ac:	48000c00 	.word	0x48000c00

080031b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_MspInit+0x44>)
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_MspInit+0x44>)
 80031bc:	2101      	movs	r1, #1
 80031be:	430a      	orrs	r2, r1
 80031c0:	619a      	str	r2, [r3, #24]
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_MspInit+0x44>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2201      	movs	r2, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_MspInit+0x44>)
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_MspInit+0x44>)
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	0549      	lsls	r1, r1, #21
 80031d8:	430a      	orrs	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_MspInit+0x44>)
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	4013      	ands	r3, r2
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	40021000 	.word	0x40021000

080031f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <NMI_Handler+0x4>

080031fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <HardFault_Handler+0x4>

08003204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321c:	f000 fdd0 	bl	8003dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800322a:	2004      	movs	r0, #4
 800322c:	f001 fe6e 	bl	8004f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <DMA1_Channel1_IRQHandler+0x14>)
 800323e:	0018      	movs	r0, r3
 8003240:	f001 fbb3 	bl	80049aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000284 	.word	0x20000284

08003250 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <TIM6_IRQHandler+0x14>)
 8003256:	0018      	movs	r0, r3
 8003258:	f002 ff64 	bl	8006124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000360 	.word	0x20000360

08003268 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <TIM14_IRQHandler+0x14>)
 800326e:	0018      	movs	r0, r3
 8003270:	f002 ff58 	bl	8006124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	200003a8 	.word	0x200003a8

08003280 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <TIM15_IRQHandler+0x14>)
 8003286:	0018      	movs	r0, r3
 8003288:	f002 ff4c 	bl	8006124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	200003f0 	.word	0x200003f0

08003298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <USART1_IRQHandler+0x14>)
 800329e:	0018      	movs	r0, r3
 80032a0:	f004 f882 	bl	80073a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000454 	.word	0x20000454

080032b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  return 1;
 80032b4:	2301      	movs	r3, #1
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_kill>:

int _kill(int pid, int sig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032c6:	f005 f96d 	bl	80085a4 <__errno>
 80032ca:	0003      	movs	r3, r0
 80032cc:	2216      	movs	r2, #22
 80032ce:	601a      	str	r2, [r3, #0]
  return -1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	425b      	negs	r3, r3
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <_exit>:

void _exit (int status)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032e4:	2301      	movs	r3, #1
 80032e6:	425a      	negs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff ffe5 	bl	80032bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80032f2:	e7fe      	b.n	80032f2 <_exit+0x16>

080032f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e00a      	b.n	800331c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003306:	e000      	b.n	800330a <_read+0x16>
 8003308:	bf00      	nop
 800330a:	0001      	movs	r1, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	60ba      	str	r2, [r7, #8]
 8003312:	b2ca      	uxtb	r2, r1
 8003314:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3301      	adds	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	dbf0      	blt.n	8003306 <_read+0x12>
  }

  return len;
 8003324:	687b      	ldr	r3, [r7, #4]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b006      	add	sp, #24
 800332c:	bd80      	pop	{r7, pc}

0800332e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e009      	b.n	8003354 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	60ba      	str	r2, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	0018      	movs	r0, r3
 800334a:	f7ff f98d 	bl	8002668 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3301      	adds	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	dbf1      	blt.n	8003340 <_write+0x12>
  }
  return len;
 800335c:	687b      	ldr	r3, [r7, #4]
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b006      	add	sp, #24
 8003364:	bd80      	pop	{r7, pc}

08003366 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800336e:	2301      	movs	r3, #1
 8003370:	425b      	negs	r3, r3
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b002      	add	sp, #8
 8003378:	bd80      	pop	{r7, pc}

0800337a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0192      	lsls	r2, r2, #6
 800338a:	605a      	str	r2, [r3, #4]
  return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}

08003396 <_isatty>:

int _isatty(int file)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800339e:	2301      	movs	r3, #1
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <_sbrk+0x5c>)
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <_sbrk+0x60>)
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <_sbrk+0x64>)
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <_sbrk+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	18d3      	adds	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d207      	bcs.n	8003400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f0:	f005 f8d8 	bl	80085a4 <__errno>
 80033f4:	0003      	movs	r3, r0
 80033f6:	220c      	movs	r2, #12
 80033f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	425b      	negs	r3, r3
 80033fe:	e009      	b.n	8003414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	18d2      	adds	r2, r2, r3
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <_sbrk+0x64>)
 8003410:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b006      	add	sp, #24
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20002000 	.word	0x20002000
 8003420:	00000400 	.word	0x00000400
 8003424:	200002cc 	.word	0x200002cc
 8003428:	200004f8 	.word	0x200004f8

0800342c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b09a      	sub	sp, #104	; 0x68
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343e:	2358      	movs	r3, #88	; 0x58
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	0018      	movs	r0, r3
 8003444:	2310      	movs	r3, #16
 8003446:	001a      	movs	r2, r3
 8003448:	2100      	movs	r1, #0
 800344a:	f005 f8de 	bl	800860a <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800344e:	2344      	movs	r3, #68	; 0x44
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	0018      	movs	r0, r3
 8003454:	2314      	movs	r3, #20
 8003456:	001a      	movs	r2, r3
 8003458:	2100      	movs	r1, #0
 800345a:	f005 f8d6 	bl	800860a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800345e:	233c      	movs	r3, #60	; 0x3c
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	0018      	movs	r0, r3
 8003464:	2308      	movs	r3, #8
 8003466:	001a      	movs	r2, r3
 8003468:	2100      	movs	r1, #0
 800346a:	f005 f8ce 	bl	800860a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800346e:	2320      	movs	r3, #32
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	0018      	movs	r0, r3
 8003474:	231c      	movs	r3, #28
 8003476:	001a      	movs	r2, r3
 8003478:	2100      	movs	r1, #0
 800347a:	f005 f8c6 	bl	800860a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800347e:	003b      	movs	r3, r7
 8003480:	0018      	movs	r0, r3
 8003482:	2320      	movs	r3, #32
 8003484:	001a      	movs	r2, r3
 8003486:	2100      	movs	r1, #0
 8003488:	f005 f8bf 	bl	800860a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800348c:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <MX_TIM1_Init+0x20c>)
 800348e:	4a6e      	ldr	r2, [pc, #440]	; (8003648 <MX_TIM1_Init+0x210>)
 8003490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8003492:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003494:	2210      	movs	r2, #16
 8003496:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <MX_TIM1_Init+0x20c>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800349e:	4b69      	ldr	r3, [pc, #420]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034a0:	2263      	movs	r2, #99	; 0x63
 80034a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a4:	4b67      	ldr	r3, [pc, #412]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b0:	4b64      	ldr	r3, [pc, #400]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034b8:	0018      	movs	r0, r3
 80034ba:	f002 fa6f 	bl	800599c <HAL_TIM_Base_Init>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80034c2:	f7ff f8e5 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c6:	2158      	movs	r1, #88	; 0x58
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	0152      	lsls	r2, r2, #5
 80034ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034d0:	187a      	adds	r2, r7, r1
 80034d2:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034d4:	0011      	movs	r1, r2
 80034d6:	0018      	movs	r0, r3
 80034d8:	f003 f858 	bl	800658c <HAL_TIM_ConfigClockSource>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80034e0:	f7ff f8d6 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034e4:	4b57      	ldr	r3, [pc, #348]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034e6:	0018      	movs	r0, r3
 80034e8:	f002 fc96 	bl	8005e18 <HAL_TIM_PWM_Init>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80034f0:	f7ff f8ce 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <MX_TIM1_Init+0x20c>)
 80034f6:	0018      	movs	r0, r3
 80034f8:	f002 fb84 	bl	8005c04 <HAL_TIM_OC_Init>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003500:	f7ff f8c6 	bl	8002690 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003504:	2144      	movs	r1, #68	; 0x44
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2200      	movs	r2, #0
 8003510:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003512:	187a      	adds	r2, r7, r1
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003516:	0011      	movs	r1, r2
 8003518:	0018      	movs	r0, r3
 800351a:	f003 f90b 	bl	8006734 <HAL_TIM_SlaveConfigSynchro>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003522:	f7ff f8b5 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003526:	213c      	movs	r1, #60	; 0x3c
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2270      	movs	r2, #112	; 0x70
 800352c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003534:	187a      	adds	r2, r7, r1
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f003 fd22 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003544:	f7ff f8a4 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003548:	2120      	movs	r1, #32
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2260      	movs	r2, #96	; 0x60
 800354e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8003550:	187b      	adds	r3, r7, r1
 8003552:	220a      	movs	r2, #10
 8003554:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2200      	movs	r2, #0
 800356c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800356e:	187b      	adds	r3, r7, r1
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003574:	1879      	adds	r1, r7, r1
 8003576:	4b33      	ldr	r3, [pc, #204]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003578:	2200      	movs	r2, #0
 800357a:	0018      	movs	r0, r3
 800357c:	f002 ff40 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003584:	f7ff f884 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003588:	2320      	movs	r3, #32
 800358a:	18f9      	adds	r1, r7, r3
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <MX_TIM1_Init+0x20c>)
 800358e:	2204      	movs	r2, #4
 8003590:	0018      	movs	r0, r3
 8003592:	f002 ff35 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 800359a:	f7ff f879 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800359e:	2320      	movs	r3, #32
 80035a0:	18f9      	adds	r1, r7, r3
 80035a2:	4b28      	ldr	r3, [pc, #160]	; (8003644 <MX_TIM1_Init+0x20c>)
 80035a4:	2208      	movs	r2, #8
 80035a6:	0018      	movs	r0, r3
 80035a8:	f002 ff2a 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80035b0:	f7ff f86e 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80035b4:	2120      	movs	r1, #32
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2230      	movs	r2, #48	; 0x30
 80035ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	220f      	movs	r2, #15
 80035c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035c2:	1879      	adds	r1, r7, r1
 80035c4:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <MX_TIM1_Init+0x20c>)
 80035c6:	220c      	movs	r2, #12
 80035c8:	0018      	movs	r0, r3
 80035ca:	f002 fec1 	bl	8006350 <HAL_TIM_OC_ConfigChannel>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 80035d2:	f7ff f85d 	bl	8002690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035d6:	003b      	movs	r3, r7
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035dc:	003b      	movs	r3, r7
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035e2:	003b      	movs	r3, r7
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035e8:	003b      	movs	r3, r7
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035ee:	003b      	movs	r3, r7
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035f4:	003b      	movs	r3, r7
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0192      	lsls	r2, r2, #6
 80035fa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035fc:	003b      	movs	r3, r7
 80035fe:	2200      	movs	r2, #0
 8003600:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003602:	003a      	movs	r2, r7
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f003 fd13 	bl	8007034 <HAL_TIMEx_ConfigBreakDeadTime>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM1_Init+0x1de>
  {
    Error_Handler();
 8003612:	f7ff f83d 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 8003616:	003b      	movs	r3, r7
 8003618:	22f4      	movs	r2, #244	; 0xf4
 800361a:	32ff      	adds	r2, #255	; 0xff
 800361c:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800361e:	003a      	movs	r2, r7
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f003 fd05 	bl	8007034 <HAL_TIMEx_ConfigBreakDeadTime>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 800362e:	f7ff f82f 	bl	8002690 <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <MX_TIM1_Init+0x20c>)
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f9f9 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b01a      	add	sp, #104	; 0x68
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	200002d0 	.word	0x200002d0
 8003648:	40012c00 	.word	0x40012c00

0800364c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	; 0x38
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003652:	2328      	movs	r3, #40	; 0x28
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	0018      	movs	r0, r3
 8003658:	2310      	movs	r3, #16
 800365a:	001a      	movs	r2, r3
 800365c:	2100      	movs	r1, #0
 800365e:	f004 ffd4 	bl	800860a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003662:	2320      	movs	r3, #32
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	0018      	movs	r0, r3
 8003668:	2308      	movs	r3, #8
 800366a:	001a      	movs	r2, r3
 800366c:	2100      	movs	r1, #0
 800366e:	f004 ffcc 	bl	800860a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	0018      	movs	r0, r3
 8003676:	231c      	movs	r3, #28
 8003678:	001a      	movs	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	f004 ffc5 	bl	800860a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003680:	4b3e      	ldr	r3, [pc, #248]	; (800377c <MX_TIM3_Init+0x130>)
 8003682:	4a3f      	ldr	r2, [pc, #252]	; (8003780 <MX_TIM3_Init+0x134>)
 8003684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <MX_TIM3_Init+0x130>)
 8003688:	220f      	movs	r2, #15
 800368a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <MX_TIM3_Init+0x130>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003692:	4b3a      	ldr	r3, [pc, #232]	; (800377c <MX_TIM3_Init+0x130>)
 8003694:	2263      	movs	r2, #99	; 0x63
 8003696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <MX_TIM3_Init+0x130>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <MX_TIM3_Init+0x130>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036a4:	4b35      	ldr	r3, [pc, #212]	; (800377c <MX_TIM3_Init+0x130>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f002 f978 	bl	800599c <HAL_TIM_Base_Init>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80036b0:	f7fe ffee 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b4:	2128      	movs	r1, #40	; 0x28
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	0152      	lsls	r2, r2, #5
 80036bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <MX_TIM3_Init+0x130>)
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f002 ff61 	bl	800658c <HAL_TIM_ConfigClockSource>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80036ce:	f7fe ffdf 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <MX_TIM3_Init+0x130>)
 80036d4:	0018      	movs	r0, r3
 80036d6:	f002 fb9f 	bl	8005e18 <HAL_TIM_PWM_Init>
 80036da:	1e03      	subs	r3, r0, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80036de:	f7fe ffd7 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e2:	2120      	movs	r1, #32
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036f0:	187a      	adds	r2, r7, r1
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <MX_TIM3_Init+0x130>)
 80036f4:	0011      	movs	r1, r2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f003 fc44 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003700:	f7fe ffc6 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	2260      	movs	r2, #96	; 0x60
 8003708:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800371c:	1d39      	adds	r1, r7, #4
 800371e:	4b17      	ldr	r3, [pc, #92]	; (800377c <MX_TIM3_Init+0x130>)
 8003720:	2200      	movs	r2, #0
 8003722:	0018      	movs	r0, r3
 8003724:	f002 fe6c 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800372c:	f7fe ffb0 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003730:	1d39      	adds	r1, r7, #4
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <MX_TIM3_Init+0x130>)
 8003734:	2204      	movs	r2, #4
 8003736:	0018      	movs	r0, r3
 8003738:	f002 fe62 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 800373c:	1e03      	subs	r3, r0, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003740:	f7fe ffa6 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003744:	1d39      	adds	r1, r7, #4
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <MX_TIM3_Init+0x130>)
 8003748:	2208      	movs	r2, #8
 800374a:	0018      	movs	r0, r3
 800374c:	f002 fe58 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8003754:	f7fe ff9c 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003758:	1d39      	adds	r1, r7, #4
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <MX_TIM3_Init+0x130>)
 800375c:	220c      	movs	r2, #12
 800375e:	0018      	movs	r0, r3
 8003760:	f002 fe4e 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d001      	beq.n	800376c <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8003768:	f7fe ff92 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <MX_TIM3_Init+0x130>)
 800376e:	0018      	movs	r0, r3
 8003770:	f000 f95c 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b00e      	add	sp, #56	; 0x38
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000318 	.word	0x20000318
 8003780:	40000400 	.word	0x40000400

08003784 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <MX_TIM6_Init+0x38>)
 800378a:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <MX_TIM6_Init+0x3c>)
 800378c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4800-1;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <MX_TIM6_Init+0x38>)
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <MX_TIM6_Init+0x40>)
 8003792:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <MX_TIM6_Init+0x38>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <MX_TIM6_Init+0x38>)
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <MX_TIM6_Init+0x44>)
 800379e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <MX_TIM6_Init+0x38>)
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <MX_TIM6_Init+0x38>)
 80037a8:	0018      	movs	r0, r3
 80037aa:	f002 f8f7 	bl	800599c <HAL_TIM_Base_Init>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80037b2:	f7fe ff6d 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000360 	.word	0x20000360
 80037c0:	40001000 	.word	0x40001000
 80037c4:	000012bf 	.word	0x000012bf
 80037c8:	000003e7 	.word	0x000003e7

080037cc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	0018      	movs	r0, r3
 80037d6:	231c      	movs	r3, #28
 80037d8:	001a      	movs	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f004 ff15 	bl	800860a <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <MX_TIM14_Init+0x8c>)
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <MX_TIM14_Init+0x90>)
 80037e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <MX_TIM14_Init+0x8c>)
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <MX_TIM14_Init+0x94>)
 80037ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <MX_TIM14_Init+0x8c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <MX_TIM14_Init+0x8c>)
 80037f4:	2263      	movs	r2, #99	; 0x63
 80037f6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <MX_TIM14_Init+0x8c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <MX_TIM14_Init+0x8c>)
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <MX_TIM14_Init+0x8c>)
 8003806:	0018      	movs	r0, r3
 8003808:	f002 f8c8 	bl	800599c <HAL_TIM_Base_Init>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003810:	f7fe ff3e 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <MX_TIM14_Init+0x8c>)
 8003816:	0018      	movs	r0, r3
 8003818:	f002 f9f4 	bl	8005c04 <HAL_TIM_OC_Init>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003820:	f7fe ff36 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800383c:	1d39      	adds	r1, r7, #4
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_TIM14_Init+0x8c>)
 8003840:	2200      	movs	r2, #0
 8003842:	0018      	movs	r0, r3
 8003844:	f002 fd84 	bl	8006350 <HAL_TIM_OC_ConfigChannel>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800384c:	f7fe ff20 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b008      	add	sp, #32
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200003a8 	.word	0x200003a8
 800385c:	40002000 	.word	0x40002000
 8003860:	000012bf 	.word	0x000012bf

08003864 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800386a:	2308      	movs	r3, #8
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	0018      	movs	r0, r3
 8003870:	2310      	movs	r3, #16
 8003872:	001a      	movs	r2, r3
 8003874:	2100      	movs	r1, #0
 8003876:	f004 fec8 	bl	800860a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800387a:	003b      	movs	r3, r7
 800387c:	0018      	movs	r0, r3
 800387e:	2308      	movs	r3, #8
 8003880:	001a      	movs	r2, r3
 8003882:	2100      	movs	r1, #0
 8003884:	f004 fec1 	bl	800860a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <MX_TIM15_Init+0xa4>)
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <MX_TIM15_Init+0xa8>)
 800388c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <MX_TIM15_Init+0xa4>)
 8003890:	222f      	movs	r2, #47	; 0x2f
 8003892:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <MX_TIM15_Init+0xa4>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <MX_TIM15_Init+0xa4>)
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <MX_TIM15_Init+0xac>)
 800389e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <MX_TIM15_Init+0xa4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <MX_TIM15_Init+0xa4>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_TIM15_Init+0xa4>)
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <MX_TIM15_Init+0xa4>)
 80038b4:	0018      	movs	r0, r3
 80038b6:	f002 f871 	bl	800599c <HAL_TIM_Base_Init>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80038be:	f7fe fee7 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c2:	2108      	movs	r1, #8
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0152      	lsls	r2, r2, #5
 80038ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80038cc:	187a      	adds	r2, r7, r1
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <MX_TIM15_Init+0xa4>)
 80038d0:	0011      	movs	r1, r2
 80038d2:	0018      	movs	r0, r3
 80038d4:	f002 fe5a 	bl	800658c <HAL_TIM_ConfigClockSource>
 80038d8:	1e03      	subs	r3, r0, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80038dc:	f7fe fed8 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e0:	003b      	movs	r3, r7
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e6:	003b      	movs	r3, r7
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80038ec:	003a      	movs	r2, r7
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <MX_TIM15_Init+0xa4>)
 80038f0:	0011      	movs	r1, r2
 80038f2:	0018      	movs	r0, r3
 80038f4:	f003 fb46 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80038fc:	f7fe fec8 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b006      	add	sp, #24
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200003f0 	.word	0x200003f0
 800390c:	40014000 	.word	0x40014000
 8003910:	0000ffff 	.word	0x0000ffff

08003914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <HAL_TIM_Base_MspInit+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003926:	4b3c      	ldr	r3, [pc, #240]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	0109      	lsls	r1, r1, #4
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	4013      	ands	r3, r2
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003942:	e062      	b.n	8003a0a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a34      	ldr	r2, [pc, #208]	; (8003a1c <HAL_TIM_Base_MspInit+0x108>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10c      	bne.n	8003968 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800394e:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003954:	2102      	movs	r1, #2
 8003956:	430a      	orrs	r2, r1
 8003958:	61da      	str	r2, [r3, #28]
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2202      	movs	r2, #2
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	69bb      	ldr	r3, [r7, #24]
}
 8003966:	e050      	b.n	8003a0a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM6)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <HAL_TIM_Base_MspInit+0x10c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d114      	bne.n	800399c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003978:	2110      	movs	r1, #16
 800397a:	430a      	orrs	r2, r1
 800397c:	61da      	str	r2, [r3, #28]
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	2210      	movs	r2, #16
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2101      	movs	r1, #1
 800398e:	2011      	movs	r0, #17
 8003990:	f000 feae 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003994:	2011      	movs	r0, #17
 8003996:	f000 fec0 	bl	800471a <HAL_NVIC_EnableIRQ>
}
 800399a:	e036      	b.n	8003a0a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM14)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <HAL_TIM_Base_MspInit+0x110>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d116      	bne.n	80039d4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0049      	lsls	r1, r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	61da      	str	r2, [r3, #28]
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2101      	movs	r1, #1
 80039c6:	2013      	movs	r0, #19
 80039c8:	f000 fe92 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80039cc:	2013      	movs	r0, #19
 80039ce:	f000 fea4 	bl	800471a <HAL_NVIC_EnableIRQ>
}
 80039d2:	e01a      	b.n	8003a0a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM15)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <HAL_TIM_Base_MspInit+0x114>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d115      	bne.n	8003a0a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0249      	lsls	r1, r1, #9
 80039e8:	430a      	orrs	r2, r1
 80039ea:	619a      	str	r2, [r3, #24]
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_TIM_Base_MspInit+0x104>)
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	025b      	lsls	r3, r3, #9
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2101      	movs	r1, #1
 80039fe:	2014      	movs	r0, #20
 8003a00:	f000 fe76 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003a04:	2014      	movs	r0, #20
 8003a06:	f000 fe88 	bl	800471a <HAL_NVIC_EnableIRQ>
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b008      	add	sp, #32
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40001000 	.word	0x40001000
 8003a24:	40002000 	.word	0x40002000
 8003a28:	40014000 	.word	0x40014000

08003a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b08b      	sub	sp, #44	; 0x2c
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	2414      	movs	r4, #20
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	0018      	movs	r0, r3
 8003a3a:	2314      	movs	r3, #20
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f004 fde3 	bl	800860a <memset>
  if(timHandle->Instance==TIM1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a37      	ldr	r2, [pc, #220]	; (8003b28 <HAL_TIM_MspPostInit+0xfc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d126      	bne.n	8003a9c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003a54:	2180      	movs	r1, #128	; 0x80
 8003a56:	0289      	lsls	r1, r1, #10
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	615a      	str	r2, [r3, #20]
 8003a5c:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	029b      	lsls	r3, r3, #10
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	22e0      	movs	r2, #224	; 0xe0
 8003a6e:	00d2      	lsls	r2, r2, #3
 8003a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	0021      	movs	r1, r4
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	2202      	movs	r2, #2
 8003a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2202      	movs	r2, #2
 8003a8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8c:	187a      	adds	r2, r7, r1
 8003a8e:	2390      	movs	r3, #144	; 0x90
 8003a90:	05db      	lsls	r3, r3, #23
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f001 f873 	bl	8004b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a9a:	e041      	b.n	8003b20 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_TIM_MspPostInit+0x104>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d13c      	bne.n	8003b20 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa6:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	0309      	lsls	r1, r1, #12
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	031b      	lsls	r3, r3, #12
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003ac2:	2114      	movs	r1, #20
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	22b0      	movs	r2, #176	; 0xb0
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	000c      	movs	r4, r1
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	193b      	adds	r3, r7, r4
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	2200      	movs	r2, #0
 8003ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <HAL_TIM_MspPostInit+0x108>)
 8003aea:	0019      	movs	r1, r3
 8003aec:	0010      	movs	r0, r2
 8003aee:	f001 f847 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003af2:	0021      	movs	r1, r4
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	0052      	lsls	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2202      	movs	r2, #2
 8003b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2201      	movs	r2, #1
 8003b12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <HAL_TIM_MspPostInit+0x108>)
 8003b18:	0019      	movs	r1, r3
 8003b1a:	0010      	movs	r0, r2
 8003b1c:	f001 f830 	bl	8004b80 <HAL_GPIO_Init>
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b00b      	add	sp, #44	; 0x2c
 8003b26:	bd90      	pop	{r4, r7, pc}
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40000400 	.word	0x40000400
 8003b34:	48000800 	.word	0x48000800

08003b38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b3c:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <MX_USART1_UART_Init+0x5c>)
 8003b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b44:	22e1      	movs	r2, #225	; 0xe1
 8003b46:	0252      	lsls	r2, r2, #9
 8003b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b5e:	220c      	movs	r2, #12
 8003b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <MX_USART1_UART_Init+0x58>)
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f003 fac7 	bl	8007110 <HAL_UART_Init>
 8003b82:	1e03      	subs	r3, r0, #0
 8003b84:	d001      	beq.n	8003b8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003b86:	f7fe fd83 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000454 	.word	0x20000454
 8003b94:	40013800 	.word	0x40013800

08003b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b08b      	sub	sp, #44	; 0x2c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	2414      	movs	r4, #20
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	2314      	movs	r3, #20
 8003ba8:	001a      	movs	r2, r3
 8003baa:	2100      	movs	r1, #0
 8003bac:	f004 fd2d 	bl	800860a <memset>
  if(uartHandle->Instance==USART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <HAL_UART_MspInit+0xa0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d139      	bne.n	8003c2e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	01c9      	lsls	r1, r1, #7
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd6:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	02c9      	lsls	r1, r1, #11
 8003be0:	430a      	orrs	r2, r1
 8003be2:	615a      	str	r2, [r3, #20]
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	02db      	lsls	r3, r3, #11
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	22c0      	movs	r2, #192	; 0xc0
 8003bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003c16:	0019      	movs	r1, r3
 8003c18:	0010      	movs	r0, r2
 8003c1a:	f000 ffb1 	bl	8004b80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2101      	movs	r1, #1
 8003c22:	201b      	movs	r0, #27
 8003c24:	f000 fd64 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c28:	201b      	movs	r0, #27
 8003c2a:	f000 fd76 	bl	800471a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b00b      	add	sp, #44	; 0x2c
 8003c34:	bd90      	pop	{r4, r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	48000400 	.word	0x48000400

08003c44 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d110      	bne.n	8003c7a <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	dc07      	bgt.n	8003c72 <BT_PWM_handle+0x2e>
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	b25a      	sxtb	r2, r3
 8003c70:	e000      	b.n	8003c74 <BT_PWM_handle+0x30>
 8003c72:	220a      	movs	r2, #10
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	e00f      	b.n	8003c9a <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	dd07      	ble.n	8003c94 <BT_PWM_handle+0x50>
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	b25a      	sxtb	r2, r3
 8003c92:	e000      	b.n	8003c96 <BT_PWM_handle+0x52>
 8003c94:	2200      	movs	r2, #0
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c98:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	569a      	ldrsb	r2, [r3, r2]
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <BT_PWM_handle+0x94>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	569a      	ldrsb	r2, [r3, r2]
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <BT_PWM_handle+0x94>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	569a      	ldrsb	r2, [r3, r2]
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <BT_PWM_handle+0x94>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <BT_PWM_handle+0x90>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	569a      	ldrsb	r2, [r3, r2]
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <BT_PWM_handle+0x94>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	200004dc 	.word	0x200004dc
 8003cd8:	20000318 	.word	0x20000318

08003cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cdc:	480d      	ldr	r0, [pc, #52]	; (8003d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ce0:	f7ff fba4 	bl	800342c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ce6:	490d      	ldr	r1, [pc, #52]	; (8003d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <LoopForever+0xe>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cec:	e002      	b.n	8003cf4 <LoopCopyDataInit>

08003cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf2:	3304      	adds	r3, #4

08003cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf8:	d3f9      	bcc.n	8003cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <LoopForever+0x16>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d00:	e001      	b.n	8003d06 <LoopFillZerobss>

08003d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d04:	3204      	adds	r2, #4

08003d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d08:	d3fb      	bcc.n	8003d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d0a:	f004 fc51 	bl	80085b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d0e:	f7fe fbe5 	bl	80024dc <main>

08003d12 <LoopForever>:

LoopForever:
    b LoopForever
 8003d12:	e7fe      	b.n	8003d12 <LoopForever>
  ldr   r0, =_estack
 8003d14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d1c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003d20:	0800d7bc 	.word	0x0800d7bc
  ldr r2, =_sbss
 8003d24:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003d28:	200004f4 	.word	0x200004f4

08003d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d2c:	e7fe      	b.n	8003d2c <ADC1_IRQHandler>
	...

08003d30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_Init+0x24>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_Init+0x24>)
 8003d3a:	2110      	movs	r1, #16
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003d40:	2003      	movs	r0, #3
 8003d42:	f000 f809 	bl	8003d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d46:	f7ff fa33 	bl	80031b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	40022000 	.word	0x40022000

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_InitTick+0x5c>)
 8003d62:	681c      	ldr	r4, [r3, #0]
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <HAL_InitTick+0x60>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	0019      	movs	r1, r3
 8003d6a:	23fa      	movs	r3, #250	; 0xfa
 8003d6c:	0098      	lsls	r0, r3, #2
 8003d6e:	f7fc f9f1 	bl	8000154 <__udivsi3>
 8003d72:	0003      	movs	r3, r0
 8003d74:	0019      	movs	r1, r3
 8003d76:	0020      	movs	r0, r4
 8003d78:	f7fc f9ec 	bl	8000154 <__udivsi3>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 fcdb 	bl	800473a <HAL_SYSTICK_Config>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e00f      	b.n	8003dac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d80b      	bhi.n	8003daa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	2301      	movs	r3, #1
 8003d96:	425b      	negs	r3, r3
 8003d98:	2200      	movs	r2, #0
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 fca8 	bl	80046f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_InitTick+0x64>)
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b003      	add	sp, #12
 8003db2:	bd90      	pop	{r4, r7, pc}
 8003db4:	20000024 	.word	0x20000024
 8003db8:	2000002c 	.word	0x2000002c
 8003dbc:	20000028 	.word	0x20000028

08003dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_IncTick+0x1c>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	001a      	movs	r2, r3
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_IncTick+0x20>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	18d2      	adds	r2, r2, r3
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_IncTick+0x20>)
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	2000002c 	.word	0x2000002c
 8003de0:	200004e0 	.word	0x200004e0

08003de4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  return uwTick;
 8003de8:	4b02      	ldr	r3, [pc, #8]	; (8003df4 <HAL_GetTick+0x10>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	200004e0 	.word	0x200004e0

08003df8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e00:	230f      	movs	r3, #15
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e125      	b.n	8004062 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2234      	movs	r2, #52	; 0x34
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7fe ff0e 	bl	8002c50 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	2210      	movs	r2, #16
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d000      	beq.n	8003e40 <HAL_ADC_Init+0x48>
 8003e3e:	e103      	b.n	8004048 <HAL_ADC_Init+0x250>
 8003e40:	230f      	movs	r3, #15
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d000      	beq.n	8003e4c <HAL_ADC_Init+0x54>
 8003e4a:	e0fd      	b.n	8004048 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2204      	movs	r2, #4
 8003e54:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003e56:	d000      	beq.n	8003e5a <HAL_ADC_Init+0x62>
 8003e58:	e0f6      	b.n	8004048 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4a83      	ldr	r2, [pc, #524]	; (800406c <HAL_ADC_Init+0x274>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2202      	movs	r2, #2
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2203      	movs	r2, #3
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d112      	bne.n	8003e9e <HAL_ADC_Init+0xa6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d009      	beq.n	8003e9a <HAL_ADC_Init+0xa2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	401a      	ands	r2, r3
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_Init+0xa6>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_ADC_Init+0xa8>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2218      	movs	r2, #24
 8003eac:	4393      	bics	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	0899      	lsrs	r1, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4964      	ldr	r1, [pc, #400]	; (8004070 <HAL_ADC_Init+0x278>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7e1b      	ldrb	r3, [r3, #24]
 8003ee6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e5b      	ldrb	r3, [r3, #25]
 8003eec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e9b      	ldrb	r3, [r3, #26]
 8003ef4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ef6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d002      	beq.n	8003f06 <HAL_ADC_Init+0x10e>
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	015b      	lsls	r3, r3, #5
 8003f04:	e000      	b.n	8003f08 <HAL_ADC_Init+0x110>
 8003f06:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003f08:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003f0e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_Init+0x124>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	e000      	b.n	8003f1e <HAL_ADC_Init+0x126>
 8003f1c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003f1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2124      	movs	r1, #36	; 0x24
 8003f24:	5c5b      	ldrb	r3, [r3, r1]
 8003f26:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003f28:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7edb      	ldrb	r3, [r3, #27]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d115      	bne.n	8003f64 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7e9b      	ldrb	r3, [r3, #26]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	0252      	lsls	r2, r2, #9
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	e00b      	b.n	8003f64 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	2220      	movs	r2, #32
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	23c2      	movs	r3, #194	; 0xc2
 8003f6a:	33ff      	adds	r3, #255	; 0xff
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d007      	beq.n	8003f80 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68d9      	ldr	r1, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	055b      	lsls	r3, r3, #21
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d017      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d013      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d00f      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d00b      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d007      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d003      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	d112      	bne.n	8003ffa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2107      	movs	r1, #7
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6959      	ldr	r1, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	2207      	movs	r2, #7
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_ADC_Init+0x27c>)
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d10b      	bne.n	8004022 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	2203      	movs	r2, #3
 8004016:	4393      	bics	r3, r2
 8004018:	2201      	movs	r2, #1
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004020:	e01c      	b.n	800405c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	2212      	movs	r2, #18
 8004028:	4393      	bics	r3, r2
 800402a:	2210      	movs	r2, #16
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2201      	movs	r2, #1
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800403e:	230f      	movs	r3, #15
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004046:	e009      	b.n	800405c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	2210      	movs	r2, #16
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004054:	230f      	movs	r3, #15
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800405c:	230f      	movs	r3, #15
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	781b      	ldrb	r3, [r3, #0]
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	fffffefd 	.word	0xfffffefd
 8004070:	fffe0219 	.word	0xfffe0219
 8004074:	833fffe7 	.word	0x833fffe7

08004078 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004084:	2317      	movs	r3, #23
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2204      	movs	r2, #4
 8004094:	4013      	ands	r3, r2
 8004096:	d15e      	bne.n	8004156 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2234      	movs	r2, #52	; 0x34
 800409c:	5c9b      	ldrb	r3, [r3, r2]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_Start_DMA+0x2e>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e05e      	b.n	8004164 <HAL_ADC_Start_DMA+0xec>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2234      	movs	r2, #52	; 0x34
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	7e5b      	ldrb	r3, [r3, #25]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d007      	beq.n	80040c6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80040b6:	2317      	movs	r3, #23
 80040b8:	18fc      	adds	r4, r7, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0018      	movs	r0, r3
 80040be:	f000 f963 	bl	8004388 <ADC_Enable>
 80040c2:	0003      	movs	r3, r0
 80040c4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040c6:	2317      	movs	r3, #23
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d146      	bne.n	800415e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	4a25      	ldr	r2, [pc, #148]	; (800416c <HAL_ADC_Start_DMA+0xf4>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	0052      	lsls	r2, r2, #1
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2234      	movs	r2, #52	; 0x34
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_ADC_Start_DMA+0xf8>)
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_ADC_Start_DMA+0xfc>)
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_ADC_Start_DMA+0x100>)
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	221c      	movs	r2, #28
 800410e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2110      	movs	r1, #16
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3340      	adds	r3, #64	; 0x40
 800413a:	0019      	movs	r1, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f000 fb50 	bl	80047e4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2104      	movs	r1, #4
 8004150:	430a      	orrs	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	e003      	b.n	800415e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004156:	2317      	movs	r3, #23
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2202      	movs	r2, #2
 800415c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800415e:	2317      	movs	r3, #23
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b007      	add	sp, #28
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	fffff0fe 	.word	0xfffff0fe
 8004170:	08004491 	.word	0x08004491
 8004174:	08004545 	.word	0x08004545
 8004178:	08004563 	.word	0x08004563

0800417c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a6:	230f      	movs	r3, #15
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	055b      	lsls	r3, r3, #21
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d011      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0x46>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d00d      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0x46>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d009      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0x46>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d005      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0x46>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d001      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0x46>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2234      	movs	r2, #52	; 0x34
 80041e6:	5c9b      	ldrb	r3, [r3, r2]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x54>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e0bb      	b.n	8004368 <HAL_ADC_ConfigChannel+0x1cc>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2234      	movs	r2, #52	; 0x34
 80041f4:	2101      	movs	r1, #1
 80041f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2204      	movs	r2, #4
 8004200:	4013      	ands	r3, r2
 8004202:	d000      	beq.n	8004206 <HAL_ADC_ConfigChannel+0x6a>
 8004204:	e09f      	b.n	8004346 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a59      	ldr	r2, [pc, #356]	; (8004370 <HAL_ADC_ConfigChannel+0x1d4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d100      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x76>
 8004210:	e077      	b.n	8004302 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	055b      	lsls	r3, r3, #21
 8004230:	429a      	cmp	r2, r3
 8004232:	d037      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d033      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2b02      	cmp	r3, #2
 8004242:	d02f      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	2b03      	cmp	r3, #3
 800424a:	d02b      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	2b04      	cmp	r3, #4
 8004252:	d027      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	2b05      	cmp	r3, #5
 800425a:	d023      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	2b06      	cmp	r3, #6
 8004262:	d01f      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	2b07      	cmp	r3, #7
 800426a:	d01b      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2107      	movs	r1, #7
 8004278:	400b      	ands	r3, r1
 800427a:	429a      	cmp	r2, r3
 800427c:	d012      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2107      	movs	r1, #7
 800428a:	438a      	bics	r2, r1
 800428c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6959      	ldr	r1, [r3, #20]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2207      	movs	r2, #7
 800429a:	401a      	ands	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d003      	beq.n	80042b4 <HAL_ADC_ConfigChannel+0x118>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b11      	cmp	r3, #17
 80042b2:	d152      	bne.n	800435a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <HAL_ADC_ConfigChannel+0x1d8>)
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d102      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x12a>
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	e001      	b.n	80042ca <HAL_ADC_ConfigChannel+0x12e>
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	03db      	lsls	r3, r3, #15
 80042ca:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <HAL_ADC_ConfigChannel+0x1d8>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d140      	bne.n	800435a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_ADC_ConfigChannel+0x1dc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4927      	ldr	r1, [pc, #156]	; (800437c <HAL_ADC_ConfigChannel+0x1e0>)
 80042de:	0018      	movs	r0, r3
 80042e0:	f7fb ff38 	bl	8000154 <__udivsi3>
 80042e4:	0003      	movs	r3, r0
 80042e6:	001a      	movs	r2, r3
 80042e8:	0013      	movs	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042f2:	e002      	b.n	80042fa <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f9      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x158>
 8004300:	e02b      	b.n	800435a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	4099      	lsls	r1, r3
 8004310:	000b      	movs	r3, r1
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	400a      	ands	r2, r1
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b10      	cmp	r3, #16
 8004322:	d003      	beq.n	800432c <HAL_ADC_ConfigChannel+0x190>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b11      	cmp	r3, #17
 800432a:	d116      	bne.n	800435a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_ADC_ConfigChannel+0x1d8>)
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b10      	cmp	r3, #16
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x1a0>
 8004338:	4a11      	ldr	r2, [pc, #68]	; (8004380 <HAL_ADC_ConfigChannel+0x1e4>)
 800433a:	e000      	b.n	800433e <HAL_ADC_ConfigChannel+0x1a2>
 800433c:	4a11      	ldr	r2, [pc, #68]	; (8004384 <HAL_ADC_ConfigChannel+0x1e8>)
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_ADC_ConfigChannel+0x1d8>)
 8004340:	400a      	ands	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e009      	b.n	800435a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	2220      	movs	r2, #32
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004352:	230f      	movs	r3, #15
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2234      	movs	r2, #52	; 0x34
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004362:	230f      	movs	r3, #15
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	781b      	ldrb	r3, [r3, #0]
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}
 8004370:	00001001 	.word	0x00001001
 8004374:	40012708 	.word	0x40012708
 8004378:	20000024 	.word	0x20000024
 800437c:	000f4240 	.word	0x000f4240
 8004380:	ff7fffff 	.word	0xff7fffff
 8004384:	ffbfffff 	.word	0xffbfffff

08004388 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2203      	movs	r2, #3
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d112      	bne.n	80043cc <ADC_Enable+0x44>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2201      	movs	r2, #1
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d009      	beq.n	80043c8 <ADC_Enable+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	401a      	ands	r2, r3
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d101      	bne.n	80043cc <ADC_Enable+0x44>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <ADC_Enable+0x46>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d152      	bne.n	8004478 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <ADC_Enable+0xfc>)
 80043da:	4013      	ands	r3, r2
 80043dc:	d00d      	beq.n	80043fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	2210      	movs	r2, #16
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	2201      	movs	r2, #1
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e03f      	b.n	800447a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800440a:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <ADC_Enable+0x100>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	491f      	ldr	r1, [pc, #124]	; (800448c <ADC_Enable+0x104>)
 8004410:	0018      	movs	r0, r3
 8004412:	f7fb fe9f 	bl	8000154 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800441a:	e002      	b.n	8004422 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3b01      	subs	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f9      	bne.n	800441c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004428:	f7ff fcdc 	bl	8003de4 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004430:	e01b      	b.n	800446a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004432:	f7ff fcd7 	bl	8003de4 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d914      	bls.n	800446a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	2b01      	cmp	r3, #1
 800444c:	d00d      	beq.n	800446a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	2210      	movs	r2, #16
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	2201      	movs	r2, #1
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	2b01      	cmp	r3, #1
 8004476:	d1dc      	bne.n	8004432 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b004      	add	sp, #16
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	80000017 	.word	0x80000017
 8004488:	20000024 	.word	0x20000024
 800448c:	000f4240 	.word	0x000f4240

08004490 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	2250      	movs	r2, #80	; 0x50
 80044a4:	4013      	ands	r3, r2
 80044a6:	d140      	bne.n	800452a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	0092      	lsls	r2, r2, #2
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	23c0      	movs	r3, #192	; 0xc0
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	4013      	ands	r3, r2
 80044c2:	d12d      	bne.n	8004520 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d129      	bne.n	8004520 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2208      	movs	r2, #8
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d122      	bne.n	8004520 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2204      	movs	r2, #4
 80044e2:	4013      	ands	r3, r2
 80044e4:	d110      	bne.n	8004508 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	210c      	movs	r1, #12
 80044f2:	438a      	bics	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4a11      	ldr	r2, [pc, #68]	; (8004540 <ADC_DMAConvCplt+0xb0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	2201      	movs	r2, #1
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
 8004506:	e00b      	b.n	8004520 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	2220      	movs	r2, #32
 800450e:	431a      	orrs	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	2201      	movs	r2, #1
 800451a:	431a      	orrs	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	0018      	movs	r0, r3
 8004524:	f7fe fa7e 	bl	8002a24 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004528:	e005      	b.n	8004536 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	0010      	movs	r0, r2
 8004534:	4798      	blx	r3
}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b004      	add	sp, #16
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	fffffefe 	.word	0xfffffefe

08004544 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff fe11 	bl	800417c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b004      	add	sp, #16
 8004560:	bd80      	pop	{r7, pc}

08004562 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	431a      	orrs	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	2204      	movs	r2, #4
 8004582:	431a      	orrs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff fdfe 	bl	800418c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}

08004598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	0002      	movs	r2, r0
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b7f      	cmp	r3, #127	; 0x7f
 80045aa:	d809      	bhi.n	80045c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ac:	1dfb      	adds	r3, r7, #7
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	001a      	movs	r2, r3
 80045b2:	231f      	movs	r3, #31
 80045b4:	401a      	ands	r2, r3
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <__NVIC_EnableIRQ+0x30>)
 80045b8:	2101      	movs	r1, #1
 80045ba:	4091      	lsls	r1, r2
 80045bc:	000a      	movs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
  }
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000e100 	.word	0xe000e100

080045cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045da:	1dfb      	adds	r3, r7, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b7f      	cmp	r3, #127	; 0x7f
 80045e0:	d828      	bhi.n	8004634 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045e2:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <__NVIC_SetPriority+0xd4>)
 80045e4:	1dfb      	adds	r3, r7, #7
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	33c0      	adds	r3, #192	; 0xc0
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	589b      	ldr	r3, [r3, r2]
 80045f2:	1dfa      	adds	r2, r7, #7
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	0011      	movs	r1, r2
 80045f8:	2203      	movs	r2, #3
 80045fa:	400a      	ands	r2, r1
 80045fc:	00d2      	lsls	r2, r2, #3
 80045fe:	21ff      	movs	r1, #255	; 0xff
 8004600:	4091      	lsls	r1, r2
 8004602:	000a      	movs	r2, r1
 8004604:	43d2      	mvns	r2, r2
 8004606:	401a      	ands	r2, r3
 8004608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	22ff      	movs	r2, #255	; 0xff
 8004610:	401a      	ands	r2, r3
 8004612:	1dfb      	adds	r3, r7, #7
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	0018      	movs	r0, r3
 8004618:	2303      	movs	r3, #3
 800461a:	4003      	ands	r3, r0
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004620:	481f      	ldr	r0, [pc, #124]	; (80046a0 <__NVIC_SetPriority+0xd4>)
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b25b      	sxtb	r3, r3
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	430a      	orrs	r2, r1
 800462c:	33c0      	adds	r3, #192	; 0xc0
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004632:	e031      	b.n	8004698 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004634:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <__NVIC_SetPriority+0xd8>)
 8004636:	1dfb      	adds	r3, r7, #7
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	0019      	movs	r1, r3
 800463c:	230f      	movs	r3, #15
 800463e:	400b      	ands	r3, r1
 8004640:	3b08      	subs	r3, #8
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3306      	adds	r3, #6
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	3304      	adds	r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	1dfa      	adds	r2, r7, #7
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	0011      	movs	r1, r2
 8004654:	2203      	movs	r2, #3
 8004656:	400a      	ands	r2, r1
 8004658:	00d2      	lsls	r2, r2, #3
 800465a:	21ff      	movs	r1, #255	; 0xff
 800465c:	4091      	lsls	r1, r2
 800465e:	000a      	movs	r2, r1
 8004660:	43d2      	mvns	r2, r2
 8004662:	401a      	ands	r2, r3
 8004664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	22ff      	movs	r2, #255	; 0xff
 800466c:	401a      	ands	r2, r3
 800466e:	1dfb      	adds	r3, r7, #7
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	0018      	movs	r0, r3
 8004674:	2303      	movs	r3, #3
 8004676:	4003      	ands	r3, r0
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467c:	4809      	ldr	r0, [pc, #36]	; (80046a4 <__NVIC_SetPriority+0xd8>)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	001c      	movs	r4, r3
 8004684:	230f      	movs	r3, #15
 8004686:	4023      	ands	r3, r4
 8004688:	3b08      	subs	r3, #8
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	430a      	orrs	r2, r1
 800468e:	3306      	adds	r3, #6
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	18c3      	adds	r3, r0, r3
 8004694:	3304      	adds	r3, #4
 8004696:	601a      	str	r2, [r3, #0]
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b003      	add	sp, #12
 800469e:	bd90      	pop	{r4, r7, pc}
 80046a0:	e000e100 	.word	0xe000e100
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	045b      	lsls	r3, r3, #17
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d301      	bcc.n	80046c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046bc:	2301      	movs	r3, #1
 80046be:	e010      	b.n	80046e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <SysTick_Config+0x44>)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	3a01      	subs	r2, #1
 80046c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046c8:	2301      	movs	r3, #1
 80046ca:	425b      	negs	r3, r3
 80046cc:	2103      	movs	r1, #3
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff ff7c 	bl	80045cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <SysTick_Config+0x44>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <SysTick_Config+0x44>)
 80046dc:	2207      	movs	r2, #7
 80046de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b002      	add	sp, #8
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	e000e010 	.word	0xe000e010

080046f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	210f      	movs	r1, #15
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	1c02      	adds	r2, r0, #0
 8004700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	187b      	adds	r3, r7, r1
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b25b      	sxtb	r3, r3
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff ff5d 	bl	80045cc <__NVIC_SetPriority>
}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	b004      	add	sp, #16
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	0002      	movs	r2, r0
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004726:	1dfb      	adds	r3, r7, #7
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b25b      	sxtb	r3, r3
 800472c:	0018      	movs	r0, r3
 800472e:	f7ff ff33 	bl	8004598 <__NVIC_EnableIRQ>
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f7ff ffaf 	bl	80046a8 <SysTick_Config>
 800474a:	0003      	movs	r3, r0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e036      	b.n	80047d8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2221      	movs	r2, #33	; 0x21
 800476e:	2102      	movs	r1, #2
 8004770:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_DMA_Init+0x8c>)
 800477e:	4013      	ands	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800478a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 f9c4 	bl	8004b48 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b004      	add	sp, #16
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	ffffc00f 	.word	0xffffc00f

080047e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2317      	movs	r3, #23
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_DMA_Start_IT+0x24>
 8004804:	2302      	movs	r3, #2
 8004806:	e04f      	b.n	80048a8 <HAL_DMA_Start_IT+0xc4>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	2101      	movs	r1, #1
 800480e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	5c9b      	ldrb	r3, [r3, r2]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d13a      	bne.n	8004892 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2221      	movs	r2, #33	; 0x21
 8004820:	2102      	movs	r1, #2
 8004822:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2101      	movs	r1, #1
 8004836:	438a      	bics	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f954 	bl	8004aee <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	210e      	movs	r1, #14
 800485a:	430a      	orrs	r2, r1
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e00f      	b.n	8004880 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	210a      	movs	r1, #10
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2104      	movs	r1, #4
 800487c:	438a      	bics	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2101      	movs	r1, #1
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e007      	b.n	80048a2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800489a:	2317      	movs	r3, #23
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2202      	movs	r2, #2
 80048a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80048a2:	2317      	movs	r3, #23
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	781b      	ldrb	r3, [r3, #0]
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b006      	add	sp, #24
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2221      	movs	r2, #33	; 0x21
 80048bc:	5c9b      	ldrb	r3, [r3, r2]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d008      	beq.n	80048d6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2204      	movs	r2, #4
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e020      	b.n	8004918 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	210e      	movs	r1, #14
 80048e2:	438a      	bics	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	438a      	bics	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	2101      	movs	r1, #1
 8004900:	4091      	lsls	r1, r2
 8004902:	000a      	movs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2221      	movs	r2, #33	; 0x21
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004928:	210f      	movs	r1, #15
 800492a:	187b      	adds	r3, r7, r1
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2221      	movs	r2, #33	; 0x21
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d006      	beq.n	800494a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2204      	movs	r2, #4
 8004940:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004942:	187b      	adds	r3, r7, r1
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e028      	b.n	800499c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	210e      	movs	r1, #14
 8004956:	438a      	bics	r2, r1
 8004958:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	438a      	bics	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	2101      	movs	r1, #1
 8004974:	4091      	lsls	r1, r2
 8004976:	000a      	movs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2221      	movs	r2, #33	; 0x21
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	0010      	movs	r0, r2
 800499a:	4798      	blx	r3
    }
  }
  return status;
 800499c:	230f      	movs	r3, #15
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	781b      	ldrb	r3, [r3, #0]
}
 80049a2:	0018      	movs	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b004      	add	sp, #16
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2204      	movs	r2, #4
 80049c8:	409a      	lsls	r2, r3
 80049ca:	0013      	movs	r3, r2
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4013      	ands	r3, r2
 80049d0:	d024      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x72>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2204      	movs	r2, #4
 80049d6:	4013      	ands	r3, r2
 80049d8:	d020      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2220      	movs	r2, #32
 80049e2:	4013      	ands	r3, r2
 80049e4:	d107      	bne.n	80049f6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2104      	movs	r1, #4
 80049f2:	438a      	bics	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	2104      	movs	r1, #4
 8004a00:	4091      	lsls	r1, r2
 8004a02:	000a      	movs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d100      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x66>
 8004a0e:	e06a      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	0010      	movs	r0, r2
 8004a18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a1a:	e064      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2202      	movs	r2, #2
 8004a22:	409a      	lsls	r2, r3
 8004a24:	0013      	movs	r3, r2
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d02b      	beq.n	8004a84 <HAL_DMA_IRQHandler+0xda>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4013      	ands	r3, r2
 8004a32:	d027      	beq.n	8004a84 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d10b      	bne.n	8004a58 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	210a      	movs	r1, #10
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2221      	movs	r2, #33	; 0x21
 8004a54:	2101      	movs	r1, #1
 8004a56:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	2102      	movs	r1, #2
 8004a62:	4091      	lsls	r1, r2
 8004a64:	000a      	movs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d036      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	0010      	movs	r0, r2
 8004a80:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a82:	e030      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	2208      	movs	r2, #8
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	0013      	movs	r3, r2
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	d028      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2208      	movs	r2, #8
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d024      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	210e      	movs	r1, #14
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4091      	lsls	r1, r2
 8004ab8:	000a      	movs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2221      	movs	r2, #33	; 0x21
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	2100      	movs	r1, #0
 8004ad0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	0010      	movs	r0, r2
 8004ae2:	4798      	blx	r3
    }
  }
}
 8004ae4:	e7ff      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x13c>
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b004      	add	sp, #16
 8004aec:	bd80      	pop	{r7, pc}

08004aee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	2101      	movs	r1, #1
 8004b06:	4091      	lsls	r1, r2
 8004b08:	000a      	movs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d108      	bne.n	8004b2e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b2c:	e007      	b.n	8004b3e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <DMA_CalcBaseAndBitshift+0x30>)
 8004b56:	4694      	mov	ip, r2
 8004b58:	4463      	add	r3, ip
 8004b5a:	2114      	movs	r1, #20
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fb faf9 	bl	8000154 <__udivsi3>
 8004b62:	0003      	movs	r3, r0
 8004b64:	009a      	lsls	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a03      	ldr	r2, [pc, #12]	; (8004b7c <DMA_CalcBaseAndBitshift+0x34>)
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	bffdfff8 	.word	0xbffdfff8
 8004b7c:	40020000 	.word	0x40020000

08004b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b8e:	e14f      	b.n	8004e30 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2101      	movs	r1, #1
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4091      	lsls	r1, r2
 8004b9a:	000a      	movs	r2, r1
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d100      	bne.n	8004ba8 <HAL_GPIO_Init+0x28>
 8004ba6:	e140      	b.n	8004e2a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2203      	movs	r2, #3
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d005      	beq.n	8004bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d130      	bne.n	8004c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	0013      	movs	r3, r2
 8004bd0:	43da      	mvns	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	409a      	lsls	r2, r3
 8004be2:	0013      	movs	r3, r2
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	401a      	ands	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	409a      	lsls	r2, r3
 8004c14:	0013      	movs	r3, r2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2203      	movs	r2, #3
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d017      	beq.n	8004c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	2203      	movs	r2, #3
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	0013      	movs	r3, r2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2203      	movs	r2, #3
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d123      	bne.n	8004cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	08da      	lsrs	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3208      	adds	r2, #8
 8004c72:	0092      	lsls	r2, r2, #2
 8004c74:	58d3      	ldr	r3, [r2, r3]
 8004c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	220f      	movs	r2, #15
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	43da      	mvns	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2107      	movs	r1, #7
 8004c96:	400b      	ands	r3, r1
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	0013      	movs	r3, r2
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	08da      	lsrs	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3208      	adds	r2, #8
 8004cac:	0092      	lsls	r2, r2, #2
 8004cae:	6939      	ldr	r1, [r7, #16]
 8004cb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	0013      	movs	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d100      	bne.n	8004cf4 <HAL_GPIO_Init+0x174>
 8004cf2:	e09a      	b.n	8004e2a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf4:	4b54      	ldr	r3, [pc, #336]	; (8004e48 <HAL_GPIO_Init+0x2c8>)
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <HAL_GPIO_Init+0x2c8>)
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	619a      	str	r2, [r3, #24]
 8004d00:	4b51      	ldr	r3, [pc, #324]	; (8004e48 <HAL_GPIO_Init+0x2c8>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d0c:	4a4f      	ldr	r2, [pc, #316]	; (8004e4c <HAL_GPIO_Init+0x2cc>)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	3302      	adds	r3, #2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	589b      	ldr	r3, [r3, r2]
 8004d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	4013      	ands	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	220f      	movs	r2, #15
 8004d24:	409a      	lsls	r2, r3
 8004d26:	0013      	movs	r3, r2
 8004d28:	43da      	mvns	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	2390      	movs	r3, #144	; 0x90
 8004d34:	05db      	lsls	r3, r3, #23
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d013      	beq.n	8004d62 <HAL_GPIO_Init+0x1e2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a44      	ldr	r2, [pc, #272]	; (8004e50 <HAL_GPIO_Init+0x2d0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00d      	beq.n	8004d5e <HAL_GPIO_Init+0x1de>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a43      	ldr	r2, [pc, #268]	; (8004e54 <HAL_GPIO_Init+0x2d4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <HAL_GPIO_Init+0x1da>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a42      	ldr	r2, [pc, #264]	; (8004e58 <HAL_GPIO_Init+0x2d8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_GPIO_Init+0x1d6>
 8004d52:	2303      	movs	r3, #3
 8004d54:	e006      	b.n	8004d64 <HAL_GPIO_Init+0x1e4>
 8004d56:	2305      	movs	r3, #5
 8004d58:	e004      	b.n	8004d64 <HAL_GPIO_Init+0x1e4>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e002      	b.n	8004d64 <HAL_GPIO_Init+0x1e4>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <HAL_GPIO_Init+0x1e4>
 8004d62:	2300      	movs	r3, #0
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	2103      	movs	r1, #3
 8004d68:	400a      	ands	r2, r1
 8004d6a:	0092      	lsls	r2, r2, #2
 8004d6c:	4093      	lsls	r3, r2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d74:	4935      	ldr	r1, [pc, #212]	; (8004e4c <HAL_GPIO_Init+0x2cc>)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	089b      	lsrs	r3, r3, #2
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d82:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	035b      	lsls	r3, r3, #13
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004da6:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	039b      	lsls	r3, r3, #14
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004dd0:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004dd6:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	029b      	lsls	r3, r3, #10
 8004dee:	4013      	ands	r3, r2
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004e00:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	025b      	lsls	r3, r3, #9
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	40da      	lsrs	r2, r3
 8004e38:	1e13      	subs	r3, r2, #0
 8004e3a:	d000      	beq.n	8004e3e <HAL_GPIO_Init+0x2be>
 8004e3c:	e6a8      	b.n	8004b90 <HAL_GPIO_Init+0x10>
  } 
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b006      	add	sp, #24
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	48000400 	.word	0x48000400
 8004e54:	48000800 	.word	0x48000800
 8004e58:	48000c00 	.word	0x48000c00
 8004e5c:	40010400 	.word	0x40010400

08004e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	1cba      	adds	r2, r7, #2
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	4013      	ands	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004e7a:	230f      	movs	r3, #15
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e003      	b.n	8004e8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e84:	230f      	movs	r3, #15
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e8c:	230f      	movs	r3, #15
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	781b      	ldrb	r3, [r3, #0]
  }
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b004      	add	sp, #16
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	0008      	movs	r0, r1
 8004ea4:	0011      	movs	r1, r2
 8004ea6:	1cbb      	adds	r3, r7, #2
 8004ea8:	1c02      	adds	r2, r0, #0
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	1c7b      	adds	r3, r7, #1
 8004eae:	1c0a      	adds	r2, r1, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb2:	1c7b      	adds	r3, r7, #1
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eba:	1cbb      	adds	r3, r7, #2
 8004ebc:	881a      	ldrh	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ec2:	e003      	b.n	8004ecc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ec4:	1cbb      	adds	r3, r7, #2
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	000a      	movs	r2, r1
 8004ede:	1cbb      	adds	r3, r7, #2
 8004ee0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ee8:	1cbb      	adds	r3, r7, #2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	041a      	lsls	r2, r3, #16
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	1cb9      	adds	r1, r7, #2
 8004ef8:	8809      	ldrh	r1, [r1, #0]
 8004efa:	400b      	ands	r3, r1
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	619a      	str	r2, [r3, #24]
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	0002      	movs	r2, r0
 8004f14:	1dbb      	adds	r3, r7, #6
 8004f16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	1dba      	adds	r2, r7, #6
 8004f1e:	8812      	ldrh	r2, [r2, #0]
 8004f20:	4013      	ands	r3, r2
 8004f22:	d008      	beq.n	8004f36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f26:	1dba      	adds	r2, r7, #6
 8004f28:	8812      	ldrh	r2, [r2, #0]
 8004f2a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f2c:	1dbb      	adds	r3, r7, #6
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7fd fdb2 	bl	8002a9a <HAL_GPIO_EXTI_Callback>
  }
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b002      	add	sp, #8
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	40010400 	.word	0x40010400

08004f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e301      	b.n	800555a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d100      	bne.n	8004f62 <HAL_RCC_OscConfig+0x1e>
 8004f60:	e08d      	b.n	800507e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f62:	4bc3      	ldr	r3, [pc, #780]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	220c      	movs	r2, #12
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d00e      	beq.n	8004f8c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f6e:	4bc0      	ldr	r3, [pc, #768]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	220c      	movs	r2, #12
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x64>
 8004f7a:	4bbd      	ldr	r3, [pc, #756]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	025b      	lsls	r3, r3, #9
 8004f82:	401a      	ands	r2, r3
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	025b      	lsls	r3, r3, #9
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d10d      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	4bb8      	ldr	r3, [pc, #736]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	4013      	ands	r3, r2
 8004f96:	d100      	bne.n	8004f9a <HAL_RCC_OscConfig+0x56>
 8004f98:	e070      	b.n	800507c <HAL_RCC_OscConfig+0x138>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d000      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x60>
 8004fa2:	e06b      	b.n	800507c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e2d8      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x7c>
 8004fb0:	4baf      	ldr	r3, [pc, #700]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4bae      	ldr	r3, [pc, #696]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	0249      	lsls	r1, r1, #9
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e02f      	b.n	8005020 <HAL_RCC_OscConfig+0xdc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x9e>
 8004fc8:	4ba9      	ldr	r3, [pc, #676]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4ba8      	ldr	r3, [pc, #672]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fce:	49a9      	ldr	r1, [pc, #676]	; (8005274 <HAL_RCC_OscConfig+0x330>)
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	4ba6      	ldr	r3, [pc, #664]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4ba5      	ldr	r3, [pc, #660]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fda:	49a7      	ldr	r1, [pc, #668]	; (8005278 <HAL_RCC_OscConfig+0x334>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e01e      	b.n	8005020 <HAL_RCC_OscConfig+0xdc>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d10e      	bne.n	8005008 <HAL_RCC_OscConfig+0xc4>
 8004fea:	4ba1      	ldr	r3, [pc, #644]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4ba0      	ldr	r3, [pc, #640]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	02c9      	lsls	r1, r1, #11
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	4b9d      	ldr	r3, [pc, #628]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b9c      	ldr	r3, [pc, #624]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	0249      	lsls	r1, r1, #9
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0xdc>
 8005008:	4b99      	ldr	r3, [pc, #612]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b98      	ldr	r3, [pc, #608]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800500e:	4999      	ldr	r1, [pc, #612]	; (8005274 <HAL_RCC_OscConfig+0x330>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	4b96      	ldr	r3, [pc, #600]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b95      	ldr	r3, [pc, #596]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800501a:	4997      	ldr	r1, [pc, #604]	; (8005278 <HAL_RCC_OscConfig+0x334>)
 800501c:	400a      	ands	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe fedc 	bl	8003de4 <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005032:	f7fe fed7 	bl	8003de4 <HAL_GetTick>
 8005036:	0002      	movs	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b64      	cmp	r3, #100	; 0x64
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e28a      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005044:	4b8a      	ldr	r3, [pc, #552]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	4013      	ands	r3, r2
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0xee>
 8005050:	e015      	b.n	800507e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fe fec7 	bl	8003de4 <HAL_GetTick>
 8005056:	0003      	movs	r3, r0
 8005058:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800505c:	f7fe fec2 	bl	8003de4 <HAL_GetTick>
 8005060:	0002      	movs	r2, r0
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e275      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	4b80      	ldr	r3, [pc, #512]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	4013      	ands	r3, r2
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x118>
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2202      	movs	r2, #2
 8005084:	4013      	ands	r3, r2
 8005086:	d100      	bne.n	800508a <HAL_RCC_OscConfig+0x146>
 8005088:	e069      	b.n	800515e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800508a:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	220c      	movs	r2, #12
 8005090:	4013      	ands	r3, r2
 8005092:	d00b      	beq.n	80050ac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005094:	4b76      	ldr	r3, [pc, #472]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	220c      	movs	r2, #12
 800509a:	4013      	ands	r3, r2
 800509c:	2b08      	cmp	r3, #8
 800509e:	d11c      	bne.n	80050da <HAL_RCC_OscConfig+0x196>
 80050a0:	4b73      	ldr	r3, [pc, #460]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	025b      	lsls	r3, r3, #9
 80050a8:	4013      	ands	r3, r2
 80050aa:	d116      	bne.n	80050da <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ac:	4b70      	ldr	r3, [pc, #448]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2202      	movs	r2, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	d005      	beq.n	80050c2 <HAL_RCC_OscConfig+0x17e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e24b      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b6b      	ldr	r3, [pc, #428]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	22f8      	movs	r2, #248	; 0xf8
 80050c8:	4393      	bics	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	00da      	lsls	r2, r3, #3
 80050d2:	4b67      	ldr	r3, [pc, #412]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d8:	e041      	b.n	800515e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d024      	beq.n	800512c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e2:	4b63      	ldr	r3, [pc, #396]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b62      	ldr	r3, [pc, #392]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80050e8:	2101      	movs	r1, #1
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe fe79 	bl	8003de4 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f8:	f7fe fe74 	bl	8003de4 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e227      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510a:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2202      	movs	r2, #2
 8005110:	4013      	ands	r3, r2
 8005112:	d0f1      	beq.n	80050f8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005114:	4b56      	ldr	r3, [pc, #344]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	22f8      	movs	r2, #248	; 0xf8
 800511a:	4393      	bics	r3, r2
 800511c:	0019      	movs	r1, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00da      	lsls	r2, r3, #3
 8005124:	4b52      	ldr	r3, [pc, #328]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e018      	b.n	800515e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b4f      	ldr	r3, [pc, #316]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005132:	2101      	movs	r1, #1
 8005134:	438a      	bics	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fe fe54 	bl	8003de4 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005142:	f7fe fe4f 	bl	8003de4 <HAL_GetTick>
 8005146:	0002      	movs	r2, r0
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e202      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005154:	4b46      	ldr	r3, [pc, #280]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d1f1      	bne.n	8005142 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2208      	movs	r2, #8
 8005164:	4013      	ands	r3, r2
 8005166:	d036      	beq.n	80051d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d019      	beq.n	80051a4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005170:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005174:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005176:	2101      	movs	r1, #1
 8005178:	430a      	orrs	r2, r1
 800517a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517c:	f7fe fe32 	bl	8003de4 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005186:	f7fe fe2d 	bl	8003de4 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e1e0      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005198:	4b35      	ldr	r3, [pc, #212]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2202      	movs	r2, #2
 800519e:	4013      	ands	r3, r2
 80051a0:	d0f1      	beq.n	8005186 <HAL_RCC_OscConfig+0x242>
 80051a2:	e018      	b.n	80051d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a4:	4b32      	ldr	r3, [pc, #200]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80051a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a8:	4b31      	ldr	r3, [pc, #196]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80051aa:	2101      	movs	r1, #1
 80051ac:	438a      	bics	r2, r1
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b0:	f7fe fe18 	bl	8003de4 <HAL_GetTick>
 80051b4:	0003      	movs	r3, r0
 80051b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fe fe13 	bl	8003de4 <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e1c6      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2202      	movs	r2, #2
 80051d2:	4013      	ands	r3, r2
 80051d4:	d1f1      	bne.n	80051ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2204      	movs	r2, #4
 80051dc:	4013      	ands	r3, r2
 80051de:	d100      	bne.n	80051e2 <HAL_RCC_OscConfig+0x29e>
 80051e0:	e0b4      	b.n	800534c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e2:	201f      	movs	r0, #31
 80051e4:	183b      	adds	r3, r7, r0
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ea:	4b21      	ldr	r3, [pc, #132]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	055b      	lsls	r3, r3, #21
 80051f2:	4013      	ands	r3, r2
 80051f4:	d110      	bne.n	8005218 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	0549      	lsls	r1, r1, #21
 8005200:	430a      	orrs	r2, r1
 8005202:	61da      	str	r2, [r3, #28]
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	055b      	lsls	r3, r3, #21
 800520c:	4013      	ands	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005212:	183b      	adds	r3, r7, r0
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_RCC_OscConfig+0x338>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4013      	ands	r3, r2
 8005222:	d11a      	bne.n	800525a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <HAL_RCC_OscConfig+0x338>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <HAL_RCC_OscConfig+0x338>)
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	0049      	lsls	r1, r1, #1
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fe fdd7 	bl	8003de4 <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523c:	f7fe fdd2 	bl	8003de4 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e185      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_OscConfig+0x338>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4013      	ands	r3, r2
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10e      	bne.n	8005280 <HAL_RCC_OscConfig+0x33c>
 8005262:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005264:	6a1a      	ldr	r2, [r3, #32]
 8005266:	4b02      	ldr	r3, [pc, #8]	; (8005270 <HAL_RCC_OscConfig+0x32c>)
 8005268:	2101      	movs	r1, #1
 800526a:	430a      	orrs	r2, r1
 800526c:	621a      	str	r2, [r3, #32]
 800526e:	e035      	b.n	80052dc <HAL_RCC_OscConfig+0x398>
 8005270:	40021000 	.word	0x40021000
 8005274:	fffeffff 	.word	0xfffeffff
 8005278:	fffbffff 	.word	0xfffbffff
 800527c:	40007000 	.word	0x40007000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <HAL_RCC_OscConfig+0x35e>
 8005288:	4bb6      	ldr	r3, [pc, #728]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	4bb5      	ldr	r3, [pc, #724]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800528e:	2101      	movs	r1, #1
 8005290:	438a      	bics	r2, r1
 8005292:	621a      	str	r2, [r3, #32]
 8005294:	4bb3      	ldr	r3, [pc, #716]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	4bb2      	ldr	r3, [pc, #712]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800529a:	2104      	movs	r1, #4
 800529c:	438a      	bics	r2, r1
 800529e:	621a      	str	r2, [r3, #32]
 80052a0:	e01c      	b.n	80052dc <HAL_RCC_OscConfig+0x398>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCC_OscConfig+0x380>
 80052aa:	4bae      	ldr	r3, [pc, #696]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	4bad      	ldr	r3, [pc, #692]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052b0:	2104      	movs	r1, #4
 80052b2:	430a      	orrs	r2, r1
 80052b4:	621a      	str	r2, [r3, #32]
 80052b6:	4bab      	ldr	r3, [pc, #684]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	4baa      	ldr	r3, [pc, #680]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052bc:	2101      	movs	r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	621a      	str	r2, [r3, #32]
 80052c2:	e00b      	b.n	80052dc <HAL_RCC_OscConfig+0x398>
 80052c4:	4ba7      	ldr	r3, [pc, #668]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	4ba6      	ldr	r3, [pc, #664]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052ca:	2101      	movs	r1, #1
 80052cc:	438a      	bics	r2, r1
 80052ce:	621a      	str	r2, [r3, #32]
 80052d0:	4ba4      	ldr	r3, [pc, #656]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	4ba3      	ldr	r3, [pc, #652]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80052d6:	2104      	movs	r1, #4
 80052d8:	438a      	bics	r2, r1
 80052da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d014      	beq.n	800530e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e4:	f7fe fd7e 	bl	8003de4 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ec:	e009      	b.n	8005302 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fe fd79 	bl	8003de4 <HAL_GetTick>
 80052f2:	0002      	movs	r2, r0
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	4a9b      	ldr	r2, [pc, #620]	; (8005568 <HAL_RCC_OscConfig+0x624>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e12b      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005302:	4b98      	ldr	r3, [pc, #608]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	2202      	movs	r2, #2
 8005308:	4013      	ands	r3, r2
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x3aa>
 800530c:	e013      	b.n	8005336 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7fe fd69 	bl	8003de4 <HAL_GetTick>
 8005312:	0003      	movs	r3, r0
 8005314:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005316:	e009      	b.n	800532c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fe fd64 	bl	8003de4 <HAL_GetTick>
 800531c:	0002      	movs	r2, r0
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a91      	ldr	r2, [pc, #580]	; (8005568 <HAL_RCC_OscConfig+0x624>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e116      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532c:	4b8d      	ldr	r3, [pc, #564]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005336:	231f      	movs	r3, #31
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d105      	bne.n	800534c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005340:	4b88      	ldr	r3, [pc, #544]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	4b87      	ldr	r3, [pc, #540]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005346:	4989      	ldr	r1, [pc, #548]	; (800556c <HAL_RCC_OscConfig+0x628>)
 8005348:	400a      	ands	r2, r1
 800534a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2210      	movs	r2, #16
 8005352:	4013      	ands	r3, r2
 8005354:	d063      	beq.n	800541e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d12a      	bne.n	80053b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800535e:	4b81      	ldr	r3, [pc, #516]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005362:	4b80      	ldr	r3, [pc, #512]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005364:	2104      	movs	r1, #4
 8005366:	430a      	orrs	r2, r1
 8005368:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800536a:	4b7e      	ldr	r3, [pc, #504]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800536c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536e:	4b7d      	ldr	r3, [pc, #500]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005370:	2101      	movs	r1, #1
 8005372:	430a      	orrs	r2, r1
 8005374:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005376:	f7fe fd35 	bl	8003de4 <HAL_GetTick>
 800537a:	0003      	movs	r3, r0
 800537c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005380:	f7fe fd30 	bl	8003de4 <HAL_GetTick>
 8005384:	0002      	movs	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0e3      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005392:	4b74      	ldr	r3, [pc, #464]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	2202      	movs	r2, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d0f1      	beq.n	8005380 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800539c:	4b71      	ldr	r3, [pc, #452]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a0:	22f8      	movs	r2, #248	; 0xf8
 80053a2:	4393      	bics	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	00da      	lsls	r2, r3, #3
 80053ac:	4b6d      	ldr	r3, [pc, #436]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053ae:	430a      	orrs	r2, r1
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34
 80053b2:	e034      	b.n	800541e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	3305      	adds	r3, #5
 80053ba:	d111      	bne.n	80053e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80053bc:	4b69      	ldr	r3, [pc, #420]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c0:	4b68      	ldr	r3, [pc, #416]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053c2:	2104      	movs	r1, #4
 80053c4:	438a      	bics	r2, r1
 80053c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80053c8:	4b66      	ldr	r3, [pc, #408]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	22f8      	movs	r2, #248	; 0xf8
 80053ce:	4393      	bics	r3, r2
 80053d0:	0019      	movs	r1, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	00da      	lsls	r2, r3, #3
 80053d8:	4b62      	ldr	r3, [pc, #392]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	635a      	str	r2, [r3, #52]	; 0x34
 80053de:	e01e      	b.n	800541e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80053e0:	4b60      	ldr	r3, [pc, #384]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e4:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053e6:	2104      	movs	r1, #4
 80053e8:	430a      	orrs	r2, r1
 80053ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80053ec:	4b5d      	ldr	r3, [pc, #372]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f0:	4b5c      	ldr	r3, [pc, #368]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80053f2:	2101      	movs	r1, #1
 80053f4:	438a      	bics	r2, r1
 80053f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f8:	f7fe fcf4 	bl	8003de4 <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005402:	f7fe fcef 	bl	8003de4 <HAL_GetTick>
 8005406:	0002      	movs	r2, r0
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e0a2      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005414:	4b53      	ldr	r3, [pc, #332]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	2202      	movs	r2, #2
 800541a:	4013      	ands	r3, r2
 800541c:	d1f1      	bne.n	8005402 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d100      	bne.n	8005428 <HAL_RCC_OscConfig+0x4e4>
 8005426:	e097      	b.n	8005558 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005428:	4b4e      	ldr	r3, [pc, #312]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	220c      	movs	r2, #12
 800542e:	4013      	ands	r3, r2
 8005430:	2b08      	cmp	r3, #8
 8005432:	d100      	bne.n	8005436 <HAL_RCC_OscConfig+0x4f2>
 8005434:	e06b      	b.n	800550e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d14c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b49      	ldr	r3, [pc, #292]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b48      	ldr	r3, [pc, #288]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005444:	494a      	ldr	r1, [pc, #296]	; (8005570 <HAL_RCC_OscConfig+0x62c>)
 8005446:	400a      	ands	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fe fccb 	bl	8003de4 <HAL_GetTick>
 800544e:	0003      	movs	r3, r0
 8005450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005454:	f7fe fcc6 	bl	8003de4 <HAL_GetTick>
 8005458:	0002      	movs	r2, r0
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e079      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005466:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	049b      	lsls	r3, r3, #18
 800546e:	4013      	ands	r3, r2
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005472:	4b3c      	ldr	r3, [pc, #240]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	220f      	movs	r2, #15
 8005478:	4393      	bics	r3, r2
 800547a:	0019      	movs	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	4b38      	ldr	r3, [pc, #224]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005482:	430a      	orrs	r2, r1
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4a3a      	ldr	r2, [pc, #232]	; (8005574 <HAL_RCC_OscConfig+0x630>)
 800548c:	4013      	ands	r3, r2
 800548e:	0019      	movs	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	431a      	orrs	r2, r3
 800549a:	4b32      	ldr	r3, [pc, #200]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a0:	4b30      	ldr	r3, [pc, #192]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80054a6:	2180      	movs	r1, #128	; 0x80
 80054a8:	0449      	lsls	r1, r1, #17
 80054aa:	430a      	orrs	r2, r1
 80054ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ae:	f7fe fc99 	bl	8003de4 <HAL_GetTick>
 80054b2:	0003      	movs	r3, r0
 80054b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fe fc94 	bl	8003de4 <HAL_GetTick>
 80054bc:	0002      	movs	r2, r0
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e047      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054ca:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	049b      	lsls	r3, r3, #18
 80054d2:	4013      	ands	r3, r2
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x574>
 80054d6:	e03f      	b.n	8005558 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	4b22      	ldr	r3, [pc, #136]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b21      	ldr	r3, [pc, #132]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 80054de:	4924      	ldr	r1, [pc, #144]	; (8005570 <HAL_RCC_OscConfig+0x62c>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fe fc7e 	bl	8003de4 <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ee:	f7fe fc79 	bl	8003de4 <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e02c      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005500:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	049b      	lsls	r3, r3, #18
 8005508:	4013      	ands	r3, r2
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x5aa>
 800550c:	e024      	b.n	8005558 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e01f      	b.n	800555a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <HAL_RCC_OscConfig+0x620>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	025b      	lsls	r3, r3, #9
 800552c:	401a      	ands	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	429a      	cmp	r2, r3
 8005534:	d10e      	bne.n	8005554 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	220f      	movs	r2, #15
 800553a:	401a      	ands	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	23f0      	movs	r3, #240	; 0xf0
 8005548:	039b      	lsls	r3, r3, #14
 800554a:	401a      	ands	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b008      	add	sp, #32
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	40021000 	.word	0x40021000
 8005568:	00001388 	.word	0x00001388
 800556c:	efffffff 	.word	0xefffffff
 8005570:	feffffff 	.word	0xfeffffff
 8005574:	ffc2ffff 	.word	0xffc2ffff

08005578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0b3      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800558c:	4b5b      	ldr	r3, [pc, #364]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d911      	bls.n	80055be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	4393      	bics	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	4b55      	ldr	r3, [pc, #340]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ac:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2201      	movs	r2, #1
 80055b2:	4013      	ands	r3, r2
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d001      	beq.n	80055be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e09a      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2202      	movs	r2, #2
 80055c4:	4013      	ands	r3, r2
 80055c6:	d015      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2204      	movs	r2, #4
 80055ce:	4013      	ands	r3, r2
 80055d0:	d006      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055d2:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80055d8:	21e0      	movs	r1, #224	; 0xe0
 80055da:	00c9      	lsls	r1, r1, #3
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b47      	ldr	r3, [pc, #284]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	22f0      	movs	r2, #240	; 0xf0
 80055e6:	4393      	bics	r3, r2
 80055e8:	0019      	movs	r1, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	4b44      	ldr	r3, [pc, #272]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80055f0:	430a      	orrs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2201      	movs	r2, #1
 80055fa:	4013      	ands	r3, r2
 80055fc:	d040      	beq.n	8005680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	4013      	ands	r3, r2
 8005610:	d114      	bne.n	800563c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e06e      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d107      	bne.n	800562e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561e:	4b38      	ldr	r3, [pc, #224]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	049b      	lsls	r3, r3, #18
 8005626:	4013      	ands	r3, r2
 8005628:	d108      	bne.n	800563c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e062      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562e:	4b34      	ldr	r3, [pc, #208]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2202      	movs	r2, #2
 8005634:	4013      	ands	r3, r2
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e05b      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800563c:	4b30      	ldr	r3, [pc, #192]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2203      	movs	r2, #3
 8005642:	4393      	bics	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005650:	f7fe fbc8 	bl	8003de4 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005658:	e009      	b.n	800566e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565a:	f7fe fbc3 	bl	8003de4 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	4a27      	ldr	r2, [pc, #156]	; (8005704 <HAL_RCC_ClockConfig+0x18c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e042      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	220c      	movs	r2, #12
 8005674:	401a      	ands	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	429a      	cmp	r2, r3
 800567e:	d1ec      	bne.n	800565a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2201      	movs	r2, #1
 8005686:	4013      	ands	r3, r2
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d211      	bcs.n	80056b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2201      	movs	r2, #1
 8005694:	4393      	bics	r3, r2
 8005696:	0019      	movs	r1, r3
 8005698:	4b18      	ldr	r3, [pc, #96]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a0:	4b16      	ldr	r3, [pc, #88]	; (80056fc <HAL_RCC_ClockConfig+0x184>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	4013      	ands	r3, r2
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e020      	b.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2204      	movs	r2, #4
 80056b8:	4013      	ands	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a11      	ldr	r2, [pc, #68]	; (8005708 <HAL_RCC_ClockConfig+0x190>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056d0:	f000 f820 	bl	8005714 <HAL_RCC_GetSysClockFreq>
 80056d4:	0001      	movs	r1, r0
 80056d6:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <HAL_RCC_ClockConfig+0x188>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	220f      	movs	r2, #15
 80056de:	4013      	ands	r3, r2
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x194>)
 80056e2:	5cd3      	ldrb	r3, [r2, r3]
 80056e4:	000a      	movs	r2, r1
 80056e6:	40da      	lsrs	r2, r3
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <HAL_RCC_ClockConfig+0x198>)
 80056ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80056ec:	2003      	movs	r0, #3
 80056ee:	f7fe fb33 	bl	8003d58 <HAL_InitTick>
  
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b004      	add	sp, #16
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
 8005704:	00001388 	.word	0x00001388
 8005708:	fffff8ff 	.word	0xfffff8ff
 800570c:	0800d2d0 	.word	0x0800d2d0
 8005710:	20000024 	.word	0x20000024

08005714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	220c      	movs	r2, #12
 8005738:	4013      	ands	r3, r2
 800573a:	2b04      	cmp	r3, #4
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x30>
 800573e:	2b08      	cmp	r3, #8
 8005740:	d003      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x36>
 8005742:	e02c      	b.n	800579e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005746:	613b      	str	r3, [r7, #16]
      break;
 8005748:	e02c      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	0c9b      	lsrs	r3, r3, #18
 800574e:	220f      	movs	r2, #15
 8005750:	4013      	ands	r3, r2
 8005752:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
 8005756:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	220f      	movs	r2, #15
 800575e:	4013      	ands	r3, r2
 8005760:	4a16      	ldr	r2, [pc, #88]	; (80057bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	025b      	lsls	r3, r3, #9
 800576c:	4013      	ands	r3, r2
 800576e:	d009      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4810      	ldr	r0, [pc, #64]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005774:	f7fa fcee 	bl	8000154 <__udivsi3>
 8005778:	0003      	movs	r3, r0
 800577a:	001a      	movs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4353      	muls	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e009      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	000a      	movs	r2, r1
 8005788:	0152      	lsls	r2, r2, #5
 800578a:	1a52      	subs	r2, r2, r1
 800578c:	0193      	lsls	r3, r2, #6
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	185b      	adds	r3, r3, r1
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	613b      	str	r3, [r7, #16]
      break;
 800579c:	e002      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057a0:	613b      	str	r3, [r7, #16]
      break;
 80057a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057a4:	693b      	ldr	r3, [r7, #16]
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b006      	add	sp, #24
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40021000 	.word	0x40021000
 80057b4:	007a1200 	.word	0x007a1200
 80057b8:	0800d2e8 	.word	0x0800d2e8
 80057bc:	0800d2f8 	.word	0x0800d2f8

080057c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c4:	4b02      	ldr	r3, [pc, #8]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000024 	.word	0x20000024

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80057d8:	f7ff fff2 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 80057dc:	0001      	movs	r1, r0
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	2207      	movs	r2, #7
 80057e6:	4013      	ands	r3, r2
 80057e8:	4a04      	ldr	r2, [pc, #16]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ea:	5cd3      	ldrb	r3, [r2, r3]
 80057ec:	40d9      	lsrs	r1, r3
 80057ee:	000b      	movs	r3, r1
}    
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	40021000 	.word	0x40021000
 80057fc:	0800d2e0 	.word	0x0800d2e0

08005800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	025b      	lsls	r3, r3, #9
 8005818:	4013      	ands	r3, r2
 800581a:	d100      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800581c:	e08e      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800581e:	2017      	movs	r0, #23
 8005820:	183b      	adds	r3, r7, r0
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005826:	4b57      	ldr	r3, [pc, #348]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	055b      	lsls	r3, r3, #21
 800582e:	4013      	ands	r3, r2
 8005830:	d110      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	4b54      	ldr	r3, [pc, #336]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	4b53      	ldr	r3, [pc, #332]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	0549      	lsls	r1, r1, #21
 800583c:	430a      	orrs	r2, r1
 800583e:	61da      	str	r2, [r3, #28]
 8005840:	4b50      	ldr	r3, [pc, #320]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	055b      	lsls	r3, r3, #21
 8005848:	4013      	ands	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584e:	183b      	adds	r3, r7, r0
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005854:	4b4c      	ldr	r3, [pc, #304]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4013      	ands	r3, r2
 800585e:	d11a      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005860:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b48      	ldr	r3, [pc, #288]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	0049      	lsls	r1, r1, #1
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586e:	f7fe fab9 	bl	8003de4 <HAL_GetTick>
 8005872:	0003      	movs	r3, r0
 8005874:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005876:	e008      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005878:	f7fe fab4 	bl	8003de4 <HAL_GetTick>
 800587c:	0002      	movs	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e077      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4013      	ands	r3, r2
 8005894:	d0f0      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005896:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	23c0      	movs	r3, #192	; 0xc0
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4013      	ands	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d034      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	23c0      	movs	r3, #192	; 0xc0
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4013      	ands	r3, r2
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d02c      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058b8:	4b32      	ldr	r3, [pc, #200]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	4a33      	ldr	r2, [pc, #204]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058c2:	4b30      	ldr	r3, [pc, #192]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058c8:	2180      	movs	r1, #128	; 0x80
 80058ca:	0249      	lsls	r1, r1, #9
 80058cc:	430a      	orrs	r2, r1
 80058ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058d6:	492e      	ldr	r1, [pc, #184]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80058d8:	400a      	ands	r2, r1
 80058da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058dc:	4b29      	ldr	r3, [pc, #164]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	4013      	ands	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ea:	f7fe fa7b 	bl	8003de4 <HAL_GetTick>
 80058ee:	0003      	movs	r3, r0
 80058f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f2:	e009      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f4:	f7fe fa76 	bl	8003de4 <HAL_GetTick>
 80058f8:	0002      	movs	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	4a25      	ldr	r2, [pc, #148]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e038      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005908:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	2202      	movs	r2, #2
 800590e:	4013      	ands	r3, r2
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005918:	4013      	ands	r3, r2
 800591a:	0019      	movs	r1, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005922:	430a      	orrs	r2, r1
 8005924:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005926:	2317      	movs	r3, #23
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d105      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005936:	4918      	ldr	r1, [pc, #96]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005938:	400a      	ands	r2, r1
 800593a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	4013      	ands	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	2203      	movs	r2, #3
 800594c:	4393      	bics	r3, r2
 800594e:	0019      	movs	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005956:	430a      	orrs	r2, r1
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2220      	movs	r2, #32
 8005960:	4013      	ands	r3, r2
 8005962:	d009      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	2210      	movs	r2, #16
 800596a:	4393      	bics	r3, r2
 800596c:	0019      	movs	r1, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	4b04      	ldr	r3, [pc, #16]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005974:	430a      	orrs	r2, r1
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b006      	add	sp, #24
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	40021000 	.word	0x40021000
 8005988:	40007000 	.word	0x40007000
 800598c:	fffffcff 	.word	0xfffffcff
 8005990:	fffeffff 	.word	0xfffeffff
 8005994:	00001388 	.word	0x00001388
 8005998:	efffffff 	.word	0xefffffff

0800599c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e042      	b.n	8005a34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	223d      	movs	r2, #61	; 0x3d
 80059b2:	5c9b      	ldrb	r3, [r3, r2]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	223c      	movs	r2, #60	; 0x3c
 80059be:	2100      	movs	r1, #0
 80059c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7fd ffa5 	bl	8003914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	223d      	movs	r2, #61	; 0x3d
 80059ce:	2102      	movs	r1, #2
 80059d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	0019      	movs	r1, r3
 80059dc:	0010      	movs	r0, r2
 80059de:	f000 ff0f 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2246      	movs	r2, #70	; 0x46
 80059e6:	2101      	movs	r1, #1
 80059e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	223e      	movs	r2, #62	; 0x3e
 80059ee:	2101      	movs	r1, #1
 80059f0:	5499      	strb	r1, [r3, r2]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	223f      	movs	r2, #63	; 0x3f
 80059f6:	2101      	movs	r1, #1
 80059f8:	5499      	strb	r1, [r3, r2]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2240      	movs	r2, #64	; 0x40
 80059fe:	2101      	movs	r1, #1
 8005a00:	5499      	strb	r1, [r3, r2]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2241      	movs	r2, #65	; 0x41
 8005a06:	2101      	movs	r1, #1
 8005a08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2242      	movs	r2, #66	; 0x42
 8005a0e:	2101      	movs	r1, #1
 8005a10:	5499      	strb	r1, [r3, r2]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2243      	movs	r2, #67	; 0x43
 8005a16:	2101      	movs	r1, #1
 8005a18:	5499      	strb	r1, [r3, r2]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2244      	movs	r2, #68	; 0x44
 8005a1e:	2101      	movs	r1, #1
 8005a20:	5499      	strb	r1, [r3, r2]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2245      	movs	r2, #69	; 0x45
 8005a26:	2101      	movs	r1, #1
 8005a28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	223d      	movs	r2, #61	; 0x3d
 8005a2e:	2101      	movs	r1, #1
 8005a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	223d      	movs	r2, #61	; 0x3d
 8005a48:	5c9b      	ldrb	r3, [r3, r2]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d001      	beq.n	8005a54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e02d      	b.n	8005ab0 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	223d      	movs	r2, #61	; 0x3d
 8005a58:	2102      	movs	r1, #2
 8005a5a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <HAL_TIM_Base_Start+0x7c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIM_Base_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a14      	ldr	r2, [pc, #80]	; (8005abc <HAL_TIM_Base_Start+0x80>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIM_Base_Start+0x3e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a12      	ldr	r2, [pc, #72]	; (8005ac0 <HAL_TIM_Base_Start+0x84>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d111      	bne.n	8005a9e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2207      	movs	r2, #7
 8005a82:	4013      	ands	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b06      	cmp	r3, #6
 8005a8a:	d010      	beq.n	8005aae <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2101      	movs	r1, #1
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	e007      	b.n	8005aae <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b004      	add	sp, #16
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40014000 	.word	0x40014000

08005ac4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <HAL_TIM_Base_Stop+0x44>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d10d      	bne.n	8005af4 <HAL_TIM_Base_Stop+0x30>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	4a0b      	ldr	r2, [pc, #44]	; (8005b0c <HAL_TIM_Base_Stop+0x48>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_Base_Stop+0x30>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2101      	movs	r1, #1
 8005af0:	438a      	bics	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	223d      	movs	r2, #61	; 0x3d
 8005af8:	2101      	movs	r1, #1
 8005afa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b002      	add	sp, #8
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	00001111 	.word	0x00001111
 8005b0c:	00000444 	.word	0x00000444

08005b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	223d      	movs	r2, #61	; 0x3d
 8005b1c:	5c9b      	ldrb	r3, [r3, r2]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d001      	beq.n	8005b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e035      	b.n	8005b94 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	223d      	movs	r2, #61	; 0x3d
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <HAL_TIM_Base_Start_IT+0x8c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_TIM_Base_Start_IT+0x4e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <HAL_TIM_Base_Start_IT+0x90>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_TIM_Base_Start_IT+0x4e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <HAL_TIM_Base_Start_IT+0x94>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d111      	bne.n	8005b82 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2207      	movs	r2, #7
 8005b66:	4013      	ands	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b06      	cmp	r3, #6
 8005b6e:	d010      	beq.n	8005b92 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	e007      	b.n	8005b92 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b004      	add	sp, #16
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40014000 	.word	0x40014000

08005ba8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2101      	movs	r1, #1
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	4a0d      	ldr	r2, [pc, #52]	; (8005bfc <HAL_TIM_Base_Stop_IT+0x54>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d10d      	bne.n	8005be8 <HAL_TIM_Base_Stop_IT+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <HAL_TIM_Base_Stop_IT+0x58>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_Base_Stop_IT+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2101      	movs	r1, #1
 8005be4:	438a      	bics	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	223d      	movs	r2, #61	; 0x3d
 8005bec:	2101      	movs	r1, #1
 8005bee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b002      	add	sp, #8
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	00001111 	.word	0x00001111
 8005c00:	00000444 	.word	0x00000444

08005c04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e042      	b.n	8005c9c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	223d      	movs	r2, #61	; 0x3d
 8005c1a:	5c9b      	ldrb	r3, [r3, r2]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	223c      	movs	r2, #60	; 0x3c
 8005c26:	2100      	movs	r1, #0
 8005c28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 f839 	bl	8005ca4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	223d      	movs	r2, #61	; 0x3d
 8005c36:	2102      	movs	r1, #2
 8005c38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	0019      	movs	r1, r3
 8005c44:	0010      	movs	r0, r2
 8005c46:	f000 fddb 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2246      	movs	r2, #70	; 0x46
 8005c4e:	2101      	movs	r1, #1
 8005c50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	223e      	movs	r2, #62	; 0x3e
 8005c56:	2101      	movs	r1, #1
 8005c58:	5499      	strb	r1, [r3, r2]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	223f      	movs	r2, #63	; 0x3f
 8005c5e:	2101      	movs	r1, #1
 8005c60:	5499      	strb	r1, [r3, r2]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2240      	movs	r2, #64	; 0x40
 8005c66:	2101      	movs	r1, #1
 8005c68:	5499      	strb	r1, [r3, r2]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2241      	movs	r2, #65	; 0x41
 8005c6e:	2101      	movs	r1, #1
 8005c70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2242      	movs	r2, #66	; 0x42
 8005c76:	2101      	movs	r1, #1
 8005c78:	5499      	strb	r1, [r3, r2]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2243      	movs	r2, #67	; 0x43
 8005c7e:	2101      	movs	r1, #1
 8005c80:	5499      	strb	r1, [r3, r2]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2244      	movs	r2, #68	; 0x44
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2245      	movs	r2, #69	; 0x45
 8005c8e:	2101      	movs	r1, #1
 8005c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	223d      	movs	r2, #61	; 0x3d
 8005c96:	2101      	movs	r1, #1
 8005c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b002      	add	sp, #8
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d108      	bne.n	8005cd6 <HAL_TIM_OC_Start+0x22>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	223e      	movs	r2, #62	; 0x3e
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	4193      	sbcs	r3, r2
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	e01f      	b.n	8005d16 <HAL_TIM_OC_Start+0x62>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d108      	bne.n	8005cee <HAL_TIM_OC_Start+0x3a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	223f      	movs	r2, #63	; 0x3f
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	1e5a      	subs	r2, r3, #1
 8005ce8:	4193      	sbcs	r3, r2
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	e013      	b.n	8005d16 <HAL_TIM_OC_Start+0x62>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d108      	bne.n	8005d06 <HAL_TIM_OC_Start+0x52>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2240      	movs	r2, #64	; 0x40
 8005cf8:	5c9b      	ldrb	r3, [r3, r2]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	1e5a      	subs	r2, r3, #1
 8005d00:	4193      	sbcs	r3, r2
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	e007      	b.n	8005d16 <HAL_TIM_OC_Start+0x62>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2241      	movs	r2, #65	; 0x41
 8005d0a:	5c9b      	ldrb	r3, [r3, r2]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	4193      	sbcs	r3, r2
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e06e      	b.n	8005dfc <HAL_TIM_OC_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_OC_Start+0x7a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	223e      	movs	r2, #62	; 0x3e
 8005d28:	2102      	movs	r1, #2
 8005d2a:	5499      	strb	r1, [r3, r2]
 8005d2c:	e013      	b.n	8005d56 <HAL_TIM_OC_Start+0xa2>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_OC_Start+0x8a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	223f      	movs	r2, #63	; 0x3f
 8005d38:	2102      	movs	r1, #2
 8005d3a:	5499      	strb	r1, [r3, r2]
 8005d3c:	e00b      	b.n	8005d56 <HAL_TIM_OC_Start+0xa2>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d104      	bne.n	8005d4e <HAL_TIM_OC_Start+0x9a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	2102      	movs	r1, #2
 8005d4a:	5499      	strb	r1, [r3, r2]
 8005d4c:	e003      	b.n	8005d56 <HAL_TIM_OC_Start+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2241      	movs	r2, #65	; 0x41
 8005d52:	2102      	movs	r1, #2
 8005d54:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f001 f8ec 	bl	8006f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <HAL_TIM_OC_Start+0x150>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_OC_Start+0xd8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <HAL_TIM_OC_Start+0x154>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIM_OC_Start+0xd8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a23      	ldr	r2, [pc, #140]	; (8005e0c <HAL_TIM_OC_Start+0x158>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_OC_Start+0xd8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a22      	ldr	r2, [pc, #136]	; (8005e10 <HAL_TIM_OC_Start+0x15c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIM_OC_Start+0xdc>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <HAL_TIM_OC_Start+0xde>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	0209      	lsls	r1, r1, #8
 8005da4:	430a      	orrs	r2, r1
 8005da6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <HAL_TIM_OC_Start+0x150>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_TIM_OC_Start+0x112>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <HAL_TIM_OC_Start+0x160>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_TIM_OC_Start+0x112>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <HAL_TIM_OC_Start+0x154>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d111      	bne.n	8005dea <HAL_TIM_OC_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2207      	movs	r2, #7
 8005dce:	4013      	ands	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b06      	cmp	r3, #6
 8005dd6:	d010      	beq.n	8005dfa <HAL_TIM_OC_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2101      	movs	r1, #1
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	e007      	b.n	8005dfa <HAL_TIM_OC_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2101      	movs	r1, #1
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b004      	add	sp, #16
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800
 8005e14:	40000400 	.word	0x40000400

08005e18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e042      	b.n	8005eb0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	223d      	movs	r2, #61	; 0x3d
 8005e2e:	5c9b      	ldrb	r3, [r3, r2]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	223c      	movs	r2, #60	; 0x3c
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 f839 	bl	8005eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	223d      	movs	r2, #61	; 0x3d
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3304      	adds	r3, #4
 8005e56:	0019      	movs	r1, r3
 8005e58:	0010      	movs	r0, r2
 8005e5a:	f000 fcd1 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2246      	movs	r2, #70	; 0x46
 8005e62:	2101      	movs	r1, #1
 8005e64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	223e      	movs	r2, #62	; 0x3e
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5499      	strb	r1, [r3, r2]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	223f      	movs	r2, #63	; 0x3f
 8005e72:	2101      	movs	r1, #1
 8005e74:	5499      	strb	r1, [r3, r2]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2240      	movs	r2, #64	; 0x40
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	5499      	strb	r1, [r3, r2]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2241      	movs	r2, #65	; 0x41
 8005e82:	2101      	movs	r1, #1
 8005e84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2242      	movs	r2, #66	; 0x42
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	5499      	strb	r1, [r3, r2]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2243      	movs	r2, #67	; 0x43
 8005e92:	2101      	movs	r1, #1
 8005e94:	5499      	strb	r1, [r3, r2]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2244      	movs	r2, #68	; 0x44
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	5499      	strb	r1, [r3, r2]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2245      	movs	r2, #69	; 0x45
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	223d      	movs	r2, #61	; 0x3d
 8005eaa:	2101      	movs	r1, #1
 8005eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d108      	bne.n	8005eea <HAL_TIM_PWM_Start+0x22>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	223e      	movs	r2, #62	; 0x3e
 8005edc:	5c9b      	ldrb	r3, [r3, r2]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	1e5a      	subs	r2, r3, #1
 8005ee4:	4193      	sbcs	r3, r2
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e01f      	b.n	8005f2a <HAL_TIM_PWM_Start+0x62>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d108      	bne.n	8005f02 <HAL_TIM_PWM_Start+0x3a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	223f      	movs	r2, #63	; 0x3f
 8005ef4:	5c9b      	ldrb	r3, [r3, r2]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	1e5a      	subs	r2, r3, #1
 8005efc:	4193      	sbcs	r3, r2
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	e013      	b.n	8005f2a <HAL_TIM_PWM_Start+0x62>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d108      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x52>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2240      	movs	r2, #64	; 0x40
 8005f0c:	5c9b      	ldrb	r3, [r3, r2]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	1e5a      	subs	r2, r3, #1
 8005f14:	4193      	sbcs	r3, r2
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	e007      	b.n	8005f2a <HAL_TIM_PWM_Start+0x62>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2241      	movs	r2, #65	; 0x41
 8005f1e:	5c9b      	ldrb	r3, [r3, r2]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	4193      	sbcs	r3, r2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e06e      	b.n	8006010 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x7a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	223e      	movs	r2, #62	; 0x3e
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	5499      	strb	r1, [r3, r2]
 8005f40:	e013      	b.n	8005f6a <HAL_TIM_PWM_Start+0xa2>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x8a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	223f      	movs	r2, #63	; 0x3f
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	5499      	strb	r1, [r3, r2]
 8005f50:	e00b      	b.n	8005f6a <HAL_TIM_PWM_Start+0xa2>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_PWM_Start+0x9a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2240      	movs	r2, #64	; 0x40
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	5499      	strb	r1, [r3, r2]
 8005f60:	e003      	b.n	8005f6a <HAL_TIM_PWM_Start+0xa2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2241      	movs	r2, #65	; 0x41
 8005f66:	2102      	movs	r1, #2
 8005f68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	2201      	movs	r2, #1
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 ffe2 	bl	8006f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a26      	ldr	r2, [pc, #152]	; (8006018 <HAL_TIM_PWM_Start+0x150>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0xd8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a25      	ldr	r2, [pc, #148]	; (800601c <HAL_TIM_PWM_Start+0x154>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0xd8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a23      	ldr	r2, [pc, #140]	; (8006020 <HAL_TIM_PWM_Start+0x158>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0xd8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a22      	ldr	r2, [pc, #136]	; (8006024 <HAL_TIM_PWM_Start+0x15c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIM_PWM_Start+0xdc>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <HAL_TIM_PWM_Start+0xde>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	0209      	lsls	r1, r1, #8
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	; (8006018 <HAL_TIM_PWM_Start+0x150>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_TIM_PWM_Start+0x112>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_TIM_PWM_Start+0x160>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_TIM_PWM_Start+0x112>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a11      	ldr	r2, [pc, #68]	; (800601c <HAL_TIM_PWM_Start+0x154>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d111      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b06      	cmp	r3, #6
 8005fea:	d010      	beq.n	800600e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffc:	e007      	b.n	800600e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b004      	add	sp, #16
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40012c00 	.word	0x40012c00
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800
 8006028:	40000400 	.word	0x40000400

0800602c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	2200      	movs	r2, #0
 800603e:	0018      	movs	r0, r3
 8006040:	f000 ff7c 	bl	8006f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <HAL_TIM_PWM_Stop+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIM_PWM_Stop+0x40>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2e      	ldr	r2, [pc, #184]	; (800610c <HAL_TIM_PWM_Stop+0xe0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_PWM_Stop+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <HAL_TIM_PWM_Stop+0xe4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIM_PWM_Stop+0x40>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2b      	ldr	r2, [pc, #172]	; (8006114 <HAL_TIM_PWM_Stop+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d101      	bne.n	8006070 <HAL_TIM_PWM_Stop+0x44>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <HAL_TIM_PWM_Stop+0x46>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d013      	beq.n	800609e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <HAL_TIM_PWM_Stop+0xec>)
 800607e:	4013      	ands	r3, r2
 8006080:	d10d      	bne.n	800609e <HAL_TIM_PWM_Stop+0x72>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	4a24      	ldr	r2, [pc, #144]	; (800611c <HAL_TIM_PWM_Stop+0xf0>)
 800608a:	4013      	ands	r3, r2
 800608c:	d107      	bne.n	800609e <HAL_TIM_PWM_Stop+0x72>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4921      	ldr	r1, [pc, #132]	; (8006120 <HAL_TIM_PWM_Stop+0xf4>)
 800609a:	400a      	ands	r2, r1
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_TIM_PWM_Stop+0xec>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	d10d      	bne.n	80060c6 <HAL_TIM_PWM_Stop+0x9a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <HAL_TIM_PWM_Stop+0xf0>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	d107      	bne.n	80060c6 <HAL_TIM_PWM_Stop+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2101      	movs	r1, #1
 80060c2:	438a      	bics	r2, r1
 80060c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_PWM_Stop+0xaa>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	223e      	movs	r2, #62	; 0x3e
 80060d0:	2101      	movs	r1, #1
 80060d2:	5499      	strb	r1, [r3, r2]
 80060d4:	e013      	b.n	80060fe <HAL_TIM_PWM_Stop+0xd2>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_PWM_Stop+0xba>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	223f      	movs	r2, #63	; 0x3f
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]
 80060e4:	e00b      	b.n	80060fe <HAL_TIM_PWM_Stop+0xd2>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Stop+0xca>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]
 80060f4:	e003      	b.n	80060fe <HAL_TIM_PWM_Stop+0xd2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2241      	movs	r2, #65	; 0x41
 80060fa:	2101      	movs	r1, #1
 80060fc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	0018      	movs	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	b002      	add	sp, #8
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800
 8006118:	00001111 	.word	0x00001111
 800611c:	00000444 	.word	0x00000444
 8006120:	ffff7fff 	.word	0xffff7fff

08006124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2202      	movs	r2, #2
 8006134:	4013      	ands	r3, r2
 8006136:	2b02      	cmp	r3, #2
 8006138:	d124      	bne.n	8006184 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2202      	movs	r2, #2
 8006142:	4013      	ands	r3, r2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d11d      	bne.n	8006184 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2203      	movs	r2, #3
 800614e:	4252      	negs	r2, r2
 8006150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2203      	movs	r2, #3
 8006160:	4013      	ands	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	0018      	movs	r0, r3
 8006168:	f000 fb32 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 800616c:	e007      	b.n	800617e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 fb25 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0018      	movs	r0, r3
 800617a:	f000 fb31 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2204      	movs	r2, #4
 800618c:	4013      	ands	r3, r2
 800618e:	2b04      	cmp	r3, #4
 8006190:	d125      	bne.n	80061de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2204      	movs	r2, #4
 800619a:	4013      	ands	r3, r2
 800619c:	2b04      	cmp	r3, #4
 800619e:	d11e      	bne.n	80061de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2205      	movs	r2, #5
 80061a6:	4252      	negs	r2, r2
 80061a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	23c0      	movs	r3, #192	; 0xc0
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4013      	ands	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	0018      	movs	r0, r3
 80061c2:	f000 fb05 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 80061c6:	e007      	b.n	80061d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	0018      	movs	r0, r3
 80061cc:	f000 faf8 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0018      	movs	r0, r3
 80061d4:	f000 fb04 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2208      	movs	r2, #8
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d124      	bne.n	8006236 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	2208      	movs	r2, #8
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d11d      	bne.n	8006236 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2209      	movs	r2, #9
 8006200:	4252      	negs	r2, r2
 8006202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	2203      	movs	r2, #3
 8006212:	4013      	ands	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0018      	movs	r0, r3
 800621a:	f000 fad9 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 800621e:	e007      	b.n	8006230 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	0018      	movs	r0, r3
 8006224:	f000 facc 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	0018      	movs	r0, r3
 800622c:	f000 fad8 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2210      	movs	r2, #16
 800623e:	4013      	ands	r3, r2
 8006240:	2b10      	cmp	r3, #16
 8006242:	d125      	bne.n	8006290 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2210      	movs	r2, #16
 800624c:	4013      	ands	r3, r2
 800624e:	2b10      	cmp	r3, #16
 8006250:	d11e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2211      	movs	r2, #17
 8006258:	4252      	negs	r2, r2
 800625a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2208      	movs	r2, #8
 8006260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	23c0      	movs	r3, #192	; 0xc0
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4013      	ands	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	0018      	movs	r0, r3
 8006274:	f000 faac 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 8006278:	e007      	b.n	800628a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	0018      	movs	r0, r3
 800627e:	f000 fa9f 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0018      	movs	r0, r3
 8006286:	f000 faab 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2201      	movs	r2, #1
 8006298:	4013      	ands	r3, r2
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10f      	bne.n	80062be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d108      	bne.n	80062be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2202      	movs	r2, #2
 80062b2:	4252      	negs	r2, r2
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f7fc f9ef 	bl	800269c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2280      	movs	r2, #128	; 0x80
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d10f      	bne.n	80062ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d108      	bne.n	80062ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2281      	movs	r2, #129	; 0x81
 80062e0:	4252      	negs	r2, r2
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	0018      	movs	r0, r3
 80062e8:	f000 ff0a 	bl	8007100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2240      	movs	r2, #64	; 0x40
 80062f4:	4013      	ands	r3, r2
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d10f      	bne.n	800631a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	4013      	ands	r3, r2
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d108      	bne.n	800631a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2241      	movs	r2, #65	; 0x41
 800630e:	4252      	negs	r2, r2
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 fa6b 	bl	80067f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2220      	movs	r2, #32
 8006322:	4013      	ands	r3, r2
 8006324:	2b20      	cmp	r3, #32
 8006326:	d10f      	bne.n	8006348 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	4013      	ands	r3, r2
 8006332:	2b20      	cmp	r3, #32
 8006334:	d108      	bne.n	8006348 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2221      	movs	r2, #33	; 0x21
 800633c:	4252      	negs	r2, r2
 800633e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0018      	movs	r0, r3
 8006344:	f000 fed4 	bl	80070f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	b002      	add	sp, #8
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2317      	movs	r3, #23
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	223c      	movs	r2, #60	; 0x3c
 8006368:	5c9b      	ldrb	r3, [r3, r2]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_TIM_OC_ConfigChannel+0x22>
 800636e:	2302      	movs	r3, #2
 8006370:	e042      	b.n	80063f8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	223c      	movs	r2, #60	; 0x3c
 8006376:	2101      	movs	r1, #1
 8006378:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b0c      	cmp	r3, #12
 800637e:	d027      	beq.n	80063d0 <HAL_TIM_OC_ConfigChannel+0x80>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b0c      	cmp	r3, #12
 8006384:	d82c      	bhi.n	80063e0 <HAL_TIM_OC_ConfigChannel+0x90>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d019      	beq.n	80063c0 <HAL_TIM_OC_ConfigChannel+0x70>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b08      	cmp	r3, #8
 8006390:	d826      	bhi.n	80063e0 <HAL_TIM_OC_ConfigChannel+0x90>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_TIM_OC_ConfigChannel+0x50>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d008      	beq.n	80063b0 <HAL_TIM_OC_ConfigChannel+0x60>
 800639e:	e01f      	b.n	80063e0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	0011      	movs	r1, r2
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 fa9f 	bl	80068ec <TIM_OC1_SetConfig>
      break;
 80063ae:	e01c      	b.n	80063ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f000 fb1f 	bl	80069fc <TIM_OC2_SetConfig>
      break;
 80063be:	e014      	b.n	80063ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	0011      	movs	r1, r2
 80063c8:	0018      	movs	r0, r3
 80063ca:	f000 fb9b 	bl	8006b04 <TIM_OC3_SetConfig>
      break;
 80063ce:	e00c      	b.n	80063ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	0011      	movs	r1, r2
 80063d8:	0018      	movs	r0, r3
 80063da:	f000 fc19 	bl	8006c10 <TIM_OC4_SetConfig>
      break;
 80063de:	e004      	b.n	80063ea <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2317      	movs	r3, #23
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
      break;
 80063e8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	223c      	movs	r2, #60	; 0x3c
 80063ee:	2100      	movs	r1, #0
 80063f0:	5499      	strb	r1, [r3, r2]

  return status;
 80063f2:	2317      	movs	r3, #23
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	781b      	ldrb	r3, [r3, #0]
}
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b006      	add	sp, #24
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2317      	movs	r3, #23
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	223c      	movs	r2, #60	; 0x3c
 8006418:	5c9b      	ldrb	r3, [r3, r2]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_ConfigChannel+0x22>
 800641e:	2302      	movs	r3, #2
 8006420:	e0ad      	b.n	800657e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	223c      	movs	r2, #60	; 0x3c
 8006426:	2101      	movs	r1, #1
 8006428:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b0c      	cmp	r3, #12
 800642e:	d100      	bne.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006430:	e076      	b.n	8006520 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d900      	bls.n	800643a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006438:	e095      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x166>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d04e      	beq.n	80064de <HAL_TIM_PWM_ConfigChannel+0xde>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d900      	bls.n	8006448 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006446:	e08e      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x56>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d021      	beq.n	8006498 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006454:	e087      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0011      	movs	r1, r2
 800645e:	0018      	movs	r0, r3
 8006460:	f000 fa44 	bl	80068ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2108      	movs	r1, #8
 8006470:	430a      	orrs	r2, r1
 8006472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2104      	movs	r1, #4
 8006480:	438a      	bics	r2, r1
 8006482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	619a      	str	r2, [r3, #24]
      break;
 8006496:	e06b      	b.n	8006570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	0011      	movs	r1, r2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 faab 	bl	80069fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2180      	movs	r1, #128	; 0x80
 80064b2:	0109      	lsls	r1, r1, #4
 80064b4:	430a      	orrs	r2, r1
 80064b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4931      	ldr	r1, [pc, #196]	; (8006588 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80064c4:	400a      	ands	r2, r1
 80064c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6999      	ldr	r1, [r3, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	619a      	str	r2, [r3, #24]
      break;
 80064dc:	e048      	b.n	8006570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 fb0c 	bl	8006b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2108      	movs	r1, #8
 80064f8:	430a      	orrs	r2, r1
 80064fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2104      	movs	r1, #4
 8006508:	438a      	bics	r2, r1
 800650a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69d9      	ldr	r1, [r3, #28]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	61da      	str	r2, [r3, #28]
      break;
 800651e:	e027      	b.n	8006570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	0011      	movs	r1, r2
 8006528:	0018      	movs	r0, r3
 800652a:	f000 fb71 	bl	8006c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2180      	movs	r1, #128	; 0x80
 800653a:	0109      	lsls	r1, r1, #4
 800653c:	430a      	orrs	r2, r1
 800653e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	490f      	ldr	r1, [pc, #60]	; (8006588 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800654c:	400a      	ands	r2, r1
 800654e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69d9      	ldr	r1, [r3, #28]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	61da      	str	r2, [r3, #28]
      break;
 8006564:	e004      	b.n	8006570 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006566:	2317      	movs	r3, #23
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
      break;
 800656e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	223c      	movs	r2, #60	; 0x3c
 8006574:	2100      	movs	r1, #0
 8006576:	5499      	strb	r1, [r3, r2]

  return status;
 8006578:	2317      	movs	r3, #23
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	781b      	ldrb	r3, [r3, #0]
}
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b006      	add	sp, #24
 8006584:	bd80      	pop	{r7, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	fffffbff 	.word	0xfffffbff

0800658c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006596:	230f      	movs	r3, #15
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	223c      	movs	r2, #60	; 0x3c
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIM_ConfigClockSource+0x20>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e0bc      	b.n	8006726 <HAL_TIM_ConfigClockSource+0x19a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	223c      	movs	r2, #60	; 0x3c
 80065b0:	2101      	movs	r1, #1
 80065b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	223d      	movs	r2, #61	; 0x3d
 80065b8:	2102      	movs	r1, #2
 80065ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2277      	movs	r2, #119	; 0x77
 80065c8:	4393      	bics	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a58      	ldr	r2, [pc, #352]	; (8006730 <HAL_TIM_ConfigClockSource+0x1a4>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2280      	movs	r2, #128	; 0x80
 80065e2:	0192      	lsls	r2, r2, #6
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d040      	beq.n	800666a <HAL_TIM_ConfigClockSource+0xde>
 80065e8:	2280      	movs	r2, #128	; 0x80
 80065ea:	0192      	lsls	r2, r2, #6
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d900      	bls.n	80065f2 <HAL_TIM_ConfigClockSource+0x66>
 80065f0:	e088      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	0152      	lsls	r2, r2, #5
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d100      	bne.n	80065fc <HAL_TIM_ConfigClockSource+0x70>
 80065fa:	e088      	b.n	800670e <HAL_TIM_ConfigClockSource+0x182>
 80065fc:	2280      	movs	r2, #128	; 0x80
 80065fe:	0152      	lsls	r2, r2, #5
 8006600:	4293      	cmp	r3, r2
 8006602:	d900      	bls.n	8006606 <HAL_TIM_ConfigClockSource+0x7a>
 8006604:	e07e      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 8006606:	2b70      	cmp	r3, #112	; 0x70
 8006608:	d018      	beq.n	800663c <HAL_TIM_ConfigClockSource+0xb0>
 800660a:	d900      	bls.n	800660e <HAL_TIM_ConfigClockSource+0x82>
 800660c:	e07a      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 800660e:	2b60      	cmp	r3, #96	; 0x60
 8006610:	d04f      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x126>
 8006612:	d900      	bls.n	8006616 <HAL_TIM_ConfigClockSource+0x8a>
 8006614:	e076      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 8006616:	2b50      	cmp	r3, #80	; 0x50
 8006618:	d03b      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x106>
 800661a:	d900      	bls.n	800661e <HAL_TIM_ConfigClockSource+0x92>
 800661c:	e072      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d057      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x146>
 8006622:	d900      	bls.n	8006626 <HAL_TIM_ConfigClockSource+0x9a>
 8006624:	e06e      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d063      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x166>
 800662a:	d86b      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 800662c:	2b20      	cmp	r3, #32
 800662e:	d060      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x166>
 8006630:	d868      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d05d      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x166>
 8006636:	2b10      	cmp	r3, #16
 8006638:	d05b      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x166>
 800663a:	e063      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6899      	ldr	r1, [r3, #8]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f000 fc56 	bl	8006efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2277      	movs	r2, #119	; 0x77
 800665c:	4313      	orrs	r3, r2
 800665e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	609a      	str	r2, [r3, #8]
      break;
 8006668:	e052      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6899      	ldr	r1, [r3, #8]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f000 fc3f 	bl	8006efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2180      	movs	r1, #128	; 0x80
 800668a:	01c9      	lsls	r1, r1, #7
 800668c:	430a      	orrs	r2, r1
 800668e:	609a      	str	r2, [r3, #8]
      break;
 8006690:	e03e      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	001a      	movs	r2, r3
 80066a0:	f000 fbb2 	bl	8006e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2150      	movs	r1, #80	; 0x50
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 fc0c 	bl	8006ec8 <TIM_ITRx_SetConfig>
      break;
 80066b0:	e02e      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	001a      	movs	r2, r3
 80066c0:	f000 fbd0 	bl	8006e64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2160      	movs	r1, #96	; 0x60
 80066ca:	0018      	movs	r0, r3
 80066cc:	f000 fbfc 	bl	8006ec8 <TIM_ITRx_SetConfig>
      break;
 80066d0:	e01e      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	001a      	movs	r2, r3
 80066e0:	f000 fb92 	bl	8006e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2140      	movs	r1, #64	; 0x40
 80066ea:	0018      	movs	r0, r3
 80066ec:	f000 fbec 	bl	8006ec8 <TIM_ITRx_SetConfig>
      break;
 80066f0:	e00e      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	0019      	movs	r1, r3
 80066fc:	0010      	movs	r0, r2
 80066fe:	f000 fbe3 	bl	8006ec8 <TIM_ITRx_SetConfig>
      break;
 8006702:	e005      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006704:	230f      	movs	r3, #15
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
      break;
 800670c:	e000      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800670e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	223d      	movs	r2, #61	; 0x3d
 8006714:	2101      	movs	r1, #1
 8006716:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	223c      	movs	r2, #60	; 0x3c
 800671c:	2100      	movs	r1, #0
 800671e:	5499      	strb	r1, [r3, r2]

  return status;
 8006720:	230f      	movs	r3, #15
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	781b      	ldrb	r3, [r3, #0]
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b004      	add	sp, #16
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	ffff00ff 	.word	0xffff00ff

08006734 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	223c      	movs	r2, #60	; 0x3c
 8006742:	5c9b      	ldrb	r3, [r3, r2]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e032      	b.n	80067b2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	223c      	movs	r2, #60	; 0x3c
 8006750:	2101      	movs	r1, #1
 8006752:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	223d      	movs	r2, #61	; 0x3d
 8006758:	2102      	movs	r1, #2
 800675a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0011      	movs	r1, r2
 8006762:	0018      	movs	r0, r3
 8006764:	f000 fabe 	bl	8006ce4 <TIM_SlaveTimer_SetConfig>
 8006768:	1e03      	subs	r3, r0, #0
 800676a:	d009      	beq.n	8006780 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	223d      	movs	r2, #61	; 0x3d
 8006770:	2101      	movs	r1, #1
 8006772:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	223c      	movs	r2, #60	; 0x3c
 8006778:	2100      	movs	r1, #0
 800677a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e018      	b.n	80067b2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2140      	movs	r1, #64	; 0x40
 800678c:	438a      	bics	r2, r1
 800678e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4908      	ldr	r1, [pc, #32]	; (80067bc <HAL_TIM_SlaveConfigSynchro+0x88>)
 800679c:	400a      	ands	r2, r1
 800679e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	223d      	movs	r2, #61	; 0x3d
 80067a4:	2101      	movs	r1, #1
 80067a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	223c      	movs	r2, #60	; 0x3c
 80067ac:	2100      	movs	r1, #0
 80067ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b002      	add	sp, #8
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	ffffbfff 	.word	0xffffbfff

080067c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067c8:	46c0      	nop			; (mov r8, r8)
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b002      	add	sp, #8
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b002      	add	sp, #8
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067e8:	46c0      	nop			; (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b002      	add	sp, #8
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b002      	add	sp, #8
 80067fe:	bd80      	pop	{r7, pc}

08006800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a2f      	ldr	r2, [pc, #188]	; (80068d0 <TIM_Base_SetConfig+0xd0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0x20>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a2e      	ldr	r2, [pc, #184]	; (80068d4 <TIM_Base_SetConfig+0xd4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2270      	movs	r2, #112	; 0x70
 8006824:	4393      	bics	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <TIM_Base_SetConfig+0xd0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0x62>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a25      	ldr	r2, [pc, #148]	; (80068d4 <TIM_Base_SetConfig+0xd4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0x62>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a24      	ldr	r2, [pc, #144]	; (80068d8 <TIM_Base_SetConfig+0xd8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0x62>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a23      	ldr	r2, [pc, #140]	; (80068dc <TIM_Base_SetConfig+0xdc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0x62>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <TIM_Base_SetConfig+0xe0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0x62>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <TIM_Base_SetConfig+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <TIM_Base_SetConfig+0xe8>)
 8006866:	4013      	ands	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2280      	movs	r2, #128	; 0x80
 8006878:	4393      	bics	r3, r2
 800687a:	001a      	movs	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a0c      	ldr	r2, [pc, #48]	; (80068d0 <TIM_Base_SetConfig+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_Base_SetConfig+0xba>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <TIM_Base_SetConfig+0xdc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <TIM_Base_SetConfig+0xba>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <TIM_Base_SetConfig+0xe0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_Base_SetConfig+0xba>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a0b      	ldr	r2, [pc, #44]	; (80068e4 <TIM_Base_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d103      	bne.n	80068c2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	615a      	str	r2, [r3, #20]
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b004      	add	sp, #16
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40002000 	.word	0x40002000
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800
 80068e8:	fffffcff 	.word	0xfffffcff

080068ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	2201      	movs	r2, #1
 80068fc:	4393      	bics	r3, r2
 80068fe:	001a      	movs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2270      	movs	r2, #112	; 0x70
 800691a:	4393      	bics	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2203      	movs	r2, #3
 8006922:	4393      	bics	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2202      	movs	r2, #2
 8006934:	4393      	bics	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <TIM_OC1_SetConfig+0xf8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_OC1_SetConfig+0x76>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <TIM_OC1_SetConfig+0xfc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_OC1_SetConfig+0x76>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a25      	ldr	r2, [pc, #148]	; (80069ec <TIM_OC1_SetConfig+0x100>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC1_SetConfig+0x76>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <TIM_OC1_SetConfig+0x104>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10c      	bne.n	800697c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2208      	movs	r2, #8
 8006966:	4393      	bics	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2204      	movs	r2, #4
 8006978:	4393      	bics	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <TIM_OC1_SetConfig+0xf8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <TIM_OC1_SetConfig+0xb0>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <TIM_OC1_SetConfig+0xfc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <TIM_OC1_SetConfig+0xb0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <TIM_OC1_SetConfig+0x100>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC1_SetConfig+0xb0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <TIM_OC1_SetConfig+0x104>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d111      	bne.n	80069c0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <TIM_OC1_SetConfig+0x108>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <TIM_OC1_SetConfig+0x10c>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	46bd      	mov	sp, r7
 80069de:	b006      	add	sp, #24
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800
 80069f4:	fffffeff 	.word	0xfffffeff
 80069f8:	fffffdff 	.word	0xfffffdff

080069fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	4393      	bics	r3, r2
 8006a0e:	001a      	movs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a2e      	ldr	r2, [pc, #184]	; (8006ae4 <TIM_OC2_SetConfig+0xe8>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a2d      	ldr	r2, [pc, #180]	; (8006ae8 <TIM_OC2_SetConfig+0xec>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2220      	movs	r2, #32
 8006a46:	4393      	bics	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a24      	ldr	r2, [pc, #144]	; (8006aec <TIM_OC2_SetConfig+0xf0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10d      	bne.n	8006a7a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2280      	movs	r2, #128	; 0x80
 8006a62:	4393      	bics	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2240      	movs	r2, #64	; 0x40
 8006a76:	4393      	bics	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <TIM_OC2_SetConfig+0xf0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <TIM_OC2_SetConfig+0x9e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <TIM_OC2_SetConfig+0xf4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_OC2_SetConfig+0x9e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <TIM_OC2_SetConfig+0xf8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC2_SetConfig+0x9e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <TIM_OC2_SetConfig+0xfc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d113      	bne.n	8006ac2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4a17      	ldr	r2, [pc, #92]	; (8006afc <TIM_OC2_SetConfig+0x100>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <TIM_OC2_SetConfig+0x104>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	621a      	str	r2, [r3, #32]
}
 8006adc:	46c0      	nop			; (mov r8, r8)
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b006      	add	sp, #24
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	ffff8fff 	.word	0xffff8fff
 8006ae8:	fffffcff 	.word	0xfffffcff
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800
 8006afc:	fffffbff 	.word	0xfffffbff
 8006b00:	fffff7ff 	.word	0xfffff7ff

08006b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4a35      	ldr	r2, [pc, #212]	; (8006be8 <TIM_OC3_SetConfig+0xe4>)
 8006b14:	401a      	ands	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2270      	movs	r2, #112	; 0x70
 8006b30:	4393      	bics	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2203      	movs	r2, #3
 8006b38:	4393      	bics	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4a28      	ldr	r2, [pc, #160]	; (8006bec <TIM_OC3_SetConfig+0xe8>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <TIM_OC3_SetConfig+0xec>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d10d      	bne.n	8006b7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4a23      	ldr	r2, [pc, #140]	; (8006bf4 <TIM_OC3_SetConfig+0xf0>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <TIM_OC3_SetConfig+0xf4>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <TIM_OC3_SetConfig+0xec>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_OC3_SetConfig+0x9a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <TIM_OC3_SetConfig+0xf8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_OC3_SetConfig+0x9a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <TIM_OC3_SetConfig+0xfc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0x9a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1a      	ldr	r2, [pc, #104]	; (8006c04 <TIM_OC3_SetConfig+0x100>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d113      	bne.n	8006bc6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	4a19      	ldr	r2, [pc, #100]	; (8006c08 <TIM_OC3_SetConfig+0x104>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <TIM_OC3_SetConfig+0x108>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	46c0      	nop			; (mov r8, r8)
 8006be2:	46bd      	mov	sp, r7
 8006be4:	b006      	add	sp, #24
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	fffffeff 	.word	0xfffffeff
 8006bec:	fffffdff 	.word	0xfffffdff
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	fffff7ff 	.word	0xfffff7ff
 8006bf8:	fffffbff 	.word	0xfffffbff
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800
 8006c08:	ffffefff 	.word	0xffffefff
 8006c0c:	ffffdfff 	.word	0xffffdfff

08006c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	4a28      	ldr	r2, [pc, #160]	; (8006cc0 <TIM_OC4_SetConfig+0xb0>)
 8006c20:	401a      	ands	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a22      	ldr	r2, [pc, #136]	; (8006cc4 <TIM_OC4_SetConfig+0xb4>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4a21      	ldr	r2, [pc, #132]	; (8006cc8 <TIM_OC4_SetConfig+0xb8>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <TIM_OC4_SetConfig+0xbc>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <TIM_OC4_SetConfig+0xc0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_OC4_SetConfig+0x78>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a18      	ldr	r2, [pc, #96]	; (8006cd4 <TIM_OC4_SetConfig+0xc4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_OC4_SetConfig+0x78>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a17      	ldr	r2, [pc, #92]	; (8006cd8 <TIM_OC4_SetConfig+0xc8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC4_SetConfig+0x78>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <TIM_OC4_SetConfig+0xcc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d109      	bne.n	8006c9c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <TIM_OC4_SetConfig+0xd0>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b006      	add	sp, #24
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	ffffefff 	.word	0xffffefff
 8006cc4:	ffff8fff 	.word	0xffff8fff
 8006cc8:	fffffcff 	.word	0xfffffcff
 8006ccc:	ffffdfff 	.word	0xffffdfff
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800
 8006ce0:	ffffbfff 	.word	0xffffbfff

08006ce4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cee:	2317      	movs	r3, #23
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2270      	movs	r2, #112	; 0x70
 8006d02:	4393      	bics	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2207      	movs	r2, #7
 8006d14:	4393      	bics	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b70      	cmp	r3, #112	; 0x70
 8006d30:	d015      	beq.n	8006d5e <TIM_SlaveTimer_SetConfig+0x7a>
 8006d32:	d900      	bls.n	8006d36 <TIM_SlaveTimer_SetConfig+0x52>
 8006d34:	e05b      	b.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
 8006d36:	2b60      	cmp	r3, #96	; 0x60
 8006d38:	d04f      	beq.n	8006dda <TIM_SlaveTimer_SetConfig+0xf6>
 8006d3a:	d858      	bhi.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
 8006d3c:	2b50      	cmp	r3, #80	; 0x50
 8006d3e:	d042      	beq.n	8006dc6 <TIM_SlaveTimer_SetConfig+0xe2>
 8006d40:	d855      	bhi.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d016      	beq.n	8006d74 <TIM_SlaveTimer_SetConfig+0x90>
 8006d46:	d852      	bhi.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
 8006d48:	2b30      	cmp	r3, #48	; 0x30
 8006d4a:	d055      	beq.n	8006df8 <TIM_SlaveTimer_SetConfig+0x114>
 8006d4c:	d84f      	bhi.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d052      	beq.n	8006df8 <TIM_SlaveTimer_SetConfig+0x114>
 8006d52:	d84c      	bhi.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d04f      	beq.n	8006df8 <TIM_SlaveTimer_SetConfig+0x114>
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d04d      	beq.n	8006df8 <TIM_SlaveTimer_SetConfig+0x114>
 8006d5c:	e047      	b.n	8006dee <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f000 f8c5 	bl	8006efc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006d72:	e042      	b.n	8006dfa <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d101      	bne.n	8006d80 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e03f      	b.n	8006e00 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2101      	movs	r1, #1
 8006d94:	438a      	bics	r2, r1
 8006d96:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	22f0      	movs	r2, #240	; 0xf0
 8006da4:	4393      	bics	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]
      break;
 8006dc4:	e019      	b.n	8006dfa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6899      	ldr	r1, [r3, #8]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	f000 f818 	bl	8006e08 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006dd8:	e00f      	b.n	8006dfa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6899      	ldr	r1, [r3, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	001a      	movs	r2, r3
 8006de8:	f000 f83c 	bl	8006e64 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006dec:	e005      	b.n	8006dfa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006dee:	2317      	movs	r3, #23
 8006df0:	18fb      	adds	r3, r7, r3
 8006df2:	2201      	movs	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]
      break;
 8006df6:	e000      	b.n	8006dfa <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006df8:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8006dfa:	2317      	movs	r3, #23
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	781b      	ldrb	r3, [r3, #0]
}
 8006e00:	0018      	movs	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	b006      	add	sp, #24
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4393      	bics	r3, r2
 8006e22:	001a      	movs	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	22f0      	movs	r2, #240	; 0xf0
 8006e32:	4393      	bics	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	220a      	movs	r2, #10
 8006e44:	4393      	bics	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	621a      	str	r2, [r3, #32]
}
 8006e5c:	46c0      	nop			; (mov r8, r8)
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b006      	add	sp, #24
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	2210      	movs	r2, #16
 8006e76:	4393      	bics	r3, r2
 8006e78:	001a      	movs	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <TIM_TI2_ConfigInputStage+0x60>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	22a0      	movs	r2, #160	; 0xa0
 8006ea0:	4393      	bics	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b006      	add	sp, #24
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	ffff0fff 	.word	0xffff0fff

08006ec8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2270      	movs	r2, #112	; 0x70
 8006edc:	4393      	bics	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	609a      	str	r2, [r3, #8]
}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b004      	add	sp, #16
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <TIM_ETR_SetConfig+0x3c>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	021a      	lsls	r2, r3, #8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b006      	add	sp, #24
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	ffff00ff 	.word	0xffff00ff

08006f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	221f      	movs	r2, #31
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2201      	movs	r2, #1
 8006f50:	409a      	lsls	r2, r3
 8006f52:	0013      	movs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	43d2      	mvns	r2, r2
 8006f5e:	401a      	ands	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a1a      	ldr	r2, [r3, #32]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	211f      	movs	r1, #31
 8006f6c:	400b      	ands	r3, r1
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4099      	lsls	r1, r3
 8006f72:	000b      	movs	r3, r1
 8006f74:	431a      	orrs	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b006      	add	sp, #24
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	223c      	movs	r2, #60	; 0x3c
 8006f92:	5c9b      	ldrb	r3, [r3, r2]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e041      	b.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	223c      	movs	r2, #60	; 0x3c
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	223d      	movs	r2, #61	; 0x3d
 8006fa8:	2102      	movs	r1, #2
 8006faa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2270      	movs	r2, #112	; 0x70
 8006fc0:	4393      	bics	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a13      	ldr	r2, [pc, #76]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a11      	ldr	r2, [pc, #68]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a10      	ldr	r2, [pc, #64]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d10c      	bne.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2280      	movs	r2, #128	; 0x80
 8006ff8:	4393      	bics	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	4313      	orrs	r3, r2
 8007004:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	223d      	movs	r2, #61	; 0x3d
 8007012:	2101      	movs	r1, #1
 8007014:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	223c      	movs	r2, #60	; 0x3c
 800701a:	2100      	movs	r1, #0
 800701c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40000400 	.word	0x40000400
 8007030:	40014000 	.word	0x40014000

08007034 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	223c      	movs	r2, #60	; 0x3c
 8007046:	5c9b      	ldrb	r3, [r3, r2]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800704c:	2302      	movs	r3, #2
 800704e:	e03e      	b.n	80070ce <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	223c      	movs	r2, #60	; 0x3c
 8007054:	2101      	movs	r1, #1
 8007056:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	22ff      	movs	r2, #255	; 0xff
 800705c:	4393      	bics	r3, r2
 800705e:	001a      	movs	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800706c:	401a      	ands	r2, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a18      	ldr	r2, [pc, #96]	; (80070dc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800707a:	401a      	ands	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007088:	401a      	ands	r2, r3
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007096:	401a      	ands	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80070a4:	401a      	ands	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4a0e      	ldr	r2, [pc, #56]	; (80070ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80070b2:	401a      	ands	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	223c      	movs	r2, #60	; 0x3c
 80070c8:	2100      	movs	r1, #0
 80070ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	0018      	movs	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b004      	add	sp, #16
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	fffffcff 	.word	0xfffffcff
 80070dc:	fffffbff 	.word	0xfffffbff
 80070e0:	fffff7ff 	.word	0xfffff7ff
 80070e4:	ffffefff 	.word	0xffffefff
 80070e8:	ffffdfff 	.word	0xffffdfff
 80070ec:	ffffbfff 	.word	0xffffbfff

080070f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b002      	add	sp, #8
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b002      	add	sp, #8
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e044      	b.n	80071ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d107      	bne.n	800713a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2278      	movs	r2, #120	; 0x78
 800712e:	2100      	movs	r1, #0
 8007130:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f7fc fd2f 	bl	8003b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2224      	movs	r2, #36	; 0x24
 800713e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2101      	movs	r1, #1
 800714c:	438a      	bics	r2, r1
 800714e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	0018      	movs	r0, r3
 8007154:	f000 fc0c 	bl	8007970 <UART_SetConfig>
 8007158:	0003      	movs	r3, r0
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e024      	b.n	80071ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0018      	movs	r0, r3
 800716e:	f000 fd3f 	bl	8007bf0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	490d      	ldr	r1, [pc, #52]	; (80071b4 <HAL_UART_Init+0xa4>)
 800717e:	400a      	ands	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2108      	movs	r1, #8
 800718e:	438a      	bics	r2, r1
 8007190:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2101      	movs	r1, #1
 800719e:	430a      	orrs	r2, r1
 80071a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	0018      	movs	r0, r3
 80071a6:	f000 fdd7 	bl	8007d58 <UART_CheckIdleState>
 80071aa:	0003      	movs	r3, r0
}
 80071ac:	0018      	movs	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b002      	add	sp, #8
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	fffff7ff 	.word	0xfffff7ff

080071b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	; 0x28
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	1dbb      	adds	r3, r7, #6
 80071c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d000      	beq.n	80071d2 <HAL_UART_Transmit+0x1a>
 80071d0:	e08d      	b.n	80072ee <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_UART_Transmit+0x28>
 80071d8:	1dbb      	adds	r3, r7, #6
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e085      	b.n	80072f0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	015b      	lsls	r3, r3, #5
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d109      	bne.n	8007204 <HAL_UART_Transmit+0x4c>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2201      	movs	r2, #1
 80071fc:	4013      	ands	r3, r2
 80071fe:	d001      	beq.n	8007204 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e075      	b.n	80072f0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2284      	movs	r2, #132	; 0x84
 8007208:	2100      	movs	r1, #0
 800720a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2221      	movs	r2, #33	; 0x21
 8007210:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007212:	f7fc fde7 	bl	8003de4 <HAL_GetTick>
 8007216:	0003      	movs	r3, r0
 8007218:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1dba      	adds	r2, r7, #6
 800721e:	2150      	movs	r1, #80	; 0x50
 8007220:	8812      	ldrh	r2, [r2, #0]
 8007222:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	1dba      	adds	r2, r7, #6
 8007228:	2152      	movs	r1, #82	; 0x52
 800722a:	8812      	ldrh	r2, [r2, #0]
 800722c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	015b      	lsls	r3, r3, #5
 8007236:	429a      	cmp	r2, r3
 8007238:	d108      	bne.n	800724c <HAL_UART_Transmit+0x94>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e003      	b.n	8007254 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007254:	e030      	b.n	80072b8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	0013      	movs	r3, r2
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	f000 fe20 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007268:	1e03      	subs	r3, r0, #0
 800726a:	d004      	beq.n	8007276 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e03c      	b.n	80072f0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	05d2      	lsls	r2, r2, #23
 8007286:	0dd2      	lsrs	r2, r2, #23
 8007288:	b292      	uxth	r2, r2
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	3302      	adds	r3, #2
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e008      	b.n	80072a6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	781a      	ldrb	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	b292      	uxth	r2, r2
 800729e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	3301      	adds	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2252      	movs	r2, #82	; 0x52
 80072aa:	5a9b      	ldrh	r3, [r3, r2]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b299      	uxth	r1, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2252      	movs	r2, #82	; 0x52
 80072b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2252      	movs	r2, #82	; 0x52
 80072bc:	5a9b      	ldrh	r3, [r3, r2]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1c8      	bne.n	8007256 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	0013      	movs	r3, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	2140      	movs	r1, #64	; 0x40
 80072d2:	f000 fde9 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 80072d6:	1e03      	subs	r3, r0, #0
 80072d8:	d004      	beq.n	80072e4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e005      	b.n	80072f0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e000      	b.n	80072f0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
  }
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b008      	add	sp, #32
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	1dbb      	adds	r3, r7, #6
 8007304:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	589b      	ldr	r3, [r3, r2]
 800730c:	2b20      	cmp	r3, #32
 800730e:	d145      	bne.n	800739c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_UART_Receive_IT+0x26>
 8007316:	1dbb      	adds	r3, r7, #6
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e03d      	b.n	800739e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	015b      	lsls	r3, r3, #5
 800732a:	429a      	cmp	r2, r3
 800732c:	d109      	bne.n	8007342 <HAL_UART_Receive_IT+0x4a>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2201      	movs	r2, #1
 800733a:	4013      	ands	r3, r2
 800733c:	d001      	beq.n	8007342 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e02d      	b.n	800739e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	2380      	movs	r3, #128	; 0x80
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	4013      	ands	r3, r2
 8007354:	d019      	beq.n	800738a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	613b      	str	r3, [r7, #16]
  return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	2301      	movs	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	04c9      	lsls	r1, r1, #19
 800737a:	430a      	orrs	r2, r1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f383 8810 	msr	PRIMASK, r3
}
 8007388:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800738a:	1dbb      	adds	r3, r7, #6
 800738c:	881a      	ldrh	r2, [r3, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fdf2 	bl	8007f7c <UART_Start_Receive_IT>
 8007398:	0003      	movs	r3, r0
 800739a:	e000      	b.n	800739e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
  }
}
 800739e:	0018      	movs	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b008      	add	sp, #32
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b0ab      	sub	sp, #172	; 0xac
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	22a4      	movs	r2, #164	; 0xa4
 80073b8:	18b9      	adds	r1, r7, r2
 80073ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	20a0      	movs	r0, #160	; 0xa0
 80073c4:	1839      	adds	r1, r7, r0
 80073c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	219c      	movs	r1, #156	; 0x9c
 80073d0:	1879      	adds	r1, r7, r1
 80073d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073d4:	0011      	movs	r1, r2
 80073d6:	18bb      	adds	r3, r7, r2
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a99      	ldr	r2, [pc, #612]	; (8007640 <HAL_UART_IRQHandler+0x298>)
 80073dc:	4013      	ands	r3, r2
 80073de:	2298      	movs	r2, #152	; 0x98
 80073e0:	18bc      	adds	r4, r7, r2
 80073e2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80073e4:	18bb      	adds	r3, r7, r2
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d114      	bne.n	8007416 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073ec:	187b      	adds	r3, r7, r1
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2220      	movs	r2, #32
 80073f2:	4013      	ands	r3, r2
 80073f4:	d00f      	beq.n	8007416 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073f6:	183b      	adds	r3, r7, r0
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2220      	movs	r2, #32
 80073fc:	4013      	ands	r3, r2
 80073fe:	d00a      	beq.n	8007416 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007404:	2b00      	cmp	r3, #0
 8007406:	d100      	bne.n	800740a <HAL_UART_IRQHandler+0x62>
 8007408:	e286      	b.n	8007918 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	0010      	movs	r0, r2
 8007412:	4798      	blx	r3
      }
      return;
 8007414:	e280      	b.n	8007918 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007416:	2398      	movs	r3, #152	; 0x98
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d100      	bne.n	8007422 <HAL_UART_IRQHandler+0x7a>
 8007420:	e114      	b.n	800764c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007422:	239c      	movs	r3, #156	; 0x9c
 8007424:	18fb      	adds	r3, r7, r3
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2201      	movs	r2, #1
 800742a:	4013      	ands	r3, r2
 800742c:	d106      	bne.n	800743c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800742e:	23a0      	movs	r3, #160	; 0xa0
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a83      	ldr	r2, [pc, #524]	; (8007644 <HAL_UART_IRQHandler+0x29c>)
 8007436:	4013      	ands	r3, r2
 8007438:	d100      	bne.n	800743c <HAL_UART_IRQHandler+0x94>
 800743a:	e107      	b.n	800764c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800743c:	23a4      	movs	r3, #164	; 0xa4
 800743e:	18fb      	adds	r3, r7, r3
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2201      	movs	r2, #1
 8007444:	4013      	ands	r3, r2
 8007446:	d012      	beq.n	800746e <HAL_UART_IRQHandler+0xc6>
 8007448:	23a0      	movs	r3, #160	; 0xa0
 800744a:	18fb      	adds	r3, r7, r3
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	2380      	movs	r3, #128	; 0x80
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	4013      	ands	r3, r2
 8007454:	d00b      	beq.n	800746e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2201      	movs	r2, #1
 800745c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2284      	movs	r2, #132	; 0x84
 8007462:	589b      	ldr	r3, [r3, r2]
 8007464:	2201      	movs	r2, #1
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2184      	movs	r1, #132	; 0x84
 800746c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800746e:	23a4      	movs	r3, #164	; 0xa4
 8007470:	18fb      	adds	r3, r7, r3
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2202      	movs	r2, #2
 8007476:	4013      	ands	r3, r2
 8007478:	d011      	beq.n	800749e <HAL_UART_IRQHandler+0xf6>
 800747a:	239c      	movs	r3, #156	; 0x9c
 800747c:	18fb      	adds	r3, r7, r3
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	4013      	ands	r3, r2
 8007484:	d00b      	beq.n	800749e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2202      	movs	r2, #2
 800748c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2284      	movs	r2, #132	; 0x84
 8007492:	589b      	ldr	r3, [r3, r2]
 8007494:	2204      	movs	r2, #4
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2184      	movs	r1, #132	; 0x84
 800749c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800749e:	23a4      	movs	r3, #164	; 0xa4
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2204      	movs	r2, #4
 80074a6:	4013      	ands	r3, r2
 80074a8:	d011      	beq.n	80074ce <HAL_UART_IRQHandler+0x126>
 80074aa:	239c      	movs	r3, #156	; 0x9c
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2201      	movs	r2, #1
 80074b2:	4013      	ands	r3, r2
 80074b4:	d00b      	beq.n	80074ce <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2204      	movs	r2, #4
 80074bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2284      	movs	r2, #132	; 0x84
 80074c2:	589b      	ldr	r3, [r3, r2]
 80074c4:	2202      	movs	r2, #2
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2184      	movs	r1, #132	; 0x84
 80074cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074ce:	23a4      	movs	r3, #164	; 0xa4
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2208      	movs	r2, #8
 80074d6:	4013      	ands	r3, r2
 80074d8:	d017      	beq.n	800750a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074da:	23a0      	movs	r3, #160	; 0xa0
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2220      	movs	r2, #32
 80074e2:	4013      	ands	r3, r2
 80074e4:	d105      	bne.n	80074f2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074e6:	239c      	movs	r3, #156	; 0x9c
 80074e8:	18fb      	adds	r3, r7, r3
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2201      	movs	r2, #1
 80074ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074f0:	d00b      	beq.n	800750a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2208      	movs	r2, #8
 80074f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2284      	movs	r2, #132	; 0x84
 80074fe:	589b      	ldr	r3, [r3, r2]
 8007500:	2208      	movs	r2, #8
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2184      	movs	r1, #132	; 0x84
 8007508:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800750a:	23a4      	movs	r3, #164	; 0xa4
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	4013      	ands	r3, r2
 8007516:	d013      	beq.n	8007540 <HAL_UART_IRQHandler+0x198>
 8007518:	23a0      	movs	r3, #160	; 0xa0
 800751a:	18fb      	adds	r3, r7, r3
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	04db      	lsls	r3, r3, #19
 8007522:	4013      	ands	r3, r2
 8007524:	d00c      	beq.n	8007540 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2280      	movs	r2, #128	; 0x80
 800752c:	0112      	lsls	r2, r2, #4
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2284      	movs	r2, #132	; 0x84
 8007534:	589b      	ldr	r3, [r3, r2]
 8007536:	2220      	movs	r2, #32
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2184      	movs	r1, #132	; 0x84
 800753e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2284      	movs	r2, #132	; 0x84
 8007544:	589b      	ldr	r3, [r3, r2]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d100      	bne.n	800754c <HAL_UART_IRQHandler+0x1a4>
 800754a:	e1e7      	b.n	800791c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800754c:	23a4      	movs	r3, #164	; 0xa4
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2220      	movs	r2, #32
 8007554:	4013      	ands	r3, r2
 8007556:	d00e      	beq.n	8007576 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007558:	23a0      	movs	r3, #160	; 0xa0
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2220      	movs	r2, #32
 8007560:	4013      	ands	r3, r2
 8007562:	d008      	beq.n	8007576 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	0010      	movs	r0, r2
 8007574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2284      	movs	r2, #132	; 0x84
 800757a:	589b      	ldr	r3, [r3, r2]
 800757c:	2194      	movs	r1, #148	; 0x94
 800757e:	187a      	adds	r2, r7, r1
 8007580:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2240      	movs	r2, #64	; 0x40
 800758a:	4013      	ands	r3, r2
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d004      	beq.n	800759a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007590:	187b      	adds	r3, r7, r1
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2228      	movs	r2, #40	; 0x28
 8007596:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007598:	d047      	beq.n	800762a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f000 fda3 	bl	80080e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2240      	movs	r2, #64	; 0x40
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d137      	bne.n	8007620 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b0:	f3ef 8310 	mrs	r3, PRIMASK
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80075b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b8:	2090      	movs	r0, #144	; 0x90
 80075ba:	183a      	adds	r2, r7, r0
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	2301      	movs	r3, #1
 80075c0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c4:	f383 8810 	msr	PRIMASK, r3
}
 80075c8:	46c0      	nop			; (mov r8, r8)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2140      	movs	r1, #64	; 0x40
 80075d6:	438a      	bics	r2, r1
 80075d8:	609a      	str	r2, [r3, #8]
 80075da:	183b      	adds	r3, r7, r0
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075e2:	f383 8810 	msr	PRIMASK, r3
}
 80075e6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f4:	4a14      	ldr	r2, [pc, #80]	; (8007648 <HAL_UART_IRQHandler+0x2a0>)
 80075f6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fc:	0018      	movs	r0, r3
 80075fe:	f7fd f98f 	bl	8004920 <HAL_DMA_Abort_IT>
 8007602:	1e03      	subs	r3, r0, #0
 8007604:	d01a      	beq.n	800763c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007610:	0018      	movs	r0, r3
 8007612:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	e012      	b.n	800763c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	0018      	movs	r0, r3
 800761a:	f000 f995 	bl	8007948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761e:	e00d      	b.n	800763c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	0018      	movs	r0, r3
 8007624:	f000 f990 	bl	8007948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	e008      	b.n	800763c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f98b 	bl	8007948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2284      	movs	r2, #132	; 0x84
 8007636:	2100      	movs	r1, #0
 8007638:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800763a:	e16f      	b.n	800791c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763c:	46c0      	nop			; (mov r8, r8)
    return;
 800763e:	e16d      	b.n	800791c <HAL_UART_IRQHandler+0x574>
 8007640:	0000080f 	.word	0x0000080f
 8007644:	04000120 	.word	0x04000120
 8007648:	080081b1 	.word	0x080081b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007650:	2b01      	cmp	r3, #1
 8007652:	d000      	beq.n	8007656 <HAL_UART_IRQHandler+0x2ae>
 8007654:	e139      	b.n	80078ca <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007656:	23a4      	movs	r3, #164	; 0xa4
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2210      	movs	r2, #16
 800765e:	4013      	ands	r3, r2
 8007660:	d100      	bne.n	8007664 <HAL_UART_IRQHandler+0x2bc>
 8007662:	e132      	b.n	80078ca <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007664:	23a0      	movs	r3, #160	; 0xa0
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2210      	movs	r2, #16
 800766c:	4013      	ands	r3, r2
 800766e:	d100      	bne.n	8007672 <HAL_UART_IRQHandler+0x2ca>
 8007670:	e12b      	b.n	80078ca <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2210      	movs	r2, #16
 8007678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2240      	movs	r2, #64	; 0x40
 8007682:	4013      	ands	r3, r2
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d000      	beq.n	800768a <HAL_UART_IRQHandler+0x2e2>
 8007688:	e09f      	b.n	80077ca <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	217e      	movs	r1, #126	; 0x7e
 8007694:	187b      	adds	r3, r7, r1
 8007696:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007698:	187b      	adds	r3, r7, r1
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d100      	bne.n	80076a2 <HAL_UART_IRQHandler+0x2fa>
 80076a0:	e13e      	b.n	8007920 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2258      	movs	r2, #88	; 0x58
 80076a6:	5a9b      	ldrh	r3, [r3, r2]
 80076a8:	187a      	adds	r2, r7, r1
 80076aa:	8812      	ldrh	r2, [r2, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d300      	bcc.n	80076b2 <HAL_UART_IRQHandler+0x30a>
 80076b0:	e136      	b.n	8007920 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	187a      	adds	r2, r7, r1
 80076b6:	215a      	movs	r1, #90	; 0x5a
 80076b8:	8812      	ldrh	r2, [r2, #0]
 80076ba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d06f      	beq.n	80077a6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c6:	f3ef 8310 	mrs	r3, PRIMASK
 80076ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80076d0:	2301      	movs	r3, #1
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d6:	f383 8810 	msr	PRIMASK, r3
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4992      	ldr	r1, [pc, #584]	; (8007930 <HAL_UART_IRQHandler+0x588>)
 80076e8:	400a      	ands	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	f383 8810 	msr	PRIMASK, r3
}
 80076f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f8:	f3ef 8310 	mrs	r3, PRIMASK
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80076fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007700:	677b      	str	r3, [r7, #116]	; 0x74
 8007702:	2301      	movs	r3, #1
 8007704:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2101      	movs	r1, #1
 800771a:	438a      	bics	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
 800771e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007720:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007724:	f383 8810 	msr	PRIMASK, r3
}
 8007728:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800772a:	f3ef 8310 	mrs	r3, PRIMASK
 800772e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007730:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007732:	673b      	str	r3, [r7, #112]	; 0x70
 8007734:	2301      	movs	r3, #1
 8007736:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	f383 8810 	msr	PRIMASK, r3
}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2140      	movs	r1, #64	; 0x40
 800774c:	438a      	bics	r2, r1
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007752:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007756:	f383 8810 	msr	PRIMASK, r3
}
 800775a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	2120      	movs	r1, #32
 8007762:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776a:	f3ef 8310 	mrs	r3, PRIMASK
 800776e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007770:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007774:	2301      	movs	r3, #1
 8007776:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2110      	movs	r1, #16
 800778c:	438a      	bics	r2, r1
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7fd f885 	bl	80048b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2258      	movs	r2, #88	; 0x58
 80077b0:	5a9a      	ldrh	r2, [r3, r2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	215a      	movs	r1, #90	; 0x5a
 80077b6:	5a5b      	ldrh	r3, [r3, r1]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	b29a      	uxth	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	0011      	movs	r1, r2
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 f8c8 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077c8:	e0aa      	b.n	8007920 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2258      	movs	r2, #88	; 0x58
 80077ce:	5a99      	ldrh	r1, [r3, r2]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	225a      	movs	r2, #90	; 0x5a
 80077d4:	5a9b      	ldrh	r3, [r3, r2]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	208e      	movs	r0, #142	; 0x8e
 80077da:	183b      	adds	r3, r7, r0
 80077dc:	1a8a      	subs	r2, r1, r2
 80077de:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	225a      	movs	r2, #90	; 0x5a
 80077e4:	5a9b      	ldrh	r3, [r3, r2]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d100      	bne.n	80077ee <HAL_UART_IRQHandler+0x446>
 80077ec:	e09a      	b.n	8007924 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80077ee:	183b      	adds	r3, r7, r0
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d100      	bne.n	80077f8 <HAL_UART_IRQHandler+0x450>
 80077f6:	e095      	b.n	8007924 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f8:	f3ef 8310 	mrs	r3, PRIMASK
 80077fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80077fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007800:	2488      	movs	r4, #136	; 0x88
 8007802:	193a      	adds	r2, r7, r4
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	2301      	movs	r3, #1
 8007808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f383 8810 	msr	PRIMASK, r3
}
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4945      	ldr	r1, [pc, #276]	; (8007934 <HAL_UART_IRQHandler+0x58c>)
 800781e:	400a      	ands	r2, r1
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	193b      	adds	r3, r7, r4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f383 8810 	msr	PRIMASK, r3
}
 800782e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007830:	f3ef 8310 	mrs	r3, PRIMASK
 8007834:	61bb      	str	r3, [r7, #24]
  return(result);
 8007836:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	2484      	movs	r4, #132	; 0x84
 800783a:	193a      	adds	r2, r7, r4
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	2301      	movs	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f383 8810 	msr	PRIMASK, r3
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2101      	movs	r1, #1
 8007856:	438a      	bics	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
 800785a:	193b      	adds	r3, r7, r4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	f383 8810 	msr	PRIMASK, r3
}
 8007866:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2280      	movs	r2, #128	; 0x80
 800786c:	2120      	movs	r1, #32
 800786e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787c:	f3ef 8310 	mrs	r3, PRIMASK
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	2480      	movs	r4, #128	; 0x80
 8007886:	193a      	adds	r2, r7, r4
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	2301      	movs	r3, #1
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	f383 8810 	msr	PRIMASK, r3
}
 8007894:	46c0      	nop			; (mov r8, r8)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2110      	movs	r1, #16
 80078a2:	438a      	bics	r2, r1
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	193b      	adds	r3, r7, r4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	f383 8810 	msr	PRIMASK, r3
}
 80078b2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ba:	183b      	adds	r3, r7, r0
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0011      	movs	r1, r2
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 f848 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078c8:	e02c      	b.n	8007924 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078ca:	23a4      	movs	r3, #164	; 0xa4
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2280      	movs	r2, #128	; 0x80
 80078d2:	4013      	ands	r3, r2
 80078d4:	d00f      	beq.n	80078f6 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078d6:	23a0      	movs	r3, #160	; 0xa0
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	4013      	ands	r3, r2
 80078e0:	d009      	beq.n	80078f6 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d01e      	beq.n	8007928 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	0010      	movs	r0, r2
 80078f2:	4798      	blx	r3
    }
    return;
 80078f4:	e018      	b.n	8007928 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078f6:	23a4      	movs	r3, #164	; 0xa4
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2240      	movs	r2, #64	; 0x40
 80078fe:	4013      	ands	r3, r2
 8007900:	d013      	beq.n	800792a <HAL_UART_IRQHandler+0x582>
 8007902:	23a0      	movs	r3, #160	; 0xa0
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2240      	movs	r2, #64	; 0x40
 800790a:	4013      	ands	r3, r2
 800790c:	d00d      	beq.n	800792a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	0018      	movs	r0, r3
 8007912:	f000 fc64 	bl	80081de <UART_EndTransmit_IT>
    return;
 8007916:	e008      	b.n	800792a <HAL_UART_IRQHandler+0x582>
      return;
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	e006      	b.n	800792a <HAL_UART_IRQHandler+0x582>
    return;
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	e004      	b.n	800792a <HAL_UART_IRQHandler+0x582>
      return;
 8007920:	46c0      	nop			; (mov r8, r8)
 8007922:	e002      	b.n	800792a <HAL_UART_IRQHandler+0x582>
      return;
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	e000      	b.n	800792a <HAL_UART_IRQHandler+0x582>
    return;
 8007928:	46c0      	nop			; (mov r8, r8)
  }

}
 800792a:	46bd      	mov	sp, r7
 800792c:	b02b      	add	sp, #172	; 0xac
 800792e:	bd90      	pop	{r4, r7, pc}
 8007930:	fffffeff 	.word	0xfffffeff
 8007934:	fffffedf 	.word	0xfffffedf

08007938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	b002      	add	sp, #8
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007950:	46c0      	nop			; (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	b002      	add	sp, #8
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	000a      	movs	r2, r1
 8007962:	1cbb      	adds	r3, r7, #2
 8007964:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	46bd      	mov	sp, r7
 800796a:	b002      	add	sp, #8
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007978:	231e      	movs	r3, #30
 800797a:	18fb      	adds	r3, r7, r3
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a8d      	ldr	r2, [pc, #564]	; (8007bd4 <UART_SetConfig+0x264>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	0019      	movs	r1, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4a88      	ldr	r2, [pc, #544]	; (8007bd8 <UART_SetConfig+0x268>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	0019      	movs	r1, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	4a7f      	ldr	r2, [pc, #508]	; (8007bdc <UART_SetConfig+0x26c>)
 80079de:	4013      	ands	r3, r2
 80079e0:	0019      	movs	r1, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a7b      	ldr	r2, [pc, #492]	; (8007be0 <UART_SetConfig+0x270>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d127      	bne.n	8007a46 <UART_SetConfig+0xd6>
 80079f6:	4b7b      	ldr	r3, [pc, #492]	; (8007be4 <UART_SetConfig+0x274>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	2203      	movs	r2, #3
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d00d      	beq.n	8007a1e <UART_SetConfig+0xae>
 8007a02:	d81b      	bhi.n	8007a3c <UART_SetConfig+0xcc>
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d014      	beq.n	8007a32 <UART_SetConfig+0xc2>
 8007a08:	d818      	bhi.n	8007a3c <UART_SetConfig+0xcc>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <UART_SetConfig+0xa4>
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00a      	beq.n	8007a28 <UART_SetConfig+0xb8>
 8007a12:	e013      	b.n	8007a3c <UART_SetConfig+0xcc>
 8007a14:	231f      	movs	r3, #31
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	2200      	movs	r2, #0
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e021      	b.n	8007a62 <UART_SetConfig+0xf2>
 8007a1e:	231f      	movs	r3, #31
 8007a20:	18fb      	adds	r3, r7, r3
 8007a22:	2202      	movs	r2, #2
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e01c      	b.n	8007a62 <UART_SetConfig+0xf2>
 8007a28:	231f      	movs	r3, #31
 8007a2a:	18fb      	adds	r3, r7, r3
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e017      	b.n	8007a62 <UART_SetConfig+0xf2>
 8007a32:	231f      	movs	r3, #31
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	2208      	movs	r2, #8
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e012      	b.n	8007a62 <UART_SetConfig+0xf2>
 8007a3c:	231f      	movs	r3, #31
 8007a3e:	18fb      	adds	r3, r7, r3
 8007a40:	2210      	movs	r2, #16
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e00d      	b.n	8007a62 <UART_SetConfig+0xf2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a67      	ldr	r2, [pc, #412]	; (8007be8 <UART_SetConfig+0x278>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d104      	bne.n	8007a5a <UART_SetConfig+0xea>
 8007a50:	231f      	movs	r3, #31
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e003      	b.n	8007a62 <UART_SetConfig+0xf2>
 8007a5a:	231f      	movs	r3, #31
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	2210      	movs	r2, #16
 8007a60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69da      	ldr	r2, [r3, #28]
 8007a66:	2380      	movs	r3, #128	; 0x80
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d15c      	bne.n	8007b28 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8007a6e:	231f      	movs	r3, #31
 8007a70:	18fb      	adds	r3, r7, r3
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d015      	beq.n	8007aa4 <UART_SetConfig+0x134>
 8007a78:	dc18      	bgt.n	8007aac <UART_SetConfig+0x13c>
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d00d      	beq.n	8007a9a <UART_SetConfig+0x12a>
 8007a7e:	dc15      	bgt.n	8007aac <UART_SetConfig+0x13c>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <UART_SetConfig+0x11a>
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d005      	beq.n	8007a94 <UART_SetConfig+0x124>
 8007a88:	e010      	b.n	8007aac <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a8a:	f7fd fea3 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	61bb      	str	r3, [r7, #24]
        break;
 8007a92:	e012      	b.n	8007aba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a94:	4b55      	ldr	r3, [pc, #340]	; (8007bec <UART_SetConfig+0x27c>)
 8007a96:	61bb      	str	r3, [r7, #24]
        break;
 8007a98:	e00f      	b.n	8007aba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a9a:	f7fd fe3b 	bl	8005714 <HAL_RCC_GetSysClockFreq>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	61bb      	str	r3, [r7, #24]
        break;
 8007aa2:	e00a      	b.n	8007aba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	61bb      	str	r3, [r7, #24]
        break;
 8007aaa:	e006      	b.n	8007aba <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ab0:	231e      	movs	r3, #30
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	701a      	strb	r2, [r3, #0]
        break;
 8007ab8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d100      	bne.n	8007ac2 <UART_SetConfig+0x152>
 8007ac0:	e07a      	b.n	8007bb8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	005a      	lsls	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	18d2      	adds	r2, r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	0019      	movs	r1, r3
 8007ad4:	0010      	movs	r0, r2
 8007ad6:	f7f8 fb3d 	bl	8000154 <__udivsi3>
 8007ada:	0003      	movs	r3, r0
 8007adc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b0f      	cmp	r3, #15
 8007ae2:	d91c      	bls.n	8007b1e <UART_SetConfig+0x1ae>
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	2380      	movs	r3, #128	; 0x80
 8007ae8:	025b      	lsls	r3, r3, #9
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d217      	bcs.n	8007b1e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	200e      	movs	r0, #14
 8007af4:	183b      	adds	r3, r7, r0
 8007af6:	210f      	movs	r1, #15
 8007af8:	438a      	bics	r2, r1
 8007afa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2207      	movs	r2, #7
 8007b04:	4013      	ands	r3, r2
 8007b06:	b299      	uxth	r1, r3
 8007b08:	183b      	adds	r3, r7, r0
 8007b0a:	183a      	adds	r2, r7, r0
 8007b0c:	8812      	ldrh	r2, [r2, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	183a      	adds	r2, r7, r0
 8007b18:	8812      	ldrh	r2, [r2, #0]
 8007b1a:	60da      	str	r2, [r3, #12]
 8007b1c:	e04c      	b.n	8007bb8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1e:	231e      	movs	r3, #30
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	e047      	b.n	8007bb8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b28:	231f      	movs	r3, #31
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d015      	beq.n	8007b5e <UART_SetConfig+0x1ee>
 8007b32:	dc18      	bgt.n	8007b66 <UART_SetConfig+0x1f6>
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d00d      	beq.n	8007b54 <UART_SetConfig+0x1e4>
 8007b38:	dc15      	bgt.n	8007b66 <UART_SetConfig+0x1f6>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <UART_SetConfig+0x1d4>
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d005      	beq.n	8007b4e <UART_SetConfig+0x1de>
 8007b42:	e010      	b.n	8007b66 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fd fe46 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8007b48:	0003      	movs	r3, r0
 8007b4a:	61bb      	str	r3, [r7, #24]
        break;
 8007b4c:	e012      	b.n	8007b74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b4e:	4b27      	ldr	r3, [pc, #156]	; (8007bec <UART_SetConfig+0x27c>)
 8007b50:	61bb      	str	r3, [r7, #24]
        break;
 8007b52:	e00f      	b.n	8007b74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b54:	f7fd fdde 	bl	8005714 <HAL_RCC_GetSysClockFreq>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	61bb      	str	r3, [r7, #24]
        break;
 8007b5c:	e00a      	b.n	8007b74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b5e:	2380      	movs	r3, #128	; 0x80
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	61bb      	str	r3, [r7, #24]
        break;
 8007b64:	e006      	b.n	8007b74 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b6a:	231e      	movs	r3, #30
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	2201      	movs	r2, #1
 8007b70:	701a      	strb	r2, [r3, #0]
        break;
 8007b72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d01e      	beq.n	8007bb8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085a      	lsrs	r2, r3, #1
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	18d2      	adds	r2, r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	0019      	movs	r1, r3
 8007b8a:	0010      	movs	r0, r2
 8007b8c:	f7f8 fae2 	bl	8000154 <__udivsi3>
 8007b90:	0003      	movs	r3, r0
 8007b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d90a      	bls.n	8007bb0 <UART_SetConfig+0x240>
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	025b      	lsls	r3, r3, #9
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d205      	bcs.n	8007bb0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	e003      	b.n	8007bb8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8007bb0:	231e      	movs	r3, #30
 8007bb2:	18fb      	adds	r3, r7, r3
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007bc4:	231e      	movs	r3, #30
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	781b      	ldrb	r3, [r3, #0]
}
 8007bca:	0018      	movs	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	b008      	add	sp, #32
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	ffff69f3 	.word	0xffff69f3
 8007bd8:	ffffcfff 	.word	0xffffcfff
 8007bdc:	fffff4ff 	.word	0xfffff4ff
 8007be0:	40013800 	.word	0x40013800
 8007be4:	40021000 	.word	0x40021000
 8007be8:	40004400 	.word	0x40004400
 8007bec:	007a1200 	.word	0x007a1200

08007bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a4a      	ldr	r2, [pc, #296]	; (8007d34 <UART_AdvFeatureConfig+0x144>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2202      	movs	r2, #2
 8007c20:	4013      	ands	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	4a43      	ldr	r2, [pc, #268]	; (8007d38 <UART_AdvFeatureConfig+0x148>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	0019      	movs	r1, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2204      	movs	r2, #4
 8007c42:	4013      	ands	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a3b      	ldr	r2, [pc, #236]	; (8007d3c <UART_AdvFeatureConfig+0x14c>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	0019      	movs	r1, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	2208      	movs	r2, #8
 8007c64:	4013      	ands	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4a34      	ldr	r2, [pc, #208]	; (8007d40 <UART_AdvFeatureConfig+0x150>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2210      	movs	r2, #16
 8007c86:	4013      	ands	r3, r2
 8007c88:	d00b      	beq.n	8007ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <UART_AdvFeatureConfig+0x154>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	0019      	movs	r1, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d00b      	beq.n	8007cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	4a25      	ldr	r2, [pc, #148]	; (8007d48 <UART_AdvFeatureConfig+0x158>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	0019      	movs	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2240      	movs	r2, #64	; 0x40
 8007cca:	4013      	ands	r3, r2
 8007ccc:	d01d      	beq.n	8007d0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4a1d      	ldr	r2, [pc, #116]	; (8007d4c <UART_AdvFeatureConfig+0x15c>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	0019      	movs	r1, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	035b      	lsls	r3, r3, #13
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d10b      	bne.n	8007d0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	4a15      	ldr	r2, [pc, #84]	; (8007d50 <UART_AdvFeatureConfig+0x160>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	0019      	movs	r1, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2280      	movs	r2, #128	; 0x80
 8007d10:	4013      	ands	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4a0e      	ldr	r2, [pc, #56]	; (8007d54 <UART_AdvFeatureConfig+0x164>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	0019      	movs	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  }
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b002      	add	sp, #8
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	fffdffff 	.word	0xfffdffff
 8007d38:	fffeffff 	.word	0xfffeffff
 8007d3c:	fffbffff 	.word	0xfffbffff
 8007d40:	ffff7fff 	.word	0xffff7fff
 8007d44:	ffffefff 	.word	0xffffefff
 8007d48:	ffffdfff 	.word	0xffffdfff
 8007d4c:	ffefffff 	.word	0xffefffff
 8007d50:	ff9fffff 	.word	0xff9fffff
 8007d54:	fff7ffff 	.word	0xfff7ffff

08007d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b092      	sub	sp, #72	; 0x48
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2284      	movs	r2, #132	; 0x84
 8007d64:	2100      	movs	r1, #0
 8007d66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d68:	f7fc f83c 	bl	8003de4 <HAL_GetTick>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2208      	movs	r2, #8
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d12c      	bne.n	8007dd8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d80:	2280      	movs	r2, #128	; 0x80
 8007d82:	0391      	lsls	r1, r2, #14
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4a46      	ldr	r2, [pc, #280]	; (8007ea0 <UART_CheckIdleState+0x148>)
 8007d88:	9200      	str	r2, [sp, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f000 f88c 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007d90:	1e03      	subs	r3, r0, #0
 8007d92:	d021      	beq.n	8007dd8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d94:	f3ef 8310 	mrs	r3, PRIMASK
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d9e:	2301      	movs	r3, #1
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	f383 8810 	msr	PRIMASK, r3
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	438a      	bics	r2, r1
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	f383 8810 	msr	PRIMASK, r3
}
 8007dc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2278      	movs	r2, #120	; 0x78
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e05f      	b.n	8007e98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2204      	movs	r2, #4
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d146      	bne.n	8007e74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de8:	2280      	movs	r2, #128	; 0x80
 8007dea:	03d1      	lsls	r1, r2, #15
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	; (8007ea0 <UART_CheckIdleState+0x148>)
 8007df0:	9200      	str	r2, [sp, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f000 f858 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d03b      	beq.n	8007e74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
 8007e06:	2301      	movs	r3, #1
 8007e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f383 8810 	msr	PRIMASK, r3
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4921      	ldr	r1, [pc, #132]	; (8007ea4 <UART_CheckIdleState+0x14c>)
 8007e1e:	400a      	ands	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f383 8810 	msr	PRIMASK, r3
}
 8007e2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e32:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f383 8810 	msr	PRIMASK, r3
}
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	438a      	bics	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	f383 8810 	msr	PRIMASK, r3
}
 8007e5e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2280      	movs	r2, #128	; 0x80
 8007e64:	2120      	movs	r1, #32
 8007e66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2278      	movs	r2, #120	; 0x78
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e011      	b.n	8007e98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	2120      	movs	r1, #32
 8007e80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2278      	movs	r2, #120	; 0x78
 8007e92:	2100      	movs	r1, #0
 8007e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b010      	add	sp, #64	; 0x40
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	01ffffff 	.word	0x01ffffff
 8007ea4:	fffffedf 	.word	0xfffffedf

08007ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	1dfb      	adds	r3, r7, #7
 8007eb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	e04b      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	d048      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec0:	f7fb ff90 	bl	8003de4 <HAL_GetTick>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d302      	bcc.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e04b      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d035      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	2208      	movs	r2, #8
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d111      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	0018      	movs	r0, r3
 8007f00:	f000 f8f2 	bl	80080e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2284      	movs	r2, #132	; 0x84
 8007f08:	2108      	movs	r1, #8
 8007f0a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2278      	movs	r2, #120	; 0x78
 8007f10:	2100      	movs	r1, #0
 8007f12:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e02c      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	2380      	movs	r3, #128	; 0x80
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	401a      	ands	r2, r3
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d112      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	0112      	lsls	r2, r2, #4
 8007f34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f000 f8d5 	bl	80080e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2284      	movs	r2, #132	; 0x84
 8007f42:	2120      	movs	r1, #32
 8007f44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2278      	movs	r2, #120	; 0x78
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e00f      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	425a      	negs	r2, r3
 8007f62:	4153      	adcs	r3, r2
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	001a      	movs	r2, r3
 8007f68:	1dfb      	adds	r3, r7, #7
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d0a4      	beq.n	8007eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	0018      	movs	r0, r3
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b004      	add	sp, #16
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b090      	sub	sp, #64	; 0x40
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	1dbb      	adds	r3, r7, #6
 8007f88:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	1dba      	adds	r2, r7, #6
 8007f94:	2158      	movs	r1, #88	; 0x58
 8007f96:	8812      	ldrh	r2, [r2, #0]
 8007f98:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1dba      	adds	r2, r7, #6
 8007f9e:	215a      	movs	r1, #90	; 0x5a
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	2380      	movs	r3, #128	; 0x80
 8007fb0:	015b      	lsls	r3, r3, #5
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d10d      	bne.n	8007fd2 <UART_Start_Receive_IT+0x56>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <UART_Start_Receive_IT+0x4c>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	225c      	movs	r2, #92	; 0x5c
 8007fc2:	4946      	ldr	r1, [pc, #280]	; (80080dc <UART_Start_Receive_IT+0x160>)
 8007fc4:	5299      	strh	r1, [r3, r2]
 8007fc6:	e01a      	b.n	8007ffe <UART_Start_Receive_IT+0x82>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	225c      	movs	r2, #92	; 0x5c
 8007fcc:	21ff      	movs	r1, #255	; 0xff
 8007fce:	5299      	strh	r1, [r3, r2]
 8007fd0:	e015      	b.n	8007ffe <UART_Start_Receive_IT+0x82>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10d      	bne.n	8007ff6 <UART_Start_Receive_IT+0x7a>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <UART_Start_Receive_IT+0x70>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	225c      	movs	r2, #92	; 0x5c
 8007fe6:	21ff      	movs	r1, #255	; 0xff
 8007fe8:	5299      	strh	r1, [r3, r2]
 8007fea:	e008      	b.n	8007ffe <UART_Start_Receive_IT+0x82>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	225c      	movs	r2, #92	; 0x5c
 8007ff0:	217f      	movs	r1, #127	; 0x7f
 8007ff2:	5299      	strh	r1, [r3, r2]
 8007ff4:	e003      	b.n	8007ffe <UART_Start_Receive_IT+0x82>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	225c      	movs	r2, #92	; 0x5c
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2284      	movs	r2, #132	; 0x84
 8008002:	2100      	movs	r1, #0
 8008004:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2280      	movs	r2, #128	; 0x80
 800800a:	2122      	movs	r1, #34	; 0x22
 800800c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800e:	f3ef 8310 	mrs	r3, PRIMASK
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008018:	2301      	movs	r3, #1
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	f383 8810 	msr	PRIMASK, r3
}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2101      	movs	r1, #1
 8008030:	430a      	orrs	r2, r1
 8008032:	609a      	str	r2, [r3, #8]
 8008034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008036:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f383 8810 	msr	PRIMASK, r3
}
 800803e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	2380      	movs	r3, #128	; 0x80
 8008046:	015b      	lsls	r3, r3, #5
 8008048:	429a      	cmp	r2, r3
 800804a:	d107      	bne.n	800805c <UART_Start_Receive_IT+0xe0>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d103      	bne.n	800805c <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4a22      	ldr	r2, [pc, #136]	; (80080e0 <UART_Start_Receive_IT+0x164>)
 8008058:	669a      	str	r2, [r3, #104]	; 0x68
 800805a:	e002      	b.n	8008062 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a21      	ldr	r2, [pc, #132]	; (80080e4 <UART_Start_Receive_IT+0x168>)
 8008060:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d019      	beq.n	800809e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800806a:	f3ef 8310 	mrs	r3, PRIMASK
 800806e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008070:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008072:	637b      	str	r3, [r7, #52]	; 0x34
 8008074:	2301      	movs	r3, #1
 8008076:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	f383 8810 	msr	PRIMASK, r3
}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2190      	movs	r1, #144	; 0x90
 800808c:	0049      	lsls	r1, r1, #1
 800808e:	430a      	orrs	r2, r1
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	e018      	b.n	80080d0 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809e:	f3ef 8310 	mrs	r3, PRIMASK
 80080a2:	613b      	str	r3, [r7, #16]
  return(result);
 80080a4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80080a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f383 8810 	msr	PRIMASK, r3
}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2120      	movs	r1, #32
 80080c0:	430a      	orrs	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f383 8810 	msr	PRIMASK, r3
}
 80080ce:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	0018      	movs	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b010      	add	sp, #64	; 0x40
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	000001ff 	.word	0x000001ff
 80080e0:	080083ed 	.word	0x080083ed
 80080e4:	08008235 	.word	0x08008235

080080e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f0:	f3ef 8310 	mrs	r3, PRIMASK
 80080f4:	617b      	str	r3, [r7, #20]
  return(result);
 80080f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
 80080fa:	2301      	movs	r3, #1
 80080fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	f383 8810 	msr	PRIMASK, r3
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4926      	ldr	r1, [pc, #152]	; (80081ac <UART_EndRxTransfer+0xc4>)
 8008112:	400a      	ands	r2, r1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008122:	f3ef 8310 	mrs	r3, PRIMASK
 8008126:	623b      	str	r3, [r7, #32]
  return(result);
 8008128:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812a:	633b      	str	r3, [r7, #48]	; 0x30
 800812c:	2301      	movs	r3, #1
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	f383 8810 	msr	PRIMASK, r3
}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2101      	movs	r1, #1
 8008144:	438a      	bics	r2, r1
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f383 8810 	msr	PRIMASK, r3
}
 8008152:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008158:	2b01      	cmp	r3, #1
 800815a:	d118      	bne.n	800818e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800815c:	f3ef 8310 	mrs	r3, PRIMASK
 8008160:	60bb      	str	r3, [r7, #8]
  return(result);
 8008162:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008166:	2301      	movs	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f383 8810 	msr	PRIMASK, r3
}
 8008170:	46c0      	nop			; (mov r8, r8)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2110      	movs	r1, #16
 800817e:	438a      	bics	r2, r1
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f383 8810 	msr	PRIMASK, r3
}
 800818c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2280      	movs	r2, #128	; 0x80
 8008192:	2120      	movs	r1, #32
 8008194:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	46bd      	mov	sp, r7
 80081a6:	b00e      	add	sp, #56	; 0x38
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	fffffedf 	.word	0xfffffedf

080081b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	225a      	movs	r2, #90	; 0x5a
 80081c2:	2100      	movs	r1, #0
 80081c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2252      	movs	r2, #82	; 0x52
 80081ca:	2100      	movs	r1, #0
 80081cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7ff fbb9 	bl	8007948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b004      	add	sp, #16
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e6:	f3ef 8310 	mrs	r3, PRIMASK
 80081ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	2301      	movs	r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f383 8810 	msr	PRIMASK, r3
}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2140      	movs	r1, #64	; 0x40
 8008208:	438a      	bics	r2, r1
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f383 8810 	msr	PRIMASK, r3
}
 8008216:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	0018      	movs	r0, r3
 8008228:	f7ff fb86 	bl	8007938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822c:	46c0      	nop			; (mov r8, r8)
 800822e:	46bd      	mov	sp, r7
 8008230:	b006      	add	sp, #24
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b094      	sub	sp, #80	; 0x50
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800823c:	204e      	movs	r0, #78	; 0x4e
 800823e:	183b      	adds	r3, r7, r0
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	215c      	movs	r1, #92	; 0x5c
 8008244:	5a52      	ldrh	r2, [r2, r1]
 8008246:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2280      	movs	r2, #128	; 0x80
 800824c:	589b      	ldr	r3, [r3, r2]
 800824e:	2b22      	cmp	r3, #34	; 0x22
 8008250:	d000      	beq.n	8008254 <UART_RxISR_8BIT+0x20>
 8008252:	e0ba      	b.n	80083ca <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	214c      	movs	r1, #76	; 0x4c
 800825a:	187b      	adds	r3, r7, r1
 800825c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800825e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008260:	187b      	adds	r3, r7, r1
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b2da      	uxtb	r2, r3
 8008266:	183b      	adds	r3, r7, r0
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b2d9      	uxtb	r1, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	400a      	ands	r2, r1
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	225a      	movs	r2, #90	; 0x5a
 8008284:	5a9b      	ldrh	r3, [r3, r2]
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b299      	uxth	r1, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	225a      	movs	r2, #90	; 0x5a
 8008290:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	225a      	movs	r2, #90	; 0x5a
 8008296:	5a9b      	ldrh	r3, [r3, r2]
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d000      	beq.n	80082a0 <UART_RxISR_8BIT+0x6c>
 800829e:	e09c      	b.n	80083da <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a0:	f3ef 8310 	mrs	r3, PRIMASK
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082aa:	2301      	movs	r3, #1
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	f383 8810 	msr	PRIMASK, r3
}
 80082b4:	46c0      	nop			; (mov r8, r8)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4948      	ldr	r1, [pc, #288]	; (80083e4 <UART_RxISR_8BIT+0x1b0>)
 80082c2:	400a      	ands	r2, r1
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	f383 8810 	msr	PRIMASK, r3
}
 80082d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d2:	f3ef 8310 	mrs	r3, PRIMASK
 80082d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082da:	647b      	str	r3, [r7, #68]	; 0x44
 80082dc:	2301      	movs	r3, #1
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e2:	f383 8810 	msr	PRIMASK, r3
}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2101      	movs	r1, #1
 80082f4:	438a      	bics	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	f383 8810 	msr	PRIMASK, r3
}
 8008302:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2280      	movs	r2, #128	; 0x80
 8008308:	2120      	movs	r1, #32
 800830a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	2380      	movs	r3, #128	; 0x80
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	4013      	ands	r3, r2
 8008324:	d018      	beq.n	8008358 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008326:	f3ef 8310 	mrs	r3, PRIMASK
 800832a:	61bb      	str	r3, [r7, #24]
  return(result);
 800832c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800832e:	643b      	str	r3, [r7, #64]	; 0x40
 8008330:	2301      	movs	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4928      	ldr	r1, [pc, #160]	; (80083e8 <UART_RxISR_8BIT+0x1b4>)
 8008348:	400a      	ands	r2, r1
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	f383 8810 	msr	PRIMASK, r3
}
 8008356:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800835c:	2b01      	cmp	r3, #1
 800835e:	d12f      	bne.n	80083c0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008366:	f3ef 8310 	mrs	r3, PRIMASK
 800836a:	60fb      	str	r3, [r7, #12]
  return(result);
 800836c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008370:	2301      	movs	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2110      	movs	r1, #16
 8008388:	438a      	bics	r2, r1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f383 8810 	msr	PRIMASK, r3
}
 8008396:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	2210      	movs	r2, #16
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b10      	cmp	r3, #16
 80083a4:	d103      	bne.n	80083ae <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2210      	movs	r2, #16
 80083ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2258      	movs	r2, #88	; 0x58
 80083b2:	5a9a      	ldrh	r2, [r3, r2]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	0011      	movs	r1, r2
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff facd 	bl	8007958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083be:	e00c      	b.n	80083da <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	0018      	movs	r0, r3
 80083c4:	f7fa fa2c 	bl	8002820 <HAL_UART_RxCpltCallback>
}
 80083c8:	e007      	b.n	80083da <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699a      	ldr	r2, [r3, #24]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2108      	movs	r1, #8
 80083d6:	430a      	orrs	r2, r1
 80083d8:	619a      	str	r2, [r3, #24]
}
 80083da:	46c0      	nop			; (mov r8, r8)
 80083dc:	46bd      	mov	sp, r7
 80083de:	b014      	add	sp, #80	; 0x50
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	fffffedf 	.word	0xfffffedf
 80083e8:	fbffffff 	.word	0xfbffffff

080083ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b094      	sub	sp, #80	; 0x50
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083f4:	204e      	movs	r0, #78	; 0x4e
 80083f6:	183b      	adds	r3, r7, r0
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	215c      	movs	r1, #92	; 0x5c
 80083fc:	5a52      	ldrh	r2, [r2, r1]
 80083fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2280      	movs	r2, #128	; 0x80
 8008404:	589b      	ldr	r3, [r3, r2]
 8008406:	2b22      	cmp	r3, #34	; 0x22
 8008408:	d000      	beq.n	800840c <UART_RxISR_16BIT+0x20>
 800840a:	e0ba      	b.n	8008582 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	214c      	movs	r1, #76	; 0x4c
 8008412:	187b      	adds	r3, r7, r1
 8008414:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008416:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800841e:	187b      	adds	r3, r7, r1
 8008420:	183a      	adds	r2, r7, r0
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	8812      	ldrh	r2, [r2, #0]
 8008426:	4013      	ands	r3, r2
 8008428:	b29a      	uxth	r2, r3
 800842a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800842c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	1c9a      	adds	r2, r3, #2
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	225a      	movs	r2, #90	; 0x5a
 800843c:	5a9b      	ldrh	r3, [r3, r2]
 800843e:	b29b      	uxth	r3, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	b299      	uxth	r1, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	225a      	movs	r2, #90	; 0x5a
 8008448:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	225a      	movs	r2, #90	; 0x5a
 800844e:	5a9b      	ldrh	r3, [r3, r2]
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d000      	beq.n	8008458 <UART_RxISR_16BIT+0x6c>
 8008456:	e09c      	b.n	8008592 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008458:	f3ef 8310 	mrs	r3, PRIMASK
 800845c:	623b      	str	r3, [r7, #32]
  return(result);
 800845e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008460:	647b      	str	r3, [r7, #68]	; 0x44
 8008462:	2301      	movs	r3, #1
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f383 8810 	msr	PRIMASK, r3
}
 800846c:	46c0      	nop			; (mov r8, r8)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4948      	ldr	r1, [pc, #288]	; (800859c <UART_RxISR_16BIT+0x1b0>)
 800847a:	400a      	ands	r2, r1
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008480:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800848a:	f3ef 8310 	mrs	r3, PRIMASK
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008492:	643b      	str	r3, [r7, #64]	; 0x40
 8008494:	2301      	movs	r3, #1
 8008496:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f383 8810 	msr	PRIMASK, r3
}
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2101      	movs	r1, #1
 80084ac:	438a      	bics	r2, r1
 80084ae:	609a      	str	r2, [r3, #8]
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	f383 8810 	msr	PRIMASK, r3
}
 80084ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2280      	movs	r2, #128	; 0x80
 80084c0:	2120      	movs	r1, #32
 80084c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	2380      	movs	r3, #128	; 0x80
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	4013      	ands	r3, r2
 80084dc:	d018      	beq.n	8008510 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084de:	f3ef 8310 	mrs	r3, PRIMASK
 80084e2:	617b      	str	r3, [r7, #20]
  return(result);
 80084e4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e8:	2301      	movs	r3, #1
 80084ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f383 8810 	msr	PRIMASK, r3
}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4928      	ldr	r1, [pc, #160]	; (80085a0 <UART_RxISR_16BIT+0x1b4>)
 8008500:	400a      	ands	r2, r1
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008506:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f383 8810 	msr	PRIMASK, r3
}
 800850e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008514:	2b01      	cmp	r3, #1
 8008516:	d12f      	bne.n	8008578 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800851e:	f3ef 8310 	mrs	r3, PRIMASK
 8008522:	60bb      	str	r3, [r7, #8]
  return(result);
 8008524:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008526:	63bb      	str	r3, [r7, #56]	; 0x38
 8008528:	2301      	movs	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f383 8810 	msr	PRIMASK, r3
}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2110      	movs	r1, #16
 8008540:	438a      	bics	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	2210      	movs	r2, #16
 8008558:	4013      	ands	r3, r2
 800855a:	2b10      	cmp	r3, #16
 800855c:	d103      	bne.n	8008566 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2210      	movs	r2, #16
 8008564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2258      	movs	r2, #88	; 0x58
 800856a:	5a9a      	ldrh	r2, [r3, r2]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	0011      	movs	r1, r2
 8008570:	0018      	movs	r0, r3
 8008572:	f7ff f9f1 	bl	8007958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008576:	e00c      	b.n	8008592 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	0018      	movs	r0, r3
 800857c:	f7fa f950 	bl	8002820 <HAL_UART_RxCpltCallback>
}
 8008580:	e007      	b.n	8008592 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2108      	movs	r1, #8
 800858e:	430a      	orrs	r2, r1
 8008590:	619a      	str	r2, [r3, #24]
}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b014      	add	sp, #80	; 0x50
 8008598:	bd80      	pop	{r7, pc}
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	fffffedf 	.word	0xfffffedf
 80085a0:	fbffffff 	.word	0xfbffffff

080085a4 <__errno>:
 80085a4:	4b01      	ldr	r3, [pc, #4]	; (80085ac <__errno+0x8>)
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	4770      	bx	lr
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	20000030 	.word	0x20000030

080085b0 <__libc_init_array>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	2600      	movs	r6, #0
 80085b4:	4d0c      	ldr	r5, [pc, #48]	; (80085e8 <__libc_init_array+0x38>)
 80085b6:	4c0d      	ldr	r4, [pc, #52]	; (80085ec <__libc_init_array+0x3c>)
 80085b8:	1b64      	subs	r4, r4, r5
 80085ba:	10a4      	asrs	r4, r4, #2
 80085bc:	42a6      	cmp	r6, r4
 80085be:	d109      	bne.n	80085d4 <__libc_init_array+0x24>
 80085c0:	2600      	movs	r6, #0
 80085c2:	f004 fde1 	bl	800d188 <_init>
 80085c6:	4d0a      	ldr	r5, [pc, #40]	; (80085f0 <__libc_init_array+0x40>)
 80085c8:	4c0a      	ldr	r4, [pc, #40]	; (80085f4 <__libc_init_array+0x44>)
 80085ca:	1b64      	subs	r4, r4, r5
 80085cc:	10a4      	asrs	r4, r4, #2
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	d105      	bne.n	80085de <__libc_init_array+0x2e>
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	00b3      	lsls	r3, r6, #2
 80085d6:	58eb      	ldr	r3, [r5, r3]
 80085d8:	4798      	blx	r3
 80085da:	3601      	adds	r6, #1
 80085dc:	e7ee      	b.n	80085bc <__libc_init_array+0xc>
 80085de:	00b3      	lsls	r3, r6, #2
 80085e0:	58eb      	ldr	r3, [r5, r3]
 80085e2:	4798      	blx	r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7f2      	b.n	80085ce <__libc_init_array+0x1e>
 80085e8:	0800d7b4 	.word	0x0800d7b4
 80085ec:	0800d7b4 	.word	0x0800d7b4
 80085f0:	0800d7b4 	.word	0x0800d7b4
 80085f4:	0800d7b8 	.word	0x0800d7b8

080085f8 <memcpy>:
 80085f8:	2300      	movs	r3, #0
 80085fa:	b510      	push	{r4, lr}
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d100      	bne.n	8008602 <memcpy+0xa>
 8008600:	bd10      	pop	{r4, pc}
 8008602:	5ccc      	ldrb	r4, [r1, r3]
 8008604:	54c4      	strb	r4, [r0, r3]
 8008606:	3301      	adds	r3, #1
 8008608:	e7f8      	b.n	80085fc <memcpy+0x4>

0800860a <memset>:
 800860a:	0003      	movs	r3, r0
 800860c:	1882      	adds	r2, r0, r2
 800860e:	4293      	cmp	r3, r2
 8008610:	d100      	bne.n	8008614 <memset+0xa>
 8008612:	4770      	bx	lr
 8008614:	7019      	strb	r1, [r3, #0]
 8008616:	3301      	adds	r3, #1
 8008618:	e7f9      	b.n	800860e <memset+0x4>

0800861a <__cvt>:
 800861a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861c:	001e      	movs	r6, r3
 800861e:	2300      	movs	r3, #0
 8008620:	0014      	movs	r4, r2
 8008622:	b08b      	sub	sp, #44	; 0x2c
 8008624:	429e      	cmp	r6, r3
 8008626:	da04      	bge.n	8008632 <__cvt+0x18>
 8008628:	2180      	movs	r1, #128	; 0x80
 800862a:	0609      	lsls	r1, r1, #24
 800862c:	1873      	adds	r3, r6, r1
 800862e:	001e      	movs	r6, r3
 8008630:	232d      	movs	r3, #45	; 0x2d
 8008632:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008634:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008636:	7013      	strb	r3, [r2, #0]
 8008638:	2320      	movs	r3, #32
 800863a:	2203      	movs	r2, #3
 800863c:	439f      	bics	r7, r3
 800863e:	2f46      	cmp	r7, #70	; 0x46
 8008640:	d007      	beq.n	8008652 <__cvt+0x38>
 8008642:	003b      	movs	r3, r7
 8008644:	3b45      	subs	r3, #69	; 0x45
 8008646:	4259      	negs	r1, r3
 8008648:	414b      	adcs	r3, r1
 800864a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800864c:	3a01      	subs	r2, #1
 800864e:	18cb      	adds	r3, r1, r3
 8008650:	9310      	str	r3, [sp, #64]	; 0x40
 8008652:	ab09      	add	r3, sp, #36	; 0x24
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	ab08      	add	r3, sp, #32
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800865c:	9200      	str	r2, [sp, #0]
 800865e:	9302      	str	r3, [sp, #8]
 8008660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008662:	0022      	movs	r2, r4
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	0033      	movs	r3, r6
 8008668:	f001 ff28 	bl	800a4bc <_dtoa_r>
 800866c:	0005      	movs	r5, r0
 800866e:	2f47      	cmp	r7, #71	; 0x47
 8008670:	d102      	bne.n	8008678 <__cvt+0x5e>
 8008672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008674:	07db      	lsls	r3, r3, #31
 8008676:	d528      	bpl.n	80086ca <__cvt+0xb0>
 8008678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800867a:	18eb      	adds	r3, r5, r3
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	2f46      	cmp	r7, #70	; 0x46
 8008680:	d114      	bne.n	80086ac <__cvt+0x92>
 8008682:	782b      	ldrb	r3, [r5, #0]
 8008684:	2b30      	cmp	r3, #48	; 0x30
 8008686:	d10c      	bne.n	80086a2 <__cvt+0x88>
 8008688:	2200      	movs	r2, #0
 800868a:	2300      	movs	r3, #0
 800868c:	0020      	movs	r0, r4
 800868e:	0031      	movs	r1, r6
 8008690:	f7f7 fee6 	bl	8000460 <__aeabi_dcmpeq>
 8008694:	2800      	cmp	r0, #0
 8008696:	d104      	bne.n	80086a2 <__cvt+0x88>
 8008698:	2301      	movs	r3, #1
 800869a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800869c:	1a9b      	subs	r3, r3, r2
 800869e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086a4:	9a07      	ldr	r2, [sp, #28]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	18d3      	adds	r3, r2, r3
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	2200      	movs	r2, #0
 80086ae:	2300      	movs	r3, #0
 80086b0:	0020      	movs	r0, r4
 80086b2:	0031      	movs	r1, r6
 80086b4:	f7f7 fed4 	bl	8000460 <__aeabi_dcmpeq>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d001      	beq.n	80086c0 <__cvt+0xa6>
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	2230      	movs	r2, #48	; 0x30
 80086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c4:	9907      	ldr	r1, [sp, #28]
 80086c6:	428b      	cmp	r3, r1
 80086c8:	d306      	bcc.n	80086d8 <__cvt+0xbe>
 80086ca:	0028      	movs	r0, r5
 80086cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086d0:	1b5b      	subs	r3, r3, r5
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	b00b      	add	sp, #44	; 0x2c
 80086d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d8:	1c59      	adds	r1, r3, #1
 80086da:	9109      	str	r1, [sp, #36]	; 0x24
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e7f0      	b.n	80086c2 <__cvt+0xa8>

080086e0 <__exponent>:
 80086e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e2:	1c83      	adds	r3, r0, #2
 80086e4:	b087      	sub	sp, #28
 80086e6:	9303      	str	r3, [sp, #12]
 80086e8:	0005      	movs	r5, r0
 80086ea:	000c      	movs	r4, r1
 80086ec:	232b      	movs	r3, #43	; 0x2b
 80086ee:	7002      	strb	r2, [r0, #0]
 80086f0:	2900      	cmp	r1, #0
 80086f2:	da01      	bge.n	80086f8 <__exponent+0x18>
 80086f4:	424c      	negs	r4, r1
 80086f6:	3302      	adds	r3, #2
 80086f8:	706b      	strb	r3, [r5, #1]
 80086fa:	2c09      	cmp	r4, #9
 80086fc:	dd31      	ble.n	8008762 <__exponent+0x82>
 80086fe:	270a      	movs	r7, #10
 8008700:	ab04      	add	r3, sp, #16
 8008702:	1dde      	adds	r6, r3, #7
 8008704:	0020      	movs	r0, r4
 8008706:	0039      	movs	r1, r7
 8008708:	9601      	str	r6, [sp, #4]
 800870a:	f7f7 fe93 	bl	8000434 <__aeabi_idivmod>
 800870e:	3e01      	subs	r6, #1
 8008710:	3130      	adds	r1, #48	; 0x30
 8008712:	0020      	movs	r0, r4
 8008714:	7031      	strb	r1, [r6, #0]
 8008716:	0039      	movs	r1, r7
 8008718:	9402      	str	r4, [sp, #8]
 800871a:	f7f7 fda5 	bl	8000268 <__divsi3>
 800871e:	9b02      	ldr	r3, [sp, #8]
 8008720:	0004      	movs	r4, r0
 8008722:	2b63      	cmp	r3, #99	; 0x63
 8008724:	dcee      	bgt.n	8008704 <__exponent+0x24>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	3430      	adds	r4, #48	; 0x30
 800872a:	1e9a      	subs	r2, r3, #2
 800872c:	0013      	movs	r3, r2
 800872e:	9903      	ldr	r1, [sp, #12]
 8008730:	7014      	strb	r4, [r2, #0]
 8008732:	a804      	add	r0, sp, #16
 8008734:	3007      	adds	r0, #7
 8008736:	4298      	cmp	r0, r3
 8008738:	d80e      	bhi.n	8008758 <__exponent+0x78>
 800873a:	ab04      	add	r3, sp, #16
 800873c:	3307      	adds	r3, #7
 800873e:	2000      	movs	r0, #0
 8008740:	429a      	cmp	r2, r3
 8008742:	d804      	bhi.n	800874e <__exponent+0x6e>
 8008744:	ab04      	add	r3, sp, #16
 8008746:	3009      	adds	r0, #9
 8008748:	18c0      	adds	r0, r0, r3
 800874a:	9b01      	ldr	r3, [sp, #4]
 800874c:	1ac0      	subs	r0, r0, r3
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	1818      	adds	r0, r3, r0
 8008752:	1b40      	subs	r0, r0, r5
 8008754:	b007      	add	sp, #28
 8008756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008758:	7818      	ldrb	r0, [r3, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	7008      	strb	r0, [r1, #0]
 800875e:	3101      	adds	r1, #1
 8008760:	e7e7      	b.n	8008732 <__exponent+0x52>
 8008762:	2330      	movs	r3, #48	; 0x30
 8008764:	18e4      	adds	r4, r4, r3
 8008766:	70ab      	strb	r3, [r5, #2]
 8008768:	1d28      	adds	r0, r5, #4
 800876a:	70ec      	strb	r4, [r5, #3]
 800876c:	e7f1      	b.n	8008752 <__exponent+0x72>
	...

08008770 <_printf_float>:
 8008770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008772:	b095      	sub	sp, #84	; 0x54
 8008774:	000c      	movs	r4, r1
 8008776:	9209      	str	r2, [sp, #36]	; 0x24
 8008778:	001e      	movs	r6, r3
 800877a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800877c:	0007      	movs	r7, r0
 800877e:	f003 f9f9 	bl	800bb74 <_localeconv_r>
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	0018      	movs	r0, r3
 8008786:	930c      	str	r3, [sp, #48]	; 0x30
 8008788:	f7f7 fcc8 	bl	800011c <strlen>
 800878c:	2300      	movs	r3, #0
 800878e:	9312      	str	r3, [sp, #72]	; 0x48
 8008790:	7e23      	ldrb	r3, [r4, #24]
 8008792:	2207      	movs	r2, #7
 8008794:	930a      	str	r3, [sp, #40]	; 0x28
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	900e      	str	r0, [sp, #56]	; 0x38
 800879a:	930d      	str	r3, [sp, #52]	; 0x34
 800879c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	05c9      	lsls	r1, r1, #23
 80087a2:	d547      	bpl.n	8008834 <_printf_float+0xc4>
 80087a4:	189b      	adds	r3, r3, r2
 80087a6:	4393      	bics	r3, r2
 80087a8:	001a      	movs	r2, r3
 80087aa:	3208      	adds	r2, #8
 80087ac:	602a      	str	r2, [r5, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	64a2      	str	r2, [r4, #72]	; 0x48
 80087b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80087b6:	2201      	movs	r2, #1
 80087b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80087ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80087bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80087be:	006b      	lsls	r3, r5, #1
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80087c6:	4ba7      	ldr	r3, [pc, #668]	; (8008a64 <_printf_float+0x2f4>)
 80087c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087ca:	4252      	negs	r2, r2
 80087cc:	f7f9 fc22 	bl	8002014 <__aeabi_dcmpun>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d131      	bne.n	8008838 <_printf_float+0xc8>
 80087d4:	2201      	movs	r2, #1
 80087d6:	4ba3      	ldr	r3, [pc, #652]	; (8008a64 <_printf_float+0x2f4>)
 80087d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80087da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087dc:	4252      	negs	r2, r2
 80087de:	f7f7 fe4f 	bl	8000480 <__aeabi_dcmple>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d128      	bne.n	8008838 <_printf_float+0xc8>
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	0029      	movs	r1, r5
 80087ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80087ee:	f7f7 fe3d 	bl	800046c <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d003      	beq.n	80087fe <_printf_float+0x8e>
 80087f6:	0023      	movs	r3, r4
 80087f8:	222d      	movs	r2, #45	; 0x2d
 80087fa:	3343      	adds	r3, #67	; 0x43
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008800:	4d99      	ldr	r5, [pc, #612]	; (8008a68 <_printf_float+0x2f8>)
 8008802:	2b47      	cmp	r3, #71	; 0x47
 8008804:	d900      	bls.n	8008808 <_printf_float+0x98>
 8008806:	4d99      	ldr	r5, [pc, #612]	; (8008a6c <_printf_float+0x2fc>)
 8008808:	2303      	movs	r3, #3
 800880a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	3301      	adds	r3, #1
 8008810:	439a      	bics	r2, r3
 8008812:	2300      	movs	r3, #0
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	930b      	str	r3, [sp, #44]	; 0x2c
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	0021      	movs	r1, r4
 800881c:	0038      	movs	r0, r7
 800881e:	9600      	str	r6, [sp, #0]
 8008820:	aa13      	add	r2, sp, #76	; 0x4c
 8008822:	f000 f9e7 	bl	8008bf4 <_printf_common>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d000      	beq.n	800882c <_printf_float+0xbc>
 800882a:	e0a2      	b.n	8008972 <_printf_float+0x202>
 800882c:	2001      	movs	r0, #1
 800882e:	4240      	negs	r0, r0
 8008830:	b015      	add	sp, #84	; 0x54
 8008832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008834:	3307      	adds	r3, #7
 8008836:	e7b6      	b.n	80087a6 <_printf_float+0x36>
 8008838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800883a:	002b      	movs	r3, r5
 800883c:	0010      	movs	r0, r2
 800883e:	0029      	movs	r1, r5
 8008840:	f7f9 fbe8 	bl	8002014 <__aeabi_dcmpun>
 8008844:	2800      	cmp	r0, #0
 8008846:	d00b      	beq.n	8008860 <_printf_float+0xf0>
 8008848:	2d00      	cmp	r5, #0
 800884a:	da03      	bge.n	8008854 <_printf_float+0xe4>
 800884c:	0023      	movs	r3, r4
 800884e:	222d      	movs	r2, #45	; 0x2d
 8008850:	3343      	adds	r3, #67	; 0x43
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008856:	4d86      	ldr	r5, [pc, #536]	; (8008a70 <_printf_float+0x300>)
 8008858:	2b47      	cmp	r3, #71	; 0x47
 800885a:	d9d5      	bls.n	8008808 <_printf_float+0x98>
 800885c:	4d85      	ldr	r5, [pc, #532]	; (8008a74 <_printf_float+0x304>)
 800885e:	e7d3      	b.n	8008808 <_printf_float+0x98>
 8008860:	2220      	movs	r2, #32
 8008862:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	4391      	bics	r1, r2
 8008868:	910f      	str	r1, [sp, #60]	; 0x3c
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	d149      	bne.n	8008902 <_printf_float+0x192>
 800886e:	3307      	adds	r3, #7
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	2380      	movs	r3, #128	; 0x80
 8008874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4313      	orrs	r3, r2
 800887a:	2200      	movs	r2, #0
 800887c:	9206      	str	r2, [sp, #24]
 800887e:	aa12      	add	r2, sp, #72	; 0x48
 8008880:	9205      	str	r2, [sp, #20]
 8008882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008884:	a908      	add	r1, sp, #32
 8008886:	9204      	str	r2, [sp, #16]
 8008888:	aa11      	add	r2, sp, #68	; 0x44
 800888a:	9203      	str	r2, [sp, #12]
 800888c:	2223      	movs	r2, #35	; 0x23
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	1852      	adds	r2, r2, r1
 8008896:	9202      	str	r2, [sp, #8]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	0038      	movs	r0, r7
 800889c:	002b      	movs	r3, r5
 800889e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088a0:	f7ff febb 	bl	800861a <__cvt>
 80088a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a6:	0005      	movs	r5, r0
 80088a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088aa:	2b47      	cmp	r3, #71	; 0x47
 80088ac:	d108      	bne.n	80088c0 <_printf_float+0x150>
 80088ae:	1ccb      	adds	r3, r1, #3
 80088b0:	db02      	blt.n	80088b8 <_printf_float+0x148>
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	4299      	cmp	r1, r3
 80088b6:	dd48      	ble.n	800894a <_printf_float+0x1da>
 80088b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ba:	3b02      	subs	r3, #2
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	930a      	str	r3, [sp, #40]	; 0x28
 80088c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c2:	2b65      	cmp	r3, #101	; 0x65
 80088c4:	d824      	bhi.n	8008910 <_printf_float+0x1a0>
 80088c6:	0020      	movs	r0, r4
 80088c8:	001a      	movs	r2, r3
 80088ca:	3901      	subs	r1, #1
 80088cc:	3050      	adds	r0, #80	; 0x50
 80088ce:	9111      	str	r1, [sp, #68]	; 0x44
 80088d0:	f7ff ff06 	bl	80086e0 <__exponent>
 80088d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80088d8:	1813      	adds	r3, r2, r0
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	2a01      	cmp	r2, #1
 80088de:	dc02      	bgt.n	80088e6 <_printf_float+0x176>
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	07d2      	lsls	r2, r2, #31
 80088e4:	d501      	bpl.n	80088ea <_printf_float+0x17a>
 80088e6:	3301      	adds	r3, #1
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	2323      	movs	r3, #35	; 0x23
 80088ec:	aa08      	add	r2, sp, #32
 80088ee:	189b      	adds	r3, r3, r2
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d100      	bne.n	80088f8 <_printf_float+0x188>
 80088f6:	e78f      	b.n	8008818 <_printf_float+0xa8>
 80088f8:	0023      	movs	r3, r4
 80088fa:	222d      	movs	r2, #45	; 0x2d
 80088fc:	3343      	adds	r3, #67	; 0x43
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	e78a      	b.n	8008818 <_printf_float+0xa8>
 8008902:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008904:	2a47      	cmp	r2, #71	; 0x47
 8008906:	d1b4      	bne.n	8008872 <_printf_float+0x102>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1b2      	bne.n	8008872 <_printf_float+0x102>
 800890c:	3301      	adds	r3, #1
 800890e:	e7af      	b.n	8008870 <_printf_float+0x100>
 8008910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008912:	2b66      	cmp	r3, #102	; 0x66
 8008914:	d11b      	bne.n	800894e <_printf_float+0x1de>
 8008916:	6863      	ldr	r3, [r4, #4]
 8008918:	2900      	cmp	r1, #0
 800891a:	dd0d      	ble.n	8008938 <_printf_float+0x1c8>
 800891c:	6121      	str	r1, [r4, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <_printf_float+0x1b8>
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	07d2      	lsls	r2, r2, #31
 8008926:	d502      	bpl.n	800892e <_printf_float+0x1be>
 8008928:	3301      	adds	r3, #1
 800892a:	1859      	adds	r1, r3, r1
 800892c:	6121      	str	r1, [r4, #16]
 800892e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008930:	65a3      	str	r3, [r4, #88]	; 0x58
 8008932:	2300      	movs	r3, #0
 8008934:	930b      	str	r3, [sp, #44]	; 0x2c
 8008936:	e7d8      	b.n	80088ea <_printf_float+0x17a>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <_printf_float+0x1d4>
 800893c:	2201      	movs	r2, #1
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	4211      	tst	r1, r2
 8008942:	d000      	beq.n	8008946 <_printf_float+0x1d6>
 8008944:	1c9a      	adds	r2, r3, #2
 8008946:	6122      	str	r2, [r4, #16]
 8008948:	e7f1      	b.n	800892e <_printf_float+0x1be>
 800894a:	2367      	movs	r3, #103	; 0x67
 800894c:	930a      	str	r3, [sp, #40]	; 0x28
 800894e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008950:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008952:	4293      	cmp	r3, r2
 8008954:	db06      	blt.n	8008964 <_printf_float+0x1f4>
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	07d2      	lsls	r2, r2, #31
 800895c:	d5e7      	bpl.n	800892e <_printf_float+0x1be>
 800895e:	3301      	adds	r3, #1
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	e7e4      	b.n	800892e <_printf_float+0x1be>
 8008964:	2101      	movs	r1, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	dc01      	bgt.n	800896e <_printf_float+0x1fe>
 800896a:	1849      	adds	r1, r1, r1
 800896c:	1ac9      	subs	r1, r1, r3
 800896e:	1852      	adds	r2, r2, r1
 8008970:	e7e9      	b.n	8008946 <_printf_float+0x1d6>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	0553      	lsls	r3, r2, #21
 8008976:	d407      	bmi.n	8008988 <_printf_float+0x218>
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	002a      	movs	r2, r5
 800897c:	0038      	movs	r0, r7
 800897e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d128      	bne.n	80089d8 <_printf_float+0x268>
 8008986:	e751      	b.n	800882c <_printf_float+0xbc>
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	2b65      	cmp	r3, #101	; 0x65
 800898c:	d800      	bhi.n	8008990 <_printf_float+0x220>
 800898e:	e0e1      	b.n	8008b54 <_printf_float+0x3e4>
 8008990:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008992:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008994:	2200      	movs	r2, #0
 8008996:	2300      	movs	r3, #0
 8008998:	f7f7 fd62 	bl	8000460 <__aeabi_dcmpeq>
 800899c:	2800      	cmp	r0, #0
 800899e:	d031      	beq.n	8008a04 <_printf_float+0x294>
 80089a0:	2301      	movs	r3, #1
 80089a2:	0038      	movs	r0, r7
 80089a4:	4a34      	ldr	r2, [pc, #208]	; (8008a78 <_printf_float+0x308>)
 80089a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a8:	47b0      	blx	r6
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d100      	bne.n	80089b0 <_printf_float+0x240>
 80089ae:	e73d      	b.n	800882c <_printf_float+0xbc>
 80089b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089b4:	4293      	cmp	r3, r2
 80089b6:	db02      	blt.n	80089be <_printf_float+0x24e>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07db      	lsls	r3, r3, #31
 80089bc:	d50c      	bpl.n	80089d8 <_printf_float+0x268>
 80089be:	0038      	movs	r0, r7
 80089c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c6:	47b0      	blx	r6
 80089c8:	2500      	movs	r5, #0
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	d100      	bne.n	80089d0 <_printf_float+0x260>
 80089ce:	e72d      	b.n	800882c <_printf_float+0xbc>
 80089d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089d2:	3b01      	subs	r3, #1
 80089d4:	42ab      	cmp	r3, r5
 80089d6:	dc0a      	bgt.n	80089ee <_printf_float+0x27e>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	079b      	lsls	r3, r3, #30
 80089dc:	d500      	bpl.n	80089e0 <_printf_float+0x270>
 80089de:	e106      	b.n	8008bee <_printf_float+0x47e>
 80089e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089e2:	68e0      	ldr	r0, [r4, #12]
 80089e4:	4298      	cmp	r0, r3
 80089e6:	db00      	blt.n	80089ea <_printf_float+0x27a>
 80089e8:	e722      	b.n	8008830 <_printf_float+0xc0>
 80089ea:	0018      	movs	r0, r3
 80089ec:	e720      	b.n	8008830 <_printf_float+0xc0>
 80089ee:	0022      	movs	r2, r4
 80089f0:	2301      	movs	r3, #1
 80089f2:	0038      	movs	r0, r7
 80089f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f6:	321a      	adds	r2, #26
 80089f8:	47b0      	blx	r6
 80089fa:	1c43      	adds	r3, r0, #1
 80089fc:	d100      	bne.n	8008a00 <_printf_float+0x290>
 80089fe:	e715      	b.n	800882c <_printf_float+0xbc>
 8008a00:	3501      	adds	r5, #1
 8008a02:	e7e5      	b.n	80089d0 <_printf_float+0x260>
 8008a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dc38      	bgt.n	8008a7c <_printf_float+0x30c>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	0038      	movs	r0, r7
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <_printf_float+0x308>)
 8008a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a12:	47b0      	blx	r6
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d100      	bne.n	8008a1a <_printf_float+0x2aa>
 8008a18:	e708      	b.n	800882c <_printf_float+0xbc>
 8008a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	d102      	bne.n	8008a28 <_printf_float+0x2b8>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	07db      	lsls	r3, r3, #31
 8008a26:	d5d7      	bpl.n	80089d8 <_printf_float+0x268>
 8008a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a2a:	0038      	movs	r0, r7
 8008a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a30:	47b0      	blx	r6
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d100      	bne.n	8008a38 <_printf_float+0x2c8>
 8008a36:	e6f9      	b.n	800882c <_printf_float+0xbc>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a40:	425b      	negs	r3, r3
 8008a42:	4293      	cmp	r3, r2
 8008a44:	dc01      	bgt.n	8008a4a <_printf_float+0x2da>
 8008a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a48:	e797      	b.n	800897a <_printf_float+0x20a>
 8008a4a:	0022      	movs	r2, r4
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	0038      	movs	r0, r7
 8008a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a52:	321a      	adds	r2, #26
 8008a54:	47b0      	blx	r6
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	d100      	bne.n	8008a5c <_printf_float+0x2ec>
 8008a5a:	e6e7      	b.n	800882c <_printf_float+0xbc>
 8008a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5e:	3301      	adds	r3, #1
 8008a60:	e7eb      	b.n	8008a3a <_printf_float+0x2ca>
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	7fefffff 	.word	0x7fefffff
 8008a68:	0800d30c 	.word	0x0800d30c
 8008a6c:	0800d310 	.word	0x0800d310
 8008a70:	0800d314 	.word	0x0800d314
 8008a74:	0800d318 	.word	0x0800d318
 8008a78:	0800d31c 	.word	0x0800d31c
 8008a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a80:	920a      	str	r2, [sp, #40]	; 0x28
 8008a82:	429a      	cmp	r2, r3
 8008a84:	dd00      	ble.n	8008a88 <_printf_float+0x318>
 8008a86:	930a      	str	r3, [sp, #40]	; 0x28
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	dc3c      	bgt.n	8008b08 <_printf_float+0x398>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	930d      	str	r3, [sp, #52]	; 0x34
 8008a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a94:	43db      	mvns	r3, r3
 8008a96:	17db      	asrs	r3, r3, #31
 8008a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	dc34      	bgt.n	8008b18 <_printf_float+0x3a8>
 8008aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	db3d      	blt.n	8008b32 <_printf_float+0x3c2>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	07db      	lsls	r3, r3, #31
 8008aba:	d43a      	bmi.n	8008b32 <_printf_float+0x3c2>
 8008abc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	1a52      	subs	r2, r2, r1
 8008ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	dd00      	ble.n	8008ace <_printf_float+0x35e>
 8008acc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dc36      	bgt.n	8008b42 <_printf_float+0x3d2>
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	17db      	asrs	r3, r3, #31
 8008adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ade:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ae8:	400a      	ands	r2, r1
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	42ab      	cmp	r3, r5
 8008aee:	dc00      	bgt.n	8008af2 <_printf_float+0x382>
 8008af0:	e772      	b.n	80089d8 <_printf_float+0x268>
 8008af2:	0022      	movs	r2, r4
 8008af4:	2301      	movs	r3, #1
 8008af6:	0038      	movs	r0, r7
 8008af8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008afa:	321a      	adds	r2, #26
 8008afc:	47b0      	blx	r6
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d100      	bne.n	8008b04 <_printf_float+0x394>
 8008b02:	e693      	b.n	800882c <_printf_float+0xbc>
 8008b04:	3501      	adds	r5, #1
 8008b06:	e7ea      	b.n	8008ade <_printf_float+0x36e>
 8008b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0a:	002a      	movs	r2, r5
 8008b0c:	0038      	movs	r0, r7
 8008b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b10:	47b0      	blx	r6
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d1bb      	bne.n	8008a8e <_printf_float+0x31e>
 8008b16:	e689      	b.n	800882c <_printf_float+0xbc>
 8008b18:	0022      	movs	r2, r4
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	0038      	movs	r0, r7
 8008b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b20:	321a      	adds	r2, #26
 8008b22:	47b0      	blx	r6
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d100      	bne.n	8008b2a <_printf_float+0x3ba>
 8008b28:	e680      	b.n	800882c <_printf_float+0xbc>
 8008b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8008b30:	e7b3      	b.n	8008a9a <_printf_float+0x32a>
 8008b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b34:	0038      	movs	r0, r7
 8008b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b3a:	47b0      	blx	r6
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d1bd      	bne.n	8008abc <_printf_float+0x34c>
 8008b40:	e674      	b.n	800882c <_printf_float+0xbc>
 8008b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b44:	0038      	movs	r0, r7
 8008b46:	18ea      	adds	r2, r5, r3
 8008b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4c:	47b0      	blx	r6
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d1c0      	bne.n	8008ad4 <_printf_float+0x364>
 8008b52:	e66b      	b.n	800882c <_printf_float+0xbc>
 8008b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	dc02      	bgt.n	8008b60 <_printf_float+0x3f0>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	421a      	tst	r2, r3
 8008b5e:	d034      	beq.n	8008bca <_printf_float+0x45a>
 8008b60:	2301      	movs	r3, #1
 8008b62:	002a      	movs	r2, r5
 8008b64:	0038      	movs	r0, r7
 8008b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b68:	47b0      	blx	r6
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d100      	bne.n	8008b70 <_printf_float+0x400>
 8008b6e:	e65d      	b.n	800882c <_printf_float+0xbc>
 8008b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b72:	0038      	movs	r0, r7
 8008b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b78:	47b0      	blx	r6
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d100      	bne.n	8008b80 <_printf_float+0x410>
 8008b7e:	e655      	b.n	800882c <_printf_float+0xbc>
 8008b80:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008b82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008b84:	2200      	movs	r2, #0
 8008b86:	2300      	movs	r3, #0
 8008b88:	f7f7 fc6a 	bl	8000460 <__aeabi_dcmpeq>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d11a      	bne.n	8008bc6 <_printf_float+0x456>
 8008b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b92:	1c6a      	adds	r2, r5, #1
 8008b94:	3b01      	subs	r3, #1
 8008b96:	0038      	movs	r0, r7
 8008b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b9a:	47b0      	blx	r6
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d10e      	bne.n	8008bbe <_printf_float+0x44e>
 8008ba0:	e644      	b.n	800882c <_printf_float+0xbc>
 8008ba2:	0022      	movs	r2, r4
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	0038      	movs	r0, r7
 8008ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008baa:	321a      	adds	r2, #26
 8008bac:	47b0      	blx	r6
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d100      	bne.n	8008bb4 <_printf_float+0x444>
 8008bb2:	e63b      	b.n	800882c <_printf_float+0xbc>
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	42ab      	cmp	r3, r5
 8008bbc:	dcf1      	bgt.n	8008ba2 <_printf_float+0x432>
 8008bbe:	0022      	movs	r2, r4
 8008bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc2:	3250      	adds	r2, #80	; 0x50
 8008bc4:	e6da      	b.n	800897c <_printf_float+0x20c>
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	e7f5      	b.n	8008bb6 <_printf_float+0x446>
 8008bca:	002a      	movs	r2, r5
 8008bcc:	e7e3      	b.n	8008b96 <_printf_float+0x426>
 8008bce:	0022      	movs	r2, r4
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	0038      	movs	r0, r7
 8008bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bd6:	3219      	adds	r2, #25
 8008bd8:	47b0      	blx	r6
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	d100      	bne.n	8008be0 <_printf_float+0x470>
 8008bde:	e625      	b.n	800882c <_printf_float+0xbc>
 8008be0:	3501      	adds	r5, #1
 8008be2:	68e3      	ldr	r3, [r4, #12]
 8008be4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	42ab      	cmp	r3, r5
 8008bea:	dcf0      	bgt.n	8008bce <_printf_float+0x45e>
 8008bec:	e6f8      	b.n	80089e0 <_printf_float+0x270>
 8008bee:	2500      	movs	r5, #0
 8008bf0:	e7f7      	b.n	8008be2 <_printf_float+0x472>
 8008bf2:	46c0      	nop			; (mov r8, r8)

08008bf4 <_printf_common>:
 8008bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bf6:	0015      	movs	r5, r2
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	688a      	ldr	r2, [r1, #8]
 8008bfc:	690b      	ldr	r3, [r1, #16]
 8008bfe:	000c      	movs	r4, r1
 8008c00:	9000      	str	r0, [sp, #0]
 8008c02:	4293      	cmp	r3, r2
 8008c04:	da00      	bge.n	8008c08 <_printf_common+0x14>
 8008c06:	0013      	movs	r3, r2
 8008c08:	0022      	movs	r2, r4
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	3243      	adds	r2, #67	; 0x43
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	d001      	beq.n	8008c18 <_printf_common+0x24>
 8008c14:	3301      	adds	r3, #1
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	069b      	lsls	r3, r3, #26
 8008c1c:	d502      	bpl.n	8008c24 <_printf_common+0x30>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	3302      	adds	r3, #2
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	2306      	movs	r3, #6
 8008c28:	0017      	movs	r7, r2
 8008c2a:	401f      	ands	r7, r3
 8008c2c:	421a      	tst	r2, r3
 8008c2e:	d027      	beq.n	8008c80 <_printf_common+0x8c>
 8008c30:	0023      	movs	r3, r4
 8008c32:	3343      	adds	r3, #67	; 0x43
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	1e5a      	subs	r2, r3, #1
 8008c38:	4193      	sbcs	r3, r2
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	0692      	lsls	r2, r2, #26
 8008c3e:	d430      	bmi.n	8008ca2 <_printf_common+0xae>
 8008c40:	0022      	movs	r2, r4
 8008c42:	9901      	ldr	r1, [sp, #4]
 8008c44:	9800      	ldr	r0, [sp, #0]
 8008c46:	9e08      	ldr	r6, [sp, #32]
 8008c48:	3243      	adds	r2, #67	; 0x43
 8008c4a:	47b0      	blx	r6
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d025      	beq.n	8008c9c <_printf_common+0xa8>
 8008c50:	2306      	movs	r3, #6
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	682a      	ldr	r2, [r5, #0]
 8008c56:	68e1      	ldr	r1, [r4, #12]
 8008c58:	2500      	movs	r5, #0
 8008c5a:	4003      	ands	r3, r0
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d103      	bne.n	8008c68 <_printf_common+0x74>
 8008c60:	1a8d      	subs	r5, r1, r2
 8008c62:	43eb      	mvns	r3, r5
 8008c64:	17db      	asrs	r3, r3, #31
 8008c66:	401d      	ands	r5, r3
 8008c68:	68a3      	ldr	r3, [r4, #8]
 8008c6a:	6922      	ldr	r2, [r4, #16]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	dd01      	ble.n	8008c74 <_printf_common+0x80>
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	18ed      	adds	r5, r5, r3
 8008c74:	2700      	movs	r7, #0
 8008c76:	42bd      	cmp	r5, r7
 8008c78:	d120      	bne.n	8008cbc <_printf_common+0xc8>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e010      	b.n	8008ca0 <_printf_common+0xac>
 8008c7e:	3701      	adds	r7, #1
 8008c80:	68e3      	ldr	r3, [r4, #12]
 8008c82:	682a      	ldr	r2, [r5, #0]
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	42bb      	cmp	r3, r7
 8008c88:	ddd2      	ble.n	8008c30 <_printf_common+0x3c>
 8008c8a:	0022      	movs	r2, r4
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	9901      	ldr	r1, [sp, #4]
 8008c90:	9800      	ldr	r0, [sp, #0]
 8008c92:	9e08      	ldr	r6, [sp, #32]
 8008c94:	3219      	adds	r2, #25
 8008c96:	47b0      	blx	r6
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d1f0      	bne.n	8008c7e <_printf_common+0x8a>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ca2:	2030      	movs	r0, #48	; 0x30
 8008ca4:	18e1      	adds	r1, r4, r3
 8008ca6:	3143      	adds	r1, #67	; 0x43
 8008ca8:	7008      	strb	r0, [r1, #0]
 8008caa:	0021      	movs	r1, r4
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	3145      	adds	r1, #69	; 0x45
 8008cb0:	7809      	ldrb	r1, [r1, #0]
 8008cb2:	18a2      	adds	r2, r4, r2
 8008cb4:	3243      	adds	r2, #67	; 0x43
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	7011      	strb	r1, [r2, #0]
 8008cba:	e7c1      	b.n	8008c40 <_printf_common+0x4c>
 8008cbc:	0022      	movs	r2, r4
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	9901      	ldr	r1, [sp, #4]
 8008cc2:	9800      	ldr	r0, [sp, #0]
 8008cc4:	9e08      	ldr	r6, [sp, #32]
 8008cc6:	321a      	adds	r2, #26
 8008cc8:	47b0      	blx	r6
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d0e6      	beq.n	8008c9c <_printf_common+0xa8>
 8008cce:	3701      	adds	r7, #1
 8008cd0:	e7d1      	b.n	8008c76 <_printf_common+0x82>
	...

08008cd4 <_printf_i>:
 8008cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd6:	b08b      	sub	sp, #44	; 0x2c
 8008cd8:	9206      	str	r2, [sp, #24]
 8008cda:	000a      	movs	r2, r1
 8008cdc:	3243      	adds	r2, #67	; 0x43
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	9005      	str	r0, [sp, #20]
 8008ce2:	9204      	str	r2, [sp, #16]
 8008ce4:	7e0a      	ldrb	r2, [r1, #24]
 8008ce6:	000c      	movs	r4, r1
 8008ce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cea:	2a78      	cmp	r2, #120	; 0x78
 8008cec:	d807      	bhi.n	8008cfe <_printf_i+0x2a>
 8008cee:	2a62      	cmp	r2, #98	; 0x62
 8008cf0:	d809      	bhi.n	8008d06 <_printf_i+0x32>
 8008cf2:	2a00      	cmp	r2, #0
 8008cf4:	d100      	bne.n	8008cf8 <_printf_i+0x24>
 8008cf6:	e0c1      	b.n	8008e7c <_printf_i+0x1a8>
 8008cf8:	2a58      	cmp	r2, #88	; 0x58
 8008cfa:	d100      	bne.n	8008cfe <_printf_i+0x2a>
 8008cfc:	e08c      	b.n	8008e18 <_printf_i+0x144>
 8008cfe:	0026      	movs	r6, r4
 8008d00:	3642      	adds	r6, #66	; 0x42
 8008d02:	7032      	strb	r2, [r6, #0]
 8008d04:	e022      	b.n	8008d4c <_printf_i+0x78>
 8008d06:	0010      	movs	r0, r2
 8008d08:	3863      	subs	r0, #99	; 0x63
 8008d0a:	2815      	cmp	r0, #21
 8008d0c:	d8f7      	bhi.n	8008cfe <_printf_i+0x2a>
 8008d0e:	f7f7 fa17 	bl	8000140 <__gnu_thumb1_case_shi>
 8008d12:	0016      	.short	0x0016
 8008d14:	fff6001f 	.word	0xfff6001f
 8008d18:	fff6fff6 	.word	0xfff6fff6
 8008d1c:	001ffff6 	.word	0x001ffff6
 8008d20:	fff6fff6 	.word	0xfff6fff6
 8008d24:	fff6fff6 	.word	0xfff6fff6
 8008d28:	003600a8 	.word	0x003600a8
 8008d2c:	fff6009a 	.word	0xfff6009a
 8008d30:	00b9fff6 	.word	0x00b9fff6
 8008d34:	0036fff6 	.word	0x0036fff6
 8008d38:	fff6fff6 	.word	0xfff6fff6
 8008d3c:	009e      	.short	0x009e
 8008d3e:	0026      	movs	r6, r4
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	3642      	adds	r6, #66	; 0x42
 8008d44:	1d11      	adds	r1, r2, #4
 8008d46:	6019      	str	r1, [r3, #0]
 8008d48:	6813      	ldr	r3, [r2, #0]
 8008d4a:	7033      	strb	r3, [r6, #0]
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0a7      	b.n	8008ea0 <_printf_i+0x1cc>
 8008d50:	6808      	ldr	r0, [r1, #0]
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	1d0a      	adds	r2, r1, #4
 8008d56:	0605      	lsls	r5, r0, #24
 8008d58:	d50b      	bpl.n	8008d72 <_printf_i+0x9e>
 8008d5a:	680d      	ldr	r5, [r1, #0]
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	da03      	bge.n	8008d6a <_printf_i+0x96>
 8008d62:	232d      	movs	r3, #45	; 0x2d
 8008d64:	9a04      	ldr	r2, [sp, #16]
 8008d66:	426d      	negs	r5, r5
 8008d68:	7013      	strb	r3, [r2, #0]
 8008d6a:	4b61      	ldr	r3, [pc, #388]	; (8008ef0 <_printf_i+0x21c>)
 8008d6c:	270a      	movs	r7, #10
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	e01b      	b.n	8008daa <_printf_i+0xd6>
 8008d72:	680d      	ldr	r5, [r1, #0]
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	0641      	lsls	r1, r0, #25
 8008d78:	d5f1      	bpl.n	8008d5e <_printf_i+0x8a>
 8008d7a:	b22d      	sxth	r5, r5
 8008d7c:	e7ef      	b.n	8008d5e <_printf_i+0x8a>
 8008d7e:	680d      	ldr	r5, [r1, #0]
 8008d80:	6819      	ldr	r1, [r3, #0]
 8008d82:	1d08      	adds	r0, r1, #4
 8008d84:	6018      	str	r0, [r3, #0]
 8008d86:	062e      	lsls	r6, r5, #24
 8008d88:	d501      	bpl.n	8008d8e <_printf_i+0xba>
 8008d8a:	680d      	ldr	r5, [r1, #0]
 8008d8c:	e003      	b.n	8008d96 <_printf_i+0xc2>
 8008d8e:	066d      	lsls	r5, r5, #25
 8008d90:	d5fb      	bpl.n	8008d8a <_printf_i+0xb6>
 8008d92:	680d      	ldr	r5, [r1, #0]
 8008d94:	b2ad      	uxth	r5, r5
 8008d96:	4b56      	ldr	r3, [pc, #344]	; (8008ef0 <_printf_i+0x21c>)
 8008d98:	2708      	movs	r7, #8
 8008d9a:	9303      	str	r3, [sp, #12]
 8008d9c:	2a6f      	cmp	r2, #111	; 0x6f
 8008d9e:	d000      	beq.n	8008da2 <_printf_i+0xce>
 8008da0:	3702      	adds	r7, #2
 8008da2:	0023      	movs	r3, r4
 8008da4:	2200      	movs	r2, #0
 8008da6:	3343      	adds	r3, #67	; 0x43
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	db03      	blt.n	8008dba <_printf_i+0xe6>
 8008db2:	2204      	movs	r2, #4
 8008db4:	6821      	ldr	r1, [r4, #0]
 8008db6:	4391      	bics	r1, r2
 8008db8:	6021      	str	r1, [r4, #0]
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	d102      	bne.n	8008dc4 <_printf_i+0xf0>
 8008dbe:	9e04      	ldr	r6, [sp, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00c      	beq.n	8008dde <_printf_i+0x10a>
 8008dc4:	9e04      	ldr	r6, [sp, #16]
 8008dc6:	0028      	movs	r0, r5
 8008dc8:	0039      	movs	r1, r7
 8008dca:	f7f7 fa49 	bl	8000260 <__aeabi_uidivmod>
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	3e01      	subs	r6, #1
 8008dd2:	5c5b      	ldrb	r3, [r3, r1]
 8008dd4:	7033      	strb	r3, [r6, #0]
 8008dd6:	002b      	movs	r3, r5
 8008dd8:	0005      	movs	r5, r0
 8008dda:	429f      	cmp	r7, r3
 8008ddc:	d9f3      	bls.n	8008dc6 <_printf_i+0xf2>
 8008dde:	2f08      	cmp	r7, #8
 8008de0:	d109      	bne.n	8008df6 <_printf_i+0x122>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	07db      	lsls	r3, r3, #31
 8008de6:	d506      	bpl.n	8008df6 <_printf_i+0x122>
 8008de8:	6863      	ldr	r3, [r4, #4]
 8008dea:	6922      	ldr	r2, [r4, #16]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	dc02      	bgt.n	8008df6 <_printf_i+0x122>
 8008df0:	2330      	movs	r3, #48	; 0x30
 8008df2:	3e01      	subs	r6, #1
 8008df4:	7033      	strb	r3, [r6, #0]
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	1b9b      	subs	r3, r3, r6
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	9b07      	ldr	r3, [sp, #28]
 8008dfe:	0021      	movs	r1, r4
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	9805      	ldr	r0, [sp, #20]
 8008e04:	9b06      	ldr	r3, [sp, #24]
 8008e06:	aa09      	add	r2, sp, #36	; 0x24
 8008e08:	f7ff fef4 	bl	8008bf4 <_printf_common>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d14c      	bne.n	8008eaa <_printf_i+0x1d6>
 8008e10:	2001      	movs	r0, #1
 8008e12:	4240      	negs	r0, r0
 8008e14:	b00b      	add	sp, #44	; 0x2c
 8008e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e18:	3145      	adds	r1, #69	; 0x45
 8008e1a:	700a      	strb	r2, [r1, #0]
 8008e1c:	4a34      	ldr	r2, [pc, #208]	; (8008ef0 <_printf_i+0x21c>)
 8008e1e:	9203      	str	r2, [sp, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	6821      	ldr	r1, [r4, #0]
 8008e24:	ca20      	ldmia	r2!, {r5}
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	0608      	lsls	r0, r1, #24
 8008e2a:	d516      	bpl.n	8008e5a <_printf_i+0x186>
 8008e2c:	07cb      	lsls	r3, r1, #31
 8008e2e:	d502      	bpl.n	8008e36 <_printf_i+0x162>
 8008e30:	2320      	movs	r3, #32
 8008e32:	4319      	orrs	r1, r3
 8008e34:	6021      	str	r1, [r4, #0]
 8008e36:	2710      	movs	r7, #16
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	d1b2      	bne.n	8008da2 <_printf_i+0xce>
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	439a      	bics	r2, r3
 8008e42:	6022      	str	r2, [r4, #0]
 8008e44:	e7ad      	b.n	8008da2 <_printf_i+0xce>
 8008e46:	2220      	movs	r2, #32
 8008e48:	6809      	ldr	r1, [r1, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	0022      	movs	r2, r4
 8008e50:	2178      	movs	r1, #120	; 0x78
 8008e52:	3245      	adds	r2, #69	; 0x45
 8008e54:	7011      	strb	r1, [r2, #0]
 8008e56:	4a27      	ldr	r2, [pc, #156]	; (8008ef4 <_printf_i+0x220>)
 8008e58:	e7e1      	b.n	8008e1e <_printf_i+0x14a>
 8008e5a:	0648      	lsls	r0, r1, #25
 8008e5c:	d5e6      	bpl.n	8008e2c <_printf_i+0x158>
 8008e5e:	b2ad      	uxth	r5, r5
 8008e60:	e7e4      	b.n	8008e2c <_printf_i+0x158>
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	680d      	ldr	r5, [r1, #0]
 8008e66:	1d10      	adds	r0, r2, #4
 8008e68:	6949      	ldr	r1, [r1, #20]
 8008e6a:	6018      	str	r0, [r3, #0]
 8008e6c:	6813      	ldr	r3, [r2, #0]
 8008e6e:	062e      	lsls	r6, r5, #24
 8008e70:	d501      	bpl.n	8008e76 <_printf_i+0x1a2>
 8008e72:	6019      	str	r1, [r3, #0]
 8008e74:	e002      	b.n	8008e7c <_printf_i+0x1a8>
 8008e76:	066d      	lsls	r5, r5, #25
 8008e78:	d5fb      	bpl.n	8008e72 <_printf_i+0x19e>
 8008e7a:	8019      	strh	r1, [r3, #0]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9e04      	ldr	r6, [sp, #16]
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	e7bb      	b.n	8008dfc <_printf_i+0x128>
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	1d11      	adds	r1, r2, #4
 8008e88:	6019      	str	r1, [r3, #0]
 8008e8a:	6816      	ldr	r6, [r2, #0]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	0030      	movs	r0, r6
 8008e90:	6862      	ldr	r2, [r4, #4]
 8008e92:	f002 feff 	bl	800bc94 <memchr>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d001      	beq.n	8008e9e <_printf_i+0x1ca>
 8008e9a:	1b80      	subs	r0, r0, r6
 8008e9c:	6060      	str	r0, [r4, #4]
 8008e9e:	6863      	ldr	r3, [r4, #4]
 8008ea0:	6123      	str	r3, [r4, #16]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9a04      	ldr	r2, [sp, #16]
 8008ea6:	7013      	strb	r3, [r2, #0]
 8008ea8:	e7a8      	b.n	8008dfc <_printf_i+0x128>
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	0032      	movs	r2, r6
 8008eae:	9906      	ldr	r1, [sp, #24]
 8008eb0:	9805      	ldr	r0, [sp, #20]
 8008eb2:	9d07      	ldr	r5, [sp, #28]
 8008eb4:	47a8      	blx	r5
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d0aa      	beq.n	8008e10 <_printf_i+0x13c>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	079b      	lsls	r3, r3, #30
 8008ebe:	d415      	bmi.n	8008eec <_printf_i+0x218>
 8008ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec2:	68e0      	ldr	r0, [r4, #12]
 8008ec4:	4298      	cmp	r0, r3
 8008ec6:	daa5      	bge.n	8008e14 <_printf_i+0x140>
 8008ec8:	0018      	movs	r0, r3
 8008eca:	e7a3      	b.n	8008e14 <_printf_i+0x140>
 8008ecc:	0022      	movs	r2, r4
 8008ece:	2301      	movs	r3, #1
 8008ed0:	9906      	ldr	r1, [sp, #24]
 8008ed2:	9805      	ldr	r0, [sp, #20]
 8008ed4:	9e07      	ldr	r6, [sp, #28]
 8008ed6:	3219      	adds	r2, #25
 8008ed8:	47b0      	blx	r6
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d098      	beq.n	8008e10 <_printf_i+0x13c>
 8008ede:	3501      	adds	r5, #1
 8008ee0:	68e3      	ldr	r3, [r4, #12]
 8008ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	42ab      	cmp	r3, r5
 8008ee8:	dcf0      	bgt.n	8008ecc <_printf_i+0x1f8>
 8008eea:	e7e9      	b.n	8008ec0 <_printf_i+0x1ec>
 8008eec:	2500      	movs	r5, #0
 8008eee:	e7f7      	b.n	8008ee0 <_printf_i+0x20c>
 8008ef0:	0800d31e 	.word	0x0800d31e
 8008ef4:	0800d32f 	.word	0x0800d32f

08008ef8 <_scanf_float>:
 8008ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efa:	b08b      	sub	sp, #44	; 0x2c
 8008efc:	0015      	movs	r5, r2
 8008efe:	9001      	str	r0, [sp, #4]
 8008f00:	22ae      	movs	r2, #174	; 0xae
 8008f02:	2000      	movs	r0, #0
 8008f04:	9306      	str	r3, [sp, #24]
 8008f06:	688b      	ldr	r3, [r1, #8]
 8008f08:	000e      	movs	r6, r1
 8008f0a:	1e59      	subs	r1, r3, #1
 8008f0c:	0052      	lsls	r2, r2, #1
 8008f0e:	9005      	str	r0, [sp, #20]
 8008f10:	4291      	cmp	r1, r2
 8008f12:	d905      	bls.n	8008f20 <_scanf_float+0x28>
 8008f14:	3b5e      	subs	r3, #94	; 0x5e
 8008f16:	3bff      	subs	r3, #255	; 0xff
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	235e      	movs	r3, #94	; 0x5e
 8008f1c:	33ff      	adds	r3, #255	; 0xff
 8008f1e:	60b3      	str	r3, [r6, #8]
 8008f20:	23f0      	movs	r3, #240	; 0xf0
 8008f22:	6832      	ldr	r2, [r6, #0]
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	4313      	orrs	r3, r2
 8008f28:	6033      	str	r3, [r6, #0]
 8008f2a:	0033      	movs	r3, r6
 8008f2c:	2400      	movs	r4, #0
 8008f2e:	331c      	adds	r3, #28
 8008f30:	001f      	movs	r7, r3
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	9402      	str	r4, [sp, #8]
 8008f36:	9408      	str	r4, [sp, #32]
 8008f38:	9407      	str	r4, [sp, #28]
 8008f3a:	9400      	str	r4, [sp, #0]
 8008f3c:	9404      	str	r4, [sp, #16]
 8008f3e:	68b2      	ldr	r2, [r6, #8]
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d00a      	beq.n	8008f5a <_scanf_float+0x62>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b4e      	cmp	r3, #78	; 0x4e
 8008f4a:	d844      	bhi.n	8008fd6 <_scanf_float+0xde>
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	2b40      	cmp	r3, #64	; 0x40
 8008f50:	d82c      	bhi.n	8008fac <_scanf_float+0xb4>
 8008f52:	382b      	subs	r0, #43	; 0x2b
 8008f54:	b2c1      	uxtb	r1, r0
 8008f56:	290e      	cmp	r1, #14
 8008f58:	d92a      	bls.n	8008fb0 <_scanf_float+0xb8>
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <_scanf_float+0x70>
 8008f60:	6832      	ldr	r2, [r6, #0]
 8008f62:	4ba4      	ldr	r3, [pc, #656]	; (80091f4 <_scanf_float+0x2fc>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	6033      	str	r3, [r6, #0]
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d900      	bls.n	8008f72 <_scanf_float+0x7a>
 8008f70:	e0f9      	b.n	8009166 <_scanf_float+0x26e>
 8008f72:	24be      	movs	r4, #190	; 0xbe
 8008f74:	0064      	lsls	r4, r4, #1
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	429f      	cmp	r7, r3
 8008f7a:	d900      	bls.n	8008f7e <_scanf_float+0x86>
 8008f7c:	e0e9      	b.n	8009152 <_scanf_float+0x25a>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	9302      	str	r3, [sp, #8]
 8008f82:	e185      	b.n	8009290 <_scanf_float+0x398>
 8008f84:	0018      	movs	r0, r3
 8008f86:	3861      	subs	r0, #97	; 0x61
 8008f88:	280d      	cmp	r0, #13
 8008f8a:	d8e6      	bhi.n	8008f5a <_scanf_float+0x62>
 8008f8c:	f7f7 f8d8 	bl	8000140 <__gnu_thumb1_case_shi>
 8008f90:	ffe50083 	.word	0xffe50083
 8008f94:	ffe5ffe5 	.word	0xffe5ffe5
 8008f98:	00a200b6 	.word	0x00a200b6
 8008f9c:	ffe5ffe5 	.word	0xffe5ffe5
 8008fa0:	ffe50089 	.word	0xffe50089
 8008fa4:	ffe5ffe5 	.word	0xffe5ffe5
 8008fa8:	0065ffe5 	.word	0x0065ffe5
 8008fac:	3841      	subs	r0, #65	; 0x41
 8008fae:	e7eb      	b.n	8008f88 <_scanf_float+0x90>
 8008fb0:	280e      	cmp	r0, #14
 8008fb2:	d8d2      	bhi.n	8008f5a <_scanf_float+0x62>
 8008fb4:	f7f7 f8c4 	bl	8000140 <__gnu_thumb1_case_shi>
 8008fb8:	ffd1004b 	.word	0xffd1004b
 8008fbc:	0098004b 	.word	0x0098004b
 8008fc0:	0020ffd1 	.word	0x0020ffd1
 8008fc4:	00400040 	.word	0x00400040
 8008fc8:	00400040 	.word	0x00400040
 8008fcc:	00400040 	.word	0x00400040
 8008fd0:	00400040 	.word	0x00400040
 8008fd4:	0040      	.short	0x0040
 8008fd6:	2b6e      	cmp	r3, #110	; 0x6e
 8008fd8:	d809      	bhi.n	8008fee <_scanf_float+0xf6>
 8008fda:	2b60      	cmp	r3, #96	; 0x60
 8008fdc:	d8d2      	bhi.n	8008f84 <_scanf_float+0x8c>
 8008fde:	2b54      	cmp	r3, #84	; 0x54
 8008fe0:	d07d      	beq.n	80090de <_scanf_float+0x1e6>
 8008fe2:	2b59      	cmp	r3, #89	; 0x59
 8008fe4:	d1b9      	bne.n	8008f5a <_scanf_float+0x62>
 8008fe6:	2c07      	cmp	r4, #7
 8008fe8:	d1b7      	bne.n	8008f5a <_scanf_float+0x62>
 8008fea:	2408      	movs	r4, #8
 8008fec:	e02c      	b.n	8009048 <_scanf_float+0x150>
 8008fee:	2b74      	cmp	r3, #116	; 0x74
 8008ff0:	d075      	beq.n	80090de <_scanf_float+0x1e6>
 8008ff2:	2b79      	cmp	r3, #121	; 0x79
 8008ff4:	d0f7      	beq.n	8008fe6 <_scanf_float+0xee>
 8008ff6:	e7b0      	b.n	8008f5a <_scanf_float+0x62>
 8008ff8:	6831      	ldr	r1, [r6, #0]
 8008ffa:	05c8      	lsls	r0, r1, #23
 8008ffc:	d51c      	bpl.n	8009038 <_scanf_float+0x140>
 8008ffe:	2380      	movs	r3, #128	; 0x80
 8009000:	4399      	bics	r1, r3
 8009002:	9b00      	ldr	r3, [sp, #0]
 8009004:	6031      	str	r1, [r6, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <_scanf_float+0x120>
 8009010:	3b01      	subs	r3, #1
 8009012:	3201      	adds	r2, #1
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	60b2      	str	r2, [r6, #8]
 8009018:	68b3      	ldr	r3, [r6, #8]
 800901a:	3b01      	subs	r3, #1
 800901c:	60b3      	str	r3, [r6, #8]
 800901e:	6933      	ldr	r3, [r6, #16]
 8009020:	3301      	adds	r3, #1
 8009022:	6133      	str	r3, [r6, #16]
 8009024:	686b      	ldr	r3, [r5, #4]
 8009026:	3b01      	subs	r3, #1
 8009028:	606b      	str	r3, [r5, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dc00      	bgt.n	8009030 <_scanf_float+0x138>
 800902e:	e086      	b.n	800913e <_scanf_float+0x246>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	e782      	b.n	8008f3e <_scanf_float+0x46>
 8009038:	9a02      	ldr	r2, [sp, #8]
 800903a:	1912      	adds	r2, r2, r4
 800903c:	2a00      	cmp	r2, #0
 800903e:	d18c      	bne.n	8008f5a <_scanf_float+0x62>
 8009040:	4a6d      	ldr	r2, [pc, #436]	; (80091f8 <_scanf_float+0x300>)
 8009042:	6831      	ldr	r1, [r6, #0]
 8009044:	400a      	ands	r2, r1
 8009046:	6032      	str	r2, [r6, #0]
 8009048:	703b      	strb	r3, [r7, #0]
 800904a:	3701      	adds	r7, #1
 800904c:	e7e4      	b.n	8009018 <_scanf_float+0x120>
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	6832      	ldr	r2, [r6, #0]
 8009052:	420a      	tst	r2, r1
 8009054:	d081      	beq.n	8008f5a <_scanf_float+0x62>
 8009056:	438a      	bics	r2, r1
 8009058:	e7f5      	b.n	8009046 <_scanf_float+0x14e>
 800905a:	9a02      	ldr	r2, [sp, #8]
 800905c:	2a00      	cmp	r2, #0
 800905e:	d10f      	bne.n	8009080 <_scanf_float+0x188>
 8009060:	9a00      	ldr	r2, [sp, #0]
 8009062:	2a00      	cmp	r2, #0
 8009064:	d10f      	bne.n	8009086 <_scanf_float+0x18e>
 8009066:	6832      	ldr	r2, [r6, #0]
 8009068:	21e0      	movs	r1, #224	; 0xe0
 800906a:	0010      	movs	r0, r2
 800906c:	00c9      	lsls	r1, r1, #3
 800906e:	4008      	ands	r0, r1
 8009070:	4288      	cmp	r0, r1
 8009072:	d108      	bne.n	8009086 <_scanf_float+0x18e>
 8009074:	4961      	ldr	r1, [pc, #388]	; (80091fc <_scanf_float+0x304>)
 8009076:	400a      	ands	r2, r1
 8009078:	6032      	str	r2, [r6, #0]
 800907a:	2201      	movs	r2, #1
 800907c:	9202      	str	r2, [sp, #8]
 800907e:	e7e3      	b.n	8009048 <_scanf_float+0x150>
 8009080:	9a02      	ldr	r2, [sp, #8]
 8009082:	2a02      	cmp	r2, #2
 8009084:	d059      	beq.n	800913a <_scanf_float+0x242>
 8009086:	2c01      	cmp	r4, #1
 8009088:	d002      	beq.n	8009090 <_scanf_float+0x198>
 800908a:	2c04      	cmp	r4, #4
 800908c:	d000      	beq.n	8009090 <_scanf_float+0x198>
 800908e:	e764      	b.n	8008f5a <_scanf_float+0x62>
 8009090:	3401      	adds	r4, #1
 8009092:	b2e4      	uxtb	r4, r4
 8009094:	e7d8      	b.n	8009048 <_scanf_float+0x150>
 8009096:	9a02      	ldr	r2, [sp, #8]
 8009098:	2a01      	cmp	r2, #1
 800909a:	d000      	beq.n	800909e <_scanf_float+0x1a6>
 800909c:	e75d      	b.n	8008f5a <_scanf_float+0x62>
 800909e:	2202      	movs	r2, #2
 80090a0:	e7ec      	b.n	800907c <_scanf_float+0x184>
 80090a2:	2c00      	cmp	r4, #0
 80090a4:	d110      	bne.n	80090c8 <_scanf_float+0x1d0>
 80090a6:	9a00      	ldr	r2, [sp, #0]
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d000      	beq.n	80090ae <_scanf_float+0x1b6>
 80090ac:	e758      	b.n	8008f60 <_scanf_float+0x68>
 80090ae:	6832      	ldr	r2, [r6, #0]
 80090b0:	21e0      	movs	r1, #224	; 0xe0
 80090b2:	0010      	movs	r0, r2
 80090b4:	00c9      	lsls	r1, r1, #3
 80090b6:	4008      	ands	r0, r1
 80090b8:	4288      	cmp	r0, r1
 80090ba:	d000      	beq.n	80090be <_scanf_float+0x1c6>
 80090bc:	e754      	b.n	8008f68 <_scanf_float+0x70>
 80090be:	494f      	ldr	r1, [pc, #316]	; (80091fc <_scanf_float+0x304>)
 80090c0:	3401      	adds	r4, #1
 80090c2:	400a      	ands	r2, r1
 80090c4:	6032      	str	r2, [r6, #0]
 80090c6:	e7bf      	b.n	8009048 <_scanf_float+0x150>
 80090c8:	21fd      	movs	r1, #253	; 0xfd
 80090ca:	1ee2      	subs	r2, r4, #3
 80090cc:	420a      	tst	r2, r1
 80090ce:	d000      	beq.n	80090d2 <_scanf_float+0x1da>
 80090d0:	e743      	b.n	8008f5a <_scanf_float+0x62>
 80090d2:	e7dd      	b.n	8009090 <_scanf_float+0x198>
 80090d4:	2c02      	cmp	r4, #2
 80090d6:	d000      	beq.n	80090da <_scanf_float+0x1e2>
 80090d8:	e73f      	b.n	8008f5a <_scanf_float+0x62>
 80090da:	2403      	movs	r4, #3
 80090dc:	e7b4      	b.n	8009048 <_scanf_float+0x150>
 80090de:	2c06      	cmp	r4, #6
 80090e0:	d000      	beq.n	80090e4 <_scanf_float+0x1ec>
 80090e2:	e73a      	b.n	8008f5a <_scanf_float+0x62>
 80090e4:	2407      	movs	r4, #7
 80090e6:	e7af      	b.n	8009048 <_scanf_float+0x150>
 80090e8:	6832      	ldr	r2, [r6, #0]
 80090ea:	0591      	lsls	r1, r2, #22
 80090ec:	d400      	bmi.n	80090f0 <_scanf_float+0x1f8>
 80090ee:	e734      	b.n	8008f5a <_scanf_float+0x62>
 80090f0:	4943      	ldr	r1, [pc, #268]	; (8009200 <_scanf_float+0x308>)
 80090f2:	400a      	ands	r2, r1
 80090f4:	6032      	str	r2, [r6, #0]
 80090f6:	9a00      	ldr	r2, [sp, #0]
 80090f8:	9204      	str	r2, [sp, #16]
 80090fa:	e7a5      	b.n	8009048 <_scanf_float+0x150>
 80090fc:	21a0      	movs	r1, #160	; 0xa0
 80090fe:	2080      	movs	r0, #128	; 0x80
 8009100:	6832      	ldr	r2, [r6, #0]
 8009102:	00c9      	lsls	r1, r1, #3
 8009104:	4011      	ands	r1, r2
 8009106:	00c0      	lsls	r0, r0, #3
 8009108:	4281      	cmp	r1, r0
 800910a:	d006      	beq.n	800911a <_scanf_float+0x222>
 800910c:	4202      	tst	r2, r0
 800910e:	d100      	bne.n	8009112 <_scanf_float+0x21a>
 8009110:	e723      	b.n	8008f5a <_scanf_float+0x62>
 8009112:	9900      	ldr	r1, [sp, #0]
 8009114:	2900      	cmp	r1, #0
 8009116:	d100      	bne.n	800911a <_scanf_float+0x222>
 8009118:	e726      	b.n	8008f68 <_scanf_float+0x70>
 800911a:	0591      	lsls	r1, r2, #22
 800911c:	d404      	bmi.n	8009128 <_scanf_float+0x230>
 800911e:	9900      	ldr	r1, [sp, #0]
 8009120:	9804      	ldr	r0, [sp, #16]
 8009122:	9708      	str	r7, [sp, #32]
 8009124:	1a09      	subs	r1, r1, r0
 8009126:	9107      	str	r1, [sp, #28]
 8009128:	4934      	ldr	r1, [pc, #208]	; (80091fc <_scanf_float+0x304>)
 800912a:	400a      	ands	r2, r1
 800912c:	21c0      	movs	r1, #192	; 0xc0
 800912e:	0049      	lsls	r1, r1, #1
 8009130:	430a      	orrs	r2, r1
 8009132:	6032      	str	r2, [r6, #0]
 8009134:	2200      	movs	r2, #0
 8009136:	9200      	str	r2, [sp, #0]
 8009138:	e786      	b.n	8009048 <_scanf_float+0x150>
 800913a:	2203      	movs	r2, #3
 800913c:	e79e      	b.n	800907c <_scanf_float+0x184>
 800913e:	23c0      	movs	r3, #192	; 0xc0
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	0029      	movs	r1, r5
 8009144:	58f3      	ldr	r3, [r6, r3]
 8009146:	9801      	ldr	r0, [sp, #4]
 8009148:	4798      	blx	r3
 800914a:	2800      	cmp	r0, #0
 800914c:	d100      	bne.n	8009150 <_scanf_float+0x258>
 800914e:	e6f6      	b.n	8008f3e <_scanf_float+0x46>
 8009150:	e703      	b.n	8008f5a <_scanf_float+0x62>
 8009152:	3f01      	subs	r7, #1
 8009154:	5933      	ldr	r3, [r6, r4]
 8009156:	002a      	movs	r2, r5
 8009158:	7839      	ldrb	r1, [r7, #0]
 800915a:	9801      	ldr	r0, [sp, #4]
 800915c:	4798      	blx	r3
 800915e:	6933      	ldr	r3, [r6, #16]
 8009160:	3b01      	subs	r3, #1
 8009162:	6133      	str	r3, [r6, #16]
 8009164:	e707      	b.n	8008f76 <_scanf_float+0x7e>
 8009166:	1e63      	subs	r3, r4, #1
 8009168:	2b06      	cmp	r3, #6
 800916a:	d80e      	bhi.n	800918a <_scanf_float+0x292>
 800916c:	9702      	str	r7, [sp, #8]
 800916e:	2c02      	cmp	r4, #2
 8009170:	d920      	bls.n	80091b4 <_scanf_float+0x2bc>
 8009172:	1be3      	subs	r3, r4, r7
 8009174:	b2db      	uxtb	r3, r3
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	9b02      	ldr	r3, [sp, #8]
 800917a:	9a05      	ldr	r2, [sp, #20]
 800917c:	189b      	adds	r3, r3, r2
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b03      	cmp	r3, #3
 8009182:	d827      	bhi.n	80091d4 <_scanf_float+0x2dc>
 8009184:	3c03      	subs	r4, #3
 8009186:	b2e4      	uxtb	r4, r4
 8009188:	1b3f      	subs	r7, r7, r4
 800918a:	6833      	ldr	r3, [r6, #0]
 800918c:	05da      	lsls	r2, r3, #23
 800918e:	d554      	bpl.n	800923a <_scanf_float+0x342>
 8009190:	055b      	lsls	r3, r3, #21
 8009192:	d537      	bpl.n	8009204 <_scanf_float+0x30c>
 8009194:	24be      	movs	r4, #190	; 0xbe
 8009196:	0064      	lsls	r4, r4, #1
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	429f      	cmp	r7, r3
 800919c:	d800      	bhi.n	80091a0 <_scanf_float+0x2a8>
 800919e:	e6ee      	b.n	8008f7e <_scanf_float+0x86>
 80091a0:	3f01      	subs	r7, #1
 80091a2:	5933      	ldr	r3, [r6, r4]
 80091a4:	002a      	movs	r2, r5
 80091a6:	7839      	ldrb	r1, [r7, #0]
 80091a8:	9801      	ldr	r0, [sp, #4]
 80091aa:	4798      	blx	r3
 80091ac:	6933      	ldr	r3, [r6, #16]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	6133      	str	r3, [r6, #16]
 80091b2:	e7f1      	b.n	8009198 <_scanf_float+0x2a0>
 80091b4:	24be      	movs	r4, #190	; 0xbe
 80091b6:	0064      	lsls	r4, r4, #1
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	429f      	cmp	r7, r3
 80091bc:	d800      	bhi.n	80091c0 <_scanf_float+0x2c8>
 80091be:	e6de      	b.n	8008f7e <_scanf_float+0x86>
 80091c0:	3f01      	subs	r7, #1
 80091c2:	5933      	ldr	r3, [r6, r4]
 80091c4:	002a      	movs	r2, r5
 80091c6:	7839      	ldrb	r1, [r7, #0]
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	4798      	blx	r3
 80091cc:	6933      	ldr	r3, [r6, #16]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	6133      	str	r3, [r6, #16]
 80091d2:	e7f1      	b.n	80091b8 <_scanf_float+0x2c0>
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	002a      	movs	r2, r5
 80091d8:	3b01      	subs	r3, #1
 80091da:	7819      	ldrb	r1, [r3, #0]
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	23be      	movs	r3, #190	; 0xbe
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	58f3      	ldr	r3, [r6, r3]
 80091e4:	9801      	ldr	r0, [sp, #4]
 80091e6:	9309      	str	r3, [sp, #36]	; 0x24
 80091e8:	4798      	blx	r3
 80091ea:	6933      	ldr	r3, [r6, #16]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	6133      	str	r3, [r6, #16]
 80091f0:	e7c2      	b.n	8009178 <_scanf_float+0x280>
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	fffffeff 	.word	0xfffffeff
 80091f8:	fffffe7f 	.word	0xfffffe7f
 80091fc:	fffff87f 	.word	0xfffff87f
 8009200:	fffffd7f 	.word	0xfffffd7f
 8009204:	6933      	ldr	r3, [r6, #16]
 8009206:	1e7c      	subs	r4, r7, #1
 8009208:	7821      	ldrb	r1, [r4, #0]
 800920a:	3b01      	subs	r3, #1
 800920c:	6133      	str	r3, [r6, #16]
 800920e:	2965      	cmp	r1, #101	; 0x65
 8009210:	d00c      	beq.n	800922c <_scanf_float+0x334>
 8009212:	2945      	cmp	r1, #69	; 0x45
 8009214:	d00a      	beq.n	800922c <_scanf_float+0x334>
 8009216:	23be      	movs	r3, #190	; 0xbe
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	58f3      	ldr	r3, [r6, r3]
 800921c:	002a      	movs	r2, r5
 800921e:	9801      	ldr	r0, [sp, #4]
 8009220:	4798      	blx	r3
 8009222:	6933      	ldr	r3, [r6, #16]
 8009224:	1ebc      	subs	r4, r7, #2
 8009226:	3b01      	subs	r3, #1
 8009228:	7821      	ldrb	r1, [r4, #0]
 800922a:	6133      	str	r3, [r6, #16]
 800922c:	23be      	movs	r3, #190	; 0xbe
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	002a      	movs	r2, r5
 8009232:	58f3      	ldr	r3, [r6, r3]
 8009234:	9801      	ldr	r0, [sp, #4]
 8009236:	4798      	blx	r3
 8009238:	0027      	movs	r7, r4
 800923a:	6832      	ldr	r2, [r6, #0]
 800923c:	2310      	movs	r3, #16
 800923e:	0011      	movs	r1, r2
 8009240:	4019      	ands	r1, r3
 8009242:	9102      	str	r1, [sp, #8]
 8009244:	421a      	tst	r2, r3
 8009246:	d158      	bne.n	80092fa <_scanf_float+0x402>
 8009248:	23c0      	movs	r3, #192	; 0xc0
 800924a:	7039      	strb	r1, [r7, #0]
 800924c:	6832      	ldr	r2, [r6, #0]
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4013      	ands	r3, r2
 8009252:	2280      	movs	r2, #128	; 0x80
 8009254:	00d2      	lsls	r2, r2, #3
 8009256:	4293      	cmp	r3, r2
 8009258:	d11d      	bne.n	8009296 <_scanf_float+0x39e>
 800925a:	9b04      	ldr	r3, [sp, #16]
 800925c:	9a00      	ldr	r2, [sp, #0]
 800925e:	9900      	ldr	r1, [sp, #0]
 8009260:	1a9a      	subs	r2, r3, r2
 8009262:	428b      	cmp	r3, r1
 8009264:	d124      	bne.n	80092b0 <_scanf_float+0x3b8>
 8009266:	2200      	movs	r2, #0
 8009268:	9903      	ldr	r1, [sp, #12]
 800926a:	9801      	ldr	r0, [sp, #4]
 800926c:	f000 ff32 	bl	800a0d4 <_strtod_r>
 8009270:	9b06      	ldr	r3, [sp, #24]
 8009272:	000d      	movs	r5, r1
 8009274:	6831      	ldr	r1, [r6, #0]
 8009276:	0004      	movs	r4, r0
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	078a      	lsls	r2, r1, #30
 800927c:	d525      	bpl.n	80092ca <_scanf_float+0x3d2>
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	9906      	ldr	r1, [sp, #24]
 8009282:	600a      	str	r2, [r1, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	601c      	str	r4, [r3, #0]
 8009288:	605d      	str	r5, [r3, #4]
 800928a:	68f3      	ldr	r3, [r6, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60f3      	str	r3, [r6, #12]
 8009290:	9802      	ldr	r0, [sp, #8]
 8009292:	b00b      	add	sp, #44	; 0x2c
 8009294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009296:	9b07      	ldr	r3, [sp, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0e4      	beq.n	8009266 <_scanf_float+0x36e>
 800929c:	9b08      	ldr	r3, [sp, #32]
 800929e:	9a02      	ldr	r2, [sp, #8]
 80092a0:	1c59      	adds	r1, r3, #1
 80092a2:	9801      	ldr	r0, [sp, #4]
 80092a4:	230a      	movs	r3, #10
 80092a6:	f000 ffab 	bl	800a200 <_strtol_r>
 80092aa:	9b07      	ldr	r3, [sp, #28]
 80092ac:	9f08      	ldr	r7, [sp, #32]
 80092ae:	1ac2      	subs	r2, r0, r3
 80092b0:	0033      	movs	r3, r6
 80092b2:	3370      	adds	r3, #112	; 0x70
 80092b4:	33ff      	adds	r3, #255	; 0xff
 80092b6:	429f      	cmp	r7, r3
 80092b8:	d302      	bcc.n	80092c0 <_scanf_float+0x3c8>
 80092ba:	0037      	movs	r7, r6
 80092bc:	376f      	adds	r7, #111	; 0x6f
 80092be:	37ff      	adds	r7, #255	; 0xff
 80092c0:	0038      	movs	r0, r7
 80092c2:	490f      	ldr	r1, [pc, #60]	; (8009300 <_scanf_float+0x408>)
 80092c4:	f000 f8ba 	bl	800943c <siprintf>
 80092c8:	e7cd      	b.n	8009266 <_scanf_float+0x36e>
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	0749      	lsls	r1, r1, #29
 80092ce:	d4d7      	bmi.n	8009280 <_scanf_float+0x388>
 80092d0:	9906      	ldr	r1, [sp, #24]
 80092d2:	0020      	movs	r0, r4
 80092d4:	600a      	str	r2, [r1, #0]
 80092d6:	681f      	ldr	r7, [r3, #0]
 80092d8:	0022      	movs	r2, r4
 80092da:	002b      	movs	r3, r5
 80092dc:	0029      	movs	r1, r5
 80092de:	f7f8 fe99 	bl	8002014 <__aeabi_dcmpun>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d004      	beq.n	80092f0 <_scanf_float+0x3f8>
 80092e6:	4807      	ldr	r0, [pc, #28]	; (8009304 <_scanf_float+0x40c>)
 80092e8:	f000 f8a4 	bl	8009434 <nanf>
 80092ec:	6038      	str	r0, [r7, #0]
 80092ee:	e7cc      	b.n	800928a <_scanf_float+0x392>
 80092f0:	0020      	movs	r0, r4
 80092f2:	0029      	movs	r1, r5
 80092f4:	f7f8 ff38 	bl	8002168 <__aeabi_d2f>
 80092f8:	e7f8      	b.n	80092ec <_scanf_float+0x3f4>
 80092fa:	2300      	movs	r3, #0
 80092fc:	e640      	b.n	8008f80 <_scanf_float+0x88>
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	0800d340 	.word	0x0800d340
 8009304:	0800d7b0 	.word	0x0800d7b0

08009308 <iprintf>:
 8009308:	b40f      	push	{r0, r1, r2, r3}
 800930a:	4b0b      	ldr	r3, [pc, #44]	; (8009338 <iprintf+0x30>)
 800930c:	b513      	push	{r0, r1, r4, lr}
 800930e:	681c      	ldr	r4, [r3, #0]
 8009310:	2c00      	cmp	r4, #0
 8009312:	d005      	beq.n	8009320 <iprintf+0x18>
 8009314:	69a3      	ldr	r3, [r4, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <iprintf+0x18>
 800931a:	0020      	movs	r0, r4
 800931c:	f002 f816 	bl	800b34c <__sinit>
 8009320:	ab05      	add	r3, sp, #20
 8009322:	0020      	movs	r0, r4
 8009324:	9a04      	ldr	r2, [sp, #16]
 8009326:	68a1      	ldr	r1, [r4, #8]
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	f003 fc21 	bl	800cb70 <_vfiprintf_r>
 800932e:	bc16      	pop	{r1, r2, r4}
 8009330:	bc08      	pop	{r3}
 8009332:	b004      	add	sp, #16
 8009334:	4718      	bx	r3
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	20000030 	.word	0x20000030

0800933c <_puts_r>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	0005      	movs	r5, r0
 8009340:	000e      	movs	r6, r1
 8009342:	2800      	cmp	r0, #0
 8009344:	d004      	beq.n	8009350 <_puts_r+0x14>
 8009346:	6983      	ldr	r3, [r0, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <_puts_r+0x14>
 800934c:	f001 fffe 	bl	800b34c <__sinit>
 8009350:	69ab      	ldr	r3, [r5, #24]
 8009352:	68ac      	ldr	r4, [r5, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <_puts_r+0x22>
 8009358:	0028      	movs	r0, r5
 800935a:	f001 fff7 	bl	800b34c <__sinit>
 800935e:	4b2d      	ldr	r3, [pc, #180]	; (8009414 <_puts_r+0xd8>)
 8009360:	429c      	cmp	r4, r3
 8009362:	d122      	bne.n	80093aa <_puts_r+0x6e>
 8009364:	686c      	ldr	r4, [r5, #4]
 8009366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009368:	07db      	lsls	r3, r3, #31
 800936a:	d405      	bmi.n	8009378 <_puts_r+0x3c>
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	059b      	lsls	r3, r3, #22
 8009370:	d402      	bmi.n	8009378 <_puts_r+0x3c>
 8009372:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009374:	f002 fc03 	bl	800bb7e <__retarget_lock_acquire_recursive>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	071b      	lsls	r3, r3, #28
 800937c:	d502      	bpl.n	8009384 <_puts_r+0x48>
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d129      	bne.n	80093d8 <_puts_r+0x9c>
 8009384:	0021      	movs	r1, r4
 8009386:	0028      	movs	r0, r5
 8009388:	f000 ff94 	bl	800a2b4 <__swsetup_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	d023      	beq.n	80093d8 <_puts_r+0x9c>
 8009390:	2501      	movs	r5, #1
 8009392:	426d      	negs	r5, r5
 8009394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009396:	07db      	lsls	r3, r3, #31
 8009398:	d405      	bmi.n	80093a6 <_puts_r+0x6a>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	059b      	lsls	r3, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_puts_r+0x6a>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f002 fbed 	bl	800bb80 <__retarget_lock_release_recursive>
 80093a6:	0028      	movs	r0, r5
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
 80093aa:	4b1b      	ldr	r3, [pc, #108]	; (8009418 <_puts_r+0xdc>)
 80093ac:	429c      	cmp	r4, r3
 80093ae:	d101      	bne.n	80093b4 <_puts_r+0x78>
 80093b0:	68ac      	ldr	r4, [r5, #8]
 80093b2:	e7d8      	b.n	8009366 <_puts_r+0x2a>
 80093b4:	4b19      	ldr	r3, [pc, #100]	; (800941c <_puts_r+0xe0>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d1d5      	bne.n	8009366 <_puts_r+0x2a>
 80093ba:	68ec      	ldr	r4, [r5, #12]
 80093bc:	e7d3      	b.n	8009366 <_puts_r+0x2a>
 80093be:	3601      	adds	r6, #1
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da04      	bge.n	80093d0 <_puts_r+0x94>
 80093c6:	69a2      	ldr	r2, [r4, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	dc16      	bgt.n	80093fa <_puts_r+0xbe>
 80093cc:	290a      	cmp	r1, #10
 80093ce:	d014      	beq.n	80093fa <_puts_r+0xbe>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	6022      	str	r2, [r4, #0]
 80093d6:	7019      	strb	r1, [r3, #0]
 80093d8:	68a3      	ldr	r3, [r4, #8]
 80093da:	7831      	ldrb	r1, [r6, #0]
 80093dc:	3b01      	subs	r3, #1
 80093de:	2900      	cmp	r1, #0
 80093e0:	d1ed      	bne.n	80093be <_puts_r+0x82>
 80093e2:	60a3      	str	r3, [r4, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da0f      	bge.n	8009408 <_puts_r+0xcc>
 80093e8:	0028      	movs	r0, r5
 80093ea:	0022      	movs	r2, r4
 80093ec:	310a      	adds	r1, #10
 80093ee:	f000 ff0b 	bl	800a208 <__swbuf_r>
 80093f2:	250a      	movs	r5, #10
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d1cd      	bne.n	8009394 <_puts_r+0x58>
 80093f8:	e7ca      	b.n	8009390 <_puts_r+0x54>
 80093fa:	0022      	movs	r2, r4
 80093fc:	0028      	movs	r0, r5
 80093fe:	f000 ff03 	bl	800a208 <__swbuf_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	d1e8      	bne.n	80093d8 <_puts_r+0x9c>
 8009406:	e7c3      	b.n	8009390 <_puts_r+0x54>
 8009408:	250a      	movs	r5, #10
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	701d      	strb	r5, [r3, #0]
 8009412:	e7bf      	b.n	8009394 <_puts_r+0x58>
 8009414:	0800d54c 	.word	0x0800d54c
 8009418:	0800d56c 	.word	0x0800d56c
 800941c:	0800d52c 	.word	0x0800d52c

08009420 <puts>:
 8009420:	b510      	push	{r4, lr}
 8009422:	4b03      	ldr	r3, [pc, #12]	; (8009430 <puts+0x10>)
 8009424:	0001      	movs	r1, r0
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	f7ff ff88 	bl	800933c <_puts_r>
 800942c:	bd10      	pop	{r4, pc}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	20000030 	.word	0x20000030

08009434 <nanf>:
 8009434:	4800      	ldr	r0, [pc, #0]	; (8009438 <nanf+0x4>)
 8009436:	4770      	bx	lr
 8009438:	7fc00000 	.word	0x7fc00000

0800943c <siprintf>:
 800943c:	b40e      	push	{r1, r2, r3}
 800943e:	b500      	push	{lr}
 8009440:	490b      	ldr	r1, [pc, #44]	; (8009470 <siprintf+0x34>)
 8009442:	b09c      	sub	sp, #112	; 0x70
 8009444:	ab1d      	add	r3, sp, #116	; 0x74
 8009446:	9002      	str	r0, [sp, #8]
 8009448:	9006      	str	r0, [sp, #24]
 800944a:	9107      	str	r1, [sp, #28]
 800944c:	9104      	str	r1, [sp, #16]
 800944e:	4809      	ldr	r0, [pc, #36]	; (8009474 <siprintf+0x38>)
 8009450:	4909      	ldr	r1, [pc, #36]	; (8009478 <siprintf+0x3c>)
 8009452:	cb04      	ldmia	r3!, {r2}
 8009454:	9105      	str	r1, [sp, #20]
 8009456:	6800      	ldr	r0, [r0, #0]
 8009458:	a902      	add	r1, sp, #8
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	f003 fa60 	bl	800c920 <_svfiprintf_r>
 8009460:	2300      	movs	r3, #0
 8009462:	9a02      	ldr	r2, [sp, #8]
 8009464:	7013      	strb	r3, [r2, #0]
 8009466:	b01c      	add	sp, #112	; 0x70
 8009468:	bc08      	pop	{r3}
 800946a:	b003      	add	sp, #12
 800946c:	4718      	bx	r3
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	7fffffff 	.word	0x7fffffff
 8009474:	20000030 	.word	0x20000030
 8009478:	ffff0208 	.word	0xffff0208

0800947c <sulp>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	0016      	movs	r6, r2
 8009480:	000d      	movs	r5, r1
 8009482:	f002 ff97 	bl	800c3b4 <__ulp>
 8009486:	2e00      	cmp	r6, #0
 8009488:	d00d      	beq.n	80094a6 <sulp+0x2a>
 800948a:	236b      	movs	r3, #107	; 0x6b
 800948c:	006a      	lsls	r2, r5, #1
 800948e:	0d52      	lsrs	r2, r2, #21
 8009490:	1a9b      	subs	r3, r3, r2
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd07      	ble.n	80094a6 <sulp+0x2a>
 8009496:	2400      	movs	r4, #0
 8009498:	4a03      	ldr	r2, [pc, #12]	; (80094a8 <sulp+0x2c>)
 800949a:	051b      	lsls	r3, r3, #20
 800949c:	189d      	adds	r5, r3, r2
 800949e:	002b      	movs	r3, r5
 80094a0:	0022      	movs	r2, r4
 80094a2:	f7f7 ffb9 	bl	8001418 <__aeabi_dmul>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	3ff00000 	.word	0x3ff00000

080094ac <_strtod_l>:
 80094ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ae:	001d      	movs	r5, r3
 80094b0:	2300      	movs	r3, #0
 80094b2:	b0a5      	sub	sp, #148	; 0x94
 80094b4:	9320      	str	r3, [sp, #128]	; 0x80
 80094b6:	4bac      	ldr	r3, [pc, #688]	; (8009768 <_strtod_l+0x2bc>)
 80094b8:	9005      	str	r0, [sp, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9108      	str	r1, [sp, #32]
 80094be:	0018      	movs	r0, r3
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80094c4:	f7f6 fe2a 	bl	800011c <strlen>
 80094c8:	2600      	movs	r6, #0
 80094ca:	0004      	movs	r4, r0
 80094cc:	2700      	movs	r7, #0
 80094ce:	9b08      	ldr	r3, [sp, #32]
 80094d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80094d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80094d4:	7813      	ldrb	r3, [r2, #0]
 80094d6:	2b2b      	cmp	r3, #43	; 0x2b
 80094d8:	d058      	beq.n	800958c <_strtod_l+0xe0>
 80094da:	d844      	bhi.n	8009566 <_strtod_l+0xba>
 80094dc:	2b0d      	cmp	r3, #13
 80094de:	d83d      	bhi.n	800955c <_strtod_l+0xb0>
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d83d      	bhi.n	8009560 <_strtod_l+0xb4>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d047      	beq.n	8009578 <_strtod_l+0xcc>
 80094e8:	2300      	movs	r3, #0
 80094ea:	930e      	str	r3, [sp, #56]	; 0x38
 80094ec:	2200      	movs	r2, #0
 80094ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094f0:	920a      	str	r2, [sp, #40]	; 0x28
 80094f2:	9306      	str	r3, [sp, #24]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b30      	cmp	r3, #48	; 0x30
 80094f8:	d000      	beq.n	80094fc <_strtod_l+0x50>
 80094fa:	e07f      	b.n	80095fc <_strtod_l+0x150>
 80094fc:	9b06      	ldr	r3, [sp, #24]
 80094fe:	3220      	adds	r2, #32
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	4393      	bics	r3, r2
 8009504:	2b58      	cmp	r3, #88	; 0x58
 8009506:	d000      	beq.n	800950a <_strtod_l+0x5e>
 8009508:	e06e      	b.n	80095e8 <_strtod_l+0x13c>
 800950a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800950c:	9502      	str	r5, [sp, #8]
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	ab20      	add	r3, sp, #128	; 0x80
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4a95      	ldr	r2, [pc, #596]	; (800976c <_strtod_l+0x2c0>)
 8009516:	ab21      	add	r3, sp, #132	; 0x84
 8009518:	9805      	ldr	r0, [sp, #20]
 800951a:	a91f      	add	r1, sp, #124	; 0x7c
 800951c:	f002 f820 	bl	800b560 <__gethex>
 8009520:	2307      	movs	r3, #7
 8009522:	0005      	movs	r5, r0
 8009524:	0004      	movs	r4, r0
 8009526:	401d      	ands	r5, r3
 8009528:	4218      	tst	r0, r3
 800952a:	d006      	beq.n	800953a <_strtod_l+0x8e>
 800952c:	2d06      	cmp	r5, #6
 800952e:	d12f      	bne.n	8009590 <_strtod_l+0xe4>
 8009530:	9b06      	ldr	r3, [sp, #24]
 8009532:	3301      	adds	r3, #1
 8009534:	931f      	str	r3, [sp, #124]	; 0x7c
 8009536:	2300      	movs	r3, #0
 8009538:	930e      	str	r3, [sp, #56]	; 0x38
 800953a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <_strtod_l+0x9a>
 8009540:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009542:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01c      	beq.n	8009586 <_strtod_l+0xda>
 800954c:	2380      	movs	r3, #128	; 0x80
 800954e:	0032      	movs	r2, r6
 8009550:	061b      	lsls	r3, r3, #24
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	0010      	movs	r0, r2
 8009556:	0019      	movs	r1, r3
 8009558:	b025      	add	sp, #148	; 0x94
 800955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955c:	2b20      	cmp	r3, #32
 800955e:	d1c3      	bne.n	80094e8 <_strtod_l+0x3c>
 8009560:	3201      	adds	r2, #1
 8009562:	921f      	str	r2, [sp, #124]	; 0x7c
 8009564:	e7b5      	b.n	80094d2 <_strtod_l+0x26>
 8009566:	2b2d      	cmp	r3, #45	; 0x2d
 8009568:	d1be      	bne.n	80094e8 <_strtod_l+0x3c>
 800956a:	3b2c      	subs	r3, #44	; 0x2c
 800956c:	930e      	str	r3, [sp, #56]	; 0x38
 800956e:	1c53      	adds	r3, r2, #1
 8009570:	931f      	str	r3, [sp, #124]	; 0x7c
 8009572:	7853      	ldrb	r3, [r2, #1]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1b9      	bne.n	80094ec <_strtod_l+0x40>
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	931f      	str	r3, [sp, #124]	; 0x7c
 800957c:	2300      	movs	r3, #0
 800957e:	930e      	str	r3, [sp, #56]	; 0x38
 8009580:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1dc      	bne.n	8009540 <_strtod_l+0x94>
 8009586:	0032      	movs	r2, r6
 8009588:	003b      	movs	r3, r7
 800958a:	e7e3      	b.n	8009554 <_strtod_l+0xa8>
 800958c:	2300      	movs	r3, #0
 800958e:	e7ed      	b.n	800956c <_strtod_l+0xc0>
 8009590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009592:	2a00      	cmp	r2, #0
 8009594:	d007      	beq.n	80095a6 <_strtod_l+0xfa>
 8009596:	2135      	movs	r1, #53	; 0x35
 8009598:	a822      	add	r0, sp, #136	; 0x88
 800959a:	f003 f80c 	bl	800c5b6 <__copybits>
 800959e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80095a0:	9805      	ldr	r0, [sp, #20]
 80095a2:	f002 fbc7 	bl	800bd34 <_Bfree>
 80095a6:	1e68      	subs	r0, r5, #1
 80095a8:	2804      	cmp	r0, #4
 80095aa:	d806      	bhi.n	80095ba <_strtod_l+0x10e>
 80095ac:	f7f6 fdbe 	bl	800012c <__gnu_thumb1_case_uqi>
 80095b0:	1816030b 	.word	0x1816030b
 80095b4:	0b          	.byte	0x0b
 80095b5:	00          	.byte	0x00
 80095b6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80095b8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80095ba:	0723      	lsls	r3, r4, #28
 80095bc:	d5bd      	bpl.n	800953a <_strtod_l+0x8e>
 80095be:	2380      	movs	r3, #128	; 0x80
 80095c0:	061b      	lsls	r3, r3, #24
 80095c2:	431f      	orrs	r7, r3
 80095c4:	e7b9      	b.n	800953a <_strtod_l+0x8e>
 80095c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095c8:	4a69      	ldr	r2, [pc, #420]	; (8009770 <_strtod_l+0x2c4>)
 80095ca:	496a      	ldr	r1, [pc, #424]	; (8009774 <_strtod_l+0x2c8>)
 80095cc:	401a      	ands	r2, r3
 80095ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80095d2:	185b      	adds	r3, r3, r1
 80095d4:	051b      	lsls	r3, r3, #20
 80095d6:	431a      	orrs	r2, r3
 80095d8:	0017      	movs	r7, r2
 80095da:	e7ee      	b.n	80095ba <_strtod_l+0x10e>
 80095dc:	4f66      	ldr	r7, [pc, #408]	; (8009778 <_strtod_l+0x2cc>)
 80095de:	e7ec      	b.n	80095ba <_strtod_l+0x10e>
 80095e0:	2601      	movs	r6, #1
 80095e2:	4f66      	ldr	r7, [pc, #408]	; (800977c <_strtod_l+0x2d0>)
 80095e4:	4276      	negs	r6, r6
 80095e6:	e7e8      	b.n	80095ba <_strtod_l+0x10e>
 80095e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b30      	cmp	r3, #48	; 0x30
 80095f2:	d0f9      	beq.n	80095e8 <_strtod_l+0x13c>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0a0      	beq.n	800953a <_strtod_l+0x8e>
 80095f8:	2301      	movs	r3, #1
 80095fa:	930a      	str	r3, [sp, #40]	; 0x28
 80095fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095fe:	220a      	movs	r2, #10
 8009600:	9310      	str	r3, [sp, #64]	; 0x40
 8009602:	2300      	movs	r3, #0
 8009604:	930f      	str	r3, [sp, #60]	; 0x3c
 8009606:	930b      	str	r3, [sp, #44]	; 0x2c
 8009608:	9309      	str	r3, [sp, #36]	; 0x24
 800960a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800960c:	7805      	ldrb	r5, [r0, #0]
 800960e:	002b      	movs	r3, r5
 8009610:	3b30      	subs	r3, #48	; 0x30
 8009612:	b2d9      	uxtb	r1, r3
 8009614:	2909      	cmp	r1, #9
 8009616:	d927      	bls.n	8009668 <_strtod_l+0x1bc>
 8009618:	0022      	movs	r2, r4
 800961a:	9907      	ldr	r1, [sp, #28]
 800961c:	f003 fc46 	bl	800ceac <strncmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	d033      	beq.n	800968c <_strtod_l+0x1e0>
 8009624:	2000      	movs	r0, #0
 8009626:	002b      	movs	r3, r5
 8009628:	4684      	mov	ip, r0
 800962a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800962c:	900c      	str	r0, [sp, #48]	; 0x30
 800962e:	9206      	str	r2, [sp, #24]
 8009630:	2220      	movs	r2, #32
 8009632:	0019      	movs	r1, r3
 8009634:	4391      	bics	r1, r2
 8009636:	000a      	movs	r2, r1
 8009638:	2100      	movs	r1, #0
 800963a:	9107      	str	r1, [sp, #28]
 800963c:	2a45      	cmp	r2, #69	; 0x45
 800963e:	d000      	beq.n	8009642 <_strtod_l+0x196>
 8009640:	e0c5      	b.n	80097ce <_strtod_l+0x322>
 8009642:	9b06      	ldr	r3, [sp, #24]
 8009644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009646:	4303      	orrs	r3, r0
 8009648:	4313      	orrs	r3, r2
 800964a:	428b      	cmp	r3, r1
 800964c:	d094      	beq.n	8009578 <_strtod_l+0xcc>
 800964e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009650:	9308      	str	r3, [sp, #32]
 8009652:	3301      	adds	r3, #1
 8009654:	931f      	str	r3, [sp, #124]	; 0x7c
 8009656:	9b08      	ldr	r3, [sp, #32]
 8009658:	785b      	ldrb	r3, [r3, #1]
 800965a:	2b2b      	cmp	r3, #43	; 0x2b
 800965c:	d076      	beq.n	800974c <_strtod_l+0x2a0>
 800965e:	000c      	movs	r4, r1
 8009660:	2b2d      	cmp	r3, #45	; 0x2d
 8009662:	d179      	bne.n	8009758 <_strtod_l+0x2ac>
 8009664:	2401      	movs	r4, #1
 8009666:	e072      	b.n	800974e <_strtod_l+0x2a2>
 8009668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800966a:	2908      	cmp	r1, #8
 800966c:	dc09      	bgt.n	8009682 <_strtod_l+0x1d6>
 800966e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009670:	4351      	muls	r1, r2
 8009672:	185b      	adds	r3, r3, r1
 8009674:	930b      	str	r3, [sp, #44]	; 0x2c
 8009676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009678:	3001      	adds	r0, #1
 800967a:	3301      	adds	r3, #1
 800967c:	9309      	str	r3, [sp, #36]	; 0x24
 800967e:	901f      	str	r0, [sp, #124]	; 0x7c
 8009680:	e7c3      	b.n	800960a <_strtod_l+0x15e>
 8009682:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009684:	4351      	muls	r1, r2
 8009686:	185b      	adds	r3, r3, r1
 8009688:	930f      	str	r3, [sp, #60]	; 0x3c
 800968a:	e7f4      	b.n	8009676 <_strtod_l+0x1ca>
 800968c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800968e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009690:	191c      	adds	r4, r3, r4
 8009692:	941f      	str	r4, [sp, #124]	; 0x7c
 8009694:	7823      	ldrb	r3, [r4, #0]
 8009696:	2a00      	cmp	r2, #0
 8009698:	d039      	beq.n	800970e <_strtod_l+0x262>
 800969a:	900c      	str	r0, [sp, #48]	; 0x30
 800969c:	9206      	str	r2, [sp, #24]
 800969e:	001a      	movs	r2, r3
 80096a0:	3a30      	subs	r2, #48	; 0x30
 80096a2:	2a09      	cmp	r2, #9
 80096a4:	d912      	bls.n	80096cc <_strtod_l+0x220>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4694      	mov	ip, r2
 80096aa:	e7c1      	b.n	8009630 <_strtod_l+0x184>
 80096ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80096ae:	3001      	adds	r0, #1
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	921f      	str	r2, [sp, #124]	; 0x7c
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	2b30      	cmp	r3, #48	; 0x30
 80096b8:	d0f8      	beq.n	80096ac <_strtod_l+0x200>
 80096ba:	001a      	movs	r2, r3
 80096bc:	3a31      	subs	r2, #49	; 0x31
 80096be:	2a08      	cmp	r2, #8
 80096c0:	d83f      	bhi.n	8009742 <_strtod_l+0x296>
 80096c2:	900c      	str	r0, [sp, #48]	; 0x30
 80096c4:	2000      	movs	r0, #0
 80096c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80096c8:	9006      	str	r0, [sp, #24]
 80096ca:	9210      	str	r2, [sp, #64]	; 0x40
 80096cc:	001a      	movs	r2, r3
 80096ce:	1c41      	adds	r1, r0, #1
 80096d0:	3a30      	subs	r2, #48	; 0x30
 80096d2:	2b30      	cmp	r3, #48	; 0x30
 80096d4:	d015      	beq.n	8009702 <_strtod_l+0x256>
 80096d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d8:	185b      	adds	r3, r3, r1
 80096da:	210a      	movs	r1, #10
 80096dc:	930c      	str	r3, [sp, #48]	; 0x30
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	18c4      	adds	r4, r0, r3
 80096e2:	42a3      	cmp	r3, r4
 80096e4:	d115      	bne.n	8009712 <_strtod_l+0x266>
 80096e6:	9906      	ldr	r1, [sp, #24]
 80096e8:	9b06      	ldr	r3, [sp, #24]
 80096ea:	3101      	adds	r1, #1
 80096ec:	1809      	adds	r1, r1, r0
 80096ee:	181b      	adds	r3, r3, r0
 80096f0:	9106      	str	r1, [sp, #24]
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	dc1b      	bgt.n	800972e <_strtod_l+0x282>
 80096f6:	230a      	movs	r3, #10
 80096f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096fa:	434b      	muls	r3, r1
 80096fc:	2100      	movs	r1, #0
 80096fe:	18d3      	adds	r3, r2, r3
 8009700:	930b      	str	r3, [sp, #44]	; 0x2c
 8009702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009704:	0008      	movs	r0, r1
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	921f      	str	r2, [sp, #124]	; 0x7c
 800970a:	785b      	ldrb	r3, [r3, #1]
 800970c:	e7c7      	b.n	800969e <_strtod_l+0x1f2>
 800970e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009710:	e7d1      	b.n	80096b6 <_strtod_l+0x20a>
 8009712:	2b08      	cmp	r3, #8
 8009714:	dc04      	bgt.n	8009720 <_strtod_l+0x274>
 8009716:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009718:	434d      	muls	r5, r1
 800971a:	950b      	str	r5, [sp, #44]	; 0x2c
 800971c:	3301      	adds	r3, #1
 800971e:	e7e0      	b.n	80096e2 <_strtod_l+0x236>
 8009720:	1c5d      	adds	r5, r3, #1
 8009722:	2d10      	cmp	r5, #16
 8009724:	dcfa      	bgt.n	800971c <_strtod_l+0x270>
 8009726:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009728:	434d      	muls	r5, r1
 800972a:	950f      	str	r5, [sp, #60]	; 0x3c
 800972c:	e7f6      	b.n	800971c <_strtod_l+0x270>
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	2100      	movs	r1, #0
 8009732:	2b10      	cmp	r3, #16
 8009734:	dce5      	bgt.n	8009702 <_strtod_l+0x256>
 8009736:	230a      	movs	r3, #10
 8009738:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800973a:	4343      	muls	r3, r0
 800973c:	18d3      	adds	r3, r2, r3
 800973e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009740:	e7df      	b.n	8009702 <_strtod_l+0x256>
 8009742:	2200      	movs	r2, #0
 8009744:	920c      	str	r2, [sp, #48]	; 0x30
 8009746:	9206      	str	r2, [sp, #24]
 8009748:	3201      	adds	r2, #1
 800974a:	e7ad      	b.n	80096a8 <_strtod_l+0x1fc>
 800974c:	2400      	movs	r4, #0
 800974e:	9b08      	ldr	r3, [sp, #32]
 8009750:	3302      	adds	r3, #2
 8009752:	931f      	str	r3, [sp, #124]	; 0x7c
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	789b      	ldrb	r3, [r3, #2]
 8009758:	001a      	movs	r2, r3
 800975a:	3a30      	subs	r2, #48	; 0x30
 800975c:	2a09      	cmp	r2, #9
 800975e:	d913      	bls.n	8009788 <_strtod_l+0x2dc>
 8009760:	9a08      	ldr	r2, [sp, #32]
 8009762:	921f      	str	r2, [sp, #124]	; 0x7c
 8009764:	2200      	movs	r2, #0
 8009766:	e031      	b.n	80097cc <_strtod_l+0x320>
 8009768:	0800d5f4 	.word	0x0800d5f4
 800976c:	0800d348 	.word	0x0800d348
 8009770:	ffefffff 	.word	0xffefffff
 8009774:	00000433 	.word	0x00000433
 8009778:	7ff00000 	.word	0x7ff00000
 800977c:	7fffffff 	.word	0x7fffffff
 8009780:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	921f      	str	r2, [sp, #124]	; 0x7c
 8009786:	785b      	ldrb	r3, [r3, #1]
 8009788:	2b30      	cmp	r3, #48	; 0x30
 800978a:	d0f9      	beq.n	8009780 <_strtod_l+0x2d4>
 800978c:	2200      	movs	r2, #0
 800978e:	9207      	str	r2, [sp, #28]
 8009790:	001a      	movs	r2, r3
 8009792:	3a31      	subs	r2, #49	; 0x31
 8009794:	2a08      	cmp	r2, #8
 8009796:	d81a      	bhi.n	80097ce <_strtod_l+0x322>
 8009798:	3b30      	subs	r3, #48	; 0x30
 800979a:	001a      	movs	r2, r3
 800979c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097a2:	1c59      	adds	r1, r3, #1
 80097a4:	911f      	str	r1, [sp, #124]	; 0x7c
 80097a6:	785b      	ldrb	r3, [r3, #1]
 80097a8:	001d      	movs	r5, r3
 80097aa:	3d30      	subs	r5, #48	; 0x30
 80097ac:	2d09      	cmp	r5, #9
 80097ae:	d939      	bls.n	8009824 <_strtod_l+0x378>
 80097b0:	9d07      	ldr	r5, [sp, #28]
 80097b2:	1b49      	subs	r1, r1, r5
 80097b4:	4db0      	ldr	r5, [pc, #704]	; (8009a78 <_strtod_l+0x5cc>)
 80097b6:	9507      	str	r5, [sp, #28]
 80097b8:	2908      	cmp	r1, #8
 80097ba:	dc03      	bgt.n	80097c4 <_strtod_l+0x318>
 80097bc:	9207      	str	r2, [sp, #28]
 80097be:	42aa      	cmp	r2, r5
 80097c0:	dd00      	ble.n	80097c4 <_strtod_l+0x318>
 80097c2:	9507      	str	r5, [sp, #28]
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	d002      	beq.n	80097ce <_strtod_l+0x322>
 80097c8:	9a07      	ldr	r2, [sp, #28]
 80097ca:	4252      	negs	r2, r2
 80097cc:	9207      	str	r2, [sp, #28]
 80097ce:	9a06      	ldr	r2, [sp, #24]
 80097d0:	2a00      	cmp	r2, #0
 80097d2:	d14b      	bne.n	800986c <_strtod_l+0x3c0>
 80097d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d6:	4310      	orrs	r0, r2
 80097d8:	d000      	beq.n	80097dc <_strtod_l+0x330>
 80097da:	e6ae      	b.n	800953a <_strtod_l+0x8e>
 80097dc:	4662      	mov	r2, ip
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d000      	beq.n	80097e4 <_strtod_l+0x338>
 80097e2:	e6c9      	b.n	8009578 <_strtod_l+0xcc>
 80097e4:	2b69      	cmp	r3, #105	; 0x69
 80097e6:	d025      	beq.n	8009834 <_strtod_l+0x388>
 80097e8:	dc21      	bgt.n	800982e <_strtod_l+0x382>
 80097ea:	2b49      	cmp	r3, #73	; 0x49
 80097ec:	d022      	beq.n	8009834 <_strtod_l+0x388>
 80097ee:	2b4e      	cmp	r3, #78	; 0x4e
 80097f0:	d000      	beq.n	80097f4 <_strtod_l+0x348>
 80097f2:	e6c1      	b.n	8009578 <_strtod_l+0xcc>
 80097f4:	49a1      	ldr	r1, [pc, #644]	; (8009a7c <_strtod_l+0x5d0>)
 80097f6:	a81f      	add	r0, sp, #124	; 0x7c
 80097f8:	f002 f900 	bl	800b9fc <__match>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d100      	bne.n	8009802 <_strtod_l+0x356>
 8009800:	e6ba      	b.n	8009578 <_strtod_l+0xcc>
 8009802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b28      	cmp	r3, #40	; 0x28
 8009808:	d12a      	bne.n	8009860 <_strtod_l+0x3b4>
 800980a:	499d      	ldr	r1, [pc, #628]	; (8009a80 <_strtod_l+0x5d4>)
 800980c:	aa22      	add	r2, sp, #136	; 0x88
 800980e:	a81f      	add	r0, sp, #124	; 0x7c
 8009810:	f002 f908 	bl	800ba24 <__hexnan>
 8009814:	2805      	cmp	r0, #5
 8009816:	d123      	bne.n	8009860 <_strtod_l+0x3b4>
 8009818:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800981a:	4a9a      	ldr	r2, [pc, #616]	; (8009a84 <_strtod_l+0x5d8>)
 800981c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800981e:	431a      	orrs	r2, r3
 8009820:	0017      	movs	r7, r2
 8009822:	e68a      	b.n	800953a <_strtod_l+0x8e>
 8009824:	210a      	movs	r1, #10
 8009826:	434a      	muls	r2, r1
 8009828:	18d2      	adds	r2, r2, r3
 800982a:	3a30      	subs	r2, #48	; 0x30
 800982c:	e7b8      	b.n	80097a0 <_strtod_l+0x2f4>
 800982e:	2b6e      	cmp	r3, #110	; 0x6e
 8009830:	d0e0      	beq.n	80097f4 <_strtod_l+0x348>
 8009832:	e6a1      	b.n	8009578 <_strtod_l+0xcc>
 8009834:	4994      	ldr	r1, [pc, #592]	; (8009a88 <_strtod_l+0x5dc>)
 8009836:	a81f      	add	r0, sp, #124	; 0x7c
 8009838:	f002 f8e0 	bl	800b9fc <__match>
 800983c:	2800      	cmp	r0, #0
 800983e:	d100      	bne.n	8009842 <_strtod_l+0x396>
 8009840:	e69a      	b.n	8009578 <_strtod_l+0xcc>
 8009842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009844:	4991      	ldr	r1, [pc, #580]	; (8009a8c <_strtod_l+0x5e0>)
 8009846:	3b01      	subs	r3, #1
 8009848:	a81f      	add	r0, sp, #124	; 0x7c
 800984a:	931f      	str	r3, [sp, #124]	; 0x7c
 800984c:	f002 f8d6 	bl	800b9fc <__match>
 8009850:	2800      	cmp	r0, #0
 8009852:	d102      	bne.n	800985a <_strtod_l+0x3ae>
 8009854:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009856:	3301      	adds	r3, #1
 8009858:	931f      	str	r3, [sp, #124]	; 0x7c
 800985a:	2600      	movs	r6, #0
 800985c:	4f89      	ldr	r7, [pc, #548]	; (8009a84 <_strtod_l+0x5d8>)
 800985e:	e66c      	b.n	800953a <_strtod_l+0x8e>
 8009860:	488b      	ldr	r0, [pc, #556]	; (8009a90 <_strtod_l+0x5e4>)
 8009862:	f003 fabf 	bl	800cde4 <nan>
 8009866:	0006      	movs	r6, r0
 8009868:	000f      	movs	r7, r1
 800986a:	e666      	b.n	800953a <_strtod_l+0x8e>
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009870:	1a9b      	subs	r3, r3, r2
 8009872:	930a      	str	r3, [sp, #40]	; 0x28
 8009874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <_strtod_l+0x3d2>
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	9309      	str	r3, [sp, #36]	; 0x24
 800987e:	9c06      	ldr	r4, [sp, #24]
 8009880:	2c10      	cmp	r4, #16
 8009882:	dd00      	ble.n	8009886 <_strtod_l+0x3da>
 8009884:	2410      	movs	r4, #16
 8009886:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009888:	f7f8 fc48 	bl	800211c <__aeabi_ui2d>
 800988c:	9b06      	ldr	r3, [sp, #24]
 800988e:	0006      	movs	r6, r0
 8009890:	000f      	movs	r7, r1
 8009892:	2b09      	cmp	r3, #9
 8009894:	dd15      	ble.n	80098c2 <_strtod_l+0x416>
 8009896:	0022      	movs	r2, r4
 8009898:	4b7e      	ldr	r3, [pc, #504]	; (8009a94 <_strtod_l+0x5e8>)
 800989a:	3a09      	subs	r2, #9
 800989c:	00d2      	lsls	r2, r2, #3
 800989e:	189b      	adds	r3, r3, r2
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f7f7 fdb8 	bl	8001418 <__aeabi_dmul>
 80098a8:	0006      	movs	r6, r0
 80098aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80098ac:	000f      	movs	r7, r1
 80098ae:	f7f8 fc35 	bl	800211c <__aeabi_ui2d>
 80098b2:	0002      	movs	r2, r0
 80098b4:	000b      	movs	r3, r1
 80098b6:	0030      	movs	r0, r6
 80098b8:	0039      	movs	r1, r7
 80098ba:	f7f6 fe6f 	bl	800059c <__aeabi_dadd>
 80098be:	0006      	movs	r6, r0
 80098c0:	000f      	movs	r7, r1
 80098c2:	9b06      	ldr	r3, [sp, #24]
 80098c4:	2b0f      	cmp	r3, #15
 80098c6:	dc39      	bgt.n	800993c <_strtod_l+0x490>
 80098c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d100      	bne.n	80098d0 <_strtod_l+0x424>
 80098ce:	e634      	b.n	800953a <_strtod_l+0x8e>
 80098d0:	dd24      	ble.n	800991c <_strtod_l+0x470>
 80098d2:	2b16      	cmp	r3, #22
 80098d4:	dc09      	bgt.n	80098ea <_strtod_l+0x43e>
 80098d6:	496f      	ldr	r1, [pc, #444]	; (8009a94 <_strtod_l+0x5e8>)
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	18c9      	adds	r1, r1, r3
 80098dc:	0032      	movs	r2, r6
 80098de:	6808      	ldr	r0, [r1, #0]
 80098e0:	6849      	ldr	r1, [r1, #4]
 80098e2:	003b      	movs	r3, r7
 80098e4:	f7f7 fd98 	bl	8001418 <__aeabi_dmul>
 80098e8:	e7bd      	b.n	8009866 <_strtod_l+0x3ba>
 80098ea:	2325      	movs	r3, #37	; 0x25
 80098ec:	9a06      	ldr	r2, [sp, #24]
 80098ee:	1a9b      	subs	r3, r3, r2
 80098f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f2:	4293      	cmp	r3, r2
 80098f4:	db22      	blt.n	800993c <_strtod_l+0x490>
 80098f6:	240f      	movs	r4, #15
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	4d66      	ldr	r5, [pc, #408]	; (8009a94 <_strtod_l+0x5e8>)
 80098fc:	1ae4      	subs	r4, r4, r3
 80098fe:	00e1      	lsls	r1, r4, #3
 8009900:	1869      	adds	r1, r5, r1
 8009902:	0032      	movs	r2, r6
 8009904:	6808      	ldr	r0, [r1, #0]
 8009906:	6849      	ldr	r1, [r1, #4]
 8009908:	003b      	movs	r3, r7
 800990a:	f7f7 fd85 	bl	8001418 <__aeabi_dmul>
 800990e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009910:	1b1c      	subs	r4, r3, r4
 8009912:	00e4      	lsls	r4, r4, #3
 8009914:	192c      	adds	r4, r5, r4
 8009916:	6822      	ldr	r2, [r4, #0]
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	e7e3      	b.n	80098e4 <_strtod_l+0x438>
 800991c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991e:	3316      	adds	r3, #22
 8009920:	db0c      	blt.n	800993c <_strtod_l+0x490>
 8009922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009924:	9a07      	ldr	r2, [sp, #28]
 8009926:	0030      	movs	r0, r6
 8009928:	1a9a      	subs	r2, r3, r2
 800992a:	4b5a      	ldr	r3, [pc, #360]	; (8009a94 <_strtod_l+0x5e8>)
 800992c:	00d2      	lsls	r2, r2, #3
 800992e:	189b      	adds	r3, r3, r2
 8009930:	0039      	movs	r1, r7
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f7f7 f96d 	bl	8000c14 <__aeabi_ddiv>
 800993a:	e794      	b.n	8009866 <_strtod_l+0x3ba>
 800993c:	9b06      	ldr	r3, [sp, #24]
 800993e:	1b1c      	subs	r4, r3, r4
 8009940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009942:	18e4      	adds	r4, r4, r3
 8009944:	2c00      	cmp	r4, #0
 8009946:	dd72      	ble.n	8009a2e <_strtod_l+0x582>
 8009948:	230f      	movs	r3, #15
 800994a:	0021      	movs	r1, r4
 800994c:	4019      	ands	r1, r3
 800994e:	421c      	tst	r4, r3
 8009950:	d00a      	beq.n	8009968 <_strtod_l+0x4bc>
 8009952:	00cb      	lsls	r3, r1, #3
 8009954:	494f      	ldr	r1, [pc, #316]	; (8009a94 <_strtod_l+0x5e8>)
 8009956:	0032      	movs	r2, r6
 8009958:	18c9      	adds	r1, r1, r3
 800995a:	6808      	ldr	r0, [r1, #0]
 800995c:	6849      	ldr	r1, [r1, #4]
 800995e:	003b      	movs	r3, r7
 8009960:	f7f7 fd5a 	bl	8001418 <__aeabi_dmul>
 8009964:	0006      	movs	r6, r0
 8009966:	000f      	movs	r7, r1
 8009968:	230f      	movs	r3, #15
 800996a:	439c      	bics	r4, r3
 800996c:	d04a      	beq.n	8009a04 <_strtod_l+0x558>
 800996e:	3326      	adds	r3, #38	; 0x26
 8009970:	33ff      	adds	r3, #255	; 0xff
 8009972:	429c      	cmp	r4, r3
 8009974:	dd22      	ble.n	80099bc <_strtod_l+0x510>
 8009976:	2300      	movs	r3, #0
 8009978:	9306      	str	r3, [sp, #24]
 800997a:	9307      	str	r3, [sp, #28]
 800997c:	930b      	str	r3, [sp, #44]	; 0x2c
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	2322      	movs	r3, #34	; 0x22
 8009982:	2600      	movs	r6, #0
 8009984:	9a05      	ldr	r2, [sp, #20]
 8009986:	4f3f      	ldr	r7, [pc, #252]	; (8009a84 <_strtod_l+0x5d8>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	42b3      	cmp	r3, r6
 800998e:	d100      	bne.n	8009992 <_strtod_l+0x4e6>
 8009990:	e5d3      	b.n	800953a <_strtod_l+0x8e>
 8009992:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009994:	9805      	ldr	r0, [sp, #20]
 8009996:	f002 f9cd 	bl	800bd34 <_Bfree>
 800999a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800999c:	9805      	ldr	r0, [sp, #20]
 800999e:	f002 f9c9 	bl	800bd34 <_Bfree>
 80099a2:	9907      	ldr	r1, [sp, #28]
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	f002 f9c5 	bl	800bd34 <_Bfree>
 80099aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099ac:	9805      	ldr	r0, [sp, #20]
 80099ae:	f002 f9c1 	bl	800bd34 <_Bfree>
 80099b2:	9906      	ldr	r1, [sp, #24]
 80099b4:	9805      	ldr	r0, [sp, #20]
 80099b6:	f002 f9bd 	bl	800bd34 <_Bfree>
 80099ba:	e5be      	b.n	800953a <_strtod_l+0x8e>
 80099bc:	2300      	movs	r3, #0
 80099be:	0030      	movs	r0, r6
 80099c0:	0039      	movs	r1, r7
 80099c2:	4d35      	ldr	r5, [pc, #212]	; (8009a98 <_strtod_l+0x5ec>)
 80099c4:	1124      	asrs	r4, r4, #4
 80099c6:	9308      	str	r3, [sp, #32]
 80099c8:	2c01      	cmp	r4, #1
 80099ca:	dc1e      	bgt.n	8009a0a <_strtod_l+0x55e>
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <_strtod_l+0x528>
 80099d0:	0006      	movs	r6, r0
 80099d2:	000f      	movs	r7, r1
 80099d4:	4b31      	ldr	r3, [pc, #196]	; (8009a9c <_strtod_l+0x5f0>)
 80099d6:	0032      	movs	r2, r6
 80099d8:	18ff      	adds	r7, r7, r3
 80099da:	9b08      	ldr	r3, [sp, #32]
 80099dc:	00dd      	lsls	r5, r3, #3
 80099de:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <_strtod_l+0x5ec>)
 80099e0:	195d      	adds	r5, r3, r5
 80099e2:	6828      	ldr	r0, [r5, #0]
 80099e4:	6869      	ldr	r1, [r5, #4]
 80099e6:	003b      	movs	r3, r7
 80099e8:	f7f7 fd16 	bl	8001418 <__aeabi_dmul>
 80099ec:	4b25      	ldr	r3, [pc, #148]	; (8009a84 <_strtod_l+0x5d8>)
 80099ee:	4a2c      	ldr	r2, [pc, #176]	; (8009aa0 <_strtod_l+0x5f4>)
 80099f0:	0006      	movs	r6, r0
 80099f2:	400b      	ands	r3, r1
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d8be      	bhi.n	8009976 <_strtod_l+0x4ca>
 80099f8:	4a2a      	ldr	r2, [pc, #168]	; (8009aa4 <_strtod_l+0x5f8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d913      	bls.n	8009a26 <_strtod_l+0x57a>
 80099fe:	2601      	movs	r6, #1
 8009a00:	4f29      	ldr	r7, [pc, #164]	; (8009aa8 <_strtod_l+0x5fc>)
 8009a02:	4276      	negs	r6, r6
 8009a04:	2300      	movs	r3, #0
 8009a06:	9308      	str	r3, [sp, #32]
 8009a08:	e087      	b.n	8009b1a <_strtod_l+0x66e>
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4214      	tst	r4, r2
 8009a0e:	d004      	beq.n	8009a1a <_strtod_l+0x56e>
 8009a10:	682a      	ldr	r2, [r5, #0]
 8009a12:	686b      	ldr	r3, [r5, #4]
 8009a14:	f7f7 fd00 	bl	8001418 <__aeabi_dmul>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	9a08      	ldr	r2, [sp, #32]
 8009a1c:	1064      	asrs	r4, r4, #1
 8009a1e:	3201      	adds	r2, #1
 8009a20:	9208      	str	r2, [sp, #32]
 8009a22:	3508      	adds	r5, #8
 8009a24:	e7d0      	b.n	80099c8 <_strtod_l+0x51c>
 8009a26:	23d4      	movs	r3, #212	; 0xd4
 8009a28:	049b      	lsls	r3, r3, #18
 8009a2a:	18cf      	adds	r7, r1, r3
 8009a2c:	e7ea      	b.n	8009a04 <_strtod_l+0x558>
 8009a2e:	2c00      	cmp	r4, #0
 8009a30:	d0e8      	beq.n	8009a04 <_strtod_l+0x558>
 8009a32:	4264      	negs	r4, r4
 8009a34:	220f      	movs	r2, #15
 8009a36:	0023      	movs	r3, r4
 8009a38:	4013      	ands	r3, r2
 8009a3a:	4214      	tst	r4, r2
 8009a3c:	d00a      	beq.n	8009a54 <_strtod_l+0x5a8>
 8009a3e:	00da      	lsls	r2, r3, #3
 8009a40:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <_strtod_l+0x5e8>)
 8009a42:	0030      	movs	r0, r6
 8009a44:	189b      	adds	r3, r3, r2
 8009a46:	0039      	movs	r1, r7
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f7f7 f8e2 	bl	8000c14 <__aeabi_ddiv>
 8009a50:	0006      	movs	r6, r0
 8009a52:	000f      	movs	r7, r1
 8009a54:	1124      	asrs	r4, r4, #4
 8009a56:	d0d5      	beq.n	8009a04 <_strtod_l+0x558>
 8009a58:	2c1f      	cmp	r4, #31
 8009a5a:	dd27      	ble.n	8009aac <_strtod_l+0x600>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9306      	str	r3, [sp, #24]
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a64:	9309      	str	r3, [sp, #36]	; 0x24
 8009a66:	2322      	movs	r3, #34	; 0x22
 8009a68:	9a05      	ldr	r2, [sp, #20]
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a70:	2700      	movs	r7, #0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d18d      	bne.n	8009992 <_strtod_l+0x4e6>
 8009a76:	e560      	b.n	800953a <_strtod_l+0x8e>
 8009a78:	00004e1f 	.word	0x00004e1f
 8009a7c:	0800d319 	.word	0x0800d319
 8009a80:	0800d35c 	.word	0x0800d35c
 8009a84:	7ff00000 	.word	0x7ff00000
 8009a88:	0800d311 	.word	0x0800d311
 8009a8c:	0800d49c 	.word	0x0800d49c
 8009a90:	0800d7b0 	.word	0x0800d7b0
 8009a94:	0800d690 	.word	0x0800d690
 8009a98:	0800d668 	.word	0x0800d668
 8009a9c:	fcb00000 	.word	0xfcb00000
 8009aa0:	7ca00000 	.word	0x7ca00000
 8009aa4:	7c900000 	.word	0x7c900000
 8009aa8:	7fefffff 	.word	0x7fefffff
 8009aac:	2310      	movs	r3, #16
 8009aae:	0022      	movs	r2, r4
 8009ab0:	401a      	ands	r2, r3
 8009ab2:	9208      	str	r2, [sp, #32]
 8009ab4:	421c      	tst	r4, r3
 8009ab6:	d001      	beq.n	8009abc <_strtod_l+0x610>
 8009ab8:	335a      	adds	r3, #90	; 0x5a
 8009aba:	9308      	str	r3, [sp, #32]
 8009abc:	0030      	movs	r0, r6
 8009abe:	0039      	movs	r1, r7
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4dc5      	ldr	r5, [pc, #788]	; (8009dd8 <_strtod_l+0x92c>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	4214      	tst	r4, r2
 8009ac8:	d004      	beq.n	8009ad4 <_strtod_l+0x628>
 8009aca:	682a      	ldr	r2, [r5, #0]
 8009acc:	686b      	ldr	r3, [r5, #4]
 8009ace:	f7f7 fca3 	bl	8001418 <__aeabi_dmul>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	1064      	asrs	r4, r4, #1
 8009ad6:	3508      	adds	r5, #8
 8009ad8:	2c00      	cmp	r4, #0
 8009ada:	d1f3      	bne.n	8009ac4 <_strtod_l+0x618>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <_strtod_l+0x638>
 8009ae0:	0006      	movs	r6, r0
 8009ae2:	000f      	movs	r7, r1
 8009ae4:	9b08      	ldr	r3, [sp, #32]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <_strtod_l+0x65e>
 8009aea:	236b      	movs	r3, #107	; 0x6b
 8009aec:	007a      	lsls	r2, r7, #1
 8009aee:	0d52      	lsrs	r2, r2, #21
 8009af0:	0039      	movs	r1, r7
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dd08      	ble.n	8009b0a <_strtod_l+0x65e>
 8009af8:	2b1f      	cmp	r3, #31
 8009afa:	dc00      	bgt.n	8009afe <_strtod_l+0x652>
 8009afc:	e124      	b.n	8009d48 <_strtod_l+0x89c>
 8009afe:	2600      	movs	r6, #0
 8009b00:	2b34      	cmp	r3, #52	; 0x34
 8009b02:	dc00      	bgt.n	8009b06 <_strtod_l+0x65a>
 8009b04:	e119      	b.n	8009d3a <_strtod_l+0x88e>
 8009b06:	27dc      	movs	r7, #220	; 0xdc
 8009b08:	04bf      	lsls	r7, r7, #18
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	0030      	movs	r0, r6
 8009b10:	0039      	movs	r1, r7
 8009b12:	f7f6 fca5 	bl	8000460 <__aeabi_dcmpeq>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1a0      	bne.n	8009a5c <_strtod_l+0x5b0>
 8009b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	9805      	ldr	r0, [sp, #20]
 8009b26:	f002 f96d 	bl	800be04 <__s2b>
 8009b2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d100      	bne.n	8009b32 <_strtod_l+0x686>
 8009b30:	e721      	b.n	8009976 <_strtod_l+0x4ca>
 8009b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b34:	9907      	ldr	r1, [sp, #28]
 8009b36:	17da      	asrs	r2, r3, #31
 8009b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b3a:	1a5b      	subs	r3, r3, r1
 8009b3c:	401a      	ands	r2, r3
 8009b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b40:	9215      	str	r2, [sp, #84]	; 0x54
 8009b42:	43db      	mvns	r3, r3
 8009b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b46:	17db      	asrs	r3, r3, #31
 8009b48:	401a      	ands	r2, r3
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	921a      	str	r2, [sp, #104]	; 0x68
 8009b4e:	9306      	str	r3, [sp, #24]
 8009b50:	9307      	str	r3, [sp, #28]
 8009b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b54:	9805      	ldr	r0, [sp, #20]
 8009b56:	6859      	ldr	r1, [r3, #4]
 8009b58:	f002 f8a8 	bl	800bcac <_Balloc>
 8009b5c:	9009      	str	r0, [sp, #36]	; 0x24
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d100      	bne.n	8009b64 <_strtod_l+0x6b8>
 8009b62:	e70d      	b.n	8009980 <_strtod_l+0x4d4>
 8009b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	310c      	adds	r1, #12
 8009b6c:	1c9a      	adds	r2, r3, #2
 8009b6e:	0092      	lsls	r2, r2, #2
 8009b70:	300c      	adds	r0, #12
 8009b72:	930c      	str	r3, [sp, #48]	; 0x30
 8009b74:	f7fe fd40 	bl	80085f8 <memcpy>
 8009b78:	ab22      	add	r3, sp, #136	; 0x88
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	ab21      	add	r3, sp, #132	; 0x84
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	0032      	movs	r2, r6
 8009b82:	003b      	movs	r3, r7
 8009b84:	9805      	ldr	r0, [sp, #20]
 8009b86:	9612      	str	r6, [sp, #72]	; 0x48
 8009b88:	9713      	str	r7, [sp, #76]	; 0x4c
 8009b8a:	f002 fc87 	bl	800c49c <__d2b>
 8009b8e:	9020      	str	r0, [sp, #128]	; 0x80
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d100      	bne.n	8009b96 <_strtod_l+0x6ea>
 8009b94:	e6f4      	b.n	8009980 <_strtod_l+0x4d4>
 8009b96:	2101      	movs	r1, #1
 8009b98:	9805      	ldr	r0, [sp, #20]
 8009b9a:	f002 f9c7 	bl	800bf2c <__i2b>
 8009b9e:	9007      	str	r0, [sp, #28]
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d100      	bne.n	8009ba6 <_strtod_l+0x6fa>
 8009ba4:	e6ec      	b.n	8009980 <_strtod_l+0x4d4>
 8009ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ba8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009baa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009bac:	1ad4      	subs	r4, r2, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	db01      	blt.n	8009bb6 <_strtod_l+0x70a>
 8009bb2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009bb4:	195d      	adds	r5, r3, r5
 8009bb6:	9908      	ldr	r1, [sp, #32]
 8009bb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009bba:	1a5b      	subs	r3, r3, r1
 8009bbc:	2136      	movs	r1, #54	; 0x36
 8009bbe:	189b      	adds	r3, r3, r2
 8009bc0:	1a8a      	subs	r2, r1, r2
 8009bc2:	4986      	ldr	r1, [pc, #536]	; (8009ddc <_strtod_l+0x930>)
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	468c      	mov	ip, r1
 8009bc8:	2100      	movs	r1, #0
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	9110      	str	r1, [sp, #64]	; 0x40
 8009bce:	9014      	str	r0, [sp, #80]	; 0x50
 8009bd0:	4563      	cmp	r3, ip
 8009bd2:	da07      	bge.n	8009be4 <_strtod_l+0x738>
 8009bd4:	4661      	mov	r1, ip
 8009bd6:	1ac9      	subs	r1, r1, r3
 8009bd8:	1a52      	subs	r2, r2, r1
 8009bda:	291f      	cmp	r1, #31
 8009bdc:	dd00      	ble.n	8009be0 <_strtod_l+0x734>
 8009bde:	e0b8      	b.n	8009d52 <_strtod_l+0x8a6>
 8009be0:	4088      	lsls	r0, r1
 8009be2:	9014      	str	r0, [sp, #80]	; 0x50
 8009be4:	18ab      	adds	r3, r5, r2
 8009be6:	930c      	str	r3, [sp, #48]	; 0x30
 8009be8:	18a4      	adds	r4, r4, r2
 8009bea:	9b08      	ldr	r3, [sp, #32]
 8009bec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bee:	191c      	adds	r4, r3, r4
 8009bf0:	002b      	movs	r3, r5
 8009bf2:	4295      	cmp	r5, r2
 8009bf4:	dd00      	ble.n	8009bf8 <_strtod_l+0x74c>
 8009bf6:	0013      	movs	r3, r2
 8009bf8:	42a3      	cmp	r3, r4
 8009bfa:	dd00      	ble.n	8009bfe <_strtod_l+0x752>
 8009bfc:	0023      	movs	r3, r4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	dd04      	ble.n	8009c0c <_strtod_l+0x760>
 8009c02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c04:	1ae4      	subs	r4, r4, r3
 8009c06:	1ad2      	subs	r2, r2, r3
 8009c08:	920c      	str	r2, [sp, #48]	; 0x30
 8009c0a:	1aed      	subs	r5, r5, r3
 8009c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	dd17      	ble.n	8009c42 <_strtod_l+0x796>
 8009c12:	001a      	movs	r2, r3
 8009c14:	9907      	ldr	r1, [sp, #28]
 8009c16:	9805      	ldr	r0, [sp, #20]
 8009c18:	f002 fa4e 	bl	800c0b8 <__pow5mult>
 8009c1c:	9007      	str	r0, [sp, #28]
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d100      	bne.n	8009c24 <_strtod_l+0x778>
 8009c22:	e6ad      	b.n	8009980 <_strtod_l+0x4d4>
 8009c24:	0001      	movs	r1, r0
 8009c26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c28:	9805      	ldr	r0, [sp, #20]
 8009c2a:	f002 f995 	bl	800bf58 <__multiply>
 8009c2e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d100      	bne.n	8009c36 <_strtod_l+0x78a>
 8009c34:	e6a4      	b.n	8009980 <_strtod_l+0x4d4>
 8009c36:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009c38:	9805      	ldr	r0, [sp, #20]
 8009c3a:	f002 f87b 	bl	800bd34 <_Bfree>
 8009c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c40:	9320      	str	r3, [sp, #128]	; 0x80
 8009c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dd00      	ble.n	8009c4a <_strtod_l+0x79e>
 8009c48:	e089      	b.n	8009d5e <_strtod_l+0x8b2>
 8009c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dd08      	ble.n	8009c62 <_strtod_l+0x7b6>
 8009c50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c54:	9805      	ldr	r0, [sp, #20]
 8009c56:	f002 fa2f 	bl	800c0b8 <__pow5mult>
 8009c5a:	9009      	str	r0, [sp, #36]	; 0x24
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d100      	bne.n	8009c62 <_strtod_l+0x7b6>
 8009c60:	e68e      	b.n	8009980 <_strtod_l+0x4d4>
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	dd08      	ble.n	8009c78 <_strtod_l+0x7cc>
 8009c66:	0022      	movs	r2, r4
 8009c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c6a:	9805      	ldr	r0, [sp, #20]
 8009c6c:	f002 fa80 	bl	800c170 <__lshift>
 8009c70:	9009      	str	r0, [sp, #36]	; 0x24
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d100      	bne.n	8009c78 <_strtod_l+0x7cc>
 8009c76:	e683      	b.n	8009980 <_strtod_l+0x4d4>
 8009c78:	2d00      	cmp	r5, #0
 8009c7a:	dd08      	ble.n	8009c8e <_strtod_l+0x7e2>
 8009c7c:	002a      	movs	r2, r5
 8009c7e:	9907      	ldr	r1, [sp, #28]
 8009c80:	9805      	ldr	r0, [sp, #20]
 8009c82:	f002 fa75 	bl	800c170 <__lshift>
 8009c86:	9007      	str	r0, [sp, #28]
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d100      	bne.n	8009c8e <_strtod_l+0x7e2>
 8009c8c:	e678      	b.n	8009980 <_strtod_l+0x4d4>
 8009c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c90:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009c92:	9805      	ldr	r0, [sp, #20]
 8009c94:	f002 faf6 	bl	800c284 <__mdiff>
 8009c98:	9006      	str	r0, [sp, #24]
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d100      	bne.n	8009ca0 <_strtod_l+0x7f4>
 8009c9e:	e66f      	b.n	8009980 <_strtod_l+0x4d4>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	68c3      	ldr	r3, [r0, #12]
 8009ca4:	9907      	ldr	r1, [sp, #28]
 8009ca6:	60c2      	str	r2, [r0, #12]
 8009ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009caa:	f002 facf 	bl	800c24c <__mcmp>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	da5f      	bge.n	8009d72 <_strtod_l+0x8c6>
 8009cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cb4:	4333      	orrs	r3, r6
 8009cb6:	d000      	beq.n	8009cba <_strtod_l+0x80e>
 8009cb8:	e08a      	b.n	8009dd0 <_strtod_l+0x924>
 8009cba:	033b      	lsls	r3, r7, #12
 8009cbc:	d000      	beq.n	8009cc0 <_strtod_l+0x814>
 8009cbe:	e087      	b.n	8009dd0 <_strtod_l+0x924>
 8009cc0:	22d6      	movs	r2, #214	; 0xd6
 8009cc2:	4b47      	ldr	r3, [pc, #284]	; (8009de0 <_strtod_l+0x934>)
 8009cc4:	04d2      	lsls	r2, r2, #19
 8009cc6:	403b      	ands	r3, r7
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d800      	bhi.n	8009cce <_strtod_l+0x822>
 8009ccc:	e080      	b.n	8009dd0 <_strtod_l+0x924>
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d104      	bne.n	8009ce2 <_strtod_l+0x836>
 8009cd8:	9b06      	ldr	r3, [sp, #24]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	dd76      	ble.n	8009dd0 <_strtod_l+0x924>
 8009ce2:	9906      	ldr	r1, [sp, #24]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	9805      	ldr	r0, [sp, #20]
 8009ce8:	f002 fa42 	bl	800c170 <__lshift>
 8009cec:	9907      	ldr	r1, [sp, #28]
 8009cee:	9006      	str	r0, [sp, #24]
 8009cf0:	f002 faac 	bl	800c24c <__mcmp>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	dd6b      	ble.n	8009dd0 <_strtod_l+0x924>
 8009cf8:	9908      	ldr	r1, [sp, #32]
 8009cfa:	003b      	movs	r3, r7
 8009cfc:	4a38      	ldr	r2, [pc, #224]	; (8009de0 <_strtod_l+0x934>)
 8009cfe:	2900      	cmp	r1, #0
 8009d00:	d100      	bne.n	8009d04 <_strtod_l+0x858>
 8009d02:	e092      	b.n	8009e2a <_strtod_l+0x97e>
 8009d04:	0011      	movs	r1, r2
 8009d06:	20d6      	movs	r0, #214	; 0xd6
 8009d08:	4039      	ands	r1, r7
 8009d0a:	04c0      	lsls	r0, r0, #19
 8009d0c:	4281      	cmp	r1, r0
 8009d0e:	dd00      	ble.n	8009d12 <_strtod_l+0x866>
 8009d10:	e08b      	b.n	8009e2a <_strtod_l+0x97e>
 8009d12:	23dc      	movs	r3, #220	; 0xdc
 8009d14:	049b      	lsls	r3, r3, #18
 8009d16:	4299      	cmp	r1, r3
 8009d18:	dc00      	bgt.n	8009d1c <_strtod_l+0x870>
 8009d1a:	e6a4      	b.n	8009a66 <_strtod_l+0x5ba>
 8009d1c:	0030      	movs	r0, r6
 8009d1e:	0039      	movs	r1, r7
 8009d20:	2200      	movs	r2, #0
 8009d22:	4b30      	ldr	r3, [pc, #192]	; (8009de4 <_strtod_l+0x938>)
 8009d24:	f7f7 fb78 	bl	8001418 <__aeabi_dmul>
 8009d28:	0006      	movs	r6, r0
 8009d2a:	000f      	movs	r7, r1
 8009d2c:	4308      	orrs	r0, r1
 8009d2e:	d000      	beq.n	8009d32 <_strtod_l+0x886>
 8009d30:	e62f      	b.n	8009992 <_strtod_l+0x4e6>
 8009d32:	2322      	movs	r3, #34	; 0x22
 8009d34:	9a05      	ldr	r2, [sp, #20]
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	e62b      	b.n	8009992 <_strtod_l+0x4e6>
 8009d3a:	234b      	movs	r3, #75	; 0x4b
 8009d3c:	1a9a      	subs	r2, r3, r2
 8009d3e:	3b4c      	subs	r3, #76	; 0x4c
 8009d40:	4093      	lsls	r3, r2
 8009d42:	4019      	ands	r1, r3
 8009d44:	000f      	movs	r7, r1
 8009d46:	e6e0      	b.n	8009b0a <_strtod_l+0x65e>
 8009d48:	2201      	movs	r2, #1
 8009d4a:	4252      	negs	r2, r2
 8009d4c:	409a      	lsls	r2, r3
 8009d4e:	4016      	ands	r6, r2
 8009d50:	e6db      	b.n	8009b0a <_strtod_l+0x65e>
 8009d52:	4925      	ldr	r1, [pc, #148]	; (8009de8 <_strtod_l+0x93c>)
 8009d54:	1acb      	subs	r3, r1, r3
 8009d56:	0001      	movs	r1, r0
 8009d58:	4099      	lsls	r1, r3
 8009d5a:	9110      	str	r1, [sp, #64]	; 0x40
 8009d5c:	e741      	b.n	8009be2 <_strtod_l+0x736>
 8009d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d60:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d62:	9805      	ldr	r0, [sp, #20]
 8009d64:	f002 fa04 	bl	800c170 <__lshift>
 8009d68:	9020      	str	r0, [sp, #128]	; 0x80
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d000      	beq.n	8009d70 <_strtod_l+0x8c4>
 8009d6e:	e76c      	b.n	8009c4a <_strtod_l+0x79e>
 8009d70:	e606      	b.n	8009980 <_strtod_l+0x4d4>
 8009d72:	970c      	str	r7, [sp, #48]	; 0x30
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d176      	bne.n	8009e66 <_strtod_l+0x9ba>
 8009d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d7a:	033b      	lsls	r3, r7, #12
 8009d7c:	0b1b      	lsrs	r3, r3, #12
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	d038      	beq.n	8009df4 <_strtod_l+0x948>
 8009d82:	4a1a      	ldr	r2, [pc, #104]	; (8009dec <_strtod_l+0x940>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d138      	bne.n	8009dfa <_strtod_l+0x94e>
 8009d88:	2201      	movs	r2, #1
 8009d8a:	9b08      	ldr	r3, [sp, #32]
 8009d8c:	4252      	negs	r2, r2
 8009d8e:	0031      	movs	r1, r6
 8009d90:	0010      	movs	r0, r2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <_strtod_l+0x902>
 8009d96:	24d4      	movs	r4, #212	; 0xd4
 8009d98:	4b11      	ldr	r3, [pc, #68]	; (8009de0 <_strtod_l+0x934>)
 8009d9a:	0010      	movs	r0, r2
 8009d9c:	403b      	ands	r3, r7
 8009d9e:	04e4      	lsls	r4, r4, #19
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	d804      	bhi.n	8009dae <_strtod_l+0x902>
 8009da4:	306c      	adds	r0, #108	; 0x6c
 8009da6:	0d1b      	lsrs	r3, r3, #20
 8009da8:	1ac3      	subs	r3, r0, r3
 8009daa:	409a      	lsls	r2, r3
 8009dac:	0010      	movs	r0, r2
 8009dae:	4281      	cmp	r1, r0
 8009db0:	d123      	bne.n	8009dfa <_strtod_l+0x94e>
 8009db2:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <_strtod_l+0x944>)
 8009db4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d102      	bne.n	8009dc0 <_strtod_l+0x914>
 8009dba:	1c4b      	adds	r3, r1, #1
 8009dbc:	d100      	bne.n	8009dc0 <_strtod_l+0x914>
 8009dbe:	e5df      	b.n	8009980 <_strtod_l+0x4d4>
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <_strtod_l+0x934>)
 8009dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dc4:	2600      	movs	r6, #0
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	0013      	movs	r3, r2
 8009dca:	2280      	movs	r2, #128	; 0x80
 8009dcc:	0352      	lsls	r2, r2, #13
 8009dce:	189f      	adds	r7, r3, r2
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1a2      	bne.n	8009d1c <_strtod_l+0x870>
 8009dd6:	e5dc      	b.n	8009992 <_strtod_l+0x4e6>
 8009dd8:	0800d370 	.word	0x0800d370
 8009ddc:	fffffc02 	.word	0xfffffc02
 8009de0:	7ff00000 	.word	0x7ff00000
 8009de4:	39500000 	.word	0x39500000
 8009de8:	fffffbe2 	.word	0xfffffbe2
 8009dec:	000fffff 	.word	0x000fffff
 8009df0:	7fefffff 	.word	0x7fefffff
 8009df4:	4333      	orrs	r3, r6
 8009df6:	d100      	bne.n	8009dfa <_strtod_l+0x94e>
 8009df8:	e77e      	b.n	8009cf8 <_strtod_l+0x84c>
 8009dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01d      	beq.n	8009e3c <_strtod_l+0x990>
 8009e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e04:	4213      	tst	r3, r2
 8009e06:	d0e3      	beq.n	8009dd0 <_strtod_l+0x924>
 8009e08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e0a:	0030      	movs	r0, r6
 8009e0c:	0039      	movs	r1, r7
 8009e0e:	9a08      	ldr	r2, [sp, #32]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d017      	beq.n	8009e44 <_strtod_l+0x998>
 8009e14:	f7ff fb32 	bl	800947c <sulp>
 8009e18:	0002      	movs	r2, r0
 8009e1a:	000b      	movs	r3, r1
 8009e1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e20:	f7f6 fbbc 	bl	800059c <__aeabi_dadd>
 8009e24:	0006      	movs	r6, r0
 8009e26:	000f      	movs	r7, r1
 8009e28:	e7d2      	b.n	8009dd0 <_strtod_l+0x924>
 8009e2a:	2601      	movs	r6, #1
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	4a99      	ldr	r2, [pc, #612]	; (800a094 <_strtod_l+0xbe8>)
 8009e30:	4276      	negs	r6, r6
 8009e32:	189b      	adds	r3, r3, r2
 8009e34:	4a98      	ldr	r2, [pc, #608]	; (800a098 <_strtod_l+0xbec>)
 8009e36:	431a      	orrs	r2, r3
 8009e38:	0017      	movs	r7, r2
 8009e3a:	e7c9      	b.n	8009dd0 <_strtod_l+0x924>
 8009e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e3e:	4233      	tst	r3, r6
 8009e40:	d0c6      	beq.n	8009dd0 <_strtod_l+0x924>
 8009e42:	e7e1      	b.n	8009e08 <_strtod_l+0x95c>
 8009e44:	f7ff fb1a 	bl	800947c <sulp>
 8009e48:	0002      	movs	r2, r0
 8009e4a:	000b      	movs	r3, r1
 8009e4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e50:	f7f7 fd4e 	bl	80018f0 <__aeabi_dsub>
 8009e54:	2200      	movs	r2, #0
 8009e56:	2300      	movs	r3, #0
 8009e58:	0006      	movs	r6, r0
 8009e5a:	000f      	movs	r7, r1
 8009e5c:	f7f6 fb00 	bl	8000460 <__aeabi_dcmpeq>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0b5      	beq.n	8009dd0 <_strtod_l+0x924>
 8009e64:	e5ff      	b.n	8009a66 <_strtod_l+0x5ba>
 8009e66:	9907      	ldr	r1, [sp, #28]
 8009e68:	9806      	ldr	r0, [sp, #24]
 8009e6a:	f002 fb7b 	bl	800c564 <__ratio>
 8009e6e:	2380      	movs	r3, #128	; 0x80
 8009e70:	2200      	movs	r2, #0
 8009e72:	05db      	lsls	r3, r3, #23
 8009e74:	0004      	movs	r4, r0
 8009e76:	000d      	movs	r5, r1
 8009e78:	f7f6 fb02 	bl	8000480 <__aeabi_dcmple>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d075      	beq.n	8009f6c <_strtod_l+0xac0>
 8009e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d047      	beq.n	8009f16 <_strtod_l+0xa6a>
 8009e86:	2300      	movs	r3, #0
 8009e88:	4c84      	ldr	r4, [pc, #528]	; (800a09c <_strtod_l+0xbf0>)
 8009e8a:	2500      	movs	r5, #0
 8009e8c:	9310      	str	r3, [sp, #64]	; 0x40
 8009e8e:	9411      	str	r4, [sp, #68]	; 0x44
 8009e90:	4c82      	ldr	r4, [pc, #520]	; (800a09c <_strtod_l+0xbf0>)
 8009e92:	4a83      	ldr	r2, [pc, #524]	; (800a0a0 <_strtod_l+0xbf4>)
 8009e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e96:	4013      	ands	r3, r2
 8009e98:	9314      	str	r3, [sp, #80]	; 0x50
 8009e9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e9c:	4b81      	ldr	r3, [pc, #516]	; (800a0a4 <_strtod_l+0xbf8>)
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d000      	beq.n	8009ea4 <_strtod_l+0x9f8>
 8009ea2:	e0ac      	b.n	8009ffe <_strtod_l+0xb52>
 8009ea4:	4a80      	ldr	r2, [pc, #512]	; (800a0a8 <_strtod_l+0xbfc>)
 8009ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ea8:	4694      	mov	ip, r2
 8009eaa:	4463      	add	r3, ip
 8009eac:	001f      	movs	r7, r3
 8009eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eb2:	0030      	movs	r0, r6
 8009eb4:	0039      	movs	r1, r7
 8009eb6:	920c      	str	r2, [sp, #48]	; 0x30
 8009eb8:	930d      	str	r3, [sp, #52]	; 0x34
 8009eba:	f002 fa7b 	bl	800c3b4 <__ulp>
 8009ebe:	0002      	movs	r2, r0
 8009ec0:	000b      	movs	r3, r1
 8009ec2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ec4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ec6:	f7f7 faa7 	bl	8001418 <__aeabi_dmul>
 8009eca:	0032      	movs	r2, r6
 8009ecc:	003b      	movs	r3, r7
 8009ece:	f7f6 fb65 	bl	800059c <__aeabi_dadd>
 8009ed2:	4a73      	ldr	r2, [pc, #460]	; (800a0a0 <_strtod_l+0xbf4>)
 8009ed4:	4b75      	ldr	r3, [pc, #468]	; (800a0ac <_strtod_l+0xc00>)
 8009ed6:	0006      	movs	r6, r0
 8009ed8:	400a      	ands	r2, r1
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d95e      	bls.n	8009f9c <_strtod_l+0xaf0>
 8009ede:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ee0:	4b73      	ldr	r3, [pc, #460]	; (800a0b0 <_strtod_l+0xc04>)
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d103      	bne.n	8009eee <_strtod_l+0xa42>
 8009ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ee8:	3301      	adds	r3, #1
 8009eea:	d100      	bne.n	8009eee <_strtod_l+0xa42>
 8009eec:	e548      	b.n	8009980 <_strtod_l+0x4d4>
 8009eee:	2601      	movs	r6, #1
 8009ef0:	4f6f      	ldr	r7, [pc, #444]	; (800a0b0 <_strtod_l+0xc04>)
 8009ef2:	4276      	negs	r6, r6
 8009ef4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009ef6:	9805      	ldr	r0, [sp, #20]
 8009ef8:	f001 ff1c 	bl	800bd34 <_Bfree>
 8009efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efe:	9805      	ldr	r0, [sp, #20]
 8009f00:	f001 ff18 	bl	800bd34 <_Bfree>
 8009f04:	9907      	ldr	r1, [sp, #28]
 8009f06:	9805      	ldr	r0, [sp, #20]
 8009f08:	f001 ff14 	bl	800bd34 <_Bfree>
 8009f0c:	9906      	ldr	r1, [sp, #24]
 8009f0e:	9805      	ldr	r0, [sp, #20]
 8009f10:	f001 ff10 	bl	800bd34 <_Bfree>
 8009f14:	e61d      	b.n	8009b52 <_strtod_l+0x6a6>
 8009f16:	2e00      	cmp	r6, #0
 8009f18:	d11c      	bne.n	8009f54 <_strtod_l+0xaa8>
 8009f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f1c:	031b      	lsls	r3, r3, #12
 8009f1e:	d11f      	bne.n	8009f60 <_strtod_l+0xab4>
 8009f20:	2200      	movs	r2, #0
 8009f22:	0020      	movs	r0, r4
 8009f24:	0029      	movs	r1, r5
 8009f26:	4b5d      	ldr	r3, [pc, #372]	; (800a09c <_strtod_l+0xbf0>)
 8009f28:	f7f6 faa0 	bl	800046c <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d11a      	bne.n	8009f66 <_strtod_l+0xaba>
 8009f30:	0020      	movs	r0, r4
 8009f32:	0029      	movs	r1, r5
 8009f34:	2200      	movs	r2, #0
 8009f36:	4b5f      	ldr	r3, [pc, #380]	; (800a0b4 <_strtod_l+0xc08>)
 8009f38:	f7f7 fa6e 	bl	8001418 <__aeabi_dmul>
 8009f3c:	0005      	movs	r5, r0
 8009f3e:	000c      	movs	r4, r1
 8009f40:	2380      	movs	r3, #128	; 0x80
 8009f42:	061b      	lsls	r3, r3, #24
 8009f44:	18e3      	adds	r3, r4, r3
 8009f46:	951c      	str	r5, [sp, #112]	; 0x70
 8009f48:	931d      	str	r3, [sp, #116]	; 0x74
 8009f4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f4e:	9210      	str	r2, [sp, #64]	; 0x40
 8009f50:	9311      	str	r3, [sp, #68]	; 0x44
 8009f52:	e79e      	b.n	8009e92 <_strtod_l+0x9e6>
 8009f54:	2e01      	cmp	r6, #1
 8009f56:	d103      	bne.n	8009f60 <_strtod_l+0xab4>
 8009f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d100      	bne.n	8009f60 <_strtod_l+0xab4>
 8009f5e:	e582      	b.n	8009a66 <_strtod_l+0x5ba>
 8009f60:	2300      	movs	r3, #0
 8009f62:	4c55      	ldr	r4, [pc, #340]	; (800a0b8 <_strtod_l+0xc0c>)
 8009f64:	e791      	b.n	8009e8a <_strtod_l+0x9de>
 8009f66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f68:	4c52      	ldr	r4, [pc, #328]	; (800a0b4 <_strtod_l+0xc08>)
 8009f6a:	e7e9      	b.n	8009f40 <_strtod_l+0xa94>
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	0020      	movs	r0, r4
 8009f70:	0029      	movs	r1, r5
 8009f72:	4b50      	ldr	r3, [pc, #320]	; (800a0b4 <_strtod_l+0xc08>)
 8009f74:	f7f7 fa50 	bl	8001418 <__aeabi_dmul>
 8009f78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f7a:	0005      	movs	r5, r0
 8009f7c:	000b      	movs	r3, r1
 8009f7e:	000c      	movs	r4, r1
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	d107      	bne.n	8009f94 <_strtod_l+0xae8>
 8009f84:	2280      	movs	r2, #128	; 0x80
 8009f86:	0612      	lsls	r2, r2, #24
 8009f88:	188b      	adds	r3, r1, r2
 8009f8a:	9016      	str	r0, [sp, #88]	; 0x58
 8009f8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f92:	e7dc      	b.n	8009f4e <_strtod_l+0xaa2>
 8009f94:	0002      	movs	r2, r0
 8009f96:	9216      	str	r2, [sp, #88]	; 0x58
 8009f98:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f9a:	e7f8      	b.n	8009f8e <_strtod_l+0xae2>
 8009f9c:	23d4      	movs	r3, #212	; 0xd4
 8009f9e:	049b      	lsls	r3, r3, #18
 8009fa0:	18cf      	adds	r7, r1, r3
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1a5      	bne.n	8009ef4 <_strtod_l+0xa48>
 8009fa8:	4b3d      	ldr	r3, [pc, #244]	; (800a0a0 <_strtod_l+0xbf4>)
 8009faa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fac:	403b      	ands	r3, r7
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d1a0      	bne.n	8009ef4 <_strtod_l+0xa48>
 8009fb2:	0028      	movs	r0, r5
 8009fb4:	0021      	movs	r1, r4
 8009fb6:	f7f6 fa9f 	bl	80004f8 <__aeabi_d2lz>
 8009fba:	f7f6 fad9 	bl	8000570 <__aeabi_l2d>
 8009fbe:	0002      	movs	r2, r0
 8009fc0:	000b      	movs	r3, r1
 8009fc2:	0028      	movs	r0, r5
 8009fc4:	0021      	movs	r1, r4
 8009fc6:	f7f7 fc93 	bl	80018f0 <__aeabi_dsub>
 8009fca:	033b      	lsls	r3, r7, #12
 8009fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fce:	0b1b      	lsrs	r3, r3, #12
 8009fd0:	4333      	orrs	r3, r6
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	0004      	movs	r4, r0
 8009fd6:	000d      	movs	r5, r1
 8009fd8:	4a38      	ldr	r2, [pc, #224]	; (800a0bc <_strtod_l+0xc10>)
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d055      	beq.n	800a08a <_strtod_l+0xbde>
 8009fde:	4b38      	ldr	r3, [pc, #224]	; (800a0c0 <_strtod_l+0xc14>)
 8009fe0:	f7f6 fa44 	bl	800046c <__aeabi_dcmplt>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d000      	beq.n	8009fea <_strtod_l+0xb3e>
 8009fe8:	e4d3      	b.n	8009992 <_strtod_l+0x4e6>
 8009fea:	0020      	movs	r0, r4
 8009fec:	0029      	movs	r1, r5
 8009fee:	4a35      	ldr	r2, [pc, #212]	; (800a0c4 <_strtod_l+0xc18>)
 8009ff0:	4b30      	ldr	r3, [pc, #192]	; (800a0b4 <_strtod_l+0xc08>)
 8009ff2:	f7f6 fa4f 	bl	8000494 <__aeabi_dcmpgt>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d100      	bne.n	8009ffc <_strtod_l+0xb50>
 8009ffa:	e77b      	b.n	8009ef4 <_strtod_l+0xa48>
 8009ffc:	e4c9      	b.n	8009992 <_strtod_l+0x4e6>
 8009ffe:	9b08      	ldr	r3, [sp, #32]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d02b      	beq.n	800a05c <_strtod_l+0xbb0>
 800a004:	23d4      	movs	r3, #212	; 0xd4
 800a006:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a008:	04db      	lsls	r3, r3, #19
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d826      	bhi.n	800a05c <_strtod_l+0xbb0>
 800a00e:	0028      	movs	r0, r5
 800a010:	0021      	movs	r1, r4
 800a012:	4a2d      	ldr	r2, [pc, #180]	; (800a0c8 <_strtod_l+0xc1c>)
 800a014:	4b2d      	ldr	r3, [pc, #180]	; (800a0cc <_strtod_l+0xc20>)
 800a016:	f7f6 fa33 	bl	8000480 <__aeabi_dcmple>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d017      	beq.n	800a04e <_strtod_l+0xba2>
 800a01e:	0028      	movs	r0, r5
 800a020:	0021      	movs	r1, r4
 800a022:	f7f6 fa4b 	bl	80004bc <__aeabi_d2uiz>
 800a026:	2800      	cmp	r0, #0
 800a028:	d100      	bne.n	800a02c <_strtod_l+0xb80>
 800a02a:	3001      	adds	r0, #1
 800a02c:	f7f8 f876 	bl	800211c <__aeabi_ui2d>
 800a030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a032:	0005      	movs	r5, r0
 800a034:	000b      	movs	r3, r1
 800a036:	000c      	movs	r4, r1
 800a038:	2a00      	cmp	r2, #0
 800a03a:	d122      	bne.n	800a082 <_strtod_l+0xbd6>
 800a03c:	2280      	movs	r2, #128	; 0x80
 800a03e:	0612      	lsls	r2, r2, #24
 800a040:	188b      	adds	r3, r1, r2
 800a042:	9018      	str	r0, [sp, #96]	; 0x60
 800a044:	9319      	str	r3, [sp, #100]	; 0x64
 800a046:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a04a:	9210      	str	r2, [sp, #64]	; 0x40
 800a04c:	9311      	str	r3, [sp, #68]	; 0x44
 800a04e:	22d6      	movs	r2, #214	; 0xd6
 800a050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a052:	04d2      	lsls	r2, r2, #19
 800a054:	189b      	adds	r3, r3, r2
 800a056:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	9311      	str	r3, [sp, #68]	; 0x44
 800a05c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a05e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a060:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a062:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a064:	f002 f9a6 	bl	800c3b4 <__ulp>
 800a068:	0002      	movs	r2, r0
 800a06a:	000b      	movs	r3, r1
 800a06c:	0030      	movs	r0, r6
 800a06e:	0039      	movs	r1, r7
 800a070:	f7f7 f9d2 	bl	8001418 <__aeabi_dmul>
 800a074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a078:	f7f6 fa90 	bl	800059c <__aeabi_dadd>
 800a07c:	0006      	movs	r6, r0
 800a07e:	000f      	movs	r7, r1
 800a080:	e78f      	b.n	8009fa2 <_strtod_l+0xaf6>
 800a082:	0002      	movs	r2, r0
 800a084:	9218      	str	r2, [sp, #96]	; 0x60
 800a086:	9319      	str	r3, [sp, #100]	; 0x64
 800a088:	e7dd      	b.n	800a046 <_strtod_l+0xb9a>
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <_strtod_l+0xc24>)
 800a08c:	f7f6 f9ee 	bl	800046c <__aeabi_dcmplt>
 800a090:	e7b1      	b.n	8009ff6 <_strtod_l+0xb4a>
 800a092:	46c0      	nop			; (mov r8, r8)
 800a094:	fff00000 	.word	0xfff00000
 800a098:	000fffff 	.word	0x000fffff
 800a09c:	3ff00000 	.word	0x3ff00000
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	7fe00000 	.word	0x7fe00000
 800a0a8:	fcb00000 	.word	0xfcb00000
 800a0ac:	7c9fffff 	.word	0x7c9fffff
 800a0b0:	7fefffff 	.word	0x7fefffff
 800a0b4:	3fe00000 	.word	0x3fe00000
 800a0b8:	bff00000 	.word	0xbff00000
 800a0bc:	94a03595 	.word	0x94a03595
 800a0c0:	3fdfffff 	.word	0x3fdfffff
 800a0c4:	35afe535 	.word	0x35afe535
 800a0c8:	ffc00000 	.word	0xffc00000
 800a0cc:	41dfffff 	.word	0x41dfffff
 800a0d0:	3fcfffff 	.word	0x3fcfffff

0800a0d4 <_strtod_r>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	4b02      	ldr	r3, [pc, #8]	; (800a0e0 <_strtod_r+0xc>)
 800a0d8:	f7ff f9e8 	bl	80094ac <_strtod_l>
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	20000098 	.word	0x20000098

0800a0e4 <_strtol_l.constprop.0>:
 800a0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	001e      	movs	r6, r3
 800a0ea:	9005      	str	r0, [sp, #20]
 800a0ec:	9101      	str	r1, [sp, #4]
 800a0ee:	9202      	str	r2, [sp, #8]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d045      	beq.n	800a180 <_strtol_l.constprop.0+0x9c>
 800a0f4:	000b      	movs	r3, r1
 800a0f6:	2e24      	cmp	r6, #36	; 0x24
 800a0f8:	d842      	bhi.n	800a180 <_strtol_l.constprop.0+0x9c>
 800a0fa:	4a3f      	ldr	r2, [pc, #252]	; (800a1f8 <_strtol_l.constprop.0+0x114>)
 800a0fc:	2108      	movs	r1, #8
 800a0fe:	4694      	mov	ip, r2
 800a100:	001a      	movs	r2, r3
 800a102:	4660      	mov	r0, ip
 800a104:	7814      	ldrb	r4, [r2, #0]
 800a106:	3301      	adds	r3, #1
 800a108:	5d00      	ldrb	r0, [r0, r4]
 800a10a:	001d      	movs	r5, r3
 800a10c:	0007      	movs	r7, r0
 800a10e:	400f      	ands	r7, r1
 800a110:	4208      	tst	r0, r1
 800a112:	d1f5      	bne.n	800a100 <_strtol_l.constprop.0+0x1c>
 800a114:	2c2d      	cmp	r4, #45	; 0x2d
 800a116:	d13a      	bne.n	800a18e <_strtol_l.constprop.0+0xaa>
 800a118:	2701      	movs	r7, #1
 800a11a:	781c      	ldrb	r4, [r3, #0]
 800a11c:	1c95      	adds	r5, r2, #2
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d065      	beq.n	800a1ee <_strtol_l.constprop.0+0x10a>
 800a122:	2e10      	cmp	r6, #16
 800a124:	d109      	bne.n	800a13a <_strtol_l.constprop.0+0x56>
 800a126:	2c30      	cmp	r4, #48	; 0x30
 800a128:	d107      	bne.n	800a13a <_strtol_l.constprop.0+0x56>
 800a12a:	2220      	movs	r2, #32
 800a12c:	782b      	ldrb	r3, [r5, #0]
 800a12e:	4393      	bics	r3, r2
 800a130:	2b58      	cmp	r3, #88	; 0x58
 800a132:	d157      	bne.n	800a1e4 <_strtol_l.constprop.0+0x100>
 800a134:	2610      	movs	r6, #16
 800a136:	786c      	ldrb	r4, [r5, #1]
 800a138:	3502      	adds	r5, #2
 800a13a:	4b30      	ldr	r3, [pc, #192]	; (800a1fc <_strtol_l.constprop.0+0x118>)
 800a13c:	0031      	movs	r1, r6
 800a13e:	18fb      	adds	r3, r7, r3
 800a140:	0018      	movs	r0, r3
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	f7f6 f88c 	bl	8000260 <__aeabi_uidivmod>
 800a148:	2300      	movs	r3, #0
 800a14a:	2201      	movs	r2, #1
 800a14c:	4684      	mov	ip, r0
 800a14e:	0018      	movs	r0, r3
 800a150:	9104      	str	r1, [sp, #16]
 800a152:	4252      	negs	r2, r2
 800a154:	0021      	movs	r1, r4
 800a156:	3930      	subs	r1, #48	; 0x30
 800a158:	2909      	cmp	r1, #9
 800a15a:	d81d      	bhi.n	800a198 <_strtol_l.constprop.0+0xb4>
 800a15c:	000c      	movs	r4, r1
 800a15e:	42a6      	cmp	r6, r4
 800a160:	dd28      	ble.n	800a1b4 <_strtol_l.constprop.0+0xd0>
 800a162:	2b00      	cmp	r3, #0
 800a164:	db24      	blt.n	800a1b0 <_strtol_l.constprop.0+0xcc>
 800a166:	0013      	movs	r3, r2
 800a168:	4584      	cmp	ip, r0
 800a16a:	d306      	bcc.n	800a17a <_strtol_l.constprop.0+0x96>
 800a16c:	d102      	bne.n	800a174 <_strtol_l.constprop.0+0x90>
 800a16e:	9904      	ldr	r1, [sp, #16]
 800a170:	42a1      	cmp	r1, r4
 800a172:	db02      	blt.n	800a17a <_strtol_l.constprop.0+0x96>
 800a174:	2301      	movs	r3, #1
 800a176:	4370      	muls	r0, r6
 800a178:	1820      	adds	r0, r4, r0
 800a17a:	782c      	ldrb	r4, [r5, #0]
 800a17c:	3501      	adds	r5, #1
 800a17e:	e7e9      	b.n	800a154 <_strtol_l.constprop.0+0x70>
 800a180:	f7fe fa10 	bl	80085a4 <__errno>
 800a184:	2316      	movs	r3, #22
 800a186:	6003      	str	r3, [r0, #0]
 800a188:	2000      	movs	r0, #0
 800a18a:	b007      	add	sp, #28
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	2c2b      	cmp	r4, #43	; 0x2b
 800a190:	d1c5      	bne.n	800a11e <_strtol_l.constprop.0+0x3a>
 800a192:	781c      	ldrb	r4, [r3, #0]
 800a194:	1c95      	adds	r5, r2, #2
 800a196:	e7c2      	b.n	800a11e <_strtol_l.constprop.0+0x3a>
 800a198:	0021      	movs	r1, r4
 800a19a:	3941      	subs	r1, #65	; 0x41
 800a19c:	2919      	cmp	r1, #25
 800a19e:	d801      	bhi.n	800a1a4 <_strtol_l.constprop.0+0xc0>
 800a1a0:	3c37      	subs	r4, #55	; 0x37
 800a1a2:	e7dc      	b.n	800a15e <_strtol_l.constprop.0+0x7a>
 800a1a4:	0021      	movs	r1, r4
 800a1a6:	3961      	subs	r1, #97	; 0x61
 800a1a8:	2919      	cmp	r1, #25
 800a1aa:	d803      	bhi.n	800a1b4 <_strtol_l.constprop.0+0xd0>
 800a1ac:	3c57      	subs	r4, #87	; 0x57
 800a1ae:	e7d6      	b.n	800a15e <_strtol_l.constprop.0+0x7a>
 800a1b0:	0013      	movs	r3, r2
 800a1b2:	e7e2      	b.n	800a17a <_strtol_l.constprop.0+0x96>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da09      	bge.n	800a1cc <_strtol_l.constprop.0+0xe8>
 800a1b8:	2322      	movs	r3, #34	; 0x22
 800a1ba:	9a05      	ldr	r2, [sp, #20]
 800a1bc:	9803      	ldr	r0, [sp, #12]
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	9b02      	ldr	r3, [sp, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0e1      	beq.n	800a18a <_strtol_l.constprop.0+0xa6>
 800a1c6:	1e6b      	subs	r3, r5, #1
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	e007      	b.n	800a1dc <_strtol_l.constprop.0+0xf8>
 800a1cc:	2f00      	cmp	r7, #0
 800a1ce:	d000      	beq.n	800a1d2 <_strtol_l.constprop.0+0xee>
 800a1d0:	4240      	negs	r0, r0
 800a1d2:	9a02      	ldr	r2, [sp, #8]
 800a1d4:	2a00      	cmp	r2, #0
 800a1d6:	d0d8      	beq.n	800a18a <_strtol_l.constprop.0+0xa6>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f4      	bne.n	800a1c6 <_strtol_l.constprop.0+0xe2>
 800a1dc:	9b02      	ldr	r3, [sp, #8]
 800a1de:	9a01      	ldr	r2, [sp, #4]
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e7d2      	b.n	800a18a <_strtol_l.constprop.0+0xa6>
 800a1e4:	2430      	movs	r4, #48	; 0x30
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	d1a7      	bne.n	800a13a <_strtol_l.constprop.0+0x56>
 800a1ea:	3608      	adds	r6, #8
 800a1ec:	e7a5      	b.n	800a13a <_strtol_l.constprop.0+0x56>
 800a1ee:	2c30      	cmp	r4, #48	; 0x30
 800a1f0:	d09b      	beq.n	800a12a <_strtol_l.constprop.0+0x46>
 800a1f2:	260a      	movs	r6, #10
 800a1f4:	e7a1      	b.n	800a13a <_strtol_l.constprop.0+0x56>
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	0800d399 	.word	0x0800d399
 800a1fc:	7fffffff 	.word	0x7fffffff

0800a200 <_strtol_r>:
 800a200:	b510      	push	{r4, lr}
 800a202:	f7ff ff6f 	bl	800a0e4 <_strtol_l.constprop.0>
 800a206:	bd10      	pop	{r4, pc}

0800a208 <__swbuf_r>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	0005      	movs	r5, r0
 800a20c:	000e      	movs	r6, r1
 800a20e:	0014      	movs	r4, r2
 800a210:	2800      	cmp	r0, #0
 800a212:	d004      	beq.n	800a21e <__swbuf_r+0x16>
 800a214:	6983      	ldr	r3, [r0, #24]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <__swbuf_r+0x16>
 800a21a:	f001 f897 	bl	800b34c <__sinit>
 800a21e:	4b22      	ldr	r3, [pc, #136]	; (800a2a8 <__swbuf_r+0xa0>)
 800a220:	429c      	cmp	r4, r3
 800a222:	d12e      	bne.n	800a282 <__swbuf_r+0x7a>
 800a224:	686c      	ldr	r4, [r5, #4]
 800a226:	69a3      	ldr	r3, [r4, #24]
 800a228:	60a3      	str	r3, [r4, #8]
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	071b      	lsls	r3, r3, #28
 800a22e:	d532      	bpl.n	800a296 <__swbuf_r+0x8e>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d02f      	beq.n	800a296 <__swbuf_r+0x8e>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	6922      	ldr	r2, [r4, #16]
 800a23a:	b2f7      	uxtb	r7, r6
 800a23c:	1a98      	subs	r0, r3, r2
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	b2f6      	uxtb	r6, r6
 800a242:	4283      	cmp	r3, r0
 800a244:	dc05      	bgt.n	800a252 <__swbuf_r+0x4a>
 800a246:	0021      	movs	r1, r4
 800a248:	0028      	movs	r0, r5
 800a24a:	f000 ffdd 	bl	800b208 <_fflush_r>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d127      	bne.n	800a2a2 <__swbuf_r+0x9a>
 800a252:	68a3      	ldr	r3, [r4, #8]
 800a254:	3001      	adds	r0, #1
 800a256:	3b01      	subs	r3, #1
 800a258:	60a3      	str	r3, [r4, #8]
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	6022      	str	r2, [r4, #0]
 800a260:	701f      	strb	r7, [r3, #0]
 800a262:	6963      	ldr	r3, [r4, #20]
 800a264:	4283      	cmp	r3, r0
 800a266:	d004      	beq.n	800a272 <__swbuf_r+0x6a>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	07db      	lsls	r3, r3, #31
 800a26c:	d507      	bpl.n	800a27e <__swbuf_r+0x76>
 800a26e:	2e0a      	cmp	r6, #10
 800a270:	d105      	bne.n	800a27e <__swbuf_r+0x76>
 800a272:	0021      	movs	r1, r4
 800a274:	0028      	movs	r0, r5
 800a276:	f000 ffc7 	bl	800b208 <_fflush_r>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d111      	bne.n	800a2a2 <__swbuf_r+0x9a>
 800a27e:	0030      	movs	r0, r6
 800a280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a282:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <__swbuf_r+0xa4>)
 800a284:	429c      	cmp	r4, r3
 800a286:	d101      	bne.n	800a28c <__swbuf_r+0x84>
 800a288:	68ac      	ldr	r4, [r5, #8]
 800a28a:	e7cc      	b.n	800a226 <__swbuf_r+0x1e>
 800a28c:	4b08      	ldr	r3, [pc, #32]	; (800a2b0 <__swbuf_r+0xa8>)
 800a28e:	429c      	cmp	r4, r3
 800a290:	d1c9      	bne.n	800a226 <__swbuf_r+0x1e>
 800a292:	68ec      	ldr	r4, [r5, #12]
 800a294:	e7c7      	b.n	800a226 <__swbuf_r+0x1e>
 800a296:	0021      	movs	r1, r4
 800a298:	0028      	movs	r0, r5
 800a29a:	f000 f80b 	bl	800a2b4 <__swsetup_r>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d0c9      	beq.n	800a236 <__swbuf_r+0x2e>
 800a2a2:	2601      	movs	r6, #1
 800a2a4:	4276      	negs	r6, r6
 800a2a6:	e7ea      	b.n	800a27e <__swbuf_r+0x76>
 800a2a8:	0800d54c 	.word	0x0800d54c
 800a2ac:	0800d56c 	.word	0x0800d56c
 800a2b0:	0800d52c 	.word	0x0800d52c

0800a2b4 <__swsetup_r>:
 800a2b4:	4b37      	ldr	r3, [pc, #220]	; (800a394 <__swsetup_r+0xe0>)
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	0006      	movs	r6, r0
 800a2bc:	000c      	movs	r4, r1
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	d005      	beq.n	800a2ce <__swsetup_r+0x1a>
 800a2c2:	69ab      	ldr	r3, [r5, #24]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <__swsetup_r+0x1a>
 800a2c8:	0028      	movs	r0, r5
 800a2ca:	f001 f83f 	bl	800b34c <__sinit>
 800a2ce:	4b32      	ldr	r3, [pc, #200]	; (800a398 <__swsetup_r+0xe4>)
 800a2d0:	429c      	cmp	r4, r3
 800a2d2:	d10f      	bne.n	800a2f4 <__swsetup_r+0x40>
 800a2d4:	686c      	ldr	r4, [r5, #4]
 800a2d6:	230c      	movs	r3, #12
 800a2d8:	5ee2      	ldrsh	r2, [r4, r3]
 800a2da:	b293      	uxth	r3, r2
 800a2dc:	0711      	lsls	r1, r2, #28
 800a2de:	d42d      	bmi.n	800a33c <__swsetup_r+0x88>
 800a2e0:	06d9      	lsls	r1, r3, #27
 800a2e2:	d411      	bmi.n	800a308 <__swsetup_r+0x54>
 800a2e4:	2309      	movs	r3, #9
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	3337      	adds	r3, #55	; 0x37
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	4240      	negs	r0, r0
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	4b29      	ldr	r3, [pc, #164]	; (800a39c <__swsetup_r+0xe8>)
 800a2f6:	429c      	cmp	r4, r3
 800a2f8:	d101      	bne.n	800a2fe <__swsetup_r+0x4a>
 800a2fa:	68ac      	ldr	r4, [r5, #8]
 800a2fc:	e7eb      	b.n	800a2d6 <__swsetup_r+0x22>
 800a2fe:	4b28      	ldr	r3, [pc, #160]	; (800a3a0 <__swsetup_r+0xec>)
 800a300:	429c      	cmp	r4, r3
 800a302:	d1e8      	bne.n	800a2d6 <__swsetup_r+0x22>
 800a304:	68ec      	ldr	r4, [r5, #12]
 800a306:	e7e6      	b.n	800a2d6 <__swsetup_r+0x22>
 800a308:	075b      	lsls	r3, r3, #29
 800a30a:	d513      	bpl.n	800a334 <__swsetup_r+0x80>
 800a30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30e:	2900      	cmp	r1, #0
 800a310:	d008      	beq.n	800a324 <__swsetup_r+0x70>
 800a312:	0023      	movs	r3, r4
 800a314:	3344      	adds	r3, #68	; 0x44
 800a316:	4299      	cmp	r1, r3
 800a318:	d002      	beq.n	800a320 <__swsetup_r+0x6c>
 800a31a:	0030      	movs	r0, r6
 800a31c:	f002 f9bc 	bl	800c698 <_free_r>
 800a320:	2300      	movs	r3, #0
 800a322:	6363      	str	r3, [r4, #52]	; 0x34
 800a324:	2224      	movs	r2, #36	; 0x24
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	4393      	bics	r3, r2
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	2300      	movs	r3, #0
 800a32e:	6063      	str	r3, [r4, #4]
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	2308      	movs	r3, #8
 800a336:	89a2      	ldrh	r2, [r4, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10b      	bne.n	800a35a <__swsetup_r+0xa6>
 800a342:	21a0      	movs	r1, #160	; 0xa0
 800a344:	2280      	movs	r2, #128	; 0x80
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	0089      	lsls	r1, r1, #2
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	400b      	ands	r3, r1
 800a34e:	4293      	cmp	r3, r2
 800a350:	d003      	beq.n	800a35a <__swsetup_r+0xa6>
 800a352:	0021      	movs	r1, r4
 800a354:	0030      	movs	r0, r6
 800a356:	f001 fc3d 	bl	800bbd4 <__smakebuf_r>
 800a35a:	220c      	movs	r2, #12
 800a35c:	5ea3      	ldrsh	r3, [r4, r2]
 800a35e:	2001      	movs	r0, #1
 800a360:	001a      	movs	r2, r3
 800a362:	b299      	uxth	r1, r3
 800a364:	4002      	ands	r2, r0
 800a366:	4203      	tst	r3, r0
 800a368:	d00f      	beq.n	800a38a <__swsetup_r+0xd6>
 800a36a:	2200      	movs	r2, #0
 800a36c:	60a2      	str	r2, [r4, #8]
 800a36e:	6962      	ldr	r2, [r4, #20]
 800a370:	4252      	negs	r2, r2
 800a372:	61a2      	str	r2, [r4, #24]
 800a374:	2000      	movs	r0, #0
 800a376:	6922      	ldr	r2, [r4, #16]
 800a378:	4282      	cmp	r2, r0
 800a37a:	d1ba      	bne.n	800a2f2 <__swsetup_r+0x3e>
 800a37c:	060a      	lsls	r2, r1, #24
 800a37e:	d5b8      	bpl.n	800a2f2 <__swsetup_r+0x3e>
 800a380:	2240      	movs	r2, #64	; 0x40
 800a382:	4313      	orrs	r3, r2
 800a384:	81a3      	strh	r3, [r4, #12]
 800a386:	3801      	subs	r0, #1
 800a388:	e7b3      	b.n	800a2f2 <__swsetup_r+0x3e>
 800a38a:	0788      	lsls	r0, r1, #30
 800a38c:	d400      	bmi.n	800a390 <__swsetup_r+0xdc>
 800a38e:	6962      	ldr	r2, [r4, #20]
 800a390:	60a2      	str	r2, [r4, #8]
 800a392:	e7ef      	b.n	800a374 <__swsetup_r+0xc0>
 800a394:	20000030 	.word	0x20000030
 800a398:	0800d54c 	.word	0x0800d54c
 800a39c:	0800d56c 	.word	0x0800d56c
 800a3a0:	0800d52c 	.word	0x0800d52c

0800a3a4 <quorem>:
 800a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a6:	0006      	movs	r6, r0
 800a3a8:	690b      	ldr	r3, [r1, #16]
 800a3aa:	6932      	ldr	r2, [r6, #16]
 800a3ac:	b087      	sub	sp, #28
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	9103      	str	r1, [sp, #12]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	db65      	blt.n	800a482 <quorem+0xde>
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	009c      	lsls	r4, r3, #2
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	000b      	movs	r3, r1
 800a3be:	3314      	adds	r3, #20
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	191b      	adds	r3, r3, r4
 800a3c4:	9304      	str	r3, [sp, #16]
 800a3c6:	0033      	movs	r3, r6
 800a3c8:	3314      	adds	r3, #20
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	191c      	adds	r4, r3, r4
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	6827      	ldr	r7, [r4, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	0038      	movs	r0, r7
 800a3d6:	1c5d      	adds	r5, r3, #1
 800a3d8:	0029      	movs	r1, r5
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	f7f5 feba 	bl	8000154 <__udivsi3>
 800a3e0:	9001      	str	r0, [sp, #4]
 800a3e2:	42af      	cmp	r7, r5
 800a3e4:	d324      	bcc.n	800a430 <quorem+0x8c>
 800a3e6:	2500      	movs	r5, #0
 800a3e8:	46ac      	mov	ip, r5
 800a3ea:	9802      	ldr	r0, [sp, #8]
 800a3ec:	9f05      	ldr	r7, [sp, #20]
 800a3ee:	cf08      	ldmia	r7!, {r3}
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	b299      	uxth	r1, r3
 800a3f4:	4351      	muls	r1, r2
 800a3f6:	0c1b      	lsrs	r3, r3, #16
 800a3f8:	4353      	muls	r3, r2
 800a3fa:	1949      	adds	r1, r1, r5
 800a3fc:	0c0a      	lsrs	r2, r1, #16
 800a3fe:	189b      	adds	r3, r3, r2
 800a400:	6802      	ldr	r2, [r0, #0]
 800a402:	b289      	uxth	r1, r1
 800a404:	b292      	uxth	r2, r2
 800a406:	4462      	add	r2, ip
 800a408:	1a52      	subs	r2, r2, r1
 800a40a:	6801      	ldr	r1, [r0, #0]
 800a40c:	0c1d      	lsrs	r5, r3, #16
 800a40e:	0c09      	lsrs	r1, r1, #16
 800a410:	b29b      	uxth	r3, r3
 800a412:	1acb      	subs	r3, r1, r3
 800a414:	1411      	asrs	r1, r2, #16
 800a416:	185b      	adds	r3, r3, r1
 800a418:	1419      	asrs	r1, r3, #16
 800a41a:	b292      	uxth	r2, r2
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	431a      	orrs	r2, r3
 800a420:	9b04      	ldr	r3, [sp, #16]
 800a422:	468c      	mov	ip, r1
 800a424:	c004      	stmia	r0!, {r2}
 800a426:	42bb      	cmp	r3, r7
 800a428:	d2e1      	bcs.n	800a3ee <quorem+0x4a>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d030      	beq.n	800a492 <quorem+0xee>
 800a430:	0030      	movs	r0, r6
 800a432:	9903      	ldr	r1, [sp, #12]
 800a434:	f001 ff0a 	bl	800c24c <__mcmp>
 800a438:	2800      	cmp	r0, #0
 800a43a:	db21      	blt.n	800a480 <quorem+0xdc>
 800a43c:	0030      	movs	r0, r6
 800a43e:	2400      	movs	r4, #0
 800a440:	9b01      	ldr	r3, [sp, #4]
 800a442:	9903      	ldr	r1, [sp, #12]
 800a444:	3301      	adds	r3, #1
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	3014      	adds	r0, #20
 800a44a:	3114      	adds	r1, #20
 800a44c:	6803      	ldr	r3, [r0, #0]
 800a44e:	c920      	ldmia	r1!, {r5}
 800a450:	b29a      	uxth	r2, r3
 800a452:	1914      	adds	r4, r2, r4
 800a454:	b2aa      	uxth	r2, r5
 800a456:	1aa2      	subs	r2, r4, r2
 800a458:	0c1b      	lsrs	r3, r3, #16
 800a45a:	0c2d      	lsrs	r5, r5, #16
 800a45c:	1414      	asrs	r4, r2, #16
 800a45e:	1b5b      	subs	r3, r3, r5
 800a460:	191b      	adds	r3, r3, r4
 800a462:	141c      	asrs	r4, r3, #16
 800a464:	b292      	uxth	r2, r2
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	4313      	orrs	r3, r2
 800a46a:	c008      	stmia	r0!, {r3}
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	428b      	cmp	r3, r1
 800a470:	d2ec      	bcs.n	800a44c <quorem+0xa8>
 800a472:	9b00      	ldr	r3, [sp, #0]
 800a474:	9a02      	ldr	r2, [sp, #8]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	18d3      	adds	r3, r2, r3
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	d015      	beq.n	800a4ac <quorem+0x108>
 800a480:	9801      	ldr	r0, [sp, #4]
 800a482:	b007      	add	sp, #28
 800a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <quorem+0xf6>
 800a48c:	9b00      	ldr	r3, [sp, #0]
 800a48e:	3b01      	subs	r3, #1
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	9b02      	ldr	r3, [sp, #8]
 800a494:	3c04      	subs	r4, #4
 800a496:	42a3      	cmp	r3, r4
 800a498:	d3f5      	bcc.n	800a486 <quorem+0xe2>
 800a49a:	9b00      	ldr	r3, [sp, #0]
 800a49c:	6133      	str	r3, [r6, #16]
 800a49e:	e7c7      	b.n	800a430 <quorem+0x8c>
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	d106      	bne.n	800a4b4 <quorem+0x110>
 800a4a6:	9a00      	ldr	r2, [sp, #0]
 800a4a8:	3a01      	subs	r2, #1
 800a4aa:	9200      	str	r2, [sp, #0]
 800a4ac:	9a02      	ldr	r2, [sp, #8]
 800a4ae:	3b04      	subs	r3, #4
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d3f5      	bcc.n	800a4a0 <quorem+0xfc>
 800a4b4:	9b00      	ldr	r3, [sp, #0]
 800a4b6:	6133      	str	r3, [r6, #16]
 800a4b8:	e7e2      	b.n	800a480 <quorem+0xdc>
	...

0800a4bc <_dtoa_r>:
 800a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4be:	b09d      	sub	sp, #116	; 0x74
 800a4c0:	9202      	str	r2, [sp, #8]
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	9b02      	ldr	r3, [sp, #8]
 800a4c6:	9c03      	ldr	r4, [sp, #12]
 800a4c8:	9308      	str	r3, [sp, #32]
 800a4ca:	9409      	str	r4, [sp, #36]	; 0x24
 800a4cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a4ce:	0007      	movs	r7, r0
 800a4d0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	d10e      	bne.n	800a4f4 <_dtoa_r+0x38>
 800a4d6:	2010      	movs	r0, #16
 800a4d8:	f001 fbc0 	bl	800bc5c <malloc>
 800a4dc:	1e02      	subs	r2, r0, #0
 800a4de:	6278      	str	r0, [r7, #36]	; 0x24
 800a4e0:	d104      	bne.n	800a4ec <_dtoa_r+0x30>
 800a4e2:	21ea      	movs	r1, #234	; 0xea
 800a4e4:	4bc7      	ldr	r3, [pc, #796]	; (800a804 <_dtoa_r+0x348>)
 800a4e6:	48c8      	ldr	r0, [pc, #800]	; (800a808 <_dtoa_r+0x34c>)
 800a4e8:	f002 fd14 	bl	800cf14 <__assert_func>
 800a4ec:	6044      	str	r4, [r0, #4]
 800a4ee:	6084      	str	r4, [r0, #8]
 800a4f0:	6004      	str	r4, [r0, #0]
 800a4f2:	60c4      	str	r4, [r0, #12]
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	6819      	ldr	r1, [r3, #0]
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	d00a      	beq.n	800a512 <_dtoa_r+0x56>
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	2301      	movs	r3, #1
 800a500:	4093      	lsls	r3, r2
 800a502:	604a      	str	r2, [r1, #4]
 800a504:	608b      	str	r3, [r1, #8]
 800a506:	0038      	movs	r0, r7
 800a508:	f001 fc14 	bl	800bd34 <_Bfree>
 800a50c:	2200      	movs	r2, #0
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	da20      	bge.n	800a55a <_dtoa_r+0x9e>
 800a518:	2301      	movs	r3, #1
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	085b      	lsrs	r3, r3, #1
 800a522:	9309      	str	r3, [sp, #36]	; 0x24
 800a524:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a526:	4bb9      	ldr	r3, [pc, #740]	; (800a80c <_dtoa_r+0x350>)
 800a528:	4ab8      	ldr	r2, [pc, #736]	; (800a80c <_dtoa_r+0x350>)
 800a52a:	402b      	ands	r3, r5
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d117      	bne.n	800a560 <_dtoa_r+0xa4>
 800a530:	4bb7      	ldr	r3, [pc, #732]	; (800a810 <_dtoa_r+0x354>)
 800a532:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a534:	0328      	lsls	r0, r5, #12
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	9b02      	ldr	r3, [sp, #8]
 800a53a:	0b00      	lsrs	r0, r0, #12
 800a53c:	4318      	orrs	r0, r3
 800a53e:	d101      	bne.n	800a544 <_dtoa_r+0x88>
 800a540:	f000 fdbf 	bl	800b0c2 <_dtoa_r+0xc06>
 800a544:	48b3      	ldr	r0, [pc, #716]	; (800a814 <_dtoa_r+0x358>)
 800a546:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a548:	9006      	str	r0, [sp, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <_dtoa_r+0x98>
 800a54e:	4bb2      	ldr	r3, [pc, #712]	; (800a818 <_dtoa_r+0x35c>)
 800a550:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	9806      	ldr	r0, [sp, #24]
 800a556:	b01d      	add	sp, #116	; 0x74
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	2300      	movs	r3, #0
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	e7e1      	b.n	800a524 <_dtoa_r+0x68>
 800a560:	9b08      	ldr	r3, [sp, #32]
 800a562:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a564:	9312      	str	r3, [sp, #72]	; 0x48
 800a566:	9413      	str	r4, [sp, #76]	; 0x4c
 800a568:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a56a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	f7f5 ff76 	bl	8000460 <__aeabi_dcmpeq>
 800a574:	1e04      	subs	r4, r0, #0
 800a576:	d009      	beq.n	800a58c <_dtoa_r+0xd0>
 800a578:	2301      	movs	r3, #1
 800a57a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	4ba7      	ldr	r3, [pc, #668]	; (800a81c <_dtoa_r+0x360>)
 800a580:	9306      	str	r3, [sp, #24]
 800a582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0e5      	beq.n	800a554 <_dtoa_r+0x98>
 800a588:	4ba5      	ldr	r3, [pc, #660]	; (800a820 <_dtoa_r+0x364>)
 800a58a:	e7e1      	b.n	800a550 <_dtoa_r+0x94>
 800a58c:	ab1a      	add	r3, sp, #104	; 0x68
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	ab1b      	add	r3, sp, #108	; 0x6c
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	0038      	movs	r0, r7
 800a596:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a59a:	f001 ff7f 	bl	800c49c <__d2b>
 800a59e:	006e      	lsls	r6, r5, #1
 800a5a0:	9005      	str	r0, [sp, #20]
 800a5a2:	0d76      	lsrs	r6, r6, #21
 800a5a4:	d100      	bne.n	800a5a8 <_dtoa_r+0xec>
 800a5a6:	e07c      	b.n	800a6a2 <_dtoa_r+0x1e6>
 800a5a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a5aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a5ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5ae:	4a9d      	ldr	r2, [pc, #628]	; (800a824 <_dtoa_r+0x368>)
 800a5b0:	031b      	lsls	r3, r3, #12
 800a5b2:	0b1b      	lsrs	r3, r3, #12
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	0011      	movs	r1, r2
 800a5b8:	4b9b      	ldr	r3, [pc, #620]	; (800a828 <_dtoa_r+0x36c>)
 800a5ba:	9418      	str	r4, [sp, #96]	; 0x60
 800a5bc:	18f6      	adds	r6, r6, r3
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4b9a      	ldr	r3, [pc, #616]	; (800a82c <_dtoa_r+0x370>)
 800a5c2:	f7f7 f995 	bl	80018f0 <__aeabi_dsub>
 800a5c6:	4a9a      	ldr	r2, [pc, #616]	; (800a830 <_dtoa_r+0x374>)
 800a5c8:	4b9a      	ldr	r3, [pc, #616]	; (800a834 <_dtoa_r+0x378>)
 800a5ca:	f7f6 ff25 	bl	8001418 <__aeabi_dmul>
 800a5ce:	4a9a      	ldr	r2, [pc, #616]	; (800a838 <_dtoa_r+0x37c>)
 800a5d0:	4b9a      	ldr	r3, [pc, #616]	; (800a83c <_dtoa_r+0x380>)
 800a5d2:	f7f5 ffe3 	bl	800059c <__aeabi_dadd>
 800a5d6:	0004      	movs	r4, r0
 800a5d8:	0030      	movs	r0, r6
 800a5da:	000d      	movs	r5, r1
 800a5dc:	f7f7 fd6e 	bl	80020bc <__aeabi_i2d>
 800a5e0:	4a97      	ldr	r2, [pc, #604]	; (800a840 <_dtoa_r+0x384>)
 800a5e2:	4b98      	ldr	r3, [pc, #608]	; (800a844 <_dtoa_r+0x388>)
 800a5e4:	f7f6 ff18 	bl	8001418 <__aeabi_dmul>
 800a5e8:	0002      	movs	r2, r0
 800a5ea:	000b      	movs	r3, r1
 800a5ec:	0020      	movs	r0, r4
 800a5ee:	0029      	movs	r1, r5
 800a5f0:	f7f5 ffd4 	bl	800059c <__aeabi_dadd>
 800a5f4:	0004      	movs	r4, r0
 800a5f6:	000d      	movs	r5, r1
 800a5f8:	f7f7 fd2a 	bl	8002050 <__aeabi_d2iz>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	9002      	str	r0, [sp, #8]
 800a600:	2300      	movs	r3, #0
 800a602:	0020      	movs	r0, r4
 800a604:	0029      	movs	r1, r5
 800a606:	f7f5 ff31 	bl	800046c <__aeabi_dcmplt>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d00b      	beq.n	800a626 <_dtoa_r+0x16a>
 800a60e:	9802      	ldr	r0, [sp, #8]
 800a610:	f7f7 fd54 	bl	80020bc <__aeabi_i2d>
 800a614:	002b      	movs	r3, r5
 800a616:	0022      	movs	r2, r4
 800a618:	f7f5 ff22 	bl	8000460 <__aeabi_dcmpeq>
 800a61c:	4243      	negs	r3, r0
 800a61e:	4158      	adcs	r0, r3
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	1a1b      	subs	r3, r3, r0
 800a624:	9302      	str	r3, [sp, #8]
 800a626:	2301      	movs	r3, #1
 800a628:	9316      	str	r3, [sp, #88]	; 0x58
 800a62a:	9b02      	ldr	r3, [sp, #8]
 800a62c:	2b16      	cmp	r3, #22
 800a62e:	d80f      	bhi.n	800a650 <_dtoa_r+0x194>
 800a630:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a632:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a634:	00da      	lsls	r2, r3, #3
 800a636:	4b84      	ldr	r3, [pc, #528]	; (800a848 <_dtoa_r+0x38c>)
 800a638:	189b      	adds	r3, r3, r2
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f7f5 ff15 	bl	800046c <__aeabi_dcmplt>
 800a642:	2800      	cmp	r0, #0
 800a644:	d049      	beq.n	800a6da <_dtoa_r+0x21e>
 800a646:	9b02      	ldr	r3, [sp, #8]
 800a648:	3b01      	subs	r3, #1
 800a64a:	9302      	str	r3, [sp, #8]
 800a64c:	2300      	movs	r3, #0
 800a64e:	9316      	str	r3, [sp, #88]	; 0x58
 800a650:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a652:	1b9e      	subs	r6, r3, r6
 800a654:	2300      	movs	r3, #0
 800a656:	930a      	str	r3, [sp, #40]	; 0x28
 800a658:	0033      	movs	r3, r6
 800a65a:	3b01      	subs	r3, #1
 800a65c:	930d      	str	r3, [sp, #52]	; 0x34
 800a65e:	d504      	bpl.n	800a66a <_dtoa_r+0x1ae>
 800a660:	2301      	movs	r3, #1
 800a662:	1b9b      	subs	r3, r3, r6
 800a664:	930a      	str	r3, [sp, #40]	; 0x28
 800a666:	2300      	movs	r3, #0
 800a668:	930d      	str	r3, [sp, #52]	; 0x34
 800a66a:	9b02      	ldr	r3, [sp, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	db36      	blt.n	800a6de <_dtoa_r+0x222>
 800a670:	9a02      	ldr	r2, [sp, #8]
 800a672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a674:	4694      	mov	ip, r2
 800a676:	4463      	add	r3, ip
 800a678:	930d      	str	r3, [sp, #52]	; 0x34
 800a67a:	2300      	movs	r3, #0
 800a67c:	9215      	str	r2, [sp, #84]	; 0x54
 800a67e:	930e      	str	r3, [sp, #56]	; 0x38
 800a680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a682:	2401      	movs	r4, #1
 800a684:	2b09      	cmp	r3, #9
 800a686:	d864      	bhi.n	800a752 <_dtoa_r+0x296>
 800a688:	2b05      	cmp	r3, #5
 800a68a:	dd02      	ble.n	800a692 <_dtoa_r+0x1d6>
 800a68c:	2400      	movs	r4, #0
 800a68e:	3b04      	subs	r3, #4
 800a690:	9322      	str	r3, [sp, #136]	; 0x88
 800a692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a694:	1e98      	subs	r0, r3, #2
 800a696:	2803      	cmp	r0, #3
 800a698:	d864      	bhi.n	800a764 <_dtoa_r+0x2a8>
 800a69a:	f7f5 fd47 	bl	800012c <__gnu_thumb1_case_uqi>
 800a69e:	3829      	.short	0x3829
 800a6a0:	5836      	.short	0x5836
 800a6a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a6a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a6a6:	189e      	adds	r6, r3, r2
 800a6a8:	4b68      	ldr	r3, [pc, #416]	; (800a84c <_dtoa_r+0x390>)
 800a6aa:	18f2      	adds	r2, r6, r3
 800a6ac:	2a20      	cmp	r2, #32
 800a6ae:	dd0f      	ble.n	800a6d0 <_dtoa_r+0x214>
 800a6b0:	2340      	movs	r3, #64	; 0x40
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	409d      	lsls	r5, r3
 800a6b6:	4b66      	ldr	r3, [pc, #408]	; (800a850 <_dtoa_r+0x394>)
 800a6b8:	9802      	ldr	r0, [sp, #8]
 800a6ba:	18f3      	adds	r3, r6, r3
 800a6bc:	40d8      	lsrs	r0, r3
 800a6be:	4328      	orrs	r0, r5
 800a6c0:	f7f7 fd2c 	bl	800211c <__aeabi_ui2d>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4c63      	ldr	r4, [pc, #396]	; (800a854 <_dtoa_r+0x398>)
 800a6c8:	3e01      	subs	r6, #1
 800a6ca:	1909      	adds	r1, r1, r4
 800a6cc:	9318      	str	r3, [sp, #96]	; 0x60
 800a6ce:	e776      	b.n	800a5be <_dtoa_r+0x102>
 800a6d0:	2320      	movs	r3, #32
 800a6d2:	9802      	ldr	r0, [sp, #8]
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	4098      	lsls	r0, r3
 800a6d8:	e7f2      	b.n	800a6c0 <_dtoa_r+0x204>
 800a6da:	9016      	str	r0, [sp, #88]	; 0x58
 800a6dc:	e7b8      	b.n	800a650 <_dtoa_r+0x194>
 800a6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e0:	9a02      	ldr	r2, [sp, #8]
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e6:	4253      	negs	r3, r2
 800a6e8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9315      	str	r3, [sp, #84]	; 0x54
 800a6ee:	e7c7      	b.n	800a680 <_dtoa_r+0x1c4>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f8:	9307      	str	r3, [sp, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	dc13      	bgt.n	800a726 <_dtoa_r+0x26a>
 800a6fe:	2301      	movs	r3, #1
 800a700:	001a      	movs	r2, r3
 800a702:	930c      	str	r3, [sp, #48]	; 0x30
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	9223      	str	r2, [sp, #140]	; 0x8c
 800a708:	e00d      	b.n	800a726 <_dtoa_r+0x26a>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e7f1      	b.n	800a6f2 <_dtoa_r+0x236>
 800a70e:	2300      	movs	r3, #0
 800a710:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a712:	930f      	str	r3, [sp, #60]	; 0x3c
 800a714:	4694      	mov	ip, r2
 800a716:	9b02      	ldr	r3, [sp, #8]
 800a718:	4463      	add	r3, ip
 800a71a:	930c      	str	r3, [sp, #48]	; 0x30
 800a71c:	3301      	adds	r3, #1
 800a71e:	9307      	str	r3, [sp, #28]
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc00      	bgt.n	800a726 <_dtoa_r+0x26a>
 800a724:	2301      	movs	r3, #1
 800a726:	2200      	movs	r2, #0
 800a728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a72a:	6042      	str	r2, [r0, #4]
 800a72c:	3204      	adds	r2, #4
 800a72e:	0015      	movs	r5, r2
 800a730:	3514      	adds	r5, #20
 800a732:	6841      	ldr	r1, [r0, #4]
 800a734:	429d      	cmp	r5, r3
 800a736:	d919      	bls.n	800a76c <_dtoa_r+0x2b0>
 800a738:	0038      	movs	r0, r7
 800a73a:	f001 fab7 	bl	800bcac <_Balloc>
 800a73e:	9006      	str	r0, [sp, #24]
 800a740:	2800      	cmp	r0, #0
 800a742:	d117      	bne.n	800a774 <_dtoa_r+0x2b8>
 800a744:	21d5      	movs	r1, #213	; 0xd5
 800a746:	0002      	movs	r2, r0
 800a748:	4b43      	ldr	r3, [pc, #268]	; (800a858 <_dtoa_r+0x39c>)
 800a74a:	0049      	lsls	r1, r1, #1
 800a74c:	e6cb      	b.n	800a4e6 <_dtoa_r+0x2a>
 800a74e:	2301      	movs	r3, #1
 800a750:	e7de      	b.n	800a710 <_dtoa_r+0x254>
 800a752:	2300      	movs	r3, #0
 800a754:	940f      	str	r4, [sp, #60]	; 0x3c
 800a756:	9322      	str	r3, [sp, #136]	; 0x88
 800a758:	3b01      	subs	r3, #1
 800a75a:	930c      	str	r3, [sp, #48]	; 0x30
 800a75c:	9307      	str	r3, [sp, #28]
 800a75e:	2200      	movs	r2, #0
 800a760:	3313      	adds	r3, #19
 800a762:	e7d0      	b.n	800a706 <_dtoa_r+0x24a>
 800a764:	2301      	movs	r3, #1
 800a766:	930f      	str	r3, [sp, #60]	; 0x3c
 800a768:	3b02      	subs	r3, #2
 800a76a:	e7f6      	b.n	800a75a <_dtoa_r+0x29e>
 800a76c:	3101      	adds	r1, #1
 800a76e:	6041      	str	r1, [r0, #4]
 800a770:	0052      	lsls	r2, r2, #1
 800a772:	e7dc      	b.n	800a72e <_dtoa_r+0x272>
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	9a06      	ldr	r2, [sp, #24]
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	9b07      	ldr	r3, [sp, #28]
 800a77c:	2b0e      	cmp	r3, #14
 800a77e:	d900      	bls.n	800a782 <_dtoa_r+0x2c6>
 800a780:	e0eb      	b.n	800a95a <_dtoa_r+0x49e>
 800a782:	2c00      	cmp	r4, #0
 800a784:	d100      	bne.n	800a788 <_dtoa_r+0x2cc>
 800a786:	e0e8      	b.n	800a95a <_dtoa_r+0x49e>
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dd68      	ble.n	800a860 <_dtoa_r+0x3a4>
 800a78e:	001a      	movs	r2, r3
 800a790:	210f      	movs	r1, #15
 800a792:	4b2d      	ldr	r3, [pc, #180]	; (800a848 <_dtoa_r+0x38c>)
 800a794:	400a      	ands	r2, r1
 800a796:	00d2      	lsls	r2, r2, #3
 800a798:	189b      	adds	r3, r3, r2
 800a79a:	681d      	ldr	r5, [r3, #0]
 800a79c:	685e      	ldr	r6, [r3, #4]
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	111c      	asrs	r4, r3, #4
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	9310      	str	r3, [sp, #64]	; 0x40
 800a7a6:	9b02      	ldr	r3, [sp, #8]
 800a7a8:	05db      	lsls	r3, r3, #23
 800a7aa:	d50b      	bpl.n	800a7c4 <_dtoa_r+0x308>
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <_dtoa_r+0x3a0>)
 800a7ae:	400c      	ands	r4, r1
 800a7b0:	6a1a      	ldr	r2, [r3, #32]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7b8:	f7f6 fa2c 	bl	8000c14 <__aeabi_ddiv>
 800a7bc:	2303      	movs	r3, #3
 800a7be:	9008      	str	r0, [sp, #32]
 800a7c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a7c2:	9310      	str	r3, [sp, #64]	; 0x40
 800a7c4:	4b25      	ldr	r3, [pc, #148]	; (800a85c <_dtoa_r+0x3a0>)
 800a7c6:	9314      	str	r3, [sp, #80]	; 0x50
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d108      	bne.n	800a7de <_dtoa_r+0x322>
 800a7cc:	9808      	ldr	r0, [sp, #32]
 800a7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7d0:	002a      	movs	r2, r5
 800a7d2:	0033      	movs	r3, r6
 800a7d4:	f7f6 fa1e 	bl	8000c14 <__aeabi_ddiv>
 800a7d8:	9008      	str	r0, [sp, #32]
 800a7da:	9109      	str	r1, [sp, #36]	; 0x24
 800a7dc:	e05c      	b.n	800a898 <_dtoa_r+0x3dc>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	421c      	tst	r4, r3
 800a7e2:	d00b      	beq.n	800a7fc <_dtoa_r+0x340>
 800a7e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7e6:	0028      	movs	r0, r5
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	9310      	str	r3, [sp, #64]	; 0x40
 800a7ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7ee:	0031      	movs	r1, r6
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f7f6 fe10 	bl	8001418 <__aeabi_dmul>
 800a7f8:	0005      	movs	r5, r0
 800a7fa:	000e      	movs	r6, r1
 800a7fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7fe:	1064      	asrs	r4, r4, #1
 800a800:	3308      	adds	r3, #8
 800a802:	e7e0      	b.n	800a7c6 <_dtoa_r+0x30a>
 800a804:	0800d4a6 	.word	0x0800d4a6
 800a808:	0800d4bd 	.word	0x0800d4bd
 800a80c:	7ff00000 	.word	0x7ff00000
 800a810:	0000270f 	.word	0x0000270f
 800a814:	0800d4a2 	.word	0x0800d4a2
 800a818:	0800d4a5 	.word	0x0800d4a5
 800a81c:	0800d31c 	.word	0x0800d31c
 800a820:	0800d31d 	.word	0x0800d31d
 800a824:	3ff00000 	.word	0x3ff00000
 800a828:	fffffc01 	.word	0xfffffc01
 800a82c:	3ff80000 	.word	0x3ff80000
 800a830:	636f4361 	.word	0x636f4361
 800a834:	3fd287a7 	.word	0x3fd287a7
 800a838:	8b60c8b3 	.word	0x8b60c8b3
 800a83c:	3fc68a28 	.word	0x3fc68a28
 800a840:	509f79fb 	.word	0x509f79fb
 800a844:	3fd34413 	.word	0x3fd34413
 800a848:	0800d690 	.word	0x0800d690
 800a84c:	00000432 	.word	0x00000432
 800a850:	00000412 	.word	0x00000412
 800a854:	fe100000 	.word	0xfe100000
 800a858:	0800d518 	.word	0x0800d518
 800a85c:	0800d668 	.word	0x0800d668
 800a860:	2302      	movs	r3, #2
 800a862:	9310      	str	r3, [sp, #64]	; 0x40
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d016      	beq.n	800a898 <_dtoa_r+0x3dc>
 800a86a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a86c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a86e:	425c      	negs	r4, r3
 800a870:	230f      	movs	r3, #15
 800a872:	4ab6      	ldr	r2, [pc, #728]	; (800ab4c <_dtoa_r+0x690>)
 800a874:	4023      	ands	r3, r4
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	18d3      	adds	r3, r2, r3
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f7f6 fdcb 	bl	8001418 <__aeabi_dmul>
 800a882:	2601      	movs	r6, #1
 800a884:	2300      	movs	r3, #0
 800a886:	9008      	str	r0, [sp, #32]
 800a888:	9109      	str	r1, [sp, #36]	; 0x24
 800a88a:	4db1      	ldr	r5, [pc, #708]	; (800ab50 <_dtoa_r+0x694>)
 800a88c:	1124      	asrs	r4, r4, #4
 800a88e:	2c00      	cmp	r4, #0
 800a890:	d000      	beq.n	800a894 <_dtoa_r+0x3d8>
 800a892:	e094      	b.n	800a9be <_dtoa_r+0x502>
 800a894:	2b00      	cmp	r3, #0
 800a896:	d19f      	bne.n	800a7d8 <_dtoa_r+0x31c>
 800a898:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d100      	bne.n	800a8a0 <_dtoa_r+0x3e4>
 800a89e:	e09b      	b.n	800a9d8 <_dtoa_r+0x51c>
 800a8a0:	9c08      	ldr	r4, [sp, #32]
 800a8a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	0020      	movs	r0, r4
 800a8a8:	0029      	movs	r1, r5
 800a8aa:	4baa      	ldr	r3, [pc, #680]	; (800ab54 <_dtoa_r+0x698>)
 800a8ac:	f7f5 fdde 	bl	800046c <__aeabi_dcmplt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d100      	bne.n	800a8b6 <_dtoa_r+0x3fa>
 800a8b4:	e090      	b.n	800a9d8 <_dtoa_r+0x51c>
 800a8b6:	9b07      	ldr	r3, [sp, #28]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d100      	bne.n	800a8be <_dtoa_r+0x402>
 800a8bc:	e08c      	b.n	800a9d8 <_dtoa_r+0x51c>
 800a8be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dd46      	ble.n	800a952 <_dtoa_r+0x496>
 800a8c4:	9b02      	ldr	r3, [sp, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	0020      	movs	r0, r4
 800a8ca:	0029      	movs	r1, r5
 800a8cc:	1e5e      	subs	r6, r3, #1
 800a8ce:	4ba2      	ldr	r3, [pc, #648]	; (800ab58 <_dtoa_r+0x69c>)
 800a8d0:	f7f6 fda2 	bl	8001418 <__aeabi_dmul>
 800a8d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8d6:	9008      	str	r0, [sp, #32]
 800a8d8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8da:	3301      	adds	r3, #1
 800a8dc:	9310      	str	r3, [sp, #64]	; 0x40
 800a8de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8e2:	9c08      	ldr	r4, [sp, #32]
 800a8e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a8e6:	9314      	str	r3, [sp, #80]	; 0x50
 800a8e8:	f7f7 fbe8 	bl	80020bc <__aeabi_i2d>
 800a8ec:	0022      	movs	r2, r4
 800a8ee:	002b      	movs	r3, r5
 800a8f0:	f7f6 fd92 	bl	8001418 <__aeabi_dmul>
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4b99      	ldr	r3, [pc, #612]	; (800ab5c <_dtoa_r+0x6a0>)
 800a8f8:	f7f5 fe50 	bl	800059c <__aeabi_dadd>
 800a8fc:	9010      	str	r0, [sp, #64]	; 0x40
 800a8fe:	9111      	str	r1, [sp, #68]	; 0x44
 800a900:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a904:	9208      	str	r2, [sp, #32]
 800a906:	9309      	str	r3, [sp, #36]	; 0x24
 800a908:	4a95      	ldr	r2, [pc, #596]	; (800ab60 <_dtoa_r+0x6a4>)
 800a90a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a90c:	4694      	mov	ip, r2
 800a90e:	4463      	add	r3, ip
 800a910:	9317      	str	r3, [sp, #92]	; 0x5c
 800a912:	9309      	str	r3, [sp, #36]	; 0x24
 800a914:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a916:	2b00      	cmp	r3, #0
 800a918:	d161      	bne.n	800a9de <_dtoa_r+0x522>
 800a91a:	2200      	movs	r2, #0
 800a91c:	0020      	movs	r0, r4
 800a91e:	0029      	movs	r1, r5
 800a920:	4b90      	ldr	r3, [pc, #576]	; (800ab64 <_dtoa_r+0x6a8>)
 800a922:	f7f6 ffe5 	bl	80018f0 <__aeabi_dsub>
 800a926:	9a08      	ldr	r2, [sp, #32]
 800a928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a92a:	0004      	movs	r4, r0
 800a92c:	000d      	movs	r5, r1
 800a92e:	f7f5 fdb1 	bl	8000494 <__aeabi_dcmpgt>
 800a932:	2800      	cmp	r0, #0
 800a934:	d000      	beq.n	800a938 <_dtoa_r+0x47c>
 800a936:	e2af      	b.n	800ae98 <_dtoa_r+0x9dc>
 800a938:	488b      	ldr	r0, [pc, #556]	; (800ab68 <_dtoa_r+0x6ac>)
 800a93a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a93c:	4684      	mov	ip, r0
 800a93e:	4461      	add	r1, ip
 800a940:	000b      	movs	r3, r1
 800a942:	0020      	movs	r0, r4
 800a944:	0029      	movs	r1, r5
 800a946:	9a08      	ldr	r2, [sp, #32]
 800a948:	f7f5 fd90 	bl	800046c <__aeabi_dcmplt>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d000      	beq.n	800a952 <_dtoa_r+0x496>
 800a950:	e29f      	b.n	800ae92 <_dtoa_r+0x9d6>
 800a952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a954:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a956:	9308      	str	r3, [sp, #32]
 800a958:	9409      	str	r4, [sp, #36]	; 0x24
 800a95a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da00      	bge.n	800a962 <_dtoa_r+0x4a6>
 800a960:	e172      	b.n	800ac48 <_dtoa_r+0x78c>
 800a962:	9a02      	ldr	r2, [sp, #8]
 800a964:	2a0e      	cmp	r2, #14
 800a966:	dd00      	ble.n	800a96a <_dtoa_r+0x4ae>
 800a968:	e16e      	b.n	800ac48 <_dtoa_r+0x78c>
 800a96a:	4b78      	ldr	r3, [pc, #480]	; (800ab4c <_dtoa_r+0x690>)
 800a96c:	00d2      	lsls	r2, r2, #3
 800a96e:	189b      	adds	r3, r3, r2
 800a970:	685c      	ldr	r4, [r3, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	930a      	str	r3, [sp, #40]	; 0x28
 800a976:	940b      	str	r4, [sp, #44]	; 0x2c
 800a978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	db00      	blt.n	800a980 <_dtoa_r+0x4c4>
 800a97e:	e0f7      	b.n	800ab70 <_dtoa_r+0x6b4>
 800a980:	9b07      	ldr	r3, [sp, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd00      	ble.n	800a988 <_dtoa_r+0x4cc>
 800a986:	e0f3      	b.n	800ab70 <_dtoa_r+0x6b4>
 800a988:	d000      	beq.n	800a98c <_dtoa_r+0x4d0>
 800a98a:	e282      	b.n	800ae92 <_dtoa_r+0x9d6>
 800a98c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a98e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a990:	2200      	movs	r2, #0
 800a992:	4b74      	ldr	r3, [pc, #464]	; (800ab64 <_dtoa_r+0x6a8>)
 800a994:	f7f6 fd40 	bl	8001418 <__aeabi_dmul>
 800a998:	9a08      	ldr	r2, [sp, #32]
 800a99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99c:	f7f5 fd84 	bl	80004a8 <__aeabi_dcmpge>
 800a9a0:	9e07      	ldr	r6, [sp, #28]
 800a9a2:	0035      	movs	r5, r6
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d000      	beq.n	800a9aa <_dtoa_r+0x4ee>
 800a9a8:	e259      	b.n	800ae5e <_dtoa_r+0x9a2>
 800a9aa:	9b06      	ldr	r3, [sp, #24]
 800a9ac:	9a06      	ldr	r2, [sp, #24]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	9308      	str	r3, [sp, #32]
 800a9b2:	2331      	movs	r3, #49	; 0x31
 800a9b4:	7013      	strb	r3, [r2, #0]
 800a9b6:	9b02      	ldr	r3, [sp, #8]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	9302      	str	r3, [sp, #8]
 800a9bc:	e254      	b.n	800ae68 <_dtoa_r+0x9ac>
 800a9be:	4234      	tst	r4, r6
 800a9c0:	d007      	beq.n	800a9d2 <_dtoa_r+0x516>
 800a9c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	9310      	str	r3, [sp, #64]	; 0x40
 800a9c8:	682a      	ldr	r2, [r5, #0]
 800a9ca:	686b      	ldr	r3, [r5, #4]
 800a9cc:	f7f6 fd24 	bl	8001418 <__aeabi_dmul>
 800a9d0:	0033      	movs	r3, r6
 800a9d2:	1064      	asrs	r4, r4, #1
 800a9d4:	3508      	adds	r5, #8
 800a9d6:	e75a      	b.n	800a88e <_dtoa_r+0x3d2>
 800a9d8:	9e02      	ldr	r6, [sp, #8]
 800a9da:	9b07      	ldr	r3, [sp, #28]
 800a9dc:	e780      	b.n	800a8e0 <_dtoa_r+0x424>
 800a9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9e2:	1e5a      	subs	r2, r3, #1
 800a9e4:	4b59      	ldr	r3, [pc, #356]	; (800ab4c <_dtoa_r+0x690>)
 800a9e6:	00d2      	lsls	r2, r2, #3
 800a9e8:	189b      	adds	r3, r3, r2
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	d051      	beq.n	800aa96 <_dtoa_r+0x5da>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	495d      	ldr	r1, [pc, #372]	; (800ab6c <_dtoa_r+0x6b0>)
 800a9f6:	f7f6 f90d 	bl	8000c14 <__aeabi_ddiv>
 800a9fa:	9a08      	ldr	r2, [sp, #32]
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	f7f6 ff77 	bl	80018f0 <__aeabi_dsub>
 800aa02:	9a06      	ldr	r2, [sp, #24]
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	4694      	mov	ip, r2
 800aa08:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa0c:	9010      	str	r0, [sp, #64]	; 0x40
 800aa0e:	9111      	str	r1, [sp, #68]	; 0x44
 800aa10:	4463      	add	r3, ip
 800aa12:	9319      	str	r3, [sp, #100]	; 0x64
 800aa14:	0029      	movs	r1, r5
 800aa16:	0020      	movs	r0, r4
 800aa18:	f7f7 fb1a 	bl	8002050 <__aeabi_d2iz>
 800aa1c:	9014      	str	r0, [sp, #80]	; 0x50
 800aa1e:	f7f7 fb4d 	bl	80020bc <__aeabi_i2d>
 800aa22:	0002      	movs	r2, r0
 800aa24:	000b      	movs	r3, r1
 800aa26:	0020      	movs	r0, r4
 800aa28:	0029      	movs	r1, r5
 800aa2a:	f7f6 ff61 	bl	80018f0 <__aeabi_dsub>
 800aa2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa32:	3301      	adds	r3, #1
 800aa34:	9308      	str	r3, [sp, #32]
 800aa36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa38:	0004      	movs	r4, r0
 800aa3a:	3330      	adds	r3, #48	; 0x30
 800aa3c:	7013      	strb	r3, [r2, #0]
 800aa3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa42:	000d      	movs	r5, r1
 800aa44:	f7f5 fd12 	bl	800046c <__aeabi_dcmplt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d175      	bne.n	800ab38 <_dtoa_r+0x67c>
 800aa4c:	0022      	movs	r2, r4
 800aa4e:	002b      	movs	r3, r5
 800aa50:	2000      	movs	r0, #0
 800aa52:	4940      	ldr	r1, [pc, #256]	; (800ab54 <_dtoa_r+0x698>)
 800aa54:	f7f6 ff4c 	bl	80018f0 <__aeabi_dsub>
 800aa58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa5c:	f7f5 fd06 	bl	800046c <__aeabi_dcmplt>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d000      	beq.n	800aa66 <_dtoa_r+0x5aa>
 800aa64:	e0d2      	b.n	800ac0c <_dtoa_r+0x750>
 800aa66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa68:	9a08      	ldr	r2, [sp, #32]
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d100      	bne.n	800aa70 <_dtoa_r+0x5b4>
 800aa6e:	e770      	b.n	800a952 <_dtoa_r+0x496>
 800aa70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa74:	2200      	movs	r2, #0
 800aa76:	4b38      	ldr	r3, [pc, #224]	; (800ab58 <_dtoa_r+0x69c>)
 800aa78:	f7f6 fcce 	bl	8001418 <__aeabi_dmul>
 800aa7c:	4b36      	ldr	r3, [pc, #216]	; (800ab58 <_dtoa_r+0x69c>)
 800aa7e:	9010      	str	r0, [sp, #64]	; 0x40
 800aa80:	9111      	str	r1, [sp, #68]	; 0x44
 800aa82:	2200      	movs	r2, #0
 800aa84:	0020      	movs	r0, r4
 800aa86:	0029      	movs	r1, r5
 800aa88:	f7f6 fcc6 	bl	8001418 <__aeabi_dmul>
 800aa8c:	9b08      	ldr	r3, [sp, #32]
 800aa8e:	0004      	movs	r4, r0
 800aa90:	000d      	movs	r5, r1
 800aa92:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa94:	e7be      	b.n	800aa14 <_dtoa_r+0x558>
 800aa96:	9808      	ldr	r0, [sp, #32]
 800aa98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa9a:	f7f6 fcbd 	bl	8001418 <__aeabi_dmul>
 800aa9e:	9a06      	ldr	r2, [sp, #24]
 800aaa0:	9b06      	ldr	r3, [sp, #24]
 800aaa2:	4694      	mov	ip, r2
 800aaa4:	9308      	str	r3, [sp, #32]
 800aaa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaa8:	9010      	str	r0, [sp, #64]	; 0x40
 800aaaa:	9111      	str	r1, [sp, #68]	; 0x44
 800aaac:	4463      	add	r3, ip
 800aaae:	9319      	str	r3, [sp, #100]	; 0x64
 800aab0:	0029      	movs	r1, r5
 800aab2:	0020      	movs	r0, r4
 800aab4:	f7f7 facc 	bl	8002050 <__aeabi_d2iz>
 800aab8:	9017      	str	r0, [sp, #92]	; 0x5c
 800aaba:	f7f7 faff 	bl	80020bc <__aeabi_i2d>
 800aabe:	0002      	movs	r2, r0
 800aac0:	000b      	movs	r3, r1
 800aac2:	0020      	movs	r0, r4
 800aac4:	0029      	movs	r1, r5
 800aac6:	f7f6 ff13 	bl	80018f0 <__aeabi_dsub>
 800aaca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aacc:	9a08      	ldr	r2, [sp, #32]
 800aace:	3330      	adds	r3, #48	; 0x30
 800aad0:	7013      	strb	r3, [r2, #0]
 800aad2:	0013      	movs	r3, r2
 800aad4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aad6:	3301      	adds	r3, #1
 800aad8:	0004      	movs	r4, r0
 800aada:	000d      	movs	r5, r1
 800aadc:	9308      	str	r3, [sp, #32]
 800aade:	4293      	cmp	r3, r2
 800aae0:	d12c      	bne.n	800ab3c <_dtoa_r+0x680>
 800aae2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aae6:	9a06      	ldr	r2, [sp, #24]
 800aae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaea:	4694      	mov	ip, r2
 800aaec:	4463      	add	r3, ip
 800aaee:	2200      	movs	r2, #0
 800aaf0:	9308      	str	r3, [sp, #32]
 800aaf2:	4b1e      	ldr	r3, [pc, #120]	; (800ab6c <_dtoa_r+0x6b0>)
 800aaf4:	f7f5 fd52 	bl	800059c <__aeabi_dadd>
 800aaf8:	0002      	movs	r2, r0
 800aafa:	000b      	movs	r3, r1
 800aafc:	0020      	movs	r0, r4
 800aafe:	0029      	movs	r1, r5
 800ab00:	f7f5 fcc8 	bl	8000494 <__aeabi_dcmpgt>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d000      	beq.n	800ab0a <_dtoa_r+0x64e>
 800ab08:	e080      	b.n	800ac0c <_dtoa_r+0x750>
 800ab0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab0e:	2000      	movs	r0, #0
 800ab10:	4916      	ldr	r1, [pc, #88]	; (800ab6c <_dtoa_r+0x6b0>)
 800ab12:	f7f6 feed 	bl	80018f0 <__aeabi_dsub>
 800ab16:	0002      	movs	r2, r0
 800ab18:	000b      	movs	r3, r1
 800ab1a:	0020      	movs	r0, r4
 800ab1c:	0029      	movs	r1, r5
 800ab1e:	f7f5 fca5 	bl	800046c <__aeabi_dcmplt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d100      	bne.n	800ab28 <_dtoa_r+0x66c>
 800ab26:	e714      	b.n	800a952 <_dtoa_r+0x496>
 800ab28:	9b08      	ldr	r3, [sp, #32]
 800ab2a:	001a      	movs	r2, r3
 800ab2c:	3a01      	subs	r2, #1
 800ab2e:	9208      	str	r2, [sp, #32]
 800ab30:	7812      	ldrb	r2, [r2, #0]
 800ab32:	2a30      	cmp	r2, #48	; 0x30
 800ab34:	d0f8      	beq.n	800ab28 <_dtoa_r+0x66c>
 800ab36:	9308      	str	r3, [sp, #32]
 800ab38:	9602      	str	r6, [sp, #8]
 800ab3a:	e055      	b.n	800abe8 <_dtoa_r+0x72c>
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <_dtoa_r+0x69c>)
 800ab40:	f7f6 fc6a 	bl	8001418 <__aeabi_dmul>
 800ab44:	0004      	movs	r4, r0
 800ab46:	000d      	movs	r5, r1
 800ab48:	e7b2      	b.n	800aab0 <_dtoa_r+0x5f4>
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	0800d690 	.word	0x0800d690
 800ab50:	0800d668 	.word	0x0800d668
 800ab54:	3ff00000 	.word	0x3ff00000
 800ab58:	40240000 	.word	0x40240000
 800ab5c:	401c0000 	.word	0x401c0000
 800ab60:	fcc00000 	.word	0xfcc00000
 800ab64:	40140000 	.word	0x40140000
 800ab68:	7cc00000 	.word	0x7cc00000
 800ab6c:	3fe00000 	.word	0x3fe00000
 800ab70:	9b07      	ldr	r3, [sp, #28]
 800ab72:	9e06      	ldr	r6, [sp, #24]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	199b      	adds	r3, r3, r6
 800ab78:	930c      	str	r3, [sp, #48]	; 0x30
 800ab7a:	9c08      	ldr	r4, [sp, #32]
 800ab7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab82:	0020      	movs	r0, r4
 800ab84:	0029      	movs	r1, r5
 800ab86:	f7f6 f845 	bl	8000c14 <__aeabi_ddiv>
 800ab8a:	f7f7 fa61 	bl	8002050 <__aeabi_d2iz>
 800ab8e:	9007      	str	r0, [sp, #28]
 800ab90:	f7f7 fa94 	bl	80020bc <__aeabi_i2d>
 800ab94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab98:	f7f6 fc3e 	bl	8001418 <__aeabi_dmul>
 800ab9c:	0002      	movs	r2, r0
 800ab9e:	000b      	movs	r3, r1
 800aba0:	0020      	movs	r0, r4
 800aba2:	0029      	movs	r1, r5
 800aba4:	f7f6 fea4 	bl	80018f0 <__aeabi_dsub>
 800aba8:	0033      	movs	r3, r6
 800abaa:	9a07      	ldr	r2, [sp, #28]
 800abac:	3601      	adds	r6, #1
 800abae:	3230      	adds	r2, #48	; 0x30
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abb4:	9608      	str	r6, [sp, #32]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d139      	bne.n	800ac2e <_dtoa_r+0x772>
 800abba:	0002      	movs	r2, r0
 800abbc:	000b      	movs	r3, r1
 800abbe:	f7f5 fced 	bl	800059c <__aeabi_dadd>
 800abc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc6:	0004      	movs	r4, r0
 800abc8:	000d      	movs	r5, r1
 800abca:	f7f5 fc63 	bl	8000494 <__aeabi_dcmpgt>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d11b      	bne.n	800ac0a <_dtoa_r+0x74e>
 800abd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd6:	0020      	movs	r0, r4
 800abd8:	0029      	movs	r1, r5
 800abda:	f7f5 fc41 	bl	8000460 <__aeabi_dcmpeq>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d002      	beq.n	800abe8 <_dtoa_r+0x72c>
 800abe2:	9b07      	ldr	r3, [sp, #28]
 800abe4:	07db      	lsls	r3, r3, #31
 800abe6:	d410      	bmi.n	800ac0a <_dtoa_r+0x74e>
 800abe8:	0038      	movs	r0, r7
 800abea:	9905      	ldr	r1, [sp, #20]
 800abec:	f001 f8a2 	bl	800bd34 <_Bfree>
 800abf0:	2300      	movs	r3, #0
 800abf2:	9a08      	ldr	r2, [sp, #32]
 800abf4:	9802      	ldr	r0, [sp, #8]
 800abf6:	7013      	strb	r3, [r2, #0]
 800abf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800abfa:	3001      	adds	r0, #1
 800abfc:	6018      	str	r0, [r3, #0]
 800abfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d100      	bne.n	800ac06 <_dtoa_r+0x74a>
 800ac04:	e4a6      	b.n	800a554 <_dtoa_r+0x98>
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	e4a4      	b.n	800a554 <_dtoa_r+0x98>
 800ac0a:	9e02      	ldr	r6, [sp, #8]
 800ac0c:	9b08      	ldr	r3, [sp, #32]
 800ac0e:	9308      	str	r3, [sp, #32]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	781a      	ldrb	r2, [r3, #0]
 800ac14:	2a39      	cmp	r2, #57	; 0x39
 800ac16:	d106      	bne.n	800ac26 <_dtoa_r+0x76a>
 800ac18:	9a06      	ldr	r2, [sp, #24]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d1f7      	bne.n	800ac0e <_dtoa_r+0x752>
 800ac1e:	2230      	movs	r2, #48	; 0x30
 800ac20:	9906      	ldr	r1, [sp, #24]
 800ac22:	3601      	adds	r6, #1
 800ac24:	700a      	strb	r2, [r1, #0]
 800ac26:	781a      	ldrb	r2, [r3, #0]
 800ac28:	3201      	adds	r2, #1
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	e784      	b.n	800ab38 <_dtoa_r+0x67c>
 800ac2e:	2200      	movs	r2, #0
 800ac30:	4baa      	ldr	r3, [pc, #680]	; (800aedc <_dtoa_r+0xa20>)
 800ac32:	f7f6 fbf1 	bl	8001418 <__aeabi_dmul>
 800ac36:	2200      	movs	r2, #0
 800ac38:	2300      	movs	r3, #0
 800ac3a:	0004      	movs	r4, r0
 800ac3c:	000d      	movs	r5, r1
 800ac3e:	f7f5 fc0f 	bl	8000460 <__aeabi_dcmpeq>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d09b      	beq.n	800ab7e <_dtoa_r+0x6c2>
 800ac46:	e7cf      	b.n	800abe8 <_dtoa_r+0x72c>
 800ac48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac4a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ac4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac4e:	2d00      	cmp	r5, #0
 800ac50:	d012      	beq.n	800ac78 <_dtoa_r+0x7bc>
 800ac52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac54:	2a01      	cmp	r2, #1
 800ac56:	dc66      	bgt.n	800ad26 <_dtoa_r+0x86a>
 800ac58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac5a:	2a00      	cmp	r2, #0
 800ac5c:	d05d      	beq.n	800ad1a <_dtoa_r+0x85e>
 800ac5e:	4aa0      	ldr	r2, [pc, #640]	; (800aee0 <_dtoa_r+0xa24>)
 800ac60:	189b      	adds	r3, r3, r2
 800ac62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac64:	2101      	movs	r1, #1
 800ac66:	18d2      	adds	r2, r2, r3
 800ac68:	920a      	str	r2, [sp, #40]	; 0x28
 800ac6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	18d3      	adds	r3, r2, r3
 800ac70:	930d      	str	r3, [sp, #52]	; 0x34
 800ac72:	f001 f95b 	bl	800bf2c <__i2b>
 800ac76:	0005      	movs	r5, r0
 800ac78:	2c00      	cmp	r4, #0
 800ac7a:	dd0e      	ble.n	800ac9a <_dtoa_r+0x7de>
 800ac7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd0b      	ble.n	800ac9a <_dtoa_r+0x7de>
 800ac82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac84:	0023      	movs	r3, r4
 800ac86:	4294      	cmp	r4, r2
 800ac88:	dd00      	ble.n	800ac8c <_dtoa_r+0x7d0>
 800ac8a:	0013      	movs	r3, r2
 800ac8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac8e:	1ae4      	subs	r4, r4, r3
 800ac90:	1ad2      	subs	r2, r2, r3
 800ac92:	920a      	str	r2, [sp, #40]	; 0x28
 800ac94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	930d      	str	r3, [sp, #52]	; 0x34
 800ac9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d01f      	beq.n	800ace0 <_dtoa_r+0x824>
 800aca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d054      	beq.n	800ad50 <_dtoa_r+0x894>
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	dd11      	ble.n	800acce <_dtoa_r+0x812>
 800acaa:	0029      	movs	r1, r5
 800acac:	0032      	movs	r2, r6
 800acae:	0038      	movs	r0, r7
 800acb0:	f001 fa02 	bl	800c0b8 <__pow5mult>
 800acb4:	9a05      	ldr	r2, [sp, #20]
 800acb6:	0001      	movs	r1, r0
 800acb8:	0005      	movs	r5, r0
 800acba:	0038      	movs	r0, r7
 800acbc:	f001 f94c 	bl	800bf58 <__multiply>
 800acc0:	9905      	ldr	r1, [sp, #20]
 800acc2:	9014      	str	r0, [sp, #80]	; 0x50
 800acc4:	0038      	movs	r0, r7
 800acc6:	f001 f835 	bl	800bd34 <_Bfree>
 800acca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800accc:	9305      	str	r3, [sp, #20]
 800acce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acd0:	1b9a      	subs	r2, r3, r6
 800acd2:	42b3      	cmp	r3, r6
 800acd4:	d004      	beq.n	800ace0 <_dtoa_r+0x824>
 800acd6:	0038      	movs	r0, r7
 800acd8:	9905      	ldr	r1, [sp, #20]
 800acda:	f001 f9ed 	bl	800c0b8 <__pow5mult>
 800acde:	9005      	str	r0, [sp, #20]
 800ace0:	2101      	movs	r1, #1
 800ace2:	0038      	movs	r0, r7
 800ace4:	f001 f922 	bl	800bf2c <__i2b>
 800ace8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acea:	0006      	movs	r6, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	dd31      	ble.n	800ad54 <_dtoa_r+0x898>
 800acf0:	001a      	movs	r2, r3
 800acf2:	0001      	movs	r1, r0
 800acf4:	0038      	movs	r0, r7
 800acf6:	f001 f9df 	bl	800c0b8 <__pow5mult>
 800acfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acfc:	0006      	movs	r6, r0
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	dd2d      	ble.n	800ad5e <_dtoa_r+0x8a2>
 800ad02:	2300      	movs	r3, #0
 800ad04:	930e      	str	r3, [sp, #56]	; 0x38
 800ad06:	6933      	ldr	r3, [r6, #16]
 800ad08:	3303      	adds	r3, #3
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	18f3      	adds	r3, r6, r3
 800ad0e:	6858      	ldr	r0, [r3, #4]
 800ad10:	f001 f8c4 	bl	800be9c <__hi0bits>
 800ad14:	2320      	movs	r3, #32
 800ad16:	1a18      	subs	r0, r3, r0
 800ad18:	e039      	b.n	800ad8e <_dtoa_r+0x8d2>
 800ad1a:	2336      	movs	r3, #54	; 0x36
 800ad1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad1e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ad20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad22:	1a9b      	subs	r3, r3, r2
 800ad24:	e79d      	b.n	800ac62 <_dtoa_r+0x7a6>
 800ad26:	9b07      	ldr	r3, [sp, #28]
 800ad28:	1e5e      	subs	r6, r3, #1
 800ad2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad2c:	42b3      	cmp	r3, r6
 800ad2e:	db07      	blt.n	800ad40 <_dtoa_r+0x884>
 800ad30:	1b9e      	subs	r6, r3, r6
 800ad32:	9b07      	ldr	r3, [sp, #28]
 800ad34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	da93      	bge.n	800ac62 <_dtoa_r+0x7a6>
 800ad3a:	1ae4      	subs	r4, r4, r3
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e790      	b.n	800ac62 <_dtoa_r+0x7a6>
 800ad40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad44:	1af3      	subs	r3, r6, r3
 800ad46:	18d3      	adds	r3, r2, r3
 800ad48:	960e      	str	r6, [sp, #56]	; 0x38
 800ad4a:	9315      	str	r3, [sp, #84]	; 0x54
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	e7f0      	b.n	800ad32 <_dtoa_r+0x876>
 800ad50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad52:	e7c0      	b.n	800acd6 <_dtoa_r+0x81a>
 800ad54:	2300      	movs	r3, #0
 800ad56:	930e      	str	r3, [sp, #56]	; 0x38
 800ad58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	dc13      	bgt.n	800ad86 <_dtoa_r+0x8ca>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	930e      	str	r3, [sp, #56]	; 0x38
 800ad62:	9b08      	ldr	r3, [sp, #32]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10e      	bne.n	800ad86 <_dtoa_r+0x8ca>
 800ad68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6a:	031b      	lsls	r3, r3, #12
 800ad6c:	d10b      	bne.n	800ad86 <_dtoa_r+0x8ca>
 800ad6e:	4b5d      	ldr	r3, [pc, #372]	; (800aee4 <_dtoa_r+0xa28>)
 800ad70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad72:	4213      	tst	r3, r2
 800ad74:	d007      	beq.n	800ad86 <_dtoa_r+0x8ca>
 800ad76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad78:	3301      	adds	r3, #1
 800ad7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7e:	3301      	adds	r3, #1
 800ad80:	930d      	str	r3, [sp, #52]	; 0x34
 800ad82:	2301      	movs	r3, #1
 800ad84:	930e      	str	r3, [sp, #56]	; 0x38
 800ad86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad88:	2001      	movs	r0, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1bb      	bne.n	800ad06 <_dtoa_r+0x84a>
 800ad8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad90:	221f      	movs	r2, #31
 800ad92:	1818      	adds	r0, r3, r0
 800ad94:	0003      	movs	r3, r0
 800ad96:	4013      	ands	r3, r2
 800ad98:	4210      	tst	r0, r2
 800ad9a:	d046      	beq.n	800ae2a <_dtoa_r+0x96e>
 800ad9c:	3201      	adds	r2, #1
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	2a04      	cmp	r2, #4
 800ada2:	dd3f      	ble.n	800ae24 <_dtoa_r+0x968>
 800ada4:	221c      	movs	r2, #28
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adaa:	18e4      	adds	r4, r4, r3
 800adac:	18d2      	adds	r2, r2, r3
 800adae:	920a      	str	r2, [sp, #40]	; 0x28
 800adb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adb2:	18d3      	adds	r3, r2, r3
 800adb4:	930d      	str	r3, [sp, #52]	; 0x34
 800adb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dd05      	ble.n	800adc8 <_dtoa_r+0x90c>
 800adbc:	001a      	movs	r2, r3
 800adbe:	0038      	movs	r0, r7
 800adc0:	9905      	ldr	r1, [sp, #20]
 800adc2:	f001 f9d5 	bl	800c170 <__lshift>
 800adc6:	9005      	str	r0, [sp, #20]
 800adc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd05      	ble.n	800adda <_dtoa_r+0x91e>
 800adce:	0031      	movs	r1, r6
 800add0:	001a      	movs	r2, r3
 800add2:	0038      	movs	r0, r7
 800add4:	f001 f9cc 	bl	800c170 <__lshift>
 800add8:	0006      	movs	r6, r0
 800adda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800addc:	2b00      	cmp	r3, #0
 800adde:	d026      	beq.n	800ae2e <_dtoa_r+0x972>
 800ade0:	0031      	movs	r1, r6
 800ade2:	9805      	ldr	r0, [sp, #20]
 800ade4:	f001 fa32 	bl	800c24c <__mcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	da20      	bge.n	800ae2e <_dtoa_r+0x972>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	220a      	movs	r2, #10
 800adf0:	3b01      	subs	r3, #1
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	0038      	movs	r0, r7
 800adf6:	2300      	movs	r3, #0
 800adf8:	9905      	ldr	r1, [sp, #20]
 800adfa:	f000 ffbf 	bl	800bd7c <__multadd>
 800adfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae00:	9005      	str	r0, [sp, #20]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d100      	bne.n	800ae08 <_dtoa_r+0x94c>
 800ae06:	e166      	b.n	800b0d6 <_dtoa_r+0xc1a>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	0029      	movs	r1, r5
 800ae0c:	220a      	movs	r2, #10
 800ae0e:	0038      	movs	r0, r7
 800ae10:	f000 ffb4 	bl	800bd7c <__multadd>
 800ae14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae16:	0005      	movs	r5, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dc47      	bgt.n	800aeac <_dtoa_r+0x9f0>
 800ae1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	dc0d      	bgt.n	800ae3e <_dtoa_r+0x982>
 800ae22:	e043      	b.n	800aeac <_dtoa_r+0x9f0>
 800ae24:	2a04      	cmp	r2, #4
 800ae26:	d0c6      	beq.n	800adb6 <_dtoa_r+0x8fa>
 800ae28:	0013      	movs	r3, r2
 800ae2a:	331c      	adds	r3, #28
 800ae2c:	e7bc      	b.n	800ada8 <_dtoa_r+0x8ec>
 800ae2e:	9b07      	ldr	r3, [sp, #28]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	dc35      	bgt.n	800aea0 <_dtoa_r+0x9e4>
 800ae34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	dd32      	ble.n	800aea0 <_dtoa_r+0x9e4>
 800ae3a:	9b07      	ldr	r3, [sp, #28]
 800ae3c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10c      	bne.n	800ae5e <_dtoa_r+0x9a2>
 800ae44:	0031      	movs	r1, r6
 800ae46:	2205      	movs	r2, #5
 800ae48:	0038      	movs	r0, r7
 800ae4a:	f000 ff97 	bl	800bd7c <__multadd>
 800ae4e:	0006      	movs	r6, r0
 800ae50:	0001      	movs	r1, r0
 800ae52:	9805      	ldr	r0, [sp, #20]
 800ae54:	f001 f9fa 	bl	800c24c <__mcmp>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	dd00      	ble.n	800ae5e <_dtoa_r+0x9a2>
 800ae5c:	e5a5      	b.n	800a9aa <_dtoa_r+0x4ee>
 800ae5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae60:	43db      	mvns	r3, r3
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	9b06      	ldr	r3, [sp, #24]
 800ae66:	9308      	str	r3, [sp, #32]
 800ae68:	2400      	movs	r4, #0
 800ae6a:	0031      	movs	r1, r6
 800ae6c:	0038      	movs	r0, r7
 800ae6e:	f000 ff61 	bl	800bd34 <_Bfree>
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	d100      	bne.n	800ae78 <_dtoa_r+0x9bc>
 800ae76:	e6b7      	b.n	800abe8 <_dtoa_r+0x72c>
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d005      	beq.n	800ae88 <_dtoa_r+0x9cc>
 800ae7c:	42ac      	cmp	r4, r5
 800ae7e:	d003      	beq.n	800ae88 <_dtoa_r+0x9cc>
 800ae80:	0021      	movs	r1, r4
 800ae82:	0038      	movs	r0, r7
 800ae84:	f000 ff56 	bl	800bd34 <_Bfree>
 800ae88:	0029      	movs	r1, r5
 800ae8a:	0038      	movs	r0, r7
 800ae8c:	f000 ff52 	bl	800bd34 <_Bfree>
 800ae90:	e6aa      	b.n	800abe8 <_dtoa_r+0x72c>
 800ae92:	2600      	movs	r6, #0
 800ae94:	0035      	movs	r5, r6
 800ae96:	e7e2      	b.n	800ae5e <_dtoa_r+0x9a2>
 800ae98:	9602      	str	r6, [sp, #8]
 800ae9a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ae9c:	0035      	movs	r5, r6
 800ae9e:	e584      	b.n	800a9aa <_dtoa_r+0x4ee>
 800aea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d100      	bne.n	800aea8 <_dtoa_r+0x9ec>
 800aea6:	e0ce      	b.n	800b046 <_dtoa_r+0xb8a>
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	930c      	str	r3, [sp, #48]	; 0x30
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	dd05      	ble.n	800aebc <_dtoa_r+0xa00>
 800aeb0:	0029      	movs	r1, r5
 800aeb2:	0022      	movs	r2, r4
 800aeb4:	0038      	movs	r0, r7
 800aeb6:	f001 f95b 	bl	800c170 <__lshift>
 800aeba:	0005      	movs	r5, r0
 800aebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aebe:	0028      	movs	r0, r5
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d022      	beq.n	800af0a <_dtoa_r+0xa4e>
 800aec4:	0038      	movs	r0, r7
 800aec6:	6869      	ldr	r1, [r5, #4]
 800aec8:	f000 fef0 	bl	800bcac <_Balloc>
 800aecc:	1e04      	subs	r4, r0, #0
 800aece:	d10f      	bne.n	800aef0 <_dtoa_r+0xa34>
 800aed0:	0002      	movs	r2, r0
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <_dtoa_r+0xa2c>)
 800aed4:	4905      	ldr	r1, [pc, #20]	; (800aeec <_dtoa_r+0xa30>)
 800aed6:	f7ff fb06 	bl	800a4e6 <_dtoa_r+0x2a>
 800aeda:	46c0      	nop			; (mov r8, r8)
 800aedc:	40240000 	.word	0x40240000
 800aee0:	00000433 	.word	0x00000433
 800aee4:	7ff00000 	.word	0x7ff00000
 800aee8:	0800d518 	.word	0x0800d518
 800aeec:	000002ea 	.word	0x000002ea
 800aef0:	0029      	movs	r1, r5
 800aef2:	692b      	ldr	r3, [r5, #16]
 800aef4:	310c      	adds	r1, #12
 800aef6:	1c9a      	adds	r2, r3, #2
 800aef8:	0092      	lsls	r2, r2, #2
 800aefa:	300c      	adds	r0, #12
 800aefc:	f7fd fb7c 	bl	80085f8 <memcpy>
 800af00:	2201      	movs	r2, #1
 800af02:	0021      	movs	r1, r4
 800af04:	0038      	movs	r0, r7
 800af06:	f001 f933 	bl	800c170 <__lshift>
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af0e:	930a      	str	r3, [sp, #40]	; 0x28
 800af10:	3b01      	subs	r3, #1
 800af12:	189b      	adds	r3, r3, r2
 800af14:	2201      	movs	r2, #1
 800af16:	002c      	movs	r4, r5
 800af18:	0005      	movs	r5, r0
 800af1a:	9314      	str	r3, [sp, #80]	; 0x50
 800af1c:	9b08      	ldr	r3, [sp, #32]
 800af1e:	4013      	ands	r3, r2
 800af20:	930f      	str	r3, [sp, #60]	; 0x3c
 800af22:	0031      	movs	r1, r6
 800af24:	9805      	ldr	r0, [sp, #20]
 800af26:	f7ff fa3d 	bl	800a3a4 <quorem>
 800af2a:	0003      	movs	r3, r0
 800af2c:	0021      	movs	r1, r4
 800af2e:	3330      	adds	r3, #48	; 0x30
 800af30:	900d      	str	r0, [sp, #52]	; 0x34
 800af32:	9805      	ldr	r0, [sp, #20]
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f001 f989 	bl	800c24c <__mcmp>
 800af3a:	002a      	movs	r2, r5
 800af3c:	900e      	str	r0, [sp, #56]	; 0x38
 800af3e:	0031      	movs	r1, r6
 800af40:	0038      	movs	r0, r7
 800af42:	f001 f99f 	bl	800c284 <__mdiff>
 800af46:	68c3      	ldr	r3, [r0, #12]
 800af48:	9008      	str	r0, [sp, #32]
 800af4a:	9310      	str	r3, [sp, #64]	; 0x40
 800af4c:	2301      	movs	r3, #1
 800af4e:	930c      	str	r3, [sp, #48]	; 0x30
 800af50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	d104      	bne.n	800af60 <_dtoa_r+0xaa4>
 800af56:	0001      	movs	r1, r0
 800af58:	9805      	ldr	r0, [sp, #20]
 800af5a:	f001 f977 	bl	800c24c <__mcmp>
 800af5e:	900c      	str	r0, [sp, #48]	; 0x30
 800af60:	0038      	movs	r0, r7
 800af62:	9908      	ldr	r1, [sp, #32]
 800af64:	f000 fee6 	bl	800bd34 <_Bfree>
 800af68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af6c:	3301      	adds	r3, #1
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af72:	4313      	orrs	r3, r2
 800af74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af76:	4313      	orrs	r3, r2
 800af78:	d10c      	bne.n	800af94 <_dtoa_r+0xad8>
 800af7a:	9b07      	ldr	r3, [sp, #28]
 800af7c:	2b39      	cmp	r3, #57	; 0x39
 800af7e:	d026      	beq.n	800afce <_dtoa_r+0xb12>
 800af80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af82:	2b00      	cmp	r3, #0
 800af84:	dd02      	ble.n	800af8c <_dtoa_r+0xad0>
 800af86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af88:	3331      	adds	r3, #49	; 0x31
 800af8a:	9307      	str	r3, [sp, #28]
 800af8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8e:	9a07      	ldr	r2, [sp, #28]
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	e76a      	b.n	800ae6a <_dtoa_r+0x9ae>
 800af94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af96:	2b00      	cmp	r3, #0
 800af98:	db04      	blt.n	800afa4 <_dtoa_r+0xae8>
 800af9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af9c:	4313      	orrs	r3, r2
 800af9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afa0:	4313      	orrs	r3, r2
 800afa2:	d11f      	bne.n	800afe4 <_dtoa_r+0xb28>
 800afa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	ddf0      	ble.n	800af8c <_dtoa_r+0xad0>
 800afaa:	9905      	ldr	r1, [sp, #20]
 800afac:	2201      	movs	r2, #1
 800afae:	0038      	movs	r0, r7
 800afb0:	f001 f8de 	bl	800c170 <__lshift>
 800afb4:	0031      	movs	r1, r6
 800afb6:	9005      	str	r0, [sp, #20]
 800afb8:	f001 f948 	bl	800c24c <__mcmp>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	dc03      	bgt.n	800afc8 <_dtoa_r+0xb0c>
 800afc0:	d1e4      	bne.n	800af8c <_dtoa_r+0xad0>
 800afc2:	9b07      	ldr	r3, [sp, #28]
 800afc4:	07db      	lsls	r3, r3, #31
 800afc6:	d5e1      	bpl.n	800af8c <_dtoa_r+0xad0>
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	2b39      	cmp	r3, #57	; 0x39
 800afcc:	d1db      	bne.n	800af86 <_dtoa_r+0xaca>
 800afce:	2339      	movs	r3, #57	; 0x39
 800afd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afd2:	7013      	strb	r3, [r2, #0]
 800afd4:	9b08      	ldr	r3, [sp, #32]
 800afd6:	9308      	str	r3, [sp, #32]
 800afd8:	3b01      	subs	r3, #1
 800afda:	781a      	ldrb	r2, [r3, #0]
 800afdc:	2a39      	cmp	r2, #57	; 0x39
 800afde:	d068      	beq.n	800b0b2 <_dtoa_r+0xbf6>
 800afe0:	3201      	adds	r2, #1
 800afe2:	e7d5      	b.n	800af90 <_dtoa_r+0xad4>
 800afe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dd07      	ble.n	800affa <_dtoa_r+0xb3e>
 800afea:	9b07      	ldr	r3, [sp, #28]
 800afec:	2b39      	cmp	r3, #57	; 0x39
 800afee:	d0ee      	beq.n	800afce <_dtoa_r+0xb12>
 800aff0:	9b07      	ldr	r3, [sp, #28]
 800aff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff4:	3301      	adds	r3, #1
 800aff6:	7013      	strb	r3, [r2, #0]
 800aff8:	e737      	b.n	800ae6a <_dtoa_r+0x9ae>
 800affa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800affc:	9a07      	ldr	r2, [sp, #28]
 800affe:	701a      	strb	r2, [r3, #0]
 800b000:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b004:	4293      	cmp	r3, r2
 800b006:	d03e      	beq.n	800b086 <_dtoa_r+0xbca>
 800b008:	2300      	movs	r3, #0
 800b00a:	220a      	movs	r2, #10
 800b00c:	9905      	ldr	r1, [sp, #20]
 800b00e:	0038      	movs	r0, r7
 800b010:	f000 feb4 	bl	800bd7c <__multadd>
 800b014:	2300      	movs	r3, #0
 800b016:	9005      	str	r0, [sp, #20]
 800b018:	220a      	movs	r2, #10
 800b01a:	0021      	movs	r1, r4
 800b01c:	0038      	movs	r0, r7
 800b01e:	42ac      	cmp	r4, r5
 800b020:	d106      	bne.n	800b030 <_dtoa_r+0xb74>
 800b022:	f000 feab 	bl	800bd7c <__multadd>
 800b026:	0004      	movs	r4, r0
 800b028:	0005      	movs	r5, r0
 800b02a:	9b08      	ldr	r3, [sp, #32]
 800b02c:	930a      	str	r3, [sp, #40]	; 0x28
 800b02e:	e778      	b.n	800af22 <_dtoa_r+0xa66>
 800b030:	f000 fea4 	bl	800bd7c <__multadd>
 800b034:	0029      	movs	r1, r5
 800b036:	0004      	movs	r4, r0
 800b038:	2300      	movs	r3, #0
 800b03a:	220a      	movs	r2, #10
 800b03c:	0038      	movs	r0, r7
 800b03e:	f000 fe9d 	bl	800bd7c <__multadd>
 800b042:	0005      	movs	r5, r0
 800b044:	e7f1      	b.n	800b02a <_dtoa_r+0xb6e>
 800b046:	9b07      	ldr	r3, [sp, #28]
 800b048:	930c      	str	r3, [sp, #48]	; 0x30
 800b04a:	2400      	movs	r4, #0
 800b04c:	0031      	movs	r1, r6
 800b04e:	9805      	ldr	r0, [sp, #20]
 800b050:	f7ff f9a8 	bl	800a3a4 <quorem>
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	3030      	adds	r0, #48	; 0x30
 800b058:	5518      	strb	r0, [r3, r4]
 800b05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b05c:	3401      	adds	r4, #1
 800b05e:	9007      	str	r0, [sp, #28]
 800b060:	42a3      	cmp	r3, r4
 800b062:	dd07      	ble.n	800b074 <_dtoa_r+0xbb8>
 800b064:	2300      	movs	r3, #0
 800b066:	220a      	movs	r2, #10
 800b068:	0038      	movs	r0, r7
 800b06a:	9905      	ldr	r1, [sp, #20]
 800b06c:	f000 fe86 	bl	800bd7c <__multadd>
 800b070:	9005      	str	r0, [sp, #20]
 800b072:	e7eb      	b.n	800b04c <_dtoa_r+0xb90>
 800b074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b076:	2001      	movs	r0, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dd00      	ble.n	800b07e <_dtoa_r+0xbc2>
 800b07c:	0018      	movs	r0, r3
 800b07e:	2400      	movs	r4, #0
 800b080:	9b06      	ldr	r3, [sp, #24]
 800b082:	181b      	adds	r3, r3, r0
 800b084:	9308      	str	r3, [sp, #32]
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	2201      	movs	r2, #1
 800b08a:	0038      	movs	r0, r7
 800b08c:	f001 f870 	bl	800c170 <__lshift>
 800b090:	0031      	movs	r1, r6
 800b092:	9005      	str	r0, [sp, #20]
 800b094:	f001 f8da 	bl	800c24c <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	dc9b      	bgt.n	800afd4 <_dtoa_r+0xb18>
 800b09c:	d102      	bne.n	800b0a4 <_dtoa_r+0xbe8>
 800b09e:	9b07      	ldr	r3, [sp, #28]
 800b0a0:	07db      	lsls	r3, r3, #31
 800b0a2:	d497      	bmi.n	800afd4 <_dtoa_r+0xb18>
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	9308      	str	r3, [sp, #32]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	781a      	ldrb	r2, [r3, #0]
 800b0ac:	2a30      	cmp	r2, #48	; 0x30
 800b0ae:	d0fa      	beq.n	800b0a6 <_dtoa_r+0xbea>
 800b0b0:	e6db      	b.n	800ae6a <_dtoa_r+0x9ae>
 800b0b2:	9a06      	ldr	r2, [sp, #24]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d18e      	bne.n	800afd6 <_dtoa_r+0xb1a>
 800b0b8:	9b02      	ldr	r3, [sp, #8]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	9302      	str	r3, [sp, #8]
 800b0be:	2331      	movs	r3, #49	; 0x31
 800b0c0:	e799      	b.n	800aff6 <_dtoa_r+0xb3a>
 800b0c2:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <_dtoa_r+0xc2c>)
 800b0c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b0c6:	9306      	str	r3, [sp, #24]
 800b0c8:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <_dtoa_r+0xc30>)
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	d001      	beq.n	800b0d2 <_dtoa_r+0xc16>
 800b0ce:	f7ff fa3f 	bl	800a550 <_dtoa_r+0x94>
 800b0d2:	f7ff fa3f 	bl	800a554 <_dtoa_r+0x98>
 800b0d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	dcb6      	bgt.n	800b04a <_dtoa_r+0xb8e>
 800b0dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	dd00      	ble.n	800b0e4 <_dtoa_r+0xc28>
 800b0e2:	e6ac      	b.n	800ae3e <_dtoa_r+0x982>
 800b0e4:	e7b1      	b.n	800b04a <_dtoa_r+0xb8e>
 800b0e6:	46c0      	nop			; (mov r8, r8)
 800b0e8:	0800d499 	.word	0x0800d499
 800b0ec:	0800d4a1 	.word	0x0800d4a1

0800b0f0 <__sflush_r>:
 800b0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f2:	898b      	ldrh	r3, [r1, #12]
 800b0f4:	0005      	movs	r5, r0
 800b0f6:	000c      	movs	r4, r1
 800b0f8:	071a      	lsls	r2, r3, #28
 800b0fa:	d45f      	bmi.n	800b1bc <__sflush_r+0xcc>
 800b0fc:	684a      	ldr	r2, [r1, #4]
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	dc04      	bgt.n	800b10c <__sflush_r+0x1c>
 800b102:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b104:	2a00      	cmp	r2, #0
 800b106:	dc01      	bgt.n	800b10c <__sflush_r+0x1c>
 800b108:	2000      	movs	r0, #0
 800b10a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b10c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b10e:	2f00      	cmp	r7, #0
 800b110:	d0fa      	beq.n	800b108 <__sflush_r+0x18>
 800b112:	2200      	movs	r2, #0
 800b114:	2180      	movs	r1, #128	; 0x80
 800b116:	682e      	ldr	r6, [r5, #0]
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	001a      	movs	r2, r3
 800b11c:	0149      	lsls	r1, r1, #5
 800b11e:	400a      	ands	r2, r1
 800b120:	420b      	tst	r3, r1
 800b122:	d034      	beq.n	800b18e <__sflush_r+0x9e>
 800b124:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	075b      	lsls	r3, r3, #29
 800b12a:	d506      	bpl.n	800b13a <__sflush_r+0x4a>
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	1ac0      	subs	r0, r0, r3
 800b130:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <__sflush_r+0x4a>
 800b136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b138:	1ac0      	subs	r0, r0, r3
 800b13a:	0002      	movs	r2, r0
 800b13c:	6a21      	ldr	r1, [r4, #32]
 800b13e:	2300      	movs	r3, #0
 800b140:	0028      	movs	r0, r5
 800b142:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b144:	47b8      	blx	r7
 800b146:	89a1      	ldrh	r1, [r4, #12]
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d106      	bne.n	800b15a <__sflush_r+0x6a>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	2b1d      	cmp	r3, #29
 800b150:	d831      	bhi.n	800b1b6 <__sflush_r+0xc6>
 800b152:	4a2c      	ldr	r2, [pc, #176]	; (800b204 <__sflush_r+0x114>)
 800b154:	40da      	lsrs	r2, r3
 800b156:	07d3      	lsls	r3, r2, #31
 800b158:	d52d      	bpl.n	800b1b6 <__sflush_r+0xc6>
 800b15a:	2300      	movs	r3, #0
 800b15c:	6063      	str	r3, [r4, #4]
 800b15e:	6923      	ldr	r3, [r4, #16]
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	04cb      	lsls	r3, r1, #19
 800b164:	d505      	bpl.n	800b172 <__sflush_r+0x82>
 800b166:	1c43      	adds	r3, r0, #1
 800b168:	d102      	bne.n	800b170 <__sflush_r+0x80>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d100      	bne.n	800b172 <__sflush_r+0x82>
 800b170:	6560      	str	r0, [r4, #84]	; 0x54
 800b172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b174:	602e      	str	r6, [r5, #0]
 800b176:	2900      	cmp	r1, #0
 800b178:	d0c6      	beq.n	800b108 <__sflush_r+0x18>
 800b17a:	0023      	movs	r3, r4
 800b17c:	3344      	adds	r3, #68	; 0x44
 800b17e:	4299      	cmp	r1, r3
 800b180:	d002      	beq.n	800b188 <__sflush_r+0x98>
 800b182:	0028      	movs	r0, r5
 800b184:	f001 fa88 	bl	800c698 <_free_r>
 800b188:	2000      	movs	r0, #0
 800b18a:	6360      	str	r0, [r4, #52]	; 0x34
 800b18c:	e7bd      	b.n	800b10a <__sflush_r+0x1a>
 800b18e:	2301      	movs	r3, #1
 800b190:	0028      	movs	r0, r5
 800b192:	6a21      	ldr	r1, [r4, #32]
 800b194:	47b8      	blx	r7
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d1c5      	bne.n	800b126 <__sflush_r+0x36>
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d0c2      	beq.n	800b126 <__sflush_r+0x36>
 800b1a0:	2b1d      	cmp	r3, #29
 800b1a2:	d001      	beq.n	800b1a8 <__sflush_r+0xb8>
 800b1a4:	2b16      	cmp	r3, #22
 800b1a6:	d101      	bne.n	800b1ac <__sflush_r+0xbc>
 800b1a8:	602e      	str	r6, [r5, #0]
 800b1aa:	e7ad      	b.n	800b108 <__sflush_r+0x18>
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	89a2      	ldrh	r2, [r4, #12]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	e7a9      	b.n	800b10a <__sflush_r+0x1a>
 800b1b6:	2340      	movs	r3, #64	; 0x40
 800b1b8:	430b      	orrs	r3, r1
 800b1ba:	e7fa      	b.n	800b1b2 <__sflush_r+0xc2>
 800b1bc:	690f      	ldr	r7, [r1, #16]
 800b1be:	2f00      	cmp	r7, #0
 800b1c0:	d0a2      	beq.n	800b108 <__sflush_r+0x18>
 800b1c2:	680a      	ldr	r2, [r1, #0]
 800b1c4:	600f      	str	r7, [r1, #0]
 800b1c6:	1bd2      	subs	r2, r2, r7
 800b1c8:	9201      	str	r2, [sp, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	079b      	lsls	r3, r3, #30
 800b1ce:	d100      	bne.n	800b1d2 <__sflush_r+0xe2>
 800b1d0:	694a      	ldr	r2, [r1, #20]
 800b1d2:	60a2      	str	r2, [r4, #8]
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dc00      	bgt.n	800b1dc <__sflush_r+0xec>
 800b1da:	e795      	b.n	800b108 <__sflush_r+0x18>
 800b1dc:	003a      	movs	r2, r7
 800b1de:	0028      	movs	r0, r5
 800b1e0:	9b01      	ldr	r3, [sp, #4]
 800b1e2:	6a21      	ldr	r1, [r4, #32]
 800b1e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1e6:	47b0      	blx	r6
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	dc06      	bgt.n	800b1fa <__sflush_r+0x10a>
 800b1ec:	2340      	movs	r3, #64	; 0x40
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	89a2      	ldrh	r2, [r4, #12]
 800b1f2:	4240      	negs	r0, r0
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	81a3      	strh	r3, [r4, #12]
 800b1f8:	e787      	b.n	800b10a <__sflush_r+0x1a>
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	183f      	adds	r7, r7, r0
 800b1fe:	1a1b      	subs	r3, r3, r0
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	e7e7      	b.n	800b1d4 <__sflush_r+0xe4>
 800b204:	20400001 	.word	0x20400001

0800b208 <_fflush_r>:
 800b208:	690b      	ldr	r3, [r1, #16]
 800b20a:	b570      	push	{r4, r5, r6, lr}
 800b20c:	0005      	movs	r5, r0
 800b20e:	000c      	movs	r4, r1
 800b210:	2b00      	cmp	r3, #0
 800b212:	d102      	bne.n	800b21a <_fflush_r+0x12>
 800b214:	2500      	movs	r5, #0
 800b216:	0028      	movs	r0, r5
 800b218:	bd70      	pop	{r4, r5, r6, pc}
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d004      	beq.n	800b228 <_fflush_r+0x20>
 800b21e:	6983      	ldr	r3, [r0, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <_fflush_r+0x20>
 800b224:	f000 f892 	bl	800b34c <__sinit>
 800b228:	4b14      	ldr	r3, [pc, #80]	; (800b27c <_fflush_r+0x74>)
 800b22a:	429c      	cmp	r4, r3
 800b22c:	d11b      	bne.n	800b266 <_fflush_r+0x5e>
 800b22e:	686c      	ldr	r4, [r5, #4]
 800b230:	220c      	movs	r2, #12
 800b232:	5ea3      	ldrsh	r3, [r4, r2]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d0ed      	beq.n	800b214 <_fflush_r+0xc>
 800b238:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b23a:	07d2      	lsls	r2, r2, #31
 800b23c:	d404      	bmi.n	800b248 <_fflush_r+0x40>
 800b23e:	059b      	lsls	r3, r3, #22
 800b240:	d402      	bmi.n	800b248 <_fflush_r+0x40>
 800b242:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b244:	f000 fc9b 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800b248:	0028      	movs	r0, r5
 800b24a:	0021      	movs	r1, r4
 800b24c:	f7ff ff50 	bl	800b0f0 <__sflush_r>
 800b250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b252:	0005      	movs	r5, r0
 800b254:	07db      	lsls	r3, r3, #31
 800b256:	d4de      	bmi.n	800b216 <_fflush_r+0xe>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	059b      	lsls	r3, r3, #22
 800b25c:	d4db      	bmi.n	800b216 <_fflush_r+0xe>
 800b25e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b260:	f000 fc8e 	bl	800bb80 <__retarget_lock_release_recursive>
 800b264:	e7d7      	b.n	800b216 <_fflush_r+0xe>
 800b266:	4b06      	ldr	r3, [pc, #24]	; (800b280 <_fflush_r+0x78>)
 800b268:	429c      	cmp	r4, r3
 800b26a:	d101      	bne.n	800b270 <_fflush_r+0x68>
 800b26c:	68ac      	ldr	r4, [r5, #8]
 800b26e:	e7df      	b.n	800b230 <_fflush_r+0x28>
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <_fflush_r+0x7c>)
 800b272:	429c      	cmp	r4, r3
 800b274:	d1dc      	bne.n	800b230 <_fflush_r+0x28>
 800b276:	68ec      	ldr	r4, [r5, #12]
 800b278:	e7da      	b.n	800b230 <_fflush_r+0x28>
 800b27a:	46c0      	nop			; (mov r8, r8)
 800b27c:	0800d54c 	.word	0x0800d54c
 800b280:	0800d56c 	.word	0x0800d56c
 800b284:	0800d52c 	.word	0x0800d52c

0800b288 <std>:
 800b288:	2300      	movs	r3, #0
 800b28a:	b510      	push	{r4, lr}
 800b28c:	0004      	movs	r4, r0
 800b28e:	6003      	str	r3, [r0, #0]
 800b290:	6043      	str	r3, [r0, #4]
 800b292:	6083      	str	r3, [r0, #8]
 800b294:	8181      	strh	r1, [r0, #12]
 800b296:	6643      	str	r3, [r0, #100]	; 0x64
 800b298:	0019      	movs	r1, r3
 800b29a:	81c2      	strh	r2, [r0, #14]
 800b29c:	6103      	str	r3, [r0, #16]
 800b29e:	6143      	str	r3, [r0, #20]
 800b2a0:	6183      	str	r3, [r0, #24]
 800b2a2:	2208      	movs	r2, #8
 800b2a4:	305c      	adds	r0, #92	; 0x5c
 800b2a6:	f7fd f9b0 	bl	800860a <memset>
 800b2aa:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <std+0x38>)
 800b2ac:	6224      	str	r4, [r4, #32]
 800b2ae:	6263      	str	r3, [r4, #36]	; 0x24
 800b2b0:	4b04      	ldr	r3, [pc, #16]	; (800b2c4 <std+0x3c>)
 800b2b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2b4:	4b04      	ldr	r3, [pc, #16]	; (800b2c8 <std+0x40>)
 800b2b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2b8:	4b04      	ldr	r3, [pc, #16]	; (800b2cc <std+0x44>)
 800b2ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	0800ce15 	.word	0x0800ce15
 800b2c4:	0800ce3d 	.word	0x0800ce3d
 800b2c8:	0800ce75 	.word	0x0800ce75
 800b2cc:	0800cea1 	.word	0x0800cea1

0800b2d0 <_cleanup_r>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	4902      	ldr	r1, [pc, #8]	; (800b2dc <_cleanup_r+0xc>)
 800b2d4:	f000 f8ba 	bl	800b44c <_fwalk_reent>
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	46c0      	nop			; (mov r8, r8)
 800b2dc:	0800b209 	.word	0x0800b209

0800b2e0 <__sfmoreglue>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	2568      	movs	r5, #104	; 0x68
 800b2e4:	1e4a      	subs	r2, r1, #1
 800b2e6:	4355      	muls	r5, r2
 800b2e8:	000e      	movs	r6, r1
 800b2ea:	0029      	movs	r1, r5
 800b2ec:	3174      	adds	r1, #116	; 0x74
 800b2ee:	f001 fa3f 	bl	800c770 <_malloc_r>
 800b2f2:	1e04      	subs	r4, r0, #0
 800b2f4:	d008      	beq.n	800b308 <__sfmoreglue+0x28>
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	002a      	movs	r2, r5
 800b2fa:	6001      	str	r1, [r0, #0]
 800b2fc:	6046      	str	r6, [r0, #4]
 800b2fe:	300c      	adds	r0, #12
 800b300:	60a0      	str	r0, [r4, #8]
 800b302:	3268      	adds	r2, #104	; 0x68
 800b304:	f7fd f981 	bl	800860a <memset>
 800b308:	0020      	movs	r0, r4
 800b30a:	bd70      	pop	{r4, r5, r6, pc}

0800b30c <__sfp_lock_acquire>:
 800b30c:	b510      	push	{r4, lr}
 800b30e:	4802      	ldr	r0, [pc, #8]	; (800b318 <__sfp_lock_acquire+0xc>)
 800b310:	f000 fc35 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800b314:	bd10      	pop	{r4, pc}
 800b316:	46c0      	nop			; (mov r8, r8)
 800b318:	200004e5 	.word	0x200004e5

0800b31c <__sfp_lock_release>:
 800b31c:	b510      	push	{r4, lr}
 800b31e:	4802      	ldr	r0, [pc, #8]	; (800b328 <__sfp_lock_release+0xc>)
 800b320:	f000 fc2e 	bl	800bb80 <__retarget_lock_release_recursive>
 800b324:	bd10      	pop	{r4, pc}
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	200004e5 	.word	0x200004e5

0800b32c <__sinit_lock_acquire>:
 800b32c:	b510      	push	{r4, lr}
 800b32e:	4802      	ldr	r0, [pc, #8]	; (800b338 <__sinit_lock_acquire+0xc>)
 800b330:	f000 fc25 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800b334:	bd10      	pop	{r4, pc}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	200004e6 	.word	0x200004e6

0800b33c <__sinit_lock_release>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	4802      	ldr	r0, [pc, #8]	; (800b348 <__sinit_lock_release+0xc>)
 800b340:	f000 fc1e 	bl	800bb80 <__retarget_lock_release_recursive>
 800b344:	bd10      	pop	{r4, pc}
 800b346:	46c0      	nop			; (mov r8, r8)
 800b348:	200004e6 	.word	0x200004e6

0800b34c <__sinit>:
 800b34c:	b513      	push	{r0, r1, r4, lr}
 800b34e:	0004      	movs	r4, r0
 800b350:	f7ff ffec 	bl	800b32c <__sinit_lock_acquire>
 800b354:	69a3      	ldr	r3, [r4, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <__sinit+0x14>
 800b35a:	f7ff ffef 	bl	800b33c <__sinit_lock_release>
 800b35e:	bd13      	pop	{r0, r1, r4, pc}
 800b360:	64a3      	str	r3, [r4, #72]	; 0x48
 800b362:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b364:	6523      	str	r3, [r4, #80]	; 0x50
 800b366:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <__sinit+0x68>)
 800b368:	4a13      	ldr	r2, [pc, #76]	; (800b3b8 <__sinit+0x6c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	42a3      	cmp	r3, r4
 800b372:	d101      	bne.n	800b378 <__sinit+0x2c>
 800b374:	2301      	movs	r3, #1
 800b376:	61a3      	str	r3, [r4, #24]
 800b378:	0020      	movs	r0, r4
 800b37a:	f000 f81f 	bl	800b3bc <__sfp>
 800b37e:	6060      	str	r0, [r4, #4]
 800b380:	0020      	movs	r0, r4
 800b382:	f000 f81b 	bl	800b3bc <__sfp>
 800b386:	60a0      	str	r0, [r4, #8]
 800b388:	0020      	movs	r0, r4
 800b38a:	f000 f817 	bl	800b3bc <__sfp>
 800b38e:	2200      	movs	r2, #0
 800b390:	2104      	movs	r1, #4
 800b392:	60e0      	str	r0, [r4, #12]
 800b394:	6860      	ldr	r0, [r4, #4]
 800b396:	f7ff ff77 	bl	800b288 <std>
 800b39a:	2201      	movs	r2, #1
 800b39c:	2109      	movs	r1, #9
 800b39e:	68a0      	ldr	r0, [r4, #8]
 800b3a0:	f7ff ff72 	bl	800b288 <std>
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	2112      	movs	r1, #18
 800b3a8:	68e0      	ldr	r0, [r4, #12]
 800b3aa:	f7ff ff6d 	bl	800b288 <std>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	61a3      	str	r3, [r4, #24]
 800b3b2:	e7d2      	b.n	800b35a <__sinit+0xe>
 800b3b4:	0800d308 	.word	0x0800d308
 800b3b8:	0800b2d1 	.word	0x0800b2d1

0800b3bc <__sfp>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	0007      	movs	r7, r0
 800b3c0:	f7ff ffa4 	bl	800b30c <__sfp_lock_acquire>
 800b3c4:	4b1f      	ldr	r3, [pc, #124]	; (800b444 <__sfp+0x88>)
 800b3c6:	681e      	ldr	r6, [r3, #0]
 800b3c8:	69b3      	ldr	r3, [r6, #24]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d102      	bne.n	800b3d4 <__sfp+0x18>
 800b3ce:	0030      	movs	r0, r6
 800b3d0:	f7ff ffbc 	bl	800b34c <__sinit>
 800b3d4:	3648      	adds	r6, #72	; 0x48
 800b3d6:	68b4      	ldr	r4, [r6, #8]
 800b3d8:	6873      	ldr	r3, [r6, #4]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	d504      	bpl.n	800b3e8 <__sfp+0x2c>
 800b3de:	6833      	ldr	r3, [r6, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d022      	beq.n	800b42a <__sfp+0x6e>
 800b3e4:	6836      	ldr	r6, [r6, #0]
 800b3e6:	e7f6      	b.n	800b3d6 <__sfp+0x1a>
 800b3e8:	220c      	movs	r2, #12
 800b3ea:	5ea5      	ldrsh	r5, [r4, r2]
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	d11a      	bne.n	800b426 <__sfp+0x6a>
 800b3f0:	0020      	movs	r0, r4
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <__sfp+0x8c>)
 800b3f4:	3058      	adds	r0, #88	; 0x58
 800b3f6:	60e3      	str	r3, [r4, #12]
 800b3f8:	6665      	str	r5, [r4, #100]	; 0x64
 800b3fa:	f000 fbbf 	bl	800bb7c <__retarget_lock_init_recursive>
 800b3fe:	f7ff ff8d 	bl	800b31c <__sfp_lock_release>
 800b402:	0020      	movs	r0, r4
 800b404:	2208      	movs	r2, #8
 800b406:	0029      	movs	r1, r5
 800b408:	6025      	str	r5, [r4, #0]
 800b40a:	60a5      	str	r5, [r4, #8]
 800b40c:	6065      	str	r5, [r4, #4]
 800b40e:	6125      	str	r5, [r4, #16]
 800b410:	6165      	str	r5, [r4, #20]
 800b412:	61a5      	str	r5, [r4, #24]
 800b414:	305c      	adds	r0, #92	; 0x5c
 800b416:	f7fd f8f8 	bl	800860a <memset>
 800b41a:	6365      	str	r5, [r4, #52]	; 0x34
 800b41c:	63a5      	str	r5, [r4, #56]	; 0x38
 800b41e:	64a5      	str	r5, [r4, #72]	; 0x48
 800b420:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b422:	0020      	movs	r0, r4
 800b424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b426:	3468      	adds	r4, #104	; 0x68
 800b428:	e7d7      	b.n	800b3da <__sfp+0x1e>
 800b42a:	2104      	movs	r1, #4
 800b42c:	0038      	movs	r0, r7
 800b42e:	f7ff ff57 	bl	800b2e0 <__sfmoreglue>
 800b432:	1e04      	subs	r4, r0, #0
 800b434:	6030      	str	r0, [r6, #0]
 800b436:	d1d5      	bne.n	800b3e4 <__sfp+0x28>
 800b438:	f7ff ff70 	bl	800b31c <__sfp_lock_release>
 800b43c:	230c      	movs	r3, #12
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	e7ef      	b.n	800b422 <__sfp+0x66>
 800b442:	46c0      	nop			; (mov r8, r8)
 800b444:	0800d308 	.word	0x0800d308
 800b448:	ffff0001 	.word	0xffff0001

0800b44c <_fwalk_reent>:
 800b44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b44e:	0004      	movs	r4, r0
 800b450:	0006      	movs	r6, r0
 800b452:	2700      	movs	r7, #0
 800b454:	9101      	str	r1, [sp, #4]
 800b456:	3448      	adds	r4, #72	; 0x48
 800b458:	6863      	ldr	r3, [r4, #4]
 800b45a:	68a5      	ldr	r5, [r4, #8]
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	9b00      	ldr	r3, [sp, #0]
 800b460:	3b01      	subs	r3, #1
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	d504      	bpl.n	800b470 <_fwalk_reent+0x24>
 800b466:	6824      	ldr	r4, [r4, #0]
 800b468:	2c00      	cmp	r4, #0
 800b46a:	d1f5      	bne.n	800b458 <_fwalk_reent+0xc>
 800b46c:	0038      	movs	r0, r7
 800b46e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b470:	89ab      	ldrh	r3, [r5, #12]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d908      	bls.n	800b488 <_fwalk_reent+0x3c>
 800b476:	220e      	movs	r2, #14
 800b478:	5eab      	ldrsh	r3, [r5, r2]
 800b47a:	3301      	adds	r3, #1
 800b47c:	d004      	beq.n	800b488 <_fwalk_reent+0x3c>
 800b47e:	0029      	movs	r1, r5
 800b480:	0030      	movs	r0, r6
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	4798      	blx	r3
 800b486:	4307      	orrs	r7, r0
 800b488:	3568      	adds	r5, #104	; 0x68
 800b48a:	e7e8      	b.n	800b45e <_fwalk_reent+0x12>

0800b48c <rshift>:
 800b48c:	0002      	movs	r2, r0
 800b48e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b490:	6904      	ldr	r4, [r0, #16]
 800b492:	3214      	adds	r2, #20
 800b494:	0013      	movs	r3, r2
 800b496:	b085      	sub	sp, #20
 800b498:	114f      	asrs	r7, r1, #5
 800b49a:	42bc      	cmp	r4, r7
 800b49c:	dd31      	ble.n	800b502 <rshift+0x76>
 800b49e:	00bb      	lsls	r3, r7, #2
 800b4a0:	18d3      	adds	r3, r2, r3
 800b4a2:	261f      	movs	r6, #31
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	000b      	movs	r3, r1
 800b4a8:	00a5      	lsls	r5, r4, #2
 800b4aa:	4033      	ands	r3, r6
 800b4ac:	1955      	adds	r5, r2, r5
 800b4ae:	9302      	str	r3, [sp, #8]
 800b4b0:	4231      	tst	r1, r6
 800b4b2:	d10c      	bne.n	800b4ce <rshift+0x42>
 800b4b4:	0016      	movs	r6, r2
 800b4b6:	9901      	ldr	r1, [sp, #4]
 800b4b8:	428d      	cmp	r5, r1
 800b4ba:	d838      	bhi.n	800b52e <rshift+0xa2>
 800b4bc:	9901      	ldr	r1, [sp, #4]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	3903      	subs	r1, #3
 800b4c2:	428d      	cmp	r5, r1
 800b4c4:	d301      	bcc.n	800b4ca <rshift+0x3e>
 800b4c6:	1be3      	subs	r3, r4, r7
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	18d3      	adds	r3, r2, r3
 800b4cc:	e019      	b.n	800b502 <rshift+0x76>
 800b4ce:	2120      	movs	r1, #32
 800b4d0:	9b02      	ldr	r3, [sp, #8]
 800b4d2:	9e01      	ldr	r6, [sp, #4]
 800b4d4:	1acb      	subs	r3, r1, r3
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	ce02      	ldmia	r6!, {r1}
 800b4da:	9b02      	ldr	r3, [sp, #8]
 800b4dc:	4694      	mov	ip, r2
 800b4de:	40d9      	lsrs	r1, r3
 800b4e0:	9100      	str	r1, [sp, #0]
 800b4e2:	42b5      	cmp	r5, r6
 800b4e4:	d816      	bhi.n	800b514 <rshift+0x88>
 800b4e6:	9e01      	ldr	r6, [sp, #4]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	3601      	adds	r6, #1
 800b4ec:	42b5      	cmp	r5, r6
 800b4ee:	d302      	bcc.n	800b4f6 <rshift+0x6a>
 800b4f0:	1be3      	subs	r3, r4, r7
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	3b04      	subs	r3, #4
 800b4f6:	9900      	ldr	r1, [sp, #0]
 800b4f8:	18d3      	adds	r3, r2, r3
 800b4fa:	6019      	str	r1, [r3, #0]
 800b4fc:	2900      	cmp	r1, #0
 800b4fe:	d000      	beq.n	800b502 <rshift+0x76>
 800b500:	3304      	adds	r3, #4
 800b502:	1a99      	subs	r1, r3, r2
 800b504:	1089      	asrs	r1, r1, #2
 800b506:	6101      	str	r1, [r0, #16]
 800b508:	4293      	cmp	r3, r2
 800b50a:	d101      	bne.n	800b510 <rshift+0x84>
 800b50c:	2300      	movs	r3, #0
 800b50e:	6143      	str	r3, [r0, #20]
 800b510:	b005      	add	sp, #20
 800b512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b514:	6833      	ldr	r3, [r6, #0]
 800b516:	9903      	ldr	r1, [sp, #12]
 800b518:	408b      	lsls	r3, r1
 800b51a:	9900      	ldr	r1, [sp, #0]
 800b51c:	4319      	orrs	r1, r3
 800b51e:	4663      	mov	r3, ip
 800b520:	c302      	stmia	r3!, {r1}
 800b522:	469c      	mov	ip, r3
 800b524:	ce02      	ldmia	r6!, {r1}
 800b526:	9b02      	ldr	r3, [sp, #8]
 800b528:	40d9      	lsrs	r1, r3
 800b52a:	9100      	str	r1, [sp, #0]
 800b52c:	e7d9      	b.n	800b4e2 <rshift+0x56>
 800b52e:	c908      	ldmia	r1!, {r3}
 800b530:	c608      	stmia	r6!, {r3}
 800b532:	e7c1      	b.n	800b4b8 <rshift+0x2c>

0800b534 <__hexdig_fun>:
 800b534:	0002      	movs	r2, r0
 800b536:	3a30      	subs	r2, #48	; 0x30
 800b538:	0003      	movs	r3, r0
 800b53a:	2a09      	cmp	r2, #9
 800b53c:	d802      	bhi.n	800b544 <__hexdig_fun+0x10>
 800b53e:	3b20      	subs	r3, #32
 800b540:	b2d8      	uxtb	r0, r3
 800b542:	4770      	bx	lr
 800b544:	0002      	movs	r2, r0
 800b546:	3a61      	subs	r2, #97	; 0x61
 800b548:	2a05      	cmp	r2, #5
 800b54a:	d801      	bhi.n	800b550 <__hexdig_fun+0x1c>
 800b54c:	3b47      	subs	r3, #71	; 0x47
 800b54e:	e7f7      	b.n	800b540 <__hexdig_fun+0xc>
 800b550:	001a      	movs	r2, r3
 800b552:	3a41      	subs	r2, #65	; 0x41
 800b554:	2000      	movs	r0, #0
 800b556:	2a05      	cmp	r2, #5
 800b558:	d8f3      	bhi.n	800b542 <__hexdig_fun+0xe>
 800b55a:	3b27      	subs	r3, #39	; 0x27
 800b55c:	e7f0      	b.n	800b540 <__hexdig_fun+0xc>
	...

0800b560 <__gethex>:
 800b560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b562:	b08d      	sub	sp, #52	; 0x34
 800b564:	930a      	str	r3, [sp, #40]	; 0x28
 800b566:	4bbf      	ldr	r3, [pc, #764]	; (800b864 <__gethex+0x304>)
 800b568:	9005      	str	r0, [sp, #20]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	9109      	str	r1, [sp, #36]	; 0x24
 800b56e:	0018      	movs	r0, r3
 800b570:	9202      	str	r2, [sp, #8]
 800b572:	9307      	str	r3, [sp, #28]
 800b574:	f7f4 fdd2 	bl	800011c <strlen>
 800b578:	2202      	movs	r2, #2
 800b57a:	9b07      	ldr	r3, [sp, #28]
 800b57c:	4252      	negs	r2, r2
 800b57e:	181b      	adds	r3, r3, r0
 800b580:	3b01      	subs	r3, #1
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	9003      	str	r0, [sp, #12]
 800b586:	930b      	str	r3, [sp, #44]	; 0x2c
 800b588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58a:	6819      	ldr	r1, [r3, #0]
 800b58c:	1c8b      	adds	r3, r1, #2
 800b58e:	1a52      	subs	r2, r2, r1
 800b590:	18d1      	adds	r1, r2, r3
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	9108      	str	r1, [sp, #32]
 800b596:	9901      	ldr	r1, [sp, #4]
 800b598:	3301      	adds	r3, #1
 800b59a:	7808      	ldrb	r0, [r1, #0]
 800b59c:	2830      	cmp	r0, #48	; 0x30
 800b59e:	d0f7      	beq.n	800b590 <__gethex+0x30>
 800b5a0:	f7ff ffc8 	bl	800b534 <__hexdig_fun>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	001c      	movs	r4, r3
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	4298      	cmp	r0, r3
 800b5ac:	d11f      	bne.n	800b5ee <__gethex+0x8e>
 800b5ae:	9a03      	ldr	r2, [sp, #12]
 800b5b0:	9907      	ldr	r1, [sp, #28]
 800b5b2:	9801      	ldr	r0, [sp, #4]
 800b5b4:	f001 fc7a 	bl	800ceac <strncmp>
 800b5b8:	0007      	movs	r7, r0
 800b5ba:	42a0      	cmp	r0, r4
 800b5bc:	d000      	beq.n	800b5c0 <__gethex+0x60>
 800b5be:	e06b      	b.n	800b698 <__gethex+0x138>
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	9a03      	ldr	r2, [sp, #12]
 800b5c4:	5c98      	ldrb	r0, [r3, r2]
 800b5c6:	189d      	adds	r5, r3, r2
 800b5c8:	f7ff ffb4 	bl	800b534 <__hexdig_fun>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	9304      	str	r3, [sp, #16]
 800b5d0:	42a0      	cmp	r0, r4
 800b5d2:	d030      	beq.n	800b636 <__gethex+0xd6>
 800b5d4:	9501      	str	r5, [sp, #4]
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	7818      	ldrb	r0, [r3, #0]
 800b5da:	2830      	cmp	r0, #48	; 0x30
 800b5dc:	d009      	beq.n	800b5f2 <__gethex+0x92>
 800b5de:	f7ff ffa9 	bl	800b534 <__hexdig_fun>
 800b5e2:	4242      	negs	r2, r0
 800b5e4:	4142      	adcs	r2, r0
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	002c      	movs	r4, r5
 800b5ea:	9204      	str	r2, [sp, #16]
 800b5ec:	9308      	str	r3, [sp, #32]
 800b5ee:	9d01      	ldr	r5, [sp, #4]
 800b5f0:	e004      	b.n	800b5fc <__gethex+0x9c>
 800b5f2:	9b01      	ldr	r3, [sp, #4]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	e7ed      	b.n	800b5d6 <__gethex+0x76>
 800b5fa:	3501      	adds	r5, #1
 800b5fc:	7828      	ldrb	r0, [r5, #0]
 800b5fe:	f7ff ff99 	bl	800b534 <__hexdig_fun>
 800b602:	1e07      	subs	r7, r0, #0
 800b604:	d1f9      	bne.n	800b5fa <__gethex+0x9a>
 800b606:	0028      	movs	r0, r5
 800b608:	9a03      	ldr	r2, [sp, #12]
 800b60a:	9907      	ldr	r1, [sp, #28]
 800b60c:	f001 fc4e 	bl	800ceac <strncmp>
 800b610:	2800      	cmp	r0, #0
 800b612:	d10e      	bne.n	800b632 <__gethex+0xd2>
 800b614:	2c00      	cmp	r4, #0
 800b616:	d107      	bne.n	800b628 <__gethex+0xc8>
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	18ed      	adds	r5, r5, r3
 800b61c:	002c      	movs	r4, r5
 800b61e:	7828      	ldrb	r0, [r5, #0]
 800b620:	f7ff ff88 	bl	800b534 <__hexdig_fun>
 800b624:	2800      	cmp	r0, #0
 800b626:	d102      	bne.n	800b62e <__gethex+0xce>
 800b628:	1b64      	subs	r4, r4, r5
 800b62a:	00a7      	lsls	r7, r4, #2
 800b62c:	e003      	b.n	800b636 <__gethex+0xd6>
 800b62e:	3501      	adds	r5, #1
 800b630:	e7f5      	b.n	800b61e <__gethex+0xbe>
 800b632:	2c00      	cmp	r4, #0
 800b634:	d1f8      	bne.n	800b628 <__gethex+0xc8>
 800b636:	2220      	movs	r2, #32
 800b638:	782b      	ldrb	r3, [r5, #0]
 800b63a:	002e      	movs	r6, r5
 800b63c:	4393      	bics	r3, r2
 800b63e:	2b50      	cmp	r3, #80	; 0x50
 800b640:	d11d      	bne.n	800b67e <__gethex+0x11e>
 800b642:	786b      	ldrb	r3, [r5, #1]
 800b644:	2b2b      	cmp	r3, #43	; 0x2b
 800b646:	d02c      	beq.n	800b6a2 <__gethex+0x142>
 800b648:	2b2d      	cmp	r3, #45	; 0x2d
 800b64a:	d02e      	beq.n	800b6aa <__gethex+0x14a>
 800b64c:	2300      	movs	r3, #0
 800b64e:	1c6e      	adds	r6, r5, #1
 800b650:	9306      	str	r3, [sp, #24]
 800b652:	7830      	ldrb	r0, [r6, #0]
 800b654:	f7ff ff6e 	bl	800b534 <__hexdig_fun>
 800b658:	1e43      	subs	r3, r0, #1
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b18      	cmp	r3, #24
 800b65e:	d82b      	bhi.n	800b6b8 <__gethex+0x158>
 800b660:	3810      	subs	r0, #16
 800b662:	0004      	movs	r4, r0
 800b664:	7870      	ldrb	r0, [r6, #1]
 800b666:	f7ff ff65 	bl	800b534 <__hexdig_fun>
 800b66a:	1e43      	subs	r3, r0, #1
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	3601      	adds	r6, #1
 800b670:	2b18      	cmp	r3, #24
 800b672:	d91c      	bls.n	800b6ae <__gethex+0x14e>
 800b674:	9b06      	ldr	r3, [sp, #24]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d000      	beq.n	800b67c <__gethex+0x11c>
 800b67a:	4264      	negs	r4, r4
 800b67c:	193f      	adds	r7, r7, r4
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	601e      	str	r6, [r3, #0]
 800b682:	9b04      	ldr	r3, [sp, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d019      	beq.n	800b6bc <__gethex+0x15c>
 800b688:	2600      	movs	r6, #0
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	42b3      	cmp	r3, r6
 800b68e:	d100      	bne.n	800b692 <__gethex+0x132>
 800b690:	3606      	adds	r6, #6
 800b692:	0030      	movs	r0, r6
 800b694:	b00d      	add	sp, #52	; 0x34
 800b696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b698:	2301      	movs	r3, #1
 800b69a:	2700      	movs	r7, #0
 800b69c:	9d01      	ldr	r5, [sp, #4]
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	e7c9      	b.n	800b636 <__gethex+0xd6>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9306      	str	r3, [sp, #24]
 800b6a6:	1cae      	adds	r6, r5, #2
 800b6a8:	e7d3      	b.n	800b652 <__gethex+0xf2>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e7fa      	b.n	800b6a4 <__gethex+0x144>
 800b6ae:	230a      	movs	r3, #10
 800b6b0:	435c      	muls	r4, r3
 800b6b2:	1824      	adds	r4, r4, r0
 800b6b4:	3c10      	subs	r4, #16
 800b6b6:	e7d5      	b.n	800b664 <__gethex+0x104>
 800b6b8:	002e      	movs	r6, r5
 800b6ba:	e7e0      	b.n	800b67e <__gethex+0x11e>
 800b6bc:	9b01      	ldr	r3, [sp, #4]
 800b6be:	9904      	ldr	r1, [sp, #16]
 800b6c0:	1aeb      	subs	r3, r5, r3
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	2b07      	cmp	r3, #7
 800b6c6:	dc0a      	bgt.n	800b6de <__gethex+0x17e>
 800b6c8:	9805      	ldr	r0, [sp, #20]
 800b6ca:	f000 faef 	bl	800bcac <_Balloc>
 800b6ce:	1e04      	subs	r4, r0, #0
 800b6d0:	d108      	bne.n	800b6e4 <__gethex+0x184>
 800b6d2:	0002      	movs	r2, r0
 800b6d4:	21de      	movs	r1, #222	; 0xde
 800b6d6:	4b64      	ldr	r3, [pc, #400]	; (800b868 <__gethex+0x308>)
 800b6d8:	4864      	ldr	r0, [pc, #400]	; (800b86c <__gethex+0x30c>)
 800b6da:	f001 fc1b 	bl	800cf14 <__assert_func>
 800b6de:	3101      	adds	r1, #1
 800b6e0:	105b      	asrs	r3, r3, #1
 800b6e2:	e7ef      	b.n	800b6c4 <__gethex+0x164>
 800b6e4:	0003      	movs	r3, r0
 800b6e6:	3314      	adds	r3, #20
 800b6e8:	9304      	str	r3, [sp, #16]
 800b6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	001e      	movs	r6, r3
 800b6f0:	9306      	str	r3, [sp, #24]
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	42ab      	cmp	r3, r5
 800b6f6:	d340      	bcc.n	800b77a <__gethex+0x21a>
 800b6f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	c540      	stmia	r5!, {r6}
 800b6fe:	1aed      	subs	r5, r5, r3
 800b700:	10ad      	asrs	r5, r5, #2
 800b702:	0030      	movs	r0, r6
 800b704:	6125      	str	r5, [r4, #16]
 800b706:	f000 fbc9 	bl	800be9c <__hi0bits>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	016d      	lsls	r5, r5, #5
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	1a2e      	subs	r6, r5, r0
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	429e      	cmp	r6, r3
 800b716:	dd5a      	ble.n	800b7ce <__gethex+0x26e>
 800b718:	1af6      	subs	r6, r6, r3
 800b71a:	0031      	movs	r1, r6
 800b71c:	0020      	movs	r0, r4
 800b71e:	f000 ff6b 	bl	800c5f8 <__any_on>
 800b722:	1e05      	subs	r5, r0, #0
 800b724:	d016      	beq.n	800b754 <__gethex+0x1f4>
 800b726:	2501      	movs	r5, #1
 800b728:	211f      	movs	r1, #31
 800b72a:	0028      	movs	r0, r5
 800b72c:	1e73      	subs	r3, r6, #1
 800b72e:	4019      	ands	r1, r3
 800b730:	4088      	lsls	r0, r1
 800b732:	0001      	movs	r1, r0
 800b734:	115a      	asrs	r2, r3, #5
 800b736:	9804      	ldr	r0, [sp, #16]
 800b738:	0092      	lsls	r2, r2, #2
 800b73a:	5812      	ldr	r2, [r2, r0]
 800b73c:	420a      	tst	r2, r1
 800b73e:	d009      	beq.n	800b754 <__gethex+0x1f4>
 800b740:	42ab      	cmp	r3, r5
 800b742:	dd06      	ble.n	800b752 <__gethex+0x1f2>
 800b744:	0020      	movs	r0, r4
 800b746:	1eb1      	subs	r1, r6, #2
 800b748:	f000 ff56 	bl	800c5f8 <__any_on>
 800b74c:	3502      	adds	r5, #2
 800b74e:	2800      	cmp	r0, #0
 800b750:	d100      	bne.n	800b754 <__gethex+0x1f4>
 800b752:	2502      	movs	r5, #2
 800b754:	0031      	movs	r1, r6
 800b756:	0020      	movs	r0, r4
 800b758:	f7ff fe98 	bl	800b48c <rshift>
 800b75c:	19bf      	adds	r7, r7, r6
 800b75e:	9b02      	ldr	r3, [sp, #8]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	9303      	str	r3, [sp, #12]
 800b764:	42bb      	cmp	r3, r7
 800b766:	da42      	bge.n	800b7ee <__gethex+0x28e>
 800b768:	0021      	movs	r1, r4
 800b76a:	9805      	ldr	r0, [sp, #20]
 800b76c:	f000 fae2 	bl	800bd34 <_Bfree>
 800b770:	2300      	movs	r3, #0
 800b772:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b774:	26a3      	movs	r6, #163	; 0xa3
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	e78b      	b.n	800b692 <__gethex+0x132>
 800b77a:	1e6b      	subs	r3, r5, #1
 800b77c:	9308      	str	r3, [sp, #32]
 800b77e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	4293      	cmp	r3, r2
 800b784:	d014      	beq.n	800b7b0 <__gethex+0x250>
 800b786:	9b06      	ldr	r3, [sp, #24]
 800b788:	2b20      	cmp	r3, #32
 800b78a:	d104      	bne.n	800b796 <__gethex+0x236>
 800b78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78e:	c340      	stmia	r3!, {r6}
 800b790:	2600      	movs	r6, #0
 800b792:	9309      	str	r3, [sp, #36]	; 0x24
 800b794:	9606      	str	r6, [sp, #24]
 800b796:	9b08      	ldr	r3, [sp, #32]
 800b798:	7818      	ldrb	r0, [r3, #0]
 800b79a:	f7ff fecb 	bl	800b534 <__hexdig_fun>
 800b79e:	230f      	movs	r3, #15
 800b7a0:	4018      	ands	r0, r3
 800b7a2:	9b06      	ldr	r3, [sp, #24]
 800b7a4:	9d08      	ldr	r5, [sp, #32]
 800b7a6:	4098      	lsls	r0, r3
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4306      	orrs	r6, r0
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	e7a0      	b.n	800b6f2 <__gethex+0x192>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	9a03      	ldr	r2, [sp, #12]
 800b7b4:	1a9d      	subs	r5, r3, r2
 800b7b6:	9b08      	ldr	r3, [sp, #32]
 800b7b8:	195d      	adds	r5, r3, r5
 800b7ba:	9b01      	ldr	r3, [sp, #4]
 800b7bc:	429d      	cmp	r5, r3
 800b7be:	d3e2      	bcc.n	800b786 <__gethex+0x226>
 800b7c0:	0028      	movs	r0, r5
 800b7c2:	9907      	ldr	r1, [sp, #28]
 800b7c4:	f001 fb72 	bl	800ceac <strncmp>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d1dc      	bne.n	800b786 <__gethex+0x226>
 800b7cc:	e791      	b.n	800b6f2 <__gethex+0x192>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	2500      	movs	r5, #0
 800b7d2:	429e      	cmp	r6, r3
 800b7d4:	dac3      	bge.n	800b75e <__gethex+0x1fe>
 800b7d6:	1b9e      	subs	r6, r3, r6
 800b7d8:	0021      	movs	r1, r4
 800b7da:	0032      	movs	r2, r6
 800b7dc:	9805      	ldr	r0, [sp, #20]
 800b7de:	f000 fcc7 	bl	800c170 <__lshift>
 800b7e2:	0003      	movs	r3, r0
 800b7e4:	3314      	adds	r3, #20
 800b7e6:	0004      	movs	r4, r0
 800b7e8:	1bbf      	subs	r7, r7, r6
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	e7b7      	b.n	800b75e <__gethex+0x1fe>
 800b7ee:	9b02      	ldr	r3, [sp, #8]
 800b7f0:	685e      	ldr	r6, [r3, #4]
 800b7f2:	42be      	cmp	r6, r7
 800b7f4:	dd71      	ble.n	800b8da <__gethex+0x37a>
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	1bf6      	subs	r6, r6, r7
 800b7fa:	42b3      	cmp	r3, r6
 800b7fc:	dc38      	bgt.n	800b870 <__gethex+0x310>
 800b7fe:	9b02      	ldr	r3, [sp, #8]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	2b02      	cmp	r3, #2
 800b804:	d026      	beq.n	800b854 <__gethex+0x2f4>
 800b806:	2b03      	cmp	r3, #3
 800b808:	d028      	beq.n	800b85c <__gethex+0x2fc>
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d119      	bne.n	800b842 <__gethex+0x2e2>
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	42b3      	cmp	r3, r6
 800b812:	d116      	bne.n	800b842 <__gethex+0x2e2>
 800b814:	2b01      	cmp	r3, #1
 800b816:	d10d      	bne.n	800b834 <__gethex+0x2d4>
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	2662      	movs	r6, #98	; 0x62
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	9a01      	ldr	r2, [sp, #4]
 800b822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	2301      	movs	r3, #1
 800b828:	9a04      	ldr	r2, [sp, #16]
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b830:	601c      	str	r4, [r3, #0]
 800b832:	e72e      	b.n	800b692 <__gethex+0x132>
 800b834:	9901      	ldr	r1, [sp, #4]
 800b836:	0020      	movs	r0, r4
 800b838:	3901      	subs	r1, #1
 800b83a:	f000 fedd 	bl	800c5f8 <__any_on>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d1ea      	bne.n	800b818 <__gethex+0x2b8>
 800b842:	0021      	movs	r1, r4
 800b844:	9805      	ldr	r0, [sp, #20]
 800b846:	f000 fa75 	bl	800bd34 <_Bfree>
 800b84a:	2300      	movs	r3, #0
 800b84c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b84e:	2650      	movs	r6, #80	; 0x50
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	e71e      	b.n	800b692 <__gethex+0x132>
 800b854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1f3      	bne.n	800b842 <__gethex+0x2e2>
 800b85a:	e7dd      	b.n	800b818 <__gethex+0x2b8>
 800b85c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1da      	bne.n	800b818 <__gethex+0x2b8>
 800b862:	e7ee      	b.n	800b842 <__gethex+0x2e2>
 800b864:	0800d5f4 	.word	0x0800d5f4
 800b868:	0800d518 	.word	0x0800d518
 800b86c:	0800d58c 	.word	0x0800d58c
 800b870:	1e77      	subs	r7, r6, #1
 800b872:	2d00      	cmp	r5, #0
 800b874:	d12f      	bne.n	800b8d6 <__gethex+0x376>
 800b876:	2f00      	cmp	r7, #0
 800b878:	d004      	beq.n	800b884 <__gethex+0x324>
 800b87a:	0039      	movs	r1, r7
 800b87c:	0020      	movs	r0, r4
 800b87e:	f000 febb 	bl	800c5f8 <__any_on>
 800b882:	0005      	movs	r5, r0
 800b884:	231f      	movs	r3, #31
 800b886:	117a      	asrs	r2, r7, #5
 800b888:	401f      	ands	r7, r3
 800b88a:	3b1e      	subs	r3, #30
 800b88c:	40bb      	lsls	r3, r7
 800b88e:	9904      	ldr	r1, [sp, #16]
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	5852      	ldr	r2, [r2, r1]
 800b894:	421a      	tst	r2, r3
 800b896:	d001      	beq.n	800b89c <__gethex+0x33c>
 800b898:	2302      	movs	r3, #2
 800b89a:	431d      	orrs	r5, r3
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	0031      	movs	r1, r6
 800b8a0:	1b9b      	subs	r3, r3, r6
 800b8a2:	2602      	movs	r6, #2
 800b8a4:	0020      	movs	r0, r4
 800b8a6:	9301      	str	r3, [sp, #4]
 800b8a8:	f7ff fdf0 	bl	800b48c <rshift>
 800b8ac:	9b02      	ldr	r3, [sp, #8]
 800b8ae:	685f      	ldr	r7, [r3, #4]
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d041      	beq.n	800b938 <__gethex+0x3d8>
 800b8b4:	9b02      	ldr	r3, [sp, #8]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d010      	beq.n	800b8de <__gethex+0x37e>
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d012      	beq.n	800b8e6 <__gethex+0x386>
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d106      	bne.n	800b8d2 <__gethex+0x372>
 800b8c4:	07aa      	lsls	r2, r5, #30
 800b8c6:	d504      	bpl.n	800b8d2 <__gethex+0x372>
 800b8c8:	9a04      	ldr	r2, [sp, #16]
 800b8ca:	6810      	ldr	r0, [r2, #0]
 800b8cc:	4305      	orrs	r5, r0
 800b8ce:	421d      	tst	r5, r3
 800b8d0:	d10c      	bne.n	800b8ec <__gethex+0x38c>
 800b8d2:	2310      	movs	r3, #16
 800b8d4:	e02f      	b.n	800b936 <__gethex+0x3d6>
 800b8d6:	2501      	movs	r5, #1
 800b8d8:	e7d4      	b.n	800b884 <__gethex+0x324>
 800b8da:	2601      	movs	r6, #1
 800b8dc:	e7e8      	b.n	800b8b0 <__gethex+0x350>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0f2      	beq.n	800b8d2 <__gethex+0x372>
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	0023      	movs	r3, r4
 800b8f8:	9a04      	ldr	r2, [sp, #16]
 800b8fa:	3314      	adds	r3, #20
 800b8fc:	1899      	adds	r1, r3, r2
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	1c55      	adds	r5, r2, #1
 800b902:	d01e      	beq.n	800b942 <__gethex+0x3e2>
 800b904:	3201      	adds	r2, #1
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	0023      	movs	r3, r4
 800b90a:	3314      	adds	r3, #20
 800b90c:	2e02      	cmp	r6, #2
 800b90e:	d140      	bne.n	800b992 <__gethex+0x432>
 800b910:	9a02      	ldr	r2, [sp, #8]
 800b912:	9901      	ldr	r1, [sp, #4]
 800b914:	6812      	ldr	r2, [r2, #0]
 800b916:	3a01      	subs	r2, #1
 800b918:	428a      	cmp	r2, r1
 800b91a:	d10b      	bne.n	800b934 <__gethex+0x3d4>
 800b91c:	114a      	asrs	r2, r1, #5
 800b91e:	211f      	movs	r1, #31
 800b920:	9801      	ldr	r0, [sp, #4]
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	4001      	ands	r1, r0
 800b926:	2001      	movs	r0, #1
 800b928:	0005      	movs	r5, r0
 800b92a:	408d      	lsls	r5, r1
 800b92c:	58d3      	ldr	r3, [r2, r3]
 800b92e:	422b      	tst	r3, r5
 800b930:	d000      	beq.n	800b934 <__gethex+0x3d4>
 800b932:	2601      	movs	r6, #1
 800b934:	2320      	movs	r3, #32
 800b936:	431e      	orrs	r6, r3
 800b938:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b93a:	601c      	str	r4, [r3, #0]
 800b93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b93e:	601f      	str	r7, [r3, #0]
 800b940:	e6a7      	b.n	800b692 <__gethex+0x132>
 800b942:	c301      	stmia	r3!, {r0}
 800b944:	4299      	cmp	r1, r3
 800b946:	d8da      	bhi.n	800b8fe <__gethex+0x39e>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	68a2      	ldr	r2, [r4, #8]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	db17      	blt.n	800b980 <__gethex+0x420>
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	9805      	ldr	r0, [sp, #20]
 800b954:	1c59      	adds	r1, r3, #1
 800b956:	f000 f9a9 	bl	800bcac <_Balloc>
 800b95a:	1e05      	subs	r5, r0, #0
 800b95c:	d103      	bne.n	800b966 <__gethex+0x406>
 800b95e:	0002      	movs	r2, r0
 800b960:	2184      	movs	r1, #132	; 0x84
 800b962:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <__gethex+0x474>)
 800b964:	e6b8      	b.n	800b6d8 <__gethex+0x178>
 800b966:	0021      	movs	r1, r4
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	310c      	adds	r1, #12
 800b96c:	1c9a      	adds	r2, r3, #2
 800b96e:	0092      	lsls	r2, r2, #2
 800b970:	300c      	adds	r0, #12
 800b972:	f7fc fe41 	bl	80085f8 <memcpy>
 800b976:	0021      	movs	r1, r4
 800b978:	9805      	ldr	r0, [sp, #20]
 800b97a:	f000 f9db 	bl	800bd34 <_Bfree>
 800b97e:	002c      	movs	r4, r5
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	6122      	str	r2, [r4, #16]
 800b986:	2201      	movs	r2, #1
 800b988:	3304      	adds	r3, #4
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	18e3      	adds	r3, r4, r3
 800b98e:	605a      	str	r2, [r3, #4]
 800b990:	e7ba      	b.n	800b908 <__gethex+0x3a8>
 800b992:	6922      	ldr	r2, [r4, #16]
 800b994:	9903      	ldr	r1, [sp, #12]
 800b996:	428a      	cmp	r2, r1
 800b998:	dd09      	ble.n	800b9ae <__gethex+0x44e>
 800b99a:	2101      	movs	r1, #1
 800b99c:	0020      	movs	r0, r4
 800b99e:	f7ff fd75 	bl	800b48c <rshift>
 800b9a2:	9b02      	ldr	r3, [sp, #8]
 800b9a4:	3701      	adds	r7, #1
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	42bb      	cmp	r3, r7
 800b9aa:	dac2      	bge.n	800b932 <__gethex+0x3d2>
 800b9ac:	e6dc      	b.n	800b768 <__gethex+0x208>
 800b9ae:	221f      	movs	r2, #31
 800b9b0:	9d01      	ldr	r5, [sp, #4]
 800b9b2:	9901      	ldr	r1, [sp, #4]
 800b9b4:	2601      	movs	r6, #1
 800b9b6:	4015      	ands	r5, r2
 800b9b8:	4211      	tst	r1, r2
 800b9ba:	d0bb      	beq.n	800b934 <__gethex+0x3d4>
 800b9bc:	9a04      	ldr	r2, [sp, #16]
 800b9be:	189b      	adds	r3, r3, r2
 800b9c0:	3b04      	subs	r3, #4
 800b9c2:	6818      	ldr	r0, [r3, #0]
 800b9c4:	f000 fa6a 	bl	800be9c <__hi0bits>
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	1b5d      	subs	r5, r3, r5
 800b9cc:	42a8      	cmp	r0, r5
 800b9ce:	dbe4      	blt.n	800b99a <__gethex+0x43a>
 800b9d0:	e7b0      	b.n	800b934 <__gethex+0x3d4>
 800b9d2:	46c0      	nop			; (mov r8, r8)
 800b9d4:	0800d518 	.word	0x0800d518

0800b9d8 <L_shift>:
 800b9d8:	2308      	movs	r3, #8
 800b9da:	b570      	push	{r4, r5, r6, lr}
 800b9dc:	2520      	movs	r5, #32
 800b9de:	1a9a      	subs	r2, r3, r2
 800b9e0:	0092      	lsls	r2, r2, #2
 800b9e2:	1aad      	subs	r5, r5, r2
 800b9e4:	6843      	ldr	r3, [r0, #4]
 800b9e6:	6806      	ldr	r6, [r0, #0]
 800b9e8:	001c      	movs	r4, r3
 800b9ea:	40ac      	lsls	r4, r5
 800b9ec:	40d3      	lsrs	r3, r2
 800b9ee:	4334      	orrs	r4, r6
 800b9f0:	6004      	str	r4, [r0, #0]
 800b9f2:	6043      	str	r3, [r0, #4]
 800b9f4:	3004      	adds	r0, #4
 800b9f6:	4288      	cmp	r0, r1
 800b9f8:	d3f4      	bcc.n	800b9e4 <L_shift+0xc>
 800b9fa:	bd70      	pop	{r4, r5, r6, pc}

0800b9fc <__match>:
 800b9fc:	b530      	push	{r4, r5, lr}
 800b9fe:	6803      	ldr	r3, [r0, #0]
 800ba00:	780c      	ldrb	r4, [r1, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	2c00      	cmp	r4, #0
 800ba06:	d102      	bne.n	800ba0e <__match+0x12>
 800ba08:	6003      	str	r3, [r0, #0]
 800ba0a:	2001      	movs	r0, #1
 800ba0c:	bd30      	pop	{r4, r5, pc}
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	0015      	movs	r5, r2
 800ba12:	3d41      	subs	r5, #65	; 0x41
 800ba14:	2d19      	cmp	r5, #25
 800ba16:	d800      	bhi.n	800ba1a <__match+0x1e>
 800ba18:	3220      	adds	r2, #32
 800ba1a:	3101      	adds	r1, #1
 800ba1c:	42a2      	cmp	r2, r4
 800ba1e:	d0ef      	beq.n	800ba00 <__match+0x4>
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7f3      	b.n	800ba0c <__match+0x10>

0800ba24 <__hexnan>:
 800ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba26:	680b      	ldr	r3, [r1, #0]
 800ba28:	b08b      	sub	sp, #44	; 0x2c
 800ba2a:	9201      	str	r2, [sp, #4]
 800ba2c:	9901      	ldr	r1, [sp, #4]
 800ba2e:	115a      	asrs	r2, r3, #5
 800ba30:	0092      	lsls	r2, r2, #2
 800ba32:	188a      	adds	r2, r1, r2
 800ba34:	9202      	str	r2, [sp, #8]
 800ba36:	0019      	movs	r1, r3
 800ba38:	221f      	movs	r2, #31
 800ba3a:	4011      	ands	r1, r2
 800ba3c:	9008      	str	r0, [sp, #32]
 800ba3e:	9106      	str	r1, [sp, #24]
 800ba40:	4213      	tst	r3, r2
 800ba42:	d002      	beq.n	800ba4a <__hexnan+0x26>
 800ba44:	9b02      	ldr	r3, [sp, #8]
 800ba46:	3304      	adds	r3, #4
 800ba48:	9302      	str	r3, [sp, #8]
 800ba4a:	9b02      	ldr	r3, [sp, #8]
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	1f1e      	subs	r6, r3, #4
 800ba50:	0037      	movs	r7, r6
 800ba52:	0034      	movs	r4, r6
 800ba54:	9b08      	ldr	r3, [sp, #32]
 800ba56:	6035      	str	r5, [r6, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	9507      	str	r5, [sp, #28]
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	9503      	str	r5, [sp, #12]
 800ba60:	9b05      	ldr	r3, [sp, #20]
 800ba62:	3301      	adds	r3, #1
 800ba64:	9309      	str	r3, [sp, #36]	; 0x24
 800ba66:	9b05      	ldr	r3, [sp, #20]
 800ba68:	785b      	ldrb	r3, [r3, #1]
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d028      	beq.n	800bac2 <__hexnan+0x9e>
 800ba70:	9804      	ldr	r0, [sp, #16]
 800ba72:	f7ff fd5f 	bl	800b534 <__hexdig_fun>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d154      	bne.n	800bb24 <__hexnan+0x100>
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	2b20      	cmp	r3, #32
 800ba7e:	d819      	bhi.n	800bab4 <__hexnan+0x90>
 800ba80:	9b03      	ldr	r3, [sp, #12]
 800ba82:	9a07      	ldr	r2, [sp, #28]
 800ba84:	4293      	cmp	r3, r2
 800ba86:	dd12      	ble.n	800baae <__hexnan+0x8a>
 800ba88:	42bc      	cmp	r4, r7
 800ba8a:	d206      	bcs.n	800ba9a <__hexnan+0x76>
 800ba8c:	2d07      	cmp	r5, #7
 800ba8e:	dc04      	bgt.n	800ba9a <__hexnan+0x76>
 800ba90:	002a      	movs	r2, r5
 800ba92:	0039      	movs	r1, r7
 800ba94:	0020      	movs	r0, r4
 800ba96:	f7ff ff9f 	bl	800b9d8 <L_shift>
 800ba9a:	9b01      	ldr	r3, [sp, #4]
 800ba9c:	2508      	movs	r5, #8
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d905      	bls.n	800baae <__hexnan+0x8a>
 800baa2:	1f27      	subs	r7, r4, #4
 800baa4:	2500      	movs	r5, #0
 800baa6:	003c      	movs	r4, r7
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	603d      	str	r5, [r7, #0]
 800baac:	9307      	str	r3, [sp, #28]
 800baae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab0:	9305      	str	r3, [sp, #20]
 800bab2:	e7d5      	b.n	800ba60 <__hexnan+0x3c>
 800bab4:	9b04      	ldr	r3, [sp, #16]
 800bab6:	2b29      	cmp	r3, #41	; 0x29
 800bab8:	d159      	bne.n	800bb6e <__hexnan+0x14a>
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	9a08      	ldr	r2, [sp, #32]
 800babe:	3302      	adds	r3, #2
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d052      	beq.n	800bb6e <__hexnan+0x14a>
 800bac8:	42bc      	cmp	r4, r7
 800baca:	d206      	bcs.n	800bada <__hexnan+0xb6>
 800bacc:	2d07      	cmp	r5, #7
 800bace:	dc04      	bgt.n	800bada <__hexnan+0xb6>
 800bad0:	002a      	movs	r2, r5
 800bad2:	0039      	movs	r1, r7
 800bad4:	0020      	movs	r0, r4
 800bad6:	f7ff ff7f 	bl	800b9d8 <L_shift>
 800bada:	9b01      	ldr	r3, [sp, #4]
 800badc:	429c      	cmp	r4, r3
 800bade:	d935      	bls.n	800bb4c <__hexnan+0x128>
 800bae0:	001a      	movs	r2, r3
 800bae2:	0023      	movs	r3, r4
 800bae4:	cb02      	ldmia	r3!, {r1}
 800bae6:	c202      	stmia	r2!, {r1}
 800bae8:	429e      	cmp	r6, r3
 800baea:	d2fb      	bcs.n	800bae4 <__hexnan+0xc0>
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	1c61      	adds	r1, r4, #1
 800baf0:	1eda      	subs	r2, r3, #3
 800baf2:	2304      	movs	r3, #4
 800baf4:	4291      	cmp	r1, r2
 800baf6:	d805      	bhi.n	800bb04 <__hexnan+0xe0>
 800baf8:	9b02      	ldr	r3, [sp, #8]
 800bafa:	3b04      	subs	r3, #4
 800bafc:	1b1b      	subs	r3, r3, r4
 800bafe:	089b      	lsrs	r3, r3, #2
 800bb00:	3301      	adds	r3, #1
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	9a01      	ldr	r2, [sp, #4]
 800bb06:	18d3      	adds	r3, r2, r3
 800bb08:	2200      	movs	r2, #0
 800bb0a:	c304      	stmia	r3!, {r2}
 800bb0c:	429e      	cmp	r6, r3
 800bb0e:	d2fc      	bcs.n	800bb0a <__hexnan+0xe6>
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d104      	bne.n	800bb20 <__hexnan+0xfc>
 800bb16:	9b01      	ldr	r3, [sp, #4]
 800bb18:	429e      	cmp	r6, r3
 800bb1a:	d126      	bne.n	800bb6a <__hexnan+0x146>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	6033      	str	r3, [r6, #0]
 800bb20:	2005      	movs	r0, #5
 800bb22:	e025      	b.n	800bb70 <__hexnan+0x14c>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	3501      	adds	r5, #1
 800bb28:	3301      	adds	r3, #1
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	2d08      	cmp	r5, #8
 800bb2e:	dd06      	ble.n	800bb3e <__hexnan+0x11a>
 800bb30:	9b01      	ldr	r3, [sp, #4]
 800bb32:	429c      	cmp	r4, r3
 800bb34:	d9bb      	bls.n	800baae <__hexnan+0x8a>
 800bb36:	2300      	movs	r3, #0
 800bb38:	2501      	movs	r5, #1
 800bb3a:	3c04      	subs	r4, #4
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	220f      	movs	r2, #15
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	4010      	ands	r0, r2
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	4318      	orrs	r0, r3
 800bb48:	6020      	str	r0, [r4, #0]
 800bb4a:	e7b0      	b.n	800baae <__hexnan+0x8a>
 800bb4c:	9b06      	ldr	r3, [sp, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d0de      	beq.n	800bb10 <__hexnan+0xec>
 800bb52:	2120      	movs	r1, #32
 800bb54:	9a06      	ldr	r2, [sp, #24]
 800bb56:	9b02      	ldr	r3, [sp, #8]
 800bb58:	1a89      	subs	r1, r1, r2
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	4252      	negs	r2, r2
 800bb5e:	40ca      	lsrs	r2, r1
 800bb60:	3b04      	subs	r3, #4
 800bb62:	6819      	ldr	r1, [r3, #0]
 800bb64:	400a      	ands	r2, r1
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	e7d2      	b.n	800bb10 <__hexnan+0xec>
 800bb6a:	3e04      	subs	r6, #4
 800bb6c:	e7d0      	b.n	800bb10 <__hexnan+0xec>
 800bb6e:	2004      	movs	r0, #4
 800bb70:	b00b      	add	sp, #44	; 0x2c
 800bb72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb74 <_localeconv_r>:
 800bb74:	4800      	ldr	r0, [pc, #0]	; (800bb78 <_localeconv_r+0x4>)
 800bb76:	4770      	bx	lr
 800bb78:	20000188 	.word	0x20000188

0800bb7c <__retarget_lock_init_recursive>:
 800bb7c:	4770      	bx	lr

0800bb7e <__retarget_lock_acquire_recursive>:
 800bb7e:	4770      	bx	lr

0800bb80 <__retarget_lock_release_recursive>:
 800bb80:	4770      	bx	lr
	...

0800bb84 <__swhatbuf_r>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	000e      	movs	r6, r1
 800bb88:	001d      	movs	r5, r3
 800bb8a:	230e      	movs	r3, #14
 800bb8c:	5ec9      	ldrsh	r1, [r1, r3]
 800bb8e:	0014      	movs	r4, r2
 800bb90:	b096      	sub	sp, #88	; 0x58
 800bb92:	2900      	cmp	r1, #0
 800bb94:	da08      	bge.n	800bba8 <__swhatbuf_r+0x24>
 800bb96:	220c      	movs	r2, #12
 800bb98:	5eb3      	ldrsh	r3, [r6, r2]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	602a      	str	r2, [r5, #0]
 800bb9e:	061b      	lsls	r3, r3, #24
 800bba0:	d411      	bmi.n	800bbc6 <__swhatbuf_r+0x42>
 800bba2:	2380      	movs	r3, #128	; 0x80
 800bba4:	00db      	lsls	r3, r3, #3
 800bba6:	e00f      	b.n	800bbc8 <__swhatbuf_r+0x44>
 800bba8:	466a      	mov	r2, sp
 800bbaa:	f001 f9f3 	bl	800cf94 <_fstat_r>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	dbf1      	blt.n	800bb96 <__swhatbuf_r+0x12>
 800bbb2:	23f0      	movs	r3, #240	; 0xf0
 800bbb4:	9901      	ldr	r1, [sp, #4]
 800bbb6:	021b      	lsls	r3, r3, #8
 800bbb8:	4019      	ands	r1, r3
 800bbba:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <__swhatbuf_r+0x4c>)
 800bbbc:	18c9      	adds	r1, r1, r3
 800bbbe:	424b      	negs	r3, r1
 800bbc0:	4159      	adcs	r1, r3
 800bbc2:	6029      	str	r1, [r5, #0]
 800bbc4:	e7ed      	b.n	800bba2 <__swhatbuf_r+0x1e>
 800bbc6:	2340      	movs	r3, #64	; 0x40
 800bbc8:	2000      	movs	r0, #0
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	b016      	add	sp, #88	; 0x58
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	ffffe000 	.word	0xffffe000

0800bbd4 <__smakebuf_r>:
 800bbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd6:	2602      	movs	r6, #2
 800bbd8:	898b      	ldrh	r3, [r1, #12]
 800bbda:	0005      	movs	r5, r0
 800bbdc:	000c      	movs	r4, r1
 800bbde:	4233      	tst	r3, r6
 800bbe0:	d006      	beq.n	800bbf0 <__smakebuf_r+0x1c>
 800bbe2:	0023      	movs	r3, r4
 800bbe4:	3347      	adds	r3, #71	; 0x47
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	6123      	str	r3, [r4, #16]
 800bbea:	2301      	movs	r3, #1
 800bbec:	6163      	str	r3, [r4, #20]
 800bbee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bbf0:	466a      	mov	r2, sp
 800bbf2:	ab01      	add	r3, sp, #4
 800bbf4:	f7ff ffc6 	bl	800bb84 <__swhatbuf_r>
 800bbf8:	9900      	ldr	r1, [sp, #0]
 800bbfa:	0007      	movs	r7, r0
 800bbfc:	0028      	movs	r0, r5
 800bbfe:	f000 fdb7 	bl	800c770 <_malloc_r>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d108      	bne.n	800bc18 <__smakebuf_r+0x44>
 800bc06:	220c      	movs	r2, #12
 800bc08:	5ea3      	ldrsh	r3, [r4, r2]
 800bc0a:	059a      	lsls	r2, r3, #22
 800bc0c:	d4ef      	bmi.n	800bbee <__smakebuf_r+0x1a>
 800bc0e:	2203      	movs	r2, #3
 800bc10:	4393      	bics	r3, r2
 800bc12:	431e      	orrs	r6, r3
 800bc14:	81a6      	strh	r6, [r4, #12]
 800bc16:	e7e4      	b.n	800bbe2 <__smakebuf_r+0xe>
 800bc18:	4b0f      	ldr	r3, [pc, #60]	; (800bc58 <__smakebuf_r+0x84>)
 800bc1a:	62ab      	str	r3, [r5, #40]	; 0x28
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	89a2      	ldrh	r2, [r4, #12]
 800bc20:	6020      	str	r0, [r4, #0]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	9b00      	ldr	r3, [sp, #0]
 800bc28:	6120      	str	r0, [r4, #16]
 800bc2a:	6163      	str	r3, [r4, #20]
 800bc2c:	9b01      	ldr	r3, [sp, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00d      	beq.n	800bc4e <__smakebuf_r+0x7a>
 800bc32:	0028      	movs	r0, r5
 800bc34:	230e      	movs	r3, #14
 800bc36:	5ee1      	ldrsh	r1, [r4, r3]
 800bc38:	f001 f9be 	bl	800cfb8 <_isatty_r>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d006      	beq.n	800bc4e <__smakebuf_r+0x7a>
 800bc40:	2203      	movs	r2, #3
 800bc42:	89a3      	ldrh	r3, [r4, #12]
 800bc44:	4393      	bics	r3, r2
 800bc46:	001a      	movs	r2, r3
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	89a0      	ldrh	r0, [r4, #12]
 800bc50:	4307      	orrs	r7, r0
 800bc52:	81a7      	strh	r7, [r4, #12]
 800bc54:	e7cb      	b.n	800bbee <__smakebuf_r+0x1a>
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	0800b2d1 	.word	0x0800b2d1

0800bc5c <malloc>:
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	4b03      	ldr	r3, [pc, #12]	; (800bc6c <malloc+0x10>)
 800bc60:	0001      	movs	r1, r0
 800bc62:	6818      	ldr	r0, [r3, #0]
 800bc64:	f000 fd84 	bl	800c770 <_malloc_r>
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	20000030 	.word	0x20000030

0800bc70 <__ascii_mbtowc>:
 800bc70:	b082      	sub	sp, #8
 800bc72:	2900      	cmp	r1, #0
 800bc74:	d100      	bne.n	800bc78 <__ascii_mbtowc+0x8>
 800bc76:	a901      	add	r1, sp, #4
 800bc78:	1e10      	subs	r0, r2, #0
 800bc7a:	d006      	beq.n	800bc8a <__ascii_mbtowc+0x1a>
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <__ascii_mbtowc+0x1e>
 800bc80:	7813      	ldrb	r3, [r2, #0]
 800bc82:	600b      	str	r3, [r1, #0]
 800bc84:	7810      	ldrb	r0, [r2, #0]
 800bc86:	1e43      	subs	r3, r0, #1
 800bc88:	4198      	sbcs	r0, r3
 800bc8a:	b002      	add	sp, #8
 800bc8c:	4770      	bx	lr
 800bc8e:	2002      	movs	r0, #2
 800bc90:	4240      	negs	r0, r0
 800bc92:	e7fa      	b.n	800bc8a <__ascii_mbtowc+0x1a>

0800bc94 <memchr>:
 800bc94:	b2c9      	uxtb	r1, r1
 800bc96:	1882      	adds	r2, r0, r2
 800bc98:	4290      	cmp	r0, r2
 800bc9a:	d101      	bne.n	800bca0 <memchr+0xc>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	4770      	bx	lr
 800bca0:	7803      	ldrb	r3, [r0, #0]
 800bca2:	428b      	cmp	r3, r1
 800bca4:	d0fb      	beq.n	800bc9e <memchr+0xa>
 800bca6:	3001      	adds	r0, #1
 800bca8:	e7f6      	b.n	800bc98 <memchr+0x4>
	...

0800bcac <_Balloc>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcb0:	0006      	movs	r6, r0
 800bcb2:	000c      	movs	r4, r1
 800bcb4:	2d00      	cmp	r5, #0
 800bcb6:	d10e      	bne.n	800bcd6 <_Balloc+0x2a>
 800bcb8:	2010      	movs	r0, #16
 800bcba:	f7ff ffcf 	bl	800bc5c <malloc>
 800bcbe:	1e02      	subs	r2, r0, #0
 800bcc0:	6270      	str	r0, [r6, #36]	; 0x24
 800bcc2:	d104      	bne.n	800bcce <_Balloc+0x22>
 800bcc4:	2166      	movs	r1, #102	; 0x66
 800bcc6:	4b19      	ldr	r3, [pc, #100]	; (800bd2c <_Balloc+0x80>)
 800bcc8:	4819      	ldr	r0, [pc, #100]	; (800bd30 <_Balloc+0x84>)
 800bcca:	f001 f923 	bl	800cf14 <__assert_func>
 800bcce:	6045      	str	r5, [r0, #4]
 800bcd0:	6085      	str	r5, [r0, #8]
 800bcd2:	6005      	str	r5, [r0, #0]
 800bcd4:	60c5      	str	r5, [r0, #12]
 800bcd6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bcd8:	68eb      	ldr	r3, [r5, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d013      	beq.n	800bd06 <_Balloc+0x5a>
 800bcde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bce0:	00a2      	lsls	r2, r4, #2
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	189b      	adds	r3, r3, r2
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d118      	bne.n	800bd1e <_Balloc+0x72>
 800bcec:	2101      	movs	r1, #1
 800bcee:	000d      	movs	r5, r1
 800bcf0:	40a5      	lsls	r5, r4
 800bcf2:	1d6a      	adds	r2, r5, #5
 800bcf4:	0030      	movs	r0, r6
 800bcf6:	0092      	lsls	r2, r2, #2
 800bcf8:	f000 fca1 	bl	800c63e <_calloc_r>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d00c      	beq.n	800bd1a <_Balloc+0x6e>
 800bd00:	6044      	str	r4, [r0, #4]
 800bd02:	6085      	str	r5, [r0, #8]
 800bd04:	e00d      	b.n	800bd22 <_Balloc+0x76>
 800bd06:	2221      	movs	r2, #33	; 0x21
 800bd08:	2104      	movs	r1, #4
 800bd0a:	0030      	movs	r0, r6
 800bd0c:	f000 fc97 	bl	800c63e <_calloc_r>
 800bd10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd12:	60e8      	str	r0, [r5, #12]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e1      	bne.n	800bcde <_Balloc+0x32>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	bd70      	pop	{r4, r5, r6, pc}
 800bd1e:	6802      	ldr	r2, [r0, #0]
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	2300      	movs	r3, #0
 800bd24:	6103      	str	r3, [r0, #16]
 800bd26:	60c3      	str	r3, [r0, #12]
 800bd28:	e7f8      	b.n	800bd1c <_Balloc+0x70>
 800bd2a:	46c0      	nop			; (mov r8, r8)
 800bd2c:	0800d4a6 	.word	0x0800d4a6
 800bd30:	0800d608 	.word	0x0800d608

0800bd34 <_Bfree>:
 800bd34:	b570      	push	{r4, r5, r6, lr}
 800bd36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd38:	0005      	movs	r5, r0
 800bd3a:	000c      	movs	r4, r1
 800bd3c:	2e00      	cmp	r6, #0
 800bd3e:	d10e      	bne.n	800bd5e <_Bfree+0x2a>
 800bd40:	2010      	movs	r0, #16
 800bd42:	f7ff ff8b 	bl	800bc5c <malloc>
 800bd46:	1e02      	subs	r2, r0, #0
 800bd48:	6268      	str	r0, [r5, #36]	; 0x24
 800bd4a:	d104      	bne.n	800bd56 <_Bfree+0x22>
 800bd4c:	218a      	movs	r1, #138	; 0x8a
 800bd4e:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <_Bfree+0x40>)
 800bd50:	4809      	ldr	r0, [pc, #36]	; (800bd78 <_Bfree+0x44>)
 800bd52:	f001 f8df 	bl	800cf14 <__assert_func>
 800bd56:	6046      	str	r6, [r0, #4]
 800bd58:	6086      	str	r6, [r0, #8]
 800bd5a:	6006      	str	r6, [r0, #0]
 800bd5c:	60c6      	str	r6, [r0, #12]
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	d007      	beq.n	800bd72 <_Bfree+0x3e>
 800bd62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd64:	6862      	ldr	r2, [r4, #4]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	0092      	lsls	r2, r2, #2
 800bd6a:	189b      	adds	r3, r3, r2
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	6022      	str	r2, [r4, #0]
 800bd70:	601c      	str	r4, [r3, #0]
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	0800d4a6 	.word	0x0800d4a6
 800bd78:	0800d608 	.word	0x0800d608

0800bd7c <__multadd>:
 800bd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd7e:	000e      	movs	r6, r1
 800bd80:	9001      	str	r0, [sp, #4]
 800bd82:	000c      	movs	r4, r1
 800bd84:	001d      	movs	r5, r3
 800bd86:	2000      	movs	r0, #0
 800bd88:	690f      	ldr	r7, [r1, #16]
 800bd8a:	3614      	adds	r6, #20
 800bd8c:	6833      	ldr	r3, [r6, #0]
 800bd8e:	3001      	adds	r0, #1
 800bd90:	b299      	uxth	r1, r3
 800bd92:	4351      	muls	r1, r2
 800bd94:	0c1b      	lsrs	r3, r3, #16
 800bd96:	4353      	muls	r3, r2
 800bd98:	1949      	adds	r1, r1, r5
 800bd9a:	0c0d      	lsrs	r5, r1, #16
 800bd9c:	195b      	adds	r3, r3, r5
 800bd9e:	0c1d      	lsrs	r5, r3, #16
 800bda0:	b289      	uxth	r1, r1
 800bda2:	041b      	lsls	r3, r3, #16
 800bda4:	185b      	adds	r3, r3, r1
 800bda6:	c608      	stmia	r6!, {r3}
 800bda8:	4287      	cmp	r7, r0
 800bdaa:	dcef      	bgt.n	800bd8c <__multadd+0x10>
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	d022      	beq.n	800bdf6 <__multadd+0x7a>
 800bdb0:	68a3      	ldr	r3, [r4, #8]
 800bdb2:	42bb      	cmp	r3, r7
 800bdb4:	dc19      	bgt.n	800bdea <__multadd+0x6e>
 800bdb6:	6863      	ldr	r3, [r4, #4]
 800bdb8:	9801      	ldr	r0, [sp, #4]
 800bdba:	1c59      	adds	r1, r3, #1
 800bdbc:	f7ff ff76 	bl	800bcac <_Balloc>
 800bdc0:	1e06      	subs	r6, r0, #0
 800bdc2:	d105      	bne.n	800bdd0 <__multadd+0x54>
 800bdc4:	0002      	movs	r2, r0
 800bdc6:	21b5      	movs	r1, #181	; 0xb5
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <__multadd+0x80>)
 800bdca:	480d      	ldr	r0, [pc, #52]	; (800be00 <__multadd+0x84>)
 800bdcc:	f001 f8a2 	bl	800cf14 <__assert_func>
 800bdd0:	0021      	movs	r1, r4
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	310c      	adds	r1, #12
 800bdd6:	1c9a      	adds	r2, r3, #2
 800bdd8:	0092      	lsls	r2, r2, #2
 800bdda:	300c      	adds	r0, #12
 800bddc:	f7fc fc0c 	bl	80085f8 <memcpy>
 800bde0:	0021      	movs	r1, r4
 800bde2:	9801      	ldr	r0, [sp, #4]
 800bde4:	f7ff ffa6 	bl	800bd34 <_Bfree>
 800bde8:	0034      	movs	r4, r6
 800bdea:	1d3b      	adds	r3, r7, #4
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	18e3      	adds	r3, r4, r3
 800bdf0:	605d      	str	r5, [r3, #4]
 800bdf2:	1c7b      	adds	r3, r7, #1
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	0020      	movs	r0, r4
 800bdf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdfa:	46c0      	nop			; (mov r8, r8)
 800bdfc:	0800d518 	.word	0x0800d518
 800be00:	0800d608 	.word	0x0800d608

0800be04 <__s2b>:
 800be04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be06:	0006      	movs	r6, r0
 800be08:	0018      	movs	r0, r3
 800be0a:	000c      	movs	r4, r1
 800be0c:	3008      	adds	r0, #8
 800be0e:	2109      	movs	r1, #9
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	0015      	movs	r5, r2
 800be14:	f7f4 fa28 	bl	8000268 <__divsi3>
 800be18:	2301      	movs	r3, #1
 800be1a:	2100      	movs	r1, #0
 800be1c:	4283      	cmp	r3, r0
 800be1e:	db0a      	blt.n	800be36 <__s2b+0x32>
 800be20:	0030      	movs	r0, r6
 800be22:	f7ff ff43 	bl	800bcac <_Balloc>
 800be26:	1e01      	subs	r1, r0, #0
 800be28:	d108      	bne.n	800be3c <__s2b+0x38>
 800be2a:	0002      	movs	r2, r0
 800be2c:	4b19      	ldr	r3, [pc, #100]	; (800be94 <__s2b+0x90>)
 800be2e:	481a      	ldr	r0, [pc, #104]	; (800be98 <__s2b+0x94>)
 800be30:	31ce      	adds	r1, #206	; 0xce
 800be32:	f001 f86f 	bl	800cf14 <__assert_func>
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	3101      	adds	r1, #1
 800be3a:	e7ef      	b.n	800be1c <__s2b+0x18>
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	6143      	str	r3, [r0, #20]
 800be40:	2301      	movs	r3, #1
 800be42:	6103      	str	r3, [r0, #16]
 800be44:	2d09      	cmp	r5, #9
 800be46:	dd18      	ble.n	800be7a <__s2b+0x76>
 800be48:	0023      	movs	r3, r4
 800be4a:	3309      	adds	r3, #9
 800be4c:	001f      	movs	r7, r3
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	1964      	adds	r4, r4, r5
 800be52:	783b      	ldrb	r3, [r7, #0]
 800be54:	220a      	movs	r2, #10
 800be56:	0030      	movs	r0, r6
 800be58:	3b30      	subs	r3, #48	; 0x30
 800be5a:	f7ff ff8f 	bl	800bd7c <__multadd>
 800be5e:	3701      	adds	r7, #1
 800be60:	0001      	movs	r1, r0
 800be62:	42a7      	cmp	r7, r4
 800be64:	d1f5      	bne.n	800be52 <__s2b+0x4e>
 800be66:	002c      	movs	r4, r5
 800be68:	9b00      	ldr	r3, [sp, #0]
 800be6a:	3c08      	subs	r4, #8
 800be6c:	191c      	adds	r4, r3, r4
 800be6e:	002f      	movs	r7, r5
 800be70:	9b01      	ldr	r3, [sp, #4]
 800be72:	429f      	cmp	r7, r3
 800be74:	db04      	blt.n	800be80 <__s2b+0x7c>
 800be76:	0008      	movs	r0, r1
 800be78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be7a:	2509      	movs	r5, #9
 800be7c:	340a      	adds	r4, #10
 800be7e:	e7f6      	b.n	800be6e <__s2b+0x6a>
 800be80:	1b63      	subs	r3, r4, r5
 800be82:	5ddb      	ldrb	r3, [r3, r7]
 800be84:	220a      	movs	r2, #10
 800be86:	0030      	movs	r0, r6
 800be88:	3b30      	subs	r3, #48	; 0x30
 800be8a:	f7ff ff77 	bl	800bd7c <__multadd>
 800be8e:	3701      	adds	r7, #1
 800be90:	0001      	movs	r1, r0
 800be92:	e7ed      	b.n	800be70 <__s2b+0x6c>
 800be94:	0800d518 	.word	0x0800d518
 800be98:	0800d608 	.word	0x0800d608

0800be9c <__hi0bits>:
 800be9c:	0003      	movs	r3, r0
 800be9e:	0c02      	lsrs	r2, r0, #16
 800bea0:	2000      	movs	r0, #0
 800bea2:	4282      	cmp	r2, r0
 800bea4:	d101      	bne.n	800beaa <__hi0bits+0xe>
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	3010      	adds	r0, #16
 800beaa:	0e1a      	lsrs	r2, r3, #24
 800beac:	d101      	bne.n	800beb2 <__hi0bits+0x16>
 800beae:	3008      	adds	r0, #8
 800beb0:	021b      	lsls	r3, r3, #8
 800beb2:	0f1a      	lsrs	r2, r3, #28
 800beb4:	d101      	bne.n	800beba <__hi0bits+0x1e>
 800beb6:	3004      	adds	r0, #4
 800beb8:	011b      	lsls	r3, r3, #4
 800beba:	0f9a      	lsrs	r2, r3, #30
 800bebc:	d101      	bne.n	800bec2 <__hi0bits+0x26>
 800bebe:	3002      	adds	r0, #2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	db03      	blt.n	800bece <__hi0bits+0x32>
 800bec6:	3001      	adds	r0, #1
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	d400      	bmi.n	800bece <__hi0bits+0x32>
 800becc:	2020      	movs	r0, #32
 800bece:	4770      	bx	lr

0800bed0 <__lo0bits>:
 800bed0:	6803      	ldr	r3, [r0, #0]
 800bed2:	0002      	movs	r2, r0
 800bed4:	2107      	movs	r1, #7
 800bed6:	0018      	movs	r0, r3
 800bed8:	4008      	ands	r0, r1
 800beda:	420b      	tst	r3, r1
 800bedc:	d00d      	beq.n	800befa <__lo0bits+0x2a>
 800bede:	3906      	subs	r1, #6
 800bee0:	2000      	movs	r0, #0
 800bee2:	420b      	tst	r3, r1
 800bee4:	d105      	bne.n	800bef2 <__lo0bits+0x22>
 800bee6:	3002      	adds	r0, #2
 800bee8:	4203      	tst	r3, r0
 800beea:	d003      	beq.n	800bef4 <__lo0bits+0x24>
 800beec:	40cb      	lsrs	r3, r1
 800beee:	0008      	movs	r0, r1
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	4770      	bx	lr
 800bef4:	089b      	lsrs	r3, r3, #2
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	e7fb      	b.n	800bef2 <__lo0bits+0x22>
 800befa:	b299      	uxth	r1, r3
 800befc:	2900      	cmp	r1, #0
 800befe:	d101      	bne.n	800bf04 <__lo0bits+0x34>
 800bf00:	2010      	movs	r0, #16
 800bf02:	0c1b      	lsrs	r3, r3, #16
 800bf04:	b2d9      	uxtb	r1, r3
 800bf06:	2900      	cmp	r1, #0
 800bf08:	d101      	bne.n	800bf0e <__lo0bits+0x3e>
 800bf0a:	3008      	adds	r0, #8
 800bf0c:	0a1b      	lsrs	r3, r3, #8
 800bf0e:	0719      	lsls	r1, r3, #28
 800bf10:	d101      	bne.n	800bf16 <__lo0bits+0x46>
 800bf12:	3004      	adds	r0, #4
 800bf14:	091b      	lsrs	r3, r3, #4
 800bf16:	0799      	lsls	r1, r3, #30
 800bf18:	d101      	bne.n	800bf1e <__lo0bits+0x4e>
 800bf1a:	3002      	adds	r0, #2
 800bf1c:	089b      	lsrs	r3, r3, #2
 800bf1e:	07d9      	lsls	r1, r3, #31
 800bf20:	d4e9      	bmi.n	800bef6 <__lo0bits+0x26>
 800bf22:	3001      	adds	r0, #1
 800bf24:	085b      	lsrs	r3, r3, #1
 800bf26:	d1e6      	bne.n	800bef6 <__lo0bits+0x26>
 800bf28:	2020      	movs	r0, #32
 800bf2a:	e7e2      	b.n	800bef2 <__lo0bits+0x22>

0800bf2c <__i2b>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	000c      	movs	r4, r1
 800bf30:	2101      	movs	r1, #1
 800bf32:	f7ff febb 	bl	800bcac <_Balloc>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d106      	bne.n	800bf48 <__i2b+0x1c>
 800bf3a:	21a0      	movs	r1, #160	; 0xa0
 800bf3c:	0002      	movs	r2, r0
 800bf3e:	4b04      	ldr	r3, [pc, #16]	; (800bf50 <__i2b+0x24>)
 800bf40:	4804      	ldr	r0, [pc, #16]	; (800bf54 <__i2b+0x28>)
 800bf42:	0049      	lsls	r1, r1, #1
 800bf44:	f000 ffe6 	bl	800cf14 <__assert_func>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	6144      	str	r4, [r0, #20]
 800bf4c:	6103      	str	r3, [r0, #16]
 800bf4e:	bd10      	pop	{r4, pc}
 800bf50:	0800d518 	.word	0x0800d518
 800bf54:	0800d608 	.word	0x0800d608

0800bf58 <__multiply>:
 800bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5a:	690b      	ldr	r3, [r1, #16]
 800bf5c:	0014      	movs	r4, r2
 800bf5e:	6912      	ldr	r2, [r2, #16]
 800bf60:	000d      	movs	r5, r1
 800bf62:	b089      	sub	sp, #36	; 0x24
 800bf64:	4293      	cmp	r3, r2
 800bf66:	da01      	bge.n	800bf6c <__multiply+0x14>
 800bf68:	0025      	movs	r5, r4
 800bf6a:	000c      	movs	r4, r1
 800bf6c:	692f      	ldr	r7, [r5, #16]
 800bf6e:	6926      	ldr	r6, [r4, #16]
 800bf70:	6869      	ldr	r1, [r5, #4]
 800bf72:	19bb      	adds	r3, r7, r6
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	68ab      	ldr	r3, [r5, #8]
 800bf78:	19ba      	adds	r2, r7, r6
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	da00      	bge.n	800bf80 <__multiply+0x28>
 800bf7e:	3101      	adds	r1, #1
 800bf80:	f7ff fe94 	bl	800bcac <_Balloc>
 800bf84:	9001      	str	r0, [sp, #4]
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d106      	bne.n	800bf98 <__multiply+0x40>
 800bf8a:	215e      	movs	r1, #94	; 0x5e
 800bf8c:	0002      	movs	r2, r0
 800bf8e:	4b48      	ldr	r3, [pc, #288]	; (800c0b0 <__multiply+0x158>)
 800bf90:	4848      	ldr	r0, [pc, #288]	; (800c0b4 <__multiply+0x15c>)
 800bf92:	31ff      	adds	r1, #255	; 0xff
 800bf94:	f000 ffbe 	bl	800cf14 <__assert_func>
 800bf98:	9b01      	ldr	r3, [sp, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	3314      	adds	r3, #20
 800bf9e:	469c      	mov	ip, r3
 800bfa0:	19bb      	adds	r3, r7, r6
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4463      	add	r3, ip
 800bfa6:	9303      	str	r3, [sp, #12]
 800bfa8:	4663      	mov	r3, ip
 800bfaa:	9903      	ldr	r1, [sp, #12]
 800bfac:	428b      	cmp	r3, r1
 800bfae:	d32c      	bcc.n	800c00a <__multiply+0xb2>
 800bfb0:	002b      	movs	r3, r5
 800bfb2:	0022      	movs	r2, r4
 800bfb4:	3314      	adds	r3, #20
 800bfb6:	00bf      	lsls	r7, r7, #2
 800bfb8:	3214      	adds	r2, #20
 800bfba:	9306      	str	r3, [sp, #24]
 800bfbc:	00b6      	lsls	r6, r6, #2
 800bfbe:	19db      	adds	r3, r3, r7
 800bfc0:	9304      	str	r3, [sp, #16]
 800bfc2:	1993      	adds	r3, r2, r6
 800bfc4:	9307      	str	r3, [sp, #28]
 800bfc6:	2304      	movs	r3, #4
 800bfc8:	9305      	str	r3, [sp, #20]
 800bfca:	002b      	movs	r3, r5
 800bfcc:	9904      	ldr	r1, [sp, #16]
 800bfce:	3315      	adds	r3, #21
 800bfd0:	9200      	str	r2, [sp, #0]
 800bfd2:	4299      	cmp	r1, r3
 800bfd4:	d305      	bcc.n	800bfe2 <__multiply+0x8a>
 800bfd6:	1b4b      	subs	r3, r1, r5
 800bfd8:	3b15      	subs	r3, #21
 800bfda:	089b      	lsrs	r3, r3, #2
 800bfdc:	3301      	adds	r3, #1
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	9305      	str	r3, [sp, #20]
 800bfe2:	9b07      	ldr	r3, [sp, #28]
 800bfe4:	9a00      	ldr	r2, [sp, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d311      	bcc.n	800c00e <__multiply+0xb6>
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dd06      	ble.n	800bffe <__multiply+0xa6>
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	3b04      	subs	r3, #4
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d053      	beq.n	800c0a6 <__multiply+0x14e>
 800bffe:	9b01      	ldr	r3, [sp, #4]
 800c000:	9a02      	ldr	r2, [sp, #8]
 800c002:	0018      	movs	r0, r3
 800c004:	611a      	str	r2, [r3, #16]
 800c006:	b009      	add	sp, #36	; 0x24
 800c008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c00a:	c304      	stmia	r3!, {r2}
 800c00c:	e7cd      	b.n	800bfaa <__multiply+0x52>
 800c00e:	9b00      	ldr	r3, [sp, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	b298      	uxth	r0, r3
 800c014:	2800      	cmp	r0, #0
 800c016:	d01b      	beq.n	800c050 <__multiply+0xf8>
 800c018:	4667      	mov	r7, ip
 800c01a:	2400      	movs	r4, #0
 800c01c:	9e06      	ldr	r6, [sp, #24]
 800c01e:	ce02      	ldmia	r6!, {r1}
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	b28b      	uxth	r3, r1
 800c024:	4343      	muls	r3, r0
 800c026:	b292      	uxth	r2, r2
 800c028:	189b      	adds	r3, r3, r2
 800c02a:	191b      	adds	r3, r3, r4
 800c02c:	0c0c      	lsrs	r4, r1, #16
 800c02e:	4344      	muls	r4, r0
 800c030:	683a      	ldr	r2, [r7, #0]
 800c032:	0c11      	lsrs	r1, r2, #16
 800c034:	1861      	adds	r1, r4, r1
 800c036:	0c1c      	lsrs	r4, r3, #16
 800c038:	1909      	adds	r1, r1, r4
 800c03a:	0c0c      	lsrs	r4, r1, #16
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	0409      	lsls	r1, r1, #16
 800c040:	430b      	orrs	r3, r1
 800c042:	c708      	stmia	r7!, {r3}
 800c044:	9b04      	ldr	r3, [sp, #16]
 800c046:	42b3      	cmp	r3, r6
 800c048:	d8e9      	bhi.n	800c01e <__multiply+0xc6>
 800c04a:	4663      	mov	r3, ip
 800c04c:	9a05      	ldr	r2, [sp, #20]
 800c04e:	509c      	str	r4, [r3, r2]
 800c050:	9b00      	ldr	r3, [sp, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	0c1e      	lsrs	r6, r3, #16
 800c056:	d020      	beq.n	800c09a <__multiply+0x142>
 800c058:	4663      	mov	r3, ip
 800c05a:	002c      	movs	r4, r5
 800c05c:	4660      	mov	r0, ip
 800c05e:	2700      	movs	r7, #0
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3414      	adds	r4, #20
 800c064:	6822      	ldr	r2, [r4, #0]
 800c066:	b29b      	uxth	r3, r3
 800c068:	b291      	uxth	r1, r2
 800c06a:	4371      	muls	r1, r6
 800c06c:	6802      	ldr	r2, [r0, #0]
 800c06e:	0c12      	lsrs	r2, r2, #16
 800c070:	1889      	adds	r1, r1, r2
 800c072:	19cf      	adds	r7, r1, r7
 800c074:	0439      	lsls	r1, r7, #16
 800c076:	430b      	orrs	r3, r1
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	cc02      	ldmia	r4!, {r1}
 800c07c:	6843      	ldr	r3, [r0, #4]
 800c07e:	0c09      	lsrs	r1, r1, #16
 800c080:	4371      	muls	r1, r6
 800c082:	b29b      	uxth	r3, r3
 800c084:	0c3f      	lsrs	r7, r7, #16
 800c086:	18cb      	adds	r3, r1, r3
 800c088:	9a04      	ldr	r2, [sp, #16]
 800c08a:	19db      	adds	r3, r3, r7
 800c08c:	0c1f      	lsrs	r7, r3, #16
 800c08e:	3004      	adds	r0, #4
 800c090:	42a2      	cmp	r2, r4
 800c092:	d8e7      	bhi.n	800c064 <__multiply+0x10c>
 800c094:	4662      	mov	r2, ip
 800c096:	9905      	ldr	r1, [sp, #20]
 800c098:	5053      	str	r3, [r2, r1]
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	3304      	adds	r3, #4
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	2304      	movs	r3, #4
 800c0a2:	449c      	add	ip, r3
 800c0a4:	e79d      	b.n	800bfe2 <__multiply+0x8a>
 800c0a6:	9b02      	ldr	r3, [sp, #8]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	9302      	str	r3, [sp, #8]
 800c0ac:	e79d      	b.n	800bfea <__multiply+0x92>
 800c0ae:	46c0      	nop			; (mov r8, r8)
 800c0b0:	0800d518 	.word	0x0800d518
 800c0b4:	0800d608 	.word	0x0800d608

0800c0b8 <__pow5mult>:
 800c0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	0015      	movs	r5, r2
 800c0be:	0007      	movs	r7, r0
 800c0c0:	000e      	movs	r6, r1
 800c0c2:	401a      	ands	r2, r3
 800c0c4:	421d      	tst	r5, r3
 800c0c6:	d008      	beq.n	800c0da <__pow5mult+0x22>
 800c0c8:	4925      	ldr	r1, [pc, #148]	; (800c160 <__pow5mult+0xa8>)
 800c0ca:	3a01      	subs	r2, #1
 800c0cc:	0092      	lsls	r2, r2, #2
 800c0ce:	5852      	ldr	r2, [r2, r1]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	0031      	movs	r1, r6
 800c0d4:	f7ff fe52 	bl	800bd7c <__multadd>
 800c0d8:	0006      	movs	r6, r0
 800c0da:	10ad      	asrs	r5, r5, #2
 800c0dc:	d03d      	beq.n	800c15a <__pow5mult+0xa2>
 800c0de:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c0e0:	2c00      	cmp	r4, #0
 800c0e2:	d10f      	bne.n	800c104 <__pow5mult+0x4c>
 800c0e4:	2010      	movs	r0, #16
 800c0e6:	f7ff fdb9 	bl	800bc5c <malloc>
 800c0ea:	1e02      	subs	r2, r0, #0
 800c0ec:	6278      	str	r0, [r7, #36]	; 0x24
 800c0ee:	d105      	bne.n	800c0fc <__pow5mult+0x44>
 800c0f0:	21d7      	movs	r1, #215	; 0xd7
 800c0f2:	4b1c      	ldr	r3, [pc, #112]	; (800c164 <__pow5mult+0xac>)
 800c0f4:	481c      	ldr	r0, [pc, #112]	; (800c168 <__pow5mult+0xb0>)
 800c0f6:	0049      	lsls	r1, r1, #1
 800c0f8:	f000 ff0c 	bl	800cf14 <__assert_func>
 800c0fc:	6044      	str	r4, [r0, #4]
 800c0fe:	6084      	str	r4, [r0, #8]
 800c100:	6004      	str	r4, [r0, #0]
 800c102:	60c4      	str	r4, [r0, #12]
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	689c      	ldr	r4, [r3, #8]
 800c108:	9301      	str	r3, [sp, #4]
 800c10a:	2c00      	cmp	r4, #0
 800c10c:	d108      	bne.n	800c120 <__pow5mult+0x68>
 800c10e:	0038      	movs	r0, r7
 800c110:	4916      	ldr	r1, [pc, #88]	; (800c16c <__pow5mult+0xb4>)
 800c112:	f7ff ff0b 	bl	800bf2c <__i2b>
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	0004      	movs	r4, r0
 800c11a:	6098      	str	r0, [r3, #8]
 800c11c:	2300      	movs	r3, #0
 800c11e:	6003      	str	r3, [r0, #0]
 800c120:	2301      	movs	r3, #1
 800c122:	421d      	tst	r5, r3
 800c124:	d00a      	beq.n	800c13c <__pow5mult+0x84>
 800c126:	0031      	movs	r1, r6
 800c128:	0022      	movs	r2, r4
 800c12a:	0038      	movs	r0, r7
 800c12c:	f7ff ff14 	bl	800bf58 <__multiply>
 800c130:	0031      	movs	r1, r6
 800c132:	9001      	str	r0, [sp, #4]
 800c134:	0038      	movs	r0, r7
 800c136:	f7ff fdfd 	bl	800bd34 <_Bfree>
 800c13a:	9e01      	ldr	r6, [sp, #4]
 800c13c:	106d      	asrs	r5, r5, #1
 800c13e:	d00c      	beq.n	800c15a <__pow5mult+0xa2>
 800c140:	6820      	ldr	r0, [r4, #0]
 800c142:	2800      	cmp	r0, #0
 800c144:	d107      	bne.n	800c156 <__pow5mult+0x9e>
 800c146:	0022      	movs	r2, r4
 800c148:	0021      	movs	r1, r4
 800c14a:	0038      	movs	r0, r7
 800c14c:	f7ff ff04 	bl	800bf58 <__multiply>
 800c150:	2300      	movs	r3, #0
 800c152:	6020      	str	r0, [r4, #0]
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	0004      	movs	r4, r0
 800c158:	e7e2      	b.n	800c120 <__pow5mult+0x68>
 800c15a:	0030      	movs	r0, r6
 800c15c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c15e:	46c0      	nop			; (mov r8, r8)
 800c160:	0800d758 	.word	0x0800d758
 800c164:	0800d4a6 	.word	0x0800d4a6
 800c168:	0800d608 	.word	0x0800d608
 800c16c:	00000271 	.word	0x00000271

0800c170 <__lshift>:
 800c170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c172:	000c      	movs	r4, r1
 800c174:	0017      	movs	r7, r2
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	1155      	asrs	r5, r2, #5
 800c17a:	b087      	sub	sp, #28
 800c17c:	18eb      	adds	r3, r5, r3
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	3301      	adds	r3, #1
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	6849      	ldr	r1, [r1, #4]
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	9004      	str	r0, [sp, #16]
 800c18a:	9a01      	ldr	r2, [sp, #4]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	db10      	blt.n	800c1b2 <__lshift+0x42>
 800c190:	9804      	ldr	r0, [sp, #16]
 800c192:	f7ff fd8b 	bl	800bcac <_Balloc>
 800c196:	2300      	movs	r3, #0
 800c198:	0002      	movs	r2, r0
 800c19a:	0006      	movs	r6, r0
 800c19c:	0019      	movs	r1, r3
 800c19e:	3214      	adds	r2, #20
 800c1a0:	4298      	cmp	r0, r3
 800c1a2:	d10c      	bne.n	800c1be <__lshift+0x4e>
 800c1a4:	21da      	movs	r1, #218	; 0xda
 800c1a6:	0002      	movs	r2, r0
 800c1a8:	4b26      	ldr	r3, [pc, #152]	; (800c244 <__lshift+0xd4>)
 800c1aa:	4827      	ldr	r0, [pc, #156]	; (800c248 <__lshift+0xd8>)
 800c1ac:	31ff      	adds	r1, #255	; 0xff
 800c1ae:	f000 feb1 	bl	800cf14 <__assert_func>
 800c1b2:	3101      	adds	r1, #1
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	e7e8      	b.n	800c18a <__lshift+0x1a>
 800c1b8:	0098      	lsls	r0, r3, #2
 800c1ba:	5011      	str	r1, [r2, r0]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	42ab      	cmp	r3, r5
 800c1c0:	dbfa      	blt.n	800c1b8 <__lshift+0x48>
 800c1c2:	43eb      	mvns	r3, r5
 800c1c4:	17db      	asrs	r3, r3, #31
 800c1c6:	401d      	ands	r5, r3
 800c1c8:	211f      	movs	r1, #31
 800c1ca:	0023      	movs	r3, r4
 800c1cc:	0038      	movs	r0, r7
 800c1ce:	00ad      	lsls	r5, r5, #2
 800c1d0:	1955      	adds	r5, r2, r5
 800c1d2:	6922      	ldr	r2, [r4, #16]
 800c1d4:	3314      	adds	r3, #20
 800c1d6:	0092      	lsls	r2, r2, #2
 800c1d8:	4008      	ands	r0, r1
 800c1da:	4684      	mov	ip, r0
 800c1dc:	189a      	adds	r2, r3, r2
 800c1de:	420f      	tst	r7, r1
 800c1e0:	d02a      	beq.n	800c238 <__lshift+0xc8>
 800c1e2:	3101      	adds	r1, #1
 800c1e4:	1a09      	subs	r1, r1, r0
 800c1e6:	9105      	str	r1, [sp, #20]
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	9503      	str	r5, [sp, #12]
 800c1ec:	4667      	mov	r7, ip
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	40b8      	lsls	r0, r7
 800c1f2:	4301      	orrs	r1, r0
 800c1f4:	9803      	ldr	r0, [sp, #12]
 800c1f6:	c002      	stmia	r0!, {r1}
 800c1f8:	cb02      	ldmia	r3!, {r1}
 800c1fa:	9003      	str	r0, [sp, #12]
 800c1fc:	9805      	ldr	r0, [sp, #20]
 800c1fe:	40c1      	lsrs	r1, r0
 800c200:	429a      	cmp	r2, r3
 800c202:	d8f3      	bhi.n	800c1ec <__lshift+0x7c>
 800c204:	0020      	movs	r0, r4
 800c206:	3015      	adds	r0, #21
 800c208:	2304      	movs	r3, #4
 800c20a:	4282      	cmp	r2, r0
 800c20c:	d304      	bcc.n	800c218 <__lshift+0xa8>
 800c20e:	1b13      	subs	r3, r2, r4
 800c210:	3b15      	subs	r3, #21
 800c212:	089b      	lsrs	r3, r3, #2
 800c214:	3301      	adds	r3, #1
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	50e9      	str	r1, [r5, r3]
 800c21a:	2900      	cmp	r1, #0
 800c21c:	d002      	beq.n	800c224 <__lshift+0xb4>
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	3302      	adds	r3, #2
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	9b01      	ldr	r3, [sp, #4]
 800c226:	9804      	ldr	r0, [sp, #16]
 800c228:	3b01      	subs	r3, #1
 800c22a:	0021      	movs	r1, r4
 800c22c:	6133      	str	r3, [r6, #16]
 800c22e:	f7ff fd81 	bl	800bd34 <_Bfree>
 800c232:	0030      	movs	r0, r6
 800c234:	b007      	add	sp, #28
 800c236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c238:	cb02      	ldmia	r3!, {r1}
 800c23a:	c502      	stmia	r5!, {r1}
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d8fb      	bhi.n	800c238 <__lshift+0xc8>
 800c240:	e7f0      	b.n	800c224 <__lshift+0xb4>
 800c242:	46c0      	nop			; (mov r8, r8)
 800c244:	0800d518 	.word	0x0800d518
 800c248:	0800d608 	.word	0x0800d608

0800c24c <__mcmp>:
 800c24c:	6902      	ldr	r2, [r0, #16]
 800c24e:	690b      	ldr	r3, [r1, #16]
 800c250:	b530      	push	{r4, r5, lr}
 800c252:	0004      	movs	r4, r0
 800c254:	1ad0      	subs	r0, r2, r3
 800c256:	429a      	cmp	r2, r3
 800c258:	d10d      	bne.n	800c276 <__mcmp+0x2a>
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	3414      	adds	r4, #20
 800c25e:	3114      	adds	r1, #20
 800c260:	18e2      	adds	r2, r4, r3
 800c262:	18c9      	adds	r1, r1, r3
 800c264:	3a04      	subs	r2, #4
 800c266:	3904      	subs	r1, #4
 800c268:	6815      	ldr	r5, [r2, #0]
 800c26a:	680b      	ldr	r3, [r1, #0]
 800c26c:	429d      	cmp	r5, r3
 800c26e:	d003      	beq.n	800c278 <__mcmp+0x2c>
 800c270:	2001      	movs	r0, #1
 800c272:	429d      	cmp	r5, r3
 800c274:	d303      	bcc.n	800c27e <__mcmp+0x32>
 800c276:	bd30      	pop	{r4, r5, pc}
 800c278:	4294      	cmp	r4, r2
 800c27a:	d3f3      	bcc.n	800c264 <__mcmp+0x18>
 800c27c:	e7fb      	b.n	800c276 <__mcmp+0x2a>
 800c27e:	4240      	negs	r0, r0
 800c280:	e7f9      	b.n	800c276 <__mcmp+0x2a>
	...

0800c284 <__mdiff>:
 800c284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c286:	000e      	movs	r6, r1
 800c288:	0007      	movs	r7, r0
 800c28a:	0011      	movs	r1, r2
 800c28c:	0030      	movs	r0, r6
 800c28e:	b087      	sub	sp, #28
 800c290:	0014      	movs	r4, r2
 800c292:	f7ff ffdb 	bl	800c24c <__mcmp>
 800c296:	1e05      	subs	r5, r0, #0
 800c298:	d110      	bne.n	800c2bc <__mdiff+0x38>
 800c29a:	0001      	movs	r1, r0
 800c29c:	0038      	movs	r0, r7
 800c29e:	f7ff fd05 	bl	800bcac <_Balloc>
 800c2a2:	1e02      	subs	r2, r0, #0
 800c2a4:	d104      	bne.n	800c2b0 <__mdiff+0x2c>
 800c2a6:	4b40      	ldr	r3, [pc, #256]	; (800c3a8 <__mdiff+0x124>)
 800c2a8:	4940      	ldr	r1, [pc, #256]	; (800c3ac <__mdiff+0x128>)
 800c2aa:	4841      	ldr	r0, [pc, #260]	; (800c3b0 <__mdiff+0x12c>)
 800c2ac:	f000 fe32 	bl	800cf14 <__assert_func>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	6145      	str	r5, [r0, #20]
 800c2b4:	6103      	str	r3, [r0, #16]
 800c2b6:	0010      	movs	r0, r2
 800c2b8:	b007      	add	sp, #28
 800c2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2bc:	2301      	movs	r3, #1
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	db04      	blt.n	800c2ce <__mdiff+0x4a>
 800c2c4:	0023      	movs	r3, r4
 800c2c6:	0034      	movs	r4, r6
 800c2c8:	001e      	movs	r6, r3
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	0038      	movs	r0, r7
 800c2d0:	6861      	ldr	r1, [r4, #4]
 800c2d2:	f7ff fceb 	bl	800bcac <_Balloc>
 800c2d6:	1e02      	subs	r2, r0, #0
 800c2d8:	d103      	bne.n	800c2e2 <__mdiff+0x5e>
 800c2da:	2190      	movs	r1, #144	; 0x90
 800c2dc:	4b32      	ldr	r3, [pc, #200]	; (800c3a8 <__mdiff+0x124>)
 800c2de:	0089      	lsls	r1, r1, #2
 800c2e0:	e7e3      	b.n	800c2aa <__mdiff+0x26>
 800c2e2:	9b01      	ldr	r3, [sp, #4]
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	60c3      	str	r3, [r0, #12]
 800c2e8:	6920      	ldr	r0, [r4, #16]
 800c2ea:	3414      	adds	r4, #20
 800c2ec:	9401      	str	r4, [sp, #4]
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	0084      	lsls	r4, r0, #2
 800c2f2:	191b      	adds	r3, r3, r4
 800c2f4:	0034      	movs	r4, r6
 800c2f6:	9302      	str	r3, [sp, #8]
 800c2f8:	6933      	ldr	r3, [r6, #16]
 800c2fa:	3414      	adds	r4, #20
 800c2fc:	0099      	lsls	r1, r3, #2
 800c2fe:	1863      	adds	r3, r4, r1
 800c300:	9303      	str	r3, [sp, #12]
 800c302:	0013      	movs	r3, r2
 800c304:	3314      	adds	r3, #20
 800c306:	469c      	mov	ip, r3
 800c308:	9305      	str	r3, [sp, #20]
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	9b04      	ldr	r3, [sp, #16]
 800c310:	cc02      	ldmia	r4!, {r1}
 800c312:	cb20      	ldmia	r3!, {r5}
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	b2ab      	uxth	r3, r5
 800c318:	19df      	adds	r7, r3, r7
 800c31a:	b28b      	uxth	r3, r1
 800c31c:	1afb      	subs	r3, r7, r3
 800c31e:	0c09      	lsrs	r1, r1, #16
 800c320:	0c2d      	lsrs	r5, r5, #16
 800c322:	1a6d      	subs	r5, r5, r1
 800c324:	1419      	asrs	r1, r3, #16
 800c326:	186d      	adds	r5, r5, r1
 800c328:	4661      	mov	r1, ip
 800c32a:	142f      	asrs	r7, r5, #16
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	042d      	lsls	r5, r5, #16
 800c330:	432b      	orrs	r3, r5
 800c332:	c108      	stmia	r1!, {r3}
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	468c      	mov	ip, r1
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d8e8      	bhi.n	800c30e <__mdiff+0x8a>
 800c33c:	0031      	movs	r1, r6
 800c33e:	9c03      	ldr	r4, [sp, #12]
 800c340:	3115      	adds	r1, #21
 800c342:	2304      	movs	r3, #4
 800c344:	428c      	cmp	r4, r1
 800c346:	d304      	bcc.n	800c352 <__mdiff+0xce>
 800c348:	1ba3      	subs	r3, r4, r6
 800c34a:	3b15      	subs	r3, #21
 800c34c:	089b      	lsrs	r3, r3, #2
 800c34e:	3301      	adds	r3, #1
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	9901      	ldr	r1, [sp, #4]
 800c354:	18cc      	adds	r4, r1, r3
 800c356:	9905      	ldr	r1, [sp, #20]
 800c358:	0026      	movs	r6, r4
 800c35a:	18cb      	adds	r3, r1, r3
 800c35c:	469c      	mov	ip, r3
 800c35e:	9902      	ldr	r1, [sp, #8]
 800c360:	428e      	cmp	r6, r1
 800c362:	d310      	bcc.n	800c386 <__mdiff+0x102>
 800c364:	9e02      	ldr	r6, [sp, #8]
 800c366:	1ee1      	subs	r1, r4, #3
 800c368:	2500      	movs	r5, #0
 800c36a:	428e      	cmp	r6, r1
 800c36c:	d304      	bcc.n	800c378 <__mdiff+0xf4>
 800c36e:	0031      	movs	r1, r6
 800c370:	3103      	adds	r1, #3
 800c372:	1b0c      	subs	r4, r1, r4
 800c374:	08a4      	lsrs	r4, r4, #2
 800c376:	00a5      	lsls	r5, r4, #2
 800c378:	195b      	adds	r3, r3, r5
 800c37a:	3b04      	subs	r3, #4
 800c37c:	6819      	ldr	r1, [r3, #0]
 800c37e:	2900      	cmp	r1, #0
 800c380:	d00f      	beq.n	800c3a2 <__mdiff+0x11e>
 800c382:	6110      	str	r0, [r2, #16]
 800c384:	e797      	b.n	800c2b6 <__mdiff+0x32>
 800c386:	ce02      	ldmia	r6!, {r1}
 800c388:	b28d      	uxth	r5, r1
 800c38a:	19ed      	adds	r5, r5, r7
 800c38c:	0c0f      	lsrs	r7, r1, #16
 800c38e:	1429      	asrs	r1, r5, #16
 800c390:	1879      	adds	r1, r7, r1
 800c392:	140f      	asrs	r7, r1, #16
 800c394:	b2ad      	uxth	r5, r5
 800c396:	0409      	lsls	r1, r1, #16
 800c398:	430d      	orrs	r5, r1
 800c39a:	4661      	mov	r1, ip
 800c39c:	c120      	stmia	r1!, {r5}
 800c39e:	468c      	mov	ip, r1
 800c3a0:	e7dd      	b.n	800c35e <__mdiff+0xda>
 800c3a2:	3801      	subs	r0, #1
 800c3a4:	e7e9      	b.n	800c37a <__mdiff+0xf6>
 800c3a6:	46c0      	nop			; (mov r8, r8)
 800c3a8:	0800d518 	.word	0x0800d518
 800c3ac:	00000232 	.word	0x00000232
 800c3b0:	0800d608 	.word	0x0800d608

0800c3b4 <__ulp>:
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <__ulp+0x40>)
 800c3b6:	4019      	ands	r1, r3
 800c3b8:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <__ulp+0x44>)
 800c3ba:	18c9      	adds	r1, r1, r3
 800c3bc:	2900      	cmp	r1, #0
 800c3be:	dd04      	ble.n	800c3ca <__ulp+0x16>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	000b      	movs	r3, r1
 800c3c4:	0010      	movs	r0, r2
 800c3c6:	0019      	movs	r1, r3
 800c3c8:	4770      	bx	lr
 800c3ca:	4249      	negs	r1, r1
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	1509      	asrs	r1, r1, #20
 800c3d2:	2913      	cmp	r1, #19
 800c3d4:	dc04      	bgt.n	800c3e0 <__ulp+0x2c>
 800c3d6:	2080      	movs	r0, #128	; 0x80
 800c3d8:	0300      	lsls	r0, r0, #12
 800c3da:	4108      	asrs	r0, r1
 800c3dc:	0003      	movs	r3, r0
 800c3de:	e7f1      	b.n	800c3c4 <__ulp+0x10>
 800c3e0:	3914      	subs	r1, #20
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	291e      	cmp	r1, #30
 800c3e6:	dc02      	bgt.n	800c3ee <__ulp+0x3a>
 800c3e8:	2080      	movs	r0, #128	; 0x80
 800c3ea:	0600      	lsls	r0, r0, #24
 800c3ec:	40c8      	lsrs	r0, r1
 800c3ee:	0002      	movs	r2, r0
 800c3f0:	e7e8      	b.n	800c3c4 <__ulp+0x10>
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	7ff00000 	.word	0x7ff00000
 800c3f8:	fcc00000 	.word	0xfcc00000

0800c3fc <__b2d>:
 800c3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3fe:	0006      	movs	r6, r0
 800c400:	6903      	ldr	r3, [r0, #16]
 800c402:	3614      	adds	r6, #20
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	18f3      	adds	r3, r6, r3
 800c408:	1f1d      	subs	r5, r3, #4
 800c40a:	682c      	ldr	r4, [r5, #0]
 800c40c:	000f      	movs	r7, r1
 800c40e:	0020      	movs	r0, r4
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	f7ff fd43 	bl	800be9c <__hi0bits>
 800c416:	2320      	movs	r3, #32
 800c418:	1a1b      	subs	r3, r3, r0
 800c41a:	491f      	ldr	r1, [pc, #124]	; (800c498 <__b2d+0x9c>)
 800c41c:	603b      	str	r3, [r7, #0]
 800c41e:	280a      	cmp	r0, #10
 800c420:	dc16      	bgt.n	800c450 <__b2d+0x54>
 800c422:	230b      	movs	r3, #11
 800c424:	0027      	movs	r7, r4
 800c426:	1a1b      	subs	r3, r3, r0
 800c428:	40df      	lsrs	r7, r3
 800c42a:	4339      	orrs	r1, r7
 800c42c:	469c      	mov	ip, r3
 800c42e:	000b      	movs	r3, r1
 800c430:	2100      	movs	r1, #0
 800c432:	42ae      	cmp	r6, r5
 800c434:	d202      	bcs.n	800c43c <__b2d+0x40>
 800c436:	9901      	ldr	r1, [sp, #4]
 800c438:	3908      	subs	r1, #8
 800c43a:	6809      	ldr	r1, [r1, #0]
 800c43c:	3015      	adds	r0, #21
 800c43e:	4084      	lsls	r4, r0
 800c440:	4660      	mov	r0, ip
 800c442:	40c1      	lsrs	r1, r0
 800c444:	430c      	orrs	r4, r1
 800c446:	0022      	movs	r2, r4
 800c448:	0010      	movs	r0, r2
 800c44a:	0019      	movs	r1, r3
 800c44c:	b003      	add	sp, #12
 800c44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c450:	2700      	movs	r7, #0
 800c452:	42ae      	cmp	r6, r5
 800c454:	d202      	bcs.n	800c45c <__b2d+0x60>
 800c456:	9d01      	ldr	r5, [sp, #4]
 800c458:	3d08      	subs	r5, #8
 800c45a:	682f      	ldr	r7, [r5, #0]
 800c45c:	230b      	movs	r3, #11
 800c45e:	425b      	negs	r3, r3
 800c460:	469c      	mov	ip, r3
 800c462:	4484      	add	ip, r0
 800c464:	280b      	cmp	r0, #11
 800c466:	d013      	beq.n	800c490 <__b2d+0x94>
 800c468:	4663      	mov	r3, ip
 800c46a:	2020      	movs	r0, #32
 800c46c:	409c      	lsls	r4, r3
 800c46e:	1ac0      	subs	r0, r0, r3
 800c470:	003b      	movs	r3, r7
 800c472:	40c3      	lsrs	r3, r0
 800c474:	431c      	orrs	r4, r3
 800c476:	4321      	orrs	r1, r4
 800c478:	000b      	movs	r3, r1
 800c47a:	2100      	movs	r1, #0
 800c47c:	42b5      	cmp	r5, r6
 800c47e:	d901      	bls.n	800c484 <__b2d+0x88>
 800c480:	3d04      	subs	r5, #4
 800c482:	6829      	ldr	r1, [r5, #0]
 800c484:	4664      	mov	r4, ip
 800c486:	40c1      	lsrs	r1, r0
 800c488:	40a7      	lsls	r7, r4
 800c48a:	430f      	orrs	r7, r1
 800c48c:	003a      	movs	r2, r7
 800c48e:	e7db      	b.n	800c448 <__b2d+0x4c>
 800c490:	4321      	orrs	r1, r4
 800c492:	000b      	movs	r3, r1
 800c494:	e7fa      	b.n	800c48c <__b2d+0x90>
 800c496:	46c0      	nop			; (mov r8, r8)
 800c498:	3ff00000 	.word	0x3ff00000

0800c49c <__d2b>:
 800c49c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c49e:	2101      	movs	r1, #1
 800c4a0:	0014      	movs	r4, r2
 800c4a2:	001e      	movs	r6, r3
 800c4a4:	9f08      	ldr	r7, [sp, #32]
 800c4a6:	f7ff fc01 	bl	800bcac <_Balloc>
 800c4aa:	1e05      	subs	r5, r0, #0
 800c4ac:	d105      	bne.n	800c4ba <__d2b+0x1e>
 800c4ae:	0002      	movs	r2, r0
 800c4b0:	4b26      	ldr	r3, [pc, #152]	; (800c54c <__d2b+0xb0>)
 800c4b2:	4927      	ldr	r1, [pc, #156]	; (800c550 <__d2b+0xb4>)
 800c4b4:	4827      	ldr	r0, [pc, #156]	; (800c554 <__d2b+0xb8>)
 800c4b6:	f000 fd2d 	bl	800cf14 <__assert_func>
 800c4ba:	0333      	lsls	r3, r6, #12
 800c4bc:	0076      	lsls	r6, r6, #1
 800c4be:	0b1b      	lsrs	r3, r3, #12
 800c4c0:	0d76      	lsrs	r6, r6, #21
 800c4c2:	d124      	bne.n	800c50e <__d2b+0x72>
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	2c00      	cmp	r4, #0
 800c4c8:	d027      	beq.n	800c51a <__d2b+0x7e>
 800c4ca:	4668      	mov	r0, sp
 800c4cc:	9400      	str	r4, [sp, #0]
 800c4ce:	f7ff fcff 	bl	800bed0 <__lo0bits>
 800c4d2:	9c00      	ldr	r4, [sp, #0]
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d01e      	beq.n	800c516 <__d2b+0x7a>
 800c4d8:	9b01      	ldr	r3, [sp, #4]
 800c4da:	2120      	movs	r1, #32
 800c4dc:	001a      	movs	r2, r3
 800c4de:	1a09      	subs	r1, r1, r0
 800c4e0:	408a      	lsls	r2, r1
 800c4e2:	40c3      	lsrs	r3, r0
 800c4e4:	4322      	orrs	r2, r4
 800c4e6:	616a      	str	r2, [r5, #20]
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	9c01      	ldr	r4, [sp, #4]
 800c4ec:	61ac      	str	r4, [r5, #24]
 800c4ee:	1e63      	subs	r3, r4, #1
 800c4f0:	419c      	sbcs	r4, r3
 800c4f2:	3401      	adds	r4, #1
 800c4f4:	612c      	str	r4, [r5, #16]
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	d018      	beq.n	800c52c <__d2b+0x90>
 800c4fa:	4b17      	ldr	r3, [pc, #92]	; (800c558 <__d2b+0xbc>)
 800c4fc:	18f6      	adds	r6, r6, r3
 800c4fe:	2335      	movs	r3, #53	; 0x35
 800c500:	1836      	adds	r6, r6, r0
 800c502:	1a18      	subs	r0, r3, r0
 800c504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c506:	603e      	str	r6, [r7, #0]
 800c508:	6018      	str	r0, [r3, #0]
 800c50a:	0028      	movs	r0, r5
 800c50c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c50e:	2280      	movs	r2, #128	; 0x80
 800c510:	0352      	lsls	r2, r2, #13
 800c512:	4313      	orrs	r3, r2
 800c514:	e7d6      	b.n	800c4c4 <__d2b+0x28>
 800c516:	616c      	str	r4, [r5, #20]
 800c518:	e7e7      	b.n	800c4ea <__d2b+0x4e>
 800c51a:	a801      	add	r0, sp, #4
 800c51c:	f7ff fcd8 	bl	800bed0 <__lo0bits>
 800c520:	2401      	movs	r4, #1
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	612c      	str	r4, [r5, #16]
 800c526:	616b      	str	r3, [r5, #20]
 800c528:	3020      	adds	r0, #32
 800c52a:	e7e4      	b.n	800c4f6 <__d2b+0x5a>
 800c52c:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <__d2b+0xc0>)
 800c52e:	18c0      	adds	r0, r0, r3
 800c530:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <__d2b+0xc4>)
 800c532:	6038      	str	r0, [r7, #0]
 800c534:	18e3      	adds	r3, r4, r3
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	18eb      	adds	r3, r5, r3
 800c53a:	6958      	ldr	r0, [r3, #20]
 800c53c:	f7ff fcae 	bl	800be9c <__hi0bits>
 800c540:	0164      	lsls	r4, r4, #5
 800c542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c544:	1a24      	subs	r4, r4, r0
 800c546:	601c      	str	r4, [r3, #0]
 800c548:	e7df      	b.n	800c50a <__d2b+0x6e>
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	0800d518 	.word	0x0800d518
 800c550:	0000030a 	.word	0x0000030a
 800c554:	0800d608 	.word	0x0800d608
 800c558:	fffffbcd 	.word	0xfffffbcd
 800c55c:	fffffbce 	.word	0xfffffbce
 800c560:	3fffffff 	.word	0x3fffffff

0800c564 <__ratio>:
 800c564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c566:	b087      	sub	sp, #28
 800c568:	000f      	movs	r7, r1
 800c56a:	a904      	add	r1, sp, #16
 800c56c:	0006      	movs	r6, r0
 800c56e:	f7ff ff45 	bl	800c3fc <__b2d>
 800c572:	9000      	str	r0, [sp, #0]
 800c574:	9101      	str	r1, [sp, #4]
 800c576:	9c00      	ldr	r4, [sp, #0]
 800c578:	9d01      	ldr	r5, [sp, #4]
 800c57a:	0038      	movs	r0, r7
 800c57c:	a905      	add	r1, sp, #20
 800c57e:	f7ff ff3d 	bl	800c3fc <__b2d>
 800c582:	9002      	str	r0, [sp, #8]
 800c584:	9103      	str	r1, [sp, #12]
 800c586:	9a02      	ldr	r2, [sp, #8]
 800c588:	9b03      	ldr	r3, [sp, #12]
 800c58a:	6931      	ldr	r1, [r6, #16]
 800c58c:	6938      	ldr	r0, [r7, #16]
 800c58e:	9e05      	ldr	r6, [sp, #20]
 800c590:	1a08      	subs	r0, r1, r0
 800c592:	9904      	ldr	r1, [sp, #16]
 800c594:	0140      	lsls	r0, r0, #5
 800c596:	1b89      	subs	r1, r1, r6
 800c598:	1841      	adds	r1, r0, r1
 800c59a:	0508      	lsls	r0, r1, #20
 800c59c:	2900      	cmp	r1, #0
 800c59e:	dd07      	ble.n	800c5b0 <__ratio+0x4c>
 800c5a0:	9901      	ldr	r1, [sp, #4]
 800c5a2:	1845      	adds	r5, r0, r1
 800c5a4:	0020      	movs	r0, r4
 800c5a6:	0029      	movs	r1, r5
 800c5a8:	f7f4 fb34 	bl	8000c14 <__aeabi_ddiv>
 800c5ac:	b007      	add	sp, #28
 800c5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b0:	9903      	ldr	r1, [sp, #12]
 800c5b2:	1a0b      	subs	r3, r1, r0
 800c5b4:	e7f6      	b.n	800c5a4 <__ratio+0x40>

0800c5b6 <__copybits>:
 800c5b6:	b570      	push	{r4, r5, r6, lr}
 800c5b8:	0014      	movs	r4, r2
 800c5ba:	0005      	movs	r5, r0
 800c5bc:	3901      	subs	r1, #1
 800c5be:	6913      	ldr	r3, [r2, #16]
 800c5c0:	1149      	asrs	r1, r1, #5
 800c5c2:	3101      	adds	r1, #1
 800c5c4:	0089      	lsls	r1, r1, #2
 800c5c6:	3414      	adds	r4, #20
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	1841      	adds	r1, r0, r1
 800c5cc:	18e3      	adds	r3, r4, r3
 800c5ce:	42a3      	cmp	r3, r4
 800c5d0:	d80d      	bhi.n	800c5ee <__copybits+0x38>
 800c5d2:	0014      	movs	r4, r2
 800c5d4:	3411      	adds	r4, #17
 800c5d6:	2500      	movs	r5, #0
 800c5d8:	429c      	cmp	r4, r3
 800c5da:	d803      	bhi.n	800c5e4 <__copybits+0x2e>
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	3b11      	subs	r3, #17
 800c5e0:	089b      	lsrs	r3, r3, #2
 800c5e2:	009d      	lsls	r5, r3, #2
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	1940      	adds	r0, r0, r5
 800c5e8:	4281      	cmp	r1, r0
 800c5ea:	d803      	bhi.n	800c5f4 <__copybits+0x3e>
 800c5ec:	bd70      	pop	{r4, r5, r6, pc}
 800c5ee:	cc40      	ldmia	r4!, {r6}
 800c5f0:	c540      	stmia	r5!, {r6}
 800c5f2:	e7ec      	b.n	800c5ce <__copybits+0x18>
 800c5f4:	c008      	stmia	r0!, {r3}
 800c5f6:	e7f7      	b.n	800c5e8 <__copybits+0x32>

0800c5f8 <__any_on>:
 800c5f8:	0002      	movs	r2, r0
 800c5fa:	6900      	ldr	r0, [r0, #16]
 800c5fc:	b510      	push	{r4, lr}
 800c5fe:	3214      	adds	r2, #20
 800c600:	114b      	asrs	r3, r1, #5
 800c602:	4298      	cmp	r0, r3
 800c604:	db13      	blt.n	800c62e <__any_on+0x36>
 800c606:	dd0c      	ble.n	800c622 <__any_on+0x2a>
 800c608:	241f      	movs	r4, #31
 800c60a:	0008      	movs	r0, r1
 800c60c:	4020      	ands	r0, r4
 800c60e:	4221      	tst	r1, r4
 800c610:	d007      	beq.n	800c622 <__any_on+0x2a>
 800c612:	0099      	lsls	r1, r3, #2
 800c614:	588c      	ldr	r4, [r1, r2]
 800c616:	0021      	movs	r1, r4
 800c618:	40c1      	lsrs	r1, r0
 800c61a:	4081      	lsls	r1, r0
 800c61c:	2001      	movs	r0, #1
 800c61e:	428c      	cmp	r4, r1
 800c620:	d104      	bne.n	800c62c <__any_on+0x34>
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	18d3      	adds	r3, r2, r3
 800c626:	4293      	cmp	r3, r2
 800c628:	d803      	bhi.n	800c632 <__any_on+0x3a>
 800c62a:	2000      	movs	r0, #0
 800c62c:	bd10      	pop	{r4, pc}
 800c62e:	0003      	movs	r3, r0
 800c630:	e7f7      	b.n	800c622 <__any_on+0x2a>
 800c632:	3b04      	subs	r3, #4
 800c634:	6819      	ldr	r1, [r3, #0]
 800c636:	2900      	cmp	r1, #0
 800c638:	d0f5      	beq.n	800c626 <__any_on+0x2e>
 800c63a:	2001      	movs	r0, #1
 800c63c:	e7f6      	b.n	800c62c <__any_on+0x34>

0800c63e <_calloc_r>:
 800c63e:	b570      	push	{r4, r5, r6, lr}
 800c640:	0c13      	lsrs	r3, r2, #16
 800c642:	0c0d      	lsrs	r5, r1, #16
 800c644:	d11e      	bne.n	800c684 <_calloc_r+0x46>
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10c      	bne.n	800c664 <_calloc_r+0x26>
 800c64a:	b289      	uxth	r1, r1
 800c64c:	b294      	uxth	r4, r2
 800c64e:	434c      	muls	r4, r1
 800c650:	0021      	movs	r1, r4
 800c652:	f000 f88d 	bl	800c770 <_malloc_r>
 800c656:	1e05      	subs	r5, r0, #0
 800c658:	d01b      	beq.n	800c692 <_calloc_r+0x54>
 800c65a:	0022      	movs	r2, r4
 800c65c:	2100      	movs	r1, #0
 800c65e:	f7fb ffd4 	bl	800860a <memset>
 800c662:	e016      	b.n	800c692 <_calloc_r+0x54>
 800c664:	1c1d      	adds	r5, r3, #0
 800c666:	1c0b      	adds	r3, r1, #0
 800c668:	b292      	uxth	r2, r2
 800c66a:	b289      	uxth	r1, r1
 800c66c:	b29c      	uxth	r4, r3
 800c66e:	4351      	muls	r1, r2
 800c670:	b2ab      	uxth	r3, r5
 800c672:	4363      	muls	r3, r4
 800c674:	0c0c      	lsrs	r4, r1, #16
 800c676:	191c      	adds	r4, r3, r4
 800c678:	0c22      	lsrs	r2, r4, #16
 800c67a:	d107      	bne.n	800c68c <_calloc_r+0x4e>
 800c67c:	0424      	lsls	r4, r4, #16
 800c67e:	b289      	uxth	r1, r1
 800c680:	430c      	orrs	r4, r1
 800c682:	e7e5      	b.n	800c650 <_calloc_r+0x12>
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <_calloc_r+0x4e>
 800c688:	1c13      	adds	r3, r2, #0
 800c68a:	e7ed      	b.n	800c668 <_calloc_r+0x2a>
 800c68c:	230c      	movs	r3, #12
 800c68e:	2500      	movs	r5, #0
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	0028      	movs	r0, r5
 800c694:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c698 <_free_r>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	0005      	movs	r5, r0
 800c69c:	2900      	cmp	r1, #0
 800c69e:	d010      	beq.n	800c6c2 <_free_r+0x2a>
 800c6a0:	1f0c      	subs	r4, r1, #4
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	da00      	bge.n	800c6aa <_free_r+0x12>
 800c6a8:	18e4      	adds	r4, r4, r3
 800c6aa:	0028      	movs	r0, r5
 800c6ac:	f000 fcbe 	bl	800d02c <__malloc_lock>
 800c6b0:	4a1d      	ldr	r2, [pc, #116]	; (800c728 <_free_r+0x90>)
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d105      	bne.n	800c6c4 <_free_r+0x2c>
 800c6b8:	6063      	str	r3, [r4, #4]
 800c6ba:	6014      	str	r4, [r2, #0]
 800c6bc:	0028      	movs	r0, r5
 800c6be:	f000 fcbd 	bl	800d03c <__malloc_unlock>
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d908      	bls.n	800c6da <_free_r+0x42>
 800c6c8:	6821      	ldr	r1, [r4, #0]
 800c6ca:	1860      	adds	r0, r4, r1
 800c6cc:	4283      	cmp	r3, r0
 800c6ce:	d1f3      	bne.n	800c6b8 <_free_r+0x20>
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	1841      	adds	r1, r0, r1
 800c6d6:	6021      	str	r1, [r4, #0]
 800c6d8:	e7ee      	b.n	800c6b8 <_free_r+0x20>
 800c6da:	001a      	movs	r2, r3
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <_free_r+0x4e>
 800c6e2:	42a3      	cmp	r3, r4
 800c6e4:	d9f9      	bls.n	800c6da <_free_r+0x42>
 800c6e6:	6811      	ldr	r1, [r2, #0]
 800c6e8:	1850      	adds	r0, r2, r1
 800c6ea:	42a0      	cmp	r0, r4
 800c6ec:	d10b      	bne.n	800c706 <_free_r+0x6e>
 800c6ee:	6820      	ldr	r0, [r4, #0]
 800c6f0:	1809      	adds	r1, r1, r0
 800c6f2:	1850      	adds	r0, r2, r1
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	4283      	cmp	r3, r0
 800c6f8:	d1e0      	bne.n	800c6bc <_free_r+0x24>
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	1841      	adds	r1, r0, r1
 800c700:	6011      	str	r1, [r2, #0]
 800c702:	6053      	str	r3, [r2, #4]
 800c704:	e7da      	b.n	800c6bc <_free_r+0x24>
 800c706:	42a0      	cmp	r0, r4
 800c708:	d902      	bls.n	800c710 <_free_r+0x78>
 800c70a:	230c      	movs	r3, #12
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	e7d5      	b.n	800c6bc <_free_r+0x24>
 800c710:	6821      	ldr	r1, [r4, #0]
 800c712:	1860      	adds	r0, r4, r1
 800c714:	4283      	cmp	r3, r0
 800c716:	d103      	bne.n	800c720 <_free_r+0x88>
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	1841      	adds	r1, r0, r1
 800c71e:	6021      	str	r1, [r4, #0]
 800c720:	6063      	str	r3, [r4, #4]
 800c722:	6054      	str	r4, [r2, #4]
 800c724:	e7ca      	b.n	800c6bc <_free_r+0x24>
 800c726:	46c0      	nop			; (mov r8, r8)
 800c728:	200004e8 	.word	0x200004e8

0800c72c <sbrk_aligned>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	4e0f      	ldr	r6, [pc, #60]	; (800c76c <sbrk_aligned+0x40>)
 800c730:	000d      	movs	r5, r1
 800c732:	6831      	ldr	r1, [r6, #0]
 800c734:	0004      	movs	r4, r0
 800c736:	2900      	cmp	r1, #0
 800c738:	d102      	bne.n	800c740 <sbrk_aligned+0x14>
 800c73a:	f000 fb59 	bl	800cdf0 <_sbrk_r>
 800c73e:	6030      	str	r0, [r6, #0]
 800c740:	0029      	movs	r1, r5
 800c742:	0020      	movs	r0, r4
 800c744:	f000 fb54 	bl	800cdf0 <_sbrk_r>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d00a      	beq.n	800c762 <sbrk_aligned+0x36>
 800c74c:	2303      	movs	r3, #3
 800c74e:	1cc5      	adds	r5, r0, #3
 800c750:	439d      	bics	r5, r3
 800c752:	42a8      	cmp	r0, r5
 800c754:	d007      	beq.n	800c766 <sbrk_aligned+0x3a>
 800c756:	1a29      	subs	r1, r5, r0
 800c758:	0020      	movs	r0, r4
 800c75a:	f000 fb49 	bl	800cdf0 <_sbrk_r>
 800c75e:	1c43      	adds	r3, r0, #1
 800c760:	d101      	bne.n	800c766 <sbrk_aligned+0x3a>
 800c762:	2501      	movs	r5, #1
 800c764:	426d      	negs	r5, r5
 800c766:	0028      	movs	r0, r5
 800c768:	bd70      	pop	{r4, r5, r6, pc}
 800c76a:	46c0      	nop			; (mov r8, r8)
 800c76c:	200004ec 	.word	0x200004ec

0800c770 <_malloc_r>:
 800c770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c772:	2203      	movs	r2, #3
 800c774:	1ccb      	adds	r3, r1, #3
 800c776:	4393      	bics	r3, r2
 800c778:	3308      	adds	r3, #8
 800c77a:	0006      	movs	r6, r0
 800c77c:	001f      	movs	r7, r3
 800c77e:	2b0c      	cmp	r3, #12
 800c780:	d232      	bcs.n	800c7e8 <_malloc_r+0x78>
 800c782:	270c      	movs	r7, #12
 800c784:	42b9      	cmp	r1, r7
 800c786:	d831      	bhi.n	800c7ec <_malloc_r+0x7c>
 800c788:	0030      	movs	r0, r6
 800c78a:	f000 fc4f 	bl	800d02c <__malloc_lock>
 800c78e:	4d32      	ldr	r5, [pc, #200]	; (800c858 <_malloc_r+0xe8>)
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	001c      	movs	r4, r3
 800c794:	2c00      	cmp	r4, #0
 800c796:	d12e      	bne.n	800c7f6 <_malloc_r+0x86>
 800c798:	0039      	movs	r1, r7
 800c79a:	0030      	movs	r0, r6
 800c79c:	f7ff ffc6 	bl	800c72c <sbrk_aligned>
 800c7a0:	0004      	movs	r4, r0
 800c7a2:	1c43      	adds	r3, r0, #1
 800c7a4:	d11e      	bne.n	800c7e4 <_malloc_r+0x74>
 800c7a6:	682c      	ldr	r4, [r5, #0]
 800c7a8:	0025      	movs	r5, r4
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	d14a      	bne.n	800c844 <_malloc_r+0xd4>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	0029      	movs	r1, r5
 800c7b2:	18e3      	adds	r3, r4, r3
 800c7b4:	0030      	movs	r0, r6
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	f000 fb1a 	bl	800cdf0 <_sbrk_r>
 800c7bc:	9b01      	ldr	r3, [sp, #4]
 800c7be:	4283      	cmp	r3, r0
 800c7c0:	d143      	bne.n	800c84a <_malloc_r+0xda>
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	3703      	adds	r7, #3
 800c7c6:	1aff      	subs	r7, r7, r3
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	439f      	bics	r7, r3
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	2f0c      	cmp	r7, #12
 800c7d0:	d200      	bcs.n	800c7d4 <_malloc_r+0x64>
 800c7d2:	270c      	movs	r7, #12
 800c7d4:	0039      	movs	r1, r7
 800c7d6:	0030      	movs	r0, r6
 800c7d8:	f7ff ffa8 	bl	800c72c <sbrk_aligned>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d034      	beq.n	800c84a <_malloc_r+0xda>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	19df      	adds	r7, r3, r7
 800c7e4:	6027      	str	r7, [r4, #0]
 800c7e6:	e013      	b.n	800c810 <_malloc_r+0xa0>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dacb      	bge.n	800c784 <_malloc_r+0x14>
 800c7ec:	230c      	movs	r3, #12
 800c7ee:	2500      	movs	r5, #0
 800c7f0:	6033      	str	r3, [r6, #0]
 800c7f2:	0028      	movs	r0, r5
 800c7f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7f6:	6822      	ldr	r2, [r4, #0]
 800c7f8:	1bd1      	subs	r1, r2, r7
 800c7fa:	d420      	bmi.n	800c83e <_malloc_r+0xce>
 800c7fc:	290b      	cmp	r1, #11
 800c7fe:	d917      	bls.n	800c830 <_malloc_r+0xc0>
 800c800:	19e2      	adds	r2, r4, r7
 800c802:	6027      	str	r7, [r4, #0]
 800c804:	42a3      	cmp	r3, r4
 800c806:	d111      	bne.n	800c82c <_malloc_r+0xbc>
 800c808:	602a      	str	r2, [r5, #0]
 800c80a:	6863      	ldr	r3, [r4, #4]
 800c80c:	6011      	str	r1, [r2, #0]
 800c80e:	6053      	str	r3, [r2, #4]
 800c810:	0030      	movs	r0, r6
 800c812:	0025      	movs	r5, r4
 800c814:	f000 fc12 	bl	800d03c <__malloc_unlock>
 800c818:	2207      	movs	r2, #7
 800c81a:	350b      	adds	r5, #11
 800c81c:	1d23      	adds	r3, r4, #4
 800c81e:	4395      	bics	r5, r2
 800c820:	1aea      	subs	r2, r5, r3
 800c822:	429d      	cmp	r5, r3
 800c824:	d0e5      	beq.n	800c7f2 <_malloc_r+0x82>
 800c826:	1b5b      	subs	r3, r3, r5
 800c828:	50a3      	str	r3, [r4, r2]
 800c82a:	e7e2      	b.n	800c7f2 <_malloc_r+0x82>
 800c82c:	605a      	str	r2, [r3, #4]
 800c82e:	e7ec      	b.n	800c80a <_malloc_r+0x9a>
 800c830:	6862      	ldr	r2, [r4, #4]
 800c832:	42a3      	cmp	r3, r4
 800c834:	d101      	bne.n	800c83a <_malloc_r+0xca>
 800c836:	602a      	str	r2, [r5, #0]
 800c838:	e7ea      	b.n	800c810 <_malloc_r+0xa0>
 800c83a:	605a      	str	r2, [r3, #4]
 800c83c:	e7e8      	b.n	800c810 <_malloc_r+0xa0>
 800c83e:	0023      	movs	r3, r4
 800c840:	6864      	ldr	r4, [r4, #4]
 800c842:	e7a7      	b.n	800c794 <_malloc_r+0x24>
 800c844:	002c      	movs	r4, r5
 800c846:	686d      	ldr	r5, [r5, #4]
 800c848:	e7af      	b.n	800c7aa <_malloc_r+0x3a>
 800c84a:	230c      	movs	r3, #12
 800c84c:	0030      	movs	r0, r6
 800c84e:	6033      	str	r3, [r6, #0]
 800c850:	f000 fbf4 	bl	800d03c <__malloc_unlock>
 800c854:	e7cd      	b.n	800c7f2 <_malloc_r+0x82>
 800c856:	46c0      	nop			; (mov r8, r8)
 800c858:	200004e8 	.word	0x200004e8

0800c85c <__ssputs_r>:
 800c85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85e:	688e      	ldr	r6, [r1, #8]
 800c860:	b085      	sub	sp, #20
 800c862:	0007      	movs	r7, r0
 800c864:	000c      	movs	r4, r1
 800c866:	9203      	str	r2, [sp, #12]
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	429e      	cmp	r6, r3
 800c86c:	d83c      	bhi.n	800c8e8 <__ssputs_r+0x8c>
 800c86e:	2390      	movs	r3, #144	; 0x90
 800c870:	898a      	ldrh	r2, [r1, #12]
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	421a      	tst	r2, r3
 800c876:	d034      	beq.n	800c8e2 <__ssputs_r+0x86>
 800c878:	6909      	ldr	r1, [r1, #16]
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	6960      	ldr	r0, [r4, #20]
 800c87e:	1a5b      	subs	r3, r3, r1
 800c880:	9302      	str	r3, [sp, #8]
 800c882:	2303      	movs	r3, #3
 800c884:	4343      	muls	r3, r0
 800c886:	0fdd      	lsrs	r5, r3, #31
 800c888:	18ed      	adds	r5, r5, r3
 800c88a:	9b01      	ldr	r3, [sp, #4]
 800c88c:	9802      	ldr	r0, [sp, #8]
 800c88e:	3301      	adds	r3, #1
 800c890:	181b      	adds	r3, r3, r0
 800c892:	106d      	asrs	r5, r5, #1
 800c894:	42ab      	cmp	r3, r5
 800c896:	d900      	bls.n	800c89a <__ssputs_r+0x3e>
 800c898:	001d      	movs	r5, r3
 800c89a:	0553      	lsls	r3, r2, #21
 800c89c:	d532      	bpl.n	800c904 <__ssputs_r+0xa8>
 800c89e:	0029      	movs	r1, r5
 800c8a0:	0038      	movs	r0, r7
 800c8a2:	f7ff ff65 	bl	800c770 <_malloc_r>
 800c8a6:	1e06      	subs	r6, r0, #0
 800c8a8:	d109      	bne.n	800c8be <__ssputs_r+0x62>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	603b      	str	r3, [r7, #0]
 800c8ae:	2340      	movs	r3, #64	; 0x40
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	89a2      	ldrh	r2, [r4, #12]
 800c8b4:	4240      	negs	r0, r0
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	b005      	add	sp, #20
 800c8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8be:	9a02      	ldr	r2, [sp, #8]
 800c8c0:	6921      	ldr	r1, [r4, #16]
 800c8c2:	f7fb fe99 	bl	80085f8 <memcpy>
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	4a14      	ldr	r2, [pc, #80]	; (800c91c <__ssputs_r+0xc0>)
 800c8ca:	401a      	ands	r2, r3
 800c8cc:	2380      	movs	r3, #128	; 0x80
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	81a3      	strh	r3, [r4, #12]
 800c8d2:	9b02      	ldr	r3, [sp, #8]
 800c8d4:	6126      	str	r6, [r4, #16]
 800c8d6:	18f6      	adds	r6, r6, r3
 800c8d8:	6026      	str	r6, [r4, #0]
 800c8da:	6165      	str	r5, [r4, #20]
 800c8dc:	9e01      	ldr	r6, [sp, #4]
 800c8de:	1aed      	subs	r5, r5, r3
 800c8e0:	60a5      	str	r5, [r4, #8]
 800c8e2:	9b01      	ldr	r3, [sp, #4]
 800c8e4:	429e      	cmp	r6, r3
 800c8e6:	d900      	bls.n	800c8ea <__ssputs_r+0x8e>
 800c8e8:	9e01      	ldr	r6, [sp, #4]
 800c8ea:	0032      	movs	r2, r6
 800c8ec:	9903      	ldr	r1, [sp, #12]
 800c8ee:	6820      	ldr	r0, [r4, #0]
 800c8f0:	f000 fb88 	bl	800d004 <memmove>
 800c8f4:	68a3      	ldr	r3, [r4, #8]
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	1b9b      	subs	r3, r3, r6
 800c8fa:	60a3      	str	r3, [r4, #8]
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	199e      	adds	r6, r3, r6
 800c900:	6026      	str	r6, [r4, #0]
 800c902:	e7da      	b.n	800c8ba <__ssputs_r+0x5e>
 800c904:	002a      	movs	r2, r5
 800c906:	0038      	movs	r0, r7
 800c908:	f000 fba0 	bl	800d04c <_realloc_r>
 800c90c:	1e06      	subs	r6, r0, #0
 800c90e:	d1e0      	bne.n	800c8d2 <__ssputs_r+0x76>
 800c910:	0038      	movs	r0, r7
 800c912:	6921      	ldr	r1, [r4, #16]
 800c914:	f7ff fec0 	bl	800c698 <_free_r>
 800c918:	e7c7      	b.n	800c8aa <__ssputs_r+0x4e>
 800c91a:	46c0      	nop			; (mov r8, r8)
 800c91c:	fffffb7f 	.word	0xfffffb7f

0800c920 <_svfiprintf_r>:
 800c920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c922:	b0a1      	sub	sp, #132	; 0x84
 800c924:	9003      	str	r0, [sp, #12]
 800c926:	001d      	movs	r5, r3
 800c928:	898b      	ldrh	r3, [r1, #12]
 800c92a:	000f      	movs	r7, r1
 800c92c:	0016      	movs	r6, r2
 800c92e:	061b      	lsls	r3, r3, #24
 800c930:	d511      	bpl.n	800c956 <_svfiprintf_r+0x36>
 800c932:	690b      	ldr	r3, [r1, #16]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10e      	bne.n	800c956 <_svfiprintf_r+0x36>
 800c938:	2140      	movs	r1, #64	; 0x40
 800c93a:	f7ff ff19 	bl	800c770 <_malloc_r>
 800c93e:	6038      	str	r0, [r7, #0]
 800c940:	6138      	str	r0, [r7, #16]
 800c942:	2800      	cmp	r0, #0
 800c944:	d105      	bne.n	800c952 <_svfiprintf_r+0x32>
 800c946:	230c      	movs	r3, #12
 800c948:	9a03      	ldr	r2, [sp, #12]
 800c94a:	3801      	subs	r0, #1
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	b021      	add	sp, #132	; 0x84
 800c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c952:	2340      	movs	r3, #64	; 0x40
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	2300      	movs	r3, #0
 800c958:	ac08      	add	r4, sp, #32
 800c95a:	6163      	str	r3, [r4, #20]
 800c95c:	3320      	adds	r3, #32
 800c95e:	7663      	strb	r3, [r4, #25]
 800c960:	3310      	adds	r3, #16
 800c962:	76a3      	strb	r3, [r4, #26]
 800c964:	9507      	str	r5, [sp, #28]
 800c966:	0035      	movs	r5, r6
 800c968:	782b      	ldrb	r3, [r5, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <_svfiprintf_r+0x52>
 800c96e:	2b25      	cmp	r3, #37	; 0x25
 800c970:	d147      	bne.n	800ca02 <_svfiprintf_r+0xe2>
 800c972:	1bab      	subs	r3, r5, r6
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	42b5      	cmp	r5, r6
 800c978:	d00c      	beq.n	800c994 <_svfiprintf_r+0x74>
 800c97a:	0032      	movs	r2, r6
 800c97c:	0039      	movs	r1, r7
 800c97e:	9803      	ldr	r0, [sp, #12]
 800c980:	f7ff ff6c 	bl	800c85c <__ssputs_r>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d100      	bne.n	800c98a <_svfiprintf_r+0x6a>
 800c988:	e0ae      	b.n	800cae8 <_svfiprintf_r+0x1c8>
 800c98a:	6962      	ldr	r2, [r4, #20]
 800c98c:	9b05      	ldr	r3, [sp, #20]
 800c98e:	4694      	mov	ip, r2
 800c990:	4463      	add	r3, ip
 800c992:	6163      	str	r3, [r4, #20]
 800c994:	782b      	ldrb	r3, [r5, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d100      	bne.n	800c99c <_svfiprintf_r+0x7c>
 800c99a:	e0a5      	b.n	800cae8 <_svfiprintf_r+0x1c8>
 800c99c:	2201      	movs	r2, #1
 800c99e:	2300      	movs	r3, #0
 800c9a0:	4252      	negs	r2, r2
 800c9a2:	6062      	str	r2, [r4, #4]
 800c9a4:	a904      	add	r1, sp, #16
 800c9a6:	3254      	adds	r2, #84	; 0x54
 800c9a8:	1852      	adds	r2, r2, r1
 800c9aa:	1c6e      	adds	r6, r5, #1
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	60e3      	str	r3, [r4, #12]
 800c9b0:	60a3      	str	r3, [r4, #8]
 800c9b2:	7013      	strb	r3, [r2, #0]
 800c9b4:	65a3      	str	r3, [r4, #88]	; 0x58
 800c9b6:	2205      	movs	r2, #5
 800c9b8:	7831      	ldrb	r1, [r6, #0]
 800c9ba:	4854      	ldr	r0, [pc, #336]	; (800cb0c <_svfiprintf_r+0x1ec>)
 800c9bc:	f7ff f96a 	bl	800bc94 <memchr>
 800c9c0:	1c75      	adds	r5, r6, #1
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d11f      	bne.n	800ca06 <_svfiprintf_r+0xe6>
 800c9c6:	6822      	ldr	r2, [r4, #0]
 800c9c8:	06d3      	lsls	r3, r2, #27
 800c9ca:	d504      	bpl.n	800c9d6 <_svfiprintf_r+0xb6>
 800c9cc:	2353      	movs	r3, #83	; 0x53
 800c9ce:	a904      	add	r1, sp, #16
 800c9d0:	185b      	adds	r3, r3, r1
 800c9d2:	2120      	movs	r1, #32
 800c9d4:	7019      	strb	r1, [r3, #0]
 800c9d6:	0713      	lsls	r3, r2, #28
 800c9d8:	d504      	bpl.n	800c9e4 <_svfiprintf_r+0xc4>
 800c9da:	2353      	movs	r3, #83	; 0x53
 800c9dc:	a904      	add	r1, sp, #16
 800c9de:	185b      	adds	r3, r3, r1
 800c9e0:	212b      	movs	r1, #43	; 0x2b
 800c9e2:	7019      	strb	r1, [r3, #0]
 800c9e4:	7833      	ldrb	r3, [r6, #0]
 800c9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e8:	d016      	beq.n	800ca18 <_svfiprintf_r+0xf8>
 800c9ea:	0035      	movs	r5, r6
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	200a      	movs	r0, #10
 800c9f0:	68e3      	ldr	r3, [r4, #12]
 800c9f2:	782a      	ldrb	r2, [r5, #0]
 800c9f4:	1c6e      	adds	r6, r5, #1
 800c9f6:	3a30      	subs	r2, #48	; 0x30
 800c9f8:	2a09      	cmp	r2, #9
 800c9fa:	d94e      	bls.n	800ca9a <_svfiprintf_r+0x17a>
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	d111      	bne.n	800ca24 <_svfiprintf_r+0x104>
 800ca00:	e017      	b.n	800ca32 <_svfiprintf_r+0x112>
 800ca02:	3501      	adds	r5, #1
 800ca04:	e7b0      	b.n	800c968 <_svfiprintf_r+0x48>
 800ca06:	4b41      	ldr	r3, [pc, #260]	; (800cb0c <_svfiprintf_r+0x1ec>)
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	1ac0      	subs	r0, r0, r3
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	4083      	lsls	r3, r0
 800ca10:	4313      	orrs	r3, r2
 800ca12:	002e      	movs	r6, r5
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	e7ce      	b.n	800c9b6 <_svfiprintf_r+0x96>
 800ca18:	9b07      	ldr	r3, [sp, #28]
 800ca1a:	1d19      	adds	r1, r3, #4
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	9107      	str	r1, [sp, #28]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	db01      	blt.n	800ca28 <_svfiprintf_r+0x108>
 800ca24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca26:	e004      	b.n	800ca32 <_svfiprintf_r+0x112>
 800ca28:	425b      	negs	r3, r3
 800ca2a:	60e3      	str	r3, [r4, #12]
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	782b      	ldrb	r3, [r5, #0]
 800ca34:	2b2e      	cmp	r3, #46	; 0x2e
 800ca36:	d10a      	bne.n	800ca4e <_svfiprintf_r+0x12e>
 800ca38:	786b      	ldrb	r3, [r5, #1]
 800ca3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca3c:	d135      	bne.n	800caaa <_svfiprintf_r+0x18a>
 800ca3e:	9b07      	ldr	r3, [sp, #28]
 800ca40:	3502      	adds	r5, #2
 800ca42:	1d1a      	adds	r2, r3, #4
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	9207      	str	r2, [sp, #28]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	db2b      	blt.n	800caa4 <_svfiprintf_r+0x184>
 800ca4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4e:	4e30      	ldr	r6, [pc, #192]	; (800cb10 <_svfiprintf_r+0x1f0>)
 800ca50:	2203      	movs	r2, #3
 800ca52:	0030      	movs	r0, r6
 800ca54:	7829      	ldrb	r1, [r5, #0]
 800ca56:	f7ff f91d 	bl	800bc94 <memchr>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d006      	beq.n	800ca6c <_svfiprintf_r+0x14c>
 800ca5e:	2340      	movs	r3, #64	; 0x40
 800ca60:	1b80      	subs	r0, r0, r6
 800ca62:	4083      	lsls	r3, r0
 800ca64:	6822      	ldr	r2, [r4, #0]
 800ca66:	3501      	adds	r5, #1
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	7829      	ldrb	r1, [r5, #0]
 800ca6e:	2206      	movs	r2, #6
 800ca70:	4828      	ldr	r0, [pc, #160]	; (800cb14 <_svfiprintf_r+0x1f4>)
 800ca72:	1c6e      	adds	r6, r5, #1
 800ca74:	7621      	strb	r1, [r4, #24]
 800ca76:	f7ff f90d 	bl	800bc94 <memchr>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d03c      	beq.n	800caf8 <_svfiprintf_r+0x1d8>
 800ca7e:	4b26      	ldr	r3, [pc, #152]	; (800cb18 <_svfiprintf_r+0x1f8>)
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d125      	bne.n	800cad0 <_svfiprintf_r+0x1b0>
 800ca84:	2207      	movs	r2, #7
 800ca86:	9b07      	ldr	r3, [sp, #28]
 800ca88:	3307      	adds	r3, #7
 800ca8a:	4393      	bics	r3, r2
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	9307      	str	r3, [sp, #28]
 800ca90:	6963      	ldr	r3, [r4, #20]
 800ca92:	9a04      	ldr	r2, [sp, #16]
 800ca94:	189b      	adds	r3, r3, r2
 800ca96:	6163      	str	r3, [r4, #20]
 800ca98:	e765      	b.n	800c966 <_svfiprintf_r+0x46>
 800ca9a:	4343      	muls	r3, r0
 800ca9c:	0035      	movs	r5, r6
 800ca9e:	2101      	movs	r1, #1
 800caa0:	189b      	adds	r3, r3, r2
 800caa2:	e7a6      	b.n	800c9f2 <_svfiprintf_r+0xd2>
 800caa4:	2301      	movs	r3, #1
 800caa6:	425b      	negs	r3, r3
 800caa8:	e7d0      	b.n	800ca4c <_svfiprintf_r+0x12c>
 800caaa:	2300      	movs	r3, #0
 800caac:	200a      	movs	r0, #10
 800caae:	001a      	movs	r2, r3
 800cab0:	3501      	adds	r5, #1
 800cab2:	6063      	str	r3, [r4, #4]
 800cab4:	7829      	ldrb	r1, [r5, #0]
 800cab6:	1c6e      	adds	r6, r5, #1
 800cab8:	3930      	subs	r1, #48	; 0x30
 800caba:	2909      	cmp	r1, #9
 800cabc:	d903      	bls.n	800cac6 <_svfiprintf_r+0x1a6>
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d0c5      	beq.n	800ca4e <_svfiprintf_r+0x12e>
 800cac2:	9209      	str	r2, [sp, #36]	; 0x24
 800cac4:	e7c3      	b.n	800ca4e <_svfiprintf_r+0x12e>
 800cac6:	4342      	muls	r2, r0
 800cac8:	0035      	movs	r5, r6
 800caca:	2301      	movs	r3, #1
 800cacc:	1852      	adds	r2, r2, r1
 800cace:	e7f1      	b.n	800cab4 <_svfiprintf_r+0x194>
 800cad0:	ab07      	add	r3, sp, #28
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	003a      	movs	r2, r7
 800cad6:	0021      	movs	r1, r4
 800cad8:	4b10      	ldr	r3, [pc, #64]	; (800cb1c <_svfiprintf_r+0x1fc>)
 800cada:	9803      	ldr	r0, [sp, #12]
 800cadc:	f7fb fe48 	bl	8008770 <_printf_float>
 800cae0:	9004      	str	r0, [sp, #16]
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	3301      	adds	r3, #1
 800cae6:	d1d3      	bne.n	800ca90 <_svfiprintf_r+0x170>
 800cae8:	89bb      	ldrh	r3, [r7, #12]
 800caea:	980d      	ldr	r0, [sp, #52]	; 0x34
 800caec:	065b      	lsls	r3, r3, #25
 800caee:	d400      	bmi.n	800caf2 <_svfiprintf_r+0x1d2>
 800caf0:	e72d      	b.n	800c94e <_svfiprintf_r+0x2e>
 800caf2:	2001      	movs	r0, #1
 800caf4:	4240      	negs	r0, r0
 800caf6:	e72a      	b.n	800c94e <_svfiprintf_r+0x2e>
 800caf8:	ab07      	add	r3, sp, #28
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	003a      	movs	r2, r7
 800cafe:	0021      	movs	r1, r4
 800cb00:	4b06      	ldr	r3, [pc, #24]	; (800cb1c <_svfiprintf_r+0x1fc>)
 800cb02:	9803      	ldr	r0, [sp, #12]
 800cb04:	f7fc f8e6 	bl	8008cd4 <_printf_i>
 800cb08:	e7ea      	b.n	800cae0 <_svfiprintf_r+0x1c0>
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	0800d764 	.word	0x0800d764
 800cb10:	0800d76a 	.word	0x0800d76a
 800cb14:	0800d76e 	.word	0x0800d76e
 800cb18:	08008771 	.word	0x08008771
 800cb1c:	0800c85d 	.word	0x0800c85d

0800cb20 <__sfputc_r>:
 800cb20:	6893      	ldr	r3, [r2, #8]
 800cb22:	b510      	push	{r4, lr}
 800cb24:	3b01      	subs	r3, #1
 800cb26:	6093      	str	r3, [r2, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	da04      	bge.n	800cb36 <__sfputc_r+0x16>
 800cb2c:	6994      	ldr	r4, [r2, #24]
 800cb2e:	42a3      	cmp	r3, r4
 800cb30:	db07      	blt.n	800cb42 <__sfputc_r+0x22>
 800cb32:	290a      	cmp	r1, #10
 800cb34:	d005      	beq.n	800cb42 <__sfputc_r+0x22>
 800cb36:	6813      	ldr	r3, [r2, #0]
 800cb38:	1c58      	adds	r0, r3, #1
 800cb3a:	6010      	str	r0, [r2, #0]
 800cb3c:	7019      	strb	r1, [r3, #0]
 800cb3e:	0008      	movs	r0, r1
 800cb40:	bd10      	pop	{r4, pc}
 800cb42:	f7fd fb61 	bl	800a208 <__swbuf_r>
 800cb46:	0001      	movs	r1, r0
 800cb48:	e7f9      	b.n	800cb3e <__sfputc_r+0x1e>

0800cb4a <__sfputs_r>:
 800cb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4c:	0006      	movs	r6, r0
 800cb4e:	000f      	movs	r7, r1
 800cb50:	0014      	movs	r4, r2
 800cb52:	18d5      	adds	r5, r2, r3
 800cb54:	42ac      	cmp	r4, r5
 800cb56:	d101      	bne.n	800cb5c <__sfputs_r+0x12>
 800cb58:	2000      	movs	r0, #0
 800cb5a:	e007      	b.n	800cb6c <__sfputs_r+0x22>
 800cb5c:	7821      	ldrb	r1, [r4, #0]
 800cb5e:	003a      	movs	r2, r7
 800cb60:	0030      	movs	r0, r6
 800cb62:	f7ff ffdd 	bl	800cb20 <__sfputc_r>
 800cb66:	3401      	adds	r4, #1
 800cb68:	1c43      	adds	r3, r0, #1
 800cb6a:	d1f3      	bne.n	800cb54 <__sfputs_r+0xa>
 800cb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb70 <_vfiprintf_r>:
 800cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb72:	b0a1      	sub	sp, #132	; 0x84
 800cb74:	0006      	movs	r6, r0
 800cb76:	000c      	movs	r4, r1
 800cb78:	001f      	movs	r7, r3
 800cb7a:	9203      	str	r2, [sp, #12]
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d004      	beq.n	800cb8a <_vfiprintf_r+0x1a>
 800cb80:	6983      	ldr	r3, [r0, #24]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <_vfiprintf_r+0x1a>
 800cb86:	f7fe fbe1 	bl	800b34c <__sinit>
 800cb8a:	4b8e      	ldr	r3, [pc, #568]	; (800cdc4 <_vfiprintf_r+0x254>)
 800cb8c:	429c      	cmp	r4, r3
 800cb8e:	d11c      	bne.n	800cbca <_vfiprintf_r+0x5a>
 800cb90:	6874      	ldr	r4, [r6, #4]
 800cb92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb94:	07db      	lsls	r3, r3, #31
 800cb96:	d405      	bmi.n	800cba4 <_vfiprintf_r+0x34>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	059b      	lsls	r3, r3, #22
 800cb9c:	d402      	bmi.n	800cba4 <_vfiprintf_r+0x34>
 800cb9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cba0:	f7fe ffed 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	071b      	lsls	r3, r3, #28
 800cba8:	d502      	bpl.n	800cbb0 <_vfiprintf_r+0x40>
 800cbaa:	6923      	ldr	r3, [r4, #16]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d11d      	bne.n	800cbec <_vfiprintf_r+0x7c>
 800cbb0:	0021      	movs	r1, r4
 800cbb2:	0030      	movs	r0, r6
 800cbb4:	f7fd fb7e 	bl	800a2b4 <__swsetup_r>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d017      	beq.n	800cbec <_vfiprintf_r+0x7c>
 800cbbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbbe:	07db      	lsls	r3, r3, #31
 800cbc0:	d50d      	bpl.n	800cbde <_vfiprintf_r+0x6e>
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	4240      	negs	r0, r0
 800cbc6:	b021      	add	sp, #132	; 0x84
 800cbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbca:	4b7f      	ldr	r3, [pc, #508]	; (800cdc8 <_vfiprintf_r+0x258>)
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	d101      	bne.n	800cbd4 <_vfiprintf_r+0x64>
 800cbd0:	68b4      	ldr	r4, [r6, #8]
 800cbd2:	e7de      	b.n	800cb92 <_vfiprintf_r+0x22>
 800cbd4:	4b7d      	ldr	r3, [pc, #500]	; (800cdcc <_vfiprintf_r+0x25c>)
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	d1db      	bne.n	800cb92 <_vfiprintf_r+0x22>
 800cbda:	68f4      	ldr	r4, [r6, #12]
 800cbdc:	e7d9      	b.n	800cb92 <_vfiprintf_r+0x22>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	059b      	lsls	r3, r3, #22
 800cbe2:	d4ee      	bmi.n	800cbc2 <_vfiprintf_r+0x52>
 800cbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbe6:	f7fe ffcb 	bl	800bb80 <__retarget_lock_release_recursive>
 800cbea:	e7ea      	b.n	800cbc2 <_vfiprintf_r+0x52>
 800cbec:	2300      	movs	r3, #0
 800cbee:	ad08      	add	r5, sp, #32
 800cbf0:	616b      	str	r3, [r5, #20]
 800cbf2:	3320      	adds	r3, #32
 800cbf4:	766b      	strb	r3, [r5, #25]
 800cbf6:	3310      	adds	r3, #16
 800cbf8:	76ab      	strb	r3, [r5, #26]
 800cbfa:	9707      	str	r7, [sp, #28]
 800cbfc:	9f03      	ldr	r7, [sp, #12]
 800cbfe:	783b      	ldrb	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <_vfiprintf_r+0x98>
 800cc04:	2b25      	cmp	r3, #37	; 0x25
 800cc06:	d14e      	bne.n	800cca6 <_vfiprintf_r+0x136>
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	1afb      	subs	r3, r7, r3
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	9b03      	ldr	r3, [sp, #12]
 800cc10:	429f      	cmp	r7, r3
 800cc12:	d00d      	beq.n	800cc30 <_vfiprintf_r+0xc0>
 800cc14:	9b05      	ldr	r3, [sp, #20]
 800cc16:	0021      	movs	r1, r4
 800cc18:	0030      	movs	r0, r6
 800cc1a:	9a03      	ldr	r2, [sp, #12]
 800cc1c:	f7ff ff95 	bl	800cb4a <__sfputs_r>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d100      	bne.n	800cc26 <_vfiprintf_r+0xb6>
 800cc24:	e0b5      	b.n	800cd92 <_vfiprintf_r+0x222>
 800cc26:	696a      	ldr	r2, [r5, #20]
 800cc28:	9b05      	ldr	r3, [sp, #20]
 800cc2a:	4694      	mov	ip, r2
 800cc2c:	4463      	add	r3, ip
 800cc2e:	616b      	str	r3, [r5, #20]
 800cc30:	783b      	ldrb	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d100      	bne.n	800cc38 <_vfiprintf_r+0xc8>
 800cc36:	e0ac      	b.n	800cd92 <_vfiprintf_r+0x222>
 800cc38:	2201      	movs	r2, #1
 800cc3a:	1c7b      	adds	r3, r7, #1
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4252      	negs	r2, r2
 800cc42:	606a      	str	r2, [r5, #4]
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	3254      	adds	r2, #84	; 0x54
 800cc48:	1852      	adds	r2, r2, r1
 800cc4a:	602b      	str	r3, [r5, #0]
 800cc4c:	60eb      	str	r3, [r5, #12]
 800cc4e:	60ab      	str	r3, [r5, #8]
 800cc50:	7013      	strb	r3, [r2, #0]
 800cc52:	65ab      	str	r3, [r5, #88]	; 0x58
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	2205      	movs	r2, #5
 800cc58:	7819      	ldrb	r1, [r3, #0]
 800cc5a:	485d      	ldr	r0, [pc, #372]	; (800cdd0 <_vfiprintf_r+0x260>)
 800cc5c:	f7ff f81a 	bl	800bc94 <memchr>
 800cc60:	9b03      	ldr	r3, [sp, #12]
 800cc62:	1c5f      	adds	r7, r3, #1
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d120      	bne.n	800ccaa <_vfiprintf_r+0x13a>
 800cc68:	682a      	ldr	r2, [r5, #0]
 800cc6a:	06d3      	lsls	r3, r2, #27
 800cc6c:	d504      	bpl.n	800cc78 <_vfiprintf_r+0x108>
 800cc6e:	2353      	movs	r3, #83	; 0x53
 800cc70:	a904      	add	r1, sp, #16
 800cc72:	185b      	adds	r3, r3, r1
 800cc74:	2120      	movs	r1, #32
 800cc76:	7019      	strb	r1, [r3, #0]
 800cc78:	0713      	lsls	r3, r2, #28
 800cc7a:	d504      	bpl.n	800cc86 <_vfiprintf_r+0x116>
 800cc7c:	2353      	movs	r3, #83	; 0x53
 800cc7e:	a904      	add	r1, sp, #16
 800cc80:	185b      	adds	r3, r3, r1
 800cc82:	212b      	movs	r1, #43	; 0x2b
 800cc84:	7019      	strb	r1, [r3, #0]
 800cc86:	9b03      	ldr	r3, [sp, #12]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc8c:	d016      	beq.n	800ccbc <_vfiprintf_r+0x14c>
 800cc8e:	2100      	movs	r1, #0
 800cc90:	68eb      	ldr	r3, [r5, #12]
 800cc92:	9f03      	ldr	r7, [sp, #12]
 800cc94:	783a      	ldrb	r2, [r7, #0]
 800cc96:	1c78      	adds	r0, r7, #1
 800cc98:	3a30      	subs	r2, #48	; 0x30
 800cc9a:	4684      	mov	ip, r0
 800cc9c:	2a09      	cmp	r2, #9
 800cc9e:	d94f      	bls.n	800cd40 <_vfiprintf_r+0x1d0>
 800cca0:	2900      	cmp	r1, #0
 800cca2:	d111      	bne.n	800ccc8 <_vfiprintf_r+0x158>
 800cca4:	e017      	b.n	800ccd6 <_vfiprintf_r+0x166>
 800cca6:	3701      	adds	r7, #1
 800cca8:	e7a9      	b.n	800cbfe <_vfiprintf_r+0x8e>
 800ccaa:	4b49      	ldr	r3, [pc, #292]	; (800cdd0 <_vfiprintf_r+0x260>)
 800ccac:	682a      	ldr	r2, [r5, #0]
 800ccae:	1ac0      	subs	r0, r0, r3
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	4083      	lsls	r3, r0
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	602b      	str	r3, [r5, #0]
 800ccb8:	9703      	str	r7, [sp, #12]
 800ccba:	e7cb      	b.n	800cc54 <_vfiprintf_r+0xe4>
 800ccbc:	9b07      	ldr	r3, [sp, #28]
 800ccbe:	1d19      	adds	r1, r3, #4
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	9107      	str	r1, [sp, #28]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	db01      	blt.n	800cccc <_vfiprintf_r+0x15c>
 800ccc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccca:	e004      	b.n	800ccd6 <_vfiprintf_r+0x166>
 800cccc:	425b      	negs	r3, r3
 800ccce:	60eb      	str	r3, [r5, #12]
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	783b      	ldrb	r3, [r7, #0]
 800ccd8:	2b2e      	cmp	r3, #46	; 0x2e
 800ccda:	d10a      	bne.n	800ccf2 <_vfiprintf_r+0x182>
 800ccdc:	787b      	ldrb	r3, [r7, #1]
 800ccde:	2b2a      	cmp	r3, #42	; 0x2a
 800cce0:	d137      	bne.n	800cd52 <_vfiprintf_r+0x1e2>
 800cce2:	9b07      	ldr	r3, [sp, #28]
 800cce4:	3702      	adds	r7, #2
 800cce6:	1d1a      	adds	r2, r3, #4
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	9207      	str	r2, [sp, #28]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	db2d      	blt.n	800cd4c <_vfiprintf_r+0x1dc>
 800ccf0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf2:	2203      	movs	r2, #3
 800ccf4:	7839      	ldrb	r1, [r7, #0]
 800ccf6:	4837      	ldr	r0, [pc, #220]	; (800cdd4 <_vfiprintf_r+0x264>)
 800ccf8:	f7fe ffcc 	bl	800bc94 <memchr>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d007      	beq.n	800cd10 <_vfiprintf_r+0x1a0>
 800cd00:	4b34      	ldr	r3, [pc, #208]	; (800cdd4 <_vfiprintf_r+0x264>)
 800cd02:	682a      	ldr	r2, [r5, #0]
 800cd04:	1ac0      	subs	r0, r0, r3
 800cd06:	2340      	movs	r3, #64	; 0x40
 800cd08:	4083      	lsls	r3, r0
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	3701      	adds	r7, #1
 800cd0e:	602b      	str	r3, [r5, #0]
 800cd10:	7839      	ldrb	r1, [r7, #0]
 800cd12:	1c7b      	adds	r3, r7, #1
 800cd14:	2206      	movs	r2, #6
 800cd16:	4830      	ldr	r0, [pc, #192]	; (800cdd8 <_vfiprintf_r+0x268>)
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	7629      	strb	r1, [r5, #24]
 800cd1c:	f7fe ffba 	bl	800bc94 <memchr>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d045      	beq.n	800cdb0 <_vfiprintf_r+0x240>
 800cd24:	4b2d      	ldr	r3, [pc, #180]	; (800cddc <_vfiprintf_r+0x26c>)
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d127      	bne.n	800cd7a <_vfiprintf_r+0x20a>
 800cd2a:	2207      	movs	r2, #7
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	3307      	adds	r3, #7
 800cd30:	4393      	bics	r3, r2
 800cd32:	3308      	adds	r3, #8
 800cd34:	9307      	str	r3, [sp, #28]
 800cd36:	696b      	ldr	r3, [r5, #20]
 800cd38:	9a04      	ldr	r2, [sp, #16]
 800cd3a:	189b      	adds	r3, r3, r2
 800cd3c:	616b      	str	r3, [r5, #20]
 800cd3e:	e75d      	b.n	800cbfc <_vfiprintf_r+0x8c>
 800cd40:	210a      	movs	r1, #10
 800cd42:	434b      	muls	r3, r1
 800cd44:	4667      	mov	r7, ip
 800cd46:	189b      	adds	r3, r3, r2
 800cd48:	3909      	subs	r1, #9
 800cd4a:	e7a3      	b.n	800cc94 <_vfiprintf_r+0x124>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	425b      	negs	r3, r3
 800cd50:	e7ce      	b.n	800ccf0 <_vfiprintf_r+0x180>
 800cd52:	2300      	movs	r3, #0
 800cd54:	001a      	movs	r2, r3
 800cd56:	3701      	adds	r7, #1
 800cd58:	606b      	str	r3, [r5, #4]
 800cd5a:	7839      	ldrb	r1, [r7, #0]
 800cd5c:	1c78      	adds	r0, r7, #1
 800cd5e:	3930      	subs	r1, #48	; 0x30
 800cd60:	4684      	mov	ip, r0
 800cd62:	2909      	cmp	r1, #9
 800cd64:	d903      	bls.n	800cd6e <_vfiprintf_r+0x1fe>
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0c3      	beq.n	800ccf2 <_vfiprintf_r+0x182>
 800cd6a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd6c:	e7c1      	b.n	800ccf2 <_vfiprintf_r+0x182>
 800cd6e:	230a      	movs	r3, #10
 800cd70:	435a      	muls	r2, r3
 800cd72:	4667      	mov	r7, ip
 800cd74:	1852      	adds	r2, r2, r1
 800cd76:	3b09      	subs	r3, #9
 800cd78:	e7ef      	b.n	800cd5a <_vfiprintf_r+0x1ea>
 800cd7a:	ab07      	add	r3, sp, #28
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	0022      	movs	r2, r4
 800cd80:	0029      	movs	r1, r5
 800cd82:	0030      	movs	r0, r6
 800cd84:	4b16      	ldr	r3, [pc, #88]	; (800cde0 <_vfiprintf_r+0x270>)
 800cd86:	f7fb fcf3 	bl	8008770 <_printf_float>
 800cd8a:	9004      	str	r0, [sp, #16]
 800cd8c:	9b04      	ldr	r3, [sp, #16]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	d1d1      	bne.n	800cd36 <_vfiprintf_r+0x1c6>
 800cd92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd94:	07db      	lsls	r3, r3, #31
 800cd96:	d405      	bmi.n	800cda4 <_vfiprintf_r+0x234>
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	059b      	lsls	r3, r3, #22
 800cd9c:	d402      	bmi.n	800cda4 <_vfiprintf_r+0x234>
 800cd9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cda0:	f7fe feee 	bl	800bb80 <__retarget_lock_release_recursive>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	065b      	lsls	r3, r3, #25
 800cda8:	d500      	bpl.n	800cdac <_vfiprintf_r+0x23c>
 800cdaa:	e70a      	b.n	800cbc2 <_vfiprintf_r+0x52>
 800cdac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cdae:	e70a      	b.n	800cbc6 <_vfiprintf_r+0x56>
 800cdb0:	ab07      	add	r3, sp, #28
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	0022      	movs	r2, r4
 800cdb6:	0029      	movs	r1, r5
 800cdb8:	0030      	movs	r0, r6
 800cdba:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <_vfiprintf_r+0x270>)
 800cdbc:	f7fb ff8a 	bl	8008cd4 <_printf_i>
 800cdc0:	e7e3      	b.n	800cd8a <_vfiprintf_r+0x21a>
 800cdc2:	46c0      	nop			; (mov r8, r8)
 800cdc4:	0800d54c 	.word	0x0800d54c
 800cdc8:	0800d56c 	.word	0x0800d56c
 800cdcc:	0800d52c 	.word	0x0800d52c
 800cdd0:	0800d764 	.word	0x0800d764
 800cdd4:	0800d76a 	.word	0x0800d76a
 800cdd8:	0800d76e 	.word	0x0800d76e
 800cddc:	08008771 	.word	0x08008771
 800cde0:	0800cb4b 	.word	0x0800cb4b

0800cde4 <nan>:
 800cde4:	2000      	movs	r0, #0
 800cde6:	4901      	ldr	r1, [pc, #4]	; (800cdec <nan+0x8>)
 800cde8:	4770      	bx	lr
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	7ff80000 	.word	0x7ff80000

0800cdf0 <_sbrk_r>:
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	b570      	push	{r4, r5, r6, lr}
 800cdf4:	4d06      	ldr	r5, [pc, #24]	; (800ce10 <_sbrk_r+0x20>)
 800cdf6:	0004      	movs	r4, r0
 800cdf8:	0008      	movs	r0, r1
 800cdfa:	602b      	str	r3, [r5, #0]
 800cdfc:	f7f6 fae0 	bl	80033c0 <_sbrk>
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d103      	bne.n	800ce0c <_sbrk_r+0x1c>
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d000      	beq.n	800ce0c <_sbrk_r+0x1c>
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	bd70      	pop	{r4, r5, r6, pc}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	200004f0 	.word	0x200004f0

0800ce14 <__sread>:
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	000c      	movs	r4, r1
 800ce18:	250e      	movs	r5, #14
 800ce1a:	5f49      	ldrsh	r1, [r1, r5]
 800ce1c:	f000 f946 	bl	800d0ac <_read_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	db03      	blt.n	800ce2c <__sread+0x18>
 800ce24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce26:	181b      	adds	r3, r3, r0
 800ce28:	6563      	str	r3, [r4, #84]	; 0x54
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	4a02      	ldr	r2, [pc, #8]	; (800ce38 <__sread+0x24>)
 800ce30:	4013      	ands	r3, r2
 800ce32:	81a3      	strh	r3, [r4, #12]
 800ce34:	e7f9      	b.n	800ce2a <__sread+0x16>
 800ce36:	46c0      	nop			; (mov r8, r8)
 800ce38:	ffffefff 	.word	0xffffefff

0800ce3c <__swrite>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	001f      	movs	r7, r3
 800ce40:	898b      	ldrh	r3, [r1, #12]
 800ce42:	0005      	movs	r5, r0
 800ce44:	000c      	movs	r4, r1
 800ce46:	0016      	movs	r6, r2
 800ce48:	05db      	lsls	r3, r3, #23
 800ce4a:	d505      	bpl.n	800ce58 <__swrite+0x1c>
 800ce4c:	230e      	movs	r3, #14
 800ce4e:	5ec9      	ldrsh	r1, [r1, r3]
 800ce50:	2200      	movs	r2, #0
 800ce52:	2302      	movs	r3, #2
 800ce54:	f000 f8c2 	bl	800cfdc <_lseek_r>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	4a05      	ldr	r2, [pc, #20]	; (800ce70 <__swrite+0x34>)
 800ce5c:	0028      	movs	r0, r5
 800ce5e:	4013      	ands	r3, r2
 800ce60:	81a3      	strh	r3, [r4, #12]
 800ce62:	0032      	movs	r2, r6
 800ce64:	230e      	movs	r3, #14
 800ce66:	5ee1      	ldrsh	r1, [r4, r3]
 800ce68:	003b      	movs	r3, r7
 800ce6a:	f000 f83f 	bl	800ceec <_write_r>
 800ce6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce70:	ffffefff 	.word	0xffffefff

0800ce74 <__sseek>:
 800ce74:	b570      	push	{r4, r5, r6, lr}
 800ce76:	000c      	movs	r4, r1
 800ce78:	250e      	movs	r5, #14
 800ce7a:	5f49      	ldrsh	r1, [r1, r5]
 800ce7c:	f000 f8ae 	bl	800cfdc <_lseek_r>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	1c42      	adds	r2, r0, #1
 800ce84:	d103      	bne.n	800ce8e <__sseek+0x1a>
 800ce86:	4a05      	ldr	r2, [pc, #20]	; (800ce9c <__sseek+0x28>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	bd70      	pop	{r4, r5, r6, pc}
 800ce8e:	2280      	movs	r2, #128	; 0x80
 800ce90:	0152      	lsls	r2, r2, #5
 800ce92:	4313      	orrs	r3, r2
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	6560      	str	r0, [r4, #84]	; 0x54
 800ce98:	e7f8      	b.n	800ce8c <__sseek+0x18>
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	ffffefff 	.word	0xffffefff

0800cea0 <__sclose>:
 800cea0:	b510      	push	{r4, lr}
 800cea2:	230e      	movs	r3, #14
 800cea4:	5ec9      	ldrsh	r1, [r1, r3]
 800cea6:	f000 f853 	bl	800cf50 <_close_r>
 800ceaa:	bd10      	pop	{r4, pc}

0800ceac <strncmp>:
 800ceac:	b530      	push	{r4, r5, lr}
 800ceae:	0005      	movs	r5, r0
 800ceb0:	1e10      	subs	r0, r2, #0
 800ceb2:	d008      	beq.n	800cec6 <strncmp+0x1a>
 800ceb4:	2400      	movs	r4, #0
 800ceb6:	3a01      	subs	r2, #1
 800ceb8:	5d2b      	ldrb	r3, [r5, r4]
 800ceba:	5d08      	ldrb	r0, [r1, r4]
 800cebc:	4283      	cmp	r3, r0
 800cebe:	d101      	bne.n	800cec4 <strncmp+0x18>
 800cec0:	4294      	cmp	r4, r2
 800cec2:	d101      	bne.n	800cec8 <strncmp+0x1c>
 800cec4:	1a18      	subs	r0, r3, r0
 800cec6:	bd30      	pop	{r4, r5, pc}
 800cec8:	3401      	adds	r4, #1
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1f4      	bne.n	800ceb8 <strncmp+0xc>
 800cece:	e7f9      	b.n	800cec4 <strncmp+0x18>

0800ced0 <__ascii_wctomb>:
 800ced0:	0003      	movs	r3, r0
 800ced2:	1e08      	subs	r0, r1, #0
 800ced4:	d005      	beq.n	800cee2 <__ascii_wctomb+0x12>
 800ced6:	2aff      	cmp	r2, #255	; 0xff
 800ced8:	d904      	bls.n	800cee4 <__ascii_wctomb+0x14>
 800ceda:	228a      	movs	r2, #138	; 0x8a
 800cedc:	2001      	movs	r0, #1
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	4240      	negs	r0, r0
 800cee2:	4770      	bx	lr
 800cee4:	2001      	movs	r0, #1
 800cee6:	700a      	strb	r2, [r1, #0]
 800cee8:	e7fb      	b.n	800cee2 <__ascii_wctomb+0x12>
	...

0800ceec <_write_r>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	0004      	movs	r4, r0
 800cef0:	0008      	movs	r0, r1
 800cef2:	0011      	movs	r1, r2
 800cef4:	001a      	movs	r2, r3
 800cef6:	2300      	movs	r3, #0
 800cef8:	4d05      	ldr	r5, [pc, #20]	; (800cf10 <_write_r+0x24>)
 800cefa:	602b      	str	r3, [r5, #0]
 800cefc:	f7f6 fa17 	bl	800332e <_write>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d103      	bne.n	800cf0c <_write_r+0x20>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d000      	beq.n	800cf0c <_write_r+0x20>
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
 800cf0e:	46c0      	nop			; (mov r8, r8)
 800cf10:	200004f0 	.word	0x200004f0

0800cf14 <__assert_func>:
 800cf14:	b530      	push	{r4, r5, lr}
 800cf16:	0014      	movs	r4, r2
 800cf18:	001a      	movs	r2, r3
 800cf1a:	4b09      	ldr	r3, [pc, #36]	; (800cf40 <__assert_func+0x2c>)
 800cf1c:	0005      	movs	r5, r0
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	b085      	sub	sp, #20
 800cf22:	68d8      	ldr	r0, [r3, #12]
 800cf24:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <__assert_func+0x30>)
 800cf26:	2c00      	cmp	r4, #0
 800cf28:	d101      	bne.n	800cf2e <__assert_func+0x1a>
 800cf2a:	4b07      	ldr	r3, [pc, #28]	; (800cf48 <__assert_func+0x34>)
 800cf2c:	001c      	movs	r4, r3
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	9100      	str	r1, [sp, #0]
 800cf32:	002b      	movs	r3, r5
 800cf34:	4905      	ldr	r1, [pc, #20]	; (800cf4c <__assert_func+0x38>)
 800cf36:	9402      	str	r4, [sp, #8]
 800cf38:	f000 f81c 	bl	800cf74 <fiprintf>
 800cf3c:	f000 f8ca 	bl	800d0d4 <abort>
 800cf40:	20000030 	.word	0x20000030
 800cf44:	0800d775 	.word	0x0800d775
 800cf48:	0800d7b0 	.word	0x0800d7b0
 800cf4c:	0800d782 	.word	0x0800d782

0800cf50 <_close_r>:
 800cf50:	2300      	movs	r3, #0
 800cf52:	b570      	push	{r4, r5, r6, lr}
 800cf54:	4d06      	ldr	r5, [pc, #24]	; (800cf70 <_close_r+0x20>)
 800cf56:	0004      	movs	r4, r0
 800cf58:	0008      	movs	r0, r1
 800cf5a:	602b      	str	r3, [r5, #0]
 800cf5c:	f7f6 fa03 	bl	8003366 <_close>
 800cf60:	1c43      	adds	r3, r0, #1
 800cf62:	d103      	bne.n	800cf6c <_close_r+0x1c>
 800cf64:	682b      	ldr	r3, [r5, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d000      	beq.n	800cf6c <_close_r+0x1c>
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	bd70      	pop	{r4, r5, r6, pc}
 800cf6e:	46c0      	nop			; (mov r8, r8)
 800cf70:	200004f0 	.word	0x200004f0

0800cf74 <fiprintf>:
 800cf74:	b40e      	push	{r1, r2, r3}
 800cf76:	b503      	push	{r0, r1, lr}
 800cf78:	0001      	movs	r1, r0
 800cf7a:	ab03      	add	r3, sp, #12
 800cf7c:	4804      	ldr	r0, [pc, #16]	; (800cf90 <fiprintf+0x1c>)
 800cf7e:	cb04      	ldmia	r3!, {r2}
 800cf80:	6800      	ldr	r0, [r0, #0]
 800cf82:	9301      	str	r3, [sp, #4]
 800cf84:	f7ff fdf4 	bl	800cb70 <_vfiprintf_r>
 800cf88:	b002      	add	sp, #8
 800cf8a:	bc08      	pop	{r3}
 800cf8c:	b003      	add	sp, #12
 800cf8e:	4718      	bx	r3
 800cf90:	20000030 	.word	0x20000030

0800cf94 <_fstat_r>:
 800cf94:	2300      	movs	r3, #0
 800cf96:	b570      	push	{r4, r5, r6, lr}
 800cf98:	4d06      	ldr	r5, [pc, #24]	; (800cfb4 <_fstat_r+0x20>)
 800cf9a:	0004      	movs	r4, r0
 800cf9c:	0008      	movs	r0, r1
 800cf9e:	0011      	movs	r1, r2
 800cfa0:	602b      	str	r3, [r5, #0]
 800cfa2:	f7f6 f9ea 	bl	800337a <_fstat>
 800cfa6:	1c43      	adds	r3, r0, #1
 800cfa8:	d103      	bne.n	800cfb2 <_fstat_r+0x1e>
 800cfaa:	682b      	ldr	r3, [r5, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d000      	beq.n	800cfb2 <_fstat_r+0x1e>
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	200004f0 	.word	0x200004f0

0800cfb8 <_isatty_r>:
 800cfb8:	2300      	movs	r3, #0
 800cfba:	b570      	push	{r4, r5, r6, lr}
 800cfbc:	4d06      	ldr	r5, [pc, #24]	; (800cfd8 <_isatty_r+0x20>)
 800cfbe:	0004      	movs	r4, r0
 800cfc0:	0008      	movs	r0, r1
 800cfc2:	602b      	str	r3, [r5, #0]
 800cfc4:	f7f6 f9e7 	bl	8003396 <_isatty>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d103      	bne.n	800cfd4 <_isatty_r+0x1c>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d000      	beq.n	800cfd4 <_isatty_r+0x1c>
 800cfd2:	6023      	str	r3, [r4, #0]
 800cfd4:	bd70      	pop	{r4, r5, r6, pc}
 800cfd6:	46c0      	nop			; (mov r8, r8)
 800cfd8:	200004f0 	.word	0x200004f0

0800cfdc <_lseek_r>:
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	0004      	movs	r4, r0
 800cfe0:	0008      	movs	r0, r1
 800cfe2:	0011      	movs	r1, r2
 800cfe4:	001a      	movs	r2, r3
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	4d05      	ldr	r5, [pc, #20]	; (800d000 <_lseek_r+0x24>)
 800cfea:	602b      	str	r3, [r5, #0]
 800cfec:	f7f6 f9dc 	bl	80033a8 <_lseek>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d103      	bne.n	800cffc <_lseek_r+0x20>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d000      	beq.n	800cffc <_lseek_r+0x20>
 800cffa:	6023      	str	r3, [r4, #0]
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
 800cffe:	46c0      	nop			; (mov r8, r8)
 800d000:	200004f0 	.word	0x200004f0

0800d004 <memmove>:
 800d004:	b510      	push	{r4, lr}
 800d006:	4288      	cmp	r0, r1
 800d008:	d902      	bls.n	800d010 <memmove+0xc>
 800d00a:	188b      	adds	r3, r1, r2
 800d00c:	4298      	cmp	r0, r3
 800d00e:	d303      	bcc.n	800d018 <memmove+0x14>
 800d010:	2300      	movs	r3, #0
 800d012:	e007      	b.n	800d024 <memmove+0x20>
 800d014:	5c8b      	ldrb	r3, [r1, r2]
 800d016:	5483      	strb	r3, [r0, r2]
 800d018:	3a01      	subs	r2, #1
 800d01a:	d2fb      	bcs.n	800d014 <memmove+0x10>
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	5ccc      	ldrb	r4, [r1, r3]
 800d020:	54c4      	strb	r4, [r0, r3]
 800d022:	3301      	adds	r3, #1
 800d024:	429a      	cmp	r2, r3
 800d026:	d1fa      	bne.n	800d01e <memmove+0x1a>
 800d028:	e7f8      	b.n	800d01c <memmove+0x18>
	...

0800d02c <__malloc_lock>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	4802      	ldr	r0, [pc, #8]	; (800d038 <__malloc_lock+0xc>)
 800d030:	f7fe fda5 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800d034:	bd10      	pop	{r4, pc}
 800d036:	46c0      	nop			; (mov r8, r8)
 800d038:	200004e4 	.word	0x200004e4

0800d03c <__malloc_unlock>:
 800d03c:	b510      	push	{r4, lr}
 800d03e:	4802      	ldr	r0, [pc, #8]	; (800d048 <__malloc_unlock+0xc>)
 800d040:	f7fe fd9e 	bl	800bb80 <__retarget_lock_release_recursive>
 800d044:	bd10      	pop	{r4, pc}
 800d046:	46c0      	nop			; (mov r8, r8)
 800d048:	200004e4 	.word	0x200004e4

0800d04c <_realloc_r>:
 800d04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d04e:	0007      	movs	r7, r0
 800d050:	000e      	movs	r6, r1
 800d052:	0014      	movs	r4, r2
 800d054:	2900      	cmp	r1, #0
 800d056:	d105      	bne.n	800d064 <_realloc_r+0x18>
 800d058:	0011      	movs	r1, r2
 800d05a:	f7ff fb89 	bl	800c770 <_malloc_r>
 800d05e:	0005      	movs	r5, r0
 800d060:	0028      	movs	r0, r5
 800d062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d064:	2a00      	cmp	r2, #0
 800d066:	d103      	bne.n	800d070 <_realloc_r+0x24>
 800d068:	f7ff fb16 	bl	800c698 <_free_r>
 800d06c:	0025      	movs	r5, r4
 800d06e:	e7f7      	b.n	800d060 <_realloc_r+0x14>
 800d070:	f000 f837 	bl	800d0e2 <_malloc_usable_size_r>
 800d074:	9001      	str	r0, [sp, #4]
 800d076:	4284      	cmp	r4, r0
 800d078:	d803      	bhi.n	800d082 <_realloc_r+0x36>
 800d07a:	0035      	movs	r5, r6
 800d07c:	0843      	lsrs	r3, r0, #1
 800d07e:	42a3      	cmp	r3, r4
 800d080:	d3ee      	bcc.n	800d060 <_realloc_r+0x14>
 800d082:	0021      	movs	r1, r4
 800d084:	0038      	movs	r0, r7
 800d086:	f7ff fb73 	bl	800c770 <_malloc_r>
 800d08a:	1e05      	subs	r5, r0, #0
 800d08c:	d0e8      	beq.n	800d060 <_realloc_r+0x14>
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	0022      	movs	r2, r4
 800d092:	429c      	cmp	r4, r3
 800d094:	d900      	bls.n	800d098 <_realloc_r+0x4c>
 800d096:	001a      	movs	r2, r3
 800d098:	0031      	movs	r1, r6
 800d09a:	0028      	movs	r0, r5
 800d09c:	f7fb faac 	bl	80085f8 <memcpy>
 800d0a0:	0031      	movs	r1, r6
 800d0a2:	0038      	movs	r0, r7
 800d0a4:	f7ff faf8 	bl	800c698 <_free_r>
 800d0a8:	e7da      	b.n	800d060 <_realloc_r+0x14>
	...

0800d0ac <_read_r>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	0004      	movs	r4, r0
 800d0b0:	0008      	movs	r0, r1
 800d0b2:	0011      	movs	r1, r2
 800d0b4:	001a      	movs	r2, r3
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4d05      	ldr	r5, [pc, #20]	; (800d0d0 <_read_r+0x24>)
 800d0ba:	602b      	str	r3, [r5, #0]
 800d0bc:	f7f6 f91a 	bl	80032f4 <_read>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d103      	bne.n	800d0cc <_read_r+0x20>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d000      	beq.n	800d0cc <_read_r+0x20>
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	bd70      	pop	{r4, r5, r6, pc}
 800d0ce:	46c0      	nop			; (mov r8, r8)
 800d0d0:	200004f0 	.word	0x200004f0

0800d0d4 <abort>:
 800d0d4:	2006      	movs	r0, #6
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	f000 f836 	bl	800d148 <raise>
 800d0dc:	2001      	movs	r0, #1
 800d0de:	f7f6 f8fd 	bl	80032dc <_exit>

0800d0e2 <_malloc_usable_size_r>:
 800d0e2:	1f0b      	subs	r3, r1, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	1f18      	subs	r0, r3, #4
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	da01      	bge.n	800d0f0 <_malloc_usable_size_r+0xe>
 800d0ec:	580b      	ldr	r3, [r1, r0]
 800d0ee:	18c0      	adds	r0, r0, r3
 800d0f0:	4770      	bx	lr

0800d0f2 <_raise_r>:
 800d0f2:	b570      	push	{r4, r5, r6, lr}
 800d0f4:	0004      	movs	r4, r0
 800d0f6:	000d      	movs	r5, r1
 800d0f8:	291f      	cmp	r1, #31
 800d0fa:	d904      	bls.n	800d106 <_raise_r+0x14>
 800d0fc:	2316      	movs	r3, #22
 800d0fe:	6003      	str	r3, [r0, #0]
 800d100:	2001      	movs	r0, #1
 800d102:	4240      	negs	r0, r0
 800d104:	bd70      	pop	{r4, r5, r6, pc}
 800d106:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d004      	beq.n	800d116 <_raise_r+0x24>
 800d10c:	008a      	lsls	r2, r1, #2
 800d10e:	189b      	adds	r3, r3, r2
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	2a00      	cmp	r2, #0
 800d114:	d108      	bne.n	800d128 <_raise_r+0x36>
 800d116:	0020      	movs	r0, r4
 800d118:	f000 f832 	bl	800d180 <_getpid_r>
 800d11c:	002a      	movs	r2, r5
 800d11e:	0001      	movs	r1, r0
 800d120:	0020      	movs	r0, r4
 800d122:	f000 f81b 	bl	800d15c <_kill_r>
 800d126:	e7ed      	b.n	800d104 <_raise_r+0x12>
 800d128:	2000      	movs	r0, #0
 800d12a:	2a01      	cmp	r2, #1
 800d12c:	d0ea      	beq.n	800d104 <_raise_r+0x12>
 800d12e:	1c51      	adds	r1, r2, #1
 800d130:	d103      	bne.n	800d13a <_raise_r+0x48>
 800d132:	2316      	movs	r3, #22
 800d134:	3001      	adds	r0, #1
 800d136:	6023      	str	r3, [r4, #0]
 800d138:	e7e4      	b.n	800d104 <_raise_r+0x12>
 800d13a:	2400      	movs	r4, #0
 800d13c:	0028      	movs	r0, r5
 800d13e:	601c      	str	r4, [r3, #0]
 800d140:	4790      	blx	r2
 800d142:	0020      	movs	r0, r4
 800d144:	e7de      	b.n	800d104 <_raise_r+0x12>
	...

0800d148 <raise>:
 800d148:	b510      	push	{r4, lr}
 800d14a:	4b03      	ldr	r3, [pc, #12]	; (800d158 <raise+0x10>)
 800d14c:	0001      	movs	r1, r0
 800d14e:	6818      	ldr	r0, [r3, #0]
 800d150:	f7ff ffcf 	bl	800d0f2 <_raise_r>
 800d154:	bd10      	pop	{r4, pc}
 800d156:	46c0      	nop			; (mov r8, r8)
 800d158:	20000030 	.word	0x20000030

0800d15c <_kill_r>:
 800d15c:	2300      	movs	r3, #0
 800d15e:	b570      	push	{r4, r5, r6, lr}
 800d160:	4d06      	ldr	r5, [pc, #24]	; (800d17c <_kill_r+0x20>)
 800d162:	0004      	movs	r4, r0
 800d164:	0008      	movs	r0, r1
 800d166:	0011      	movs	r1, r2
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	f7f6 f8a7 	bl	80032bc <_kill>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d103      	bne.n	800d17a <_kill_r+0x1e>
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d000      	beq.n	800d17a <_kill_r+0x1e>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	200004f0 	.word	0x200004f0

0800d180 <_getpid_r>:
 800d180:	b510      	push	{r4, lr}
 800d182:	f7f6 f895 	bl	80032b0 <_getpid>
 800d186:	bd10      	pop	{r4, pc}

0800d188 <_init>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	46c0      	nop			; (mov r8, r8)
 800d18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d18e:	bc08      	pop	{r3}
 800d190:	469e      	mov	lr, r3
 800d192:	4770      	bx	lr

0800d194 <_fini>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	46c0      	nop			; (mov r8, r8)
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr
