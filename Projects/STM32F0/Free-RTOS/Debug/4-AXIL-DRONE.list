
4-AXIL-DRONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003808  08003808  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003808  08003808  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c8  20000010  08003820  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d8  08003820  000214d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2da  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002325  00000000  00000000  0002b312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101af  00000000  00000000  0002eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc47  00000000  00000000  0003ecdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006116d  00000000  00000000  0004b926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aca93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002580  00000000  00000000  000acae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003748 	.word	0x08003748

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003748 	.word	0x08003748

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LED_Test>:
#include "FreeRTOS_test_funcs.h"
#include "main.h"

void LED_Test(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	while(1)
	{
		static char state = 0;
		state  = ~state;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <LED_Test+0x2c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	43db      	mvns	r3, r3
 800022a:	b2da      	uxtb	r2, r3
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <LED_Test+0x2c>)
 800022e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_IND_GPIO_Port,LED_IND_Pin , state);
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <LED_Test+0x2c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <LED_Test+0x30>)
 8000236:	001a      	movs	r2, r3
 8000238:	2101      	movs	r1, #1
 800023a:	f000 fbd5 	bl	80009e8 <HAL_GPIO_WritePin>
		osDelay(1000);
 800023e:	23fa      	movs	r3, #250	; 0xfa
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f001 f92e 	bl	80014a4 <osDelay>
	{
 8000248:	e7ec      	b.n	8000224 <LED_Test+0x4>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	2000002c 	.word	0x2000002c
 8000250:	48000800 	.word	0x48000800

08000254 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af04      	add	r7, sp, #16
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800025a:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <MX_FREERTOS_Init+0x3c>)
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <MX_FREERTOS_Init+0x40>)
 800025e:	2100      	movs	r1, #0
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f877 	bl	8001354 <osThreadNew>
 8000266:	0002      	movs	r2, r0
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <MX_FREERTOS_Init+0x44>)
 800026a:	601a      	str	r2, [r3, #0]
  /*My_Drone BT module reading*/

  /*My_Drone WS2812 control*/

  /*My_Drone Wins control*/
  xLED_Task_Handel = xTaskCreateStatic(LED_Test, "WinTask",128,NULL, osPriorityNormal, g_pucStackOfWinTask, &g_TCBofWinTask);
 800026c:	490b      	ldr	r1, [pc, #44]	; (800029c <MX_FREERTOS_Init+0x48>)
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <MX_FREERTOS_Init+0x4c>)
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_FREERTOS_Init+0x50>)
 8000272:	9302      	str	r3, [sp, #8]
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_FREERTOS_Init+0x54>)
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2318      	movs	r3, #24
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2300      	movs	r3, #0
 800027e:	2280      	movs	r2, #128	; 0x80
 8000280:	f001 fe39 	bl	8001ef6 <xTaskCreateStatic>
 8000284:	0002      	movs	r2, r0
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_FREERTOS_Init+0x58>)
 8000288:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	0800378c 	.word	0x0800378c
 8000294:	080002b1 	.word	0x080002b1
 8000298:	20000290 	.word	0x20000290
 800029c:	0800376c 	.word	0x0800376c
 80002a0:	08000221 	.word	0x08000221
 80002a4:	20000230 	.word	0x20000230
 80002a8:	20000030 	.word	0x20000030
 80002ac:	2000028c 	.word	0x2000028c

080002b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
//	LED_Test();
    osDelay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f001 f8f3 	bl	80014a4 <osDelay>
 80002be:	e7fb      	b.n	80002b8 <StartDefaultTask+0x8>

080002c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b089      	sub	sp, #36	; 0x24
 80002c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	240c      	movs	r4, #12
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2314      	movs	r3, #20
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f003 fa30 	bl	8003736 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <MX_GPIO_Init+0x88>)
 80002d8:	695a      	ldr	r2, [r3, #20]
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_GPIO_Init+0x88>)
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	0309      	lsls	r1, r1, #12
 80002e0:	430a      	orrs	r2, r1
 80002e2:	615a      	str	r2, [r3, #20]
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_GPIO_Init+0x88>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	031b      	lsls	r3, r3, #12
 80002ec:	4013      	ands	r3, r2
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_GPIO_Init+0x88>)
 80002f4:	695a      	ldr	r2, [r3, #20]
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_GPIO_Init+0x88>)
 80002f8:	2180      	movs	r1, #128	; 0x80
 80002fa:	0289      	lsls	r1, r1, #10
 80002fc:	430a      	orrs	r2, r1
 80002fe:	615a      	str	r2, [r3, #20]
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_GPIO_Init+0x88>)
 8000302:	695a      	ldr	r2, [r3, #20]
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	029b      	lsls	r3, r3, #10
 8000308:	4013      	ands	r3, r2
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_IND_Pin|W1_Pin|W2_Pin|W3_Pin
 800030e:	490f      	ldr	r1, [pc, #60]	; (800034c <MX_GPIO_Init+0x8c>)
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_GPIO_Init+0x90>)
 8000312:	2200      	movs	r2, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fb67 	bl	80009e8 <HAL_GPIO_WritePin>
                          |W4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_IND_Pin|W1_Pin|W2_Pin|W3_Pin
 800031a:	0021      	movs	r1, r4
 800031c:	187b      	adds	r3, r7, r1
 800031e:	4a0b      	ldr	r2, [pc, #44]	; (800034c <MX_GPIO_Init+0x8c>)
 8000320:	601a      	str	r2, [r3, #0]
                          |W4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2201      	movs	r2, #1
 8000326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000334:	187b      	adds	r3, r7, r1
 8000336:	4a06      	ldr	r2, [pc, #24]	; (8000350 <MX_GPIO_Init+0x90>)
 8000338:	0019      	movs	r1, r3
 800033a:	0010      	movs	r0, r2
 800033c:	f000 f9e4 	bl	8000708 <HAL_GPIO_Init>

}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b009      	add	sp, #36	; 0x24
 8000346:	bd90      	pop	{r4, r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	000003c1 	.word	0x000003c1
 8000350:	48000800 	.word	0x48000800

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 f8be 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f809 	bl	8000372 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ffae 	bl	80002c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000364:	f000 ff9c 	bl	80012a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000368:	f7ff ff74 	bl	8000254 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800036c:	f000 ffc4 	bl	80012f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000370:	e7fe      	b.n	8000370 <main+0x1c>

08000372 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000372:	b590      	push	{r4, r7, lr}
 8000374:	b091      	sub	sp, #68	; 0x44
 8000376:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000378:	2410      	movs	r4, #16
 800037a:	193b      	adds	r3, r7, r4
 800037c:	0018      	movs	r0, r3
 800037e:	2330      	movs	r3, #48	; 0x30
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f003 f9d7 	bl	8003736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	003b      	movs	r3, r7
 800038a:	0018      	movs	r0, r3
 800038c:	2310      	movs	r3, #16
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f003 f9d0 	bl	8003736 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000396:	0021      	movs	r1, r4
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2202      	movs	r2, #2
 800039c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2201      	movs	r2, #1
 80003a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2210      	movs	r2, #16
 80003a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fb36 	bl	8000a24 <HAL_RCC_OscConfig>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003bc:	f000 f819 	bl	80003f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	003b      	movs	r3, r7
 80003c2:	2207      	movs	r2, #7
 80003c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	003b      	movs	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d8:	003b      	movs	r3, r7
 80003da:	2100      	movs	r1, #0
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fe3b 	bl	8001058 <HAL_RCC_ClockConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003e6:	f000 f804 	bl	80003f2 <Error_Handler>
  }
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b011      	add	sp, #68	; 0x44
 80003f0:	bd90      	pop	{r4, r7, pc}

080003f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f6:	b672      	cpsid	i
}
 80003f8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fa:	e7fe      	b.n	80003fa <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x50>)
 8000404:	699a      	ldr	r2, [r3, #24]
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <HAL_MspInit+0x50>)
 8000408:	2101      	movs	r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x50>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	2201      	movs	r2, #1
 8000414:	4013      	ands	r3, r2
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x50>)
 800041c:	69da      	ldr	r2, [r3, #28]
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <HAL_MspInit+0x50>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0549      	lsls	r1, r1, #21
 8000424:	430a      	orrs	r2, r1
 8000426:	61da      	str	r2, [r3, #28]
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_MspInit+0x50>)
 800042a:	69da      	ldr	r2, [r3, #28]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	055b      	lsls	r3, r3, #21
 8000430:	4013      	ands	r3, r2
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000436:	2302      	movs	r3, #2
 8000438:	425b      	negs	r3, r3
 800043a:	2200      	movs	r2, #0
 800043c:	2103      	movs	r1, #3
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f940 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000460:	f000 f882 	bl	8000568 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000464:	f002 fac2 	bl	80029ec <xTaskGetSchedulerState>
 8000468:	0003      	movs	r3, r0
 800046a:	2b01      	cmp	r3, #1
 800046c:	d001      	beq.n	8000472 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800046e:	f002 ff53 	bl	8003318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000484:	480d      	ldr	r0, [pc, #52]	; (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000486:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000488:	f7ff fff6 	bl	8000478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	; (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	; (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f003 f913 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff ff4d 	bl	8000354 <main>

080004ba <LoopForever>:

LoopForever:
    b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004c8:	08003810 	.word	0x08003810
  ldr r2, =_sbss
 80004cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004d0:	200014d8 	.word	0x200014d8

080004d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC1_IRQHandler>
	...

080004d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <HAL_Init+0x24>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_Init+0x24>)
 80004e2:	2110      	movs	r1, #16
 80004e4:	430a      	orrs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f000 f809 	bl	8000500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ee:	f7ff ff85 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40022000 	.word	0x40022000

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_InitTick+0x5c>)
 800050a:	681c      	ldr	r4, [r3, #0]
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_InitTick+0x60>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	0019      	movs	r1, r3
 8000512:	23fa      	movs	r3, #250	; 0xfa
 8000514:	0098      	lsls	r0, r3, #2
 8000516:	f7ff fdf7 	bl	8000108 <__udivsi3>
 800051a:	0003      	movs	r3, r0
 800051c:	0019      	movs	r1, r3
 800051e:	0020      	movs	r0, r4
 8000520:	f7ff fdf2 	bl	8000108 <__udivsi3>
 8000524:	0003      	movs	r3, r0
 8000526:	0018      	movs	r0, r3
 8000528:	f000 f8e1 	bl	80006ee <HAL_SYSTICK_Config>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	e00f      	b.n	8000554 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d80b      	bhi.n	8000552 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	2301      	movs	r3, #1
 800053e:	425b      	negs	r3, r3
 8000540:	2200      	movs	r2, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f8be 	bl	80006c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_InitTick+0x64>)
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	e000      	b.n	8000554 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	b003      	add	sp, #12
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_IncTick+0x1c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	001a      	movs	r2, r3
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_IncTick+0x20>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	18d2      	adds	r2, r2, r3
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <HAL_IncTick+0x20>)
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000008 	.word	0x20000008
 8000588:	20000294 	.word	0x20000294

0800058c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;
 8000590:	4b02      	ldr	r3, [pc, #8]	; (800059c <HAL_GetTick+0x10>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	0018      	movs	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	20000294 	.word	0x20000294

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	0002      	movs	r2, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b7f      	cmp	r3, #127	; 0x7f
 80005b4:	d828      	bhi.n	8000608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b6:	4a2f      	ldr	r2, [pc, #188]	; (8000674 <__NVIC_SetPriority+0xd4>)
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	33c0      	adds	r3, #192	; 0xc0
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	589b      	ldr	r3, [r3, r2]
 80005c6:	1dfa      	adds	r2, r7, #7
 80005c8:	7812      	ldrb	r2, [r2, #0]
 80005ca:	0011      	movs	r1, r2
 80005cc:	2203      	movs	r2, #3
 80005ce:	400a      	ands	r2, r1
 80005d0:	00d2      	lsls	r2, r2, #3
 80005d2:	21ff      	movs	r1, #255	; 0xff
 80005d4:	4091      	lsls	r1, r2
 80005d6:	000a      	movs	r2, r1
 80005d8:	43d2      	mvns	r2, r2
 80005da:	401a      	ands	r2, r3
 80005dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	019b      	lsls	r3, r3, #6
 80005e2:	22ff      	movs	r2, #255	; 0xff
 80005e4:	401a      	ands	r2, r3
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	0018      	movs	r0, r3
 80005ec:	2303      	movs	r3, #3
 80005ee:	4003      	ands	r3, r0
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <__NVIC_SetPriority+0xd4>)
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	430a      	orrs	r2, r1
 8000600:	33c0      	adds	r3, #192	; 0xc0
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000606:	e031      	b.n	800066c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <__NVIC_SetPriority+0xd8>)
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	0019      	movs	r1, r3
 8000610:	230f      	movs	r3, #15
 8000612:	400b      	ands	r3, r1
 8000614:	3b08      	subs	r3, #8
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	3306      	adds	r3, #6
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	18d3      	adds	r3, r2, r3
 800061e:	3304      	adds	r3, #4
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	1dfa      	adds	r2, r7, #7
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	0011      	movs	r1, r2
 8000628:	2203      	movs	r2, #3
 800062a:	400a      	ands	r2, r1
 800062c:	00d2      	lsls	r2, r2, #3
 800062e:	21ff      	movs	r1, #255	; 0xff
 8000630:	4091      	lsls	r1, r2
 8000632:	000a      	movs	r2, r1
 8000634:	43d2      	mvns	r2, r2
 8000636:	401a      	ands	r2, r3
 8000638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	019b      	lsls	r3, r3, #6
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	401a      	ands	r2, r3
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	0018      	movs	r0, r3
 8000648:	2303      	movs	r3, #3
 800064a:	4003      	ands	r3, r0
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <__NVIC_SetPriority+0xd8>)
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	001c      	movs	r4, r3
 8000658:	230f      	movs	r3, #15
 800065a:	4023      	ands	r3, r4
 800065c:	3b08      	subs	r3, #8
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	430a      	orrs	r2, r1
 8000662:	3306      	adds	r3, #6
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	18c3      	adds	r3, r0, r3
 8000668:	3304      	adds	r3, #4
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b003      	add	sp, #12
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	045b      	lsls	r3, r3, #17
 800068c:	429a      	cmp	r2, r3
 800068e:	d301      	bcc.n	8000694 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000690:	2301      	movs	r3, #1
 8000692:	e010      	b.n	80006b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <SysTick_Config+0x44>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	3a01      	subs	r2, #1
 800069a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800069c:	2301      	movs	r3, #1
 800069e:	425b      	negs	r3, r3
 80006a0:	2103      	movs	r1, #3
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff7c 	bl	80005a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SysTick_Config+0x44>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SysTick_Config+0x44>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	0018      	movs	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	210f      	movs	r1, #15
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	1c02      	adds	r2, r0, #0
 80006d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ff5d 	bl	80005a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b004      	add	sp, #16
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff ffbf 	bl	800067c <SysTick_Config>
 80006fe:	0003      	movs	r3, r0
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}

08000708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000716:	e14f      	b.n	80009b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2101      	movs	r1, #1
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	4091      	lsls	r1, r2
 8000722:	000a      	movs	r2, r1
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d100      	bne.n	8000730 <HAL_GPIO_Init+0x28>
 800072e:	e140      	b.n	80009b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2203      	movs	r2, #3
 8000736:	4013      	ands	r3, r2
 8000738:	2b01      	cmp	r3, #1
 800073a:	d005      	beq.n	8000748 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2203      	movs	r2, #3
 8000742:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000744:	2b02      	cmp	r3, #2
 8000746:	d130      	bne.n	80007aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	2203      	movs	r2, #3
 8000754:	409a      	lsls	r2, r3
 8000756:	0013      	movs	r3, r2
 8000758:	43da      	mvns	r2, r3
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	409a      	lsls	r2, r3
 800076a:	0013      	movs	r3, r2
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	4313      	orrs	r3, r2
 8000770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800077e:	2201      	movs	r2, #1
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	43da      	mvns	r2, r3
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	4013      	ands	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	2201      	movs	r2, #1
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
 800079c:	0013      	movs	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2203      	movs	r2, #3
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d017      	beq.n	80007e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2203      	movs	r2, #3
 80007c2:	409a      	lsls	r2, r3
 80007c4:	0013      	movs	r3, r2
 80007c6:	43da      	mvns	r2, r3
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	4013      	ands	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	409a      	lsls	r2, r3
 80007d8:	0013      	movs	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4313      	orrs	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d123      	bne.n	800083a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3208      	adds	r2, #8
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	58d3      	ldr	r3, [r2, r3]
 80007fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	2207      	movs	r2, #7
 8000804:	4013      	ands	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	220f      	movs	r2, #15
 800080a:	409a      	lsls	r2, r3
 800080c:	0013      	movs	r3, r2
 800080e:	43da      	mvns	r2, r3
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4013      	ands	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	691a      	ldr	r2, [r3, #16]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	2107      	movs	r1, #7
 800081e:	400b      	ands	r3, r1
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	409a      	lsls	r2, r3
 8000824:	0013      	movs	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4313      	orrs	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	08da      	lsrs	r2, r3, #3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3208      	adds	r2, #8
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	6939      	ldr	r1, [r7, #16]
 8000838:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	43da      	mvns	r2, r3
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	4013      	ands	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2203      	movs	r2, #3
 8000858:	401a      	ands	r2, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	409a      	lsls	r2, r3
 8000860:	0013      	movs	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	23c0      	movs	r3, #192	; 0xc0
 8000874:	029b      	lsls	r3, r3, #10
 8000876:	4013      	ands	r3, r2
 8000878:	d100      	bne.n	800087c <HAL_GPIO_Init+0x174>
 800087a:	e09a      	b.n	80009b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087c:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <HAL_GPIO_Init+0x2c8>)
 800087e:	699a      	ldr	r2, [r3, #24]
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <HAL_GPIO_Init+0x2c8>)
 8000882:	2101      	movs	r1, #1
 8000884:	430a      	orrs	r2, r1
 8000886:	619a      	str	r2, [r3, #24]
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <HAL_GPIO_Init+0x2c8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	2201      	movs	r2, #1
 800088e:	4013      	ands	r3, r2
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000894:	4a4f      	ldr	r2, [pc, #316]	; (80009d4 <HAL_GPIO_Init+0x2cc>)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	3302      	adds	r3, #2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	589b      	ldr	r3, [r3, r2]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	2203      	movs	r2, #3
 80008a6:	4013      	ands	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	220f      	movs	r2, #15
 80008ac:	409a      	lsls	r2, r3
 80008ae:	0013      	movs	r3, r2
 80008b0:	43da      	mvns	r2, r3
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4013      	ands	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	2390      	movs	r3, #144	; 0x90
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	429a      	cmp	r2, r3
 80008c0:	d013      	beq.n	80008ea <HAL_GPIO_Init+0x1e2>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a44      	ldr	r2, [pc, #272]	; (80009d8 <HAL_GPIO_Init+0x2d0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d00d      	beq.n	80008e6 <HAL_GPIO_Init+0x1de>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a43      	ldr	r2, [pc, #268]	; (80009dc <HAL_GPIO_Init+0x2d4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d007      	beq.n	80008e2 <HAL_GPIO_Init+0x1da>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <HAL_GPIO_Init+0x2d8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_GPIO_Init+0x1d6>
 80008da:	2303      	movs	r3, #3
 80008dc:	e006      	b.n	80008ec <HAL_GPIO_Init+0x1e4>
 80008de:	2305      	movs	r3, #5
 80008e0:	e004      	b.n	80008ec <HAL_GPIO_Init+0x1e4>
 80008e2:	2302      	movs	r3, #2
 80008e4:	e002      	b.n	80008ec <HAL_GPIO_Init+0x1e4>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <HAL_GPIO_Init+0x1e4>
 80008ea:	2300      	movs	r3, #0
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	2103      	movs	r1, #3
 80008f0:	400a      	ands	r2, r1
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	4093      	lsls	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008fc:	4935      	ldr	r1, [pc, #212]	; (80009d4 <HAL_GPIO_Init+0x2cc>)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	3302      	adds	r3, #2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	43da      	mvns	r2, r3
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	035b      	lsls	r3, r3, #13
 8000922:	4013      	ands	r3, r2
 8000924:	d003      	beq.n	800092e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	43da      	mvns	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	039b      	lsls	r3, r3, #14
 800094c:	4013      	ands	r3, r2
 800094e:	d003      	beq.n	8000958 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	43da      	mvns	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	029b      	lsls	r3, r3, #10
 8000976:	4013      	ands	r3, r2
 8000978:	d003      	beq.n	8000982 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	43da      	mvns	r2, r3
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	025b      	lsls	r3, r3, #9
 80009a0:	4013      	ands	r3, r2
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_GPIO_Init+0x2dc>)
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	40da      	lsrs	r2, r3
 80009c0:	1e13      	subs	r3, r2, #0
 80009c2:	d000      	beq.n	80009c6 <HAL_GPIO_Init+0x2be>
 80009c4:	e6a8      	b.n	8000718 <HAL_GPIO_Init+0x10>
  } 
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b006      	add	sp, #24
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000
 80009d8:	48000400 	.word	0x48000400
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48000c00 	.word	0x48000c00
 80009e4:	40010400 	.word	0x40010400

080009e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	0008      	movs	r0, r1
 80009f2:	0011      	movs	r1, r2
 80009f4:	1cbb      	adds	r3, r7, #2
 80009f6:	1c02      	adds	r2, r0, #0
 80009f8:	801a      	strh	r2, [r3, #0]
 80009fa:	1c7b      	adds	r3, r7, #1
 80009fc:	1c0a      	adds	r2, r1, #0
 80009fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a00:	1c7b      	adds	r3, r7, #1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a08:	1cbb      	adds	r3, r7, #2
 8000a0a:	881a      	ldrh	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a10:	e003      	b.n	8000a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a12:	1cbb      	adds	r3, r7, #2
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e301      	b.n	800103a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	d100      	bne.n	8000a42 <HAL_RCC_OscConfig+0x1e>
 8000a40:	e08d      	b.n	8000b5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a42:	4bc3      	ldr	r3, [pc, #780]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	220c      	movs	r2, #12
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d00e      	beq.n	8000a6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a4e:	4bc0      	ldr	r3, [pc, #768]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	220c      	movs	r2, #12
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	d116      	bne.n	8000a88 <HAL_RCC_OscConfig+0x64>
 8000a5a:	4bbd      	ldr	r3, [pc, #756]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	025b      	lsls	r3, r3, #9
 8000a62:	401a      	ands	r2, r3
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	025b      	lsls	r3, r3, #9
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d10d      	bne.n	8000a88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6c:	4bb8      	ldr	r3, [pc, #736]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	d100      	bne.n	8000a7a <HAL_RCC_OscConfig+0x56>
 8000a78:	e070      	b.n	8000b5c <HAL_RCC_OscConfig+0x138>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d000      	beq.n	8000a84 <HAL_RCC_OscConfig+0x60>
 8000a82:	e06b      	b.n	8000b5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e2d8      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d107      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x7c>
 8000a90:	4baf      	ldr	r3, [pc, #700]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4bae      	ldr	r3, [pc, #696]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	0249      	lsls	r1, r1, #9
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e02f      	b.n	8000b00 <HAL_RCC_OscConfig+0xdc>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10c      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x9e>
 8000aa8:	4ba9      	ldr	r3, [pc, #676]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4ba8      	ldr	r3, [pc, #672]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000aae:	49a9      	ldr	r1, [pc, #676]	; (8000d54 <HAL_RCC_OscConfig+0x330>)
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4ba6      	ldr	r3, [pc, #664]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4ba5      	ldr	r3, [pc, #660]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000aba:	49a7      	ldr	r1, [pc, #668]	; (8000d58 <HAL_RCC_OscConfig+0x334>)
 8000abc:	400a      	ands	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e01e      	b.n	8000b00 <HAL_RCC_OscConfig+0xdc>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b05      	cmp	r3, #5
 8000ac8:	d10e      	bne.n	8000ae8 <HAL_RCC_OscConfig+0xc4>
 8000aca:	4ba1      	ldr	r3, [pc, #644]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4ba0      	ldr	r3, [pc, #640]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	02c9      	lsls	r1, r1, #11
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	4b9d      	ldr	r3, [pc, #628]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b9c      	ldr	r3, [pc, #624]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	0249      	lsls	r1, r1, #9
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	e00b      	b.n	8000b00 <HAL_RCC_OscConfig+0xdc>
 8000ae8:	4b99      	ldr	r3, [pc, #612]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b98      	ldr	r3, [pc, #608]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000aee:	4999      	ldr	r1, [pc, #612]	; (8000d54 <HAL_RCC_OscConfig+0x330>)
 8000af0:	400a      	ands	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b95      	ldr	r3, [pc, #596]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000afa:	4997      	ldr	r1, [pc, #604]	; (8000d58 <HAL_RCC_OscConfig+0x334>)
 8000afc:	400a      	ands	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d014      	beq.n	8000b32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd40 	bl	800058c <HAL_GetTick>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b10:	e008      	b.n	8000b24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b12:	f7ff fd3b 	bl	800058c <HAL_GetTick>
 8000b16:	0002      	movs	r2, r0
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	2b64      	cmp	r3, #100	; 0x64
 8000b1e:	d901      	bls.n	8000b24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e28a      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b24:	4b8a      	ldr	r3, [pc, #552]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	029b      	lsls	r3, r3, #10
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	d0f0      	beq.n	8000b12 <HAL_RCC_OscConfig+0xee>
 8000b30:	e015      	b.n	8000b5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b32:	f7ff fd2b 	bl	800058c <HAL_GetTick>
 8000b36:	0003      	movs	r3, r0
 8000b38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3a:	e008      	b.n	8000b4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b3c:	f7ff fd26 	bl	800058c <HAL_GetTick>
 8000b40:	0002      	movs	r2, r0
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b64      	cmp	r3, #100	; 0x64
 8000b48:	d901      	bls.n	8000b4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e275      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b4e:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	029b      	lsls	r3, r3, #10
 8000b56:	4013      	ands	r3, r2
 8000b58:	d1f0      	bne.n	8000b3c <HAL_RCC_OscConfig+0x118>
 8000b5a:	e000      	b.n	8000b5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2202      	movs	r2, #2
 8000b64:	4013      	ands	r3, r2
 8000b66:	d100      	bne.n	8000b6a <HAL_RCC_OscConfig+0x146>
 8000b68:	e069      	b.n	8000c3e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b6a:	4b79      	ldr	r3, [pc, #484]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	220c      	movs	r2, #12
 8000b70:	4013      	ands	r3, r2
 8000b72:	d00b      	beq.n	8000b8c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b74:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	220c      	movs	r2, #12
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d11c      	bne.n	8000bba <HAL_RCC_OscConfig+0x196>
 8000b80:	4b73      	ldr	r3, [pc, #460]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	025b      	lsls	r3, r3, #9
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d116      	bne.n	8000bba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8c:	4b70      	ldr	r3, [pc, #448]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2202      	movs	r2, #2
 8000b92:	4013      	ands	r3, r2
 8000b94:	d005      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x17e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d001      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e24b      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba2:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	22f8      	movs	r2, #248	; 0xf8
 8000ba8:	4393      	bics	r3, r2
 8000baa:	0019      	movs	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	00da      	lsls	r2, r3, #3
 8000bb2:	4b67      	ldr	r3, [pc, #412]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb8:	e041      	b.n	8000c3e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d024      	beq.n	8000c0c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bc2:	4b63      	ldr	r3, [pc, #396]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b62      	ldr	r3, [pc, #392]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bce:	f7ff fcdd 	bl	800058c <HAL_GetTick>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fcd8 	bl	800058c <HAL_GetTick>
 8000bdc:	0002      	movs	r2, r0
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e227      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bea:	4b59      	ldr	r3, [pc, #356]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d0f1      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf4:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	22f8      	movs	r2, #248	; 0xf8
 8000bfa:	4393      	bics	r3, r2
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	00da      	lsls	r2, r3, #3
 8000c04:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e018      	b.n	8000c3e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c0c:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b4f      	ldr	r3, [pc, #316]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	438a      	bics	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fcb8 	bl	800058c <HAL_GetTick>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fcb3 	bl	800058c <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e202      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c34:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2202      	movs	r2, #2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d1f1      	bne.n	8000c22 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2208      	movs	r2, #8
 8000c44:	4013      	ands	r3, r2
 8000c46:	d036      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d019      	beq.n	8000c84 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c54:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5c:	f7ff fc96 	bl	800058c <HAL_GetTick>
 8000c60:	0003      	movs	r3, r0
 8000c62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c64:	e008      	b.n	8000c78 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c66:	f7ff fc91 	bl	800058c <HAL_GetTick>
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d901      	bls.n	8000c78 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e1e0      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d0f1      	beq.n	8000c66 <HAL_RCC_OscConfig+0x242>
 8000c82:	e018      	b.n	8000cb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c90:	f7ff fc7c 	bl	800058c <HAL_GetTick>
 8000c94:	0003      	movs	r3, r0
 8000c96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c98:	e008      	b.n	8000cac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fc77 	bl	800058c <HAL_GetTick>
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d901      	bls.n	8000cac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e1c6      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	d1f1      	bne.n	8000c9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d100      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x29e>
 8000cc0:	e0b4      	b.n	8000e2c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cc2:	201f      	movs	r0, #31
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ccc:	69da      	ldr	r2, [r3, #28]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	055b      	lsls	r3, r3, #21
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d110      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000cd8:	69da      	ldr	r2, [r3, #28]
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	0549      	lsls	r1, r1, #21
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	61da      	str	r2, [r3, #28]
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000ce6:	69da      	ldr	r2, [r3, #28]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	055b      	lsls	r3, r3, #21
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000cf2:	183b      	adds	r3, r7, r0
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_RCC_OscConfig+0x338>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	d11a      	bne.n	8000d3a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_RCC_OscConfig+0x338>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_RCC_OscConfig+0x338>)
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0049      	lsls	r1, r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d12:	f7ff fc3b 	bl	800058c <HAL_GetTick>
 8000d16:	0003      	movs	r3, r0
 8000d18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d1c:	f7ff fc36 	bl	800058c <HAL_GetTick>
 8000d20:	0002      	movs	r2, r0
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e185      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_RCC_OscConfig+0x338>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4013      	ands	r3, r2
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10e      	bne.n	8000d60 <HAL_RCC_OscConfig+0x33c>
 8000d42:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000d44:	6a1a      	ldr	r2, [r3, #32]
 8000d46:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <HAL_RCC_OscConfig+0x32c>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	621a      	str	r2, [r3, #32]
 8000d4e:	e035      	b.n	8000dbc <HAL_RCC_OscConfig+0x398>
 8000d50:	40021000 	.word	0x40021000
 8000d54:	fffeffff 	.word	0xfffeffff
 8000d58:	fffbffff 	.word	0xfffbffff
 8000d5c:	40007000 	.word	0x40007000
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10c      	bne.n	8000d82 <HAL_RCC_OscConfig+0x35e>
 8000d68:	4bb6      	ldr	r3, [pc, #728]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d6a:	6a1a      	ldr	r2, [r3, #32]
 8000d6c:	4bb5      	ldr	r3, [pc, #724]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	438a      	bics	r2, r1
 8000d72:	621a      	str	r2, [r3, #32]
 8000d74:	4bb3      	ldr	r3, [pc, #716]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d76:	6a1a      	ldr	r2, [r3, #32]
 8000d78:	4bb2      	ldr	r3, [pc, #712]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	621a      	str	r2, [r3, #32]
 8000d80:	e01c      	b.n	8000dbc <HAL_RCC_OscConfig+0x398>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x380>
 8000d8a:	4bae      	ldr	r3, [pc, #696]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d8c:	6a1a      	ldr	r2, [r3, #32]
 8000d8e:	4bad      	ldr	r3, [pc, #692]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d90:	2104      	movs	r1, #4
 8000d92:	430a      	orrs	r2, r1
 8000d94:	621a      	str	r2, [r3, #32]
 8000d96:	4bab      	ldr	r3, [pc, #684]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d98:	6a1a      	ldr	r2, [r3, #32]
 8000d9a:	4baa      	ldr	r3, [pc, #680]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	621a      	str	r2, [r3, #32]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0x398>
 8000da4:	4ba7      	ldr	r3, [pc, #668]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	4ba6      	ldr	r3, [pc, #664]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	438a      	bics	r2, r1
 8000dae:	621a      	str	r2, [r3, #32]
 8000db0:	4ba4      	ldr	r3, [pc, #656]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	4ba3      	ldr	r3, [pc, #652]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000db6:	2104      	movs	r1, #4
 8000db8:	438a      	bics	r2, r1
 8000dba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d014      	beq.n	8000dee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fbe2 	bl	800058c <HAL_GetTick>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dcc:	e009      	b.n	8000de2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fbdd 	bl	800058c <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4a9b      	ldr	r2, [pc, #620]	; (8001048 <HAL_RCC_OscConfig+0x624>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e12b      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de2:	4b98      	ldr	r3, [pc, #608]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	2202      	movs	r2, #2
 8000de8:	4013      	ands	r3, r2
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x3aa>
 8000dec:	e013      	b.n	8000e16 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fbcd 	bl	800058c <HAL_GetTick>
 8000df2:	0003      	movs	r3, r0
 8000df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df6:	e009      	b.n	8000e0c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df8:	f7ff fbc8 	bl	800058c <HAL_GetTick>
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a91      	ldr	r2, [pc, #580]	; (8001048 <HAL_RCC_OscConfig+0x624>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e116      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e0c:	4b8d      	ldr	r3, [pc, #564]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	2202      	movs	r2, #2
 8000e12:	4013      	ands	r3, r2
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e16:	231f      	movs	r3, #31
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d105      	bne.n	8000e2c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e20:	4b88      	ldr	r3, [pc, #544]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e22:	69da      	ldr	r2, [r3, #28]
 8000e24:	4b87      	ldr	r3, [pc, #540]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e26:	4989      	ldr	r1, [pc, #548]	; (800104c <HAL_RCC_OscConfig+0x628>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2210      	movs	r2, #16
 8000e32:	4013      	ands	r3, r2
 8000e34:	d063      	beq.n	8000efe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d12a      	bne.n	8000e94 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e3e:	4b81      	ldr	r3, [pc, #516]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e42:	4b80      	ldr	r3, [pc, #512]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e44:	2104      	movs	r1, #4
 8000e46:	430a      	orrs	r2, r1
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e4a:	4b7e      	ldr	r3, [pc, #504]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4e:	4b7d      	ldr	r3, [pc, #500]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e56:	f7ff fb99 	bl	800058c <HAL_GetTick>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e60:	f7ff fb94 	bl	800058c <HAL_GetTick>
 8000e64:	0002      	movs	r2, r0
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e0e3      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e72:	4b74      	ldr	r3, [pc, #464]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d0f1      	beq.n	8000e60 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e7c:	4b71      	ldr	r3, [pc, #452]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e80:	22f8      	movs	r2, #248	; 0xf8
 8000e82:	4393      	bics	r3, r2
 8000e84:	0019      	movs	r1, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	00da      	lsls	r2, r3, #3
 8000e8c:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
 8000e92:	e034      	b.n	8000efe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	3305      	adds	r3, #5
 8000e9a:	d111      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e9c:	4b69      	ldr	r3, [pc, #420]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea0:	4b68      	ldr	r3, [pc, #416]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ea8:	4b66      	ldr	r3, [pc, #408]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eac:	22f8      	movs	r2, #248	; 0xf8
 8000eae:	4393      	bics	r3, r2
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	00da      	lsls	r2, r3, #3
 8000eb8:	4b62      	ldr	r3, [pc, #392]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ebe:	e01e      	b.n	8000efe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ec0:	4b60      	ldr	r3, [pc, #384]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec4:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000ecc:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed0:	4b5c      	ldr	r3, [pc, #368]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fb58 	bl	800058c <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ee2:	f7ff fb53 	bl	800058c <HAL_GetTick>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e0a2      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4013      	ands	r3, r2
 8000efc:	d1f1      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d100      	bne.n	8000f08 <HAL_RCC_OscConfig+0x4e4>
 8000f06:	e097      	b.n	8001038 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f08:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d100      	bne.n	8000f16 <HAL_RCC_OscConfig+0x4f2>
 8000f14:	e06b      	b.n	8000fee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d14c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b48      	ldr	r3, [pc, #288]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f24:	494a      	ldr	r1, [pc, #296]	; (8001050 <HAL_RCC_OscConfig+0x62c>)
 8000f26:	400a      	ands	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb2f 	bl	800058c <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f34:	f7ff fb2a 	bl	800058c <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e079      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	049b      	lsls	r3, r3, #18
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	220f      	movs	r2, #15
 8000f58:	4393      	bics	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f62:	430a      	orrs	r2, r1
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f66:	4b37      	ldr	r3, [pc, #220]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <HAL_RCC_OscConfig+0x630>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	0019      	movs	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	0449      	lsls	r1, r1, #17
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fafd 	bl	800058c <HAL_GetTick>
 8000f92:	0003      	movs	r3, r0
 8000f94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff faf8 	bl	800058c <HAL_GetTick>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e047      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	049b      	lsls	r3, r3, #18
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x574>
 8000fb6:	e03f      	b.n	8001038 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000fbe:	4924      	ldr	r1, [pc, #144]	; (8001050 <HAL_RCC_OscConfig+0x62c>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fae2 	bl	800058c <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fadd 	bl	800058c <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e02c      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	049b      	lsls	r3, r3, #18
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x5aa>
 8000fec:	e024      	b.n	8001038 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e01f      	b.n	800103a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_RCC_OscConfig+0x620>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	025b      	lsls	r3, r3, #9
 800100c:	401a      	ands	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	429a      	cmp	r2, r3
 8001014:	d10e      	bne.n	8001034 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	220f      	movs	r2, #15
 800101a:	401a      	ands	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	23f0      	movs	r3, #240	; 0xf0
 8001028:	039b      	lsls	r3, r3, #14
 800102a:	401a      	ands	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b008      	add	sp, #32
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	40021000 	.word	0x40021000
 8001048:	00001388 	.word	0x00001388
 800104c:	efffffff 	.word	0xefffffff
 8001050:	feffffff 	.word	0xfeffffff
 8001054:	ffc2ffff 	.word	0xffc2ffff

08001058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0b3      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4013      	ands	r3, r2
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d911      	bls.n	800109e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4393      	bics	r3, r2
 8001082:	0019      	movs	r1, r3
 8001084:	4b55      	ldr	r3, [pc, #340]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800108c:	4b53      	ldr	r3, [pc, #332]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4013      	ands	r3, r2
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d001      	beq.n	800109e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e09a      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d015      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2204      	movs	r2, #4
 80010ae:	4013      	ands	r3, r2
 80010b0:	d006      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80010b8:	21e0      	movs	r1, #224	; 0xe0
 80010ba:	00c9      	lsls	r1, r1, #3
 80010bc:	430a      	orrs	r2, r1
 80010be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	22f0      	movs	r2, #240	; 0xf0
 80010c6:	4393      	bics	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80010d0:	430a      	orrs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	d040      	beq.n	8001160 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	029b      	lsls	r3, r3, #10
 80010ee:	4013      	ands	r3, r2
 80010f0:	d114      	bne.n	800111c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e06e      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	049b      	lsls	r3, r3, #18
 8001106:	4013      	ands	r3, r2
 8001108:	d108      	bne.n	800111c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e062      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e05b      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4393      	bics	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001130:	f7ff fa2c 	bl	800058c <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001138:	e009      	b.n	800114e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113a:	f7ff fa27 	bl	800058c <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <HAL_RCC_ClockConfig+0x18c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d901      	bls.n	800114e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e042      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	220c      	movs	r2, #12
 8001154:	401a      	ands	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	429a      	cmp	r2, r3
 800115e:	d1ec      	bne.n	800113a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	4013      	ands	r3, r2
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d211      	bcs.n	8001192 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2201      	movs	r2, #1
 8001174:	4393      	bics	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_RCC_ClockConfig+0x184>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2201      	movs	r2, #1
 8001186:	4013      	ands	r3, r2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d001      	beq.n	8001192 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e020      	b.n	80011d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2204      	movs	r2, #4
 8001198:	4013      	ands	r3, r2
 800119a:	d009      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_RCC_ClockConfig+0x190>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80011ac:	430a      	orrs	r2, r1
 80011ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011b0:	f000 f820 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 80011b4:	0001      	movs	r1, r0
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RCC_ClockConfig+0x188>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	220f      	movs	r2, #15
 80011be:	4013      	ands	r3, r2
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_RCC_ClockConfig+0x194>)
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	000a      	movs	r2, r1
 80011c6:	40da      	lsrs	r2, r3
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_RCC_ClockConfig+0x198>)
 80011ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f7ff f997 	bl	8000500 <HAL_InitTick>
  
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	00001388 	.word	0x00001388
 80011e8:	fffff8ff 	.word	0xfffff8ff
 80011ec:	080037b0 	.word	0x080037b0
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	220c      	movs	r2, #12
 8001218:	4013      	ands	r3, r2
 800121a:	2b04      	cmp	r3, #4
 800121c:	d002      	beq.n	8001224 <HAL_RCC_GetSysClockFreq+0x30>
 800121e:	2b08      	cmp	r3, #8
 8001220:	d003      	beq.n	800122a <HAL_RCC_GetSysClockFreq+0x36>
 8001222:	e02c      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001226:	613b      	str	r3, [r7, #16]
      break;
 8001228:	e02c      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	0c9b      	lsrs	r3, r3, #18
 800122e:	220f      	movs	r2, #15
 8001230:	4013      	ands	r3, r2
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001234:	5cd3      	ldrb	r3, [r2, r3]
 8001236:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_RCC_GetSysClockFreq+0x9c>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	220f      	movs	r2, #15
 800123e:	4013      	ands	r3, r2
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	4013      	ands	r3, r2
 800124e:	d009      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	4810      	ldr	r0, [pc, #64]	; (8001294 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001254:	f7fe ff58 	bl	8000108 <__udivsi3>
 8001258:	0003      	movs	r3, r0
 800125a:	001a      	movs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4353      	muls	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e009      	b.n	8001278 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	000a      	movs	r2, r1
 8001268:	0152      	lsls	r2, r2, #5
 800126a:	1a52      	subs	r2, r2, r1
 800126c:	0193      	lsls	r3, r2, #6
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	185b      	adds	r3, r3, r1
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
      break;
 800127c:	e002      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001280:	613b      	str	r3, [r7, #16]
      break;
 8001282:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001284:	693b      	ldr	r3, [r7, #16]
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b006      	add	sp, #24
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	40021000 	.word	0x40021000
 8001294:	007a1200 	.word	0x007a1200
 8001298:	080037c0 	.word	0x080037c0
 800129c:	080037d0 	.word	0x080037d0

080012a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012a6:	f3ef 8305 	mrs	r3, IPSR
 80012aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80012ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b2:	f3ef 8310 	mrs	r3, PRIMASK
 80012b6:	607b      	str	r3, [r7, #4]
  return(result);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <osKernelInitialize+0x2e>
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <osKernelInitialize+0x54>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d103      	bne.n	80012ce <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80012c6:	2306      	movs	r3, #6
 80012c8:	425b      	negs	r3, r3
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e00c      	b.n	80012e8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <osKernelInitialize+0x54>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <osKernelInitialize+0x54>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e002      	b.n	80012e8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80012e2:	2301      	movs	r3, #1
 80012e4:	425b      	negs	r3, r3
 80012e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000298 	.word	0x20000298

080012f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012fe:	f3ef 8305 	mrs	r3, IPSR
 8001302:	60bb      	str	r3, [r7, #8]
  return(result);
 8001304:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800130a:	f3ef 8310 	mrs	r3, PRIMASK
 800130e:	607b      	str	r3, [r7, #4]
  return(result);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <osKernelStart+0x2e>
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <osKernelStart+0x58>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d103      	bne.n	8001326 <osKernelStart+0x2e>
    stat = osErrorISR;
 800131e:	2306      	movs	r3, #6
 8001320:	425b      	negs	r3, r3
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e00e      	b.n	8001344 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <osKernelStart+0x58>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d107      	bne.n	800133e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <osKernelStart+0x58>)
 8001330:	2202      	movs	r2, #2
 8001332:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001334:	f000 ff7e 	bl	8002234 <vTaskStartScheduler>
      stat = osOK;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e002      	b.n	8001344 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800133e:	2301      	movs	r3, #1
 8001340:	425b      	negs	r3, r3
 8001342:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000298 	.word	0x20000298

08001354 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b090      	sub	sp, #64	; 0x40
 8001358:	af04      	add	r7, sp, #16
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001364:	f3ef 8305 	mrs	r3, IPSR
 8001368:	61fb      	str	r3, [r7, #28]
  return(result);
 800136a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800136c:	2b00      	cmp	r3, #0
 800136e:	d000      	beq.n	8001372 <osThreadNew+0x1e>
 8001370:	e090      	b.n	8001494 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001372:	f3ef 8310 	mrs	r3, PRIMASK
 8001376:	61bb      	str	r3, [r7, #24]
  return(result);
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <osThreadNew+0x34>
 800137e:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <osThreadNew+0x14c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d100      	bne.n	8001388 <osThreadNew+0x34>
 8001386:	e085      	b.n	8001494 <osThreadNew+0x140>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d100      	bne.n	8001390 <osThreadNew+0x3c>
 800138e:	e081      	b.n	8001494 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001394:	2318      	movs	r3, #24
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8001398:	2117      	movs	r1, #23
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	425b      	negs	r3, r3
 80013a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d044      	beq.n	800143a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <osThreadNew+0x6a>
        name = attr->name;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <osThreadNew+0x8e>
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	d804      	bhi.n	80013e2 <osThreadNew+0x8e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	d001      	beq.n	80013e6 <osThreadNew+0x92>
        return (NULL);
 80013e2:	2300      	movs	r3, #0
 80013e4:	e057      	b.n	8001496 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00e      	beq.n	800141c <osThreadNew+0xc8>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b5b      	cmp	r3, #91	; 0x5b
 8001404:	d90a      	bls.n	800141c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <osThreadNew+0xc8>
        mem = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	e010      	b.n	800143e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10c      	bne.n	800143e <osThreadNew+0xea>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d108      	bne.n	800143e <osThreadNew+0xea>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d104      	bne.n	800143e <osThreadNew+0xea>
          mem = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	e001      	b.n	800143e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d112      	bne.n	800146a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800144c:	68bd      	ldr	r5, [r7, #8]
 800144e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	002b      	movs	r3, r5
 800145e:	0022      	movs	r2, r4
 8001460:	f000 fd49 	bl	8001ef6 <xTaskCreateStatic>
 8001464:	0003      	movs	r3, r0
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	e014      	b.n	8001494 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d111      	bne.n	8001494 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	b29a      	uxth	r2, r3
 8001474:	68bc      	ldr	r4, [r7, #8]
 8001476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	2310      	movs	r3, #16
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	0023      	movs	r3, r4
 8001486:	f000 fd79 	bl	8001f7c <xTaskCreate>
 800148a:	0003      	movs	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <osThreadNew+0x140>
          hTask = NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001494:	693b      	ldr	r3, [r7, #16]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b00c      	add	sp, #48	; 0x30
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000298 	.word	0x20000298

080014a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014ac:	f3ef 8305 	mrs	r3, IPSR
 80014b0:	613b      	str	r3, [r7, #16]
  return(result);
 80014b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b8:	f3ef 8310 	mrs	r3, PRIMASK
 80014bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d007      	beq.n	80014d4 <osDelay+0x30>
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <osDelay+0x4c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d103      	bne.n	80014d4 <osDelay+0x30>
    stat = osErrorISR;
 80014cc:	2306      	movs	r3, #6
 80014ce:	425b      	negs	r3, r3
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e008      	b.n	80014e6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <osDelay+0x42>
      vTaskDelay(ticks);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 fe81 	bl	80021e8 <vTaskDelay>
    }
  }

  return (stat);
 80014e6:	697b      	ldr	r3, [r7, #20]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b006      	add	sp, #24
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000298 	.word	0x20000298

080014f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <vApplicationGetIdleTaskMemory+0x28>)
 8001504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <vApplicationGetIdleTaskMemory+0x2c>)
 800150a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	2000029c 	.word	0x2000029c
 8001520:	200002f8 	.word	0x200002f8

08001524 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a06      	ldr	r2, [pc, #24]	; (800154c <vApplicationGetTimerTaskMemory+0x28>)
 8001534:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	4a05      	ldr	r2, [pc, #20]	; (8001550 <vApplicationGetTimerTaskMemory+0x2c>)
 800153a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	200003f8 	.word	0x200003f8
 8001550:	20000454 	.word	0x20000454

08001554 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3308      	adds	r3, #8
 8001560:	001a      	movs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	4252      	negs	r2, r2
 800156c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3308      	adds	r3, #8
 8001572:	001a      	movs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3308      	adds	r3, #8
 800157c:	001a      	movs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}

08001590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3301      	adds	r3, #1
 80015fe:	d103      	bne.n	8001608 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e00c      	b.n	8001622 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3308      	adds	r3, #8
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e002      	b.n	8001616 <vListInsert+0x2c>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	d2f6      	bcs.n	8001610 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b004      	add	sp, #16
 8001654:	bd80      	pop	{r7, pc}

08001656 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6892      	ldr	r2, [r2, #8]
 800166c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6852      	ldr	r2, [r2, #4]
 8001676:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d103      	bne.n	800168a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <xQueueGenericReset+0x18>
 80016ba:	b672      	cpsid	i
 80016bc:	e7fe      	b.n	80016bc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80016be:	f001 fdcf 	bl	8003260 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	434b      	muls	r3, r1
 80016d0:	18d2      	adds	r2, r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	1e59      	subs	r1, r3, #1
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	434b      	muls	r3, r1
 80016f4:	18d2      	adds	r2, r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2244      	movs	r2, #68	; 0x44
 80016fe:	21ff      	movs	r1, #255	; 0xff
 8001700:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2245      	movs	r2, #69	; 0x45
 8001706:	21ff      	movs	r1, #255	; 0xff
 8001708:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10d      	bne.n	800172c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3310      	adds	r3, #16
 800171c:	0018      	movs	r0, r3
 800171e:	f000 ffcd 	bl	80026bc <xTaskRemoveFromEventList>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d00c      	beq.n	8001740 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001726:	f001 fd8b 	bl	8003240 <vPortYield>
 800172a:	e009      	b.n	8001740 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3310      	adds	r3, #16
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff0f 	bl	8001554 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3324      	adds	r3, #36	; 0x24
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff ff0a 	bl	8001554 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001740:	f001 fda0 	bl	8003284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001744:	2301      	movs	r3, #1
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}

0800174e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b089      	sub	sp, #36	; 0x24
 8001752:	af02      	add	r7, sp, #8
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <xQueueGenericCreateStatic+0x18>
 8001762:	b672      	cpsid	i
 8001764:	e7fe      	b.n	8001764 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <xQueueGenericCreateStatic+0x22>
 800176c:	b672      	cpsid	i
 800176e:	e7fe      	b.n	800176e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <xQueueGenericCreateStatic+0x2e>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <xQueueGenericCreateStatic+0x32>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <xQueueGenericCreateStatic+0x34>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <xQueueGenericCreateStatic+0x3c>
 8001786:	b672      	cpsid	i
 8001788:	e7fe      	b.n	8001788 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <xQueueGenericCreateStatic+0x48>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <xQueueGenericCreateStatic+0x4c>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <xQueueGenericCreateStatic+0x4e>
 800179a:	2300      	movs	r3, #0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <xQueueGenericCreateStatic+0x56>
 80017a0:	b672      	cpsid	i
 80017a2:	e7fe      	b.n	80017a2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017a4:	2350      	movs	r3, #80	; 0x50
 80017a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b50      	cmp	r3, #80	; 0x50
 80017ac:	d001      	beq.n	80017b2 <xQueueGenericCreateStatic+0x64>
 80017ae:	b672      	cpsid	i
 80017b0:	e7fe      	b.n	80017b0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00e      	beq.n	80017da <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2246      	movs	r2, #70	; 0x46
 80017c0:	2101      	movs	r1, #1
 80017c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80017c4:	2328      	movs	r3, #40	; 0x28
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	781c      	ldrb	r4, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	0023      	movs	r3, r4
 80017d6:	f000 f805 	bl	80017e4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80017da:	697b      	ldr	r3, [r7, #20]
	}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b007      	add	sp, #28
 80017e2:	bd90      	pop	{r4, r7, pc}

080017e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	001a      	movs	r2, r3
 80017f2:	1cfb      	adds	r3, r7, #3
 80017f4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e002      	b.n	800180a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2101      	movs	r1, #1
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff ff43 	bl	80016a6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1cfa      	adds	r2, r7, #3
 8001824:	214c      	movs	r1, #76	; 0x4c
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}

08001832 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b08a      	sub	sp, #40	; 0x28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <xQueueGenericSend+0x20>
 800184e:	b672      	cpsid	i
 8001850:	e7fe      	b.n	8001850 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <xQueueGenericSend+0x2e>
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <xQueueGenericSend+0x32>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <xQueueGenericSend+0x34>
 8001864:	2300      	movs	r3, #0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <xQueueGenericSend+0x3c>
 800186a:	b672      	cpsid	i
 800186c:	e7fe      	b.n	800186c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d103      	bne.n	800187c <xQueueGenericSend+0x4a>
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <xQueueGenericSend+0x4e>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <xQueueGenericSend+0x50>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <xQueueGenericSend+0x58>
 8001886:	b672      	cpsid	i
 8001888:	e7fe      	b.n	8001888 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800188a:	f001 f8af 	bl	80029ec <xTaskGetSchedulerState>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d102      	bne.n	8001898 <xQueueGenericSend+0x66>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <xQueueGenericSend+0x6a>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <xQueueGenericSend+0x6c>
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <xQueueGenericSend+0x74>
 80018a2:	b672      	cpsid	i
 80018a4:	e7fe      	b.n	80018a4 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018a6:	f001 fcdb 	bl	8003260 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d302      	bcc.n	80018bc <xQueueGenericSend+0x8a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d11e      	bne.n	80018fa <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f99f 	bl	8001c06 <prvCopyDataToQueue>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	3324      	adds	r3, #36	; 0x24
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 feef 	bl	80026bc <xTaskRemoveFromEventList>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d007      	beq.n	80018f2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80018e2:	f001 fcad 	bl	8003240 <vPortYield>
 80018e6:	e004      	b.n	80018f2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80018ee:	f001 fca7 	bl	8003240 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80018f2:	f001 fcc7 	bl	8003284 <vPortExitCritical>
				return pdPASS;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e05b      	b.n	80019b2 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001900:	f001 fcc0 	bl	8003284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001904:	2300      	movs	r3, #0
 8001906:	e054      	b.n	80019b2 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800190e:	2314      	movs	r3, #20
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	0018      	movs	r0, r3
 8001914:	f000 ff2e 	bl	8002774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001918:	2301      	movs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800191c:	f001 fcb2 	bl	8003284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001920:	f000 fcdc 	bl	80022dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001924:	f001 fc9c 	bl	8003260 <vPortEnterCritical>
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2244      	movs	r2, #68	; 0x44
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	d103      	bne.n	800193c <xQueueGenericSend+0x10a>
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	2244      	movs	r2, #68	; 0x44
 8001938:	2100      	movs	r1, #0
 800193a:	5499      	strb	r1, [r3, r2]
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	2245      	movs	r2, #69	; 0x45
 8001940:	5c9b      	ldrb	r3, [r3, r2]
 8001942:	b25b      	sxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	d103      	bne.n	8001950 <xQueueGenericSend+0x11e>
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2245      	movs	r2, #69	; 0x45
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]
 8001950:	f001 fc98 	bl	8003284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001954:	1d3a      	adds	r2, r7, #4
 8001956:	2314      	movs	r3, #20
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	0011      	movs	r1, r2
 800195c:	0018      	movs	r0, r3
 800195e:	f000 ff1d 	bl	800279c <xTaskCheckForTimeOut>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d11e      	bne.n	80019a4 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	0018      	movs	r0, r3
 800196a:	f000 fa51 	bl	8001e10 <prvIsQueueFull>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d011      	beq.n	8001996 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	3310      	adds	r3, #16
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	0011      	movs	r1, r2
 800197a:	0018      	movs	r0, r3
 800197c:	f000 fe5a 	bl	8002634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f9d0 	bl	8001d28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001988:	f000 fcb4 	bl	80022f4 <xTaskResumeAll>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d18a      	bne.n	80018a6 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8001990:	f001 fc56 	bl	8003240 <vPortYield>
 8001994:	e787      	b.n	80018a6 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	0018      	movs	r0, r3
 800199a:	f000 f9c5 	bl	8001d28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800199e:	f000 fca9 	bl	80022f4 <xTaskResumeAll>
 80019a2:	e780      	b.n	80018a6 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f9be 	bl	8001d28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80019ac:	f000 fca2 	bl	80022f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80019b0:	2300      	movs	r3, #0
		}
	}
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b00a      	add	sp, #40	; 0x28
 80019b8:	bd80      	pop	{r7, pc}

080019ba <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80019ba:	b590      	push	{r4, r7, lr}
 80019bc:	b089      	sub	sp, #36	; 0x24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <xQueueGenericSendFromISR+0x1c>
 80019d2:	b672      	cpsid	i
 80019d4:	e7fe      	b.n	80019d4 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <xQueueGenericSendFromISR+0x2a>
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <xQueueGenericSendFromISR+0x2e>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <xQueueGenericSendFromISR+0x30>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <xQueueGenericSendFromISR+0x38>
 80019ee:	b672      	cpsid	i
 80019f0:	e7fe      	b.n	80019f0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d103      	bne.n	8001a00 <xQueueGenericSendFromISR+0x46>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <xQueueGenericSendFromISR+0x4a>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <xQueueGenericSendFromISR+0x4c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <xQueueGenericSendFromISR+0x54>
 8001a0a:	b672      	cpsid	i
 8001a0c:	e7fe      	b.n	8001a0c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a0e:	f001 fc51 	bl	80032b4 <ulSetInterruptMaskFromISR>
 8001a12:	0003      	movs	r3, r0
 8001a14:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <xQueueGenericSendFromISR+0x6e>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d12e      	bne.n	8001a86 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001a28:	2413      	movs	r4, #19
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	2145      	movs	r1, #69	; 0x45
 8001a30:	5c52      	ldrb	r2, [r2, r1]
 8001a32:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f8e3 	bl	8001c06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001a40:	193b      	adds	r3, r7, r4
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	d111      	bne.n	8001a6e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3324      	adds	r3, #36	; 0x24
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 fe30 	bl	80026bc <xTaskRemoveFromEventList>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d00f      	beq.n	8001a80 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00c      	beq.n	8001a80 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e008      	b.n	8001a80 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001a6e:	2313      	movs	r3, #19
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b259      	sxtb	r1, r3
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2245      	movs	r2, #69	; 0x45
 8001a7e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
		{
 8001a84:	e001      	b.n	8001a8a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 fc17 	bl	80032c0 <vClearInterruptMaskFromISR>

	return xReturn;
 8001a92:	69fb      	ldr	r3, [r7, #28]
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b009      	add	sp, #36	; 0x24
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <xQueueReceive+0x1e>
 8001ab6:	b672      	cpsid	i
 8001ab8:	e7fe      	b.n	8001ab8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <xQueueReceive+0x2c>
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <xQueueReceive+0x30>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <xQueueReceive+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <xQueueReceive+0x3a>
 8001ad2:	b672      	cpsid	i
 8001ad4:	e7fe      	b.n	8001ad4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ad6:	f000 ff89 	bl	80029ec <xTaskGetSchedulerState>
 8001ada:	1e03      	subs	r3, r0, #0
 8001adc:	d102      	bne.n	8001ae4 <xQueueReceive+0x48>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <xQueueReceive+0x4c>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <xQueueReceive+0x4e>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <xQueueReceive+0x56>
 8001aee:	b672      	cpsid	i
 8001af0:	e7fe      	b.n	8001af0 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001af2:	f001 fbb5 	bl	8003260 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01a      	beq.n	8001b38 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	0011      	movs	r1, r2
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 f8e7 	bl	8001cdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	3310      	adds	r3, #16
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 fdca 	bl	80026bc <xTaskRemoveFromEventList>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001b2c:	f001 fb88 	bl	8003240 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001b30:	f001 fba8 	bl	8003284 <vPortExitCritical>
				return pdPASS;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e062      	b.n	8001bfe <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b3e:	f001 fba1 	bl	8003284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e05b      	b.n	8001bfe <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d106      	bne.n	8001b5a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b4c:	2314      	movs	r3, #20
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fe0f 	bl	8002774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b5a:	f001 fb93 	bl	8003284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b5e:	f000 fbbd 	bl	80022dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b62:	f001 fb7d 	bl	8003260 <vPortEnterCritical>
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2244      	movs	r2, #68	; 0x44
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	d103      	bne.n	8001b7a <xQueueReceive+0xde>
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2244      	movs	r2, #68	; 0x44
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2245      	movs	r2, #69	; 0x45
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	d103      	bne.n	8001b8e <xQueueReceive+0xf2>
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2245      	movs	r2, #69	; 0x45
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
 8001b8e:	f001 fb79 	bl	8003284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b92:	1d3a      	adds	r2, r7, #4
 8001b94:	2314      	movs	r3, #20
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	0011      	movs	r1, r2
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fdfe 	bl	800279c <xTaskCheckForTimeOut>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d11e      	bne.n	8001be2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f91c 	bl	8001de4 <prvIsQueueEmpty>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d011      	beq.n	8001bd4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	3324      	adds	r3, #36	; 0x24
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 fd3b 	bl	8002634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 f8b1 	bl	8001d28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001bc6:	f000 fb95 	bl	80022f4 <xTaskResumeAll>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d191      	bne.n	8001af2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8001bce:	f001 fb37 	bl	8003240 <vPortYield>
 8001bd2:	e78e      	b.n	8001af2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f8a6 	bl	8001d28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bdc:	f000 fb8a 	bl	80022f4 <xTaskResumeAll>
 8001be0:	e787      	b.n	8001af2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f89f 	bl	8001d28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bea:	f000 fb83 	bl	80022f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 f8f7 	bl	8001de4 <prvIsQueueEmpty>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d100      	bne.n	8001bfc <xQueueReceive+0x160>
 8001bfa:	e77a      	b.n	8001af2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001bfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b00a      	add	sp, #40	; 0x28
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10e      	bne.n	8001c42 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d14e      	bne.n	8001cca <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 fef7 	bl	8002a24 <xTaskPriorityDisinherit>
 8001c36:	0003      	movs	r3, r0
 8001c38:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	e043      	b.n	8001cca <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d119      	bne.n	8001c7c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6898      	ldr	r0, [r3, #8]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0019      	movs	r1, r3
 8001c54:	f001 fd66 	bl	8003724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	18d2      	adds	r2, r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d32b      	bcc.n	8001cca <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e026      	b.n	8001cca <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	68d8      	ldr	r0, [r3, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	0019      	movs	r1, r3
 8001c88:	f001 fd4c 	bl	8003724 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	425b      	negs	r3, r3
 8001c96:	18d2      	adds	r2, r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	18d2      	adds	r2, r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d105      	bne.n	8001cca <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001cd2:	697b      	ldr	r3, [r7, #20]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b006      	add	sp, #24
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d018      	beq.n	8001d20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	18d2      	adds	r2, r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d303      	bcc.n	8001d10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68d9      	ldr	r1, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f001 fd02 	bl	8003724 <memcpy>
	}
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001d30:	f001 fa96 	bl	8003260 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001d34:	230f      	movs	r3, #15
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	2145      	movs	r1, #69	; 0x45
 8001d3c:	5c52      	ldrb	r2, [r2, r1]
 8001d3e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d40:	e013      	b.n	8001d6a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3324      	adds	r3, #36	; 0x24
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 fcb4 	bl	80026bc <xTaskRemoveFromEventList>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d001      	beq.n	8001d5c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001d58:	f000 fd70 	bl	800283c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dce5      	bgt.n	8001d42 <prvUnlockQueue+0x1a>
 8001d76:	e000      	b.n	8001d7a <prvUnlockQueue+0x52>
					break;
 8001d78:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2245      	movs	r2, #69	; 0x45
 8001d7e:	21ff      	movs	r1, #255	; 0xff
 8001d80:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8001d82:	f001 fa7f 	bl	8003284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001d86:	f001 fa6b 	bl	8003260 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001d8a:	230e      	movs	r3, #14
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	2144      	movs	r1, #68	; 0x44
 8001d92:	5c52      	ldrb	r2, [r2, r1]
 8001d94:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d96:	e013      	b.n	8001dc0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d016      	beq.n	8001dce <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3310      	adds	r3, #16
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fc89 	bl	80026bc <xTaskRemoveFromEventList>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8001dae:	f000 fd45 	bl	800283c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001db2:	210e      	movs	r1, #14
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001dc0:	230e      	movs	r3, #14
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dce5      	bgt.n	8001d98 <prvUnlockQueue+0x70>
 8001dcc:	e000      	b.n	8001dd0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8001dce:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2244      	movs	r2, #68	; 0x44
 8001dd4:	21ff      	movs	r1, #255	; 0xff
 8001dd6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8001dd8:	f001 fa54 	bl	8003284 <vPortExitCritical>
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001dec:	f001 fa38 	bl	8003260 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e001      	b.n	8001e02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e02:	f001 fa3f 	bl	8003284 <vPortExitCritical>

	return xReturn;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e18:	f001 fa22 	bl	8003260 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d102      	bne.n	8001e2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e001      	b.n	8001e32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e32:	f001 fa27 	bl	8003284 <vPortExitCritical>

	return xReturn;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b004      	add	sp, #16
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e015      	b.n	8001e7c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <vQueueAddToRegistry+0x4c>)
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	00d2      	lsls	r2, r2, #3
 8001e56:	58d3      	ldr	r3, [r2, r3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <vQueueAddToRegistry+0x4c>)
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <vQueueAddToRegistry+0x4c>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	3304      	adds	r3, #4
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001e74:	e006      	b.n	8001e84 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b07      	cmp	r3, #7
 8001e80:	d9e6      	bls.n	8001e50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b004      	add	sp, #16
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000654 	.word	0x20000654

08001e90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001ea0:	f001 f9de 	bl	8003260 <vPortEnterCritical>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2244      	movs	r2, #68	; 0x44
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	d103      	bne.n	8001eb8 <vQueueWaitForMessageRestricted+0x28>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2244      	movs	r2, #68	; 0x44
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2245      	movs	r2, #69	; 0x45
 8001ebc:	5c9b      	ldrb	r3, [r3, r2]
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	d103      	bne.n	8001ecc <vQueueWaitForMessageRestricted+0x3c>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2245      	movs	r2, #69	; 0x45
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]
 8001ecc:	f001 f9da 	bl	8003284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3324      	adds	r3, #36	; 0x24
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 fbc5 	bl	8002670 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ff1d 	bl	8001d28 <prvUnlockQueue>
	}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b006      	add	sp, #24
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001ef6:	b590      	push	{r4, r7, lr}
 8001ef8:	b08d      	sub	sp, #52	; 0x34
 8001efa:	af04      	add	r7, sp, #16
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <xTaskCreateStatic+0x18>
 8001f0a:	b672      	cpsid	i
 8001f0c:	e7fe      	b.n	8001f0c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <xTaskCreateStatic+0x22>
 8001f14:	b672      	cpsid	i
 8001f16:	e7fe      	b.n	8001f16 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001f18:	235c      	movs	r3, #92	; 0x5c
 8001f1a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b5c      	cmp	r3, #92	; 0x5c
 8001f20:	d001      	beq.n	8001f26 <xTaskCreateStatic+0x30>
 8001f22:	b672      	cpsid	i
 8001f24:	e7fe      	b.n	8001f24 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <xTaskCreateStatic+0x78>
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01d      	beq.n	8001f6e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2259      	movs	r2, #89	; 0x59
 8001f40:	2102      	movs	r1, #2
 8001f42:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f44:	683c      	ldr	r4, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9303      	str	r3, [sp, #12]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2318      	movs	r3, #24
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	0023      	movs	r3, r4
 8001f60:	f000 f858 	bl	8002014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 f8d6 	bl	8002118 <prvAddNewTaskToReadyList>
 8001f6c:	e001      	b.n	8001f72 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f72:	69bb      	ldr	r3, [r7, #24]
	}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b009      	add	sp, #36	; 0x24
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b08d      	sub	sp, #52	; 0x34
 8001f80:	af04      	add	r7, sp, #16
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	0018      	movs	r0, r3
 8001f94:	f001 f9fc 	bl	8003390 <pvPortMalloc>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001fa2:	205c      	movs	r0, #92	; 0x5c
 8001fa4:	f001 f9f4 	bl	8003390 <pvPortMalloc>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb8:	e006      	b.n	8001fc8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f001 fa8d 	bl	80034dc <vPortFree>
 8001fc2:	e001      	b.n	8001fc8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01a      	beq.n	8002004 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2259      	movs	r2, #89	; 0x59
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	881a      	ldrh	r2, [r3, #0]
 8001fda:	683c      	ldr	r4, [r7, #0]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9303      	str	r3, [sp, #12]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	0023      	movs	r3, r4
 8001ff2:	f000 f80f 	bl	8002014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f88d 	bl	8002118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e002      	b.n	800200a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002004:	2301      	movs	r3, #1
 8002006:	425b      	negs	r3, r3
 8002008:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800200a:	69bb      	ldr	r3, [r7, #24]
	}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b009      	add	sp, #36	; 0x24
 8002012:	bd90      	pop	{r4, r7, pc}

08002014 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	001a      	movs	r2, r3
 800202c:	21a5      	movs	r1, #165	; 0xa5
 800202e:	f001 fb82 	bl	8003736 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4936      	ldr	r1, [pc, #216]	; (8002114 <prvInitialiseNewTask+0x100>)
 800203a:	468c      	mov	ip, r1
 800203c:	4463      	add	r3, ip
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2207      	movs	r2, #7
 8002048:	4393      	bics	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2207      	movs	r2, #7
 8002050:	4013      	ands	r3, r2
 8002052:	d001      	beq.n	8002058 <prvInitialiseNewTask+0x44>
 8002054:	b672      	cpsid	i
 8002056:	e7fe      	b.n	8002056 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e013      	b.n	8002086 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	18d3      	adds	r3, r2, r3
 8002064:	7818      	ldrb	r0, [r3, #0]
 8002066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002068:	2134      	movs	r1, #52	; 0x34
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	18d3      	adds	r3, r2, r3
 800206e:	185b      	adds	r3, r3, r1
 8002070:	1c02      	adds	r2, r0, #0
 8002072:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d9e8      	bls.n	800205e <prvInitialiseNewTask+0x4a>
 800208c:	e000      	b.n	8002090 <prvInitialiseNewTask+0x7c>
		{
			break;
 800208e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	2243      	movs	r2, #67	; 0x43
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b37      	cmp	r3, #55	; 0x37
 800209c:	d901      	bls.n	80020a2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800209e:	2337      	movs	r3, #55	; 0x37
 80020a0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	6a3a      	ldr	r2, [r7, #32]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	2200      	movs	r2, #0
 80020b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	3304      	adds	r3, #4
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7ff fa69 	bl	8001590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	3318      	adds	r3, #24
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff fa64 	bl	8001590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	2238      	movs	r2, #56	; 0x38
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	2200      	movs	r2, #0
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	2258      	movs	r2, #88	; 0x58
 80020e8:	2100      	movs	r1, #0
 80020ea:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f001 f816 	bl	8003124 <pxPortInitialiseStack>
 80020f8:	0002      	movs	r2, r0
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b006      	add	sp, #24
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	3fffffff 	.word	0x3fffffff

08002118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002120:	f001 f89e 	bl	8003260 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <prvAddNewTaskToReadyList+0xb8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <prvAddNewTaskToReadyList+0xb8>)
 800212c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <prvAddNewTaskToReadyList+0xbc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <prvAddNewTaskToReadyList+0xbc>)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <prvAddNewTaskToReadyList+0xb8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d110      	bne.n	8002166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002144:	f000 fb94 	bl	8002870 <prvInitialiseTaskLists>
 8002148:	e00d      	b.n	8002166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <prvAddNewTaskToReadyList+0xc0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <prvAddNewTaskToReadyList+0xbc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	429a      	cmp	r2, r3
 800215e:	d802      	bhi.n	8002166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <prvAddNewTaskToReadyList+0xbc>)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <prvAddNewTaskToReadyList+0xc4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <prvAddNewTaskToReadyList+0xc4>)
 800216e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <prvAddNewTaskToReadyList+0xc4>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <prvAddNewTaskToReadyList+0xc8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d903      	bls.n	800218c <prvAddNewTaskToReadyList+0x74>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <prvAddNewTaskToReadyList+0xc8>)
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	0013      	movs	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	189b      	adds	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <prvAddNewTaskToReadyList+0xcc>)
 800219a:	189a      	adds	r2, r3, r2
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	0019      	movs	r1, r3
 80021a2:	0010      	movs	r0, r2
 80021a4:	f7ff f9ff 	bl	80015a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80021a8:	f001 f86c 	bl	8003284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <prvAddNewTaskToReadyList+0xc0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <prvAddNewTaskToReadyList+0xbc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	429a      	cmp	r2, r3
 80021c0:	d201      	bcs.n	80021c6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80021c2:	f001 f83d 	bl	8003240 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000b68 	.word	0x20000b68
 80021d4:	20000694 	.word	0x20000694
 80021d8:	20000b74 	.word	0x20000b74
 80021dc:	20000b84 	.word	0x20000b84
 80021e0:	20000b70 	.word	0x20000b70
 80021e4:	20000698 	.word	0x20000698

080021e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <vTaskDelay+0x48>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <vTaskDelay+0x1e>
 8002202:	b672      	cpsid	i
 8002204:	e7fe      	b.n	8002204 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002206:	f000 f869 	bl	80022dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2100      	movs	r1, #0
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fc64 	bl	8002adc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002214:	f000 f86e 	bl	80022f4 <xTaskResumeAll>
 8002218:	0003      	movs	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002222:	f001 f80d 	bl	8003240 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	20000b90 	.word	0x20000b90

08002234 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002242:	003a      	movs	r2, r7
 8002244:	1d39      	adds	r1, r7, #4
 8002246:	2308      	movs	r3, #8
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff f952 	bl	80014f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002250:	683c      	ldr	r4, [r7, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	491b      	ldr	r1, [pc, #108]	; (80022c4 <vTaskStartScheduler+0x90>)
 8002258:	481b      	ldr	r0, [pc, #108]	; (80022c8 <vTaskStartScheduler+0x94>)
 800225a:	9202      	str	r2, [sp, #8]
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	2300      	movs	r3, #0
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	0022      	movs	r2, r4
 8002266:	f7ff fe46 	bl	8001ef6 <xTaskCreateStatic>
 800226a:	0002      	movs	r2, r0
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <vTaskStartScheduler+0x98>)
 800226e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <vTaskStartScheduler+0x98>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002278:	2301      	movs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e001      	b.n	8002282 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d103      	bne.n	8002290 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8002288:	f000 fc7c 	bl	8002b84 <xTimerCreateTimerTask>
 800228c:	0003      	movs	r3, r0
 800228e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002296:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <vTaskStartScheduler+0x9c>)
 800229a:	2201      	movs	r2, #1
 800229c:	4252      	negs	r2, r2
 800229e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <vTaskStartScheduler+0xa0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <vTaskStartScheduler+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022ac:	f000 ffa4 	bl	80031f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022b0:	e004      	b.n	80022bc <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3301      	adds	r3, #1
 80022b6:	d101      	bne.n	80022bc <vTaskStartScheduler+0x88>
 80022b8:	b672      	cpsid	i
 80022ba:	e7fe      	b.n	80022ba <vTaskStartScheduler+0x86>
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b005      	add	sp, #20
 80022c2:	bd90      	pop	{r4, r7, pc}
 80022c4:	08003774 	.word	0x08003774
 80022c8:	08002851 	.word	0x08002851
 80022cc:	20000b8c 	.word	0x20000b8c
 80022d0:	20000b88 	.word	0x20000b88
 80022d4:	20000b74 	.word	0x20000b74
 80022d8:	20000b6c 	.word	0x20000b6c

080022dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <vTaskSuspendAll+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <vTaskSuspendAll+0x14>)
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000b90 	.word	0x20000b90

080022f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <xTaskResumeAll+0xf8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <xTaskResumeAll+0x1a>
 800230a:	b672      	cpsid	i
 800230c:	e7fe      	b.n	800230c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800230e:	f000 ffa7 	bl	8003260 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <xTaskResumeAll+0xf8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <xTaskResumeAll+0xf8>)
 800231a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <xTaskResumeAll+0xf8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d15b      	bne.n	80023dc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <xTaskResumeAll+0xfc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d057      	beq.n	80023dc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800232c:	e02f      	b.n	800238e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <xTaskResumeAll+0x100>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3318      	adds	r3, #24
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff f98b 	bl	8001656 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3304      	adds	r3, #4
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff f986 	bl	8001656 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <xTaskResumeAll+0x104>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d903      	bls.n	800235e <xTaskResumeAll+0x6a>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <xTaskResumeAll+0x104>)
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002362:	0013      	movs	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	189b      	adds	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4a24      	ldr	r2, [pc, #144]	; (80023fc <xTaskResumeAll+0x108>)
 800236c:	189a      	adds	r2, r3, r2
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	0019      	movs	r1, r3
 8002374:	0010      	movs	r0, r2
 8002376:	f7ff f916 	bl	80015a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <xTaskResumeAll+0x10c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d302      	bcc.n	800238e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <xTaskResumeAll+0x110>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <xTaskResumeAll+0x100>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1cb      	bne.n	800232e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800239c:	f000 fb02 	bl	80029a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <xTaskResumeAll+0x114>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00f      	beq.n	80023cc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023ac:	f000 f83c 	bl	8002428 <xTaskIncrementTick>
 80023b0:	1e03      	subs	r3, r0, #0
 80023b2:	d002      	beq.n	80023ba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <xTaskResumeAll+0x110>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3b01      	subs	r3, #1
 80023be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f2      	bne.n	80023ac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <xTaskResumeAll+0x114>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <xTaskResumeAll+0x110>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80023d8:	f000 ff32 	bl	8003240 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023dc:	f000 ff52 	bl	8003284 <vPortExitCritical>

	return xAlreadyYielded;
 80023e0:	68bb      	ldr	r3, [r7, #8]
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	20000b90 	.word	0x20000b90
 80023f0:	20000b68 	.word	0x20000b68
 80023f4:	20000b28 	.word	0x20000b28
 80023f8:	20000b70 	.word	0x20000b70
 80023fc:	20000698 	.word	0x20000698
 8002400:	20000694 	.word	0x20000694
 8002404:	20000b7c 	.word	0x20000b7c
 8002408:	20000b78 	.word	0x20000b78

0800240c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <xTaskGetTickCount+0x18>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	20000b6c 	.word	0x20000b6c

08002428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <xTaskIncrementTick+0x13c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <xTaskIncrementTick+0x14>
 800243a:	e083      	b.n	8002544 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <xTaskIncrementTick+0x140>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <xTaskIncrementTick+0x140>)
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d117      	bne.n	8002480 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <xTaskIncrementTick+0x144>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <xTaskIncrementTick+0x36>
 800245a:	b672      	cpsid	i
 800245c:	e7fe      	b.n	800245c <xTaskIncrementTick+0x34>
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <xTaskIncrementTick+0x144>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <xTaskIncrementTick+0x148>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <xTaskIncrementTick+0x144>)
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <xTaskIncrementTick+0x148>)
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	4b40      	ldr	r3, [pc, #256]	; (8002574 <xTaskIncrementTick+0x14c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <xTaskIncrementTick+0x14c>)
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f000 fa92 	bl	80029a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <xTaskIncrementTick+0x150>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d34e      	bcc.n	8002528 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <xTaskIncrementTick+0x144>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <xTaskIncrementTick+0x70>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <xTaskIncrementTick+0x72>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <xTaskIncrementTick+0x150>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	4252      	negs	r2, r2
 80024a4:	601a      	str	r2, [r3, #0]
					break;
 80024a6:	e03f      	b.n	8002528 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <xTaskIncrementTick+0x144>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d203      	bcs.n	80024c8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <xTaskIncrementTick+0x150>)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
						break;
 80024c6:	e02f      	b.n	8002528 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3304      	adds	r3, #4
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff f8c2 	bl	8001656 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3318      	adds	r3, #24
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff f8b9 	bl	8001656 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <xTaskIncrementTick+0x154>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d903      	bls.n	80024f8 <xTaskIncrementTick+0xd0>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <xTaskIncrementTick+0x154>)
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	0013      	movs	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	189b      	adds	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <xTaskIncrementTick+0x158>)
 8002506:	189a      	adds	r2, r3, r2
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3304      	adds	r3, #4
 800250c:	0019      	movs	r1, r3
 800250e:	0010      	movs	r0, r2
 8002510:	f7ff f849 	bl	80015a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <xTaskIncrementTick+0x15c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	429a      	cmp	r2, r3
 8002520:	d3b3      	bcc.n	800248a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002522:	2301      	movs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002526:	e7b0      	b.n	800248a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <xTaskIncrementTick+0x15c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	4914      	ldr	r1, [pc, #80]	; (8002580 <xTaskIncrementTick+0x158>)
 8002530:	0013      	movs	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	189b      	adds	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	585b      	ldr	r3, [r3, r1]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d907      	bls.n	800254e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800253e:	2301      	movs	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e004      	b.n	800254e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <xTaskIncrementTick+0x160>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <xTaskIncrementTick+0x160>)
 800254c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <xTaskIncrementTick+0x164>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002556:	2301      	movs	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800255a:	697b      	ldr	r3, [r7, #20]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b006      	add	sp, #24
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000b90 	.word	0x20000b90
 8002568:	20000b6c 	.word	0x20000b6c
 800256c:	20000b20 	.word	0x20000b20
 8002570:	20000b24 	.word	0x20000b24
 8002574:	20000b80 	.word	0x20000b80
 8002578:	20000b88 	.word	0x20000b88
 800257c:	20000b70 	.word	0x20000b70
 8002580:	20000698 	.word	0x20000698
 8002584:	20000694 	.word	0x20000694
 8002588:	20000b78 	.word	0x20000b78
 800258c:	20000b7c 	.word	0x20000b7c

08002590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <vTaskSwitchContext+0x90>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800259e:	4b21      	ldr	r3, [pc, #132]	; (8002624 <vTaskSwitchContext+0x94>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025a4:	e037      	b.n	8002616 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <vTaskSwitchContext+0x94>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <vTaskSwitchContext+0x98>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	e007      	b.n	80025c4 <vTaskSwitchContext+0x34>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <vTaskSwitchContext+0x2e>
 80025ba:	b672      	cpsid	i
 80025bc:	e7fe      	b.n	80025bc <vTaskSwitchContext+0x2c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	4919      	ldr	r1, [pc, #100]	; (800262c <vTaskSwitchContext+0x9c>)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	0013      	movs	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	585b      	ldr	r3, [r3, r1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ee      	beq.n	80025b4 <vTaskSwitchContext+0x24>
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	0013      	movs	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <vTaskSwitchContext+0x9c>)
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3308      	adds	r3, #8
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d104      	bne.n	8002606 <vTaskSwitchContext+0x76>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <vTaskSwitchContext+0xa0>)
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <vTaskSwitchContext+0x98>)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000b90 	.word	0x20000b90
 8002624:	20000b7c 	.word	0x20000b7c
 8002628:	20000b70 	.word	0x20000b70
 800262c:	20000698 	.word	0x20000698
 8002630:	20000694 	.word	0x20000694

08002634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <vTaskPlaceOnEventList+0x14>
 8002644:	b672      	cpsid	i
 8002646:	e7fe      	b.n	8002646 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <vTaskPlaceOnEventList+0x38>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3318      	adds	r3, #24
 800264e:	001a      	movs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f7fe ffc8 	bl	80015ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fa3c 	bl	8002adc <prvAddCurrentTaskToDelayedList>
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000694 	.word	0x20000694

08002670 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <vTaskPlaceOnEventListRestricted+0x16>
 8002682:	b672      	cpsid	i
 8002684:	e7fe      	b.n	8002684 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <vTaskPlaceOnEventListRestricted+0x48>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3318      	adds	r3, #24
 800268c:	001a      	movs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f7fe ff87 	bl	80015a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800269e:	2301      	movs	r3, #1
 80026a0:	425b      	negs	r3, r3
 80026a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fa16 	bl	8002adc <prvAddCurrentTaskToDelayedList>
	}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000694 	.word	0x20000694

080026bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <xTaskRemoveFromEventList+0x1a>
 80026d2:	b672      	cpsid	i
 80026d4:	e7fe      	b.n	80026d4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3318      	adds	r3, #24
 80026da:	0018      	movs	r0, r3
 80026dc:	f7fe ffbb 	bl	8001656 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <xTaskRemoveFromEventList+0xa0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11d      	bne.n	8002724 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3304      	adds	r3, #4
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe ffb2 	bl	8001656 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <xTaskRemoveFromEventList+0xa4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d903      	bls.n	8002706 <xTaskRemoveFromEventList+0x4a>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <xTaskRemoveFromEventList+0xa4>)
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	0013      	movs	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	189b      	adds	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4a14      	ldr	r2, [pc, #80]	; (8002764 <xTaskRemoveFromEventList+0xa8>)
 8002714:	189a      	adds	r2, r3, r2
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3304      	adds	r3, #4
 800271a:	0019      	movs	r1, r3
 800271c:	0010      	movs	r0, r2
 800271e:	f7fe ff42 	bl	80015a6 <vListInsertEnd>
 8002722:	e007      	b.n	8002734 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3318      	adds	r3, #24
 8002728:	001a      	movs	r2, r3
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <xTaskRemoveFromEventList+0xac>)
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f7fe ff39 	bl	80015a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <xTaskRemoveFromEventList+0xb0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	429a      	cmp	r2, r3
 8002740:	d905      	bls.n	800274e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002742:	2301      	movs	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <xTaskRemoveFromEventList+0xb4>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e001      	b.n	8002752 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000b90 	.word	0x20000b90
 8002760:	20000b70 	.word	0x20000b70
 8002764:	20000698 	.word	0x20000698
 8002768:	20000b28 	.word	0x20000b28
 800276c:	20000694 	.word	0x20000694
 8002770:	20000b7c 	.word	0x20000b7c

08002774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <vTaskInternalSetTimeOutState+0x20>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <vTaskInternalSetTimeOutState+0x24>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000b80 	.word	0x20000b80
 8002798:	20000b6c 	.word	0x20000b6c

0800279c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <xTaskCheckForTimeOut+0x14>
 80027ac:	b672      	cpsid	i
 80027ae:	e7fe      	b.n	80027ae <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <xTaskCheckForTimeOut+0x1e>
 80027b6:	b672      	cpsid	i
 80027b8:	e7fe      	b.n	80027b8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80027ba:	f000 fd51 	bl	8003260 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <xTaskCheckForTimeOut+0x98>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	d102      	bne.n	80027dc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e024      	b.n	8002826 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <xTaskCheckForTimeOut+0x9c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d007      	beq.n	80027f8 <xTaskCheckForTimeOut+0x5c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e016      	b.n	8002826 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d20c      	bcs.n	800281c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad2      	subs	r2, r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff ffaf 	bl	8002774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e004      	b.n	8002826 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002822:	2301      	movs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002826:	f000 fd2d 	bl	8003284 <vPortExitCritical>

	return xReturn;
 800282a:	697b      	ldr	r3, [r7, #20]
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b006      	add	sp, #24
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000b6c 	.word	0x20000b6c
 8002838:	20000b80 	.word	0x20000b80

0800283c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <vTaskMissedYield+0x10>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000b7c 	.word	0x20000b7c

08002850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002858:	f000 f84e 	bl	80028f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <prvIdleTask+0x1c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d9f9      	bls.n	8002858 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002864:	f000 fcec 	bl	8003240 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002868:	e7f6      	b.n	8002858 <prvIdleTask+0x8>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	20000698 	.word	0x20000698

08002870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	e00c      	b.n	8002896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	0013      	movs	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	189b      	adds	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <prvInitialiseTaskLists+0x68>)
 8002888:	189b      	adds	r3, r3, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f7fe fe62 	bl	8001554 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3301      	adds	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b37      	cmp	r3, #55	; 0x37
 800289a:	d9ef      	bls.n	800287c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <prvInitialiseTaskLists+0x6c>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f7fe fe58 	bl	8001554 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <prvInitialiseTaskLists+0x70>)
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7fe fe54 	bl	8001554 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <prvInitialiseTaskLists+0x74>)
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7fe fe50 	bl	8001554 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <prvInitialiseTaskLists+0x78>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f7fe fe4c 	bl	8001554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <prvInitialiseTaskLists+0x7c>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fe fe48 	bl	8001554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <prvInitialiseTaskLists+0x80>)
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <prvInitialiseTaskLists+0x6c>)
 80028c8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <prvInitialiseTaskLists+0x84>)
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <prvInitialiseTaskLists+0x70>)
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000698 	.word	0x20000698
 80028dc:	20000af8 	.word	0x20000af8
 80028e0:	20000b0c 	.word	0x20000b0c
 80028e4:	20000b28 	.word	0x20000b28
 80028e8:	20000b3c 	.word	0x20000b3c
 80028ec:	20000b54 	.word	0x20000b54
 80028f0:	20000b20 	.word	0x20000b20
 80028f4:	20000b24 	.word	0x20000b24

080028f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028fe:	e01a      	b.n	8002936 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002900:	f000 fcae 	bl	8003260 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <prvCheckTasksWaitingTermination+0x50>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe fea0 	bl	8001656 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <prvCheckTasksWaitingTermination+0x54>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1e5a      	subs	r2, r3, #1
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <prvCheckTasksWaitingTermination+0x54>)
 800291e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002928:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800292a:	f000 fcab 	bl	8003284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f80f 	bl	8002954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e0      	bne.n	8002900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000b3c 	.word	0x20000b3c
 800294c:	20000b68 	.word	0x20000b68
 8002950:	20000b50 	.word	0x20000b50

08002954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2259      	movs	r2, #89	; 0x59
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fdb6 	bl	80034dc <vPortFree>
				vPortFree( pxTCB );
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 fdb2 	bl	80034dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002978:	e010      	b.n	800299c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2259      	movs	r2, #89	; 0x59
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d104      	bne.n	800298e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0018      	movs	r0, r3
 8002988:	f000 fda8 	bl	80034dc <vPortFree>
	}
 800298c:	e006      	b.n	800299c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2259      	movs	r2, #89	; 0x59
 8002992:	5c9b      	ldrb	r3, [r3, r2]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d001      	beq.n	800299c <prvDeleteTCB+0x48>
 8002998:	b672      	cpsid	i
 800299a:	e7fe      	b.n	800299a <prvDeleteTCB+0x46>
	}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <prvResetNextTaskUnblockTime+0x40>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <prvResetNextTaskUnblockTime+0x14>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <prvResetNextTaskUnblockTime+0x16>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <prvResetNextTaskUnblockTime+0x44>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	4252      	negs	r2, r2
 80029c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029c6:	e008      	b.n	80029da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <prvResetNextTaskUnblockTime+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <prvResetNextTaskUnblockTime+0x44>)
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000b20 	.word	0x20000b20
 80029e8:	20000b88 	.word	0x20000b88

080029ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <xTaskGetSchedulerState+0x30>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80029fa:	2301      	movs	r3, #1
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	e008      	b.n	8002a12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <xTaskGetSchedulerState+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	e001      	b.n	8002a12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002a12:	687b      	ldr	r3, [r7, #4]
	}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000b74 	.word	0x20000b74
 8002a20:	20000b90 	.word	0x20000b90

08002a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d044      	beq.n	8002ac4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <xTaskPriorityDisinherit+0xac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <xTaskPriorityDisinherit+0x24>
 8002a44:	b672      	cpsid	i
 8002a46:	e7fe      	b.n	8002a46 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <xTaskPriorityDisinherit+0x30>
 8002a50:	b672      	cpsid	i
 8002a52:	e7fe      	b.n	8002a52 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d02c      	beq.n	8002ac4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d128      	bne.n	8002ac4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3304      	adds	r3, #4
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fe fded 	bl	8001656 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2238      	movs	r2, #56	; 0x38
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <xTaskPriorityDisinherit+0xb0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d903      	bls.n	8002aa4 <xTaskPriorityDisinherit+0x80>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <xTaskPriorityDisinherit+0xb0>)
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	189b      	adds	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <xTaskPriorityDisinherit+0xb4>)
 8002ab2:	189a      	adds	r2, r3, r2
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	0019      	movs	r1, r3
 8002aba:	0010      	movs	r0, r2
 8002abc:	f7fe fd73 	bl	80015a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
	}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b004      	add	sp, #16
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000694 	.word	0x20000694
 8002ad4:	20000b70 	.word	0x20000b70
 8002ad8:	20000698 	.word	0x20000698

08002adc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ae6:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <prvAddCurrentTaskToDelayedList+0x90>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3304      	adds	r3, #4
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fe fdaf 	bl	8001656 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	d10b      	bne.n	8002b16 <prvAddCurrentTaskToDelayedList+0x3a>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1d1a      	adds	r2, r3, #4
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <prvAddCurrentTaskToDelayedList+0x98>)
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7fe fd49 	bl	80015a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b14:	e026      	b.n	8002b64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	18d3      	adds	r3, r2, r3
 8002b1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d209      	bcs.n	8002b42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3304      	adds	r3, #4
 8002b38:	0019      	movs	r1, r3
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	f7fe fd55 	bl	80015ea <vListInsert>
}
 8002b40:	e010      	b.n	8002b64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	0010      	movs	r0, r2
 8002b50:	f7fe fd4b 	bl	80015ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d202      	bcs.n	8002b64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000b6c 	.word	0x20000b6c
 8002b70:	20000694 	.word	0x20000694
 8002b74:	20000b54 	.word	0x20000b54
 8002b78:	20000b24 	.word	0x20000b24
 8002b7c:	20000b20 	.word	0x20000b20
 8002b80:	20000b88 	.word	0x20000b88

08002b84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002b8e:	f000 fa87 	bl	80030a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <xTimerCreateTimerTask+0x6c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d020      	beq.n	8002bdc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002ba2:	003a      	movs	r2, r7
 8002ba4:	1d39      	adds	r1, r7, #4
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7fe fcba 	bl	8001524 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002bb0:	683c      	ldr	r4, [r7, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	490f      	ldr	r1, [pc, #60]	; (8002bf4 <xTimerCreateTimerTask+0x70>)
 8002bb8:	480f      	ldr	r0, [pc, #60]	; (8002bf8 <xTimerCreateTimerTask+0x74>)
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	0022      	movs	r2, r4
 8002bc6:	f7ff f996 	bl	8001ef6 <xTaskCreateStatic>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <xTimerCreateTimerTask+0x78>)
 8002bce:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <xTimerCreateTimerTask+0x78>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <xTimerCreateTimerTask+0x62>
 8002be2:	b672      	cpsid	i
 8002be4:	e7fe      	b.n	8002be4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b005      	add	sp, #20
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	20000bc4 	.word	0x20000bc4
 8002bf4:	0800377c 	.word	0x0800377c
 8002bf8:	08002d05 	.word	0x08002d05
 8002bfc:	20000bc8 	.word	0x20000bc8

08002c00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b08b      	sub	sp, #44	; 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <xTimerGenericCommand+0x1c>
 8002c18:	b672      	cpsid	i
 8002c1a:	e7fe      	b.n	8002c1a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <xTimerGenericCommand+0x90>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d030      	beq.n	8002c86 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002c24:	2414      	movs	r4, #20
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	dc19      	bgt.n	8002c72 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002c3e:	f7ff fed5 	bl	80029ec <xTaskGetSchedulerState>
 8002c42:	0003      	movs	r3, r0
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d109      	bne.n	8002c5c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <xTimerGenericCommand+0x90>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c4e:	1939      	adds	r1, r7, r4
 8002c50:	2300      	movs	r3, #0
 8002c52:	f7fe fdee 	bl	8001832 <xQueueGenericSend>
 8002c56:	0003      	movs	r3, r0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	e014      	b.n	8002c86 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <xTimerGenericCommand+0x90>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	2314      	movs	r3, #20
 8002c62:	18f9      	adds	r1, r7, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	2200      	movs	r2, #0
 8002c68:	f7fe fde3 	bl	8001832 <xQueueGenericSend>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e009      	b.n	8002c86 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <xTimerGenericCommand+0x90>)
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	2314      	movs	r3, #20
 8002c7a:	18f9      	adds	r1, r7, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f7fe fe9c 	bl	80019ba <xQueueGenericSendFromISR>
 8002c82:	0003      	movs	r3, r0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b00b      	add	sp, #44	; 0x2c
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	20000bc4 	.word	0x20000bc4

08002c94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <prvProcessExpiredTimer+0x6c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3304      	adds	r3, #4
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fe fcd2 	bl	8001656 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d119      	bne.n	8002cee <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	18d1      	adds	r1, r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f8b6 	bl	8002e38 <prvInsertTimerInActiveList>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d00e      	beq.n	8002cee <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	f7ff ff90 	bl	8002c00 <xTimerGenericCommand>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <prvProcessExpiredTimer+0x5a>
 8002cea:	b672      	cpsid	i
 8002cec:	e7fe      	b.n	8002cec <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	4798      	blx	r3
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000bbc 	.word	0x20000bbc

08002d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f851 	bl	8002db8 <prvGetNextExpireTime>
 8002d16:	0003      	movs	r3, r0
 8002d18:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f803 	bl	8002d2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002d26:	f000 f8c9 	bl	8002ebc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d2a:	e7ef      	b.n	8002d0c <prvTimerTask+0x8>

08002d2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002d36:	f7ff fad1 	bl	80022dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f85a 	bl	8002df8 <prvSampleTimeNow>
 8002d44:	0003      	movs	r3, r0
 8002d46:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d129      	bne.n	8002da2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10c      	bne.n	8002d6e <prvProcessTimerOrBlockTask+0x42>
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d808      	bhi.n	8002d6e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8002d5c:	f7ff faca 	bl	80022f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0011      	movs	r1, r2
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff ff94 	bl	8002c94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002d6c:	e01b      	b.n	8002da6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <prvProcessTimerOrBlockTask+0x84>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	425a      	negs	r2, r3
 8002d7c:	4153      	adcs	r3, r2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <prvProcessTimerOrBlockTask+0x88>)
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	0019      	movs	r1, r3
 8002d90:	f7ff f87e 	bl	8001e90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002d94:	f7ff faae 	bl	80022f4 <xTaskResumeAll>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d104      	bne.n	8002da6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8002d9c:	f000 fa50 	bl	8003240 <vPortYield>
}
 8002da0:	e001      	b.n	8002da6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8002da2:	f7ff faa7 	bl	80022f4 <xTaskResumeAll>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000bc0 	.word	0x20000bc0
 8002db4:	20000bc4 	.word	0x20000bc4

08002db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <prvGetNextExpireTime+0x3c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	425a      	negs	r2, r3
 8002dc8:	4153      	adcs	r3, r2
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	001a      	movs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <prvGetNextExpireTime+0x3c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e001      	b.n	8002dea <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b004      	add	sp, #16
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000bbc 	.word	0x20000bbc

08002df8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002e00:	f7ff fb04 	bl	800240c <xTaskGetTickCount>
 8002e04:	0003      	movs	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <prvSampleTimeNow+0x3c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d205      	bcs.n	8002e1e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8002e12:	f000 f8eb 	bl	8002fec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e002      	b.n	8002e24 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <prvSampleTimeNow+0x3c>)
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000bcc 	.word	0x20000bcc

08002e38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d812      	bhi.n	8002e84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e01b      	b.n	8002eaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <prvInsertTimerInActiveList+0x7c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	f7fe fbb4 	bl	80015ea <vListInsert>
 8002e82:	e012      	b.n	8002eaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d206      	bcs.n	8002e9a <prvInsertTimerInActiveList+0x62>
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e007      	b.n	8002eaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <prvInsertTimerInActiveList+0x80>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	f7fe fba0 	bl	80015ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002eaa:	697b      	ldr	r3, [r7, #20]
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b006      	add	sp, #24
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000bc0 	.word	0x20000bc0
 8002eb8:	20000bbc 	.word	0x20000bbc

08002ebc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b08d      	sub	sp, #52	; 0x34
 8002ec0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ec2:	e07f      	b.n	8002fc4 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	18bb      	adds	r3, r7, r2
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da0f      	bge.n	8002eee <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002ece:	18bb      	adds	r3, r7, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <prvProcessReceivedCommands+0x22>
 8002eda:	b672      	cpsid	i
 8002edc:	e7fe      	b.n	8002edc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	6858      	ldr	r0, [r3, #4]
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0019      	movs	r1, r3
 8002eec:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002eee:	2208      	movs	r2, #8
 8002ef0:	18bb      	adds	r3, r7, r2
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db64      	blt.n	8002fc2 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ef8:	18bb      	adds	r3, r7, r2
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fe fba3 	bl	8001656 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7ff ff70 	bl	8002df8 <prvSampleTimeNow>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b09      	cmp	r3, #9
 8002f24:	d84e      	bhi.n	8002fc4 <prvProcessReceivedCommands+0x108>
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <prvProcessReceivedCommands+0x128>)
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002f30:	2408      	movs	r4, #8
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	18d1      	adds	r1, r2, r3
 8002f3c:	193b      	adds	r3, r7, r4
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	6a38      	ldr	r0, [r7, #32]
 8002f44:	f7ff ff78 	bl	8002e38 <prvInsertTimerInActiveList>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d03b      	beq.n	8002fc4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	0010      	movs	r0, r2
 8002f54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d132      	bne.n	8002fc4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	18d2      	adds	r2, r2, r3
 8002f68:	6a38      	ldr	r0, [r7, #32]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	f7ff fe45 	bl	8002c00 <xTimerGenericCommand>
 8002f76:	0003      	movs	r3, r0
 8002f78:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d121      	bne.n	8002fc4 <prvProcessReceivedCommands+0x108>
 8002f80:	b672      	cpsid	i
 8002f82:	e7fe      	b.n	8002f82 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f84:	2308      	movs	r3, #8
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <prvProcessReceivedCommands+0xde>
 8002f96:	b672      	cpsid	i
 8002f98:	e7fe      	b.n	8002f98 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	18d1      	adds	r1, r2, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	6a38      	ldr	r0, [r7, #32]
 8002fa8:	f7ff ff46 	bl	8002e38 <prvInsertTimerInActiveList>
					break;
 8002fac:	e00a      	b.n	8002fc4 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	222c      	movs	r2, #44	; 0x2c
 8002fb2:	5c9b      	ldrb	r3, [r3, r2]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fa8e 	bl	80034dc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002fc0:	e000      	b.n	8002fc4 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002fc2:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <prvProcessReceivedCommands+0x12c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	18b9      	adds	r1, r7, r2
 8002fcc:	2200      	movs	r2, #0
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7fe fd64 	bl	8001a9c <xQueueReceive>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d000      	beq.n	8002fda <prvProcessReceivedCommands+0x11e>
 8002fd8:	e774      	b.n	8002ec4 <prvProcessReceivedCommands+0x8>
	}
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b00b      	add	sp, #44	; 0x2c
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	080037e0 	.word	0x080037e0
 8002fe8:	20000bc4 	.word	0x20000bc4

08002fec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ff2:	e03e      	b.n	8003072 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <prvSwitchTimerLists+0xac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <prvSwitchTimerLists+0xac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3304      	adds	r3, #4
 800300c:	0018      	movs	r0, r3
 800300e:	f7fe fb22 	bl	8001656 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	0010      	movs	r0, r2
 800301a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d126      	bne.n	8003072 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	18d3      	adds	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90e      	bls.n	8003054 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <prvSwitchTimerLists+0xac>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3304      	adds	r3, #4
 800304a:	0019      	movs	r1, r3
 800304c:	0010      	movs	r0, r2
 800304e:	f7fe facc 	bl	80015ea <vListInsert>
 8003052:	e00e      	b.n	8003072 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2300      	movs	r3, #0
 800305e:	2100      	movs	r1, #0
 8003060:	f7ff fdce 	bl	8002c00 <xTimerGenericCommand>
 8003064:	0003      	movs	r3, r0
 8003066:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <prvSwitchTimerLists+0x86>
 800306e:	b672      	cpsid	i
 8003070:	e7fe      	b.n	8003070 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <prvSwitchTimerLists+0xac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1bb      	bne.n	8002ff4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <prvSwitchTimerLists+0xac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <prvSwitchTimerLists+0xb0>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <prvSwitchTimerLists+0xac>)
 8003088:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <prvSwitchTimerLists+0xb0>)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b006      	add	sp, #24
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000bbc 	.word	0x20000bbc
 800309c:	20000bc0 	.word	0x20000bc0

080030a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80030a6:	f000 f8db 	bl	8003260 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <prvCheckForValidListAndQueue+0x64>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d123      	bne.n	80030fa <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <prvCheckForValidListAndQueue+0x68>)
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7fe fa4d 	bl	8001554 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80030ba:	4b14      	ldr	r3, [pc, #80]	; (800310c <prvCheckForValidListAndQueue+0x6c>)
 80030bc:	0018      	movs	r0, r3
 80030be:	f7fe fa49 	bl	8001554 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <prvCheckForValidListAndQueue+0x70>)
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <prvCheckForValidListAndQueue+0x68>)
 80030c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <prvCheckForValidListAndQueue+0x74>)
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <prvCheckForValidListAndQueue+0x6c>)
 80030cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <prvCheckForValidListAndQueue+0x78>)
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <prvCheckForValidListAndQueue+0x7c>)
 80030d2:	2100      	movs	r1, #0
 80030d4:	9100      	str	r1, [sp, #0]
 80030d6:	2110      	movs	r1, #16
 80030d8:	200a      	movs	r0, #10
 80030da:	f7fe fb38 	bl	800174e <xQueueGenericCreateStatic>
 80030de:	0002      	movs	r2, r0
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <prvCheckForValidListAndQueue+0x64>)
 80030e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <prvCheckForValidListAndQueue+0x64>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <prvCheckForValidListAndQueue+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <prvCheckForValidListAndQueue+0x80>)
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fe fea3 	bl	8001e40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030fa:	f000 f8c3 	bl	8003284 <vPortExitCritical>
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000bc4 	.word	0x20000bc4
 8003108:	20000b94 	.word	0x20000b94
 800310c:	20000ba8 	.word	0x20000ba8
 8003110:	20000bbc 	.word	0x20000bbc
 8003114:	20000bc0 	.word	0x20000bc0
 8003118:	20000c70 	.word	0x20000c70
 800311c:	20000bd0 	.word	0x20000bd0
 8003120:	08003784 	.word	0x08003784

08003124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3b04      	subs	r3, #4
 8003134:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0452      	lsls	r2, r2, #17
 800313c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b04      	subs	r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3b04      	subs	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003150:	4a08      	ldr	r2, [pc, #32]	; (8003174 <pxPortInitialiseStack+0x50>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b14      	subs	r3, #20
 800315a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3b20      	subs	r3, #32
 8003166:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b004      	add	sp, #16
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	08003179 	.word	0x08003179

08003178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <prvTaskExitError+0x2c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	d001      	beq.n	800318e <prvTaskExitError+0x16>
 800318a:	b672      	cpsid	i
 800318c:	e7fe      	b.n	800318c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800318e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0fc      	beq.n	8003192 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b002      	add	sp, #8
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80031c0:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <pxCurrentTCBConst2>)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	3020      	adds	r0, #32
 80031c8:	f380 8809 	msr	PSP, r0
 80031cc:	2002      	movs	r0, #2
 80031ce:	f380 8814 	msr	CONTROL, r0
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80031d8:	46ae      	mov	lr, r5
 80031da:	bc08      	pop	{r3}
 80031dc:	bc04      	pop	{r2}
 80031de:	b662      	cpsie	i
 80031e0:	4718      	bx	r3
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46c0      	nop			; (mov r8, r8)

080031f0 <pxCurrentTCBConst2>:
 80031f0:	20000694 	.word	0x20000694
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46c0      	nop			; (mov r8, r8)

080031f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <xPortStartScheduler+0x40>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <xPortStartScheduler+0x40>)
 8003202:	21ff      	movs	r1, #255	; 0xff
 8003204:	0409      	lsls	r1, r1, #16
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <xPortStartScheduler+0x40>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <xPortStartScheduler+0x40>)
 8003210:	21ff      	movs	r1, #255	; 0xff
 8003212:	0609      	lsls	r1, r1, #24
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003218:	f000 f898 	bl	800334c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <xPortStartScheduler+0x44>)
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003222:	f7ff ffcd 	bl	80031c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003226:	f7ff f9b3 	bl	8002590 <vTaskSwitchContext>
	prvTaskExitError();
 800322a:	f7ff ffa5 	bl	8003178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800322e:	2300      	movs	r3, #0
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	e000ed20 	.word	0xe000ed20
 800323c:	2000000c 	.word	0x2000000c

08003240 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <vPortYield+0x1c>)
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	0552      	lsls	r2, r2, #21
 800324a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800324c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003250:	f3bf 8f6f 	isb	sy
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003264:	b672      	cpsid	i
    uxCriticalNesting++;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <vPortEnterCritical+0x20>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <vPortEnterCritical+0x20>)
 800326e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003270:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003274:	f3bf 8f6f 	isb	sy
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	2000000c 	.word	0x2000000c

08003284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <vPortExitCritical+0x2c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <vPortExitCritical+0x10>
 8003290:	b672      	cpsid	i
 8003292:	e7fe      	b.n	8003292 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <vPortExitCritical+0x2c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1e5a      	subs	r2, r3, #1
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <vPortExitCritical+0x2c>)
 800329c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <vPortExitCritical+0x2c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d100      	bne.n	80032a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80032a6:	b662      	cpsie	i
    }
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	2000000c 	.word	0x2000000c

080032b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80032b4:	f3ef 8010 	mrs	r0, PRIMASK
 80032b8:	b672      	cpsid	i
 80032ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	0018      	movs	r0, r3

080032c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80032c0:	f380 8810 	msr	PRIMASK, r0
 80032c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80032c6:	46c0      	nop			; (mov r8, r8)
	...

080032d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032d0:	f3ef 8009 	mrs	r0, PSP
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <pxCurrentTCBConst>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	3820      	subs	r0, #32
 80032da:	6010      	str	r0, [r2, #0]
 80032dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032de:	4644      	mov	r4, r8
 80032e0:	464d      	mov	r5, r9
 80032e2:	4656      	mov	r6, sl
 80032e4:	465f      	mov	r7, fp
 80032e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032e8:	b508      	push	{r3, lr}
 80032ea:	b672      	cpsid	i
 80032ec:	f7ff f950 	bl	8002590 <vTaskSwitchContext>
 80032f0:	b662      	cpsie	i
 80032f2:	bc0c      	pop	{r2, r3}
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	6808      	ldr	r0, [r1, #0]
 80032f8:	3010      	adds	r0, #16
 80032fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032fc:	46a0      	mov	r8, r4
 80032fe:	46a9      	mov	r9, r5
 8003300:	46b2      	mov	sl, r6
 8003302:	46bb      	mov	fp, r7
 8003304:	f380 8809 	msr	PSP, r0
 8003308:	3820      	subs	r0, #32
 800330a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800330c:	4718      	bx	r3
 800330e:	46c0      	nop			; (mov r8, r8)

08003310 <pxCurrentTCBConst>:
 8003310:	20000694 	.word	0x20000694
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46c0      	nop			; (mov r8, r8)

08003318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800331e:	f7ff ffc9 	bl	80032b4 <ulSetInterruptMaskFromISR>
 8003322:	0003      	movs	r3, r0
 8003324:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003326:	f7ff f87f 	bl	8002428 <xTaskIncrementTick>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d003      	beq.n	8003336 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <xPortSysTickHandler+0x30>)
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	0552      	lsls	r2, r2, #21
 8003334:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff ffc1 	bl	80032c0 <vClearInterruptMaskFromISR>
}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b002      	add	sp, #8
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <prvSetupTimerInterrupt+0x34>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <prvSetupTimerInterrupt+0x38>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <prvSetupTimerInterrupt+0x3c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	22fa      	movs	r2, #250	; 0xfa
 8003362:	0091      	lsls	r1, r2, #2
 8003364:	0018      	movs	r0, r3
 8003366:	f7fc fecf 	bl	8000108 <__udivsi3>
 800336a:	0003      	movs	r3, r0
 800336c:	001a      	movs	r2, r3
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <prvSetupTimerInterrupt+0x40>)
 8003370:	3a01      	subs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <prvSetupTimerInterrupt+0x34>)
 8003376:	2207      	movs	r2, #7
 8003378:	601a      	str	r2, [r3, #0]
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	e000e010 	.word	0xe000e010
 8003384:	e000e018 	.word	0xe000e018
 8003388:	20000000 	.word	0x20000000
 800338c:	e000e014 	.word	0xe000e014

08003390 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800339c:	f7fe ff9e 	bl	80022dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80033a0:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <pvPortMalloc+0x138>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80033a8:	f000 f8e0 	bl	800356c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033ac:	4b47      	ldr	r3, [pc, #284]	; (80034cc <pvPortMalloc+0x13c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4013      	ands	r3, r2
 80033b4:	d000      	beq.n	80033b8 <pvPortMalloc+0x28>
 80033b6:	e079      	b.n	80034ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80033be:	2208      	movs	r2, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2207      	movs	r2, #7
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00a      	beq.n	80033e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2207      	movs	r2, #7
 80033d2:	4393      	bics	r3, r2
 80033d4:	3308      	adds	r3, #8
 80033d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2207      	movs	r2, #7
 80033dc:	4013      	ands	r3, r2
 80033de:	d001      	beq.n	80033e4 <pvPortMalloc+0x54>
 80033e0:	b672      	cpsid	i
 80033e2:	e7fe      	b.n	80033e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d060      	beq.n	80034ac <pvPortMalloc+0x11c>
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <pvPortMalloc+0x140>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d85b      	bhi.n	80034ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033f4:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <pvPortMalloc+0x144>)
 80033f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <pvPortMalloc+0x144>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033fe:	e004      	b.n	800340a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	d903      	bls.n	800341c <pvPortMalloc+0x8c>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f1      	bne.n	8003400 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <pvPortMalloc+0x138>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	429a      	cmp	r2, r3
 8003424:	d042      	beq.n	80034ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	189b      	adds	r3, r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	2308      	movs	r3, #8
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	429a      	cmp	r2, r3
 8003446:	d916      	bls.n	8003476 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2207      	movs	r2, #7
 8003454:	4013      	ands	r3, r2
 8003456:	d001      	beq.n	800345c <pvPortMalloc+0xcc>
 8003458:	b672      	cpsid	i
 800345a:	e7fe      	b.n	800345a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	1ad2      	subs	r2, r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f8db 	bl	800362c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <pvPortMalloc+0x140>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <pvPortMalloc+0x140>)
 8003482:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <pvPortMalloc+0x140>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <pvPortMalloc+0x148>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d203      	bcs.n	8003498 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <pvPortMalloc+0x140>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <pvPortMalloc+0x148>)
 8003496:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <pvPortMalloc+0x13c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80034ac:	f7fe ff22 	bl	80022f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2207      	movs	r2, #7
 80034b4:	4013      	ands	r3, r2
 80034b6:	d001      	beq.n	80034bc <pvPortMalloc+0x12c>
 80034b8:	b672      	cpsid	i
 80034ba:	e7fe      	b.n	80034ba <pvPortMalloc+0x12a>
	return pvReturn;
 80034bc:	68fb      	ldr	r3, [r7, #12]
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b006      	add	sp, #24
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	200014c8 	.word	0x200014c8
 80034cc:	200014d4 	.word	0x200014d4
 80034d0:	200014cc 	.word	0x200014cc
 80034d4:	200014c0 	.word	0x200014c0
 80034d8:	200014d0 	.word	0x200014d0

080034dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d035      	beq.n	800355a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034ee:	2308      	movs	r3, #8
 80034f0:	425b      	negs	r3, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	18d3      	adds	r3, r2, r3
 80034f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <vPortFree+0x88>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4013      	ands	r3, r2
 8003506:	d101      	bne.n	800350c <vPortFree+0x30>
 8003508:	b672      	cpsid	i
 800350a:	e7fe      	b.n	800350a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <vPortFree+0x3c>
 8003514:	b672      	cpsid	i
 8003516:	e7fe      	b.n	8003516 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <vPortFree+0x88>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4013      	ands	r3, r2
 8003522:	d01a      	beq.n	800355a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <vPortFree+0x88>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	43db      	mvns	r3, r3
 8003536:	401a      	ands	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800353c:	f7fe fece 	bl	80022dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <vPortFree+0x8c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	18d2      	adds	r2, r2, r3
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <vPortFree+0x8c>)
 800354c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0018      	movs	r0, r3
 8003552:	f000 f86b 	bl	800362c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003556:	f7fe fecd 	bl	80022f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	200014d4 	.word	0x200014d4
 8003568:	200014cc 	.word	0x200014cc

0800356c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <prvHeapInit+0xa8>)
 800357a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2207      	movs	r2, #7
 8003580:	4013      	ands	r3, r2
 8003582:	d00c      	beq.n	800359e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3307      	adds	r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2207      	movs	r2, #7
 800358e:	4393      	bics	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <prvHeapInit+0xa8>)
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <prvHeapInit+0xac>)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <prvHeapInit+0xac>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	18d3      	adds	r3, r2, r3
 80035b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80035b6:	2208      	movs	r2, #8
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2207      	movs	r2, #7
 80035c2:	4393      	bics	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <prvHeapInit+0xb0>)
 80035ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <prvHeapInit+0xb0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <prvHeapInit+0xb0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	1ad2      	subs	r2, r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <prvHeapInit+0xb0>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <prvHeapInit+0xb4>)
 80035f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <prvHeapInit+0xb8>)
 8003600:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <prvHeapInit+0xbc>)
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	0612      	lsls	r2, r2, #24
 8003608:	601a      	str	r2, [r3, #0]
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000cc0 	.word	0x20000cc0
 8003618:	200014c0 	.word	0x200014c0
 800361c:	200014c8 	.word	0x200014c8
 8003620:	200014d0 	.word	0x200014d0
 8003624:	200014cc 	.word	0x200014cc
 8003628:	200014d4 	.word	0x200014d4

0800362c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <prvInsertBlockIntoFreeList+0xa8>)
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e002      	b.n	8003640 <prvInsertBlockIntoFreeList+0x14>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d8f7      	bhi.n	800363a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d108      	bne.n	800366e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	18d2      	adds	r2, r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	18d2      	adds	r2, r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d118      	bne.n	80036b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <prvInsertBlockIntoFreeList+0xac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d00d      	beq.n	80036aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	18d2      	adds	r2, r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e008      	b.n	80036bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <prvInsertBlockIntoFreeList+0xac>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e003      	b.n	80036bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d002      	beq.n	80036ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b004      	add	sp, #16
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	200014c0 	.word	0x200014c0
 80036d8:	200014c8 	.word	0x200014c8

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	2600      	movs	r6, #0
 80036e0:	4d0c      	ldr	r5, [pc, #48]	; (8003714 <__libc_init_array+0x38>)
 80036e2:	4c0d      	ldr	r4, [pc, #52]	; (8003718 <__libc_init_array+0x3c>)
 80036e4:	1b64      	subs	r4, r4, r5
 80036e6:	10a4      	asrs	r4, r4, #2
 80036e8:	42a6      	cmp	r6, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	2600      	movs	r6, #0
 80036ee:	f000 f82b 	bl	8003748 <_init>
 80036f2:	4d0a      	ldr	r5, [pc, #40]	; (800371c <__libc_init_array+0x40>)
 80036f4:	4c0a      	ldr	r4, [pc, #40]	; (8003720 <__libc_init_array+0x44>)
 80036f6:	1b64      	subs	r4, r4, r5
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	42a6      	cmp	r6, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	00b3      	lsls	r3, r6, #2
 8003702:	58eb      	ldr	r3, [r5, r3]
 8003704:	4798      	blx	r3
 8003706:	3601      	adds	r6, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	00b3      	lsls	r3, r6, #2
 800370c:	58eb      	ldr	r3, [r5, r3]
 800370e:	4798      	blx	r3
 8003710:	3601      	adds	r6, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	08003808 	.word	0x08003808
 8003718:	08003808 	.word	0x08003808
 800371c:	08003808 	.word	0x08003808
 8003720:	0800380c 	.word	0x0800380c

08003724 <memcpy>:
 8003724:	2300      	movs	r3, #0
 8003726:	b510      	push	{r4, lr}
 8003728:	429a      	cmp	r2, r3
 800372a:	d100      	bne.n	800372e <memcpy+0xa>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	5ccc      	ldrb	r4, [r1, r3]
 8003730:	54c4      	strb	r4, [r0, r3]
 8003732:	3301      	adds	r3, #1
 8003734:	e7f8      	b.n	8003728 <memcpy+0x4>

08003736 <memset>:
 8003736:	0003      	movs	r3, r0
 8003738:	1882      	adds	r2, r0, r2
 800373a:	4293      	cmp	r3, r2
 800373c:	d100      	bne.n	8003740 <memset+0xa>
 800373e:	4770      	bx	lr
 8003740:	7019      	strb	r1, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	e7f9      	b.n	800373a <memset+0x4>
	...

08003748 <_init>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr

08003754 <_fini>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr
