
4-AXIL-DRONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004680  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080047e8  080047e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047e8  080047e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000010  08004800  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  08004800  00021188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b20  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  00030b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000336d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011110  00000000  00000000  000356b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001262d  00000000  00000000  000467c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006984c  00000000  00000000  00058df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  000c2694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004728 	.word	0x08004728

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004728 	.word	0x08004728

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LED_Test>:
#include "FreeRTOS_test_funcs.h"
#include "main.h"
#include "tim.h"
#include "FreeRTOS.h"
void LED_Test(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	while(1)
	{
		static char state = 0;
		state  = ~state;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <LED_Test+0x2c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	43db      	mvns	r3, r3
 800022a:	b2da      	uxtb	r2, r3
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <LED_Test+0x2c>)
 800022e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_IND_GPIO_Port,LED_IND_Pin , state);
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <LED_Test+0x2c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <LED_Test+0x30>)
 8000236:	001a      	movs	r2, r3
 8000238:	2101      	movs	r1, #1
 800023a:	f000 fd41 	bl	8000cc0 <HAL_GPIO_WritePin>
		osDelay(1000);
 800023e:	23fa      	movs	r3, #250	; 0xfa
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f002 f924 	bl	8002490 <osDelay>
	{
 8000248:	e7ec      	b.n	8000224 <LED_Test+0x4>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	2000002c 	.word	0x2000002c
 8000250:	48000800 	.word	0x48000800

08000254 <Win4_Test>:
{

}

void Win4_Test(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while(1)
	{
		static char state = 0;
		state  = ~state;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <Win4_Test+0x34>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	43db      	mvns	r3, r3
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <Win4_Test+0x34>)
 8000262:	701a      	strb	r2, [r3, #0]
		if(state)
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <Win4_Test+0x34>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d004      	beq.n	8000276 <Win4_Test+0x22>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <Win4_Test+0x38>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2200      	movs	r2, #0
 8000272:	639a      	str	r2, [r3, #56]	; 0x38
 8000274:	e003      	b.n	800027e <Win4_Test+0x2a>
		else
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 10);
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <Win4_Test+0x38>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	220a      	movs	r2, #10
 800027c:	639a      	str	r2, [r3, #56]	; 0x38
//		osDelay(3000);
		vTaskDelay(3000);
 800027e:	4b04      	ldr	r3, [pc, #16]	; (8000290 <Win4_Test+0x3c>)
 8000280:	0018      	movs	r0, r3
 8000282:	f002 ffa7 	bl	80031d4 <vTaskDelay>
	{
 8000286:	e7e7      	b.n	8000258 <Win4_Test+0x4>
 8000288:	2000002d 	.word	0x2000002d
 800028c:	20000294 	.word	0x20000294
 8000290:	00000bb8 	.word	0x00000bb8

08000294 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af04      	add	r7, sp, #16
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <MX_FREERTOS_Init+0x3c>)
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <MX_FREERTOS_Init+0x40>)
 800029e:	2100      	movs	r1, #0
 80002a0:	0018      	movs	r0, r3
 80002a2:	f002 f84d 	bl	8002340 <osThreadNew>
 80002a6:	0002      	movs	r2, r0
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <MX_FREERTOS_Init+0x44>)
 80002aa:	601a      	str	r2, [r3, #0]
  /*My_Drone BT module reading*/

  /*My_Drone WS2812 control*/

  /*My_Drone Win1 control*/
  xWin_Task_Handel = xTaskCreateStatic(Win4_Test, "WinTask",128,NULL, osPriorityNormal, g_pucStackOfWinTask, &g_TCBofWinTask);
 80002ac:	490b      	ldr	r1, [pc, #44]	; (80002dc <MX_FREERTOS_Init+0x48>)
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <MX_FREERTOS_Init+0x4c>)
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_FREERTOS_Init+0x50>)
 80002b2:	9302      	str	r3, [sp, #8]
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_FREERTOS_Init+0x54>)
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2318      	movs	r3, #24
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	f002 fe0f 	bl	8002ee2 <xTaskCreateStatic>
 80002c4:	0002      	movs	r2, r0
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_FREERTOS_Init+0x58>)
 80002c8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	0800476c 	.word	0x0800476c
 80002d4:	080002f1 	.word	0x080002f1
 80002d8:	20000290 	.word	0x20000290
 80002dc:	0800474c 	.word	0x0800474c
 80002e0:	08000255 	.word	0x08000255
 80002e4:	20000230 	.word	0x20000230
 80002e8:	20000030 	.word	0x20000030
 80002ec:	2000028c 	.word	0x2000028c

080002f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	LED_Test();
 80002f8:	f7ff ff92 	bl	8000220 <LED_Test>
    osDelay(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f002 f8c7 	bl	8002490 <osDelay>
	LED_Test();
 8000302:	e7f9      	b.n	80002f8 <StartDefaultTask+0x8>

08000304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b089      	sub	sp, #36	; 0x24
 8000308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	240c      	movs	r4, #12
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2314      	movs	r3, #20
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 f9fe 	bl	8004716 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031a:	4b1c      	ldr	r3, [pc, #112]	; (800038c <MX_GPIO_Init+0x88>)
 800031c:	695a      	ldr	r2, [r3, #20]
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_GPIO_Init+0x88>)
 8000320:	2180      	movs	r1, #128	; 0x80
 8000322:	0309      	lsls	r1, r1, #12
 8000324:	430a      	orrs	r2, r1
 8000326:	615a      	str	r2, [r3, #20]
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_GPIO_Init+0x88>)
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	2380      	movs	r3, #128	; 0x80
 800032e:	031b      	lsls	r3, r3, #12
 8000330:	4013      	ands	r3, r2
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_GPIO_Init+0x88>)
 8000338:	695a      	ldr	r2, [r3, #20]
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_GPIO_Init+0x88>)
 800033c:	2180      	movs	r1, #128	; 0x80
 800033e:	0289      	lsls	r1, r1, #10
 8000340:	430a      	orrs	r2, r1
 8000342:	615a      	str	r2, [r3, #20]
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_GPIO_Init+0x88>)
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	029b      	lsls	r3, r3, #10
 800034c:	4013      	ands	r3, r2
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_IND_GPIO_Port, LED_IND_Pin, GPIO_PIN_RESET);
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000354:	2200      	movs	r2, #0
 8000356:	2101      	movs	r1, #1
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fcb1 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_IND_Pin;
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2201      	movs	r2, #1
 800036a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 8000378:	187b      	adds	r3, r7, r1
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <MX_GPIO_Init+0x8c>)
 800037c:	0019      	movs	r1, r3
 800037e:	0010      	movs	r0, r2
 8000380:	f000 fb2e 	bl	80009e0 <HAL_GPIO_Init>

}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b009      	add	sp, #36	; 0x24
 800038a:	bd90      	pop	{r4, r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	48000800 	.word	0x48000800

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000398:	f000 fa0a 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f822 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f7ff ffb0 	bl	8000304 <MX_GPIO_Init>
  MX_TIM3_Init();
 80003a4:	f000 f8b2 	bl	800050c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <main+0x4c>)
 80003aa:	2100      	movs	r1, #0
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 f98b 	bl	80016c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <main+0x4c>)
 80003b4:	2104      	movs	r1, #4
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 f986 	bl	80016c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Channel1 and 2 was configured as AF_MCO automatically by CUBE, be aware of that
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <main+0x4c>)
 80003be:	2108      	movs	r1, #8
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f981 	bl	80016c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <main+0x4c>)
 80003c8:	210c      	movs	r1, #12
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 f97c 	bl	80016c8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80003d0:	f001 ff5c 	bl	800228c <osKernelInitialize>
  MX_FREERTOS_Init();
 80003d4:	f7ff ff5e 	bl	8000294 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003d8:	f001 ff84 	bl	80022e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <main+0x48>
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	20000294 	.word	0x20000294

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b091      	sub	sp, #68	; 0x44
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	2410      	movs	r4, #16
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2330      	movs	r3, #48	; 0x30
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f004 f98e 	bl	8004716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	2310      	movs	r3, #16
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f004 f987 	bl	8004716 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	0021      	movs	r1, r4
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2202      	movs	r2, #2
 800040e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2201      	movs	r2, #1
 8000414:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2210      	movs	r2, #16
 800041a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2202      	movs	r2, #2
 8000420:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	22a0      	movs	r2, #160	; 0xa0
 800042c:	0392      	lsls	r2, r2, #14
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2200      	movs	r2, #0
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	187b      	adds	r3, r7, r1
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fc5f 	bl	8000cfc <HAL_RCC_OscConfig>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000442:	f000 f819 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	003b      	movs	r3, r7
 8000448:	2207      	movs	r2, #7
 800044a:	601a      	str	r2, [r3, #0]
                                    |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	003b      	movs	r3, r7
 800044e:	2202      	movs	r2, #2
 8000450:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	003b      	movs	r3, r7
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	003b      	movs	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045e:	003b      	movs	r3, r7
 8000460:	2101      	movs	r1, #1
 8000462:	0018      	movs	r0, r3
 8000464:	f000 ff64 	bl	8001330 <HAL_RCC_ClockConfig>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800046c:	f000 f804 	bl	8000478 <Error_Handler>
  }
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b011      	add	sp, #68	; 0x44
 8000476:	bd90      	pop	{r4, r7, pc}

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x50>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x50>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	619a      	str	r2, [r3, #24]
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x50>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x50>)
 80004a4:	69da      	ldr	r2, [r3, #28]
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x50>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0549      	lsls	r1, r1, #21
 80004ac:	430a      	orrs	r2, r1
 80004ae:	61da      	str	r2, [r3, #28]
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_MspInit+0x50>)
 80004b2:	69da      	ldr	r2, [r3, #28]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	4013      	ands	r3, r2
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80004be:	2302      	movs	r3, #2
 80004c0:	425b      	negs	r3, r3
 80004c2:	2200      	movs	r2, #0
 80004c4:	2103      	movs	r1, #3
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fa68 	bl	800099c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f9aa 	bl	8000840 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004ec:	f003 fa74 	bl	80039d8 <xTaskGetSchedulerState>
 80004f0:	0003      	movs	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d001      	beq.n	80004fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004f6:	f003 feff 	bl	80042f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08e      	sub	sp, #56	; 0x38
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000512:	2328      	movs	r3, #40	; 0x28
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2310      	movs	r3, #16
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f004 f8fa 	bl	8004716 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000522:	2320      	movs	r3, #32
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	0018      	movs	r0, r3
 8000528:	2308      	movs	r3, #8
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f004 f8f2 	bl	8004716 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	0018      	movs	r0, r3
 8000536:	231c      	movs	r3, #28
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f004 f8eb 	bl	8004716 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000540:	4b3e      	ldr	r3, [pc, #248]	; (800063c <MX_TIM3_Init+0x130>)
 8000542:	4a3f      	ldr	r2, [pc, #252]	; (8000640 <MX_TIM3_Init+0x134>)
 8000544:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <MX_TIM3_Init+0x130>)
 8000548:	222f      	movs	r2, #47	; 0x2f
 800054a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054c:	4b3b      	ldr	r3, [pc, #236]	; (800063c <MX_TIM3_Init+0x130>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000552:	4b3a      	ldr	r3, [pc, #232]	; (800063c <MX_TIM3_Init+0x130>)
 8000554:	2264      	movs	r2, #100	; 0x64
 8000556:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000558:	4b38      	ldr	r3, [pc, #224]	; (800063c <MX_TIM3_Init+0x130>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <MX_TIM3_Init+0x130>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000564:	4b35      	ldr	r3, [pc, #212]	; (800063c <MX_TIM3_Init+0x130>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f806 	bl	8001578 <HAL_TIM_Base_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000570:	f7ff ff82 	bl	8000478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000574:	2128      	movs	r1, #40	; 0x28
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	0152      	lsls	r2, r2, #5
 800057c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800057e:	187a      	adds	r2, r7, r1
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_TIM3_Init+0x130>)
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fa17 	bl	80019b8 <HAL_TIM_ConfigClockSource>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800058e:	f7ff ff73 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <MX_TIM3_Init+0x130>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f83f 	bl	8001618 <HAL_TIM_PWM_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800059e:	f7ff ff6b 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a2:	2120      	movs	r1, #32
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005b0:	187a      	adds	r2, r7, r1
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_TIM3_Init+0x130>)
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fe10 	bl	80021dc <HAL_TIMEx_MasterConfigSynchronization>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80005c0:	f7ff ff5a 	bl	8000478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2260      	movs	r2, #96	; 0x60
 80005c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	220a      	movs	r2, #10
 80005ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_TIM3_Init+0x130>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f922 	bl	800182c <HAL_TIM_PWM_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80005ec:	f7ff ff44 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_TIM3_Init+0x130>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 f918 	bl	800182c <HAL_TIM_PWM_ConfigChannel>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000600:	f7ff ff3a 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_TIM3_Init+0x130>)
 8000608:	2208      	movs	r2, #8
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f90e 	bl	800182c <HAL_TIM_PWM_ConfigChannel>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000614:	f7ff ff30 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_TIM3_Init+0x130>)
 800061c:	220c      	movs	r2, #12
 800061e:	0018      	movs	r0, r3
 8000620:	f001 f904 	bl	800182c <HAL_TIM_PWM_ConfigChannel>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8000628:	f7ff ff26 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <MX_TIM3_Init+0x130>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f826 	bl	8000680 <HAL_TIM_MspPostInit>

}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00e      	add	sp, #56	; 0x38
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000294 	.word	0x20000294
 8000640:	40000400 	.word	0x40000400

08000644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <HAL_TIM_Base_MspInit+0x34>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d10b      	bne.n	800066e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_TIM_Base_MspInit+0x38>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_TIM_Base_MspInit+0x38>)
 800065c:	2102      	movs	r1, #2
 800065e:	430a      	orrs	r2, r1
 8000660:	61da      	str	r2, [r3, #28]
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_TIM_Base_MspInit+0x38>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	2202      	movs	r2, #2
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40000400 	.word	0x40000400
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	240c      	movs	r4, #12
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f004 f83f 	bl	8004716 <memset>
  if(timHandle->Instance==TIM3)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	; (8000750 <HAL_TIM_MspPostInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_TIM_MspPostInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <HAL_TIM_MspPostInit+0xd4>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <HAL_TIM_MspPostInit+0xd4>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0309      	lsls	r1, r1, #12
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <HAL_TIM_MspPostInit+0xd4>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	031b      	lsls	r3, r3, #12
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	22b0      	movs	r2, #176	; 0xb0
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <HAL_TIM_MspPostInit+0xd8>)
 80006e2:	0019      	movs	r1, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f000 f97b 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	000c      	movs	r4, r1
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2202      	movs	r2, #2
 80006fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2201      	movs	r2, #1
 800070c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	193b      	adds	r3, r7, r4
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <HAL_TIM_MspPostInit+0xd8>)
 8000712:	0019      	movs	r1, r3
 8000714:	0010      	movs	r0, r2
 8000716:	f000 f963 	bl	80009e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	22b0      	movs	r2, #176	; 0xb0
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2202      	movs	r2, #2
 8000728:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073c:	187b      	adds	r3, r7, r1
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_TIM_MspPostInit+0xd8>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f000 f94c 	bl	80009e0 <HAL_GPIO_Init>
  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b009      	add	sp, #36	; 0x24
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40000400 	.word	0x40000400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000800 	.word	0x48000800

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f7ff fece 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078a:	f003 ff97 	bl	80046bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fe01 	bl	8000394 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a0:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 80007a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007a8:	20001188 	.word	0x20001188

080007ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_IRQHandler>
	...

080007b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_Init+0x24>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_Init+0x24>)
 80007ba:	2110      	movs	r1, #16
 80007bc:	430a      	orrs	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f809 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c6:	f7ff fe5d 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_InitTick+0x5c>)
 80007e2:	681c      	ldr	r4, [r3, #0]
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_InitTick+0x60>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0019      	movs	r1, r3
 80007ea:	23fa      	movs	r3, #250	; 0xfa
 80007ec:	0098      	lsls	r0, r3, #2
 80007ee:	f7ff fc8b 	bl	8000108 <__udivsi3>
 80007f2:	0003      	movs	r3, r0
 80007f4:	0019      	movs	r1, r3
 80007f6:	0020      	movs	r0, r4
 80007f8:	f7ff fc86 	bl	8000108 <__udivsi3>
 80007fc:	0003      	movs	r3, r0
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f8e1 	bl	80009c6 <HAL_SYSTICK_Config>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e00f      	b.n	800082c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d80b      	bhi.n	800082a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	2301      	movs	r3, #1
 8000816:	425b      	negs	r3, r3
 8000818:	2200      	movs	r2, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f000 f8be 	bl	800099c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_InitTick+0x64>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b003      	add	sp, #12
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	18d2      	adds	r2, r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000008 	.word	0x20000008
 8000860:	200002dc 	.word	0x200002dc

08000864 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	200002dc 	.word	0x200002dc

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	; 0x7f
 800088c:	d828      	bhi.n	80008e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <__NVIC_SetPriority+0xd4>)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	589b      	ldr	r3, [r3, r2]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <__NVIC_SetPriority+0xd4>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008de:	e031      	b.n	8000944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	400b      	ands	r3, r1
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001c      	movs	r4, r3
 8000930:	230f      	movs	r3, #15
 8000932:	4023      	ands	r3, r4
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	430a      	orrs	r2, r1
 800093a:	3306      	adds	r3, #6
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	18c3      	adds	r3, r0, r3
 8000940:	3304      	adds	r3, #4
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	429a      	cmp	r2, r3
 8000966:	d301      	bcc.n	800096c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000968:	2301      	movs	r3, #1
 800096a:	e010      	b.n	800098e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SysTick_Config+0x44>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	3a01      	subs	r2, #1
 8000972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2103      	movs	r1, #3
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff ff7c 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x44>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	210f      	movs	r1, #15
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	1c02      	adds	r2, r0, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff5d 	bl	8000878 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ffbf 	bl	8000954 <SysTick_Config>
 80009d6:	0003      	movs	r3, r0
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e14f      	b.n	8000c90 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <HAL_GPIO_Init+0x28>
 8000a06:	e140      	b.n	8000c8a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d005      	beq.n	8000a20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2203      	movs	r2, #3
 8000a1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d130      	bne.n	8000a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	0013      	movs	r3, r2
 8000a30:	43da      	mvns	r2, r3
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	409a      	lsls	r2, r3
 8000a42:	0013      	movs	r3, r2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a56:	2201      	movs	r2, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d017      	beq.n	8000abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d123      	bne.n	8000b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	58d3      	ldr	r3, [r2, r3]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2207      	movs	r2, #7
 8000adc:	4013      	ands	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	2107      	movs	r1, #7
 8000af6:	400b      	ands	r3, r1
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	08da      	lsrs	r2, r3, #3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	6939      	ldr	r1, [r7, #16]
 8000b10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2203      	movs	r2, #3
 8000b30:	401a      	ands	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	029b      	lsls	r3, r3, #10
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d100      	bne.n	8000b54 <HAL_GPIO_Init+0x174>
 8000b52:	e09a      	b.n	8000c8a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	4b54      	ldr	r3, [pc, #336]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	619a      	str	r2, [r3, #24]
 8000b60:	4b51      	ldr	r3, [pc, #324]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4013      	ands	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b6c:	4a4f      	ldr	r2, [pc, #316]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	589b      	ldr	r3, [r3, r2]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	409a      	lsls	r2, r3
 8000b86:	0013      	movs	r3, r2
 8000b88:	43da      	mvns	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	2390      	movs	r3, #144	; 0x90
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x1de>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <HAL_GPIO_Init+0x2d4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x1da>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a42      	ldr	r2, [pc, #264]	; (8000cb8 <HAL_GPIO_Init+0x2d8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x1d6>
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	400a      	ands	r2, r1
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd4:	4935      	ldr	r1, [pc, #212]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	035b      	lsls	r3, r3, #13
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43da      	mvns	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	039b      	lsls	r3, r3, #14
 8000c24:	4013      	ands	r3, r2
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	029b      	lsls	r3, r3, #10
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	40da      	lsrs	r2, r3
 8000c98:	1e13      	subs	r3, r2, #0
 8000c9a:	d000      	beq.n	8000c9e <HAL_GPIO_Init+0x2be>
 8000c9c:	e6a8      	b.n	80009f0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b006      	add	sp, #24
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	0008      	movs	r0, r1
 8000cca:	0011      	movs	r1, r2
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	1c0a      	adds	r2, r1, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd8:	1c7b      	adds	r3, r7, #1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	1cbb      	adds	r3, r7, #2
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e301      	b.n	8001312 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	d100      	bne.n	8000d1a <HAL_RCC_OscConfig+0x1e>
 8000d18:	e08d      	b.n	8000e36 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d1a:	4bc3      	ldr	r3, [pc, #780]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	220c      	movs	r2, #12
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d00e      	beq.n	8000d44 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d26:	4bc0      	ldr	r3, [pc, #768]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b08      	cmp	r3, #8
 8000d30:	d116      	bne.n	8000d60 <HAL_RCC_OscConfig+0x64>
 8000d32:	4bbd      	ldr	r3, [pc, #756]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	025b      	lsls	r3, r3, #9
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	025b      	lsls	r3, r3, #9
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d10d      	bne.n	8000d60 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d44:	4bb8      	ldr	r3, [pc, #736]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	029b      	lsls	r3, r3, #10
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d100      	bne.n	8000d52 <HAL_RCC_OscConfig+0x56>
 8000d50:	e070      	b.n	8000e34 <HAL_RCC_OscConfig+0x138>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d000      	beq.n	8000d5c <HAL_RCC_OscConfig+0x60>
 8000d5a:	e06b      	b.n	8000e34 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e2d8      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d107      	bne.n	8000d78 <HAL_RCC_OscConfig+0x7c>
 8000d68:	4baf      	ldr	r3, [pc, #700]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4bae      	ldr	r3, [pc, #696]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e02f      	b.n	8000dd8 <HAL_RCC_OscConfig+0xdc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10c      	bne.n	8000d9a <HAL_RCC_OscConfig+0x9e>
 8000d80:	4ba9      	ldr	r3, [pc, #676]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4ba8      	ldr	r3, [pc, #672]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d86:	49a9      	ldr	r1, [pc, #676]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	4ba6      	ldr	r3, [pc, #664]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4ba5      	ldr	r3, [pc, #660]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d92:	49a7      	ldr	r1, [pc, #668]	; (8001030 <HAL_RCC_OscConfig+0x334>)
 8000d94:	400a      	ands	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	e01e      	b.n	8000dd8 <HAL_RCC_OscConfig+0xdc>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	d10e      	bne.n	8000dc0 <HAL_RCC_OscConfig+0xc4>
 8000da2:	4ba1      	ldr	r3, [pc, #644]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4ba0      	ldr	r3, [pc, #640]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	02c9      	lsls	r1, r1, #11
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	4b9d      	ldr	r3, [pc, #628]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b9c      	ldr	r3, [pc, #624]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	0249      	lsls	r1, r1, #9
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e00b      	b.n	8000dd8 <HAL_RCC_OscConfig+0xdc>
 8000dc0:	4b99      	ldr	r3, [pc, #612]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b98      	ldr	r3, [pc, #608]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000dc6:	4999      	ldr	r1, [pc, #612]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000dc8:	400a      	ands	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	4b96      	ldr	r3, [pc, #600]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b95      	ldr	r3, [pc, #596]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	4997      	ldr	r1, [pc, #604]	; (8001030 <HAL_RCC_OscConfig+0x334>)
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d014      	beq.n	8000e0a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fd40 	bl	8000864 <HAL_GetTick>
 8000de4:	0003      	movs	r3, r0
 8000de6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dea:	f7ff fd3b 	bl	8000864 <HAL_GetTick>
 8000dee:	0002      	movs	r2, r0
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b64      	cmp	r3, #100	; 0x64
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e28a      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfc:	4b8a      	ldr	r3, [pc, #552]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	029b      	lsls	r3, r3, #10
 8000e04:	4013      	ands	r3, r2
 8000e06:	d0f0      	beq.n	8000dea <HAL_RCC_OscConfig+0xee>
 8000e08:	e015      	b.n	8000e36 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fd2b 	bl	8000864 <HAL_GetTick>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fd26 	bl	8000864 <HAL_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e275      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b80      	ldr	r3, [pc, #512]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x118>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d100      	bne.n	8000e42 <HAL_RCC_OscConfig+0x146>
 8000e40:	e069      	b.n	8000f16 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e42:	4b79      	ldr	r3, [pc, #484]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	220c      	movs	r2, #12
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d00b      	beq.n	8000e64 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e4c:	4b76      	ldr	r3, [pc, #472]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	220c      	movs	r2, #12
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d11c      	bne.n	8000e92 <HAL_RCC_OscConfig+0x196>
 8000e58:	4b73      	ldr	r3, [pc, #460]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	4013      	ands	r3, r2
 8000e62:	d116      	bne.n	8000e92 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e64:	4b70      	ldr	r3, [pc, #448]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d005      	beq.n	8000e7a <HAL_RCC_OscConfig+0x17e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d001      	beq.n	8000e7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e24b      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	22f8      	movs	r2, #248	; 0xf8
 8000e80:	4393      	bics	r3, r2
 8000e82:	0019      	movs	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	00da      	lsls	r2, r3, #3
 8000e8a:	4b67      	ldr	r3, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e90:	e041      	b.n	8000f16 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d024      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9a:	4b63      	ldr	r3, [pc, #396]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea6:	f7ff fcdd 	bl	8000864 <HAL_GetTick>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fcd8 	bl	8000864 <HAL_GetTick>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e227      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec2:	4b59      	ldr	r3, [pc, #356]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d0f1      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	22f8      	movs	r2, #248	; 0xf8
 8000ed2:	4393      	bics	r3, r2
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	00da      	lsls	r2, r3, #3
 8000edc:	4b52      	ldr	r3, [pc, #328]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e018      	b.n	8000f16 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ee4:	4b50      	ldr	r3, [pc, #320]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	438a      	bics	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fcb8 	bl	8000864 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fcb3 	bl	8000864 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e202      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0c:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2202      	movs	r2, #2
 8000f12:	4013      	ands	r3, r2
 8000f14:	d1f1      	bne.n	8000efa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d036      	beq.n	8000f8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d019      	beq.n	8000f5c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fc96 	bl	8000864 <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fc91 	bl	8000864 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1e0      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	2202      	movs	r2, #2
 8000f56:	4013      	ands	r3, r2
 8000f58:	d0f1      	beq.n	8000f3e <HAL_RCC_OscConfig+0x242>
 8000f5a:	e018      	b.n	8000f8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	438a      	bics	r2, r1
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fc7c 	bl	8000864 <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff fc77 	bl	8000864 <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1c6      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1f1      	bne.n	8000f72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2204      	movs	r2, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x29e>
 8000f98:	e0b4      	b.n	8001104 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	201f      	movs	r0, #31
 8000f9c:	183b      	adds	r3, r7, r0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	69da      	ldr	r2, [r3, #28]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	055b      	lsls	r3, r3, #21
 8000faa:	4013      	ands	r3, r2
 8000fac:	d110      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0549      	lsls	r1, r1, #21
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	61da      	str	r2, [r3, #28]
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	69da      	ldr	r2, [r3, #28]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	055b      	lsls	r3, r3, #21
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fca:	183b      	adds	r3, r7, r0
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d11a      	bne.n	8001012 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0049      	lsls	r1, r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fc3b 	bl	8000864 <HAL_GetTick>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff4:	f7ff fc36 	bl	8000864 <HAL_GetTick>
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e185      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4013      	ands	r3, r2
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10e      	bne.n	8001038 <HAL_RCC_OscConfig+0x33c>
 800101a:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	4b02      	ldr	r3, [pc, #8]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	621a      	str	r2, [r3, #32]
 8001026:	e035      	b.n	8001094 <HAL_RCC_OscConfig+0x398>
 8001028:	40021000 	.word	0x40021000
 800102c:	fffeffff 	.word	0xfffeffff
 8001030:	fffbffff 	.word	0xfffbffff
 8001034:	40007000 	.word	0x40007000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10c      	bne.n	800105a <HAL_RCC_OscConfig+0x35e>
 8001040:	4bb6      	ldr	r3, [pc, #728]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001042:	6a1a      	ldr	r2, [r3, #32]
 8001044:	4bb5      	ldr	r3, [pc, #724]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001046:	2101      	movs	r1, #1
 8001048:	438a      	bics	r2, r1
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	4bb3      	ldr	r3, [pc, #716]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	4bb2      	ldr	r3, [pc, #712]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001052:	2104      	movs	r1, #4
 8001054:	438a      	bics	r2, r1
 8001056:	621a      	str	r2, [r3, #32]
 8001058:	e01c      	b.n	8001094 <HAL_RCC_OscConfig+0x398>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x380>
 8001062:	4bae      	ldr	r3, [pc, #696]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001064:	6a1a      	ldr	r2, [r3, #32]
 8001066:	4bad      	ldr	r3, [pc, #692]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001068:	2104      	movs	r1, #4
 800106a:	430a      	orrs	r2, r1
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	4bab      	ldr	r3, [pc, #684]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	4baa      	ldr	r3, [pc, #680]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	621a      	str	r2, [r3, #32]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0x398>
 800107c:	4ba7      	ldr	r3, [pc, #668]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	4ba6      	ldr	r3, [pc, #664]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001082:	2101      	movs	r1, #1
 8001084:	438a      	bics	r2, r1
 8001086:	621a      	str	r2, [r3, #32]
 8001088:	4ba4      	ldr	r3, [pc, #656]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4ba3      	ldr	r3, [pc, #652]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800108e:	2104      	movs	r1, #4
 8001090:	438a      	bics	r2, r1
 8001092:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d014      	beq.n	80010c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109c:	f7ff fbe2 	bl	8000864 <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a4:	e009      	b.n	80010ba <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fbdd 	bl	8000864 <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	4a9b      	ldr	r2, [pc, #620]	; (8001320 <HAL_RCC_OscConfig+0x624>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e12b      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ba:	4b98      	ldr	r3, [pc, #608]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	2202      	movs	r2, #2
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3aa>
 80010c4:	e013      	b.n	80010ee <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fbcd 	bl	8000864 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ce:	e009      	b.n	80010e4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d0:	f7ff fbc8 	bl	8000864 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a91      	ldr	r2, [pc, #580]	; (8001320 <HAL_RCC_OscConfig+0x624>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e116      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e4:	4b8d      	ldr	r3, [pc, #564]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010ee:	231f      	movs	r3, #31
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f8:	4b88      	ldr	r3, [pc, #544]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80010fa:	69da      	ldr	r2, [r3, #28]
 80010fc:	4b87      	ldr	r3, [pc, #540]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80010fe:	4989      	ldr	r1, [pc, #548]	; (8001324 <HAL_RCC_OscConfig+0x628>)
 8001100:	400a      	ands	r2, r1
 8001102:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2210      	movs	r2, #16
 800110a:	4013      	ands	r3, r2
 800110c:	d063      	beq.n	80011d6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d12a      	bne.n	800116c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001116:	4b81      	ldr	r3, [pc, #516]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111a:	4b80      	ldr	r3, [pc, #512]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800111c:	2104      	movs	r1, #4
 800111e:	430a      	orrs	r2, r1
 8001120:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001122:	4b7e      	ldr	r3, [pc, #504]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001126:	4b7d      	ldr	r3, [pc, #500]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fb99 	bl	8000864 <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001138:	f7ff fb94 	bl	8000864 <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e0e3      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800114a:	4b74      	ldr	r3, [pc, #464]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d0f1      	beq.n	8001138 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	22f8      	movs	r2, #248	; 0xf8
 800115a:	4393      	bics	r3, r2
 800115c:	0019      	movs	r1, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	00da      	lsls	r2, r3, #3
 8001164:	4b6d      	ldr	r3, [pc, #436]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 800116a:	e034      	b.n	80011d6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	3305      	adds	r3, #5
 8001172:	d111      	bne.n	8001198 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001174:	4b69      	ldr	r3, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800117a:	2104      	movs	r1, #4
 800117c:	438a      	bics	r2, r1
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001180:	4b66      	ldr	r3, [pc, #408]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	4393      	bics	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	00da      	lsls	r2, r3, #3
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001192:	430a      	orrs	r2, r1
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	e01e      	b.n	80011d6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001198:	4b60      	ldr	r3, [pc, #384]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800119a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119c:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800119e:	2104      	movs	r1, #4
 80011a0:	430a      	orrs	r2, r1
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011a4:	4b5d      	ldr	r3, [pc, #372]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fb58 	bl	8000864 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011ba:	f7ff fb53 	bl	8000864 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e0a2      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011cc:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	2202      	movs	r2, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f1      	bne.n	80011ba <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4e4>
 80011de:	e097      	b.n	8001310 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e0:	4b4e      	ldr	r3, [pc, #312]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	220c      	movs	r2, #12
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d100      	bne.n	80011ee <HAL_RCC_OscConfig+0x4f2>
 80011ec:	e06b      	b.n	80012c6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d14c      	bne.n	8001290 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b48      	ldr	r3, [pc, #288]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011fc:	494a      	ldr	r1, [pc, #296]	; (8001328 <HAL_RCC_OscConfig+0x62c>)
 80011fe:	400a      	ands	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb2f 	bl	8000864 <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff fb2a 	bl	8000864 <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e079      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121e:	4b3f      	ldr	r3, [pc, #252]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	049b      	lsls	r3, r3, #18
 8001226:	4013      	ands	r3, r2
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	220f      	movs	r2, #15
 8001230:	4393      	bics	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001238:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800123a:	430a      	orrs	r2, r1
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a3a      	ldr	r2, [pc, #232]	; (800132c <HAL_RCC_OscConfig+0x630>)
 8001244:	4013      	ands	r3, r2
 8001246:	0019      	movs	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	431a      	orrs	r2, r3
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001254:	430a      	orrs	r2, r1
 8001256:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_RCC_OscConfig+0x620>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0449      	lsls	r1, r1, #17
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fafd 	bl	8000864 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff faf8 	bl	8000864 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e047      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	4013      	ands	r3, r2
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x574>
 800128e:	e03f      	b.n	8001310 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001296:	4924      	ldr	r1, [pc, #144]	; (8001328 <HAL_RCC_OscConfig+0x62c>)
 8001298:	400a      	ands	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fae2 	bl	8000864 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fadd 	bl	8000864 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e02c      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	049b      	lsls	r3, r3, #18
 80012c0:	4013      	ands	r3, r2
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x5aa>
 80012c4:	e024      	b.n	8001310 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e01f      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	025b      	lsls	r3, r3, #9
 80012e4:	401a      	ands	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d10e      	bne.n	800130c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	220f      	movs	r2, #15
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	23f0      	movs	r3, #240	; 0xf0
 8001300:	039b      	lsls	r3, r3, #14
 8001302:	401a      	ands	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b008      	add	sp, #32
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021000 	.word	0x40021000
 8001320:	00001388 	.word	0x00001388
 8001324:	efffffff 	.word	0xefffffff
 8001328:	feffffff 	.word	0xfeffffff
 800132c:	ffc2ffff 	.word	0xffc2ffff

08001330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0b3      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	4013      	ands	r3, r2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d911      	bls.n	8001376 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	4393      	bics	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001364:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2201      	movs	r2, #1
 800136a:	4013      	ands	r3, r2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d001      	beq.n	8001376 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e09a      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d015      	beq.n	80013ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2204      	movs	r2, #4
 8001386:	4013      	ands	r3, r2
 8001388:	d006      	beq.n	8001398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800138a:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 8001390:	21e0      	movs	r1, #224	; 0xe0
 8001392:	00c9      	lsls	r1, r1, #3
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	22f0      	movs	r2, #240	; 0xf0
 800139e:	4393      	bics	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d040      	beq.n	8001438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d114      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e06e      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	049b      	lsls	r3, r3, #18
 80013de:	4013      	ands	r3, r2
 80013e0:	d108      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e062      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e05b      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4393      	bics	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001408:	f7ff fa2c 	bl	8000864 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001410:	e009      	b.n	8001426 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001412:	f7ff fa27 	bl	8000864 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_RCC_ClockConfig+0x18c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e042      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	220c      	movs	r2, #12
 800142c:	401a      	ands	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	429a      	cmp	r2, r3
 8001436:	d1ec      	bne.n	8001412 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	4013      	ands	r3, r2
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d211      	bcs.n	800146a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	4393      	bics	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_RCC_ClockConfig+0x184>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d001      	beq.n	800146a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e020      	b.n	80014ac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2204      	movs	r2, #4
 8001470:	4013      	ands	r3, r2
 8001472:	d009      	beq.n	8001488 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <HAL_RCC_ClockConfig+0x190>)
 800147a:	4013      	ands	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001488:	f000 f820 	bl	80014cc <HAL_RCC_GetSysClockFreq>
 800148c:	0001      	movs	r1, r0
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_RCC_ClockConfig+0x188>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	220f      	movs	r2, #15
 8001496:	4013      	ands	r3, r2
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_RCC_ClockConfig+0x194>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	000a      	movs	r2, r1
 800149e:	40da      	lsrs	r2, r3
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_ClockConfig+0x198>)
 80014a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f7ff f997 	bl	80007d8 <HAL_InitTick>
  
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b004      	add	sp, #16
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	00001388 	.word	0x00001388
 80014c0:	fffff8ff 	.word	0xfffff8ff
 80014c4:	08004790 	.word	0x08004790
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	220c      	movs	r2, #12
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d002      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x30>
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d003      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x36>
 80014fa:	e02c      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_GetSysClockFreq+0xa0>)
 80014fe:	613b      	str	r3, [r7, #16]
      break;
 8001500:	e02c      	b.n	800155c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	0c9b      	lsrs	r3, r3, #18
 8001506:	220f      	movs	r2, #15
 8001508:	4013      	ands	r3, r2
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_RCC_GetSysClockFreq+0xa4>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	220f      	movs	r2, #15
 8001516:	4013      	ands	r3, r2
 8001518:	4a16      	ldr	r2, [pc, #88]	; (8001574 <HAL_RCC_GetSysClockFreq+0xa8>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	4013      	ands	r3, r2
 8001526:	d009      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_RCC_GetSysClockFreq+0xa0>)
 800152c:	f7fe fdec 	bl	8000108 <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4353      	muls	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	000a      	movs	r2, r1
 8001540:	0152      	lsls	r2, r2, #5
 8001542:	1a52      	subs	r2, r2, r1
 8001544:	0193      	lsls	r3, r2, #6
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	185b      	adds	r3, r3, r1
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
      break;
 8001554:	e002      	b.n	800155c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001558:	613b      	str	r3, [r7, #16]
      break;
 800155a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800155c:	693b      	ldr	r3, [r7, #16]
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b006      	add	sp, #24
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40021000 	.word	0x40021000
 800156c:	007a1200 	.word	0x007a1200
 8001570:	080047a0 	.word	0x080047a0
 8001574:	080047b0 	.word	0x080047b0

08001578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e042      	b.n	8001610 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	223d      	movs	r2, #61	; 0x3d
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	223c      	movs	r2, #60	; 0x3c
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff f84f 	bl	8000644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	223d      	movs	r2, #61	; 0x3d
 80015aa:	2102      	movs	r1, #2
 80015ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	0019      	movs	r1, r3
 80015b8:	0010      	movs	r0, r2
 80015ba:	f000 fad1 	bl	8001b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2246      	movs	r2, #70	; 0x46
 80015c2:	2101      	movs	r1, #1
 80015c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	223e      	movs	r2, #62	; 0x3e
 80015ca:	2101      	movs	r1, #1
 80015cc:	5499      	strb	r1, [r3, r2]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	223f      	movs	r2, #63	; 0x3f
 80015d2:	2101      	movs	r1, #1
 80015d4:	5499      	strb	r1, [r3, r2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2241      	movs	r2, #65	; 0x41
 80015e2:	2101      	movs	r1, #1
 80015e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2242      	movs	r2, #66	; 0x42
 80015ea:	2101      	movs	r1, #1
 80015ec:	5499      	strb	r1, [r3, r2]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2243      	movs	r2, #67	; 0x43
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2244      	movs	r2, #68	; 0x44
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2245      	movs	r2, #69	; 0x45
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	223d      	movs	r2, #61	; 0x3d
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e042      	b.n	80016b0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	223d      	movs	r2, #61	; 0x3d
 800162e:	5c9b      	ldrb	r3, [r3, r2]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d107      	bne.n	8001646 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	223c      	movs	r2, #60	; 0x3c
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f000 f839 	bl	80016b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	223d      	movs	r2, #61	; 0x3d
 800164a:	2102      	movs	r1, #2
 800164c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3304      	adds	r3, #4
 8001656:	0019      	movs	r1, r3
 8001658:	0010      	movs	r0, r2
 800165a:	f000 fa81 	bl	8001b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2246      	movs	r2, #70	; 0x46
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	223e      	movs	r2, #62	; 0x3e
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	2101      	movs	r1, #1
 800167c:	5499      	strb	r1, [r3, r2]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2242      	movs	r2, #66	; 0x42
 800168a:	2101      	movs	r1, #1
 800168c:	5499      	strb	r1, [r3, r2]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2243      	movs	r2, #67	; 0x43
 8001692:	2101      	movs	r1, #1
 8001694:	5499      	strb	r1, [r3, r2]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2244      	movs	r2, #68	; 0x44
 800169a:	2101      	movs	r1, #1
 800169c:	5499      	strb	r1, [r3, r2]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2245      	movs	r2, #69	; 0x45
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	223d      	movs	r2, #61	; 0x3d
 80016aa:	2101      	movs	r1, #1
 80016ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_TIM_PWM_Start+0x22>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	223e      	movs	r2, #62	; 0x3e
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	4193      	sbcs	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	e01f      	b.n	800172a <HAL_TIM_PWM_Start+0x62>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d108      	bne.n	8001702 <HAL_TIM_PWM_Start+0x3a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	223f      	movs	r2, #63	; 0x3f
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	4193      	sbcs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e013      	b.n	800172a <HAL_TIM_PWM_Start+0x62>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d108      	bne.n	800171a <HAL_TIM_PWM_Start+0x52>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	5c9b      	ldrb	r3, [r3, r2]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	1e5a      	subs	r2, r3, #1
 8001714:	4193      	sbcs	r3, r2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	e007      	b.n	800172a <HAL_TIM_PWM_Start+0x62>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2241      	movs	r2, #65	; 0x41
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	4193      	sbcs	r3, r2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e06e      	b.n	8001810 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <HAL_TIM_PWM_Start+0x7a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	223e      	movs	r2, #62	; 0x3e
 800173c:	2102      	movs	r1, #2
 800173e:	5499      	strb	r1, [r3, r2]
 8001740:	e013      	b.n	800176a <HAL_TIM_PWM_Start+0xa2>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d104      	bne.n	8001752 <HAL_TIM_PWM_Start+0x8a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	223f      	movs	r2, #63	; 0x3f
 800174c:	2102      	movs	r1, #2
 800174e:	5499      	strb	r1, [r3, r2]
 8001750:	e00b      	b.n	800176a <HAL_TIM_PWM_Start+0xa2>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d104      	bne.n	8001762 <HAL_TIM_PWM_Start+0x9a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	2102      	movs	r1, #2
 800175e:	5499      	strb	r1, [r3, r2]
 8001760:	e003      	b.n	800176a <HAL_TIM_PWM_Start+0xa2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2241      	movs	r2, #65	; 0x41
 8001766:	2102      	movs	r1, #2
 8001768:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	0018      	movs	r0, r3
 8001774:	f000 fd0e 	bl	8002194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <HAL_TIM_PWM_Start+0x150>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00e      	beq.n	80017a0 <HAL_TIM_PWM_Start+0xd8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a25      	ldr	r2, [pc, #148]	; (800181c <HAL_TIM_PWM_Start+0x154>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_TIM_PWM_Start+0xd8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a23      	ldr	r2, [pc, #140]	; (8001820 <HAL_TIM_PWM_Start+0x158>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d004      	beq.n	80017a0 <HAL_TIM_PWM_Start+0xd8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <HAL_TIM_PWM_Start+0x15c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_TIM_PWM_Start+0xdc>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_TIM_PWM_Start+0xde>
 80017a4:	2300      	movs	r3, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0209      	lsls	r1, r1, #8
 80017b8:	430a      	orrs	r2, r1
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <HAL_TIM_PWM_Start+0x150>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d009      	beq.n	80017da <HAL_TIM_PWM_Start+0x112>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_TIM_PWM_Start+0x160>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d004      	beq.n	80017da <HAL_TIM_PWM_Start+0x112>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a11      	ldr	r2, [pc, #68]	; (800181c <HAL_TIM_PWM_Start+0x154>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d111      	bne.n	80017fe <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2207      	movs	r2, #7
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d010      	beq.n	800180e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2101      	movs	r1, #1
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017fc:	e007      	b.n	800180e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40014000 	.word	0x40014000
 8001820:	40014400 	.word	0x40014400
 8001824:	40014800 	.word	0x40014800
 8001828:	40000400 	.word	0x40000400

0800182c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001838:	2317      	movs	r3, #23
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	223c      	movs	r2, #60	; 0x3c
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_TIM_PWM_ConfigChannel+0x22>
 800184a:	2302      	movs	r3, #2
 800184c:	e0ad      	b.n	80019aa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	223c      	movs	r2, #60	; 0x3c
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d100      	bne.n	800185e <HAL_TIM_PWM_ConfigChannel+0x32>
 800185c:	e076      	b.n	800194c <HAL_TIM_PWM_ConfigChannel+0x120>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d900      	bls.n	8001866 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001864:	e095      	b.n	8001992 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d04e      	beq.n	800190a <HAL_TIM_PWM_ConfigChannel+0xde>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d900      	bls.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001872:	e08e      	b.n	8001992 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_TIM_PWM_ConfigChannel+0x56>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d021      	beq.n	80018c4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001880:	e087      	b.n	8001992 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f000 f9ec 	bl	8001c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699a      	ldr	r2, [r3, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2108      	movs	r1, #8
 800189c:	430a      	orrs	r2, r1
 800189e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2104      	movs	r1, #4
 80018ac:	438a      	bics	r2, r1
 80018ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6999      	ldr	r1, [r3, #24]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	619a      	str	r2, [r3, #24]
      break;
 80018c2:	e06b      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 fa53 	bl	8001d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0109      	lsls	r1, r1, #4
 80018e0:	430a      	orrs	r2, r1
 80018e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4931      	ldr	r1, [pc, #196]	; (80019b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6999      	ldr	r1, [r3, #24]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	021a      	lsls	r2, r3, #8
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	619a      	str	r2, [r3, #24]
      break;
 8001908:	e048      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	0011      	movs	r1, r2
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fab4 	bl	8001e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2108      	movs	r1, #8
 8001924:	430a      	orrs	r2, r1
 8001926:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2104      	movs	r1, #4
 8001934:	438a      	bics	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	69d9      	ldr	r1, [r3, #28]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	61da      	str	r2, [r3, #28]
      break;
 800194a:	e027      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f000 fb19 	bl	8001f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0109      	lsls	r1, r1, #4
 8001968:	430a      	orrs	r2, r1
 800196a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	490f      	ldr	r1, [pc, #60]	; (80019b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001978:	400a      	ands	r2, r1
 800197a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	69d9      	ldr	r1, [r3, #28]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	021a      	lsls	r2, r3, #8
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	61da      	str	r2, [r3, #28]
      break;
 8001990:	e004      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001992:	2317      	movs	r3, #23
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	223c      	movs	r2, #60	; 0x3c
 80019a0:	2100      	movs	r1, #0
 80019a2:	5499      	strb	r1, [r3, r2]

  return status;
 80019a4:	2317      	movs	r3, #23
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	781b      	ldrb	r3, [r3, #0]
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b006      	add	sp, #24
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	fffffbff 	.word	0xfffffbff

080019b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	230f      	movs	r3, #15
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	223c      	movs	r2, #60	; 0x3c
 80019ce:	5c9b      	ldrb	r3, [r3, r2]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_TIM_ConfigClockSource+0x20>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e0bc      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	223c      	movs	r2, #60	; 0x3c
 80019dc:	2101      	movs	r1, #1
 80019de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	223d      	movs	r2, #61	; 0x3d
 80019e4:	2102      	movs	r1, #2
 80019e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2277      	movs	r2, #119	; 0x77
 80019f4:	4393      	bics	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_TIM_ConfigClockSource+0x1a4>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0192      	lsls	r2, r2, #6
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d040      	beq.n	8001a96 <HAL_TIM_ConfigClockSource+0xde>
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0192      	lsls	r2, r2, #6
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d900      	bls.n	8001a1e <HAL_TIM_ConfigClockSource+0x66>
 8001a1c:	e088      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	0152      	lsls	r2, r2, #5
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_TIM_ConfigClockSource+0x70>
 8001a26:	e088      	b.n	8001b3a <HAL_TIM_ConfigClockSource+0x182>
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	0152      	lsls	r2, r2, #5
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d900      	bls.n	8001a32 <HAL_TIM_ConfigClockSource+0x7a>
 8001a30:	e07e      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a32:	2b70      	cmp	r3, #112	; 0x70
 8001a34:	d018      	beq.n	8001a68 <HAL_TIM_ConfigClockSource+0xb0>
 8001a36:	d900      	bls.n	8001a3a <HAL_TIM_ConfigClockSource+0x82>
 8001a38:	e07a      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a3a:	2b60      	cmp	r3, #96	; 0x60
 8001a3c:	d04f      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x126>
 8001a3e:	d900      	bls.n	8001a42 <HAL_TIM_ConfigClockSource+0x8a>
 8001a40:	e076      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a42:	2b50      	cmp	r3, #80	; 0x50
 8001a44:	d03b      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x106>
 8001a46:	d900      	bls.n	8001a4a <HAL_TIM_ConfigClockSource+0x92>
 8001a48:	e072      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	d057      	beq.n	8001afe <HAL_TIM_ConfigClockSource+0x146>
 8001a4e:	d900      	bls.n	8001a52 <HAL_TIM_ConfigClockSource+0x9a>
 8001a50:	e06e      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a52:	2b30      	cmp	r3, #48	; 0x30
 8001a54:	d063      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0x166>
 8001a56:	d86b      	bhi.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d060      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0x166>
 8001a5c:	d868      	bhi.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d05d      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0x166>
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d05b      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0x166>
 8001a66:	e063      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6899      	ldr	r1, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f000 fb6c 	bl	8002154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2277      	movs	r2, #119	; 0x77
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	609a      	str	r2, [r3, #8]
      break;
 8001a94:	e052      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6899      	ldr	r1, [r3, #8]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f000 fb55 	bl	8002154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	01c9      	lsls	r1, r1, #7
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]
      break;
 8001abc:	e03e      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	001a      	movs	r2, r3
 8001acc:	f000 fac8 	bl	8002060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2150      	movs	r1, #80	; 0x50
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fb22 	bl	8002120 <TIM_ITRx_SetConfig>
      break;
 8001adc:	e02e      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	001a      	movs	r2, r3
 8001aec:	f000 fae6 	bl	80020bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2160      	movs	r1, #96	; 0x60
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 fb12 	bl	8002120 <TIM_ITRx_SetConfig>
      break;
 8001afc:	e01e      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	f000 faa8 	bl	8002060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2140      	movs	r1, #64	; 0x40
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 fb02 	bl	8002120 <TIM_ITRx_SetConfig>
      break;
 8001b1c:	e00e      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0019      	movs	r1, r3
 8001b28:	0010      	movs	r0, r2
 8001b2a:	f000 faf9 	bl	8002120 <TIM_ITRx_SetConfig>
      break;
 8001b2e:	e005      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b30:	230f      	movs	r3, #15
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
      break;
 8001b38:	e000      	b.n	8001b3c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b3a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	223d      	movs	r2, #61	; 0x3d
 8001b40:	2101      	movs	r1, #1
 8001b42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	223c      	movs	r2, #60	; 0x3c
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	ffff00ff 	.word	0xffff00ff

08001b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a36      	ldr	r2, [pc, #216]	; (8001c4c <TIM_Base_SetConfig+0xec>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d003      	beq.n	8001b80 <TIM_Base_SetConfig+0x20>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a35      	ldr	r2, [pc, #212]	; (8001c50 <TIM_Base_SetConfig+0xf0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d108      	bne.n	8001b92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2270      	movs	r2, #112	; 0x70
 8001b84:	4393      	bics	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <TIM_Base_SetConfig+0xec>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <TIM_Base_SetConfig+0x62>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a2c      	ldr	r2, [pc, #176]	; (8001c50 <TIM_Base_SetConfig+0xf0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00f      	beq.n	8001bc2 <TIM_Base_SetConfig+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <TIM_Base_SetConfig+0xf4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00b      	beq.n	8001bc2 <TIM_Base_SetConfig+0x62>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <TIM_Base_SetConfig+0xf8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <TIM_Base_SetConfig+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <TIM_Base_SetConfig+0xfc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d003      	beq.n	8001bc2 <TIM_Base_SetConfig+0x62>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <TIM_Base_SetConfig+0x100>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <TIM_Base_SetConfig+0x104>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	4393      	bics	r3, r2
 8001bda:	001a      	movs	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <TIM_Base_SetConfig+0xec>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00b      	beq.n	8001c1a <TIM_Base_SetConfig+0xba>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <TIM_Base_SetConfig+0xf8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <TIM_Base_SetConfig+0xba>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <TIM_Base_SetConfig+0xfc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d003      	beq.n	8001c1a <TIM_Base_SetConfig+0xba>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <TIM_Base_SetConfig+0x100>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d103      	bne.n	8001c22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
  }
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40002000 	.word	0x40002000
 8001c58:	40014000 	.word	0x40014000
 8001c5c:	40014400 	.word	0x40014400
 8001c60:	40014800 	.word	0x40014800
 8001c64:	fffffcff 	.word	0xfffffcff

08001c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4393      	bics	r3, r2
 8001c80:	001a      	movs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2270      	movs	r2, #112	; 0x70
 8001c96:	4393      	bics	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <TIM_OC1_SetConfig+0xf8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00b      	beq.n	8001cde <TIM_OC1_SetConfig+0x76>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <TIM_OC1_SetConfig+0xfc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <TIM_OC1_SetConfig+0x76>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a25      	ldr	r2, [pc, #148]	; (8001d68 <TIM_OC1_SetConfig+0x100>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d003      	beq.n	8001cde <TIM_OC1_SetConfig+0x76>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <TIM_OC1_SetConfig+0x104>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10c      	bne.n	8001cf8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	4393      	bics	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <TIM_OC1_SetConfig+0xf8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <TIM_OC1_SetConfig+0xb0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <TIM_OC1_SetConfig+0xfc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <TIM_OC1_SetConfig+0xb0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <TIM_OC1_SetConfig+0x100>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <TIM_OC1_SetConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <TIM_OC1_SetConfig+0x104>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <TIM_OC1_SetConfig+0x108>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <TIM_OC1_SetConfig+0x10c>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	621a      	str	r2, [r3, #32]
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b006      	add	sp, #24
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40014000 	.word	0x40014000
 8001d68:	40014400 	.word	0x40014400
 8001d6c:	40014800 	.word	0x40014800
 8001d70:	fffffeff 	.word	0xfffffeff
 8001d74:	fffffdff 	.word	0xfffffdff

08001d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	4393      	bics	r3, r2
 8001d90:	001a      	movs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <TIM_OC2_SetConfig+0xe8>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <TIM_OC2_SetConfig+0xec>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <TIM_OC2_SetConfig+0xf0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10d      	bne.n	8001df6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	4393      	bics	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	4393      	bics	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <TIM_OC2_SetConfig+0xf0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00b      	beq.n	8001e16 <TIM_OC2_SetConfig+0x9e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <TIM_OC2_SetConfig+0xf4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <TIM_OC2_SetConfig+0x9e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <TIM_OC2_SetConfig+0xf8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <TIM_OC2_SetConfig+0x9e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <TIM_OC2_SetConfig+0xfc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d113      	bne.n	8001e3e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <TIM_OC2_SetConfig+0x100>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <TIM_OC2_SetConfig+0x104>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	621a      	str	r2, [r3, #32]
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	ffff8fff 	.word	0xffff8fff
 8001e64:	fffffcff 	.word	0xfffffcff
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40014400 	.word	0x40014400
 8001e74:	40014800 	.word	0x40014800
 8001e78:	fffffbff 	.word	0xfffffbff
 8001e7c:	fffff7ff 	.word	0xfffff7ff

08001e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a33      	ldr	r2, [pc, #204]	; (8001f64 <TIM_OC3_SetConfig+0xe4>)
 8001e96:	401a      	ands	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2270      	movs	r2, #112	; 0x70
 8001eac:	4393      	bics	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <TIM_OC3_SetConfig+0xe8>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <TIM_OC3_SetConfig+0xec>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <TIM_OC3_SetConfig+0xf0>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <TIM_OC3_SetConfig+0xf4>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <TIM_OC3_SetConfig+0xec>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <TIM_OC3_SetConfig+0x9a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <TIM_OC3_SetConfig+0xf8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <TIM_OC3_SetConfig+0x9a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <TIM_OC3_SetConfig+0xfc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <TIM_OC3_SetConfig+0x9a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <TIM_OC3_SetConfig+0x100>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d113      	bne.n	8001f42 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <TIM_OC3_SetConfig+0x104>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <TIM_OC3_SetConfig+0x108>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	621a      	str	r2, [r3, #32]
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b006      	add	sp, #24
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	fffffeff 	.word	0xfffffeff
 8001f68:	fffffdff 	.word	0xfffffdff
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	fffff7ff 	.word	0xfffff7ff
 8001f74:	fffffbff 	.word	0xfffffbff
 8001f78:	40014000 	.word	0x40014000
 8001f7c:	40014400 	.word	0x40014400
 8001f80:	40014800 	.word	0x40014800
 8001f84:	ffffefff 	.word	0xffffefff
 8001f88:	ffffdfff 	.word	0xffffdfff

08001f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <TIM_OC4_SetConfig+0xb0>)
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a22      	ldr	r2, [pc, #136]	; (8002040 <TIM_OC4_SetConfig+0xb4>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <TIM_OC4_SetConfig+0xb8>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <TIM_OC4_SetConfig+0xbc>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	031b      	lsls	r3, r3, #12
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <TIM_OC4_SetConfig+0xc0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00b      	beq.n	8002004 <TIM_OC4_SetConfig+0x78>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <TIM_OC4_SetConfig+0xc4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_OC4_SetConfig+0x78>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <TIM_OC4_SetConfig+0xc8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_OC4_SetConfig+0x78>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a16      	ldr	r2, [pc, #88]	; (8002058 <TIM_OC4_SetConfig+0xcc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d109      	bne.n	8002018 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <TIM_OC4_SetConfig+0xd0>)
 8002008:	4013      	ands	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	621a      	str	r2, [r3, #32]
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b006      	add	sp, #24
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	ffffefff 	.word	0xffffefff
 8002040:	ffff8fff 	.word	0xffff8fff
 8002044:	fffffcff 	.word	0xfffffcff
 8002048:	ffffdfff 	.word	0xffffdfff
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800
 800205c:	ffffbfff 	.word	0xffffbfff

08002060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	2201      	movs	r2, #1
 8002078:	4393      	bics	r3, r2
 800207a:	001a      	movs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	22f0      	movs	r2, #240	; 0xf0
 800208a:	4393      	bics	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	220a      	movs	r2, #10
 800209c:	4393      	bics	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	621a      	str	r2, [r3, #32]
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b006      	add	sp, #24
 80020ba:	bd80      	pop	{r7, pc}

080020bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	2210      	movs	r2, #16
 80020d4:	4393      	bics	r3, r2
 80020d6:	001a      	movs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <TIM_TI2_ConfigInputStage+0x60>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	031b      	lsls	r3, r3, #12
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	22a0      	movs	r2, #160	; 0xa0
 80020f8:	4393      	bics	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	621a      	str	r2, [r3, #32]
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b006      	add	sp, #24
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	ffff0fff 	.word	0xffff0fff

08002120 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2270      	movs	r2, #112	; 0x70
 8002134:	4393      	bics	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	2207      	movs	r2, #7
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	609a      	str	r2, [r3, #8]
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <TIM_ETR_SetConfig+0x3c>)
 800216c:	4013      	ands	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	021a      	lsls	r2, r3, #8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	431a      	orrs	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b006      	add	sp, #24
 800218e:	bd80      	pop	{r7, pc}
 8002190:	ffff00ff 	.word	0xffff00ff

08002194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	221f      	movs	r2, #31
 80021a4:	4013      	ands	r3, r2
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	43d2      	mvns	r2, r2
 80021b6:	401a      	ands	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	211f      	movs	r1, #31
 80021c4:	400b      	ands	r3, r1
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4099      	lsls	r1, r3
 80021ca:	000b      	movs	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	621a      	str	r2, [r3, #32]
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b006      	add	sp, #24
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	223c      	movs	r2, #60	; 0x3c
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e041      	b.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	223c      	movs	r2, #60	; 0x3c
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	223d      	movs	r2, #61	; 0x3d
 8002200:	2102      	movs	r1, #2
 8002202:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2270      	movs	r2, #112	; 0x70
 8002218:	4393      	bics	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d10c      	bne.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	4393      	bics	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4313      	orrs	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	223d      	movs	r2, #61	; 0x3d
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	223c      	movs	r2, #60	; 0x3c
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400
 8002288:	40014000 	.word	0x40014000

0800228c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002292:	f3ef 8305 	mrs	r3, IPSR
 8002296:	60bb      	str	r3, [r7, #8]
  return(result);
 8002298:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229e:	f3ef 8310 	mrs	r3, PRIMASK
 80022a2:	607b      	str	r3, [r7, #4]
  return(result);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <osKernelInitialize+0x2e>
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <osKernelInitialize+0x54>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80022b2:	2306      	movs	r3, #6
 80022b4:	425b      	negs	r3, r3
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e00c      	b.n	80022d4 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <osKernelInitialize+0x54>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <osKernelInitialize+0x54>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e002      	b.n	80022d4 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80022ce:	2301      	movs	r3, #1
 80022d0:	425b      	negs	r3, r3
 80022d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022d4:	68fb      	ldr	r3, [r7, #12]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	200002e0 	.word	0x200002e0

080022e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ea:	f3ef 8305 	mrs	r3, IPSR
 80022ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80022f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f6:	f3ef 8310 	mrs	r3, PRIMASK
 80022fa:	607b      	str	r3, [r7, #4]
  return(result);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <osKernelStart+0x2e>
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <osKernelStart+0x58>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d103      	bne.n	8002312 <osKernelStart+0x2e>
    stat = osErrorISR;
 800230a:	2306      	movs	r3, #6
 800230c:	425b      	negs	r3, r3
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e00e      	b.n	8002330 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <osKernelStart+0x58>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <osKernelStart+0x58>)
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002320:	f000 ff7e 	bl	8003220 <vTaskStartScheduler>
      stat = osOK;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e002      	b.n	8002330 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800232a:	2301      	movs	r3, #1
 800232c:	425b      	negs	r3, r3
 800232e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	200002e0 	.word	0x200002e0

08002340 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b090      	sub	sp, #64	; 0x40
 8002344:	af04      	add	r7, sp, #16
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002350:	f3ef 8305 	mrs	r3, IPSR
 8002354:	61fb      	str	r3, [r7, #28]
  return(result);
 8002356:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002358:	2b00      	cmp	r3, #0
 800235a:	d000      	beq.n	800235e <osThreadNew+0x1e>
 800235c:	e090      	b.n	8002480 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235e:	f3ef 8310 	mrs	r3, PRIMASK
 8002362:	61bb      	str	r3, [r7, #24]
  return(result);
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <osThreadNew+0x34>
 800236a:	4b48      	ldr	r3, [pc, #288]	; (800248c <osThreadNew+0x14c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d100      	bne.n	8002374 <osThreadNew+0x34>
 8002372:	e085      	b.n	8002480 <osThreadNew+0x140>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d100      	bne.n	800237c <osThreadNew+0x3c>
 800237a:	e081      	b.n	8002480 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800237c:	2340      	movs	r3, #64	; 0x40
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002380:	2318      	movs	r3, #24
 8002382:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002384:	2117      	movs	r1, #23
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800238c:	187b      	adds	r3, r7, r1
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002390:	2301      	movs	r3, #1
 8002392:	425b      	negs	r3, r3
 8002394:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d044      	beq.n	8002426 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <osThreadNew+0x6a>
        name = attr->name;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <osThreadNew+0x8e>
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	2b38      	cmp	r3, #56	; 0x38
 80023c2:	d804      	bhi.n	80023ce <osThreadNew+0x8e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	d001      	beq.n	80023d2 <osThreadNew+0x92>
        return (NULL);
 80023ce:	2300      	movs	r3, #0
 80023d0:	e057      	b.n	8002482 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <osThreadNew+0xc8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b5b      	cmp	r3, #91	; 0x5b
 80023f0:	d90a      	bls.n	8002408 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <osThreadNew+0xc8>
        mem = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	e010      	b.n	800242a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <osThreadNew+0xea>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d108      	bne.n	800242a <osThreadNew+0xea>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <osThreadNew+0xea>
          mem = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	e001      	b.n	800242a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d112      	bne.n	8002456 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002438:	68bd      	ldr	r5, [r7, #8]
 800243a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800243c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	9201      	str	r2, [sp, #4]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	002b      	movs	r3, r5
 800244a:	0022      	movs	r2, r4
 800244c:	f000 fd49 	bl	8002ee2 <xTaskCreateStatic>
 8002450:	0003      	movs	r3, r0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e014      	b.n	8002480 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d111      	bne.n	8002480 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	b29a      	uxth	r2, r3
 8002460:	68bc      	ldr	r4, [r7, #8]
 8002462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	2310      	movs	r3, #16
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	0023      	movs	r3, r4
 8002472:	f000 fd79 	bl	8002f68 <xTaskCreate>
 8002476:	0003      	movs	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <osThreadNew+0x140>
          hTask = NULL;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002480:	693b      	ldr	r3, [r7, #16]
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b00c      	add	sp, #48	; 0x30
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	200002e0 	.word	0x200002e0

08002490 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002498:	f3ef 8305 	mrs	r3, IPSR
 800249c:	613b      	str	r3, [r7, #16]
  return(result);
 800249e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a4:	f3ef 8310 	mrs	r3, PRIMASK
 80024a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <osDelay+0x30>
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <osDelay+0x4c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d103      	bne.n	80024c0 <osDelay+0x30>
    stat = osErrorISR;
 80024b8:	2306      	movs	r3, #6
 80024ba:	425b      	negs	r3, r3
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e008      	b.n	80024d2 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <osDelay+0x42>
      vTaskDelay(ticks);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 fe81 	bl	80031d4 <vTaskDelay>
    }
  }

  return (stat);
 80024d2:	697b      	ldr	r3, [r7, #20]
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b006      	add	sp, #24
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200002e0 	.word	0x200002e0

080024e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a06      	ldr	r2, [pc, #24]	; (8002508 <vApplicationGetIdleTaskMemory+0x28>)
 80024f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <vApplicationGetIdleTaskMemory+0x2c>)
 80024f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	200002e4 	.word	0x200002e4
 800250c:	20000340 	.word	0x20000340

08002510 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a06      	ldr	r2, [pc, #24]	; (8002538 <vApplicationGetTimerTaskMemory+0x28>)
 8002520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4a05      	ldr	r2, [pc, #20]	; (800253c <vApplicationGetTimerTaskMemory+0x2c>)
 8002526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	20000440 	.word	0x20000440
 800253c:	2000049c 	.word	0x2000049c

08002540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3308      	adds	r3, #8
 800254c:	001a      	movs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	4252      	negs	r2, r2
 8002558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3308      	adds	r3, #8
 800255e:	001a      	movs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3308      	adds	r3, #8
 8002568:	001a      	movs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}

08002592 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	601a      	str	r2, [r3, #0]
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3301      	adds	r3, #1
 80025ea:	d103      	bne.n	80025f4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e00c      	b.n	800260e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3308      	adds	r3, #8
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e002      	b.n	8002602 <vListInsert+0x2c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d2f6      	bcs.n	80025fc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}

08002642 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6892      	ldr	r2, [r2, #8]
 8002658:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6852      	ldr	r2, [r2, #4]
 8002662:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d103      	bne.n	8002676 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}

08002692 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <xQueueGenericReset+0x18>
 80026a6:	b672      	cpsid	i
 80026a8:	e7fe      	b.n	80026a8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80026aa:	f001 fdc9 	bl	8004240 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	434b      	muls	r3, r1
 80026bc:	18d2      	adds	r2, r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	1e59      	subs	r1, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	434b      	muls	r3, r1
 80026e0:	18d2      	adds	r2, r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2244      	movs	r2, #68	; 0x44
 80026ea:	21ff      	movs	r1, #255	; 0xff
 80026ec:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2245      	movs	r2, #69	; 0x45
 80026f2:	21ff      	movs	r1, #255	; 0xff
 80026f4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3310      	adds	r3, #16
 8002708:	0018      	movs	r0, r3
 800270a:	f000 ffcd 	bl	80036a8 <xTaskRemoveFromEventList>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d00c      	beq.n	800272c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002712:	f001 fd85 	bl	8004220 <vPortYield>
 8002716:	e009      	b.n	800272c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3310      	adds	r3, #16
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ff0f 	bl	8002540 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3324      	adds	r3, #36	; 0x24
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ff0a 	bl	8002540 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800272c:	f001 fd9a 	bl	8004264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002730:	2301      	movs	r3, #1
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}

0800273a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800273a:	b590      	push	{r4, r7, lr}
 800273c:	b089      	sub	sp, #36	; 0x24
 800273e:	af02      	add	r7, sp, #8
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueGenericCreateStatic+0x18>
 800274e:	b672      	cpsid	i
 8002750:	e7fe      	b.n	8002750 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <xQueueGenericCreateStatic+0x22>
 8002758:	b672      	cpsid	i
 800275a:	e7fe      	b.n	800275a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <xQueueGenericCreateStatic+0x2e>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <xQueueGenericCreateStatic+0x32>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <xQueueGenericCreateStatic+0x34>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <xQueueGenericCreateStatic+0x3c>
 8002772:	b672      	cpsid	i
 8002774:	e7fe      	b.n	8002774 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <xQueueGenericCreateStatic+0x48>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <xQueueGenericCreateStatic+0x4c>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueGenericCreateStatic+0x4e>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <xQueueGenericCreateStatic+0x56>
 800278c:	b672      	cpsid	i
 800278e:	e7fe      	b.n	800278e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002790:	2350      	movs	r3, #80	; 0x50
 8002792:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b50      	cmp	r3, #80	; 0x50
 8002798:	d001      	beq.n	800279e <xQueueGenericCreateStatic+0x64>
 800279a:	b672      	cpsid	i
 800279c:	e7fe      	b.n	800279c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00e      	beq.n	80027c6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2246      	movs	r2, #70	; 0x46
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027b0:	2328      	movs	r3, #40	; 0x28
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	781c      	ldrb	r4, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	0023      	movs	r3, r4
 80027c2:	f000 f805 	bl	80027d0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80027c6:	697b      	ldr	r3, [r7, #20]
	}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b007      	add	sp, #28
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	001a      	movs	r2, r3
 80027de:	1cfb      	adds	r3, r7, #3
 80027e0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e002      	b.n	80027f6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2101      	movs	r1, #1
 8002806:	0018      	movs	r0, r3
 8002808:	f7ff ff43 	bl	8002692 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1cfa      	adds	r2, r7, #3
 8002810:	214c      	movs	r1, #76	; 0x4c
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bd80      	pop	{r7, pc}

0800281e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08a      	sub	sp, #40	; 0x28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueGenericSend+0x20>
 800283a:	b672      	cpsid	i
 800283c:	e7fe      	b.n	800283c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <xQueueGenericSend+0x2e>
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <xQueueGenericSend+0x32>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <xQueueGenericSend+0x34>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <xQueueGenericSend+0x3c>
 8002856:	b672      	cpsid	i
 8002858:	e7fe      	b.n	8002858 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d103      	bne.n	8002868 <xQueueGenericSend+0x4a>
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <xQueueGenericSend+0x4e>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <xQueueGenericSend+0x50>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueGenericSend+0x58>
 8002872:	b672      	cpsid	i
 8002874:	e7fe      	b.n	8002874 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002876:	f001 f8af 	bl	80039d8 <xTaskGetSchedulerState>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d102      	bne.n	8002884 <xQueueGenericSend+0x66>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <xQueueGenericSend+0x6a>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <xQueueGenericSend+0x6c>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueGenericSend+0x74>
 800288e:	b672      	cpsid	i
 8002890:	e7fe      	b.n	8002890 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002892:	f001 fcd5 	bl	8004240 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <xQueueGenericSend+0x8a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d11e      	bne.n	80028e6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 f99f 	bl	8002bf2 <prvCopyDataToQueue>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	3324      	adds	r3, #36	; 0x24
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 feef 	bl	80036a8 <xTaskRemoveFromEventList>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d007      	beq.n	80028de <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028ce:	f001 fca7 	bl	8004220 <vPortYield>
 80028d2:	e004      	b.n	80028de <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028da:	f001 fca1 	bl	8004220 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028de:	f001 fcc1 	bl	8004264 <vPortExitCritical>
				return pdPASS;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e05b      	b.n	800299e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028ec:	f001 fcba 	bl	8004264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e054      	b.n	800299e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028fa:	2314      	movs	r3, #20
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 ff2e 	bl	8003760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002904:	2301      	movs	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002908:	f001 fcac 	bl	8004264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800290c:	f000 fcdc 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002910:	f001 fc96 	bl	8004240 <vPortEnterCritical>
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2244      	movs	r2, #68	; 0x44
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b25b      	sxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	d103      	bne.n	8002928 <xQueueGenericSend+0x10a>
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2244      	movs	r2, #68	; 0x44
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	2245      	movs	r2, #69	; 0x45
 800292c:	5c9b      	ldrb	r3, [r3, r2]
 800292e:	b25b      	sxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	d103      	bne.n	800293c <xQueueGenericSend+0x11e>
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2245      	movs	r2, #69	; 0x45
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]
 800293c:	f001 fc92 	bl	8004264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002940:	1d3a      	adds	r2, r7, #4
 8002942:	2314      	movs	r3, #20
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 ff1d 	bl	8003788 <xTaskCheckForTimeOut>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d11e      	bne.n	8002990 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fa51 	bl	8002dfc <prvIsQueueFull>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d011      	beq.n	8002982 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	3310      	adds	r3, #16
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	0011      	movs	r1, r2
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fe5a 	bl	8003620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 f9d0 	bl	8002d14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002974:	f000 fcb4 	bl	80032e0 <xTaskResumeAll>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d18a      	bne.n	8002892 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800297c:	f001 fc50 	bl	8004220 <vPortYield>
 8002980:	e787      	b.n	8002892 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f9c5 	bl	8002d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800298a:	f000 fca9 	bl	80032e0 <xTaskResumeAll>
 800298e:	e780      	b.n	8002892 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 f9be 	bl	8002d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002998:	f000 fca2 	bl	80032e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800299c:	2300      	movs	r3, #0
		}
	}
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b00a      	add	sp, #40	; 0x28
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029a6:	b590      	push	{r4, r7, lr}
 80029a8:	b089      	sub	sp, #36	; 0x24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <xQueueGenericSendFromISR+0x1c>
 80029be:	b672      	cpsid	i
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <xQueueGenericSendFromISR+0x2a>
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <xQueueGenericSendFromISR+0x2e>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <xQueueGenericSendFromISR+0x30>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueGenericSendFromISR+0x38>
 80029da:	b672      	cpsid	i
 80029dc:	e7fe      	b.n	80029dc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d103      	bne.n	80029ec <xQueueGenericSendFromISR+0x46>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <xQueueGenericSendFromISR+0x4a>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <xQueueGenericSendFromISR+0x4c>
 80029f0:	2300      	movs	r3, #0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <xQueueGenericSendFromISR+0x54>
 80029f6:	b672      	cpsid	i
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029fa:	f001 fc4b 	bl	8004294 <ulSetInterruptMaskFromISR>
 80029fe:	0003      	movs	r3, r0
 8002a00:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <xQueueGenericSendFromISR+0x6e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d12e      	bne.n	8002a72 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a14:	2413      	movs	r4, #19
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	2145      	movs	r1, #69	; 0x45
 8002a1c:	5c52      	ldrb	r2, [r2, r1]
 8002a1e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f8e3 	bl	8002bf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	d111      	bne.n	8002a5a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fe30 	bl	80036a8 <xTaskRemoveFromEventList>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d00f      	beq.n	8002a6c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e008      	b.n	8002a6c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a5a:	2313      	movs	r3, #19
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	b259      	sxtb	r1, r3
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2245      	movs	r2, #69	; 0x45
 8002a6a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
		{
 8002a70:	e001      	b.n	8002a76 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f001 fc11 	bl	80042a0 <vClearInterruptMaskFromISR>

	return xReturn;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b009      	add	sp, #36	; 0x24
 8002a86:	bd90      	pop	{r4, r7, pc}

08002a88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <xQueueReceive+0x1e>
 8002aa2:	b672      	cpsid	i
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <xQueueReceive+0x2c>
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <xQueueReceive+0x30>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <xQueueReceive+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <xQueueReceive+0x3a>
 8002abe:	b672      	cpsid	i
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac2:	f000 ff89 	bl	80039d8 <xTaskGetSchedulerState>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d102      	bne.n	8002ad0 <xQueueReceive+0x48>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <xQueueReceive+0x4c>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <xQueueReceive+0x4e>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <xQueueReceive+0x56>
 8002ada:	b672      	cpsid	i
 8002adc:	e7fe      	b.n	8002adc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ade:	f001 fbaf 	bl	8004240 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01a      	beq.n	8002b24 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	0011      	movs	r1, r2
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f8e7 	bl	8002cc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 fdca 	bl	80036a8 <xTaskRemoveFromEventList>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b18:	f001 fb82 	bl	8004220 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b1c:	f001 fba2 	bl	8004264 <vPortExitCritical>
				return pdPASS;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e062      	b.n	8002bea <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b2a:	f001 fb9b 	bl	8004264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e05b      	b.n	8002bea <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b38:	2314      	movs	r3, #20
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 fe0f 	bl	8003760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b46:	f001 fb8d 	bl	8004264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b4a:	f000 fbbd 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b4e:	f001 fb77 	bl	8004240 <vPortEnterCritical>
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	2244      	movs	r2, #68	; 0x44
 8002b56:	5c9b      	ldrb	r3, [r3, r2]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	d103      	bne.n	8002b66 <xQueueReceive+0xde>
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2244      	movs	r2, #68	; 0x44
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	2245      	movs	r2, #69	; 0x45
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	d103      	bne.n	8002b7a <xQueueReceive+0xf2>
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2245      	movs	r2, #69	; 0x45
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]
 8002b7a:	f001 fb73 	bl	8004264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b7e:	1d3a      	adds	r2, r7, #4
 8002b80:	2314      	movs	r3, #20
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 fdfe 	bl	8003788 <xTaskCheckForTimeOut>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d11e      	bne.n	8002bce <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 f91c 	bl	8002dd0 <prvIsQueueEmpty>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d011      	beq.n	8002bc0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	3324      	adds	r3, #36	; 0x24
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 fd3b 	bl	8003620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 f8b1 	bl	8002d14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bb2:	f000 fb95 	bl	80032e0 <xTaskResumeAll>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d191      	bne.n	8002ade <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002bba:	f001 fb31 	bl	8004220 <vPortYield>
 8002bbe:	e78e      	b.n	8002ade <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f8a6 	bl	8002d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bc8:	f000 fb8a 	bl	80032e0 <xTaskResumeAll>
 8002bcc:	e787      	b.n	8002ade <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f89f 	bl	8002d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bd6:	f000 fb83 	bl	80032e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 f8f7 	bl	8002dd0 <prvIsQueueEmpty>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d100      	bne.n	8002be8 <xQueueReceive+0x160>
 8002be6:	e77a      	b.n	8002ade <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002be8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b00a      	add	sp, #40	; 0x28
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10e      	bne.n	8002c2e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d14e      	bne.n	8002cb6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 fef7 	bl	8003a10 <xTaskPriorityDisinherit>
 8002c22:	0003      	movs	r3, r0
 8002c24:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	e043      	b.n	8002cb6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6898      	ldr	r0, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0019      	movs	r1, r3
 8002c40:	f001 fd60 	bl	8004704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	18d2      	adds	r2, r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d32b      	bcc.n	8002cb6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	e026      	b.n	8002cb6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68d8      	ldr	r0, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0019      	movs	r1, r3
 8002c74:	f001 fd46 	bl	8004704 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	425b      	negs	r3, r3
 8002c82:	18d2      	adds	r2, r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	18d2      	adds	r2, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d105      	bne.n	8002cb6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002cbe:	697b      	ldr	r3, [r7, #20]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	18d2      	adds	r2, r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d303      	bcc.n	8002cfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68d9      	ldr	r1, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f001 fcfc 	bl	8004704 <memcpy>
	}
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d1c:	f001 fa90 	bl	8004240 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	2145      	movs	r1, #69	; 0x45
 8002d28:	5c52      	ldrb	r2, [r2, r1]
 8002d2a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2c:	e013      	b.n	8002d56 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3324      	adds	r3, #36	; 0x24
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fcb4 	bl	80036a8 <xTaskRemoveFromEventList>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d44:	f000 fd70 	bl	8003828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d48:	210f      	movs	r1, #15
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d56:	230f      	movs	r3, #15
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	dce5      	bgt.n	8002d2e <prvUnlockQueue+0x1a>
 8002d62:	e000      	b.n	8002d66 <prvUnlockQueue+0x52>
					break;
 8002d64:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2245      	movs	r2, #69	; 0x45
 8002d6a:	21ff      	movs	r1, #255	; 0xff
 8002d6c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002d6e:	f001 fa79 	bl	8004264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d72:	f001 fa65 	bl	8004240 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d76:	230e      	movs	r3, #14
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	2144      	movs	r1, #68	; 0x44
 8002d7e:	5c52      	ldrb	r2, [r2, r1]
 8002d80:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d82:	e013      	b.n	8002dac <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d016      	beq.n	8002dba <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3310      	adds	r3, #16
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 fc89 	bl	80036a8 <xTaskRemoveFromEventList>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d001      	beq.n	8002d9e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002d9a:	f000 fd45 	bl	8003828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d9e:	210e      	movs	r1, #14
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dac:	230e      	movs	r3, #14
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dce5      	bgt.n	8002d84 <prvUnlockQueue+0x70>
 8002db8:	e000      	b.n	8002dbc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002dba:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2244      	movs	r2, #68	; 0x44
 8002dc0:	21ff      	movs	r1, #255	; 0xff
 8002dc2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002dc4:	f001 fa4e 	bl	8004264 <vPortExitCritical>
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dd8:	f001 fa32 	bl	8004240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e001      	b.n	8002dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dee:	f001 fa39 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e04:	f001 fa1c 	bl	8004240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d102      	bne.n	8002e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e001      	b.n	8002e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e1e:	f001 fa21 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e015      	b.n	8002e68 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <vQueueAddToRegistry+0x4c>)
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	00d2      	lsls	r2, r2, #3
 8002e42:	58d3      	ldr	r3, [r2, r3]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10c      	bne.n	8002e62 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <vQueueAddToRegistry+0x4c>)
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	00d2      	lsls	r2, r2, #3
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <vQueueAddToRegistry+0x4c>)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e60:	e006      	b.n	8002e70 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b07      	cmp	r3, #7
 8002e6c:	d9e6      	bls.n	8002e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000069c 	.word	0x2000069c

08002e7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e8c:	f001 f9d8 	bl	8004240 <vPortEnterCritical>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2244      	movs	r2, #68	; 0x44
 8002e94:	5c9b      	ldrb	r3, [r3, r2]
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	d103      	bne.n	8002ea4 <vQueueWaitForMessageRestricted+0x28>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2244      	movs	r2, #68	; 0x44
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5499      	strb	r1, [r3, r2]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2245      	movs	r2, #69	; 0x45
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	d103      	bne.n	8002eb8 <vQueueWaitForMessageRestricted+0x3c>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2245      	movs	r2, #69	; 0x45
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
 8002eb8:	f001 f9d4 	bl	8004264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3324      	adds	r3, #36	; 0x24
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 fbc5 	bl	800365c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff ff1d 	bl	8002d14 <prvUnlockQueue>
	}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b006      	add	sp, #24
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ee2:	b590      	push	{r4, r7, lr}
 8002ee4:	b08d      	sub	sp, #52	; 0x34
 8002ee6:	af04      	add	r7, sp, #16
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xTaskCreateStatic+0x18>
 8002ef6:	b672      	cpsid	i
 8002ef8:	e7fe      	b.n	8002ef8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <xTaskCreateStatic+0x22>
 8002f00:	b672      	cpsid	i
 8002f02:	e7fe      	b.n	8002f02 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f04:	235c      	movs	r3, #92	; 0x5c
 8002f06:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b5c      	cmp	r3, #92	; 0x5c
 8002f0c:	d001      	beq.n	8002f12 <xTaskCreateStatic+0x30>
 8002f0e:	b672      	cpsid	i
 8002f10:	e7fe      	b.n	8002f10 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <xTaskCreateStatic+0x78>
 8002f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01d      	beq.n	8002f5a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2259      	movs	r2, #89	; 0x59
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f30:	683c      	ldr	r4, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9303      	str	r3, [sp, #12]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	9302      	str	r3, [sp, #8]
 8002f40:	2318      	movs	r3, #24
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	0023      	movs	r3, r4
 8002f4c:	f000 f858 	bl	8003000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 f8d6 	bl	8003104 <prvAddNewTaskToReadyList>
 8002f58:	e001      	b.n	8002f5e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b009      	add	sp, #36	; 0x24
 8002f66:	bd90      	pop	{r4, r7, pc}

08002f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b08d      	sub	sp, #52	; 0x34
 8002f6c:	af04      	add	r7, sp, #16
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f001 f9f6 	bl	8004370 <pvPortMalloc>
 8002f84:	0003      	movs	r3, r0
 8002f86:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002f8e:	205c      	movs	r0, #92	; 0x5c
 8002f90:	f001 f9ee 	bl	8004370 <pvPortMalloc>
 8002f94:	0003      	movs	r3, r0
 8002f96:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa4:	e006      	b.n	8002fb4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fa87 	bl	80044bc <vPortFree>
 8002fae:	e001      	b.n	8002fb4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01a      	beq.n	8002ff0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2259      	movs	r2, #89	; 0x59
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fc2:	1dbb      	adds	r3, r7, #6
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	683c      	ldr	r4, [r7, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9303      	str	r3, [sp, #12]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9302      	str	r3, [sp, #8]
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	0023      	movs	r3, r4
 8002fde:	f000 f80f 	bl	8003000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f88d 	bl	8003104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e002      	b.n	8002ff6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	425b      	negs	r3, r3
 8002ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b009      	add	sp, #36	; 0x24
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	001a      	movs	r2, r3
 8003018:	21a5      	movs	r1, #165	; 0xa5
 800301a:	f001 fb7c 	bl	8004716 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4936      	ldr	r1, [pc, #216]	; (8003100 <prvInitialiseNewTask+0x100>)
 8003026:	468c      	mov	ip, r1
 8003028:	4463      	add	r3, ip
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	18d3      	adds	r3, r2, r3
 800302e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2207      	movs	r2, #7
 8003034:	4393      	bics	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2207      	movs	r2, #7
 800303c:	4013      	ands	r3, r2
 800303e:	d001      	beq.n	8003044 <prvInitialiseNewTask+0x44>
 8003040:	b672      	cpsid	i
 8003042:	e7fe      	b.n	8003042 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e013      	b.n	8003072 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	18d3      	adds	r3, r2, r3
 8003050:	7818      	ldrb	r0, [r3, #0]
 8003052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003054:	2134      	movs	r1, #52	; 0x34
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	18d3      	adds	r3, r2, r3
 800305a:	185b      	adds	r3, r3, r1
 800305c:	1c02      	adds	r2, r0, #0
 800305e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	18d3      	adds	r3, r2, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3301      	adds	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d9e8      	bls.n	800304a <prvInitialiseNewTask+0x4a>
 8003078:	e000      	b.n	800307c <prvInitialiseNewTask+0x7c>
		{
			break;
 800307a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2243      	movs	r2, #67	; 0x43
 8003080:	2100      	movs	r1, #0
 8003082:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b09      	cmp	r3, #9
 8003088:	d901      	bls.n	800308e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800308a:	2309      	movs	r3, #9
 800308c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	6a3a      	ldr	r2, [r7, #32]
 8003098:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	2200      	movs	r2, #0
 800309e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	3304      	adds	r3, #4
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff fa69 	bl	800257c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	3318      	adds	r3, #24
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fa64 	bl	800257c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	220a      	movs	r2, #10
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2200      	movs	r2, #0
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2258      	movs	r2, #88	; 0x58
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	0018      	movs	r0, r3
 80030e0:	f001 f816 	bl	8004110 <pxPortInitialiseStack>
 80030e4:	0002      	movs	r2, r0
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b006      	add	sp, #24
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	3fffffff 	.word	0x3fffffff

08003104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800310c:	f001 f898 	bl	8004240 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <prvAddNewTaskToReadyList+0xb8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <prvAddNewTaskToReadyList+0xb8>)
 8003118:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800311a:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <prvAddNewTaskToReadyList+0xbc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <prvAddNewTaskToReadyList+0xbc>)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <prvAddNewTaskToReadyList+0xb8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d110      	bne.n	8003152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003130:	f000 fb94 	bl	800385c <prvInitialiseTaskLists>
 8003134:	e00d      	b.n	8003152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003136:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <prvAddNewTaskToReadyList+0xc0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <prvAddNewTaskToReadyList+0xbc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	429a      	cmp	r2, r3
 800314a:	d802      	bhi.n	8003152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <prvAddNewTaskToReadyList+0xbc>)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <prvAddNewTaskToReadyList+0xc4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <prvAddNewTaskToReadyList+0xc4>)
 800315a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <prvAddNewTaskToReadyList+0xc4>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <prvAddNewTaskToReadyList+0xc8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d903      	bls.n	8003178 <prvAddNewTaskToReadyList+0x74>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <prvAddNewTaskToReadyList+0xc8>)
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	0013      	movs	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	189b      	adds	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <prvAddNewTaskToReadyList+0xcc>)
 8003186:	189a      	adds	r2, r3, r2
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	0019      	movs	r1, r3
 800318e:	0010      	movs	r0, r2
 8003190:	f7ff f9ff 	bl	8002592 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003194:	f001 f866 	bl	8004264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <prvAddNewTaskToReadyList+0xc0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <prvAddNewTaskToReadyList+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d201      	bcs.n	80031b2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031ae:	f001 f837 	bl	8004220 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000818 	.word	0x20000818
 80031c0:	200006dc 	.word	0x200006dc
 80031c4:	20000824 	.word	0x20000824
 80031c8:	20000834 	.word	0x20000834
 80031cc:	20000820 	.word	0x20000820
 80031d0:	200006e0 	.word	0x200006e0

080031d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <vTaskDelay+0x48>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <vTaskDelay+0x1e>
 80031ee:	b672      	cpsid	i
 80031f0:	e7fe      	b.n	80031f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80031f2:	f000 f869 	bl	80032c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2100      	movs	r1, #0
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 fc64 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003200:	f000 f86e 	bl	80032e0 <xTaskResumeAll>
 8003204:	0003      	movs	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800320e:	f001 f807 	bl	8004220 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	20000840 	.word	0x20000840

08003220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800322e:	003a      	movs	r2, r7
 8003230:	1d39      	adds	r1, r7, #4
 8003232:	2308      	movs	r3, #8
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff f952 	bl	80024e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800323c:	683c      	ldr	r4, [r7, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	491b      	ldr	r1, [pc, #108]	; (80032b0 <vTaskStartScheduler+0x90>)
 8003244:	481b      	ldr	r0, [pc, #108]	; (80032b4 <vTaskStartScheduler+0x94>)
 8003246:	9202      	str	r2, [sp, #8]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	0022      	movs	r2, r4
 8003252:	f7ff fe46 	bl	8002ee2 <xTaskCreateStatic>
 8003256:	0002      	movs	r2, r0
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <vTaskStartScheduler+0x98>)
 800325a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <vTaskStartScheduler+0x98>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003264:	2301      	movs	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e001      	b.n	800326e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d103      	bne.n	800327c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003274:	f000 fc7c 	bl	8003b70 <xTimerCreateTimerTask>
 8003278:	0003      	movs	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10d      	bne.n	800329e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003282:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <vTaskStartScheduler+0x9c>)
 8003286:	2201      	movs	r2, #1
 8003288:	4252      	negs	r2, r2
 800328a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <vTaskStartScheduler+0xa0>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <vTaskStartScheduler+0xa4>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003298:	f000 ff9e 	bl	80041d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800329c:	e004      	b.n	80032a8 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	d101      	bne.n	80032a8 <vTaskStartScheduler+0x88>
 80032a4:	b672      	cpsid	i
 80032a6:	e7fe      	b.n	80032a6 <vTaskStartScheduler+0x86>
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b005      	add	sp, #20
 80032ae:	bd90      	pop	{r4, r7, pc}
 80032b0:	08004754 	.word	0x08004754
 80032b4:	0800383d 	.word	0x0800383d
 80032b8:	2000083c 	.word	0x2000083c
 80032bc:	20000838 	.word	0x20000838
 80032c0:	20000824 	.word	0x20000824
 80032c4:	2000081c 	.word	0x2000081c

080032c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <vTaskSuspendAll+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	4b02      	ldr	r3, [pc, #8]	; (80032dc <vTaskSuspendAll+0x14>)
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000840 	.word	0x20000840

080032e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <xTaskResumeAll+0xf8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xTaskResumeAll+0x1a>
 80032f6:	b672      	cpsid	i
 80032f8:	e7fe      	b.n	80032f8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032fa:	f000 ffa1 	bl	8004240 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <xTaskResumeAll+0xf8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	1e5a      	subs	r2, r3, #1
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <xTaskResumeAll+0xf8>)
 8003306:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003308:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <xTaskResumeAll+0xf8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d15b      	bne.n	80033c8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <xTaskResumeAll+0xfc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d057      	beq.n	80033c8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003318:	e02f      	b.n	800337a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <xTaskResumeAll+0x100>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3318      	adds	r3, #24
 8003326:	0018      	movs	r0, r3
 8003328:	f7ff f98b 	bl	8002642 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3304      	adds	r3, #4
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff f986 	bl	8002642 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <xTaskResumeAll+0x104>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d903      	bls.n	800334a <xTaskResumeAll+0x6a>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <xTaskResumeAll+0x104>)
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	0013      	movs	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	189b      	adds	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <xTaskResumeAll+0x108>)
 8003358:	189a      	adds	r2, r3, r2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3304      	adds	r3, #4
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7ff f916 	bl	8002592 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <xTaskResumeAll+0x10c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	429a      	cmp	r2, r3
 8003372:	d302      	bcc.n	800337a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <xTaskResumeAll+0x110>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <xTaskResumeAll+0x100>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1cb      	bne.n	800331a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003388:	f000 fb02 	bl	8003990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <xTaskResumeAll+0x114>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00f      	beq.n	80033b8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003398:	f000 f83c 	bl	8003414 <xTaskIncrementTick>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d002      	beq.n	80033a6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <xTaskResumeAll+0x110>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f2      	bne.n	8003398 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <xTaskResumeAll+0x114>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <xTaskResumeAll+0x110>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033c4:	f000 ff2c 	bl	8004220 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033c8:	f000 ff4c 	bl	8004264 <vPortExitCritical>

	return xAlreadyYielded;
 80033cc:	68bb      	ldr	r3, [r7, #8]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	20000840 	.word	0x20000840
 80033dc:	20000818 	.word	0x20000818
 80033e0:	200007d8 	.word	0x200007d8
 80033e4:	20000820 	.word	0x20000820
 80033e8:	200006e0 	.word	0x200006e0
 80033ec:	200006dc 	.word	0x200006dc
 80033f0:	2000082c 	.word	0x2000082c
 80033f4:	20000828 	.word	0x20000828

080033f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <xTaskGetTickCount+0x18>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	2000081c 	.word	0x2000081c

08003414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <xTaskIncrementTick+0x13c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d000      	beq.n	8003428 <xTaskIncrementTick+0x14>
 8003426:	e083      	b.n	8003530 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003428:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <xTaskIncrementTick+0x140>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003430:	4b48      	ldr	r3, [pc, #288]	; (8003554 <xTaskIncrementTick+0x140>)
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d117      	bne.n	800346c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800343c:	4b46      	ldr	r3, [pc, #280]	; (8003558 <xTaskIncrementTick+0x144>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <xTaskIncrementTick+0x36>
 8003446:	b672      	cpsid	i
 8003448:	e7fe      	b.n	8003448 <xTaskIncrementTick+0x34>
 800344a:	4b43      	ldr	r3, [pc, #268]	; (8003558 <xTaskIncrementTick+0x144>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	4b42      	ldr	r3, [pc, #264]	; (800355c <xTaskIncrementTick+0x148>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b40      	ldr	r3, [pc, #256]	; (8003558 <xTaskIncrementTick+0x144>)
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <xTaskIncrementTick+0x148>)
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	4b40      	ldr	r3, [pc, #256]	; (8003560 <xTaskIncrementTick+0x14c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <xTaskIncrementTick+0x14c>)
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f000 fa92 	bl	8003990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800346c:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <xTaskIncrementTick+0x150>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	429a      	cmp	r2, r3
 8003474:	d34e      	bcc.n	8003514 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <xTaskIncrementTick+0x144>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <xTaskIncrementTick+0x70>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <xTaskIncrementTick+0x72>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348a:	4b36      	ldr	r3, [pc, #216]	; (8003564 <xTaskIncrementTick+0x150>)
 800348c:	2201      	movs	r2, #1
 800348e:	4252      	negs	r2, r2
 8003490:	601a      	str	r2, [r3, #0]
					break;
 8003492:	e03f      	b.n	8003514 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <xTaskIncrementTick+0x144>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d203      	bcs.n	80034b4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <xTaskIncrementTick+0x150>)
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
						break;
 80034b2:	e02f      	b.n	8003514 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3304      	adds	r3, #4
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff f8c2 	bl	8002642 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3318      	adds	r3, #24
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff f8b9 	bl	8002642 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <xTaskIncrementTick+0x154>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d903      	bls.n	80034e4 <xTaskIncrementTick+0xd0>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <xTaskIncrementTick+0x154>)
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	0013      	movs	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4a1e      	ldr	r2, [pc, #120]	; (800356c <xTaskIncrementTick+0x158>)
 80034f2:	189a      	adds	r2, r3, r2
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	3304      	adds	r3, #4
 80034f8:	0019      	movs	r1, r3
 80034fa:	0010      	movs	r0, r2
 80034fc:	f7ff f849 	bl	8002592 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <xTaskIncrementTick+0x15c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	429a      	cmp	r2, r3
 800350c:	d3b3      	bcc.n	8003476 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800350e:	2301      	movs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003512:	e7b0      	b.n	8003476 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <xTaskIncrementTick+0x15c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4914      	ldr	r1, [pc, #80]	; (800356c <xTaskIncrementTick+0x158>)
 800351c:	0013      	movs	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	189b      	adds	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	585b      	ldr	r3, [r3, r1]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d907      	bls.n	800353a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e004      	b.n	800353a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003530:	4b10      	ldr	r3, [pc, #64]	; (8003574 <xTaskIncrementTick+0x160>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <xTaskIncrementTick+0x160>)
 8003538:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <xTaskIncrementTick+0x164>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003546:	697b      	ldr	r3, [r7, #20]
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b006      	add	sp, #24
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000840 	.word	0x20000840
 8003554:	2000081c 	.word	0x2000081c
 8003558:	200007d0 	.word	0x200007d0
 800355c:	200007d4 	.word	0x200007d4
 8003560:	20000830 	.word	0x20000830
 8003564:	20000838 	.word	0x20000838
 8003568:	20000820 	.word	0x20000820
 800356c:	200006e0 	.word	0x200006e0
 8003570:	200006dc 	.word	0x200006dc
 8003574:	20000828 	.word	0x20000828
 8003578:	2000082c 	.word	0x2000082c

0800357c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <vTaskSwitchContext+0x90>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <vTaskSwitchContext+0x94>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003590:	e037      	b.n	8003602 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003592:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <vTaskSwitchContext+0x94>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <vTaskSwitchContext+0x98>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	e007      	b.n	80035b0 <vTaskSwitchContext+0x34>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <vTaskSwitchContext+0x2e>
 80035a6:	b672      	cpsid	i
 80035a8:	e7fe      	b.n	80035a8 <vTaskSwitchContext+0x2c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	4919      	ldr	r1, [pc, #100]	; (8003618 <vTaskSwitchContext+0x9c>)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	0013      	movs	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	189b      	adds	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	585b      	ldr	r3, [r3, r1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ee      	beq.n	80035a0 <vTaskSwitchContext+0x24>
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	0013      	movs	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	189b      	adds	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <vTaskSwitchContext+0x9c>)
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d104      	bne.n	80035f2 <vTaskSwitchContext+0x76>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	4b08      	ldr	r3, [pc, #32]	; (800361c <vTaskSwitchContext+0xa0>)
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <vTaskSwitchContext+0x98>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	20000840 	.word	0x20000840
 8003610:	2000082c 	.word	0x2000082c
 8003614:	20000820 	.word	0x20000820
 8003618:	200006e0 	.word	0x200006e0
 800361c:	200006dc 	.word	0x200006dc

08003620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <vTaskPlaceOnEventList+0x14>
 8003630:	b672      	cpsid	i
 8003632:	e7fe      	b.n	8003632 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <vTaskPlaceOnEventList+0x38>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3318      	adds	r3, #24
 800363a:	001a      	movs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0011      	movs	r1, r2
 8003640:	0018      	movs	r0, r3
 8003642:	f7fe ffc8 	bl	80025d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	0018      	movs	r0, r3
 800364c:	f000 fa3c 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200006dc 	.word	0x200006dc

0800365c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <vTaskPlaceOnEventListRestricted+0x16>
 800366e:	b672      	cpsid	i
 8003670:	e7fe      	b.n	8003670 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <vTaskPlaceOnEventListRestricted+0x48>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3318      	adds	r3, #24
 8003678:	001a      	movs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	0011      	movs	r1, r2
 800367e:	0018      	movs	r0, r3
 8003680:	f7fe ff87 	bl	8002592 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800368a:	2301      	movs	r3, #1
 800368c:	425b      	negs	r3, r3
 800368e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0011      	movs	r1, r2
 8003696:	0018      	movs	r0, r3
 8003698:	f000 fa16 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
	}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b004      	add	sp, #16
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200006dc 	.word	0x200006dc

080036a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <xTaskRemoveFromEventList+0x1a>
 80036be:	b672      	cpsid	i
 80036c0:	e7fe      	b.n	80036c0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3318      	adds	r3, #24
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7fe ffbb 	bl	8002642 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <xTaskRemoveFromEventList+0xa0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3304      	adds	r3, #4
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fe ffb2 	bl	8002642 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <xTaskRemoveFromEventList+0xa4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d903      	bls.n	80036f2 <xTaskRemoveFromEventList+0x4a>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <xTaskRemoveFromEventList+0xa4>)
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	0013      	movs	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <xTaskRemoveFromEventList+0xa8>)
 8003700:	189a      	adds	r2, r3, r2
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3304      	adds	r3, #4
 8003706:	0019      	movs	r1, r3
 8003708:	0010      	movs	r0, r2
 800370a:	f7fe ff42 	bl	8002592 <vListInsertEnd>
 800370e:	e007      	b.n	8003720 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3318      	adds	r3, #24
 8003714:	001a      	movs	r2, r3
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <xTaskRemoveFromEventList+0xac>)
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f7fe ff39 	bl	8002592 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <xTaskRemoveFromEventList+0xb0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d905      	bls.n	800373a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <xTaskRemoveFromEventList+0xb4>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e001      	b.n	800373e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800373e:	68fb      	ldr	r3, [r7, #12]
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b004      	add	sp, #16
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000840 	.word	0x20000840
 800374c:	20000820 	.word	0x20000820
 8003750:	200006e0 	.word	0x200006e0
 8003754:	200007d8 	.word	0x200007d8
 8003758:	200006dc 	.word	0x200006dc
 800375c:	2000082c 	.word	0x2000082c

08003760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <vTaskInternalSetTimeOutState+0x20>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <vTaskInternalSetTimeOutState+0x24>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	605a      	str	r2, [r3, #4]
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000830 	.word	0x20000830
 8003784:	2000081c 	.word	0x2000081c

08003788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <xTaskCheckForTimeOut+0x14>
 8003798:	b672      	cpsid	i
 800379a:	e7fe      	b.n	800379a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <xTaskCheckForTimeOut+0x1e>
 80037a2:	b672      	cpsid	i
 80037a4:	e7fe      	b.n	80037a4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80037a6:	f000 fd4b 	bl	8004240 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <xTaskCheckForTimeOut+0x98>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	d102      	bne.n	80037c8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e024      	b.n	8003812 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <xTaskCheckForTimeOut+0x9c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d007      	beq.n	80037e4 <xTaskCheckForTimeOut+0x5c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e016      	b.n	8003812 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d20c      	bcs.n	8003808 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff ffaf 	bl	8003760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e004      	b.n	8003812 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800380e:	2301      	movs	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003812:	f000 fd27 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b006      	add	sp, #24
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000081c 	.word	0x2000081c
 8003824:	20000830 	.word	0x20000830

08003828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800382c:	4b02      	ldr	r3, [pc, #8]	; (8003838 <vTaskMissedYield+0x10>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	2000082c 	.word	0x2000082c

0800383c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003844:	f000 f84e 	bl	80038e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <prvIdleTask+0x1c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d9f9      	bls.n	8003844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003850:	f000 fce6 	bl	8004220 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003854:	e7f6      	b.n	8003844 <prvIdleTask+0x8>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	200006e0 	.word	0x200006e0

0800385c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	e00c      	b.n	8003882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	0013      	movs	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	189b      	adds	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <prvInitialiseTaskLists+0x68>)
 8003874:	189b      	adds	r3, r3, r2
 8003876:	0018      	movs	r0, r3
 8003878:	f7fe fe62 	bl	8002540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3301      	adds	r3, #1
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b09      	cmp	r3, #9
 8003886:	d9ef      	bls.n	8003868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <prvInitialiseTaskLists+0x6c>)
 800388a:	0018      	movs	r0, r3
 800388c:	f7fe fe58 	bl	8002540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <prvInitialiseTaskLists+0x70>)
 8003892:	0018      	movs	r0, r3
 8003894:	f7fe fe54 	bl	8002540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <prvInitialiseTaskLists+0x74>)
 800389a:	0018      	movs	r0, r3
 800389c:	f7fe fe50 	bl	8002540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <prvInitialiseTaskLists+0x78>)
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fe fe4c 	bl	8002540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <prvInitialiseTaskLists+0x7c>)
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7fe fe48 	bl	8002540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <prvInitialiseTaskLists+0x80>)
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <prvInitialiseTaskLists+0x6c>)
 80038b4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <prvInitialiseTaskLists+0x84>)
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <prvInitialiseTaskLists+0x70>)
 80038ba:	601a      	str	r2, [r3, #0]
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	200006e0 	.word	0x200006e0
 80038c8:	200007a8 	.word	0x200007a8
 80038cc:	200007bc 	.word	0x200007bc
 80038d0:	200007d8 	.word	0x200007d8
 80038d4:	200007ec 	.word	0x200007ec
 80038d8:	20000804 	.word	0x20000804
 80038dc:	200007d0 	.word	0x200007d0
 80038e0:	200007d4 	.word	0x200007d4

080038e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ea:	e01a      	b.n	8003922 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80038ec:	f000 fca8 	bl	8004240 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <prvCheckTasksWaitingTermination+0x50>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7fe fea0 	bl	8002642 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <prvCheckTasksWaitingTermination+0x54>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1e5a      	subs	r2, r3, #1
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <prvCheckTasksWaitingTermination+0x54>)
 800390a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 8003914:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003916:	f000 fca5 	bl	8004264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f000 f80f 	bl	8003940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e0      	bne.n	80038ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200007ec 	.word	0x200007ec
 8003938:	20000818 	.word	0x20000818
 800393c:	20000800 	.word	0x20000800

08003940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2259      	movs	r2, #89	; 0x59
 800394c:	5c9b      	ldrb	r3, [r3, r2]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	0018      	movs	r0, r3
 8003958:	f000 fdb0 	bl	80044bc <vPortFree>
				vPortFree( pxTCB );
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 fdac 	bl	80044bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003964:	e010      	b.n	8003988 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2259      	movs	r2, #89	; 0x59
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f000 fda2 	bl	80044bc <vPortFree>
	}
 8003978:	e006      	b.n	8003988 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2259      	movs	r2, #89	; 0x59
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d001      	beq.n	8003988 <prvDeleteTCB+0x48>
 8003984:	b672      	cpsid	i
 8003986:	e7fe      	b.n	8003986 <prvDeleteTCB+0x46>
	}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <prvResetNextTaskUnblockTime+0x40>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <prvResetNextTaskUnblockTime+0x14>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <prvResetNextTaskUnblockTime+0x16>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <prvResetNextTaskUnblockTime+0x44>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	4252      	negs	r2, r2
 80039b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039b2:	e008      	b.n	80039c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <prvResetNextTaskUnblockTime+0x40>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <prvResetNextTaskUnblockTime+0x44>)
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	200007d0 	.word	0x200007d0
 80039d4:	20000838 	.word	0x20000838

080039d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <xTaskGetSchedulerState+0x30>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039e6:	2301      	movs	r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	e008      	b.n	80039fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <xTaskGetSchedulerState+0x34>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039f4:	2302      	movs	r3, #2
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	e001      	b.n	80039fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039fe:	687b      	ldr	r3, [r7, #4]
	}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000824 	.word	0x20000824
 8003a0c:	20000840 	.word	0x20000840

08003a10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d044      	beq.n	8003ab0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <xTaskPriorityDisinherit+0xac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <xTaskPriorityDisinherit+0x24>
 8003a30:	b672      	cpsid	i
 8003a32:	e7fe      	b.n	8003a32 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <xTaskPriorityDisinherit+0x30>
 8003a3c:	b672      	cpsid	i
 8003a3e:	e7fe      	b.n	8003a3e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d02c      	beq.n	8003ab0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d128      	bne.n	8003ab0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3304      	adds	r3, #4
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fe fded 	bl	8002642 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	220a      	movs	r2, #10
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <xTaskPriorityDisinherit+0xb0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <xTaskPriorityDisinherit+0x80>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <xTaskPriorityDisinherit+0xb0>)
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	0013      	movs	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <xTaskPriorityDisinherit+0xb4>)
 8003a9e:	189a      	adds	r2, r3, r2
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	0010      	movs	r0, r2
 8003aa8:	f7fe fd73 	bl	8002592 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
	}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b004      	add	sp, #16
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	200006dc 	.word	0x200006dc
 8003ac0:	20000820 	.word	0x20000820
 8003ac4:	200006e0 	.word	0x200006e0

08003ac8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ad2:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7fe fdaf 	bl	8002642 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	d10b      	bne.n	8003b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8003af8:	0011      	movs	r1, r2
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fe fd49 	bl	8002592 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b00:	e026      	b.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d209      	bcs.n	8003b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3304      	adds	r3, #4
 8003b24:	0019      	movs	r1, r3
 8003b26:	0010      	movs	r0, r2
 8003b28:	f7fe fd55 	bl	80025d6 <vListInsert>
}
 8003b2c:	e010      	b.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	0019      	movs	r1, r3
 8003b3a:	0010      	movs	r0, r2
 8003b3c:	f7fe fd4b 	bl	80025d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d202      	bcs.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b004      	add	sp, #16
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000081c 	.word	0x2000081c
 8003b5c:	200006dc 	.word	0x200006dc
 8003b60:	20000804 	.word	0x20000804
 8003b64:	200007d4 	.word	0x200007d4
 8003b68:	200007d0 	.word	0x200007d0
 8003b6c:	20000838 	.word	0x20000838

08003b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b7a:	f000 fa87 	bl	800408c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <xTimerCreateTimerTask+0x6c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b8e:	003a      	movs	r2, r7
 8003b90:	1d39      	adds	r1, r7, #4
 8003b92:	2308      	movs	r3, #8
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fe fcba 	bl	8002510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b9c:	683c      	ldr	r4, [r7, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	490f      	ldr	r1, [pc, #60]	; (8003be0 <xTimerCreateTimerTask+0x70>)
 8003ba4:	480f      	ldr	r0, [pc, #60]	; (8003be4 <xTimerCreateTimerTask+0x74>)
 8003ba6:	9202      	str	r2, [sp, #8]
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2302      	movs	r3, #2
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	0022      	movs	r2, r4
 8003bb2:	f7ff f996 	bl	8002ee2 <xTaskCreateStatic>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <xTimerCreateTimerTask+0x78>)
 8003bba:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <xTimerCreateTimerTask+0x78>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <xTimerCreateTimerTask+0x62>
 8003bce:	b672      	cpsid	i
 8003bd0:	e7fe      	b.n	8003bd0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b005      	add	sp, #20
 8003bda:	bd90      	pop	{r4, r7, pc}
 8003bdc:	20000874 	.word	0x20000874
 8003be0:	0800475c 	.word	0x0800475c
 8003be4:	08003cf1 	.word	0x08003cf1
 8003be8:	20000878 	.word	0x20000878

08003bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b08b      	sub	sp, #44	; 0x2c
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <xTimerGenericCommand+0x1c>
 8003c04:	b672      	cpsid	i
 8003c06:	e7fe      	b.n	8003c06 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <xTimerGenericCommand+0x90>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d030      	beq.n	8003c72 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c10:	2414      	movs	r4, #20
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	dc19      	bgt.n	8003c5e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c2a:	f7ff fed5 	bl	80039d8 <xTaskGetSchedulerState>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d109      	bne.n	8003c48 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <xTimerGenericCommand+0x90>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c3a:	1939      	adds	r1, r7, r4
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f7fe fdee 	bl	800281e <xQueueGenericSend>
 8003c42:	0003      	movs	r3, r0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e014      	b.n	8003c72 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <xTimerGenericCommand+0x90>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	2314      	movs	r3, #20
 8003c4e:	18f9      	adds	r1, r7, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	2200      	movs	r2, #0
 8003c54:	f7fe fde3 	bl	800281e <xQueueGenericSend>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5c:	e009      	b.n	8003c72 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <xTimerGenericCommand+0x90>)
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	2314      	movs	r3, #20
 8003c66:	18f9      	adds	r1, r7, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f7fe fe9c 	bl	80029a6 <xQueueGenericSendFromISR>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b00b      	add	sp, #44	; 0x2c
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	20000874 	.word	0x20000874

08003c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <prvProcessExpiredTimer+0x6c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3304      	adds	r3, #4
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7fe fcd2 	bl	8002642 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d119      	bne.n	8003cda <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	18d1      	adds	r1, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f8b6 	bl	8003e24 <prvInsertTimerInActiveList>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d00e      	beq.n	8003cda <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f7ff ff90 	bl	8003bec <xTimerGenericCommand>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <prvProcessExpiredTimer+0x5a>
 8003cd6:	b672      	cpsid	i
 8003cd8:	e7fe      	b.n	8003cd8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	0010      	movs	r0, r2
 8003ce2:	4798      	blx	r3
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b004      	add	sp, #16
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2000086c 	.word	0x2000086c

08003cf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f851 	bl	8003da4 <prvGetNextExpireTime>
 8003d02:	0003      	movs	r3, r0
 8003d04:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 f803 	bl	8003d18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d12:	f000 f8c9 	bl	8003ea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d16:	e7ef      	b.n	8003cf8 <prvTimerTask+0x8>

08003d18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d22:	f7ff fad1 	bl	80032c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d26:	2308      	movs	r3, #8
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 f85a 	bl	8003de4 <prvSampleTimeNow>
 8003d30:	0003      	movs	r3, r0
 8003d32:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d129      	bne.n	8003d8e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10c      	bne.n	8003d5a <prvProcessTimerOrBlockTask+0x42>
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d808      	bhi.n	8003d5a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8003d48:	f7ff faca 	bl	80032e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7ff ff94 	bl	8003c80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d58:	e01b      	b.n	8003d92 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <prvProcessTimerOrBlockTask+0x84>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	425a      	negs	r2, r3
 8003d68:	4153      	adcs	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <prvProcessTimerOrBlockTask+0x88>)
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	f7ff f87e 	bl	8002e7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d80:	f7ff faae 	bl	80032e0 <xTaskResumeAll>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d104      	bne.n	8003d92 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8003d88:	f000 fa4a 	bl	8004220 <vPortYield>
}
 8003d8c:	e001      	b.n	8003d92 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8003d8e:	f7ff faa7 	bl	80032e0 <xTaskResumeAll>
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	20000870 	.word	0x20000870
 8003da0:	20000874 	.word	0x20000874

08003da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <prvGetNextExpireTime+0x3c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	425a      	negs	r2, r3
 8003db4:	4153      	adcs	r3, r2
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	001a      	movs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <prvGetNextExpireTime+0x3c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e001      	b.n	8003dd6 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b004      	add	sp, #16
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	2000086c 	.word	0x2000086c

08003de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dec:	f7ff fb04 	bl	80033f8 <xTaskGetTickCount>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvSampleTimeNow+0x3c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d205      	bcs.n	8003e0a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8003dfe:	f000 f8eb 	bl	8003fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e002      	b.n	8003e10 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <prvSampleTimeNow+0x3c>)
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2000087c 	.word	0x2000087c

08003e24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d812      	bhi.n	8003e70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e01b      	b.n	8003e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <prvInsertTimerInActiveList+0x7c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
 8003e66:	0019      	movs	r1, r3
 8003e68:	0010      	movs	r0, r2
 8003e6a:	f7fe fbb4 	bl	80025d6 <vListInsert>
 8003e6e:	e012      	b.n	8003e96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d206      	bcs.n	8003e86 <prvInsertTimerInActiveList+0x62>
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e007      	b.n	8003e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <prvInsertTimerInActiveList+0x80>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f7fe fba0 	bl	80025d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b006      	add	sp, #24
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000870 	.word	0x20000870
 8003ea4:	2000086c 	.word	0x2000086c

08003ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b08d      	sub	sp, #52	; 0x34
 8003eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eae:	e07f      	b.n	8003fb0 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	18bb      	adds	r3, r7, r2
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0f      	bge.n	8003eda <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003eba:	18bb      	adds	r3, r7, r2
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <prvProcessReceivedCommands+0x22>
 8003ec6:	b672      	cpsid	i
 8003ec8:	e7fe      	b.n	8003ec8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	6858      	ldr	r0, [r3, #4]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003eda:	2208      	movs	r2, #8
 8003edc:	18bb      	adds	r3, r7, r2
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	db64      	blt.n	8003fae <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ee4:	18bb      	adds	r3, r7, r2
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7fe fba3 	bl	8002642 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff ff70 	bl	8003de4 <prvSampleTimeNow>
 8003f04:	0003      	movs	r3, r0
 8003f06:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8003f08:	2308      	movs	r3, #8
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	d84e      	bhi.n	8003fb0 <prvProcessReceivedCommands+0x108>
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <prvProcessReceivedCommands+0x128>)
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f1c:	2408      	movs	r4, #8
 8003f1e:	193b      	adds	r3, r7, r4
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	18d1      	adds	r1, r2, r3
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	6a38      	ldr	r0, [r7, #32]
 8003f30:	f7ff ff78 	bl	8003e24 <prvInsertTimerInActiveList>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d03b      	beq.n	8003fb0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	0010      	movs	r0, r2
 8003f40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d132      	bne.n	8003fb0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	18d2      	adds	r2, r2, r3
 8003f54:	6a38      	ldr	r0, [r7, #32]
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f7ff fe45 	bl	8003bec <xTimerGenericCommand>
 8003f62:	0003      	movs	r3, r0
 8003f64:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d121      	bne.n	8003fb0 <prvProcessReceivedCommands+0x108>
 8003f6c:	b672      	cpsid	i
 8003f6e:	e7fe      	b.n	8003f6e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f70:	2308      	movs	r3, #8
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <prvProcessReceivedCommands+0xde>
 8003f82:	b672      	cpsid	i
 8003f84:	e7fe      	b.n	8003f84 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	18d1      	adds	r1, r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	6a38      	ldr	r0, [r7, #32]
 8003f94:	f7ff ff46 	bl	8003e24 <prvInsertTimerInActiveList>
					break;
 8003f98:	e00a      	b.n	8003fb0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	222c      	movs	r2, #44	; 0x2c
 8003f9e:	5c9b      	ldrb	r3, [r3, r2]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 fa88 	bl	80044bc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fac:	e000      	b.n	8003fb0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003fae:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <prvProcessReceivedCommands+0x12c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	18b9      	adds	r1, r7, r2
 8003fb8:	2200      	movs	r2, #0
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f7fe fd64 	bl	8002a88 <xQueueReceive>
 8003fc0:	1e03      	subs	r3, r0, #0
 8003fc2:	d000      	beq.n	8003fc6 <prvProcessReceivedCommands+0x11e>
 8003fc4:	e774      	b.n	8003eb0 <prvProcessReceivedCommands+0x8>
	}
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b00b      	add	sp, #44	; 0x2c
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	080047c0 	.word	0x080047c0
 8003fd4:	20000874 	.word	0x20000874

08003fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fde:	e03e      	b.n	800405e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe0:	4b28      	ldr	r3, [pc, #160]	; (8004084 <prvSwitchTimerLists+0xac>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <prvSwitchTimerLists+0xac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fe fb22 	bl	8002642 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	0010      	movs	r0, r2
 8004006:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d126      	bne.n	800405e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	18d3      	adds	r3, r2, r3
 8004018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90e      	bls.n	8004040 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <prvSwitchTimerLists+0xac>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f7fe facc 	bl	80025d6 <vListInsert>
 800403e:	e00e      	b.n	800405e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	2100      	movs	r1, #0
 800404c:	f7ff fdce 	bl	8003bec <xTimerGenericCommand>
 8004050:	0003      	movs	r3, r0
 8004052:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <prvSwitchTimerLists+0x86>
 800405a:	b672      	cpsid	i
 800405c:	e7fe      	b.n	800405c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <prvSwitchTimerLists+0xac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1bb      	bne.n	8003fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <prvSwitchTimerLists+0xac>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <prvSwitchTimerLists+0xb0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <prvSwitchTimerLists+0xac>)
 8004074:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <prvSwitchTimerLists+0xb0>)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	601a      	str	r2, [r3, #0]
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b006      	add	sp, #24
 8004082:	bd80      	pop	{r7, pc}
 8004084:	2000086c 	.word	0x2000086c
 8004088:	20000870 	.word	0x20000870

0800408c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004092:	f000 f8d5 	bl	8004240 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d123      	bne.n	80040e6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <prvCheckForValidListAndQueue+0x68>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fe fa4d 	bl	8002540 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <prvCheckForValidListAndQueue+0x6c>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7fe fa49 	bl	8002540 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <prvCheckForValidListAndQueue+0x70>)
 80040b0:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <prvCheckForValidListAndQueue+0x68>)
 80040b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <prvCheckForValidListAndQueue+0x74>)
 80040b6:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <prvCheckForValidListAndQueue+0x6c>)
 80040b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <prvCheckForValidListAndQueue+0x78>)
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <prvCheckForValidListAndQueue+0x7c>)
 80040be:	2100      	movs	r1, #0
 80040c0:	9100      	str	r1, [sp, #0]
 80040c2:	2110      	movs	r1, #16
 80040c4:	200a      	movs	r0, #10
 80040c6:	f7fe fb38 	bl	800273a <xQueueGenericCreateStatic>
 80040ca:	0002      	movs	r2, r0
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 80040ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0b      	ldr	r2, [pc, #44]	; (800410c <prvCheckForValidListAndQueue+0x80>)
 80040de:	0011      	movs	r1, r2
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fe fea3 	bl	8002e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e6:	f000 f8bd 	bl	8004264 <vPortExitCritical>
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000874 	.word	0x20000874
 80040f4:	20000844 	.word	0x20000844
 80040f8:	20000858 	.word	0x20000858
 80040fc:	2000086c 	.word	0x2000086c
 8004100:	20000870 	.word	0x20000870
 8004104:	20000920 	.word	0x20000920
 8004108:	20000880 	.word	0x20000880
 800410c:	08004764 	.word	0x08004764

08004110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3b04      	subs	r3, #4
 8004120:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	0452      	lsls	r2, r2, #17
 8004128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b04      	subs	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b04      	subs	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <pxPortInitialiseStack+0x50>)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b14      	subs	r3, #20
 8004146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b20      	subs	r3, #32
 8004152:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b004      	add	sp, #16
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	08004165 	.word	0x08004165

08004164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <prvTaskExitError+0x2c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	d001      	beq.n	800417a <prvTaskExitError+0x16>
 8004176:	b672      	cpsid	i
 8004178:	e7fe      	b.n	8004178 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800417a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0fc      	beq.n	800417e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b002      	add	sp, #8
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	2000000c 	.word	0x2000000c

08004194 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <pxCurrentTCBConst2>)
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	3020      	adds	r0, #32
 80041a8:	f380 8809 	msr	PSP, r0
 80041ac:	2002      	movs	r0, #2
 80041ae:	f380 8814 	msr	CONTROL, r0
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80041b8:	46ae      	mov	lr, r5
 80041ba:	bc08      	pop	{r3}
 80041bc:	bc04      	pop	{r2}
 80041be:	b662      	cpsie	i
 80041c0:	4718      	bx	r3
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46c0      	nop			; (mov r8, r8)

080041d0 <pxCurrentTCBConst2>:
 80041d0:	200006dc 	.word	0x200006dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46c0      	nop			; (mov r8, r8)

080041d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <xPortStartScheduler+0x40>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <xPortStartScheduler+0x40>)
 80041e2:	21ff      	movs	r1, #255	; 0xff
 80041e4:	0409      	lsls	r1, r1, #16
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <xPortStartScheduler+0x40>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <xPortStartScheduler+0x40>)
 80041f0:	21ff      	movs	r1, #255	; 0xff
 80041f2:	0609      	lsls	r1, r1, #24
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80041f8:	f000 f898 	bl	800432c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <xPortStartScheduler+0x44>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004202:	f7ff ffcd 	bl	80041a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004206:	f7ff f9b9 	bl	800357c <vTaskSwitchContext>
	prvTaskExitError();
 800420a:	f7ff ffab 	bl	8004164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800420e:	2300      	movs	r3, #0
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	e000ed20 	.word	0xe000ed20
 800421c:	2000000c 	.word	0x2000000c

08004220 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <vPortYield+0x1c>)
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	0552      	lsls	r2, r2, #21
 800422a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800422c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004230:	f3bf 8f6f 	isb	sy
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	e000ed04 	.word	0xe000ed04

08004240 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004244:	b672      	cpsid	i
    uxCriticalNesting++;
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <vPortEnterCritical+0x20>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <vPortEnterCritical+0x20>)
 800424e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004250:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004254:	f3bf 8f6f 	isb	sy
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	2000000c 	.word	0x2000000c

08004264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <vPortExitCritical+0x2c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <vPortExitCritical+0x10>
 8004270:	b672      	cpsid	i
 8004272:	e7fe      	b.n	8004272 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <vPortExitCritical+0x2c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <vPortExitCritical+0x2c>)
 800427c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800427e:	4b04      	ldr	r3, [pc, #16]	; (8004290 <vPortExitCritical+0x2c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d100      	bne.n	8004288 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004286:	b662      	cpsie	i
    }
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	2000000c 	.word	0x2000000c

08004294 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004294:	f3ef 8010 	mrs	r0, PRIMASK
 8004298:	b672      	cpsid	i
 800429a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	0018      	movs	r0, r3

080042a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80042a0:	f380 8810 	msr	PRIMASK, r0
 80042a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80042a6:	46c0      	nop			; (mov r8, r8)
	...

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <pxCurrentTCBConst>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	3820      	subs	r0, #32
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80042be:	4644      	mov	r4, r8
 80042c0:	464d      	mov	r5, r9
 80042c2:	4656      	mov	r6, sl
 80042c4:	465f      	mov	r7, fp
 80042c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80042c8:	b508      	push	{r3, lr}
 80042ca:	b672      	cpsid	i
 80042cc:	f7ff f956 	bl	800357c <vTaskSwitchContext>
 80042d0:	b662      	cpsie	i
 80042d2:	bc0c      	pop	{r2, r3}
 80042d4:	6811      	ldr	r1, [r2, #0]
 80042d6:	6808      	ldr	r0, [r1, #0]
 80042d8:	3010      	adds	r0, #16
 80042da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80042dc:	46a0      	mov	r8, r4
 80042de:	46a9      	mov	r9, r5
 80042e0:	46b2      	mov	sl, r6
 80042e2:	46bb      	mov	fp, r7
 80042e4:	f380 8809 	msr	PSP, r0
 80042e8:	3820      	subs	r0, #32
 80042ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80042ec:	4718      	bx	r3
 80042ee:	46c0      	nop			; (mov r8, r8)

080042f0 <pxCurrentTCBConst>:
 80042f0:	200006dc 	.word	0x200006dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46c0      	nop			; (mov r8, r8)

080042f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80042fe:	f7ff ffc9 	bl	8004294 <ulSetInterruptMaskFromISR>
 8004302:	0003      	movs	r3, r0
 8004304:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004306:	f7ff f885 	bl	8003414 <xTaskIncrementTick>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d003      	beq.n	8004316 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <xPortSysTickHandler+0x30>)
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	0552      	lsls	r2, r2, #21
 8004314:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff ffc1 	bl	80042a0 <vClearInterruptMaskFromISR>
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b002      	add	sp, #8
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <prvSetupTimerInterrupt+0x34>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <prvSetupTimerInterrupt+0x38>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvSetupTimerInterrupt+0x3c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	22fa      	movs	r2, #250	; 0xfa
 8004342:	0091      	lsls	r1, r2, #2
 8004344:	0018      	movs	r0, r3
 8004346:	f7fb fedf 	bl	8000108 <__udivsi3>
 800434a:	0003      	movs	r3, r0
 800434c:	001a      	movs	r2, r3
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <prvSetupTimerInterrupt+0x40>)
 8004350:	3a01      	subs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004354:	4b02      	ldr	r3, [pc, #8]	; (8004360 <prvSetupTimerInterrupt+0x34>)
 8004356:	2207      	movs	r2, #7
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	e000e010 	.word	0xe000e010
 8004364:	e000e018 	.word	0xe000e018
 8004368:	20000000 	.word	0x20000000
 800436c:	e000e014 	.word	0xe000e014

08004370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800437c:	f7fe ffa4 	bl	80032c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004380:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <pvPortMalloc+0x138>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004388:	f000 f8e0 	bl	800454c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800438c:	4b47      	ldr	r3, [pc, #284]	; (80044ac <pvPortMalloc+0x13c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4013      	ands	r3, r2
 8004394:	d000      	beq.n	8004398 <pvPortMalloc+0x28>
 8004396:	e079      	b.n	800448c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800439e:	2208      	movs	r2, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2207      	movs	r2, #7
 80043aa:	4013      	ands	r3, r2
 80043ac:	d00a      	beq.n	80043c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2207      	movs	r2, #7
 80043b2:	4393      	bics	r3, r2
 80043b4:	3308      	adds	r3, #8
 80043b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2207      	movs	r2, #7
 80043bc:	4013      	ands	r3, r2
 80043be:	d001      	beq.n	80043c4 <pvPortMalloc+0x54>
 80043c0:	b672      	cpsid	i
 80043c2:	e7fe      	b.n	80043c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d060      	beq.n	800448c <pvPortMalloc+0x11c>
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <pvPortMalloc+0x140>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d85b      	bhi.n	800448c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <pvPortMalloc+0x144>)
 80043d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80043d8:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <pvPortMalloc+0x144>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043de:	e004      	b.n	80043ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d903      	bls.n	80043fc <pvPortMalloc+0x8c>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f1      	bne.n	80043e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <pvPortMalloc+0x138>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	429a      	cmp	r2, r3
 8004404:	d042      	beq.n	800448c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2208      	movs	r2, #8
 800440c:	189b      	adds	r3, r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	1ad2      	subs	r2, r2, r3
 8004420:	2308      	movs	r3, #8
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	429a      	cmp	r2, r3
 8004426:	d916      	bls.n	8004456 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2207      	movs	r2, #7
 8004434:	4013      	ands	r3, r2
 8004436:	d001      	beq.n	800443c <pvPortMalloc+0xcc>
 8004438:	b672      	cpsid	i
 800443a:	e7fe      	b.n	800443a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 f8db 	bl	800460c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <pvPortMalloc+0x140>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <pvPortMalloc+0x140>)
 8004462:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <pvPortMalloc+0x140>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <pvPortMalloc+0x148>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d203      	bcs.n	8004478 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <pvPortMalloc+0x140>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <pvPortMalloc+0x148>)
 8004476:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <pvPortMalloc+0x13c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	431a      	orrs	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800448c:	f7fe ff28 	bl	80032e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2207      	movs	r2, #7
 8004494:	4013      	ands	r3, r2
 8004496:	d001      	beq.n	800449c <pvPortMalloc+0x12c>
 8004498:	b672      	cpsid	i
 800449a:	e7fe      	b.n	800449a <pvPortMalloc+0x12a>
	return pvReturn;
 800449c:	68fb      	ldr	r3, [r7, #12]
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b006      	add	sp, #24
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	20001178 	.word	0x20001178
 80044ac:	20001184 	.word	0x20001184
 80044b0:	2000117c 	.word	0x2000117c
 80044b4:	20001170 	.word	0x20001170
 80044b8:	20001180 	.word	0x20001180

080044bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d035      	beq.n	800453a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044ce:	2308      	movs	r3, #8
 80044d0:	425b      	negs	r3, r3
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	18d3      	adds	r3, r2, r3
 80044d6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <vPortFree+0x88>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4013      	ands	r3, r2
 80044e6:	d101      	bne.n	80044ec <vPortFree+0x30>
 80044e8:	b672      	cpsid	i
 80044ea:	e7fe      	b.n	80044ea <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <vPortFree+0x3c>
 80044f4:	b672      	cpsid	i
 80044f6:	e7fe      	b.n	80044f6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <vPortFree+0x88>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4013      	ands	r3, r2
 8004502:	d01a      	beq.n	800453a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d116      	bne.n	800453a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <vPortFree+0x88>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	43db      	mvns	r3, r3
 8004516:	401a      	ands	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800451c:	f7fe fed4 	bl	80032c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <vPortFree+0x8c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	18d2      	adds	r2, r2, r3
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <vPortFree+0x8c>)
 800452c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f86b 	bl	800460c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004536:	f7fe fed3 	bl	80032e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	b004      	add	sp, #16
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	20001184 	.word	0x20001184
 8004548:	2000117c 	.word	0x2000117c

0800454c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004558:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <prvHeapInit+0xa8>)
 800455a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2207      	movs	r2, #7
 8004560:	4013      	ands	r3, r2
 8004562:	d00c      	beq.n	800457e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3307      	adds	r3, #7
 8004568:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2207      	movs	r2, #7
 800456e:	4393      	bics	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad2      	subs	r2, r2, r3
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <prvHeapInit+0xa8>)
 800457a:	18d3      	adds	r3, r2, r3
 800457c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <prvHeapInit+0xac>)
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <prvHeapInit+0xac>)
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004596:	2208      	movs	r2, #8
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2207      	movs	r2, #7
 80045a2:	4393      	bics	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <prvHeapInit+0xb0>)
 80045aa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <prvHeapInit+0xb0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <prvHeapInit+0xb0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	1ad2      	subs	r2, r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <prvHeapInit+0xb0>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <prvHeapInit+0xb4>)
 80045d8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <prvHeapInit+0xb8>)
 80045e0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <prvHeapInit+0xbc>)
 80045e4:	2280      	movs	r2, #128	; 0x80
 80045e6:	0612      	lsls	r2, r2, #24
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b004      	add	sp, #16
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	20000970 	.word	0x20000970
 80045f8:	20001170 	.word	0x20001170
 80045fc:	20001178 	.word	0x20001178
 8004600:	20001180 	.word	0x20001180
 8004604:	2000117c 	.word	0x2000117c
 8004608:	20001184 	.word	0x20001184

0800460c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e002      	b.n	8004620 <prvInsertBlockIntoFreeList+0x14>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d8f7      	bhi.n	800461a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	18d3      	adds	r3, r2, r3
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d108      	bne.n	800464e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	18d2      	adds	r2, r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	18d2      	adds	r2, r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d118      	bne.n	8004694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <prvInsertBlockIntoFreeList+0xac>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d00d      	beq.n	800468a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	18d2      	adds	r2, r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	e008      	b.n	800469c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <prvInsertBlockIntoFreeList+0xac>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e003      	b.n	800469c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d002      	beq.n	80046aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	20001170 	.word	0x20001170
 80046b8:	20001178 	.word	0x20001178

080046bc <__libc_init_array>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	2600      	movs	r6, #0
 80046c0:	4d0c      	ldr	r5, [pc, #48]	; (80046f4 <__libc_init_array+0x38>)
 80046c2:	4c0d      	ldr	r4, [pc, #52]	; (80046f8 <__libc_init_array+0x3c>)
 80046c4:	1b64      	subs	r4, r4, r5
 80046c6:	10a4      	asrs	r4, r4, #2
 80046c8:	42a6      	cmp	r6, r4
 80046ca:	d109      	bne.n	80046e0 <__libc_init_array+0x24>
 80046cc:	2600      	movs	r6, #0
 80046ce:	f000 f82b 	bl	8004728 <_init>
 80046d2:	4d0a      	ldr	r5, [pc, #40]	; (80046fc <__libc_init_array+0x40>)
 80046d4:	4c0a      	ldr	r4, [pc, #40]	; (8004700 <__libc_init_array+0x44>)
 80046d6:	1b64      	subs	r4, r4, r5
 80046d8:	10a4      	asrs	r4, r4, #2
 80046da:	42a6      	cmp	r6, r4
 80046dc:	d105      	bne.n	80046ea <__libc_init_array+0x2e>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	00b3      	lsls	r3, r6, #2
 80046e2:	58eb      	ldr	r3, [r5, r3]
 80046e4:	4798      	blx	r3
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7ee      	b.n	80046c8 <__libc_init_array+0xc>
 80046ea:	00b3      	lsls	r3, r6, #2
 80046ec:	58eb      	ldr	r3, [r5, r3]
 80046ee:	4798      	blx	r3
 80046f0:	3601      	adds	r6, #1
 80046f2:	e7f2      	b.n	80046da <__libc_init_array+0x1e>
 80046f4:	080047e8 	.word	0x080047e8
 80046f8:	080047e8 	.word	0x080047e8
 80046fc:	080047e8 	.word	0x080047e8
 8004700:	080047ec 	.word	0x080047ec

08004704 <memcpy>:
 8004704:	2300      	movs	r3, #0
 8004706:	b510      	push	{r4, lr}
 8004708:	429a      	cmp	r2, r3
 800470a:	d100      	bne.n	800470e <memcpy+0xa>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	5ccc      	ldrb	r4, [r1, r3]
 8004710:	54c4      	strb	r4, [r0, r3]
 8004712:	3301      	adds	r3, #1
 8004714:	e7f8      	b.n	8004708 <memcpy+0x4>

08004716 <memset>:
 8004716:	0003      	movs	r3, r0
 8004718:	1882      	adds	r2, r0, r2
 800471a:	4293      	cmp	r3, r2
 800471c:	d100      	bne.n	8004720 <memset+0xa>
 800471e:	4770      	bx	lr
 8004720:	7019      	strb	r1, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	e7f9      	b.n	800471a <memset+0x4>
	...

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
