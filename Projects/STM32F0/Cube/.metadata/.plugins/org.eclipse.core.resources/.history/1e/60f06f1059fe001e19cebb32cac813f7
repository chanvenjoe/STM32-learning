/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "dma.h"
#include "sw_spi.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "BLDC.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//MADC_Structure adc_buffer;
#define Phase_delay 5000

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint16_t adc_buf[CH_NUM]={0};
MADC_Structure adc_val = {1,1,1,1,1,1,1,1,1,1};
HX711_Structure weight_par = {0,0,0,0,0};
TimeFlagStruct printflag = {0};
PID_ParameterStruct PID_Parameters = {0.1, 0.05, 0.5};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC_Init();
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));

  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM6_Init();
  MX_TIM14_Init();
  MX_TIM15_Init();
  MX_TIM16_Init();

  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim15);
  HAL_TIM_Base_Start_IT(&htim16);

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
	{
		Error_Handler(); //This function also enable the interruption
	}

  /* USER CODE BEGIN 2 */
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
	HX711_Calibration(&weight_par);
  /* USER CODE END 2 */

//  HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);


  /*******initial position reset**************/
//   BLDC_Start_Up();

  /****************************************/


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(weight_par.calibration_flag)
	  {
		  printf("0x31 0x14%d\n", weight_par.gramAvgval );
//		  printf("0x31 0x14%d\n\r", weight_par.gram );
//	  printf("time laps: %d \r\n", adc_val.commutation_delay);
		  printf("PWM%d\n", (int)htim1.Instance->CCR1);
	  }
//	  Print_Pooling(&printflag);
	  if(1000 <= printflag.TimeCNT)
	  {
		  printf("VBat%0.2fV\n",	adc_val.vbat*(Vrefint*4095/adc_val.vref_data)/4095/VBAT_FACTOR);
	  }
	  delay_ms(50);
  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
#ifdef __GNUC__                                    //串口重定向
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim3)
	{
		if(weight_par.calibration_flag)
		{
			weight_par.cnt= weight_par.cnt == 5? 0:weight_par.cnt++;
			Get_weight(&weight_par);
			weight_par.gramAvg[weight_par.cnt] = weight_par.gram;
			weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
			weight_par.gram = weight_par.gramAvgval;
//			FORCESAPTIME;
		}
	}
	else if(htim == &htim6)//20ms enter
	{
		if(weight_par.calibration_flag == 1)
		{
			static char dc_pwm, pid_pwm;
			pid_pwm += Incremental_PID(&weight_par, PULL_FORCE_THR, &PID_Parameters);
			if(0<(pid_pwm-dc_pwm))
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
				AHBL_ON;
				weight_par.eps_flag = 1;
				dc_pwm = dc_pwm + PWM_STEP>100? 100:dc_pwm+PWM_STEP;
			}
			else if(0>(pid_pwm-dc_pwm))
			{
				dc_pwm = pid_pwm;
//				dc_pwm = dc_pwm - PWM_STEP<0 ? 0:dc_pwm-PWM_STEP;
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
			}
			if(dc_pwm>10)
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);

			if(weight_par.gram<LOWER_LIMMIT)
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
				CLOSE_PWM;
				weight_par.eps_flag = 0;
				pid_pwm = 0;//if not, the PID_PWM will always be the same value and dc_pwm never be 0
/*				dc_pwm = dc_pwm<=10? 0:dc_pwm-PWM_STEP;
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);*/
			}
		}

	}
	else if(htim == &htim14)//10ms enter for E-wagon protection counting
	{
		printflag.TimeCNT = printflag.TimeCNT>1100? 0:printflag.TimeCNT+1;
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
		{
			adc_val.commutation_timeout = 0;
			adc_val.commutation_delay 	= 0;
//			CLOSE_ALL;
		}

	}
	else if(htim == &htim15)//1us
	{

	}
	else if(htim == &htim16)//1us interval for time counting
	{

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
	if(huart == &huart1)
	{
		extern uint8_t cnt;
		rxbuf[cnt] = rxdata;
		const char cat[] = "0X13\r\n"; //APP(A:1) to Controller(C:3)
		cnt=cnt==RX_BUF_NUM?1:cnt+1;
		float PIDV;

		char a[6];

		if(rxdata == 'e')//'\n')
		{
//			printf("sting:%s\r\n", rxbuf);

			for(int t=cnt; t<RX_BUF_NUM; t++)
				rxbuf[t]=0;
			cnt = 0;

			if(0 == strcmp((char*) rxbuf,"0x00"))
			{
				HAL_TIM_Base_Stop_IT(&htim6);
			}

			else if(0 == strcmp((char*) rxbuf, "0x01"))
			{
				HAL_TIM_Base_Start_IT(&htim6);
			}
			else if(0 == strcmp((char*)rxbuf, "0x02"))
			{
				BT_PWM_handle(TURE);
			}
			else if(0 == strcmp(cat, "0x03"))
			{
				BT_PWM_handle(FALSE);
			}
			else if(0 == strcmp(cat, "0x04"))
			{
				htim1.Instance->CCR1++;
				htim1.Instance->CCR2++;
				htim1.Instance->CCR3++;
			}
			else if(0 == strcmp(cat, "0x05"))
			{
				TIM14->ARR--;
			}
			else if(0 == strcmp(cat, "0x06"))
			{

			}
			else if(0 == strcmp((char*) rxbuf, MotorOn))
			{
				printflag.Motor_On = TRUE;
			}
			else if(0 == strcmp((char*) rxbuf, MotorOff)) // 0X13MOff
			{
				printflag.Motor_Off = TRUE;

			}
		}
		if(rxdata == 'P')
		{
			sscanf(rxbuf, "%[^P]", a);
			PIDV = atof(a);
			PID_Parameters.Kp = PIDV;
		}
		else if(rxdata == 'I')
		{
			sscanf(rxbuf, "%[^I]", a);
			PIDV = atof(a);
			PID_Parameters.Ki = PIDV;
		}
		else if(rxdata == 'D')
		{
				sscanf(rxbuf, "%[^D]", a);
				PIDV = atof(a);
				PID_Parameters.Kd = PIDV;
		}
/*		else if(rxdata == 'E')
		{
			sscanf(rxbuf, "%[^E]", a);
			printflag.PID_Set = TRUE;
			printf("0X13PID SET");
		}*/
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{									  // The ADC sample time is for all channel, the DMA
	My_ADC_getvalue(adc_buf, &adc_val);
//	BLDC_Phase_switching(&adc_val);
}



/*void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
	if(GPIO_PIN == GPIO_PIN_4)
	{
		HAL_TIM_Base_Stop_IT(&htim6);
	}
	else if(GPIO_PIN == GPIO_PIN_5)
	{
		HAL_TIM_Base_Start_IT(&htim6);
	}
}*/


