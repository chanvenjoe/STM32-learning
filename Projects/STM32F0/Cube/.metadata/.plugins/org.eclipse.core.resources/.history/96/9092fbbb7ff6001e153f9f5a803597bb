/*
 * sw_spi.c
 *
 *  Created on: Jan 31, 2024
 *      Author: kzhou
 */
#include "sw_spi.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
	unsigned int weight=0;
	SW_SPI_PWR_ON; //Pull down clk

	while(SW_SPI_DAT_RDY)
	{
//		SW_SPI_CLK_H;
//		SW_SPI_CLK_L;
		printf("Un-ready\r\n");
	}

	for(char i = 24; i!=0; i--)
	{
		SW_SPI_CLK_H;
		weight = weight<<1;
		SW_SPI_CLK_L;
		if(SW_SPI_DAT_RDY)
		{
		 weight+=1;
		}
		delay_us(1);
	}
	SW_SPI_CLK_H;
	weight = weight^0x800000;
	SW_SPI_CLK_L;

	//Preserved for channel selection

	return weight;
}

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
	weight_par->gross_weight = Get_24bit_Weight(CHA_128);
	if(weight_par->calibration_flag)
	{
		if(weight_par->gross_weight - weight_par->calibrated_value>0)
			weight_par->gram = (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR;
		else
			weight_par->gram = 0;

		//Kalman  filter
	}
}

void HX711_Calibration(HX711_Structure* weight_par)
{
	  /*******Get gross weight**************/
	  SW_SPI_PWR_OFF;
	  delay_us(200);
	  SW_SPI_PWR_ON;
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
	  delay_us(2000);
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);

	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
	  {
		  printf("Sensor initial error, re-calibrating\r\n");
		  SW_SPI_PWR_OFF;
		  delay_us(200);
		  SW_SPI_PWR_ON;
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
		  delay_us(2000);
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
	  }
	  printf("calibration ok weight:%d\r\n", weight_par->calibrated_value);
	  weight_par->calibration_flag = 1; //Calibration done

}

void PWM_Delegation(HX711_Structure* weight_par)
{
	static char dc_pwm;
	if(weight_par->gram>PULL_FORCE_THR)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
		AHBL_ON;
		weight_par->eps_flag = 1;
		dc_pwm = dc_pwm>=70? 70:dc_pwm+5;
		if(dc_pwm>20)
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
	}
	else if(weight_par->gram>100&&(weight_par->eps_flag==1))
	{
		//dc_pwm = dc_pwm<=20? 99:dc_pwm-5;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);

	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
		CLOSE_PWM;
		weight_par->eps_flag = 0;
		dc_pwm = dc_pwm<=10? 0:dc_pwm-5;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
	}
}

// PWM+=KP[e(k) -e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
// e(k) the value difference of actual and setting e(k-1) the last time difference
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]

char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr)
{
	static float Kp = 0.05, Ki = 0.1, Kd = 0;// change it to struct so APP can Adjust the PID value    without  FW change
	static int   Bias=0, Last_bias=0, Last1_bias = 0;
	int PWM = 0;
	Bias = weight_par->gram> LOWER_LIMMIT/*&& weight_par->gram< TOP_LIMIT*/? weight_par->gram - pull_force_thr : 0;
	//sum_integral +=Bias*Ki;
	PWM += Kp*(Bias-Last_bias)+Ki*Bias + Kd*(Bias-2*Last_bias+Last1_bias);
	if(PWM>=0)
	{
		PWM = PWM>=95? 100:PWM;
	}
	else
	{
		PWM = 0;
	}
	Last1_bias = Last_bias;
	Last_bias = Bias;
	return PWM;
}



