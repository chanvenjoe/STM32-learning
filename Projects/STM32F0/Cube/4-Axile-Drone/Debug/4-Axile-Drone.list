
4-Axile-Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005728  08005728  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005730  08005730  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad8  20000010  08005748  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ae8  08005748  00024ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018184  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314f  00000000  00000000  000381c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f62  00000000  00000000  0003da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161ee  00000000  00000000  000409b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da04c  00000000  00000000  00056ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005554  00000000  00000000  00130c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080056b0 	.word	0x080056b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080056b0 	.word	0x080056b0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb68 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81e 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f98e 	bl	8000840 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000524:	f000 f87a 	bl	800061c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000528:	f000 f8c6 	bl	80006b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052c:	f000 f912 	bl	8000754 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000530:	f000 f95c 	bl	80007ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f002 fb2e 	bl	8002b94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <main+0x3c>)
 800053a:	2100      	movs	r1, #0
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x40>)
 800053e:	f002 fb73 	bl	8002c28 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <main+0x44>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f002 fb48 	bl	8002bdc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x38>
 800054e:	bf00      	nop
 8000550:	080056ec 	.word	0x080056ec
 8000554:	08000891 	.word	0x08000891
 8000558:	20000148 	.word	0x20000148

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2234      	movs	r2, #52	; 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f005 f898 	bl	80056a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <SystemClock_Config+0xb8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xb8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <SystemClock_Config+0xbc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <SystemClock_Config+0xbc>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <SystemClock_Config+0xbc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f8b9 	bl	8001748 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005dc:	f000 f972 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fdae 	bl	800115c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000606:	f000 f95d 	bl	80008c4 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_TIM2_Init+0x98>)
 800063a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800063e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_TIM2_Init+0x98>)
 8000642:	f244 129f 	movw	r2, #16799	; 0x419f
 8000646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_TIM2_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_TIM2_Init+0x98>)
 8000650:	f242 720f 	movw	r2, #9999	; 0x270f
 8000654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_TIM2_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_TIM2_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <MX_TIM2_Init+0x98>)
 8000664:	f001 fb0e 	bl	8001c84 <HAL_TIM_Base_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800066e:	f000 f929 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4619      	mov	r1, r3
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_TIM2_Init+0x98>)
 8000680:	f001 fcc8 	bl	8002014 <HAL_TIM_ConfigClockSource>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800068a:	f000 f91b 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_TIM2_Init+0x98>)
 800069c:	f001 fee4 	bl	8002468 <HAL_TIMEx_MasterConfigSynchronization>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006a6:	f000 f90d 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c

080006b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_TIM3_Init+0x94>)
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_TIM3_Init+0x98>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800-1;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_TIM3_Init+0x94>)
 80006dc:	f244 129f 	movw	r2, #16799	; 0x419f
 80006e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_TIM3_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_TIM3_Init+0x94>)
 80006ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_TIM3_Init+0x94>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_TIM3_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_TIM3_Init+0x94>)
 80006fe:	f001 fac1 	bl	8001c84 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000708:	f000 f8dc 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_TIM3_Init+0x94>)
 800071a:	f001 fc7b 	bl	8002014 <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000724:	f000 f8ce 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_TIM3_Init+0x94>)
 8000736:	f001 fe97 	bl	8002468 <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f8c0 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000074 	.word	0x20000074
 8000750:	40000400 	.word	0x40000400

08000754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_TIM4_Init+0x90>)
 8000772:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000774:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM4_Init+0x90>)
 8000778:	22a8      	movs	r2, #168	; 0xa8
 800077a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_TIM4_Init+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_TIM4_Init+0x90>)
 8000784:	2209      	movs	r2, #9
 8000786:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_TIM4_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_TIM4_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_TIM4_Init+0x90>)
 8000796:	f001 fa75 	bl	8001c84 <HAL_TIM_Base_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80007a0:	f000 f890 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_TIM4_Init+0x90>)
 80007b2:	f001 fc2f 	bl	8002014 <HAL_TIM_ConfigClockSource>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80007bc:	f000 f882 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_TIM4_Init+0x90>)
 80007ce:	f001 fe4b 	bl	8002468 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80007d8:	f000 f874 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000bc 	.word	0x200000bc
 80007e8:	40000800 	.word	0x40000800

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART1_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART1_UART_Init+0x4c>)
 8000824:	f001 feb0 	bl	8002588 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 f849 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000104 	.word	0x20000104
 800083c:	40011000 	.word	0x40011000

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_GPIO_Init+0x4c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_GPIO_Init+0x4c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_GPIO_Init+0x4c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_GPIO_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0x4c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f002 fa57 	bl	8002d4c <osDelay>
 800089e:	e7fb      	b.n	8000898 <StartDefaultTask+0x8>

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f9bd 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40010000 	.word	0x40010000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa63 	bl	8000de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000938:	d10e      	bne.n	8000958 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000956:	e026      	b.n	80009a6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_TIM_Base_MspInit+0x90>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d10e      	bne.n	8000980 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
}
 800097e:	e012      	b.n	80009a6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_TIM_Base_MspInit+0x94>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d10d      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_TIM_Base_MspInit+0x8c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
}
 80009a6:	bf00      	nop
 80009a8:	371c      	adds	r7, #28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40000800 	.word	0x40000800

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x84>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d12c      	bne.n	8000a3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0x8c>)
 8000a38:	f000 f9fc 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_InitTick+0xd0>)
 8000a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a68:	4a2d      	ldr	r2, [pc, #180]	; (8000b20 <HAL_InitTick+0xd0>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_InitTick+0xd0>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fc82 	bl	8001390 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a8c:	f000 fc6c 	bl	8001368 <HAL_RCC_GetPCLK2Freq>
 8000a90:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_InitTick+0xd4>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	0c9b      	lsrs	r3, r3, #18
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_InitTick+0xd8>)
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_InitTick+0xdc>)
 8000aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_InitTick+0xd8>)
 8000aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_InitTick+0xd8>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xd8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_InitTick+0xd8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_InitTick+0xd8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <HAL_InitTick+0xd8>)
 8000ac8:	f001 f8dc 	bl	8001c84 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d11b      	bne.n	8000b12 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <HAL_InitTick+0xd8>)
 8000adc:	f001 f922 	bl	8001d24 <HAL_TIM_Base_Start_IT>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d111      	bne.n	8000b12 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aee:	2019      	movs	r0, #25
 8000af0:	f000 f992 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	d808      	bhi.n	8000b0c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000afa:	2200      	movs	r2, #0
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	2019      	movs	r0, #25
 8000b00:	f000 f96e 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_InitTick+0xe0>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e002      	b.n	8000b12 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	2000014c 	.word	0x2000014c
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	20000004 	.word	0x20000004

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b66:	f001 f94d 	bl	8001e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000014c 	.word	0x2000014c

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 fd39 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fca3 	bl	8000514 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bdc:	08005738 	.word	0x08005738
  ldr r2, =_sbss
 8000be0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000be4:	20004ae8 	.word	0x20004ae8

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff ff18 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe56 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000194 	.word	0x20000194

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000194 	.word	0x20000194

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e165      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8154 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ae 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_GPIO_Init+0x304>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x308>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x310>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x318>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x20a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x206>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x320>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x202>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x324>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae96 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0cc      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d90c      	bls.n	8001198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0b8      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c8:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	494d      	ldr	r1, [pc, #308]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d044      	beq.n	800127c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d119      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e07f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d003      	beq.n	800121a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001216:	2b03      	cmp	r3, #3
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e06f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e067      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f023 0203 	bic.w	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4934      	ldr	r1, [pc, #208]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800124c:	f7ff fd04 	bl	8000c58 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	e00a      	b.n	800126a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001254:	f7ff fd00 	bl	8000c58 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e04f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 020c 	and.w	r2, r3, #12
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	429a      	cmp	r2, r3
 800127a:	d1eb      	bne.n	8001254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d20c      	bcs.n	80012a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e032      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4916      	ldr	r1, [pc, #88]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012e2:	f000 f887 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80012e6:	4602      	mov	r2, r0
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	490a      	ldr	r1, [pc, #40]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_RCC_ClockConfig+0x1c8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fba4 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00
 8001318:	40023800 	.word	0x40023800
 800131c:	08005710 	.word	0x08005710
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_RCC_GetHCLKFreq+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000

08001340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001344:	f7ff fff0 	bl	8001328 <HAL_RCC_GetHCLKFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	0a9b      	lsrs	r3, r3, #10
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	4903      	ldr	r1, [pc, #12]	; (8001364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	08005720 	.word	0x08005720

08001368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800136c:	f7ff ffdc 	bl	8001328 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	0b5b      	lsrs	r3, r3, #13
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4903      	ldr	r1, [pc, #12]	; (800138c <HAL_RCC_GetPCLK2Freq+0x24>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	08005720 	.word	0x08005720

08001390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	220f      	movs	r2, #15
 800139e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_RCC_GetClockConfig+0x60>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 020f 	and.w	r2, r3, #15
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f8:	b0a6      	sub	sp, #152	; 0x98
 80013fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800141a:	4bc8      	ldr	r3, [pc, #800]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b0c      	cmp	r3, #12
 8001424:	f200 817e 	bhi.w	8001724 <HAL_RCC_GetSysClockFreq+0x330>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <HAL_RCC_GetSysClockFreq+0x3c>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001465 	.word	0x08001465
 8001434:	08001725 	.word	0x08001725
 8001438:	08001725 	.word	0x08001725
 800143c:	08001725 	.word	0x08001725
 8001440:	0800146d 	.word	0x0800146d
 8001444:	08001725 	.word	0x08001725
 8001448:	08001725 	.word	0x08001725
 800144c:	08001725 	.word	0x08001725
 8001450:	08001475 	.word	0x08001475
 8001454:	08001725 	.word	0x08001725
 8001458:	08001725 	.word	0x08001725
 800145c:	08001725 	.word	0x08001725
 8001460:	080015df 	.word	0x080015df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001464:	4bb6      	ldr	r3, [pc, #728]	; (8001740 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800146a:	e15f      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800146c:	4bb5      	ldr	r3, [pc, #724]	; (8001744 <HAL_RCC_GetSysClockFreq+0x350>)
 800146e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001472:	e15b      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001474:	4bb1      	ldr	r3, [pc, #708]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001480:	4bae      	ldr	r3, [pc, #696]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d031      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148c:	4bab      	ldr	r3, [pc, #684]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	2200      	movs	r2, #0
 8001494:	66bb      	str	r3, [r7, #104]	; 0x68
 8001496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800149a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800149e:	663b      	str	r3, [r7, #96]	; 0x60
 80014a0:	2300      	movs	r3, #0
 80014a2:	667b      	str	r3, [r7, #100]	; 0x64
 80014a4:	4ba7      	ldr	r3, [pc, #668]	; (8001744 <HAL_RCC_GetSysClockFreq+0x350>)
 80014a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80014aa:	462a      	mov	r2, r5
 80014ac:	fb03 f202 	mul.w	r2, r3, r2
 80014b0:	2300      	movs	r3, #0
 80014b2:	4621      	mov	r1, r4
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	4aa2      	ldr	r2, [pc, #648]	; (8001744 <HAL_RCC_GetSysClockFreq+0x350>)
 80014bc:	4621      	mov	r1, r4
 80014be:	fba1 1202 	umull	r1, r2, r1, r2
 80014c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80014c4:	460a      	mov	r2, r1
 80014c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80014c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80014ca:	4413      	add	r3, r2
 80014cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014d2:	2200      	movs	r2, #0
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80014e0:	f7fe fe96 	bl	8000210 <__aeabi_uldivmod>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4613      	mov	r3, r2
 80014ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ee:	e064      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	2200      	movs	r2, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
 80014fa:	657a      	str	r2, [r7, #84]	; 0x54
 80014fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
 8001504:	2300      	movs	r3, #0
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001508:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800150c:	4622      	mov	r2, r4
 800150e:	462b      	mov	r3, r5
 8001510:	f04f 0000 	mov.w	r0, #0
 8001514:	f04f 0100 	mov.w	r1, #0
 8001518:	0159      	lsls	r1, r3, #5
 800151a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800151e:	0150      	lsls	r0, r2, #5
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4621      	mov	r1, r4
 8001526:	1a51      	subs	r1, r2, r1
 8001528:	6139      	str	r1, [r7, #16]
 800152a:	4629      	mov	r1, r5
 800152c:	eb63 0301 	sbc.w	r3, r3, r1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800153e:	4659      	mov	r1, fp
 8001540:	018b      	lsls	r3, r1, #6
 8001542:	4651      	mov	r1, sl
 8001544:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001548:	4651      	mov	r1, sl
 800154a:	018a      	lsls	r2, r1, #6
 800154c:	4651      	mov	r1, sl
 800154e:	ebb2 0801 	subs.w	r8, r2, r1
 8001552:	4659      	mov	r1, fp
 8001554:	eb63 0901 	sbc.w	r9, r3, r1
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001564:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001568:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800156c:	4690      	mov	r8, r2
 800156e:	4699      	mov	r9, r3
 8001570:	4623      	mov	r3, r4
 8001572:	eb18 0303 	adds.w	r3, r8, r3
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	462b      	mov	r3, r5
 800157a:	eb49 0303 	adc.w	r3, r9, r3
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800158c:	4629      	mov	r1, r5
 800158e:	028b      	lsls	r3, r1, #10
 8001590:	4621      	mov	r1, r4
 8001592:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001596:	4621      	mov	r1, r4
 8001598:	028a      	lsls	r2, r1, #10
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a2:	2200      	movs	r2, #0
 80015a4:	643b      	str	r3, [r7, #64]	; 0x40
 80015a6:	647a      	str	r2, [r7, #68]	; 0x44
 80015a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015ac:	f7fe fe30 	bl	8000210 <__aeabi_uldivmod>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4613      	mov	r3, r2
 80015b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015ba:	4b60      	ldr	r3, [pc, #384]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	0c1b      	lsrs	r3, r3, #16
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	3301      	adds	r3, #1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80015cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80015dc:	e0a6      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015de:	4b57      	ldr	r3, [pc, #348]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d02a      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001608:	2100      	movs	r1, #0
 800160a:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <HAL_RCC_GetSysClockFreq+0x350>)
 800160c:	fb03 f201 	mul.w	r2, r3, r1
 8001610:	2300      	movs	r3, #0
 8001612:	fb00 f303 	mul.w	r3, r0, r3
 8001616:	4413      	add	r3, r2
 8001618:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_RCC_GetSysClockFreq+0x350>)
 800161a:	fba0 1202 	umull	r1, r2, r0, r2
 800161e:	677a      	str	r2, [r7, #116]	; 0x74
 8001620:	460a      	mov	r2, r1
 8001622:	673a      	str	r2, [r7, #112]	; 0x70
 8001624:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001626:	4413      	add	r3, r2
 8001628:	677b      	str	r3, [r7, #116]	; 0x74
 800162a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800162e:	2200      	movs	r2, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
 8001632:	637a      	str	r2, [r7, #52]	; 0x34
 8001634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001638:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800163c:	f7fe fde8 	bl	8000210 <__aeabi_uldivmod>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4613      	mov	r3, r2
 8001646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800164a:	e05b      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164c:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	2200      	movs	r2, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
 8001656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001668:	4642      	mov	r2, r8
 800166a:	464b      	mov	r3, r9
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	0159      	lsls	r1, r3, #5
 8001676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800167a:	0150      	lsls	r0, r2, #5
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4641      	mov	r1, r8
 8001682:	ebb2 0a01 	subs.w	sl, r2, r1
 8001686:	4649      	mov	r1, r9
 8001688:	eb63 0b01 	sbc.w	fp, r3, r1
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800169c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016a0:	ebb2 040a 	subs.w	r4, r2, sl
 80016a4:	eb63 050b 	sbc.w	r5, r3, fp
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	00eb      	lsls	r3, r5, #3
 80016b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b6:	00e2      	lsls	r2, r4, #3
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	18e3      	adds	r3, r4, r3
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	464b      	mov	r3, r9
 80016c4:	eb45 0303 	adc.w	r3, r5, r3
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016d6:	4629      	mov	r1, r5
 80016d8:	028b      	lsls	r3, r1, #10
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e0:	4621      	mov	r1, r4
 80016e2:	028a      	lsls	r2, r1, #10
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016ec:	2200      	movs	r2, #0
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	61fa      	str	r2, [r7, #28]
 80016f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f6:	f7fe fd8b 	bl	8000210 <__aeabi_uldivmod>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4613      	mov	r3, r2
 8001700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_GetSysClockFreq+0x348>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	0f1b      	lsrs	r3, r3, #28
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001722:	e003      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800172a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001730:	4618      	mov	r0, r3
 8001732:	3798      	adds	r7, #152	; 0x98
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	00f42400 	.word	0x00f42400
 8001744:	017d7840 	.word	0x017d7840

08001748 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e28d      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8083 	beq.w	800186e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001768:	4b94      	ldr	r3, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b04      	cmp	r3, #4
 8001772:	d019      	beq.n	80017a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001774:	4b91      	ldr	r3, [pc, #580]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800177c:	2b08      	cmp	r3, #8
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001780:	4b8e      	ldr	r3, [pc, #568]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178c:	d00c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d112      	bne.n	80017c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179a:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017a6:	d10b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	4b84      	ldr	r3, [pc, #528]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d05b      	beq.n	800186c <HAL_RCC_OscConfig+0x124>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d157      	bne.n	800186c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e25a      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d106      	bne.n	80017d8 <HAL_RCC_OscConfig+0x90>
 80017ca:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7b      	ldr	r2, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0xcc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0xb4>
 80017e2:	4b76      	ldr	r3, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a75      	ldr	r2, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a72      	ldr	r2, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xcc>
 80017fc:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6e      	ldr	r2, [pc, #440]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b6c      	ldr	r3, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6b      	ldr	r2, [pc, #428]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fa1c 	bl	8000c58 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fa18 	bl	8000c58 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e21f      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xdc>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fa08 	bl	8000c58 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fa04 	bl	8000c58 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e20b      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x104>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06f      	beq.n	800195a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800187a:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d017      	beq.n	80018b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800188e:	2b08      	cmp	r3, #8
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d11c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b44      	ldr	r3, [pc, #272]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d116      	bne.n	80018e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x186>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e1d3      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4937      	ldr	r1, [pc, #220]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	e03a      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_OscConfig+0x278>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff f9b1 	bl	8000c58 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff f9ad 	bl	8000c58 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1b4      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4925      	ldr	r1, [pc, #148]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e015      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x278>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f990 	bl	8000c58 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff f98c 	bl	8000c58 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e193      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d036      	beq.n	80019d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d016      	beq.n	800199c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff f970 	bl	8000c58 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff f96c 	bl	8000c58 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e173      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x234>
 800199a:	e01b      	b.n	80019d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff f959 	bl	8000c58 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	e00e      	b.n	80019c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019aa:	f7ff f955 	bl	8000c58 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d907      	bls.n	80019c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e15c      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	42470000 	.word	0x42470000
 80019c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4b8a      	ldr	r3, [pc, #552]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ea      	bne.n	80019aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8097 	beq.w	8001b10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b83      	ldr	r3, [pc, #524]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a75      	ldr	r2, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f915 	bl	8000c58 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff f911 	bl	8000c58 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e118      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x31e>
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
 8001a64:	e01c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x358>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x340>
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a60      	ldr	r2, [pc, #384]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a5d      	ldr	r2, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x358>
 8001a88:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a59      	ldr	r2, [pc, #356]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	f023 0304 	bic.w	r3, r3, #4
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d015      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f8d6 	bl	8000c58 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f8d2 	bl	8000c58 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0d7      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0ee      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x368>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f8c0 	bl	8000c58 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff f8bc 	bl	8000c58 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0c1      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ee      	bne.n	8001adc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80ad 	beq.w	8001c74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d060      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d145      	bne.n	8001bba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_OscConfig+0x4b4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f890 	bl	8000c58 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f88c 	bl	8000c58 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e093      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	071b      	lsls	r3, r3, #28
 8001b86:	491b      	ldr	r1, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_RCC_OscConfig+0x4b4>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f861 	bl	8000c58 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f85d 	bl	8000c58 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e064      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x452>
 8001bb8:	e05c      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x4b4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f84a 	bl	8000c58 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f846 	bl	8000c58 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e04d      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x480>
 8001be6:	e045      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e040      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_RCC_OscConfig+0x538>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d129      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d122      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d119      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10f      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e041      	b.n	8001d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fe3c 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 fa96 	bl	80021f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d001      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04e      	b.n	8001dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d66:	d01d      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_TIM_Base_Start_IT+0xc8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d010      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc6:	e007      	b.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40010400 	.word	0x40010400
 8001dfc:	40014000 	.word	0x40014000
 8001e00:	40001800 	.word	0x40001800

08001e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0202 	mvn.w	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f9b5 	bl	80021b6 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f9a7 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f9b8 	bl	80021ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0204 	mvn.w	r2, #4
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f98b 	bl	80021b6 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f97d 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f98e 	bl	80021ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0208 	mvn.w	r2, #8
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f961 	bl	80021b6 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f953 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f964 	bl	80021ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0210 	mvn.w	r2, #16
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2208      	movs	r2, #8
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f937 	bl	80021b6 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f929 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f93a 	bl	80021ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0201 	mvn.w	r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fc8c 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fae0 	bl	8002574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8ff 	bl	80021de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0220 	mvn.w	r2, #32
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 faaa 	bl	8002560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_TIM_ConfigClockSource+0x1c>
 800202c:	2302      	movs	r3, #2
 800202e:	e0b4      	b.n	800219a <HAL_TIM_ConfigClockSource+0x186>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800204e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002068:	d03e      	beq.n	80020e8 <HAL_TIM_ConfigClockSource+0xd4>
 800206a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206e:	f200 8087 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002076:	f000 8086 	beq.w	8002186 <HAL_TIM_ConfigClockSource+0x172>
 800207a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207e:	d87f      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002080:	2b70      	cmp	r3, #112	; 0x70
 8002082:	d01a      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0xa6>
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d87b      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002088:	2b60      	cmp	r3, #96	; 0x60
 800208a:	d050      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x11a>
 800208c:	2b60      	cmp	r3, #96	; 0x60
 800208e:	d877      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002090:	2b50      	cmp	r3, #80	; 0x50
 8002092:	d03c      	beq.n	800210e <HAL_TIM_ConfigClockSource+0xfa>
 8002094:	2b50      	cmp	r3, #80	; 0x50
 8002096:	d873      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d058      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x13a>
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d86f      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 80020a0:	2b30      	cmp	r3, #48	; 0x30
 80020a2:	d064      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020a4:	2b30      	cmp	r3, #48	; 0x30
 80020a6:	d86b      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d060      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d867      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05c      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d05a      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020b8:	e062      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f000 f9ad 	bl	8002428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	609a      	str	r2, [r3, #8]
      break;
 80020e6:	e04f      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f000 f996 	bl	8002428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	609a      	str	r2, [r3, #8]
      break;
 800210c:	e03c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	461a      	mov	r2, r3
 800211c:	f000 f90a 	bl	8002334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2150      	movs	r1, #80	; 0x50
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f963 	bl	80023f2 <TIM_ITRx_SetConfig>
      break;
 800212c:	e02c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	461a      	mov	r2, r3
 800213c:	f000 f929 	bl	8002392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2160      	movs	r1, #96	; 0x60
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f953 	bl	80023f2 <TIM_ITRx_SetConfig>
      break;
 800214c:	e01c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	461a      	mov	r2, r3
 800215c:	f000 f8ea 	bl	8002334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2140      	movs	r1, #64	; 0x40
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f943 	bl	80023f2 <TIM_ITRx_SetConfig>
      break;
 800216c:	e00c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f000 f93a 	bl	80023f2 <TIM_ITRx_SetConfig>
      break;
 800217e:	e003      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      break;
 8002184:	e000      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a40      	ldr	r2, [pc, #256]	; (8002308 <TIM_Base_SetConfig+0x114>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d013      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d00f      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3d      	ldr	r2, [pc, #244]	; (800230c <TIM_Base_SetConfig+0x118>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00b      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3c      	ldr	r2, [pc, #240]	; (8002310 <TIM_Base_SetConfig+0x11c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <TIM_Base_SetConfig+0x120>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3a      	ldr	r2, [pc, #232]	; (8002318 <TIM_Base_SetConfig+0x124>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d108      	bne.n	8002246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <TIM_Base_SetConfig+0x114>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02b      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d027      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <TIM_Base_SetConfig+0x118>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d023      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <TIM_Base_SetConfig+0x11c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <TIM_Base_SetConfig+0x120>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01b      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <TIM_Base_SetConfig+0x124>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d017      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <TIM_Base_SetConfig+0x128>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <TIM_Base_SetConfig+0x12c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00f      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <TIM_Base_SetConfig+0x130>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00b      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <TIM_Base_SetConfig+0x134>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <TIM_Base_SetConfig+0x138>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d003      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a23      	ldr	r2, [pc, #140]	; (8002330 <TIM_Base_SetConfig+0x13c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d108      	bne.n	80022b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <TIM_Base_SetConfig+0x114>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d003      	beq.n	80022ec <TIM_Base_SetConfig+0xf8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <TIM_Base_SetConfig+0x124>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	615a      	str	r2, [r3, #20]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40000400 	.word	0x40000400
 8002310:	40000800 	.word	0x40000800
 8002314:	40000c00 	.word	0x40000c00
 8002318:	40010400 	.word	0x40010400
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800
 8002328:	40001800 	.word	0x40001800
 800232c:	40001c00 	.word	0x40001c00
 8002330:	40002000 	.word	0x40002000

08002334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f023 0201 	bic.w	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f023 030a 	bic.w	r3, r3, #10
 8002370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f023 0210 	bic.w	r2, r3, #16
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	031b      	lsls	r3, r3, #12
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	621a      	str	r2, [r3, #32]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	f043 0307 	orr.w	r3, r3, #7
 8002414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	021a      	lsls	r2, r3, #8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	431a      	orrs	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800247c:	2302      	movs	r3, #2
 800247e:	e05a      	b.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d01d      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10c      	bne.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4313      	orrs	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40010400 	.word	0x40010400
 8002558:	40014000 	.word	0x40014000
 800255c:	40001800 	.word	0x40001800

08002560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e03f      	b.n	800261a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fa06 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f829 	bl	8002624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b0c0      	sub	sp, #256	; 0x100
 800262a:	af00      	add	r7, sp, #0
 800262c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	68d9      	ldr	r1, [r3, #12]
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	ea40 0301 	orr.w	r3, r0, r1
 800264c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	431a      	orrs	r2, r3
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	431a      	orrs	r2, r3
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800267c:	f021 010c 	bic.w	r1, r1, #12
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800268a:	430b      	orrs	r3, r1
 800268c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800268e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800269a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269e:	6999      	ldr	r1, [r3, #24]
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	ea40 0301 	orr.w	r3, r0, r1
 80026aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4b8f      	ldr	r3, [pc, #572]	; (80028f0 <UART_SetConfig+0x2cc>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d005      	beq.n	80026c4 <UART_SetConfig+0xa0>
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <UART_SetConfig+0x2d0>)
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d104      	bne.n	80026ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c4:	f7fe fe50 	bl	8001368 <HAL_RCC_GetPCLK2Freq>
 80026c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026cc:	e003      	b.n	80026d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ce:	f7fe fe37 	bl	8001340 <HAL_RCC_GetPCLK1Freq>
 80026d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e0:	f040 810c 	bne.w	80028fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026f6:	4622      	mov	r2, r4
 80026f8:	462b      	mov	r3, r5
 80026fa:	1891      	adds	r1, r2, r2
 80026fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80026fe:	415b      	adcs	r3, r3
 8002700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002706:	4621      	mov	r1, r4
 8002708:	eb12 0801 	adds.w	r8, r2, r1
 800270c:	4629      	mov	r1, r5
 800270e:	eb43 0901 	adc.w	r9, r3, r1
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002726:	4690      	mov	r8, r2
 8002728:	4699      	mov	r9, r3
 800272a:	4623      	mov	r3, r4
 800272c:	eb18 0303 	adds.w	r3, r8, r3
 8002730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002734:	462b      	mov	r3, r5
 8002736:	eb49 0303 	adc.w	r3, r9, r3
 800273a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800274a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800274e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002752:	460b      	mov	r3, r1
 8002754:	18db      	adds	r3, r3, r3
 8002756:	653b      	str	r3, [r7, #80]	; 0x50
 8002758:	4613      	mov	r3, r2
 800275a:	eb42 0303 	adc.w	r3, r2, r3
 800275e:	657b      	str	r3, [r7, #84]	; 0x54
 8002760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002768:	f7fd fd52 	bl	8000210 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <UART_SetConfig+0x2d4>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	011c      	lsls	r4, r3, #4
 800277a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800277e:	2200      	movs	r2, #0
 8002780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002784:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800278c:	4642      	mov	r2, r8
 800278e:	464b      	mov	r3, r9
 8002790:	1891      	adds	r1, r2, r2
 8002792:	64b9      	str	r1, [r7, #72]	; 0x48
 8002794:	415b      	adcs	r3, r3
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800279c:	4641      	mov	r1, r8
 800279e:	eb12 0a01 	adds.w	sl, r2, r1
 80027a2:	4649      	mov	r1, r9
 80027a4:	eb43 0b01 	adc.w	fp, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027bc:	4692      	mov	sl, r2
 80027be:	469b      	mov	fp, r3
 80027c0:	4643      	mov	r3, r8
 80027c2:	eb1a 0303 	adds.w	r3, sl, r3
 80027c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ca:	464b      	mov	r3, r9
 80027cc:	eb4b 0303 	adc.w	r3, fp, r3
 80027d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027e8:	460b      	mov	r3, r1
 80027ea:	18db      	adds	r3, r3, r3
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
 80027ee:	4613      	mov	r3, r2
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
 80027f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027fe:	f7fd fd07 	bl	8000210 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4611      	mov	r1, r2
 8002808:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <UART_SetConfig+0x2d4>)
 800280a:	fba3 2301 	umull	r2, r3, r3, r1
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2264      	movs	r2, #100	; 0x64
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	1acb      	subs	r3, r1, r3
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <UART_SetConfig+0x2d4>)
 8002820:	fba3 2302 	umull	r2, r3, r3, r2
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800282c:	441c      	add	r4, r3
 800282e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002838:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800283c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	1891      	adds	r1, r2, r2
 8002846:	63b9      	str	r1, [r7, #56]	; 0x38
 8002848:	415b      	adcs	r3, r3
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002850:	4641      	mov	r1, r8
 8002852:	1851      	adds	r1, r2, r1
 8002854:	6339      	str	r1, [r7, #48]	; 0x30
 8002856:	4649      	mov	r1, r9
 8002858:	414b      	adcs	r3, r1
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002868:	4659      	mov	r1, fp
 800286a:	00cb      	lsls	r3, r1, #3
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002872:	4651      	mov	r1, sl
 8002874:	00ca      	lsls	r2, r1, #3
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4603      	mov	r3, r0
 800287c:	4642      	mov	r2, r8
 800287e:	189b      	adds	r3, r3, r2
 8002880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002884:	464b      	mov	r3, r9
 8002886:	460a      	mov	r2, r1
 8002888:	eb42 0303 	adc.w	r3, r2, r3
 800288c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800289c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028a4:	460b      	mov	r3, r1
 80028a6:	18db      	adds	r3, r3, r3
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028aa:	4613      	mov	r3, r2
 80028ac:	eb42 0303 	adc.w	r3, r2, r3
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028ba:	f7fd fca9 	bl	8000210 <__aeabi_uldivmod>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <UART_SetConfig+0x2d4>)
 80028c4:	fba3 1302 	umull	r1, r3, r3, r2
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	2164      	movs	r1, #100	; 0x64
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	3332      	adds	r3, #50	; 0x32
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <UART_SetConfig+0x2d4>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	f003 0207 	and.w	r2, r3, #7
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4422      	add	r2, r4
 80028ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028ec:	e105      	b.n	8002afa <UART_SetConfig+0x4d6>
 80028ee:	bf00      	nop
 80028f0:	40011000 	.word	0x40011000
 80028f4:	40011400 	.word	0x40011400
 80028f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002906:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800290a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800290e:	4642      	mov	r2, r8
 8002910:	464b      	mov	r3, r9
 8002912:	1891      	adds	r1, r2, r2
 8002914:	6239      	str	r1, [r7, #32]
 8002916:	415b      	adcs	r3, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800291e:	4641      	mov	r1, r8
 8002920:	1854      	adds	r4, r2, r1
 8002922:	4649      	mov	r1, r9
 8002924:	eb43 0501 	adc.w	r5, r3, r1
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	00eb      	lsls	r3, r5, #3
 8002932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002936:	00e2      	lsls	r2, r4, #3
 8002938:	4614      	mov	r4, r2
 800293a:	461d      	mov	r5, r3
 800293c:	4643      	mov	r3, r8
 800293e:	18e3      	adds	r3, r4, r3
 8002940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002944:	464b      	mov	r3, r9
 8002946:	eb45 0303 	adc.w	r3, r5, r3
 800294a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800295a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800296a:	4629      	mov	r1, r5
 800296c:	008b      	lsls	r3, r1, #2
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002974:	4621      	mov	r1, r4
 8002976:	008a      	lsls	r2, r1, #2
 8002978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800297c:	f7fd fc48 	bl	8000210 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <UART_SetConfig+0x4e4>)
 8002986:	fba3 2302 	umull	r2, r3, r3, r2
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	011c      	lsls	r4, r3, #4
 800298e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002998:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800299c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	1891      	adds	r1, r2, r2
 80029a6:	61b9      	str	r1, [r7, #24]
 80029a8:	415b      	adcs	r3, r3
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b0:	4641      	mov	r1, r8
 80029b2:	1851      	adds	r1, r2, r1
 80029b4:	6139      	str	r1, [r7, #16]
 80029b6:	4649      	mov	r1, r9
 80029b8:	414b      	adcs	r3, r1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029c8:	4659      	mov	r1, fp
 80029ca:	00cb      	lsls	r3, r1, #3
 80029cc:	4651      	mov	r1, sl
 80029ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d2:	4651      	mov	r1, sl
 80029d4:	00ca      	lsls	r2, r1, #3
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	4642      	mov	r2, r8
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e4:	464b      	mov	r3, r9
 80029e6:	460a      	mov	r2, r1
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a08:	4649      	mov	r1, r9
 8002a0a:	008b      	lsls	r3, r1, #2
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a12:	4641      	mov	r1, r8
 8002a14:	008a      	lsls	r2, r1, #2
 8002a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a1a:	f7fd fbf9 	bl	8000210 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <UART_SetConfig+0x4e4>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <UART_SetConfig+0x4e4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a42:	441c      	add	r4, r3
 8002a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a48:	2200      	movs	r2, #0
 8002a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a4c:	677a      	str	r2, [r7, #116]	; 0x74
 8002a4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a52:	4642      	mov	r2, r8
 8002a54:	464b      	mov	r3, r9
 8002a56:	1891      	adds	r1, r2, r2
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	415b      	adcs	r3, r3
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a62:	4641      	mov	r1, r8
 8002a64:	1851      	adds	r1, r2, r1
 8002a66:	6039      	str	r1, [r7, #0]
 8002a68:	4649      	mov	r1, r9
 8002a6a:	414b      	adcs	r3, r1
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	00cb      	lsls	r3, r1, #3
 8002a7e:	4651      	mov	r1, sl
 8002a80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a84:	4651      	mov	r1, sl
 8002a86:	00ca      	lsls	r2, r1, #3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4642      	mov	r2, r8
 8002a90:	189b      	adds	r3, r3, r2
 8002a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a94:	464b      	mov	r3, r9
 8002a96:	460a      	mov	r2, r1
 8002a98:	eb42 0303 	adc.w	r3, r2, r3
 8002a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa8:	667a      	str	r2, [r7, #100]	; 0x64
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	008b      	lsls	r3, r1, #2
 8002aba:	4641      	mov	r1, r8
 8002abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	008a      	lsls	r2, r1, #2
 8002ac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ac8:	f7fd fba2 	bl	8000210 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <UART_SetConfig+0x4e4>)
 8002ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2164      	movs	r1, #100	; 0x64
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <UART_SetConfig+0x4e4>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 020f 	and.w	r2, r3, #15
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4422      	add	r2, r4
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	51eb851f 	.word	0x51eb851f

08002b0c <__NVIC_SetPriority>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <SysTick_Handler+0x1c>)
 8002b66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b68:	f001 fcfe 	bl	8004568 <xTaskGetSchedulerState>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d001      	beq.n	8002b76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b72:	f002 fae9 	bl	8005148 <xPortSysTickHandler>
  }
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b84:	2100      	movs	r1, #0
 8002b86:	f06f 0004 	mvn.w	r0, #4
 8002b8a:	f7ff ffbf 	bl	8002b0c <__NVIC_SetPriority>
#endif
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b9a:	f3ef 8305 	mrs	r3, IPSR
 8002b9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002ba0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ba6:	f06f 0305 	mvn.w	r3, #5
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	e00c      	b.n	8002bc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <osKernelInitialize+0x44>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <osKernelInitialize+0x44>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	e002      	b.n	8002bc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bc8:	687b      	ldr	r3, [r7, #4]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000198 	.word	0x20000198

08002bdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002be2:	f3ef 8305 	mrs	r3, IPSR
 8002be6:	603b      	str	r3, [r7, #0]
  return(result);
 8002be8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002bee:	f06f 0305 	mvn.w	r3, #5
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	e010      	b.n	8002c18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <osKernelStart+0x48>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d109      	bne.n	8002c12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002bfe:	f7ff ffbf 	bl	8002b80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <osKernelStart+0x48>)
 8002c04:	2202      	movs	r2, #2
 8002c06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c08:	f001 f866 	bl	8003cd8 <vTaskStartScheduler>
      stat = osOK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	e002      	b.n	8002c18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000198 	.word	0x20000198

08002c28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	; 0x38
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c38:	f3ef 8305 	mrs	r3, IPSR
 8002c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8002c3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d17e      	bne.n	8002d42 <osThreadNew+0x11a>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d07b      	beq.n	8002d42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c4e:	2318      	movs	r3, #24
 8002c50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d045      	beq.n	8002cee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <osThreadNew+0x48>
        name = attr->name;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <osThreadNew+0x6e>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b38      	cmp	r3, #56	; 0x38
 8002c88:	d805      	bhi.n	8002c96 <osThreadNew+0x6e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <osThreadNew+0x72>
        return (NULL);
 8002c96:	2300      	movs	r3, #0
 8002c98:	e054      	b.n	8002d44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <osThreadNew+0xa8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b5b      	cmp	r3, #91	; 0x5b
 8002cb8:	d90a      	bls.n	8002cd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <osThreadNew+0xa8>
        mem = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e010      	b.n	8002cf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10c      	bne.n	8002cf2 <osThreadNew+0xca>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d108      	bne.n	8002cf2 <osThreadNew+0xca>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <osThreadNew+0xca>
          mem = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e001      	b.n	8002cf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d110      	bne.n	8002d1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d00:	9202      	str	r2, [sp, #8]
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fe0c 	bl	800392c <xTaskCreateStatic>
 8002d14:	4603      	mov	r3, r0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e013      	b.n	8002d42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d110      	bne.n	8002d42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fe57 	bl	80039e6 <xTaskCreate>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <osThreadNew+0x11a>
            hTask = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d42:	693b      	ldr	r3, [r7, #16]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d54:	f3ef 8305 	mrs	r3, IPSR
 8002d58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <osDelay+0x1c>
    stat = osErrorISR;
 8002d60:	f06f 0305 	mvn.w	r3, #5
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e007      	b.n	8002d78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 ff7c 	bl	8003c70 <vTaskDelay>
    }
  }

  return (stat);
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <vApplicationGetIdleTaskMemory+0x30>)
 8002d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000019c 	.word	0x2000019c
 8002db4:	200001f8 	.word	0x200001f8

08002db8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002dc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <vApplicationGetTimerTaskMemory+0x30>)
 8002dce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	200003f8 	.word	0x200003f8
 8002de8:	20000454 	.word	0x20000454

08002dec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f103 0208 	add.w	r2, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f103 0208 	add.w	r2, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 0208 	add.w	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d103      	bne.n	8002eae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e00c      	b.n	8002ec8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e002      	b.n	8002ebc <vListInsert+0x2e>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d2f6      	bcs.n	8002eb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6892      	ldr	r2, [r2, #8]
 8002f16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6852      	ldr	r2, [r2, #4]
 8002f20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d103      	bne.n	8002f34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1e5a      	subs	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f7e:	f002 f851 	bl	8005024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	441a      	add	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	441a      	add	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d114      	bne.n	8002ffe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01a      	beq.n	8003012 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3310      	adds	r3, #16
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f903 	bl	80041ec <xTaskRemoveFromEventList>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d012      	beq.n	8003012 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <xQueueGenericReset+0xcc>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	e009      	b.n	8003012 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3310      	adds	r3, #16
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fef2 	bl	8002dec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff feed 	bl	8002dec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003012:	f002 f837 	bl	8005084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <xQueueGenericCreateStatic+0x52>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <xQueueGenericCreateStatic+0x56>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueGenericCreateStatic+0x58>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	623b      	str	r3, [r7, #32]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <xQueueGenericCreateStatic+0x7e>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <xQueueGenericCreateStatic+0x82>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueGenericCreateStatic+0x84>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61fb      	str	r3, [r7, #28]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030c2:	2350      	movs	r3, #80	; 0x50
 80030c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d00a      	beq.n	80030e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61bb      	str	r3, [r7, #24]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f805 	bl	8003114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800310c:	4618      	mov	r0, r3
 800310e:	3730      	adds	r7, #48	; 0x30
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e002      	b.n	8003136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003142:	2101      	movs	r1, #1
 8003144:	69b8      	ldr	r0, [r7, #24]
 8003146:	f7ff ff05 	bl	8002f54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08e      	sub	sp, #56	; 0x38
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800316a:	2300      	movs	r3, #0
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xQueueGenericSend+0x32>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <xQueueGenericSend+0x40>
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <xQueueGenericSend+0x44>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <xQueueGenericSend+0x46>
 80031a0:	2300      	movs	r3, #0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <xQueueGenericSend+0x60>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <xQueueGenericSend+0x6e>
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <xQueueGenericSend+0x72>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueGenericSend+0x74>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericSend+0x8e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	623b      	str	r3, [r7, #32]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ea:	f001 f9bd 	bl	8004568 <xTaskGetSchedulerState>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <xQueueGenericSend+0x9e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <xQueueGenericSend+0xa2>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xQueueGenericSend+0xa4>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <xQueueGenericSend+0xbe>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	61fb      	str	r3, [r7, #28]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800321a:	f001 ff03 	bl	8005024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <xQueueGenericSend+0xd4>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d129      	bne.n	8003284 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003236:	f000 fa0b 	bl	8003650 <prvCopyDataToQueue>
 800323a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	3324      	adds	r3, #36	; 0x24
 8003248:	4618      	mov	r0, r3
 800324a:	f000 ffcf 	bl	80041ec <xTaskRemoveFromEventList>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <xQueueGenericSend+0x1f8>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	e00a      	b.n	800327c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <xQueueGenericSend+0x1f8>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800327c:	f001 ff02 	bl	8005084 <vPortExitCritical>
				return pdPASS;
 8003280:	2301      	movs	r3, #1
 8003282:	e063      	b.n	800334c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800328a:	f001 fefb 	bl	8005084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800328e:	2300      	movs	r3, #0
 8003290:	e05c      	b.n	800334c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f001 f809 	bl	80042b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032a6:	f001 feed 	bl	8005084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032aa:	f000 fd7b 	bl	8003da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ae:	f001 feb9 	bl	8005024 <vPortEnterCritical>
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d103      	bne.n	80032c8 <xQueueGenericSend+0x16c>
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <xQueueGenericSend+0x182>
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032de:	f001 fed1 	bl	8005084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032e2:	1d3a      	adds	r2, r7, #4
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fff8 	bl	80042e0 <xTaskCheckForTimeOut>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d124      	bne.n	8003340 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f8:	f000 faa2 	bl	8003840 <prvIsQueueFull>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d018      	beq.n	8003334 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	3310      	adds	r3, #16
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 ff1e 	bl	800414c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003312:	f000 fa2d 	bl	8003770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003316:	f000 fd53 	bl	8003dc0 <xTaskResumeAll>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f47f af7c 	bne.w	800321a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <xQueueGenericSend+0x1f8>)
 8003324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	e772      	b.n	800321a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003336:	f000 fa1b 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800333a:	f000 fd41 	bl	8003dc0 <xTaskResumeAll>
 800333e:	e76c      	b.n	800321a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003342:	f000 fa15 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003346:	f000 fd3b 	bl	8003dc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800334a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3738      	adds	r7, #56	; 0x38
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b090      	sub	sp, #64	; 0x40
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <xQueueGenericSendFromISR+0x3c>
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGenericSendFromISR+0x40>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <xQueueGenericSendFromISR+0x42>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d103      	bne.n	80033c2 <xQueueGenericSendFromISR+0x6a>
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <xQueueGenericSendFromISR+0x6e>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xQueueGenericSendFromISR+0x70>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	623b      	str	r3, [r7, #32]
}
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033e2:	f001 ff01 	bl	80051e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033e6:	f3ef 8211 	mrs	r2, BASEPRI
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	61fa      	str	r2, [r7, #28]
 80033fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <xQueueGenericSendFromISR+0xbc>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d12f      	bne.n	8003474 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800342a:	f000 f911 	bl	8003650 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800342e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d112      	bne.n	800345e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d016      	beq.n	800346e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	3324      	adds	r3, #36	; 0x24
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fed1 	bl	80041ec <xTaskRemoveFromEventList>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e007      	b.n	800346e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800345e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003462:	3301      	adds	r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	b25a      	sxtb	r2, r3
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800346e:	2301      	movs	r3, #1
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003472:	e001      	b.n	8003478 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003474:	2300      	movs	r3, #0
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003482:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003486:	4618      	mov	r0, r3
 8003488:	3740      	adds	r7, #64	; 0x40
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	; 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <xQueueReceive+0x30>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	623b      	str	r3, [r7, #32]
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <xQueueReceive+0x3e>
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <xQueueReceive+0x42>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueReceive+0x44>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueReceive+0x5e>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61fb      	str	r3, [r7, #28]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ee:	f001 f83b 	bl	8004568 <xTaskGetSchedulerState>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <xQueueReceive+0x6e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueReceive+0x72>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueReceive+0x74>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueReceive+0x8e>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351e:	f001 fd81 	bl	8005024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01f      	beq.n	800356e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003532:	f000 f8f7 	bl	8003724 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00f      	beq.n	8003566 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	3310      	adds	r3, #16
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fe4e 	bl	80041ec <xTaskRemoveFromEventList>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <xQueueReceive+0x1bc>)
 8003558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003566:	f001 fd8d 	bl	8005084 <vPortExitCritical>
				return pdPASS;
 800356a:	2301      	movs	r3, #1
 800356c:	e069      	b.n	8003642 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003574:	f001 fd86 	bl	8005084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003578:	2300      	movs	r3, #0
 800357a:	e062      	b.n	8003642 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003582:	f107 0310 	add.w	r3, r7, #16
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fe94 	bl	80042b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003590:	f001 fd78 	bl	8005084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003594:	f000 fc06 	bl	8003da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003598:	f001 fd44 	bl	8005024 <vPortEnterCritical>
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d103      	bne.n	80035b2 <xQueueReceive+0x122>
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d103      	bne.n	80035c8 <xQueueReceive+0x138>
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c8:	f001 fd5c 	bl	8005084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035cc:	1d3a      	adds	r2, r7, #4
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fe83 	bl	80042e0 <xTaskCheckForTimeOut>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d123      	bne.n	8003628 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e2:	f000 f917 	bl	8003814 <prvIsQueueEmpty>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	3324      	adds	r3, #36	; 0x24
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fda9 	bl	800414c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035fc:	f000 f8b8 	bl	8003770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003600:	f000 fbde 	bl	8003dc0 <xTaskResumeAll>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d189      	bne.n	800351e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <xQueueReceive+0x1bc>)
 800360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	e780      	b.n	800351e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800361c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361e:	f000 f8a7 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003622:	f000 fbcd 	bl	8003dc0 <xTaskResumeAll>
 8003626:	e77a      	b.n	800351e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362a:	f000 f8a1 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362e:	f000 fbc7 	bl	8003dc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003634:	f000 f8ee 	bl	8003814 <prvIsQueueEmpty>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f43f af6f 	beq.w	800351e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003642:	4618      	mov	r0, r3
 8003644:	3730      	adds	r7, #48	; 0x30
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14d      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 ff92 	bl	80045a4 <xTaskPriorityDisinherit>
 8003680:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e043      	b.n	8003712 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d119      	bne.n	80036c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6858      	ldr	r0, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	461a      	mov	r2, r3
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	f001 fff2 	bl	8005684 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d32b      	bcc.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e026      	b.n	8003712 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68d8      	ldr	r0, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	f001 ffd8 	bl	8005684 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	425b      	negs	r3, r3
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	425b      	negs	r3, r3
 80036fa:	441a      	add	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d105      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	441a      	add	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d303      	bcc.n	8003758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68d9      	ldr	r1, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f001 ff8e 	bl	8005684 <memcpy>
	}
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003778:	f001 fc54 	bl	8005024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003784:	e011      	b.n	80037aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3324      	adds	r3, #36	; 0x24
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fd2a 	bl	80041ec <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800379e:	f000 fe01 	bl	80043a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dce9      	bgt.n	8003786 <prvUnlockQueue+0x16>
 80037b2:	e000      	b.n	80037b6 <prvUnlockQueue+0x46>
					break;
 80037b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037be:	f001 fc61 	bl	8005084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c2:	f001 fc2f 	bl	8005024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ce:	e011      	b.n	80037f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fd05 	bl	80041ec <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e8:	f000 fddc 	bl	80043a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dce9      	bgt.n	80037d0 <prvUnlockQueue+0x60>
 80037fc:	e000      	b.n	8003800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003808:	f001 fc3c 	bl	8005084 <vPortExitCritical>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800381c:	f001 fc02 	bl	8005024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f001 fc27 	bl	8005084 <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003848:	f001 fbec 	bl	8005024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	429a      	cmp	r2, r3
 8003856:	d102      	bne.n	800385e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f001 fc0f 	bl	8005084 <vPortExitCritical>

	return xReturn;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e014      	b.n	80038aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003880:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <vQueueAddToRegistry+0x50>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <vQueueAddToRegistry+0x50>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <vQueueAddToRegistry+0x50>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038a2:	e006      	b.n	80038b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d9e7      	bls.n	8003880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000854 	.word	0x20000854

080038c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038d4:	f001 fba6 	bl	8005024 <vPortEnterCritical>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d103      	bne.n	80038ee <vQueueWaitForMessageRestricted+0x2a>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d103      	bne.n	8003904 <vQueueWaitForMessageRestricted+0x40>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003904:	f001 fbbe 	bl	8005084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fc3b 	bl	8004194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff26 	bl	8003770 <prvUnlockQueue>
	}
 8003924:	bf00      	nop
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08e      	sub	sp, #56	; 0x38
 8003930:	af04      	add	r7, sp, #16
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623b      	str	r3, [r7, #32]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <xTaskCreateStatic+0x46>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	61fb      	str	r3, [r7, #28]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003972:	235c      	movs	r3, #92	; 0x5c
 8003974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b5c      	cmp	r3, #92	; 0x5c
 800397a:	d00a      	beq.n	8003992 <xTaskCreateStatic+0x66>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	61bb      	str	r3, [r7, #24]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003992:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01e      	beq.n	80039d8 <xTaskCreateStatic+0xac>
 800399a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039b2:	2300      	movs	r3, #0
 80039b4:	9303      	str	r3, [sp, #12]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	9302      	str	r3, [sp, #8]
 80039ba:	f107 0314 	add.w	r3, r7, #20
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f850 	bl	8003a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039d2:	f000 f8dd 	bl	8003b90 <prvAddNewTaskToReadyList>
 80039d6:	e001      	b.n	80039dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039dc:	697b      	ldr	r3, [r7, #20]
	}
 80039de:	4618      	mov	r0, r3
 80039e0:	3728      	adds	r7, #40	; 0x28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b08c      	sub	sp, #48	; 0x30
 80039ea:	af04      	add	r7, sp, #16
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fc34 	bl	8005268 <pvPortMalloc>
 8003a00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a08:	205c      	movs	r0, #92	; 0x5c
 8003a0a:	f001 fc2d 	bl	8005268 <pvPortMalloc>
 8003a0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1c:	e005      	b.n	8003a2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f001 fcee 	bl	8005400 <vPortFree>
 8003a24:	e001      	b.n	8003a2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9303      	str	r3, [sp, #12]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	9302      	str	r3, [sp, #8]
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f80e 	bl	8003a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a54:	69f8      	ldr	r0, [r7, #28]
 8003a56:	f000 f89b 	bl	8003b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e002      	b.n	8003a66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a66:	69bb      	ldr	r3, [r7, #24]
	}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	21a5      	movs	r1, #165	; 0xa5
 8003a8a:	f001 fe09 	bl	80056a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f023 0307 	bic.w	r3, r3, #7
 8003aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	617b      	str	r3, [r7, #20]
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01f      	beq.n	8003b0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e012      	b.n	8003afa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	7819      	ldrb	r1, [r3, #0]
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3334      	adds	r3, #52	; 0x34
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d9e9      	bls.n	8003ad4 <prvInitialiseNewTask+0x64>
 8003b00:	e000      	b.n	8003b04 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b0c:	e003      	b.n	8003b16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	2b37      	cmp	r3, #55	; 0x37
 8003b1a:	d901      	bls.n	8003b20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b1c:	2337      	movs	r3, #55	; 0x37
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	3304      	adds	r3, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f978 	bl	8002e2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	3318      	adds	r3, #24
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff f973 	bl	8002e2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	68f9      	ldr	r1, [r7, #12]
 8003b6e:	69b8      	ldr	r0, [r7, #24]
 8003b70:	f001 f928 	bl	8004dc4 <pxPortInitialiseStack>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b86:	bf00      	nop
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b98:	f001 fa44 	bl	8005024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <prvAddNewTaskToReadyList+0xc4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <prvAddNewTaskToReadyList+0xc4>)
 8003ba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <prvAddNewTaskToReadyList+0xc8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bae:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <prvAddNewTaskToReadyList+0xc8>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <prvAddNewTaskToReadyList+0xc4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d110      	bne.n	8003bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bbc:	f000 fc16 	bl	80043ec <prvInitialiseTaskLists>
 8003bc0:	e00d      	b.n	8003bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bc2:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <prvAddNewTaskToReadyList+0xcc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bca:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <prvAddNewTaskToReadyList+0xc8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d802      	bhi.n	8003bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <prvAddNewTaskToReadyList+0xc8>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <prvAddNewTaskToReadyList+0xd0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <prvAddNewTaskToReadyList+0xd0>)
 8003be6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <prvAddNewTaskToReadyList+0xd0>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <prvAddNewTaskToReadyList+0xd4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d903      	bls.n	8003c04 <prvAddNewTaskToReadyList+0x74>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <prvAddNewTaskToReadyList+0xd4>)
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <prvAddNewTaskToReadyList+0xd8>)
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7ff f913 	bl	8002e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c20:	f001 fa30 	bl	8005084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <prvAddNewTaskToReadyList+0xcc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00e      	beq.n	8003c4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <prvAddNewTaskToReadyList+0xc8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d207      	bcs.n	8003c4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <prvAddNewTaskToReadyList+0xdc>)
 8003c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000d68 	.word	0x20000d68
 8003c58:	20000894 	.word	0x20000894
 8003c5c:	20000d74 	.word	0x20000d74
 8003c60:	20000d84 	.word	0x20000d84
 8003c64:	20000d70 	.word	0x20000d70
 8003c68:	20000898 	.word	0x20000898
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <vTaskDelay+0x60>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <vTaskDelay+0x30>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	60bb      	str	r3, [r7, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ca0:	f000 f880 	bl	8003da4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fcea 	bl	8004680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cac:	f000 f888 	bl	8003dc0 <xTaskResumeAll>
 8003cb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <vTaskDelay+0x64>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000d90 	.word	0x20000d90
 8003cd4:	e000ed04 	.word	0xe000ed04

08003cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ce6:	463a      	mov	r2, r7
 8003ce8:	1d39      	adds	r1, r7, #4
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff f848 	bl	8002d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	9202      	str	r2, [sp, #8]
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2300      	movs	r3, #0
 8003d04:	460a      	mov	r2, r1
 8003d06:	4921      	ldr	r1, [pc, #132]	; (8003d8c <vTaskStartScheduler+0xb4>)
 8003d08:	4821      	ldr	r0, [pc, #132]	; (8003d90 <vTaskStartScheduler+0xb8>)
 8003d0a:	f7ff fe0f 	bl	800392c <xTaskCreateStatic>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a20      	ldr	r2, [pc, #128]	; (8003d94 <vTaskStartScheduler+0xbc>)
 8003d12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <vTaskStartScheduler+0xbc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e001      	b.n	8003d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d2c:	f000 fcfc 	bl	8004728 <xTimerCreateTimerTask>
 8003d30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d116      	bne.n	8003d66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	613b      	str	r3, [r7, #16]
}
 8003d4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <vTaskStartScheduler+0xc0>)
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <vTaskStartScheduler+0xc4>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <vTaskStartScheduler+0xc8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d60:	f001 f8be 	bl	8004ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d64:	e00e      	b.n	8003d84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d10a      	bne.n	8003d84 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	60fb      	str	r3, [r7, #12]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <vTaskStartScheduler+0xaa>
}
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	080056d4 	.word	0x080056d4
 8003d90:	080043bd 	.word	0x080043bd
 8003d94:	20000d8c 	.word	0x20000d8c
 8003d98:	20000d88 	.word	0x20000d88
 8003d9c:	20000d74 	.word	0x20000d74
 8003da0:	20000d6c 	.word	0x20000d6c

08003da4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <vTaskSuspendAll+0x18>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <vTaskSuspendAll+0x18>)
 8003db0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000d90 	.word	0x20000d90

08003dc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dce:	4b42      	ldr	r3, [pc, #264]	; (8003ed8 <xTaskResumeAll+0x118>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xTaskResumeAll+0x2c>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	603b      	str	r3, [r7, #0]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dec:	f001 f91a 	bl	8005024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <xTaskResumeAll+0x118>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <xTaskResumeAll+0x118>)
 8003df8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfa:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <xTaskResumeAll+0x118>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d162      	bne.n	8003ec8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e02:	4b36      	ldr	r3, [pc, #216]	; (8003edc <xTaskResumeAll+0x11c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d05e      	beq.n	8003ec8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e0a:	e02f      	b.n	8003e6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <xTaskResumeAll+0x120>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f871 	bl	8002f00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f86c 	bl	8002f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <xTaskResumeAll+0x124>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d903      	bls.n	8003e3c <xTaskResumeAll+0x7c>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <xTaskResumeAll+0x124>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <xTaskResumeAll+0x128>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fe fff7 	bl	8002e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <xTaskResumeAll+0x12c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <xTaskResumeAll+0x130>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <xTaskResumeAll+0x120>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1cb      	bne.n	8003e0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e7a:	f000 fb55 	bl	8004528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <xTaskResumeAll+0x134>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e8a:	f000 f847 	bl	8003f1c <xTaskIncrementTick>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <xTaskResumeAll+0x130>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f1      	bne.n	8003e8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <xTaskResumeAll+0x134>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <xTaskResumeAll+0x130>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <xTaskResumeAll+0x138>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ec8:	f001 f8dc 	bl	8005084 <vPortExitCritical>

	return xAlreadyYielded;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000d90 	.word	0x20000d90
 8003edc:	20000d68 	.word	0x20000d68
 8003ee0:	20000d28 	.word	0x20000d28
 8003ee4:	20000d70 	.word	0x20000d70
 8003ee8:	20000898 	.word	0x20000898
 8003eec:	20000894 	.word	0x20000894
 8003ef0:	20000d7c 	.word	0x20000d7c
 8003ef4:	20000d78 	.word	0x20000d78
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <xTaskGetTickCount+0x1c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f08:	687b      	ldr	r3, [r7, #4]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000d6c 	.word	0x20000d6c

08003f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f26:	4b4f      	ldr	r3, [pc, #316]	; (8004064 <xTaskIncrementTick+0x148>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 808f 	bne.w	800404e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f30:	4b4d      	ldr	r3, [pc, #308]	; (8004068 <xTaskIncrementTick+0x14c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f38:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <xTaskIncrementTick+0x14c>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d120      	bne.n	8003f86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f44:	4b49      	ldr	r3, [pc, #292]	; (800406c <xTaskIncrementTick+0x150>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	603b      	str	r3, [r7, #0]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xTaskIncrementTick+0x46>
 8003f64:	4b41      	ldr	r3, [pc, #260]	; (800406c <xTaskIncrementTick+0x150>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <xTaskIncrementTick+0x154>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3f      	ldr	r2, [pc, #252]	; (800406c <xTaskIncrementTick+0x150>)
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4a3f      	ldr	r2, [pc, #252]	; (8004070 <xTaskIncrementTick+0x154>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <xTaskIncrementTick+0x158>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a3d      	ldr	r2, [pc, #244]	; (8004074 <xTaskIncrementTick+0x158>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	f000 fad1 	bl	8004528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f86:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <xTaskIncrementTick+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d349      	bcc.n	8004024 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f90:	4b36      	ldr	r3, [pc, #216]	; (800406c <xTaskIncrementTick+0x150>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <xTaskIncrementTick+0x15c>)
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	601a      	str	r2, [r3, #0]
					break;
 8003fa2:	e03f      	b.n	8004024 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa4:	4b31      	ldr	r3, [pc, #196]	; (800406c <xTaskIncrementTick+0x150>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d203      	bcs.n	8003fc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fbc:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <xTaskIncrementTick+0x15c>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fc2:	e02f      	b.n	8004024 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe ff99 	bl	8002f00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3318      	adds	r3, #24
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe ff90 	bl	8002f00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <xTaskIncrementTick+0x160>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d903      	bls.n	8003ff4 <xTaskIncrementTick+0xd8>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <xTaskIncrementTick+0x160>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <xTaskIncrementTick+0x164>)
 8004002:	441a      	add	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe ff1b 	bl	8002e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <xTaskIncrementTick+0x168>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	429a      	cmp	r2, r3
 800401c:	d3b8      	bcc.n	8003f90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800401e:	2301      	movs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004022:	e7b5      	b.n	8003f90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004024:	4b17      	ldr	r3, [pc, #92]	; (8004084 <xTaskIncrementTick+0x168>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	4915      	ldr	r1, [pc, #84]	; (8004080 <xTaskIncrementTick+0x164>)
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d901      	bls.n	8004040 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <xTaskIncrementTick+0x16c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e004      	b.n	8004058 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <xTaskIncrementTick+0x170>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <xTaskIncrementTick+0x170>)
 8004056:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004058:	697b      	ldr	r3, [r7, #20]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000d90 	.word	0x20000d90
 8004068:	20000d6c 	.word	0x20000d6c
 800406c:	20000d20 	.word	0x20000d20
 8004070:	20000d24 	.word	0x20000d24
 8004074:	20000d80 	.word	0x20000d80
 8004078:	20000d88 	.word	0x20000d88
 800407c:	20000d70 	.word	0x20000d70
 8004080:	20000898 	.word	0x20000898
 8004084:	20000894 	.word	0x20000894
 8004088:	20000d7c 	.word	0x20000d7c
 800408c:	20000d78 	.word	0x20000d78

08004090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <vTaskSwitchContext+0xa8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800409e:	4b27      	ldr	r3, [pc, #156]	; (800413c <vTaskSwitchContext+0xac>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040a4:	e041      	b.n	800412a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040a6:	4b25      	ldr	r3, [pc, #148]	; (800413c <vTaskSwitchContext+0xac>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <vTaskSwitchContext+0xb0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e010      	b.n	80040d6 <vTaskSwitchContext+0x46>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	607b      	str	r3, [r7, #4]
}
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <vTaskSwitchContext+0x3e>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	491b      	ldr	r1, [pc, #108]	; (8004144 <vTaskSwitchContext+0xb4>)
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0e4      	beq.n	80040b4 <vTaskSwitchContext+0x24>
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <vTaskSwitchContext+0xb4>)
 80040f6:	4413      	add	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3308      	adds	r3, #8
 800410c:	429a      	cmp	r2, r3
 800410e:	d104      	bne.n	800411a <vTaskSwitchContext+0x8a>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <vTaskSwitchContext+0xb8>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4a06      	ldr	r2, [pc, #24]	; (8004140 <vTaskSwitchContext+0xb0>)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6013      	str	r3, [r2, #0]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000d90 	.word	0x20000d90
 800413c:	20000d7c 	.word	0x20000d7c
 8004140:	20000d70 	.word	0x20000d70
 8004144:	20000898 	.word	0x20000898
 8004148:	20000894 	.word	0x20000894

0800414c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	60fb      	str	r3, [r7, #12]
}
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <vTaskPlaceOnEventList+0x44>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3318      	adds	r3, #24
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fe fe87 	bl	8002e8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004180:	2101      	movs	r1, #1
 8004182:	6838      	ldr	r0, [r7, #0]
 8004184:	f000 fa7c 	bl	8004680 <prvAddCurrentTaskToDelayedList>
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000894 	.word	0x20000894

08004194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	617b      	str	r3, [r7, #20]
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3318      	adds	r3, #24
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7fe fe3e 	bl	8002e46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	68b8      	ldr	r0, [r7, #8]
 80041da:	f000 fa51 	bl	8004680 <prvAddCurrentTaskToDelayedList>
	}
 80041de:	bf00      	nop
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000894 	.word	0x20000894

080041ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60fb      	str	r3, [r7, #12]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	3318      	adds	r3, #24
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fe6f 	bl	8002f00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <xTaskRemoveFromEventList+0xb0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11d      	bne.n	8004266 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3304      	adds	r3, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fe66 	bl	8002f00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <xTaskRemoveFromEventList+0xb4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d903      	bls.n	8004248 <xTaskRemoveFromEventList+0x5c>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <xTaskRemoveFromEventList+0xb4>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <xTaskRemoveFromEventList+0xb8>)
 8004256:	441a      	add	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7fe fdf1 	bl	8002e46 <vListInsertEnd>
 8004264:	e005      	b.n	8004272 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3318      	adds	r3, #24
 800426a:	4619      	mov	r1, r3
 800426c:	480e      	ldr	r0, [pc, #56]	; (80042a8 <xTaskRemoveFromEventList+0xbc>)
 800426e:	f7fe fdea 	bl	8002e46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <xTaskRemoveFromEventList+0xc0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d905      	bls.n	800428c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <xTaskRemoveFromEventList+0xc4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e001      	b.n	8004290 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004290:	697b      	ldr	r3, [r7, #20]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000d90 	.word	0x20000d90
 80042a0:	20000d70 	.word	0x20000d70
 80042a4:	20000898 	.word	0x20000898
 80042a8:	20000d28 	.word	0x20000d28
 80042ac:	20000894 	.word	0x20000894
 80042b0:	20000d7c 	.word	0x20000d7c

080042b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <vTaskInternalSetTimeOutState+0x24>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <vTaskInternalSetTimeOutState+0x28>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	605a      	str	r2, [r3, #4]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	20000d80 	.word	0x20000d80
 80042dc:	20000d6c 	.word	0x20000d6c

080042e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	613b      	str	r3, [r7, #16]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60fb      	str	r3, [r7, #12]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004322:	f000 fe7f 	bl	8005024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <xTaskCheckForTimeOut+0xbc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d102      	bne.n	8004346 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e023      	b.n	800438e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <xTaskCheckForTimeOut+0xc0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d007      	beq.n	8004362 <xTaskCheckForTimeOut+0x82>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e015      	b.n	800438e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	d20b      	bcs.n	8004384 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff9b 	bl	80042b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e004      	b.n	800438e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800438a:	2301      	movs	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800438e:	f000 fe79 	bl	8005084 <vPortExitCritical>

	return xReturn;
 8004392:	69fb      	ldr	r3, [r7, #28]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000d6c 	.word	0x20000d6c
 80043a0:	20000d80 	.word	0x20000d80

080043a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <vTaskMissedYield+0x14>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	20000d7c 	.word	0x20000d7c

080043bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043c4:	f000 f852 	bl	800446c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <prvIdleTask+0x28>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d9f9      	bls.n	80043c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <prvIdleTask+0x2c>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043e0:	e7f0      	b.n	80043c4 <prvIdleTask+0x8>
 80043e2:	bf00      	nop
 80043e4:	20000898 	.word	0x20000898
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	e00c      	b.n	8004412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4a12      	ldr	r2, [pc, #72]	; (800444c <prvInitialiseTaskLists+0x60>)
 8004404:	4413      	add	r3, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fcf0 	bl	8002dec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3301      	adds	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b37      	cmp	r3, #55	; 0x37
 8004416:	d9ef      	bls.n	80043f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004418:	480d      	ldr	r0, [pc, #52]	; (8004450 <prvInitialiseTaskLists+0x64>)
 800441a:	f7fe fce7 	bl	8002dec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800441e:	480d      	ldr	r0, [pc, #52]	; (8004454 <prvInitialiseTaskLists+0x68>)
 8004420:	f7fe fce4 	bl	8002dec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004424:	480c      	ldr	r0, [pc, #48]	; (8004458 <prvInitialiseTaskLists+0x6c>)
 8004426:	f7fe fce1 	bl	8002dec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800442a:	480c      	ldr	r0, [pc, #48]	; (800445c <prvInitialiseTaskLists+0x70>)
 800442c:	f7fe fcde 	bl	8002dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004430:	480b      	ldr	r0, [pc, #44]	; (8004460 <prvInitialiseTaskLists+0x74>)
 8004432:	f7fe fcdb 	bl	8002dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <prvInitialiseTaskLists+0x78>)
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <prvInitialiseTaskLists+0x64>)
 800443a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <prvInitialiseTaskLists+0x7c>)
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <prvInitialiseTaskLists+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000898 	.word	0x20000898
 8004450:	20000cf8 	.word	0x20000cf8
 8004454:	20000d0c 	.word	0x20000d0c
 8004458:	20000d28 	.word	0x20000d28
 800445c:	20000d3c 	.word	0x20000d3c
 8004460:	20000d54 	.word	0x20000d54
 8004464:	20000d20 	.word	0x20000d20
 8004468:	20000d24 	.word	0x20000d24

0800446c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004472:	e019      	b.n	80044a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004474:	f000 fdd6 	bl	8005024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	4b10      	ldr	r3, [pc, #64]	; (80044bc <prvCheckTasksWaitingTermination+0x50>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fd3b 	bl	8002f00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <prvCheckTasksWaitingTermination+0x54>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3b01      	subs	r3, #1
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <prvCheckTasksWaitingTermination+0x54>)
 8004492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <prvCheckTasksWaitingTermination+0x58>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3b01      	subs	r3, #1
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <prvCheckTasksWaitingTermination+0x58>)
 800449c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800449e:	f000 fdf1 	bl	8005084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f810 	bl	80044c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <prvCheckTasksWaitingTermination+0x58>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e1      	bne.n	8004474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000d3c 	.word	0x20000d3c
 80044c0:	20000d68 	.word	0x20000d68
 80044c4:	20000d50 	.word	0x20000d50

080044c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ff8e 	bl	8005400 <vPortFree>
				vPortFree( pxTCB );
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 ff8b 	bl	8005400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ea:	e018      	b.n	800451e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d103      	bne.n	80044fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 ff82 	bl	8005400 <vPortFree>
	}
 80044fc:	e00f      	b.n	800451e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004504:	2b02      	cmp	r3, #2
 8004506:	d00a      	beq.n	800451e <prvDeleteTCB+0x56>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <prvDeleteTCB+0x54>
	}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <prvResetNextTaskUnblockTime+0x38>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <prvResetNextTaskUnblockTime+0x3c>)
 800453a:	f04f 32ff 	mov.w	r2, #4294967295
 800453e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004540:	e008      	b.n	8004554 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <prvResetNextTaskUnblockTime+0x38>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a04      	ldr	r2, [pc, #16]	; (8004564 <prvResetNextTaskUnblockTime+0x3c>)
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000d20 	.word	0x20000d20
 8004564:	20000d88 	.word	0x20000d88

08004568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <xTaskGetSchedulerState+0x34>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004576:	2301      	movs	r3, #1
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	e008      	b.n	800458e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <xTaskGetSchedulerState+0x38>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004584:	2302      	movs	r3, #2
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e001      	b.n	800458e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800458e:	687b      	ldr	r3, [r7, #4]
	}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000d74 	.word	0x20000d74
 80045a0:	20000d90 	.word	0x20000d90

080045a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d056      	beq.n	8004668 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <xTaskPriorityDisinherit+0xd0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d00a      	beq.n	80045da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60bb      	str	r3, [r7, #8]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	429a      	cmp	r2, r3
 800460c:	d02c      	beq.n	8004668 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	2b00      	cmp	r3, #0
 8004614:	d128      	bne.n	8004668 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3304      	adds	r3, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fc70 	bl	8002f00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <xTaskPriorityDisinherit+0xd4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d903      	bls.n	8004648 <xTaskPriorityDisinherit+0xa4>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <xTaskPriorityDisinherit+0xd4>)
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4a09      	ldr	r2, [pc, #36]	; (800467c <xTaskPriorityDisinherit+0xd8>)
 8004656:	441a      	add	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fe fbf1 	bl	8002e46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004668:	697b      	ldr	r3, [r7, #20]
	}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000894 	.word	0x20000894
 8004678:	20000d70 	.word	0x20000d70
 800467c:	20000898 	.word	0x20000898

08004680 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <prvAddCurrentTaskToDelayedList+0x90>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <prvAddCurrentTaskToDelayedList+0x94>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3304      	adds	r3, #4
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fc32 	bl	8002f00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d10a      	bne.n	80046ba <prvAddCurrentTaskToDelayedList+0x3a>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046aa:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <prvAddCurrentTaskToDelayedList+0x94>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4819      	ldr	r0, [pc, #100]	; (8004718 <prvAddCurrentTaskToDelayedList+0x98>)
 80046b4:	f7fe fbc7 	bl	8002e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046b8:	e026      	b.n	8004708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <prvAddCurrentTaskToDelayedList+0x94>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d209      	bcs.n	80046e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <prvAddCurrentTaskToDelayedList+0x9c>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3304      	adds	r3, #4
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f7fe fbd5 	bl	8002e8e <vListInsert>
}
 80046e4:	e010      	b.n	8004708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <prvAddCurrentTaskToDelayedList+0x94>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fe fbcb 	bl	8002e8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d202      	bcs.n	8004708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000d6c 	.word	0x20000d6c
 8004714:	20000894 	.word	0x20000894
 8004718:	20000d54 	.word	0x20000d54
 800471c:	20000d24 	.word	0x20000d24
 8004720:	20000d20 	.word	0x20000d20
 8004724:	20000d88 	.word	0x20000d88

08004728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004732:	f000 fb07 	bl	8004d44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <xTimerCreateTimerTask+0x80>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d021      	beq.n	8004782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004746:	1d3a      	adds	r2, r7, #4
 8004748:	f107 0108 	add.w	r1, r7, #8
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fb31 	bl	8002db8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	9202      	str	r2, [sp, #8]
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	2302      	movs	r3, #2
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	460a      	mov	r2, r1
 8004768:	4910      	ldr	r1, [pc, #64]	; (80047ac <xTimerCreateTimerTask+0x84>)
 800476a:	4811      	ldr	r0, [pc, #68]	; (80047b0 <xTimerCreateTimerTask+0x88>)
 800476c:	f7ff f8de 	bl	800392c <xTaskCreateStatic>
 8004770:	4603      	mov	r3, r0
 8004772:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <xTimerCreateTimerTask+0x8c>)
 8004774:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <xTimerCreateTimerTask+0x8c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800477e:	2301      	movs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	613b      	str	r3, [r7, #16]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000dc4 	.word	0x20000dc4
 80047ac:	080056dc 	.word	0x080056dc
 80047b0:	080048ed 	.word	0x080048ed
 80047b4:	20000dc8 	.word	0x20000dc8

080047b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <xTimerGenericCommand+0x98>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d02a      	beq.n	8004844 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	dc18      	bgt.n	8004832 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004800:	f7ff feb2 	bl	8004568 <xTaskGetSchedulerState>
 8004804:	4603      	mov	r3, r0
 8004806:	2b02      	cmp	r3, #2
 8004808:	d109      	bne.n	800481e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <xTimerGenericCommand+0x98>)
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f107 0110 	add.w	r1, r7, #16
 8004812:	2300      	movs	r3, #0
 8004814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004816:	f7fe fca1 	bl	800315c <xQueueGenericSend>
 800481a:	6278      	str	r0, [r7, #36]	; 0x24
 800481c:	e012      	b.n	8004844 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <xTimerGenericCommand+0x98>)
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	f107 0110 	add.w	r1, r7, #16
 8004826:	2300      	movs	r3, #0
 8004828:	2200      	movs	r2, #0
 800482a:	f7fe fc97 	bl	800315c <xQueueGenericSend>
 800482e:	6278      	str	r0, [r7, #36]	; 0x24
 8004830:	e008      	b.n	8004844 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <xTimerGenericCommand+0x98>)
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	f107 0110 	add.w	r1, r7, #16
 800483a:	2300      	movs	r3, #0
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	f7fe fd8b 	bl	8003358 <xQueueGenericSendFromISR>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004846:	4618      	mov	r0, r3
 8004848:	3728      	adds	r7, #40	; 0x28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000dc4 	.word	0x20000dc4

08004854 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <prvProcessExpiredTimer+0x94>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fb47 	bl	8002f00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d022      	beq.n	80048c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	18d1      	adds	r1, r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f000 f8d1 	bl	8004a34 <prvInsertTimerInActiveList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01f      	beq.n	80048d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	2100      	movs	r1, #0
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff ff88 	bl	80047b8 <xTimerGenericCommand>
 80048a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d113      	bne.n	80048d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	6978      	ldr	r0, [r7, #20]
 80048de:	4798      	blx	r3
}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000dbc 	.word	0x20000dbc

080048ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048f4:	f107 0308 	add.w	r3, r7, #8
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f857 	bl	80049ac <prvGetNextExpireTime>
 80048fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4619      	mov	r1, r3
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f803 	bl	8004910 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800490a:	f000 f8d5 	bl	8004ab8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800490e:	e7f1      	b.n	80048f4 <prvTimerTask+0x8>

08004910 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800491a:	f7ff fa43 	bl	8003da4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800491e:	f107 0308 	add.w	r3, r7, #8
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f866 	bl	80049f4 <prvSampleTimeNow>
 8004928:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d130      	bne.n	8004992 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <prvProcessTimerOrBlockTask+0x3c>
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	429a      	cmp	r2, r3
 800493c:	d806      	bhi.n	800494c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800493e:	f7ff fa3f 	bl	8003dc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff85 	bl	8004854 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800494a:	e024      	b.n	8004996 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <prvProcessTimerOrBlockTask+0x90>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <prvProcessTimerOrBlockTask+0x50>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <prvProcessTimerOrBlockTask+0x52>
 8004960:	2300      	movs	r3, #0
 8004962:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <prvProcessTimerOrBlockTask+0x94>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	f7fe ffa7 	bl	80038c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004976:	f7ff fa23 	bl	8003dc0 <xTaskResumeAll>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <prvProcessTimerOrBlockTask+0x98>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
}
 8004990:	e001      	b.n	8004996 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004992:	f7ff fa15 	bl	8003dc0 <xTaskResumeAll>
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000dc0 	.word	0x20000dc0
 80049a4:	20000dc4 	.word	0x20000dc4
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <prvGetNextExpireTime+0x44>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <prvGetNextExpireTime+0x16>
 80049be:	2201      	movs	r2, #1
 80049c0:	e000      	b.n	80049c4 <prvGetNextExpireTime+0x18>
 80049c2:	2200      	movs	r2, #0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <prvGetNextExpireTime+0x44>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e001      	b.n	80049e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049e0:	68fb      	ldr	r3, [r7, #12]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000dbc 	.word	0x20000dbc

080049f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049fc:	f7ff fa7e 	bl	8003efc <xTaskGetTickCount>
 8004a00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <prvSampleTimeNow+0x3c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d205      	bcs.n	8004a18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a0c:	f000 f936 	bl	8004c7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a1e:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <prvSampleTimeNow+0x3c>)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000dcc 	.word	0x20000dcc

08004a34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d812      	bhi.n	8004a80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e01b      	b.n	8004aa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a6e:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <prvInsertTimerInActiveList+0x7c>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fe fa08 	bl	8002e8e <vListInsert>
 8004a7e:	e012      	b.n	8004aa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d206      	bcs.n	8004a96 <prvInsertTimerInActiveList+0x62>
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e007      	b.n	8004aa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <prvInsertTimerInActiveList+0x80>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7fe f9f4 	bl	8002e8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aa6:	697b      	ldr	r3, [r7, #20]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000dc0 	.word	0x20000dc0
 8004ab4:	20000dbc 	.word	0x20000dbc

08004ab8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08e      	sub	sp, #56	; 0x38
 8004abc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004abe:	e0ca      	b.n	8004c56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da18      	bge.n	8004af8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ac6:	1d3b      	adds	r3, r7, #4
 8004ac8:	3304      	adds	r3, #4
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	61fb      	str	r3, [r7, #28]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aee:	6850      	ldr	r0, [r2, #4]
 8004af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af2:	6892      	ldr	r2, [r2, #8]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f2c0 80aa 	blt.w	8004c54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe f9f5 	bl	8002f00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b16:	463b      	mov	r3, r7
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ff6b 	bl	80049f4 <prvSampleTimeNow>
 8004b1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b09      	cmp	r3, #9
 8004b24:	f200 8097 	bhi.w	8004c56 <prvProcessReceivedCommands+0x19e>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <prvProcessReceivedCommands+0x78>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b59 	.word	0x08004b59
 8004b3c:	08004bcd 	.word	0x08004bcd
 8004b40:	08004be1 	.word	0x08004be1
 8004b44:	08004c2b 	.word	0x08004c2b
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b59 	.word	0x08004b59
 8004b50:	08004bcd 	.word	0x08004bcd
 8004b54:	08004be1 	.word	0x08004be1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	18d1      	adds	r1, r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b78:	f7ff ff5c 	bl	8004a34 <prvInsertTimerInActiveList>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d069      	beq.n	8004c56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05e      	beq.n	8004c56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	441a      	add	r2, r3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004baa:	f7ff fe05 	bl	80047b8 <xTimerGenericCommand>
 8004bae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d14f      	bne.n	8004c56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	61bb      	str	r3, [r7, #24]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bde:	e03a      	b.n	8004c56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	617b      	str	r3, [r7, #20]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	18d1      	adds	r1, r2, r3
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c24:	f7ff ff06 	bl	8004a34 <prvInsertTimerInActiveList>
					break;
 8004c28:	e015      	b.n	8004c56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3a:	f000 fbe1 	bl	8005400 <vPortFree>
 8004c3e:	e00a      	b.n	8004c56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c52:	e000      	b.n	8004c56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <prvProcessReceivedCommands+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1d39      	adds	r1, r7, #4
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fc16 	bl	8003490 <xQueueReceive>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f47f af2a 	bne.w	8004ac0 <prvProcessReceivedCommands+0x8>
	}
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3730      	adds	r7, #48	; 0x30
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000dc4 	.word	0x20000dc4

08004c7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c82:	e048      	b.n	8004d16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <prvSwitchTimerLists+0xc0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <prvSwitchTimerLists+0xc0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe f92f 	bl	8002f00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02e      	beq.n	8004d16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d90e      	bls.n	8004ce8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cd6:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <prvSwitchTimerLists+0xc0>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe f8d4 	bl	8002e8e <vListInsert>
 8004ce6:	e016      	b.n	8004d16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2300      	movs	r3, #0
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff fd60 	bl	80047b8 <xTimerGenericCommand>
 8004cf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	603b      	str	r3, [r7, #0]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <prvSwitchTimerLists+0xc0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1b1      	bne.n	8004c84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <prvSwitchTimerLists+0xc0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <prvSwitchTimerLists+0xc4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <prvSwitchTimerLists+0xc0>)
 8004d2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d2e:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <prvSwitchTimerLists+0xc4>)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6013      	str	r3, [r2, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000dbc 	.word	0x20000dbc
 8004d40:	20000dc0 	.word	0x20000dc0

08004d44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d4a:	f000 f96b 	bl	8005024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <prvCheckForValidListAndQueue+0x60>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d120      	bne.n	8004d98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d56:	4814      	ldr	r0, [pc, #80]	; (8004da8 <prvCheckForValidListAndQueue+0x64>)
 8004d58:	f7fe f848 	bl	8002dec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d5c:	4813      	ldr	r0, [pc, #76]	; (8004dac <prvCheckForValidListAndQueue+0x68>)
 8004d5e:	f7fe f845 	bl	8002dec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d62:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <prvCheckForValidListAndQueue+0x6c>)
 8004d64:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <prvCheckForValidListAndQueue+0x64>)
 8004d66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d68:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <prvCheckForValidListAndQueue+0x70>)
 8004d6a:	4a10      	ldr	r2, [pc, #64]	; (8004dac <prvCheckForValidListAndQueue+0x68>)
 8004d6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <prvCheckForValidListAndQueue+0x74>)
 8004d74:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <prvCheckForValidListAndQueue+0x78>)
 8004d76:	2110      	movs	r1, #16
 8004d78:	200a      	movs	r0, #10
 8004d7a:	f7fe f953 	bl	8003024 <xQueueGenericCreateStatic>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <prvCheckForValidListAndQueue+0x60>)
 8004d82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <prvCheckForValidListAndQueue+0x60>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <prvCheckForValidListAndQueue+0x60>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	490b      	ldr	r1, [pc, #44]	; (8004dc0 <prvCheckForValidListAndQueue+0x7c>)
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fd6c 	bl	8003870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d98:	f000 f974 	bl	8005084 <vPortExitCritical>
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000dc4 	.word	0x20000dc4
 8004da8:	20000d94 	.word	0x20000d94
 8004dac:	20000da8 	.word	0x20000da8
 8004db0:	20000dbc 	.word	0x20000dbc
 8004db4:	20000dc0 	.word	0x20000dc0
 8004db8:	20000e70 	.word	0x20000e70
 8004dbc:	20000dd0 	.word	0x20000dd0
 8004dc0:	080056e4 	.word	0x080056e4

08004dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3b04      	subs	r3, #4
 8004dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b04      	subs	r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 0201 	bic.w	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b04      	subs	r3, #4
 8004df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004df4:	4a0c      	ldr	r2, [pc, #48]	; (8004e28 <pxPortInitialiseStack+0x64>)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b14      	subs	r3, #20
 8004dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f06f 0202 	mvn.w	r2, #2
 8004e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3b20      	subs	r3, #32
 8004e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	08004e2d 	.word	0x08004e2d

08004e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <prvTaskExitError+0x54>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d00a      	beq.n	8004e56 <prvTaskExitError+0x2a>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <prvTaskExitError+0x28>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60bb      	str	r3, [r7, #8]
}
 8004e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e6a:	bf00      	nop
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0fc      	beq.n	8004e6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	2000000c 	.word	0x2000000c
	...

08004e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <pxCurrentTCBConst2>)
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	6808      	ldr	r0, [r1, #0]
 8004e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	f380 8809 	msr	PSP, r0
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8811 	msr	BASEPRI, r0
 8004eaa:	4770      	bx	lr
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst2>:
 8004eb0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004eb8:	4808      	ldr	r0, [pc, #32]	; (8004edc <prvPortStartFirstTask+0x24>)
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	6800      	ldr	r0, [r0, #0]
 8004ebe:	f380 8808 	msr	MSP, r0
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8814 	msr	CONTROL, r0
 8004eca:	b662      	cpsie	i
 8004ecc:	b661      	cpsie	f
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	df00      	svc	0
 8004ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eda:	bf00      	nop
 8004edc:	e000ed08 	.word	0xe000ed08

08004ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ee6:	4b46      	ldr	r3, [pc, #280]	; (8005000 <xPortStartScheduler+0x120>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a46      	ldr	r2, [pc, #280]	; (8005004 <xPortStartScheduler+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10a      	bne.n	8004f06 <xPortStartScheduler+0x26>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <xPortStartScheduler+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <xPortStartScheduler+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x46>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <xPortStartScheduler+0x12c>)
 8004f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4b31      	ldr	r3, [pc, #196]	; (8005010 <xPortStartScheduler+0x130>)
 8004f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <xPortStartScheduler+0x134>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f54:	e009      	b.n	8004f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <xPortStartScheduler+0x134>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <xPortStartScheduler+0x134>)
 8004f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d0ef      	beq.n	8004f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d00a      	beq.n	8004f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60bb      	str	r3, [r7, #8]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <xPortStartScheduler+0x134>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <xPortStartScheduler+0x134>)
 8004fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <xPortStartScheduler+0x134>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <xPortStartScheduler+0x134>)
 8004fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <xPortStartScheduler+0x138>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <xPortStartScheduler+0x138>)
 8004fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <xPortStartScheduler+0x138>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a14      	ldr	r2, [pc, #80]	; (8005018 <xPortStartScheduler+0x138>)
 8004fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fce:	f000 f8dd 	bl	800518c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <xPortStartScheduler+0x13c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fd8:	f000 f8fc 	bl	80051d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <xPortStartScheduler+0x140>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <xPortStartScheduler+0x140>)
 8004fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fe8:	f7ff ff66 	bl	8004eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fec:	f7ff f850 	bl	8004090 <vTaskSwitchContext>
	prvTaskExitError();
 8004ff0:	f7ff ff1c 	bl	8004e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00
 8005004:	410fc271 	.word	0x410fc271
 8005008:	410fc270 	.word	0x410fc270
 800500c:	e000e400 	.word	0xe000e400
 8005010:	20000ec0 	.word	0x20000ec0
 8005014:	20000ec4 	.word	0x20000ec4
 8005018:	e000ed20 	.word	0xe000ed20
 800501c:	2000000c 	.word	0x2000000c
 8005020:	e000ef34 	.word	0xe000ef34

08005024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <vPortEnterCritical+0x58>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <vPortEnterCritical+0x58>)
 8005046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <vPortEnterCritical+0x58>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10f      	bne.n	8005070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <vPortEnterCritical+0x5c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <vPortEnterCritical+0x4c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	603b      	str	r3, [r7, #0]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <vPortEnterCritical+0x4a>
	}
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	2000000c 	.word	0x2000000c
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <vPortExitCritical+0x50>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <vPortExitCritical+0x24>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	607b      	str	r3, [r7, #4]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <vPortExitCritical+0x50>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <vPortExitCritical+0x50>)
 80050b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <vPortExitCritical+0x50>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <vPortExitCritical+0x42>
 80050ba:	2300      	movs	r3, #0
 80050bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f383 8811 	msr	BASEPRI, r3
}
 80050c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
	...

080050e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050e0:	f3ef 8009 	mrs	r0, PSP
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <pxCurrentTCBConst>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f01e 0f10 	tst.w	lr, #16
 80050f0:	bf08      	it	eq
 80050f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	6010      	str	r0, [r2, #0]
 80050fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005104:	f380 8811 	msr	BASEPRI, r0
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f7fe ffbe 	bl	8004090 <vTaskSwitchContext>
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f380 8811 	msr	BASEPRI, r0
 800511c:	bc09      	pop	{r0, r3}
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	6808      	ldr	r0, [r1, #0]
 8005122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005126:	f01e 0f10 	tst.w	lr, #16
 800512a:	bf08      	it	eq
 800512c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005130:	f380 8809 	msr	PSP, r0
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst>:
 8005140:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005162:	f7fe fedb 	bl	8003f1c <xTaskIncrementTick>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <xPortSysTickHandler+0x40>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <vPortSetupTimerInterrupt+0x38>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <vPortSetupTimerInterrupt+0x3c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <vPortSetupTimerInterrupt+0x40>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <vPortSetupTimerInterrupt+0x44>)
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010
 80051c4:	e000e018 	.word	0xe000e018
 80051c8:	20000000 	.word	0x20000000
 80051cc:	10624dd3 	.word	0x10624dd3
 80051d0:	e000e014 	.word	0xe000e014

080051d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051e4 <vPortEnableVFP+0x10>
 80051d8:	6801      	ldr	r1, [r0, #0]
 80051da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051de:	6001      	str	r1, [r0, #0]
 80051e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051e2:	bf00      	nop
 80051e4:	e000ed88 	.word	0xe000ed88

080051e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051ee:	f3ef 8305 	mrs	r3, IPSR
 80051f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d914      	bls.n	8005224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <vPortValidateInterruptPriority+0x70>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <vPortValidateInterruptPriority+0x74>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	7afa      	ldrb	r2, [r7, #11]
 800520a:	429a      	cmp	r2, r3
 800520c:	d20a      	bcs.n	8005224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <vPortValidateInterruptPriority+0x78>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <vPortValidateInterruptPriority+0x7c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d90a      	bls.n	800524a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	603b      	str	r3, [r7, #0]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <vPortValidateInterruptPriority+0x60>
	}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e3f0 	.word	0xe000e3f0
 800525c:	20000ec0 	.word	0x20000ec0
 8005260:	e000ed0c 	.word	0xe000ed0c
 8005264:	20000ec4 	.word	0x20000ec4

08005268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005274:	f7fe fd96 	bl	8003da4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005278:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <pvPortMalloc+0x180>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005280:	f000 f920 	bl	80054c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <pvPortMalloc+0x184>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 8093 	bne.w	80053b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01d      	beq.n	80052d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005298:	2208      	movs	r2, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	3308      	adds	r3, #8
 80052b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <pvPortMalloc+0x6c>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d06e      	beq.n	80053b8 <pvPortMalloc+0x150>
 80052da:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <pvPortMalloc+0x188>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d869      	bhi.n	80053b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <pvPortMalloc+0x18c>)
 80052e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <pvPortMalloc+0x18c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ee:	e004      	b.n	80052fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <pvPortMalloc+0xa4>
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f1      	bne.n	80052f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <pvPortMalloc+0x180>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	429a      	cmp	r2, r3
 8005314:	d050      	beq.n	80053b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2208      	movs	r2, #8
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	2308      	movs	r3, #8
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	429a      	cmp	r2, r3
 8005336:	d91f      	bls.n	8005378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <pvPortMalloc+0xf8>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	613b      	str	r3, [r7, #16]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005372:	69b8      	ldr	r0, [r7, #24]
 8005374:	f000 f908 	bl	8005588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <pvPortMalloc+0x188>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <pvPortMalloc+0x188>)
 8005384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <pvPortMalloc+0x188>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <pvPortMalloc+0x190>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d203      	bcs.n	800539a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <pvPortMalloc+0x188>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <pvPortMalloc+0x190>)
 8005398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <pvPortMalloc+0x184>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <pvPortMalloc+0x194>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <pvPortMalloc+0x194>)
 80053b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053b8:	f7fe fd02 	bl	8003dc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <pvPortMalloc+0x174>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60fb      	str	r3, [r7, #12]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <pvPortMalloc+0x172>
	return pvReturn;
 80053dc:	69fb      	ldr	r3, [r7, #28]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20004ad0 	.word	0x20004ad0
 80053ec:	20004ae4 	.word	0x20004ae4
 80053f0:	20004ad4 	.word	0x20004ad4
 80053f4:	20004ac8 	.word	0x20004ac8
 80053f8:	20004ad8 	.word	0x20004ad8
 80053fc:	20004adc 	.word	0x20004adc

08005400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04d      	beq.n	80054ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005412:	2308      	movs	r3, #8
 8005414:	425b      	negs	r3, r3
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <vPortFree+0xb8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <vPortFree+0x44>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <vPortFree+0x62>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	60bb      	str	r3, [r7, #8]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <vPortFree+0xb8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <vPortFree+0xb8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005488:	f7fe fc8c 	bl	8003da4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <vPortFree+0xbc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4413      	add	r3, r2
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <vPortFree+0xbc>)
 8005498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f000 f874 	bl	8005588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <vPortFree+0xc0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <vPortFree+0xc0>)
 80054a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054aa:	f7fe fc89 	bl	8003dc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20004ae4 	.word	0x20004ae4
 80054bc:	20004ad4 	.word	0x20004ad4
 80054c0:	20004ae0 	.word	0x20004ae0

080054c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <prvHeapInit+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3307      	adds	r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <prvHeapInit+0xac>)
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <prvHeapInit+0xb0>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <prvHeapInit+0xb0>)
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <prvHeapInit+0xb4>)
 8005524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <prvHeapInit+0xb4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvHeapInit+0xb4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <prvHeapInit+0xb8>)
 8005552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <prvHeapInit+0xbc>)
 800555a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <prvHeapInit+0xc0>)
 800555e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000ec8 	.word	0x20000ec8
 8005574:	20004ac8 	.word	0x20004ac8
 8005578:	20004ad0 	.word	0x20004ad0
 800557c:	20004ad8 	.word	0x20004ad8
 8005580:	20004ad4 	.word	0x20004ad4
 8005584:	20004ae4 	.word	0x20004ae4

08005588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <prvInsertBlockIntoFreeList+0xac>)
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <prvInsertBlockIntoFreeList+0x14>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d8f7      	bhi.n	8005596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d108      	bne.n	80055ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d118      	bne.n	8005610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d00d      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e003      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d002      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20004ac8 	.word	0x20004ac8
 8005638:	20004ad0 	.word	0x20004ad0

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4d0d      	ldr	r5, [pc, #52]	; (8005674 <__libc_init_array+0x38>)
 8005640:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005642:	1b64      	subs	r4, r4, r5
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	2600      	movs	r6, #0
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	4d0b      	ldr	r5, [pc, #44]	; (800567c <__libc_init_array+0x40>)
 800564e:	4c0c      	ldr	r4, [pc, #48]	; (8005680 <__libc_init_array+0x44>)
 8005650:	f000 f82e 	bl	80056b0 <_init>
 8005654:	1b64      	subs	r4, r4, r5
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	2600      	movs	r6, #0
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	08005730 	.word	0x08005730
 8005678:	08005730 	.word	0x08005730
 800567c:	08005730 	.word	0x08005730
 8005680:	08005734 	.word	0x08005734

08005684 <memcpy>:
 8005684:	440a      	add	r2, r1
 8005686:	4291      	cmp	r1, r2
 8005688:	f100 33ff 	add.w	r3, r0, #4294967295
 800568c:	d100      	bne.n	8005690 <memcpy+0xc>
 800568e:	4770      	bx	lr
 8005690:	b510      	push	{r4, lr}
 8005692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569a:	4291      	cmp	r1, r2
 800569c:	d1f9      	bne.n	8005692 <memcpy+0xe>
 800569e:	bd10      	pop	{r4, pc}

080056a0 <memset>:
 80056a0:	4402      	add	r2, r0
 80056a2:	4603      	mov	r3, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d100      	bne.n	80056aa <memset+0xa>
 80056a8:	4770      	bx	lr
 80056aa:	f803 1b01 	strb.w	r1, [r3], #1
 80056ae:	e7f9      	b.n	80056a4 <memset+0x4>

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
