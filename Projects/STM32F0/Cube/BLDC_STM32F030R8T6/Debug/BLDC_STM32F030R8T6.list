
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08004eec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004eec  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cff  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290c  00000000  00000000  00031d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001126d  00000000  00000000  000363b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013faf  00000000  00000000  00047625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066635  00000000  00000000  0005b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003608  00000000  00000000  000c1c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e88 	.word	0x08004e88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004e88 	.word	0x08004e88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 ff8b 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f88d 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9ed 	bl	800060c <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f917 	bl	8000464 <MX_ADC_Init>
  MX_SPI1_Init();
 8000236:	f000 fb51 	bl	80008dc <MX_SPI1_Init>
  MX_TIM1_Init();
 800023a:	f000 fc35 	bl	8000aa8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800023e:	f000 fd0b 	bl	8000c58 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000242:	f000 fdad 	bl	8000da0 <MX_TIM6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000246:	4b3a      	ldr	r3, [pc, #232]	; (8000330 <main+0x110>)
 8000248:	0018      	movs	r0, r3
 800024a:	f002 fd97 	bl	8002d7c <HAL_TIM_Base_Start_IT>
  MX_USART1_UART_Init();
 800024e:	f000 fec7 	bl	8000fe0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <main+0x114>)
 8000254:	0018      	movs	r0, r3
 8000256:	f001 fb93 	bl	8001980 <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800025a:	4b37      	ldr	r3, [pc, #220]	; (8000338 <main+0x118>)
 800025c:	2100      	movs	r1, #0
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fe30 	bl	8002ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000264:	4b34      	ldr	r3, [pc, #208]	; (8000338 <main+0x118>)
 8000266:	2104      	movs	r1, #4
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fe2b 	bl	8002ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800026e:	4b32      	ldr	r3, [pc, #200]	; (8000338 <main+0x118>)
 8000270:	2108      	movs	r1, #8
 8000272:	0018      	movs	r0, r3
 8000274:	f002 fe26 	bl	8002ec4 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000278:	4b2f      	ldr	r3, [pc, #188]	; (8000338 <main+0x118>)
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f003 fcd3 	bl	8003c28 <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000282:	4b2d      	ldr	r3, [pc, #180]	; (8000338 <main+0x118>)
 8000284:	2104      	movs	r1, #4
 8000286:	0018      	movs	r0, r3
 8000288:	f003 fcce 	bl	8003c28 <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800028c:	4b2a      	ldr	r3, [pc, #168]	; (8000338 <main+0x118>)
 800028e:	2108      	movs	r1, #8
 8000290:	0018      	movs	r0, r3
 8000292:	f003 fcc9 	bl	8003c28 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000296:	4b29      	ldr	r3, [pc, #164]	; (800033c <main+0x11c>)
 8000298:	2100      	movs	r1, #0
 800029a:	0018      	movs	r0, r3
 800029c:	f002 fe12 	bl	8002ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002a0:	4b26      	ldr	r3, [pc, #152]	; (800033c <main+0x11c>)
 80002a2:	2104      	movs	r1, #4
 80002a4:	0018      	movs	r0, r3
 80002a6:	f002 fe0d 	bl	8002ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002aa:	4b24      	ldr	r3, [pc, #144]	; (800033c <main+0x11c>)
 80002ac:	2108      	movs	r1, #8
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fe08 	bl	8002ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002b4:	4b21      	ldr	r3, [pc, #132]	; (800033c <main+0x11c>)
 80002b6:	210c      	movs	r1, #12
 80002b8:	0018      	movs	r0, r3
 80002ba:	f002 fe03 	bl	8002ec4 <HAL_TIM_PWM_Start>



//	  HAL_ADC_Start(&hadc);
//	  HAL_ADC_PollForConversion(&hadc,500);
	  for(uint8_t i=0;i<5;i++)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	e02e      	b.n	8000324 <main+0x104>
	  {
		  HAL_ADC_Start(&hadc);
 80002c6:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <main+0x114>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f8dd 	bl	8001488 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc,500);
 80002ce:	23fa      	movs	r3, #250	; 0xfa
 80002d0:	005a      	lsls	r2, r3, #1
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0x114>)
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f92a 	bl	8001530 <HAL_ADC_PollForConversion>
		  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc), HAL_ADC_STATE_REG_EOC))
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <main+0x114>)
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fac0 	bl	8001864 <HAL_ADC_GetState>
 80002e4:	0002      	movs	r2, r0
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	401a      	ands	r2, r3
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d112      	bne.n	800031a <main+0xfa>
		  {
			  adc_buf[i] = HAL_ADC_GetValue(&hadc);
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <main+0x114>)
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 f9b2 	bl	8001660 <HAL_ADC_GetValue>
 80002fc:	0002      	movs	r2, r0
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	b2d1      	uxtb	r1, r2
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <main+0x120>)
 8000306:	54d1      	strb	r1, [r2, r3]
			  HAL_UART_Transmit(&huart1,  &adc_buf[i], sizeof(adc_buf[0]), 100);
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781a      	ldrb	r2, [r3, #0]
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <main+0x120>)
 800030e:	18d1      	adds	r1, r2, r3
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <main+0x124>)
 8000312:	2364      	movs	r3, #100	; 0x64
 8000314:	2201      	movs	r2, #1
 8000316:	f003 fe5b 	bl	8003fd0 <HAL_UART_Transmit>
	  for(uint8_t i=0;i<5;i++)
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781a      	ldrb	r2, [r3, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	3201      	adds	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d9cc      	bls.n	80002c6 <main+0xa6>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800032c:	e795      	b.n	800025a <main+0x3a>
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	20000168 	.word	0x20000168
 8000334:	20000034 	.word	0x20000034
 8000338:	200000d8 	.word	0x200000d8
 800033c:	20000120 	.word	0x20000120
 8000340:	20000028 	.word	0x20000028
 8000344:	200001b0 	.word	0x200001b0

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b095      	sub	sp, #84	; 0x54
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	2420      	movs	r4, #32
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2330      	movs	r3, #48	; 0x30
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f004 fd8d 	bl	8004e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035e:	2310      	movs	r3, #16
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	0018      	movs	r0, r3
 8000364:	2310      	movs	r3, #16
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f004 fd85 	bl	8004e78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036e:	003b      	movs	r3, r7
 8000370:	0018      	movs	r0, r3
 8000372:	2310      	movs	r3, #16
 8000374:	001a      	movs	r2, r3
 8000376:	2100      	movs	r1, #0
 8000378:	f004 fd7e 	bl	8004e78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037c:	0021      	movs	r1, r4
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2202      	movs	r2, #2
 8000382:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2201      	movs	r2, #1
 8000388:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2210      	movs	r2, #16
 800038e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2202      	movs	r2, #2
 8000394:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2200      	movs	r2, #0
 800039a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	22a0      	movs	r2, #160	; 0xa0
 80003a0:	0392      	lsls	r2, r2, #14
 80003a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 feb1 	bl	8002114 <HAL_RCC_OscConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003b6:	f000 f828 	bl	800040a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	2110      	movs	r1, #16
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2207      	movs	r2, #7
 80003c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2202      	movs	r2, #2
 80003c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2101      	movs	r1, #1
 80003d8:	0018      	movs	r0, r3
 80003da:	f002 f9b5 	bl	8002748 <HAL_RCC_ClockConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003e2:	f000 f812 	bl	800040a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003e6:	003b      	movs	r3, r7
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f2:	003b      	movs	r3, r7
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 faeb 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003fe:	f000 f804 	bl	800040a <Error_Handler>
  }
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b015      	add	sp, #84	; 0x54
 8000408:	bd90      	pop	{r4, r7, pc}

0800040a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040e:	b672      	cpsid	i
}
 8000410:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000412:	e7fe      	b.n	8000412 <Error_Handler+0x8>

08000414 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	static uint8_t i;
	if(htim == &htim6)
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000420:	429a      	cmp	r2, r3
 8000422:	d113      	bne.n	800044c <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000426:	2101      	movs	r1, #1
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fe57 	bl	80020dc <HAL_GPIO_TogglePin>
		i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000430:	2101      	movs	r1, #1
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fe18 	bl	8002068 <HAL_GPIO_ReadPin>
 8000438:	0003      	movs	r3, r0
 800043a:	001a      	movs	r2, r3
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800043e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, &i, sizeof(i), 100);
 8000440:	4906      	ldr	r1, [pc, #24]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	2201      	movs	r2, #1
 8000448:	f003 fdc2 	bl	8003fd0 <HAL_UART_Transmit>
	}
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000168 	.word	0x20000168
 8000458:	48000800 	.word	0x48000800
 800045c:	20000031 	.word	0x20000031
 8000460:	200001b0 	.word	0x200001b0

08000464 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	0018      	movs	r0, r3
 800046e:	230c      	movs	r3, #12
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f004 fd00 	bl	8004e78 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000478:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <MX_ADC_Init+0x114>)
 800047a:	4a40      	ldr	r2, [pc, #256]	; (800057c <MX_ADC_Init+0x118>)
 800047c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800047e:	4b3e      	ldr	r3, [pc, #248]	; (8000578 <MX_ADC_Init+0x114>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <MX_ADC_Init+0x114>)
 8000486:	2210      	movs	r2, #16
 8000488:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048a:	4b3b      	ldr	r3, [pc, #236]	; (8000578 <MX_ADC_Init+0x114>)
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000490:	4b39      	ldr	r3, [pc, #228]	; (8000578 <MX_ADC_Init+0x114>)
 8000492:	2201      	movs	r2, #1
 8000494:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <MX_ADC_Init+0x114>)
 8000498:	2204      	movs	r2, #4
 800049a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800049c:	4b36      	ldr	r3, [pc, #216]	; (8000578 <MX_ADC_Init+0x114>)
 800049e:	2200      	movs	r2, #0
 80004a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004a2:	4b35      	ldr	r3, [pc, #212]	; (8000578 <MX_ADC_Init+0x114>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004a8:	4b33      	ldr	r3, [pc, #204]	; (8000578 <MX_ADC_Init+0x114>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <MX_ADC_Init+0x114>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b4:	4b30      	ldr	r3, [pc, #192]	; (8000578 <MX_ADC_Init+0x114>)
 80004b6:	22c2      	movs	r2, #194	; 0xc2
 80004b8:	32ff      	adds	r2, #255	; 0xff
 80004ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004bc:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <MX_ADC_Init+0x114>)
 80004be:	2200      	movs	r2, #0
 80004c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <MX_ADC_Init+0x114>)
 80004c4:	2224      	movs	r2, #36	; 0x24
 80004c6:	2100      	movs	r1, #0
 80004c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_ADC_Init+0x114>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d0:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_ADC_Init+0x114>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fe98 	bl	8001208 <HAL_ADC_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004dc:	f7ff ff95 	bl	800040a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2204      	movs	r2, #4
 80004f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_ADC_Init+0x114>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 f8bc 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000504:	f7ff ff81 	bl	800040a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800050e:	1d3a      	adds	r2, r7, #4
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC_Init+0x114>)
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f001 f8af 	bl	8001678 <HAL_ADC_ConfigChannel>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800051e:	f7ff ff74 	bl	800040a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2202      	movs	r2, #2
 8000526:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000528:	1d3a      	adds	r2, r7, #4
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_ADC_Init+0x114>)
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f8a2 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000538:	f7ff ff67 	bl	800040a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2203      	movs	r2, #3
 8000540:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000542:	1d3a      	adds	r2, r7, #4
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_ADC_Init+0x114>)
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f001 f895 	bl	8001678 <HAL_ADC_ConfigChannel>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000552:	f7ff ff5a 	bl	800040a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2211      	movs	r2, #17
 800055a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800055c:	1d3a      	adds	r2, r7, #4
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_ADC_Init+0x114>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f888 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800056c:	f7ff ff4d 	bl	800040a <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b004      	add	sp, #16
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000034 	.word	0x20000034
 800057c:	40012400 	.word	0x40012400

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b08b      	sub	sp, #44	; 0x2c
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	2414      	movs	r4, #20
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	2314      	movs	r3, #20
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f004 fc70 	bl	8004e78 <memset>
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a19      	ldr	r2, [pc, #100]	; (8000604 <HAL_ADC_MspInit+0x84>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d12b      	bne.n	80005fa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_ADC_MspInit+0x88>)
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <HAL_ADC_MspInit+0x88>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0089      	lsls	r1, r1, #2
 80005ac:	430a      	orrs	r2, r1
 80005ae:	619a      	str	r2, [r3, #24]
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_ADC_MspInit+0x88>)
 80005b2:	699a      	ldr	r2, [r3, #24]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_ADC_MspInit+0x88>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HAL_ADC_MspInit+0x88>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_ADC_MspInit+0x88>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2203      	movs	r2, #3
 80005e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	193a      	adds	r2, r7, r4
 80005ee:	2390      	movs	r3, #144	; 0x90
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fbc7 	bl	8001d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b00b      	add	sp, #44	; 0x2c
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40012400 	.word	0x40012400
 8000608:	40021000 	.word	0x40021000

0800060c <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	2414      	movs	r4, #20
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f004 fc2b 	bl	8004e78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4ba6      	ldr	r3, [pc, #664]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4ba5      	ldr	r3, [pc, #660]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0309      	lsls	r1, r1, #12
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4ba2      	ldr	r3, [pc, #648]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	031b      	lsls	r3, r3, #12
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063e:	4b9f      	ldr	r3, [pc, #636]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	4b9e      	ldr	r3, [pc, #632]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	03c9      	lsls	r1, r1, #15
 8000648:	430a      	orrs	r2, r1
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	4b9b      	ldr	r3, [pc, #620]	; (80008bc <MX_GPIO_Init+0x2b0>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	03db      	lsls	r3, r3, #15
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b98      	ldr	r3, [pc, #608]	; (80008bc <MX_GPIO_Init+0x2b0>)
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	4b97      	ldr	r3, [pc, #604]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0289      	lsls	r1, r1, #10
 8000664:	430a      	orrs	r2, r1
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	4b94      	ldr	r3, [pc, #592]	; (80008bc <MX_GPIO_Init+0x2b0>)
 800066a:	695a      	ldr	r2, [r3, #20]
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	029b      	lsls	r3, r3, #10
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b91      	ldr	r3, [pc, #580]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b90      	ldr	r3, [pc, #576]	; (80008bc <MX_GPIO_Init+0x2b0>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	02c9      	lsls	r1, r1, #11
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b8d      	ldr	r3, [pc, #564]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	02db      	lsls	r3, r3, #11
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b8a      	ldr	r3, [pc, #552]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b89      	ldr	r3, [pc, #548]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0349      	lsls	r1, r1, #13
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b86      	ldr	r3, [pc, #536]	; (80008bc <MX_GPIO_Init+0x2b0>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	035b      	lsls	r3, r3, #13
 80006a8:	4013      	ands	r3, r2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 80006ae:	4984      	ldr	r1, [pc, #528]	; (80008c0 <MX_GPIO_Init+0x2b4>)
 80006b0:	4b84      	ldr	r3, [pc, #528]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fcf4 	bl	80020a2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ba:	4b83      	ldr	r3, [pc, #524]	; (80008c8 <MX_GPIO_Init+0x2bc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fcee 	bl	80020a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80006c6:	4981      	ldr	r1, [pc, #516]	; (80008cc <MX_GPIO_Init+0x2c0>)
 80006c8:	4b81      	ldr	r3, [pc, #516]	; (80008d0 <MX_GPIO_Init+0x2c4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fce8 	bl	80020a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	0219      	lsls	r1, r3, #8
 80006d6:	2390      	movs	r3, #144	; 0x90
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	2200      	movs	r2, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fce0 	bl	80020a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	4a7b      	ldr	r2, [pc, #492]	; (80008d4 <MX_GPIO_Init+0x2c8>)
 80006e6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2203      	movs	r2, #3
 80006ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	4a73      	ldr	r2, [pc, #460]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 80006f8:	0019      	movs	r1, r3
 80006fa:	0010      	movs	r0, r2
 80006fc:	f001 fb44 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	22c3      	movs	r2, #195	; 0xc3
 8000704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2203      	movs	r2, #3
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a6c      	ldr	r2, [pc, #432]	; (80008c8 <MX_GPIO_Init+0x2bc>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f001 fb35 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2201      	movs	r2, #1
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	193b      	adds	r3, r7, r4
 8000738:	4a62      	ldr	r2, [pc, #392]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f001 fb23 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2210      	movs	r2, #16
 8000746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800075a:	193b      	adds	r3, r7, r4
 800075c:	4a5a      	ldr	r2, [pc, #360]	; (80008c8 <MX_GPIO_Init+0x2bc>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f001 fb11 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2220      	movs	r2, #32
 800076a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000778:	193b      	adds	r3, r7, r4
 800077a:	4a53      	ldr	r2, [pc, #332]	; (80008c8 <MX_GPIO_Init+0x2bc>)
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f001 fb02 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000784:	0021      	movs	r1, r4
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2210      	movs	r2, #16
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2288      	movs	r2, #136	; 0x88
 8000790:	0352      	lsls	r2, r2, #13
 8000792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	000c      	movs	r4, r1
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a49      	ldr	r2, [pc, #292]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f001 faf0 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007a8:	0021      	movs	r1, r4
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	22e1      	movs	r2, #225	; 0xe1
 80007ae:	0152      	lsls	r2, r2, #5
 80007b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	000c      	movs	r4, r1
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	4a3e      	ldr	r2, [pc, #248]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f001 fadb 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2203      	movs	r2, #3
 80007dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	4a3a      	ldr	r2, [pc, #232]	; (80008d0 <MX_GPIO_Init+0x2c4>)
 80007e8:	0019      	movs	r1, r3
 80007ea:	0010      	movs	r0, r2
 80007ec:	f001 facc 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	4a36      	ldr	r2, [pc, #216]	; (80008cc <MX_GPIO_Init+0x2c0>)
 80007f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	193b      	adds	r3, r7, r4
 800080a:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <MX_GPIO_Init+0x2c4>)
 800080c:	0019      	movs	r1, r3
 800080e:	0010      	movs	r0, r2
 8000810:	f001 faba 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	22c0      	movs	r2, #192	; 0xc0
 8000818:	0152      	lsls	r2, r2, #5
 800081a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2203      	movs	r2, #3
 8000820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	193a      	adds	r2, r7, r4
 800082a:	2390      	movs	r3, #144	; 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 faa9 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000836:	0021      	movs	r1, r4
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0212      	lsls	r2, r2, #8
 800083e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	000c      	movs	r4, r1
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2201      	movs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	193a      	adds	r2, r7, r4
 8000856:	2390      	movs	r3, #144	; 0x90
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fa93 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2204      	movs	r2, #4
 8000868:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2288      	movs	r2, #136	; 0x88
 800086e:	0352      	lsls	r2, r2, #13
 8000870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	000c      	movs	r4, r1
 800087a:	187b      	adds	r3, r7, r1
 800087c:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_GPIO_Init+0x2cc>)
 800087e:	0019      	movs	r1, r3
 8000880:	0010      	movs	r0, r2
 8000882:	f001 fa81 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	22c0      	movs	r2, #192	; 0xc0
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2212      	movs	r2, #18
 8000894:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2203      	movs	r2, #3
 80008a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <MX_GPIO_Init+0x2c4>)
 80008ac:	0019      	movs	r1, r3
 80008ae:	0010      	movs	r0, r2
 80008b0:	f001 fa6a 	bl	8001d88 <HAL_GPIO_Init>

}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b00b      	add	sp, #44	; 0x2c
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	00001c21 	.word	0x00001c21
 80008c4:	48000800 	.word	0x48000800
 80008c8:	48001400 	.word	0x48001400
 80008cc:	00001c04 	.word	0x00001c04
 80008d0:	48000400 	.word	0x48000400
 80008d4:	0000c00e 	.word	0x0000c00e
 80008d8:	48000c00 	.word	0x48000c00

080008dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e8:	2282      	movs	r2, #130	; 0x82
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f6:	22c0      	movs	r2, #192	; 0xc0
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x74>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x74>)
 8000936:	2208      	movs	r2, #8
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_SPI1_Init+0x74>)
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f915 	bl	8002b6c <HAL_SPI_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f7ff fd60 	bl	800040a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000074 	.word	0x20000074
 8000954:	40013000 	.word	0x40013000

08000958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	2414      	movs	r4, #20
 8000962:	193b      	adds	r3, r7, r4
 8000964:	0018      	movs	r0, r3
 8000966:	2314      	movs	r3, #20
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f004 fa84 	bl	8004e78 <memset>
  if(spiHandle->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <HAL_SPI_MspInit+0x90>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d131      	bne.n	80009de <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_SPI_MspInit+0x94>)
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_SPI_MspInit+0x94>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0149      	lsls	r1, r1, #5
 8000984:	430a      	orrs	r2, r1
 8000986:	619a      	str	r2, [r3, #24]
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_SPI_MspInit+0x94>)
 800098a:	699a      	ldr	r2, [r3, #24]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	015b      	lsls	r3, r3, #5
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_SPI_MspInit+0x94>)
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_SPI_MspInit+0x94>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	02c9      	lsls	r1, r1, #11
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_SPI_MspInit+0x94>)
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	02db      	lsls	r3, r3, #11
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009b2:	0021      	movs	r1, r4
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2238      	movs	r2, #56	; 0x38
 80009b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2202      	movs	r2, #2
 80009be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2203      	movs	r2, #3
 80009ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_SPI_MspInit+0x98>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	0010      	movs	r0, r2
 80009da:	f001 f9d5 	bl	8001d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b00b      	add	sp, #44	; 0x2c
 80009e4:	bd90      	pop	{r4, r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40013000 	.word	0x40013000
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	619a      	str	r2, [r3, #24]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	69da      	ldr	r2, [r3, #28]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0549      	lsls	r1, r1, #21
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	61da      	str	r2, [r3, #28]
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_MspInit+0x44>)
 8000a22:	69da      	ldr	r2, [r3, #28]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	055b      	lsls	r3, r3, #21
 8000a28:	4013      	ands	r3, r2
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 fbb6 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <TIM6_IRQHandler+0x14>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 fad8 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000168 	.word	0x20000168

08000a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <USART1_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f003 fb40 	bl	8004110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200001b0 	.word	0x200001b0

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	2348      	movs	r3, #72	; 0x48
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f004 f9dd 	bl	8004e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 f9d5 	bl	8004e78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	2324      	movs	r3, #36	; 0x24
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	231c      	movs	r3, #28
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f004 f9cd 	bl	8004e78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f004 f9c6 	bl	8004e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aec:	4b58      	ldr	r3, [pc, #352]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000aee:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <MX_TIM1_Init+0x1ac>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 8000af2:	4b57      	ldr	r3, [pc, #348]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000af4:	2217      	movs	r2, #23
 8000af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000afe:	4b54      	ldr	r3, [pc, #336]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b00:	2263      	movs	r2, #99	; 0x63
 8000b02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0a:	4b51      	ldr	r3, [pc, #324]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b4f      	ldr	r3, [pc, #316]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b16:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 f8df 	bl	8002cdc <HAL_TIM_Base_Init>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000b22:	f7ff fc72 	bl	800040a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	2148      	movs	r1, #72	; 0x48
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	0152      	lsls	r2, r2, #5
 8000b2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 fc52 	bl	80033e0 <HAL_TIM_ConfigClockSource>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000b40:	f7ff fc63 	bl	800040a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 f964 	bl	8002e14 <HAL_TIM_PWM_Init>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000b50:	f7ff fc5b 	bl	800040a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b62:	187a      	adds	r2, r7, r1
 8000b64:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f003 f8f3 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b72:	f7ff fc4a 	bl	800040a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	2124      	movs	r1, #36	; 0x24
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2260      	movs	r2, #96	; 0x60
 8000b7c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 20;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2214      	movs	r2, #20
 8000b82:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	1879      	adds	r1, r7, r1
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 fb53 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000bb2:	f7ff fc2a 	bl	800040a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb6:	2324      	movs	r3, #36	; 0x24
 8000bb8:	18f9      	adds	r1, r7, r3
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 fb48 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000bc8:	f7ff fc1f 	bl	800040a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bcc:	2324      	movs	r3, #36	; 0x24
 8000bce:	18f9      	adds	r1, r7, r3
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fb3d 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000bde:	f7ff fc14 	bl	800040a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000be2:	2124      	movs	r1, #36	; 0x24
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bea:	1879      	adds	r1, r7, r1
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fb2f 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000bfa:	f7ff fc06 	bl	800040a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 49;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2231      	movs	r2, #49	; 0x31
 8000c14:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0192      	lsls	r2, r2, #6
 8000c22:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2a:	1d3a      	adds	r2, r7, #4
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f003 f8e7 	bl	8003e04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x196>
  {
    Error_Handler();
 8000c3a:	f7ff fbe6 	bl	800040a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <MX_TIM1_Init+0x1a8>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f921 	bl	8000e88 <HAL_TIM_MspPostInit>

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b016      	add	sp, #88	; 0x58
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	200000d8 	.word	0x200000d8
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	2328      	movs	r3, #40	; 0x28
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	0018      	movs	r0, r3
 8000c64:	2310      	movs	r3, #16
 8000c66:	001a      	movs	r2, r3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f004 f905 	bl	8004e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6e:	2320      	movs	r3, #32
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	0018      	movs	r0, r3
 8000c74:	2308      	movs	r3, #8
 8000c76:	001a      	movs	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f004 f8fd 	bl	8004e78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	0018      	movs	r0, r3
 8000c82:	231c      	movs	r3, #28
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f004 f8f6 	bl	8004e78 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c8c:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000c8e:	4a42      	ldr	r2, [pc, #264]	; (8000d98 <MX_TIM3_Init+0x140>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800-1;
 8000c92:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000c94:	4a41      	ldr	r2, [pc, #260]	; (8000d9c <MX_TIM3_Init+0x144>)
 8000c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000ca0:	2264      	movs	r2, #100	; 0x64
 8000ca2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb0:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f002 f812 	bl	8002cdc <HAL_TIM_Base_Init>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cbc:	f7ff fba5 	bl	800040a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	2128      	movs	r1, #40	; 0x28
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	0152      	lsls	r2, r2, #5
 8000cc8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cca:	187a      	adds	r2, r7, r1
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f002 fb85 	bl	80033e0 <HAL_TIM_ConfigClockSource>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000cda:	f7ff fb96 	bl	800040a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f002 f897 	bl	8002e14 <HAL_TIM_PWM_Init>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cea:	f7ff fb8e 	bl	800040a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2120      	movs	r1, #32
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfc:	187a      	adds	r2, r7, r1
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f003 f826 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000d0c:	f7ff fb7d 	bl	800040a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2260      	movs	r2, #96	; 0x60
 8000d14:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	220a      	movs	r2, #10
 8000d1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	1d39      	adds	r1, r7, #4
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f002 fa90 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000d38:	f7ff fb67 	bl	800040a <Error_Handler>
  }
  sConfigOC.Pulse = 15;
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	220f      	movs	r2, #15
 8000d40:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d42:	1d39      	adds	r1, r7, #4
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f002 fa83 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000d52:	f7ff fb5a 	bl	800040a <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	220a      	movs	r2, #10
 8000d5a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d5c:	1d39      	adds	r1, r7, #4
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000d60:	2208      	movs	r2, #8
 8000d62:	0018      	movs	r0, r3
 8000d64:	f002 fa76 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000d6c:	f7ff fb4d 	bl	800040a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d70:	1d39      	adds	r1, r7, #4
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000d74:	220c      	movs	r2, #12
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 fa6c 	bl	8003254 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000d80:	f7ff fb43 	bl	800040a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <MX_TIM3_Init+0x13c>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f87e 	bl	8000e88 <HAL_TIM_MspPostInit>

}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b00e      	add	sp, #56	; 0x38
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000120 	.word	0x20000120
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	000012bf 	.word	0x000012bf

08000da0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_TIM6_Init+0x38>)
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <MX_TIM6_Init+0x3c>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_TIM6_Init+0x38>)
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <MX_TIM6_Init+0x40>)
 8000dae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_TIM6_Init+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_TIM6_Init+0x38>)
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <MX_TIM6_Init+0x44>)
 8000dba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_TIM6_Init+0x38>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <MX_TIM6_Init+0x38>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f001 ff89 	bl	8002cdc <HAL_TIM_Base_Init>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8000dce:	f7ff fb1c 	bl	800040a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000168 	.word	0x20000168
 8000ddc:	40001000 	.word	0x40001000
 8000de0:	0000bb7f 	.word	0x0000bb7f
 8000de4:	000003e7 	.word	0x000003e7

08000de8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_TIM_Base_MspInit+0x90>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10e      	bne.n	8000e18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0109      	lsls	r1, r1, #4
 8000e04:	430a      	orrs	r2, r1
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e0a:	699a      	ldr	r2, [r3, #24]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4013      	ands	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */
//    HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e16:	e02a      	b.n	8000e6e <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_TIM_Base_MspInit+0x98>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10c      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e28:	2102      	movs	r1, #2
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	61da      	str	r2, [r3, #28]
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
}
 8000e3a:	e018      	b.n	8000e6e <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM6)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_TIM_Base_MspInit+0x9c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d113      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e48:	69da      	ldr	r2, [r3, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	61da      	str	r2, [r3, #28]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	2210      	movs	r2, #16
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2011      	movs	r0, #17
 8000e64:	f000 fee0 	bl	8001c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000e68:	2011      	movs	r0, #17
 8000e6a:	f000 fef2 	bl	8001c52 <HAL_NVIC_EnableIRQ>
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b006      	add	sp, #24
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40012c00 	.word	0x40012c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40001000 	.word	0x40001000

08000e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	; 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	2414      	movs	r4, #20
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	2314      	movs	r3, #20
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f003 ffec 	bl	8004e78 <memset>
  if(timHandle->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_TIM_MspPostInit+0x144>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d14a      	bne.n	8000f40 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	02c9      	lsls	r1, r1, #11
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	02db      	lsls	r3, r3, #11
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0289      	lsls	r1, r1, #10
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	22e0      	movs	r2, #224	; 0xe0
 8000ee6:	0212      	lsls	r2, r2, #8
 8000ee8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2202      	movs	r2, #2
 8000eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2202      	movs	r2, #2
 8000f00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <HAL_TIM_MspPostInit+0x14c>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f000 ff3d 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f0e:	0021      	movs	r1, r4
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	22e0      	movs	r2, #224	; 0xe0
 8000f14:	00d2      	lsls	r2, r2, #3
 8000f16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	187a      	adds	r2, r7, r1
 8000f32:	2390      	movs	r3, #144	; 0x90
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 ff25 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f3e:	e041      	b.n	8000fc4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_TIM_MspPostInit+0x150>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d13c      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0309      	lsls	r1, r1, #12
 8000f54:	430a      	orrs	r2, r1
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_TIM_MspPostInit+0x148>)
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	031b      	lsls	r3, r3, #12
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000f66:	2114      	movs	r1, #20
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	22b0      	movs	r2, #176	; 0xb0
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	000c      	movs	r4, r1
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <HAL_TIM_MspPostInit+0x154>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f000 fef9 	bl	8001d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f96:	0021      	movs	r1, r4
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_TIM_MspPostInit+0x154>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f000 fee2 	bl	8001d88 <HAL_GPIO_Init>
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b00b      	add	sp, #44	; 0x2c
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_USART1_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8000fec:	22e1      	movs	r2, #225	; 0xe1
 8000fee:	0252      	lsls	r2, r2, #9
 8000ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART1_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART1_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <MX_USART1_UART_Init+0x58>)
 8001024:	0018      	movs	r0, r3
 8001026:	f002 ff7f 	bl	8003f28 <HAL_UART_Init>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f7ff f9ec 	bl	800040a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200001b0 	.word	0x200001b0
 800103c:	40013800 	.word	0x40013800

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b08b      	sub	sp, #44	; 0x2c
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	2414      	movs	r4, #20
 800104a:	193b      	adds	r3, r7, r4
 800104c:	0018      	movs	r0, r3
 800104e:	2314      	movs	r3, #20
 8001050:	001a      	movs	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	f003 ff10 	bl	8004e78 <memset>
  if(uartHandle->Instance==USART1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <HAL_UART_MspInit+0xa0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d139      	bne.n	80010d6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	01c9      	lsls	r1, r1, #7
 800106c:	430a      	orrs	r2, r1
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	01db      	lsls	r3, r3, #7
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	02c9      	lsls	r1, r1, #11
 8001088:	430a      	orrs	r2, r1
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0xa4>)
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	02db      	lsls	r3, r3, #11
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109a:	0021      	movs	r1, r4
 800109c:	187b      	adds	r3, r7, r1
 800109e:	22c0      	movs	r2, #192	; 0xc0
 80010a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2202      	movs	r2, #2
 80010a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2203      	movs	r2, #3
 80010b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_UART_MspInit+0xa8>)
 80010be:	0019      	movs	r1, r3
 80010c0:	0010      	movs	r0, r2
 80010c2:	f000 fe61 	bl	8001d88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	201b      	movs	r0, #27
 80010cc:	f000 fdac 	bl	8001c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010d0:	201b      	movs	r0, #27
 80010d2:	f000 fdbe 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b00b      	add	sp, #44	; 0x2c
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400

080010ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f7ff fcd4 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111a:	f003 fe89 	bl	8004e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff f87f 	bl	8000220 <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   r0, =_estack
 8001124:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001130:	08004ee0 	.word	0x08004ee0
  ldr r2, =_sbss
 8001134:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001138:	2000023c 	.word	0x2000023c

0800113c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_IRQHandler>
	...

08001140 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_Init+0x24>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_Init+0x24>)
 800114a:	2110      	movs	r1, #16
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f809 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fc4d 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_InitTick+0x5c>)
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0019      	movs	r1, r3
 800117a:	23fa      	movs	r3, #250	; 0xfa
 800117c:	0098      	lsls	r0, r3, #2
 800117e:	f7fe ffc3 	bl	8000108 <__udivsi3>
 8001182:	0003      	movs	r3, r0
 8001184:	0019      	movs	r1, r3
 8001186:	0020      	movs	r0, r4
 8001188:	f7fe ffbe 	bl	8000108 <__udivsi3>
 800118c:	0003      	movs	r3, r0
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fd6f 	bl	8001c72 <HAL_SYSTICK_Config>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e00f      	b.n	80011bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d80b      	bhi.n	80011ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fd3c 	bl	8001c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_InitTick+0x64>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b003      	add	sp, #12
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	001a      	movs	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	18d2      	adds	r2, r2, r3
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_IncTick+0x20>)
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000238 	.word	0x20000238

080011f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	20000238 	.word	0x20000238

08001208 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001210:	230f      	movs	r3, #15
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e125      	b.n	8001472 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10a      	bne.n	8001244 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2234      	movs	r2, #52	; 0x34
 8001238:	2100      	movs	r1, #0
 800123a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff f99e 	bl	8000580 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	2210      	movs	r2, #16
 800124a:	4013      	ands	r3, r2
 800124c:	d000      	beq.n	8001250 <HAL_ADC_Init+0x48>
 800124e:	e103      	b.n	8001458 <HAL_ADC_Init+0x250>
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d000      	beq.n	800125c <HAL_ADC_Init+0x54>
 800125a:	e0fd      	b.n	8001458 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2204      	movs	r2, #4
 8001264:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001266:	d000      	beq.n	800126a <HAL_ADC_Init+0x62>
 8001268:	e0f6      	b.n	8001458 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126e:	4a83      	ldr	r2, [pc, #524]	; (800147c <HAL_ADC_Init+0x274>)
 8001270:	4013      	ands	r3, r2
 8001272:	2202      	movs	r2, #2
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2203      	movs	r2, #3
 8001282:	4013      	ands	r3, r2
 8001284:	2b01      	cmp	r3, #1
 8001286:	d112      	bne.n	80012ae <HAL_ADC_Init+0xa6>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	4013      	ands	r3, r2
 8001292:	2b01      	cmp	r3, #1
 8001294:	d009      	beq.n	80012aa <HAL_ADC_Init+0xa2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	401a      	ands	r2, r3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0xa6>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_ADC_Init+0xa8>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d116      	bne.n	80012e2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2218      	movs	r2, #24
 80012bc:	4393      	bics	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	0899      	lsrs	r1, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4964      	ldr	r1, [pc, #400]	; (8001480 <HAL_ADC_Init+0x278>)
 80012ee:	400a      	ands	r2, r1
 80012f0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7e1b      	ldrb	r3, [r3, #24]
 80012f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7e5b      	ldrb	r3, [r3, #25]
 80012fc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7e9b      	ldrb	r3, [r3, #26]
 8001304:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001306:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	2b01      	cmp	r3, #1
 800130e:	d002      	beq.n	8001316 <HAL_ADC_Init+0x10e>
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	e000      	b.n	8001318 <HAL_ADC_Init+0x110>
 8001316:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001318:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800131e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d101      	bne.n	800132c <HAL_ADC_Init+0x124>
 8001328:	2304      	movs	r3, #4
 800132a:	e000      	b.n	800132e <HAL_ADC_Init+0x126>
 800132c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800132e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2124      	movs	r1, #36	; 0x24
 8001334:	5c5b      	ldrb	r3, [r3, r1]
 8001336:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001338:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4313      	orrs	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7edb      	ldrb	r3, [r3, #27]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d115      	bne.n	8001374 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7e9b      	ldrb	r3, [r3, #26]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0252      	lsls	r2, r2, #9
 8001356:	4313      	orrs	r3, r2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	e00b      	b.n	8001374 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001360:	2220      	movs	r2, #32
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136c:	2201      	movs	r2, #1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	23c2      	movs	r3, #194	; 0xc2
 800137a:	33ff      	adds	r3, #255	; 0xff
 800137c:	429a      	cmp	r2, r3
 800137e:	d007      	beq.n	8001390 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001388:	4313      	orrs	r3, r2
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4313      	orrs	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68d9      	ldr	r1, [r3, #12]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	430a      	orrs	r2, r1
 800139e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	055b      	lsls	r3, r3, #21
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d01b      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d017      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d013      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d00f      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00b      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d007      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	2b06      	cmp	r3, #6
 80013da:	d003      	beq.n	80013e4 <HAL_ADC_Init+0x1dc>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d112      	bne.n	800140a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2107      	movs	r1, #7
 80013f0:	438a      	bics	r2, r1
 80013f2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6959      	ldr	r1, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	2207      	movs	r2, #7
 8001400:	401a      	ands	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <HAL_ADC_Init+0x27c>)
 8001412:	4013      	ands	r3, r2
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d10b      	bne.n	8001432 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	2203      	movs	r2, #3
 8001426:	4393      	bics	r3, r2
 8001428:	2201      	movs	r2, #1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001430:	e01c      	b.n	800146c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001436:	2212      	movs	r2, #18
 8001438:	4393      	bics	r3, r2
 800143a:	2210      	movs	r2, #16
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	2201      	movs	r2, #1
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800144e:	230f      	movs	r3, #15
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001456:	e009      	b.n	800146c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145c:	2210      	movs	r2, #16
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800146c:	230f      	movs	r3, #15
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	781b      	ldrb	r3, [r3, #0]
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b004      	add	sp, #16
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	fffffefd 	.word	0xfffffefd
 8001480:	fffe0219 	.word	0xfffe0219
 8001484:	833fffe7 	.word	0x833fffe7

08001488 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d138      	bne.n	8001516 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2234      	movs	r2, #52	; 0x34
 80014a8:	5c9b      	ldrb	r3, [r3, r2]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Start+0x2a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e038      	b.n	8001524 <HAL_ADC_Start+0x9c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2234      	movs	r2, #52	; 0x34
 80014b6:	2101      	movs	r1, #1
 80014b8:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7e5b      	ldrb	r3, [r3, #25]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d007      	beq.n	80014d2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80014c2:	230f      	movs	r3, #15
 80014c4:	18fc      	adds	r4, r7, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f9d5 	bl	8001878 <ADC_Enable>
 80014ce:	0003      	movs	r3, r0
 80014d0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d2:	230f      	movs	r3, #15
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d120      	bne.n	800151e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_ADC_Start+0xa4>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	0052      	lsls	r2, r2, #1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2234      	movs	r2, #52	; 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	221c      	movs	r2, #28
 8001502:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2104      	movs	r1, #4
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e003      	b.n	800151e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001516:	230f      	movs	r3, #15
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	2202      	movs	r2, #2
 800151c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800151e:	230f      	movs	r3, #15
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b005      	add	sp, #20
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	fffff0fe 	.word	0xfffff0fe

08001530 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d102      	bne.n	8001548 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001542:	2308      	movs	r3, #8
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e014      	b.n	8001572 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	4013      	ands	r3, r2
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10b      	bne.n	800156e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	2220      	movs	r2, #32
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2234      	movs	r2, #52	; 0x34
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e071      	b.n	8001652 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800156e:	230c      	movs	r3, #12
 8001570:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001572:	f7ff fe3f 	bl	80011f4 <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800157a:	e01f      	b.n	80015bc <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	d01c      	beq.n	80015bc <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_ADC_PollForConversion+0x68>
 8001588:	f7ff fe34 	bl	80011f4 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d211      	bcs.n	80015bc <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	d10b      	bne.n	80015bc <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	2204      	movs	r2, #4
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2234      	movs	r2, #52	; 0x34
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e04a      	b.n	8001652 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0d9      	beq.n	800157c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	23c0      	movs	r3, #192	; 0xc0
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	d12d      	bne.n	8001640 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d129      	bne.n	8001640 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2208      	movs	r2, #8
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d122      	bne.n	8001640 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2204      	movs	r2, #4
 8001602:	4013      	ands	r3, r2
 8001604:	d110      	bne.n	8001628 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	210c      	movs	r1, #12
 8001612:	438a      	bics	r2, r1
 8001614:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_ADC_PollForConversion+0x12c>)
 800161c:	4013      	ands	r3, r2
 800161e:	2201      	movs	r2, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	639a      	str	r2, [r3, #56]	; 0x38
 8001626:	e00b      	b.n	8001640 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162c:	2220      	movs	r2, #32
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001638:	2201      	movs	r2, #1
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7e1b      	ldrb	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	220c      	movs	r2, #12
 800164e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b004      	add	sp, #16
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	fffffefe 	.word	0xfffffefe

08001660 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001682:	230f      	movs	r3, #15
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	055b      	lsls	r3, r3, #21
 8001696:	429a      	cmp	r2, r3
 8001698:	d011      	beq.n	80016be <HAL_ADC_ConfigChannel+0x46>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d00d      	beq.n	80016be <HAL_ADC_ConfigChannel+0x46>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d009      	beq.n	80016be <HAL_ADC_ConfigChannel+0x46>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d005      	beq.n	80016be <HAL_ADC_ConfigChannel+0x46>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d001      	beq.n	80016be <HAL_ADC_ConfigChannel+0x46>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2234      	movs	r2, #52	; 0x34
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x54>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e0bb      	b.n	8001844 <HAL_ADC_ConfigChannel+0x1cc>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2234      	movs	r2, #52	; 0x34
 80016d0:	2101      	movs	r1, #1
 80016d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	d000      	beq.n	80016e2 <HAL_ADC_ConfigChannel+0x6a>
 80016e0:	e09f      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a59      	ldr	r2, [pc, #356]	; (800184c <HAL_ADC_ConfigChannel+0x1d4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d100      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x76>
 80016ec:	e077      	b.n	80017de <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	055b      	lsls	r3, r3, #21
 800170c:	429a      	cmp	r2, r3
 800170e:	d037      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d033      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b02      	cmp	r3, #2
 800171e:	d02f      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	2b03      	cmp	r3, #3
 8001726:	d02b      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b04      	cmp	r3, #4
 800172e:	d027      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	2b05      	cmp	r3, #5
 8001736:	d023      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	2b06      	cmp	r3, #6
 800173e:	d01f      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	2b07      	cmp	r3, #7
 8001746:	d01b      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2107      	movs	r1, #7
 8001754:	400b      	ands	r3, r1
 8001756:	429a      	cmp	r2, r3
 8001758:	d012      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2107      	movs	r1, #7
 8001766:	438a      	bics	r2, r1
 8001768:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6959      	ldr	r1, [r3, #20]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2207      	movs	r2, #7
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b10      	cmp	r3, #16
 8001786:	d003      	beq.n	8001790 <HAL_ADC_ConfigChannel+0x118>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b11      	cmp	r3, #17
 800178e:	d152      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_ADC_ConfigChannel+0x1d8>)
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b10      	cmp	r3, #16
 800179a:	d102      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x12a>
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	e001      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x12e>
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	03db      	lsls	r3, r3, #15
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_ADC_ConfigChannel+0x1d8>)
 80017a8:	430b      	orrs	r3, r1
 80017aa:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d140      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_ADC_ConfigChannel+0x1dc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4927      	ldr	r1, [pc, #156]	; (8001858 <HAL_ADC_ConfigChannel+0x1e0>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7fe fca4 	bl	8000108 <__udivsi3>
 80017c0:	0003      	movs	r3, r0
 80017c2:	001a      	movs	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	189b      	adds	r3, r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ce:	e002      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x158>
 80017dc:	e02b      	b.n	8001836 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	4099      	lsls	r1, r3
 80017ec:	000b      	movs	r3, r1
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b10      	cmp	r3, #16
 80017fe:	d003      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x190>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b11      	cmp	r3, #17
 8001806:	d116      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_ADC_ConfigChannel+0x1d8>)
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b10      	cmp	r3, #16
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1a0>
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_ADC_ConfigChannel+0x1e4>)
 8001816:	e000      	b.n	800181a <HAL_ADC_ConfigChannel+0x1a2>
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <HAL_ADC_ConfigChannel+0x1e8>)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_ADC_ConfigChannel+0x1d8>)
 800181c:	400a      	ands	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e009      	b.n	8001836 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	2220      	movs	r2, #32
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800182e:	230f      	movs	r3, #15
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2234      	movs	r2, #52	; 0x34
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800183e:	230f      	movs	r3, #15
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b004      	add	sp, #16
 800184a:	bd80      	pop	{r7, pc}
 800184c:	00001001 	.word	0x00001001
 8001850:	40012708 	.word	0x40012708
 8001854:	20000000 	.word	0x20000000
 8001858:	000f4240 	.word	0x000f4240
 800185c:	ff7fffff 	.word	0xff7fffff
 8001860:	ffbfffff 	.word	0xffbfffff

08001864 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2203      	movs	r2, #3
 8001890:	4013      	ands	r3, r2
 8001892:	2b01      	cmp	r3, #1
 8001894:	d112      	bne.n	80018bc <ADC_Enable+0x44>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d009      	beq.n	80018b8 <ADC_Enable+0x40>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	401a      	ands	r2, r3
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d101      	bne.n	80018bc <ADC_Enable+0x44>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <ADC_Enable+0x46>
 80018bc:	2300      	movs	r3, #0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d152      	bne.n	8001968 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <ADC_Enable+0xfc>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	d00d      	beq.n	80018ea <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	2210      	movs	r2, #16
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018de:	2201      	movs	r2, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e03f      	b.n	800196a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <ADC_Enable+0x100>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	491f      	ldr	r1, [pc, #124]	; (800197c <ADC_Enable+0x104>)
 8001900:	0018      	movs	r0, r3
 8001902:	f7fe fc01 	bl	8000108 <__udivsi3>
 8001906:	0003      	movs	r3, r0
 8001908:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800190a:	e002      	b.n	8001912 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	3b01      	subs	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001918:	f7ff fc6c 	bl	80011f4 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001920:	e01b      	b.n	800195a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001922:	f7ff fc67 	bl	80011f4 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d914      	bls.n	800195a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	2b01      	cmp	r3, #1
 800193c:	d00d      	beq.n	800195a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	2210      	movs	r2, #16
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194e:	2201      	movs	r2, #1
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e007      	b.n	800196a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	2b01      	cmp	r3, #1
 8001966:	d1dc      	bne.n	8001922 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	80000017 	.word	0x80000017
 8001978:	20000000 	.word	0x20000000
 800197c:	000f4240 	.word	0x000f4240

08001980 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001988:	2317      	movs	r3, #23
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2234      	movs	r2, #52	; 0x34
 800199c:	5c9b      	ldrb	r3, [r3, r2]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADCEx_Calibration_Start+0x26>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e08d      	b.n	8001ac2 <HAL_ADCEx_Calibration_Start+0x142>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2234      	movs	r2, #52	; 0x34
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d112      	bne.n	80019e2 <HAL_ADCEx_Calibration_Start+0x62>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d009      	beq.n	80019de <HAL_ADCEx_Calibration_Start+0x5e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	401a      	ands	r2, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	429a      	cmp	r2, r3
 80019dc:	d101      	bne.n	80019e2 <HAL_ADCEx_Calibration_Start+0x62>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_ADCEx_Calibration_Start+0x64>
 80019e2:	2300      	movs	r3, #0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d15b      	bne.n	8001aa0 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	4a37      	ldr	r2, [pc, #220]	; (8001acc <HAL_ADCEx_Calibration_Start+0x14c>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	2202      	movs	r2, #2
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2203      	movs	r2, #3
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2103      	movs	r1, #3
 8001a10:	438a      	bics	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0609      	lsls	r1, r1, #24
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001a26:	f7ff fbe5 	bl	80011f4 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a2e:	e01d      	b.n	8001a6c <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a30:	f7ff fbe0 	bl	80011f4 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d916      	bls.n	8001a6c <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	0fdb      	lsrs	r3, r3, #31
 8001a46:	07da      	lsls	r2, r3, #31
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d10d      	bne.n	8001a6c <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	2212      	movs	r2, #18
 8001a56:	4393      	bics	r3, r2
 8001a58:	2210      	movs	r2, #16
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2234      	movs	r2, #52	; 0x34
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e02a      	b.n	8001ac2 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0fdb      	lsrs	r3, r3, #31
 8001a74:	07da      	lsls	r2, r3, #31
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d0d8      	beq.n	8001a30 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68d9      	ldr	r1, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	2203      	movs	r2, #3
 8001a94:	4393      	bics	r3, r2
 8001a96:	2201      	movs	r2, #1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a9e:	e009      	b.n	8001ab4 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001aac:	2317      	movs	r3, #23
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2234      	movs	r2, #52	; 0x34
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001abc:	2317      	movs	r3, #23
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b006      	add	sp, #24
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	fffffefd 	.word	0xfffffefd

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae2:	d809      	bhi.n	8001af8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	001a      	movs	r2, r3
 8001aea:	231f      	movs	r3, #31
 8001aec:	401a      	ands	r2, r3
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_EnableIRQ+0x30>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	4091      	lsls	r1, r2
 8001af4:	000a      	movs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
  }
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	d828      	bhi.n	8001b6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <__NVIC_SetPriority+0xd4>)
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	33c0      	adds	r3, #192	; 0xc0
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	589b      	ldr	r3, [r3, r2]
 8001b2a:	1dfa      	adds	r2, r7, #7
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	0011      	movs	r1, r2
 8001b30:	2203      	movs	r2, #3
 8001b32:	400a      	ands	r2, r1
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	21ff      	movs	r1, #255	; 0xff
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	43d2      	mvns	r2, r2
 8001b3e:	401a      	ands	r2, r3
 8001b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	22ff      	movs	r2, #255	; 0xff
 8001b48:	401a      	ands	r2, r3
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	2303      	movs	r3, #3
 8001b52:	4003      	ands	r3, r0
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b58:	481f      	ldr	r0, [pc, #124]	; (8001bd8 <__NVIC_SetPriority+0xd4>)
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	430a      	orrs	r2, r1
 8001b64:	33c0      	adds	r3, #192	; 0xc0
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b6a:	e031      	b.n	8001bd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <__NVIC_SetPriority+0xd8>)
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	0019      	movs	r1, r3
 8001b74:	230f      	movs	r3, #15
 8001b76:	400b      	ands	r3, r1
 8001b78:	3b08      	subs	r3, #8
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3306      	adds	r3, #6
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1dfa      	adds	r2, r7, #7
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	400a      	ands	r2, r1
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	21ff      	movs	r1, #255	; 0xff
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	43d2      	mvns	r2, r2
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	2303      	movs	r3, #3
 8001bae:	4003      	ands	r3, r0
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <__NVIC_SetPriority+0xd8>)
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	001c      	movs	r4, r3
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	4023      	ands	r3, r4
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	3306      	adds	r3, #6
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	18c3      	adds	r3, r0, r3
 8001bcc:	3304      	adds	r3, #4
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	045b      	lsls	r3, r3, #17
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d301      	bcc.n	8001bf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e010      	b.n	8001c1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <SysTick_Config+0x44>)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	3a01      	subs	r2, #1
 8001bfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c00:	2301      	movs	r3, #1
 8001c02:	425b      	negs	r3, r3
 8001c04:	2103      	movs	r1, #3
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff ff7c 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x44>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x44>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	210f      	movs	r1, #15
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	0002      	movs	r2, r0
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff ff33 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ffaf 	bl	8001be0 <SysTick_Config>
 8001c82:	0003      	movs	r3, r0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2221      	movs	r2, #33	; 0x21
 8001c98:	5c9b      	ldrb	r3, [r3, r2]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d008      	beq.n	8001cb2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	2100      	movs	r1, #0
 8001cac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e020      	b.n	8001cf4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	210e      	movs	r1, #14
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	438a      	bics	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	2100      	movs	r1, #0
 8001cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	210f      	movs	r1, #15
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2221      	movs	r2, #33	; 0x21
 8001d10:	5c9b      	ldrb	r3, [r3, r2]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d006      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e028      	b.n	8001d78 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	210e      	movs	r1, #14
 8001d32:	438a      	bics	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	438a      	bics	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4091      	lsls	r1, r2
 8001d52:	000a      	movs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2221      	movs	r2, #33	; 0x21
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	0010      	movs	r0, r2
 8001d76:	4798      	blx	r3
    }
  }
  return status;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e14f      	b.n	8002038 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4091      	lsls	r1, r2
 8001da2:	000a      	movs	r2, r1
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <HAL_GPIO_Init+0x28>
 8001dae:	e140      	b.n	8002032 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d005      	beq.n	8001dc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	2201      	movs	r2, #1
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d017      	beq.n	8001e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	43da      	mvns	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d123      	bne.n	8001eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	58d3      	ldr	r3, [r2, r3]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d100      	bne.n	8001efc <HAL_GPIO_Init+0x174>
 8001efa:	e09a      	b.n	8002032 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efc:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_GPIO_Init+0x2c8>)
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_GPIO_Init+0x2c8>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	4b51      	ldr	r3, [pc, #324]	; (8002050 <HAL_GPIO_Init+0x2c8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f14:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <HAL_GPIO_Init+0x2cc>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	589b      	ldr	r3, [r3, r2]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	0013      	movs	r3, r2
 8001f30:	43da      	mvns	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	2390      	movs	r3, #144	; 0x90
 8001f3c:	05db      	lsls	r3, r3, #23
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x1e2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a44      	ldr	r2, [pc, #272]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x1de>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a43      	ldr	r2, [pc, #268]	; (800205c <HAL_GPIO_Init+0x2d4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x1da>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_GPIO_Init+0x2d8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x1d6>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x1e4>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x1e4>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x1e4>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x1e4>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	2103      	movs	r1, #3
 8001f70:	400a      	ands	r2, r1
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_GPIO_Init+0x2cc>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	035b      	lsls	r3, r3, #13
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	039b      	lsls	r3, r3, #14
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43da      	mvns	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_GPIO_Init+0x2dc>)
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	40da      	lsrs	r2, r3
 8002040:	1e13      	subs	r3, r2, #0
 8002042:	d000      	beq.n	8002046 <HAL_GPIO_Init+0x2be>
 8002044:	e6a8      	b.n	8001d98 <HAL_GPIO_Init+0x10>
  } 
}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b006      	add	sp, #24
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	48000400 	.word	0x48000400
 800205c:	48000800 	.word	0x48000800
 8002060:	48000c00 	.word	0x48000c00
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	000a      	movs	r2, r1
 8002072:	1cbb      	adds	r3, r7, #2
 8002074:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	1cba      	adds	r2, r7, #2
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	4013      	ands	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002082:	230f      	movs	r3, #15
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e003      	b.n	8002094 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208c:	230f      	movs	r3, #15
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002094:	230f      	movs	r3, #15
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
  }
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b004      	add	sp, #16
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	0008      	movs	r0, r1
 80020ac:	0011      	movs	r1, r2
 80020ae:	1cbb      	adds	r3, r7, #2
 80020b0:	1c02      	adds	r2, r0, #0
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	1c7b      	adds	r3, r7, #1
 80020b6:	1c0a      	adds	r2, r1, #0
 80020b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ba:	1c7b      	adds	r3, r7, #1
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c2:	1cbb      	adds	r3, r7, #2
 80020c4:	881a      	ldrh	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ca:	e003      	b.n	80020d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020cc:	1cbb      	adds	r3, r7, #2
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	000a      	movs	r2, r1
 80020e6:	1cbb      	adds	r3, r7, #2
 80020e8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f0:	1cbb      	adds	r3, r7, #2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	1cb9      	adds	r1, r7, #2
 8002100:	8809      	ldrh	r1, [r1, #0]
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	619a      	str	r2, [r3, #24]
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b004      	add	sp, #16
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e301      	b.n	800272a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2201      	movs	r2, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d100      	bne.n	8002132 <HAL_RCC_OscConfig+0x1e>
 8002130:	e08d      	b.n	800224e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002132:	4bc3      	ldr	r3, [pc, #780]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	220c      	movs	r2, #12
 8002138:	4013      	ands	r3, r2
 800213a:	2b04      	cmp	r3, #4
 800213c:	d00e      	beq.n	800215c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800213e:	4bc0      	ldr	r3, [pc, #768]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	220c      	movs	r2, #12
 8002144:	4013      	ands	r3, r2
 8002146:	2b08      	cmp	r3, #8
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x64>
 800214a:	4bbd      	ldr	r3, [pc, #756]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	025b      	lsls	r3, r3, #9
 8002152:	401a      	ands	r2, r3
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	429a      	cmp	r2, r3
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4bb8      	ldr	r3, [pc, #736]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	4013      	ands	r3, r2
 8002166:	d100      	bne.n	800216a <HAL_RCC_OscConfig+0x56>
 8002168:	e070      	b.n	800224c <HAL_RCC_OscConfig+0x138>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d000      	beq.n	8002174 <HAL_RCC_OscConfig+0x60>
 8002172:	e06b      	b.n	800224c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e2d8      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x7c>
 8002180:	4baf      	ldr	r3, [pc, #700]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4bae      	ldr	r3, [pc, #696]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0249      	lsls	r1, r1, #9
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e02f      	b.n	80021f0 <HAL_RCC_OscConfig+0xdc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x9e>
 8002198:	4ba9      	ldr	r3, [pc, #676]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4ba8      	ldr	r3, [pc, #672]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800219e:	49a9      	ldr	r1, [pc, #676]	; (8002444 <HAL_RCC_OscConfig+0x330>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	4ba6      	ldr	r3, [pc, #664]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4ba5      	ldr	r3, [pc, #660]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	49a7      	ldr	r1, [pc, #668]	; (8002448 <HAL_RCC_OscConfig+0x334>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e01e      	b.n	80021f0 <HAL_RCC_OscConfig+0xdc>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10e      	bne.n	80021d8 <HAL_RCC_OscConfig+0xc4>
 80021ba:	4ba1      	ldr	r3, [pc, #644]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4ba0      	ldr	r3, [pc, #640]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	02c9      	lsls	r1, r1, #11
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4b9d      	ldr	r3, [pc, #628]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b9c      	ldr	r3, [pc, #624]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	0249      	lsls	r1, r1, #9
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xdc>
 80021d8:	4b99      	ldr	r3, [pc, #612]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b98      	ldr	r3, [pc, #608]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021de:	4999      	ldr	r1, [pc, #612]	; (8002444 <HAL_RCC_OscConfig+0x330>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	4b96      	ldr	r3, [pc, #600]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b95      	ldr	r3, [pc, #596]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	4997      	ldr	r1, [pc, #604]	; (8002448 <HAL_RCC_OscConfig+0x334>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d014      	beq.n	8002222 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fffc 	bl	80011f4 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002202:	f7fe fff7 	bl	80011f4 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b64      	cmp	r3, #100	; 0x64
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e28a      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002214:	4b8a      	ldr	r3, [pc, #552]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0xee>
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe ffe7 	bl	80011f4 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe ffe2 	bl	80011f4 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e275      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b80      	ldr	r3, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x118>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d100      	bne.n	800225a <HAL_RCC_OscConfig+0x146>
 8002258:	e069      	b.n	800232e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800225a:	4b79      	ldr	r3, [pc, #484]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	220c      	movs	r2, #12
 8002260:	4013      	ands	r3, r2
 8002262:	d00b      	beq.n	800227c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002264:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	220c      	movs	r2, #12
 800226a:	4013      	ands	r3, r2
 800226c:	2b08      	cmp	r3, #8
 800226e:	d11c      	bne.n	80022aa <HAL_RCC_OscConfig+0x196>
 8002270:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	4013      	ands	r3, r2
 800227a:	d116      	bne.n	80022aa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227c:	4b70      	ldr	r3, [pc, #448]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x17e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e24b      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	22f8      	movs	r2, #248	; 0xf8
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	00da      	lsls	r2, r3, #3
 80022a2:	4b67      	ldr	r3, [pc, #412]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a8:	e041      	b.n	800232e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d024      	beq.n	80022fc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b62      	ldr	r3, [pc, #392]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe ff99 	bl	80011f4 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe ff94 	bl	80011f4 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e227      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d0f1      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	22f8      	movs	r2, #248	; 0xf8
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00da      	lsls	r2, r3, #3
 80022f4:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b4f      	ldr	r3, [pc, #316]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe ff74 	bl	80011f4 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe ff6f 	bl	80011f4 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e202      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d1f1      	bne.n	8002312 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2208      	movs	r2, #8
 8002334:	4013      	ands	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d019      	beq.n	8002374 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002340:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002344:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7fe ff52 	bl	80011f4 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe ff4d 	bl	80011f4 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1e0      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002368:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d0f1      	beq.n	8002356 <HAL_RCC_OscConfig+0x242>
 8002372:	e018      	b.n	80023a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002378:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800237a:	2101      	movs	r1, #1
 800237c:	438a      	bics	r2, r1
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe ff38 	bl	80011f4 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238a:	f7fe ff33 	bl	80011f4 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1c6      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d1f1      	bne.n	800238a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2204      	movs	r2, #4
 80023ac:	4013      	ands	r3, r2
 80023ae:	d100      	bne.n	80023b2 <HAL_RCC_OscConfig+0x29e>
 80023b0:	e0b4      	b.n	800251c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	201f      	movs	r0, #31
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	055b      	lsls	r3, r3, #21
 80023c2:	4013      	ands	r3, r2
 80023c4:	d110      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0549      	lsls	r1, r1, #21
 80023d0:	430a      	orrs	r2, r1
 80023d2:	61da      	str	r2, [r3, #28]
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x338>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d11a      	bne.n	800242a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_RCC_OscConfig+0x338>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_RCC_OscConfig+0x338>)
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0049      	lsls	r1, r1, #1
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fef7 	bl	80011f4 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7fe fef2 	bl	80011f4 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e185      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x338>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4013      	ands	r3, r2
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10e      	bne.n	8002450 <HAL_RCC_OscConfig+0x33c>
 8002432:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	4b02      	ldr	r3, [pc, #8]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	621a      	str	r2, [r3, #32]
 800243e:	e035      	b.n	80024ac <HAL_RCC_OscConfig+0x398>
 8002440:	40021000 	.word	0x40021000
 8002444:	fffeffff 	.word	0xfffeffff
 8002448:	fffbffff 	.word	0xfffbffff
 800244c:	40007000 	.word	0x40007000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x35e>
 8002458:	4bb6      	ldr	r3, [pc, #728]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4bb5      	ldr	r3, [pc, #724]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800245e:	2101      	movs	r1, #1
 8002460:	438a      	bics	r2, r1
 8002462:	621a      	str	r2, [r3, #32]
 8002464:	4bb3      	ldr	r3, [pc, #716]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	4bb2      	ldr	r3, [pc, #712]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800246a:	2104      	movs	r1, #4
 800246c:	438a      	bics	r2, r1
 800246e:	621a      	str	r2, [r3, #32]
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x398>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x380>
 800247a:	4bae      	ldr	r3, [pc, #696]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	4bad      	ldr	r3, [pc, #692]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002480:	2104      	movs	r1, #4
 8002482:	430a      	orrs	r2, r1
 8002484:	621a      	str	r2, [r3, #32]
 8002486:	4bab      	ldr	r3, [pc, #684]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	4baa      	ldr	r3, [pc, #680]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800248c:	2101      	movs	r1, #1
 800248e:	430a      	orrs	r2, r1
 8002490:	621a      	str	r2, [r3, #32]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0x398>
 8002494:	4ba7      	ldr	r3, [pc, #668]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	4ba6      	ldr	r3, [pc, #664]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800249a:	2101      	movs	r1, #1
 800249c:	438a      	bics	r2, r1
 800249e:	621a      	str	r2, [r3, #32]
 80024a0:	4ba4      	ldr	r3, [pc, #656]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4ba3      	ldr	r3, [pc, #652]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80024a6:	2104      	movs	r1, #4
 80024a8:	438a      	bics	r2, r1
 80024aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d014      	beq.n	80024de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe fe9e 	bl	80011f4 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e009      	b.n	80024d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fe99 	bl	80011f4 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	4a9b      	ldr	r2, [pc, #620]	; (8002738 <HAL_RCC_OscConfig+0x624>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e12b      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	4b98      	ldr	r3, [pc, #608]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x3aa>
 80024dc:	e013      	b.n	8002506 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe fe89 	bl	80011f4 <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e6:	e009      	b.n	80024fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe fe84 	bl	80011f4 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	4a91      	ldr	r2, [pc, #580]	; (8002738 <HAL_RCC_OscConfig+0x624>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e116      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002506:	231f      	movs	r3, #31
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	4b87      	ldr	r3, [pc, #540]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002516:	4989      	ldr	r1, [pc, #548]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002518:	400a      	ands	r2, r1
 800251a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	4013      	ands	r3, r2
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d12a      	bne.n	8002584 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002532:	4b80      	ldr	r3, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002534:	2104      	movs	r1, #4
 8002536:	430a      	orrs	r2, r1
 8002538:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800253a:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	4b7d      	ldr	r3, [pc, #500]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7fe fe55 	bl	80011f4 <HAL_GetTick>
 800254a:	0003      	movs	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002550:	f7fe fe50 	bl	80011f4 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0e3      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002562:	4b74      	ldr	r3, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	2202      	movs	r2, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d0f1      	beq.n	8002550 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800256c:	4b71      	ldr	r3, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	22f8      	movs	r2, #248	; 0xf8
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	00da      	lsls	r2, r3, #3
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800257e:	430a      	orrs	r2, r1
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
 8002582:	e034      	b.n	80025ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	3305      	adds	r3, #5
 800258a:	d111      	bne.n	80025b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800258c:	4b69      	ldr	r3, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800258e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002592:	2104      	movs	r1, #4
 8002594:	438a      	bics	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002598:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	22f8      	movs	r2, #248	; 0xf8
 800259e:	4393      	bics	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	00da      	lsls	r2, r3, #3
 80025a8:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	635a      	str	r2, [r3, #52]	; 0x34
 80025ae:	e01e      	b.n	80025ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025b0:	4b60      	ldr	r3, [pc, #384]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b4:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025b6:	2104      	movs	r1, #4
 80025b8:	430a      	orrs	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025bc:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c0:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	438a      	bics	r2, r1
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c8:	f7fe fe14 	bl	80011f4 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025d2:	f7fe fe0f 	bl	80011f4 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0a2      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	d1f1      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d100      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4e4>
 80025f6:	e097      	b.n	8002728 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b4e      	ldr	r3, [pc, #312]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	220c      	movs	r2, #12
 80025fe:	4013      	ands	r3, r2
 8002600:	2b08      	cmp	r3, #8
 8002602:	d100      	bne.n	8002606 <HAL_RCC_OscConfig+0x4f2>
 8002604:	e06b      	b.n	80026de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d14c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002614:	494a      	ldr	r1, [pc, #296]	; (8002740 <HAL_RCC_OscConfig+0x62c>)
 8002616:	400a      	ands	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fdeb 	bl	80011f4 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fde6 	bl	80011f4 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e079      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	049b      	lsls	r3, r3, #18
 800263e:	4013      	ands	r3, r2
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002642:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	220f      	movs	r2, #15
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002652:	430a      	orrs	r2, r1
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a3a      	ldr	r2, [pc, #232]	; (8002744 <HAL_RCC_OscConfig+0x630>)
 800265c:	4013      	ands	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	431a      	orrs	r2, r3
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	0449      	lsls	r1, r1, #17
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fdb9 	bl	80011f4 <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fdb4 	bl	80011f4 <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e047      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	049b      	lsls	r3, r3, #18
 80026a2:	4013      	ands	r3, r2
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x574>
 80026a6:	e03f      	b.n	8002728 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80026ae:	4924      	ldr	r1, [pc, #144]	; (8002740 <HAL_RCC_OscConfig+0x62c>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd9e 	bl	80011f4 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fd99 	bl	80011f4 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e02c      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	049b      	lsls	r3, r3, #18
 80026d8:	4013      	ands	r3, r2
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x5aa>
 80026dc:	e024      	b.n	8002728 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e01f      	b.n	800272a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	025b      	lsls	r3, r3, #9
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	d10e      	bne.n	8002724 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	220f      	movs	r2, #15
 800270a:	401a      	ands	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	23f0      	movs	r3, #240	; 0xf0
 8002718:	039b      	lsls	r3, r3, #14
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b008      	add	sp, #32
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40021000 	.word	0x40021000
 8002738:	00001388 	.word	0x00001388
 800273c:	efffffff 	.word	0xefffffff
 8002740:	feffffff 	.word	0xfeffffff
 8002744:	ffc2ffff 	.word	0xffc2ffff

08002748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b3      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d911      	bls.n	800278e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b58      	ldr	r3, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2201      	movs	r2, #1
 8002770:	4393      	bics	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	4013      	ands	r3, r2
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e09a      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2204      	movs	r2, #4
 800279e:	4013      	ands	r3, r2
 80027a0:	d006      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027a2:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80027a8:	21e0      	movs	r1, #224	; 0xe0
 80027aa:	00c9      	lsls	r1, r1, #3
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	22f0      	movs	r2, #240	; 0xf0
 80027b6:	4393      	bics	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	d040      	beq.n	8002850 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	4013      	ands	r3, r2
 80027e0:	d114      	bne.n	800280c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06e      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	049b      	lsls	r3, r3, #18
 80027f6:	4013      	ands	r3, r2
 80027f8:	d108      	bne.n	800280c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e062      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e05b      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280c:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	4393      	bics	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002820:	f7fe fce8 	bl	80011f4 <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002828:	e009      	b.n	800283e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fe fce3 	bl	80011f4 <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <HAL_RCC_ClockConfig+0x18c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e042      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	220c      	movs	r2, #12
 8002844:	401a      	ands	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	429a      	cmp	r2, r3
 800284e:	d1ec      	bne.n	800282a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d211      	bcs.n	8002882 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x184>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	4013      	ands	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e020      	b.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2204      	movs	r2, #4
 8002888:	4013      	ands	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_RCC_ClockConfig+0x190>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028a0:	f000 f820 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a4:	0001      	movs	r1, r0
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x188>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	220f      	movs	r2, #15
 80028ae:	4013      	ands	r3, r2
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x194>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	000a      	movs	r2, r1
 80028b6:	40da      	lsrs	r2, r3
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x198>)
 80028ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028bc:	2003      	movs	r0, #3
 80028be:	f7fe fc53 	bl	8001168 <HAL_InitTick>
  
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40021000 	.word	0x40021000
 80028d4:	00001388 	.word	0x00001388
 80028d8:	fffff8ff 	.word	0xfffff8ff
 80028dc:	08004ea0 	.word	0x08004ea0
 80028e0:	20000000 	.word	0x20000000

080028e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	220c      	movs	r2, #12
 8002908:	4013      	ands	r3, r2
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x30>
 800290e:	2b08      	cmp	r3, #8
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x36>
 8002912:	e02c      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002916:	613b      	str	r3, [r7, #16]
      break;
 8002918:	e02c      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	220f      	movs	r2, #15
 8002920:	4013      	ands	r3, r2
 8002922:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_RCC_GetSysClockFreq+0x9c>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	220f      	movs	r2, #15
 800292e:	4013      	ands	r3, r2
 8002930:	4a16      	ldr	r2, [pc, #88]	; (800298c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	025b      	lsls	r3, r3, #9
 800293c:	4013      	ands	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	4810      	ldr	r0, [pc, #64]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002944:	f7fd fbe0 	bl	8000108 <__udivsi3>
 8002948:	0003      	movs	r3, r0
 800294a:	001a      	movs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4353      	muls	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	000a      	movs	r2, r1
 8002958:	0152      	lsls	r2, r2, #5
 800295a:	1a52      	subs	r2, r2, r1
 800295c:	0193      	lsls	r3, r2, #6
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	185b      	adds	r3, r3, r1
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
      break;
 800296c:	e002      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002970:	613b      	str	r3, [r7, #16]
      break;
 8002972:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002974:	693b      	ldr	r3, [r7, #16]
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b006      	add	sp, #24
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	08004eb8 	.word	0x08004eb8
 800298c:	08004ec8 	.word	0x08004ec8

08002990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000000 	.word	0x20000000

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029a8:	f7ff fff2 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029ac:	0001      	movs	r1, r0
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	2207      	movs	r2, #7
 80029b6:	4013      	ands	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	40d9      	lsrs	r1, r3
 80029be:	000b      	movs	r3, r1
}    
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08004eb0 	.word	0x08004eb0

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	4013      	ands	r3, r2
 80029ea:	d100      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029ec:	e08e      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2017      	movs	r0, #23
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	055b      	lsls	r3, r3, #21
 80029fe:	4013      	ands	r3, r2
 8002a00:	d110      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	0549      	lsls	r1, r1, #21
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	61da      	str	r2, [r3, #28]
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	055b      	lsls	r3, r3, #21
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d11a      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fbd9 	bl	80011f4 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	e008      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fbd4 	bl	80011f4 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e077      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	23c0      	movs	r3, #192	; 0xc0
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d034      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23c0      	movs	r3, #192	; 0xc0
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d02c      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a33      	ldr	r2, [pc, #204]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0249      	lsls	r1, r1, #9
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa6:	492e      	ldr	r1, [pc, #184]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fb9b 	bl	80011f4 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fb96 	bl	80011f4 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e038      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af6:	2317      	movs	r3, #23
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b06:	4918      	ldr	r1, [pc, #96]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	2210      	movs	r2, #16
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b006      	add	sp, #24
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	fffffcff 	.word	0xfffffcff
 8002b60:	fffeffff 	.word	0xfffeffff
 8002b64:	00001388 	.word	0x00001388
 8002b68:	efffffff 	.word	0xefffffff

08002b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0a8      	b.n	8002cd0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	2382      	movs	r3, #130	; 0x82
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d009      	beq.n	8002ba6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
 8002b98:	e005      	b.n	8002ba6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	225d      	movs	r2, #93	; 0x5d
 8002bb0:	5c9b      	ldrb	r3, [r3, r2]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	225c      	movs	r2, #92	; 0x5c
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd fec8 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	225d      	movs	r2, #93	; 0x5d
 8002bcc:	2102      	movs	r1, #2
 8002bce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	438a      	bics	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	23e0      	movs	r3, #224	; 0xe0
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d902      	bls.n	8002bf2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e002      	b.n	8002bf8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	015b      	lsls	r3, r3, #5
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	23f0      	movs	r3, #240	; 0xf0
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d008      	beq.n	8002c16 <HAL_SPI_Init+0xaa>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	23e0      	movs	r3, #224	; 0xe0
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	2382      	movs	r3, #130	; 0x82
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	401a      	ands	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	2384      	movs	r3, #132	; 0x84
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	400b      	ands	r3, r1
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2102      	movs	r1, #2
 8002c32:	400b      	ands	r3, r1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6999      	ldr	r1, [r3, #24]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	400b      	ands	r3, r1
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2138      	movs	r1, #56	; 0x38
 8002c52:	400b      	ands	r3, r1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2180      	movs	r1, #128	; 0x80
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	0011      	movs	r1, r2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2110      	movs	r1, #16
 8002c84:	400b      	ands	r3, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	400b      	ands	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68d9      	ldr	r1, [r3, #12]
 8002c96:	23f0      	movs	r3, #240	; 0xf0
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	015b      	lsls	r3, r3, #5
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <HAL_SPI_Init+0x16c>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	225d      	movs	r2, #93	; 0x5d
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b004      	add	sp, #16
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	fffff7ff 	.word	0xfffff7ff

08002cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e042      	b.n	8002d74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223d      	movs	r2, #61	; 0x3d
 8002cf2:	5c9b      	ldrb	r3, [r3, r2]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	223c      	movs	r2, #60	; 0x3c
 8002cfe:	2100      	movs	r1, #0
 8002d00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7fe f86f 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223d      	movs	r2, #61	; 0x3d
 8002d0e:	2102      	movs	r1, #2
 8002d10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	0010      	movs	r0, r2
 8002d1e:	f000 fc53 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2246      	movs	r2, #70	; 0x46
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223e      	movs	r2, #62	; 0x3e
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	223f      	movs	r2, #63	; 0x3f
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2241      	movs	r2, #65	; 0x41
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2242      	movs	r2, #66	; 0x42
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2243      	movs	r2, #67	; 0x43
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2244      	movs	r2, #68	; 0x44
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2245      	movs	r2, #69	; 0x45
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	223d      	movs	r2, #61	; 0x3d
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	223d      	movs	r2, #61	; 0x3d
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e035      	b.n	8002e00 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	223d      	movs	r2, #61	; 0x3d
 8002d98:	2102      	movs	r1, #2
 8002d9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_TIM_Base_Start_IT+0x8c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_TIM_Base_Start_IT+0x4e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <HAL_TIM_Base_Start_IT+0x90>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_Base_Start_IT+0x4e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_TIM_Base_Start_IT+0x94>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d010      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	e007      	b.n	8002dfe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b004      	add	sp, #16
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40014000 	.word	0x40014000

08002e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e042      	b.n	8002eac <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	223d      	movs	r2, #61	; 0x3d
 8002e2a:	5c9b      	ldrb	r3, [r3, r2]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223c      	movs	r2, #60	; 0x3c
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 f839 	bl	8002eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223d      	movs	r2, #61	; 0x3d
 8002e46:	2102      	movs	r1, #2
 8002e48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	0019      	movs	r1, r3
 8002e54:	0010      	movs	r0, r2
 8002e56:	f000 fbb7 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2246      	movs	r2, #70	; 0x46
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	223e      	movs	r2, #62	; 0x3e
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	223f      	movs	r2, #63	; 0x3f
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2241      	movs	r2, #65	; 0x41
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2242      	movs	r2, #66	; 0x42
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2243      	movs	r2, #67	; 0x43
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2244      	movs	r2, #68	; 0x44
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2245      	movs	r2, #69	; 0x45
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	223d      	movs	r2, #61	; 0x3d
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d108      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x22>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	223e      	movs	r2, #62	; 0x3e
 8002ed8:	5c9b      	ldrb	r3, [r3, r2]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	1e5a      	subs	r2, r3, #1
 8002ee0:	4193      	sbcs	r3, r2
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e01f      	b.n	8002f26 <HAL_TIM_PWM_Start+0x62>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d108      	bne.n	8002efe <HAL_TIM_PWM_Start+0x3a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	223f      	movs	r2, #63	; 0x3f
 8002ef0:	5c9b      	ldrb	r3, [r3, r2]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	1e5a      	subs	r2, r3, #1
 8002ef8:	4193      	sbcs	r3, r2
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e013      	b.n	8002f26 <HAL_TIM_PWM_Start+0x62>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d108      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x52>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	4193      	sbcs	r3, r2
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	e007      	b.n	8002f26 <HAL_TIM_PWM_Start+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2241      	movs	r2, #65	; 0x41
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	1e5a      	subs	r2, r3, #1
 8002f22:	4193      	sbcs	r3, r2
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06e      	b.n	800300c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x7a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	223e      	movs	r2, #62	; 0x3e
 8002f38:	2102      	movs	r1, #2
 8002f3a:	5499      	strb	r1, [r3, r2]
 8002f3c:	e013      	b.n	8002f66 <HAL_TIM_PWM_Start+0xa2>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_PWM_Start+0x8a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	223f      	movs	r2, #63	; 0x3f
 8002f48:	2102      	movs	r1, #2
 8002f4a:	5499      	strb	r1, [r3, r2]
 8002f4c:	e00b      	b.n	8002f66 <HAL_TIM_PWM_Start+0xa2>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_PWM_Start+0x9a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	2102      	movs	r1, #2
 8002f5a:	5499      	strb	r1, [r3, r2]
 8002f5c:	e003      	b.n	8002f66 <HAL_TIM_PWM_Start+0xa2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2241      	movs	r2, #65	; 0x41
 8002f62:	2102      	movs	r1, #2
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 fe36 	bl	8003be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_TIM_PWM_Start+0x150>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_PWM_Start+0xd8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_TIM_PWM_Start+0x154>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_PWM_Start+0xd8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_TIM_PWM_Start+0x158>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_PWM_Start+0xd8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_TIM_PWM_Start+0x15c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0xdc>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xde>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0209      	lsls	r1, r1, #8
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_TIM_PWM_Start+0x150>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_TIM_PWM_Start+0x112>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_TIM_PWM_Start+0x160>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_TIM_PWM_Start+0x112>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_TIM_PWM_Start+0x154>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d111      	bne.n	8002ffa <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2207      	movs	r2, #7
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d010      	beq.n	800300a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	e007      	b.n	800300a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800
 8003024:	40000400 	.word	0x40000400

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2202      	movs	r2, #2
 8003038:	4013      	ands	r3, r2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d124      	bne.n	8003088 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	4013      	ands	r3, r2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11d      	bne.n	8003088 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2203      	movs	r2, #3
 8003052:	4252      	negs	r2, r2
 8003054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2203      	movs	r2, #3
 8003064:	4013      	ands	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fa94 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 8003070:	e007      	b.n	8003082 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fa87 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 fa93 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2204      	movs	r2, #4
 8003090:	4013      	ands	r3, r2
 8003092:	2b04      	cmp	r3, #4
 8003094:	d125      	bne.n	80030e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2204      	movs	r2, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d11e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2205      	movs	r2, #5
 80030aa:	4252      	negs	r2, r2
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	23c0      	movs	r3, #192	; 0xc0
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4013      	ands	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fa67 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 80030ca:	e007      	b.n	80030dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fa5a 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fa66 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2208      	movs	r2, #8
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d124      	bne.n	800313a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11d      	bne.n	800313a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2209      	movs	r2, #9
 8003104:	4252      	negs	r2, r2
 8003106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2204      	movs	r2, #4
 800310c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2203      	movs	r2, #3
 8003116:	4013      	ands	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 fa3b 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 8003122:	e007      	b.n	8003134 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 fa2e 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fa3a 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2210      	movs	r2, #16
 8003142:	4013      	ands	r3, r2
 8003144:	2b10      	cmp	r3, #16
 8003146:	d125      	bne.n	8003194 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2210      	movs	r2, #16
 8003150:	4013      	ands	r3, r2
 8003152:	2b10      	cmp	r3, #16
 8003154:	d11e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2211      	movs	r2, #17
 800315c:	4252      	negs	r2, r2
 800315e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2208      	movs	r2, #8
 8003164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	23c0      	movs	r3, #192	; 0xc0
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 fa0e 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 800317c:	e007      	b.n	800318e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f000 fa01 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 fa0d 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10f      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4252      	negs	r2, r2
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fd f929 	bl	8000414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b80      	cmp	r3, #128	; 0x80
 80031ce:	d10f      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	4013      	ands	r3, r2
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d108      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2281      	movs	r2, #129	; 0x81
 80031e4:	4252      	negs	r2, r2
 80031e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 fe70 	bl	8003ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d10f      	bne.n	800321e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d108      	bne.n	800321e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2241      	movs	r2, #65	; 0x41
 8003212:	4252      	negs	r2, r2
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f9cd 	bl	80035b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2220      	movs	r2, #32
 8003226:	4013      	ands	r3, r2
 8003228:	2b20      	cmp	r3, #32
 800322a:	d10f      	bne.n	800324c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	4013      	ands	r3, r2
 8003236:	2b20      	cmp	r3, #32
 8003238:	d108      	bne.n	800324c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2221      	movs	r2, #33	; 0x21
 8003240:	4252      	negs	r2, r2
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 fe3a 	bl	8003ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	2317      	movs	r3, #23
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	223c      	movs	r2, #60	; 0x3c
 800326c:	5c9b      	ldrb	r3, [r3, r2]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003272:	2302      	movs	r3, #2
 8003274:	e0ad      	b.n	80033d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d100      	bne.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003284:	e076      	b.n	8003374 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d900      	bls.n	800328e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800328c:	e095      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d04e      	beq.n	8003332 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d900      	bls.n	800329c <HAL_TIM_PWM_ConfigChannel+0x48>
 800329a:	e08e      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d021      	beq.n	80032ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80032a8:	e087      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f9fe 	bl	80036b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2108      	movs	r1, #8
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2104      	movs	r1, #4
 80032d4:	438a      	bics	r2, r1
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]
      break;
 80032ea:	e06b      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 fa65 	bl	80037c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	0109      	lsls	r1, r1, #4
 8003308:	430a      	orrs	r2, r1
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4931      	ldr	r1, [pc, #196]	; (80033dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003318:	400a      	ands	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	021a      	lsls	r2, r3, #8
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	619a      	str	r2, [r3, #24]
      break;
 8003330:	e048      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0011      	movs	r1, r2
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fac6 	bl	80038cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2108      	movs	r1, #8
 800334c:	430a      	orrs	r2, r1
 800334e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2104      	movs	r1, #4
 800335c:	438a      	bics	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69d9      	ldr	r1, [r3, #28]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
      break;
 8003372:	e027      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fb2b 	bl	80039d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	0109      	lsls	r1, r1, #4
 8003390:	430a      	orrs	r2, r1
 8003392:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	490f      	ldr	r1, [pc, #60]	; (80033dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69d9      	ldr	r1, [r3, #28]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	61da      	str	r2, [r3, #28]
      break;
 80033b8:	e004      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80033ba:	2317      	movs	r3, #23
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
      break;
 80033c2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

  return status;
 80033cc:	2317      	movs	r3, #23
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	781b      	ldrb	r3, [r3, #0]
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b006      	add	sp, #24
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	fffffbff 	.word	0xfffffbff

080033e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ea:	230f      	movs	r3, #15
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223c      	movs	r2, #60	; 0x3c
 80033f6:	5c9b      	ldrb	r3, [r3, r2]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_ConfigClockSource+0x20>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0bc      	b.n	800357a <HAL_TIM_ConfigClockSource+0x19a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	223c      	movs	r2, #60	; 0x3c
 8003404:	2101      	movs	r1, #1
 8003406:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	223d      	movs	r2, #61	; 0x3d
 800340c:	2102      	movs	r1, #2
 800340e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2277      	movs	r2, #119	; 0x77
 800341c:	4393      	bics	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4a58      	ldr	r2, [pc, #352]	; (8003584 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	0192      	lsls	r2, r2, #6
 8003438:	4293      	cmp	r3, r2
 800343a:	d040      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xde>
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	0192      	lsls	r2, r2, #6
 8003440:	4293      	cmp	r3, r2
 8003442:	d900      	bls.n	8003446 <HAL_TIM_ConfigClockSource+0x66>
 8003444:	e088      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	0152      	lsls	r2, r2, #5
 800344a:	4293      	cmp	r3, r2
 800344c:	d100      	bne.n	8003450 <HAL_TIM_ConfigClockSource+0x70>
 800344e:	e088      	b.n	8003562 <HAL_TIM_ConfigClockSource+0x182>
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	0152      	lsls	r2, r2, #5
 8003454:	4293      	cmp	r3, r2
 8003456:	d900      	bls.n	800345a <HAL_TIM_ConfigClockSource+0x7a>
 8003458:	e07e      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 800345a:	2b70      	cmp	r3, #112	; 0x70
 800345c:	d018      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0xb0>
 800345e:	d900      	bls.n	8003462 <HAL_TIM_ConfigClockSource+0x82>
 8003460:	e07a      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 8003462:	2b60      	cmp	r3, #96	; 0x60
 8003464:	d04f      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x126>
 8003466:	d900      	bls.n	800346a <HAL_TIM_ConfigClockSource+0x8a>
 8003468:	e076      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 800346a:	2b50      	cmp	r3, #80	; 0x50
 800346c:	d03b      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x106>
 800346e:	d900      	bls.n	8003472 <HAL_TIM_ConfigClockSource+0x92>
 8003470:	e072      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 8003472:	2b40      	cmp	r3, #64	; 0x40
 8003474:	d057      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x146>
 8003476:	d900      	bls.n	800347a <HAL_TIM_ConfigClockSource+0x9a>
 8003478:	e06e      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 800347a:	2b30      	cmp	r3, #48	; 0x30
 800347c:	d063      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x166>
 800347e:	d86b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 8003480:	2b20      	cmp	r3, #32
 8003482:	d060      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x166>
 8003484:	d868      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d05d      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x166>
 800348a:	2b10      	cmp	r3, #16
 800348c:	d05b      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x166>
 800348e:	e063      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f000 fb7e 	bl	8003ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2277      	movs	r2, #119	; 0x77
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
      break;
 80034bc:	e052      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f000 fb67 	bl	8003ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	01c9      	lsls	r1, r1, #7
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
      break;
 80034e4:	e03e      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	001a      	movs	r2, r3
 80034f4:	f000 fada 	bl	8003aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2150      	movs	r1, #80	; 0x50
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 fb34 	bl	8003b6c <TIM_ITRx_SetConfig>
      break;
 8003504:	e02e      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	001a      	movs	r2, r3
 8003514:	f000 faf8 	bl	8003b08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2160      	movs	r1, #96	; 0x60
 800351e:	0018      	movs	r0, r3
 8003520:	f000 fb24 	bl	8003b6c <TIM_ITRx_SetConfig>
      break;
 8003524:	e01e      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	001a      	movs	r2, r3
 8003534:	f000 faba 	bl	8003aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	0018      	movs	r0, r3
 8003540:	f000 fb14 	bl	8003b6c <TIM_ITRx_SetConfig>
      break;
 8003544:	e00e      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0019      	movs	r1, r3
 8003550:	0010      	movs	r0, r2
 8003552:	f000 fb0b 	bl	8003b6c <TIM_ITRx_SetConfig>
      break;
 8003556:	e005      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003558:	230f      	movs	r3, #15
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
      break;
 8003560:	e000      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003562:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	223d      	movs	r2, #61	; 0x3d
 8003568:	2101      	movs	r1, #1
 800356a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	223c      	movs	r2, #60	; 0x3c
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

  return status;
 8003574:	230f      	movs	r3, #15
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	781b      	ldrb	r3, [r3, #0]
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	ffff00ff 	.word	0xffff00ff

08003588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <TIM_Base_SetConfig+0xd0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x20>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a2e      	ldr	r2, [pc, #184]	; (800369c <TIM_Base_SetConfig+0xd4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2270      	movs	r2, #112	; 0x70
 80035ec:	4393      	bics	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <TIM_Base_SetConfig+0xd0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a25      	ldr	r2, [pc, #148]	; (800369c <TIM_Base_SetConfig+0xd4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00f      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <TIM_Base_SetConfig+0xd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <TIM_Base_SetConfig+0xdc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <TIM_Base_SetConfig+0xe0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <TIM_Base_SetConfig+0xe4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a20      	ldr	r2, [pc, #128]	; (80036b0 <TIM_Base_SetConfig+0xe8>)
 800362e:	4013      	ands	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	4393      	bics	r3, r2
 8003642:	001a      	movs	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <TIM_Base_SetConfig+0xd0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0xba>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <TIM_Base_SetConfig+0xdc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0xba>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <TIM_Base_SetConfig+0xe0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0xba>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <TIM_Base_SetConfig+0xe4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d103      	bne.n	800368a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	615a      	str	r2, [r3, #20]
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b004      	add	sp, #16
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40002000 	.word	0x40002000
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800
 80036b0:	fffffcff 	.word	0xfffffcff

080036b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4393      	bics	r3, r2
 80036c6:	001a      	movs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2270      	movs	r2, #112	; 0x70
 80036e2:	4393      	bics	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2203      	movs	r2, #3
 80036ea:	4393      	bics	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4393      	bics	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a27      	ldr	r2, [pc, #156]	; (80037ac <TIM_OC1_SetConfig+0xf8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00b      	beq.n	800372a <TIM_OC1_SetConfig+0x76>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <TIM_OC1_SetConfig+0xfc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <TIM_OC1_SetConfig+0x76>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <TIM_OC1_SetConfig+0x100>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_OC1_SetConfig+0x76>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a24      	ldr	r2, [pc, #144]	; (80037b8 <TIM_OC1_SetConfig+0x104>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10c      	bne.n	8003744 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2208      	movs	r2, #8
 800372e:	4393      	bics	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2204      	movs	r2, #4
 8003740:	4393      	bics	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a19      	ldr	r2, [pc, #100]	; (80037ac <TIM_OC1_SetConfig+0xf8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00b      	beq.n	8003764 <TIM_OC1_SetConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <TIM_OC1_SetConfig+0xfc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_OC1_SetConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <TIM_OC1_SetConfig+0x100>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC1_SetConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <TIM_OC1_SetConfig+0x104>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d111      	bne.n	8003788 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <TIM_OC1_SetConfig+0x108>)
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <TIM_OC1_SetConfig+0x10c>)
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b006      	add	sp, #24
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800
 80037bc:	fffffeff 	.word	0xfffffeff
 80037c0:	fffffdff 	.word	0xfffffdff

080037c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	2210      	movs	r2, #16
 80037d4:	4393      	bics	r3, r2
 80037d6:	001a      	movs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a2e      	ldr	r2, [pc, #184]	; (80038ac <TIM_OC2_SetConfig+0xe8>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	; (80038b0 <TIM_OC2_SetConfig+0xec>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2220      	movs	r2, #32
 800380e:	4393      	bics	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <TIM_OC2_SetConfig+0xf0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10d      	bne.n	8003842 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	4393      	bics	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2240      	movs	r2, #64	; 0x40
 800383e:	4393      	bics	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <TIM_OC2_SetConfig+0xf0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_OC2_SetConfig+0x9e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <TIM_OC2_SetConfig+0xf4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_OC2_SetConfig+0x9e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <TIM_OC2_SetConfig+0xf8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_OC2_SetConfig+0x9e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <TIM_OC2_SetConfig+0xfc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d113      	bne.n	800388a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <TIM_OC2_SetConfig+0x100>)
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <TIM_OC2_SetConfig+0x104>)
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b006      	add	sp, #24
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	ffff8fff 	.word	0xffff8fff
 80038b0:	fffffcff 	.word	0xfffffcff
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40014400 	.word	0x40014400
 80038c0:	40014800 	.word	0x40014800
 80038c4:	fffffbff 	.word	0xfffffbff
 80038c8:	fffff7ff 	.word	0xfffff7ff

080038cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a35      	ldr	r2, [pc, #212]	; (80039b0 <TIM_OC3_SetConfig+0xe4>)
 80038dc:	401a      	ands	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2270      	movs	r2, #112	; 0x70
 80038f8:	4393      	bics	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2203      	movs	r2, #3
 8003900:	4393      	bics	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <TIM_OC3_SetConfig+0xe8>)
 8003912:	4013      	ands	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <TIM_OC3_SetConfig+0xec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10d      	bne.n	8003946 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <TIM_OC3_SetConfig+0xf0>)
 800392e:	4013      	ands	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <TIM_OC3_SetConfig+0xf4>)
 8003942:	4013      	ands	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <TIM_OC3_SetConfig+0xec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_OC3_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <TIM_OC3_SetConfig+0xf8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_OC3_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <TIM_OC3_SetConfig+0xfc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_OC3_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <TIM_OC3_SetConfig+0x100>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d113      	bne.n	800398e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <TIM_OC3_SetConfig+0x104>)
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <TIM_OC3_SetConfig+0x108>)
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b006      	add	sp, #24
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	fffffeff 	.word	0xfffffeff
 80039b4:	fffffdff 	.word	0xfffffdff
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	fffff7ff 	.word	0xfffff7ff
 80039c0:	fffffbff 	.word	0xfffffbff
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	ffffefff 	.word	0xffffefff
 80039d4:	ffffdfff 	.word	0xffffdfff

080039d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <TIM_OC4_SetConfig+0xb0>)
 80039e8:	401a      	ands	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <TIM_OC4_SetConfig+0xb4>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <TIM_OC4_SetConfig+0xb8>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <TIM_OC4_SetConfig+0xbc>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <TIM_OC4_SetConfig+0xc0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_OC4_SetConfig+0x78>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <TIM_OC4_SetConfig+0xc4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_OC4_SetConfig+0x78>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <TIM_OC4_SetConfig+0xc8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC4_SetConfig+0x78>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <TIM_OC4_SetConfig+0xcc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d109      	bne.n	8003a64 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <TIM_OC4_SetConfig+0xd0>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b006      	add	sp, #24
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	ffffefff 	.word	0xffffefff
 8003a8c:	ffff8fff 	.word	0xffff8fff
 8003a90:	fffffcff 	.word	0xfffffcff
 8003a94:	ffffdfff 	.word	0xffffdfff
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800
 8003aa8:	ffffbfff 	.word	0xffffbfff

08003aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	22f0      	movs	r2, #240	; 0xf0
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	4393      	bics	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b006      	add	sp, #24
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <TIM_TI2_ConfigInputStage+0x60>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	22a0      	movs	r2, #160	; 0xa0
 8003b44:	4393      	bics	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b006      	add	sp, #24
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	ffff0fff 	.word	0xffff0fff

08003b6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2270      	movs	r2, #112	; 0x70
 8003b80:	4393      	bics	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <TIM_ETR_SetConfig+0x3c>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b006      	add	sp, #24
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	ffff00ff 	.word	0xffff00ff

08003be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	221f      	movs	r2, #31
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	0013      	movs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	43d2      	mvns	r2, r2
 8003c02:	401a      	ands	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	211f      	movs	r1, #31
 8003c10:	400b      	ands	r3, r1
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4099      	lsls	r1, r3
 8003c16:	000b      	movs	r3, r1
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b006      	add	sp, #24
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d108      	bne.n	8003c4a <HAL_TIMEx_PWMN_Start+0x22>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2242      	movs	r2, #66	; 0x42
 8003c3c:	5c9b      	ldrb	r3, [r3, r2]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	4193      	sbcs	r3, r2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e01f      	b.n	8003c8a <HAL_TIMEx_PWMN_Start+0x62>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d108      	bne.n	8003c62 <HAL_TIMEx_PWMN_Start+0x3a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2243      	movs	r2, #67	; 0x43
 8003c54:	5c9b      	ldrb	r3, [r3, r2]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	4193      	sbcs	r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e013      	b.n	8003c8a <HAL_TIMEx_PWMN_Start+0x62>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d108      	bne.n	8003c7a <HAL_TIMEx_PWMN_Start+0x52>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2244      	movs	r2, #68	; 0x44
 8003c6c:	5c9b      	ldrb	r3, [r3, r2]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	4193      	sbcs	r3, r2
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e007      	b.n	8003c8a <HAL_TIMEx_PWMN_Start+0x62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2245      	movs	r2, #69	; 0x45
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	4193      	sbcs	r3, r2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e055      	b.n	8003d3e <HAL_TIMEx_PWMN_Start+0x116>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIMEx_PWMN_Start+0x7a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2242      	movs	r2, #66	; 0x42
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	5499      	strb	r1, [r3, r2]
 8003ca0:	e013      	b.n	8003cca <HAL_TIMEx_PWMN_Start+0xa2>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIMEx_PWMN_Start+0x8a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2243      	movs	r2, #67	; 0x43
 8003cac:	2102      	movs	r1, #2
 8003cae:	5499      	strb	r1, [r3, r2]
 8003cb0:	e00b      	b.n	8003cca <HAL_TIMEx_PWMN_Start+0xa2>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIMEx_PWMN_Start+0x9a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2244      	movs	r2, #68	; 0x44
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	5499      	strb	r1, [r3, r2]
 8003cc0:	e003      	b.n	8003cca <HAL_TIMEx_PWMN_Start+0xa2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2245      	movs	r2, #69	; 0x45
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 f904 	bl	8003ee0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	0209      	lsls	r1, r1, #8
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <HAL_TIMEx_PWMN_Start+0x120>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_TIMEx_PWMN_Start+0xe0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_TIMEx_PWMN_Start+0x124>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_TIMEx_PWMN_Start+0xe0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <HAL_TIMEx_PWMN_Start+0x128>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d111      	bne.n	8003d2c <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2207      	movs	r2, #7
 8003d10:	4013      	ands	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d010      	beq.n	8003d3c <HAL_TIMEx_PWMN_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2101      	movs	r1, #1
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	e007      	b.n	8003d3c <HAL_TIMEx_PWMN_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2101      	movs	r1, #1
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40014000 	.word	0x40014000

08003d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223c      	movs	r2, #60	; 0x3c
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e041      	b.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	223c      	movs	r2, #60	; 0x3c
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223d      	movs	r2, #61	; 0x3d
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2270      	movs	r2, #112	; 0x70
 8003d90:	4393      	bics	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10c      	bne.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	4393      	bics	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	223d      	movs	r2, #61	; 0x3d
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	223c      	movs	r2, #60	; 0x3c
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b004      	add	sp, #16
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40014000 	.word	0x40014000

08003e04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223c      	movs	r2, #60	; 0x3c
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e03e      	b.n	8003e9e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223c      	movs	r2, #60	; 0x3c
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	001a      	movs	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003e58:	401a      	ands	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003e66:	401a      	ands	r2, r3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003e74:	401a      	ands	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003e82:	401a      	ands	r2, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223c      	movs	r2, #60	; 0x3c
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b004      	add	sp, #16
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	fffffcff 	.word	0xfffffcff
 8003eac:	fffffbff 	.word	0xfffffbff
 8003eb0:	fffff7ff 	.word	0xfffff7ff
 8003eb4:	ffffefff 	.word	0xffffefff
 8003eb8:	ffffdfff 	.word	0xffffdfff
 8003ebc:	ffffbfff 	.word	0xffffbfff

08003ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	221f      	movs	r2, #31
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	43d2      	mvns	r2, r2
 8003f02:	401a      	ands	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	211f      	movs	r1, #31
 8003f10:	400b      	ands	r3, r1
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4099      	lsls	r1, r3
 8003f16:	000b      	movs	r3, r1
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b006      	add	sp, #24
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e044      	b.n	8003fc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2278      	movs	r2, #120	; 0x78
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fd f877 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	; 0x24
 8003f56:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	438a      	bics	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fbb4 	bl	80046d8 <UART_SetConfig>
 8003f70:	0003      	movs	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e024      	b.n	8003fc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fce7 	bl	8004958 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	490d      	ldr	r1, [pc, #52]	; (8003fcc <HAL_UART_Init+0xa4>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2108      	movs	r1, #8
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 fd7f 	bl	8004ac0 <UART_CheckIdleState>
 8003fc2:	0003      	movs	r3, r0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	fffff7ff 	.word	0xfffff7ff

08003fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	1dbb      	adds	r3, r7, #6
 8003fde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d000      	beq.n	8003fea <HAL_UART_Transmit+0x1a>
 8003fe8:	e08d      	b.n	8004106 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_UART_Transmit+0x28>
 8003ff0:	1dbb      	adds	r3, r7, #6
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e085      	b.n	8004108 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	015b      	lsls	r3, r3, #5
 8004004:	429a      	cmp	r2, r3
 8004006:	d109      	bne.n	800401c <HAL_UART_Transmit+0x4c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2201      	movs	r2, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d001      	beq.n	800401c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e075      	b.n	8004108 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2284      	movs	r2, #132	; 0x84
 8004020:	2100      	movs	r1, #0
 8004022:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2221      	movs	r2, #33	; 0x21
 8004028:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800402a:	f7fd f8e3 	bl	80011f4 <HAL_GetTick>
 800402e:	0003      	movs	r3, r0
 8004030:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1dba      	adds	r2, r7, #6
 8004036:	2150      	movs	r1, #80	; 0x50
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1dba      	adds	r2, r7, #6
 8004040:	2152      	movs	r1, #82	; 0x52
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	015b      	lsls	r3, r3, #5
 800404e:	429a      	cmp	r2, r3
 8004050:	d108      	bne.n	8004064 <HAL_UART_Transmit+0x94>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e003      	b.n	800406c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800406c:	e030      	b.n	80040d0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	0013      	movs	r3, r2
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	f000 fdc8 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d004      	beq.n	800408e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e03c      	b.n	8004108 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	05d2      	lsls	r2, r2, #23
 800409e:	0dd2      	lsrs	r2, r2, #23
 80040a0:	b292      	uxth	r2, r2
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	3302      	adds	r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e008      	b.n	80040be <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	b292      	uxth	r2, r2
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2252      	movs	r2, #82	; 0x52
 80040c2:	5a9b      	ldrh	r3, [r3, r2]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b299      	uxth	r1, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2252      	movs	r2, #82	; 0x52
 80040ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2252      	movs	r2, #82	; 0x52
 80040d4:	5a9b      	ldrh	r3, [r3, r2]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1c8      	bne.n	800406e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	0013      	movs	r3, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	f000 fd91 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 80040ee:	1e03      	subs	r3, r0, #0
 80040f0:	d004      	beq.n	80040fc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e005      	b.n	8004108 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b008      	add	sp, #32
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b0ab      	sub	sp, #172	; 0xac
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	22a4      	movs	r2, #164	; 0xa4
 8004120:	18b9      	adds	r1, r7, r2
 8004122:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	20a0      	movs	r0, #160	; 0xa0
 800412c:	1839      	adds	r1, r7, r0
 800412e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	219c      	movs	r1, #156	; 0x9c
 8004138:	1879      	adds	r1, r7, r1
 800413a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800413c:	0011      	movs	r1, r2
 800413e:	18bb      	adds	r3, r7, r2
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a99      	ldr	r2, [pc, #612]	; (80043a8 <HAL_UART_IRQHandler+0x298>)
 8004144:	4013      	ands	r3, r2
 8004146:	2298      	movs	r2, #152	; 0x98
 8004148:	18bc      	adds	r4, r7, r2
 800414a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800414c:	18bb      	adds	r3, r7, r2
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d114      	bne.n	800417e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004154:	187b      	adds	r3, r7, r1
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2220      	movs	r2, #32
 800415a:	4013      	ands	r3, r2
 800415c:	d00f      	beq.n	800417e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800415e:	183b      	adds	r3, r7, r0
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2220      	movs	r2, #32
 8004164:	4013      	ands	r3, r2
 8004166:	d00a      	beq.n	800417e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416c:	2b00      	cmp	r3, #0
 800416e:	d100      	bne.n	8004172 <HAL_UART_IRQHandler+0x62>
 8004170:	e286      	b.n	8004680 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	0010      	movs	r0, r2
 800417a:	4798      	blx	r3
      }
      return;
 800417c:	e280      	b.n	8004680 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800417e:	2398      	movs	r3, #152	; 0x98
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d100      	bne.n	800418a <HAL_UART_IRQHandler+0x7a>
 8004188:	e114      	b.n	80043b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800418a:	239c      	movs	r3, #156	; 0x9c
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	4013      	ands	r3, r2
 8004194:	d106      	bne.n	80041a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004196:	23a0      	movs	r3, #160	; 0xa0
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a83      	ldr	r2, [pc, #524]	; (80043ac <HAL_UART_IRQHandler+0x29c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	d100      	bne.n	80041a4 <HAL_UART_IRQHandler+0x94>
 80041a2:	e107      	b.n	80043b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041a4:	23a4      	movs	r3, #164	; 0xa4
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d012      	beq.n	80041d6 <HAL_UART_IRQHandler+0xc6>
 80041b0:	23a0      	movs	r3, #160	; 0xa0
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2201      	movs	r2, #1
 80041c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2284      	movs	r2, #132	; 0x84
 80041ca:	589b      	ldr	r3, [r3, r2]
 80041cc:	2201      	movs	r2, #1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2184      	movs	r1, #132	; 0x84
 80041d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d6:	23a4      	movs	r3, #164	; 0xa4
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2202      	movs	r2, #2
 80041de:	4013      	ands	r3, r2
 80041e0:	d011      	beq.n	8004206 <HAL_UART_IRQHandler+0xf6>
 80041e2:	239c      	movs	r3, #156	; 0x9c
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2202      	movs	r2, #2
 80041f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2284      	movs	r2, #132	; 0x84
 80041fa:	589b      	ldr	r3, [r3, r2]
 80041fc:	2204      	movs	r2, #4
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2184      	movs	r1, #132	; 0x84
 8004204:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004206:	23a4      	movs	r3, #164	; 0xa4
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	4013      	ands	r3, r2
 8004210:	d011      	beq.n	8004236 <HAL_UART_IRQHandler+0x126>
 8004212:	239c      	movs	r3, #156	; 0x9c
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	d00b      	beq.n	8004236 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2204      	movs	r2, #4
 8004224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2284      	movs	r2, #132	; 0x84
 800422a:	589b      	ldr	r3, [r3, r2]
 800422c:	2202      	movs	r2, #2
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2184      	movs	r1, #132	; 0x84
 8004234:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004236:	23a4      	movs	r3, #164	; 0xa4
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2208      	movs	r2, #8
 800423e:	4013      	ands	r3, r2
 8004240:	d017      	beq.n	8004272 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004242:	23a0      	movs	r3, #160	; 0xa0
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2220      	movs	r2, #32
 800424a:	4013      	ands	r3, r2
 800424c:	d105      	bne.n	800425a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800424e:	239c      	movs	r3, #156	; 0x9c
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2284      	movs	r2, #132	; 0x84
 8004266:	589b      	ldr	r3, [r3, r2]
 8004268:	2208      	movs	r2, #8
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2184      	movs	r1, #132	; 0x84
 8004270:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004272:	23a4      	movs	r3, #164	; 0xa4
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4013      	ands	r3, r2
 800427e:	d013      	beq.n	80042a8 <HAL_UART_IRQHandler+0x198>
 8004280:	23a0      	movs	r3, #160	; 0xa0
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	04db      	lsls	r3, r3, #19
 800428a:	4013      	ands	r3, r2
 800428c:	d00c      	beq.n	80042a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2284      	movs	r2, #132	; 0x84
 800429c:	589b      	ldr	r3, [r3, r2]
 800429e:	2220      	movs	r2, #32
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2184      	movs	r1, #132	; 0x84
 80042a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2284      	movs	r2, #132	; 0x84
 80042ac:	589b      	ldr	r3, [r3, r2]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d100      	bne.n	80042b4 <HAL_UART_IRQHandler+0x1a4>
 80042b2:	e1e7      	b.n	8004684 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042b4:	23a4      	movs	r3, #164	; 0xa4
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2220      	movs	r2, #32
 80042bc:	4013      	ands	r3, r2
 80042be:	d00e      	beq.n	80042de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042c0:	23a0      	movs	r3, #160	; 0xa0
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2220      	movs	r2, #32
 80042c8:	4013      	ands	r3, r2
 80042ca:	d008      	beq.n	80042de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	0010      	movs	r0, r2
 80042dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2284      	movs	r2, #132	; 0x84
 80042e2:	589b      	ldr	r3, [r3, r2]
 80042e4:	2194      	movs	r1, #148	; 0x94
 80042e6:	187a      	adds	r2, r7, r1
 80042e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2240      	movs	r2, #64	; 0x40
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d004      	beq.n	8004302 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2228      	movs	r2, #40	; 0x28
 80042fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004300:	d047      	beq.n	8004392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 fced 	bl	8004ce4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2240      	movs	r2, #64	; 0x40
 8004312:	4013      	ands	r3, r2
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d137      	bne.n	8004388 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004318:	f3ef 8310 	mrs	r3, PRIMASK
 800431c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800431e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004320:	2090      	movs	r0, #144	; 0x90
 8004322:	183a      	adds	r2, r7, r0
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	2301      	movs	r3, #1
 8004328:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2140      	movs	r1, #64	; 0x40
 800433e:	438a      	bics	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	183b      	adds	r3, r7, r0
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <HAL_UART_IRQHandler+0x2a0>)
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004364:	0018      	movs	r0, r3
 8004366:	f7fd fcc9 	bl	8001cfc <HAL_DMA_Abort_IT>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d01a      	beq.n	80043a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004378:	0018      	movs	r0, r3
 800437a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e012      	b.n	80043a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f995 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004386:	e00d      	b.n	80043a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0018      	movs	r0, r3
 800438c:	f000 f990 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e008      	b.n	80043a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f000 f98b 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2284      	movs	r2, #132	; 0x84
 800439e:	2100      	movs	r1, #0
 80043a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80043a2:	e16f      	b.n	8004684 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	46c0      	nop			; (mov r8, r8)
    return;
 80043a6:	e16d      	b.n	8004684 <HAL_UART_IRQHandler+0x574>
 80043a8:	0000080f 	.word	0x0000080f
 80043ac:	04000120 	.word	0x04000120
 80043b0:	08004dad 	.word	0x08004dad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d000      	beq.n	80043be <HAL_UART_IRQHandler+0x2ae>
 80043bc:	e139      	b.n	8004632 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043be:	23a4      	movs	r3, #164	; 0xa4
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2210      	movs	r2, #16
 80043c6:	4013      	ands	r3, r2
 80043c8:	d100      	bne.n	80043cc <HAL_UART_IRQHandler+0x2bc>
 80043ca:	e132      	b.n	8004632 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043cc:	23a0      	movs	r3, #160	; 0xa0
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	4013      	ands	r3, r2
 80043d6:	d100      	bne.n	80043da <HAL_UART_IRQHandler+0x2ca>
 80043d8:	e12b      	b.n	8004632 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2210      	movs	r2, #16
 80043e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2240      	movs	r2, #64	; 0x40
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d000      	beq.n	80043f2 <HAL_UART_IRQHandler+0x2e2>
 80043f0:	e09f      	b.n	8004532 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	217e      	movs	r1, #126	; 0x7e
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004400:	187b      	adds	r3, r7, r1
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d100      	bne.n	800440a <HAL_UART_IRQHandler+0x2fa>
 8004408:	e13e      	b.n	8004688 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2258      	movs	r2, #88	; 0x58
 800440e:	5a9b      	ldrh	r3, [r3, r2]
 8004410:	187a      	adds	r2, r7, r1
 8004412:	8812      	ldrh	r2, [r2, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d300      	bcc.n	800441a <HAL_UART_IRQHandler+0x30a>
 8004418:	e136      	b.n	8004688 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	187a      	adds	r2, r7, r1
 800441e:	215a      	movs	r1, #90	; 0x5a
 8004420:	8812      	ldrh	r2, [r2, #0]
 8004422:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b20      	cmp	r3, #32
 800442c:	d06f      	beq.n	800450e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004436:	67bb      	str	r3, [r7, #120]	; 0x78
 8004438:	2301      	movs	r3, #1
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4992      	ldr	r1, [pc, #584]	; (8004698 <HAL_UART_IRQHandler+0x588>)
 8004450:	400a      	ands	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004460:	f3ef 8310 	mrs	r3, PRIMASK
 8004464:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	677b      	str	r3, [r7, #116]	; 0x74
 800446a:	2301      	movs	r3, #1
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004470:	f383 8810 	msr	PRIMASK, r3
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	438a      	bics	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004488:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448c:	f383 8810 	msr	PRIMASK, r3
}
 8004490:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004492:	f3ef 8310 	mrs	r3, PRIMASK
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004498:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	673b      	str	r3, [r7, #112]	; 0x70
 800449c:	2301      	movs	r3, #1
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a2:	f383 8810 	msr	PRIMASK, r3
}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2140      	movs	r1, #64	; 0x40
 80044b4:	438a      	bics	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2280      	movs	r2, #128	; 0x80
 80044c8:	2120      	movs	r1, #32
 80044ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80044d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044dc:	2301      	movs	r3, #1
 80044de:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e2:	f383 8810 	msr	PRIMASK, r3
}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2110      	movs	r1, #16
 80044f4:	438a      	bics	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	0018      	movs	r0, r3
 800450a:	f7fd fbbf 	bl	8001c8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2258      	movs	r2, #88	; 0x58
 8004518:	5a9a      	ldrh	r2, [r3, r2]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	215a      	movs	r1, #90	; 0x5a
 800451e:	5a5b      	ldrh	r3, [r3, r1]
 8004520:	b29b      	uxth	r3, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f000 f8c8 	bl	80046c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004530:	e0aa      	b.n	8004688 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2258      	movs	r2, #88	; 0x58
 8004536:	5a99      	ldrh	r1, [r3, r2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	225a      	movs	r2, #90	; 0x5a
 800453c:	5a9b      	ldrh	r3, [r3, r2]
 800453e:	b29a      	uxth	r2, r3
 8004540:	208e      	movs	r0, #142	; 0x8e
 8004542:	183b      	adds	r3, r7, r0
 8004544:	1a8a      	subs	r2, r1, r2
 8004546:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	225a      	movs	r2, #90	; 0x5a
 800454c:	5a9b      	ldrh	r3, [r3, r2]
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d100      	bne.n	8004556 <HAL_UART_IRQHandler+0x446>
 8004554:	e09a      	b.n	800468c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004556:	183b      	adds	r3, r7, r0
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d100      	bne.n	8004560 <HAL_UART_IRQHandler+0x450>
 800455e:	e095      	b.n	800468c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
 8004564:	60fb      	str	r3, [r7, #12]
  return(result);
 8004566:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004568:	2488      	movs	r4, #136	; 0x88
 800456a:	193a      	adds	r2, r7, r4
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	2301      	movs	r3, #1
 8004570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4945      	ldr	r1, [pc, #276]	; (800469c <HAL_UART_IRQHandler+0x58c>)
 8004586:	400a      	ands	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	193b      	adds	r3, r7, r4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f383 8810 	msr	PRIMASK, r3
}
 8004596:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	61bb      	str	r3, [r7, #24]
  return(result);
 800459e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	2484      	movs	r4, #132	; 0x84
 80045a2:	193a      	adds	r2, r7, r4
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	438a      	bics	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]
 80045c2:	193b      	adds	r3, r7, r4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	2120      	movs	r1, #32
 80045d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e4:	f3ef 8310 	mrs	r3, PRIMASK
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ec:	2480      	movs	r4, #128	; 0x80
 80045ee:	193a      	adds	r2, r7, r4
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	2301      	movs	r3, #1
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	f383 8810 	msr	PRIMASK, r3
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2110      	movs	r1, #16
 800460a:	438a      	bics	r2, r1
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	193b      	adds	r3, r7, r4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	f383 8810 	msr	PRIMASK, r3
}
 800461a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004622:	183b      	adds	r3, r7, r0
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f848 	bl	80046c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004630:	e02c      	b.n	800468c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004632:	23a4      	movs	r3, #164	; 0xa4
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2280      	movs	r2, #128	; 0x80
 800463a:	4013      	ands	r3, r2
 800463c:	d00f      	beq.n	800465e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800463e:	23a0      	movs	r3, #160	; 0xa0
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	4013      	ands	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01e      	beq.n	8004690 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	0010      	movs	r0, r2
 800465a:	4798      	blx	r3
    }
    return;
 800465c:	e018      	b.n	8004690 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800465e:	23a4      	movs	r3, #164	; 0xa4
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2240      	movs	r2, #64	; 0x40
 8004666:	4013      	ands	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_UART_IRQHandler+0x582>
 800466a:	23a0      	movs	r3, #160	; 0xa0
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	4013      	ands	r3, r2
 8004674:	d00d      	beq.n	8004692 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 fbae 	bl	8004dda <UART_EndTransmit_IT>
    return;
 800467e:	e008      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
      return;
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	e006      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
    return;
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	e004      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
      return;
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	e002      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
      return;
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	e000      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
    return;
 8004690:	46c0      	nop			; (mov r8, r8)
  }

}
 8004692:	46bd      	mov	sp, r7
 8004694:	b02b      	add	sp, #172	; 0xac
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	fffffeff 	.word	0xfffffeff
 800469c:	fffffedf 	.word	0xfffffedf

080046a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	000a      	movs	r2, r1
 80046ca:	1cbb      	adds	r3, r7, #2
 80046cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e0:	231e      	movs	r3, #30
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a8d      	ldr	r2, [pc, #564]	; (800493c <UART_SetConfig+0x264>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a88      	ldr	r2, [pc, #544]	; (8004940 <UART_SetConfig+0x268>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a7f      	ldr	r2, [pc, #508]	; (8004944 <UART_SetConfig+0x26c>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a7b      	ldr	r2, [pc, #492]	; (8004948 <UART_SetConfig+0x270>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d127      	bne.n	80047ae <UART_SetConfig+0xd6>
 800475e:	4b7b      	ldr	r3, [pc, #492]	; (800494c <UART_SetConfig+0x274>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	2203      	movs	r2, #3
 8004764:	4013      	ands	r3, r2
 8004766:	2b03      	cmp	r3, #3
 8004768:	d00d      	beq.n	8004786 <UART_SetConfig+0xae>
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0xcc>
 800476c:	2b02      	cmp	r3, #2
 800476e:	d014      	beq.n	800479a <UART_SetConfig+0xc2>
 8004770:	d818      	bhi.n	80047a4 <UART_SetConfig+0xcc>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <UART_SetConfig+0xa4>
 8004776:	2b01      	cmp	r3, #1
 8004778:	d00a      	beq.n	8004790 <UART_SetConfig+0xb8>
 800477a:	e013      	b.n	80047a4 <UART_SetConfig+0xcc>
 800477c:	231f      	movs	r3, #31
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	e021      	b.n	80047ca <UART_SetConfig+0xf2>
 8004786:	231f      	movs	r3, #31
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e01c      	b.n	80047ca <UART_SetConfig+0xf2>
 8004790:	231f      	movs	r3, #31
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	2204      	movs	r2, #4
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e017      	b.n	80047ca <UART_SetConfig+0xf2>
 800479a:	231f      	movs	r3, #31
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	2208      	movs	r2, #8
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e012      	b.n	80047ca <UART_SetConfig+0xf2>
 80047a4:	231f      	movs	r3, #31
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2210      	movs	r2, #16
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e00d      	b.n	80047ca <UART_SetConfig+0xf2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a67      	ldr	r2, [pc, #412]	; (8004950 <UART_SetConfig+0x278>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d104      	bne.n	80047c2 <UART_SetConfig+0xea>
 80047b8:	231f      	movs	r3, #31
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e003      	b.n	80047ca <UART_SetConfig+0xf2>
 80047c2:	231f      	movs	r3, #31
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2210      	movs	r2, #16
 80047c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d15c      	bne.n	8004890 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80047d6:	231f      	movs	r3, #31
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d015      	beq.n	800480c <UART_SetConfig+0x134>
 80047e0:	dc18      	bgt.n	8004814 <UART_SetConfig+0x13c>
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d00d      	beq.n	8004802 <UART_SetConfig+0x12a>
 80047e6:	dc15      	bgt.n	8004814 <UART_SetConfig+0x13c>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <UART_SetConfig+0x11a>
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d005      	beq.n	80047fc <UART_SetConfig+0x124>
 80047f0:	e010      	b.n	8004814 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f2:	f7fe f8d7 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 80047f6:	0003      	movs	r3, r0
 80047f8:	61bb      	str	r3, [r7, #24]
        break;
 80047fa:	e012      	b.n	8004822 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b55      	ldr	r3, [pc, #340]	; (8004954 <UART_SetConfig+0x27c>)
 80047fe:	61bb      	str	r3, [r7, #24]
        break;
 8004800:	e00f      	b.n	8004822 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fe f86f 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 8004806:	0003      	movs	r3, r0
 8004808:	61bb      	str	r3, [r7, #24]
        break;
 800480a:	e00a      	b.n	8004822 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	61bb      	str	r3, [r7, #24]
        break;
 8004812:	e006      	b.n	8004822 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004818:	231e      	movs	r3, #30
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
        break;
 8004820:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d100      	bne.n	800482a <UART_SetConfig+0x152>
 8004828:	e07a      	b.n	8004920 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	18d2      	adds	r2, r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	0019      	movs	r1, r3
 800483c:	0010      	movs	r0, r2
 800483e:	f7fb fc63 	bl	8000108 <__udivsi3>
 8004842:	0003      	movs	r3, r0
 8004844:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b0f      	cmp	r3, #15
 800484a:	d91c      	bls.n	8004886 <UART_SetConfig+0x1ae>
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	429a      	cmp	r2, r3
 8004854:	d217      	bcs.n	8004886 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	b29a      	uxth	r2, r3
 800485a:	200e      	movs	r0, #14
 800485c:	183b      	adds	r3, r7, r0
 800485e:	210f      	movs	r1, #15
 8004860:	438a      	bics	r2, r1
 8004862:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	2207      	movs	r2, #7
 800486c:	4013      	ands	r3, r2
 800486e:	b299      	uxth	r1, r3
 8004870:	183b      	adds	r3, r7, r0
 8004872:	183a      	adds	r2, r7, r0
 8004874:	8812      	ldrh	r2, [r2, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	183a      	adds	r2, r7, r0
 8004880:	8812      	ldrh	r2, [r2, #0]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	e04c      	b.n	8004920 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004886:	231e      	movs	r3, #30
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e047      	b.n	8004920 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004890:	231f      	movs	r3, #31
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b08      	cmp	r3, #8
 8004898:	d015      	beq.n	80048c6 <UART_SetConfig+0x1ee>
 800489a:	dc18      	bgt.n	80048ce <UART_SetConfig+0x1f6>
 800489c:	2b04      	cmp	r3, #4
 800489e:	d00d      	beq.n	80048bc <UART_SetConfig+0x1e4>
 80048a0:	dc15      	bgt.n	80048ce <UART_SetConfig+0x1f6>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <UART_SetConfig+0x1d4>
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d005      	beq.n	80048b6 <UART_SetConfig+0x1de>
 80048aa:	e010      	b.n	80048ce <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe f87a 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 80048b0:	0003      	movs	r3, r0
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e012      	b.n	80048dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <UART_SetConfig+0x27c>)
 80048b8:	61bb      	str	r3, [r7, #24]
        break;
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048bc:	f7fe f812 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80048c0:	0003      	movs	r3, r0
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e00a      	b.n	80048dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	61bb      	str	r3, [r7, #24]
        break;
 80048cc:	e006      	b.n	80048dc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d2:	231e      	movs	r3, #30
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
        break;
 80048da:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01e      	beq.n	8004920 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	085a      	lsrs	r2, r3, #1
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	18d2      	adds	r2, r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	0019      	movs	r1, r3
 80048f2:	0010      	movs	r0, r2
 80048f4:	f7fb fc08 	bl	8000108 <__udivsi3>
 80048f8:	0003      	movs	r3, r0
 80048fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d90a      	bls.n	8004918 <UART_SetConfig+0x240>
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	025b      	lsls	r3, r3, #9
 8004908:	429a      	cmp	r2, r3
 800490a:	d205      	bcs.n	8004918 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e003      	b.n	8004920 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004918:	231e      	movs	r3, #30
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800492c:	231e      	movs	r3, #30
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	781b      	ldrb	r3, [r3, #0]
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b008      	add	sp, #32
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	ffff69f3 	.word	0xffff69f3
 8004940:	ffffcfff 	.word	0xffffcfff
 8004944:	fffff4ff 	.word	0xfffff4ff
 8004948:	40013800 	.word	0x40013800
 800494c:	40021000 	.word	0x40021000
 8004950:	40004400 	.word	0x40004400
 8004954:	007a1200 	.word	0x007a1200

08004958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2201      	movs	r2, #1
 8004966:	4013      	ands	r3, r2
 8004968:	d00b      	beq.n	8004982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4a4a      	ldr	r2, [pc, #296]	; (8004a9c <UART_AdvFeatureConfig+0x144>)
 8004972:	4013      	ands	r3, r2
 8004974:	0019      	movs	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	d00b      	beq.n	80049a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4a43      	ldr	r2, [pc, #268]	; (8004aa0 <UART_AdvFeatureConfig+0x148>)
 8004994:	4013      	ands	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2204      	movs	r2, #4
 80049aa:	4013      	ands	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4a3b      	ldr	r2, [pc, #236]	; (8004aa4 <UART_AdvFeatureConfig+0x14c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2208      	movs	r2, #8
 80049cc:	4013      	ands	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <UART_AdvFeatureConfig+0x150>)
 80049d8:	4013      	ands	r3, r2
 80049da:	0019      	movs	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2210      	movs	r2, #16
 80049ee:	4013      	ands	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a2c      	ldr	r2, [pc, #176]	; (8004aac <UART_AdvFeatureConfig+0x154>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2220      	movs	r2, #32
 8004a10:	4013      	ands	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <UART_AdvFeatureConfig+0x158>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	0019      	movs	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2240      	movs	r2, #64	; 0x40
 8004a32:	4013      	ands	r3, r2
 8004a34:	d01d      	beq.n	8004a72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <UART_AdvFeatureConfig+0x15c>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	035b      	lsls	r3, r3, #13
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d10b      	bne.n	8004a72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <UART_AdvFeatureConfig+0x160>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	0019      	movs	r1, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <UART_AdvFeatureConfig+0x164>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
  }
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	fffdffff 	.word	0xfffdffff
 8004aa0:	fffeffff 	.word	0xfffeffff
 8004aa4:	fffbffff 	.word	0xfffbffff
 8004aa8:	ffff7fff 	.word	0xffff7fff
 8004aac:	ffffefff 	.word	0xffffefff
 8004ab0:	ffffdfff 	.word	0xffffdfff
 8004ab4:	ffefffff 	.word	0xffefffff
 8004ab8:	ff9fffff 	.word	0xff9fffff
 8004abc:	fff7ffff 	.word	0xfff7ffff

08004ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b092      	sub	sp, #72	; 0x48
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2284      	movs	r2, #132	; 0x84
 8004acc:	2100      	movs	r1, #0
 8004ace:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad0:	f7fc fb90 	bl	80011f4 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2208      	movs	r2, #8
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d12c      	bne.n	8004b40 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	0391      	lsls	r1, r2, #14
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4a46      	ldr	r2, [pc, #280]	; (8004c08 <UART_CheckIdleState+0x148>)
 8004af0:	9200      	str	r2, [sp, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f000 f88c 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004af8:	1e03      	subs	r3, r0, #0
 8004afa:	d021      	beq.n	8004b40 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afc:	f3ef 8310 	mrs	r3, PRIMASK
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b06:	2301      	movs	r3, #1
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	f383 8810 	msr	PRIMASK, r3
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2180      	movs	r1, #128	; 0x80
 8004b1e:	438a      	bics	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	f383 8810 	msr	PRIMASK, r3
}
 8004b2c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2278      	movs	r2, #120	; 0x78
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e05f      	b.n	8004c00 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2204      	movs	r2, #4
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d146      	bne.n	8004bdc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	2280      	movs	r2, #128	; 0x80
 8004b52:	03d1      	lsls	r1, r2, #15
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <UART_CheckIdleState+0x148>)
 8004b58:	9200      	str	r2, [sp, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f000 f858 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	d03b      	beq.n	8004bdc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b64:	f3ef 8310 	mrs	r3, PRIMASK
 8004b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6e:	2301      	movs	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f383 8810 	msr	PRIMASK, r3
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4921      	ldr	r1, [pc, #132]	; (8004c0c <UART_CheckIdleState+0x14c>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f383 8810 	msr	PRIMASK, r3
}
 8004b94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b96:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f383 8810 	msr	PRIMASK, r3
}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	438a      	bics	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	2120      	movs	r1, #32
 8004bce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2278      	movs	r2, #120	; 0x78
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e011      	b.n	8004c00 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	2120      	movs	r1, #32
 8004be8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2278      	movs	r2, #120	; 0x78
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b010      	add	sp, #64	; 0x40
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	01ffffff 	.word	0x01ffffff
 8004c0c:	fffffedf 	.word	0xfffffedf

08004c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	1dfb      	adds	r3, r7, #7
 8004c1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	e04b      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	3301      	adds	r3, #1
 8004c26:	d048      	beq.n	8004cba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c28:	f7fc fae4 	bl	80011f4 <HAL_GetTick>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e04b      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d035      	beq.n	8004cba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	2208      	movs	r2, #8
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d111      	bne.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2208      	movs	r2, #8
 8004c62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 f83c 	bl	8004ce4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2284      	movs	r2, #132	; 0x84
 8004c70:	2108      	movs	r1, #8
 8004c72:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2278      	movs	r2, #120	; 0x78
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e02c      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d112      	bne.n	8004cba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2280      	movs	r2, #128	; 0x80
 8004c9a:	0112      	lsls	r2, r2, #4
 8004c9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 f81f 	bl	8004ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2284      	movs	r2, #132	; 0x84
 8004caa:	2120      	movs	r1, #32
 8004cac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2278      	movs	r2, #120	; 0x78
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e00f      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	425a      	negs	r2, r3
 8004cca:	4153      	adcs	r3, r2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	001a      	movs	r2, r3
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d0a4      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b004      	add	sp, #16
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08e      	sub	sp, #56	; 0x38
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cec:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cf2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4926      	ldr	r1, [pc, #152]	; (8004da8 <UART_EndRxTransfer+0xc4>)
 8004d0e:	400a      	ands	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d22:	623b      	str	r3, [r7, #32]
  return(result);
 8004d24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
 8004d28:	2301      	movs	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f383 8810 	msr	PRIMASK, r3
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2101      	movs	r1, #1
 8004d40:	438a      	bics	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	f383 8810 	msr	PRIMASK, r3
}
 8004d4e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d118      	bne.n	8004d8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d58:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d62:	2301      	movs	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f383 8810 	msr	PRIMASK, r3
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2110      	movs	r1, #16
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f383 8810 	msr	PRIMASK, r3
}
 8004d88:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2280      	movs	r2, #128	; 0x80
 8004d8e:	2120      	movs	r1, #32
 8004d90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b00e      	add	sp, #56	; 0x38
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	fffffedf 	.word	0xfffffedf

08004dac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	225a      	movs	r2, #90	; 0x5a
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2252      	movs	r2, #82	; 0x52
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff fc6f 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b004      	add	sp, #16
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de2:	f3ef 8310 	mrs	r3, PRIMASK
 8004de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2140      	movs	r1, #64	; 0x40
 8004e04:	438a      	bics	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f383 8810 	msr	PRIMASK, r3
}
 8004e12:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7ff fc3c 	bl	80046a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b006      	add	sp, #24
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <__libc_init_array>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	2600      	movs	r6, #0
 8004e34:	4d0c      	ldr	r5, [pc, #48]	; (8004e68 <__libc_init_array+0x38>)
 8004e36:	4c0d      	ldr	r4, [pc, #52]	; (8004e6c <__libc_init_array+0x3c>)
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	42a6      	cmp	r6, r4
 8004e3e:	d109      	bne.n	8004e54 <__libc_init_array+0x24>
 8004e40:	2600      	movs	r6, #0
 8004e42:	f000 f821 	bl	8004e88 <_init>
 8004e46:	4d0a      	ldr	r5, [pc, #40]	; (8004e70 <__libc_init_array+0x40>)
 8004e48:	4c0a      	ldr	r4, [pc, #40]	; (8004e74 <__libc_init_array+0x44>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	42a6      	cmp	r6, r4
 8004e50:	d105      	bne.n	8004e5e <__libc_init_array+0x2e>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	00b3      	lsls	r3, r6, #2
 8004e56:	58eb      	ldr	r3, [r5, r3]
 8004e58:	4798      	blx	r3
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7ee      	b.n	8004e3c <__libc_init_array+0xc>
 8004e5e:	00b3      	lsls	r3, r6, #2
 8004e60:	58eb      	ldr	r3, [r5, r3]
 8004e62:	4798      	blx	r3
 8004e64:	3601      	adds	r6, #1
 8004e66:	e7f2      	b.n	8004e4e <__libc_init_array+0x1e>
 8004e68:	08004ed8 	.word	0x08004ed8
 8004e6c:	08004ed8 	.word	0x08004ed8
 8004e70:	08004ed8 	.word	0x08004ed8
 8004e74:	08004edc 	.word	0x08004edc

08004e78 <memset>:
 8004e78:	0003      	movs	r3, r0
 8004e7a:	1882      	adds	r2, r0, r2
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <memset+0xa>
 8004e80:	4770      	bx	lr
 8004e82:	7019      	strb	r1, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	e7f9      	b.n	8004e7c <memset+0x4>

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
