
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800c968  0800c968  0001c968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf14  0800cf14  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf14  0800cf14  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf14  0800cf14  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cf1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001f8  0800d114  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800d114  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111dc  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e6  00000000  00000000  000313fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00033de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00034c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013aae  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145c4  00000000  00000000  0004944e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b8b2  00000000  00000000  0005da12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c92c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  000c9314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c950 	.word	0x0800c950

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	0800c950 	.word	0x0800c950

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe12 	bl	8002264 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd12 	bl	8002264 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 f9da 	bl	8002264 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 f9be 	bl	8002264 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800c994 	.word	0x0800c994
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f8ef 	bl	8002264 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f8e0 	bl	8002264 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fdd6 	bl	8002264 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fdb8 	bl	8002264 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800c9d4 	.word	0x0800c9d4
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd08 	bl	8002264 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fcfa 	bl	8002264 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fc64 	bl	8002264 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb2c 	bl	8002264 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f8d4 	bl	8002264 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8a9 	bl	8002264 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_d2f>:
 8002154:	0002      	movs	r2, r0
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	030c      	lsls	r4, r1, #12
 800215e:	4e3d      	ldr	r6, [pc, #244]	; (8002254 <__aeabi_d2f+0x100>)
 8002160:	0a64      	lsrs	r4, r4, #9
 8002162:	0f40      	lsrs	r0, r0, #29
 8002164:	1c5f      	adds	r7, r3, #1
 8002166:	0fc9      	lsrs	r1, r1, #31
 8002168:	4304      	orrs	r4, r0
 800216a:	00d5      	lsls	r5, r2, #3
 800216c:	4237      	tst	r7, r6
 800216e:	d00a      	beq.n	8002186 <__aeabi_d2f+0x32>
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <__aeabi_d2f+0x104>)
 8002172:	181e      	adds	r6, r3, r0
 8002174:	2efe      	cmp	r6, #254	; 0xfe
 8002176:	dd16      	ble.n	80021a6 <__aeabi_d2f+0x52>
 8002178:	20ff      	movs	r0, #255	; 0xff
 800217a:	2400      	movs	r4, #0
 800217c:	05c0      	lsls	r0, r0, #23
 800217e:	4320      	orrs	r0, r4
 8002180:	07c9      	lsls	r1, r1, #31
 8002182:	4308      	orrs	r0, r1
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <__aeabi_d2f+0x44>
 800218a:	432c      	orrs	r4, r5
 800218c:	d026      	beq.n	80021dc <__aeabi_d2f+0x88>
 800218e:	2205      	movs	r2, #5
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	0a54      	lsrs	r4, r2, #9
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	e7f1      	b.n	800217c <__aeabi_d2f+0x28>
 8002198:	4325      	orrs	r5, r4
 800219a:	d0ed      	beq.n	8002178 <__aeabi_d2f+0x24>
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	03c0      	lsls	r0, r0, #15
 80021a0:	4304      	orrs	r4, r0
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	e7ea      	b.n	800217c <__aeabi_d2f+0x28>
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	dd1b      	ble.n	80021e2 <__aeabi_d2f+0x8e>
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	1e53      	subs	r3, r2, #1
 80021ae:	419a      	sbcs	r2, r3
 80021b0:	00e4      	lsls	r4, r4, #3
 80021b2:	0f6d      	lsrs	r5, r5, #29
 80021b4:	4322      	orrs	r2, r4
 80021b6:	432a      	orrs	r2, r5
 80021b8:	0753      	lsls	r3, r2, #29
 80021ba:	d048      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d000      	beq.n	80021c6 <__aeabi_d2f+0x72>
 80021c4:	3204      	adds	r2, #4
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	04db      	lsls	r3, r3, #19
 80021ca:	4013      	ands	r3, r2
 80021cc:	d03f      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021ce:	1c70      	adds	r0, r6, #1
 80021d0:	2efe      	cmp	r6, #254	; 0xfe
 80021d2:	d0d1      	beq.n	8002178 <__aeabi_d2f+0x24>
 80021d4:	0192      	lsls	r2, r2, #6
 80021d6:	0a54      	lsrs	r4, r2, #9
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	e7cf      	b.n	800217c <__aeabi_d2f+0x28>
 80021dc:	2000      	movs	r0, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	e7cc      	b.n	800217c <__aeabi_d2f+0x28>
 80021e2:	0032      	movs	r2, r6
 80021e4:	3217      	adds	r2, #23
 80021e6:	db22      	blt.n	800222e <__aeabi_d2f+0xda>
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	4320      	orrs	r0, r4
 80021ee:	241e      	movs	r4, #30
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	2c1f      	cmp	r4, #31
 80021f4:	dd1d      	ble.n	8002232 <__aeabi_d2f+0xde>
 80021f6:	2202      	movs	r2, #2
 80021f8:	4252      	negs	r2, r2
 80021fa:	1b96      	subs	r6, r2, r6
 80021fc:	0002      	movs	r2, r0
 80021fe:	40f2      	lsrs	r2, r6
 8002200:	0016      	movs	r6, r2
 8002202:	2c20      	cmp	r4, #32
 8002204:	d004      	beq.n	8002210 <__aeabi_d2f+0xbc>
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <__aeabi_d2f+0x108>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	4098      	lsls	r0, r3
 800220e:	4305      	orrs	r5, r0
 8002210:	002a      	movs	r2, r5
 8002212:	1e53      	subs	r3, r2, #1
 8002214:	419a      	sbcs	r2, r3
 8002216:	4332      	orrs	r2, r6
 8002218:	2600      	movs	r6, #0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d1ce      	bne.n	80021bc <__aeabi_d2f+0x68>
 800221e:	2480      	movs	r4, #128	; 0x80
 8002220:	0013      	movs	r3, r2
 8002222:	04e4      	lsls	r4, r4, #19
 8002224:	2001      	movs	r0, #1
 8002226:	4023      	ands	r3, r4
 8002228:	4222      	tst	r2, r4
 800222a:	d1d3      	bne.n	80021d4 <__aeabi_d2f+0x80>
 800222c:	e7b0      	b.n	8002190 <__aeabi_d2f+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	e7ad      	b.n	800218e <__aeabi_d2f+0x3a>
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <__aeabi_d2f+0x10c>)
 8002234:	4694      	mov	ip, r2
 8002236:	002a      	movs	r2, r5
 8002238:	40e2      	lsrs	r2, r4
 800223a:	0014      	movs	r4, r2
 800223c:	002a      	movs	r2, r5
 800223e:	4463      	add	r3, ip
 8002240:	409a      	lsls	r2, r3
 8002242:	4098      	lsls	r0, r3
 8002244:	1e55      	subs	r5, r2, #1
 8002246:	41aa      	sbcs	r2, r5
 8002248:	4302      	orrs	r2, r0
 800224a:	4322      	orrs	r2, r4
 800224c:	e7e4      	b.n	8002218 <__aeabi_d2f+0xc4>
 800224e:	0033      	movs	r3, r6
 8002250:	e79e      	b.n	8002190 <__aeabi_d2f+0x3c>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	; (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <driving_test>:

#include "BLDC.h"


void driving_test()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	static int i=1;
	switch(i)
 80022a4:	4b75      	ldr	r3, [pc, #468]	; (800247c <driving_test+0x1dc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d900      	bls.n	80022ae <driving_test+0xe>
 80022ac:	e0d6      	b.n	800245c <driving_test+0x1bc>
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	4b73      	ldr	r3, [pc, #460]	; (8002480 <driving_test+0x1e0>)
 80022b2:	18d3      	adds	r3, r2, r3
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	469f      	mov	pc, r3
	{
	case 1:
		AHBL_ON;
 80022b8:	4b72      	ldr	r3, [pc, #456]	; (8002484 <driving_test+0x1e4>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	0018      	movs	r0, r3
 80022be:	f003 fb15 	bl	80058ec <HAL_TIM_PWM_Stop>
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <driving_test+0x1e4>)
 80022c4:	2104      	movs	r1, #4
 80022c6:	0018      	movs	r0, r3
 80022c8:	f003 fb10 	bl	80058ec <HAL_TIM_PWM_Stop>
 80022cc:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <driving_test+0x1e4>)
 80022ce:	2108      	movs	r1, #8
 80022d0:	0018      	movs	r0, r3
 80022d2:	f003 fb0b 	bl	80058ec <HAL_TIM_PWM_Stop>
 80022d6:	23e0      	movs	r3, #224	; 0xe0
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	486b      	ldr	r0, [pc, #428]	; (8002488 <driving_test+0x1e8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	0019      	movs	r1, r3
 80022e0:	f002 fb74 	bl	80049cc <HAL_GPIO_WritePin>
 80022e4:	4b67      	ldr	r3, [pc, #412]	; (8002484 <driving_test+0x1e4>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	0018      	movs	r0, r3
 80022ea:	f003 fa4d 	bl	8005788 <HAL_TIM_PWM_Start>
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	01db      	lsls	r3, r3, #7
 80022f2:	4865      	ldr	r0, [pc, #404]	; (8002488 <driving_test+0x1e8>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	0019      	movs	r1, r3
 80022f8:	f002 fb68 	bl	80049cc <HAL_GPIO_WritePin>
//		printf("AB");
		break;
 80022fc:	e0af      	b.n	800245e <driving_test+0x1be>
	case 2:
		CHBL_ON;
 80022fe:	4b61      	ldr	r3, [pc, #388]	; (8002484 <driving_test+0x1e4>)
 8002300:	2100      	movs	r1, #0
 8002302:	0018      	movs	r0, r3
 8002304:	f003 faf2 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <driving_test+0x1e4>)
 800230a:	2104      	movs	r1, #4
 800230c:	0018      	movs	r0, r3
 800230e:	f003 faed 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002312:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <driving_test+0x1e4>)
 8002314:	2108      	movs	r1, #8
 8002316:	0018      	movs	r0, r3
 8002318:	f003 fae8 	bl	80058ec <HAL_TIM_PWM_Stop>
 800231c:	23e0      	movs	r3, #224	; 0xe0
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	4859      	ldr	r0, [pc, #356]	; (8002488 <driving_test+0x1e8>)
 8002322:	2200      	movs	r2, #0
 8002324:	0019      	movs	r1, r3
 8002326:	f002 fb51 	bl	80049cc <HAL_GPIO_WritePin>
 800232a:	4b56      	ldr	r3, [pc, #344]	; (8002484 <driving_test+0x1e4>)
 800232c:	2108      	movs	r1, #8
 800232e:	0018      	movs	r0, r3
 8002330:	f003 fa2a 	bl	8005788 <HAL_TIM_PWM_Start>
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	4853      	ldr	r0, [pc, #332]	; (8002488 <driving_test+0x1e8>)
 800233a:	2201      	movs	r2, #1
 800233c:	0019      	movs	r1, r3
 800233e:	f002 fb45 	bl	80049cc <HAL_GPIO_WritePin>
//		printf("CB");
		break;
 8002342:	e08c      	b.n	800245e <driving_test+0x1be>
	case 3:
		CHAL_ON;
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <driving_test+0x1e4>)
 8002346:	2100      	movs	r1, #0
 8002348:	0018      	movs	r0, r3
 800234a:	f003 facf 	bl	80058ec <HAL_TIM_PWM_Stop>
 800234e:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <driving_test+0x1e4>)
 8002350:	2104      	movs	r1, #4
 8002352:	0018      	movs	r0, r3
 8002354:	f003 faca 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <driving_test+0x1e4>)
 800235a:	2108      	movs	r1, #8
 800235c:	0018      	movs	r0, r3
 800235e:	f003 fac5 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002362:	23e0      	movs	r3, #224	; 0xe0
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	4848      	ldr	r0, [pc, #288]	; (8002488 <driving_test+0x1e8>)
 8002368:	2200      	movs	r2, #0
 800236a:	0019      	movs	r1, r3
 800236c:	f002 fb2e 	bl	80049cc <HAL_GPIO_WritePin>
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <driving_test+0x1e4>)
 8002372:	2108      	movs	r1, #8
 8002374:	0018      	movs	r0, r3
 8002376:	f003 fa07 	bl	8005788 <HAL_TIM_PWM_Start>
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	4842      	ldr	r0, [pc, #264]	; (8002488 <driving_test+0x1e8>)
 8002380:	2201      	movs	r2, #1
 8002382:	0019      	movs	r1, r3
 8002384:	f002 fb22 	bl	80049cc <HAL_GPIO_WritePin>
//		printf("CA");
		break;
 8002388:	e069      	b.n	800245e <driving_test+0x1be>
	case 4:
		BHAL_ON;
 800238a:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <driving_test+0x1e4>)
 800238c:	2100      	movs	r1, #0
 800238e:	0018      	movs	r0, r3
 8002390:	f003 faac 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <driving_test+0x1e4>)
 8002396:	2104      	movs	r1, #4
 8002398:	0018      	movs	r0, r3
 800239a:	f003 faa7 	bl	80058ec <HAL_TIM_PWM_Stop>
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <driving_test+0x1e4>)
 80023a0:	2108      	movs	r1, #8
 80023a2:	0018      	movs	r0, r3
 80023a4:	f003 faa2 	bl	80058ec <HAL_TIM_PWM_Stop>
 80023a8:	23e0      	movs	r3, #224	; 0xe0
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	4836      	ldr	r0, [pc, #216]	; (8002488 <driving_test+0x1e8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	0019      	movs	r1, r3
 80023b2:	f002 fb0b 	bl	80049cc <HAL_GPIO_WritePin>
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <driving_test+0x1e4>)
 80023b8:	2104      	movs	r1, #4
 80023ba:	0018      	movs	r0, r3
 80023bc:	f003 f9e4 	bl	8005788 <HAL_TIM_PWM_Start>
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	019b      	lsls	r3, r3, #6
 80023c4:	4830      	ldr	r0, [pc, #192]	; (8002488 <driving_test+0x1e8>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	0019      	movs	r1, r3
 80023ca:	f002 faff 	bl	80049cc <HAL_GPIO_WritePin>
//		printf("BA");
		break;
 80023ce:	e046      	b.n	800245e <driving_test+0x1be>
	case 5:
		BHCL_ON;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <driving_test+0x1e4>)
 80023d2:	2100      	movs	r1, #0
 80023d4:	0018      	movs	r0, r3
 80023d6:	f003 fa89 	bl	80058ec <HAL_TIM_PWM_Stop>
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <driving_test+0x1e4>)
 80023dc:	2104      	movs	r1, #4
 80023de:	0018      	movs	r0, r3
 80023e0:	f003 fa84 	bl	80058ec <HAL_TIM_PWM_Stop>
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <driving_test+0x1e4>)
 80023e6:	2108      	movs	r1, #8
 80023e8:	0018      	movs	r0, r3
 80023ea:	f003 fa7f 	bl	80058ec <HAL_TIM_PWM_Stop>
 80023ee:	23e0      	movs	r3, #224	; 0xe0
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	4825      	ldr	r0, [pc, #148]	; (8002488 <driving_test+0x1e8>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	0019      	movs	r1, r3
 80023f8:	f002 fae8 	bl	80049cc <HAL_GPIO_WritePin>
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <driving_test+0x1e4>)
 80023fe:	2104      	movs	r1, #4
 8002400:	0018      	movs	r0, r3
 8002402:	f003 f9c1 	bl	8005788 <HAL_TIM_PWM_Start>
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	481f      	ldr	r0, [pc, #124]	; (8002488 <driving_test+0x1e8>)
 800240c:	2201      	movs	r2, #1
 800240e:	0019      	movs	r1, r3
 8002410:	f002 fadc 	bl	80049cc <HAL_GPIO_WritePin>
//		printf("BC");
		break;
 8002414:	e023      	b.n	800245e <driving_test+0x1be>
	case 6:
		AHCL_ON;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <driving_test+0x1e4>)
 8002418:	2100      	movs	r1, #0
 800241a:	0018      	movs	r0, r3
 800241c:	f003 fa66 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <driving_test+0x1e4>)
 8002422:	2104      	movs	r1, #4
 8002424:	0018      	movs	r0, r3
 8002426:	f003 fa61 	bl	80058ec <HAL_TIM_PWM_Stop>
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <driving_test+0x1e4>)
 800242c:	2108      	movs	r1, #8
 800242e:	0018      	movs	r0, r3
 8002430:	f003 fa5c 	bl	80058ec <HAL_TIM_PWM_Stop>
 8002434:	23e0      	movs	r3, #224	; 0xe0
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4813      	ldr	r0, [pc, #76]	; (8002488 <driving_test+0x1e8>)
 800243a:	2200      	movs	r2, #0
 800243c:	0019      	movs	r1, r3
 800243e:	f002 fac5 	bl	80049cc <HAL_GPIO_WritePin>
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <driving_test+0x1e4>)
 8002444:	2100      	movs	r1, #0
 8002446:	0018      	movs	r0, r3
 8002448:	f003 f99e 	bl	8005788 <HAL_TIM_PWM_Start>
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <driving_test+0x1e8>)
 8002452:	2201      	movs	r2, #1
 8002454:	0019      	movs	r1, r3
 8002456:	f002 fab9 	bl	80049cc <HAL_GPIO_WritePin>
//		printf("AC");
		break;
 800245a:	e000      	b.n	800245e <driving_test+0x1be>
	default:
		break;
 800245c:	46c0      	nop			; (mov r8, r8)
	}
	i= i==6? 1:i+1;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <driving_test+0x1dc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d003      	beq.n	800246e <driving_test+0x1ce>
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <driving_test+0x1dc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	e000      	b.n	8002470 <driving_test+0x1d0>
 800246e:	2201      	movs	r2, #1
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <driving_test+0x1dc>)
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	20000000 	.word	0x20000000
 8002480:	0800ca14 	.word	0x0800ca14
 8002484:	200002b0 	.word	0x200002b0
 8002488:	48000400 	.word	0x48000400

0800248c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002490:	f001 fa04 	bl	800389c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002494:	f000 f84c 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002498:	f000 fb66 	bl	8002b68 <MX_GPIO_Init>
  MX_DMA_Init();
 800249c:	f000 fb46 	bl	8002b2c <MX_DMA_Init>
  MX_ADC_Init();
 80024a0:	f000 f9d6 	bl	8002850 <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_TIM1_Init();
 80024a4:	f000 fdf8 	bl	8003098 <MX_TIM1_Init>
  MX_TIM3_Init();
 80024a8:	f000 fefc 	bl	80032a4 <MX_TIM3_Init>
  MX_TIM6_Init();
 80024ac:	f000 ff96 	bl	80033dc <MX_TIM6_Init>
  MX_TIM14_Init();
 80024b0:	f000 ffb8 	bl	8003424 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80024b4:	f001 f8f6 	bl	80036a4 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <main+0x88>)
 80024ba:	0018      	movs	r0, r3
 80024bc:	f003 f83a 	bl	8005534 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <main+0x8c>)
 80024c2:	0018      	movs	r0, r3
 80024c4:	f003 f836 	bl	8005534 <HAL_TIM_Base_Start_IT>
//  HAL_ADC_Start_IT(&hadc);
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 80024c8:	4914      	ldr	r1, [pc, #80]	; (800251c <main+0x90>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <main+0x94>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f004 fb72 	bl	8006bb8 <HAL_UART_Receive_IT>
	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf))!=HAL_OK)//This
 80024d4:	4913      	ldr	r1, [pc, #76]	; (8002524 <main+0x98>)
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <main+0x9c>)
 80024d8:	2212      	movs	r2, #18
 80024da:	0018      	movs	r0, r3
 80024dc:	f001 fb82 	bl	8003be4 <HAL_ADC_Start_DMA>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <main+0x5c>
	{
	 Error_Handler(); //This function also enable the interruption
 80024e4:	f000 f89a 	bl	800261c <Error_Handler>

  /* USER CODE END 2 */

//  HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <main+0xa0>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	0018      	movs	r0, r3
 80024ee:	f003 f94b 	bl	8005788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <main+0xa0>)
 80024f4:	2104      	movs	r1, #4
 80024f6:	0018      	movs	r0, r3
 80024f8:	f003 f946 	bl	8005788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <main+0xa0>)
 80024fe:	2108      	movs	r1, #8
 8002500:	0018      	movs	r0, r3
 8002502:	f003 f941 	bl	8005788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <main+0xa0>)
 8002508:	210c      	movs	r1, #12
 800250a:	0018      	movs	r0, r3
 800250c:	f003 f93c 	bl	8005788 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002510:	e7fe      	b.n	8002510 <main+0x84>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	20000340 	.word	0x20000340
 8002518:	20000388 	.word	0x20000388
 800251c:	200004cf 	.word	0x200004cf
 8002520:	200004d4 	.word	0x200004d4
 8002524:	20000214 	.word	0x20000214
 8002528:	20000228 	.word	0x20000228
 800252c:	200002f8 	.word	0x200002f8

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b095      	sub	sp, #84	; 0x54
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	2420      	movs	r4, #32
 8002538:	193b      	adds	r3, r7, r4
 800253a:	0018      	movs	r0, r3
 800253c:	2330      	movs	r3, #48	; 0x30
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f005 fcc2 	bl	8007eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002546:	2310      	movs	r3, #16
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	0018      	movs	r0, r3
 800254c:	2310      	movs	r3, #16
 800254e:	001a      	movs	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	f005 fcba 	bl	8007eca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002556:	003b      	movs	r3, r7
 8002558:	0018      	movs	r0, r3
 800255a:	2310      	movs	r3, #16
 800255c:	001a      	movs	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	f005 fcb3 	bl	8007eca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002564:	0021      	movs	r1, r4
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2202      	movs	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2201      	movs	r2, #1
 8002570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2210      	movs	r2, #16
 8002576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2202      	movs	r2, #2
 800257c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	22a0      	movs	r2, #160	; 0xa0
 8002588:	0392      	lsls	r2, r2, #14
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002592:	187b      	adds	r3, r7, r1
 8002594:	0018      	movs	r0, r3
 8002596:	f002 fa51 	bl	8004a3c <HAL_RCC_OscConfig>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d001      	beq.n	80025a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800259e:	f000 f83d 	bl	800261c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a2:	2110      	movs	r1, #16
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2207      	movs	r2, #7
 80025a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2202      	movs	r2, #2
 80025ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2101      	movs	r1, #1
 80025c0:	0018      	movs	r0, r3
 80025c2:	f002 fd55 	bl	8005070 <HAL_RCC_ClockConfig>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80025ca:	f000 f827 	bl	800261c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025ce:	003b      	movs	r3, r7
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025d4:	003b      	movs	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025da:	003b      	movs	r3, r7
 80025dc:	0018      	movs	r0, r3
 80025de:	f002 fe8b 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80025e6:	f000 f819 	bl	800261c <Error_Handler>
  }
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b015      	add	sp, #84	; 0x54
 80025f0:	bd90      	pop	{r4, r7, pc}
	...

080025f4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <__io_putchar+0x20>)
 80025fe:	1d39      	adds	r1, r7, #4
 8002600:	4805      	ldr	r0, [pc, #20]	; (8002618 <__io_putchar+0x24>)
 8002602:	2201      	movs	r2, #1
 8002604:	f004 fa38 	bl	8006a78 <HAL_UART_Transmit>
    return ch;
 8002608:	687b      	ldr	r3, [r7, #4]
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b002      	add	sp, #8
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	0000ffff 	.word	0x0000ffff
 8002618:	200004d4 	.word	0x200004d4

0800261c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002620:	b672      	cpsid	i
}
 8002622:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002624:	e7fe      	b.n	8002624 <Error_Handler+0x8>
	...

08002628 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	46c6      	mov	lr, r8
 800262c:	b500      	push	{lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
	if(htim == &htim6)
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d175      	bne.n	8002728 <HAL_TIM_PeriodElapsedCallback+0x100>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800263e:	2101      	movs	r1, #1
 8002640:	0018      	movs	r0, r3
 8002642:	f002 f9e0 	bl	8004a06 <HAL_GPIO_TogglePin>
//		My_ADC_getvalue(adc_buf, &adc_val);
		for(char i=0; i<CH_NUM; i++)
 8002646:	230f      	movs	r3, #15
 8002648:	2208      	movs	r2, #8
 800264a:	189b      	adds	r3, r3, r2
 800264c:	19db      	adds	r3, r3, r7
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e061      	b.n	8002718 <HAL_TIM_PeriodElapsedCallback+0xf0>
			printf("ADC_ch%d conversion:%d   Voltage:%0.2fV\r\n",i, *(adc_buf+i), (*(adc_buf+i)*(Vrefint*4095/adc_val.vref_data)/4095));
 8002654:	210f      	movs	r1, #15
 8002656:	2008      	movs	r0, #8
 8002658:	180b      	adds	r3, r1, r0
 800265a:	19db      	adds	r3, r3, r7
 800265c:	781e      	ldrb	r6, [r3, #0]
 800265e:	180b      	adds	r3, r1, r0
 8002660:	19db      	adds	r3, r3, r7
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	005a      	lsls	r2, r3, #1
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	4698      	mov	r8, r3
 800266e:	180b      	adds	r3, r1, r0
 8002670:	19db      	adds	r3, r3, r7
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	005a      	lsls	r2, r3, #1
 8002676:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff fd13 	bl	80020a8 <__aeabi_i2d>
 8002682:	0004      	movs	r4, r0
 8002684:	000d      	movs	r5, r1
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff fd0b 	bl	80020a8 <__aeabi_i2d>
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002696:	f7fe feb5 	bl	8001404 <__aeabi_dmul>
 800269a:	0002      	movs	r2, r0
 800269c:	000b      	movs	r3, r1
 800269e:	0010      	movs	r0, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80026a6:	f7fe faab 	bl	8000c00 <__aeabi_ddiv>
 80026aa:	0002      	movs	r2, r0
 80026ac:	000b      	movs	r3, r1
 80026ae:	0010      	movs	r0, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	2200      	movs	r2, #0
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80026b6:	f7fe fea5 	bl	8001404 <__aeabi_dmul>
 80026ba:	0002      	movs	r2, r0
 80026bc:	000b      	movs	r3, r1
 80026be:	603a      	str	r2, [r7, #0]
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80026c4:	8a1b      	ldrh	r3, [r3, #16]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff fcee 	bl	80020a8 <__aeabi_i2d>
 80026cc:	0002      	movs	r2, r0
 80026ce:	000b      	movs	r3, r1
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	f7fe fa94 	bl	8000c00 <__aeabi_ddiv>
 80026d8:	0002      	movs	r2, r0
 80026da:	000b      	movs	r3, r1
 80026dc:	0020      	movs	r0, r4
 80026de:	0029      	movs	r1, r5
 80026e0:	f7fe fe90 	bl	8001404 <__aeabi_dmul>
 80026e4:	0002      	movs	r2, r0
 80026e6:	000b      	movs	r3, r1
 80026e8:	0010      	movs	r0, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80026f0:	f7fe fa86 	bl	8000c00 <__aeabi_ddiv>
 80026f4:	0002      	movs	r2, r0
 80026f6:	000b      	movs	r3, r1
 80026f8:	4819      	ldr	r0, [pc, #100]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80026fa:	9200      	str	r2, [sp, #0]
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	0031      	movs	r1, r6
 8002702:	f006 fa61 	bl	8008bc8 <iprintf>
		for(char i=0; i<CH_NUM; i++)
 8002706:	210f      	movs	r1, #15
 8002708:	2008      	movs	r0, #8
 800270a:	180b      	adds	r3, r1, r0
 800270c:	19db      	adds	r3, r3, r7
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	180b      	adds	r3, r1, r0
 8002712:	19db      	adds	r3, r3, r7
 8002714:	3201      	adds	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	230f      	movs	r3, #15
 800271a:	2208      	movs	r2, #8
 800271c:	189b      	adds	r3, r3, r2
 800271e:	19db      	adds	r3, r3, r7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b08      	cmp	r3, #8
 8002724:	d996      	bls.n	8002654 <HAL_TIM_PeriodElapsedCallback+0x2c>
	}
	else if(htim == &htim14)
	{
		driving_test();
	}
}
 8002726:	e005      	b.n	8002734 <HAL_TIM_PeriodElapsedCallback+0x10c>
	else if(htim == &htim14)
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800272c:	429a      	cmp	r2, r3
 800272e:	d101      	bne.n	8002734 <HAL_TIM_PeriodElapsedCallback+0x10c>
		driving_test();
 8002730:	f7ff fdb6 	bl	80022a0 <driving_test>
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b006      	add	sp, #24
 800273a:	bc80      	pop	{r7}
 800273c:	46b8      	mov	r8, r7
 800273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002740:	20000340 	.word	0x20000340
 8002744:	48000800 	.word	0x48000800
 8002748:	20000214 	.word	0x20000214
 800274c:	1ffff7ba 	.word	0x1ffff7ba
 8002750:	66666666 	.word	0x66666666
 8002754:	400a6666 	.word	0x400a6666
 8002758:	40affe00 	.word	0x40affe00
 800275c:	20000004 	.word	0x20000004
 8002760:	0800c968 	.word	0x0800c968
 8002764:	20000388 	.word	0x20000388

08002768 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_UART_RxCpltCallback+0xac>)
 8002774:	429a      	cmp	r2, r3
 8002776:	d149      	bne.n	800280c <HAL_UART_RxCpltCallback+0xa4>
	{
		extern uint8_t cnt;
		cnt=cnt==255?1:cnt+1;
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2bff      	cmp	r3, #255	; 0xff
 800277e:	d004      	beq.n	800278a <HAL_UART_RxCpltCallback+0x22>
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	e000      	b.n	800278c <HAL_UART_RxCpltCallback+0x24>
 800278a:	2201      	movs	r2, #1
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 800278e:	701a      	strb	r2, [r3, #0]
		rxbuf[cnt] = rxdata;
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	001a      	movs	r2, r3
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_UART_RxCpltCallback+0xb4>)
 8002798:	7819      	ldrb	r1, [r3, #0]
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_UART_RxCpltCallback+0xb8>)
 800279c:	5499      	strb	r1, [r3, r2]
		switch(rxbuf[cnt])
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	001a      	movs	r2, r3
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_UART_RxCpltCallback+0xb8>)
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d01d      	beq.n	80027e8 <HAL_UART_RxCpltCallback+0x80>
 80027ac:	dc21      	bgt.n	80027f2 <HAL_UART_RxCpltCallback+0x8a>
 80027ae:	2b31      	cmp	r3, #49	; 0x31
 80027b0:	d008      	beq.n	80027c4 <HAL_UART_RxCpltCallback+0x5c>
 80027b2:	dc1e      	bgt.n	80027f2 <HAL_UART_RxCpltCallback+0x8a>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d00a      	beq.n	80027ce <HAL_UART_RxCpltCallback+0x66>
 80027b8:	dc1b      	bgt.n	80027f2 <HAL_UART_RxCpltCallback+0x8a>
 80027ba:	2b2b      	cmp	r3, #43	; 0x2b
 80027bc:	d00c      	beq.n	80027d8 <HAL_UART_RxCpltCallback+0x70>
 80027be:	2b2d      	cmp	r3, #45	; 0x2d
 80027c0:	d00e      	beq.n	80027e0 <HAL_UART_RxCpltCallback+0x78>
		{
			HAL_TIM_Base_Stop_IT(&htim1);
			break;
		}
		default:
			break;
 80027c2:	e016      	b.n	80027f2 <HAL_UART_RxCpltCallback+0x8a>
			HAL_TIM_Base_Stop_IT(&htim6);
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_UART_RxCpltCallback+0xbc>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f002 ff00 	bl	80055cc <HAL_TIM_Base_Stop_IT>
			break;
 80027cc:	e012      	b.n	80027f4 <HAL_UART_RxCpltCallback+0x8c>
			HAL_TIM_Base_Start_IT(&htim6);
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_UART_RxCpltCallback+0xbc>)
 80027d0:	0018      	movs	r0, r3
 80027d2:	f002 feaf 	bl	8005534 <HAL_TIM_Base_Start_IT>
			break;
 80027d6:	e00d      	b.n	80027f4 <HAL_UART_RxCpltCallback+0x8c>
			BT_PWM_handle(TURE);
 80027d8:	2001      	movs	r0, #1
 80027da:	f000 ffe9 	bl	80037b0 <BT_PWM_handle>
			break;
 80027de:	e009      	b.n	80027f4 <HAL_UART_RxCpltCallback+0x8c>
			BT_PWM_handle(FALSE);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 ffe5 	bl	80037b0 <BT_PWM_handle>
			break;
 80027e6:	e005      	b.n	80027f4 <HAL_UART_RxCpltCallback+0x8c>
			HAL_TIM_Base_Stop_IT(&htim1);
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_UART_RxCpltCallback+0xc0>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f002 feee 	bl	80055cc <HAL_TIM_Base_Stop_IT>
			break;
 80027f0:	e000      	b.n	80027f4 <HAL_UART_RxCpltCallback+0x8c>
			break;
 80027f2:	46c0      	nop			; (mov r8, r8)
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 80027f4:	4909      	ldr	r1, [pc, #36]	; (800281c <HAL_UART_RxCpltCallback+0xb4>)
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_UART_RxCpltCallback+0xac>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	0018      	movs	r0, r3
 80027fc:	f004 f9dc 	bl	8006bb8 <HAL_UART_Receive_IT>
		cnt++;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_UART_RxCpltCallback+0xb0>)
 800280a:	701a      	strb	r2, [r3, #0]
	}
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200004d4 	.word	0x200004d4
 8002818:	200004d0 	.word	0x200004d0
 800281c:	200004cf 	.word	0x200004cf
 8002820:	200003d0 	.word	0x200003d0
 8002824:	20000340 	.word	0x20000340
 8002828:	200002b0 	.word	0x200002b0

0800282c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	61f8      	str	r0, [r7, #28]
	My_ADC_getvalue(adc_buf, &adc_val);
 8002834:	003b      	movs	r3, r7
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002838:	4904      	ldr	r1, [pc, #16]	; (800284c <HAL_ADC_ConvCpltCallback+0x20>)
 800283a:	0018      	movs	r0, r3
 800283c:	f000 f93c 	bl	8002ab8 <My_ADC_getvalue>
//	HAL_ADC_Stop_DMA(&hadc);
//	printf("DMA conversion completed");
//	My_ADC_getvalue(adc_buf, adc_val);
//	HAL_ADC_Start_DMA(&hadc, adc_buf,CH_NUM);
//	HAL_ADC_Stop_DMA(&hadc);
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b008      	add	sp, #32
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000004 	.word	0x20000004
 800284c:	20000214 	.word	0x20000214

08002850 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	0018      	movs	r0, r3
 800285a:	230c      	movs	r3, #12
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f005 fb33 	bl	8007eca <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <MX_ADC_Init+0x17c>)
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <MX_ADC_Init+0x180>)
 8002868:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800286a:	4b58      	ldr	r3, [pc, #352]	; (80029cc <MX_ADC_Init+0x17c>)
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002870:	4b56      	ldr	r3, [pc, #344]	; (80029cc <MX_ADC_Init+0x17c>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002876:	4b55      	ldr	r3, [pc, #340]	; (80029cc <MX_ADC_Init+0x17c>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <MX_ADC_Init+0x17c>)
 800287e:	2201      	movs	r2, #1
 8002880:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002882:	4b52      	ldr	r3, [pc, #328]	; (80029cc <MX_ADC_Init+0x17c>)
 8002884:	2208      	movs	r2, #8
 8002886:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <MX_ADC_Init+0x17c>)
 800288a:	2200      	movs	r2, #0
 800288c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800288e:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <MX_ADC_Init+0x17c>)
 8002890:	2200      	movs	r2, #0
 8002892:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002894:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <MX_ADC_Init+0x17c>)
 8002896:	2201      	movs	r2, #1
 8002898:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <MX_ADC_Init+0x17c>)
 800289c:	2200      	movs	r2, #0
 800289e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028a0:	4b4a      	ldr	r3, [pc, #296]	; (80029cc <MX_ADC_Init+0x17c>)
 80028a2:	22c2      	movs	r2, #194	; 0xc2
 80028a4:	32ff      	adds	r2, #255	; 0xff
 80028a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028a8:	4b48      	ldr	r3, [pc, #288]	; (80029cc <MX_ADC_Init+0x17c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <MX_ADC_Init+0x17c>)
 80028b0:	2224      	movs	r2, #36	; 0x24
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <MX_ADC_Init+0x17c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <MX_ADC_Init+0x17c>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f001 f850 	bl	8003964 <HAL_ADC_Init>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80028c8:	f7ff fea8 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	0152      	lsls	r2, r2, #5
 80028d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2207      	movs	r2, #7
 80028de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028e0:	1d3a      	adds	r2, r7, #4
 80028e2:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <MX_ADC_Init+0x17c>)
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f001 fa0e 	bl	8003d08 <HAL_ADC_ConfigChannel>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d001      	beq.n	80028f4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80028f0:	f7ff fe94 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028fa:	1d3a      	adds	r2, r7, #4
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <MX_ADC_Init+0x17c>)
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f001 fa01 	bl	8003d08 <HAL_ADC_ConfigChannel>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800290a:	f7ff fe87 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2202      	movs	r2, #2
 8002912:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002914:	1d3a      	adds	r2, r7, #4
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <MX_ADC_Init+0x17c>)
 8002918:	0011      	movs	r1, r2
 800291a:	0018      	movs	r0, r3
 800291c:	f001 f9f4 	bl	8003d08 <HAL_ADC_ConfigChannel>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d001      	beq.n	8002928 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002924:	f7ff fe7a 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2203      	movs	r2, #3
 800292c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800292e:	1d3a      	adds	r2, r7, #4
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <MX_ADC_Init+0x17c>)
 8002932:	0011      	movs	r1, r2
 8002934:	0018      	movs	r0, r3
 8002936:	f001 f9e7 	bl	8003d08 <HAL_ADC_ConfigChannel>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800293e:	f7ff fe6d 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2204      	movs	r2, #4
 8002946:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002948:	1d3a      	adds	r2, r7, #4
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <MX_ADC_Init+0x17c>)
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f001 f9da 	bl	8003d08 <HAL_ADC_ConfigChannel>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d001      	beq.n	800295c <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002958:	f7ff fe60 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2205      	movs	r2, #5
 8002960:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <MX_ADC_Init+0x17c>)
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f001 f9cd 	bl	8003d08 <HAL_ADC_ConfigChannel>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8002972:	f7ff fe53 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2206      	movs	r2, #6
 800297a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800297c:	1d3a      	adds	r2, r7, #4
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <MX_ADC_Init+0x17c>)
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f001 f9c0 	bl	8003d08 <HAL_ADC_ConfigChannel>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 800298c:	f7ff fe46 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	2207      	movs	r2, #7
 8002994:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002996:	1d3a      	adds	r2, r7, #4
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <MX_ADC_Init+0x17c>)
 800299a:	0011      	movs	r1, r2
 800299c:	0018      	movs	r0, r3
 800299e:	f001 f9b3 	bl	8003d08 <HAL_ADC_ConfigChannel>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80029a6:	f7ff fe39 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2211      	movs	r2, #17
 80029ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029b0:	1d3a      	adds	r2, r7, #4
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <MX_ADC_Init+0x17c>)
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f001 f9a6 	bl	8003d08 <HAL_ADC_ConfigChannel>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d001      	beq.n	80029c4 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80029c0:	f7ff fe2c 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000228 	.word	0x20000228
 80029d0:	40012400 	.word	0x40012400

080029d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b08b      	sub	sp, #44	; 0x2c
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	2414      	movs	r4, #20
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	0018      	movs	r0, r3
 80029e2:	2314      	movs	r3, #20
 80029e4:	001a      	movs	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	f005 fa6f 	bl	8007eca <memset>
  if(adcHandle->Instance==ADC1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_ADC_MspInit+0xd4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d153      	bne.n	8002a9e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_ADC_MspInit+0xd8>)
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_ADC_MspInit+0xd8>)
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0089      	lsls	r1, r1, #2
 8002a00:	430a      	orrs	r2, r1
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_ADC_MspInit+0xd8>)
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_ADC_MspInit+0xd8>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_ADC_MspInit+0xd8>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0289      	lsls	r1, r1, #10
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_ADC_MspInit+0xd8>)
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	2203      	movs	r2, #3
 8002a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	193a      	adds	r2, r7, r4
 8002a42:	2390      	movs	r3, #144	; 0x90
 8002a44:	05db      	lsls	r3, r3, #23
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f001 fe4f 	bl	80046ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_ADC_MspInit+0xe0>)
 8002a52:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	00d2      	lsls	r2, r2, #3
 8002a74:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a78:	2220      	movs	r2, #32
 8002a7a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a84:	0018      	movs	r0, r3
 8002a86:	f001 fc1b 	bl	80042c0 <HAL_DMA_Init>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002a8e:	f7ff fdc5 	bl	800261c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_ADC_MspInit+0xdc>)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b00b      	add	sp, #44	; 0x2c
 8002aa4:	bd90      	pop	{r4, r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	40012400 	.word	0x40012400
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	20000268 	.word	0x20000268
 8002ab4:	40020008 	.word	0x40020008

08002ab8 <My_ADC_getvalue>:
//How to get the actual Vdda
//Vrefint_cal is based on 3.3V VDDA, while Vrefint_data is based on actual VDDA
//Vref_int/Vref_cal == 3.3/4095	   Vref_int/Vrefint_data == VDDA/4095 ==> VDDA = 3.3V*Vreint_cal/Vrefint_data
//Then using the actual Vdda to get the actual Vrevint and Voltage of other channels
MADC_Structure My_ADC_getvalue(uint16_t* adc_buf, MADC_Structure * adc_val)// the local array addr is not valid after function done
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	char i = 0;
 8002ac4:	2317      	movs	r3, #23
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
//	  {
//		  adc_buf[i] = HAL_ADC_GetValue(&hadc);
		  //HAL_UART_Transmit(&huart1,  &adc_buf[i], sizeof(adc_buf[0]), 100);
//	  }
//	}
	adc_val->bemf_pa = adc_buf[0];
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	881a      	ldrh	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	801a      	strh	r2, [r3, #0]
	adc_val->bemf_pb = adc_buf[1];
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	885a      	ldrh	r2, [r3, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	805a      	strh	r2, [r3, #2]
	adc_val->bemf_pc = adc_buf[2];
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	889a      	ldrh	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	809a      	strh	r2, [r3, #4]
	adc_val->ia		= adc_buf[3];
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	88da      	ldrh	r2, [r3, #6]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	80da      	strh	r2, [r3, #6]
	adc_val->ib		= adc_buf[4];
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	891a      	ldrh	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	811a      	strh	r2, [r3, #8]
	adc_val->isum	= adc_buf[5];
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	895a      	ldrh	r2, [r3, #10]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	815a      	strh	r2, [r3, #10]
	adc_val->isum_filtered = adc_buf[6];
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	899a      	ldrh	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	819a      	strh	r2, [r3, #12]
	adc_val->vbat 	= adc_buf[7];
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	89da      	ldrh	r2, [r3, #14]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	81da      	strh	r2, [r3, #14]
	adc_val->vref_data = adc_buf[8];
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	8a1a      	ldrh	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	821a      	strh	r2, [r3, #16]

	return *adc_val;
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0010      	movs	r0, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	001a      	movs	r2, r3
 8002b20:	f005 f9ca 	bl	8007eb8 <memcpy>
}
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b006      	add	sp, #24
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_DMA_Init+0x38>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_DMA_Init+0x38>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	615a      	str	r2, [r3, #20]
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_DMA_Init+0x38>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2009      	movs	r0, #9
 8002b50:	f001 fb84 	bl	800425c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b54:	2009      	movs	r0, #9
 8002b56:	f001 fb96 	bl	8004286 <HAL_NVIC_EnableIRQ>

}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000

08002b68 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6e:	2414      	movs	r4, #20
 8002b70:	193b      	adds	r3, r7, r4
 8002b72:	0018      	movs	r0, r3
 8002b74:	2314      	movs	r3, #20
 8002b76:	001a      	movs	r2, r3
 8002b78:	2100      	movs	r1, #0
 8002b7a:	f005 f9a6 	bl	8007eca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7e:	4ba6      	ldr	r3, [pc, #664]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0309      	lsls	r1, r1, #12
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	4ba2      	ldr	r3, [pc, #648]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	031b      	lsls	r3, r3, #12
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b9a:	4b9f      	ldr	r3, [pc, #636]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b9e      	ldr	r3, [pc, #632]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	03c9      	lsls	r1, r1, #15
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	4b9b      	ldr	r3, [pc, #620]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	03db      	lsls	r3, r3, #15
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b98      	ldr	r3, [pc, #608]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0289      	lsls	r1, r1, #10
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	615a      	str	r2, [r3, #20]
 8002bc4:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	029b      	lsls	r3, r3, #10
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	4b90      	ldr	r3, [pc, #576]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	02c9      	lsls	r1, r1, #11
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	615a      	str	r2, [r3, #20]
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	02db      	lsls	r3, r3, #11
 8002be8:	4013      	ands	r3, r2
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bee:	4b8a      	ldr	r3, [pc, #552]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0349      	lsls	r1, r1, #13
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	615a      	str	r2, [r3, #20]
 8002bfc:	4b86      	ldr	r3, [pc, #536]	; (8002e18 <MX_GPIO_Init+0x2b0>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	035b      	lsls	r3, r3, #13
 8002c04:	4013      	ands	r3, r2
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 8002c0a:	4984      	ldr	r1, [pc, #528]	; (8002e1c <MX_GPIO_Init+0x2b4>)
 8002c0c:	4b84      	ldr	r3, [pc, #528]	; (8002e20 <MX_GPIO_Init+0x2b8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f001 fedb 	bl	80049cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8002c16:	4b83      	ldr	r3, [pc, #524]	; (8002e24 <MX_GPIO_Init+0x2bc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f001 fed5 	bl	80049cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002c22:	4981      	ldr	r1, [pc, #516]	; (8002e28 <MX_GPIO_Init+0x2c0>)
 8002c24:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <MX_GPIO_Init+0x2c4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 fecf 	bl	80049cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	0219      	lsls	r1, r3, #8
 8002c32:	2390      	movs	r3, #144	; 0x90
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	2200      	movs	r2, #0
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f001 fec7 	bl	80049cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	4a7b      	ldr	r2, [pc, #492]	; (8002e30 <MX_GPIO_Init+0x2c8>)
 8002c42:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	2203      	movs	r2, #3
 8002c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	4a73      	ldr	r2, [pc, #460]	; (8002e20 <MX_GPIO_Init+0x2b8>)
 8002c54:	0019      	movs	r1, r3
 8002c56:	0010      	movs	r0, r2
 8002c58:	f001 fd48 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	22c3      	movs	r2, #195	; 0xc3
 8002c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	2203      	movs	r2, #3
 8002c66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	4a6c      	ldr	r2, [pc, #432]	; (8002e24 <MX_GPIO_Init+0x2bc>)
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f001 fd39 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2202      	movs	r2, #2
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	4a62      	ldr	r2, [pc, #392]	; (8002e20 <MX_GPIO_Init+0x2b8>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f001 fd27 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	4a5a      	ldr	r2, [pc, #360]	; (8002e24 <MX_GPIO_Init+0x2bc>)
 8002cba:	0019      	movs	r1, r3
 8002cbc:	0010      	movs	r0, r2
 8002cbe:	f001 fd15 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	4a53      	ldr	r2, [pc, #332]	; (8002e24 <MX_GPIO_Init+0x2bc>)
 8002cd8:	0019      	movs	r1, r3
 8002cda:	0010      	movs	r0, r2
 8002cdc:	f001 fd06 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ce0:	0021      	movs	r1, r4
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2288      	movs	r2, #136	; 0x88
 8002cec:	0352      	lsls	r2, r2, #13
 8002cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf6:	000c      	movs	r4, r1
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <MX_GPIO_Init+0x2b8>)
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	0010      	movs	r0, r2
 8002d00:	f001 fcf4 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002d04:	0021      	movs	r1, r4
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	22e1      	movs	r2, #225	; 0xe1
 8002d0a:	0152      	lsls	r2, r2, #5
 8002d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0e:	000c      	movs	r4, r1
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2201      	movs	r2, #1
 8002d14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	4a3e      	ldr	r2, [pc, #248]	; (8002e20 <MX_GPIO_Init+0x2b8>)
 8002d26:	0019      	movs	r1, r3
 8002d28:	0010      	movs	r0, r2
 8002d2a:	f001 fcdf 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	2203      	movs	r2, #3
 8002d38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <MX_GPIO_Init+0x2c4>)
 8002d44:	0019      	movs	r1, r3
 8002d46:	0010      	movs	r0, r2
 8002d48:	f001 fcd0 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	4a36      	ldr	r2, [pc, #216]	; (8002e28 <MX_GPIO_Init+0x2c0>)
 8002d50:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	2201      	movs	r2, #1
 8002d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	193b      	adds	r3, r7, r4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2200      	movs	r2, #0
 8002d62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <MX_GPIO_Init+0x2c4>)
 8002d68:	0019      	movs	r1, r3
 8002d6a:	0010      	movs	r0, r2
 8002d6c:	f001 fcbe 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	22c0      	movs	r2, #192	; 0xc0
 8002d74:	0152      	lsls	r2, r2, #5
 8002d76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	193a      	adds	r2, r7, r4
 8002d86:	2390      	movs	r3, #144	; 0x90
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f001 fcad 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d92:	0021      	movs	r1, r4
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0212      	lsls	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9c:	000c      	movs	r4, r1
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	2201      	movs	r2, #1
 8002da2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	193a      	adds	r2, r7, r4
 8002db2:	2390      	movs	r3, #144	; 0x90
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f001 fc97 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dbe:	0021      	movs	r1, r4
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2288      	movs	r2, #136	; 0x88
 8002dca:	0352      	lsls	r2, r2, #13
 8002dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd4:	000c      	movs	r4, r1
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <MX_GPIO_Init+0x2cc>)
 8002dda:	0019      	movs	r1, r3
 8002ddc:	0010      	movs	r0, r2
 8002dde:	f001 fc85 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002de2:	0021      	movs	r1, r4
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	22c0      	movs	r2, #192	; 0xc0
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2212      	movs	r2, #18
 8002df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2201      	movs	r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <MX_GPIO_Init+0x2c4>)
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	f001 fc6e 	bl	80046ec <HAL_GPIO_Init>

}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b00b      	add	sp, #44	; 0x2c
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	00001c21 	.word	0x00001c21
 8002e20:	48000800 	.word	0x48000800
 8002e24:	48001400 	.word	0x48001400
 8002e28:	0000fc04 	.word	0x0000fc04
 8002e2c:	48000400 	.word	0x48000400
 8002e30:	0000c00e 	.word	0x0000c00e
 8002e34:	48000c00 	.word	0x48000c00

08002e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_MspInit+0x44>)
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_MspInit+0x44>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	430a      	orrs	r2, r1
 8002e48:	619a      	str	r2, [r3, #24]
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_MspInit+0x44>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_MspInit+0x44>)
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_MspInit+0x44>)
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	0549      	lsls	r1, r1, #21
 8002e60:	430a      	orrs	r2, r1
 8002e62:	61da      	str	r2, [r3, #28]
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_MspInit+0x44>)
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	055b      	lsls	r3, r3, #21
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40021000 	.word	0x40021000

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <NMI_Handler+0x4>

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea4:	f000 fd42 	bl	800392c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <DMA1_Channel1_IRQHandler+0x14>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f001 fb2d 	bl	8004516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000268 	.word	0x20000268

08002ec8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <TIM6_IRQHandler+0x14>)
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f002 fd88 	bl	80059e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20000340 	.word	0x20000340

08002ee0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <TIM14_IRQHandler+0x14>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f002 fd7c 	bl	80059e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20000388 	.word	0x20000388

08002ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <USART1_IRQHandler+0x14>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f003 feb2 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	200004d4 	.word	0x200004d4

08002f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  return 1;
 8002f14:	2301      	movs	r3, #1
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f26:	f004 ff9d 	bl	8007e64 <__errno>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	425b      	negs	r3, r3
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f44:	2301      	movs	r3, #1
 8002f46:	425a      	negs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff ffe5 	bl	8002f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f52:	e7fe      	b.n	8002f52 <_exit+0x16>

08002f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e00a      	b.n	8002f7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f66:	e000      	b.n	8002f6a <_read+0x16>
 8002f68:	bf00      	nop
 8002f6a:	0001      	movs	r1, r0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	60ba      	str	r2, [r7, #8]
 8002f72:	b2ca      	uxtb	r2, r1
 8002f74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf0      	blt.n	8002f66 <_read+0x12>
  }

  return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b006      	add	sp, #24
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e009      	b.n	8002fb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	60ba      	str	r2, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff fb23 	bl	80025f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dbf1      	blt.n	8002fa0 <_write+0x12>
  }
  return len;
 8002fbc:	687b      	ldr	r3, [r7, #4]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b006      	add	sp, #24
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	425b      	negs	r3, r3
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0192      	lsls	r2, r2, #6
 8002fea:	605a      	str	r2, [r3, #4]
  return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <_isatty>:

int _isatty(int file)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f004 ff08 	bl	8007e64 <__errno>
 8003054:	0003      	movs	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	2301      	movs	r3, #1
 800305c:	425b      	negs	r3, r3
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	18d2      	adds	r2, r2, r3
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b006      	add	sp, #24
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20002000 	.word	0x20002000
 8003080:	00000400 	.word	0x00000400
 8003084:	200002ac 	.word	0x200002ac
 8003088:	20000578 	.word	0x20000578

0800308c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b09a      	sub	sp, #104	; 0x68
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309e:	2358      	movs	r3, #88	; 0x58
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	0018      	movs	r0, r3
 80030a4:	2310      	movs	r3, #16
 80030a6:	001a      	movs	r2, r3
 80030a8:	2100      	movs	r1, #0
 80030aa:	f004 ff0e 	bl	8007eca <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80030ae:	2344      	movs	r3, #68	; 0x44
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	0018      	movs	r0, r3
 80030b4:	2314      	movs	r3, #20
 80030b6:	001a      	movs	r2, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	f004 ff06 	bl	8007eca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030be:	233c      	movs	r3, #60	; 0x3c
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	0018      	movs	r0, r3
 80030c4:	2308      	movs	r3, #8
 80030c6:	001a      	movs	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	f004 fefe 	bl	8007eca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ce:	2320      	movs	r3, #32
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	0018      	movs	r0, r3
 80030d4:	231c      	movs	r3, #28
 80030d6:	001a      	movs	r2, r3
 80030d8:	2100      	movs	r1, #0
 80030da:	f004 fef6 	bl	8007eca <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030de:	003b      	movs	r3, r7
 80030e0:	0018      	movs	r0, r3
 80030e2:	2320      	movs	r3, #32
 80030e4:	001a      	movs	r2, r3
 80030e6:	2100      	movs	r1, #0
 80030e8:	f004 feef 	bl	8007eca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030ec:	4b6b      	ldr	r3, [pc, #428]	; (800329c <MX_TIM1_Init+0x204>)
 80030ee:	4a6c      	ldr	r2, [pc, #432]	; (80032a0 <MX_TIM1_Init+0x208>)
 80030f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80030f2:	4b6a      	ldr	r3, [pc, #424]	; (800329c <MX_TIM1_Init+0x204>)
 80030f4:	2218      	movs	r2, #24
 80030f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f8:	4b68      	ldr	r3, [pc, #416]	; (800329c <MX_TIM1_Init+0x204>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80030fe:	4b67      	ldr	r3, [pc, #412]	; (800329c <MX_TIM1_Init+0x204>)
 8003100:	2263      	movs	r2, #99	; 0x63
 8003102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003104:	4b65      	ldr	r3, [pc, #404]	; (800329c <MX_TIM1_Init+0x204>)
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800310a:	4b64      	ldr	r3, [pc, #400]	; (800329c <MX_TIM1_Init+0x204>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003110:	4b62      	ldr	r3, [pc, #392]	; (800329c <MX_TIM1_Init+0x204>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003116:	4b61      	ldr	r3, [pc, #388]	; (800329c <MX_TIM1_Init+0x204>)
 8003118:	0018      	movs	r0, r3
 800311a:	f002 f9bb 	bl	8005494 <HAL_TIM_Base_Init>
 800311e:	1e03      	subs	r3, r0, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8003122:	f7ff fa7b 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003126:	2158      	movs	r1, #88	; 0x58
 8003128:	187b      	adds	r3, r7, r1
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	0152      	lsls	r2, r2, #5
 800312e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003130:	187a      	adds	r2, r7, r1
 8003132:	4b5a      	ldr	r3, [pc, #360]	; (800329c <MX_TIM1_Init+0x204>)
 8003134:	0011      	movs	r1, r2
 8003136:	0018      	movs	r0, r3
 8003138:	f002 fe88 	bl	8005e4c <HAL_TIM_ConfigClockSource>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003140:	f7ff fa6c 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003144:	4b55      	ldr	r3, [pc, #340]	; (800329c <MX_TIM1_Init+0x204>)
 8003146:	0018      	movs	r0, r3
 8003148:	f002 fac6 	bl	80056d8 <HAL_TIM_PWM_Init>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003150:	f7ff fa64 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003154:	4b51      	ldr	r3, [pc, #324]	; (800329c <MX_TIM1_Init+0x204>)
 8003156:	0018      	movs	r0, r3
 8003158:	f002 fa66 	bl	8005628 <HAL_TIM_OC_Init>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003160:	f7ff fa5c 	bl	800261c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003164:	2144      	movs	r1, #68	; 0x44
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800316c:	187b      	adds	r3, r7, r1
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003172:	187a      	adds	r2, r7, r1
 8003174:	4b49      	ldr	r3, [pc, #292]	; (800329c <MX_TIM1_Init+0x204>)
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f002 ff3b 	bl	8005ff4 <HAL_TIM_SlaveConfigSynchro>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003182:	f7ff fa4b 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003186:	213c      	movs	r1, #60	; 0x3c
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2270      	movs	r2, #112	; 0x70
 800318c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2200      	movs	r2, #0
 8003192:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003194:	187a      	adds	r2, r7, r1
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <MX_TIM1_Init+0x204>)
 8003198:	0011      	movs	r1, r2
 800319a:	0018      	movs	r0, r3
 800319c:	f003 fb52 	bl	8006844 <HAL_TIMEx_MasterConfigSynchronization>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80031a4:	f7ff fa3a 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a8:	2120      	movs	r1, #32
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2260      	movs	r2, #96	; 0x60
 80031ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2232      	movs	r2, #50	; 0x32
 80031b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2200      	movs	r2, #0
 80031cc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031d4:	1879      	adds	r1, r7, r1
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <MX_TIM1_Init+0x204>)
 80031d8:	2200      	movs	r2, #0
 80031da:	0018      	movs	r0, r3
 80031dc:	f002 fd70 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d001      	beq.n	80031e8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80031e4:	f7ff fa1a 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031e8:	2320      	movs	r3, #32
 80031ea:	18f9      	adds	r1, r7, r3
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <MX_TIM1_Init+0x204>)
 80031ee:	2204      	movs	r2, #4
 80031f0:	0018      	movs	r0, r3
 80031f2:	f002 fd65 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80031fa:	f7ff fa0f 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031fe:	2320      	movs	r3, #32
 8003200:	18f9      	adds	r1, r7, r3
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <MX_TIM1_Init+0x204>)
 8003204:	2208      	movs	r2, #8
 8003206:	0018      	movs	r0, r3
 8003208:	f002 fd5a 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8003210:	f7ff fa04 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003214:	2120      	movs	r1, #32
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2230      	movs	r2, #48	; 0x30
 800321a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800321c:	1879      	adds	r1, r7, r1
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <MX_TIM1_Init+0x204>)
 8003220:	220c      	movs	r2, #12
 8003222:	0018      	movs	r0, r3
 8003224:	f002 fcf4 	bl	8005c10 <HAL_TIM_OC_ConfigChannel>
 8003228:	1e03      	subs	r3, r0, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 800322c:	f7ff f9f6 	bl	800261c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003230:	003b      	movs	r3, r7
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003236:	003b      	movs	r3, r7
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800323c:	003b      	movs	r3, r7
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003242:	003b      	movs	r3, r7
 8003244:	2200      	movs	r2, #0
 8003246:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003248:	003b      	movs	r3, r7
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800324e:	003b      	movs	r3, r7
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	0192      	lsls	r2, r2, #6
 8003254:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003256:	003b      	movs	r3, r7
 8003258:	2200      	movs	r2, #0
 800325a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800325c:	003a      	movs	r2, r7
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <MX_TIM1_Init+0x204>)
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f003 fb46 	bl	80068f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 800326c:	f7ff f9d6 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 49;//1us
 8003270:	003b      	movs	r3, r7
 8003272:	2231      	movs	r2, #49	; 0x31
 8003274:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003276:	003a      	movs	r2, r7
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <MX_TIM1_Init+0x204>)
 800327a:	0011      	movs	r1, r2
 800327c:	0018      	movs	r0, r3
 800327e:	f003 fb39 	bl	80068f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <MX_TIM1_Init+0x1f2>
  {
    Error_Handler();
 8003286:	f7ff f9c9 	bl	800261c <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <MX_TIM1_Init+0x204>)
 800328c:	0018      	movs	r0, r3
 800328e:	f000 f983 	bl	8003598 <HAL_TIM_MspPostInit>

}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b01a      	add	sp, #104	; 0x68
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	200002b0 	.word	0x200002b0
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08e      	sub	sp, #56	; 0x38
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	2328      	movs	r3, #40	; 0x28
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	0018      	movs	r0, r3
 80032b0:	2310      	movs	r3, #16
 80032b2:	001a      	movs	r2, r3
 80032b4:	2100      	movs	r1, #0
 80032b6:	f004 fe08 	bl	8007eca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ba:	2320      	movs	r3, #32
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	0018      	movs	r0, r3
 80032c0:	2308      	movs	r3, #8
 80032c2:	001a      	movs	r2, r3
 80032c4:	2100      	movs	r1, #0
 80032c6:	f004 fe00 	bl	8007eca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	0018      	movs	r0, r3
 80032ce:	231c      	movs	r3, #28
 80032d0:	001a      	movs	r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	f004 fdf9 	bl	8007eca <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032d8:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <MX_TIM3_Init+0x134>)
 80032dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032e0:	220f      	movs	r2, #15
 80032e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80032ea:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032ec:	2263      	movs	r2, #99	; 0x63
 80032ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f0:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <MX_TIM3_Init+0x130>)
 80032fe:	0018      	movs	r0, r3
 8003300:	f002 f8c8 	bl	8005494 <HAL_TIM_Base_Init>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d001      	beq.n	800330c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003308:	f7ff f988 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330c:	2128      	movs	r1, #40	; 0x28
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	0152      	lsls	r2, r2, #5
 8003314:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003316:	187a      	adds	r2, r7, r1
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <MX_TIM3_Init+0x130>)
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f002 fd95 	bl	8005e4c <HAL_TIM_ConfigClockSource>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003326:	f7ff f979 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800332a:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <MX_TIM3_Init+0x130>)
 800332c:	0018      	movs	r0, r3
 800332e:	f002 f9d3 	bl	80056d8 <HAL_TIM_PWM_Init>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003336:	f7ff f971 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333a:	2120      	movs	r1, #32
 800333c:	187b      	adds	r3, r7, r1
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003348:	187a      	adds	r2, r7, r1
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <MX_TIM3_Init+0x130>)
 800334c:	0011      	movs	r1, r2
 800334e:	0018      	movs	r0, r3
 8003350:	f003 fa78 	bl	8006844 <HAL_TIMEx_MasterConfigSynchronization>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003358:	f7ff f960 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	2260      	movs	r2, #96	; 0x60
 8003360:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	2200      	movs	r2, #0
 8003366:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003374:	1d39      	adds	r1, r7, #4
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <MX_TIM3_Init+0x130>)
 8003378:	2200      	movs	r2, #0
 800337a:	0018      	movs	r0, r3
 800337c:	f002 fca0 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003384:	f7ff f94a 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003388:	1d39      	adds	r1, r7, #4
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <MX_TIM3_Init+0x130>)
 800338c:	2204      	movs	r2, #4
 800338e:	0018      	movs	r0, r3
 8003390:	f002 fc96 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003398:	f7ff f940 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800339c:	1d39      	adds	r1, r7, #4
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <MX_TIM3_Init+0x130>)
 80033a0:	2208      	movs	r2, #8
 80033a2:	0018      	movs	r0, r3
 80033a4:	f002 fc8c 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80033ac:	f7ff f936 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033b0:	1d39      	adds	r1, r7, #4
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <MX_TIM3_Init+0x130>)
 80033b4:	220c      	movs	r2, #12
 80033b6:	0018      	movs	r0, r3
 80033b8:	f002 fc82 	bl	8005cc0 <HAL_TIM_PWM_ConfigChannel>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d001      	beq.n	80033c4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80033c0:	f7ff f92c 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <MX_TIM3_Init+0x130>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f8e6 	bl	8003598 <HAL_TIM_MspPostInit>

}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b00e      	add	sp, #56	; 0x38
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200002f8 	.word	0x200002f8
 80033d8:	40000400 	.word	0x40000400

080033dc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <MX_TIM6_Init+0x38>)
 80033e2:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <MX_TIM6_Init+0x3c>)
 80033e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <MX_TIM6_Init+0x38>)
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <MX_TIM6_Init+0x40>)
 80033ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <MX_TIM6_Init+0x38>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <MX_TIM6_Init+0x38>)
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <MX_TIM6_Init+0x44>)
 80033f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <MX_TIM6_Init+0x38>)
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <MX_TIM6_Init+0x38>)
 8003400:	0018      	movs	r0, r3
 8003402:	f002 f847 	bl	8005494 <HAL_TIM_Base_Init>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800340a:	f7ff f907 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000340 	.word	0x20000340
 8003418:	40001000 	.word	0x40001000
 800341c:	0000bb7f 	.word	0x0000bb7f
 8003420:	000003e7 	.word	0x000003e7

08003424 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	0018      	movs	r0, r3
 800342e:	231c      	movs	r3, #28
 8003430:	001a      	movs	r2, r3
 8003432:	2100      	movs	r1, #0
 8003434:	f004 fd49 	bl	8007eca <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <MX_TIM14_Init+0x8c>)
 800343a:	4a1e      	ldr	r2, [pc, #120]	; (80034b4 <MX_TIM14_Init+0x90>)
 800343c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48000-1;
 800343e:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <MX_TIM14_Init+0x8c>)
 8003440:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <MX_TIM14_Init+0x94>)
 8003442:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <MX_TIM14_Init+0x8c>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <MX_TIM14_Init+0x8c>)
 800344c:	2263      	movs	r2, #99	; 0x63
 800344e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <MX_TIM14_Init+0x8c>)
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <MX_TIM14_Init+0x8c>)
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <MX_TIM14_Init+0x8c>)
 800345e:	0018      	movs	r0, r3
 8003460:	f002 f818 	bl	8005494 <HAL_TIM_Base_Init>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d001      	beq.n	800346c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003468:	f7ff f8d8 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <MX_TIM14_Init+0x8c>)
 800346e:	0018      	movs	r0, r3
 8003470:	f002 f8da 	bl	8005628 <HAL_TIM_OC_Init>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003478:	f7ff f8d0 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003494:	1d39      	adds	r1, r7, #4
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_TIM14_Init+0x8c>)
 8003498:	2200      	movs	r2, #0
 800349a:	0018      	movs	r0, r3
 800349c:	f002 fbb8 	bl	8005c10 <HAL_TIM_OC_ConfigChannel>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80034a4:	f7ff f8ba 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b008      	add	sp, #32
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000388 	.word	0x20000388
 80034b4:	40002000 	.word	0x40002000
 80034b8:	0000bb7f 	.word	0x0000bb7f

080034bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_TIM_Base_MspInit+0xc8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	0109      	lsls	r1, r1, #4
 80034d8:	430a      	orrs	r2, r1
 80034da:	619a      	str	r2, [r3, #24]
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	4013      	ands	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80034ea:	e046      	b.n	800357a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_TIM_Base_MspInit+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10c      	bne.n	8003510 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 80034fc:	2102      	movs	r1, #2
 80034fe:	430a      	orrs	r2, r1
 8003500:	61da      	str	r2, [r3, #28]
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
}
 800350e:	e034      	b.n	800357a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM6)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_TIM_Base_MspInit+0xd4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d114      	bne.n	8003544 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 8003520:	2110      	movs	r1, #16
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
 8003526:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	2210      	movs	r2, #16
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2101      	movs	r1, #1
 8003536:	2011      	movs	r0, #17
 8003538:	f000 fe90 	bl	800425c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800353c:	2011      	movs	r0, #17
 800353e:	f000 fea2 	bl	8004286 <HAL_NVIC_EnableIRQ>
}
 8003542:	e01a      	b.n	800357a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM14)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_TIM_Base_MspInit+0xd8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d115      	bne.n	800357a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0049      	lsls	r1, r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	61da      	str	r2, [r3, #28]
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_TIM_Base_MspInit+0xcc>)
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2101      	movs	r1, #1
 800356e:	2013      	movs	r0, #19
 8003570:	f000 fe74 	bl	800425c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003574:	2013      	movs	r0, #19
 8003576:	f000 fe86 	bl	8004286 <HAL_NVIC_EnableIRQ>
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b006      	add	sp, #24
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40021000 	.word	0x40021000
 800358c:	40000400 	.word	0x40000400
 8003590:	40001000 	.word	0x40001000
 8003594:	40002000 	.word	0x40002000

08003598 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b08b      	sub	sp, #44	; 0x2c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	2414      	movs	r4, #20
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	0018      	movs	r0, r3
 80035a6:	2314      	movs	r3, #20
 80035a8:	001a      	movs	r2, r3
 80035aa:	2100      	movs	r1, #0
 80035ac:	f004 fc8d 	bl	8007eca <memset>
  if(timHandle->Instance==TIM1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a37      	ldr	r2, [pc, #220]	; (8003694 <HAL_TIM_MspPostInit+0xfc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d126      	bne.n	8003608 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_TIM_MspPostInit+0x100>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_TIM_MspPostInit+0x100>)
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	0289      	lsls	r1, r1, #10
 80035c4:	430a      	orrs	r2, r1
 80035c6:	615a      	str	r2, [r3, #20]
 80035c8:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_TIM_MspPostInit+0x100>)
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	029b      	lsls	r3, r3, #10
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	22e0      	movs	r2, #224	; 0xe0
 80035da:	00d2      	lsls	r2, r2, #3
 80035dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	0021      	movs	r1, r4
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	2202      	movs	r2, #2
 80035e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	2202      	movs	r2, #2
 80035f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f8:	187a      	adds	r2, r7, r1
 80035fa:	2390      	movs	r3, #144	; 0x90
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	0011      	movs	r1, r2
 8003600:	0018      	movs	r0, r3
 8003602:	f001 f873 	bl	80046ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003606:	e041      	b.n	800368c <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <HAL_TIM_MspPostInit+0x104>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d13c      	bne.n	800368c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_TIM_MspPostInit+0x100>)
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_TIM_MspPostInit+0x100>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0309      	lsls	r1, r1, #12
 800361c:	430a      	orrs	r2, r1
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_TIM_MspPostInit+0x100>)
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800362e:	2114      	movs	r1, #20
 8003630:	187b      	adds	r3, r7, r1
 8003632:	22b0      	movs	r2, #176	; 0xb0
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	000c      	movs	r4, r1
 800363a:	193b      	adds	r3, r7, r4
 800363c:	2202      	movs	r2, #2
 800363e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	193b      	adds	r3, r7, r4
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	193b      	adds	r3, r7, r4
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800364c:	193b      	adds	r3, r7, r4
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003652:	193b      	adds	r3, r7, r4
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_TIM_MspPostInit+0x108>)
 8003656:	0019      	movs	r1, r3
 8003658:	0010      	movs	r0, r2
 800365a:	f001 f847 	bl	80046ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800365e:	0021      	movs	r1, r4
 8003660:	187b      	adds	r3, r7, r1
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	0052      	lsls	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	187b      	adds	r3, r7, r1
 800366a:	2202      	movs	r2, #2
 800366c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	187b      	adds	r3, r7, r1
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	187b      	adds	r3, r7, r1
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2201      	movs	r2, #1
 800367e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003680:	187b      	adds	r3, r7, r1
 8003682:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <HAL_TIM_MspPostInit+0x108>)
 8003684:	0019      	movs	r1, r3
 8003686:	0010      	movs	r0, r2
 8003688:	f001 f830 	bl	80046ec <HAL_GPIO_Init>
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b00b      	add	sp, #44	; 0x2c
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40021000 	.word	0x40021000
 800369c:	40000400 	.word	0x40000400
 80036a0:	48000800 	.word	0x48000800

080036a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <MX_USART1_UART_Init+0x5c>)
 80036ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036b0:	22e1      	movs	r2, #225	; 0xe1
 80036b2:	0252      	lsls	r2, r2, #9
 80036b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036ca:	220c      	movs	r2, #12
 80036cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036dc:	2200      	movs	r2, #0
 80036de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <MX_USART1_UART_Init+0x58>)
 80036e8:	0018      	movs	r0, r3
 80036ea:	f003 f971 	bl	80069d0 <HAL_UART_Init>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d001      	beq.n	80036f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80036f2:	f7fe ff93 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	200004d4 	.word	0x200004d4
 8003700:	40013800 	.word	0x40013800

08003704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b08b      	sub	sp, #44	; 0x2c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	2414      	movs	r4, #20
 800370e:	193b      	adds	r3, r7, r4
 8003710:	0018      	movs	r0, r3
 8003712:	2314      	movs	r3, #20
 8003714:	001a      	movs	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	f004 fbd7 	bl	8007eca <memset>
  if(uartHandle->Instance==USART1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <HAL_UART_MspInit+0xa0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d139      	bne.n	800379a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_UART_MspInit+0xa4>)
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_UART_MspInit+0xa4>)
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	01c9      	lsls	r1, r1, #7
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]
 8003734:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_UART_MspInit+0xa4>)
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	01db      	lsls	r3, r3, #7
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_UART_MspInit+0xa4>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_UART_MspInit+0xa4>)
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	02c9      	lsls	r1, r1, #11
 800374c:	430a      	orrs	r2, r1
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_UART_MspInit+0xa4>)
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	02db      	lsls	r3, r3, #11
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800375e:	0021      	movs	r1, r4
 8003760:	187b      	adds	r3, r7, r1
 8003762:	22c0      	movs	r2, #192	; 0xc0
 8003764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	187b      	adds	r3, r7, r1
 8003768:	2202      	movs	r2, #2
 800376a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	187b      	adds	r3, r7, r1
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2203      	movs	r2, #3
 8003776:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003778:	187b      	adds	r3, r7, r1
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	187b      	adds	r3, r7, r1
 8003780:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_UART_MspInit+0xa8>)
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f000 ffb1 	bl	80046ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	201b      	movs	r0, #27
 8003790:	f000 fd64 	bl	800425c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003794:	201b      	movs	r0, #27
 8003796:	f000 fd76 	bl	8004286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b00b      	add	sp, #44	; 0x2c
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40021000 	.word	0x40021000
 80037ac:	48000400 	.word	0x48000400

080037b0 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	0002      	movs	r2, r0
 80037b8:	1dfb      	adds	r3, r7, #7
 80037ba:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d110      	bne.n	80037e6 <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <BT_PWM_handle+0x90>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	dc07      	bgt.n	80037de <BT_PWM_handle+0x2e>
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <BT_PWM_handle+0x90>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	b25a      	sxtb	r2, r3
 80037dc:	e000      	b.n	80037e0 <BT_PWM_handle+0x30>
 80037de:	220a      	movs	r2, #10
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <BT_PWM_handle+0x90>)
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e00f      	b.n	8003806 <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <BT_PWM_handle+0x90>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	dd07      	ble.n	8003800 <BT_PWM_handle+0x50>
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <BT_PWM_handle+0x90>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	b25a      	sxtb	r2, r3
 80037fe:	e000      	b.n	8003802 <BT_PWM_handle+0x52>
 8003800:	2200      	movs	r2, #0
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <BT_PWM_handle+0x90>)
 8003804:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <BT_PWM_handle+0x90>)
 8003808:	2200      	movs	r2, #0
 800380a:	569a      	ldrsb	r2, [r3, r2]
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <BT_PWM_handle+0x94>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <BT_PWM_handle+0x90>)
 8003814:	2200      	movs	r2, #0
 8003816:	569a      	ldrsb	r2, [r3, r2]
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <BT_PWM_handle+0x94>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <BT_PWM_handle+0x90>)
 8003820:	2200      	movs	r2, #0
 8003822:	569a      	ldrsb	r2, [r3, r2]
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <BT_PWM_handle+0x94>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <BT_PWM_handle+0x90>)
 800382c:	2200      	movs	r2, #0
 800382e:	569a      	ldrsb	r2, [r3, r2]
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <BT_PWM_handle+0x94>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b002      	add	sp, #8
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	2000055c 	.word	0x2000055c
 8003844:	200002f8 	.word	0x200002f8

08003848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003848:	480d      	ldr	r0, [pc, #52]	; (8003880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800384a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800384c:	f7ff fc1e 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003850:	480c      	ldr	r0, [pc, #48]	; (8003884 <LoopForever+0x6>)
  ldr r1, =_edata
 8003852:	490d      	ldr	r1, [pc, #52]	; (8003888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <LoopForever+0xe>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003858:	e002      	b.n	8003860 <LoopCopyDataInit>

0800385a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800385c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385e:	3304      	adds	r3, #4

08003860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003864:	d3f9      	bcc.n	800385a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003868:	4c0a      	ldr	r4, [pc, #40]	; (8003894 <LoopForever+0x16>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800386c:	e001      	b.n	8003872 <LoopFillZerobss>

0800386e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003870:	3204      	adds	r2, #4

08003872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003874:	d3fb      	bcc.n	800386e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003876:	f004 fafb 	bl	8007e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800387a:	f7fe fe07 	bl	800248c <main>

0800387e <LoopForever>:

LoopForever:
    b LoopForever
 800387e:	e7fe      	b.n	800387e <LoopForever>
  ldr   r0, =_estack
 8003880:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003888:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800388c:	0800cf1c 	.word	0x0800cf1c
  ldr r2, =_sbss
 8003890:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003894:	20000574 	.word	0x20000574

08003898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC1_IRQHandler>
	...

0800389c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_Init+0x24>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_Init+0x24>)
 80038a6:	2110      	movs	r1, #16
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f000 f809 	bl	80038c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b2:	f7ff fac1 	bl	8002e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	40022000 	.word	0x40022000

080038c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_InitTick+0x5c>)
 80038ce:	681c      	ldr	r4, [r3, #0]
 80038d0:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_InitTick+0x60>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	0019      	movs	r1, r3
 80038d6:	23fa      	movs	r3, #250	; 0xfa
 80038d8:	0098      	lsls	r0, r3, #2
 80038da:	f7fc fc31 	bl	8000140 <__udivsi3>
 80038de:	0003      	movs	r3, r0
 80038e0:	0019      	movs	r1, r3
 80038e2:	0020      	movs	r0, r4
 80038e4:	f7fc fc2c 	bl	8000140 <__udivsi3>
 80038e8:	0003      	movs	r3, r0
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fcdb 	bl	80042a6 <HAL_SYSTICK_Config>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e00f      	b.n	8003918 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d80b      	bhi.n	8003916 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	2301      	movs	r3, #1
 8003902:	425b      	negs	r3, r3
 8003904:	2200      	movs	r2, #0
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fca8 	bl	800425c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_InitTick+0x64>)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b003      	add	sp, #12
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	20000018 	.word	0x20000018
 8003924:	20000020 	.word	0x20000020
 8003928:	2000001c 	.word	0x2000001c

0800392c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_IncTick+0x1c>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	001a      	movs	r2, r3
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_IncTick+0x20>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	18d2      	adds	r2, r2, r3
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_IncTick+0x20>)
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	20000020 	.word	0x20000020
 800394c:	20000560 	.word	0x20000560

08003950 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;
 8003954:	4b02      	ldr	r3, [pc, #8]	; (8003960 <HAL_GetTick+0x10>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	20000560 	.word	0x20000560

08003964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396c:	230f      	movs	r3, #15
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e125      	b.n	8003bce <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2234      	movs	r2, #52	; 0x34
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff f81a 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	2210      	movs	r2, #16
 80039a6:	4013      	ands	r3, r2
 80039a8:	d000      	beq.n	80039ac <HAL_ADC_Init+0x48>
 80039aa:	e103      	b.n	8003bb4 <HAL_ADC_Init+0x250>
 80039ac:	230f      	movs	r3, #15
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d000      	beq.n	80039b8 <HAL_ADC_Init+0x54>
 80039b6:	e0fd      	b.n	8003bb4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2204      	movs	r2, #4
 80039c0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80039c2:	d000      	beq.n	80039c6 <HAL_ADC_Init+0x62>
 80039c4:	e0f6      	b.n	8003bb4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	4a83      	ldr	r2, [pc, #524]	; (8003bd8 <HAL_ADC_Init+0x274>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	2202      	movs	r2, #2
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2203      	movs	r2, #3
 80039de:	4013      	ands	r3, r2
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d112      	bne.n	8003a0a <HAL_ADC_Init+0xa6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d009      	beq.n	8003a06 <HAL_ADC_Init+0xa2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	401a      	ands	r2, r3
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_Init+0xa6>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_ADC_Init+0xa8>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2218      	movs	r2, #24
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	0899      	lsrs	r1, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4964      	ldr	r1, [pc, #400]	; (8003bdc <HAL_ADC_Init+0x278>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7e1b      	ldrb	r3, [r3, #24]
 8003a52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7e5b      	ldrb	r3, [r3, #25]
 8003a58:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7e9b      	ldrb	r3, [r3, #26]
 8003a60:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003a62:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <HAL_ADC_Init+0x10e>
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	e000      	b.n	8003a74 <HAL_ADC_Init+0x110>
 8003a72:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a74:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003a7a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_Init+0x124>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e000      	b.n	8003a8a <HAL_ADC_Init+0x126>
 8003a88:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003a8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2124      	movs	r1, #36	; 0x24
 8003a90:	5c5b      	ldrb	r3, [r3, r1]
 8003a92:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003a94:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7edb      	ldrb	r3, [r3, #27]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d115      	bne.n	8003ad0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7e9b      	ldrb	r3, [r3, #26]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	0252      	lsls	r2, r2, #9
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	2220      	movs	r2, #32
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	23c2      	movs	r3, #194	; 0xc2
 8003ad6:	33ff      	adds	r3, #255	; 0xff
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d007      	beq.n	8003aec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68d9      	ldr	r1, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	055b      	lsls	r3, r3, #21
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d01b      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d017      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d013      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d00f      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00b      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d007      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d003      	beq.n	8003b40 <HAL_ADC_Init+0x1dc>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d112      	bne.n	8003b66 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2107      	movs	r1, #7
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6959      	ldr	r1, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	2207      	movs	r2, #7
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <HAL_ADC_Init+0x27c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10b      	bne.n	8003b8e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2203      	movs	r2, #3
 8003b82:	4393      	bics	r3, r2
 8003b84:	2201      	movs	r2, #1
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003b8c:	e01c      	b.n	8003bc8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	2212      	movs	r2, #18
 8003b94:	4393      	bics	r3, r2
 8003b96:	2210      	movs	r2, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003baa:	230f      	movs	r3, #15
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003bb2:	e009      	b.n	8003bc8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	2210      	movs	r2, #16
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	fffffefd 	.word	0xfffffefd
 8003bdc:	fffe0219 	.word	0xfffe0219
 8003be0:	833fffe7 	.word	0x833fffe7

08003be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf0:	2317      	movs	r3, #23
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4013      	ands	r3, r2
 8003c02:	d15e      	bne.n	8003cc2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2234      	movs	r2, #52	; 0x34
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x2e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e05e      	b.n	8003cd0 <HAL_ADC_Start_DMA+0xec>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2234      	movs	r2, #52	; 0x34
 8003c16:	2101      	movs	r1, #1
 8003c18:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	7e5b      	ldrb	r3, [r3, #25]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d007      	beq.n	8003c32 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003c22:	2317      	movs	r3, #23
 8003c24:	18fc      	adds	r4, r7, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f963 	bl	8003ef4 <ADC_Enable>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c32:	2317      	movs	r3, #23
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d146      	bne.n	8003cca <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <HAL_ADC_Start_DMA+0xf4>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	0052      	lsls	r2, r2, #1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2234      	movs	r2, #52	; 0x34
 8003c58:	2100      	movs	r1, #0
 8003c5a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_ADC_Start_DMA+0xf8>)
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_ADC_Start_DMA+0xfc>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_ADC_Start_DMA+0x100>)
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	221c      	movs	r2, #28
 8003c7a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2110      	movs	r1, #16
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2101      	movs	r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3340      	adds	r3, #64	; 0x40
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f000 fb50 	bl	8004350 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2104      	movs	r1, #4
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cc2:	2317      	movs	r3, #23
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003cca:	2317      	movs	r3, #23
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b007      	add	sp, #28
 8003cd6:	bd90      	pop	{r4, r7, pc}
 8003cd8:	fffff0fe 	.word	0xfffff0fe
 8003cdc:	08003ffd 	.word	0x08003ffd
 8003ce0:	080040b1 	.word	0x080040b1
 8003ce4:	080040cf 	.word	0x080040cf

08003ce8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	055b      	lsls	r3, r3, #21
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d011      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x46>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d00d      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x46>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d009      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x46>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d005      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x46>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d001      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x46>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2234      	movs	r2, #52	; 0x34
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x54>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0bb      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1cc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2234      	movs	r2, #52	; 0x34
 8003d60:	2101      	movs	r1, #1
 8003d62:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d000      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x6a>
 8003d70:	e09f      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a59      	ldr	r2, [pc, #356]	; (8003edc <HAL_ADC_ConfigChannel+0x1d4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x76>
 8003d7c:	e077      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	055b      	lsls	r3, r3, #21
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d037      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d033      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d02f      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d02b      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d027      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b05      	cmp	r3, #5
 8003dc6:	d023      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d01f      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	2b07      	cmp	r3, #7
 8003dd6:	d01b      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2107      	movs	r1, #7
 8003de4:	400b      	ands	r3, r1
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d012      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2107      	movs	r1, #7
 8003df6:	438a      	bics	r2, r1
 8003df8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6959      	ldr	r1, [r3, #20]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2207      	movs	r2, #7
 8003e06:	401a      	ands	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d003      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x118>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b11      	cmp	r3, #17
 8003e1e:	d152      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e20:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d102      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x12a>
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	e001      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x12e>
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	03db      	lsls	r3, r3, #15
 8003e36:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d140      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_ADC_ConfigChannel+0x1dc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4927      	ldr	r1, [pc, #156]	; (8003ee8 <HAL_ADC_ConfigChannel+0x1e0>)
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f7fc f978 	bl	8000140 <__udivsi3>
 8003e50:	0003      	movs	r3, r0
 8003e52:	001a      	movs	r2, r3
 8003e54:	0013      	movs	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e5e:	e002      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f9      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x158>
 8003e6c:	e02b      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4099      	lsls	r1, r3
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	43d9      	mvns	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	400a      	ands	r2, r1
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d003      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x190>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b11      	cmp	r3, #17
 8003e96:	d116      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e9a:	6819      	ldr	r1, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x1a0>
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_ADC_ConfigChannel+0x1e4>)
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1a2>
 8003ea8:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e009      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ebe:	230f      	movs	r3, #15
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2234      	movs	r2, #52	; 0x34
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003ece:	230f      	movs	r3, #15
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	00001001 	.word	0x00001001
 8003ee0:	40012708 	.word	0x40012708
 8003ee4:	20000018 	.word	0x20000018
 8003ee8:	000f4240 	.word	0x000f4240
 8003eec:	ff7fffff 	.word	0xff7fffff
 8003ef0:	ffbfffff 	.word	0xffbfffff

08003ef4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d112      	bne.n	8003f38 <ADC_Enable+0x44>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d009      	beq.n	8003f34 <ADC_Enable+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d101      	bne.n	8003f38 <ADC_Enable+0x44>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <ADC_Enable+0x46>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d152      	bne.n	8003fe4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <ADC_Enable+0xfc>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00d      	beq.n	8003f66 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	2210      	movs	r2, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e03f      	b.n	8003fe6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	430a      	orrs	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <ADC_Enable+0x100>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <ADC_Enable+0x104>)
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fc f8df 	bl	8000140 <__udivsi3>
 8003f82:	0003      	movs	r3, r0
 8003f84:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f86:	e002      	b.n	8003f8e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f9      	bne.n	8003f88 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f94:	f7ff fcdc 	bl	8003950 <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f9c:	e01b      	b.n	8003fd6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f9e:	f7ff fcd7 	bl	8003950 <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d914      	bls.n	8003fd6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d00d      	beq.n	8003fd6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	2201      	movs	r2, #1
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e007      	b.n	8003fe6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d1dc      	bne.n	8003f9e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b004      	add	sp, #16
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	80000017 	.word	0x80000017
 8003ff4:	20000018 	.word	0x20000018
 8003ff8:	000f4240 	.word	0x000f4240

08003ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	2250      	movs	r2, #80	; 0x50
 8004010:	4013      	ands	r3, r2
 8004012:	d140      	bne.n	8004096 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	0092      	lsls	r2, r2, #2
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	23c0      	movs	r3, #192	; 0xc0
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	4013      	ands	r3, r2
 800402e:	d12d      	bne.n	800408c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004034:	2b00      	cmp	r3, #0
 8004036:	d129      	bne.n	800408c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2208      	movs	r2, #8
 8004040:	4013      	ands	r3, r2
 8004042:	2b08      	cmp	r3, #8
 8004044:	d122      	bne.n	800408c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2204      	movs	r2, #4
 800404e:	4013      	ands	r3, r2
 8004050:	d110      	bne.n	8004074 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	210c      	movs	r1, #12
 800405e:	438a      	bics	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	4a11      	ldr	r2, [pc, #68]	; (80040ac <ADC_DMAConvCplt+0xb0>)
 8004068:	4013      	ands	r3, r2
 800406a:	2201      	movs	r2, #1
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
 8004072:	e00b      	b.n	800408c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	2220      	movs	r2, #32
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	2201      	movs	r2, #1
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0018      	movs	r0, r3
 8004090:	f7fe fbcc 	bl	800282c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004094:	e005      	b.n	80040a2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	0010      	movs	r0, r2
 80040a0:	4798      	blx	r3
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b004      	add	sp, #16
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	fffffefe 	.word	0xfffffefe

080040b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7ff fe11 	bl	8003ce8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bd80      	pop	{r7, pc}

080040ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	2240      	movs	r2, #64	; 0x40
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	2204      	movs	r2, #4
 80040ee:	431a      	orrs	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff fdfe 	bl	8003cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}

08004104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	0002      	movs	r2, r0
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b7f      	cmp	r3, #127	; 0x7f
 8004116:	d809      	bhi.n	800412c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004118:	1dfb      	adds	r3, r7, #7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	001a      	movs	r2, r3
 800411e:	231f      	movs	r3, #31
 8004120:	401a      	ands	r2, r3
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <__NVIC_EnableIRQ+0x30>)
 8004124:	2101      	movs	r1, #1
 8004126:	4091      	lsls	r1, r2
 8004128:	000a      	movs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
  }
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}
 8004134:	e000e100 	.word	0xe000e100

08004138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	0002      	movs	r2, r0
 8004140:	6039      	str	r1, [r7, #0]
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004146:	1dfb      	adds	r3, r7, #7
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b7f      	cmp	r3, #127	; 0x7f
 800414c:	d828      	bhi.n	80041a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800414e:	4a2f      	ldr	r2, [pc, #188]	; (800420c <__NVIC_SetPriority+0xd4>)
 8004150:	1dfb      	adds	r3, r7, #7
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b25b      	sxtb	r3, r3
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	33c0      	adds	r3, #192	; 0xc0
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	589b      	ldr	r3, [r3, r2]
 800415e:	1dfa      	adds	r2, r7, #7
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	0011      	movs	r1, r2
 8004164:	2203      	movs	r2, #3
 8004166:	400a      	ands	r2, r1
 8004168:	00d2      	lsls	r2, r2, #3
 800416a:	21ff      	movs	r1, #255	; 0xff
 800416c:	4091      	lsls	r1, r2
 800416e:	000a      	movs	r2, r1
 8004170:	43d2      	mvns	r2, r2
 8004172:	401a      	ands	r2, r3
 8004174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	22ff      	movs	r2, #255	; 0xff
 800417c:	401a      	ands	r2, r3
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0018      	movs	r0, r3
 8004184:	2303      	movs	r3, #3
 8004186:	4003      	ands	r3, r0
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800418c:	481f      	ldr	r0, [pc, #124]	; (800420c <__NVIC_SetPriority+0xd4>)
 800418e:	1dfb      	adds	r3, r7, #7
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b25b      	sxtb	r3, r3
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	430a      	orrs	r2, r1
 8004198:	33c0      	adds	r3, #192	; 0xc0
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800419e:	e031      	b.n	8004204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041a0:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <__NVIC_SetPriority+0xd8>)
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	0019      	movs	r1, r3
 80041a8:	230f      	movs	r3, #15
 80041aa:	400b      	ands	r3, r1
 80041ac:	3b08      	subs	r3, #8
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3306      	adds	r3, #6
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	18d3      	adds	r3, r2, r3
 80041b6:	3304      	adds	r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1dfa      	adds	r2, r7, #7
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	0011      	movs	r1, r2
 80041c0:	2203      	movs	r2, #3
 80041c2:	400a      	ands	r2, r1
 80041c4:	00d2      	lsls	r2, r2, #3
 80041c6:	21ff      	movs	r1, #255	; 0xff
 80041c8:	4091      	lsls	r1, r2
 80041ca:	000a      	movs	r2, r1
 80041cc:	43d2      	mvns	r2, r2
 80041ce:	401a      	ands	r2, r3
 80041d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	22ff      	movs	r2, #255	; 0xff
 80041d8:	401a      	ands	r2, r3
 80041da:	1dfb      	adds	r3, r7, #7
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	0018      	movs	r0, r3
 80041e0:	2303      	movs	r3, #3
 80041e2:	4003      	ands	r3, r0
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041e8:	4809      	ldr	r0, [pc, #36]	; (8004210 <__NVIC_SetPriority+0xd8>)
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	001c      	movs	r4, r3
 80041f0:	230f      	movs	r3, #15
 80041f2:	4023      	ands	r3, r4
 80041f4:	3b08      	subs	r3, #8
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	430a      	orrs	r2, r1
 80041fa:	3306      	adds	r3, #6
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	18c3      	adds	r3, r0, r3
 8004200:	3304      	adds	r3, #4
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b003      	add	sp, #12
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	e000e100 	.word	0xe000e100
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	045b      	lsls	r3, r3, #17
 8004224:	429a      	cmp	r2, r3
 8004226:	d301      	bcc.n	800422c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004228:	2301      	movs	r3, #1
 800422a:	e010      	b.n	800424e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <SysTick_Config+0x44>)
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	3a01      	subs	r2, #1
 8004232:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004234:	2301      	movs	r3, #1
 8004236:	425b      	negs	r3, r3
 8004238:	2103      	movs	r1, #3
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff ff7c 	bl	8004138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <SysTick_Config+0x44>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <SysTick_Config+0x44>)
 8004248:	2207      	movs	r2, #7
 800424a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800424c:	2300      	movs	r3, #0
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	e000e010 	.word	0xe000e010

0800425c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	210f      	movs	r1, #15
 8004268:	187b      	adds	r3, r7, r1
 800426a:	1c02      	adds	r2, r0, #0
 800426c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	187b      	adds	r3, r7, r1
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b25b      	sxtb	r3, r3
 8004276:	0011      	movs	r1, r2
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff ff5d 	bl	8004138 <__NVIC_SetPriority>
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	0002      	movs	r2, r0
 800428e:	1dfb      	adds	r3, r7, #7
 8004290:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b25b      	sxtb	r3, r3
 8004298:	0018      	movs	r0, r3
 800429a:	f7ff ff33 	bl	8004104 <__NVIC_EnableIRQ>
}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff ffaf 	bl	8004214 <SysTick_Config>
 80042b6:	0003      	movs	r3, r0
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e036      	b.n	8004344 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	2102      	movs	r1, #2
 80042dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_DMA_Init+0x8c>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80042f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 f9c4 	bl	80046b4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2221      	movs	r2, #33	; 0x21
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}
 800434c:	ffffc00f 	.word	0xffffc00f

08004350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2317      	movs	r3, #23
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_DMA_Start_IT+0x24>
 8004370:	2302      	movs	r3, #2
 8004372:	e04f      	b.n	8004414 <HAL_DMA_Start_IT+0xc4>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	2101      	movs	r1, #1
 800437a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	5c9b      	ldrb	r3, [r3, r2]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d13a      	bne.n	80043fe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2221      	movs	r2, #33	; 0x21
 800438c:	2102      	movs	r1, #2
 800438e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	438a      	bics	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f954 	bl	800465a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	210e      	movs	r1, #14
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e00f      	b.n	80043ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	210a      	movs	r1, #10
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2104      	movs	r1, #4
 80043e8:	438a      	bics	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e007      	b.n	800440e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	2100      	movs	r1, #0
 8004404:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004406:	2317      	movs	r3, #23
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	2202      	movs	r2, #2
 800440c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800440e:	2317      	movs	r3, #23
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	781b      	ldrb	r3, [r3, #0]
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b006      	add	sp, #24
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2221      	movs	r2, #33	; 0x21
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d008      	beq.n	8004442 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2204      	movs	r2, #4
 8004434:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e020      	b.n	8004484 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	210e      	movs	r1, #14
 800444e:	438a      	bics	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	438a      	bics	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	2101      	movs	r1, #1
 800446c:	4091      	lsls	r1, r2
 800446e:	000a      	movs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2221      	movs	r2, #33	; 0x21
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	2100      	movs	r1, #0
 8004480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	210f      	movs	r1, #15
 8004496:	187b      	adds	r3, r7, r1
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2221      	movs	r2, #33	; 0x21
 80044a0:	5c9b      	ldrb	r3, [r3, r2]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d006      	beq.n	80044b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e028      	b.n	8004508 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	210e      	movs	r1, #14
 80044c2:	438a      	bics	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	438a      	bics	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2101      	movs	r1, #1
 80044e0:	4091      	lsls	r1, r2
 80044e2:	000a      	movs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2221      	movs	r2, #33	; 0x21
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	0010      	movs	r0, r2
 8004506:	4798      	blx	r3
    }
  }
  return status;
 8004508:	230f      	movs	r3, #15
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	781b      	ldrb	r3, [r3, #0]
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2204      	movs	r2, #4
 8004534:	409a      	lsls	r2, r3
 8004536:	0013      	movs	r3, r2
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4013      	ands	r3, r2
 800453c:	d024      	beq.n	8004588 <HAL_DMA_IRQHandler+0x72>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2204      	movs	r2, #4
 8004542:	4013      	ands	r3, r2
 8004544:	d020      	beq.n	8004588 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2220      	movs	r2, #32
 800454e:	4013      	ands	r3, r2
 8004550:	d107      	bne.n	8004562 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2104      	movs	r1, #4
 800455e:	438a      	bics	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	2104      	movs	r1, #4
 800456c:	4091      	lsls	r1, r2
 800456e:	000a      	movs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d100      	bne.n	800457c <HAL_DMA_IRQHandler+0x66>
 800457a:	e06a      	b.n	8004652 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	0010      	movs	r0, r2
 8004584:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004586:	e064      	b.n	8004652 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	2202      	movs	r2, #2
 800458e:	409a      	lsls	r2, r3
 8004590:	0013      	movs	r3, r2
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4013      	ands	r3, r2
 8004596:	d02b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xda>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2202      	movs	r2, #2
 800459c:	4013      	ands	r3, r2
 800459e:	d027      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2220      	movs	r2, #32
 80045a8:	4013      	ands	r3, r2
 80045aa:	d10b      	bne.n	80045c4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	210a      	movs	r1, #10
 80045b8:	438a      	bics	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2221      	movs	r2, #33	; 0x21
 80045c0:	2101      	movs	r1, #1
 80045c2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	2102      	movs	r1, #2
 80045ce:	4091      	lsls	r1, r2
 80045d0:	000a      	movs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	2100      	movs	r1, #0
 80045da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d036      	beq.n	8004652 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	0010      	movs	r0, r2
 80045ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045ee:	e030      	b.n	8004652 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2208      	movs	r2, #8
 80045f6:	409a      	lsls	r2, r3
 80045f8:	0013      	movs	r3, r2
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4013      	ands	r3, r2
 80045fe:	d028      	beq.n	8004652 <HAL_DMA_IRQHandler+0x13c>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2208      	movs	r2, #8
 8004604:	4013      	ands	r3, r2
 8004606:	d024      	beq.n	8004652 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	210e      	movs	r1, #14
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	2101      	movs	r1, #1
 8004622:	4091      	lsls	r1, r2
 8004624:	000a      	movs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2221      	movs	r2, #33	; 0x21
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	2100      	movs	r1, #0
 800463c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	0010      	movs	r0, r2
 800464e:	4798      	blx	r3
    }
  }
}
 8004650:	e7ff      	b.n	8004652 <HAL_DMA_IRQHandler+0x13c>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b004      	add	sp, #16
 8004658:	bd80      	pop	{r7, pc}

0800465a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2101      	movs	r1, #1
 8004672:	4091      	lsls	r1, r2
 8004674:	000a      	movs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b10      	cmp	r3, #16
 8004686:	d108      	bne.n	800469a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004698:	e007      	b.n	80046aa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	60da      	str	r2, [r3, #12]
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <DMA_CalcBaseAndBitshift+0x30>)
 80046c2:	4694      	mov	ip, r2
 80046c4:	4463      	add	r3, ip
 80046c6:	2114      	movs	r1, #20
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fb fd39 	bl	8000140 <__udivsi3>
 80046ce:	0003      	movs	r3, r0
 80046d0:	009a      	lsls	r2, r3, #2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a03      	ldr	r2, [pc, #12]	; (80046e8 <DMA_CalcBaseAndBitshift+0x34>)
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	bffdfff8 	.word	0xbffdfff8
 80046e8:	40020000 	.word	0x40020000

080046ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fa:	e14f      	b.n	800499c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2101      	movs	r1, #1
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4091      	lsls	r1, r2
 8004706:	000a      	movs	r2, r1
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d100      	bne.n	8004714 <HAL_GPIO_Init+0x28>
 8004712:	e140      	b.n	8004996 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2203      	movs	r2, #3
 800471a:	4013      	ands	r3, r2
 800471c:	2b01      	cmp	r3, #1
 800471e:	d005      	beq.n	800472c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004728:	2b02      	cmp	r3, #2
 800472a:	d130      	bne.n	800478e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2203      	movs	r2, #3
 8004738:	409a      	lsls	r2, r3
 800473a:	0013      	movs	r3, r2
 800473c:	43da      	mvns	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004762:	2201      	movs	r2, #1
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	409a      	lsls	r2, r3
 8004768:	0013      	movs	r3, r2
 800476a:	43da      	mvns	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	2201      	movs	r2, #1
 800477a:	401a      	ands	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	409a      	lsls	r2, r3
 8004780:	0013      	movs	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2203      	movs	r2, #3
 8004794:	4013      	ands	r3, r2
 8004796:	2b03      	cmp	r3, #3
 8004798:	d017      	beq.n	80047ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	409a      	lsls	r2, r3
 80047a8:	0013      	movs	r3, r2
 80047aa:	43da      	mvns	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	0013      	movs	r3, r2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d123      	bne.n	800481e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	08da      	lsrs	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3208      	adds	r2, #8
 80047de:	0092      	lsls	r2, r2, #2
 80047e0:	58d3      	ldr	r3, [r2, r3]
 80047e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2207      	movs	r2, #7
 80047e8:	4013      	ands	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	220f      	movs	r2, #15
 80047ee:	409a      	lsls	r2, r3
 80047f0:	0013      	movs	r3, r2
 80047f2:	43da      	mvns	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4013      	ands	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2107      	movs	r1, #7
 8004802:	400b      	ands	r3, r1
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	409a      	lsls	r2, r3
 8004808:	0013      	movs	r3, r2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	08da      	lsrs	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3208      	adds	r2, #8
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	6939      	ldr	r1, [r7, #16]
 800481c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	2203      	movs	r2, #3
 800482a:	409a      	lsls	r2, r3
 800482c:	0013      	movs	r3, r2
 800482e:	43da      	mvns	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2203      	movs	r2, #3
 800483c:	401a      	ands	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	409a      	lsls	r2, r3
 8004844:	0013      	movs	r3, r2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	23c0      	movs	r3, #192	; 0xc0
 8004858:	029b      	lsls	r3, r3, #10
 800485a:	4013      	ands	r3, r2
 800485c:	d100      	bne.n	8004860 <HAL_GPIO_Init+0x174>
 800485e:	e09a      	b.n	8004996 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004860:	4b54      	ldr	r3, [pc, #336]	; (80049b4 <HAL_GPIO_Init+0x2c8>)
 8004862:	699a      	ldr	r2, [r3, #24]
 8004864:	4b53      	ldr	r3, [pc, #332]	; (80049b4 <HAL_GPIO_Init+0x2c8>)
 8004866:	2101      	movs	r1, #1
 8004868:	430a      	orrs	r2, r1
 800486a:	619a      	str	r2, [r3, #24]
 800486c:	4b51      	ldr	r3, [pc, #324]	; (80049b4 <HAL_GPIO_Init+0x2c8>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004878:	4a4f      	ldr	r2, [pc, #316]	; (80049b8 <HAL_GPIO_Init+0x2cc>)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	3302      	adds	r3, #2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	589b      	ldr	r3, [r3, r2]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2203      	movs	r2, #3
 800488a:	4013      	ands	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	220f      	movs	r2, #15
 8004890:	409a      	lsls	r2, r3
 8004892:	0013      	movs	r3, r2
 8004894:	43da      	mvns	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	2390      	movs	r3, #144	; 0x90
 80048a0:	05db      	lsls	r3, r3, #23
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d013      	beq.n	80048ce <HAL_GPIO_Init+0x1e2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a44      	ldr	r2, [pc, #272]	; (80049bc <HAL_GPIO_Init+0x2d0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_GPIO_Init+0x1de>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a43      	ldr	r2, [pc, #268]	; (80049c0 <HAL_GPIO_Init+0x2d4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x1da>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a42      	ldr	r2, [pc, #264]	; (80049c4 <HAL_GPIO_Init+0x2d8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_GPIO_Init+0x1d6>
 80048be:	2303      	movs	r3, #3
 80048c0:	e006      	b.n	80048d0 <HAL_GPIO_Init+0x1e4>
 80048c2:	2305      	movs	r3, #5
 80048c4:	e004      	b.n	80048d0 <HAL_GPIO_Init+0x1e4>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e002      	b.n	80048d0 <HAL_GPIO_Init+0x1e4>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_GPIO_Init+0x1e4>
 80048ce:	2300      	movs	r3, #0
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	2103      	movs	r1, #3
 80048d4:	400a      	ands	r2, r1
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	4093      	lsls	r3, r2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048e0:	4935      	ldr	r1, [pc, #212]	; (80049b8 <HAL_GPIO_Init+0x2cc>)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	3302      	adds	r3, #2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43da      	mvns	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	035b      	lsls	r3, r3, #13
 8004906:	4013      	ands	r3, r2
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	43da      	mvns	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	039b      	lsls	r3, r3, #14
 8004930:	4013      	ands	r3, r2
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43da      	mvns	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	029b      	lsls	r3, r3, #10
 800495a:	4013      	ands	r3, r2
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800496c:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	43da      	mvns	r2, r3
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	4013      	ands	r3, r2
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <HAL_GPIO_Init+0x2dc>)
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3301      	adds	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	40da      	lsrs	r2, r3
 80049a4:	1e13      	subs	r3, r2, #0
 80049a6:	d000      	beq.n	80049aa <HAL_GPIO_Init+0x2be>
 80049a8:	e6a8      	b.n	80046fc <HAL_GPIO_Init+0x10>
  } 
}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b006      	add	sp, #24
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40010000 	.word	0x40010000
 80049bc:	48000400 	.word	0x48000400
 80049c0:	48000800 	.word	0x48000800
 80049c4:	48000c00 	.word	0x48000c00
 80049c8:	40010400 	.word	0x40010400

080049cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	0008      	movs	r0, r1
 80049d6:	0011      	movs	r1, r2
 80049d8:	1cbb      	adds	r3, r7, #2
 80049da:	1c02      	adds	r2, r0, #0
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	1c7b      	adds	r3, r7, #1
 80049e0:	1c0a      	adds	r2, r1, #0
 80049e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049e4:	1c7b      	adds	r3, r7, #1
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ec:	1cbb      	adds	r3, r7, #2
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049f4:	e003      	b.n	80049fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049f6:	1cbb      	adds	r3, r7, #2
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b002      	add	sp, #8
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	000a      	movs	r2, r1
 8004a10:	1cbb      	adds	r3, r7, #2
 8004a12:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a1a:	1cbb      	adds	r3, r7, #2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	041a      	lsls	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	1cb9      	adds	r1, r7, #2
 8004a2a:	8809      	ldrh	r1, [r1, #0]
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e301      	b.n	8005052 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	4013      	ands	r3, r2
 8004a56:	d100      	bne.n	8004a5a <HAL_RCC_OscConfig+0x1e>
 8004a58:	e08d      	b.n	8004b76 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a5a:	4bc3      	ldr	r3, [pc, #780]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	220c      	movs	r2, #12
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d00e      	beq.n	8004a84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a66:	4bc0      	ldr	r3, [pc, #768]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d116      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x64>
 8004a72:	4bbd      	ldr	r3, [pc, #756]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	025b      	lsls	r3, r3, #9
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4bb8      	ldr	r3, [pc, #736]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <HAL_RCC_OscConfig+0x56>
 8004a90:	e070      	b.n	8004b74 <HAL_RCC_OscConfig+0x138>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d000      	beq.n	8004a9c <HAL_RCC_OscConfig+0x60>
 8004a9a:	e06b      	b.n	8004b74 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e2d8      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x7c>
 8004aa8:	4baf      	ldr	r3, [pc, #700]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4bae      	ldr	r3, [pc, #696]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	0249      	lsls	r1, r1, #9
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e02f      	b.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10c      	bne.n	8004ada <HAL_RCC_OscConfig+0x9e>
 8004ac0:	4ba9      	ldr	r3, [pc, #676]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4ba8      	ldr	r3, [pc, #672]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ac6:	49a9      	ldr	r1, [pc, #676]	; (8004d6c <HAL_RCC_OscConfig+0x330>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	4ba6      	ldr	r3, [pc, #664]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4ba5      	ldr	r3, [pc, #660]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	49a7      	ldr	r1, [pc, #668]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e01e      	b.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d10e      	bne.n	8004b00 <HAL_RCC_OscConfig+0xc4>
 8004ae2:	4ba1      	ldr	r3, [pc, #644]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	02c9      	lsls	r1, r1, #11
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b9c      	ldr	r3, [pc, #624]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	0249      	lsls	r1, r1, #9
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004b00:	4b99      	ldr	r3, [pc, #612]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b98      	ldr	r3, [pc, #608]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b06:	4999      	ldr	r1, [pc, #612]	; (8004d6c <HAL_RCC_OscConfig+0x330>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	4b96      	ldr	r3, [pc, #600]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b95      	ldr	r3, [pc, #596]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b12:	4997      	ldr	r1, [pc, #604]	; (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d014      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fe ff16 	bl	8003950 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2a:	f7fe ff11 	bl	8003950 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e28a      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3c:	4b8a      	ldr	r3, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0xee>
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7fe ff01 	bl	8003950 <HAL_GetTick>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fe fefc 	bl	8003950 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e275      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	4b80      	ldr	r3, [pc, #512]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x118>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <HAL_RCC_OscConfig+0x146>
 8004b80:	e069      	b.n	8004c56 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b82:	4b79      	ldr	r3, [pc, #484]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	220c      	movs	r2, #12
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b8c:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	220c      	movs	r2, #12
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d11c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x196>
 8004b98:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	025b      	lsls	r3, r3, #9
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d116      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba4:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	4013      	ands	r3, r2
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x17e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e24b      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b6b      	ldr	r3, [pc, #428]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	22f8      	movs	r2, #248	; 0xf8
 8004bc0:	4393      	bics	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	00da      	lsls	r2, r3, #3
 8004bca:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd0:	e041      	b.n	8004c56 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d024      	beq.n	8004c24 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004be0:	2101      	movs	r1, #1
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fe feb3 	bl	8003950 <HAL_GetTick>
 8004bea:	0003      	movs	r3, r0
 8004bec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7fe feae 	bl	8003950 <HAL_GetTick>
 8004bf4:	0002      	movs	r2, r0
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e227      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2202      	movs	r2, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d0f1      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0c:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	22f8      	movs	r2, #248	; 0xf8
 8004c12:	4393      	bics	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00da      	lsls	r2, r3, #3
 8004c1c:	4b52      	ldr	r3, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e018      	b.n	8004c56 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c24:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b4f      	ldr	r3, [pc, #316]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	438a      	bics	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe fe8e 	bl	8003950 <HAL_GetTick>
 8004c34:	0003      	movs	r3, r0
 8004c36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fe fe89 	bl	8003950 <HAL_GetTick>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e202      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2202      	movs	r2, #2
 8004c52:	4013      	ands	r3, r2
 8004c54:	d1f1      	bne.n	8004c3a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d036      	beq.n	8004cce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d019      	beq.n	8004c9c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c68:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c6e:	2101      	movs	r1, #1
 8004c70:	430a      	orrs	r2, r1
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c74:	f7fe fe6c 	bl	8003950 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fe67 	bl	8003950 <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1e0      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2202      	movs	r2, #2
 8004c96:	4013      	ands	r3, r2
 8004c98:	d0f1      	beq.n	8004c7e <HAL_RCC_OscConfig+0x242>
 8004c9a:	e018      	b.n	8004cce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca0:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca8:	f7fe fe52 	bl	8003950 <HAL_GetTick>
 8004cac:	0003      	movs	r3, r0
 8004cae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fe fe4d 	bl	8003950 <HAL_GetTick>
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1c6      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d1f1      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d100      	bne.n	8004cda <HAL_RCC_OscConfig+0x29e>
 8004cd8:	e0b4      	b.n	8004e44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	201f      	movs	r0, #31
 8004cdc:	183b      	adds	r3, r7, r0
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	055b      	lsls	r3, r3, #21
 8004cea:	4013      	ands	r3, r2
 8004cec:	d110      	bne.n	8004d10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cee:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	0549      	lsls	r1, r1, #21
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	61da      	str	r2, [r3, #28]
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	055b      	lsls	r3, r3, #21
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d0a:	183b      	adds	r3, r7, r0
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d11a      	bne.n	8004d52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1c:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	0049      	lsls	r1, r1, #1
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fe11 	bl	8003950 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d34:	f7fe fe0c 	bl	8003950 <HAL_GetTick>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b64      	cmp	r3, #100	; 0x64
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e185      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10e      	bne.n	8004d78 <HAL_RCC_OscConfig+0x33c>
 8004d5a:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004d60:	2101      	movs	r1, #1
 8004d62:	430a      	orrs	r2, r1
 8004d64:	621a      	str	r2, [r3, #32]
 8004d66:	e035      	b.n	8004dd4 <HAL_RCC_OscConfig+0x398>
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	fffeffff 	.word	0xfffeffff
 8004d70:	fffbffff 	.word	0xfffbffff
 8004d74:	40007000 	.word	0x40007000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x35e>
 8004d80:	4bb6      	ldr	r3, [pc, #728]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	4bb5      	ldr	r3, [pc, #724]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004d86:	2101      	movs	r1, #1
 8004d88:	438a      	bics	r2, r1
 8004d8a:	621a      	str	r2, [r3, #32]
 8004d8c:	4bb3      	ldr	r3, [pc, #716]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	4bb2      	ldr	r3, [pc, #712]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004d92:	2104      	movs	r1, #4
 8004d94:	438a      	bics	r2, r1
 8004d96:	621a      	str	r2, [r3, #32]
 8004d98:	e01c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x398>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x380>
 8004da2:	4bae      	ldr	r3, [pc, #696]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	4bad      	ldr	r3, [pc, #692]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004da8:	2104      	movs	r1, #4
 8004daa:	430a      	orrs	r2, r1
 8004dac:	621a      	str	r2, [r3, #32]
 8004dae:	4bab      	ldr	r3, [pc, #684]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004db0:	6a1a      	ldr	r2, [r3, #32]
 8004db2:	4baa      	ldr	r3, [pc, #680]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004db4:	2101      	movs	r1, #1
 8004db6:	430a      	orrs	r2, r1
 8004db8:	621a      	str	r2, [r3, #32]
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x398>
 8004dbc:	4ba7      	ldr	r3, [pc, #668]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	4ba6      	ldr	r3, [pc, #664]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	621a      	str	r2, [r3, #32]
 8004dc8:	4ba4      	ldr	r3, [pc, #656]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	4ba3      	ldr	r3, [pc, #652]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004dce:	2104      	movs	r1, #4
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d014      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ddc:	f7fe fdb8 	bl	8003950 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	e009      	b.n	8004dfa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fe fdb3 	bl	8003950 <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	4a9b      	ldr	r2, [pc, #620]	; (8005060 <HAL_RCC_OscConfig+0x624>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e12b      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	4b98      	ldr	r3, [pc, #608]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3aa>
 8004e04:	e013      	b.n	8004e2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e06:	f7fe fda3 	bl	8003950 <HAL_GetTick>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	e009      	b.n	8004e24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fe fd9e 	bl	8003950 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	4a91      	ldr	r2, [pc, #580]	; (8005060 <HAL_RCC_OscConfig+0x624>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e116      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	4b8d      	ldr	r3, [pc, #564]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e2e:	231f      	movs	r3, #31
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b88      	ldr	r3, [pc, #544]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	4b87      	ldr	r3, [pc, #540]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e3e:	4989      	ldr	r1, [pc, #548]	; (8005064 <HAL_RCC_OscConfig+0x628>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2210      	movs	r2, #16
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d063      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d12a      	bne.n	8004eac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e56:	4b81      	ldr	r3, [pc, #516]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5a:	4b80      	ldr	r3, [pc, #512]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e62:	4b7e      	ldr	r3, [pc, #504]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e66:	4b7d      	ldr	r3, [pc, #500]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e68:	2101      	movs	r1, #1
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6e:	f7fe fd6f 	bl	8003950 <HAL_GetTick>
 8004e72:	0003      	movs	r3, r0
 8004e74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e78:	f7fe fd6a 	bl	8003950 <HAL_GetTick>
 8004e7c:	0002      	movs	r2, r0
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e0e3      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e8a:	4b74      	ldr	r3, [pc, #464]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	2202      	movs	r2, #2
 8004e90:	4013      	ands	r3, r2
 8004e92:	d0f1      	beq.n	8004e78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e94:	4b71      	ldr	r3, [pc, #452]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	22f8      	movs	r2, #248	; 0xf8
 8004e9a:	4393      	bics	r3, r2
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	00da      	lsls	r2, r3, #3
 8004ea4:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8004eaa:	e034      	b.n	8004f16 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	3305      	adds	r3, #5
 8004eb2:	d111      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004eb4:	4b69      	ldr	r3, [pc, #420]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004eba:	2104      	movs	r1, #4
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ec0:	4b66      	ldr	r3, [pc, #408]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	22f8      	movs	r2, #248	; 0xf8
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	00da      	lsls	r2, r3, #3
 8004ed0:	4b62      	ldr	r3, [pc, #392]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed6:	e01e      	b.n	8004f16 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ed8:	4b60      	ldr	r3, [pc, #384]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004edc:	4b5f      	ldr	r3, [pc, #380]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004ede:	2104      	movs	r1, #4
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ee4:	4b5d      	ldr	r3, [pc, #372]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	4b5c      	ldr	r3, [pc, #368]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004eea:	2101      	movs	r1, #1
 8004eec:	438a      	bics	r2, r1
 8004eee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7fe fd2e 	bl	8003950 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004efa:	f7fe fd29 	bl	8003950 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e0a2      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d1f1      	bne.n	8004efa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d100      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4e4>
 8004f1e:	e097      	b.n	8005050 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f20:	4b4e      	ldr	r3, [pc, #312]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	220c      	movs	r2, #12
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d100      	bne.n	8004f2e <HAL_RCC_OscConfig+0x4f2>
 8004f2c:	e06b      	b.n	8005006 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d14c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b49      	ldr	r3, [pc, #292]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b48      	ldr	r3, [pc, #288]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f3c:	494a      	ldr	r1, [pc, #296]	; (8005068 <HAL_RCC_OscConfig+0x62c>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fe fd05 	bl	8003950 <HAL_GetTick>
 8004f46:	0003      	movs	r3, r0
 8004f48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe fd00 	bl	8003950 <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e079      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5e:	4b3f      	ldr	r3, [pc, #252]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	049b      	lsls	r3, r3, #18
 8004f66:	4013      	ands	r3, r2
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	220f      	movs	r2, #15
 8004f70:	4393      	bics	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f7e:	4b37      	ldr	r3, [pc, #220]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a3a      	ldr	r2, [pc, #232]	; (800506c <HAL_RCC_OscConfig+0x630>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	431a      	orrs	r2, r3
 8004f92:	4b32      	ldr	r3, [pc, #200]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b30      	ldr	r3, [pc, #192]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	0449      	lsls	r1, r1, #17
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fe fcd3 	bl	8003950 <HAL_GetTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe fcce 	bl	8003950 <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e047      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	049b      	lsls	r3, r3, #18
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x574>
 8004fce:	e03f      	b.n	8005050 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004fd6:	4924      	ldr	r1, [pc, #144]	; (8005068 <HAL_RCC_OscConfig+0x62c>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fcb8 	bl	8003950 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe6:	f7fe fcb3 	bl	8003950 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e02c      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	049b      	lsls	r3, r3, #18
 8005000:	4013      	ands	r3, r2
 8005002:	d1f0      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5aa>
 8005004:	e024      	b.n	8005050 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e01f      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_RCC_OscConfig+0x620>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005018:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_RCC_OscConfig+0x620>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	025b      	lsls	r3, r3, #9
 8005024:	401a      	ands	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	429a      	cmp	r2, r3
 800502c:	d10e      	bne.n	800504c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	220f      	movs	r2, #15
 8005032:	401a      	ands	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d107      	bne.n	800504c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	23f0      	movs	r3, #240	; 0xf0
 8005040:	039b      	lsls	r3, r3, #14
 8005042:	401a      	ands	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b008      	add	sp, #32
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	40021000 	.word	0x40021000
 8005060:	00001388 	.word	0x00001388
 8005064:	efffffff 	.word	0xefffffff
 8005068:	feffffff 	.word	0xfeffffff
 800506c:	ffc2ffff 	.word	0xffc2ffff

08005070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0b3      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005084:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	4013      	ands	r3, r2
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d911      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b58      	ldr	r3, [pc, #352]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	4393      	bics	r3, r2
 800509a:	0019      	movs	r1, r3
 800509c:	4b55      	ldr	r3, [pc, #340]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a4:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	4013      	ands	r3, r2
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e09a      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2202      	movs	r2, #2
 80050bc:	4013      	ands	r3, r2
 80050be:	d015      	beq.n	80050ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2204      	movs	r2, #4
 80050c6:	4013      	ands	r3, r2
 80050c8:	d006      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050ca:	4b4b      	ldr	r3, [pc, #300]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80050d0:	21e0      	movs	r1, #224	; 0xe0
 80050d2:	00c9      	lsls	r1, r1, #3
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	22f0      	movs	r2, #240	; 0xf0
 80050de:	4393      	bics	r3, r2
 80050e0:	0019      	movs	r1, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	4b44      	ldr	r3, [pc, #272]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	d040      	beq.n	8005178 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	4013      	ands	r3, r2
 8005108:	d114      	bne.n	8005134 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06e      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	049b      	lsls	r3, r3, #18
 800511e:	4013      	ands	r3, r2
 8005120:	d108      	bne.n	8005134 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e062      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005126:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2202      	movs	r2, #2
 800512c:	4013      	ands	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e05b      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005134:	4b30      	ldr	r3, [pc, #192]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2203      	movs	r2, #3
 800513a:	4393      	bics	r3, r2
 800513c:	0019      	movs	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005148:	f7fe fc02 	bl	8003950 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005150:	e009      	b.n	8005166 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005152:	f7fe fbfd 	bl	8003950 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	4a27      	ldr	r2, [pc, #156]	; (80051fc <HAL_RCC_ClockConfig+0x18c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e042      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	220c      	movs	r2, #12
 800516c:	401a      	ands	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1ec      	bne.n	8005152 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	4013      	ands	r3, r2
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d211      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	4393      	bics	r3, r2
 800518e:	0019      	movs	r1, r3
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2201      	movs	r2, #1
 800519e:	4013      	ands	r3, r2
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e020      	b.n	80051ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2204      	movs	r2, #4
 80051b0:	4013      	ands	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a11      	ldr	r2, [pc, #68]	; (8005200 <HAL_RCC_ClockConfig+0x190>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	0019      	movs	r1, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80051c8:	f000 f820 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051cc:	0001      	movs	r1, r0
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	220f      	movs	r2, #15
 80051d6:	4013      	ands	r3, r2
 80051d8:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <HAL_RCC_ClockConfig+0x194>)
 80051da:	5cd3      	ldrb	r3, [r2, r3]
 80051dc:	000a      	movs	r2, r1
 80051de:	40da      	lsrs	r2, r3
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x198>)
 80051e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80051e4:	2003      	movs	r0, #3
 80051e6:	f7fe fb6d 	bl	80038c4 <HAL_InitTick>
  
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b004      	add	sp, #16
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40021000 	.word	0x40021000
 80051fc:	00001388 	.word	0x00001388
 8005200:	fffff8ff 	.word	0xfffff8ff
 8005204:	0800ca30 	.word	0x0800ca30
 8005208:	20000018 	.word	0x20000018

0800520c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005226:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	220c      	movs	r2, #12
 8005230:	4013      	ands	r3, r2
 8005232:	2b04      	cmp	r3, #4
 8005234:	d002      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0x30>
 8005236:	2b08      	cmp	r3, #8
 8005238:	d003      	beq.n	8005242 <HAL_RCC_GetSysClockFreq+0x36>
 800523a:	e02c      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800523c:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800523e:	613b      	str	r3, [r7, #16]
      break;
 8005240:	e02c      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	0c9b      	lsrs	r3, r3, #18
 8005246:	220f      	movs	r2, #15
 8005248:	4013      	ands	r3, r2
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800524c:	5cd3      	ldrb	r3, [r2, r3]
 800524e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005250:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	220f      	movs	r2, #15
 8005256:	4013      	ands	r3, r2
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	025b      	lsls	r3, r3, #9
 8005264:	4013      	ands	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4810      	ldr	r0, [pc, #64]	; (80052ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800526c:	f7fa ff68 	bl	8000140 <__udivsi3>
 8005270:	0003      	movs	r3, r0
 8005272:	001a      	movs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4353      	muls	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e009      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	000a      	movs	r2, r1
 8005280:	0152      	lsls	r2, r2, #5
 8005282:	1a52      	subs	r2, r2, r1
 8005284:	0193      	lsls	r3, r2, #6
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	185b      	adds	r3, r3, r1
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	613b      	str	r3, [r7, #16]
      break;
 8005294:	e002      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005298:	613b      	str	r3, [r7, #16]
      break;
 800529a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800529c:	693b      	ldr	r3, [r7, #16]
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b006      	add	sp, #24
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	40021000 	.word	0x40021000
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	0800ca48 	.word	0x0800ca48
 80052b4:	0800ca58 	.word	0x0800ca58

080052b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052bc:	4b02      	ldr	r3, [pc, #8]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052be:	681b      	ldr	r3, [r3, #0]
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	20000018 	.word	0x20000018

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80052d0:	f7ff fff2 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 80052d4:	0001      	movs	r1, r0
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	2207      	movs	r2, #7
 80052de:	4013      	ands	r3, r2
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e2:	5cd3      	ldrb	r3, [r2, r3]
 80052e4:	40d9      	lsrs	r1, r3
 80052e6:	000b      	movs	r3, r1
}    
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	40021000 	.word	0x40021000
 80052f4:	0800ca40 	.word	0x0800ca40

080052f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	2380      	movs	r3, #128	; 0x80
 800530e:	025b      	lsls	r3, r3, #9
 8005310:	4013      	ands	r3, r2
 8005312:	d100      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005314:	e08e      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2017      	movs	r0, #23
 8005318:	183b      	adds	r3, r7, r0
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531e:	4b57      	ldr	r3, [pc, #348]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	055b      	lsls	r3, r3, #21
 8005326:	4013      	ands	r3, r2
 8005328:	d110      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	4b54      	ldr	r3, [pc, #336]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	4b53      	ldr	r3, [pc, #332]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	0549      	lsls	r1, r1, #21
 8005334:	430a      	orrs	r2, r1
 8005336:	61da      	str	r2, [r3, #28]
 8005338:	4b50      	ldr	r3, [pc, #320]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	055b      	lsls	r3, r3, #21
 8005340:	4013      	ands	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005346:	183b      	adds	r3, r7, r0
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534c:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4013      	ands	r3, r2
 8005356:	d11a      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005358:	4b49      	ldr	r3, [pc, #292]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b48      	ldr	r3, [pc, #288]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	0049      	lsls	r1, r1, #1
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fe faf3 	bl	8003950 <HAL_GetTick>
 800536a:	0003      	movs	r3, r0
 800536c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fe faee 	bl	8003950 <HAL_GetTick>
 8005374:	0002      	movs	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e077      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4013      	ands	r3, r2
 800538c:	d0f0      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800538e:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	23c0      	movs	r3, #192	; 0xc0
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4013      	ands	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d034      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	23c0      	movs	r3, #192	; 0xc0
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d02c      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053b0:	4b32      	ldr	r3, [pc, #200]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	4a33      	ldr	r2, [pc, #204]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ba:	4b30      	ldr	r3, [pc, #192]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	4b2f      	ldr	r3, [pc, #188]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	0249      	lsls	r1, r1, #9
 80053c4:	430a      	orrs	r2, r1
 80053c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053c8:	4b2c      	ldr	r3, [pc, #176]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	4b2b      	ldr	r3, [pc, #172]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053ce:	492e      	ldr	r1, [pc, #184]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80053d0:	400a      	ands	r2, r1
 80053d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053d4:	4b29      	ldr	r3, [pc, #164]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	4013      	ands	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fe fab5 	bl	8003950 <HAL_GetTick>
 80053e6:	0003      	movs	r3, r0
 80053e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	e009      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fe fab0 	bl	8003950 <HAL_GetTick>
 80053f0:	0002      	movs	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	4a25      	ldr	r2, [pc, #148]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e038      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005400:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	2202      	movs	r2, #2
 8005406:	4013      	ands	r3, r2
 8005408:	d0f0      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540a:	4b1c      	ldr	r3, [pc, #112]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4b18      	ldr	r3, [pc, #96]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800541a:	430a      	orrs	r2, r1
 800541c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800541e:	2317      	movs	r3, #23
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d105      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005428:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	4b13      	ldr	r3, [pc, #76]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800542e:	4918      	ldr	r1, [pc, #96]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005430:	400a      	ands	r2, r1
 8005432:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	4013      	ands	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	2203      	movs	r2, #3
 8005444:	4393      	bics	r3, r2
 8005446:	0019      	movs	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800544e:	430a      	orrs	r2, r1
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2220      	movs	r2, #32
 8005458:	4013      	ands	r3, r2
 800545a:	d009      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545c:	4b07      	ldr	r3, [pc, #28]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	2210      	movs	r2, #16
 8005462:	4393      	bics	r3, r2
 8005464:	0019      	movs	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	4b04      	ldr	r3, [pc, #16]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800546c:	430a      	orrs	r2, r1
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b006      	add	sp, #24
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	40021000 	.word	0x40021000
 8005480:	40007000 	.word	0x40007000
 8005484:	fffffcff 	.word	0xfffffcff
 8005488:	fffeffff 	.word	0xfffeffff
 800548c:	00001388 	.word	0x00001388
 8005490:	efffffff 	.word	0xefffffff

08005494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e042      	b.n	800552c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	223d      	movs	r2, #61	; 0x3d
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	223c      	movs	r2, #60	; 0x3c
 80054b6:	2100      	movs	r1, #0
 80054b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7fd fffd 	bl	80034bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	223d      	movs	r2, #61	; 0x3d
 80054c6:	2102      	movs	r1, #2
 80054c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	0019      	movs	r1, r3
 80054d4:	0010      	movs	r0, r2
 80054d6:	f000 fdf3 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2246      	movs	r2, #70	; 0x46
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223e      	movs	r2, #62	; 0x3e
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	223f      	movs	r2, #63	; 0x3f
 80054ee:	2101      	movs	r1, #1
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2241      	movs	r2, #65	; 0x41
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2242      	movs	r2, #66	; 0x42
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2243      	movs	r2, #67	; 0x43
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2244      	movs	r2, #68	; 0x44
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2245      	movs	r2, #69	; 0x45
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223d      	movs	r2, #61	; 0x3d
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	223d      	movs	r2, #61	; 0x3d
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e035      	b.n	80055b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223d      	movs	r2, #61	; 0x3d
 8005550:	2102      	movs	r1, #2
 8005552:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2101      	movs	r1, #1
 8005560:	430a      	orrs	r2, r1
 8005562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <HAL_TIM_Base_Start_IT+0x8c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x4e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <HAL_TIM_Base_Start_IT+0x90>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x4e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <HAL_TIM_Base_Start_IT+0x94>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d111      	bne.n	80055a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2207      	movs	r2, #7
 800558a:	4013      	ands	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b06      	cmp	r3, #6
 8005592:	d010      	beq.n	80055b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	e007      	b.n	80055b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b004      	add	sp, #16
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40014000 	.word	0x40014000

080055cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	438a      	bics	r2, r1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <HAL_TIM_Base_Stop_IT+0x54>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	d10d      	bne.n	800560c <HAL_TIM_Base_Stop_IT+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <HAL_TIM_Base_Stop_IT+0x58>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	d107      	bne.n	800560c <HAL_TIM_Base_Stop_IT+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2101      	movs	r1, #1
 8005608:	438a      	bics	r2, r1
 800560a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	223d      	movs	r2, #61	; 0x3d
 8005610:	2101      	movs	r1, #1
 8005612:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b002      	add	sp, #8
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	00001111 	.word	0x00001111
 8005624:	00000444 	.word	0x00000444

08005628 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e042      	b.n	80056c0 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223d      	movs	r2, #61	; 0x3d
 800563e:	5c9b      	ldrb	r3, [r3, r2]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223c      	movs	r2, #60	; 0x3c
 800564a:	2100      	movs	r1, #0
 800564c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0018      	movs	r0, r3
 8005652:	f000 f839 	bl	80056c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	223d      	movs	r2, #61	; 0x3d
 800565a:	2102      	movs	r1, #2
 800565c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	0019      	movs	r1, r3
 8005668:	0010      	movs	r0, r2
 800566a:	f000 fd29 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2246      	movs	r2, #70	; 0x46
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	223e      	movs	r2, #62	; 0x3e
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	223f      	movs	r2, #63	; 0x3f
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2240      	movs	r2, #64	; 0x40
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2241      	movs	r2, #65	; 0x41
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2242      	movs	r2, #66	; 0x42
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2243      	movs	r2, #67	; 0x43
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2244      	movs	r2, #68	; 0x44
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2245      	movs	r2, #69	; 0x45
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	223d      	movs	r2, #61	; 0x3d
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b002      	add	sp, #8
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e042      	b.n	8005770 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	223d      	movs	r2, #61	; 0x3d
 80056ee:	5c9b      	ldrb	r3, [r3, r2]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	223c      	movs	r2, #60	; 0x3c
 80056fa:	2100      	movs	r1, #0
 80056fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f839 	bl	8005778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	223d      	movs	r2, #61	; 0x3d
 800570a:	2102      	movs	r1, #2
 800570c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3304      	adds	r3, #4
 8005716:	0019      	movs	r1, r3
 8005718:	0010      	movs	r0, r2
 800571a:	f000 fcd1 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2246      	movs	r2, #70	; 0x46
 8005722:	2101      	movs	r1, #1
 8005724:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	223e      	movs	r2, #62	; 0x3e
 800572a:	2101      	movs	r1, #1
 800572c:	5499      	strb	r1, [r3, r2]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	223f      	movs	r2, #63	; 0x3f
 8005732:	2101      	movs	r1, #1
 8005734:	5499      	strb	r1, [r3, r2]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2241      	movs	r2, #65	; 0x41
 8005742:	2101      	movs	r1, #1
 8005744:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2242      	movs	r2, #66	; 0x42
 800574a:	2101      	movs	r1, #1
 800574c:	5499      	strb	r1, [r3, r2]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2243      	movs	r2, #67	; 0x43
 8005752:	2101      	movs	r1, #1
 8005754:	5499      	strb	r1, [r3, r2]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2244      	movs	r2, #68	; 0x44
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2245      	movs	r2, #69	; 0x45
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223d      	movs	r2, #61	; 0x3d
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	b002      	add	sp, #8
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <HAL_TIM_PWM_Start+0x22>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	223e      	movs	r2, #62	; 0x3e
 800579c:	5c9b      	ldrb	r3, [r3, r2]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	1e5a      	subs	r2, r3, #1
 80057a4:	4193      	sbcs	r3, r2
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	e01f      	b.n	80057ea <HAL_TIM_PWM_Start+0x62>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d108      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x3a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	223f      	movs	r2, #63	; 0x3f
 80057b4:	5c9b      	ldrb	r3, [r3, r2]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	1e5a      	subs	r2, r3, #1
 80057bc:	4193      	sbcs	r3, r2
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	e013      	b.n	80057ea <HAL_TIM_PWM_Start+0x62>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d108      	bne.n	80057da <HAL_TIM_PWM_Start+0x52>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	5c9b      	ldrb	r3, [r3, r2]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	4193      	sbcs	r3, r2
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e007      	b.n	80057ea <HAL_TIM_PWM_Start+0x62>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2241      	movs	r2, #65	; 0x41
 80057de:	5c9b      	ldrb	r3, [r3, r2]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	1e5a      	subs	r2, r3, #1
 80057e6:	4193      	sbcs	r3, r2
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e06e      	b.n	80058d0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start+0x7a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	223e      	movs	r2, #62	; 0x3e
 80057fc:	2102      	movs	r1, #2
 80057fe:	5499      	strb	r1, [r3, r2]
 8005800:	e013      	b.n	800582a <HAL_TIM_PWM_Start+0xa2>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0x8a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	223f      	movs	r2, #63	; 0x3f
 800580c:	2102      	movs	r1, #2
 800580e:	5499      	strb	r1, [r3, r2]
 8005810:	e00b      	b.n	800582a <HAL_TIM_PWM_Start+0xa2>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0x9a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2240      	movs	r2, #64	; 0x40
 800581c:	2102      	movs	r1, #2
 800581e:	5499      	strb	r1, [r3, r2]
 8005820:	e003      	b.n	800582a <HAL_TIM_PWM_Start+0xa2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2241      	movs	r2, #65	; 0x41
 8005826:	2102      	movs	r1, #2
 8005828:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	2201      	movs	r2, #1
 8005832:	0018      	movs	r0, r3
 8005834:	f000 ffe2 	bl	80067fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <HAL_TIM_PWM_Start+0x150>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <HAL_TIM_PWM_Start+0xd8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a25      	ldr	r2, [pc, #148]	; (80058dc <HAL_TIM_PWM_Start+0x154>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_TIM_PWM_Start+0xd8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <HAL_TIM_PWM_Start+0x158>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIM_PWM_Start+0xd8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <HAL_TIM_PWM_Start+0x15c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_TIM_PWM_Start+0xdc>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_TIM_PWM_Start+0xde>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2180      	movs	r1, #128	; 0x80
 8005876:	0209      	lsls	r1, r1, #8
 8005878:	430a      	orrs	r2, r1
 800587a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <HAL_TIM_PWM_Start+0x150>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIM_PWM_Start+0x112>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <HAL_TIM_PWM_Start+0x160>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIM_PWM_Start+0x112>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_TIM_PWM_Start+0x154>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2207      	movs	r2, #7
 80058a2:	4013      	ands	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d010      	beq.n	80058ce <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2101      	movs	r1, #1
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e007      	b.n	80058ce <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b004      	add	sp, #16
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	40000400 	.word	0x40000400

080058ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	2200      	movs	r2, #0
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 ff7c 	bl	80067fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <HAL_TIM_PWM_Stop+0xdc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIM_PWM_Stop+0x40>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a2e      	ldr	r2, [pc, #184]	; (80059cc <HAL_TIM_PWM_Stop+0xe0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_TIM_PWM_Stop+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <HAL_TIM_PWM_Stop+0xe4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIM_PWM_Stop+0x40>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2b      	ldr	r2, [pc, #172]	; (80059d4 <HAL_TIM_PWM_Stop+0xe8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d101      	bne.n	8005930 <HAL_TIM_PWM_Stop+0x44>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_TIM_PWM_Stop+0x46>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d013      	beq.n	800595e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_TIM_PWM_Stop+0xec>)
 800593e:	4013      	ands	r3, r2
 8005940:	d10d      	bne.n	800595e <HAL_TIM_PWM_Stop+0x72>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	4a24      	ldr	r2, [pc, #144]	; (80059dc <HAL_TIM_PWM_Stop+0xf0>)
 800594a:	4013      	ands	r3, r2
 800594c:	d107      	bne.n	800595e <HAL_TIM_PWM_Stop+0x72>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4921      	ldr	r1, [pc, #132]	; (80059e0 <HAL_TIM_PWM_Stop+0xf4>)
 800595a:	400a      	ands	r2, r1
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <HAL_TIM_PWM_Stop+0xec>)
 8005966:	4013      	ands	r3, r2
 8005968:	d10d      	bne.n	8005986 <HAL_TIM_PWM_Stop+0x9a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_TIM_PWM_Stop+0xf0>)
 8005972:	4013      	ands	r3, r2
 8005974:	d107      	bne.n	8005986 <HAL_TIM_PWM_Stop+0x9a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2101      	movs	r1, #1
 8005982:	438a      	bics	r2, r1
 8005984:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Stop+0xaa>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	223e      	movs	r2, #62	; 0x3e
 8005990:	2101      	movs	r1, #1
 8005992:	5499      	strb	r1, [r3, r2]
 8005994:	e013      	b.n	80059be <HAL_TIM_PWM_Stop+0xd2>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Stop+0xba>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	223f      	movs	r2, #63	; 0x3f
 80059a0:	2101      	movs	r1, #1
 80059a2:	5499      	strb	r1, [r3, r2]
 80059a4:	e00b      	b.n	80059be <HAL_TIM_PWM_Stop+0xd2>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Stop+0xca>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2240      	movs	r2, #64	; 0x40
 80059b0:	2101      	movs	r1, #1
 80059b2:	5499      	strb	r1, [r3, r2]
 80059b4:	e003      	b.n	80059be <HAL_TIM_PWM_Stop+0xd2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2241      	movs	r2, #65	; 0x41
 80059ba:	2101      	movs	r1, #1
 80059bc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b002      	add	sp, #8
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800
 80059d8:	00001111 	.word	0x00001111
 80059dc:	00000444 	.word	0x00000444
 80059e0:	ffff7fff 	.word	0xffff7fff

080059e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2202      	movs	r2, #2
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d124      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2202      	movs	r2, #2
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d11d      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	4252      	negs	r2, r2
 8005a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4013      	ands	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f000 fb32 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e007      	b.n	8005a3e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f000 fb25 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fb31 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d125      	bne.n	8005a9e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2204      	movs	r2, #4
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11e      	bne.n	8005a9e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2205      	movs	r2, #5
 8005a66:	4252      	negs	r2, r2
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	23c0      	movs	r3, #192	; 0xc0
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f000 fb05 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005a86:	e007      	b.n	8005a98 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 faf8 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 fb04 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d124      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d11d      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2209      	movs	r2, #9
 8005ac0:	4252      	negs	r2, r2
 8005ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f000 fad9 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005ade:	e007      	b.n	8005af0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f000 facc 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 fad8 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2210      	movs	r2, #16
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d125      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d11e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2211      	movs	r2, #17
 8005b18:	4252      	negs	r2, r2
 8005b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2208      	movs	r2, #8
 8005b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	23c0      	movs	r3, #192	; 0xc0
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 faac 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e007      	b.n	8005b4a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 fa9f 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 faab 	bl	80060a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2201      	movs	r2, #1
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10f      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d108      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2202      	movs	r2, #2
 8005b72:	4252      	negs	r2, r2
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7fc fd55 	bl	8002628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b80      	cmp	r3, #128	; 0x80
 8005b8a:	d10f      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d108      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2281      	movs	r2, #129	; 0x81
 8005ba0:	4252      	negs	r2, r2
 8005ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f000 ff0a 	bl	80069c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2240      	movs	r2, #64	; 0x40
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d10f      	bne.n	8005bda <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d108      	bne.n	8005bda <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2241      	movs	r2, #65	; 0x41
 8005bce:	4252      	negs	r2, r2
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 fa6b 	bl	80060b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2220      	movs	r2, #32
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d10f      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d108      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2221      	movs	r2, #33	; 0x21
 8005bfc:	4252      	negs	r2, r2
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 fed4 	bl	80069b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2317      	movs	r3, #23
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	223c      	movs	r2, #60	; 0x3c
 8005c28:	5c9b      	ldrb	r3, [r3, r2]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_OC_ConfigChannel+0x22>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e042      	b.n	8005cb8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	223c      	movs	r2, #60	; 0x3c
 8005c36:	2101      	movs	r1, #1
 8005c38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	d027      	beq.n	8005c90 <HAL_TIM_OC_ConfigChannel+0x80>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b0c      	cmp	r3, #12
 8005c44:	d82c      	bhi.n	8005ca0 <HAL_TIM_OC_ConfigChannel+0x90>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d019      	beq.n	8005c80 <HAL_TIM_OC_ConfigChannel+0x70>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d826      	bhi.n	8005ca0 <HAL_TIM_OC_ConfigChannel+0x90>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_TIM_OC_ConfigChannel+0x50>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d008      	beq.n	8005c70 <HAL_TIM_OC_ConfigChannel+0x60>
 8005c5e:	e01f      	b.n	8005ca0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	0011      	movs	r1, r2
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 fa9f 	bl	80061ac <TIM_OC1_SetConfig>
      break;
 8005c6e:	e01c      	b.n	8005caa <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	0011      	movs	r1, r2
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 fb1f 	bl	80062bc <TIM_OC2_SetConfig>
      break;
 8005c7e:	e014      	b.n	8005caa <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	0011      	movs	r1, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fb9b 	bl	80063c4 <TIM_OC3_SetConfig>
      break;
 8005c8e:	e00c      	b.n	8005caa <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	0011      	movs	r1, r2
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 fc19 	bl	80064d0 <TIM_OC4_SetConfig>
      break;
 8005c9e:	e004      	b.n	8005caa <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005ca0:	2317      	movs	r3, #23
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
      break;
 8005ca8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	223c      	movs	r2, #60	; 0x3c
 8005cae:	2100      	movs	r1, #0
 8005cb0:	5499      	strb	r1, [r3, r2]

  return status;
 8005cb2:	2317      	movs	r3, #23
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
}
 8005cb8:	0018      	movs	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b006      	add	sp, #24
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	2317      	movs	r3, #23
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	223c      	movs	r2, #60	; 0x3c
 8005cd8:	5c9b      	ldrb	r3, [r3, r2]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e0ad      	b.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	223c      	movs	r2, #60	; 0x3c
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	d100      	bne.n	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005cf0:	e076      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	d900      	bls.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005cf8:	e095      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d04e      	beq.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d900      	bls.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005d06:	e08e      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d021      	beq.n	8005d58 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005d14:	e087      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	0011      	movs	r1, r2
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f000 fa44 	bl	80061ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2108      	movs	r1, #8
 8005d30:	430a      	orrs	r2, r1
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2104      	movs	r1, #4
 8005d40:	438a      	bics	r2, r1
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	619a      	str	r2, [r3, #24]
      break;
 8005d56:	e06b      	b.n	8005e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0011      	movs	r1, r2
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 faab 	bl	80062bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	0109      	lsls	r1, r1, #4
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4931      	ldr	r1, [pc, #196]	; (8005e48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
      break;
 8005d9c:	e048      	b.n	8005e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	0011      	movs	r1, r2
 8005da6:	0018      	movs	r0, r3
 8005da8:	f000 fb0c 	bl	80063c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2108      	movs	r1, #8
 8005db8:	430a      	orrs	r2, r1
 8005dba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2104      	movs	r1, #4
 8005dc8:	438a      	bics	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69d9      	ldr	r1, [r3, #28]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	61da      	str	r2, [r3, #28]
      break;
 8005dde:	e027      	b.n	8005e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	0011      	movs	r1, r2
 8005de8:	0018      	movs	r0, r3
 8005dea:	f000 fb71 	bl	80064d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	0109      	lsls	r1, r1, #4
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	490f      	ldr	r1, [pc, #60]	; (8005e48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69d9      	ldr	r1, [r3, #28]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	61da      	str	r2, [r3, #28]
      break;
 8005e24:	e004      	b.n	8005e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005e26:	2317      	movs	r3, #23
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
      break;
 8005e2e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	223c      	movs	r2, #60	; 0x3c
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

  return status;
 8005e38:	2317      	movs	r3, #23
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
}
 8005e3e:	0018      	movs	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b006      	add	sp, #24
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	fffffbff 	.word	0xfffffbff

08005e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	230f      	movs	r3, #15
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	223c      	movs	r2, #60	; 0x3c
 8005e62:	5c9b      	ldrb	r3, [r3, r2]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_ConfigClockSource+0x20>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0bc      	b.n	8005fe6 <HAL_TIM_ConfigClockSource+0x19a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	223c      	movs	r2, #60	; 0x3c
 8005e70:	2101      	movs	r1, #1
 8005e72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	223d      	movs	r2, #61	; 0x3d
 8005e78:	2102      	movs	r1, #2
 8005e7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2277      	movs	r2, #119	; 0x77
 8005e88:	4393      	bics	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a58      	ldr	r2, [pc, #352]	; (8005ff0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2280      	movs	r2, #128	; 0x80
 8005ea2:	0192      	lsls	r2, r2, #6
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d040      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0xde>
 8005ea8:	2280      	movs	r2, #128	; 0x80
 8005eaa:	0192      	lsls	r2, r2, #6
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d900      	bls.n	8005eb2 <HAL_TIM_ConfigClockSource+0x66>
 8005eb0:	e088      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005eb2:	2280      	movs	r2, #128	; 0x80
 8005eb4:	0152      	lsls	r2, r2, #5
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d100      	bne.n	8005ebc <HAL_TIM_ConfigClockSource+0x70>
 8005eba:	e088      	b.n	8005fce <HAL_TIM_ConfigClockSource+0x182>
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	0152      	lsls	r2, r2, #5
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d900      	bls.n	8005ec6 <HAL_TIM_ConfigClockSource+0x7a>
 8005ec4:	e07e      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005ec6:	2b70      	cmp	r3, #112	; 0x70
 8005ec8:	d018      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0xb0>
 8005eca:	d900      	bls.n	8005ece <HAL_TIM_ConfigClockSource+0x82>
 8005ecc:	e07a      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005ece:	2b60      	cmp	r3, #96	; 0x60
 8005ed0:	d04f      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x126>
 8005ed2:	d900      	bls.n	8005ed6 <HAL_TIM_ConfigClockSource+0x8a>
 8005ed4:	e076      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005ed6:	2b50      	cmp	r3, #80	; 0x50
 8005ed8:	d03b      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x106>
 8005eda:	d900      	bls.n	8005ede <HAL_TIM_ConfigClockSource+0x92>
 8005edc:	e072      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d057      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x146>
 8005ee2:	d900      	bls.n	8005ee6 <HAL_TIM_ConfigClockSource+0x9a>
 8005ee4:	e06e      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005ee6:	2b30      	cmp	r3, #48	; 0x30
 8005ee8:	d063      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x166>
 8005eea:	d86b      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d060      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x166>
 8005ef0:	d868      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d05d      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x166>
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d05b      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x166>
 8005efa:	e063      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6899      	ldr	r1, [r3, #8]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f000 fc56 	bl	80067bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2277      	movs	r2, #119	; 0x77
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]
      break;
 8005f28:	e052      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f000 fc3f 	bl	80067bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	01c9      	lsls	r1, r1, #7
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
      break;
 8005f50:	e03e      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	001a      	movs	r2, r3
 8005f60:	f000 fbb2 	bl	80066c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2150      	movs	r1, #80	; 0x50
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f000 fc0c 	bl	8006788 <TIM_ITRx_SetConfig>
      break;
 8005f70:	e02e      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	001a      	movs	r2, r3
 8005f80:	f000 fbd0 	bl	8006724 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2160      	movs	r1, #96	; 0x60
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 fbfc 	bl	8006788 <TIM_ITRx_SetConfig>
      break;
 8005f90:	e01e      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	f000 fb92 	bl	80066c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2140      	movs	r1, #64	; 0x40
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 fbec 	bl	8006788 <TIM_ITRx_SetConfig>
      break;
 8005fb0:	e00e      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	0019      	movs	r1, r3
 8005fbc:	0010      	movs	r0, r2
 8005fbe:	f000 fbe3 	bl	8006788 <TIM_ITRx_SetConfig>
      break;
 8005fc2:	e005      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005fc4:	230f      	movs	r3, #15
 8005fc6:	18fb      	adds	r3, r7, r3
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
      break;
 8005fcc:	e000      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005fce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	223d      	movs	r2, #61	; 0x3d
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	223c      	movs	r2, #60	; 0x3c
 8005fdc:	2100      	movs	r1, #0
 8005fde:	5499      	strb	r1, [r3, r2]

  return status;
 8005fe0:	230f      	movs	r3, #15
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	781b      	ldrb	r3, [r3, #0]
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	ffff00ff 	.word	0xffff00ff

08005ff4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	223c      	movs	r2, #60	; 0x3c
 8006002:	5c9b      	ldrb	r3, [r3, r2]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006008:	2302      	movs	r3, #2
 800600a:	e032      	b.n	8006072 <HAL_TIM_SlaveConfigSynchro+0x7e>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	223c      	movs	r2, #60	; 0x3c
 8006010:	2101      	movs	r1, #1
 8006012:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	223d      	movs	r2, #61	; 0x3d
 8006018:	2102      	movs	r1, #2
 800601a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0011      	movs	r1, r2
 8006022:	0018      	movs	r0, r3
 8006024:	f000 fabe 	bl	80065a4 <TIM_SlaveTimer_SetConfig>
 8006028:	1e03      	subs	r3, r0, #0
 800602a:	d009      	beq.n	8006040 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	223d      	movs	r2, #61	; 0x3d
 8006030:	2101      	movs	r1, #1
 8006032:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	223c      	movs	r2, #60	; 0x3c
 8006038:	2100      	movs	r1, #0
 800603a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e018      	b.n	8006072 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2140      	movs	r1, #64	; 0x40
 800604c:	438a      	bics	r2, r1
 800604e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4908      	ldr	r1, [pc, #32]	; (800607c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800605c:	400a      	ands	r2, r1
 800605e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	223d      	movs	r2, #61	; 0x3d
 8006064:	2101      	movs	r1, #1
 8006066:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	223c      	movs	r2, #60	; 0x3c
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b002      	add	sp, #8
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	ffffbfff 	.word	0xffffbfff

08006080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006088:	46c0      	nop			; (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b002      	add	sp, #8
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b8:	46c0      	nop			; (mov r8, r8)
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b002      	add	sp, #8
 80060be:	bd80      	pop	{r7, pc}

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <TIM_Base_SetConfig+0xd0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x20>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <TIM_Base_SetConfig+0xd4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2270      	movs	r2, #112	; 0x70
 80060e4:	4393      	bics	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a26      	ldr	r2, [pc, #152]	; (8006190 <TIM_Base_SetConfig+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_Base_SetConfig+0x62>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a25      	ldr	r2, [pc, #148]	; (8006194 <TIM_Base_SetConfig+0xd4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_Base_SetConfig+0x62>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a24      	ldr	r2, [pc, #144]	; (8006198 <TIM_Base_SetConfig+0xd8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_Base_SetConfig+0x62>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a23      	ldr	r2, [pc, #140]	; (800619c <TIM_Base_SetConfig+0xdc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_Base_SetConfig+0x62>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a22      	ldr	r2, [pc, #136]	; (80061a0 <TIM_Base_SetConfig+0xe0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_Base_SetConfig+0x62>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a21      	ldr	r2, [pc, #132]	; (80061a4 <TIM_Base_SetConfig+0xe4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <TIM_Base_SetConfig+0xe8>)
 8006126:	4013      	ands	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2280      	movs	r2, #128	; 0x80
 8006138:	4393      	bics	r3, r2
 800613a:	001a      	movs	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <TIM_Base_SetConfig+0xd0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0xba>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a0d      	ldr	r2, [pc, #52]	; (800619c <TIM_Base_SetConfig+0xdc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0xba>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <TIM_Base_SetConfig+0xe0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0xba>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a0b      	ldr	r2, [pc, #44]	; (80061a4 <TIM_Base_SetConfig+0xe4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d103      	bne.n	8006182 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	615a      	str	r2, [r3, #20]
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40000400 	.word	0x40000400
 8006198:	40002000 	.word	0x40002000
 800619c:	40014000 	.word	0x40014000
 80061a0:	40014400 	.word	0x40014400
 80061a4:	40014800 	.word	0x40014800
 80061a8:	fffffcff 	.word	0xfffffcff

080061ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	2201      	movs	r2, #1
 80061bc:	4393      	bics	r3, r2
 80061be:	001a      	movs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2270      	movs	r2, #112	; 0x70
 80061da:	4393      	bics	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2203      	movs	r2, #3
 80061e2:	4393      	bics	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2202      	movs	r2, #2
 80061f4:	4393      	bics	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <TIM_OC1_SetConfig+0xf8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_OC1_SetConfig+0x76>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <TIM_OC1_SetConfig+0xfc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_OC1_SetConfig+0x76>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a25      	ldr	r2, [pc, #148]	; (80062ac <TIM_OC1_SetConfig+0x100>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC1_SetConfig+0x76>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a24      	ldr	r2, [pc, #144]	; (80062b0 <TIM_OC1_SetConfig+0x104>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d10c      	bne.n	800623c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2208      	movs	r2, #8
 8006226:	4393      	bics	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2204      	movs	r2, #4
 8006238:	4393      	bics	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <TIM_OC1_SetConfig+0xf8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_OC1_SetConfig+0xb0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <TIM_OC1_SetConfig+0xfc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_OC1_SetConfig+0xb0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <TIM_OC1_SetConfig+0x100>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC1_SetConfig+0xb0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <TIM_OC1_SetConfig+0x104>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d111      	bne.n	8006280 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <TIM_OC1_SetConfig+0x108>)
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <TIM_OC1_SetConfig+0x10c>)
 8006268:	4013      	ands	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	b006      	add	sp, #24
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40014400 	.word	0x40014400
 80062b0:	40014800 	.word	0x40014800
 80062b4:	fffffeff 	.word	0xfffffeff
 80062b8:	fffffdff 	.word	0xfffffdff

080062bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	2210      	movs	r2, #16
 80062cc:	4393      	bics	r3, r2
 80062ce:	001a      	movs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4a2e      	ldr	r2, [pc, #184]	; (80063a4 <TIM_OC2_SetConfig+0xe8>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a2d      	ldr	r2, [pc, #180]	; (80063a8 <TIM_OC2_SetConfig+0xec>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2220      	movs	r2, #32
 8006306:	4393      	bics	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <TIM_OC2_SetConfig+0xf0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d10d      	bne.n	800633a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2280      	movs	r2, #128	; 0x80
 8006322:	4393      	bics	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2240      	movs	r2, #64	; 0x40
 8006336:	4393      	bics	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <TIM_OC2_SetConfig+0xf0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00b      	beq.n	800635a <TIM_OC2_SetConfig+0x9e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <TIM_OC2_SetConfig+0xf4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_OC2_SetConfig+0x9e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <TIM_OC2_SetConfig+0xf8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC2_SetConfig+0x9e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_OC2_SetConfig+0xfc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d113      	bne.n	8006382 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC2_SetConfig+0x100>)
 800635e:	4013      	ands	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC2_SetConfig+0x104>)
 8006366:	4013      	ands	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b006      	add	sp, #24
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	ffff8fff 	.word	0xffff8fff
 80063a8:	fffffcff 	.word	0xfffffcff
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800
 80063bc:	fffffbff 	.word	0xfffffbff
 80063c0:	fffff7ff 	.word	0xfffff7ff

080063c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	4a35      	ldr	r2, [pc, #212]	; (80064a8 <TIM_OC3_SetConfig+0xe4>)
 80063d4:	401a      	ands	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2270      	movs	r2, #112	; 0x70
 80063f0:	4393      	bics	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2203      	movs	r2, #3
 80063f8:	4393      	bics	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4a28      	ldr	r2, [pc, #160]	; (80064ac <TIM_OC3_SetConfig+0xe8>)
 800640a:	4013      	ands	r3, r2
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a24      	ldr	r2, [pc, #144]	; (80064b0 <TIM_OC3_SetConfig+0xec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10d      	bne.n	800643e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4a23      	ldr	r2, [pc, #140]	; (80064b4 <TIM_OC3_SetConfig+0xf0>)
 8006426:	4013      	ands	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <TIM_OC3_SetConfig+0xf4>)
 800643a:	4013      	ands	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <TIM_OC3_SetConfig+0xec>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00b      	beq.n	800645e <TIM_OC3_SetConfig+0x9a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1c      	ldr	r2, [pc, #112]	; (80064bc <TIM_OC3_SetConfig+0xf8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_OC3_SetConfig+0x9a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <TIM_OC3_SetConfig+0xfc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_OC3_SetConfig+0x9a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <TIM_OC3_SetConfig+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d113      	bne.n	8006486 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <TIM_OC3_SetConfig+0x104>)
 8006462:	4013      	ands	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4a18      	ldr	r2, [pc, #96]	; (80064cc <TIM_OC3_SetConfig+0x108>)
 800646a:	4013      	ands	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	621a      	str	r2, [r3, #32]
}
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b006      	add	sp, #24
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	fffffeff 	.word	0xfffffeff
 80064ac:	fffffdff 	.word	0xfffffdff
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	fffff7ff 	.word	0xfffff7ff
 80064b8:	fffffbff 	.word	0xfffffbff
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800
 80064c8:	ffffefff 	.word	0xffffefff
 80064cc:	ffffdfff 	.word	0xffffdfff

080064d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4a28      	ldr	r2, [pc, #160]	; (8006580 <TIM_OC4_SetConfig+0xb0>)
 80064e0:	401a      	ands	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a22      	ldr	r2, [pc, #136]	; (8006584 <TIM_OC4_SetConfig+0xb4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a21      	ldr	r2, [pc, #132]	; (8006588 <TIM_OC4_SetConfig+0xb8>)
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <TIM_OC4_SetConfig+0xbc>)
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	031b      	lsls	r3, r3, #12
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a19      	ldr	r2, [pc, #100]	; (8006590 <TIM_OC4_SetConfig+0xc0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00b      	beq.n	8006548 <TIM_OC4_SetConfig+0x78>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a18      	ldr	r2, [pc, #96]	; (8006594 <TIM_OC4_SetConfig+0xc4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <TIM_OC4_SetConfig+0x78>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <TIM_OC4_SetConfig+0xc8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC4_SetConfig+0x78>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a16      	ldr	r2, [pc, #88]	; (800659c <TIM_OC4_SetConfig+0xcc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d109      	bne.n	800655c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <TIM_OC4_SetConfig+0xd0>)
 800654c:	4013      	ands	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	019b      	lsls	r3, r3, #6
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	46bd      	mov	sp, r7
 800657a:	b006      	add	sp, #24
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	ffffefff 	.word	0xffffefff
 8006584:	ffff8fff 	.word	0xffff8fff
 8006588:	fffffcff 	.word	0xfffffcff
 800658c:	ffffdfff 	.word	0xffffdfff
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400
 800659c:	40014800 	.word	0x40014800
 80065a0:	ffffbfff 	.word	0xffffbfff

080065a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2317      	movs	r3, #23
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2270      	movs	r2, #112	; 0x70
 80065c2:	4393      	bics	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2207      	movs	r2, #7
 80065d4:	4393      	bics	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b70      	cmp	r3, #112	; 0x70
 80065f0:	d015      	beq.n	800661e <TIM_SlaveTimer_SetConfig+0x7a>
 80065f2:	d900      	bls.n	80065f6 <TIM_SlaveTimer_SetConfig+0x52>
 80065f4:	e05b      	b.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
 80065f6:	2b60      	cmp	r3, #96	; 0x60
 80065f8:	d04f      	beq.n	800669a <TIM_SlaveTimer_SetConfig+0xf6>
 80065fa:	d858      	bhi.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
 80065fc:	2b50      	cmp	r3, #80	; 0x50
 80065fe:	d042      	beq.n	8006686 <TIM_SlaveTimer_SetConfig+0xe2>
 8006600:	d855      	bhi.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d016      	beq.n	8006634 <TIM_SlaveTimer_SetConfig+0x90>
 8006606:	d852      	bhi.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	d055      	beq.n	80066b8 <TIM_SlaveTimer_SetConfig+0x114>
 800660c:	d84f      	bhi.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
 800660e:	2b20      	cmp	r3, #32
 8006610:	d052      	beq.n	80066b8 <TIM_SlaveTimer_SetConfig+0x114>
 8006612:	d84c      	bhi.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d04f      	beq.n	80066b8 <TIM_SlaveTimer_SetConfig+0x114>
 8006618:	2b10      	cmp	r3, #16
 800661a:	d04d      	beq.n	80066b8 <TIM_SlaveTimer_SetConfig+0x114>
 800661c:	e047      	b.n	80066ae <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f000 f8c5 	bl	80067bc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006632:	e042      	b.n	80066ba <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b05      	cmp	r3, #5
 800663a:	d101      	bne.n	8006640 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e03f      	b.n	80066c0 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2101      	movs	r1, #1
 8006654:	438a      	bics	r2, r1
 8006656:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	22f0      	movs	r2, #240	; 0xf0
 8006664:	4393      	bics	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	621a      	str	r2, [r3, #32]
      break;
 8006684:	e019      	b.n	80066ba <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6899      	ldr	r1, [r3, #8]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	001a      	movs	r2, r3
 8006694:	f000 f818 	bl	80066c8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006698:	e00f      	b.n	80066ba <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	001a      	movs	r2, r3
 80066a8:	f000 f83c 	bl	8006724 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80066ac:	e005      	b.n	80066ba <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80066ae:	2317      	movs	r3, #23
 80066b0:	18fb      	adds	r3, r7, r3
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
      break;
 80066b6:	e000      	b.n	80066ba <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80066b8:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80066ba:	2317      	movs	r3, #23
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	781b      	ldrb	r3, [r3, #0]
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b006      	add	sp, #24
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	2201      	movs	r2, #1
 80066e0:	4393      	bics	r3, r2
 80066e2:	001a      	movs	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	22f0      	movs	r2, #240	; 0xf0
 80066f2:	4393      	bics	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	220a      	movs	r2, #10
 8006704:	4393      	bics	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b006      	add	sp, #24
 8006722:	bd80      	pop	{r7, pc}

08006724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	2210      	movs	r2, #16
 8006736:	4393      	bics	r3, r2
 8006738:	001a      	movs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <TIM_TI2_ConfigInputStage+0x60>)
 800674e:	4013      	ands	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	031b      	lsls	r3, r3, #12
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	22a0      	movs	r2, #160	; 0xa0
 8006760:	4393      	bics	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	46bd      	mov	sp, r7
 800677e:	b006      	add	sp, #24
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	ffff0fff 	.word	0xffff0fff

08006788 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2270      	movs	r2, #112	; 0x70
 800679c:	4393      	bics	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	2207      	movs	r2, #7
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	609a      	str	r2, [r3, #8]
}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b004      	add	sp, #16
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <TIM_ETR_SetConfig+0x3c>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	021a      	lsls	r2, r3, #8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	431a      	orrs	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	609a      	str	r2, [r3, #8]
}
 80067f0:	46c0      	nop			; (mov r8, r8)
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b006      	add	sp, #24
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	ffff00ff 	.word	0xffff00ff

080067fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	221f      	movs	r2, #31
 800680c:	4013      	ands	r3, r2
 800680e:	2201      	movs	r2, #1
 8006810:	409a      	lsls	r2, r3
 8006812:	0013      	movs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	43d2      	mvns	r2, r2
 800681e:	401a      	ands	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1a      	ldr	r2, [r3, #32]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	211f      	movs	r1, #31
 800682c:	400b      	ands	r3, r1
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4099      	lsls	r1, r3
 8006832:	000b      	movs	r3, r1
 8006834:	431a      	orrs	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	46bd      	mov	sp, r7
 800683e:	b006      	add	sp, #24
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	223c      	movs	r2, #60	; 0x3c
 8006852:	5c9b      	ldrb	r3, [r3, r2]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006858:	2302      	movs	r3, #2
 800685a:	e041      	b.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	223c      	movs	r2, #60	; 0x3c
 8006860:	2101      	movs	r1, #1
 8006862:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	223d      	movs	r2, #61	; 0x3d
 8006868:	2102      	movs	r1, #2
 800686a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2270      	movs	r2, #112	; 0x70
 8006880:	4393      	bics	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d009      	beq.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a11      	ldr	r2, [pc, #68]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a10      	ldr	r2, [pc, #64]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d10c      	bne.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	4393      	bics	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	223d      	movs	r2, #61	; 0x3d
 80068d2:	2101      	movs	r1, #1
 80068d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	223c      	movs	r2, #60	; 0x3c
 80068da:	2100      	movs	r1, #0
 80068dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	0018      	movs	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b004      	add	sp, #16
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40014000 	.word	0x40014000

080068f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	223c      	movs	r2, #60	; 0x3c
 8006906:	5c9b      	ldrb	r3, [r3, r2]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800690c:	2302      	movs	r3, #2
 800690e:	e03e      	b.n	800698e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	223c      	movs	r2, #60	; 0x3c
 8006914:	2101      	movs	r1, #1
 8006916:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	22ff      	movs	r2, #255	; 0xff
 800691c:	4393      	bics	r3, r2
 800691e:	001a      	movs	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800692c:	401a      	ands	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a18      	ldr	r2, [pc, #96]	; (800699c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800693a:	401a      	ands	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006948:	401a      	ands	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006956:	401a      	ands	r2, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006964:	401a      	ands	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006972:	401a      	ands	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	223c      	movs	r2, #60	; 0x3c
 8006988:	2100      	movs	r1, #0
 800698a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b004      	add	sp, #16
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	fffffcff 	.word	0xfffffcff
 800699c:	fffffbff 	.word	0xfffffbff
 80069a0:	fffff7ff 	.word	0xfffff7ff
 80069a4:	ffffefff 	.word	0xffffefff
 80069a8:	ffffdfff 	.word	0xffffdfff
 80069ac:	ffffbfff 	.word	0xffffbfff

080069b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b002      	add	sp, #8
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e044      	b.n	8006a6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d107      	bne.n	80069fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2278      	movs	r2, #120	; 0x78
 80069ee:	2100      	movs	r1, #0
 80069f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f7fc fe85 	bl	8003704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2224      	movs	r2, #36	; 0x24
 80069fe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	438a      	bics	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 fc0c 	bl	8007230 <UART_SetConfig>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e024      	b.n	8006a6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 fd3f 	bl	80074b0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	490d      	ldr	r1, [pc, #52]	; (8006a74 <HAL_UART_Init+0xa4>)
 8006a3e:	400a      	ands	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2108      	movs	r1, #8
 8006a4e:	438a      	bics	r2, r1
 8006a50:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f000 fdd7 	bl	8007618 <UART_CheckIdleState>
 8006a6a:	0003      	movs	r3, r0
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	fffff7ff 	.word	0xfffff7ff

08006a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	; 0x28
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	1dbb      	adds	r3, r7, #6
 8006a86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d000      	beq.n	8006a92 <HAL_UART_Transmit+0x1a>
 8006a90:	e08d      	b.n	8006bae <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_UART_Transmit+0x28>
 8006a98:	1dbb      	adds	r3, r7, #6
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e085      	b.n	8006bb0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	015b      	lsls	r3, r3, #5
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d109      	bne.n	8006ac4 <HAL_UART_Transmit+0x4c>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2201      	movs	r2, #1
 8006abc:	4013      	ands	r3, r2
 8006abe:	d001      	beq.n	8006ac4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e075      	b.n	8006bb0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2284      	movs	r2, #132	; 0x84
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2221      	movs	r2, #33	; 0x21
 8006ad0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad2:	f7fc ff3d 	bl	8003950 <HAL_GetTick>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1dba      	adds	r2, r7, #6
 8006ade:	2150      	movs	r1, #80	; 0x50
 8006ae0:	8812      	ldrh	r2, [r2, #0]
 8006ae2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1dba      	adds	r2, r7, #6
 8006ae8:	2152      	movs	r1, #82	; 0x52
 8006aea:	8812      	ldrh	r2, [r2, #0]
 8006aec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	2380      	movs	r3, #128	; 0x80
 8006af4:	015b      	lsls	r3, r3, #5
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d108      	bne.n	8006b0c <HAL_UART_Transmit+0x94>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	e003      	b.n	8006b14 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b14:	e030      	b.n	8006b78 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	0013      	movs	r3, r2
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	f000 fe20 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8006b28:	1e03      	subs	r3, r0, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e03c      	b.n	8006bb0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	881a      	ldrh	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	05d2      	lsls	r2, r2, #23
 8006b46:	0dd2      	lsrs	r2, r2, #23
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3302      	adds	r3, #2
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e008      	b.n	8006b66 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3301      	adds	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2252      	movs	r2, #82	; 0x52
 8006b6a:	5a9b      	ldrh	r3, [r3, r2]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b299      	uxth	r1, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2252      	movs	r2, #82	; 0x52
 8006b76:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2252      	movs	r2, #82	; 0x52
 8006b7c:	5a9b      	ldrh	r3, [r3, r2]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1c8      	bne.n	8006b16 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	0013      	movs	r3, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2140      	movs	r1, #64	; 0x40
 8006b92:	f000 fde9 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8006b96:	1e03      	subs	r3, r0, #0
 8006b98:	d004      	beq.n	8006ba4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e005      	b.n	8006bb0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b008      	add	sp, #32
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	1dbb      	adds	r3, r7, #6
 8006bc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	589b      	ldr	r3, [r3, r2]
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d145      	bne.n	8006c5c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_UART_Receive_IT+0x26>
 8006bd6:	1dbb      	adds	r3, r7, #6
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e03d      	b.n	8006c5e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	2380      	movs	r3, #128	; 0x80
 8006be8:	015b      	lsls	r3, r3, #5
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d109      	bne.n	8006c02 <HAL_UART_Receive_IT+0x4a>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d001      	beq.n	8006c02 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e02d      	b.n	8006c5e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	4013      	ands	r3, r2
 8006c14:	d019      	beq.n	8006c4a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c16:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1a:	613b      	str	r3, [r7, #16]
  return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f383 8810 	msr	PRIMASK, r3
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	04c9      	lsls	r1, r1, #19
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f383 8810 	msr	PRIMASK, r3
}
 8006c48:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c4a:	1dbb      	adds	r3, r7, #6
 8006c4c:	881a      	ldrh	r2, [r3, #0]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f000 fdf2 	bl	800783c <UART_Start_Receive_IT>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	e000      	b.n	8006c5e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b008      	add	sp, #32
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c68:	b590      	push	{r4, r7, lr}
 8006c6a:	b0ab      	sub	sp, #172	; 0xac
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	22a4      	movs	r2, #164	; 0xa4
 8006c78:	18b9      	adds	r1, r7, r2
 8006c7a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	20a0      	movs	r0, #160	; 0xa0
 8006c84:	1839      	adds	r1, r7, r0
 8006c86:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	219c      	movs	r1, #156	; 0x9c
 8006c90:	1879      	adds	r1, r7, r1
 8006c92:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c94:	0011      	movs	r1, r2
 8006c96:	18bb      	adds	r3, r7, r2
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a99      	ldr	r2, [pc, #612]	; (8006f00 <HAL_UART_IRQHandler+0x298>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2298      	movs	r2, #152	; 0x98
 8006ca0:	18bc      	adds	r4, r7, r2
 8006ca2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006ca4:	18bb      	adds	r3, r7, r2
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d114      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cac:	187b      	adds	r3, r7, r1
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	d00f      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cb6:	183b      	adds	r3, r7, r0
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d00a      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d100      	bne.n	8006cca <HAL_UART_IRQHandler+0x62>
 8006cc8:	e286      	b.n	80071d8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	0010      	movs	r0, r2
 8006cd2:	4798      	blx	r3
      }
      return;
 8006cd4:	e280      	b.n	80071d8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cd6:	2398      	movs	r3, #152	; 0x98
 8006cd8:	18fb      	adds	r3, r7, r3
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d100      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x7a>
 8006ce0:	e114      	b.n	8006f0c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ce2:	239c      	movs	r3, #156	; 0x9c
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	4013      	ands	r3, r2
 8006cec:	d106      	bne.n	8006cfc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cee:	23a0      	movs	r3, #160	; 0xa0
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a83      	ldr	r2, [pc, #524]	; (8006f04 <HAL_UART_IRQHandler+0x29c>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d100      	bne.n	8006cfc <HAL_UART_IRQHandler+0x94>
 8006cfa:	e107      	b.n	8006f0c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cfc:	23a4      	movs	r3, #164	; 0xa4
 8006cfe:	18fb      	adds	r3, r7, r3
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2201      	movs	r2, #1
 8006d04:	4013      	ands	r3, r2
 8006d06:	d012      	beq.n	8006d2e <HAL_UART_IRQHandler+0xc6>
 8006d08:	23a0      	movs	r3, #160	; 0xa0
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d00b      	beq.n	8006d2e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2284      	movs	r2, #132	; 0x84
 8006d22:	589b      	ldr	r3, [r3, r2]
 8006d24:	2201      	movs	r2, #1
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2184      	movs	r1, #132	; 0x84
 8006d2c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d2e:	23a4      	movs	r3, #164	; 0xa4
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2202      	movs	r2, #2
 8006d36:	4013      	ands	r3, r2
 8006d38:	d011      	beq.n	8006d5e <HAL_UART_IRQHandler+0xf6>
 8006d3a:	239c      	movs	r3, #156	; 0x9c
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4013      	ands	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2284      	movs	r2, #132	; 0x84
 8006d52:	589b      	ldr	r3, [r3, r2]
 8006d54:	2204      	movs	r2, #4
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2184      	movs	r1, #132	; 0x84
 8006d5c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d5e:	23a4      	movs	r3, #164	; 0xa4
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2204      	movs	r2, #4
 8006d66:	4013      	ands	r3, r2
 8006d68:	d011      	beq.n	8006d8e <HAL_UART_IRQHandler+0x126>
 8006d6a:	239c      	movs	r3, #156	; 0x9c
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2201      	movs	r2, #1
 8006d72:	4013      	ands	r3, r2
 8006d74:	d00b      	beq.n	8006d8e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2284      	movs	r2, #132	; 0x84
 8006d82:	589b      	ldr	r3, [r3, r2]
 8006d84:	2202      	movs	r2, #2
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2184      	movs	r1, #132	; 0x84
 8006d8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d8e:	23a4      	movs	r3, #164	; 0xa4
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2208      	movs	r2, #8
 8006d96:	4013      	ands	r3, r2
 8006d98:	d017      	beq.n	8006dca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d9a:	23a0      	movs	r3, #160	; 0xa0
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2220      	movs	r2, #32
 8006da2:	4013      	ands	r3, r2
 8006da4:	d105      	bne.n	8006db2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006da6:	239c      	movs	r3, #156	; 0x9c
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2201      	movs	r2, #1
 8006dae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006db0:	d00b      	beq.n	8006dca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2208      	movs	r2, #8
 8006db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2284      	movs	r2, #132	; 0x84
 8006dbe:	589b      	ldr	r3, [r3, r2]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2184      	movs	r1, #132	; 0x84
 8006dc8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dca:	23a4      	movs	r3, #164	; 0xa4
 8006dcc:	18fb      	adds	r3, r7, r3
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <HAL_UART_IRQHandler+0x198>
 8006dd8:	23a0      	movs	r3, #160	; 0xa0
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	2380      	movs	r3, #128	; 0x80
 8006de0:	04db      	lsls	r3, r3, #19
 8006de2:	4013      	ands	r3, r2
 8006de4:	d00c      	beq.n	8006e00 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	0112      	lsls	r2, r2, #4
 8006dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2284      	movs	r2, #132	; 0x84
 8006df4:	589b      	ldr	r3, [r3, r2]
 8006df6:	2220      	movs	r2, #32
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2184      	movs	r1, #132	; 0x84
 8006dfe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2284      	movs	r2, #132	; 0x84
 8006e04:	589b      	ldr	r3, [r3, r2]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d100      	bne.n	8006e0c <HAL_UART_IRQHandler+0x1a4>
 8006e0a:	e1e7      	b.n	80071dc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e0c:	23a4      	movs	r3, #164	; 0xa4
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2220      	movs	r2, #32
 8006e14:	4013      	ands	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e18:	23a0      	movs	r3, #160	; 0xa0
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	4013      	ands	r3, r2
 8006e22:	d008      	beq.n	8006e36 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	0010      	movs	r0, r2
 8006e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2284      	movs	r2, #132	; 0x84
 8006e3a:	589b      	ldr	r3, [r3, r2]
 8006e3c:	2194      	movs	r1, #148	; 0x94
 8006e3e:	187a      	adds	r2, r7, r1
 8006e40:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d004      	beq.n	8006e5a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e50:	187b      	adds	r3, r7, r1
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2228      	movs	r2, #40	; 0x28
 8006e56:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e58:	d047      	beq.n	8006eea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 fda3 	bl	80079a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d137      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e70:	f3ef 8310 	mrs	r3, PRIMASK
 8006e74:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e78:	2090      	movs	r0, #144	; 0x90
 8006e7a:	183a      	adds	r2, r7, r0
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	2301      	movs	r3, #1
 8006e80:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e84:	f383 8810 	msr	PRIMASK, r3
}
 8006e88:	46c0      	nop			; (mov r8, r8)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2140      	movs	r1, #64	; 0x40
 8006e96:	438a      	bics	r2, r1
 8006e98:	609a      	str	r2, [r3, #8]
 8006e9a:	183b      	adds	r3, r7, r0
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ea2:	f383 8810 	msr	PRIMASK, r3
}
 8006ea6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d012      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb4:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <HAL_UART_IRQHandler+0x2a0>)
 8006eb6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7fd fae5 	bl	800448c <HAL_DMA_Abort_IT>
 8006ec2:	1e03      	subs	r3, r0, #0
 8006ec4:	d01a      	beq.n	8006efc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	e012      	b.n	8006efc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f000 f995 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ede:	e00d      	b.n	8006efc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f000 f990 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee8:	e008      	b.n	8006efc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f000 f98b 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2284      	movs	r2, #132	; 0x84
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006efa:	e16f      	b.n	80071dc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efc:	46c0      	nop			; (mov r8, r8)
    return;
 8006efe:	e16d      	b.n	80071dc <HAL_UART_IRQHandler+0x574>
 8006f00:	0000080f 	.word	0x0000080f
 8006f04:	04000120 	.word	0x04000120
 8006f08:	08007a71 	.word	0x08007a71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d000      	beq.n	8006f16 <HAL_UART_IRQHandler+0x2ae>
 8006f14:	e139      	b.n	800718a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f16:	23a4      	movs	r3, #164	; 0xa4
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d100      	bne.n	8006f24 <HAL_UART_IRQHandler+0x2bc>
 8006f22:	e132      	b.n	800718a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f24:	23a0      	movs	r3, #160	; 0xa0
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <HAL_UART_IRQHandler+0x2ca>
 8006f30:	e12b      	b.n	800718a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2240      	movs	r2, #64	; 0x40
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d000      	beq.n	8006f4a <HAL_UART_IRQHandler+0x2e2>
 8006f48:	e09f      	b.n	800708a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	217e      	movs	r1, #126	; 0x7e
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006f58:	187b      	adds	r3, r7, r1
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d100      	bne.n	8006f62 <HAL_UART_IRQHandler+0x2fa>
 8006f60:	e13e      	b.n	80071e0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2258      	movs	r2, #88	; 0x58
 8006f66:	5a9b      	ldrh	r3, [r3, r2]
 8006f68:	187a      	adds	r2, r7, r1
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d300      	bcc.n	8006f72 <HAL_UART_IRQHandler+0x30a>
 8006f70:	e136      	b.n	80071e0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	187a      	adds	r2, r7, r1
 8006f76:	215a      	movs	r1, #90	; 0x5a
 8006f78:	8812      	ldrh	r2, [r2, #0]
 8006f7a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d06f      	beq.n	8007066 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f86:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f90:	2301      	movs	r3, #1
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	f383 8810 	msr	PRIMASK, r3
}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4992      	ldr	r1, [pc, #584]	; (80071f0 <HAL_UART_IRQHandler+0x588>)
 8006fa8:	400a      	ands	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	f383 8810 	msr	PRIMASK, r3
}
 8006fb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc0:	677b      	str	r3, [r7, #116]	; 0x74
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc8:	f383 8810 	msr	PRIMASK, r3
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	438a      	bics	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe4:	f383 8810 	msr	PRIMASK, r3
}
 8006fe8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fea:	f3ef 8310 	mrs	r3, PRIMASK
 8006fee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	f383 8810 	msr	PRIMASK, r3
}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2140      	movs	r1, #64	; 0x40
 800700c:	438a      	bics	r2, r1
 800700e:	609a      	str	r2, [r3, #8]
 8007010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007012:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007016:	f383 8810 	msr	PRIMASK, r3
}
 800701a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	2120      	movs	r1, #32
 8007022:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800702a:	f3ef 8310 	mrs	r3, PRIMASK
 800702e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007030:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007034:	2301      	movs	r3, #1
 8007036:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800703a:	f383 8810 	msr	PRIMASK, r3
}
 800703e:	46c0      	nop			; (mov r8, r8)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2110      	movs	r1, #16
 800704c:	438a      	bics	r2, r1
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007056:	f383 8810 	msr	PRIMASK, r3
}
 800705a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007060:	0018      	movs	r0, r3
 8007062:	f7fd f9db 	bl	800441c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2258      	movs	r2, #88	; 0x58
 8007070:	5a9a      	ldrh	r2, [r3, r2]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	215a      	movs	r1, #90	; 0x5a
 8007076:	5a5b      	ldrh	r3, [r3, r1]
 8007078:	b29b      	uxth	r3, r3
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	b29a      	uxth	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	0011      	movs	r1, r2
 8007082:	0018      	movs	r0, r3
 8007084:	f000 f8c8 	bl	8007218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007088:	e0aa      	b.n	80071e0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2258      	movs	r2, #88	; 0x58
 800708e:	5a99      	ldrh	r1, [r3, r2]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	225a      	movs	r2, #90	; 0x5a
 8007094:	5a9b      	ldrh	r3, [r3, r2]
 8007096:	b29a      	uxth	r2, r3
 8007098:	208e      	movs	r0, #142	; 0x8e
 800709a:	183b      	adds	r3, r7, r0
 800709c:	1a8a      	subs	r2, r1, r2
 800709e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	225a      	movs	r2, #90	; 0x5a
 80070a4:	5a9b      	ldrh	r3, [r3, r2]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d100      	bne.n	80070ae <HAL_UART_IRQHandler+0x446>
 80070ac:	e09a      	b.n	80071e4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80070ae:	183b      	adds	r3, r7, r0
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d100      	bne.n	80070b8 <HAL_UART_IRQHandler+0x450>
 80070b6:	e095      	b.n	80071e4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b8:	f3ef 8310 	mrs	r3, PRIMASK
 80070bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80070be:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c0:	2488      	movs	r4, #136	; 0x88
 80070c2:	193a      	adds	r2, r7, r4
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	2301      	movs	r3, #1
 80070c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f383 8810 	msr	PRIMASK, r3
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4945      	ldr	r1, [pc, #276]	; (80071f4 <HAL_UART_IRQHandler+0x58c>)
 80070de:	400a      	ands	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f0:	f3ef 8310 	mrs	r3, PRIMASK
 80070f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	2484      	movs	r4, #132	; 0x84
 80070fa:	193a      	adds	r2, r7, r4
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	2301      	movs	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f383 8810 	msr	PRIMASK, r3
}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2101      	movs	r1, #1
 8007116:	438a      	bics	r2, r1
 8007118:	609a      	str	r2, [r3, #8]
 800711a:	193b      	adds	r3, r7, r4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	f383 8810 	msr	PRIMASK, r3
}
 8007126:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2280      	movs	r2, #128	; 0x80
 800712c:	2120      	movs	r1, #32
 800712e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713c:	f3ef 8310 	mrs	r3, PRIMASK
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007144:	2480      	movs	r4, #128	; 0x80
 8007146:	193a      	adds	r2, r7, r4
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	2301      	movs	r3, #1
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2110      	movs	r1, #16
 8007162:	438a      	bics	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	193b      	adds	r3, r7, r4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	f383 8810 	msr	PRIMASK, r3
}
 8007172:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800717a:	183b      	adds	r3, r7, r0
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0011      	movs	r1, r2
 8007182:	0018      	movs	r0, r3
 8007184:	f000 f848 	bl	8007218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007188:	e02c      	b.n	80071e4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800718a:	23a4      	movs	r3, #164	; 0xa4
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2280      	movs	r2, #128	; 0x80
 8007192:	4013      	ands	r3, r2
 8007194:	d00f      	beq.n	80071b6 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007196:	23a0      	movs	r3, #160	; 0xa0
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2280      	movs	r2, #128	; 0x80
 800719e:	4013      	ands	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01e      	beq.n	80071e8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	0010      	movs	r0, r2
 80071b2:	4798      	blx	r3
    }
    return;
 80071b4:	e018      	b.n	80071e8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071b6:	23a4      	movs	r3, #164	; 0xa4
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	4013      	ands	r3, r2
 80071c0:	d013      	beq.n	80071ea <HAL_UART_IRQHandler+0x582>
 80071c2:	23a0      	movs	r3, #160	; 0xa0
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2240      	movs	r2, #64	; 0x40
 80071ca:	4013      	ands	r3, r2
 80071cc:	d00d      	beq.n	80071ea <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 fc64 	bl	8007a9e <UART_EndTransmit_IT>
    return;
 80071d6:	e008      	b.n	80071ea <HAL_UART_IRQHandler+0x582>
      return;
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	e006      	b.n	80071ea <HAL_UART_IRQHandler+0x582>
    return;
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	e004      	b.n	80071ea <HAL_UART_IRQHandler+0x582>
      return;
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	e002      	b.n	80071ea <HAL_UART_IRQHandler+0x582>
      return;
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	e000      	b.n	80071ea <HAL_UART_IRQHandler+0x582>
    return;
 80071e8:	46c0      	nop			; (mov r8, r8)
  }

}
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b02b      	add	sp, #172	; 0xac
 80071ee:	bd90      	pop	{r4, r7, pc}
 80071f0:	fffffeff 	.word	0xfffffeff
 80071f4:	fffffedf 	.word	0xfffffedf

080071f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	46bd      	mov	sp, r7
 8007204:	b002      	add	sp, #8
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b002      	add	sp, #8
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	000a      	movs	r2, r1
 8007222:	1cbb      	adds	r3, r7, #2
 8007224:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007238:	231e      	movs	r3, #30
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a8d      	ldr	r2, [pc, #564]	; (8007494 <UART_SetConfig+0x264>)
 8007260:	4013      	ands	r3, r2
 8007262:	0019      	movs	r1, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	430a      	orrs	r2, r1
 800726c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4a88      	ldr	r2, [pc, #544]	; (8007498 <UART_SetConfig+0x268>)
 8007276:	4013      	ands	r3, r2
 8007278:	0019      	movs	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4a7f      	ldr	r2, [pc, #508]	; (800749c <UART_SetConfig+0x26c>)
 800729e:	4013      	ands	r3, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a7b      	ldr	r2, [pc, #492]	; (80074a0 <UART_SetConfig+0x270>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d127      	bne.n	8007306 <UART_SetConfig+0xd6>
 80072b6:	4b7b      	ldr	r3, [pc, #492]	; (80074a4 <UART_SetConfig+0x274>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	2203      	movs	r2, #3
 80072bc:	4013      	ands	r3, r2
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d00d      	beq.n	80072de <UART_SetConfig+0xae>
 80072c2:	d81b      	bhi.n	80072fc <UART_SetConfig+0xcc>
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d014      	beq.n	80072f2 <UART_SetConfig+0xc2>
 80072c8:	d818      	bhi.n	80072fc <UART_SetConfig+0xcc>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <UART_SetConfig+0xa4>
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d00a      	beq.n	80072e8 <UART_SetConfig+0xb8>
 80072d2:	e013      	b.n	80072fc <UART_SetConfig+0xcc>
 80072d4:	231f      	movs	r3, #31
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e021      	b.n	8007322 <UART_SetConfig+0xf2>
 80072de:	231f      	movs	r3, #31
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	2202      	movs	r2, #2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e01c      	b.n	8007322 <UART_SetConfig+0xf2>
 80072e8:	231f      	movs	r3, #31
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	2204      	movs	r2, #4
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e017      	b.n	8007322 <UART_SetConfig+0xf2>
 80072f2:	231f      	movs	r3, #31
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	2208      	movs	r2, #8
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e012      	b.n	8007322 <UART_SetConfig+0xf2>
 80072fc:	231f      	movs	r3, #31
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	2210      	movs	r2, #16
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e00d      	b.n	8007322 <UART_SetConfig+0xf2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a67      	ldr	r2, [pc, #412]	; (80074a8 <UART_SetConfig+0x278>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d104      	bne.n	800731a <UART_SetConfig+0xea>
 8007310:	231f      	movs	r3, #31
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	e003      	b.n	8007322 <UART_SetConfig+0xf2>
 800731a:	231f      	movs	r3, #31
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	2210      	movs	r2, #16
 8007320:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69da      	ldr	r2, [r3, #28]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	021b      	lsls	r3, r3, #8
 800732a:	429a      	cmp	r2, r3
 800732c:	d15c      	bne.n	80073e8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800732e:	231f      	movs	r3, #31
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b08      	cmp	r3, #8
 8007336:	d015      	beq.n	8007364 <UART_SetConfig+0x134>
 8007338:	dc18      	bgt.n	800736c <UART_SetConfig+0x13c>
 800733a:	2b04      	cmp	r3, #4
 800733c:	d00d      	beq.n	800735a <UART_SetConfig+0x12a>
 800733e:	dc15      	bgt.n	800736c <UART_SetConfig+0x13c>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <UART_SetConfig+0x11a>
 8007344:	2b02      	cmp	r3, #2
 8007346:	d005      	beq.n	8007354 <UART_SetConfig+0x124>
 8007348:	e010      	b.n	800736c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734a:	f7fd ffbf 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 800734e:	0003      	movs	r3, r0
 8007350:	61bb      	str	r3, [r7, #24]
        break;
 8007352:	e012      	b.n	800737a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007354:	4b55      	ldr	r3, [pc, #340]	; (80074ac <UART_SetConfig+0x27c>)
 8007356:	61bb      	str	r3, [r7, #24]
        break;
 8007358:	e00f      	b.n	800737a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735a:	f7fd ff57 	bl	800520c <HAL_RCC_GetSysClockFreq>
 800735e:	0003      	movs	r3, r0
 8007360:	61bb      	str	r3, [r7, #24]
        break;
 8007362:	e00a      	b.n	800737a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007364:	2380      	movs	r3, #128	; 0x80
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	61bb      	str	r3, [r7, #24]
        break;
 800736a:	e006      	b.n	800737a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007370:	231e      	movs	r3, #30
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	2201      	movs	r2, #1
 8007376:	701a      	strb	r2, [r3, #0]
        break;
 8007378:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d100      	bne.n	8007382 <UART_SetConfig+0x152>
 8007380:	e07a      	b.n	8007478 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	005a      	lsls	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	18d2      	adds	r2, r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	0019      	movs	r1, r3
 8007394:	0010      	movs	r0, r2
 8007396:	f7f8 fed3 	bl	8000140 <__udivsi3>
 800739a:	0003      	movs	r3, r0
 800739c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d91c      	bls.n	80073de <UART_SetConfig+0x1ae>
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	2380      	movs	r3, #128	; 0x80
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d217      	bcs.n	80073de <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	200e      	movs	r0, #14
 80073b4:	183b      	adds	r3, r7, r0
 80073b6:	210f      	movs	r1, #15
 80073b8:	438a      	bics	r2, r1
 80073ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2207      	movs	r2, #7
 80073c4:	4013      	ands	r3, r2
 80073c6:	b299      	uxth	r1, r3
 80073c8:	183b      	adds	r3, r7, r0
 80073ca:	183a      	adds	r2, r7, r0
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	183a      	adds	r2, r7, r0
 80073d8:	8812      	ldrh	r2, [r2, #0]
 80073da:	60da      	str	r2, [r3, #12]
 80073dc:	e04c      	b.n	8007478 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80073de:	231e      	movs	r3, #30
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	2201      	movs	r2, #1
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	e047      	b.n	8007478 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073e8:	231f      	movs	r3, #31
 80073ea:	18fb      	adds	r3, r7, r3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d015      	beq.n	800741e <UART_SetConfig+0x1ee>
 80073f2:	dc18      	bgt.n	8007426 <UART_SetConfig+0x1f6>
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d00d      	beq.n	8007414 <UART_SetConfig+0x1e4>
 80073f8:	dc15      	bgt.n	8007426 <UART_SetConfig+0x1f6>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <UART_SetConfig+0x1d4>
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d005      	beq.n	800740e <UART_SetConfig+0x1de>
 8007402:	e010      	b.n	8007426 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007404:	f7fd ff62 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8007408:	0003      	movs	r3, r0
 800740a:	61bb      	str	r3, [r7, #24]
        break;
 800740c:	e012      	b.n	8007434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800740e:	4b27      	ldr	r3, [pc, #156]	; (80074ac <UART_SetConfig+0x27c>)
 8007410:	61bb      	str	r3, [r7, #24]
        break;
 8007412:	e00f      	b.n	8007434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007414:	f7fd fefa 	bl	800520c <HAL_RCC_GetSysClockFreq>
 8007418:	0003      	movs	r3, r0
 800741a:	61bb      	str	r3, [r7, #24]
        break;
 800741c:	e00a      	b.n	8007434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	2380      	movs	r3, #128	; 0x80
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	61bb      	str	r3, [r7, #24]
        break;
 8007424:	e006      	b.n	8007434 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800742a:	231e      	movs	r3, #30
 800742c:	18fb      	adds	r3, r7, r3
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
        break;
 8007432:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01e      	beq.n	8007478 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	085a      	lsrs	r2, r3, #1
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	18d2      	adds	r2, r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	0019      	movs	r1, r3
 800744a:	0010      	movs	r0, r2
 800744c:	f7f8 fe78 	bl	8000140 <__udivsi3>
 8007450:	0003      	movs	r3, r0
 8007452:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d90a      	bls.n	8007470 <UART_SetConfig+0x240>
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	2380      	movs	r3, #128	; 0x80
 800745e:	025b      	lsls	r3, r3, #9
 8007460:	429a      	cmp	r2, r3
 8007462:	d205      	bcs.n	8007470 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e003      	b.n	8007478 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8007470:	231e      	movs	r3, #30
 8007472:	18fb      	adds	r3, r7, r3
 8007474:	2201      	movs	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007484:	231e      	movs	r3, #30
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	781b      	ldrb	r3, [r3, #0]
}
 800748a:	0018      	movs	r0, r3
 800748c:	46bd      	mov	sp, r7
 800748e:	b008      	add	sp, #32
 8007490:	bd80      	pop	{r7, pc}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	ffff69f3 	.word	0xffff69f3
 8007498:	ffffcfff 	.word	0xffffcfff
 800749c:	fffff4ff 	.word	0xfffff4ff
 80074a0:	40013800 	.word	0x40013800
 80074a4:	40021000 	.word	0x40021000
 80074a8:	40004400 	.word	0x40004400
 80074ac:	007a1200 	.word	0x007a1200

080074b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2201      	movs	r2, #1
 80074be:	4013      	ands	r3, r2
 80074c0:	d00b      	beq.n	80074da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4a4a      	ldr	r2, [pc, #296]	; (80075f4 <UART_AdvFeatureConfig+0x144>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	0019      	movs	r1, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2202      	movs	r2, #2
 80074e0:	4013      	ands	r3, r2
 80074e2:	d00b      	beq.n	80074fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4a43      	ldr	r2, [pc, #268]	; (80075f8 <UART_AdvFeatureConfig+0x148>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	0019      	movs	r1, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	2204      	movs	r2, #4
 8007502:	4013      	ands	r3, r2
 8007504:	d00b      	beq.n	800751e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4a3b      	ldr	r2, [pc, #236]	; (80075fc <UART_AdvFeatureConfig+0x14c>)
 800750e:	4013      	ands	r3, r2
 8007510:	0019      	movs	r1, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2208      	movs	r2, #8
 8007524:	4013      	ands	r3, r2
 8007526:	d00b      	beq.n	8007540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	4a34      	ldr	r2, [pc, #208]	; (8007600 <UART_AdvFeatureConfig+0x150>)
 8007530:	4013      	ands	r3, r2
 8007532:	0019      	movs	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2210      	movs	r2, #16
 8007546:	4013      	ands	r3, r2
 8007548:	d00b      	beq.n	8007562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	4a2c      	ldr	r2, [pc, #176]	; (8007604 <UART_AdvFeatureConfig+0x154>)
 8007552:	4013      	ands	r3, r2
 8007554:	0019      	movs	r1, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2220      	movs	r2, #32
 8007568:	4013      	ands	r3, r2
 800756a:	d00b      	beq.n	8007584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	4a25      	ldr	r2, [pc, #148]	; (8007608 <UART_AdvFeatureConfig+0x158>)
 8007574:	4013      	ands	r3, r2
 8007576:	0019      	movs	r1, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2240      	movs	r2, #64	; 0x40
 800758a:	4013      	ands	r3, r2
 800758c:	d01d      	beq.n	80075ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	4a1d      	ldr	r2, [pc, #116]	; (800760c <UART_AdvFeatureConfig+0x15c>)
 8007596:	4013      	ands	r3, r2
 8007598:	0019      	movs	r1, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075aa:	2380      	movs	r3, #128	; 0x80
 80075ac:	035b      	lsls	r3, r3, #13
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d10b      	bne.n	80075ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a15      	ldr	r2, [pc, #84]	; (8007610 <UART_AdvFeatureConfig+0x160>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	0019      	movs	r1, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	2280      	movs	r2, #128	; 0x80
 80075d0:	4013      	ands	r3, r2
 80075d2:	d00b      	beq.n	80075ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4a0e      	ldr	r2, [pc, #56]	; (8007614 <UART_AdvFeatureConfig+0x164>)
 80075dc:	4013      	ands	r3, r2
 80075de:	0019      	movs	r1, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }
}
 80075ec:	46c0      	nop			; (mov r8, r8)
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b002      	add	sp, #8
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	fffdffff 	.word	0xfffdffff
 80075f8:	fffeffff 	.word	0xfffeffff
 80075fc:	fffbffff 	.word	0xfffbffff
 8007600:	ffff7fff 	.word	0xffff7fff
 8007604:	ffffefff 	.word	0xffffefff
 8007608:	ffffdfff 	.word	0xffffdfff
 800760c:	ffefffff 	.word	0xffefffff
 8007610:	ff9fffff 	.word	0xff9fffff
 8007614:	fff7ffff 	.word	0xfff7ffff

08007618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b092      	sub	sp, #72	; 0x48
 800761c:	af02      	add	r7, sp, #8
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2284      	movs	r2, #132	; 0x84
 8007624:	2100      	movs	r1, #0
 8007626:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007628:	f7fc f992 	bl	8003950 <HAL_GetTick>
 800762c:	0003      	movs	r3, r0
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2208      	movs	r2, #8
 8007638:	4013      	ands	r3, r2
 800763a:	2b08      	cmp	r3, #8
 800763c:	d12c      	bne.n	8007698 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800763e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007640:	2280      	movs	r2, #128	; 0x80
 8007642:	0391      	lsls	r1, r2, #14
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4a46      	ldr	r2, [pc, #280]	; (8007760 <UART_CheckIdleState+0x148>)
 8007648:	9200      	str	r2, [sp, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	f000 f88c 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8007650:	1e03      	subs	r3, r0, #0
 8007652:	d021      	beq.n	8007698 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007654:	f3ef 8310 	mrs	r3, PRIMASK
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800765c:	63bb      	str	r3, [r7, #56]	; 0x38
 800765e:	2301      	movs	r3, #1
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	f383 8810 	msr	PRIMASK, r3
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2180      	movs	r1, #128	; 0x80
 8007676:	438a      	bics	r2, r1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	f383 8810 	msr	PRIMASK, r3
}
 8007684:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2278      	movs	r2, #120	; 0x78
 8007690:	2100      	movs	r1, #0
 8007692:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e05f      	b.n	8007758 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2204      	movs	r2, #4
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d146      	bne.n	8007734 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a8:	2280      	movs	r2, #128	; 0x80
 80076aa:	03d1      	lsls	r1, r2, #15
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4a2c      	ldr	r2, [pc, #176]	; (8007760 <UART_CheckIdleState+0x148>)
 80076b0:	9200      	str	r2, [sp, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f000 f858 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 80076b8:	1e03      	subs	r3, r0, #0
 80076ba:	d03b      	beq.n	8007734 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076bc:	f3ef 8310 	mrs	r3, PRIMASK
 80076c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80076c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
 80076c6:	2301      	movs	r3, #1
 80076c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f383 8810 	msr	PRIMASK, r3
}
 80076d0:	46c0      	nop			; (mov r8, r8)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4921      	ldr	r1, [pc, #132]	; (8007764 <UART_CheckIdleState+0x14c>)
 80076de:	400a      	ands	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f383 8810 	msr	PRIMASK, r3
}
 80076ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ee:	f3ef 8310 	mrs	r3, PRIMASK
 80076f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80076f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30
 80076f8:	2301      	movs	r3, #1
 80076fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f383 8810 	msr	PRIMASK, r3
}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2101      	movs	r1, #1
 8007710:	438a      	bics	r2, r1
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f383 8810 	msr	PRIMASK, r3
}
 800771e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	2120      	movs	r1, #32
 8007726:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2278      	movs	r2, #120	; 0x78
 800772c:	2100      	movs	r1, #0
 800772e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e011      	b.n	8007758 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	2120      	movs	r1, #32
 8007740:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2278      	movs	r2, #120	; 0x78
 8007752:	2100      	movs	r1, #0
 8007754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b010      	add	sp, #64	; 0x40
 800775e:	bd80      	pop	{r7, pc}
 8007760:	01ffffff 	.word	0x01ffffff
 8007764:	fffffedf 	.word	0xfffffedf

08007768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	1dfb      	adds	r3, r7, #7
 8007776:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007778:	e04b      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	3301      	adds	r3, #1
 800777e:	d048      	beq.n	8007812 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007780:	f7fc f8e6 	bl	8003950 <HAL_GetTick>
 8007784:	0002      	movs	r2, r0
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d302      	bcc.n	8007796 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e04b      	b.n	8007832 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2204      	movs	r2, #4
 80077a2:	4013      	ands	r3, r2
 80077a4:	d035      	beq.n	8007812 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	2208      	movs	r2, #8
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d111      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2208      	movs	r2, #8
 80077ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	0018      	movs	r0, r3
 80077c0:	f000 f8f2 	bl	80079a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2284      	movs	r2, #132	; 0x84
 80077c8:	2108      	movs	r1, #8
 80077ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2278      	movs	r2, #120	; 0x78
 80077d0:	2100      	movs	r1, #0
 80077d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e02c      	b.n	8007832 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69da      	ldr	r2, [r3, #28]
 80077de:	2380      	movs	r3, #128	; 0x80
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	401a      	ands	r2, r3
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d112      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2280      	movs	r2, #128	; 0x80
 80077f2:	0112      	lsls	r2, r2, #4
 80077f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	0018      	movs	r0, r3
 80077fa:	f000 f8d5 	bl	80079a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2284      	movs	r2, #132	; 0x84
 8007802:	2120      	movs	r1, #32
 8007804:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2278      	movs	r2, #120	; 0x78
 800780a:	2100      	movs	r1, #0
 800780c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e00f      	b.n	8007832 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4013      	ands	r3, r2
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	425a      	negs	r2, r3
 8007822:	4153      	adcs	r3, r2
 8007824:	b2db      	uxtb	r3, r3
 8007826:	001a      	movs	r2, r3
 8007828:	1dfb      	adds	r3, r7, #7
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d0a4      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b004      	add	sp, #16
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b090      	sub	sp, #64	; 0x40
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	1dba      	adds	r2, r7, #6
 8007854:	2158      	movs	r1, #88	; 0x58
 8007856:	8812      	ldrh	r2, [r2, #0]
 8007858:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1dba      	adds	r2, r7, #6
 800785e:	215a      	movs	r1, #90	; 0x5a
 8007860:	8812      	ldrh	r2, [r2, #0]
 8007862:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	2380      	movs	r3, #128	; 0x80
 8007870:	015b      	lsls	r3, r3, #5
 8007872:	429a      	cmp	r2, r3
 8007874:	d10d      	bne.n	8007892 <UART_Start_Receive_IT+0x56>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <UART_Start_Receive_IT+0x4c>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	225c      	movs	r2, #92	; 0x5c
 8007882:	4946      	ldr	r1, [pc, #280]	; (800799c <UART_Start_Receive_IT+0x160>)
 8007884:	5299      	strh	r1, [r3, r2]
 8007886:	e01a      	b.n	80078be <UART_Start_Receive_IT+0x82>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	225c      	movs	r2, #92	; 0x5c
 800788c:	21ff      	movs	r1, #255	; 0xff
 800788e:	5299      	strh	r1, [r3, r2]
 8007890:	e015      	b.n	80078be <UART_Start_Receive_IT+0x82>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <UART_Start_Receive_IT+0x7a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <UART_Start_Receive_IT+0x70>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	225c      	movs	r2, #92	; 0x5c
 80078a6:	21ff      	movs	r1, #255	; 0xff
 80078a8:	5299      	strh	r1, [r3, r2]
 80078aa:	e008      	b.n	80078be <UART_Start_Receive_IT+0x82>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	225c      	movs	r2, #92	; 0x5c
 80078b0:	217f      	movs	r1, #127	; 0x7f
 80078b2:	5299      	strh	r1, [r3, r2]
 80078b4:	e003      	b.n	80078be <UART_Start_Receive_IT+0x82>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	225c      	movs	r2, #92	; 0x5c
 80078ba:	2100      	movs	r1, #0
 80078bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2284      	movs	r2, #132	; 0x84
 80078c2:	2100      	movs	r1, #0
 80078c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2280      	movs	r2, #128	; 0x80
 80078ca:	2122      	movs	r1, #34	; 0x22
 80078cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ce:	f3ef 8310 	mrs	r3, PRIMASK
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d8:	2301      	movs	r3, #1
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	f383 8810 	msr	PRIMASK, r3
}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2101      	movs	r1, #1
 80078f0:	430a      	orrs	r2, r1
 80078f2:	609a      	str	r2, [r3, #8]
 80078f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	f383 8810 	msr	PRIMASK, r3
}
 80078fe:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	015b      	lsls	r3, r3, #5
 8007908:	429a      	cmp	r2, r3
 800790a:	d107      	bne.n	800791c <UART_Start_Receive_IT+0xe0>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4a22      	ldr	r2, [pc, #136]	; (80079a0 <UART_Start_Receive_IT+0x164>)
 8007918:	669a      	str	r2, [r3, #104]	; 0x68
 800791a:	e002      	b.n	8007922 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a21      	ldr	r2, [pc, #132]	; (80079a4 <UART_Start_Receive_IT+0x168>)
 8007920:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d019      	beq.n	800795e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792a:	f3ef 8310 	mrs	r3, PRIMASK
 800792e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007930:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
 8007934:	2301      	movs	r3, #1
 8007936:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2190      	movs	r1, #144	; 0x90
 800794c:	0049      	lsls	r1, r1, #1
 800794e:	430a      	orrs	r2, r1
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	f383 8810 	msr	PRIMASK, r3
}
 800795c:	e018      	b.n	8007990 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800795e:	f3ef 8310 	mrs	r3, PRIMASK
 8007962:	613b      	str	r3, [r7, #16]
  return(result);
 8007964:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007966:	63bb      	str	r3, [r7, #56]	; 0x38
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2120      	movs	r1, #32
 8007980:	430a      	orrs	r2, r1
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f383 8810 	msr	PRIMASK, r3
}
 800798e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	0018      	movs	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	b010      	add	sp, #64	; 0x40
 8007998:	bd80      	pop	{r7, pc}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	000001ff 	.word	0x000001ff
 80079a0:	08007cad 	.word	0x08007cad
 80079a4:	08007af5 	.word	0x08007af5

080079a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08e      	sub	sp, #56	; 0x38
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b0:	f3ef 8310 	mrs	r3, PRIMASK
 80079b4:	617b      	str	r3, [r7, #20]
  return(result);
 80079b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ba:	2301      	movs	r3, #1
 80079bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f383 8810 	msr	PRIMASK, r3
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4926      	ldr	r1, [pc, #152]	; (8007a6c <UART_EndRxTransfer+0xc4>)
 80079d2:	400a      	ands	r2, r1
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f383 8810 	msr	PRIMASK, r3
}
 80079e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e2:	f3ef 8310 	mrs	r3, PRIMASK
 80079e6:	623b      	str	r3, [r7, #32]
  return(result);
 80079e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2101      	movs	r1, #1
 8007a04:	438a      	bics	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d118      	bne.n	8007a4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a26:	2301      	movs	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f383 8810 	msr	PRIMASK, r3
}
 8007a30:	46c0      	nop			; (mov r8, r8)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2110      	movs	r1, #16
 8007a3e:	438a      	bics	r2, r1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f383 8810 	msr	PRIMASK, r3
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2280      	movs	r2, #128	; 0x80
 8007a52:	2120      	movs	r1, #32
 8007a54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b00e      	add	sp, #56	; 0x38
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	46c0      	nop			; (mov r8, r8)
 8007a6c:	fffffedf 	.word	0xfffffedf

08007a70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	225a      	movs	r2, #90	; 0x5a
 8007a82:	2100      	movs	r1, #0
 8007a84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2252      	movs	r2, #82	; 0x52
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7ff fbb9 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b004      	add	sp, #16
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f383 8810 	msr	PRIMASK, r3
}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2140      	movs	r1, #64	; 0x40
 8007ac8:	438a      	bics	r2, r1
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f383 8810 	msr	PRIMASK, r3
}
 8007ad6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2220      	movs	r2, #32
 8007adc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f7ff fb86 	bl	80071f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aec:	46c0      	nop			; (mov r8, r8)
 8007aee:	46bd      	mov	sp, r7
 8007af0:	b006      	add	sp, #24
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b094      	sub	sp, #80	; 0x50
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007afc:	204e      	movs	r0, #78	; 0x4e
 8007afe:	183b      	adds	r3, r7, r0
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	215c      	movs	r1, #92	; 0x5c
 8007b04:	5a52      	ldrh	r2, [r2, r1]
 8007b06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2280      	movs	r2, #128	; 0x80
 8007b0c:	589b      	ldr	r3, [r3, r2]
 8007b0e:	2b22      	cmp	r3, #34	; 0x22
 8007b10:	d000      	beq.n	8007b14 <UART_RxISR_8BIT+0x20>
 8007b12:	e0ba      	b.n	8007c8a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	214c      	movs	r1, #76	; 0x4c
 8007b1a:	187b      	adds	r3, r7, r1
 8007b1c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007b1e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b20:	187b      	adds	r3, r7, r1
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	183b      	adds	r3, r7, r0
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b2d9      	uxtb	r1, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	400a      	ands	r2, r1
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	225a      	movs	r2, #90	; 0x5a
 8007b44:	5a9b      	ldrh	r3, [r3, r2]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b299      	uxth	r1, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	225a      	movs	r2, #90	; 0x5a
 8007b50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	225a      	movs	r2, #90	; 0x5a
 8007b56:	5a9b      	ldrh	r3, [r3, r2]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d000      	beq.n	8007b60 <UART_RxISR_8BIT+0x6c>
 8007b5e:	e09c      	b.n	8007c9a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b60:	f3ef 8310 	mrs	r3, PRIMASK
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	f383 8810 	msr	PRIMASK, r3
}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4948      	ldr	r1, [pc, #288]	; (8007ca4 <UART_RxISR_8BIT+0x1b0>)
 8007b82:	400a      	ands	r2, r1
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	f383 8810 	msr	PRIMASK, r3
}
 8007b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b92:	f3ef 8310 	mrs	r3, PRIMASK
 8007b96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	f383 8810 	msr	PRIMASK, r3
}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	438a      	bics	r2, r1
 8007bb6:	609a      	str	r2, [r3, #8]
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	f383 8810 	msr	PRIMASK, r3
}
 8007bc2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2280      	movs	r2, #128	; 0x80
 8007bc8:	2120      	movs	r1, #32
 8007bca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	2380      	movs	r3, #128	; 0x80
 8007be0:	041b      	lsls	r3, r3, #16
 8007be2:	4013      	ands	r3, r2
 8007be4:	d018      	beq.n	8007c18 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bea:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bec:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bee:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f383 8810 	msr	PRIMASK, r3
}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4928      	ldr	r1, [pc, #160]	; (8007ca8 <UART_RxISR_8BIT+0x1b4>)
 8007c08:	400a      	ands	r2, r1
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	f383 8810 	msr	PRIMASK, r3
}
 8007c16:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d12f      	bne.n	8007c80 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c26:	f3ef 8310 	mrs	r3, PRIMASK
 8007c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c2c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c30:	2301      	movs	r3, #1
 8007c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f383 8810 	msr	PRIMASK, r3
}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2110      	movs	r1, #16
 8007c48:	438a      	bics	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f383 8810 	msr	PRIMASK, r3
}
 8007c56:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d103      	bne.n	8007c6e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2258      	movs	r2, #88	; 0x58
 8007c72:	5a9a      	ldrh	r2, [r3, r2]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	0011      	movs	r1, r2
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f7ff facd 	bl	8007218 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c7e:	e00c      	b.n	8007c9a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	0018      	movs	r0, r3
 8007c84:	f7fa fd70 	bl	8002768 <HAL_UART_RxCpltCallback>
}
 8007c88:	e007      	b.n	8007c9a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2108      	movs	r1, #8
 8007c96:	430a      	orrs	r2, r1
 8007c98:	619a      	str	r2, [r3, #24]
}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b014      	add	sp, #80	; 0x50
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	fffffedf 	.word	0xfffffedf
 8007ca8:	fbffffff 	.word	0xfbffffff

08007cac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b094      	sub	sp, #80	; 0x50
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007cb4:	204e      	movs	r0, #78	; 0x4e
 8007cb6:	183b      	adds	r3, r7, r0
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	215c      	movs	r1, #92	; 0x5c
 8007cbc:	5a52      	ldrh	r2, [r2, r1]
 8007cbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	589b      	ldr	r3, [r3, r2]
 8007cc6:	2b22      	cmp	r3, #34	; 0x22
 8007cc8:	d000      	beq.n	8007ccc <UART_RxISR_16BIT+0x20>
 8007cca:	e0ba      	b.n	8007e42 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	214c      	movs	r1, #76	; 0x4c
 8007cd2:	187b      	adds	r3, r7, r1
 8007cd4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007cd6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cdc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	183a      	adds	r2, r7, r0
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	8812      	ldrh	r2, [r2, #0]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	1c9a      	adds	r2, r3, #2
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	225a      	movs	r2, #90	; 0x5a
 8007cfc:	5a9b      	ldrh	r3, [r3, r2]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b299      	uxth	r1, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	225a      	movs	r2, #90	; 0x5a
 8007d08:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	225a      	movs	r2, #90	; 0x5a
 8007d0e:	5a9b      	ldrh	r3, [r3, r2]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d000      	beq.n	8007d18 <UART_RxISR_16BIT+0x6c>
 8007d16:	e09c      	b.n	8007e52 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d18:	f3ef 8310 	mrs	r3, PRIMASK
 8007d1c:	623b      	str	r3, [r7, #32]
  return(result);
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
 8007d22:	2301      	movs	r3, #1
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	f383 8810 	msr	PRIMASK, r3
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4948      	ldr	r1, [pc, #288]	; (8007e5c <UART_RxISR_16BIT+0x1b0>)
 8007d3a:	400a      	ands	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	f383 8810 	msr	PRIMASK, r3
}
 8007d48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d52:	643b      	str	r3, [r7, #64]	; 0x40
 8007d54:	2301      	movs	r3, #1
 8007d56:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	f383 8810 	msr	PRIMASK, r3
}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	438a      	bics	r2, r1
 8007d6e:	609a      	str	r2, [r3, #8]
 8007d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	f383 8810 	msr	PRIMASK, r3
}
 8007d7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2280      	movs	r2, #128	; 0x80
 8007d80:	2120      	movs	r1, #32
 8007d82:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	041b      	lsls	r3, r3, #16
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d018      	beq.n	8007dd0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007da2:	617b      	str	r3, [r7, #20]
  return(result);
 8007da4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da8:	2301      	movs	r3, #1
 8007daa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f383 8810 	msr	PRIMASK, r3
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4928      	ldr	r1, [pc, #160]	; (8007e60 <UART_RxISR_16BIT+0x1b4>)
 8007dc0:	400a      	ands	r2, r1
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f383 8810 	msr	PRIMASK, r3
}
 8007dce:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d12f      	bne.n	8007e38 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dde:	f3ef 8310 	mrs	r3, PRIMASK
 8007de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007de4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007de8:	2301      	movs	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f383 8810 	msr	PRIMASK, r3
}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2110      	movs	r1, #16
 8007e00:	438a      	bics	r2, r1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f383 8810 	msr	PRIMASK, r3
}
 8007e0e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	2210      	movs	r2, #16
 8007e18:	4013      	ands	r3, r2
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d103      	bne.n	8007e26 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2210      	movs	r2, #16
 8007e24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2258      	movs	r2, #88	; 0x58
 8007e2a:	5a9a      	ldrh	r2, [r3, r2]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0011      	movs	r1, r2
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7ff f9f1 	bl	8007218 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e36:	e00c      	b.n	8007e52 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f7fa fc94 	bl	8002768 <HAL_UART_RxCpltCallback>
}
 8007e40:	e007      	b.n	8007e52 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2108      	movs	r1, #8
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]
}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	46bd      	mov	sp, r7
 8007e56:	b014      	add	sp, #80	; 0x50
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	fffffedf 	.word	0xfffffedf
 8007e60:	fbffffff 	.word	0xfbffffff

08007e64 <__errno>:
 8007e64:	4b01      	ldr	r3, [pc, #4]	; (8007e6c <__errno+0x8>)
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	4770      	bx	lr
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	20000024 	.word	0x20000024

08007e70 <__libc_init_array>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	2600      	movs	r6, #0
 8007e74:	4d0c      	ldr	r5, [pc, #48]	; (8007ea8 <__libc_init_array+0x38>)
 8007e76:	4c0d      	ldr	r4, [pc, #52]	; (8007eac <__libc_init_array+0x3c>)
 8007e78:	1b64      	subs	r4, r4, r5
 8007e7a:	10a4      	asrs	r4, r4, #2
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	d109      	bne.n	8007e94 <__libc_init_array+0x24>
 8007e80:	2600      	movs	r6, #0
 8007e82:	f004 fd65 	bl	800c950 <_init>
 8007e86:	4d0a      	ldr	r5, [pc, #40]	; (8007eb0 <__libc_init_array+0x40>)
 8007e88:	4c0a      	ldr	r4, [pc, #40]	; (8007eb4 <__libc_init_array+0x44>)
 8007e8a:	1b64      	subs	r4, r4, r5
 8007e8c:	10a4      	asrs	r4, r4, #2
 8007e8e:	42a6      	cmp	r6, r4
 8007e90:	d105      	bne.n	8007e9e <__libc_init_array+0x2e>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	00b3      	lsls	r3, r6, #2
 8007e96:	58eb      	ldr	r3, [r5, r3]
 8007e98:	4798      	blx	r3
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7ee      	b.n	8007e7c <__libc_init_array+0xc>
 8007e9e:	00b3      	lsls	r3, r6, #2
 8007ea0:	58eb      	ldr	r3, [r5, r3]
 8007ea2:	4798      	blx	r3
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7f2      	b.n	8007e8e <__libc_init_array+0x1e>
 8007ea8:	0800cf14 	.word	0x0800cf14
 8007eac:	0800cf14 	.word	0x0800cf14
 8007eb0:	0800cf14 	.word	0x0800cf14
 8007eb4:	0800cf18 	.word	0x0800cf18

08007eb8 <memcpy>:
 8007eb8:	2300      	movs	r3, #0
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d100      	bne.n	8007ec2 <memcpy+0xa>
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	5ccc      	ldrb	r4, [r1, r3]
 8007ec4:	54c4      	strb	r4, [r0, r3]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	e7f8      	b.n	8007ebc <memcpy+0x4>

08007eca <memset>:
 8007eca:	0003      	movs	r3, r0
 8007ecc:	1882      	adds	r2, r0, r2
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d100      	bne.n	8007ed4 <memset+0xa>
 8007ed2:	4770      	bx	lr
 8007ed4:	7019      	strb	r1, [r3, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	e7f9      	b.n	8007ece <memset+0x4>

08007eda <__cvt>:
 8007eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007edc:	001e      	movs	r6, r3
 8007ede:	2300      	movs	r3, #0
 8007ee0:	0014      	movs	r4, r2
 8007ee2:	b08b      	sub	sp, #44	; 0x2c
 8007ee4:	429e      	cmp	r6, r3
 8007ee6:	da04      	bge.n	8007ef2 <__cvt+0x18>
 8007ee8:	2180      	movs	r1, #128	; 0x80
 8007eea:	0609      	lsls	r1, r1, #24
 8007eec:	1873      	adds	r3, r6, r1
 8007eee:	001e      	movs	r6, r3
 8007ef0:	232d      	movs	r3, #45	; 0x2d
 8007ef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ef4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ef6:	7013      	strb	r3, [r2, #0]
 8007ef8:	2320      	movs	r3, #32
 8007efa:	2203      	movs	r2, #3
 8007efc:	439f      	bics	r7, r3
 8007efe:	2f46      	cmp	r7, #70	; 0x46
 8007f00:	d007      	beq.n	8007f12 <__cvt+0x38>
 8007f02:	003b      	movs	r3, r7
 8007f04:	3b45      	subs	r3, #69	; 0x45
 8007f06:	4259      	negs	r1, r3
 8007f08:	414b      	adcs	r3, r1
 8007f0a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007f0c:	3a01      	subs	r2, #1
 8007f0e:	18cb      	adds	r3, r1, r3
 8007f10:	9310      	str	r3, [sp, #64]	; 0x40
 8007f12:	ab09      	add	r3, sp, #36	; 0x24
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	ab08      	add	r3, sp, #32
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f1c:	9200      	str	r2, [sp, #0]
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f22:	0022      	movs	r2, r4
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	0033      	movs	r3, r6
 8007f28:	f001 fdde 	bl	8009ae8 <_dtoa_r>
 8007f2c:	0005      	movs	r5, r0
 8007f2e:	2f47      	cmp	r7, #71	; 0x47
 8007f30:	d102      	bne.n	8007f38 <__cvt+0x5e>
 8007f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f34:	07db      	lsls	r3, r3, #31
 8007f36:	d528      	bpl.n	8007f8a <__cvt+0xb0>
 8007f38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f3a:	18eb      	adds	r3, r5, r3
 8007f3c:	9307      	str	r3, [sp, #28]
 8007f3e:	2f46      	cmp	r7, #70	; 0x46
 8007f40:	d114      	bne.n	8007f6c <__cvt+0x92>
 8007f42:	782b      	ldrb	r3, [r5, #0]
 8007f44:	2b30      	cmp	r3, #48	; 0x30
 8007f46:	d10c      	bne.n	8007f62 <__cvt+0x88>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	0020      	movs	r0, r4
 8007f4e:	0031      	movs	r1, r6
 8007f50:	f7f8 fa7c 	bl	800044c <__aeabi_dcmpeq>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d104      	bne.n	8007f62 <__cvt+0x88>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f5c:	1a9b      	subs	r3, r3, r2
 8007f5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f64:	9a07      	ldr	r2, [sp, #28]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	18d3      	adds	r3, r2, r3
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	0020      	movs	r0, r4
 8007f72:	0031      	movs	r1, r6
 8007f74:	f7f8 fa6a 	bl	800044c <__aeabi_dcmpeq>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d001      	beq.n	8007f80 <__cvt+0xa6>
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f80:	2230      	movs	r2, #48	; 0x30
 8007f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f84:	9907      	ldr	r1, [sp, #28]
 8007f86:	428b      	cmp	r3, r1
 8007f88:	d306      	bcc.n	8007f98 <__cvt+0xbe>
 8007f8a:	0028      	movs	r0, r5
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f90:	1b5b      	subs	r3, r3, r5
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	b00b      	add	sp, #44	; 0x2c
 8007f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f98:	1c59      	adds	r1, r3, #1
 8007f9a:	9109      	str	r1, [sp, #36]	; 0x24
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e7f0      	b.n	8007f82 <__cvt+0xa8>

08007fa0 <__exponent>:
 8007fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa2:	1c83      	adds	r3, r0, #2
 8007fa4:	b087      	sub	sp, #28
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	0005      	movs	r5, r0
 8007faa:	000c      	movs	r4, r1
 8007fac:	232b      	movs	r3, #43	; 0x2b
 8007fae:	7002      	strb	r2, [r0, #0]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	da01      	bge.n	8007fb8 <__exponent+0x18>
 8007fb4:	424c      	negs	r4, r1
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	706b      	strb	r3, [r5, #1]
 8007fba:	2c09      	cmp	r4, #9
 8007fbc:	dd31      	ble.n	8008022 <__exponent+0x82>
 8007fbe:	270a      	movs	r7, #10
 8007fc0:	ab04      	add	r3, sp, #16
 8007fc2:	1dde      	adds	r6, r3, #7
 8007fc4:	0020      	movs	r0, r4
 8007fc6:	0039      	movs	r1, r7
 8007fc8:	9601      	str	r6, [sp, #4]
 8007fca:	f7f8 fa29 	bl	8000420 <__aeabi_idivmod>
 8007fce:	3e01      	subs	r6, #1
 8007fd0:	3130      	adds	r1, #48	; 0x30
 8007fd2:	0020      	movs	r0, r4
 8007fd4:	7031      	strb	r1, [r6, #0]
 8007fd6:	0039      	movs	r1, r7
 8007fd8:	9402      	str	r4, [sp, #8]
 8007fda:	f7f8 f93b 	bl	8000254 <__divsi3>
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	0004      	movs	r4, r0
 8007fe2:	2b63      	cmp	r3, #99	; 0x63
 8007fe4:	dcee      	bgt.n	8007fc4 <__exponent+0x24>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	3430      	adds	r4, #48	; 0x30
 8007fea:	1e9a      	subs	r2, r3, #2
 8007fec:	0013      	movs	r3, r2
 8007fee:	9903      	ldr	r1, [sp, #12]
 8007ff0:	7014      	strb	r4, [r2, #0]
 8007ff2:	a804      	add	r0, sp, #16
 8007ff4:	3007      	adds	r0, #7
 8007ff6:	4298      	cmp	r0, r3
 8007ff8:	d80e      	bhi.n	8008018 <__exponent+0x78>
 8007ffa:	ab04      	add	r3, sp, #16
 8007ffc:	3307      	adds	r3, #7
 8007ffe:	2000      	movs	r0, #0
 8008000:	429a      	cmp	r2, r3
 8008002:	d804      	bhi.n	800800e <__exponent+0x6e>
 8008004:	ab04      	add	r3, sp, #16
 8008006:	3009      	adds	r0, #9
 8008008:	18c0      	adds	r0, r0, r3
 800800a:	9b01      	ldr	r3, [sp, #4]
 800800c:	1ac0      	subs	r0, r0, r3
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	1818      	adds	r0, r3, r0
 8008012:	1b40      	subs	r0, r0, r5
 8008014:	b007      	add	sp, #28
 8008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008018:	7818      	ldrb	r0, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	7008      	strb	r0, [r1, #0]
 800801e:	3101      	adds	r1, #1
 8008020:	e7e7      	b.n	8007ff2 <__exponent+0x52>
 8008022:	2330      	movs	r3, #48	; 0x30
 8008024:	18e4      	adds	r4, r4, r3
 8008026:	70ab      	strb	r3, [r5, #2]
 8008028:	1d28      	adds	r0, r5, #4
 800802a:	70ec      	strb	r4, [r5, #3]
 800802c:	e7f1      	b.n	8008012 <__exponent+0x72>
	...

08008030 <_printf_float>:
 8008030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008032:	b095      	sub	sp, #84	; 0x54
 8008034:	000c      	movs	r4, r1
 8008036:	9209      	str	r2, [sp, #36]	; 0x24
 8008038:	001e      	movs	r6, r3
 800803a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800803c:	0007      	movs	r7, r0
 800803e:	f002 ffe3 	bl	800b008 <_localeconv_r>
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	0018      	movs	r0, r3
 8008046:	930c      	str	r3, [sp, #48]	; 0x30
 8008048:	f7f8 f85e 	bl	8000108 <strlen>
 800804c:	2300      	movs	r3, #0
 800804e:	9312      	str	r3, [sp, #72]	; 0x48
 8008050:	7e23      	ldrb	r3, [r4, #24]
 8008052:	2207      	movs	r2, #7
 8008054:	930a      	str	r3, [sp, #40]	; 0x28
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	900e      	str	r0, [sp, #56]	; 0x38
 800805a:	930d      	str	r3, [sp, #52]	; 0x34
 800805c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	05c9      	lsls	r1, r1, #23
 8008062:	d547      	bpl.n	80080f4 <_printf_float+0xc4>
 8008064:	189b      	adds	r3, r3, r2
 8008066:	4393      	bics	r3, r2
 8008068:	001a      	movs	r2, r3
 800806a:	3208      	adds	r2, #8
 800806c:	602a      	str	r2, [r5, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	64a2      	str	r2, [r4, #72]	; 0x48
 8008074:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008076:	2201      	movs	r2, #1
 8008078:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800807a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800807c:	930b      	str	r3, [sp, #44]	; 0x2c
 800807e:	006b      	lsls	r3, r5, #1
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	930f      	str	r3, [sp, #60]	; 0x3c
 8008084:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008086:	4ba7      	ldr	r3, [pc, #668]	; (8008324 <_printf_float+0x2f4>)
 8008088:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800808a:	4252      	negs	r2, r2
 800808c:	f7f9 ffb8 	bl	8002000 <__aeabi_dcmpun>
 8008090:	2800      	cmp	r0, #0
 8008092:	d131      	bne.n	80080f8 <_printf_float+0xc8>
 8008094:	2201      	movs	r2, #1
 8008096:	4ba3      	ldr	r3, [pc, #652]	; (8008324 <_printf_float+0x2f4>)
 8008098:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800809a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800809c:	4252      	negs	r2, r2
 800809e:	f7f8 f9e5 	bl	800046c <__aeabi_dcmple>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d128      	bne.n	80080f8 <_printf_float+0xc8>
 80080a6:	2200      	movs	r2, #0
 80080a8:	2300      	movs	r3, #0
 80080aa:	0029      	movs	r1, r5
 80080ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80080ae:	f7f8 f9d3 	bl	8000458 <__aeabi_dcmplt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d003      	beq.n	80080be <_printf_float+0x8e>
 80080b6:	0023      	movs	r3, r4
 80080b8:	222d      	movs	r2, #45	; 0x2d
 80080ba:	3343      	adds	r3, #67	; 0x43
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c0:	4d99      	ldr	r5, [pc, #612]	; (8008328 <_printf_float+0x2f8>)
 80080c2:	2b47      	cmp	r3, #71	; 0x47
 80080c4:	d900      	bls.n	80080c8 <_printf_float+0x98>
 80080c6:	4d99      	ldr	r5, [pc, #612]	; (800832c <_printf_float+0x2fc>)
 80080c8:	2303      	movs	r3, #3
 80080ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	3301      	adds	r3, #1
 80080d0:	439a      	bics	r2, r3
 80080d2:	2300      	movs	r3, #0
 80080d4:	6022      	str	r2, [r4, #0]
 80080d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080da:	0021      	movs	r1, r4
 80080dc:	0038      	movs	r0, r7
 80080de:	9600      	str	r6, [sp, #0]
 80080e0:	aa13      	add	r2, sp, #76	; 0x4c
 80080e2:	f000 f9e7 	bl	80084b4 <_printf_common>
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	d000      	beq.n	80080ec <_printf_float+0xbc>
 80080ea:	e0a2      	b.n	8008232 <_printf_float+0x202>
 80080ec:	2001      	movs	r0, #1
 80080ee:	4240      	negs	r0, r0
 80080f0:	b015      	add	sp, #84	; 0x54
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f4:	3307      	adds	r3, #7
 80080f6:	e7b6      	b.n	8008066 <_printf_float+0x36>
 80080f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080fa:	002b      	movs	r3, r5
 80080fc:	0010      	movs	r0, r2
 80080fe:	0029      	movs	r1, r5
 8008100:	f7f9 ff7e 	bl	8002000 <__aeabi_dcmpun>
 8008104:	2800      	cmp	r0, #0
 8008106:	d00b      	beq.n	8008120 <_printf_float+0xf0>
 8008108:	2d00      	cmp	r5, #0
 800810a:	da03      	bge.n	8008114 <_printf_float+0xe4>
 800810c:	0023      	movs	r3, r4
 800810e:	222d      	movs	r2, #45	; 0x2d
 8008110:	3343      	adds	r3, #67	; 0x43
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	4d86      	ldr	r5, [pc, #536]	; (8008330 <_printf_float+0x300>)
 8008118:	2b47      	cmp	r3, #71	; 0x47
 800811a:	d9d5      	bls.n	80080c8 <_printf_float+0x98>
 800811c:	4d85      	ldr	r5, [pc, #532]	; (8008334 <_printf_float+0x304>)
 800811e:	e7d3      	b.n	80080c8 <_printf_float+0x98>
 8008120:	2220      	movs	r2, #32
 8008122:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008124:	6863      	ldr	r3, [r4, #4]
 8008126:	4391      	bics	r1, r2
 8008128:	910f      	str	r1, [sp, #60]	; 0x3c
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	d149      	bne.n	80081c2 <_printf_float+0x192>
 800812e:	3307      	adds	r3, #7
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	2380      	movs	r3, #128	; 0x80
 8008134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	4313      	orrs	r3, r2
 800813a:	2200      	movs	r2, #0
 800813c:	9206      	str	r2, [sp, #24]
 800813e:	aa12      	add	r2, sp, #72	; 0x48
 8008140:	9205      	str	r2, [sp, #20]
 8008142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008144:	a908      	add	r1, sp, #32
 8008146:	9204      	str	r2, [sp, #16]
 8008148:	aa11      	add	r2, sp, #68	; 0x44
 800814a:	9203      	str	r2, [sp, #12]
 800814c:	2223      	movs	r2, #35	; 0x23
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	6863      	ldr	r3, [r4, #4]
 8008154:	1852      	adds	r2, r2, r1
 8008156:	9202      	str	r2, [sp, #8]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	0038      	movs	r0, r7
 800815c:	002b      	movs	r3, r5
 800815e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008160:	f7ff febb 	bl	8007eda <__cvt>
 8008164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008166:	0005      	movs	r5, r0
 8008168:	9911      	ldr	r1, [sp, #68]	; 0x44
 800816a:	2b47      	cmp	r3, #71	; 0x47
 800816c:	d108      	bne.n	8008180 <_printf_float+0x150>
 800816e:	1ccb      	adds	r3, r1, #3
 8008170:	db02      	blt.n	8008178 <_printf_float+0x148>
 8008172:	6863      	ldr	r3, [r4, #4]
 8008174:	4299      	cmp	r1, r3
 8008176:	dd48      	ble.n	800820a <_printf_float+0x1da>
 8008178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800817a:	3b02      	subs	r3, #2
 800817c:	b2db      	uxtb	r3, r3
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008182:	2b65      	cmp	r3, #101	; 0x65
 8008184:	d824      	bhi.n	80081d0 <_printf_float+0x1a0>
 8008186:	0020      	movs	r0, r4
 8008188:	001a      	movs	r2, r3
 800818a:	3901      	subs	r1, #1
 800818c:	3050      	adds	r0, #80	; 0x50
 800818e:	9111      	str	r1, [sp, #68]	; 0x44
 8008190:	f7ff ff06 	bl	8007fa0 <__exponent>
 8008194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008196:	900b      	str	r0, [sp, #44]	; 0x2c
 8008198:	1813      	adds	r3, r2, r0
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	2a01      	cmp	r2, #1
 800819e:	dc02      	bgt.n	80081a6 <_printf_float+0x176>
 80081a0:	6822      	ldr	r2, [r4, #0]
 80081a2:	07d2      	lsls	r2, r2, #31
 80081a4:	d501      	bpl.n	80081aa <_printf_float+0x17a>
 80081a6:	3301      	adds	r3, #1
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	2323      	movs	r3, #35	; 0x23
 80081ac:	aa08      	add	r2, sp, #32
 80081ae:	189b      	adds	r3, r3, r2
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d100      	bne.n	80081b8 <_printf_float+0x188>
 80081b6:	e78f      	b.n	80080d8 <_printf_float+0xa8>
 80081b8:	0023      	movs	r3, r4
 80081ba:	222d      	movs	r2, #45	; 0x2d
 80081bc:	3343      	adds	r3, #67	; 0x43
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e78a      	b.n	80080d8 <_printf_float+0xa8>
 80081c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081c4:	2a47      	cmp	r2, #71	; 0x47
 80081c6:	d1b4      	bne.n	8008132 <_printf_float+0x102>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1b2      	bne.n	8008132 <_printf_float+0x102>
 80081cc:	3301      	adds	r3, #1
 80081ce:	e7af      	b.n	8008130 <_printf_float+0x100>
 80081d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d2:	2b66      	cmp	r3, #102	; 0x66
 80081d4:	d11b      	bne.n	800820e <_printf_float+0x1de>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	2900      	cmp	r1, #0
 80081da:	dd0d      	ble.n	80081f8 <_printf_float+0x1c8>
 80081dc:	6121      	str	r1, [r4, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <_printf_float+0x1b8>
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	07d2      	lsls	r2, r2, #31
 80081e6:	d502      	bpl.n	80081ee <_printf_float+0x1be>
 80081e8:	3301      	adds	r3, #1
 80081ea:	1859      	adds	r1, r3, r1
 80081ec:	6121      	str	r1, [r4, #16]
 80081ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80081f2:	2300      	movs	r3, #0
 80081f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f6:	e7d8      	b.n	80081aa <_printf_float+0x17a>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <_printf_float+0x1d4>
 80081fc:	2201      	movs	r2, #1
 80081fe:	6821      	ldr	r1, [r4, #0]
 8008200:	4211      	tst	r1, r2
 8008202:	d000      	beq.n	8008206 <_printf_float+0x1d6>
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	6122      	str	r2, [r4, #16]
 8008208:	e7f1      	b.n	80081ee <_printf_float+0x1be>
 800820a:	2367      	movs	r3, #103	; 0x67
 800820c:	930a      	str	r3, [sp, #40]	; 0x28
 800820e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008212:	4293      	cmp	r3, r2
 8008214:	db06      	blt.n	8008224 <_printf_float+0x1f4>
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	07d2      	lsls	r2, r2, #31
 800821c:	d5e7      	bpl.n	80081ee <_printf_float+0x1be>
 800821e:	3301      	adds	r3, #1
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	e7e4      	b.n	80081ee <_printf_float+0x1be>
 8008224:	2101      	movs	r1, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	dc01      	bgt.n	800822e <_printf_float+0x1fe>
 800822a:	1849      	adds	r1, r1, r1
 800822c:	1ac9      	subs	r1, r1, r3
 800822e:	1852      	adds	r2, r2, r1
 8008230:	e7e9      	b.n	8008206 <_printf_float+0x1d6>
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	0553      	lsls	r3, r2, #21
 8008236:	d407      	bmi.n	8008248 <_printf_float+0x218>
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	002a      	movs	r2, r5
 800823c:	0038      	movs	r0, r7
 800823e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008240:	47b0      	blx	r6
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d128      	bne.n	8008298 <_printf_float+0x268>
 8008246:	e751      	b.n	80080ec <_printf_float+0xbc>
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	2b65      	cmp	r3, #101	; 0x65
 800824c:	d800      	bhi.n	8008250 <_printf_float+0x220>
 800824e:	e0e1      	b.n	8008414 <_printf_float+0x3e4>
 8008250:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008252:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008254:	2200      	movs	r2, #0
 8008256:	2300      	movs	r3, #0
 8008258:	f7f8 f8f8 	bl	800044c <__aeabi_dcmpeq>
 800825c:	2800      	cmp	r0, #0
 800825e:	d031      	beq.n	80082c4 <_printf_float+0x294>
 8008260:	2301      	movs	r3, #1
 8008262:	0038      	movs	r0, r7
 8008264:	4a34      	ldr	r2, [pc, #208]	; (8008338 <_printf_float+0x308>)
 8008266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008268:	47b0      	blx	r6
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	d100      	bne.n	8008270 <_printf_float+0x240>
 800826e:	e73d      	b.n	80080ec <_printf_float+0xbc>
 8008270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008272:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008274:	4293      	cmp	r3, r2
 8008276:	db02      	blt.n	800827e <_printf_float+0x24e>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	07db      	lsls	r3, r3, #31
 800827c:	d50c      	bpl.n	8008298 <_printf_float+0x268>
 800827e:	0038      	movs	r0, r7
 8008280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008286:	47b0      	blx	r6
 8008288:	2500      	movs	r5, #0
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	d100      	bne.n	8008290 <_printf_float+0x260>
 800828e:	e72d      	b.n	80080ec <_printf_float+0xbc>
 8008290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008292:	3b01      	subs	r3, #1
 8008294:	42ab      	cmp	r3, r5
 8008296:	dc0a      	bgt.n	80082ae <_printf_float+0x27e>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	079b      	lsls	r3, r3, #30
 800829c:	d500      	bpl.n	80082a0 <_printf_float+0x270>
 800829e:	e106      	b.n	80084ae <_printf_float+0x47e>
 80082a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082a2:	68e0      	ldr	r0, [r4, #12]
 80082a4:	4298      	cmp	r0, r3
 80082a6:	db00      	blt.n	80082aa <_printf_float+0x27a>
 80082a8:	e722      	b.n	80080f0 <_printf_float+0xc0>
 80082aa:	0018      	movs	r0, r3
 80082ac:	e720      	b.n	80080f0 <_printf_float+0xc0>
 80082ae:	0022      	movs	r2, r4
 80082b0:	2301      	movs	r3, #1
 80082b2:	0038      	movs	r0, r7
 80082b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082b6:	321a      	adds	r2, #26
 80082b8:	47b0      	blx	r6
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d100      	bne.n	80082c0 <_printf_float+0x290>
 80082be:	e715      	b.n	80080ec <_printf_float+0xbc>
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7e5      	b.n	8008290 <_printf_float+0x260>
 80082c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc38      	bgt.n	800833c <_printf_float+0x30c>
 80082ca:	2301      	movs	r3, #1
 80082cc:	0038      	movs	r0, r7
 80082ce:	4a1a      	ldr	r2, [pc, #104]	; (8008338 <_printf_float+0x308>)
 80082d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082d2:	47b0      	blx	r6
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d100      	bne.n	80082da <_printf_float+0x2aa>
 80082d8:	e708      	b.n	80080ec <_printf_float+0xbc>
 80082da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082de:	4313      	orrs	r3, r2
 80082e0:	d102      	bne.n	80082e8 <_printf_float+0x2b8>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	07db      	lsls	r3, r3, #31
 80082e6:	d5d7      	bpl.n	8008298 <_printf_float+0x268>
 80082e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ea:	0038      	movs	r0, r7
 80082ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f0:	47b0      	blx	r6
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d100      	bne.n	80082f8 <_printf_float+0x2c8>
 80082f6:	e6f9      	b.n	80080ec <_printf_float+0xbc>
 80082f8:	2300      	movs	r3, #0
 80082fa:	930a      	str	r3, [sp, #40]	; 0x28
 80082fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008300:	425b      	negs	r3, r3
 8008302:	4293      	cmp	r3, r2
 8008304:	dc01      	bgt.n	800830a <_printf_float+0x2da>
 8008306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008308:	e797      	b.n	800823a <_printf_float+0x20a>
 800830a:	0022      	movs	r2, r4
 800830c:	2301      	movs	r3, #1
 800830e:	0038      	movs	r0, r7
 8008310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008312:	321a      	adds	r2, #26
 8008314:	47b0      	blx	r6
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d100      	bne.n	800831c <_printf_float+0x2ec>
 800831a:	e6e7      	b.n	80080ec <_printf_float+0xbc>
 800831c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831e:	3301      	adds	r3, #1
 8008320:	e7eb      	b.n	80082fa <_printf_float+0x2ca>
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	7fefffff 	.word	0x7fefffff
 8008328:	0800ca6c 	.word	0x0800ca6c
 800832c:	0800ca70 	.word	0x0800ca70
 8008330:	0800ca74 	.word	0x0800ca74
 8008334:	0800ca78 	.word	0x0800ca78
 8008338:	0800ca7c 	.word	0x0800ca7c
 800833c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800833e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008340:	920a      	str	r2, [sp, #40]	; 0x28
 8008342:	429a      	cmp	r2, r3
 8008344:	dd00      	ble.n	8008348 <_printf_float+0x318>
 8008346:	930a      	str	r3, [sp, #40]	; 0x28
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	dc3c      	bgt.n	80083c8 <_printf_float+0x398>
 800834e:	2300      	movs	r3, #0
 8008350:	930d      	str	r3, [sp, #52]	; 0x34
 8008352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008354:	43db      	mvns	r3, r3
 8008356:	17db      	asrs	r3, r3, #31
 8008358:	930f      	str	r3, [sp, #60]	; 0x3c
 800835a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800835c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800835e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008362:	4013      	ands	r3, r2
 8008364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800836a:	4293      	cmp	r3, r2
 800836c:	dc34      	bgt.n	80083d8 <_printf_float+0x3a8>
 800836e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008372:	4293      	cmp	r3, r2
 8008374:	db3d      	blt.n	80083f2 <_printf_float+0x3c2>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	07db      	lsls	r3, r3, #31
 800837a:	d43a      	bmi.n	80083f2 <_printf_float+0x3c2>
 800837c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800837e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008380:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	1a52      	subs	r2, r2, r1
 8008386:	920a      	str	r2, [sp, #40]	; 0x28
 8008388:	429a      	cmp	r2, r3
 800838a:	dd00      	ble.n	800838e <_printf_float+0x35e>
 800838c:	930a      	str	r3, [sp, #40]	; 0x28
 800838e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	dc36      	bgt.n	8008402 <_printf_float+0x3d2>
 8008394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008396:	2500      	movs	r5, #0
 8008398:	43db      	mvns	r3, r3
 800839a:	17db      	asrs	r3, r3, #31
 800839c:	930b      	str	r3, [sp, #44]	; 0x2c
 800839e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a8:	400a      	ands	r2, r1
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc00      	bgt.n	80083b2 <_printf_float+0x382>
 80083b0:	e772      	b.n	8008298 <_printf_float+0x268>
 80083b2:	0022      	movs	r2, r4
 80083b4:	2301      	movs	r3, #1
 80083b6:	0038      	movs	r0, r7
 80083b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ba:	321a      	adds	r2, #26
 80083bc:	47b0      	blx	r6
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d100      	bne.n	80083c4 <_printf_float+0x394>
 80083c2:	e693      	b.n	80080ec <_printf_float+0xbc>
 80083c4:	3501      	adds	r5, #1
 80083c6:	e7ea      	b.n	800839e <_printf_float+0x36e>
 80083c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ca:	002a      	movs	r2, r5
 80083cc:	0038      	movs	r0, r7
 80083ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083d0:	47b0      	blx	r6
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d1bb      	bne.n	800834e <_printf_float+0x31e>
 80083d6:	e689      	b.n	80080ec <_printf_float+0xbc>
 80083d8:	0022      	movs	r2, r4
 80083da:	2301      	movs	r3, #1
 80083dc:	0038      	movs	r0, r7
 80083de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e0:	321a      	adds	r2, #26
 80083e2:	47b0      	blx	r6
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d100      	bne.n	80083ea <_printf_float+0x3ba>
 80083e8:	e680      	b.n	80080ec <_printf_float+0xbc>
 80083ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ec:	3301      	adds	r3, #1
 80083ee:	930d      	str	r3, [sp, #52]	; 0x34
 80083f0:	e7b3      	b.n	800835a <_printf_float+0x32a>
 80083f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f4:	0038      	movs	r0, r7
 80083f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083fa:	47b0      	blx	r6
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d1bd      	bne.n	800837c <_printf_float+0x34c>
 8008400:	e674      	b.n	80080ec <_printf_float+0xbc>
 8008402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008404:	0038      	movs	r0, r7
 8008406:	18ea      	adds	r2, r5, r3
 8008408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840c:	47b0      	blx	r6
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	d1c0      	bne.n	8008394 <_printf_float+0x364>
 8008412:	e66b      	b.n	80080ec <_printf_float+0xbc>
 8008414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008416:	2b01      	cmp	r3, #1
 8008418:	dc02      	bgt.n	8008420 <_printf_float+0x3f0>
 800841a:	2301      	movs	r3, #1
 800841c:	421a      	tst	r2, r3
 800841e:	d034      	beq.n	800848a <_printf_float+0x45a>
 8008420:	2301      	movs	r3, #1
 8008422:	002a      	movs	r2, r5
 8008424:	0038      	movs	r0, r7
 8008426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d100      	bne.n	8008430 <_printf_float+0x400>
 800842e:	e65d      	b.n	80080ec <_printf_float+0xbc>
 8008430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008432:	0038      	movs	r0, r7
 8008434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008436:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008438:	47b0      	blx	r6
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	d100      	bne.n	8008440 <_printf_float+0x410>
 800843e:	e655      	b.n	80080ec <_printf_float+0xbc>
 8008440:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008442:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	f7f8 f800 	bl	800044c <__aeabi_dcmpeq>
 800844c:	2800      	cmp	r0, #0
 800844e:	d11a      	bne.n	8008486 <_printf_float+0x456>
 8008450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008452:	1c6a      	adds	r2, r5, #1
 8008454:	3b01      	subs	r3, #1
 8008456:	0038      	movs	r0, r7
 8008458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800845a:	47b0      	blx	r6
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d10e      	bne.n	800847e <_printf_float+0x44e>
 8008460:	e644      	b.n	80080ec <_printf_float+0xbc>
 8008462:	0022      	movs	r2, r4
 8008464:	2301      	movs	r3, #1
 8008466:	0038      	movs	r0, r7
 8008468:	9909      	ldr	r1, [sp, #36]	; 0x24
 800846a:	321a      	adds	r2, #26
 800846c:	47b0      	blx	r6
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d100      	bne.n	8008474 <_printf_float+0x444>
 8008472:	e63b      	b.n	80080ec <_printf_float+0xbc>
 8008474:	3501      	adds	r5, #1
 8008476:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008478:	3b01      	subs	r3, #1
 800847a:	42ab      	cmp	r3, r5
 800847c:	dcf1      	bgt.n	8008462 <_printf_float+0x432>
 800847e:	0022      	movs	r2, r4
 8008480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008482:	3250      	adds	r2, #80	; 0x50
 8008484:	e6da      	b.n	800823c <_printf_float+0x20c>
 8008486:	2500      	movs	r5, #0
 8008488:	e7f5      	b.n	8008476 <_printf_float+0x446>
 800848a:	002a      	movs	r2, r5
 800848c:	e7e3      	b.n	8008456 <_printf_float+0x426>
 800848e:	0022      	movs	r2, r4
 8008490:	2301      	movs	r3, #1
 8008492:	0038      	movs	r0, r7
 8008494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008496:	3219      	adds	r2, #25
 8008498:	47b0      	blx	r6
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d100      	bne.n	80084a0 <_printf_float+0x470>
 800849e:	e625      	b.n	80080ec <_printf_float+0xbc>
 80084a0:	3501      	adds	r5, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a6:	1a9b      	subs	r3, r3, r2
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	dcf0      	bgt.n	800848e <_printf_float+0x45e>
 80084ac:	e6f8      	b.n	80082a0 <_printf_float+0x270>
 80084ae:	2500      	movs	r5, #0
 80084b0:	e7f7      	b.n	80084a2 <_printf_float+0x472>
 80084b2:	46c0      	nop			; (mov r8, r8)

080084b4 <_printf_common>:
 80084b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b6:	0015      	movs	r5, r2
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	688a      	ldr	r2, [r1, #8]
 80084bc:	690b      	ldr	r3, [r1, #16]
 80084be:	000c      	movs	r4, r1
 80084c0:	9000      	str	r0, [sp, #0]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	da00      	bge.n	80084c8 <_printf_common+0x14>
 80084c6:	0013      	movs	r3, r2
 80084c8:	0022      	movs	r2, r4
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	3243      	adds	r2, #67	; 0x43
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	d001      	beq.n	80084d8 <_printf_common+0x24>
 80084d4:	3301      	adds	r3, #1
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	069b      	lsls	r3, r3, #26
 80084dc:	d502      	bpl.n	80084e4 <_printf_common+0x30>
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	3302      	adds	r3, #2
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	6822      	ldr	r2, [r4, #0]
 80084e6:	2306      	movs	r3, #6
 80084e8:	0017      	movs	r7, r2
 80084ea:	401f      	ands	r7, r3
 80084ec:	421a      	tst	r2, r3
 80084ee:	d027      	beq.n	8008540 <_printf_common+0x8c>
 80084f0:	0023      	movs	r3, r4
 80084f2:	3343      	adds	r3, #67	; 0x43
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	1e5a      	subs	r2, r3, #1
 80084f8:	4193      	sbcs	r3, r2
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	0692      	lsls	r2, r2, #26
 80084fe:	d430      	bmi.n	8008562 <_printf_common+0xae>
 8008500:	0022      	movs	r2, r4
 8008502:	9901      	ldr	r1, [sp, #4]
 8008504:	9800      	ldr	r0, [sp, #0]
 8008506:	9e08      	ldr	r6, [sp, #32]
 8008508:	3243      	adds	r2, #67	; 0x43
 800850a:	47b0      	blx	r6
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d025      	beq.n	800855c <_printf_common+0xa8>
 8008510:	2306      	movs	r3, #6
 8008512:	6820      	ldr	r0, [r4, #0]
 8008514:	682a      	ldr	r2, [r5, #0]
 8008516:	68e1      	ldr	r1, [r4, #12]
 8008518:	2500      	movs	r5, #0
 800851a:	4003      	ands	r3, r0
 800851c:	2b04      	cmp	r3, #4
 800851e:	d103      	bne.n	8008528 <_printf_common+0x74>
 8008520:	1a8d      	subs	r5, r1, r2
 8008522:	43eb      	mvns	r3, r5
 8008524:	17db      	asrs	r3, r3, #31
 8008526:	401d      	ands	r5, r3
 8008528:	68a3      	ldr	r3, [r4, #8]
 800852a:	6922      	ldr	r2, [r4, #16]
 800852c:	4293      	cmp	r3, r2
 800852e:	dd01      	ble.n	8008534 <_printf_common+0x80>
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	18ed      	adds	r5, r5, r3
 8008534:	2700      	movs	r7, #0
 8008536:	42bd      	cmp	r5, r7
 8008538:	d120      	bne.n	800857c <_printf_common+0xc8>
 800853a:	2000      	movs	r0, #0
 800853c:	e010      	b.n	8008560 <_printf_common+0xac>
 800853e:	3701      	adds	r7, #1
 8008540:	68e3      	ldr	r3, [r4, #12]
 8008542:	682a      	ldr	r2, [r5, #0]
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	42bb      	cmp	r3, r7
 8008548:	ddd2      	ble.n	80084f0 <_printf_common+0x3c>
 800854a:	0022      	movs	r2, r4
 800854c:	2301      	movs	r3, #1
 800854e:	9901      	ldr	r1, [sp, #4]
 8008550:	9800      	ldr	r0, [sp, #0]
 8008552:	9e08      	ldr	r6, [sp, #32]
 8008554:	3219      	adds	r2, #25
 8008556:	47b0      	blx	r6
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d1f0      	bne.n	800853e <_printf_common+0x8a>
 800855c:	2001      	movs	r0, #1
 800855e:	4240      	negs	r0, r0
 8008560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008562:	2030      	movs	r0, #48	; 0x30
 8008564:	18e1      	adds	r1, r4, r3
 8008566:	3143      	adds	r1, #67	; 0x43
 8008568:	7008      	strb	r0, [r1, #0]
 800856a:	0021      	movs	r1, r4
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	3145      	adds	r1, #69	; 0x45
 8008570:	7809      	ldrb	r1, [r1, #0]
 8008572:	18a2      	adds	r2, r4, r2
 8008574:	3243      	adds	r2, #67	; 0x43
 8008576:	3302      	adds	r3, #2
 8008578:	7011      	strb	r1, [r2, #0]
 800857a:	e7c1      	b.n	8008500 <_printf_common+0x4c>
 800857c:	0022      	movs	r2, r4
 800857e:	2301      	movs	r3, #1
 8008580:	9901      	ldr	r1, [sp, #4]
 8008582:	9800      	ldr	r0, [sp, #0]
 8008584:	9e08      	ldr	r6, [sp, #32]
 8008586:	321a      	adds	r2, #26
 8008588:	47b0      	blx	r6
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d0e6      	beq.n	800855c <_printf_common+0xa8>
 800858e:	3701      	adds	r7, #1
 8008590:	e7d1      	b.n	8008536 <_printf_common+0x82>
	...

08008594 <_printf_i>:
 8008594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008596:	b08b      	sub	sp, #44	; 0x2c
 8008598:	9206      	str	r2, [sp, #24]
 800859a:	000a      	movs	r2, r1
 800859c:	3243      	adds	r2, #67	; 0x43
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	9005      	str	r0, [sp, #20]
 80085a2:	9204      	str	r2, [sp, #16]
 80085a4:	7e0a      	ldrb	r2, [r1, #24]
 80085a6:	000c      	movs	r4, r1
 80085a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085aa:	2a78      	cmp	r2, #120	; 0x78
 80085ac:	d807      	bhi.n	80085be <_printf_i+0x2a>
 80085ae:	2a62      	cmp	r2, #98	; 0x62
 80085b0:	d809      	bhi.n	80085c6 <_printf_i+0x32>
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	d100      	bne.n	80085b8 <_printf_i+0x24>
 80085b6:	e0c1      	b.n	800873c <_printf_i+0x1a8>
 80085b8:	2a58      	cmp	r2, #88	; 0x58
 80085ba:	d100      	bne.n	80085be <_printf_i+0x2a>
 80085bc:	e08c      	b.n	80086d8 <_printf_i+0x144>
 80085be:	0026      	movs	r6, r4
 80085c0:	3642      	adds	r6, #66	; 0x42
 80085c2:	7032      	strb	r2, [r6, #0]
 80085c4:	e022      	b.n	800860c <_printf_i+0x78>
 80085c6:	0010      	movs	r0, r2
 80085c8:	3863      	subs	r0, #99	; 0x63
 80085ca:	2815      	cmp	r0, #21
 80085cc:	d8f7      	bhi.n	80085be <_printf_i+0x2a>
 80085ce:	f7f7 fdad 	bl	800012c <__gnu_thumb1_case_shi>
 80085d2:	0016      	.short	0x0016
 80085d4:	fff6001f 	.word	0xfff6001f
 80085d8:	fff6fff6 	.word	0xfff6fff6
 80085dc:	001ffff6 	.word	0x001ffff6
 80085e0:	fff6fff6 	.word	0xfff6fff6
 80085e4:	fff6fff6 	.word	0xfff6fff6
 80085e8:	003600a8 	.word	0x003600a8
 80085ec:	fff6009a 	.word	0xfff6009a
 80085f0:	00b9fff6 	.word	0x00b9fff6
 80085f4:	0036fff6 	.word	0x0036fff6
 80085f8:	fff6fff6 	.word	0xfff6fff6
 80085fc:	009e      	.short	0x009e
 80085fe:	0026      	movs	r6, r4
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	3642      	adds	r6, #66	; 0x42
 8008604:	1d11      	adds	r1, r2, #4
 8008606:	6019      	str	r1, [r3, #0]
 8008608:	6813      	ldr	r3, [r2, #0]
 800860a:	7033      	strb	r3, [r6, #0]
 800860c:	2301      	movs	r3, #1
 800860e:	e0a7      	b.n	8008760 <_printf_i+0x1cc>
 8008610:	6808      	ldr	r0, [r1, #0]
 8008612:	6819      	ldr	r1, [r3, #0]
 8008614:	1d0a      	adds	r2, r1, #4
 8008616:	0605      	lsls	r5, r0, #24
 8008618:	d50b      	bpl.n	8008632 <_printf_i+0x9e>
 800861a:	680d      	ldr	r5, [r1, #0]
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	2d00      	cmp	r5, #0
 8008620:	da03      	bge.n	800862a <_printf_i+0x96>
 8008622:	232d      	movs	r3, #45	; 0x2d
 8008624:	9a04      	ldr	r2, [sp, #16]
 8008626:	426d      	negs	r5, r5
 8008628:	7013      	strb	r3, [r2, #0]
 800862a:	4b61      	ldr	r3, [pc, #388]	; (80087b0 <_printf_i+0x21c>)
 800862c:	270a      	movs	r7, #10
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	e01b      	b.n	800866a <_printf_i+0xd6>
 8008632:	680d      	ldr	r5, [r1, #0]
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	0641      	lsls	r1, r0, #25
 8008638:	d5f1      	bpl.n	800861e <_printf_i+0x8a>
 800863a:	b22d      	sxth	r5, r5
 800863c:	e7ef      	b.n	800861e <_printf_i+0x8a>
 800863e:	680d      	ldr	r5, [r1, #0]
 8008640:	6819      	ldr	r1, [r3, #0]
 8008642:	1d08      	adds	r0, r1, #4
 8008644:	6018      	str	r0, [r3, #0]
 8008646:	062e      	lsls	r6, r5, #24
 8008648:	d501      	bpl.n	800864e <_printf_i+0xba>
 800864a:	680d      	ldr	r5, [r1, #0]
 800864c:	e003      	b.n	8008656 <_printf_i+0xc2>
 800864e:	066d      	lsls	r5, r5, #25
 8008650:	d5fb      	bpl.n	800864a <_printf_i+0xb6>
 8008652:	680d      	ldr	r5, [r1, #0]
 8008654:	b2ad      	uxth	r5, r5
 8008656:	4b56      	ldr	r3, [pc, #344]	; (80087b0 <_printf_i+0x21c>)
 8008658:	2708      	movs	r7, #8
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	2a6f      	cmp	r2, #111	; 0x6f
 800865e:	d000      	beq.n	8008662 <_printf_i+0xce>
 8008660:	3702      	adds	r7, #2
 8008662:	0023      	movs	r3, r4
 8008664:	2200      	movs	r2, #0
 8008666:	3343      	adds	r3, #67	; 0x43
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	db03      	blt.n	800867a <_printf_i+0xe6>
 8008672:	2204      	movs	r2, #4
 8008674:	6821      	ldr	r1, [r4, #0]
 8008676:	4391      	bics	r1, r2
 8008678:	6021      	str	r1, [r4, #0]
 800867a:	2d00      	cmp	r5, #0
 800867c:	d102      	bne.n	8008684 <_printf_i+0xf0>
 800867e:	9e04      	ldr	r6, [sp, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00c      	beq.n	800869e <_printf_i+0x10a>
 8008684:	9e04      	ldr	r6, [sp, #16]
 8008686:	0028      	movs	r0, r5
 8008688:	0039      	movs	r1, r7
 800868a:	f7f7 fddf 	bl	800024c <__aeabi_uidivmod>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	3e01      	subs	r6, #1
 8008692:	5c5b      	ldrb	r3, [r3, r1]
 8008694:	7033      	strb	r3, [r6, #0]
 8008696:	002b      	movs	r3, r5
 8008698:	0005      	movs	r5, r0
 800869a:	429f      	cmp	r7, r3
 800869c:	d9f3      	bls.n	8008686 <_printf_i+0xf2>
 800869e:	2f08      	cmp	r7, #8
 80086a0:	d109      	bne.n	80086b6 <_printf_i+0x122>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	07db      	lsls	r3, r3, #31
 80086a6:	d506      	bpl.n	80086b6 <_printf_i+0x122>
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	6922      	ldr	r2, [r4, #16]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	dc02      	bgt.n	80086b6 <_printf_i+0x122>
 80086b0:	2330      	movs	r3, #48	; 0x30
 80086b2:	3e01      	subs	r6, #1
 80086b4:	7033      	strb	r3, [r6, #0]
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	1b9b      	subs	r3, r3, r6
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	0021      	movs	r1, r4
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	9805      	ldr	r0, [sp, #20]
 80086c4:	9b06      	ldr	r3, [sp, #24]
 80086c6:	aa09      	add	r2, sp, #36	; 0x24
 80086c8:	f7ff fef4 	bl	80084b4 <_printf_common>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d14c      	bne.n	800876a <_printf_i+0x1d6>
 80086d0:	2001      	movs	r0, #1
 80086d2:	4240      	negs	r0, r0
 80086d4:	b00b      	add	sp, #44	; 0x2c
 80086d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d8:	3145      	adds	r1, #69	; 0x45
 80086da:	700a      	strb	r2, [r1, #0]
 80086dc:	4a34      	ldr	r2, [pc, #208]	; (80087b0 <_printf_i+0x21c>)
 80086de:	9203      	str	r2, [sp, #12]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	ca20      	ldmia	r2!, {r5}
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	0608      	lsls	r0, r1, #24
 80086ea:	d516      	bpl.n	800871a <_printf_i+0x186>
 80086ec:	07cb      	lsls	r3, r1, #31
 80086ee:	d502      	bpl.n	80086f6 <_printf_i+0x162>
 80086f0:	2320      	movs	r3, #32
 80086f2:	4319      	orrs	r1, r3
 80086f4:	6021      	str	r1, [r4, #0]
 80086f6:	2710      	movs	r7, #16
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	d1b2      	bne.n	8008662 <_printf_i+0xce>
 80086fc:	2320      	movs	r3, #32
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	439a      	bics	r2, r3
 8008702:	6022      	str	r2, [r4, #0]
 8008704:	e7ad      	b.n	8008662 <_printf_i+0xce>
 8008706:	2220      	movs	r2, #32
 8008708:	6809      	ldr	r1, [r1, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	6022      	str	r2, [r4, #0]
 800870e:	0022      	movs	r2, r4
 8008710:	2178      	movs	r1, #120	; 0x78
 8008712:	3245      	adds	r2, #69	; 0x45
 8008714:	7011      	strb	r1, [r2, #0]
 8008716:	4a27      	ldr	r2, [pc, #156]	; (80087b4 <_printf_i+0x220>)
 8008718:	e7e1      	b.n	80086de <_printf_i+0x14a>
 800871a:	0648      	lsls	r0, r1, #25
 800871c:	d5e6      	bpl.n	80086ec <_printf_i+0x158>
 800871e:	b2ad      	uxth	r5, r5
 8008720:	e7e4      	b.n	80086ec <_printf_i+0x158>
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	680d      	ldr	r5, [r1, #0]
 8008726:	1d10      	adds	r0, r2, #4
 8008728:	6949      	ldr	r1, [r1, #20]
 800872a:	6018      	str	r0, [r3, #0]
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	062e      	lsls	r6, r5, #24
 8008730:	d501      	bpl.n	8008736 <_printf_i+0x1a2>
 8008732:	6019      	str	r1, [r3, #0]
 8008734:	e002      	b.n	800873c <_printf_i+0x1a8>
 8008736:	066d      	lsls	r5, r5, #25
 8008738:	d5fb      	bpl.n	8008732 <_printf_i+0x19e>
 800873a:	8019      	strh	r1, [r3, #0]
 800873c:	2300      	movs	r3, #0
 800873e:	9e04      	ldr	r6, [sp, #16]
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	e7bb      	b.n	80086bc <_printf_i+0x128>
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	1d11      	adds	r1, r2, #4
 8008748:	6019      	str	r1, [r3, #0]
 800874a:	6816      	ldr	r6, [r2, #0]
 800874c:	2100      	movs	r1, #0
 800874e:	0030      	movs	r0, r6
 8008750:	6862      	ldr	r2, [r4, #4]
 8008752:	f002 fc7d 	bl	800b050 <memchr>
 8008756:	2800      	cmp	r0, #0
 8008758:	d001      	beq.n	800875e <_printf_i+0x1ca>
 800875a:	1b80      	subs	r0, r0, r6
 800875c:	6060      	str	r0, [r4, #4]
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	2300      	movs	r3, #0
 8008764:	9a04      	ldr	r2, [sp, #16]
 8008766:	7013      	strb	r3, [r2, #0]
 8008768:	e7a8      	b.n	80086bc <_printf_i+0x128>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	0032      	movs	r2, r6
 800876e:	9906      	ldr	r1, [sp, #24]
 8008770:	9805      	ldr	r0, [sp, #20]
 8008772:	9d07      	ldr	r5, [sp, #28]
 8008774:	47a8      	blx	r5
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d0aa      	beq.n	80086d0 <_printf_i+0x13c>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	079b      	lsls	r3, r3, #30
 800877e:	d415      	bmi.n	80087ac <_printf_i+0x218>
 8008780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008782:	68e0      	ldr	r0, [r4, #12]
 8008784:	4298      	cmp	r0, r3
 8008786:	daa5      	bge.n	80086d4 <_printf_i+0x140>
 8008788:	0018      	movs	r0, r3
 800878a:	e7a3      	b.n	80086d4 <_printf_i+0x140>
 800878c:	0022      	movs	r2, r4
 800878e:	2301      	movs	r3, #1
 8008790:	9906      	ldr	r1, [sp, #24]
 8008792:	9805      	ldr	r0, [sp, #20]
 8008794:	9e07      	ldr	r6, [sp, #28]
 8008796:	3219      	adds	r2, #25
 8008798:	47b0      	blx	r6
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d098      	beq.n	80086d0 <_printf_i+0x13c>
 800879e:	3501      	adds	r5, #1
 80087a0:	68e3      	ldr	r3, [r4, #12]
 80087a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	42ab      	cmp	r3, r5
 80087a8:	dcf0      	bgt.n	800878c <_printf_i+0x1f8>
 80087aa:	e7e9      	b.n	8008780 <_printf_i+0x1ec>
 80087ac:	2500      	movs	r5, #0
 80087ae:	e7f7      	b.n	80087a0 <_printf_i+0x20c>
 80087b0:	0800ca7e 	.word	0x0800ca7e
 80087b4:	0800ca8f 	.word	0x0800ca8f

080087b8 <_scanf_float>:
 80087b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ba:	b08b      	sub	sp, #44	; 0x2c
 80087bc:	0015      	movs	r5, r2
 80087be:	9001      	str	r0, [sp, #4]
 80087c0:	22ae      	movs	r2, #174	; 0xae
 80087c2:	2000      	movs	r0, #0
 80087c4:	9306      	str	r3, [sp, #24]
 80087c6:	688b      	ldr	r3, [r1, #8]
 80087c8:	000e      	movs	r6, r1
 80087ca:	1e59      	subs	r1, r3, #1
 80087cc:	0052      	lsls	r2, r2, #1
 80087ce:	9005      	str	r0, [sp, #20]
 80087d0:	4291      	cmp	r1, r2
 80087d2:	d905      	bls.n	80087e0 <_scanf_float+0x28>
 80087d4:	3b5e      	subs	r3, #94	; 0x5e
 80087d6:	3bff      	subs	r3, #255	; 0xff
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	235e      	movs	r3, #94	; 0x5e
 80087dc:	33ff      	adds	r3, #255	; 0xff
 80087de:	60b3      	str	r3, [r6, #8]
 80087e0:	23f0      	movs	r3, #240	; 0xf0
 80087e2:	6832      	ldr	r2, [r6, #0]
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	0033      	movs	r3, r6
 80087ec:	2400      	movs	r4, #0
 80087ee:	331c      	adds	r3, #28
 80087f0:	001f      	movs	r7, r3
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	9402      	str	r4, [sp, #8]
 80087f6:	9408      	str	r4, [sp, #32]
 80087f8:	9407      	str	r4, [sp, #28]
 80087fa:	9400      	str	r4, [sp, #0]
 80087fc:	9404      	str	r4, [sp, #16]
 80087fe:	68b2      	ldr	r2, [r6, #8]
 8008800:	2a00      	cmp	r2, #0
 8008802:	d00a      	beq.n	800881a <_scanf_float+0x62>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b4e      	cmp	r3, #78	; 0x4e
 800880a:	d844      	bhi.n	8008896 <_scanf_float+0xde>
 800880c:	0018      	movs	r0, r3
 800880e:	2b40      	cmp	r3, #64	; 0x40
 8008810:	d82c      	bhi.n	800886c <_scanf_float+0xb4>
 8008812:	382b      	subs	r0, #43	; 0x2b
 8008814:	b2c1      	uxtb	r1, r0
 8008816:	290e      	cmp	r1, #14
 8008818:	d92a      	bls.n	8008870 <_scanf_float+0xb8>
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <_scanf_float+0x70>
 8008820:	6832      	ldr	r2, [r6, #0]
 8008822:	4ba4      	ldr	r3, [pc, #656]	; (8008ab4 <_scanf_float+0x2fc>)
 8008824:	4013      	ands	r3, r2
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	3b01      	subs	r3, #1
 800882c:	2b01      	cmp	r3, #1
 800882e:	d900      	bls.n	8008832 <_scanf_float+0x7a>
 8008830:	e0f9      	b.n	8008a26 <_scanf_float+0x26e>
 8008832:	24be      	movs	r4, #190	; 0xbe
 8008834:	0064      	lsls	r4, r4, #1
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	429f      	cmp	r7, r3
 800883a:	d900      	bls.n	800883e <_scanf_float+0x86>
 800883c:	e0e9      	b.n	8008a12 <_scanf_float+0x25a>
 800883e:	2301      	movs	r3, #1
 8008840:	9302      	str	r3, [sp, #8]
 8008842:	e185      	b.n	8008b50 <_scanf_float+0x398>
 8008844:	0018      	movs	r0, r3
 8008846:	3861      	subs	r0, #97	; 0x61
 8008848:	280d      	cmp	r0, #13
 800884a:	d8e6      	bhi.n	800881a <_scanf_float+0x62>
 800884c:	f7f7 fc6e 	bl	800012c <__gnu_thumb1_case_shi>
 8008850:	ffe50083 	.word	0xffe50083
 8008854:	ffe5ffe5 	.word	0xffe5ffe5
 8008858:	00a200b6 	.word	0x00a200b6
 800885c:	ffe5ffe5 	.word	0xffe5ffe5
 8008860:	ffe50089 	.word	0xffe50089
 8008864:	ffe5ffe5 	.word	0xffe5ffe5
 8008868:	0065ffe5 	.word	0x0065ffe5
 800886c:	3841      	subs	r0, #65	; 0x41
 800886e:	e7eb      	b.n	8008848 <_scanf_float+0x90>
 8008870:	280e      	cmp	r0, #14
 8008872:	d8d2      	bhi.n	800881a <_scanf_float+0x62>
 8008874:	f7f7 fc5a 	bl	800012c <__gnu_thumb1_case_shi>
 8008878:	ffd1004b 	.word	0xffd1004b
 800887c:	0098004b 	.word	0x0098004b
 8008880:	0020ffd1 	.word	0x0020ffd1
 8008884:	00400040 	.word	0x00400040
 8008888:	00400040 	.word	0x00400040
 800888c:	00400040 	.word	0x00400040
 8008890:	00400040 	.word	0x00400040
 8008894:	0040      	.short	0x0040
 8008896:	2b6e      	cmp	r3, #110	; 0x6e
 8008898:	d809      	bhi.n	80088ae <_scanf_float+0xf6>
 800889a:	2b60      	cmp	r3, #96	; 0x60
 800889c:	d8d2      	bhi.n	8008844 <_scanf_float+0x8c>
 800889e:	2b54      	cmp	r3, #84	; 0x54
 80088a0:	d07d      	beq.n	800899e <_scanf_float+0x1e6>
 80088a2:	2b59      	cmp	r3, #89	; 0x59
 80088a4:	d1b9      	bne.n	800881a <_scanf_float+0x62>
 80088a6:	2c07      	cmp	r4, #7
 80088a8:	d1b7      	bne.n	800881a <_scanf_float+0x62>
 80088aa:	2408      	movs	r4, #8
 80088ac:	e02c      	b.n	8008908 <_scanf_float+0x150>
 80088ae:	2b74      	cmp	r3, #116	; 0x74
 80088b0:	d075      	beq.n	800899e <_scanf_float+0x1e6>
 80088b2:	2b79      	cmp	r3, #121	; 0x79
 80088b4:	d0f7      	beq.n	80088a6 <_scanf_float+0xee>
 80088b6:	e7b0      	b.n	800881a <_scanf_float+0x62>
 80088b8:	6831      	ldr	r1, [r6, #0]
 80088ba:	05c8      	lsls	r0, r1, #23
 80088bc:	d51c      	bpl.n	80088f8 <_scanf_float+0x140>
 80088be:	2380      	movs	r3, #128	; 0x80
 80088c0:	4399      	bics	r1, r3
 80088c2:	9b00      	ldr	r3, [sp, #0]
 80088c4:	6031      	str	r1, [r6, #0]
 80088c6:	3301      	adds	r3, #1
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <_scanf_float+0x120>
 80088d0:	3b01      	subs	r3, #1
 80088d2:	3201      	adds	r2, #1
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	60b2      	str	r2, [r6, #8]
 80088d8:	68b3      	ldr	r3, [r6, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	60b3      	str	r3, [r6, #8]
 80088de:	6933      	ldr	r3, [r6, #16]
 80088e0:	3301      	adds	r3, #1
 80088e2:	6133      	str	r3, [r6, #16]
 80088e4:	686b      	ldr	r3, [r5, #4]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	606b      	str	r3, [r5, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dc00      	bgt.n	80088f0 <_scanf_float+0x138>
 80088ee:	e086      	b.n	80089fe <_scanf_float+0x246>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	602b      	str	r3, [r5, #0]
 80088f6:	e782      	b.n	80087fe <_scanf_float+0x46>
 80088f8:	9a02      	ldr	r2, [sp, #8]
 80088fa:	1912      	adds	r2, r2, r4
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d18c      	bne.n	800881a <_scanf_float+0x62>
 8008900:	4a6d      	ldr	r2, [pc, #436]	; (8008ab8 <_scanf_float+0x300>)
 8008902:	6831      	ldr	r1, [r6, #0]
 8008904:	400a      	ands	r2, r1
 8008906:	6032      	str	r2, [r6, #0]
 8008908:	703b      	strb	r3, [r7, #0]
 800890a:	3701      	adds	r7, #1
 800890c:	e7e4      	b.n	80088d8 <_scanf_float+0x120>
 800890e:	2180      	movs	r1, #128	; 0x80
 8008910:	6832      	ldr	r2, [r6, #0]
 8008912:	420a      	tst	r2, r1
 8008914:	d081      	beq.n	800881a <_scanf_float+0x62>
 8008916:	438a      	bics	r2, r1
 8008918:	e7f5      	b.n	8008906 <_scanf_float+0x14e>
 800891a:	9a02      	ldr	r2, [sp, #8]
 800891c:	2a00      	cmp	r2, #0
 800891e:	d10f      	bne.n	8008940 <_scanf_float+0x188>
 8008920:	9a00      	ldr	r2, [sp, #0]
 8008922:	2a00      	cmp	r2, #0
 8008924:	d10f      	bne.n	8008946 <_scanf_float+0x18e>
 8008926:	6832      	ldr	r2, [r6, #0]
 8008928:	21e0      	movs	r1, #224	; 0xe0
 800892a:	0010      	movs	r0, r2
 800892c:	00c9      	lsls	r1, r1, #3
 800892e:	4008      	ands	r0, r1
 8008930:	4288      	cmp	r0, r1
 8008932:	d108      	bne.n	8008946 <_scanf_float+0x18e>
 8008934:	4961      	ldr	r1, [pc, #388]	; (8008abc <_scanf_float+0x304>)
 8008936:	400a      	ands	r2, r1
 8008938:	6032      	str	r2, [r6, #0]
 800893a:	2201      	movs	r2, #1
 800893c:	9202      	str	r2, [sp, #8]
 800893e:	e7e3      	b.n	8008908 <_scanf_float+0x150>
 8008940:	9a02      	ldr	r2, [sp, #8]
 8008942:	2a02      	cmp	r2, #2
 8008944:	d059      	beq.n	80089fa <_scanf_float+0x242>
 8008946:	2c01      	cmp	r4, #1
 8008948:	d002      	beq.n	8008950 <_scanf_float+0x198>
 800894a:	2c04      	cmp	r4, #4
 800894c:	d000      	beq.n	8008950 <_scanf_float+0x198>
 800894e:	e764      	b.n	800881a <_scanf_float+0x62>
 8008950:	3401      	adds	r4, #1
 8008952:	b2e4      	uxtb	r4, r4
 8008954:	e7d8      	b.n	8008908 <_scanf_float+0x150>
 8008956:	9a02      	ldr	r2, [sp, #8]
 8008958:	2a01      	cmp	r2, #1
 800895a:	d000      	beq.n	800895e <_scanf_float+0x1a6>
 800895c:	e75d      	b.n	800881a <_scanf_float+0x62>
 800895e:	2202      	movs	r2, #2
 8008960:	e7ec      	b.n	800893c <_scanf_float+0x184>
 8008962:	2c00      	cmp	r4, #0
 8008964:	d110      	bne.n	8008988 <_scanf_float+0x1d0>
 8008966:	9a00      	ldr	r2, [sp, #0]
 8008968:	2a00      	cmp	r2, #0
 800896a:	d000      	beq.n	800896e <_scanf_float+0x1b6>
 800896c:	e758      	b.n	8008820 <_scanf_float+0x68>
 800896e:	6832      	ldr	r2, [r6, #0]
 8008970:	21e0      	movs	r1, #224	; 0xe0
 8008972:	0010      	movs	r0, r2
 8008974:	00c9      	lsls	r1, r1, #3
 8008976:	4008      	ands	r0, r1
 8008978:	4288      	cmp	r0, r1
 800897a:	d000      	beq.n	800897e <_scanf_float+0x1c6>
 800897c:	e754      	b.n	8008828 <_scanf_float+0x70>
 800897e:	494f      	ldr	r1, [pc, #316]	; (8008abc <_scanf_float+0x304>)
 8008980:	3401      	adds	r4, #1
 8008982:	400a      	ands	r2, r1
 8008984:	6032      	str	r2, [r6, #0]
 8008986:	e7bf      	b.n	8008908 <_scanf_float+0x150>
 8008988:	21fd      	movs	r1, #253	; 0xfd
 800898a:	1ee2      	subs	r2, r4, #3
 800898c:	420a      	tst	r2, r1
 800898e:	d000      	beq.n	8008992 <_scanf_float+0x1da>
 8008990:	e743      	b.n	800881a <_scanf_float+0x62>
 8008992:	e7dd      	b.n	8008950 <_scanf_float+0x198>
 8008994:	2c02      	cmp	r4, #2
 8008996:	d000      	beq.n	800899a <_scanf_float+0x1e2>
 8008998:	e73f      	b.n	800881a <_scanf_float+0x62>
 800899a:	2403      	movs	r4, #3
 800899c:	e7b4      	b.n	8008908 <_scanf_float+0x150>
 800899e:	2c06      	cmp	r4, #6
 80089a0:	d000      	beq.n	80089a4 <_scanf_float+0x1ec>
 80089a2:	e73a      	b.n	800881a <_scanf_float+0x62>
 80089a4:	2407      	movs	r4, #7
 80089a6:	e7af      	b.n	8008908 <_scanf_float+0x150>
 80089a8:	6832      	ldr	r2, [r6, #0]
 80089aa:	0591      	lsls	r1, r2, #22
 80089ac:	d400      	bmi.n	80089b0 <_scanf_float+0x1f8>
 80089ae:	e734      	b.n	800881a <_scanf_float+0x62>
 80089b0:	4943      	ldr	r1, [pc, #268]	; (8008ac0 <_scanf_float+0x308>)
 80089b2:	400a      	ands	r2, r1
 80089b4:	6032      	str	r2, [r6, #0]
 80089b6:	9a00      	ldr	r2, [sp, #0]
 80089b8:	9204      	str	r2, [sp, #16]
 80089ba:	e7a5      	b.n	8008908 <_scanf_float+0x150>
 80089bc:	21a0      	movs	r1, #160	; 0xa0
 80089be:	2080      	movs	r0, #128	; 0x80
 80089c0:	6832      	ldr	r2, [r6, #0]
 80089c2:	00c9      	lsls	r1, r1, #3
 80089c4:	4011      	ands	r1, r2
 80089c6:	00c0      	lsls	r0, r0, #3
 80089c8:	4281      	cmp	r1, r0
 80089ca:	d006      	beq.n	80089da <_scanf_float+0x222>
 80089cc:	4202      	tst	r2, r0
 80089ce:	d100      	bne.n	80089d2 <_scanf_float+0x21a>
 80089d0:	e723      	b.n	800881a <_scanf_float+0x62>
 80089d2:	9900      	ldr	r1, [sp, #0]
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d100      	bne.n	80089da <_scanf_float+0x222>
 80089d8:	e726      	b.n	8008828 <_scanf_float+0x70>
 80089da:	0591      	lsls	r1, r2, #22
 80089dc:	d404      	bmi.n	80089e8 <_scanf_float+0x230>
 80089de:	9900      	ldr	r1, [sp, #0]
 80089e0:	9804      	ldr	r0, [sp, #16]
 80089e2:	9708      	str	r7, [sp, #32]
 80089e4:	1a09      	subs	r1, r1, r0
 80089e6:	9107      	str	r1, [sp, #28]
 80089e8:	4934      	ldr	r1, [pc, #208]	; (8008abc <_scanf_float+0x304>)
 80089ea:	400a      	ands	r2, r1
 80089ec:	21c0      	movs	r1, #192	; 0xc0
 80089ee:	0049      	lsls	r1, r1, #1
 80089f0:	430a      	orrs	r2, r1
 80089f2:	6032      	str	r2, [r6, #0]
 80089f4:	2200      	movs	r2, #0
 80089f6:	9200      	str	r2, [sp, #0]
 80089f8:	e786      	b.n	8008908 <_scanf_float+0x150>
 80089fa:	2203      	movs	r2, #3
 80089fc:	e79e      	b.n	800893c <_scanf_float+0x184>
 80089fe:	23c0      	movs	r3, #192	; 0xc0
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	0029      	movs	r1, r5
 8008a04:	58f3      	ldr	r3, [r6, r3]
 8008a06:	9801      	ldr	r0, [sp, #4]
 8008a08:	4798      	blx	r3
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d100      	bne.n	8008a10 <_scanf_float+0x258>
 8008a0e:	e6f6      	b.n	80087fe <_scanf_float+0x46>
 8008a10:	e703      	b.n	800881a <_scanf_float+0x62>
 8008a12:	3f01      	subs	r7, #1
 8008a14:	5933      	ldr	r3, [r6, r4]
 8008a16:	002a      	movs	r2, r5
 8008a18:	7839      	ldrb	r1, [r7, #0]
 8008a1a:	9801      	ldr	r0, [sp, #4]
 8008a1c:	4798      	blx	r3
 8008a1e:	6933      	ldr	r3, [r6, #16]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	6133      	str	r3, [r6, #16]
 8008a24:	e707      	b.n	8008836 <_scanf_float+0x7e>
 8008a26:	1e63      	subs	r3, r4, #1
 8008a28:	2b06      	cmp	r3, #6
 8008a2a:	d80e      	bhi.n	8008a4a <_scanf_float+0x292>
 8008a2c:	9702      	str	r7, [sp, #8]
 8008a2e:	2c02      	cmp	r4, #2
 8008a30:	d920      	bls.n	8008a74 <_scanf_float+0x2bc>
 8008a32:	1be3      	subs	r3, r4, r7
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	9a05      	ldr	r2, [sp, #20]
 8008a3c:	189b      	adds	r3, r3, r2
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d827      	bhi.n	8008a94 <_scanf_float+0x2dc>
 8008a44:	3c03      	subs	r4, #3
 8008a46:	b2e4      	uxtb	r4, r4
 8008a48:	1b3f      	subs	r7, r7, r4
 8008a4a:	6833      	ldr	r3, [r6, #0]
 8008a4c:	05da      	lsls	r2, r3, #23
 8008a4e:	d554      	bpl.n	8008afa <_scanf_float+0x342>
 8008a50:	055b      	lsls	r3, r3, #21
 8008a52:	d537      	bpl.n	8008ac4 <_scanf_float+0x30c>
 8008a54:	24be      	movs	r4, #190	; 0xbe
 8008a56:	0064      	lsls	r4, r4, #1
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	429f      	cmp	r7, r3
 8008a5c:	d800      	bhi.n	8008a60 <_scanf_float+0x2a8>
 8008a5e:	e6ee      	b.n	800883e <_scanf_float+0x86>
 8008a60:	3f01      	subs	r7, #1
 8008a62:	5933      	ldr	r3, [r6, r4]
 8008a64:	002a      	movs	r2, r5
 8008a66:	7839      	ldrb	r1, [r7, #0]
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	4798      	blx	r3
 8008a6c:	6933      	ldr	r3, [r6, #16]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	6133      	str	r3, [r6, #16]
 8008a72:	e7f1      	b.n	8008a58 <_scanf_float+0x2a0>
 8008a74:	24be      	movs	r4, #190	; 0xbe
 8008a76:	0064      	lsls	r4, r4, #1
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	429f      	cmp	r7, r3
 8008a7c:	d800      	bhi.n	8008a80 <_scanf_float+0x2c8>
 8008a7e:	e6de      	b.n	800883e <_scanf_float+0x86>
 8008a80:	3f01      	subs	r7, #1
 8008a82:	5933      	ldr	r3, [r6, r4]
 8008a84:	002a      	movs	r2, r5
 8008a86:	7839      	ldrb	r1, [r7, #0]
 8008a88:	9801      	ldr	r0, [sp, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	6933      	ldr	r3, [r6, #16]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	6133      	str	r3, [r6, #16]
 8008a92:	e7f1      	b.n	8008a78 <_scanf_float+0x2c0>
 8008a94:	9b02      	ldr	r3, [sp, #8]
 8008a96:	002a      	movs	r2, r5
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	7819      	ldrb	r1, [r3, #0]
 8008a9c:	9302      	str	r3, [sp, #8]
 8008a9e:	23be      	movs	r3, #190	; 0xbe
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	58f3      	ldr	r3, [r6, r3]
 8008aa4:	9801      	ldr	r0, [sp, #4]
 8008aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa8:	4798      	blx	r3
 8008aaa:	6933      	ldr	r3, [r6, #16]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	6133      	str	r3, [r6, #16]
 8008ab0:	e7c2      	b.n	8008a38 <_scanf_float+0x280>
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	fffffeff 	.word	0xfffffeff
 8008ab8:	fffffe7f 	.word	0xfffffe7f
 8008abc:	fffff87f 	.word	0xfffff87f
 8008ac0:	fffffd7f 	.word	0xfffffd7f
 8008ac4:	6933      	ldr	r3, [r6, #16]
 8008ac6:	1e7c      	subs	r4, r7, #1
 8008ac8:	7821      	ldrb	r1, [r4, #0]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	6133      	str	r3, [r6, #16]
 8008ace:	2965      	cmp	r1, #101	; 0x65
 8008ad0:	d00c      	beq.n	8008aec <_scanf_float+0x334>
 8008ad2:	2945      	cmp	r1, #69	; 0x45
 8008ad4:	d00a      	beq.n	8008aec <_scanf_float+0x334>
 8008ad6:	23be      	movs	r3, #190	; 0xbe
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	58f3      	ldr	r3, [r6, r3]
 8008adc:	002a      	movs	r2, r5
 8008ade:	9801      	ldr	r0, [sp, #4]
 8008ae0:	4798      	blx	r3
 8008ae2:	6933      	ldr	r3, [r6, #16]
 8008ae4:	1ebc      	subs	r4, r7, #2
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	7821      	ldrb	r1, [r4, #0]
 8008aea:	6133      	str	r3, [r6, #16]
 8008aec:	23be      	movs	r3, #190	; 0xbe
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	002a      	movs	r2, r5
 8008af2:	58f3      	ldr	r3, [r6, r3]
 8008af4:	9801      	ldr	r0, [sp, #4]
 8008af6:	4798      	blx	r3
 8008af8:	0027      	movs	r7, r4
 8008afa:	6832      	ldr	r2, [r6, #0]
 8008afc:	2310      	movs	r3, #16
 8008afe:	0011      	movs	r1, r2
 8008b00:	4019      	ands	r1, r3
 8008b02:	9102      	str	r1, [sp, #8]
 8008b04:	421a      	tst	r2, r3
 8008b06:	d158      	bne.n	8008bba <_scanf_float+0x402>
 8008b08:	23c0      	movs	r3, #192	; 0xc0
 8008b0a:	7039      	strb	r1, [r7, #0]
 8008b0c:	6832      	ldr	r2, [r6, #0]
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4013      	ands	r3, r2
 8008b12:	2280      	movs	r2, #128	; 0x80
 8008b14:	00d2      	lsls	r2, r2, #3
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d11d      	bne.n	8008b56 <_scanf_float+0x39e>
 8008b1a:	9b04      	ldr	r3, [sp, #16]
 8008b1c:	9a00      	ldr	r2, [sp, #0]
 8008b1e:	9900      	ldr	r1, [sp, #0]
 8008b20:	1a9a      	subs	r2, r3, r2
 8008b22:	428b      	cmp	r3, r1
 8008b24:	d124      	bne.n	8008b70 <_scanf_float+0x3b8>
 8008b26:	2200      	movs	r2, #0
 8008b28:	9903      	ldr	r1, [sp, #12]
 8008b2a:	9801      	ldr	r0, [sp, #4]
 8008b2c:	f000 feb6 	bl	800989c <_strtod_r>
 8008b30:	9b06      	ldr	r3, [sp, #24]
 8008b32:	000d      	movs	r5, r1
 8008b34:	6831      	ldr	r1, [r6, #0]
 8008b36:	0004      	movs	r4, r0
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	078a      	lsls	r2, r1, #30
 8008b3c:	d525      	bpl.n	8008b8a <_scanf_float+0x3d2>
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	9906      	ldr	r1, [sp, #24]
 8008b42:	600a      	str	r2, [r1, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	601c      	str	r4, [r3, #0]
 8008b48:	605d      	str	r5, [r3, #4]
 8008b4a:	68f3      	ldr	r3, [r6, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60f3      	str	r3, [r6, #12]
 8008b50:	9802      	ldr	r0, [sp, #8]
 8008b52:	b00b      	add	sp, #44	; 0x2c
 8008b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b56:	9b07      	ldr	r3, [sp, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0e4      	beq.n	8008b26 <_scanf_float+0x36e>
 8008b5c:	9b08      	ldr	r3, [sp, #32]
 8008b5e:	9a02      	ldr	r2, [sp, #8]
 8008b60:	1c59      	adds	r1, r3, #1
 8008b62:	9801      	ldr	r0, [sp, #4]
 8008b64:	230a      	movs	r3, #10
 8008b66:	f000 ff2f 	bl	80099c8 <_strtol_r>
 8008b6a:	9b07      	ldr	r3, [sp, #28]
 8008b6c:	9f08      	ldr	r7, [sp, #32]
 8008b6e:	1ac2      	subs	r2, r0, r3
 8008b70:	0033      	movs	r3, r6
 8008b72:	3370      	adds	r3, #112	; 0x70
 8008b74:	33ff      	adds	r3, #255	; 0xff
 8008b76:	429f      	cmp	r7, r3
 8008b78:	d302      	bcc.n	8008b80 <_scanf_float+0x3c8>
 8008b7a:	0037      	movs	r7, r6
 8008b7c:	376f      	adds	r7, #111	; 0x6f
 8008b7e:	37ff      	adds	r7, #255	; 0xff
 8008b80:	0038      	movs	r0, r7
 8008b82:	490f      	ldr	r1, [pc, #60]	; (8008bc0 <_scanf_float+0x408>)
 8008b84:	f000 f83e 	bl	8008c04 <siprintf>
 8008b88:	e7cd      	b.n	8008b26 <_scanf_float+0x36e>
 8008b8a:	1d1a      	adds	r2, r3, #4
 8008b8c:	0749      	lsls	r1, r1, #29
 8008b8e:	d4d7      	bmi.n	8008b40 <_scanf_float+0x388>
 8008b90:	9906      	ldr	r1, [sp, #24]
 8008b92:	0020      	movs	r0, r4
 8008b94:	600a      	str	r2, [r1, #0]
 8008b96:	681f      	ldr	r7, [r3, #0]
 8008b98:	0022      	movs	r2, r4
 8008b9a:	002b      	movs	r3, r5
 8008b9c:	0029      	movs	r1, r5
 8008b9e:	f7f9 fa2f 	bl	8002000 <__aeabi_dcmpun>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d004      	beq.n	8008bb0 <_scanf_float+0x3f8>
 8008ba6:	4807      	ldr	r0, [pc, #28]	; (8008bc4 <_scanf_float+0x40c>)
 8008ba8:	f000 f828 	bl	8008bfc <nanf>
 8008bac:	6038      	str	r0, [r7, #0]
 8008bae:	e7cc      	b.n	8008b4a <_scanf_float+0x392>
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	0029      	movs	r1, r5
 8008bb4:	f7f9 face 	bl	8002154 <__aeabi_d2f>
 8008bb8:	e7f8      	b.n	8008bac <_scanf_float+0x3f4>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e640      	b.n	8008840 <_scanf_float+0x88>
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	0800caa0 	.word	0x0800caa0
 8008bc4:	0800cf10 	.word	0x0800cf10

08008bc8 <iprintf>:
 8008bc8:	b40f      	push	{r0, r1, r2, r3}
 8008bca:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <iprintf+0x30>)
 8008bcc:	b513      	push	{r0, r1, r4, lr}
 8008bce:	681c      	ldr	r4, [r3, #0]
 8008bd0:	2c00      	cmp	r4, #0
 8008bd2:	d005      	beq.n	8008be0 <iprintf+0x18>
 8008bd4:	69a3      	ldr	r3, [r4, #24]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <iprintf+0x18>
 8008bda:	0020      	movs	r0, r4
 8008bdc:	f001 fe00 	bl	800a7e0 <__sinit>
 8008be0:	ab05      	add	r3, sp, #20
 8008be2:	0020      	movs	r0, r4
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	68a1      	ldr	r1, [r4, #8]
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f003 f99f 	bl	800bf2c <_vfiprintf_r>
 8008bee:	bc16      	pop	{r1, r2, r4}
 8008bf0:	bc08      	pop	{r3}
 8008bf2:	b004      	add	sp, #16
 8008bf4:	4718      	bx	r3
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	20000024 	.word	0x20000024

08008bfc <nanf>:
 8008bfc:	4800      	ldr	r0, [pc, #0]	; (8008c00 <nanf+0x4>)
 8008bfe:	4770      	bx	lr
 8008c00:	7fc00000 	.word	0x7fc00000

08008c04 <siprintf>:
 8008c04:	b40e      	push	{r1, r2, r3}
 8008c06:	b500      	push	{lr}
 8008c08:	490b      	ldr	r1, [pc, #44]	; (8008c38 <siprintf+0x34>)
 8008c0a:	b09c      	sub	sp, #112	; 0x70
 8008c0c:	ab1d      	add	r3, sp, #116	; 0x74
 8008c0e:	9002      	str	r0, [sp, #8]
 8008c10:	9006      	str	r0, [sp, #24]
 8008c12:	9107      	str	r1, [sp, #28]
 8008c14:	9104      	str	r1, [sp, #16]
 8008c16:	4809      	ldr	r0, [pc, #36]	; (8008c3c <siprintf+0x38>)
 8008c18:	4909      	ldr	r1, [pc, #36]	; (8008c40 <siprintf+0x3c>)
 8008c1a:	cb04      	ldmia	r3!, {r2}
 8008c1c:	9105      	str	r1, [sp, #20]
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	a902      	add	r1, sp, #8
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	f003 f85a 	bl	800bcdc <_svfiprintf_r>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9a02      	ldr	r2, [sp, #8]
 8008c2c:	7013      	strb	r3, [r2, #0]
 8008c2e:	b01c      	add	sp, #112	; 0x70
 8008c30:	bc08      	pop	{r3}
 8008c32:	b003      	add	sp, #12
 8008c34:	4718      	bx	r3
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	7fffffff 	.word	0x7fffffff
 8008c3c:	20000024 	.word	0x20000024
 8008c40:	ffff0208 	.word	0xffff0208

08008c44 <sulp>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	0016      	movs	r6, r2
 8008c48:	000d      	movs	r5, r1
 8008c4a:	f002 fd91 	bl	800b770 <__ulp>
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d00d      	beq.n	8008c6e <sulp+0x2a>
 8008c52:	236b      	movs	r3, #107	; 0x6b
 8008c54:	006a      	lsls	r2, r5, #1
 8008c56:	0d52      	lsrs	r2, r2, #21
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dd07      	ble.n	8008c6e <sulp+0x2a>
 8008c5e:	2400      	movs	r4, #0
 8008c60:	4a03      	ldr	r2, [pc, #12]	; (8008c70 <sulp+0x2c>)
 8008c62:	051b      	lsls	r3, r3, #20
 8008c64:	189d      	adds	r5, r3, r2
 8008c66:	002b      	movs	r3, r5
 8008c68:	0022      	movs	r2, r4
 8008c6a:	f7f8 fbcb 	bl	8001404 <__aeabi_dmul>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	3ff00000 	.word	0x3ff00000

08008c74 <_strtod_l>:
 8008c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c76:	001d      	movs	r5, r3
 8008c78:	2300      	movs	r3, #0
 8008c7a:	b0a5      	sub	sp, #148	; 0x94
 8008c7c:	9320      	str	r3, [sp, #128]	; 0x80
 8008c7e:	4bac      	ldr	r3, [pc, #688]	; (8008f30 <_strtod_l+0x2bc>)
 8008c80:	9005      	str	r0, [sp, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	9108      	str	r1, [sp, #32]
 8008c86:	0018      	movs	r0, r3
 8008c88:	9307      	str	r3, [sp, #28]
 8008c8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c8c:	f7f7 fa3c 	bl	8000108 <strlen>
 8008c90:	2600      	movs	r6, #0
 8008c92:	0004      	movs	r4, r0
 8008c94:	2700      	movs	r7, #0
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008c9c:	7813      	ldrb	r3, [r2, #0]
 8008c9e:	2b2b      	cmp	r3, #43	; 0x2b
 8008ca0:	d058      	beq.n	8008d54 <_strtod_l+0xe0>
 8008ca2:	d844      	bhi.n	8008d2e <_strtod_l+0xba>
 8008ca4:	2b0d      	cmp	r3, #13
 8008ca6:	d83d      	bhi.n	8008d24 <_strtod_l+0xb0>
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d83d      	bhi.n	8008d28 <_strtod_l+0xb4>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d047      	beq.n	8008d40 <_strtod_l+0xcc>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cba:	9306      	str	r3, [sp, #24]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b30      	cmp	r3, #48	; 0x30
 8008cc0:	d000      	beq.n	8008cc4 <_strtod_l+0x50>
 8008cc2:	e07f      	b.n	8008dc4 <_strtod_l+0x150>
 8008cc4:	9b06      	ldr	r3, [sp, #24]
 8008cc6:	3220      	adds	r2, #32
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	4393      	bics	r3, r2
 8008ccc:	2b58      	cmp	r3, #88	; 0x58
 8008cce:	d000      	beq.n	8008cd2 <_strtod_l+0x5e>
 8008cd0:	e06e      	b.n	8008db0 <_strtod_l+0x13c>
 8008cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd4:	9502      	str	r5, [sp, #8]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	ab20      	add	r3, sp, #128	; 0x80
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	4a95      	ldr	r2, [pc, #596]	; (8008f34 <_strtod_l+0x2c0>)
 8008cde:	ab21      	add	r3, sp, #132	; 0x84
 8008ce0:	9805      	ldr	r0, [sp, #20]
 8008ce2:	a91f      	add	r1, sp, #124	; 0x7c
 8008ce4:	f001 fe86 	bl	800a9f4 <__gethex>
 8008ce8:	2307      	movs	r3, #7
 8008cea:	0005      	movs	r5, r0
 8008cec:	0004      	movs	r4, r0
 8008cee:	401d      	ands	r5, r3
 8008cf0:	4218      	tst	r0, r3
 8008cf2:	d006      	beq.n	8008d02 <_strtod_l+0x8e>
 8008cf4:	2d06      	cmp	r5, #6
 8008cf6:	d12f      	bne.n	8008d58 <_strtod_l+0xe4>
 8008cf8:	9b06      	ldr	r3, [sp, #24]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	931f      	str	r3, [sp, #124]	; 0x7c
 8008cfe:	2300      	movs	r3, #0
 8008d00:	930e      	str	r3, [sp, #56]	; 0x38
 8008d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <_strtod_l+0x9a>
 8008d08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d0a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01c      	beq.n	8008d4e <_strtod_l+0xda>
 8008d14:	2380      	movs	r3, #128	; 0x80
 8008d16:	0032      	movs	r2, r6
 8008d18:	061b      	lsls	r3, r3, #24
 8008d1a:	18fb      	adds	r3, r7, r3
 8008d1c:	0010      	movs	r0, r2
 8008d1e:	0019      	movs	r1, r3
 8008d20:	b025      	add	sp, #148	; 0x94
 8008d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d1c3      	bne.n	8008cb0 <_strtod_l+0x3c>
 8008d28:	3201      	adds	r2, #1
 8008d2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8008d2c:	e7b5      	b.n	8008c9a <_strtod_l+0x26>
 8008d2e:	2b2d      	cmp	r3, #45	; 0x2d
 8008d30:	d1be      	bne.n	8008cb0 <_strtod_l+0x3c>
 8008d32:	3b2c      	subs	r3, #44	; 0x2c
 8008d34:	930e      	str	r3, [sp, #56]	; 0x38
 8008d36:	1c53      	adds	r3, r2, #1
 8008d38:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d3a:	7853      	ldrb	r3, [r2, #1]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1b9      	bne.n	8008cb4 <_strtod_l+0x40>
 8008d40:	9b08      	ldr	r3, [sp, #32]
 8008d42:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d44:	2300      	movs	r3, #0
 8008d46:	930e      	str	r3, [sp, #56]	; 0x38
 8008d48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1dc      	bne.n	8008d08 <_strtod_l+0x94>
 8008d4e:	0032      	movs	r2, r6
 8008d50:	003b      	movs	r3, r7
 8008d52:	e7e3      	b.n	8008d1c <_strtod_l+0xa8>
 8008d54:	2300      	movs	r3, #0
 8008d56:	e7ed      	b.n	8008d34 <_strtod_l+0xc0>
 8008d58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	d007      	beq.n	8008d6e <_strtod_l+0xfa>
 8008d5e:	2135      	movs	r1, #53	; 0x35
 8008d60:	a822      	add	r0, sp, #136	; 0x88
 8008d62:	f002 fe06 	bl	800b972 <__copybits>
 8008d66:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008d68:	9805      	ldr	r0, [sp, #20]
 8008d6a:	f002 f9c1 	bl	800b0f0 <_Bfree>
 8008d6e:	1e68      	subs	r0, r5, #1
 8008d70:	2804      	cmp	r0, #4
 8008d72:	d806      	bhi.n	8008d82 <_strtod_l+0x10e>
 8008d74:	f7f7 f9d0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008d78:	1816030b 	.word	0x1816030b
 8008d7c:	0b          	.byte	0x0b
 8008d7d:	00          	.byte	0x00
 8008d7e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008d80:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8008d82:	0723      	lsls	r3, r4, #28
 8008d84:	d5bd      	bpl.n	8008d02 <_strtod_l+0x8e>
 8008d86:	2380      	movs	r3, #128	; 0x80
 8008d88:	061b      	lsls	r3, r3, #24
 8008d8a:	431f      	orrs	r7, r3
 8008d8c:	e7b9      	b.n	8008d02 <_strtod_l+0x8e>
 8008d8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d90:	4a69      	ldr	r2, [pc, #420]	; (8008f38 <_strtod_l+0x2c4>)
 8008d92:	496a      	ldr	r1, [pc, #424]	; (8008f3c <_strtod_l+0x2c8>)
 8008d94:	401a      	ands	r2, r3
 8008d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d98:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008d9a:	185b      	adds	r3, r3, r1
 8008d9c:	051b      	lsls	r3, r3, #20
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	0017      	movs	r7, r2
 8008da2:	e7ee      	b.n	8008d82 <_strtod_l+0x10e>
 8008da4:	4f66      	ldr	r7, [pc, #408]	; (8008f40 <_strtod_l+0x2cc>)
 8008da6:	e7ec      	b.n	8008d82 <_strtod_l+0x10e>
 8008da8:	2601      	movs	r6, #1
 8008daa:	4f66      	ldr	r7, [pc, #408]	; (8008f44 <_strtod_l+0x2d0>)
 8008dac:	4276      	negs	r6, r6
 8008dae:	e7e8      	b.n	8008d82 <_strtod_l+0x10e>
 8008db0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	921f      	str	r2, [sp, #124]	; 0x7c
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	2b30      	cmp	r3, #48	; 0x30
 8008dba:	d0f9      	beq.n	8008db0 <_strtod_l+0x13c>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0a0      	beq.n	8008d02 <_strtod_l+0x8e>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8008dc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008dc6:	220a      	movs	r2, #10
 8008dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8008dca:	2300      	movs	r3, #0
 8008dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008dd4:	7805      	ldrb	r5, [r0, #0]
 8008dd6:	002b      	movs	r3, r5
 8008dd8:	3b30      	subs	r3, #48	; 0x30
 8008dda:	b2d9      	uxtb	r1, r3
 8008ddc:	2909      	cmp	r1, #9
 8008dde:	d927      	bls.n	8008e30 <_strtod_l+0x1bc>
 8008de0:	0022      	movs	r2, r4
 8008de2:	9907      	ldr	r1, [sp, #28]
 8008de4:	f003 fa40 	bl	800c268 <strncmp>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d033      	beq.n	8008e54 <_strtod_l+0x1e0>
 8008dec:	2000      	movs	r0, #0
 8008dee:	002b      	movs	r3, r5
 8008df0:	4684      	mov	ip, r0
 8008df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008df4:	900c      	str	r0, [sp, #48]	; 0x30
 8008df6:	9206      	str	r2, [sp, #24]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	4391      	bics	r1, r2
 8008dfe:	000a      	movs	r2, r1
 8008e00:	2100      	movs	r1, #0
 8008e02:	9107      	str	r1, [sp, #28]
 8008e04:	2a45      	cmp	r2, #69	; 0x45
 8008e06:	d000      	beq.n	8008e0a <_strtod_l+0x196>
 8008e08:	e0c5      	b.n	8008f96 <_strtod_l+0x322>
 8008e0a:	9b06      	ldr	r3, [sp, #24]
 8008e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e0e:	4303      	orrs	r3, r0
 8008e10:	4313      	orrs	r3, r2
 8008e12:	428b      	cmp	r3, r1
 8008e14:	d094      	beq.n	8008d40 <_strtod_l+0xcc>
 8008e16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008e1e:	9b08      	ldr	r3, [sp, #32]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b2b      	cmp	r3, #43	; 0x2b
 8008e24:	d076      	beq.n	8008f14 <_strtod_l+0x2a0>
 8008e26:	000c      	movs	r4, r1
 8008e28:	2b2d      	cmp	r3, #45	; 0x2d
 8008e2a:	d179      	bne.n	8008f20 <_strtod_l+0x2ac>
 8008e2c:	2401      	movs	r4, #1
 8008e2e:	e072      	b.n	8008f16 <_strtod_l+0x2a2>
 8008e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e32:	2908      	cmp	r1, #8
 8008e34:	dc09      	bgt.n	8008e4a <_strtod_l+0x1d6>
 8008e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e38:	4351      	muls	r1, r2
 8008e3a:	185b      	adds	r3, r3, r1
 8008e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e40:	3001      	adds	r0, #1
 8008e42:	3301      	adds	r3, #1
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	901f      	str	r0, [sp, #124]	; 0x7c
 8008e48:	e7c3      	b.n	8008dd2 <_strtod_l+0x15e>
 8008e4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e4c:	4351      	muls	r1, r2
 8008e4e:	185b      	adds	r3, r3, r1
 8008e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e52:	e7f4      	b.n	8008e3e <_strtod_l+0x1ca>
 8008e54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e58:	191c      	adds	r4, r3, r4
 8008e5a:	941f      	str	r4, [sp, #124]	; 0x7c
 8008e5c:	7823      	ldrb	r3, [r4, #0]
 8008e5e:	2a00      	cmp	r2, #0
 8008e60:	d039      	beq.n	8008ed6 <_strtod_l+0x262>
 8008e62:	900c      	str	r0, [sp, #48]	; 0x30
 8008e64:	9206      	str	r2, [sp, #24]
 8008e66:	001a      	movs	r2, r3
 8008e68:	3a30      	subs	r2, #48	; 0x30
 8008e6a:	2a09      	cmp	r2, #9
 8008e6c:	d912      	bls.n	8008e94 <_strtod_l+0x220>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4694      	mov	ip, r2
 8008e72:	e7c1      	b.n	8008df8 <_strtod_l+0x184>
 8008e74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e76:	3001      	adds	r0, #1
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	921f      	str	r2, [sp, #124]	; 0x7c
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	2b30      	cmp	r3, #48	; 0x30
 8008e80:	d0f8      	beq.n	8008e74 <_strtod_l+0x200>
 8008e82:	001a      	movs	r2, r3
 8008e84:	3a31      	subs	r2, #49	; 0x31
 8008e86:	2a08      	cmp	r2, #8
 8008e88:	d83f      	bhi.n	8008f0a <_strtod_l+0x296>
 8008e8a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008e90:	9006      	str	r0, [sp, #24]
 8008e92:	9210      	str	r2, [sp, #64]	; 0x40
 8008e94:	001a      	movs	r2, r3
 8008e96:	1c41      	adds	r1, r0, #1
 8008e98:	3a30      	subs	r2, #48	; 0x30
 8008e9a:	2b30      	cmp	r3, #48	; 0x30
 8008e9c:	d015      	beq.n	8008eca <_strtod_l+0x256>
 8008e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea0:	185b      	adds	r3, r3, r1
 8008ea2:	210a      	movs	r1, #10
 8008ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	18c4      	adds	r4, r0, r3
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	d115      	bne.n	8008eda <_strtod_l+0x266>
 8008eae:	9906      	ldr	r1, [sp, #24]
 8008eb0:	9b06      	ldr	r3, [sp, #24]
 8008eb2:	3101      	adds	r1, #1
 8008eb4:	1809      	adds	r1, r1, r0
 8008eb6:	181b      	adds	r3, r3, r0
 8008eb8:	9106      	str	r1, [sp, #24]
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	dc1b      	bgt.n	8008ef6 <_strtod_l+0x282>
 8008ebe:	230a      	movs	r3, #10
 8008ec0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ec2:	434b      	muls	r3, r1
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	18d3      	adds	r3, r2, r3
 8008ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ecc:	0008      	movs	r0, r1
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	921f      	str	r2, [sp, #124]	; 0x7c
 8008ed2:	785b      	ldrb	r3, [r3, #1]
 8008ed4:	e7c7      	b.n	8008e66 <_strtod_l+0x1f2>
 8008ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed8:	e7d1      	b.n	8008e7e <_strtod_l+0x20a>
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	dc04      	bgt.n	8008ee8 <_strtod_l+0x274>
 8008ede:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ee0:	434d      	muls	r5, r1
 8008ee2:	950b      	str	r5, [sp, #44]	; 0x2c
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	e7e0      	b.n	8008eaa <_strtod_l+0x236>
 8008ee8:	1c5d      	adds	r5, r3, #1
 8008eea:	2d10      	cmp	r5, #16
 8008eec:	dcfa      	bgt.n	8008ee4 <_strtod_l+0x270>
 8008eee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ef0:	434d      	muls	r5, r1
 8008ef2:	950f      	str	r5, [sp, #60]	; 0x3c
 8008ef4:	e7f6      	b.n	8008ee4 <_strtod_l+0x270>
 8008ef6:	9b06      	ldr	r3, [sp, #24]
 8008ef8:	2100      	movs	r1, #0
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	dce5      	bgt.n	8008eca <_strtod_l+0x256>
 8008efe:	230a      	movs	r3, #10
 8008f00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008f02:	4343      	muls	r3, r0
 8008f04:	18d3      	adds	r3, r2, r3
 8008f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f08:	e7df      	b.n	8008eca <_strtod_l+0x256>
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	920c      	str	r2, [sp, #48]	; 0x30
 8008f0e:	9206      	str	r2, [sp, #24]
 8008f10:	3201      	adds	r2, #1
 8008f12:	e7ad      	b.n	8008e70 <_strtod_l+0x1fc>
 8008f14:	2400      	movs	r4, #0
 8008f16:	9b08      	ldr	r3, [sp, #32]
 8008f18:	3302      	adds	r3, #2
 8008f1a:	931f      	str	r3, [sp, #124]	; 0x7c
 8008f1c:	9b08      	ldr	r3, [sp, #32]
 8008f1e:	789b      	ldrb	r3, [r3, #2]
 8008f20:	001a      	movs	r2, r3
 8008f22:	3a30      	subs	r2, #48	; 0x30
 8008f24:	2a09      	cmp	r2, #9
 8008f26:	d913      	bls.n	8008f50 <_strtod_l+0x2dc>
 8008f28:	9a08      	ldr	r2, [sp, #32]
 8008f2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	e031      	b.n	8008f94 <_strtod_l+0x320>
 8008f30:	0800cd54 	.word	0x0800cd54
 8008f34:	0800caa8 	.word	0x0800caa8
 8008f38:	ffefffff 	.word	0xffefffff
 8008f3c:	00000433 	.word	0x00000433
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	7fffffff 	.word	0x7fffffff
 8008f48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	2b30      	cmp	r3, #48	; 0x30
 8008f52:	d0f9      	beq.n	8008f48 <_strtod_l+0x2d4>
 8008f54:	2200      	movs	r2, #0
 8008f56:	9207      	str	r2, [sp, #28]
 8008f58:	001a      	movs	r2, r3
 8008f5a:	3a31      	subs	r2, #49	; 0x31
 8008f5c:	2a08      	cmp	r2, #8
 8008f5e:	d81a      	bhi.n	8008f96 <_strtod_l+0x322>
 8008f60:	3b30      	subs	r3, #48	; 0x30
 8008f62:	001a      	movs	r2, r3
 8008f64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f6a:	1c59      	adds	r1, r3, #1
 8008f6c:	911f      	str	r1, [sp, #124]	; 0x7c
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	001d      	movs	r5, r3
 8008f72:	3d30      	subs	r5, #48	; 0x30
 8008f74:	2d09      	cmp	r5, #9
 8008f76:	d939      	bls.n	8008fec <_strtod_l+0x378>
 8008f78:	9d07      	ldr	r5, [sp, #28]
 8008f7a:	1b49      	subs	r1, r1, r5
 8008f7c:	4db0      	ldr	r5, [pc, #704]	; (8009240 <_strtod_l+0x5cc>)
 8008f7e:	9507      	str	r5, [sp, #28]
 8008f80:	2908      	cmp	r1, #8
 8008f82:	dc03      	bgt.n	8008f8c <_strtod_l+0x318>
 8008f84:	9207      	str	r2, [sp, #28]
 8008f86:	42aa      	cmp	r2, r5
 8008f88:	dd00      	ble.n	8008f8c <_strtod_l+0x318>
 8008f8a:	9507      	str	r5, [sp, #28]
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	d002      	beq.n	8008f96 <_strtod_l+0x322>
 8008f90:	9a07      	ldr	r2, [sp, #28]
 8008f92:	4252      	negs	r2, r2
 8008f94:	9207      	str	r2, [sp, #28]
 8008f96:	9a06      	ldr	r2, [sp, #24]
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	d14b      	bne.n	8009034 <_strtod_l+0x3c0>
 8008f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9e:	4310      	orrs	r0, r2
 8008fa0:	d000      	beq.n	8008fa4 <_strtod_l+0x330>
 8008fa2:	e6ae      	b.n	8008d02 <_strtod_l+0x8e>
 8008fa4:	4662      	mov	r2, ip
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	d000      	beq.n	8008fac <_strtod_l+0x338>
 8008faa:	e6c9      	b.n	8008d40 <_strtod_l+0xcc>
 8008fac:	2b69      	cmp	r3, #105	; 0x69
 8008fae:	d025      	beq.n	8008ffc <_strtod_l+0x388>
 8008fb0:	dc21      	bgt.n	8008ff6 <_strtod_l+0x382>
 8008fb2:	2b49      	cmp	r3, #73	; 0x49
 8008fb4:	d022      	beq.n	8008ffc <_strtod_l+0x388>
 8008fb6:	2b4e      	cmp	r3, #78	; 0x4e
 8008fb8:	d000      	beq.n	8008fbc <_strtod_l+0x348>
 8008fba:	e6c1      	b.n	8008d40 <_strtod_l+0xcc>
 8008fbc:	49a1      	ldr	r1, [pc, #644]	; (8009244 <_strtod_l+0x5d0>)
 8008fbe:	a81f      	add	r0, sp, #124	; 0x7c
 8008fc0:	f001 ff66 	bl	800ae90 <__match>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d100      	bne.n	8008fca <_strtod_l+0x356>
 8008fc8:	e6ba      	b.n	8008d40 <_strtod_l+0xcc>
 8008fca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b28      	cmp	r3, #40	; 0x28
 8008fd0:	d12a      	bne.n	8009028 <_strtod_l+0x3b4>
 8008fd2:	499d      	ldr	r1, [pc, #628]	; (8009248 <_strtod_l+0x5d4>)
 8008fd4:	aa22      	add	r2, sp, #136	; 0x88
 8008fd6:	a81f      	add	r0, sp, #124	; 0x7c
 8008fd8:	f001 ff6e 	bl	800aeb8 <__hexnan>
 8008fdc:	2805      	cmp	r0, #5
 8008fde:	d123      	bne.n	8009028 <_strtod_l+0x3b4>
 8008fe0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fe2:	4a9a      	ldr	r2, [pc, #616]	; (800924c <_strtod_l+0x5d8>)
 8008fe4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	0017      	movs	r7, r2
 8008fea:	e68a      	b.n	8008d02 <_strtod_l+0x8e>
 8008fec:	210a      	movs	r1, #10
 8008fee:	434a      	muls	r2, r1
 8008ff0:	18d2      	adds	r2, r2, r3
 8008ff2:	3a30      	subs	r2, #48	; 0x30
 8008ff4:	e7b8      	b.n	8008f68 <_strtod_l+0x2f4>
 8008ff6:	2b6e      	cmp	r3, #110	; 0x6e
 8008ff8:	d0e0      	beq.n	8008fbc <_strtod_l+0x348>
 8008ffa:	e6a1      	b.n	8008d40 <_strtod_l+0xcc>
 8008ffc:	4994      	ldr	r1, [pc, #592]	; (8009250 <_strtod_l+0x5dc>)
 8008ffe:	a81f      	add	r0, sp, #124	; 0x7c
 8009000:	f001 ff46 	bl	800ae90 <__match>
 8009004:	2800      	cmp	r0, #0
 8009006:	d100      	bne.n	800900a <_strtod_l+0x396>
 8009008:	e69a      	b.n	8008d40 <_strtod_l+0xcc>
 800900a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800900c:	4991      	ldr	r1, [pc, #580]	; (8009254 <_strtod_l+0x5e0>)
 800900e:	3b01      	subs	r3, #1
 8009010:	a81f      	add	r0, sp, #124	; 0x7c
 8009012:	931f      	str	r3, [sp, #124]	; 0x7c
 8009014:	f001 ff3c 	bl	800ae90 <__match>
 8009018:	2800      	cmp	r0, #0
 800901a:	d102      	bne.n	8009022 <_strtod_l+0x3ae>
 800901c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800901e:	3301      	adds	r3, #1
 8009020:	931f      	str	r3, [sp, #124]	; 0x7c
 8009022:	2600      	movs	r6, #0
 8009024:	4f89      	ldr	r7, [pc, #548]	; (800924c <_strtod_l+0x5d8>)
 8009026:	e66c      	b.n	8008d02 <_strtod_l+0x8e>
 8009028:	488b      	ldr	r0, [pc, #556]	; (8009258 <_strtod_l+0x5e4>)
 800902a:	f003 f8b9 	bl	800c1a0 <nan>
 800902e:	0006      	movs	r6, r0
 8009030:	000f      	movs	r7, r1
 8009032:	e666      	b.n	8008d02 <_strtod_l+0x8e>
 8009034:	9b07      	ldr	r3, [sp, #28]
 8009036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009038:	1a9b      	subs	r3, r3, r2
 800903a:	930a      	str	r3, [sp, #40]	; 0x28
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <_strtod_l+0x3d2>
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
 8009046:	9c06      	ldr	r4, [sp, #24]
 8009048:	2c10      	cmp	r4, #16
 800904a:	dd00      	ble.n	800904e <_strtod_l+0x3da>
 800904c:	2410      	movs	r4, #16
 800904e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009050:	f7f9 f85a 	bl	8002108 <__aeabi_ui2d>
 8009054:	9b06      	ldr	r3, [sp, #24]
 8009056:	0006      	movs	r6, r0
 8009058:	000f      	movs	r7, r1
 800905a:	2b09      	cmp	r3, #9
 800905c:	dd15      	ble.n	800908a <_strtod_l+0x416>
 800905e:	0022      	movs	r2, r4
 8009060:	4b7e      	ldr	r3, [pc, #504]	; (800925c <_strtod_l+0x5e8>)
 8009062:	3a09      	subs	r2, #9
 8009064:	00d2      	lsls	r2, r2, #3
 8009066:	189b      	adds	r3, r3, r2
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f7f8 f9ca 	bl	8001404 <__aeabi_dmul>
 8009070:	0006      	movs	r6, r0
 8009072:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009074:	000f      	movs	r7, r1
 8009076:	f7f9 f847 	bl	8002108 <__aeabi_ui2d>
 800907a:	0002      	movs	r2, r0
 800907c:	000b      	movs	r3, r1
 800907e:	0030      	movs	r0, r6
 8009080:	0039      	movs	r1, r7
 8009082:	f7f7 fa81 	bl	8000588 <__aeabi_dadd>
 8009086:	0006      	movs	r6, r0
 8009088:	000f      	movs	r7, r1
 800908a:	9b06      	ldr	r3, [sp, #24]
 800908c:	2b0f      	cmp	r3, #15
 800908e:	dc39      	bgt.n	8009104 <_strtod_l+0x490>
 8009090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d100      	bne.n	8009098 <_strtod_l+0x424>
 8009096:	e634      	b.n	8008d02 <_strtod_l+0x8e>
 8009098:	dd24      	ble.n	80090e4 <_strtod_l+0x470>
 800909a:	2b16      	cmp	r3, #22
 800909c:	dc09      	bgt.n	80090b2 <_strtod_l+0x43e>
 800909e:	496f      	ldr	r1, [pc, #444]	; (800925c <_strtod_l+0x5e8>)
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	18c9      	adds	r1, r1, r3
 80090a4:	0032      	movs	r2, r6
 80090a6:	6808      	ldr	r0, [r1, #0]
 80090a8:	6849      	ldr	r1, [r1, #4]
 80090aa:	003b      	movs	r3, r7
 80090ac:	f7f8 f9aa 	bl	8001404 <__aeabi_dmul>
 80090b0:	e7bd      	b.n	800902e <_strtod_l+0x3ba>
 80090b2:	2325      	movs	r3, #37	; 0x25
 80090b4:	9a06      	ldr	r2, [sp, #24]
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090ba:	4293      	cmp	r3, r2
 80090bc:	db22      	blt.n	8009104 <_strtod_l+0x490>
 80090be:	240f      	movs	r4, #15
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	4d66      	ldr	r5, [pc, #408]	; (800925c <_strtod_l+0x5e8>)
 80090c4:	1ae4      	subs	r4, r4, r3
 80090c6:	00e1      	lsls	r1, r4, #3
 80090c8:	1869      	adds	r1, r5, r1
 80090ca:	0032      	movs	r2, r6
 80090cc:	6808      	ldr	r0, [r1, #0]
 80090ce:	6849      	ldr	r1, [r1, #4]
 80090d0:	003b      	movs	r3, r7
 80090d2:	f7f8 f997 	bl	8001404 <__aeabi_dmul>
 80090d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d8:	1b1c      	subs	r4, r3, r4
 80090da:	00e4      	lsls	r4, r4, #3
 80090dc:	192c      	adds	r4, r5, r4
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	e7e3      	b.n	80090ac <_strtod_l+0x438>
 80090e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e6:	3316      	adds	r3, #22
 80090e8:	db0c      	blt.n	8009104 <_strtod_l+0x490>
 80090ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ec:	9a07      	ldr	r2, [sp, #28]
 80090ee:	0030      	movs	r0, r6
 80090f0:	1a9a      	subs	r2, r3, r2
 80090f2:	4b5a      	ldr	r3, [pc, #360]	; (800925c <_strtod_l+0x5e8>)
 80090f4:	00d2      	lsls	r2, r2, #3
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	0039      	movs	r1, r7
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f7f7 fd7f 	bl	8000c00 <__aeabi_ddiv>
 8009102:	e794      	b.n	800902e <_strtod_l+0x3ba>
 8009104:	9b06      	ldr	r3, [sp, #24]
 8009106:	1b1c      	subs	r4, r3, r4
 8009108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910a:	18e4      	adds	r4, r4, r3
 800910c:	2c00      	cmp	r4, #0
 800910e:	dd72      	ble.n	80091f6 <_strtod_l+0x582>
 8009110:	230f      	movs	r3, #15
 8009112:	0021      	movs	r1, r4
 8009114:	4019      	ands	r1, r3
 8009116:	421c      	tst	r4, r3
 8009118:	d00a      	beq.n	8009130 <_strtod_l+0x4bc>
 800911a:	00cb      	lsls	r3, r1, #3
 800911c:	494f      	ldr	r1, [pc, #316]	; (800925c <_strtod_l+0x5e8>)
 800911e:	0032      	movs	r2, r6
 8009120:	18c9      	adds	r1, r1, r3
 8009122:	6808      	ldr	r0, [r1, #0]
 8009124:	6849      	ldr	r1, [r1, #4]
 8009126:	003b      	movs	r3, r7
 8009128:	f7f8 f96c 	bl	8001404 <__aeabi_dmul>
 800912c:	0006      	movs	r6, r0
 800912e:	000f      	movs	r7, r1
 8009130:	230f      	movs	r3, #15
 8009132:	439c      	bics	r4, r3
 8009134:	d04a      	beq.n	80091cc <_strtod_l+0x558>
 8009136:	3326      	adds	r3, #38	; 0x26
 8009138:	33ff      	adds	r3, #255	; 0xff
 800913a:	429c      	cmp	r4, r3
 800913c:	dd22      	ble.n	8009184 <_strtod_l+0x510>
 800913e:	2300      	movs	r3, #0
 8009140:	9306      	str	r3, [sp, #24]
 8009142:	9307      	str	r3, [sp, #28]
 8009144:	930b      	str	r3, [sp, #44]	; 0x2c
 8009146:	9309      	str	r3, [sp, #36]	; 0x24
 8009148:	2322      	movs	r3, #34	; 0x22
 800914a:	2600      	movs	r6, #0
 800914c:	9a05      	ldr	r2, [sp, #20]
 800914e:	4f3f      	ldr	r7, [pc, #252]	; (800924c <_strtod_l+0x5d8>)
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009154:	42b3      	cmp	r3, r6
 8009156:	d100      	bne.n	800915a <_strtod_l+0x4e6>
 8009158:	e5d3      	b.n	8008d02 <_strtod_l+0x8e>
 800915a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800915c:	9805      	ldr	r0, [sp, #20]
 800915e:	f001 ffc7 	bl	800b0f0 <_Bfree>
 8009162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009164:	9805      	ldr	r0, [sp, #20]
 8009166:	f001 ffc3 	bl	800b0f0 <_Bfree>
 800916a:	9907      	ldr	r1, [sp, #28]
 800916c:	9805      	ldr	r0, [sp, #20]
 800916e:	f001 ffbf 	bl	800b0f0 <_Bfree>
 8009172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009174:	9805      	ldr	r0, [sp, #20]
 8009176:	f001 ffbb 	bl	800b0f0 <_Bfree>
 800917a:	9906      	ldr	r1, [sp, #24]
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	f001 ffb7 	bl	800b0f0 <_Bfree>
 8009182:	e5be      	b.n	8008d02 <_strtod_l+0x8e>
 8009184:	2300      	movs	r3, #0
 8009186:	0030      	movs	r0, r6
 8009188:	0039      	movs	r1, r7
 800918a:	4d35      	ldr	r5, [pc, #212]	; (8009260 <_strtod_l+0x5ec>)
 800918c:	1124      	asrs	r4, r4, #4
 800918e:	9308      	str	r3, [sp, #32]
 8009190:	2c01      	cmp	r4, #1
 8009192:	dc1e      	bgt.n	80091d2 <_strtod_l+0x55e>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <_strtod_l+0x528>
 8009198:	0006      	movs	r6, r0
 800919a:	000f      	movs	r7, r1
 800919c:	4b31      	ldr	r3, [pc, #196]	; (8009264 <_strtod_l+0x5f0>)
 800919e:	0032      	movs	r2, r6
 80091a0:	18ff      	adds	r7, r7, r3
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	00dd      	lsls	r5, r3, #3
 80091a6:	4b2e      	ldr	r3, [pc, #184]	; (8009260 <_strtod_l+0x5ec>)
 80091a8:	195d      	adds	r5, r3, r5
 80091aa:	6828      	ldr	r0, [r5, #0]
 80091ac:	6869      	ldr	r1, [r5, #4]
 80091ae:	003b      	movs	r3, r7
 80091b0:	f7f8 f928 	bl	8001404 <__aeabi_dmul>
 80091b4:	4b25      	ldr	r3, [pc, #148]	; (800924c <_strtod_l+0x5d8>)
 80091b6:	4a2c      	ldr	r2, [pc, #176]	; (8009268 <_strtod_l+0x5f4>)
 80091b8:	0006      	movs	r6, r0
 80091ba:	400b      	ands	r3, r1
 80091bc:	4293      	cmp	r3, r2
 80091be:	d8be      	bhi.n	800913e <_strtod_l+0x4ca>
 80091c0:	4a2a      	ldr	r2, [pc, #168]	; (800926c <_strtod_l+0x5f8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d913      	bls.n	80091ee <_strtod_l+0x57a>
 80091c6:	2601      	movs	r6, #1
 80091c8:	4f29      	ldr	r7, [pc, #164]	; (8009270 <_strtod_l+0x5fc>)
 80091ca:	4276      	negs	r6, r6
 80091cc:	2300      	movs	r3, #0
 80091ce:	9308      	str	r3, [sp, #32]
 80091d0:	e087      	b.n	80092e2 <_strtod_l+0x66e>
 80091d2:	2201      	movs	r2, #1
 80091d4:	4214      	tst	r4, r2
 80091d6:	d004      	beq.n	80091e2 <_strtod_l+0x56e>
 80091d8:	682a      	ldr	r2, [r5, #0]
 80091da:	686b      	ldr	r3, [r5, #4]
 80091dc:	f7f8 f912 	bl	8001404 <__aeabi_dmul>
 80091e0:	2301      	movs	r3, #1
 80091e2:	9a08      	ldr	r2, [sp, #32]
 80091e4:	1064      	asrs	r4, r4, #1
 80091e6:	3201      	adds	r2, #1
 80091e8:	9208      	str	r2, [sp, #32]
 80091ea:	3508      	adds	r5, #8
 80091ec:	e7d0      	b.n	8009190 <_strtod_l+0x51c>
 80091ee:	23d4      	movs	r3, #212	; 0xd4
 80091f0:	049b      	lsls	r3, r3, #18
 80091f2:	18cf      	adds	r7, r1, r3
 80091f4:	e7ea      	b.n	80091cc <_strtod_l+0x558>
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d0e8      	beq.n	80091cc <_strtod_l+0x558>
 80091fa:	4264      	negs	r4, r4
 80091fc:	220f      	movs	r2, #15
 80091fe:	0023      	movs	r3, r4
 8009200:	4013      	ands	r3, r2
 8009202:	4214      	tst	r4, r2
 8009204:	d00a      	beq.n	800921c <_strtod_l+0x5a8>
 8009206:	00da      	lsls	r2, r3, #3
 8009208:	4b14      	ldr	r3, [pc, #80]	; (800925c <_strtod_l+0x5e8>)
 800920a:	0030      	movs	r0, r6
 800920c:	189b      	adds	r3, r3, r2
 800920e:	0039      	movs	r1, r7
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f7f7 fcf4 	bl	8000c00 <__aeabi_ddiv>
 8009218:	0006      	movs	r6, r0
 800921a:	000f      	movs	r7, r1
 800921c:	1124      	asrs	r4, r4, #4
 800921e:	d0d5      	beq.n	80091cc <_strtod_l+0x558>
 8009220:	2c1f      	cmp	r4, #31
 8009222:	dd27      	ble.n	8009274 <_strtod_l+0x600>
 8009224:	2300      	movs	r3, #0
 8009226:	9306      	str	r3, [sp, #24]
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	930b      	str	r3, [sp, #44]	; 0x2c
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	2322      	movs	r3, #34	; 0x22
 8009230:	9a05      	ldr	r2, [sp, #20]
 8009232:	2600      	movs	r6, #0
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009238:	2700      	movs	r7, #0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d18d      	bne.n	800915a <_strtod_l+0x4e6>
 800923e:	e560      	b.n	8008d02 <_strtod_l+0x8e>
 8009240:	00004e1f 	.word	0x00004e1f
 8009244:	0800ca79 	.word	0x0800ca79
 8009248:	0800cabc 	.word	0x0800cabc
 800924c:	7ff00000 	.word	0x7ff00000
 8009250:	0800ca71 	.word	0x0800ca71
 8009254:	0800cbfc 	.word	0x0800cbfc
 8009258:	0800cf10 	.word	0x0800cf10
 800925c:	0800cdf0 	.word	0x0800cdf0
 8009260:	0800cdc8 	.word	0x0800cdc8
 8009264:	fcb00000 	.word	0xfcb00000
 8009268:	7ca00000 	.word	0x7ca00000
 800926c:	7c900000 	.word	0x7c900000
 8009270:	7fefffff 	.word	0x7fefffff
 8009274:	2310      	movs	r3, #16
 8009276:	0022      	movs	r2, r4
 8009278:	401a      	ands	r2, r3
 800927a:	9208      	str	r2, [sp, #32]
 800927c:	421c      	tst	r4, r3
 800927e:	d001      	beq.n	8009284 <_strtod_l+0x610>
 8009280:	335a      	adds	r3, #90	; 0x5a
 8009282:	9308      	str	r3, [sp, #32]
 8009284:	0030      	movs	r0, r6
 8009286:	0039      	movs	r1, r7
 8009288:	2300      	movs	r3, #0
 800928a:	4dc5      	ldr	r5, [pc, #788]	; (80095a0 <_strtod_l+0x92c>)
 800928c:	2201      	movs	r2, #1
 800928e:	4214      	tst	r4, r2
 8009290:	d004      	beq.n	800929c <_strtod_l+0x628>
 8009292:	682a      	ldr	r2, [r5, #0]
 8009294:	686b      	ldr	r3, [r5, #4]
 8009296:	f7f8 f8b5 	bl	8001404 <__aeabi_dmul>
 800929a:	2301      	movs	r3, #1
 800929c:	1064      	asrs	r4, r4, #1
 800929e:	3508      	adds	r5, #8
 80092a0:	2c00      	cmp	r4, #0
 80092a2:	d1f3      	bne.n	800928c <_strtod_l+0x618>
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <_strtod_l+0x638>
 80092a8:	0006      	movs	r6, r0
 80092aa:	000f      	movs	r7, r1
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00f      	beq.n	80092d2 <_strtod_l+0x65e>
 80092b2:	236b      	movs	r3, #107	; 0x6b
 80092b4:	007a      	lsls	r2, r7, #1
 80092b6:	0d52      	lsrs	r2, r2, #21
 80092b8:	0039      	movs	r1, r7
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dd08      	ble.n	80092d2 <_strtod_l+0x65e>
 80092c0:	2b1f      	cmp	r3, #31
 80092c2:	dc00      	bgt.n	80092c6 <_strtod_l+0x652>
 80092c4:	e124      	b.n	8009510 <_strtod_l+0x89c>
 80092c6:	2600      	movs	r6, #0
 80092c8:	2b34      	cmp	r3, #52	; 0x34
 80092ca:	dc00      	bgt.n	80092ce <_strtod_l+0x65a>
 80092cc:	e119      	b.n	8009502 <_strtod_l+0x88e>
 80092ce:	27dc      	movs	r7, #220	; 0xdc
 80092d0:	04bf      	lsls	r7, r7, #18
 80092d2:	2200      	movs	r2, #0
 80092d4:	2300      	movs	r3, #0
 80092d6:	0030      	movs	r0, r6
 80092d8:	0039      	movs	r1, r7
 80092da:	f7f7 f8b7 	bl	800044c <__aeabi_dcmpeq>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d1a0      	bne.n	8009224 <_strtod_l+0x5b0>
 80092e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	9805      	ldr	r0, [sp, #20]
 80092ee:	f001 ff67 	bl	800b1c0 <__s2b>
 80092f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d100      	bne.n	80092fa <_strtod_l+0x686>
 80092f8:	e721      	b.n	800913e <_strtod_l+0x4ca>
 80092fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fc:	9907      	ldr	r1, [sp, #28]
 80092fe:	17da      	asrs	r2, r3, #31
 8009300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009302:	1a5b      	subs	r3, r3, r1
 8009304:	401a      	ands	r2, r3
 8009306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009308:	9215      	str	r2, [sp, #84]	; 0x54
 800930a:	43db      	mvns	r3, r3
 800930c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800930e:	17db      	asrs	r3, r3, #31
 8009310:	401a      	ands	r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	921a      	str	r2, [sp, #104]	; 0x68
 8009316:	9306      	str	r3, [sp, #24]
 8009318:	9307      	str	r3, [sp, #28]
 800931a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800931c:	9805      	ldr	r0, [sp, #20]
 800931e:	6859      	ldr	r1, [r3, #4]
 8009320:	f001 fea2 	bl	800b068 <_Balloc>
 8009324:	9009      	str	r0, [sp, #36]	; 0x24
 8009326:	2800      	cmp	r0, #0
 8009328:	d100      	bne.n	800932c <_strtod_l+0x6b8>
 800932a:	e70d      	b.n	8009148 <_strtod_l+0x4d4>
 800932c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	310c      	adds	r1, #12
 8009334:	1c9a      	adds	r2, r3, #2
 8009336:	0092      	lsls	r2, r2, #2
 8009338:	300c      	adds	r0, #12
 800933a:	930c      	str	r3, [sp, #48]	; 0x30
 800933c:	f7fe fdbc 	bl	8007eb8 <memcpy>
 8009340:	ab22      	add	r3, sp, #136	; 0x88
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	ab21      	add	r3, sp, #132	; 0x84
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	0032      	movs	r2, r6
 800934a:	003b      	movs	r3, r7
 800934c:	9805      	ldr	r0, [sp, #20]
 800934e:	9612      	str	r6, [sp, #72]	; 0x48
 8009350:	9713      	str	r7, [sp, #76]	; 0x4c
 8009352:	f002 fa81 	bl	800b858 <__d2b>
 8009356:	9020      	str	r0, [sp, #128]	; 0x80
 8009358:	2800      	cmp	r0, #0
 800935a:	d100      	bne.n	800935e <_strtod_l+0x6ea>
 800935c:	e6f4      	b.n	8009148 <_strtod_l+0x4d4>
 800935e:	2101      	movs	r1, #1
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	f001 ffc1 	bl	800b2e8 <__i2b>
 8009366:	9007      	str	r0, [sp, #28]
 8009368:	2800      	cmp	r0, #0
 800936a:	d100      	bne.n	800936e <_strtod_l+0x6fa>
 800936c:	e6ec      	b.n	8009148 <_strtod_l+0x4d4>
 800936e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009370:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009372:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009374:	1ad4      	subs	r4, r2, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	db01      	blt.n	800937e <_strtod_l+0x70a>
 800937a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800937c:	195d      	adds	r5, r3, r5
 800937e:	9908      	ldr	r1, [sp, #32]
 8009380:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009382:	1a5b      	subs	r3, r3, r1
 8009384:	2136      	movs	r1, #54	; 0x36
 8009386:	189b      	adds	r3, r3, r2
 8009388:	1a8a      	subs	r2, r1, r2
 800938a:	4986      	ldr	r1, [pc, #536]	; (80095a4 <_strtod_l+0x930>)
 800938c:	2001      	movs	r0, #1
 800938e:	468c      	mov	ip, r1
 8009390:	2100      	movs	r1, #0
 8009392:	3b01      	subs	r3, #1
 8009394:	9110      	str	r1, [sp, #64]	; 0x40
 8009396:	9014      	str	r0, [sp, #80]	; 0x50
 8009398:	4563      	cmp	r3, ip
 800939a:	da07      	bge.n	80093ac <_strtod_l+0x738>
 800939c:	4661      	mov	r1, ip
 800939e:	1ac9      	subs	r1, r1, r3
 80093a0:	1a52      	subs	r2, r2, r1
 80093a2:	291f      	cmp	r1, #31
 80093a4:	dd00      	ble.n	80093a8 <_strtod_l+0x734>
 80093a6:	e0b8      	b.n	800951a <_strtod_l+0x8a6>
 80093a8:	4088      	lsls	r0, r1
 80093aa:	9014      	str	r0, [sp, #80]	; 0x50
 80093ac:	18ab      	adds	r3, r5, r2
 80093ae:	930c      	str	r3, [sp, #48]	; 0x30
 80093b0:	18a4      	adds	r4, r4, r2
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b6:	191c      	adds	r4, r3, r4
 80093b8:	002b      	movs	r3, r5
 80093ba:	4295      	cmp	r5, r2
 80093bc:	dd00      	ble.n	80093c0 <_strtod_l+0x74c>
 80093be:	0013      	movs	r3, r2
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	dd00      	ble.n	80093c6 <_strtod_l+0x752>
 80093c4:	0023      	movs	r3, r4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd04      	ble.n	80093d4 <_strtod_l+0x760>
 80093ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093cc:	1ae4      	subs	r4, r4, r3
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	920c      	str	r2, [sp, #48]	; 0x30
 80093d2:	1aed      	subs	r5, r5, r3
 80093d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd17      	ble.n	800940a <_strtod_l+0x796>
 80093da:	001a      	movs	r2, r3
 80093dc:	9907      	ldr	r1, [sp, #28]
 80093de:	9805      	ldr	r0, [sp, #20]
 80093e0:	f002 f848 	bl	800b474 <__pow5mult>
 80093e4:	9007      	str	r0, [sp, #28]
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d100      	bne.n	80093ec <_strtod_l+0x778>
 80093ea:	e6ad      	b.n	8009148 <_strtod_l+0x4d4>
 80093ec:	0001      	movs	r1, r0
 80093ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093f0:	9805      	ldr	r0, [sp, #20]
 80093f2:	f001 ff8f 	bl	800b314 <__multiply>
 80093f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d100      	bne.n	80093fe <_strtod_l+0x78a>
 80093fc:	e6a4      	b.n	8009148 <_strtod_l+0x4d4>
 80093fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009400:	9805      	ldr	r0, [sp, #20]
 8009402:	f001 fe75 	bl	800b0f0 <_Bfree>
 8009406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009408:	9320      	str	r3, [sp, #128]	; 0x80
 800940a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd00      	ble.n	8009412 <_strtod_l+0x79e>
 8009410:	e089      	b.n	8009526 <_strtod_l+0x8b2>
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	2b00      	cmp	r3, #0
 8009416:	dd08      	ble.n	800942a <_strtod_l+0x7b6>
 8009418:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800941a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800941c:	9805      	ldr	r0, [sp, #20]
 800941e:	f002 f829 	bl	800b474 <__pow5mult>
 8009422:	9009      	str	r0, [sp, #36]	; 0x24
 8009424:	2800      	cmp	r0, #0
 8009426:	d100      	bne.n	800942a <_strtod_l+0x7b6>
 8009428:	e68e      	b.n	8009148 <_strtod_l+0x4d4>
 800942a:	2c00      	cmp	r4, #0
 800942c:	dd08      	ble.n	8009440 <_strtod_l+0x7cc>
 800942e:	0022      	movs	r2, r4
 8009430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009432:	9805      	ldr	r0, [sp, #20]
 8009434:	f002 f87a 	bl	800b52c <__lshift>
 8009438:	9009      	str	r0, [sp, #36]	; 0x24
 800943a:	2800      	cmp	r0, #0
 800943c:	d100      	bne.n	8009440 <_strtod_l+0x7cc>
 800943e:	e683      	b.n	8009148 <_strtod_l+0x4d4>
 8009440:	2d00      	cmp	r5, #0
 8009442:	dd08      	ble.n	8009456 <_strtod_l+0x7e2>
 8009444:	002a      	movs	r2, r5
 8009446:	9907      	ldr	r1, [sp, #28]
 8009448:	9805      	ldr	r0, [sp, #20]
 800944a:	f002 f86f 	bl	800b52c <__lshift>
 800944e:	9007      	str	r0, [sp, #28]
 8009450:	2800      	cmp	r0, #0
 8009452:	d100      	bne.n	8009456 <_strtod_l+0x7e2>
 8009454:	e678      	b.n	8009148 <_strtod_l+0x4d4>
 8009456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009458:	9920      	ldr	r1, [sp, #128]	; 0x80
 800945a:	9805      	ldr	r0, [sp, #20]
 800945c:	f002 f8f0 	bl	800b640 <__mdiff>
 8009460:	9006      	str	r0, [sp, #24]
 8009462:	2800      	cmp	r0, #0
 8009464:	d100      	bne.n	8009468 <_strtod_l+0x7f4>
 8009466:	e66f      	b.n	8009148 <_strtod_l+0x4d4>
 8009468:	2200      	movs	r2, #0
 800946a:	68c3      	ldr	r3, [r0, #12]
 800946c:	9907      	ldr	r1, [sp, #28]
 800946e:	60c2      	str	r2, [r0, #12]
 8009470:	930f      	str	r3, [sp, #60]	; 0x3c
 8009472:	f002 f8c9 	bl	800b608 <__mcmp>
 8009476:	2800      	cmp	r0, #0
 8009478:	da5f      	bge.n	800953a <_strtod_l+0x8c6>
 800947a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800947c:	4333      	orrs	r3, r6
 800947e:	d000      	beq.n	8009482 <_strtod_l+0x80e>
 8009480:	e08a      	b.n	8009598 <_strtod_l+0x924>
 8009482:	033b      	lsls	r3, r7, #12
 8009484:	d000      	beq.n	8009488 <_strtod_l+0x814>
 8009486:	e087      	b.n	8009598 <_strtod_l+0x924>
 8009488:	22d6      	movs	r2, #214	; 0xd6
 800948a:	4b47      	ldr	r3, [pc, #284]	; (80095a8 <_strtod_l+0x934>)
 800948c:	04d2      	lsls	r2, r2, #19
 800948e:	403b      	ands	r3, r7
 8009490:	4293      	cmp	r3, r2
 8009492:	d800      	bhi.n	8009496 <_strtod_l+0x822>
 8009494:	e080      	b.n	8009598 <_strtod_l+0x924>
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	930a      	str	r3, [sp, #40]	; 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	d104      	bne.n	80094aa <_strtod_l+0x836>
 80094a0:	9b06      	ldr	r3, [sp, #24]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	930a      	str	r3, [sp, #40]	; 0x28
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	dd76      	ble.n	8009598 <_strtod_l+0x924>
 80094aa:	9906      	ldr	r1, [sp, #24]
 80094ac:	2201      	movs	r2, #1
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	f002 f83c 	bl	800b52c <__lshift>
 80094b4:	9907      	ldr	r1, [sp, #28]
 80094b6:	9006      	str	r0, [sp, #24]
 80094b8:	f002 f8a6 	bl	800b608 <__mcmp>
 80094bc:	2800      	cmp	r0, #0
 80094be:	dd6b      	ble.n	8009598 <_strtod_l+0x924>
 80094c0:	9908      	ldr	r1, [sp, #32]
 80094c2:	003b      	movs	r3, r7
 80094c4:	4a38      	ldr	r2, [pc, #224]	; (80095a8 <_strtod_l+0x934>)
 80094c6:	2900      	cmp	r1, #0
 80094c8:	d100      	bne.n	80094cc <_strtod_l+0x858>
 80094ca:	e092      	b.n	80095f2 <_strtod_l+0x97e>
 80094cc:	0011      	movs	r1, r2
 80094ce:	20d6      	movs	r0, #214	; 0xd6
 80094d0:	4039      	ands	r1, r7
 80094d2:	04c0      	lsls	r0, r0, #19
 80094d4:	4281      	cmp	r1, r0
 80094d6:	dd00      	ble.n	80094da <_strtod_l+0x866>
 80094d8:	e08b      	b.n	80095f2 <_strtod_l+0x97e>
 80094da:	23dc      	movs	r3, #220	; 0xdc
 80094dc:	049b      	lsls	r3, r3, #18
 80094de:	4299      	cmp	r1, r3
 80094e0:	dc00      	bgt.n	80094e4 <_strtod_l+0x870>
 80094e2:	e6a4      	b.n	800922e <_strtod_l+0x5ba>
 80094e4:	0030      	movs	r0, r6
 80094e6:	0039      	movs	r1, r7
 80094e8:	2200      	movs	r2, #0
 80094ea:	4b30      	ldr	r3, [pc, #192]	; (80095ac <_strtod_l+0x938>)
 80094ec:	f7f7 ff8a 	bl	8001404 <__aeabi_dmul>
 80094f0:	0006      	movs	r6, r0
 80094f2:	000f      	movs	r7, r1
 80094f4:	4308      	orrs	r0, r1
 80094f6:	d000      	beq.n	80094fa <_strtod_l+0x886>
 80094f8:	e62f      	b.n	800915a <_strtod_l+0x4e6>
 80094fa:	2322      	movs	r3, #34	; 0x22
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	e62b      	b.n	800915a <_strtod_l+0x4e6>
 8009502:	234b      	movs	r3, #75	; 0x4b
 8009504:	1a9a      	subs	r2, r3, r2
 8009506:	3b4c      	subs	r3, #76	; 0x4c
 8009508:	4093      	lsls	r3, r2
 800950a:	4019      	ands	r1, r3
 800950c:	000f      	movs	r7, r1
 800950e:	e6e0      	b.n	80092d2 <_strtod_l+0x65e>
 8009510:	2201      	movs	r2, #1
 8009512:	4252      	negs	r2, r2
 8009514:	409a      	lsls	r2, r3
 8009516:	4016      	ands	r6, r2
 8009518:	e6db      	b.n	80092d2 <_strtod_l+0x65e>
 800951a:	4925      	ldr	r1, [pc, #148]	; (80095b0 <_strtod_l+0x93c>)
 800951c:	1acb      	subs	r3, r1, r3
 800951e:	0001      	movs	r1, r0
 8009520:	4099      	lsls	r1, r3
 8009522:	9110      	str	r1, [sp, #64]	; 0x40
 8009524:	e741      	b.n	80093aa <_strtod_l+0x736>
 8009526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009528:	9920      	ldr	r1, [sp, #128]	; 0x80
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	f001 fffe 	bl	800b52c <__lshift>
 8009530:	9020      	str	r0, [sp, #128]	; 0x80
 8009532:	2800      	cmp	r0, #0
 8009534:	d000      	beq.n	8009538 <_strtod_l+0x8c4>
 8009536:	e76c      	b.n	8009412 <_strtod_l+0x79e>
 8009538:	e606      	b.n	8009148 <_strtod_l+0x4d4>
 800953a:	970c      	str	r7, [sp, #48]	; 0x30
 800953c:	2800      	cmp	r0, #0
 800953e:	d176      	bne.n	800962e <_strtod_l+0x9ba>
 8009540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009542:	033b      	lsls	r3, r7, #12
 8009544:	0b1b      	lsrs	r3, r3, #12
 8009546:	2a00      	cmp	r2, #0
 8009548:	d038      	beq.n	80095bc <_strtod_l+0x948>
 800954a:	4a1a      	ldr	r2, [pc, #104]	; (80095b4 <_strtod_l+0x940>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d138      	bne.n	80095c2 <_strtod_l+0x94e>
 8009550:	2201      	movs	r2, #1
 8009552:	9b08      	ldr	r3, [sp, #32]
 8009554:	4252      	negs	r2, r2
 8009556:	0031      	movs	r1, r6
 8009558:	0010      	movs	r0, r2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <_strtod_l+0x902>
 800955e:	24d4      	movs	r4, #212	; 0xd4
 8009560:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <_strtod_l+0x934>)
 8009562:	0010      	movs	r0, r2
 8009564:	403b      	ands	r3, r7
 8009566:	04e4      	lsls	r4, r4, #19
 8009568:	42a3      	cmp	r3, r4
 800956a:	d804      	bhi.n	8009576 <_strtod_l+0x902>
 800956c:	306c      	adds	r0, #108	; 0x6c
 800956e:	0d1b      	lsrs	r3, r3, #20
 8009570:	1ac3      	subs	r3, r0, r3
 8009572:	409a      	lsls	r2, r3
 8009574:	0010      	movs	r0, r2
 8009576:	4281      	cmp	r1, r0
 8009578:	d123      	bne.n	80095c2 <_strtod_l+0x94e>
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <_strtod_l+0x944>)
 800957c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800957e:	429a      	cmp	r2, r3
 8009580:	d102      	bne.n	8009588 <_strtod_l+0x914>
 8009582:	1c4b      	adds	r3, r1, #1
 8009584:	d100      	bne.n	8009588 <_strtod_l+0x914>
 8009586:	e5df      	b.n	8009148 <_strtod_l+0x4d4>
 8009588:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <_strtod_l+0x934>)
 800958a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800958c:	2600      	movs	r6, #0
 800958e:	401a      	ands	r2, r3
 8009590:	0013      	movs	r3, r2
 8009592:	2280      	movs	r2, #128	; 0x80
 8009594:	0352      	lsls	r2, r2, #13
 8009596:	189f      	adds	r7, r3, r2
 8009598:	9b08      	ldr	r3, [sp, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1a2      	bne.n	80094e4 <_strtod_l+0x870>
 800959e:	e5dc      	b.n	800915a <_strtod_l+0x4e6>
 80095a0:	0800cad0 	.word	0x0800cad0
 80095a4:	fffffc02 	.word	0xfffffc02
 80095a8:	7ff00000 	.word	0x7ff00000
 80095ac:	39500000 	.word	0x39500000
 80095b0:	fffffbe2 	.word	0xfffffbe2
 80095b4:	000fffff 	.word	0x000fffff
 80095b8:	7fefffff 	.word	0x7fefffff
 80095bc:	4333      	orrs	r3, r6
 80095be:	d100      	bne.n	80095c2 <_strtod_l+0x94e>
 80095c0:	e77e      	b.n	80094c0 <_strtod_l+0x84c>
 80095c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01d      	beq.n	8009604 <_strtod_l+0x990>
 80095c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095cc:	4213      	tst	r3, r2
 80095ce:	d0e3      	beq.n	8009598 <_strtod_l+0x924>
 80095d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095d2:	0030      	movs	r0, r6
 80095d4:	0039      	movs	r1, r7
 80095d6:	9a08      	ldr	r2, [sp, #32]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d017      	beq.n	800960c <_strtod_l+0x998>
 80095dc:	f7ff fb32 	bl	8008c44 <sulp>
 80095e0:	0002      	movs	r2, r0
 80095e2:	000b      	movs	r3, r1
 80095e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80095e8:	f7f6 ffce 	bl	8000588 <__aeabi_dadd>
 80095ec:	0006      	movs	r6, r0
 80095ee:	000f      	movs	r7, r1
 80095f0:	e7d2      	b.n	8009598 <_strtod_l+0x924>
 80095f2:	2601      	movs	r6, #1
 80095f4:	4013      	ands	r3, r2
 80095f6:	4a99      	ldr	r2, [pc, #612]	; (800985c <_strtod_l+0xbe8>)
 80095f8:	4276      	negs	r6, r6
 80095fa:	189b      	adds	r3, r3, r2
 80095fc:	4a98      	ldr	r2, [pc, #608]	; (8009860 <_strtod_l+0xbec>)
 80095fe:	431a      	orrs	r2, r3
 8009600:	0017      	movs	r7, r2
 8009602:	e7c9      	b.n	8009598 <_strtod_l+0x924>
 8009604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009606:	4233      	tst	r3, r6
 8009608:	d0c6      	beq.n	8009598 <_strtod_l+0x924>
 800960a:	e7e1      	b.n	80095d0 <_strtod_l+0x95c>
 800960c:	f7ff fb1a 	bl	8008c44 <sulp>
 8009610:	0002      	movs	r2, r0
 8009612:	000b      	movs	r3, r1
 8009614:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009616:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009618:	f7f8 f960 	bl	80018dc <__aeabi_dsub>
 800961c:	2200      	movs	r2, #0
 800961e:	2300      	movs	r3, #0
 8009620:	0006      	movs	r6, r0
 8009622:	000f      	movs	r7, r1
 8009624:	f7f6 ff12 	bl	800044c <__aeabi_dcmpeq>
 8009628:	2800      	cmp	r0, #0
 800962a:	d0b5      	beq.n	8009598 <_strtod_l+0x924>
 800962c:	e5ff      	b.n	800922e <_strtod_l+0x5ba>
 800962e:	9907      	ldr	r1, [sp, #28]
 8009630:	9806      	ldr	r0, [sp, #24]
 8009632:	f002 f975 	bl	800b920 <__ratio>
 8009636:	2380      	movs	r3, #128	; 0x80
 8009638:	2200      	movs	r2, #0
 800963a:	05db      	lsls	r3, r3, #23
 800963c:	0004      	movs	r4, r0
 800963e:	000d      	movs	r5, r1
 8009640:	f7f6 ff14 	bl	800046c <__aeabi_dcmple>
 8009644:	2800      	cmp	r0, #0
 8009646:	d075      	beq.n	8009734 <_strtod_l+0xac0>
 8009648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d047      	beq.n	80096de <_strtod_l+0xa6a>
 800964e:	2300      	movs	r3, #0
 8009650:	4c84      	ldr	r4, [pc, #528]	; (8009864 <_strtod_l+0xbf0>)
 8009652:	2500      	movs	r5, #0
 8009654:	9310      	str	r3, [sp, #64]	; 0x40
 8009656:	9411      	str	r4, [sp, #68]	; 0x44
 8009658:	4c82      	ldr	r4, [pc, #520]	; (8009864 <_strtod_l+0xbf0>)
 800965a:	4a83      	ldr	r2, [pc, #524]	; (8009868 <_strtod_l+0xbf4>)
 800965c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800965e:	4013      	ands	r3, r2
 8009660:	9314      	str	r3, [sp, #80]	; 0x50
 8009662:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009664:	4b81      	ldr	r3, [pc, #516]	; (800986c <_strtod_l+0xbf8>)
 8009666:	429a      	cmp	r2, r3
 8009668:	d000      	beq.n	800966c <_strtod_l+0x9f8>
 800966a:	e0ac      	b.n	80097c6 <_strtod_l+0xb52>
 800966c:	4a80      	ldr	r2, [pc, #512]	; (8009870 <_strtod_l+0xbfc>)
 800966e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009670:	4694      	mov	ip, r2
 8009672:	4463      	add	r3, ip
 8009674:	001f      	movs	r7, r3
 8009676:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800967a:	0030      	movs	r0, r6
 800967c:	0039      	movs	r1, r7
 800967e:	920c      	str	r2, [sp, #48]	; 0x30
 8009680:	930d      	str	r3, [sp, #52]	; 0x34
 8009682:	f002 f875 	bl	800b770 <__ulp>
 8009686:	0002      	movs	r2, r0
 8009688:	000b      	movs	r3, r1
 800968a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800968c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800968e:	f7f7 feb9 	bl	8001404 <__aeabi_dmul>
 8009692:	0032      	movs	r2, r6
 8009694:	003b      	movs	r3, r7
 8009696:	f7f6 ff77 	bl	8000588 <__aeabi_dadd>
 800969a:	4a73      	ldr	r2, [pc, #460]	; (8009868 <_strtod_l+0xbf4>)
 800969c:	4b75      	ldr	r3, [pc, #468]	; (8009874 <_strtod_l+0xc00>)
 800969e:	0006      	movs	r6, r0
 80096a0:	400a      	ands	r2, r1
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d95e      	bls.n	8009764 <_strtod_l+0xaf0>
 80096a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096a8:	4b73      	ldr	r3, [pc, #460]	; (8009878 <_strtod_l+0xc04>)
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d103      	bne.n	80096b6 <_strtod_l+0xa42>
 80096ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096b0:	3301      	adds	r3, #1
 80096b2:	d100      	bne.n	80096b6 <_strtod_l+0xa42>
 80096b4:	e548      	b.n	8009148 <_strtod_l+0x4d4>
 80096b6:	2601      	movs	r6, #1
 80096b8:	4f6f      	ldr	r7, [pc, #444]	; (8009878 <_strtod_l+0xc04>)
 80096ba:	4276      	negs	r6, r6
 80096bc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80096be:	9805      	ldr	r0, [sp, #20]
 80096c0:	f001 fd16 	bl	800b0f0 <_Bfree>
 80096c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096c6:	9805      	ldr	r0, [sp, #20]
 80096c8:	f001 fd12 	bl	800b0f0 <_Bfree>
 80096cc:	9907      	ldr	r1, [sp, #28]
 80096ce:	9805      	ldr	r0, [sp, #20]
 80096d0:	f001 fd0e 	bl	800b0f0 <_Bfree>
 80096d4:	9906      	ldr	r1, [sp, #24]
 80096d6:	9805      	ldr	r0, [sp, #20]
 80096d8:	f001 fd0a 	bl	800b0f0 <_Bfree>
 80096dc:	e61d      	b.n	800931a <_strtod_l+0x6a6>
 80096de:	2e00      	cmp	r6, #0
 80096e0:	d11c      	bne.n	800971c <_strtod_l+0xaa8>
 80096e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096e4:	031b      	lsls	r3, r3, #12
 80096e6:	d11f      	bne.n	8009728 <_strtod_l+0xab4>
 80096e8:	2200      	movs	r2, #0
 80096ea:	0020      	movs	r0, r4
 80096ec:	0029      	movs	r1, r5
 80096ee:	4b5d      	ldr	r3, [pc, #372]	; (8009864 <_strtod_l+0xbf0>)
 80096f0:	f7f6 feb2 	bl	8000458 <__aeabi_dcmplt>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d11a      	bne.n	800972e <_strtod_l+0xaba>
 80096f8:	0020      	movs	r0, r4
 80096fa:	0029      	movs	r1, r5
 80096fc:	2200      	movs	r2, #0
 80096fe:	4b5f      	ldr	r3, [pc, #380]	; (800987c <_strtod_l+0xc08>)
 8009700:	f7f7 fe80 	bl	8001404 <__aeabi_dmul>
 8009704:	0005      	movs	r5, r0
 8009706:	000c      	movs	r4, r1
 8009708:	2380      	movs	r3, #128	; 0x80
 800970a:	061b      	lsls	r3, r3, #24
 800970c:	18e3      	adds	r3, r4, r3
 800970e:	951c      	str	r5, [sp, #112]	; 0x70
 8009710:	931d      	str	r3, [sp, #116]	; 0x74
 8009712:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009716:	9210      	str	r2, [sp, #64]	; 0x40
 8009718:	9311      	str	r3, [sp, #68]	; 0x44
 800971a:	e79e      	b.n	800965a <_strtod_l+0x9e6>
 800971c:	2e01      	cmp	r6, #1
 800971e:	d103      	bne.n	8009728 <_strtod_l+0xab4>
 8009720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009722:	2b00      	cmp	r3, #0
 8009724:	d100      	bne.n	8009728 <_strtod_l+0xab4>
 8009726:	e582      	b.n	800922e <_strtod_l+0x5ba>
 8009728:	2300      	movs	r3, #0
 800972a:	4c55      	ldr	r4, [pc, #340]	; (8009880 <_strtod_l+0xc0c>)
 800972c:	e791      	b.n	8009652 <_strtod_l+0x9de>
 800972e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009730:	4c52      	ldr	r4, [pc, #328]	; (800987c <_strtod_l+0xc08>)
 8009732:	e7e9      	b.n	8009708 <_strtod_l+0xa94>
 8009734:	2200      	movs	r2, #0
 8009736:	0020      	movs	r0, r4
 8009738:	0029      	movs	r1, r5
 800973a:	4b50      	ldr	r3, [pc, #320]	; (800987c <_strtod_l+0xc08>)
 800973c:	f7f7 fe62 	bl	8001404 <__aeabi_dmul>
 8009740:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009742:	0005      	movs	r5, r0
 8009744:	000b      	movs	r3, r1
 8009746:	000c      	movs	r4, r1
 8009748:	2a00      	cmp	r2, #0
 800974a:	d107      	bne.n	800975c <_strtod_l+0xae8>
 800974c:	2280      	movs	r2, #128	; 0x80
 800974e:	0612      	lsls	r2, r2, #24
 8009750:	188b      	adds	r3, r1, r2
 8009752:	9016      	str	r0, [sp, #88]	; 0x58
 8009754:	9317      	str	r3, [sp, #92]	; 0x5c
 8009756:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800975a:	e7dc      	b.n	8009716 <_strtod_l+0xaa2>
 800975c:	0002      	movs	r2, r0
 800975e:	9216      	str	r2, [sp, #88]	; 0x58
 8009760:	9317      	str	r3, [sp, #92]	; 0x5c
 8009762:	e7f8      	b.n	8009756 <_strtod_l+0xae2>
 8009764:	23d4      	movs	r3, #212	; 0xd4
 8009766:	049b      	lsls	r3, r3, #18
 8009768:	18cf      	adds	r7, r1, r3
 800976a:	9b08      	ldr	r3, [sp, #32]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1a5      	bne.n	80096bc <_strtod_l+0xa48>
 8009770:	4b3d      	ldr	r3, [pc, #244]	; (8009868 <_strtod_l+0xbf4>)
 8009772:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009774:	403b      	ands	r3, r7
 8009776:	429a      	cmp	r2, r3
 8009778:	d1a0      	bne.n	80096bc <_strtod_l+0xa48>
 800977a:	0028      	movs	r0, r5
 800977c:	0021      	movs	r1, r4
 800977e:	f7f6 feb1 	bl	80004e4 <__aeabi_d2lz>
 8009782:	f7f6 feeb 	bl	800055c <__aeabi_l2d>
 8009786:	0002      	movs	r2, r0
 8009788:	000b      	movs	r3, r1
 800978a:	0028      	movs	r0, r5
 800978c:	0021      	movs	r1, r4
 800978e:	f7f8 f8a5 	bl	80018dc <__aeabi_dsub>
 8009792:	033b      	lsls	r3, r7, #12
 8009794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009796:	0b1b      	lsrs	r3, r3, #12
 8009798:	4333      	orrs	r3, r6
 800979a:	4313      	orrs	r3, r2
 800979c:	0004      	movs	r4, r0
 800979e:	000d      	movs	r5, r1
 80097a0:	4a38      	ldr	r2, [pc, #224]	; (8009884 <_strtod_l+0xc10>)
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d055      	beq.n	8009852 <_strtod_l+0xbde>
 80097a6:	4b38      	ldr	r3, [pc, #224]	; (8009888 <_strtod_l+0xc14>)
 80097a8:	f7f6 fe56 	bl	8000458 <__aeabi_dcmplt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d000      	beq.n	80097b2 <_strtod_l+0xb3e>
 80097b0:	e4d3      	b.n	800915a <_strtod_l+0x4e6>
 80097b2:	0020      	movs	r0, r4
 80097b4:	0029      	movs	r1, r5
 80097b6:	4a35      	ldr	r2, [pc, #212]	; (800988c <_strtod_l+0xc18>)
 80097b8:	4b30      	ldr	r3, [pc, #192]	; (800987c <_strtod_l+0xc08>)
 80097ba:	f7f6 fe61 	bl	8000480 <__aeabi_dcmpgt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d100      	bne.n	80097c4 <_strtod_l+0xb50>
 80097c2:	e77b      	b.n	80096bc <_strtod_l+0xa48>
 80097c4:	e4c9      	b.n	800915a <_strtod_l+0x4e6>
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d02b      	beq.n	8009824 <_strtod_l+0xbb0>
 80097cc:	23d4      	movs	r3, #212	; 0xd4
 80097ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097d0:	04db      	lsls	r3, r3, #19
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d826      	bhi.n	8009824 <_strtod_l+0xbb0>
 80097d6:	0028      	movs	r0, r5
 80097d8:	0021      	movs	r1, r4
 80097da:	4a2d      	ldr	r2, [pc, #180]	; (8009890 <_strtod_l+0xc1c>)
 80097dc:	4b2d      	ldr	r3, [pc, #180]	; (8009894 <_strtod_l+0xc20>)
 80097de:	f7f6 fe45 	bl	800046c <__aeabi_dcmple>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d017      	beq.n	8009816 <_strtod_l+0xba2>
 80097e6:	0028      	movs	r0, r5
 80097e8:	0021      	movs	r1, r4
 80097ea:	f7f6 fe5d 	bl	80004a8 <__aeabi_d2uiz>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d100      	bne.n	80097f4 <_strtod_l+0xb80>
 80097f2:	3001      	adds	r0, #1
 80097f4:	f7f8 fc88 	bl	8002108 <__aeabi_ui2d>
 80097f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097fa:	0005      	movs	r5, r0
 80097fc:	000b      	movs	r3, r1
 80097fe:	000c      	movs	r4, r1
 8009800:	2a00      	cmp	r2, #0
 8009802:	d122      	bne.n	800984a <_strtod_l+0xbd6>
 8009804:	2280      	movs	r2, #128	; 0x80
 8009806:	0612      	lsls	r2, r2, #24
 8009808:	188b      	adds	r3, r1, r2
 800980a:	9018      	str	r0, [sp, #96]	; 0x60
 800980c:	9319      	str	r3, [sp, #100]	; 0x64
 800980e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009810:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009812:	9210      	str	r2, [sp, #64]	; 0x40
 8009814:	9311      	str	r3, [sp, #68]	; 0x44
 8009816:	22d6      	movs	r2, #214	; 0xd6
 8009818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800981a:	04d2      	lsls	r2, r2, #19
 800981c:	189b      	adds	r3, r3, r2
 800981e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009820:	1a9b      	subs	r3, r3, r2
 8009822:	9311      	str	r3, [sp, #68]	; 0x44
 8009824:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009826:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009828:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800982a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800982c:	f001 ffa0 	bl	800b770 <__ulp>
 8009830:	0002      	movs	r2, r0
 8009832:	000b      	movs	r3, r1
 8009834:	0030      	movs	r0, r6
 8009836:	0039      	movs	r1, r7
 8009838:	f7f7 fde4 	bl	8001404 <__aeabi_dmul>
 800983c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800983e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009840:	f7f6 fea2 	bl	8000588 <__aeabi_dadd>
 8009844:	0006      	movs	r6, r0
 8009846:	000f      	movs	r7, r1
 8009848:	e78f      	b.n	800976a <_strtod_l+0xaf6>
 800984a:	0002      	movs	r2, r0
 800984c:	9218      	str	r2, [sp, #96]	; 0x60
 800984e:	9319      	str	r3, [sp, #100]	; 0x64
 8009850:	e7dd      	b.n	800980e <_strtod_l+0xb9a>
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <_strtod_l+0xc24>)
 8009854:	f7f6 fe00 	bl	8000458 <__aeabi_dcmplt>
 8009858:	e7b1      	b.n	80097be <_strtod_l+0xb4a>
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	fff00000 	.word	0xfff00000
 8009860:	000fffff 	.word	0x000fffff
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	7fe00000 	.word	0x7fe00000
 8009870:	fcb00000 	.word	0xfcb00000
 8009874:	7c9fffff 	.word	0x7c9fffff
 8009878:	7fefffff 	.word	0x7fefffff
 800987c:	3fe00000 	.word	0x3fe00000
 8009880:	bff00000 	.word	0xbff00000
 8009884:	94a03595 	.word	0x94a03595
 8009888:	3fdfffff 	.word	0x3fdfffff
 800988c:	35afe535 	.word	0x35afe535
 8009890:	ffc00000 	.word	0xffc00000
 8009894:	41dfffff 	.word	0x41dfffff
 8009898:	3fcfffff 	.word	0x3fcfffff

0800989c <_strtod_r>:
 800989c:	b510      	push	{r4, lr}
 800989e:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <_strtod_r+0xc>)
 80098a0:	f7ff f9e8 	bl	8008c74 <_strtod_l>
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	2000008c 	.word	0x2000008c

080098ac <_strtol_l.constprop.0>:
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	b087      	sub	sp, #28
 80098b0:	001e      	movs	r6, r3
 80098b2:	9005      	str	r0, [sp, #20]
 80098b4:	9101      	str	r1, [sp, #4]
 80098b6:	9202      	str	r2, [sp, #8]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d045      	beq.n	8009948 <_strtol_l.constprop.0+0x9c>
 80098bc:	000b      	movs	r3, r1
 80098be:	2e24      	cmp	r6, #36	; 0x24
 80098c0:	d842      	bhi.n	8009948 <_strtol_l.constprop.0+0x9c>
 80098c2:	4a3f      	ldr	r2, [pc, #252]	; (80099c0 <_strtol_l.constprop.0+0x114>)
 80098c4:	2108      	movs	r1, #8
 80098c6:	4694      	mov	ip, r2
 80098c8:	001a      	movs	r2, r3
 80098ca:	4660      	mov	r0, ip
 80098cc:	7814      	ldrb	r4, [r2, #0]
 80098ce:	3301      	adds	r3, #1
 80098d0:	5d00      	ldrb	r0, [r0, r4]
 80098d2:	001d      	movs	r5, r3
 80098d4:	0007      	movs	r7, r0
 80098d6:	400f      	ands	r7, r1
 80098d8:	4208      	tst	r0, r1
 80098da:	d1f5      	bne.n	80098c8 <_strtol_l.constprop.0+0x1c>
 80098dc:	2c2d      	cmp	r4, #45	; 0x2d
 80098de:	d13a      	bne.n	8009956 <_strtol_l.constprop.0+0xaa>
 80098e0:	2701      	movs	r7, #1
 80098e2:	781c      	ldrb	r4, [r3, #0]
 80098e4:	1c95      	adds	r5, r2, #2
 80098e6:	2e00      	cmp	r6, #0
 80098e8:	d065      	beq.n	80099b6 <_strtol_l.constprop.0+0x10a>
 80098ea:	2e10      	cmp	r6, #16
 80098ec:	d109      	bne.n	8009902 <_strtol_l.constprop.0+0x56>
 80098ee:	2c30      	cmp	r4, #48	; 0x30
 80098f0:	d107      	bne.n	8009902 <_strtol_l.constprop.0+0x56>
 80098f2:	2220      	movs	r2, #32
 80098f4:	782b      	ldrb	r3, [r5, #0]
 80098f6:	4393      	bics	r3, r2
 80098f8:	2b58      	cmp	r3, #88	; 0x58
 80098fa:	d157      	bne.n	80099ac <_strtol_l.constprop.0+0x100>
 80098fc:	2610      	movs	r6, #16
 80098fe:	786c      	ldrb	r4, [r5, #1]
 8009900:	3502      	adds	r5, #2
 8009902:	4b30      	ldr	r3, [pc, #192]	; (80099c4 <_strtol_l.constprop.0+0x118>)
 8009904:	0031      	movs	r1, r6
 8009906:	18fb      	adds	r3, r7, r3
 8009908:	0018      	movs	r0, r3
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	f7f6 fc9e 	bl	800024c <__aeabi_uidivmod>
 8009910:	2300      	movs	r3, #0
 8009912:	2201      	movs	r2, #1
 8009914:	4684      	mov	ip, r0
 8009916:	0018      	movs	r0, r3
 8009918:	9104      	str	r1, [sp, #16]
 800991a:	4252      	negs	r2, r2
 800991c:	0021      	movs	r1, r4
 800991e:	3930      	subs	r1, #48	; 0x30
 8009920:	2909      	cmp	r1, #9
 8009922:	d81d      	bhi.n	8009960 <_strtol_l.constprop.0+0xb4>
 8009924:	000c      	movs	r4, r1
 8009926:	42a6      	cmp	r6, r4
 8009928:	dd28      	ble.n	800997c <_strtol_l.constprop.0+0xd0>
 800992a:	2b00      	cmp	r3, #0
 800992c:	db24      	blt.n	8009978 <_strtol_l.constprop.0+0xcc>
 800992e:	0013      	movs	r3, r2
 8009930:	4584      	cmp	ip, r0
 8009932:	d306      	bcc.n	8009942 <_strtol_l.constprop.0+0x96>
 8009934:	d102      	bne.n	800993c <_strtol_l.constprop.0+0x90>
 8009936:	9904      	ldr	r1, [sp, #16]
 8009938:	42a1      	cmp	r1, r4
 800993a:	db02      	blt.n	8009942 <_strtol_l.constprop.0+0x96>
 800993c:	2301      	movs	r3, #1
 800993e:	4370      	muls	r0, r6
 8009940:	1820      	adds	r0, r4, r0
 8009942:	782c      	ldrb	r4, [r5, #0]
 8009944:	3501      	adds	r5, #1
 8009946:	e7e9      	b.n	800991c <_strtol_l.constprop.0+0x70>
 8009948:	f7fe fa8c 	bl	8007e64 <__errno>
 800994c:	2316      	movs	r3, #22
 800994e:	6003      	str	r3, [r0, #0]
 8009950:	2000      	movs	r0, #0
 8009952:	b007      	add	sp, #28
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	2c2b      	cmp	r4, #43	; 0x2b
 8009958:	d1c5      	bne.n	80098e6 <_strtol_l.constprop.0+0x3a>
 800995a:	781c      	ldrb	r4, [r3, #0]
 800995c:	1c95      	adds	r5, r2, #2
 800995e:	e7c2      	b.n	80098e6 <_strtol_l.constprop.0+0x3a>
 8009960:	0021      	movs	r1, r4
 8009962:	3941      	subs	r1, #65	; 0x41
 8009964:	2919      	cmp	r1, #25
 8009966:	d801      	bhi.n	800996c <_strtol_l.constprop.0+0xc0>
 8009968:	3c37      	subs	r4, #55	; 0x37
 800996a:	e7dc      	b.n	8009926 <_strtol_l.constprop.0+0x7a>
 800996c:	0021      	movs	r1, r4
 800996e:	3961      	subs	r1, #97	; 0x61
 8009970:	2919      	cmp	r1, #25
 8009972:	d803      	bhi.n	800997c <_strtol_l.constprop.0+0xd0>
 8009974:	3c57      	subs	r4, #87	; 0x57
 8009976:	e7d6      	b.n	8009926 <_strtol_l.constprop.0+0x7a>
 8009978:	0013      	movs	r3, r2
 800997a:	e7e2      	b.n	8009942 <_strtol_l.constprop.0+0x96>
 800997c:	2b00      	cmp	r3, #0
 800997e:	da09      	bge.n	8009994 <_strtol_l.constprop.0+0xe8>
 8009980:	2322      	movs	r3, #34	; 0x22
 8009982:	9a05      	ldr	r2, [sp, #20]
 8009984:	9803      	ldr	r0, [sp, #12]
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	9b02      	ldr	r3, [sp, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0e1      	beq.n	8009952 <_strtol_l.constprop.0+0xa6>
 800998e:	1e6b      	subs	r3, r5, #1
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	e007      	b.n	80099a4 <_strtol_l.constprop.0+0xf8>
 8009994:	2f00      	cmp	r7, #0
 8009996:	d000      	beq.n	800999a <_strtol_l.constprop.0+0xee>
 8009998:	4240      	negs	r0, r0
 800999a:	9a02      	ldr	r2, [sp, #8]
 800999c:	2a00      	cmp	r2, #0
 800999e:	d0d8      	beq.n	8009952 <_strtol_l.constprop.0+0xa6>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f4      	bne.n	800998e <_strtol_l.constprop.0+0xe2>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	9a01      	ldr	r2, [sp, #4]
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e7d2      	b.n	8009952 <_strtol_l.constprop.0+0xa6>
 80099ac:	2430      	movs	r4, #48	; 0x30
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d1a7      	bne.n	8009902 <_strtol_l.constprop.0+0x56>
 80099b2:	3608      	adds	r6, #8
 80099b4:	e7a5      	b.n	8009902 <_strtol_l.constprop.0+0x56>
 80099b6:	2c30      	cmp	r4, #48	; 0x30
 80099b8:	d09b      	beq.n	80098f2 <_strtol_l.constprop.0+0x46>
 80099ba:	260a      	movs	r6, #10
 80099bc:	e7a1      	b.n	8009902 <_strtol_l.constprop.0+0x56>
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	0800caf9 	.word	0x0800caf9
 80099c4:	7fffffff 	.word	0x7fffffff

080099c8 <_strtol_r>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	f7ff ff6f 	bl	80098ac <_strtol_l.constprop.0>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <quorem>:
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	0006      	movs	r6, r0
 80099d4:	690b      	ldr	r3, [r1, #16]
 80099d6:	6932      	ldr	r2, [r6, #16]
 80099d8:	b087      	sub	sp, #28
 80099da:	2000      	movs	r0, #0
 80099dc:	9103      	str	r1, [sp, #12]
 80099de:	429a      	cmp	r2, r3
 80099e0:	db65      	blt.n	8009aae <quorem+0xde>
 80099e2:	3b01      	subs	r3, #1
 80099e4:	009c      	lsls	r4, r3, #2
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	000b      	movs	r3, r1
 80099ea:	3314      	adds	r3, #20
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	191b      	adds	r3, r3, r4
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	0033      	movs	r3, r6
 80099f4:	3314      	adds	r3, #20
 80099f6:	9302      	str	r3, [sp, #8]
 80099f8:	191c      	adds	r4, r3, r4
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	6827      	ldr	r7, [r4, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	0038      	movs	r0, r7
 8009a02:	1c5d      	adds	r5, r3, #1
 8009a04:	0029      	movs	r1, r5
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	f7f6 fb9a 	bl	8000140 <__udivsi3>
 8009a0c:	9001      	str	r0, [sp, #4]
 8009a0e:	42af      	cmp	r7, r5
 8009a10:	d324      	bcc.n	8009a5c <quorem+0x8c>
 8009a12:	2500      	movs	r5, #0
 8009a14:	46ac      	mov	ip, r5
 8009a16:	9802      	ldr	r0, [sp, #8]
 8009a18:	9f05      	ldr	r7, [sp, #20]
 8009a1a:	cf08      	ldmia	r7!, {r3}
 8009a1c:	9a01      	ldr	r2, [sp, #4]
 8009a1e:	b299      	uxth	r1, r3
 8009a20:	4351      	muls	r1, r2
 8009a22:	0c1b      	lsrs	r3, r3, #16
 8009a24:	4353      	muls	r3, r2
 8009a26:	1949      	adds	r1, r1, r5
 8009a28:	0c0a      	lsrs	r2, r1, #16
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	6802      	ldr	r2, [r0, #0]
 8009a2e:	b289      	uxth	r1, r1
 8009a30:	b292      	uxth	r2, r2
 8009a32:	4462      	add	r2, ip
 8009a34:	1a52      	subs	r2, r2, r1
 8009a36:	6801      	ldr	r1, [r0, #0]
 8009a38:	0c1d      	lsrs	r5, r3, #16
 8009a3a:	0c09      	lsrs	r1, r1, #16
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	1acb      	subs	r3, r1, r3
 8009a40:	1411      	asrs	r1, r2, #16
 8009a42:	185b      	adds	r3, r3, r1
 8009a44:	1419      	asrs	r1, r3, #16
 8009a46:	b292      	uxth	r2, r2
 8009a48:	041b      	lsls	r3, r3, #16
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	9b04      	ldr	r3, [sp, #16]
 8009a4e:	468c      	mov	ip, r1
 8009a50:	c004      	stmia	r0!, {r2}
 8009a52:	42bb      	cmp	r3, r7
 8009a54:	d2e1      	bcs.n	8009a1a <quorem+0x4a>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d030      	beq.n	8009abe <quorem+0xee>
 8009a5c:	0030      	movs	r0, r6
 8009a5e:	9903      	ldr	r1, [sp, #12]
 8009a60:	f001 fdd2 	bl	800b608 <__mcmp>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	db21      	blt.n	8009aac <quorem+0xdc>
 8009a68:	0030      	movs	r0, r6
 8009a6a:	2400      	movs	r4, #0
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	9903      	ldr	r1, [sp, #12]
 8009a70:	3301      	adds	r3, #1
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	3014      	adds	r0, #20
 8009a76:	3114      	adds	r1, #20
 8009a78:	6803      	ldr	r3, [r0, #0]
 8009a7a:	c920      	ldmia	r1!, {r5}
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	1914      	adds	r4, r2, r4
 8009a80:	b2aa      	uxth	r2, r5
 8009a82:	1aa2      	subs	r2, r4, r2
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	0c2d      	lsrs	r5, r5, #16
 8009a88:	1414      	asrs	r4, r2, #16
 8009a8a:	1b5b      	subs	r3, r3, r5
 8009a8c:	191b      	adds	r3, r3, r4
 8009a8e:	141c      	asrs	r4, r3, #16
 8009a90:	b292      	uxth	r2, r2
 8009a92:	041b      	lsls	r3, r3, #16
 8009a94:	4313      	orrs	r3, r2
 8009a96:	c008      	stmia	r0!, {r3}
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	428b      	cmp	r3, r1
 8009a9c:	d2ec      	bcs.n	8009a78 <quorem+0xa8>
 8009a9e:	9b00      	ldr	r3, [sp, #0]
 8009aa0:	9a02      	ldr	r2, [sp, #8]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	18d3      	adds	r3, r2, r3
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	d015      	beq.n	8009ad8 <quorem+0x108>
 8009aac:	9801      	ldr	r0, [sp, #4]
 8009aae:	b007      	add	sp, #28
 8009ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d106      	bne.n	8009ac6 <quorem+0xf6>
 8009ab8:	9b00      	ldr	r3, [sp, #0]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	3c04      	subs	r4, #4
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	d3f5      	bcc.n	8009ab2 <quorem+0xe2>
 8009ac6:	9b00      	ldr	r3, [sp, #0]
 8009ac8:	6133      	str	r3, [r6, #16]
 8009aca:	e7c7      	b.n	8009a5c <quorem+0x8c>
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	2a00      	cmp	r2, #0
 8009ad0:	d106      	bne.n	8009ae0 <quorem+0x110>
 8009ad2:	9a00      	ldr	r2, [sp, #0]
 8009ad4:	3a01      	subs	r2, #1
 8009ad6:	9200      	str	r2, [sp, #0]
 8009ad8:	9a02      	ldr	r2, [sp, #8]
 8009ada:	3b04      	subs	r3, #4
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3f5      	bcc.n	8009acc <quorem+0xfc>
 8009ae0:	9b00      	ldr	r3, [sp, #0]
 8009ae2:	6133      	str	r3, [r6, #16]
 8009ae4:	e7e2      	b.n	8009aac <quorem+0xdc>
	...

08009ae8 <_dtoa_r>:
 8009ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aea:	b09d      	sub	sp, #116	; 0x74
 8009aec:	9202      	str	r2, [sp, #8]
 8009aee:	9303      	str	r3, [sp, #12]
 8009af0:	9b02      	ldr	r3, [sp, #8]
 8009af2:	9c03      	ldr	r4, [sp, #12]
 8009af4:	9308      	str	r3, [sp, #32]
 8009af6:	9409      	str	r4, [sp, #36]	; 0x24
 8009af8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009afa:	0007      	movs	r7, r0
 8009afc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	d10e      	bne.n	8009b20 <_dtoa_r+0x38>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f001 fa88 	bl	800b018 <malloc>
 8009b08:	1e02      	subs	r2, r0, #0
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b0c:	d104      	bne.n	8009b18 <_dtoa_r+0x30>
 8009b0e:	21ea      	movs	r1, #234	; 0xea
 8009b10:	4bc7      	ldr	r3, [pc, #796]	; (8009e30 <_dtoa_r+0x348>)
 8009b12:	48c8      	ldr	r0, [pc, #800]	; (8009e34 <_dtoa_r+0x34c>)
 8009b14:	f002 fcaa 	bl	800c46c <__assert_func>
 8009b18:	6044      	str	r4, [r0, #4]
 8009b1a:	6084      	str	r4, [r0, #8]
 8009b1c:	6004      	str	r4, [r0, #0]
 8009b1e:	60c4      	str	r4, [r0, #12]
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d00a      	beq.n	8009b3e <_dtoa_r+0x56>
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4093      	lsls	r3, r2
 8009b2e:	604a      	str	r2, [r1, #4]
 8009b30:	608b      	str	r3, [r1, #8]
 8009b32:	0038      	movs	r0, r7
 8009b34:	f001 fadc 	bl	800b0f0 <_Bfree>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da20      	bge.n	8009b86 <_dtoa_r+0x9e>
 8009b44:	2301      	movs	r3, #1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	085b      	lsrs	r3, r3, #1
 8009b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b52:	4bb9      	ldr	r3, [pc, #740]	; (8009e38 <_dtoa_r+0x350>)
 8009b54:	4ab8      	ldr	r2, [pc, #736]	; (8009e38 <_dtoa_r+0x350>)
 8009b56:	402b      	ands	r3, r5
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d117      	bne.n	8009b8c <_dtoa_r+0xa4>
 8009b5c:	4bb7      	ldr	r3, [pc, #732]	; (8009e3c <_dtoa_r+0x354>)
 8009b5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b60:	0328      	lsls	r0, r5, #12
 8009b62:	6013      	str	r3, [r2, #0]
 8009b64:	9b02      	ldr	r3, [sp, #8]
 8009b66:	0b00      	lsrs	r0, r0, #12
 8009b68:	4318      	orrs	r0, r3
 8009b6a:	d101      	bne.n	8009b70 <_dtoa_r+0x88>
 8009b6c:	f000 fdbf 	bl	800a6ee <_dtoa_r+0xc06>
 8009b70:	48b3      	ldr	r0, [pc, #716]	; (8009e40 <_dtoa_r+0x358>)
 8009b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b74:	9006      	str	r0, [sp, #24]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <_dtoa_r+0x98>
 8009b7a:	4bb2      	ldr	r3, [pc, #712]	; (8009e44 <_dtoa_r+0x35c>)
 8009b7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	9806      	ldr	r0, [sp, #24]
 8009b82:	b01d      	add	sp, #116	; 0x74
 8009b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b86:	2300      	movs	r3, #0
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	e7e1      	b.n	8009b50 <_dtoa_r+0x68>
 8009b8c:	9b08      	ldr	r3, [sp, #32]
 8009b8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b90:	9312      	str	r3, [sp, #72]	; 0x48
 8009b92:	9413      	str	r4, [sp, #76]	; 0x4c
 8009b94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f7f6 fc56 	bl	800044c <__aeabi_dcmpeq>
 8009ba0:	1e04      	subs	r4, r0, #0
 8009ba2:	d009      	beq.n	8009bb8 <_dtoa_r+0xd0>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	4ba7      	ldr	r3, [pc, #668]	; (8009e48 <_dtoa_r+0x360>)
 8009bac:	9306      	str	r3, [sp, #24]
 8009bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0e5      	beq.n	8009b80 <_dtoa_r+0x98>
 8009bb4:	4ba5      	ldr	r3, [pc, #660]	; (8009e4c <_dtoa_r+0x364>)
 8009bb6:	e7e1      	b.n	8009b7c <_dtoa_r+0x94>
 8009bb8:	ab1a      	add	r3, sp, #104	; 0x68
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	ab1b      	add	r3, sp, #108	; 0x6c
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	0038      	movs	r0, r7
 8009bc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bc6:	f001 fe47 	bl	800b858 <__d2b>
 8009bca:	006e      	lsls	r6, r5, #1
 8009bcc:	9005      	str	r0, [sp, #20]
 8009bce:	0d76      	lsrs	r6, r6, #21
 8009bd0:	d100      	bne.n	8009bd4 <_dtoa_r+0xec>
 8009bd2:	e07c      	b.n	8009cce <_dtoa_r+0x1e6>
 8009bd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009bd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bda:	4a9d      	ldr	r2, [pc, #628]	; (8009e50 <_dtoa_r+0x368>)
 8009bdc:	031b      	lsls	r3, r3, #12
 8009bde:	0b1b      	lsrs	r3, r3, #12
 8009be0:	431a      	orrs	r2, r3
 8009be2:	0011      	movs	r1, r2
 8009be4:	4b9b      	ldr	r3, [pc, #620]	; (8009e54 <_dtoa_r+0x36c>)
 8009be6:	9418      	str	r4, [sp, #96]	; 0x60
 8009be8:	18f6      	adds	r6, r6, r3
 8009bea:	2200      	movs	r2, #0
 8009bec:	4b9a      	ldr	r3, [pc, #616]	; (8009e58 <_dtoa_r+0x370>)
 8009bee:	f7f7 fe75 	bl	80018dc <__aeabi_dsub>
 8009bf2:	4a9a      	ldr	r2, [pc, #616]	; (8009e5c <_dtoa_r+0x374>)
 8009bf4:	4b9a      	ldr	r3, [pc, #616]	; (8009e60 <_dtoa_r+0x378>)
 8009bf6:	f7f7 fc05 	bl	8001404 <__aeabi_dmul>
 8009bfa:	4a9a      	ldr	r2, [pc, #616]	; (8009e64 <_dtoa_r+0x37c>)
 8009bfc:	4b9a      	ldr	r3, [pc, #616]	; (8009e68 <_dtoa_r+0x380>)
 8009bfe:	f7f6 fcc3 	bl	8000588 <__aeabi_dadd>
 8009c02:	0004      	movs	r4, r0
 8009c04:	0030      	movs	r0, r6
 8009c06:	000d      	movs	r5, r1
 8009c08:	f7f8 fa4e 	bl	80020a8 <__aeabi_i2d>
 8009c0c:	4a97      	ldr	r2, [pc, #604]	; (8009e6c <_dtoa_r+0x384>)
 8009c0e:	4b98      	ldr	r3, [pc, #608]	; (8009e70 <_dtoa_r+0x388>)
 8009c10:	f7f7 fbf8 	bl	8001404 <__aeabi_dmul>
 8009c14:	0002      	movs	r2, r0
 8009c16:	000b      	movs	r3, r1
 8009c18:	0020      	movs	r0, r4
 8009c1a:	0029      	movs	r1, r5
 8009c1c:	f7f6 fcb4 	bl	8000588 <__aeabi_dadd>
 8009c20:	0004      	movs	r4, r0
 8009c22:	000d      	movs	r5, r1
 8009c24:	f7f8 fa0a 	bl	800203c <__aeabi_d2iz>
 8009c28:	2200      	movs	r2, #0
 8009c2a:	9002      	str	r0, [sp, #8]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	0020      	movs	r0, r4
 8009c30:	0029      	movs	r1, r5
 8009c32:	f7f6 fc11 	bl	8000458 <__aeabi_dcmplt>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d00b      	beq.n	8009c52 <_dtoa_r+0x16a>
 8009c3a:	9802      	ldr	r0, [sp, #8]
 8009c3c:	f7f8 fa34 	bl	80020a8 <__aeabi_i2d>
 8009c40:	002b      	movs	r3, r5
 8009c42:	0022      	movs	r2, r4
 8009c44:	f7f6 fc02 	bl	800044c <__aeabi_dcmpeq>
 8009c48:	4243      	negs	r3, r0
 8009c4a:	4158      	adcs	r0, r3
 8009c4c:	9b02      	ldr	r3, [sp, #8]
 8009c4e:	1a1b      	subs	r3, r3, r0
 8009c50:	9302      	str	r3, [sp, #8]
 8009c52:	2301      	movs	r3, #1
 8009c54:	9316      	str	r3, [sp, #88]	; 0x58
 8009c56:	9b02      	ldr	r3, [sp, #8]
 8009c58:	2b16      	cmp	r3, #22
 8009c5a:	d80f      	bhi.n	8009c7c <_dtoa_r+0x194>
 8009c5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c60:	00da      	lsls	r2, r3, #3
 8009c62:	4b84      	ldr	r3, [pc, #528]	; (8009e74 <_dtoa_r+0x38c>)
 8009c64:	189b      	adds	r3, r3, r2
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f7f6 fbf5 	bl	8000458 <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d049      	beq.n	8009d06 <_dtoa_r+0x21e>
 8009c72:	9b02      	ldr	r3, [sp, #8]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9316      	str	r3, [sp, #88]	; 0x58
 8009c7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009c7e:	1b9e      	subs	r6, r3, r6
 8009c80:	2300      	movs	r3, #0
 8009c82:	930a      	str	r3, [sp, #40]	; 0x28
 8009c84:	0033      	movs	r3, r6
 8009c86:	3b01      	subs	r3, #1
 8009c88:	930d      	str	r3, [sp, #52]	; 0x34
 8009c8a:	d504      	bpl.n	8009c96 <_dtoa_r+0x1ae>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	1b9b      	subs	r3, r3, r6
 8009c90:	930a      	str	r3, [sp, #40]	; 0x28
 8009c92:	2300      	movs	r3, #0
 8009c94:	930d      	str	r3, [sp, #52]	; 0x34
 8009c96:	9b02      	ldr	r3, [sp, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	db36      	blt.n	8009d0a <_dtoa_r+0x222>
 8009c9c:	9a02      	ldr	r2, [sp, #8]
 8009c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca0:	4694      	mov	ip, r2
 8009ca2:	4463      	add	r3, ip
 8009ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9215      	str	r2, [sp, #84]	; 0x54
 8009caa:	930e      	str	r3, [sp, #56]	; 0x38
 8009cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cae:	2401      	movs	r4, #1
 8009cb0:	2b09      	cmp	r3, #9
 8009cb2:	d864      	bhi.n	8009d7e <_dtoa_r+0x296>
 8009cb4:	2b05      	cmp	r3, #5
 8009cb6:	dd02      	ble.n	8009cbe <_dtoa_r+0x1d6>
 8009cb8:	2400      	movs	r4, #0
 8009cba:	3b04      	subs	r3, #4
 8009cbc:	9322      	str	r3, [sp, #136]	; 0x88
 8009cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cc0:	1e98      	subs	r0, r3, #2
 8009cc2:	2803      	cmp	r0, #3
 8009cc4:	d864      	bhi.n	8009d90 <_dtoa_r+0x2a8>
 8009cc6:	f7f6 fa27 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009cca:	3829      	.short	0x3829
 8009ccc:	5836      	.short	0x5836
 8009cce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009cd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009cd2:	189e      	adds	r6, r3, r2
 8009cd4:	4b68      	ldr	r3, [pc, #416]	; (8009e78 <_dtoa_r+0x390>)
 8009cd6:	18f2      	adds	r2, r6, r3
 8009cd8:	2a20      	cmp	r2, #32
 8009cda:	dd0f      	ble.n	8009cfc <_dtoa_r+0x214>
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	409d      	lsls	r5, r3
 8009ce2:	4b66      	ldr	r3, [pc, #408]	; (8009e7c <_dtoa_r+0x394>)
 8009ce4:	9802      	ldr	r0, [sp, #8]
 8009ce6:	18f3      	adds	r3, r6, r3
 8009ce8:	40d8      	lsrs	r0, r3
 8009cea:	4328      	orrs	r0, r5
 8009cec:	f7f8 fa0c 	bl	8002108 <__aeabi_ui2d>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4c63      	ldr	r4, [pc, #396]	; (8009e80 <_dtoa_r+0x398>)
 8009cf4:	3e01      	subs	r6, #1
 8009cf6:	1909      	adds	r1, r1, r4
 8009cf8:	9318      	str	r3, [sp, #96]	; 0x60
 8009cfa:	e776      	b.n	8009bea <_dtoa_r+0x102>
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	9802      	ldr	r0, [sp, #8]
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	4098      	lsls	r0, r3
 8009d04:	e7f2      	b.n	8009cec <_dtoa_r+0x204>
 8009d06:	9016      	str	r0, [sp, #88]	; 0x58
 8009d08:	e7b8      	b.n	8009c7c <_dtoa_r+0x194>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	9a02      	ldr	r2, [sp, #8]
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	930a      	str	r3, [sp, #40]	; 0x28
 8009d12:	4253      	negs	r3, r2
 8009d14:	930e      	str	r3, [sp, #56]	; 0x38
 8009d16:	2300      	movs	r3, #0
 8009d18:	9315      	str	r3, [sp, #84]	; 0x54
 8009d1a:	e7c7      	b.n	8009cac <_dtoa_r+0x1c4>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d22:	930c      	str	r3, [sp, #48]	; 0x30
 8009d24:	9307      	str	r3, [sp, #28]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dc13      	bgt.n	8009d52 <_dtoa_r+0x26a>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d30:	9307      	str	r3, [sp, #28]
 8009d32:	9223      	str	r2, [sp, #140]	; 0x8c
 8009d34:	e00d      	b.n	8009d52 <_dtoa_r+0x26a>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e7f1      	b.n	8009d1e <_dtoa_r+0x236>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d40:	4694      	mov	ip, r2
 8009d42:	9b02      	ldr	r3, [sp, #8]
 8009d44:	4463      	add	r3, ip
 8009d46:	930c      	str	r3, [sp, #48]	; 0x30
 8009d48:	3301      	adds	r3, #1
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc00      	bgt.n	8009d52 <_dtoa_r+0x26a>
 8009d50:	2301      	movs	r3, #1
 8009d52:	2200      	movs	r2, #0
 8009d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d56:	6042      	str	r2, [r0, #4]
 8009d58:	3204      	adds	r2, #4
 8009d5a:	0015      	movs	r5, r2
 8009d5c:	3514      	adds	r5, #20
 8009d5e:	6841      	ldr	r1, [r0, #4]
 8009d60:	429d      	cmp	r5, r3
 8009d62:	d919      	bls.n	8009d98 <_dtoa_r+0x2b0>
 8009d64:	0038      	movs	r0, r7
 8009d66:	f001 f97f 	bl	800b068 <_Balloc>
 8009d6a:	9006      	str	r0, [sp, #24]
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d117      	bne.n	8009da0 <_dtoa_r+0x2b8>
 8009d70:	21d5      	movs	r1, #213	; 0xd5
 8009d72:	0002      	movs	r2, r0
 8009d74:	4b43      	ldr	r3, [pc, #268]	; (8009e84 <_dtoa_r+0x39c>)
 8009d76:	0049      	lsls	r1, r1, #1
 8009d78:	e6cb      	b.n	8009b12 <_dtoa_r+0x2a>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e7de      	b.n	8009d3c <_dtoa_r+0x254>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	940f      	str	r4, [sp, #60]	; 0x3c
 8009d82:	9322      	str	r3, [sp, #136]	; 0x88
 8009d84:	3b01      	subs	r3, #1
 8009d86:	930c      	str	r3, [sp, #48]	; 0x30
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	3313      	adds	r3, #19
 8009d8e:	e7d0      	b.n	8009d32 <_dtoa_r+0x24a>
 8009d90:	2301      	movs	r3, #1
 8009d92:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d94:	3b02      	subs	r3, #2
 8009d96:	e7f6      	b.n	8009d86 <_dtoa_r+0x29e>
 8009d98:	3101      	adds	r1, #1
 8009d9a:	6041      	str	r1, [r0, #4]
 8009d9c:	0052      	lsls	r2, r2, #1
 8009d9e:	e7dc      	b.n	8009d5a <_dtoa_r+0x272>
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	9a06      	ldr	r2, [sp, #24]
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	2b0e      	cmp	r3, #14
 8009daa:	d900      	bls.n	8009dae <_dtoa_r+0x2c6>
 8009dac:	e0eb      	b.n	8009f86 <_dtoa_r+0x49e>
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	d100      	bne.n	8009db4 <_dtoa_r+0x2cc>
 8009db2:	e0e8      	b.n	8009f86 <_dtoa_r+0x49e>
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd68      	ble.n	8009e8c <_dtoa_r+0x3a4>
 8009dba:	001a      	movs	r2, r3
 8009dbc:	210f      	movs	r1, #15
 8009dbe:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <_dtoa_r+0x38c>)
 8009dc0:	400a      	ands	r2, r1
 8009dc2:	00d2      	lsls	r2, r2, #3
 8009dc4:	189b      	adds	r3, r3, r2
 8009dc6:	681d      	ldr	r5, [r3, #0]
 8009dc8:	685e      	ldr	r6, [r3, #4]
 8009dca:	9b02      	ldr	r3, [sp, #8]
 8009dcc:	111c      	asrs	r4, r3, #4
 8009dce:	2302      	movs	r3, #2
 8009dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8009dd2:	9b02      	ldr	r3, [sp, #8]
 8009dd4:	05db      	lsls	r3, r3, #23
 8009dd6:	d50b      	bpl.n	8009df0 <_dtoa_r+0x308>
 8009dd8:	4b2b      	ldr	r3, [pc, #172]	; (8009e88 <_dtoa_r+0x3a0>)
 8009dda:	400c      	ands	r4, r1
 8009ddc:	6a1a      	ldr	r2, [r3, #32]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009de2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009de4:	f7f6 ff0c 	bl	8000c00 <__aeabi_ddiv>
 8009de8:	2303      	movs	r3, #3
 8009dea:	9008      	str	r0, [sp, #32]
 8009dec:	9109      	str	r1, [sp, #36]	; 0x24
 8009dee:	9310      	str	r3, [sp, #64]	; 0x40
 8009df0:	4b25      	ldr	r3, [pc, #148]	; (8009e88 <_dtoa_r+0x3a0>)
 8009df2:	9314      	str	r3, [sp, #80]	; 0x50
 8009df4:	2c00      	cmp	r4, #0
 8009df6:	d108      	bne.n	8009e0a <_dtoa_r+0x322>
 8009df8:	9808      	ldr	r0, [sp, #32]
 8009dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dfc:	002a      	movs	r2, r5
 8009dfe:	0033      	movs	r3, r6
 8009e00:	f7f6 fefe 	bl	8000c00 <__aeabi_ddiv>
 8009e04:	9008      	str	r0, [sp, #32]
 8009e06:	9109      	str	r1, [sp, #36]	; 0x24
 8009e08:	e05c      	b.n	8009ec4 <_dtoa_r+0x3dc>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	421c      	tst	r4, r3
 8009e0e:	d00b      	beq.n	8009e28 <_dtoa_r+0x340>
 8009e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e12:	0028      	movs	r0, r5
 8009e14:	3301      	adds	r3, #1
 8009e16:	9310      	str	r3, [sp, #64]	; 0x40
 8009e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e1a:	0031      	movs	r1, r6
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f7f7 faf0 	bl	8001404 <__aeabi_dmul>
 8009e24:	0005      	movs	r5, r0
 8009e26:	000e      	movs	r6, r1
 8009e28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e2a:	1064      	asrs	r4, r4, #1
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	e7e0      	b.n	8009df2 <_dtoa_r+0x30a>
 8009e30:	0800cc06 	.word	0x0800cc06
 8009e34:	0800cc1d 	.word	0x0800cc1d
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	0000270f 	.word	0x0000270f
 8009e40:	0800cc02 	.word	0x0800cc02
 8009e44:	0800cc05 	.word	0x0800cc05
 8009e48:	0800ca7c 	.word	0x0800ca7c
 8009e4c:	0800ca7d 	.word	0x0800ca7d
 8009e50:	3ff00000 	.word	0x3ff00000
 8009e54:	fffffc01 	.word	0xfffffc01
 8009e58:	3ff80000 	.word	0x3ff80000
 8009e5c:	636f4361 	.word	0x636f4361
 8009e60:	3fd287a7 	.word	0x3fd287a7
 8009e64:	8b60c8b3 	.word	0x8b60c8b3
 8009e68:	3fc68a28 	.word	0x3fc68a28
 8009e6c:	509f79fb 	.word	0x509f79fb
 8009e70:	3fd34413 	.word	0x3fd34413
 8009e74:	0800cdf0 	.word	0x0800cdf0
 8009e78:	00000432 	.word	0x00000432
 8009e7c:	00000412 	.word	0x00000412
 8009e80:	fe100000 	.word	0xfe100000
 8009e84:	0800cc78 	.word	0x0800cc78
 8009e88:	0800cdc8 	.word	0x0800cdc8
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	9310      	str	r3, [sp, #64]	; 0x40
 8009e90:	9b02      	ldr	r3, [sp, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d016      	beq.n	8009ec4 <_dtoa_r+0x3dc>
 8009e96:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e98:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e9a:	425c      	negs	r4, r3
 8009e9c:	230f      	movs	r3, #15
 8009e9e:	4ab6      	ldr	r2, [pc, #728]	; (800a178 <_dtoa_r+0x690>)
 8009ea0:	4023      	ands	r3, r4
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	18d3      	adds	r3, r2, r3
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f7f7 faab 	bl	8001404 <__aeabi_dmul>
 8009eae:	2601      	movs	r6, #1
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9008      	str	r0, [sp, #32]
 8009eb4:	9109      	str	r1, [sp, #36]	; 0x24
 8009eb6:	4db1      	ldr	r5, [pc, #708]	; (800a17c <_dtoa_r+0x694>)
 8009eb8:	1124      	asrs	r4, r4, #4
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d000      	beq.n	8009ec0 <_dtoa_r+0x3d8>
 8009ebe:	e094      	b.n	8009fea <_dtoa_r+0x502>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d19f      	bne.n	8009e04 <_dtoa_r+0x31c>
 8009ec4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d100      	bne.n	8009ecc <_dtoa_r+0x3e4>
 8009eca:	e09b      	b.n	800a004 <_dtoa_r+0x51c>
 8009ecc:	9c08      	ldr	r4, [sp, #32]
 8009ece:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	0020      	movs	r0, r4
 8009ed4:	0029      	movs	r1, r5
 8009ed6:	4baa      	ldr	r3, [pc, #680]	; (800a180 <_dtoa_r+0x698>)
 8009ed8:	f7f6 fabe 	bl	8000458 <__aeabi_dcmplt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d100      	bne.n	8009ee2 <_dtoa_r+0x3fa>
 8009ee0:	e090      	b.n	800a004 <_dtoa_r+0x51c>
 8009ee2:	9b07      	ldr	r3, [sp, #28]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d100      	bne.n	8009eea <_dtoa_r+0x402>
 8009ee8:	e08c      	b.n	800a004 <_dtoa_r+0x51c>
 8009eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd46      	ble.n	8009f7e <_dtoa_r+0x496>
 8009ef0:	9b02      	ldr	r3, [sp, #8]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	0020      	movs	r0, r4
 8009ef6:	0029      	movs	r1, r5
 8009ef8:	1e5e      	subs	r6, r3, #1
 8009efa:	4ba2      	ldr	r3, [pc, #648]	; (800a184 <_dtoa_r+0x69c>)
 8009efc:	f7f7 fa82 	bl	8001404 <__aeabi_dmul>
 8009f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f02:	9008      	str	r0, [sp, #32]
 8009f04:	9109      	str	r1, [sp, #36]	; 0x24
 8009f06:	3301      	adds	r3, #1
 8009f08:	9310      	str	r3, [sp, #64]	; 0x40
 8009f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f0e:	9c08      	ldr	r4, [sp, #32]
 8009f10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f12:	9314      	str	r3, [sp, #80]	; 0x50
 8009f14:	f7f8 f8c8 	bl	80020a8 <__aeabi_i2d>
 8009f18:	0022      	movs	r2, r4
 8009f1a:	002b      	movs	r3, r5
 8009f1c:	f7f7 fa72 	bl	8001404 <__aeabi_dmul>
 8009f20:	2200      	movs	r2, #0
 8009f22:	4b99      	ldr	r3, [pc, #612]	; (800a188 <_dtoa_r+0x6a0>)
 8009f24:	f7f6 fb30 	bl	8000588 <__aeabi_dadd>
 8009f28:	9010      	str	r0, [sp, #64]	; 0x40
 8009f2a:	9111      	str	r1, [sp, #68]	; 0x44
 8009f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f30:	9208      	str	r2, [sp, #32]
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
 8009f34:	4a95      	ldr	r2, [pc, #596]	; (800a18c <_dtoa_r+0x6a4>)
 8009f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f38:	4694      	mov	ip, r2
 8009f3a:	4463      	add	r3, ip
 8009f3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d161      	bne.n	800a00a <_dtoa_r+0x522>
 8009f46:	2200      	movs	r2, #0
 8009f48:	0020      	movs	r0, r4
 8009f4a:	0029      	movs	r1, r5
 8009f4c:	4b90      	ldr	r3, [pc, #576]	; (800a190 <_dtoa_r+0x6a8>)
 8009f4e:	f7f7 fcc5 	bl	80018dc <__aeabi_dsub>
 8009f52:	9a08      	ldr	r2, [sp, #32]
 8009f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f56:	0004      	movs	r4, r0
 8009f58:	000d      	movs	r5, r1
 8009f5a:	f7f6 fa91 	bl	8000480 <__aeabi_dcmpgt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d000      	beq.n	8009f64 <_dtoa_r+0x47c>
 8009f62:	e2af      	b.n	800a4c4 <_dtoa_r+0x9dc>
 8009f64:	488b      	ldr	r0, [pc, #556]	; (800a194 <_dtoa_r+0x6ac>)
 8009f66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f68:	4684      	mov	ip, r0
 8009f6a:	4461      	add	r1, ip
 8009f6c:	000b      	movs	r3, r1
 8009f6e:	0020      	movs	r0, r4
 8009f70:	0029      	movs	r1, r5
 8009f72:	9a08      	ldr	r2, [sp, #32]
 8009f74:	f7f6 fa70 	bl	8000458 <__aeabi_dcmplt>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d000      	beq.n	8009f7e <_dtoa_r+0x496>
 8009f7c:	e29f      	b.n	800a4be <_dtoa_r+0x9d6>
 8009f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009f82:	9308      	str	r3, [sp, #32]
 8009f84:	9409      	str	r4, [sp, #36]	; 0x24
 8009f86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	da00      	bge.n	8009f8e <_dtoa_r+0x4a6>
 8009f8c:	e172      	b.n	800a274 <_dtoa_r+0x78c>
 8009f8e:	9a02      	ldr	r2, [sp, #8]
 8009f90:	2a0e      	cmp	r2, #14
 8009f92:	dd00      	ble.n	8009f96 <_dtoa_r+0x4ae>
 8009f94:	e16e      	b.n	800a274 <_dtoa_r+0x78c>
 8009f96:	4b78      	ldr	r3, [pc, #480]	; (800a178 <_dtoa_r+0x690>)
 8009f98:	00d2      	lsls	r2, r2, #3
 8009f9a:	189b      	adds	r3, r3, r2
 8009f9c:	685c      	ldr	r4, [r3, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8009fa2:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	db00      	blt.n	8009fac <_dtoa_r+0x4c4>
 8009faa:	e0f7      	b.n	800a19c <_dtoa_r+0x6b4>
 8009fac:	9b07      	ldr	r3, [sp, #28]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dd00      	ble.n	8009fb4 <_dtoa_r+0x4cc>
 8009fb2:	e0f3      	b.n	800a19c <_dtoa_r+0x6b4>
 8009fb4:	d000      	beq.n	8009fb8 <_dtoa_r+0x4d0>
 8009fb6:	e282      	b.n	800a4be <_dtoa_r+0x9d6>
 8009fb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4b74      	ldr	r3, [pc, #464]	; (800a190 <_dtoa_r+0x6a8>)
 8009fc0:	f7f7 fa20 	bl	8001404 <__aeabi_dmul>
 8009fc4:	9a08      	ldr	r2, [sp, #32]
 8009fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc8:	f7f6 fa64 	bl	8000494 <__aeabi_dcmpge>
 8009fcc:	9e07      	ldr	r6, [sp, #28]
 8009fce:	0035      	movs	r5, r6
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d000      	beq.n	8009fd6 <_dtoa_r+0x4ee>
 8009fd4:	e259      	b.n	800a48a <_dtoa_r+0x9a2>
 8009fd6:	9b06      	ldr	r3, [sp, #24]
 8009fd8:	9a06      	ldr	r2, [sp, #24]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	9308      	str	r3, [sp, #32]
 8009fde:	2331      	movs	r3, #49	; 0x31
 8009fe0:	7013      	strb	r3, [r2, #0]
 8009fe2:	9b02      	ldr	r3, [sp, #8]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	e254      	b.n	800a494 <_dtoa_r+0x9ac>
 8009fea:	4234      	tst	r4, r6
 8009fec:	d007      	beq.n	8009ffe <_dtoa_r+0x516>
 8009fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	9310      	str	r3, [sp, #64]	; 0x40
 8009ff4:	682a      	ldr	r2, [r5, #0]
 8009ff6:	686b      	ldr	r3, [r5, #4]
 8009ff8:	f7f7 fa04 	bl	8001404 <__aeabi_dmul>
 8009ffc:	0033      	movs	r3, r6
 8009ffe:	1064      	asrs	r4, r4, #1
 800a000:	3508      	adds	r5, #8
 800a002:	e75a      	b.n	8009eba <_dtoa_r+0x3d2>
 800a004:	9e02      	ldr	r6, [sp, #8]
 800a006:	9b07      	ldr	r3, [sp, #28]
 800a008:	e780      	b.n	8009f0c <_dtoa_r+0x424>
 800a00a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a00c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	4b59      	ldr	r3, [pc, #356]	; (800a178 <_dtoa_r+0x690>)
 800a012:	00d2      	lsls	r2, r2, #3
 800a014:	189b      	adds	r3, r3, r2
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d051      	beq.n	800a0c2 <_dtoa_r+0x5da>
 800a01e:	2000      	movs	r0, #0
 800a020:	495d      	ldr	r1, [pc, #372]	; (800a198 <_dtoa_r+0x6b0>)
 800a022:	f7f6 fded 	bl	8000c00 <__aeabi_ddiv>
 800a026:	9a08      	ldr	r2, [sp, #32]
 800a028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02a:	f7f7 fc57 	bl	80018dc <__aeabi_dsub>
 800a02e:	9a06      	ldr	r2, [sp, #24]
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	4694      	mov	ip, r2
 800a034:	9317      	str	r3, [sp, #92]	; 0x5c
 800a036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a038:	9010      	str	r0, [sp, #64]	; 0x40
 800a03a:	9111      	str	r1, [sp, #68]	; 0x44
 800a03c:	4463      	add	r3, ip
 800a03e:	9319      	str	r3, [sp, #100]	; 0x64
 800a040:	0029      	movs	r1, r5
 800a042:	0020      	movs	r0, r4
 800a044:	f7f7 fffa 	bl	800203c <__aeabi_d2iz>
 800a048:	9014      	str	r0, [sp, #80]	; 0x50
 800a04a:	f7f8 f82d 	bl	80020a8 <__aeabi_i2d>
 800a04e:	0002      	movs	r2, r0
 800a050:	000b      	movs	r3, r1
 800a052:	0020      	movs	r0, r4
 800a054:	0029      	movs	r1, r5
 800a056:	f7f7 fc41 	bl	80018dc <__aeabi_dsub>
 800a05a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a05c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a05e:	3301      	adds	r3, #1
 800a060:	9308      	str	r3, [sp, #32]
 800a062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a064:	0004      	movs	r4, r0
 800a066:	3330      	adds	r3, #48	; 0x30
 800a068:	7013      	strb	r3, [r2, #0]
 800a06a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a06c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a06e:	000d      	movs	r5, r1
 800a070:	f7f6 f9f2 	bl	8000458 <__aeabi_dcmplt>
 800a074:	2800      	cmp	r0, #0
 800a076:	d175      	bne.n	800a164 <_dtoa_r+0x67c>
 800a078:	0022      	movs	r2, r4
 800a07a:	002b      	movs	r3, r5
 800a07c:	2000      	movs	r0, #0
 800a07e:	4940      	ldr	r1, [pc, #256]	; (800a180 <_dtoa_r+0x698>)
 800a080:	f7f7 fc2c 	bl	80018dc <__aeabi_dsub>
 800a084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a088:	f7f6 f9e6 	bl	8000458 <__aeabi_dcmplt>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d000      	beq.n	800a092 <_dtoa_r+0x5aa>
 800a090:	e0d2      	b.n	800a238 <_dtoa_r+0x750>
 800a092:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a094:	9a08      	ldr	r2, [sp, #32]
 800a096:	4293      	cmp	r3, r2
 800a098:	d100      	bne.n	800a09c <_dtoa_r+0x5b4>
 800a09a:	e770      	b.n	8009f7e <_dtoa_r+0x496>
 800a09c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a09e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4b38      	ldr	r3, [pc, #224]	; (800a184 <_dtoa_r+0x69c>)
 800a0a4:	f7f7 f9ae 	bl	8001404 <__aeabi_dmul>
 800a0a8:	4b36      	ldr	r3, [pc, #216]	; (800a184 <_dtoa_r+0x69c>)
 800a0aa:	9010      	str	r0, [sp, #64]	; 0x40
 800a0ac:	9111      	str	r1, [sp, #68]	; 0x44
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	0020      	movs	r0, r4
 800a0b2:	0029      	movs	r1, r5
 800a0b4:	f7f7 f9a6 	bl	8001404 <__aeabi_dmul>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	0004      	movs	r4, r0
 800a0bc:	000d      	movs	r5, r1
 800a0be:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0c0:	e7be      	b.n	800a040 <_dtoa_r+0x558>
 800a0c2:	9808      	ldr	r0, [sp, #32]
 800a0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0c6:	f7f7 f99d 	bl	8001404 <__aeabi_dmul>
 800a0ca:	9a06      	ldr	r2, [sp, #24]
 800a0cc:	9b06      	ldr	r3, [sp, #24]
 800a0ce:	4694      	mov	ip, r2
 800a0d0:	9308      	str	r3, [sp, #32]
 800a0d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0d4:	9010      	str	r0, [sp, #64]	; 0x40
 800a0d6:	9111      	str	r1, [sp, #68]	; 0x44
 800a0d8:	4463      	add	r3, ip
 800a0da:	9319      	str	r3, [sp, #100]	; 0x64
 800a0dc:	0029      	movs	r1, r5
 800a0de:	0020      	movs	r0, r4
 800a0e0:	f7f7 ffac 	bl	800203c <__aeabi_d2iz>
 800a0e4:	9017      	str	r0, [sp, #92]	; 0x5c
 800a0e6:	f7f7 ffdf 	bl	80020a8 <__aeabi_i2d>
 800a0ea:	0002      	movs	r2, r0
 800a0ec:	000b      	movs	r3, r1
 800a0ee:	0020      	movs	r0, r4
 800a0f0:	0029      	movs	r1, r5
 800a0f2:	f7f7 fbf3 	bl	80018dc <__aeabi_dsub>
 800a0f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0f8:	9a08      	ldr	r2, [sp, #32]
 800a0fa:	3330      	adds	r3, #48	; 0x30
 800a0fc:	7013      	strb	r3, [r2, #0]
 800a0fe:	0013      	movs	r3, r2
 800a100:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a102:	3301      	adds	r3, #1
 800a104:	0004      	movs	r4, r0
 800a106:	000d      	movs	r5, r1
 800a108:	9308      	str	r3, [sp, #32]
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d12c      	bne.n	800a168 <_dtoa_r+0x680>
 800a10e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a110:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a112:	9a06      	ldr	r2, [sp, #24]
 800a114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a116:	4694      	mov	ip, r2
 800a118:	4463      	add	r3, ip
 800a11a:	2200      	movs	r2, #0
 800a11c:	9308      	str	r3, [sp, #32]
 800a11e:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <_dtoa_r+0x6b0>)
 800a120:	f7f6 fa32 	bl	8000588 <__aeabi_dadd>
 800a124:	0002      	movs	r2, r0
 800a126:	000b      	movs	r3, r1
 800a128:	0020      	movs	r0, r4
 800a12a:	0029      	movs	r1, r5
 800a12c:	f7f6 f9a8 	bl	8000480 <__aeabi_dcmpgt>
 800a130:	2800      	cmp	r0, #0
 800a132:	d000      	beq.n	800a136 <_dtoa_r+0x64e>
 800a134:	e080      	b.n	800a238 <_dtoa_r+0x750>
 800a136:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a13a:	2000      	movs	r0, #0
 800a13c:	4916      	ldr	r1, [pc, #88]	; (800a198 <_dtoa_r+0x6b0>)
 800a13e:	f7f7 fbcd 	bl	80018dc <__aeabi_dsub>
 800a142:	0002      	movs	r2, r0
 800a144:	000b      	movs	r3, r1
 800a146:	0020      	movs	r0, r4
 800a148:	0029      	movs	r1, r5
 800a14a:	f7f6 f985 	bl	8000458 <__aeabi_dcmplt>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d100      	bne.n	800a154 <_dtoa_r+0x66c>
 800a152:	e714      	b.n	8009f7e <_dtoa_r+0x496>
 800a154:	9b08      	ldr	r3, [sp, #32]
 800a156:	001a      	movs	r2, r3
 800a158:	3a01      	subs	r2, #1
 800a15a:	9208      	str	r2, [sp, #32]
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	2a30      	cmp	r2, #48	; 0x30
 800a160:	d0f8      	beq.n	800a154 <_dtoa_r+0x66c>
 800a162:	9308      	str	r3, [sp, #32]
 800a164:	9602      	str	r6, [sp, #8]
 800a166:	e055      	b.n	800a214 <_dtoa_r+0x72c>
 800a168:	2200      	movs	r2, #0
 800a16a:	4b06      	ldr	r3, [pc, #24]	; (800a184 <_dtoa_r+0x69c>)
 800a16c:	f7f7 f94a 	bl	8001404 <__aeabi_dmul>
 800a170:	0004      	movs	r4, r0
 800a172:	000d      	movs	r5, r1
 800a174:	e7b2      	b.n	800a0dc <_dtoa_r+0x5f4>
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	0800cdf0 	.word	0x0800cdf0
 800a17c:	0800cdc8 	.word	0x0800cdc8
 800a180:	3ff00000 	.word	0x3ff00000
 800a184:	40240000 	.word	0x40240000
 800a188:	401c0000 	.word	0x401c0000
 800a18c:	fcc00000 	.word	0xfcc00000
 800a190:	40140000 	.word	0x40140000
 800a194:	7cc00000 	.word	0x7cc00000
 800a198:	3fe00000 	.word	0x3fe00000
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	9e06      	ldr	r6, [sp, #24]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	199b      	adds	r3, r3, r6
 800a1a4:	930c      	str	r3, [sp, #48]	; 0x30
 800a1a6:	9c08      	ldr	r4, [sp, #32]
 800a1a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a1aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ae:	0020      	movs	r0, r4
 800a1b0:	0029      	movs	r1, r5
 800a1b2:	f7f6 fd25 	bl	8000c00 <__aeabi_ddiv>
 800a1b6:	f7f7 ff41 	bl	800203c <__aeabi_d2iz>
 800a1ba:	9007      	str	r0, [sp, #28]
 800a1bc:	f7f7 ff74 	bl	80020a8 <__aeabi_i2d>
 800a1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c4:	f7f7 f91e 	bl	8001404 <__aeabi_dmul>
 800a1c8:	0002      	movs	r2, r0
 800a1ca:	000b      	movs	r3, r1
 800a1cc:	0020      	movs	r0, r4
 800a1ce:	0029      	movs	r1, r5
 800a1d0:	f7f7 fb84 	bl	80018dc <__aeabi_dsub>
 800a1d4:	0033      	movs	r3, r6
 800a1d6:	9a07      	ldr	r2, [sp, #28]
 800a1d8:	3601      	adds	r6, #1
 800a1da:	3230      	adds	r2, #48	; 0x30
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e0:	9608      	str	r6, [sp, #32]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d139      	bne.n	800a25a <_dtoa_r+0x772>
 800a1e6:	0002      	movs	r2, r0
 800a1e8:	000b      	movs	r3, r1
 800a1ea:	f7f6 f9cd 	bl	8000588 <__aeabi_dadd>
 800a1ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f2:	0004      	movs	r4, r0
 800a1f4:	000d      	movs	r5, r1
 800a1f6:	f7f6 f943 	bl	8000480 <__aeabi_dcmpgt>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d11b      	bne.n	800a236 <_dtoa_r+0x74e>
 800a1fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a202:	0020      	movs	r0, r4
 800a204:	0029      	movs	r1, r5
 800a206:	f7f6 f921 	bl	800044c <__aeabi_dcmpeq>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d002      	beq.n	800a214 <_dtoa_r+0x72c>
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	07db      	lsls	r3, r3, #31
 800a212:	d410      	bmi.n	800a236 <_dtoa_r+0x74e>
 800a214:	0038      	movs	r0, r7
 800a216:	9905      	ldr	r1, [sp, #20]
 800a218:	f000 ff6a 	bl	800b0f0 <_Bfree>
 800a21c:	2300      	movs	r3, #0
 800a21e:	9a08      	ldr	r2, [sp, #32]
 800a220:	9802      	ldr	r0, [sp, #8]
 800a222:	7013      	strb	r3, [r2, #0]
 800a224:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a226:	3001      	adds	r0, #1
 800a228:	6018      	str	r0, [r3, #0]
 800a22a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d100      	bne.n	800a232 <_dtoa_r+0x74a>
 800a230:	e4a6      	b.n	8009b80 <_dtoa_r+0x98>
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	e4a4      	b.n	8009b80 <_dtoa_r+0x98>
 800a236:	9e02      	ldr	r6, [sp, #8]
 800a238:	9b08      	ldr	r3, [sp, #32]
 800a23a:	9308      	str	r3, [sp, #32]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	781a      	ldrb	r2, [r3, #0]
 800a240:	2a39      	cmp	r2, #57	; 0x39
 800a242:	d106      	bne.n	800a252 <_dtoa_r+0x76a>
 800a244:	9a06      	ldr	r2, [sp, #24]
 800a246:	429a      	cmp	r2, r3
 800a248:	d1f7      	bne.n	800a23a <_dtoa_r+0x752>
 800a24a:	2230      	movs	r2, #48	; 0x30
 800a24c:	9906      	ldr	r1, [sp, #24]
 800a24e:	3601      	adds	r6, #1
 800a250:	700a      	strb	r2, [r1, #0]
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	3201      	adds	r2, #1
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	e784      	b.n	800a164 <_dtoa_r+0x67c>
 800a25a:	2200      	movs	r2, #0
 800a25c:	4baa      	ldr	r3, [pc, #680]	; (800a508 <_dtoa_r+0xa20>)
 800a25e:	f7f7 f8d1 	bl	8001404 <__aeabi_dmul>
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	0004      	movs	r4, r0
 800a268:	000d      	movs	r5, r1
 800a26a:	f7f6 f8ef 	bl	800044c <__aeabi_dcmpeq>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d09b      	beq.n	800a1aa <_dtoa_r+0x6c2>
 800a272:	e7cf      	b.n	800a214 <_dtoa_r+0x72c>
 800a274:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a276:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a278:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a27a:	2d00      	cmp	r5, #0
 800a27c:	d012      	beq.n	800a2a4 <_dtoa_r+0x7bc>
 800a27e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a280:	2a01      	cmp	r2, #1
 800a282:	dc66      	bgt.n	800a352 <_dtoa_r+0x86a>
 800a284:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a286:	2a00      	cmp	r2, #0
 800a288:	d05d      	beq.n	800a346 <_dtoa_r+0x85e>
 800a28a:	4aa0      	ldr	r2, [pc, #640]	; (800a50c <_dtoa_r+0xa24>)
 800a28c:	189b      	adds	r3, r3, r2
 800a28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a290:	2101      	movs	r1, #1
 800a292:	18d2      	adds	r2, r2, r3
 800a294:	920a      	str	r2, [sp, #40]	; 0x28
 800a296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a298:	0038      	movs	r0, r7
 800a29a:	18d3      	adds	r3, r2, r3
 800a29c:	930d      	str	r3, [sp, #52]	; 0x34
 800a29e:	f001 f823 	bl	800b2e8 <__i2b>
 800a2a2:	0005      	movs	r5, r0
 800a2a4:	2c00      	cmp	r4, #0
 800a2a6:	dd0e      	ble.n	800a2c6 <_dtoa_r+0x7de>
 800a2a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dd0b      	ble.n	800a2c6 <_dtoa_r+0x7de>
 800a2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2b0:	0023      	movs	r3, r4
 800a2b2:	4294      	cmp	r4, r2
 800a2b4:	dd00      	ble.n	800a2b8 <_dtoa_r+0x7d0>
 800a2b6:	0013      	movs	r3, r2
 800a2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ba:	1ae4      	subs	r4, r4, r3
 800a2bc:	1ad2      	subs	r2, r2, r3
 800a2be:	920a      	str	r2, [sp, #40]	; 0x28
 800a2c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01f      	beq.n	800a30c <_dtoa_r+0x824>
 800a2cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d054      	beq.n	800a37c <_dtoa_r+0x894>
 800a2d2:	2e00      	cmp	r6, #0
 800a2d4:	dd11      	ble.n	800a2fa <_dtoa_r+0x812>
 800a2d6:	0029      	movs	r1, r5
 800a2d8:	0032      	movs	r2, r6
 800a2da:	0038      	movs	r0, r7
 800a2dc:	f001 f8ca 	bl	800b474 <__pow5mult>
 800a2e0:	9a05      	ldr	r2, [sp, #20]
 800a2e2:	0001      	movs	r1, r0
 800a2e4:	0005      	movs	r5, r0
 800a2e6:	0038      	movs	r0, r7
 800a2e8:	f001 f814 	bl	800b314 <__multiply>
 800a2ec:	9905      	ldr	r1, [sp, #20]
 800a2ee:	9014      	str	r0, [sp, #80]	; 0x50
 800a2f0:	0038      	movs	r0, r7
 800a2f2:	f000 fefd 	bl	800b0f0 <_Bfree>
 800a2f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2fc:	1b9a      	subs	r2, r3, r6
 800a2fe:	42b3      	cmp	r3, r6
 800a300:	d004      	beq.n	800a30c <_dtoa_r+0x824>
 800a302:	0038      	movs	r0, r7
 800a304:	9905      	ldr	r1, [sp, #20]
 800a306:	f001 f8b5 	bl	800b474 <__pow5mult>
 800a30a:	9005      	str	r0, [sp, #20]
 800a30c:	2101      	movs	r1, #1
 800a30e:	0038      	movs	r0, r7
 800a310:	f000 ffea 	bl	800b2e8 <__i2b>
 800a314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a316:	0006      	movs	r6, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd31      	ble.n	800a380 <_dtoa_r+0x898>
 800a31c:	001a      	movs	r2, r3
 800a31e:	0001      	movs	r1, r0
 800a320:	0038      	movs	r0, r7
 800a322:	f001 f8a7 	bl	800b474 <__pow5mult>
 800a326:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a328:	0006      	movs	r6, r0
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	dd2d      	ble.n	800a38a <_dtoa_r+0x8a2>
 800a32e:	2300      	movs	r3, #0
 800a330:	930e      	str	r3, [sp, #56]	; 0x38
 800a332:	6933      	ldr	r3, [r6, #16]
 800a334:	3303      	adds	r3, #3
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	18f3      	adds	r3, r6, r3
 800a33a:	6858      	ldr	r0, [r3, #4]
 800a33c:	f000 ff8c 	bl	800b258 <__hi0bits>
 800a340:	2320      	movs	r3, #32
 800a342:	1a18      	subs	r0, r3, r0
 800a344:	e039      	b.n	800a3ba <_dtoa_r+0x8d2>
 800a346:	2336      	movs	r3, #54	; 0x36
 800a348:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a34a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a34c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a34e:	1a9b      	subs	r3, r3, r2
 800a350:	e79d      	b.n	800a28e <_dtoa_r+0x7a6>
 800a352:	9b07      	ldr	r3, [sp, #28]
 800a354:	1e5e      	subs	r6, r3, #1
 800a356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a358:	42b3      	cmp	r3, r6
 800a35a:	db07      	blt.n	800a36c <_dtoa_r+0x884>
 800a35c:	1b9e      	subs	r6, r3, r6
 800a35e:	9b07      	ldr	r3, [sp, #28]
 800a360:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a362:	2b00      	cmp	r3, #0
 800a364:	da93      	bge.n	800a28e <_dtoa_r+0x7a6>
 800a366:	1ae4      	subs	r4, r4, r3
 800a368:	2300      	movs	r3, #0
 800a36a:	e790      	b.n	800a28e <_dtoa_r+0x7a6>
 800a36c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a36e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a370:	1af3      	subs	r3, r6, r3
 800a372:	18d3      	adds	r3, r2, r3
 800a374:	960e      	str	r6, [sp, #56]	; 0x38
 800a376:	9315      	str	r3, [sp, #84]	; 0x54
 800a378:	2600      	movs	r6, #0
 800a37a:	e7f0      	b.n	800a35e <_dtoa_r+0x876>
 800a37c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a37e:	e7c0      	b.n	800a302 <_dtoa_r+0x81a>
 800a380:	2300      	movs	r3, #0
 800a382:	930e      	str	r3, [sp, #56]	; 0x38
 800a384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a386:	2b01      	cmp	r3, #1
 800a388:	dc13      	bgt.n	800a3b2 <_dtoa_r+0x8ca>
 800a38a:	2300      	movs	r3, #0
 800a38c:	930e      	str	r3, [sp, #56]	; 0x38
 800a38e:	9b08      	ldr	r3, [sp, #32]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10e      	bne.n	800a3b2 <_dtoa_r+0x8ca>
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	031b      	lsls	r3, r3, #12
 800a398:	d10b      	bne.n	800a3b2 <_dtoa_r+0x8ca>
 800a39a:	4b5d      	ldr	r3, [pc, #372]	; (800a510 <_dtoa_r+0xa28>)
 800a39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39e:	4213      	tst	r3, r2
 800a3a0:	d007      	beq.n	800a3b2 <_dtoa_r+0x8ca>
 800a3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3b4:	2001      	movs	r0, #1
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1bb      	bne.n	800a332 <_dtoa_r+0x84a>
 800a3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3bc:	221f      	movs	r2, #31
 800a3be:	1818      	adds	r0, r3, r0
 800a3c0:	0003      	movs	r3, r0
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	4210      	tst	r0, r2
 800a3c6:	d046      	beq.n	800a456 <_dtoa_r+0x96e>
 800a3c8:	3201      	adds	r2, #1
 800a3ca:	1ad2      	subs	r2, r2, r3
 800a3cc:	2a04      	cmp	r2, #4
 800a3ce:	dd3f      	ble.n	800a450 <_dtoa_r+0x968>
 800a3d0:	221c      	movs	r2, #28
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3d6:	18e4      	adds	r4, r4, r3
 800a3d8:	18d2      	adds	r2, r2, r3
 800a3da:	920a      	str	r2, [sp, #40]	; 0x28
 800a3dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3de:	18d3      	adds	r3, r2, r3
 800a3e0:	930d      	str	r3, [sp, #52]	; 0x34
 800a3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd05      	ble.n	800a3f4 <_dtoa_r+0x90c>
 800a3e8:	001a      	movs	r2, r3
 800a3ea:	0038      	movs	r0, r7
 800a3ec:	9905      	ldr	r1, [sp, #20]
 800a3ee:	f001 f89d 	bl	800b52c <__lshift>
 800a3f2:	9005      	str	r0, [sp, #20]
 800a3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dd05      	ble.n	800a406 <_dtoa_r+0x91e>
 800a3fa:	0031      	movs	r1, r6
 800a3fc:	001a      	movs	r2, r3
 800a3fe:	0038      	movs	r0, r7
 800a400:	f001 f894 	bl	800b52c <__lshift>
 800a404:	0006      	movs	r6, r0
 800a406:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d026      	beq.n	800a45a <_dtoa_r+0x972>
 800a40c:	0031      	movs	r1, r6
 800a40e:	9805      	ldr	r0, [sp, #20]
 800a410:	f001 f8fa 	bl	800b608 <__mcmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	da20      	bge.n	800a45a <_dtoa_r+0x972>
 800a418:	9b02      	ldr	r3, [sp, #8]
 800a41a:	220a      	movs	r2, #10
 800a41c:	3b01      	subs	r3, #1
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	0038      	movs	r0, r7
 800a422:	2300      	movs	r3, #0
 800a424:	9905      	ldr	r1, [sp, #20]
 800a426:	f000 fe87 	bl	800b138 <__multadd>
 800a42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a42c:	9005      	str	r0, [sp, #20]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d100      	bne.n	800a434 <_dtoa_r+0x94c>
 800a432:	e166      	b.n	800a702 <_dtoa_r+0xc1a>
 800a434:	2300      	movs	r3, #0
 800a436:	0029      	movs	r1, r5
 800a438:	220a      	movs	r2, #10
 800a43a:	0038      	movs	r0, r7
 800a43c:	f000 fe7c 	bl	800b138 <__multadd>
 800a440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a442:	0005      	movs	r5, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	dc47      	bgt.n	800a4d8 <_dtoa_r+0x9f0>
 800a448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	dc0d      	bgt.n	800a46a <_dtoa_r+0x982>
 800a44e:	e043      	b.n	800a4d8 <_dtoa_r+0x9f0>
 800a450:	2a04      	cmp	r2, #4
 800a452:	d0c6      	beq.n	800a3e2 <_dtoa_r+0x8fa>
 800a454:	0013      	movs	r3, r2
 800a456:	331c      	adds	r3, #28
 800a458:	e7bc      	b.n	800a3d4 <_dtoa_r+0x8ec>
 800a45a:	9b07      	ldr	r3, [sp, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dc35      	bgt.n	800a4cc <_dtoa_r+0x9e4>
 800a460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a462:	2b02      	cmp	r3, #2
 800a464:	dd32      	ble.n	800a4cc <_dtoa_r+0x9e4>
 800a466:	9b07      	ldr	r3, [sp, #28]
 800a468:	930c      	str	r3, [sp, #48]	; 0x30
 800a46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10c      	bne.n	800a48a <_dtoa_r+0x9a2>
 800a470:	0031      	movs	r1, r6
 800a472:	2205      	movs	r2, #5
 800a474:	0038      	movs	r0, r7
 800a476:	f000 fe5f 	bl	800b138 <__multadd>
 800a47a:	0006      	movs	r6, r0
 800a47c:	0001      	movs	r1, r0
 800a47e:	9805      	ldr	r0, [sp, #20]
 800a480:	f001 f8c2 	bl	800b608 <__mcmp>
 800a484:	2800      	cmp	r0, #0
 800a486:	dd00      	ble.n	800a48a <_dtoa_r+0x9a2>
 800a488:	e5a5      	b.n	8009fd6 <_dtoa_r+0x4ee>
 800a48a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a48c:	43db      	mvns	r3, r3
 800a48e:	9302      	str	r3, [sp, #8]
 800a490:	9b06      	ldr	r3, [sp, #24]
 800a492:	9308      	str	r3, [sp, #32]
 800a494:	2400      	movs	r4, #0
 800a496:	0031      	movs	r1, r6
 800a498:	0038      	movs	r0, r7
 800a49a:	f000 fe29 	bl	800b0f0 <_Bfree>
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	d100      	bne.n	800a4a4 <_dtoa_r+0x9bc>
 800a4a2:	e6b7      	b.n	800a214 <_dtoa_r+0x72c>
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	d005      	beq.n	800a4b4 <_dtoa_r+0x9cc>
 800a4a8:	42ac      	cmp	r4, r5
 800a4aa:	d003      	beq.n	800a4b4 <_dtoa_r+0x9cc>
 800a4ac:	0021      	movs	r1, r4
 800a4ae:	0038      	movs	r0, r7
 800a4b0:	f000 fe1e 	bl	800b0f0 <_Bfree>
 800a4b4:	0029      	movs	r1, r5
 800a4b6:	0038      	movs	r0, r7
 800a4b8:	f000 fe1a 	bl	800b0f0 <_Bfree>
 800a4bc:	e6aa      	b.n	800a214 <_dtoa_r+0x72c>
 800a4be:	2600      	movs	r6, #0
 800a4c0:	0035      	movs	r5, r6
 800a4c2:	e7e2      	b.n	800a48a <_dtoa_r+0x9a2>
 800a4c4:	9602      	str	r6, [sp, #8]
 800a4c6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a4c8:	0035      	movs	r5, r6
 800a4ca:	e584      	b.n	8009fd6 <_dtoa_r+0x4ee>
 800a4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d100      	bne.n	800a4d4 <_dtoa_r+0x9ec>
 800a4d2:	e0ce      	b.n	800a672 <_dtoa_r+0xb8a>
 800a4d4:	9b07      	ldr	r3, [sp, #28]
 800a4d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a4d8:	2c00      	cmp	r4, #0
 800a4da:	dd05      	ble.n	800a4e8 <_dtoa_r+0xa00>
 800a4dc:	0029      	movs	r1, r5
 800a4de:	0022      	movs	r2, r4
 800a4e0:	0038      	movs	r0, r7
 800a4e2:	f001 f823 	bl	800b52c <__lshift>
 800a4e6:	0005      	movs	r5, r0
 800a4e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ea:	0028      	movs	r0, r5
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d022      	beq.n	800a536 <_dtoa_r+0xa4e>
 800a4f0:	0038      	movs	r0, r7
 800a4f2:	6869      	ldr	r1, [r5, #4]
 800a4f4:	f000 fdb8 	bl	800b068 <_Balloc>
 800a4f8:	1e04      	subs	r4, r0, #0
 800a4fa:	d10f      	bne.n	800a51c <_dtoa_r+0xa34>
 800a4fc:	0002      	movs	r2, r0
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <_dtoa_r+0xa2c>)
 800a500:	4905      	ldr	r1, [pc, #20]	; (800a518 <_dtoa_r+0xa30>)
 800a502:	f7ff fb06 	bl	8009b12 <_dtoa_r+0x2a>
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	40240000 	.word	0x40240000
 800a50c:	00000433 	.word	0x00000433
 800a510:	7ff00000 	.word	0x7ff00000
 800a514:	0800cc78 	.word	0x0800cc78
 800a518:	000002ea 	.word	0x000002ea
 800a51c:	0029      	movs	r1, r5
 800a51e:	692b      	ldr	r3, [r5, #16]
 800a520:	310c      	adds	r1, #12
 800a522:	1c9a      	adds	r2, r3, #2
 800a524:	0092      	lsls	r2, r2, #2
 800a526:	300c      	adds	r0, #12
 800a528:	f7fd fcc6 	bl	8007eb8 <memcpy>
 800a52c:	2201      	movs	r2, #1
 800a52e:	0021      	movs	r1, r4
 800a530:	0038      	movs	r0, r7
 800a532:	f000 fffb 	bl	800b52c <__lshift>
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a53a:	930a      	str	r3, [sp, #40]	; 0x28
 800a53c:	3b01      	subs	r3, #1
 800a53e:	189b      	adds	r3, r3, r2
 800a540:	2201      	movs	r2, #1
 800a542:	002c      	movs	r4, r5
 800a544:	0005      	movs	r5, r0
 800a546:	9314      	str	r3, [sp, #80]	; 0x50
 800a548:	9b08      	ldr	r3, [sp, #32]
 800a54a:	4013      	ands	r3, r2
 800a54c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a54e:	0031      	movs	r1, r6
 800a550:	9805      	ldr	r0, [sp, #20]
 800a552:	f7ff fa3d 	bl	80099d0 <quorem>
 800a556:	0003      	movs	r3, r0
 800a558:	0021      	movs	r1, r4
 800a55a:	3330      	adds	r3, #48	; 0x30
 800a55c:	900d      	str	r0, [sp, #52]	; 0x34
 800a55e:	9805      	ldr	r0, [sp, #20]
 800a560:	9307      	str	r3, [sp, #28]
 800a562:	f001 f851 	bl	800b608 <__mcmp>
 800a566:	002a      	movs	r2, r5
 800a568:	900e      	str	r0, [sp, #56]	; 0x38
 800a56a:	0031      	movs	r1, r6
 800a56c:	0038      	movs	r0, r7
 800a56e:	f001 f867 	bl	800b640 <__mdiff>
 800a572:	68c3      	ldr	r3, [r0, #12]
 800a574:	9008      	str	r0, [sp, #32]
 800a576:	9310      	str	r3, [sp, #64]	; 0x40
 800a578:	2301      	movs	r3, #1
 800a57a:	930c      	str	r3, [sp, #48]	; 0x30
 800a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d104      	bne.n	800a58c <_dtoa_r+0xaa4>
 800a582:	0001      	movs	r1, r0
 800a584:	9805      	ldr	r0, [sp, #20]
 800a586:	f001 f83f 	bl	800b608 <__mcmp>
 800a58a:	900c      	str	r0, [sp, #48]	; 0x30
 800a58c:	0038      	movs	r0, r7
 800a58e:	9908      	ldr	r1, [sp, #32]
 800a590:	f000 fdae 	bl	800b0f0 <_Bfree>
 800a594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a598:	3301      	adds	r3, #1
 800a59a:	9308      	str	r3, [sp, #32]
 800a59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	d10c      	bne.n	800a5c0 <_dtoa_r+0xad8>
 800a5a6:	9b07      	ldr	r3, [sp, #28]
 800a5a8:	2b39      	cmp	r3, #57	; 0x39
 800a5aa:	d026      	beq.n	800a5fa <_dtoa_r+0xb12>
 800a5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd02      	ble.n	800a5b8 <_dtoa_r+0xad0>
 800a5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5b4:	3331      	adds	r3, #49	; 0x31
 800a5b6:	9307      	str	r3, [sp, #28]
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ba:	9a07      	ldr	r2, [sp, #28]
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e76a      	b.n	800a496 <_dtoa_r+0x9ae>
 800a5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	db04      	blt.n	800a5d0 <_dtoa_r+0xae8>
 800a5c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	d11f      	bne.n	800a610 <_dtoa_r+0xb28>
 800a5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	ddf0      	ble.n	800a5b8 <_dtoa_r+0xad0>
 800a5d6:	9905      	ldr	r1, [sp, #20]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	0038      	movs	r0, r7
 800a5dc:	f000 ffa6 	bl	800b52c <__lshift>
 800a5e0:	0031      	movs	r1, r6
 800a5e2:	9005      	str	r0, [sp, #20]
 800a5e4:	f001 f810 	bl	800b608 <__mcmp>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	dc03      	bgt.n	800a5f4 <_dtoa_r+0xb0c>
 800a5ec:	d1e4      	bne.n	800a5b8 <_dtoa_r+0xad0>
 800a5ee:	9b07      	ldr	r3, [sp, #28]
 800a5f0:	07db      	lsls	r3, r3, #31
 800a5f2:	d5e1      	bpl.n	800a5b8 <_dtoa_r+0xad0>
 800a5f4:	9b07      	ldr	r3, [sp, #28]
 800a5f6:	2b39      	cmp	r3, #57	; 0x39
 800a5f8:	d1db      	bne.n	800a5b2 <_dtoa_r+0xaca>
 800a5fa:	2339      	movs	r3, #57	; 0x39
 800a5fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5fe:	7013      	strb	r3, [r2, #0]
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	9308      	str	r3, [sp, #32]
 800a604:	3b01      	subs	r3, #1
 800a606:	781a      	ldrb	r2, [r3, #0]
 800a608:	2a39      	cmp	r2, #57	; 0x39
 800a60a:	d068      	beq.n	800a6de <_dtoa_r+0xbf6>
 800a60c:	3201      	adds	r2, #1
 800a60e:	e7d5      	b.n	800a5bc <_dtoa_r+0xad4>
 800a610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a612:	2b00      	cmp	r3, #0
 800a614:	dd07      	ble.n	800a626 <_dtoa_r+0xb3e>
 800a616:	9b07      	ldr	r3, [sp, #28]
 800a618:	2b39      	cmp	r3, #57	; 0x39
 800a61a:	d0ee      	beq.n	800a5fa <_dtoa_r+0xb12>
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a620:	3301      	adds	r3, #1
 800a622:	7013      	strb	r3, [r2, #0]
 800a624:	e737      	b.n	800a496 <_dtoa_r+0x9ae>
 800a626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a628:	9a07      	ldr	r2, [sp, #28]
 800a62a:	701a      	strb	r2, [r3, #0]
 800a62c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a630:	4293      	cmp	r3, r2
 800a632:	d03e      	beq.n	800a6b2 <_dtoa_r+0xbca>
 800a634:	2300      	movs	r3, #0
 800a636:	220a      	movs	r2, #10
 800a638:	9905      	ldr	r1, [sp, #20]
 800a63a:	0038      	movs	r0, r7
 800a63c:	f000 fd7c 	bl	800b138 <__multadd>
 800a640:	2300      	movs	r3, #0
 800a642:	9005      	str	r0, [sp, #20]
 800a644:	220a      	movs	r2, #10
 800a646:	0021      	movs	r1, r4
 800a648:	0038      	movs	r0, r7
 800a64a:	42ac      	cmp	r4, r5
 800a64c:	d106      	bne.n	800a65c <_dtoa_r+0xb74>
 800a64e:	f000 fd73 	bl	800b138 <__multadd>
 800a652:	0004      	movs	r4, r0
 800a654:	0005      	movs	r5, r0
 800a656:	9b08      	ldr	r3, [sp, #32]
 800a658:	930a      	str	r3, [sp, #40]	; 0x28
 800a65a:	e778      	b.n	800a54e <_dtoa_r+0xa66>
 800a65c:	f000 fd6c 	bl	800b138 <__multadd>
 800a660:	0029      	movs	r1, r5
 800a662:	0004      	movs	r4, r0
 800a664:	2300      	movs	r3, #0
 800a666:	220a      	movs	r2, #10
 800a668:	0038      	movs	r0, r7
 800a66a:	f000 fd65 	bl	800b138 <__multadd>
 800a66e:	0005      	movs	r5, r0
 800a670:	e7f1      	b.n	800a656 <_dtoa_r+0xb6e>
 800a672:	9b07      	ldr	r3, [sp, #28]
 800a674:	930c      	str	r3, [sp, #48]	; 0x30
 800a676:	2400      	movs	r4, #0
 800a678:	0031      	movs	r1, r6
 800a67a:	9805      	ldr	r0, [sp, #20]
 800a67c:	f7ff f9a8 	bl	80099d0 <quorem>
 800a680:	9b06      	ldr	r3, [sp, #24]
 800a682:	3030      	adds	r0, #48	; 0x30
 800a684:	5518      	strb	r0, [r3, r4]
 800a686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a688:	3401      	adds	r4, #1
 800a68a:	9007      	str	r0, [sp, #28]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	dd07      	ble.n	800a6a0 <_dtoa_r+0xbb8>
 800a690:	2300      	movs	r3, #0
 800a692:	220a      	movs	r2, #10
 800a694:	0038      	movs	r0, r7
 800a696:	9905      	ldr	r1, [sp, #20]
 800a698:	f000 fd4e 	bl	800b138 <__multadd>
 800a69c:	9005      	str	r0, [sp, #20]
 800a69e:	e7eb      	b.n	800a678 <_dtoa_r+0xb90>
 800a6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd00      	ble.n	800a6aa <_dtoa_r+0xbc2>
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	2400      	movs	r4, #0
 800a6ac:	9b06      	ldr	r3, [sp, #24]
 800a6ae:	181b      	adds	r3, r3, r0
 800a6b0:	9308      	str	r3, [sp, #32]
 800a6b2:	9905      	ldr	r1, [sp, #20]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	0038      	movs	r0, r7
 800a6b8:	f000 ff38 	bl	800b52c <__lshift>
 800a6bc:	0031      	movs	r1, r6
 800a6be:	9005      	str	r0, [sp, #20]
 800a6c0:	f000 ffa2 	bl	800b608 <__mcmp>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	dc9b      	bgt.n	800a600 <_dtoa_r+0xb18>
 800a6c8:	d102      	bne.n	800a6d0 <_dtoa_r+0xbe8>
 800a6ca:	9b07      	ldr	r3, [sp, #28]
 800a6cc:	07db      	lsls	r3, r3, #31
 800a6ce:	d497      	bmi.n	800a600 <_dtoa_r+0xb18>
 800a6d0:	9b08      	ldr	r3, [sp, #32]
 800a6d2:	9308      	str	r3, [sp, #32]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	781a      	ldrb	r2, [r3, #0]
 800a6d8:	2a30      	cmp	r2, #48	; 0x30
 800a6da:	d0fa      	beq.n	800a6d2 <_dtoa_r+0xbea>
 800a6dc:	e6db      	b.n	800a496 <_dtoa_r+0x9ae>
 800a6de:	9a06      	ldr	r2, [sp, #24]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d18e      	bne.n	800a602 <_dtoa_r+0xb1a>
 800a6e4:	9b02      	ldr	r3, [sp, #8]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	9302      	str	r3, [sp, #8]
 800a6ea:	2331      	movs	r3, #49	; 0x31
 800a6ec:	e799      	b.n	800a622 <_dtoa_r+0xb3a>
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <_dtoa_r+0xc2c>)
 800a6f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6f2:	9306      	str	r3, [sp, #24]
 800a6f4:	4b08      	ldr	r3, [pc, #32]	; (800a718 <_dtoa_r+0xc30>)
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d001      	beq.n	800a6fe <_dtoa_r+0xc16>
 800a6fa:	f7ff fa3f 	bl	8009b7c <_dtoa_r+0x94>
 800a6fe:	f7ff fa3f 	bl	8009b80 <_dtoa_r+0x98>
 800a702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	dcb6      	bgt.n	800a676 <_dtoa_r+0xb8e>
 800a708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	dd00      	ble.n	800a710 <_dtoa_r+0xc28>
 800a70e:	e6ac      	b.n	800a46a <_dtoa_r+0x982>
 800a710:	e7b1      	b.n	800a676 <_dtoa_r+0xb8e>
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	0800cbf9 	.word	0x0800cbf9
 800a718:	0800cc01 	.word	0x0800cc01

0800a71c <std>:
 800a71c:	2300      	movs	r3, #0
 800a71e:	b510      	push	{r4, lr}
 800a720:	0004      	movs	r4, r0
 800a722:	6003      	str	r3, [r0, #0]
 800a724:	6043      	str	r3, [r0, #4]
 800a726:	6083      	str	r3, [r0, #8]
 800a728:	8181      	strh	r1, [r0, #12]
 800a72a:	6643      	str	r3, [r0, #100]	; 0x64
 800a72c:	0019      	movs	r1, r3
 800a72e:	81c2      	strh	r2, [r0, #14]
 800a730:	6103      	str	r3, [r0, #16]
 800a732:	6143      	str	r3, [r0, #20]
 800a734:	6183      	str	r3, [r0, #24]
 800a736:	2208      	movs	r2, #8
 800a738:	305c      	adds	r0, #92	; 0x5c
 800a73a:	f7fd fbc6 	bl	8007eca <memset>
 800a73e:	4b05      	ldr	r3, [pc, #20]	; (800a754 <std+0x38>)
 800a740:	6224      	str	r4, [r4, #32]
 800a742:	6263      	str	r3, [r4, #36]	; 0x24
 800a744:	4b04      	ldr	r3, [pc, #16]	; (800a758 <std+0x3c>)
 800a746:	62a3      	str	r3, [r4, #40]	; 0x28
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <std+0x40>)
 800a74a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a74c:	4b04      	ldr	r3, [pc, #16]	; (800a760 <std+0x44>)
 800a74e:	6323      	str	r3, [r4, #48]	; 0x30
 800a750:	bd10      	pop	{r4, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	0800c1d1 	.word	0x0800c1d1
 800a758:	0800c1f9 	.word	0x0800c1f9
 800a75c:	0800c231 	.word	0x0800c231
 800a760:	0800c25d 	.word	0x0800c25d

0800a764 <_cleanup_r>:
 800a764:	b510      	push	{r4, lr}
 800a766:	4902      	ldr	r1, [pc, #8]	; (800a770 <_cleanup_r+0xc>)
 800a768:	f000 f8ba 	bl	800a8e0 <_fwalk_reent>
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	0800c5e5 	.word	0x0800c5e5

0800a774 <__sfmoreglue>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	2568      	movs	r5, #104	; 0x68
 800a778:	1e4a      	subs	r2, r1, #1
 800a77a:	4355      	muls	r5, r2
 800a77c:	000e      	movs	r6, r1
 800a77e:	0029      	movs	r1, r5
 800a780:	3174      	adds	r1, #116	; 0x74
 800a782:	f001 f9d3 	bl	800bb2c <_malloc_r>
 800a786:	1e04      	subs	r4, r0, #0
 800a788:	d008      	beq.n	800a79c <__sfmoreglue+0x28>
 800a78a:	2100      	movs	r1, #0
 800a78c:	002a      	movs	r2, r5
 800a78e:	6001      	str	r1, [r0, #0]
 800a790:	6046      	str	r6, [r0, #4]
 800a792:	300c      	adds	r0, #12
 800a794:	60a0      	str	r0, [r4, #8]
 800a796:	3268      	adds	r2, #104	; 0x68
 800a798:	f7fd fb97 	bl	8007eca <memset>
 800a79c:	0020      	movs	r0, r4
 800a79e:	bd70      	pop	{r4, r5, r6, pc}

0800a7a0 <__sfp_lock_acquire>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	4802      	ldr	r0, [pc, #8]	; (800a7ac <__sfp_lock_acquire+0xc>)
 800a7a4:	f000 fc35 	bl	800b012 <__retarget_lock_acquire_recursive>
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	20000565 	.word	0x20000565

0800a7b0 <__sfp_lock_release>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	4802      	ldr	r0, [pc, #8]	; (800a7bc <__sfp_lock_release+0xc>)
 800a7b4:	f000 fc2e 	bl	800b014 <__retarget_lock_release_recursive>
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	46c0      	nop			; (mov r8, r8)
 800a7bc:	20000565 	.word	0x20000565

0800a7c0 <__sinit_lock_acquire>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	4802      	ldr	r0, [pc, #8]	; (800a7cc <__sinit_lock_acquire+0xc>)
 800a7c4:	f000 fc25 	bl	800b012 <__retarget_lock_acquire_recursive>
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	20000566 	.word	0x20000566

0800a7d0 <__sinit_lock_release>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	4802      	ldr	r0, [pc, #8]	; (800a7dc <__sinit_lock_release+0xc>)
 800a7d4:	f000 fc1e 	bl	800b014 <__retarget_lock_release_recursive>
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	20000566 	.word	0x20000566

0800a7e0 <__sinit>:
 800a7e0:	b513      	push	{r0, r1, r4, lr}
 800a7e2:	0004      	movs	r4, r0
 800a7e4:	f7ff ffec 	bl	800a7c0 <__sinit_lock_acquire>
 800a7e8:	69a3      	ldr	r3, [r4, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <__sinit+0x14>
 800a7ee:	f7ff ffef 	bl	800a7d0 <__sinit_lock_release>
 800a7f2:	bd13      	pop	{r0, r1, r4, pc}
 800a7f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800a7f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a7f8:	6523      	str	r3, [r4, #80]	; 0x50
 800a7fa:	4b13      	ldr	r3, [pc, #76]	; (800a848 <__sinit+0x68>)
 800a7fc:	4a13      	ldr	r2, [pc, #76]	; (800a84c <__sinit+0x6c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	62a2      	str	r2, [r4, #40]	; 0x28
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	42a3      	cmp	r3, r4
 800a806:	d101      	bne.n	800a80c <__sinit+0x2c>
 800a808:	2301      	movs	r3, #1
 800a80a:	61a3      	str	r3, [r4, #24]
 800a80c:	0020      	movs	r0, r4
 800a80e:	f000 f81f 	bl	800a850 <__sfp>
 800a812:	6060      	str	r0, [r4, #4]
 800a814:	0020      	movs	r0, r4
 800a816:	f000 f81b 	bl	800a850 <__sfp>
 800a81a:	60a0      	str	r0, [r4, #8]
 800a81c:	0020      	movs	r0, r4
 800a81e:	f000 f817 	bl	800a850 <__sfp>
 800a822:	2200      	movs	r2, #0
 800a824:	2104      	movs	r1, #4
 800a826:	60e0      	str	r0, [r4, #12]
 800a828:	6860      	ldr	r0, [r4, #4]
 800a82a:	f7ff ff77 	bl	800a71c <std>
 800a82e:	2201      	movs	r2, #1
 800a830:	2109      	movs	r1, #9
 800a832:	68a0      	ldr	r0, [r4, #8]
 800a834:	f7ff ff72 	bl	800a71c <std>
 800a838:	2202      	movs	r2, #2
 800a83a:	2112      	movs	r1, #18
 800a83c:	68e0      	ldr	r0, [r4, #12]
 800a83e:	f7ff ff6d 	bl	800a71c <std>
 800a842:	2301      	movs	r3, #1
 800a844:	61a3      	str	r3, [r4, #24]
 800a846:	e7d2      	b.n	800a7ee <__sinit+0xe>
 800a848:	0800ca68 	.word	0x0800ca68
 800a84c:	0800a765 	.word	0x0800a765

0800a850 <__sfp>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	0007      	movs	r7, r0
 800a854:	f7ff ffa4 	bl	800a7a0 <__sfp_lock_acquire>
 800a858:	4b1f      	ldr	r3, [pc, #124]	; (800a8d8 <__sfp+0x88>)
 800a85a:	681e      	ldr	r6, [r3, #0]
 800a85c:	69b3      	ldr	r3, [r6, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <__sfp+0x18>
 800a862:	0030      	movs	r0, r6
 800a864:	f7ff ffbc 	bl	800a7e0 <__sinit>
 800a868:	3648      	adds	r6, #72	; 0x48
 800a86a:	68b4      	ldr	r4, [r6, #8]
 800a86c:	6873      	ldr	r3, [r6, #4]
 800a86e:	3b01      	subs	r3, #1
 800a870:	d504      	bpl.n	800a87c <__sfp+0x2c>
 800a872:	6833      	ldr	r3, [r6, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d022      	beq.n	800a8be <__sfp+0x6e>
 800a878:	6836      	ldr	r6, [r6, #0]
 800a87a:	e7f6      	b.n	800a86a <__sfp+0x1a>
 800a87c:	220c      	movs	r2, #12
 800a87e:	5ea5      	ldrsh	r5, [r4, r2]
 800a880:	2d00      	cmp	r5, #0
 800a882:	d11a      	bne.n	800a8ba <__sfp+0x6a>
 800a884:	0020      	movs	r0, r4
 800a886:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <__sfp+0x8c>)
 800a888:	3058      	adds	r0, #88	; 0x58
 800a88a:	60e3      	str	r3, [r4, #12]
 800a88c:	6665      	str	r5, [r4, #100]	; 0x64
 800a88e:	f000 fbbf 	bl	800b010 <__retarget_lock_init_recursive>
 800a892:	f7ff ff8d 	bl	800a7b0 <__sfp_lock_release>
 800a896:	0020      	movs	r0, r4
 800a898:	2208      	movs	r2, #8
 800a89a:	0029      	movs	r1, r5
 800a89c:	6025      	str	r5, [r4, #0]
 800a89e:	60a5      	str	r5, [r4, #8]
 800a8a0:	6065      	str	r5, [r4, #4]
 800a8a2:	6125      	str	r5, [r4, #16]
 800a8a4:	6165      	str	r5, [r4, #20]
 800a8a6:	61a5      	str	r5, [r4, #24]
 800a8a8:	305c      	adds	r0, #92	; 0x5c
 800a8aa:	f7fd fb0e 	bl	8007eca <memset>
 800a8ae:	6365      	str	r5, [r4, #52]	; 0x34
 800a8b0:	63a5      	str	r5, [r4, #56]	; 0x38
 800a8b2:	64a5      	str	r5, [r4, #72]	; 0x48
 800a8b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a8b6:	0020      	movs	r0, r4
 800a8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ba:	3468      	adds	r4, #104	; 0x68
 800a8bc:	e7d7      	b.n	800a86e <__sfp+0x1e>
 800a8be:	2104      	movs	r1, #4
 800a8c0:	0038      	movs	r0, r7
 800a8c2:	f7ff ff57 	bl	800a774 <__sfmoreglue>
 800a8c6:	1e04      	subs	r4, r0, #0
 800a8c8:	6030      	str	r0, [r6, #0]
 800a8ca:	d1d5      	bne.n	800a878 <__sfp+0x28>
 800a8cc:	f7ff ff70 	bl	800a7b0 <__sfp_lock_release>
 800a8d0:	230c      	movs	r3, #12
 800a8d2:	603b      	str	r3, [r7, #0]
 800a8d4:	e7ef      	b.n	800a8b6 <__sfp+0x66>
 800a8d6:	46c0      	nop			; (mov r8, r8)
 800a8d8:	0800ca68 	.word	0x0800ca68
 800a8dc:	ffff0001 	.word	0xffff0001

0800a8e0 <_fwalk_reent>:
 800a8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8e2:	0004      	movs	r4, r0
 800a8e4:	0006      	movs	r6, r0
 800a8e6:	2700      	movs	r7, #0
 800a8e8:	9101      	str	r1, [sp, #4]
 800a8ea:	3448      	adds	r4, #72	; 0x48
 800a8ec:	6863      	ldr	r3, [r4, #4]
 800a8ee:	68a5      	ldr	r5, [r4, #8]
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	9b00      	ldr	r3, [sp, #0]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	d504      	bpl.n	800a904 <_fwalk_reent+0x24>
 800a8fa:	6824      	ldr	r4, [r4, #0]
 800a8fc:	2c00      	cmp	r4, #0
 800a8fe:	d1f5      	bne.n	800a8ec <_fwalk_reent+0xc>
 800a900:	0038      	movs	r0, r7
 800a902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a904:	89ab      	ldrh	r3, [r5, #12]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d908      	bls.n	800a91c <_fwalk_reent+0x3c>
 800a90a:	220e      	movs	r2, #14
 800a90c:	5eab      	ldrsh	r3, [r5, r2]
 800a90e:	3301      	adds	r3, #1
 800a910:	d004      	beq.n	800a91c <_fwalk_reent+0x3c>
 800a912:	0029      	movs	r1, r5
 800a914:	0030      	movs	r0, r6
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	4798      	blx	r3
 800a91a:	4307      	orrs	r7, r0
 800a91c:	3568      	adds	r5, #104	; 0x68
 800a91e:	e7e8      	b.n	800a8f2 <_fwalk_reent+0x12>

0800a920 <rshift>:
 800a920:	0002      	movs	r2, r0
 800a922:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a924:	6904      	ldr	r4, [r0, #16]
 800a926:	3214      	adds	r2, #20
 800a928:	0013      	movs	r3, r2
 800a92a:	b085      	sub	sp, #20
 800a92c:	114f      	asrs	r7, r1, #5
 800a92e:	42bc      	cmp	r4, r7
 800a930:	dd31      	ble.n	800a996 <rshift+0x76>
 800a932:	00bb      	lsls	r3, r7, #2
 800a934:	18d3      	adds	r3, r2, r3
 800a936:	261f      	movs	r6, #31
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	000b      	movs	r3, r1
 800a93c:	00a5      	lsls	r5, r4, #2
 800a93e:	4033      	ands	r3, r6
 800a940:	1955      	adds	r5, r2, r5
 800a942:	9302      	str	r3, [sp, #8]
 800a944:	4231      	tst	r1, r6
 800a946:	d10c      	bne.n	800a962 <rshift+0x42>
 800a948:	0016      	movs	r6, r2
 800a94a:	9901      	ldr	r1, [sp, #4]
 800a94c:	428d      	cmp	r5, r1
 800a94e:	d838      	bhi.n	800a9c2 <rshift+0xa2>
 800a950:	9901      	ldr	r1, [sp, #4]
 800a952:	2300      	movs	r3, #0
 800a954:	3903      	subs	r1, #3
 800a956:	428d      	cmp	r5, r1
 800a958:	d301      	bcc.n	800a95e <rshift+0x3e>
 800a95a:	1be3      	subs	r3, r4, r7
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	18d3      	adds	r3, r2, r3
 800a960:	e019      	b.n	800a996 <rshift+0x76>
 800a962:	2120      	movs	r1, #32
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	9e01      	ldr	r6, [sp, #4]
 800a968:	1acb      	subs	r3, r1, r3
 800a96a:	9303      	str	r3, [sp, #12]
 800a96c:	ce02      	ldmia	r6!, {r1}
 800a96e:	9b02      	ldr	r3, [sp, #8]
 800a970:	4694      	mov	ip, r2
 800a972:	40d9      	lsrs	r1, r3
 800a974:	9100      	str	r1, [sp, #0]
 800a976:	42b5      	cmp	r5, r6
 800a978:	d816      	bhi.n	800a9a8 <rshift+0x88>
 800a97a:	9e01      	ldr	r6, [sp, #4]
 800a97c:	2300      	movs	r3, #0
 800a97e:	3601      	adds	r6, #1
 800a980:	42b5      	cmp	r5, r6
 800a982:	d302      	bcc.n	800a98a <rshift+0x6a>
 800a984:	1be3      	subs	r3, r4, r7
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	3b04      	subs	r3, #4
 800a98a:	9900      	ldr	r1, [sp, #0]
 800a98c:	18d3      	adds	r3, r2, r3
 800a98e:	6019      	str	r1, [r3, #0]
 800a990:	2900      	cmp	r1, #0
 800a992:	d000      	beq.n	800a996 <rshift+0x76>
 800a994:	3304      	adds	r3, #4
 800a996:	1a99      	subs	r1, r3, r2
 800a998:	1089      	asrs	r1, r1, #2
 800a99a:	6101      	str	r1, [r0, #16]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d101      	bne.n	800a9a4 <rshift+0x84>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6143      	str	r3, [r0, #20]
 800a9a4:	b005      	add	sp, #20
 800a9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a8:	6833      	ldr	r3, [r6, #0]
 800a9aa:	9903      	ldr	r1, [sp, #12]
 800a9ac:	408b      	lsls	r3, r1
 800a9ae:	9900      	ldr	r1, [sp, #0]
 800a9b0:	4319      	orrs	r1, r3
 800a9b2:	4663      	mov	r3, ip
 800a9b4:	c302      	stmia	r3!, {r1}
 800a9b6:	469c      	mov	ip, r3
 800a9b8:	ce02      	ldmia	r6!, {r1}
 800a9ba:	9b02      	ldr	r3, [sp, #8]
 800a9bc:	40d9      	lsrs	r1, r3
 800a9be:	9100      	str	r1, [sp, #0]
 800a9c0:	e7d9      	b.n	800a976 <rshift+0x56>
 800a9c2:	c908      	ldmia	r1!, {r3}
 800a9c4:	c608      	stmia	r6!, {r3}
 800a9c6:	e7c1      	b.n	800a94c <rshift+0x2c>

0800a9c8 <__hexdig_fun>:
 800a9c8:	0002      	movs	r2, r0
 800a9ca:	3a30      	subs	r2, #48	; 0x30
 800a9cc:	0003      	movs	r3, r0
 800a9ce:	2a09      	cmp	r2, #9
 800a9d0:	d802      	bhi.n	800a9d8 <__hexdig_fun+0x10>
 800a9d2:	3b20      	subs	r3, #32
 800a9d4:	b2d8      	uxtb	r0, r3
 800a9d6:	4770      	bx	lr
 800a9d8:	0002      	movs	r2, r0
 800a9da:	3a61      	subs	r2, #97	; 0x61
 800a9dc:	2a05      	cmp	r2, #5
 800a9de:	d801      	bhi.n	800a9e4 <__hexdig_fun+0x1c>
 800a9e0:	3b47      	subs	r3, #71	; 0x47
 800a9e2:	e7f7      	b.n	800a9d4 <__hexdig_fun+0xc>
 800a9e4:	001a      	movs	r2, r3
 800a9e6:	3a41      	subs	r2, #65	; 0x41
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	2a05      	cmp	r2, #5
 800a9ec:	d8f3      	bhi.n	800a9d6 <__hexdig_fun+0xe>
 800a9ee:	3b27      	subs	r3, #39	; 0x27
 800a9f0:	e7f0      	b.n	800a9d4 <__hexdig_fun+0xc>
	...

0800a9f4 <__gethex>:
 800a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f6:	b08d      	sub	sp, #52	; 0x34
 800a9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9fa:	4bbf      	ldr	r3, [pc, #764]	; (800acf8 <__gethex+0x304>)
 800a9fc:	9005      	str	r0, [sp, #20]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	9109      	str	r1, [sp, #36]	; 0x24
 800aa02:	0018      	movs	r0, r3
 800aa04:	9202      	str	r2, [sp, #8]
 800aa06:	9307      	str	r3, [sp, #28]
 800aa08:	f7f5 fb7e 	bl	8000108 <strlen>
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	9b07      	ldr	r3, [sp, #28]
 800aa10:	4252      	negs	r2, r2
 800aa12:	181b      	adds	r3, r3, r0
 800aa14:	3b01      	subs	r3, #1
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	9003      	str	r0, [sp, #12]
 800aa1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	1c8b      	adds	r3, r1, #2
 800aa22:	1a52      	subs	r2, r2, r1
 800aa24:	18d1      	adds	r1, r2, r3
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	9108      	str	r1, [sp, #32]
 800aa2a:	9901      	ldr	r1, [sp, #4]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	7808      	ldrb	r0, [r1, #0]
 800aa30:	2830      	cmp	r0, #48	; 0x30
 800aa32:	d0f7      	beq.n	800aa24 <__gethex+0x30>
 800aa34:	f7ff ffc8 	bl	800a9c8 <__hexdig_fun>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	001c      	movs	r4, r3
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	4298      	cmp	r0, r3
 800aa40:	d11f      	bne.n	800aa82 <__gethex+0x8e>
 800aa42:	9a03      	ldr	r2, [sp, #12]
 800aa44:	9907      	ldr	r1, [sp, #28]
 800aa46:	9801      	ldr	r0, [sp, #4]
 800aa48:	f001 fc0e 	bl	800c268 <strncmp>
 800aa4c:	0007      	movs	r7, r0
 800aa4e:	42a0      	cmp	r0, r4
 800aa50:	d000      	beq.n	800aa54 <__gethex+0x60>
 800aa52:	e06b      	b.n	800ab2c <__gethex+0x138>
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	9a03      	ldr	r2, [sp, #12]
 800aa58:	5c98      	ldrb	r0, [r3, r2]
 800aa5a:	189d      	adds	r5, r3, r2
 800aa5c:	f7ff ffb4 	bl	800a9c8 <__hexdig_fun>
 800aa60:	2301      	movs	r3, #1
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	42a0      	cmp	r0, r4
 800aa66:	d030      	beq.n	800aaca <__gethex+0xd6>
 800aa68:	9501      	str	r5, [sp, #4]
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	7818      	ldrb	r0, [r3, #0]
 800aa6e:	2830      	cmp	r0, #48	; 0x30
 800aa70:	d009      	beq.n	800aa86 <__gethex+0x92>
 800aa72:	f7ff ffa9 	bl	800a9c8 <__hexdig_fun>
 800aa76:	4242      	negs	r2, r0
 800aa78:	4142      	adcs	r2, r0
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	002c      	movs	r4, r5
 800aa7e:	9204      	str	r2, [sp, #16]
 800aa80:	9308      	str	r3, [sp, #32]
 800aa82:	9d01      	ldr	r5, [sp, #4]
 800aa84:	e004      	b.n	800aa90 <__gethex+0x9c>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	e7ed      	b.n	800aa6a <__gethex+0x76>
 800aa8e:	3501      	adds	r5, #1
 800aa90:	7828      	ldrb	r0, [r5, #0]
 800aa92:	f7ff ff99 	bl	800a9c8 <__hexdig_fun>
 800aa96:	1e07      	subs	r7, r0, #0
 800aa98:	d1f9      	bne.n	800aa8e <__gethex+0x9a>
 800aa9a:	0028      	movs	r0, r5
 800aa9c:	9a03      	ldr	r2, [sp, #12]
 800aa9e:	9907      	ldr	r1, [sp, #28]
 800aaa0:	f001 fbe2 	bl	800c268 <strncmp>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d10e      	bne.n	800aac6 <__gethex+0xd2>
 800aaa8:	2c00      	cmp	r4, #0
 800aaaa:	d107      	bne.n	800aabc <__gethex+0xc8>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	18ed      	adds	r5, r5, r3
 800aab0:	002c      	movs	r4, r5
 800aab2:	7828      	ldrb	r0, [r5, #0]
 800aab4:	f7ff ff88 	bl	800a9c8 <__hexdig_fun>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d102      	bne.n	800aac2 <__gethex+0xce>
 800aabc:	1b64      	subs	r4, r4, r5
 800aabe:	00a7      	lsls	r7, r4, #2
 800aac0:	e003      	b.n	800aaca <__gethex+0xd6>
 800aac2:	3501      	adds	r5, #1
 800aac4:	e7f5      	b.n	800aab2 <__gethex+0xbe>
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d1f8      	bne.n	800aabc <__gethex+0xc8>
 800aaca:	2220      	movs	r2, #32
 800aacc:	782b      	ldrb	r3, [r5, #0]
 800aace:	002e      	movs	r6, r5
 800aad0:	4393      	bics	r3, r2
 800aad2:	2b50      	cmp	r3, #80	; 0x50
 800aad4:	d11d      	bne.n	800ab12 <__gethex+0x11e>
 800aad6:	786b      	ldrb	r3, [r5, #1]
 800aad8:	2b2b      	cmp	r3, #43	; 0x2b
 800aada:	d02c      	beq.n	800ab36 <__gethex+0x142>
 800aadc:	2b2d      	cmp	r3, #45	; 0x2d
 800aade:	d02e      	beq.n	800ab3e <__gethex+0x14a>
 800aae0:	2300      	movs	r3, #0
 800aae2:	1c6e      	adds	r6, r5, #1
 800aae4:	9306      	str	r3, [sp, #24]
 800aae6:	7830      	ldrb	r0, [r6, #0]
 800aae8:	f7ff ff6e 	bl	800a9c8 <__hexdig_fun>
 800aaec:	1e43      	subs	r3, r0, #1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b18      	cmp	r3, #24
 800aaf2:	d82b      	bhi.n	800ab4c <__gethex+0x158>
 800aaf4:	3810      	subs	r0, #16
 800aaf6:	0004      	movs	r4, r0
 800aaf8:	7870      	ldrb	r0, [r6, #1]
 800aafa:	f7ff ff65 	bl	800a9c8 <__hexdig_fun>
 800aafe:	1e43      	subs	r3, r0, #1
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	3601      	adds	r6, #1
 800ab04:	2b18      	cmp	r3, #24
 800ab06:	d91c      	bls.n	800ab42 <__gethex+0x14e>
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d000      	beq.n	800ab10 <__gethex+0x11c>
 800ab0e:	4264      	negs	r4, r4
 800ab10:	193f      	adds	r7, r7, r4
 800ab12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab14:	601e      	str	r6, [r3, #0]
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d019      	beq.n	800ab50 <__gethex+0x15c>
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	9b08      	ldr	r3, [sp, #32]
 800ab20:	42b3      	cmp	r3, r6
 800ab22:	d100      	bne.n	800ab26 <__gethex+0x132>
 800ab24:	3606      	adds	r6, #6
 800ab26:	0030      	movs	r0, r6
 800ab28:	b00d      	add	sp, #52	; 0x34
 800ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	2700      	movs	r7, #0
 800ab30:	9d01      	ldr	r5, [sp, #4]
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	e7c9      	b.n	800aaca <__gethex+0xd6>
 800ab36:	2300      	movs	r3, #0
 800ab38:	9306      	str	r3, [sp, #24]
 800ab3a:	1cae      	adds	r6, r5, #2
 800ab3c:	e7d3      	b.n	800aae6 <__gethex+0xf2>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e7fa      	b.n	800ab38 <__gethex+0x144>
 800ab42:	230a      	movs	r3, #10
 800ab44:	435c      	muls	r4, r3
 800ab46:	1824      	adds	r4, r4, r0
 800ab48:	3c10      	subs	r4, #16
 800ab4a:	e7d5      	b.n	800aaf8 <__gethex+0x104>
 800ab4c:	002e      	movs	r6, r5
 800ab4e:	e7e0      	b.n	800ab12 <__gethex+0x11e>
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	9904      	ldr	r1, [sp, #16]
 800ab54:	1aeb      	subs	r3, r5, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	2b07      	cmp	r3, #7
 800ab5a:	dc0a      	bgt.n	800ab72 <__gethex+0x17e>
 800ab5c:	9805      	ldr	r0, [sp, #20]
 800ab5e:	f000 fa83 	bl	800b068 <_Balloc>
 800ab62:	1e04      	subs	r4, r0, #0
 800ab64:	d108      	bne.n	800ab78 <__gethex+0x184>
 800ab66:	0002      	movs	r2, r0
 800ab68:	21de      	movs	r1, #222	; 0xde
 800ab6a:	4b64      	ldr	r3, [pc, #400]	; (800acfc <__gethex+0x308>)
 800ab6c:	4864      	ldr	r0, [pc, #400]	; (800ad00 <__gethex+0x30c>)
 800ab6e:	f001 fc7d 	bl	800c46c <__assert_func>
 800ab72:	3101      	adds	r1, #1
 800ab74:	105b      	asrs	r3, r3, #1
 800ab76:	e7ef      	b.n	800ab58 <__gethex+0x164>
 800ab78:	0003      	movs	r3, r0
 800ab7a:	3314      	adds	r3, #20
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab80:	2300      	movs	r3, #0
 800ab82:	001e      	movs	r6, r3
 800ab84:	9306      	str	r3, [sp, #24]
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	42ab      	cmp	r3, r5
 800ab8a:	d340      	bcc.n	800ac0e <__gethex+0x21a>
 800ab8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	c540      	stmia	r5!, {r6}
 800ab92:	1aed      	subs	r5, r5, r3
 800ab94:	10ad      	asrs	r5, r5, #2
 800ab96:	0030      	movs	r0, r6
 800ab98:	6125      	str	r5, [r4, #16]
 800ab9a:	f000 fb5d 	bl	800b258 <__hi0bits>
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	016d      	lsls	r5, r5, #5
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	1a2e      	subs	r6, r5, r0
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	429e      	cmp	r6, r3
 800abaa:	dd5a      	ble.n	800ac62 <__gethex+0x26e>
 800abac:	1af6      	subs	r6, r6, r3
 800abae:	0031      	movs	r1, r6
 800abb0:	0020      	movs	r0, r4
 800abb2:	f000 feff 	bl	800b9b4 <__any_on>
 800abb6:	1e05      	subs	r5, r0, #0
 800abb8:	d016      	beq.n	800abe8 <__gethex+0x1f4>
 800abba:	2501      	movs	r5, #1
 800abbc:	211f      	movs	r1, #31
 800abbe:	0028      	movs	r0, r5
 800abc0:	1e73      	subs	r3, r6, #1
 800abc2:	4019      	ands	r1, r3
 800abc4:	4088      	lsls	r0, r1
 800abc6:	0001      	movs	r1, r0
 800abc8:	115a      	asrs	r2, r3, #5
 800abca:	9804      	ldr	r0, [sp, #16]
 800abcc:	0092      	lsls	r2, r2, #2
 800abce:	5812      	ldr	r2, [r2, r0]
 800abd0:	420a      	tst	r2, r1
 800abd2:	d009      	beq.n	800abe8 <__gethex+0x1f4>
 800abd4:	42ab      	cmp	r3, r5
 800abd6:	dd06      	ble.n	800abe6 <__gethex+0x1f2>
 800abd8:	0020      	movs	r0, r4
 800abda:	1eb1      	subs	r1, r6, #2
 800abdc:	f000 feea 	bl	800b9b4 <__any_on>
 800abe0:	3502      	adds	r5, #2
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d100      	bne.n	800abe8 <__gethex+0x1f4>
 800abe6:	2502      	movs	r5, #2
 800abe8:	0031      	movs	r1, r6
 800abea:	0020      	movs	r0, r4
 800abec:	f7ff fe98 	bl	800a920 <rshift>
 800abf0:	19bf      	adds	r7, r7, r6
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	9303      	str	r3, [sp, #12]
 800abf8:	42bb      	cmp	r3, r7
 800abfa:	da42      	bge.n	800ac82 <__gethex+0x28e>
 800abfc:	0021      	movs	r1, r4
 800abfe:	9805      	ldr	r0, [sp, #20]
 800ac00:	f000 fa76 	bl	800b0f0 <_Bfree>
 800ac04:	2300      	movs	r3, #0
 800ac06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac08:	26a3      	movs	r6, #163	; 0xa3
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	e78b      	b.n	800ab26 <__gethex+0x132>
 800ac0e:	1e6b      	subs	r3, r5, #1
 800ac10:	9308      	str	r3, [sp, #32]
 800ac12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d014      	beq.n	800ac44 <__gethex+0x250>
 800ac1a:	9b06      	ldr	r3, [sp, #24]
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d104      	bne.n	800ac2a <__gethex+0x236>
 800ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac22:	c340      	stmia	r3!, {r6}
 800ac24:	2600      	movs	r6, #0
 800ac26:	9309      	str	r3, [sp, #36]	; 0x24
 800ac28:	9606      	str	r6, [sp, #24]
 800ac2a:	9b08      	ldr	r3, [sp, #32]
 800ac2c:	7818      	ldrb	r0, [r3, #0]
 800ac2e:	f7ff fecb 	bl	800a9c8 <__hexdig_fun>
 800ac32:	230f      	movs	r3, #15
 800ac34:	4018      	ands	r0, r3
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	9d08      	ldr	r5, [sp, #32]
 800ac3a:	4098      	lsls	r0, r3
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4306      	orrs	r6, r0
 800ac40:	9306      	str	r3, [sp, #24]
 800ac42:	e7a0      	b.n	800ab86 <__gethex+0x192>
 800ac44:	2301      	movs	r3, #1
 800ac46:	9a03      	ldr	r2, [sp, #12]
 800ac48:	1a9d      	subs	r5, r3, r2
 800ac4a:	9b08      	ldr	r3, [sp, #32]
 800ac4c:	195d      	adds	r5, r3, r5
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	429d      	cmp	r5, r3
 800ac52:	d3e2      	bcc.n	800ac1a <__gethex+0x226>
 800ac54:	0028      	movs	r0, r5
 800ac56:	9907      	ldr	r1, [sp, #28]
 800ac58:	f001 fb06 	bl	800c268 <strncmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d1dc      	bne.n	800ac1a <__gethex+0x226>
 800ac60:	e791      	b.n	800ab86 <__gethex+0x192>
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	2500      	movs	r5, #0
 800ac66:	429e      	cmp	r6, r3
 800ac68:	dac3      	bge.n	800abf2 <__gethex+0x1fe>
 800ac6a:	1b9e      	subs	r6, r3, r6
 800ac6c:	0021      	movs	r1, r4
 800ac6e:	0032      	movs	r2, r6
 800ac70:	9805      	ldr	r0, [sp, #20]
 800ac72:	f000 fc5b 	bl	800b52c <__lshift>
 800ac76:	0003      	movs	r3, r0
 800ac78:	3314      	adds	r3, #20
 800ac7a:	0004      	movs	r4, r0
 800ac7c:	1bbf      	subs	r7, r7, r6
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	e7b7      	b.n	800abf2 <__gethex+0x1fe>
 800ac82:	9b02      	ldr	r3, [sp, #8]
 800ac84:	685e      	ldr	r6, [r3, #4]
 800ac86:	42be      	cmp	r6, r7
 800ac88:	dd71      	ble.n	800ad6e <__gethex+0x37a>
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	1bf6      	subs	r6, r6, r7
 800ac8e:	42b3      	cmp	r3, r6
 800ac90:	dc38      	bgt.n	800ad04 <__gethex+0x310>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d026      	beq.n	800ace8 <__gethex+0x2f4>
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d028      	beq.n	800acf0 <__gethex+0x2fc>
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d119      	bne.n	800acd6 <__gethex+0x2e2>
 800aca2:	9b01      	ldr	r3, [sp, #4]
 800aca4:	42b3      	cmp	r3, r6
 800aca6:	d116      	bne.n	800acd6 <__gethex+0x2e2>
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d10d      	bne.n	800acc8 <__gethex+0x2d4>
 800acac:	9b02      	ldr	r3, [sp, #8]
 800acae:	2662      	movs	r6, #98	; 0x62
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	9a01      	ldr	r2, [sp, #4]
 800acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	2301      	movs	r3, #1
 800acbc:	9a04      	ldr	r2, [sp, #16]
 800acbe:	6123      	str	r3, [r4, #16]
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acc4:	601c      	str	r4, [r3, #0]
 800acc6:	e72e      	b.n	800ab26 <__gethex+0x132>
 800acc8:	9901      	ldr	r1, [sp, #4]
 800acca:	0020      	movs	r0, r4
 800accc:	3901      	subs	r1, #1
 800acce:	f000 fe71 	bl	800b9b4 <__any_on>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d1ea      	bne.n	800acac <__gethex+0x2b8>
 800acd6:	0021      	movs	r1, r4
 800acd8:	9805      	ldr	r0, [sp, #20]
 800acda:	f000 fa09 	bl	800b0f0 <_Bfree>
 800acde:	2300      	movs	r3, #0
 800ace0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ace2:	2650      	movs	r6, #80	; 0x50
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	e71e      	b.n	800ab26 <__gethex+0x132>
 800ace8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1f3      	bne.n	800acd6 <__gethex+0x2e2>
 800acee:	e7dd      	b.n	800acac <__gethex+0x2b8>
 800acf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1da      	bne.n	800acac <__gethex+0x2b8>
 800acf6:	e7ee      	b.n	800acd6 <__gethex+0x2e2>
 800acf8:	0800cd54 	.word	0x0800cd54
 800acfc:	0800cc78 	.word	0x0800cc78
 800ad00:	0800ccec 	.word	0x0800ccec
 800ad04:	1e77      	subs	r7, r6, #1
 800ad06:	2d00      	cmp	r5, #0
 800ad08:	d12f      	bne.n	800ad6a <__gethex+0x376>
 800ad0a:	2f00      	cmp	r7, #0
 800ad0c:	d004      	beq.n	800ad18 <__gethex+0x324>
 800ad0e:	0039      	movs	r1, r7
 800ad10:	0020      	movs	r0, r4
 800ad12:	f000 fe4f 	bl	800b9b4 <__any_on>
 800ad16:	0005      	movs	r5, r0
 800ad18:	231f      	movs	r3, #31
 800ad1a:	117a      	asrs	r2, r7, #5
 800ad1c:	401f      	ands	r7, r3
 800ad1e:	3b1e      	subs	r3, #30
 800ad20:	40bb      	lsls	r3, r7
 800ad22:	9904      	ldr	r1, [sp, #16]
 800ad24:	0092      	lsls	r2, r2, #2
 800ad26:	5852      	ldr	r2, [r2, r1]
 800ad28:	421a      	tst	r2, r3
 800ad2a:	d001      	beq.n	800ad30 <__gethex+0x33c>
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	431d      	orrs	r5, r3
 800ad30:	9b01      	ldr	r3, [sp, #4]
 800ad32:	0031      	movs	r1, r6
 800ad34:	1b9b      	subs	r3, r3, r6
 800ad36:	2602      	movs	r6, #2
 800ad38:	0020      	movs	r0, r4
 800ad3a:	9301      	str	r3, [sp, #4]
 800ad3c:	f7ff fdf0 	bl	800a920 <rshift>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	685f      	ldr	r7, [r3, #4]
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	d041      	beq.n	800adcc <__gethex+0x3d8>
 800ad48:	9b02      	ldr	r3, [sp, #8]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d010      	beq.n	800ad72 <__gethex+0x37e>
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d012      	beq.n	800ad7a <__gethex+0x386>
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d106      	bne.n	800ad66 <__gethex+0x372>
 800ad58:	07aa      	lsls	r2, r5, #30
 800ad5a:	d504      	bpl.n	800ad66 <__gethex+0x372>
 800ad5c:	9a04      	ldr	r2, [sp, #16]
 800ad5e:	6810      	ldr	r0, [r2, #0]
 800ad60:	4305      	orrs	r5, r0
 800ad62:	421d      	tst	r5, r3
 800ad64:	d10c      	bne.n	800ad80 <__gethex+0x38c>
 800ad66:	2310      	movs	r3, #16
 800ad68:	e02f      	b.n	800adca <__gethex+0x3d6>
 800ad6a:	2501      	movs	r5, #1
 800ad6c:	e7d4      	b.n	800ad18 <__gethex+0x324>
 800ad6e:	2601      	movs	r6, #1
 800ad70:	e7e8      	b.n	800ad44 <__gethex+0x350>
 800ad72:	2301      	movs	r3, #1
 800ad74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad76:	1a9b      	subs	r3, r3, r2
 800ad78:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0f2      	beq.n	800ad66 <__gethex+0x372>
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	2000      	movs	r0, #0
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	9304      	str	r3, [sp, #16]
 800ad8a:	0023      	movs	r3, r4
 800ad8c:	9a04      	ldr	r2, [sp, #16]
 800ad8e:	3314      	adds	r3, #20
 800ad90:	1899      	adds	r1, r3, r2
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	1c55      	adds	r5, r2, #1
 800ad96:	d01e      	beq.n	800add6 <__gethex+0x3e2>
 800ad98:	3201      	adds	r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	0023      	movs	r3, r4
 800ad9e:	3314      	adds	r3, #20
 800ada0:	2e02      	cmp	r6, #2
 800ada2:	d140      	bne.n	800ae26 <__gethex+0x432>
 800ada4:	9a02      	ldr	r2, [sp, #8]
 800ada6:	9901      	ldr	r1, [sp, #4]
 800ada8:	6812      	ldr	r2, [r2, #0]
 800adaa:	3a01      	subs	r2, #1
 800adac:	428a      	cmp	r2, r1
 800adae:	d10b      	bne.n	800adc8 <__gethex+0x3d4>
 800adb0:	114a      	asrs	r2, r1, #5
 800adb2:	211f      	movs	r1, #31
 800adb4:	9801      	ldr	r0, [sp, #4]
 800adb6:	0092      	lsls	r2, r2, #2
 800adb8:	4001      	ands	r1, r0
 800adba:	2001      	movs	r0, #1
 800adbc:	0005      	movs	r5, r0
 800adbe:	408d      	lsls	r5, r1
 800adc0:	58d3      	ldr	r3, [r2, r3]
 800adc2:	422b      	tst	r3, r5
 800adc4:	d000      	beq.n	800adc8 <__gethex+0x3d4>
 800adc6:	2601      	movs	r6, #1
 800adc8:	2320      	movs	r3, #32
 800adca:	431e      	orrs	r6, r3
 800adcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adce:	601c      	str	r4, [r3, #0]
 800add0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add2:	601f      	str	r7, [r3, #0]
 800add4:	e6a7      	b.n	800ab26 <__gethex+0x132>
 800add6:	c301      	stmia	r3!, {r0}
 800add8:	4299      	cmp	r1, r3
 800adda:	d8da      	bhi.n	800ad92 <__gethex+0x39e>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	68a2      	ldr	r2, [r4, #8]
 800ade0:	4293      	cmp	r3, r2
 800ade2:	db17      	blt.n	800ae14 <__gethex+0x420>
 800ade4:	6863      	ldr	r3, [r4, #4]
 800ade6:	9805      	ldr	r0, [sp, #20]
 800ade8:	1c59      	adds	r1, r3, #1
 800adea:	f000 f93d 	bl	800b068 <_Balloc>
 800adee:	1e05      	subs	r5, r0, #0
 800adf0:	d103      	bne.n	800adfa <__gethex+0x406>
 800adf2:	0002      	movs	r2, r0
 800adf4:	2184      	movs	r1, #132	; 0x84
 800adf6:	4b1c      	ldr	r3, [pc, #112]	; (800ae68 <__gethex+0x474>)
 800adf8:	e6b8      	b.n	800ab6c <__gethex+0x178>
 800adfa:	0021      	movs	r1, r4
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	310c      	adds	r1, #12
 800ae00:	1c9a      	adds	r2, r3, #2
 800ae02:	0092      	lsls	r2, r2, #2
 800ae04:	300c      	adds	r0, #12
 800ae06:	f7fd f857 	bl	8007eb8 <memcpy>
 800ae0a:	0021      	movs	r1, r4
 800ae0c:	9805      	ldr	r0, [sp, #20]
 800ae0e:	f000 f96f 	bl	800b0f0 <_Bfree>
 800ae12:	002c      	movs	r4, r5
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	6122      	str	r2, [r4, #16]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	18e3      	adds	r3, r4, r3
 800ae22:	605a      	str	r2, [r3, #4]
 800ae24:	e7ba      	b.n	800ad9c <__gethex+0x3a8>
 800ae26:	6922      	ldr	r2, [r4, #16]
 800ae28:	9903      	ldr	r1, [sp, #12]
 800ae2a:	428a      	cmp	r2, r1
 800ae2c:	dd09      	ble.n	800ae42 <__gethex+0x44e>
 800ae2e:	2101      	movs	r1, #1
 800ae30:	0020      	movs	r0, r4
 800ae32:	f7ff fd75 	bl	800a920 <rshift>
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	3701      	adds	r7, #1
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	42bb      	cmp	r3, r7
 800ae3e:	dac2      	bge.n	800adc6 <__gethex+0x3d2>
 800ae40:	e6dc      	b.n	800abfc <__gethex+0x208>
 800ae42:	221f      	movs	r2, #31
 800ae44:	9d01      	ldr	r5, [sp, #4]
 800ae46:	9901      	ldr	r1, [sp, #4]
 800ae48:	2601      	movs	r6, #1
 800ae4a:	4015      	ands	r5, r2
 800ae4c:	4211      	tst	r1, r2
 800ae4e:	d0bb      	beq.n	800adc8 <__gethex+0x3d4>
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	189b      	adds	r3, r3, r2
 800ae54:	3b04      	subs	r3, #4
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	f000 f9fe 	bl	800b258 <__hi0bits>
 800ae5c:	2320      	movs	r3, #32
 800ae5e:	1b5d      	subs	r5, r3, r5
 800ae60:	42a8      	cmp	r0, r5
 800ae62:	dbe4      	blt.n	800ae2e <__gethex+0x43a>
 800ae64:	e7b0      	b.n	800adc8 <__gethex+0x3d4>
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	0800cc78 	.word	0x0800cc78

0800ae6c <L_shift>:
 800ae6c:	2308      	movs	r3, #8
 800ae6e:	b570      	push	{r4, r5, r6, lr}
 800ae70:	2520      	movs	r5, #32
 800ae72:	1a9a      	subs	r2, r3, r2
 800ae74:	0092      	lsls	r2, r2, #2
 800ae76:	1aad      	subs	r5, r5, r2
 800ae78:	6843      	ldr	r3, [r0, #4]
 800ae7a:	6806      	ldr	r6, [r0, #0]
 800ae7c:	001c      	movs	r4, r3
 800ae7e:	40ac      	lsls	r4, r5
 800ae80:	40d3      	lsrs	r3, r2
 800ae82:	4334      	orrs	r4, r6
 800ae84:	6004      	str	r4, [r0, #0]
 800ae86:	6043      	str	r3, [r0, #4]
 800ae88:	3004      	adds	r0, #4
 800ae8a:	4288      	cmp	r0, r1
 800ae8c:	d3f4      	bcc.n	800ae78 <L_shift+0xc>
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}

0800ae90 <__match>:
 800ae90:	b530      	push	{r4, r5, lr}
 800ae92:	6803      	ldr	r3, [r0, #0]
 800ae94:	780c      	ldrb	r4, [r1, #0]
 800ae96:	3301      	adds	r3, #1
 800ae98:	2c00      	cmp	r4, #0
 800ae9a:	d102      	bne.n	800aea2 <__match+0x12>
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	2001      	movs	r0, #1
 800aea0:	bd30      	pop	{r4, r5, pc}
 800aea2:	781a      	ldrb	r2, [r3, #0]
 800aea4:	0015      	movs	r5, r2
 800aea6:	3d41      	subs	r5, #65	; 0x41
 800aea8:	2d19      	cmp	r5, #25
 800aeaa:	d800      	bhi.n	800aeae <__match+0x1e>
 800aeac:	3220      	adds	r2, #32
 800aeae:	3101      	adds	r1, #1
 800aeb0:	42a2      	cmp	r2, r4
 800aeb2:	d0ef      	beq.n	800ae94 <__match+0x4>
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e7f3      	b.n	800aea0 <__match+0x10>

0800aeb8 <__hexnan>:
 800aeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeba:	680b      	ldr	r3, [r1, #0]
 800aebc:	b08b      	sub	sp, #44	; 0x2c
 800aebe:	9201      	str	r2, [sp, #4]
 800aec0:	9901      	ldr	r1, [sp, #4]
 800aec2:	115a      	asrs	r2, r3, #5
 800aec4:	0092      	lsls	r2, r2, #2
 800aec6:	188a      	adds	r2, r1, r2
 800aec8:	9202      	str	r2, [sp, #8]
 800aeca:	0019      	movs	r1, r3
 800aecc:	221f      	movs	r2, #31
 800aece:	4011      	ands	r1, r2
 800aed0:	9008      	str	r0, [sp, #32]
 800aed2:	9106      	str	r1, [sp, #24]
 800aed4:	4213      	tst	r3, r2
 800aed6:	d002      	beq.n	800aede <__hexnan+0x26>
 800aed8:	9b02      	ldr	r3, [sp, #8]
 800aeda:	3304      	adds	r3, #4
 800aedc:	9302      	str	r3, [sp, #8]
 800aede:	9b02      	ldr	r3, [sp, #8]
 800aee0:	2500      	movs	r5, #0
 800aee2:	1f1e      	subs	r6, r3, #4
 800aee4:	0037      	movs	r7, r6
 800aee6:	0034      	movs	r4, r6
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	6035      	str	r5, [r6, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	9507      	str	r5, [sp, #28]
 800aef0:	9305      	str	r3, [sp, #20]
 800aef2:	9503      	str	r5, [sp, #12]
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	3301      	adds	r3, #1
 800aef8:	9309      	str	r3, [sp, #36]	; 0x24
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	9304      	str	r3, [sp, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d028      	beq.n	800af56 <__hexnan+0x9e>
 800af04:	9804      	ldr	r0, [sp, #16]
 800af06:	f7ff fd5f 	bl	800a9c8 <__hexdig_fun>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d154      	bne.n	800afb8 <__hexnan+0x100>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	2b20      	cmp	r3, #32
 800af12:	d819      	bhi.n	800af48 <__hexnan+0x90>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	9a07      	ldr	r2, [sp, #28]
 800af18:	4293      	cmp	r3, r2
 800af1a:	dd12      	ble.n	800af42 <__hexnan+0x8a>
 800af1c:	42bc      	cmp	r4, r7
 800af1e:	d206      	bcs.n	800af2e <__hexnan+0x76>
 800af20:	2d07      	cmp	r5, #7
 800af22:	dc04      	bgt.n	800af2e <__hexnan+0x76>
 800af24:	002a      	movs	r2, r5
 800af26:	0039      	movs	r1, r7
 800af28:	0020      	movs	r0, r4
 800af2a:	f7ff ff9f 	bl	800ae6c <L_shift>
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	2508      	movs	r5, #8
 800af32:	429c      	cmp	r4, r3
 800af34:	d905      	bls.n	800af42 <__hexnan+0x8a>
 800af36:	1f27      	subs	r7, r4, #4
 800af38:	2500      	movs	r5, #0
 800af3a:	003c      	movs	r4, r7
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	603d      	str	r5, [r7, #0]
 800af40:	9307      	str	r3, [sp, #28]
 800af42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af44:	9305      	str	r3, [sp, #20]
 800af46:	e7d5      	b.n	800aef4 <__hexnan+0x3c>
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	2b29      	cmp	r3, #41	; 0x29
 800af4c:	d159      	bne.n	800b002 <__hexnan+0x14a>
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	9a08      	ldr	r2, [sp, #32]
 800af52:	3302      	adds	r3, #2
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d052      	beq.n	800b002 <__hexnan+0x14a>
 800af5c:	42bc      	cmp	r4, r7
 800af5e:	d206      	bcs.n	800af6e <__hexnan+0xb6>
 800af60:	2d07      	cmp	r5, #7
 800af62:	dc04      	bgt.n	800af6e <__hexnan+0xb6>
 800af64:	002a      	movs	r2, r5
 800af66:	0039      	movs	r1, r7
 800af68:	0020      	movs	r0, r4
 800af6a:	f7ff ff7f 	bl	800ae6c <L_shift>
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	429c      	cmp	r4, r3
 800af72:	d935      	bls.n	800afe0 <__hexnan+0x128>
 800af74:	001a      	movs	r2, r3
 800af76:	0023      	movs	r3, r4
 800af78:	cb02      	ldmia	r3!, {r1}
 800af7a:	c202      	stmia	r2!, {r1}
 800af7c:	429e      	cmp	r6, r3
 800af7e:	d2fb      	bcs.n	800af78 <__hexnan+0xc0>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	1c61      	adds	r1, r4, #1
 800af84:	1eda      	subs	r2, r3, #3
 800af86:	2304      	movs	r3, #4
 800af88:	4291      	cmp	r1, r2
 800af8a:	d805      	bhi.n	800af98 <__hexnan+0xe0>
 800af8c:	9b02      	ldr	r3, [sp, #8]
 800af8e:	3b04      	subs	r3, #4
 800af90:	1b1b      	subs	r3, r3, r4
 800af92:	089b      	lsrs	r3, r3, #2
 800af94:	3301      	adds	r3, #1
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	9a01      	ldr	r2, [sp, #4]
 800af9a:	18d3      	adds	r3, r2, r3
 800af9c:	2200      	movs	r2, #0
 800af9e:	c304      	stmia	r3!, {r2}
 800afa0:	429e      	cmp	r6, r3
 800afa2:	d2fc      	bcs.n	800af9e <__hexnan+0xe6>
 800afa4:	6833      	ldr	r3, [r6, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <__hexnan+0xfc>
 800afaa:	9b01      	ldr	r3, [sp, #4]
 800afac:	429e      	cmp	r6, r3
 800afae:	d126      	bne.n	800affe <__hexnan+0x146>
 800afb0:	2301      	movs	r3, #1
 800afb2:	6033      	str	r3, [r6, #0]
 800afb4:	2005      	movs	r0, #5
 800afb6:	e025      	b.n	800b004 <__hexnan+0x14c>
 800afb8:	9b03      	ldr	r3, [sp, #12]
 800afba:	3501      	adds	r5, #1
 800afbc:	3301      	adds	r3, #1
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	2d08      	cmp	r5, #8
 800afc2:	dd06      	ble.n	800afd2 <__hexnan+0x11a>
 800afc4:	9b01      	ldr	r3, [sp, #4]
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d9bb      	bls.n	800af42 <__hexnan+0x8a>
 800afca:	2300      	movs	r3, #0
 800afcc:	2501      	movs	r5, #1
 800afce:	3c04      	subs	r4, #4
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	220f      	movs	r2, #15
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	4010      	ands	r0, r2
 800afd8:	011b      	lsls	r3, r3, #4
 800afda:	4318      	orrs	r0, r3
 800afdc:	6020      	str	r0, [r4, #0]
 800afde:	e7b0      	b.n	800af42 <__hexnan+0x8a>
 800afe0:	9b06      	ldr	r3, [sp, #24]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0de      	beq.n	800afa4 <__hexnan+0xec>
 800afe6:	2120      	movs	r1, #32
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	9b02      	ldr	r3, [sp, #8]
 800afec:	1a89      	subs	r1, r1, r2
 800afee:	2201      	movs	r2, #1
 800aff0:	4252      	negs	r2, r2
 800aff2:	40ca      	lsrs	r2, r1
 800aff4:	3b04      	subs	r3, #4
 800aff6:	6819      	ldr	r1, [r3, #0]
 800aff8:	400a      	ands	r2, r1
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	e7d2      	b.n	800afa4 <__hexnan+0xec>
 800affe:	3e04      	subs	r6, #4
 800b000:	e7d0      	b.n	800afa4 <__hexnan+0xec>
 800b002:	2004      	movs	r0, #4
 800b004:	b00b      	add	sp, #44	; 0x2c
 800b006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b008 <_localeconv_r>:
 800b008:	4800      	ldr	r0, [pc, #0]	; (800b00c <_localeconv_r+0x4>)
 800b00a:	4770      	bx	lr
 800b00c:	2000017c 	.word	0x2000017c

0800b010 <__retarget_lock_init_recursive>:
 800b010:	4770      	bx	lr

0800b012 <__retarget_lock_acquire_recursive>:
 800b012:	4770      	bx	lr

0800b014 <__retarget_lock_release_recursive>:
 800b014:	4770      	bx	lr
	...

0800b018 <malloc>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	4b03      	ldr	r3, [pc, #12]	; (800b028 <malloc+0x10>)
 800b01c:	0001      	movs	r1, r0
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	f000 fd84 	bl	800bb2c <_malloc_r>
 800b024:	bd10      	pop	{r4, pc}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	20000024 	.word	0x20000024

0800b02c <__ascii_mbtowc>:
 800b02c:	b082      	sub	sp, #8
 800b02e:	2900      	cmp	r1, #0
 800b030:	d100      	bne.n	800b034 <__ascii_mbtowc+0x8>
 800b032:	a901      	add	r1, sp, #4
 800b034:	1e10      	subs	r0, r2, #0
 800b036:	d006      	beq.n	800b046 <__ascii_mbtowc+0x1a>
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d006      	beq.n	800b04a <__ascii_mbtowc+0x1e>
 800b03c:	7813      	ldrb	r3, [r2, #0]
 800b03e:	600b      	str	r3, [r1, #0]
 800b040:	7810      	ldrb	r0, [r2, #0]
 800b042:	1e43      	subs	r3, r0, #1
 800b044:	4198      	sbcs	r0, r3
 800b046:	b002      	add	sp, #8
 800b048:	4770      	bx	lr
 800b04a:	2002      	movs	r0, #2
 800b04c:	4240      	negs	r0, r0
 800b04e:	e7fa      	b.n	800b046 <__ascii_mbtowc+0x1a>

0800b050 <memchr>:
 800b050:	b2c9      	uxtb	r1, r1
 800b052:	1882      	adds	r2, r0, r2
 800b054:	4290      	cmp	r0, r2
 800b056:	d101      	bne.n	800b05c <memchr+0xc>
 800b058:	2000      	movs	r0, #0
 800b05a:	4770      	bx	lr
 800b05c:	7803      	ldrb	r3, [r0, #0]
 800b05e:	428b      	cmp	r3, r1
 800b060:	d0fb      	beq.n	800b05a <memchr+0xa>
 800b062:	3001      	adds	r0, #1
 800b064:	e7f6      	b.n	800b054 <memchr+0x4>
	...

0800b068 <_Balloc>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b06c:	0006      	movs	r6, r0
 800b06e:	000c      	movs	r4, r1
 800b070:	2d00      	cmp	r5, #0
 800b072:	d10e      	bne.n	800b092 <_Balloc+0x2a>
 800b074:	2010      	movs	r0, #16
 800b076:	f7ff ffcf 	bl	800b018 <malloc>
 800b07a:	1e02      	subs	r2, r0, #0
 800b07c:	6270      	str	r0, [r6, #36]	; 0x24
 800b07e:	d104      	bne.n	800b08a <_Balloc+0x22>
 800b080:	2166      	movs	r1, #102	; 0x66
 800b082:	4b19      	ldr	r3, [pc, #100]	; (800b0e8 <_Balloc+0x80>)
 800b084:	4819      	ldr	r0, [pc, #100]	; (800b0ec <_Balloc+0x84>)
 800b086:	f001 f9f1 	bl	800c46c <__assert_func>
 800b08a:	6045      	str	r5, [r0, #4]
 800b08c:	6085      	str	r5, [r0, #8]
 800b08e:	6005      	str	r5, [r0, #0]
 800b090:	60c5      	str	r5, [r0, #12]
 800b092:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b094:	68eb      	ldr	r3, [r5, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d013      	beq.n	800b0c2 <_Balloc+0x5a>
 800b09a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b09c:	00a2      	lsls	r2, r4, #2
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	189b      	adds	r3, r3, r2
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d118      	bne.n	800b0da <_Balloc+0x72>
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	000d      	movs	r5, r1
 800b0ac:	40a5      	lsls	r5, r4
 800b0ae:	1d6a      	adds	r2, r5, #5
 800b0b0:	0030      	movs	r0, r6
 800b0b2:	0092      	lsls	r2, r2, #2
 800b0b4:	f000 fca1 	bl	800b9fa <_calloc_r>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d00c      	beq.n	800b0d6 <_Balloc+0x6e>
 800b0bc:	6044      	str	r4, [r0, #4]
 800b0be:	6085      	str	r5, [r0, #8]
 800b0c0:	e00d      	b.n	800b0de <_Balloc+0x76>
 800b0c2:	2221      	movs	r2, #33	; 0x21
 800b0c4:	2104      	movs	r1, #4
 800b0c6:	0030      	movs	r0, r6
 800b0c8:	f000 fc97 	bl	800b9fa <_calloc_r>
 800b0cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0ce:	60e8      	str	r0, [r5, #12]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1e1      	bne.n	800b09a <_Balloc+0x32>
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	bd70      	pop	{r4, r5, r6, pc}
 800b0da:	6802      	ldr	r2, [r0, #0]
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6103      	str	r3, [r0, #16]
 800b0e2:	60c3      	str	r3, [r0, #12]
 800b0e4:	e7f8      	b.n	800b0d8 <_Balloc+0x70>
 800b0e6:	46c0      	nop			; (mov r8, r8)
 800b0e8:	0800cc06 	.word	0x0800cc06
 800b0ec:	0800cd68 	.word	0x0800cd68

0800b0f0 <_Bfree>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0f4:	0005      	movs	r5, r0
 800b0f6:	000c      	movs	r4, r1
 800b0f8:	2e00      	cmp	r6, #0
 800b0fa:	d10e      	bne.n	800b11a <_Bfree+0x2a>
 800b0fc:	2010      	movs	r0, #16
 800b0fe:	f7ff ff8b 	bl	800b018 <malloc>
 800b102:	1e02      	subs	r2, r0, #0
 800b104:	6268      	str	r0, [r5, #36]	; 0x24
 800b106:	d104      	bne.n	800b112 <_Bfree+0x22>
 800b108:	218a      	movs	r1, #138	; 0x8a
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <_Bfree+0x40>)
 800b10c:	4809      	ldr	r0, [pc, #36]	; (800b134 <_Bfree+0x44>)
 800b10e:	f001 f9ad 	bl	800c46c <__assert_func>
 800b112:	6046      	str	r6, [r0, #4]
 800b114:	6086      	str	r6, [r0, #8]
 800b116:	6006      	str	r6, [r0, #0]
 800b118:	60c6      	str	r6, [r0, #12]
 800b11a:	2c00      	cmp	r4, #0
 800b11c:	d007      	beq.n	800b12e <_Bfree+0x3e>
 800b11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b120:	6862      	ldr	r2, [r4, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	0092      	lsls	r2, r2, #2
 800b126:	189b      	adds	r3, r3, r2
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	6022      	str	r2, [r4, #0]
 800b12c:	601c      	str	r4, [r3, #0]
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	0800cc06 	.word	0x0800cc06
 800b134:	0800cd68 	.word	0x0800cd68

0800b138 <__multadd>:
 800b138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b13a:	000e      	movs	r6, r1
 800b13c:	9001      	str	r0, [sp, #4]
 800b13e:	000c      	movs	r4, r1
 800b140:	001d      	movs	r5, r3
 800b142:	2000      	movs	r0, #0
 800b144:	690f      	ldr	r7, [r1, #16]
 800b146:	3614      	adds	r6, #20
 800b148:	6833      	ldr	r3, [r6, #0]
 800b14a:	3001      	adds	r0, #1
 800b14c:	b299      	uxth	r1, r3
 800b14e:	4351      	muls	r1, r2
 800b150:	0c1b      	lsrs	r3, r3, #16
 800b152:	4353      	muls	r3, r2
 800b154:	1949      	adds	r1, r1, r5
 800b156:	0c0d      	lsrs	r5, r1, #16
 800b158:	195b      	adds	r3, r3, r5
 800b15a:	0c1d      	lsrs	r5, r3, #16
 800b15c:	b289      	uxth	r1, r1
 800b15e:	041b      	lsls	r3, r3, #16
 800b160:	185b      	adds	r3, r3, r1
 800b162:	c608      	stmia	r6!, {r3}
 800b164:	4287      	cmp	r7, r0
 800b166:	dcef      	bgt.n	800b148 <__multadd+0x10>
 800b168:	2d00      	cmp	r5, #0
 800b16a:	d022      	beq.n	800b1b2 <__multadd+0x7a>
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	42bb      	cmp	r3, r7
 800b170:	dc19      	bgt.n	800b1a6 <__multadd+0x6e>
 800b172:	6863      	ldr	r3, [r4, #4]
 800b174:	9801      	ldr	r0, [sp, #4]
 800b176:	1c59      	adds	r1, r3, #1
 800b178:	f7ff ff76 	bl	800b068 <_Balloc>
 800b17c:	1e06      	subs	r6, r0, #0
 800b17e:	d105      	bne.n	800b18c <__multadd+0x54>
 800b180:	0002      	movs	r2, r0
 800b182:	21b5      	movs	r1, #181	; 0xb5
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <__multadd+0x80>)
 800b186:	480d      	ldr	r0, [pc, #52]	; (800b1bc <__multadd+0x84>)
 800b188:	f001 f970 	bl	800c46c <__assert_func>
 800b18c:	0021      	movs	r1, r4
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	310c      	adds	r1, #12
 800b192:	1c9a      	adds	r2, r3, #2
 800b194:	0092      	lsls	r2, r2, #2
 800b196:	300c      	adds	r0, #12
 800b198:	f7fc fe8e 	bl	8007eb8 <memcpy>
 800b19c:	0021      	movs	r1, r4
 800b19e:	9801      	ldr	r0, [sp, #4]
 800b1a0:	f7ff ffa6 	bl	800b0f0 <_Bfree>
 800b1a4:	0034      	movs	r4, r6
 800b1a6:	1d3b      	adds	r3, r7, #4
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	18e3      	adds	r3, r4, r3
 800b1ac:	605d      	str	r5, [r3, #4]
 800b1ae:	1c7b      	adds	r3, r7, #1
 800b1b0:	6123      	str	r3, [r4, #16]
 800b1b2:	0020      	movs	r0, r4
 800b1b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1b6:	46c0      	nop			; (mov r8, r8)
 800b1b8:	0800cc78 	.word	0x0800cc78
 800b1bc:	0800cd68 	.word	0x0800cd68

0800b1c0 <__s2b>:
 800b1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c2:	0006      	movs	r6, r0
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	000c      	movs	r4, r1
 800b1c8:	3008      	adds	r0, #8
 800b1ca:	2109      	movs	r1, #9
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	0015      	movs	r5, r2
 800b1d0:	f7f5 f840 	bl	8000254 <__divsi3>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4283      	cmp	r3, r0
 800b1da:	db0a      	blt.n	800b1f2 <__s2b+0x32>
 800b1dc:	0030      	movs	r0, r6
 800b1de:	f7ff ff43 	bl	800b068 <_Balloc>
 800b1e2:	1e01      	subs	r1, r0, #0
 800b1e4:	d108      	bne.n	800b1f8 <__s2b+0x38>
 800b1e6:	0002      	movs	r2, r0
 800b1e8:	4b19      	ldr	r3, [pc, #100]	; (800b250 <__s2b+0x90>)
 800b1ea:	481a      	ldr	r0, [pc, #104]	; (800b254 <__s2b+0x94>)
 800b1ec:	31ce      	adds	r1, #206	; 0xce
 800b1ee:	f001 f93d 	bl	800c46c <__assert_func>
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	3101      	adds	r1, #1
 800b1f6:	e7ef      	b.n	800b1d8 <__s2b+0x18>
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	6143      	str	r3, [r0, #20]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	6103      	str	r3, [r0, #16]
 800b200:	2d09      	cmp	r5, #9
 800b202:	dd18      	ble.n	800b236 <__s2b+0x76>
 800b204:	0023      	movs	r3, r4
 800b206:	3309      	adds	r3, #9
 800b208:	001f      	movs	r7, r3
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	1964      	adds	r4, r4, r5
 800b20e:	783b      	ldrb	r3, [r7, #0]
 800b210:	220a      	movs	r2, #10
 800b212:	0030      	movs	r0, r6
 800b214:	3b30      	subs	r3, #48	; 0x30
 800b216:	f7ff ff8f 	bl	800b138 <__multadd>
 800b21a:	3701      	adds	r7, #1
 800b21c:	0001      	movs	r1, r0
 800b21e:	42a7      	cmp	r7, r4
 800b220:	d1f5      	bne.n	800b20e <__s2b+0x4e>
 800b222:	002c      	movs	r4, r5
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	3c08      	subs	r4, #8
 800b228:	191c      	adds	r4, r3, r4
 800b22a:	002f      	movs	r7, r5
 800b22c:	9b01      	ldr	r3, [sp, #4]
 800b22e:	429f      	cmp	r7, r3
 800b230:	db04      	blt.n	800b23c <__s2b+0x7c>
 800b232:	0008      	movs	r0, r1
 800b234:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b236:	2509      	movs	r5, #9
 800b238:	340a      	adds	r4, #10
 800b23a:	e7f6      	b.n	800b22a <__s2b+0x6a>
 800b23c:	1b63      	subs	r3, r4, r5
 800b23e:	5ddb      	ldrb	r3, [r3, r7]
 800b240:	220a      	movs	r2, #10
 800b242:	0030      	movs	r0, r6
 800b244:	3b30      	subs	r3, #48	; 0x30
 800b246:	f7ff ff77 	bl	800b138 <__multadd>
 800b24a:	3701      	adds	r7, #1
 800b24c:	0001      	movs	r1, r0
 800b24e:	e7ed      	b.n	800b22c <__s2b+0x6c>
 800b250:	0800cc78 	.word	0x0800cc78
 800b254:	0800cd68 	.word	0x0800cd68

0800b258 <__hi0bits>:
 800b258:	0003      	movs	r3, r0
 800b25a:	0c02      	lsrs	r2, r0, #16
 800b25c:	2000      	movs	r0, #0
 800b25e:	4282      	cmp	r2, r0
 800b260:	d101      	bne.n	800b266 <__hi0bits+0xe>
 800b262:	041b      	lsls	r3, r3, #16
 800b264:	3010      	adds	r0, #16
 800b266:	0e1a      	lsrs	r2, r3, #24
 800b268:	d101      	bne.n	800b26e <__hi0bits+0x16>
 800b26a:	3008      	adds	r0, #8
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	0f1a      	lsrs	r2, r3, #28
 800b270:	d101      	bne.n	800b276 <__hi0bits+0x1e>
 800b272:	3004      	adds	r0, #4
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	0f9a      	lsrs	r2, r3, #30
 800b278:	d101      	bne.n	800b27e <__hi0bits+0x26>
 800b27a:	3002      	adds	r0, #2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	db03      	blt.n	800b28a <__hi0bits+0x32>
 800b282:	3001      	adds	r0, #1
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	d400      	bmi.n	800b28a <__hi0bits+0x32>
 800b288:	2020      	movs	r0, #32
 800b28a:	4770      	bx	lr

0800b28c <__lo0bits>:
 800b28c:	6803      	ldr	r3, [r0, #0]
 800b28e:	0002      	movs	r2, r0
 800b290:	2107      	movs	r1, #7
 800b292:	0018      	movs	r0, r3
 800b294:	4008      	ands	r0, r1
 800b296:	420b      	tst	r3, r1
 800b298:	d00d      	beq.n	800b2b6 <__lo0bits+0x2a>
 800b29a:	3906      	subs	r1, #6
 800b29c:	2000      	movs	r0, #0
 800b29e:	420b      	tst	r3, r1
 800b2a0:	d105      	bne.n	800b2ae <__lo0bits+0x22>
 800b2a2:	3002      	adds	r0, #2
 800b2a4:	4203      	tst	r3, r0
 800b2a6:	d003      	beq.n	800b2b0 <__lo0bits+0x24>
 800b2a8:	40cb      	lsrs	r3, r1
 800b2aa:	0008      	movs	r0, r1
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	4770      	bx	lr
 800b2b0:	089b      	lsrs	r3, r3, #2
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	e7fb      	b.n	800b2ae <__lo0bits+0x22>
 800b2b6:	b299      	uxth	r1, r3
 800b2b8:	2900      	cmp	r1, #0
 800b2ba:	d101      	bne.n	800b2c0 <__lo0bits+0x34>
 800b2bc:	2010      	movs	r0, #16
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	b2d9      	uxtb	r1, r3
 800b2c2:	2900      	cmp	r1, #0
 800b2c4:	d101      	bne.n	800b2ca <__lo0bits+0x3e>
 800b2c6:	3008      	adds	r0, #8
 800b2c8:	0a1b      	lsrs	r3, r3, #8
 800b2ca:	0719      	lsls	r1, r3, #28
 800b2cc:	d101      	bne.n	800b2d2 <__lo0bits+0x46>
 800b2ce:	3004      	adds	r0, #4
 800b2d0:	091b      	lsrs	r3, r3, #4
 800b2d2:	0799      	lsls	r1, r3, #30
 800b2d4:	d101      	bne.n	800b2da <__lo0bits+0x4e>
 800b2d6:	3002      	adds	r0, #2
 800b2d8:	089b      	lsrs	r3, r3, #2
 800b2da:	07d9      	lsls	r1, r3, #31
 800b2dc:	d4e9      	bmi.n	800b2b2 <__lo0bits+0x26>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	085b      	lsrs	r3, r3, #1
 800b2e2:	d1e6      	bne.n	800b2b2 <__lo0bits+0x26>
 800b2e4:	2020      	movs	r0, #32
 800b2e6:	e7e2      	b.n	800b2ae <__lo0bits+0x22>

0800b2e8 <__i2b>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	000c      	movs	r4, r1
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	f7ff febb 	bl	800b068 <_Balloc>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d106      	bne.n	800b304 <__i2b+0x1c>
 800b2f6:	21a0      	movs	r1, #160	; 0xa0
 800b2f8:	0002      	movs	r2, r0
 800b2fa:	4b04      	ldr	r3, [pc, #16]	; (800b30c <__i2b+0x24>)
 800b2fc:	4804      	ldr	r0, [pc, #16]	; (800b310 <__i2b+0x28>)
 800b2fe:	0049      	lsls	r1, r1, #1
 800b300:	f001 f8b4 	bl	800c46c <__assert_func>
 800b304:	2301      	movs	r3, #1
 800b306:	6144      	str	r4, [r0, #20]
 800b308:	6103      	str	r3, [r0, #16]
 800b30a:	bd10      	pop	{r4, pc}
 800b30c:	0800cc78 	.word	0x0800cc78
 800b310:	0800cd68 	.word	0x0800cd68

0800b314 <__multiply>:
 800b314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b316:	690b      	ldr	r3, [r1, #16]
 800b318:	0014      	movs	r4, r2
 800b31a:	6912      	ldr	r2, [r2, #16]
 800b31c:	000d      	movs	r5, r1
 800b31e:	b089      	sub	sp, #36	; 0x24
 800b320:	4293      	cmp	r3, r2
 800b322:	da01      	bge.n	800b328 <__multiply+0x14>
 800b324:	0025      	movs	r5, r4
 800b326:	000c      	movs	r4, r1
 800b328:	692f      	ldr	r7, [r5, #16]
 800b32a:	6926      	ldr	r6, [r4, #16]
 800b32c:	6869      	ldr	r1, [r5, #4]
 800b32e:	19bb      	adds	r3, r7, r6
 800b330:	9302      	str	r3, [sp, #8]
 800b332:	68ab      	ldr	r3, [r5, #8]
 800b334:	19ba      	adds	r2, r7, r6
 800b336:	4293      	cmp	r3, r2
 800b338:	da00      	bge.n	800b33c <__multiply+0x28>
 800b33a:	3101      	adds	r1, #1
 800b33c:	f7ff fe94 	bl	800b068 <_Balloc>
 800b340:	9001      	str	r0, [sp, #4]
 800b342:	2800      	cmp	r0, #0
 800b344:	d106      	bne.n	800b354 <__multiply+0x40>
 800b346:	215e      	movs	r1, #94	; 0x5e
 800b348:	0002      	movs	r2, r0
 800b34a:	4b48      	ldr	r3, [pc, #288]	; (800b46c <__multiply+0x158>)
 800b34c:	4848      	ldr	r0, [pc, #288]	; (800b470 <__multiply+0x15c>)
 800b34e:	31ff      	adds	r1, #255	; 0xff
 800b350:	f001 f88c 	bl	800c46c <__assert_func>
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	3314      	adds	r3, #20
 800b35a:	469c      	mov	ip, r3
 800b35c:	19bb      	adds	r3, r7, r6
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4463      	add	r3, ip
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	4663      	mov	r3, ip
 800b366:	9903      	ldr	r1, [sp, #12]
 800b368:	428b      	cmp	r3, r1
 800b36a:	d32c      	bcc.n	800b3c6 <__multiply+0xb2>
 800b36c:	002b      	movs	r3, r5
 800b36e:	0022      	movs	r2, r4
 800b370:	3314      	adds	r3, #20
 800b372:	00bf      	lsls	r7, r7, #2
 800b374:	3214      	adds	r2, #20
 800b376:	9306      	str	r3, [sp, #24]
 800b378:	00b6      	lsls	r6, r6, #2
 800b37a:	19db      	adds	r3, r3, r7
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	1993      	adds	r3, r2, r6
 800b380:	9307      	str	r3, [sp, #28]
 800b382:	2304      	movs	r3, #4
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	002b      	movs	r3, r5
 800b388:	9904      	ldr	r1, [sp, #16]
 800b38a:	3315      	adds	r3, #21
 800b38c:	9200      	str	r2, [sp, #0]
 800b38e:	4299      	cmp	r1, r3
 800b390:	d305      	bcc.n	800b39e <__multiply+0x8a>
 800b392:	1b4b      	subs	r3, r1, r5
 800b394:	3b15      	subs	r3, #21
 800b396:	089b      	lsrs	r3, r3, #2
 800b398:	3301      	adds	r3, #1
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	9305      	str	r3, [sp, #20]
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	9a00      	ldr	r2, [sp, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d311      	bcc.n	800b3ca <__multiply+0xb6>
 800b3a6:	9b02      	ldr	r3, [sp, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dd06      	ble.n	800b3ba <__multiply+0xa6>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	3b04      	subs	r3, #4
 800b3b0:	9303      	str	r3, [sp, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d053      	beq.n	800b462 <__multiply+0x14e>
 800b3ba:	9b01      	ldr	r3, [sp, #4]
 800b3bc:	9a02      	ldr	r2, [sp, #8]
 800b3be:	0018      	movs	r0, r3
 800b3c0:	611a      	str	r2, [r3, #16]
 800b3c2:	b009      	add	sp, #36	; 0x24
 800b3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c6:	c304      	stmia	r3!, {r2}
 800b3c8:	e7cd      	b.n	800b366 <__multiply+0x52>
 800b3ca:	9b00      	ldr	r3, [sp, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	b298      	uxth	r0, r3
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d01b      	beq.n	800b40c <__multiply+0xf8>
 800b3d4:	4667      	mov	r7, ip
 800b3d6:	2400      	movs	r4, #0
 800b3d8:	9e06      	ldr	r6, [sp, #24]
 800b3da:	ce02      	ldmia	r6!, {r1}
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	b28b      	uxth	r3, r1
 800b3e0:	4343      	muls	r3, r0
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	189b      	adds	r3, r3, r2
 800b3e6:	191b      	adds	r3, r3, r4
 800b3e8:	0c0c      	lsrs	r4, r1, #16
 800b3ea:	4344      	muls	r4, r0
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	0c11      	lsrs	r1, r2, #16
 800b3f0:	1861      	adds	r1, r4, r1
 800b3f2:	0c1c      	lsrs	r4, r3, #16
 800b3f4:	1909      	adds	r1, r1, r4
 800b3f6:	0c0c      	lsrs	r4, r1, #16
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	0409      	lsls	r1, r1, #16
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	c708      	stmia	r7!, {r3}
 800b400:	9b04      	ldr	r3, [sp, #16]
 800b402:	42b3      	cmp	r3, r6
 800b404:	d8e9      	bhi.n	800b3da <__multiply+0xc6>
 800b406:	4663      	mov	r3, ip
 800b408:	9a05      	ldr	r2, [sp, #20]
 800b40a:	509c      	str	r4, [r3, r2]
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	0c1e      	lsrs	r6, r3, #16
 800b412:	d020      	beq.n	800b456 <__multiply+0x142>
 800b414:	4663      	mov	r3, ip
 800b416:	002c      	movs	r4, r5
 800b418:	4660      	mov	r0, ip
 800b41a:	2700      	movs	r7, #0
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3414      	adds	r4, #20
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	b291      	uxth	r1, r2
 800b426:	4371      	muls	r1, r6
 800b428:	6802      	ldr	r2, [r0, #0]
 800b42a:	0c12      	lsrs	r2, r2, #16
 800b42c:	1889      	adds	r1, r1, r2
 800b42e:	19cf      	adds	r7, r1, r7
 800b430:	0439      	lsls	r1, r7, #16
 800b432:	430b      	orrs	r3, r1
 800b434:	6003      	str	r3, [r0, #0]
 800b436:	cc02      	ldmia	r4!, {r1}
 800b438:	6843      	ldr	r3, [r0, #4]
 800b43a:	0c09      	lsrs	r1, r1, #16
 800b43c:	4371      	muls	r1, r6
 800b43e:	b29b      	uxth	r3, r3
 800b440:	0c3f      	lsrs	r7, r7, #16
 800b442:	18cb      	adds	r3, r1, r3
 800b444:	9a04      	ldr	r2, [sp, #16]
 800b446:	19db      	adds	r3, r3, r7
 800b448:	0c1f      	lsrs	r7, r3, #16
 800b44a:	3004      	adds	r0, #4
 800b44c:	42a2      	cmp	r2, r4
 800b44e:	d8e7      	bhi.n	800b420 <__multiply+0x10c>
 800b450:	4662      	mov	r2, ip
 800b452:	9905      	ldr	r1, [sp, #20]
 800b454:	5053      	str	r3, [r2, r1]
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	3304      	adds	r3, #4
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	2304      	movs	r3, #4
 800b45e:	449c      	add	ip, r3
 800b460:	e79d      	b.n	800b39e <__multiply+0x8a>
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	3b01      	subs	r3, #1
 800b466:	9302      	str	r3, [sp, #8]
 800b468:	e79d      	b.n	800b3a6 <__multiply+0x92>
 800b46a:	46c0      	nop			; (mov r8, r8)
 800b46c:	0800cc78 	.word	0x0800cc78
 800b470:	0800cd68 	.word	0x0800cd68

0800b474 <__pow5mult>:
 800b474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b476:	2303      	movs	r3, #3
 800b478:	0015      	movs	r5, r2
 800b47a:	0007      	movs	r7, r0
 800b47c:	000e      	movs	r6, r1
 800b47e:	401a      	ands	r2, r3
 800b480:	421d      	tst	r5, r3
 800b482:	d008      	beq.n	800b496 <__pow5mult+0x22>
 800b484:	4925      	ldr	r1, [pc, #148]	; (800b51c <__pow5mult+0xa8>)
 800b486:	3a01      	subs	r2, #1
 800b488:	0092      	lsls	r2, r2, #2
 800b48a:	5852      	ldr	r2, [r2, r1]
 800b48c:	2300      	movs	r3, #0
 800b48e:	0031      	movs	r1, r6
 800b490:	f7ff fe52 	bl	800b138 <__multadd>
 800b494:	0006      	movs	r6, r0
 800b496:	10ad      	asrs	r5, r5, #2
 800b498:	d03d      	beq.n	800b516 <__pow5mult+0xa2>
 800b49a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b49c:	2c00      	cmp	r4, #0
 800b49e:	d10f      	bne.n	800b4c0 <__pow5mult+0x4c>
 800b4a0:	2010      	movs	r0, #16
 800b4a2:	f7ff fdb9 	bl	800b018 <malloc>
 800b4a6:	1e02      	subs	r2, r0, #0
 800b4a8:	6278      	str	r0, [r7, #36]	; 0x24
 800b4aa:	d105      	bne.n	800b4b8 <__pow5mult+0x44>
 800b4ac:	21d7      	movs	r1, #215	; 0xd7
 800b4ae:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <__pow5mult+0xac>)
 800b4b0:	481c      	ldr	r0, [pc, #112]	; (800b524 <__pow5mult+0xb0>)
 800b4b2:	0049      	lsls	r1, r1, #1
 800b4b4:	f000 ffda 	bl	800c46c <__assert_func>
 800b4b8:	6044      	str	r4, [r0, #4]
 800b4ba:	6084      	str	r4, [r0, #8]
 800b4bc:	6004      	str	r4, [r0, #0]
 800b4be:	60c4      	str	r4, [r0, #12]
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	689c      	ldr	r4, [r3, #8]
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	d108      	bne.n	800b4dc <__pow5mult+0x68>
 800b4ca:	0038      	movs	r0, r7
 800b4cc:	4916      	ldr	r1, [pc, #88]	; (800b528 <__pow5mult+0xb4>)
 800b4ce:	f7ff ff0b 	bl	800b2e8 <__i2b>
 800b4d2:	9b01      	ldr	r3, [sp, #4]
 800b4d4:	0004      	movs	r4, r0
 800b4d6:	6098      	str	r0, [r3, #8]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	6003      	str	r3, [r0, #0]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	421d      	tst	r5, r3
 800b4e0:	d00a      	beq.n	800b4f8 <__pow5mult+0x84>
 800b4e2:	0031      	movs	r1, r6
 800b4e4:	0022      	movs	r2, r4
 800b4e6:	0038      	movs	r0, r7
 800b4e8:	f7ff ff14 	bl	800b314 <__multiply>
 800b4ec:	0031      	movs	r1, r6
 800b4ee:	9001      	str	r0, [sp, #4]
 800b4f0:	0038      	movs	r0, r7
 800b4f2:	f7ff fdfd 	bl	800b0f0 <_Bfree>
 800b4f6:	9e01      	ldr	r6, [sp, #4]
 800b4f8:	106d      	asrs	r5, r5, #1
 800b4fa:	d00c      	beq.n	800b516 <__pow5mult+0xa2>
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d107      	bne.n	800b512 <__pow5mult+0x9e>
 800b502:	0022      	movs	r2, r4
 800b504:	0021      	movs	r1, r4
 800b506:	0038      	movs	r0, r7
 800b508:	f7ff ff04 	bl	800b314 <__multiply>
 800b50c:	2300      	movs	r3, #0
 800b50e:	6020      	str	r0, [r4, #0]
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	0004      	movs	r4, r0
 800b514:	e7e2      	b.n	800b4dc <__pow5mult+0x68>
 800b516:	0030      	movs	r0, r6
 800b518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b51a:	46c0      	nop			; (mov r8, r8)
 800b51c:	0800ceb8 	.word	0x0800ceb8
 800b520:	0800cc06 	.word	0x0800cc06
 800b524:	0800cd68 	.word	0x0800cd68
 800b528:	00000271 	.word	0x00000271

0800b52c <__lshift>:
 800b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52e:	000c      	movs	r4, r1
 800b530:	0017      	movs	r7, r2
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	1155      	asrs	r5, r2, #5
 800b536:	b087      	sub	sp, #28
 800b538:	18eb      	adds	r3, r5, r3
 800b53a:	9302      	str	r3, [sp, #8]
 800b53c:	3301      	adds	r3, #1
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	6849      	ldr	r1, [r1, #4]
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	9004      	str	r0, [sp, #16]
 800b546:	9a01      	ldr	r2, [sp, #4]
 800b548:	4293      	cmp	r3, r2
 800b54a:	db10      	blt.n	800b56e <__lshift+0x42>
 800b54c:	9804      	ldr	r0, [sp, #16]
 800b54e:	f7ff fd8b 	bl	800b068 <_Balloc>
 800b552:	2300      	movs	r3, #0
 800b554:	0002      	movs	r2, r0
 800b556:	0006      	movs	r6, r0
 800b558:	0019      	movs	r1, r3
 800b55a:	3214      	adds	r2, #20
 800b55c:	4298      	cmp	r0, r3
 800b55e:	d10c      	bne.n	800b57a <__lshift+0x4e>
 800b560:	21da      	movs	r1, #218	; 0xda
 800b562:	0002      	movs	r2, r0
 800b564:	4b26      	ldr	r3, [pc, #152]	; (800b600 <__lshift+0xd4>)
 800b566:	4827      	ldr	r0, [pc, #156]	; (800b604 <__lshift+0xd8>)
 800b568:	31ff      	adds	r1, #255	; 0xff
 800b56a:	f000 ff7f 	bl	800c46c <__assert_func>
 800b56e:	3101      	adds	r1, #1
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	e7e8      	b.n	800b546 <__lshift+0x1a>
 800b574:	0098      	lsls	r0, r3, #2
 800b576:	5011      	str	r1, [r2, r0]
 800b578:	3301      	adds	r3, #1
 800b57a:	42ab      	cmp	r3, r5
 800b57c:	dbfa      	blt.n	800b574 <__lshift+0x48>
 800b57e:	43eb      	mvns	r3, r5
 800b580:	17db      	asrs	r3, r3, #31
 800b582:	401d      	ands	r5, r3
 800b584:	211f      	movs	r1, #31
 800b586:	0023      	movs	r3, r4
 800b588:	0038      	movs	r0, r7
 800b58a:	00ad      	lsls	r5, r5, #2
 800b58c:	1955      	adds	r5, r2, r5
 800b58e:	6922      	ldr	r2, [r4, #16]
 800b590:	3314      	adds	r3, #20
 800b592:	0092      	lsls	r2, r2, #2
 800b594:	4008      	ands	r0, r1
 800b596:	4684      	mov	ip, r0
 800b598:	189a      	adds	r2, r3, r2
 800b59a:	420f      	tst	r7, r1
 800b59c:	d02a      	beq.n	800b5f4 <__lshift+0xc8>
 800b59e:	3101      	adds	r1, #1
 800b5a0:	1a09      	subs	r1, r1, r0
 800b5a2:	9105      	str	r1, [sp, #20]
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	9503      	str	r5, [sp, #12]
 800b5a8:	4667      	mov	r7, ip
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	40b8      	lsls	r0, r7
 800b5ae:	4301      	orrs	r1, r0
 800b5b0:	9803      	ldr	r0, [sp, #12]
 800b5b2:	c002      	stmia	r0!, {r1}
 800b5b4:	cb02      	ldmia	r3!, {r1}
 800b5b6:	9003      	str	r0, [sp, #12]
 800b5b8:	9805      	ldr	r0, [sp, #20]
 800b5ba:	40c1      	lsrs	r1, r0
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d8f3      	bhi.n	800b5a8 <__lshift+0x7c>
 800b5c0:	0020      	movs	r0, r4
 800b5c2:	3015      	adds	r0, #21
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	4282      	cmp	r2, r0
 800b5c8:	d304      	bcc.n	800b5d4 <__lshift+0xa8>
 800b5ca:	1b13      	subs	r3, r2, r4
 800b5cc:	3b15      	subs	r3, #21
 800b5ce:	089b      	lsrs	r3, r3, #2
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	50e9      	str	r1, [r5, r3]
 800b5d6:	2900      	cmp	r1, #0
 800b5d8:	d002      	beq.n	800b5e0 <__lshift+0xb4>
 800b5da:	9b02      	ldr	r3, [sp, #8]
 800b5dc:	3302      	adds	r3, #2
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	9b01      	ldr	r3, [sp, #4]
 800b5e2:	9804      	ldr	r0, [sp, #16]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	0021      	movs	r1, r4
 800b5e8:	6133      	str	r3, [r6, #16]
 800b5ea:	f7ff fd81 	bl	800b0f0 <_Bfree>
 800b5ee:	0030      	movs	r0, r6
 800b5f0:	b007      	add	sp, #28
 800b5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f4:	cb02      	ldmia	r3!, {r1}
 800b5f6:	c502      	stmia	r5!, {r1}
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d8fb      	bhi.n	800b5f4 <__lshift+0xc8>
 800b5fc:	e7f0      	b.n	800b5e0 <__lshift+0xb4>
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	0800cc78 	.word	0x0800cc78
 800b604:	0800cd68 	.word	0x0800cd68

0800b608 <__mcmp>:
 800b608:	6902      	ldr	r2, [r0, #16]
 800b60a:	690b      	ldr	r3, [r1, #16]
 800b60c:	b530      	push	{r4, r5, lr}
 800b60e:	0004      	movs	r4, r0
 800b610:	1ad0      	subs	r0, r2, r3
 800b612:	429a      	cmp	r2, r3
 800b614:	d10d      	bne.n	800b632 <__mcmp+0x2a>
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	3414      	adds	r4, #20
 800b61a:	3114      	adds	r1, #20
 800b61c:	18e2      	adds	r2, r4, r3
 800b61e:	18c9      	adds	r1, r1, r3
 800b620:	3a04      	subs	r2, #4
 800b622:	3904      	subs	r1, #4
 800b624:	6815      	ldr	r5, [r2, #0]
 800b626:	680b      	ldr	r3, [r1, #0]
 800b628:	429d      	cmp	r5, r3
 800b62a:	d003      	beq.n	800b634 <__mcmp+0x2c>
 800b62c:	2001      	movs	r0, #1
 800b62e:	429d      	cmp	r5, r3
 800b630:	d303      	bcc.n	800b63a <__mcmp+0x32>
 800b632:	bd30      	pop	{r4, r5, pc}
 800b634:	4294      	cmp	r4, r2
 800b636:	d3f3      	bcc.n	800b620 <__mcmp+0x18>
 800b638:	e7fb      	b.n	800b632 <__mcmp+0x2a>
 800b63a:	4240      	negs	r0, r0
 800b63c:	e7f9      	b.n	800b632 <__mcmp+0x2a>
	...

0800b640 <__mdiff>:
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b642:	000e      	movs	r6, r1
 800b644:	0007      	movs	r7, r0
 800b646:	0011      	movs	r1, r2
 800b648:	0030      	movs	r0, r6
 800b64a:	b087      	sub	sp, #28
 800b64c:	0014      	movs	r4, r2
 800b64e:	f7ff ffdb 	bl	800b608 <__mcmp>
 800b652:	1e05      	subs	r5, r0, #0
 800b654:	d110      	bne.n	800b678 <__mdiff+0x38>
 800b656:	0001      	movs	r1, r0
 800b658:	0038      	movs	r0, r7
 800b65a:	f7ff fd05 	bl	800b068 <_Balloc>
 800b65e:	1e02      	subs	r2, r0, #0
 800b660:	d104      	bne.n	800b66c <__mdiff+0x2c>
 800b662:	4b40      	ldr	r3, [pc, #256]	; (800b764 <__mdiff+0x124>)
 800b664:	4940      	ldr	r1, [pc, #256]	; (800b768 <__mdiff+0x128>)
 800b666:	4841      	ldr	r0, [pc, #260]	; (800b76c <__mdiff+0x12c>)
 800b668:	f000 ff00 	bl	800c46c <__assert_func>
 800b66c:	2301      	movs	r3, #1
 800b66e:	6145      	str	r5, [r0, #20]
 800b670:	6103      	str	r3, [r0, #16]
 800b672:	0010      	movs	r0, r2
 800b674:	b007      	add	sp, #28
 800b676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b678:	2301      	movs	r3, #1
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	2800      	cmp	r0, #0
 800b67e:	db04      	blt.n	800b68a <__mdiff+0x4a>
 800b680:	0023      	movs	r3, r4
 800b682:	0034      	movs	r4, r6
 800b684:	001e      	movs	r6, r3
 800b686:	2300      	movs	r3, #0
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	0038      	movs	r0, r7
 800b68c:	6861      	ldr	r1, [r4, #4]
 800b68e:	f7ff fceb 	bl	800b068 <_Balloc>
 800b692:	1e02      	subs	r2, r0, #0
 800b694:	d103      	bne.n	800b69e <__mdiff+0x5e>
 800b696:	2190      	movs	r1, #144	; 0x90
 800b698:	4b32      	ldr	r3, [pc, #200]	; (800b764 <__mdiff+0x124>)
 800b69a:	0089      	lsls	r1, r1, #2
 800b69c:	e7e3      	b.n	800b666 <__mdiff+0x26>
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	2700      	movs	r7, #0
 800b6a2:	60c3      	str	r3, [r0, #12]
 800b6a4:	6920      	ldr	r0, [r4, #16]
 800b6a6:	3414      	adds	r4, #20
 800b6a8:	9401      	str	r4, [sp, #4]
 800b6aa:	9b01      	ldr	r3, [sp, #4]
 800b6ac:	0084      	lsls	r4, r0, #2
 800b6ae:	191b      	adds	r3, r3, r4
 800b6b0:	0034      	movs	r4, r6
 800b6b2:	9302      	str	r3, [sp, #8]
 800b6b4:	6933      	ldr	r3, [r6, #16]
 800b6b6:	3414      	adds	r4, #20
 800b6b8:	0099      	lsls	r1, r3, #2
 800b6ba:	1863      	adds	r3, r4, r1
 800b6bc:	9303      	str	r3, [sp, #12]
 800b6be:	0013      	movs	r3, r2
 800b6c0:	3314      	adds	r3, #20
 800b6c2:	469c      	mov	ip, r3
 800b6c4:	9305      	str	r3, [sp, #20]
 800b6c6:	9b01      	ldr	r3, [sp, #4]
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	9b04      	ldr	r3, [sp, #16]
 800b6cc:	cc02      	ldmia	r4!, {r1}
 800b6ce:	cb20      	ldmia	r3!, {r5}
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	b2ab      	uxth	r3, r5
 800b6d4:	19df      	adds	r7, r3, r7
 800b6d6:	b28b      	uxth	r3, r1
 800b6d8:	1afb      	subs	r3, r7, r3
 800b6da:	0c09      	lsrs	r1, r1, #16
 800b6dc:	0c2d      	lsrs	r5, r5, #16
 800b6de:	1a6d      	subs	r5, r5, r1
 800b6e0:	1419      	asrs	r1, r3, #16
 800b6e2:	186d      	adds	r5, r5, r1
 800b6e4:	4661      	mov	r1, ip
 800b6e6:	142f      	asrs	r7, r5, #16
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	042d      	lsls	r5, r5, #16
 800b6ec:	432b      	orrs	r3, r5
 800b6ee:	c108      	stmia	r1!, {r3}
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	468c      	mov	ip, r1
 800b6f4:	42a3      	cmp	r3, r4
 800b6f6:	d8e8      	bhi.n	800b6ca <__mdiff+0x8a>
 800b6f8:	0031      	movs	r1, r6
 800b6fa:	9c03      	ldr	r4, [sp, #12]
 800b6fc:	3115      	adds	r1, #21
 800b6fe:	2304      	movs	r3, #4
 800b700:	428c      	cmp	r4, r1
 800b702:	d304      	bcc.n	800b70e <__mdiff+0xce>
 800b704:	1ba3      	subs	r3, r4, r6
 800b706:	3b15      	subs	r3, #21
 800b708:	089b      	lsrs	r3, r3, #2
 800b70a:	3301      	adds	r3, #1
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	9901      	ldr	r1, [sp, #4]
 800b710:	18cc      	adds	r4, r1, r3
 800b712:	9905      	ldr	r1, [sp, #20]
 800b714:	0026      	movs	r6, r4
 800b716:	18cb      	adds	r3, r1, r3
 800b718:	469c      	mov	ip, r3
 800b71a:	9902      	ldr	r1, [sp, #8]
 800b71c:	428e      	cmp	r6, r1
 800b71e:	d310      	bcc.n	800b742 <__mdiff+0x102>
 800b720:	9e02      	ldr	r6, [sp, #8]
 800b722:	1ee1      	subs	r1, r4, #3
 800b724:	2500      	movs	r5, #0
 800b726:	428e      	cmp	r6, r1
 800b728:	d304      	bcc.n	800b734 <__mdiff+0xf4>
 800b72a:	0031      	movs	r1, r6
 800b72c:	3103      	adds	r1, #3
 800b72e:	1b0c      	subs	r4, r1, r4
 800b730:	08a4      	lsrs	r4, r4, #2
 800b732:	00a5      	lsls	r5, r4, #2
 800b734:	195b      	adds	r3, r3, r5
 800b736:	3b04      	subs	r3, #4
 800b738:	6819      	ldr	r1, [r3, #0]
 800b73a:	2900      	cmp	r1, #0
 800b73c:	d00f      	beq.n	800b75e <__mdiff+0x11e>
 800b73e:	6110      	str	r0, [r2, #16]
 800b740:	e797      	b.n	800b672 <__mdiff+0x32>
 800b742:	ce02      	ldmia	r6!, {r1}
 800b744:	b28d      	uxth	r5, r1
 800b746:	19ed      	adds	r5, r5, r7
 800b748:	0c0f      	lsrs	r7, r1, #16
 800b74a:	1429      	asrs	r1, r5, #16
 800b74c:	1879      	adds	r1, r7, r1
 800b74e:	140f      	asrs	r7, r1, #16
 800b750:	b2ad      	uxth	r5, r5
 800b752:	0409      	lsls	r1, r1, #16
 800b754:	430d      	orrs	r5, r1
 800b756:	4661      	mov	r1, ip
 800b758:	c120      	stmia	r1!, {r5}
 800b75a:	468c      	mov	ip, r1
 800b75c:	e7dd      	b.n	800b71a <__mdiff+0xda>
 800b75e:	3801      	subs	r0, #1
 800b760:	e7e9      	b.n	800b736 <__mdiff+0xf6>
 800b762:	46c0      	nop			; (mov r8, r8)
 800b764:	0800cc78 	.word	0x0800cc78
 800b768:	00000232 	.word	0x00000232
 800b76c:	0800cd68 	.word	0x0800cd68

0800b770 <__ulp>:
 800b770:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <__ulp+0x40>)
 800b772:	4019      	ands	r1, r3
 800b774:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <__ulp+0x44>)
 800b776:	18c9      	adds	r1, r1, r3
 800b778:	2900      	cmp	r1, #0
 800b77a:	dd04      	ble.n	800b786 <__ulp+0x16>
 800b77c:	2200      	movs	r2, #0
 800b77e:	000b      	movs	r3, r1
 800b780:	0010      	movs	r0, r2
 800b782:	0019      	movs	r1, r3
 800b784:	4770      	bx	lr
 800b786:	4249      	negs	r1, r1
 800b788:	2200      	movs	r2, #0
 800b78a:	2300      	movs	r3, #0
 800b78c:	1509      	asrs	r1, r1, #20
 800b78e:	2913      	cmp	r1, #19
 800b790:	dc04      	bgt.n	800b79c <__ulp+0x2c>
 800b792:	2080      	movs	r0, #128	; 0x80
 800b794:	0300      	lsls	r0, r0, #12
 800b796:	4108      	asrs	r0, r1
 800b798:	0003      	movs	r3, r0
 800b79a:	e7f1      	b.n	800b780 <__ulp+0x10>
 800b79c:	3914      	subs	r1, #20
 800b79e:	2001      	movs	r0, #1
 800b7a0:	291e      	cmp	r1, #30
 800b7a2:	dc02      	bgt.n	800b7aa <__ulp+0x3a>
 800b7a4:	2080      	movs	r0, #128	; 0x80
 800b7a6:	0600      	lsls	r0, r0, #24
 800b7a8:	40c8      	lsrs	r0, r1
 800b7aa:	0002      	movs	r2, r0
 800b7ac:	e7e8      	b.n	800b780 <__ulp+0x10>
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	7ff00000 	.word	0x7ff00000
 800b7b4:	fcc00000 	.word	0xfcc00000

0800b7b8 <__b2d>:
 800b7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ba:	0006      	movs	r6, r0
 800b7bc:	6903      	ldr	r3, [r0, #16]
 800b7be:	3614      	adds	r6, #20
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	18f3      	adds	r3, r6, r3
 800b7c4:	1f1d      	subs	r5, r3, #4
 800b7c6:	682c      	ldr	r4, [r5, #0]
 800b7c8:	000f      	movs	r7, r1
 800b7ca:	0020      	movs	r0, r4
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	f7ff fd43 	bl	800b258 <__hi0bits>
 800b7d2:	2320      	movs	r3, #32
 800b7d4:	1a1b      	subs	r3, r3, r0
 800b7d6:	491f      	ldr	r1, [pc, #124]	; (800b854 <__b2d+0x9c>)
 800b7d8:	603b      	str	r3, [r7, #0]
 800b7da:	280a      	cmp	r0, #10
 800b7dc:	dc16      	bgt.n	800b80c <__b2d+0x54>
 800b7de:	230b      	movs	r3, #11
 800b7e0:	0027      	movs	r7, r4
 800b7e2:	1a1b      	subs	r3, r3, r0
 800b7e4:	40df      	lsrs	r7, r3
 800b7e6:	4339      	orrs	r1, r7
 800b7e8:	469c      	mov	ip, r3
 800b7ea:	000b      	movs	r3, r1
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	42ae      	cmp	r6, r5
 800b7f0:	d202      	bcs.n	800b7f8 <__b2d+0x40>
 800b7f2:	9901      	ldr	r1, [sp, #4]
 800b7f4:	3908      	subs	r1, #8
 800b7f6:	6809      	ldr	r1, [r1, #0]
 800b7f8:	3015      	adds	r0, #21
 800b7fa:	4084      	lsls	r4, r0
 800b7fc:	4660      	mov	r0, ip
 800b7fe:	40c1      	lsrs	r1, r0
 800b800:	430c      	orrs	r4, r1
 800b802:	0022      	movs	r2, r4
 800b804:	0010      	movs	r0, r2
 800b806:	0019      	movs	r1, r3
 800b808:	b003      	add	sp, #12
 800b80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80c:	2700      	movs	r7, #0
 800b80e:	42ae      	cmp	r6, r5
 800b810:	d202      	bcs.n	800b818 <__b2d+0x60>
 800b812:	9d01      	ldr	r5, [sp, #4]
 800b814:	3d08      	subs	r5, #8
 800b816:	682f      	ldr	r7, [r5, #0]
 800b818:	230b      	movs	r3, #11
 800b81a:	425b      	negs	r3, r3
 800b81c:	469c      	mov	ip, r3
 800b81e:	4484      	add	ip, r0
 800b820:	280b      	cmp	r0, #11
 800b822:	d013      	beq.n	800b84c <__b2d+0x94>
 800b824:	4663      	mov	r3, ip
 800b826:	2020      	movs	r0, #32
 800b828:	409c      	lsls	r4, r3
 800b82a:	1ac0      	subs	r0, r0, r3
 800b82c:	003b      	movs	r3, r7
 800b82e:	40c3      	lsrs	r3, r0
 800b830:	431c      	orrs	r4, r3
 800b832:	4321      	orrs	r1, r4
 800b834:	000b      	movs	r3, r1
 800b836:	2100      	movs	r1, #0
 800b838:	42b5      	cmp	r5, r6
 800b83a:	d901      	bls.n	800b840 <__b2d+0x88>
 800b83c:	3d04      	subs	r5, #4
 800b83e:	6829      	ldr	r1, [r5, #0]
 800b840:	4664      	mov	r4, ip
 800b842:	40c1      	lsrs	r1, r0
 800b844:	40a7      	lsls	r7, r4
 800b846:	430f      	orrs	r7, r1
 800b848:	003a      	movs	r2, r7
 800b84a:	e7db      	b.n	800b804 <__b2d+0x4c>
 800b84c:	4321      	orrs	r1, r4
 800b84e:	000b      	movs	r3, r1
 800b850:	e7fa      	b.n	800b848 <__b2d+0x90>
 800b852:	46c0      	nop			; (mov r8, r8)
 800b854:	3ff00000 	.word	0x3ff00000

0800b858 <__d2b>:
 800b858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b85a:	2101      	movs	r1, #1
 800b85c:	0014      	movs	r4, r2
 800b85e:	001e      	movs	r6, r3
 800b860:	9f08      	ldr	r7, [sp, #32]
 800b862:	f7ff fc01 	bl	800b068 <_Balloc>
 800b866:	1e05      	subs	r5, r0, #0
 800b868:	d105      	bne.n	800b876 <__d2b+0x1e>
 800b86a:	0002      	movs	r2, r0
 800b86c:	4b26      	ldr	r3, [pc, #152]	; (800b908 <__d2b+0xb0>)
 800b86e:	4927      	ldr	r1, [pc, #156]	; (800b90c <__d2b+0xb4>)
 800b870:	4827      	ldr	r0, [pc, #156]	; (800b910 <__d2b+0xb8>)
 800b872:	f000 fdfb 	bl	800c46c <__assert_func>
 800b876:	0333      	lsls	r3, r6, #12
 800b878:	0076      	lsls	r6, r6, #1
 800b87a:	0b1b      	lsrs	r3, r3, #12
 800b87c:	0d76      	lsrs	r6, r6, #21
 800b87e:	d124      	bne.n	800b8ca <__d2b+0x72>
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	2c00      	cmp	r4, #0
 800b884:	d027      	beq.n	800b8d6 <__d2b+0x7e>
 800b886:	4668      	mov	r0, sp
 800b888:	9400      	str	r4, [sp, #0]
 800b88a:	f7ff fcff 	bl	800b28c <__lo0bits>
 800b88e:	9c00      	ldr	r4, [sp, #0]
 800b890:	2800      	cmp	r0, #0
 800b892:	d01e      	beq.n	800b8d2 <__d2b+0x7a>
 800b894:	9b01      	ldr	r3, [sp, #4]
 800b896:	2120      	movs	r1, #32
 800b898:	001a      	movs	r2, r3
 800b89a:	1a09      	subs	r1, r1, r0
 800b89c:	408a      	lsls	r2, r1
 800b89e:	40c3      	lsrs	r3, r0
 800b8a0:	4322      	orrs	r2, r4
 800b8a2:	616a      	str	r2, [r5, #20]
 800b8a4:	9301      	str	r3, [sp, #4]
 800b8a6:	9c01      	ldr	r4, [sp, #4]
 800b8a8:	61ac      	str	r4, [r5, #24]
 800b8aa:	1e63      	subs	r3, r4, #1
 800b8ac:	419c      	sbcs	r4, r3
 800b8ae:	3401      	adds	r4, #1
 800b8b0:	612c      	str	r4, [r5, #16]
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d018      	beq.n	800b8e8 <__d2b+0x90>
 800b8b6:	4b17      	ldr	r3, [pc, #92]	; (800b914 <__d2b+0xbc>)
 800b8b8:	18f6      	adds	r6, r6, r3
 800b8ba:	2335      	movs	r3, #53	; 0x35
 800b8bc:	1836      	adds	r6, r6, r0
 800b8be:	1a18      	subs	r0, r3, r0
 800b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c2:	603e      	str	r6, [r7, #0]
 800b8c4:	6018      	str	r0, [r3, #0]
 800b8c6:	0028      	movs	r0, r5
 800b8c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8ca:	2280      	movs	r2, #128	; 0x80
 800b8cc:	0352      	lsls	r2, r2, #13
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	e7d6      	b.n	800b880 <__d2b+0x28>
 800b8d2:	616c      	str	r4, [r5, #20]
 800b8d4:	e7e7      	b.n	800b8a6 <__d2b+0x4e>
 800b8d6:	a801      	add	r0, sp, #4
 800b8d8:	f7ff fcd8 	bl	800b28c <__lo0bits>
 800b8dc:	2401      	movs	r4, #1
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	612c      	str	r4, [r5, #16]
 800b8e2:	616b      	str	r3, [r5, #20]
 800b8e4:	3020      	adds	r0, #32
 800b8e6:	e7e4      	b.n	800b8b2 <__d2b+0x5a>
 800b8e8:	4b0b      	ldr	r3, [pc, #44]	; (800b918 <__d2b+0xc0>)
 800b8ea:	18c0      	adds	r0, r0, r3
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	; (800b91c <__d2b+0xc4>)
 800b8ee:	6038      	str	r0, [r7, #0]
 800b8f0:	18e3      	adds	r3, r4, r3
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	18eb      	adds	r3, r5, r3
 800b8f6:	6958      	ldr	r0, [r3, #20]
 800b8f8:	f7ff fcae 	bl	800b258 <__hi0bits>
 800b8fc:	0164      	lsls	r4, r4, #5
 800b8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b900:	1a24      	subs	r4, r4, r0
 800b902:	601c      	str	r4, [r3, #0]
 800b904:	e7df      	b.n	800b8c6 <__d2b+0x6e>
 800b906:	46c0      	nop			; (mov r8, r8)
 800b908:	0800cc78 	.word	0x0800cc78
 800b90c:	0000030a 	.word	0x0000030a
 800b910:	0800cd68 	.word	0x0800cd68
 800b914:	fffffbcd 	.word	0xfffffbcd
 800b918:	fffffbce 	.word	0xfffffbce
 800b91c:	3fffffff 	.word	0x3fffffff

0800b920 <__ratio>:
 800b920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b922:	b087      	sub	sp, #28
 800b924:	000f      	movs	r7, r1
 800b926:	a904      	add	r1, sp, #16
 800b928:	0006      	movs	r6, r0
 800b92a:	f7ff ff45 	bl	800b7b8 <__b2d>
 800b92e:	9000      	str	r0, [sp, #0]
 800b930:	9101      	str	r1, [sp, #4]
 800b932:	9c00      	ldr	r4, [sp, #0]
 800b934:	9d01      	ldr	r5, [sp, #4]
 800b936:	0038      	movs	r0, r7
 800b938:	a905      	add	r1, sp, #20
 800b93a:	f7ff ff3d 	bl	800b7b8 <__b2d>
 800b93e:	9002      	str	r0, [sp, #8]
 800b940:	9103      	str	r1, [sp, #12]
 800b942:	9a02      	ldr	r2, [sp, #8]
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	6931      	ldr	r1, [r6, #16]
 800b948:	6938      	ldr	r0, [r7, #16]
 800b94a:	9e05      	ldr	r6, [sp, #20]
 800b94c:	1a08      	subs	r0, r1, r0
 800b94e:	9904      	ldr	r1, [sp, #16]
 800b950:	0140      	lsls	r0, r0, #5
 800b952:	1b89      	subs	r1, r1, r6
 800b954:	1841      	adds	r1, r0, r1
 800b956:	0508      	lsls	r0, r1, #20
 800b958:	2900      	cmp	r1, #0
 800b95a:	dd07      	ble.n	800b96c <__ratio+0x4c>
 800b95c:	9901      	ldr	r1, [sp, #4]
 800b95e:	1845      	adds	r5, r0, r1
 800b960:	0020      	movs	r0, r4
 800b962:	0029      	movs	r1, r5
 800b964:	f7f5 f94c 	bl	8000c00 <__aeabi_ddiv>
 800b968:	b007      	add	sp, #28
 800b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b96c:	9903      	ldr	r1, [sp, #12]
 800b96e:	1a0b      	subs	r3, r1, r0
 800b970:	e7f6      	b.n	800b960 <__ratio+0x40>

0800b972 <__copybits>:
 800b972:	b570      	push	{r4, r5, r6, lr}
 800b974:	0014      	movs	r4, r2
 800b976:	0005      	movs	r5, r0
 800b978:	3901      	subs	r1, #1
 800b97a:	6913      	ldr	r3, [r2, #16]
 800b97c:	1149      	asrs	r1, r1, #5
 800b97e:	3101      	adds	r1, #1
 800b980:	0089      	lsls	r1, r1, #2
 800b982:	3414      	adds	r4, #20
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	1841      	adds	r1, r0, r1
 800b988:	18e3      	adds	r3, r4, r3
 800b98a:	42a3      	cmp	r3, r4
 800b98c:	d80d      	bhi.n	800b9aa <__copybits+0x38>
 800b98e:	0014      	movs	r4, r2
 800b990:	3411      	adds	r4, #17
 800b992:	2500      	movs	r5, #0
 800b994:	429c      	cmp	r4, r3
 800b996:	d803      	bhi.n	800b9a0 <__copybits+0x2e>
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	3b11      	subs	r3, #17
 800b99c:	089b      	lsrs	r3, r3, #2
 800b99e:	009d      	lsls	r5, r3, #2
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	1940      	adds	r0, r0, r5
 800b9a4:	4281      	cmp	r1, r0
 800b9a6:	d803      	bhi.n	800b9b0 <__copybits+0x3e>
 800b9a8:	bd70      	pop	{r4, r5, r6, pc}
 800b9aa:	cc40      	ldmia	r4!, {r6}
 800b9ac:	c540      	stmia	r5!, {r6}
 800b9ae:	e7ec      	b.n	800b98a <__copybits+0x18>
 800b9b0:	c008      	stmia	r0!, {r3}
 800b9b2:	e7f7      	b.n	800b9a4 <__copybits+0x32>

0800b9b4 <__any_on>:
 800b9b4:	0002      	movs	r2, r0
 800b9b6:	6900      	ldr	r0, [r0, #16]
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	3214      	adds	r2, #20
 800b9bc:	114b      	asrs	r3, r1, #5
 800b9be:	4298      	cmp	r0, r3
 800b9c0:	db13      	blt.n	800b9ea <__any_on+0x36>
 800b9c2:	dd0c      	ble.n	800b9de <__any_on+0x2a>
 800b9c4:	241f      	movs	r4, #31
 800b9c6:	0008      	movs	r0, r1
 800b9c8:	4020      	ands	r0, r4
 800b9ca:	4221      	tst	r1, r4
 800b9cc:	d007      	beq.n	800b9de <__any_on+0x2a>
 800b9ce:	0099      	lsls	r1, r3, #2
 800b9d0:	588c      	ldr	r4, [r1, r2]
 800b9d2:	0021      	movs	r1, r4
 800b9d4:	40c1      	lsrs	r1, r0
 800b9d6:	4081      	lsls	r1, r0
 800b9d8:	2001      	movs	r0, #1
 800b9da:	428c      	cmp	r4, r1
 800b9dc:	d104      	bne.n	800b9e8 <__any_on+0x34>
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	18d3      	adds	r3, r2, r3
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d803      	bhi.n	800b9ee <__any_on+0x3a>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	0003      	movs	r3, r0
 800b9ec:	e7f7      	b.n	800b9de <__any_on+0x2a>
 800b9ee:	3b04      	subs	r3, #4
 800b9f0:	6819      	ldr	r1, [r3, #0]
 800b9f2:	2900      	cmp	r1, #0
 800b9f4:	d0f5      	beq.n	800b9e2 <__any_on+0x2e>
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	e7f6      	b.n	800b9e8 <__any_on+0x34>

0800b9fa <_calloc_r>:
 800b9fa:	b570      	push	{r4, r5, r6, lr}
 800b9fc:	0c13      	lsrs	r3, r2, #16
 800b9fe:	0c0d      	lsrs	r5, r1, #16
 800ba00:	d11e      	bne.n	800ba40 <_calloc_r+0x46>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <_calloc_r+0x26>
 800ba06:	b289      	uxth	r1, r1
 800ba08:	b294      	uxth	r4, r2
 800ba0a:	434c      	muls	r4, r1
 800ba0c:	0021      	movs	r1, r4
 800ba0e:	f000 f88d 	bl	800bb2c <_malloc_r>
 800ba12:	1e05      	subs	r5, r0, #0
 800ba14:	d01b      	beq.n	800ba4e <_calloc_r+0x54>
 800ba16:	0022      	movs	r2, r4
 800ba18:	2100      	movs	r1, #0
 800ba1a:	f7fc fa56 	bl	8007eca <memset>
 800ba1e:	e016      	b.n	800ba4e <_calloc_r+0x54>
 800ba20:	1c1d      	adds	r5, r3, #0
 800ba22:	1c0b      	adds	r3, r1, #0
 800ba24:	b292      	uxth	r2, r2
 800ba26:	b289      	uxth	r1, r1
 800ba28:	b29c      	uxth	r4, r3
 800ba2a:	4351      	muls	r1, r2
 800ba2c:	b2ab      	uxth	r3, r5
 800ba2e:	4363      	muls	r3, r4
 800ba30:	0c0c      	lsrs	r4, r1, #16
 800ba32:	191c      	adds	r4, r3, r4
 800ba34:	0c22      	lsrs	r2, r4, #16
 800ba36:	d107      	bne.n	800ba48 <_calloc_r+0x4e>
 800ba38:	0424      	lsls	r4, r4, #16
 800ba3a:	b289      	uxth	r1, r1
 800ba3c:	430c      	orrs	r4, r1
 800ba3e:	e7e5      	b.n	800ba0c <_calloc_r+0x12>
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <_calloc_r+0x4e>
 800ba44:	1c13      	adds	r3, r2, #0
 800ba46:	e7ed      	b.n	800ba24 <_calloc_r+0x2a>
 800ba48:	230c      	movs	r3, #12
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	0028      	movs	r0, r5
 800ba50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba54 <_free_r>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	0005      	movs	r5, r0
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	d010      	beq.n	800ba7e <_free_r+0x2a>
 800ba5c:	1f0c      	subs	r4, r1, #4
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	da00      	bge.n	800ba66 <_free_r+0x12>
 800ba64:	18e4      	adds	r4, r4, r3
 800ba66:	0028      	movs	r0, r5
 800ba68:	f000 fea0 	bl	800c7ac <__malloc_lock>
 800ba6c:	4a1d      	ldr	r2, [pc, #116]	; (800bae4 <_free_r+0x90>)
 800ba6e:	6813      	ldr	r3, [r2, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d105      	bne.n	800ba80 <_free_r+0x2c>
 800ba74:	6063      	str	r3, [r4, #4]
 800ba76:	6014      	str	r4, [r2, #0]
 800ba78:	0028      	movs	r0, r5
 800ba7a:	f000 fe9f 	bl	800c7bc <__malloc_unlock>
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	d908      	bls.n	800ba96 <_free_r+0x42>
 800ba84:	6821      	ldr	r1, [r4, #0]
 800ba86:	1860      	adds	r0, r4, r1
 800ba88:	4283      	cmp	r3, r0
 800ba8a:	d1f3      	bne.n	800ba74 <_free_r+0x20>
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	1841      	adds	r1, r0, r1
 800ba92:	6021      	str	r1, [r4, #0]
 800ba94:	e7ee      	b.n	800ba74 <_free_r+0x20>
 800ba96:	001a      	movs	r2, r3
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <_free_r+0x4e>
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	d9f9      	bls.n	800ba96 <_free_r+0x42>
 800baa2:	6811      	ldr	r1, [r2, #0]
 800baa4:	1850      	adds	r0, r2, r1
 800baa6:	42a0      	cmp	r0, r4
 800baa8:	d10b      	bne.n	800bac2 <_free_r+0x6e>
 800baaa:	6820      	ldr	r0, [r4, #0]
 800baac:	1809      	adds	r1, r1, r0
 800baae:	1850      	adds	r0, r2, r1
 800bab0:	6011      	str	r1, [r2, #0]
 800bab2:	4283      	cmp	r3, r0
 800bab4:	d1e0      	bne.n	800ba78 <_free_r+0x24>
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	1841      	adds	r1, r0, r1
 800babc:	6011      	str	r1, [r2, #0]
 800babe:	6053      	str	r3, [r2, #4]
 800bac0:	e7da      	b.n	800ba78 <_free_r+0x24>
 800bac2:	42a0      	cmp	r0, r4
 800bac4:	d902      	bls.n	800bacc <_free_r+0x78>
 800bac6:	230c      	movs	r3, #12
 800bac8:	602b      	str	r3, [r5, #0]
 800baca:	e7d5      	b.n	800ba78 <_free_r+0x24>
 800bacc:	6821      	ldr	r1, [r4, #0]
 800bace:	1860      	adds	r0, r4, r1
 800bad0:	4283      	cmp	r3, r0
 800bad2:	d103      	bne.n	800badc <_free_r+0x88>
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	1841      	adds	r1, r0, r1
 800bada:	6021      	str	r1, [r4, #0]
 800badc:	6063      	str	r3, [r4, #4]
 800bade:	6054      	str	r4, [r2, #4]
 800bae0:	e7ca      	b.n	800ba78 <_free_r+0x24>
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	20000568 	.word	0x20000568

0800bae8 <sbrk_aligned>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	4e0f      	ldr	r6, [pc, #60]	; (800bb28 <sbrk_aligned+0x40>)
 800baec:	000d      	movs	r5, r1
 800baee:	6831      	ldr	r1, [r6, #0]
 800baf0:	0004      	movs	r4, r0
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d102      	bne.n	800bafc <sbrk_aligned+0x14>
 800baf6:	f000 fb59 	bl	800c1ac <_sbrk_r>
 800bafa:	6030      	str	r0, [r6, #0]
 800bafc:	0029      	movs	r1, r5
 800bafe:	0020      	movs	r0, r4
 800bb00:	f000 fb54 	bl	800c1ac <_sbrk_r>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d00a      	beq.n	800bb1e <sbrk_aligned+0x36>
 800bb08:	2303      	movs	r3, #3
 800bb0a:	1cc5      	adds	r5, r0, #3
 800bb0c:	439d      	bics	r5, r3
 800bb0e:	42a8      	cmp	r0, r5
 800bb10:	d007      	beq.n	800bb22 <sbrk_aligned+0x3a>
 800bb12:	1a29      	subs	r1, r5, r0
 800bb14:	0020      	movs	r0, r4
 800bb16:	f000 fb49 	bl	800c1ac <_sbrk_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	d101      	bne.n	800bb22 <sbrk_aligned+0x3a>
 800bb1e:	2501      	movs	r5, #1
 800bb20:	426d      	negs	r5, r5
 800bb22:	0028      	movs	r0, r5
 800bb24:	bd70      	pop	{r4, r5, r6, pc}
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	2000056c 	.word	0x2000056c

0800bb2c <_malloc_r>:
 800bb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb2e:	2203      	movs	r2, #3
 800bb30:	1ccb      	adds	r3, r1, #3
 800bb32:	4393      	bics	r3, r2
 800bb34:	3308      	adds	r3, #8
 800bb36:	0006      	movs	r6, r0
 800bb38:	001f      	movs	r7, r3
 800bb3a:	2b0c      	cmp	r3, #12
 800bb3c:	d232      	bcs.n	800bba4 <_malloc_r+0x78>
 800bb3e:	270c      	movs	r7, #12
 800bb40:	42b9      	cmp	r1, r7
 800bb42:	d831      	bhi.n	800bba8 <_malloc_r+0x7c>
 800bb44:	0030      	movs	r0, r6
 800bb46:	f000 fe31 	bl	800c7ac <__malloc_lock>
 800bb4a:	4d32      	ldr	r5, [pc, #200]	; (800bc14 <_malloc_r+0xe8>)
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	001c      	movs	r4, r3
 800bb50:	2c00      	cmp	r4, #0
 800bb52:	d12e      	bne.n	800bbb2 <_malloc_r+0x86>
 800bb54:	0039      	movs	r1, r7
 800bb56:	0030      	movs	r0, r6
 800bb58:	f7ff ffc6 	bl	800bae8 <sbrk_aligned>
 800bb5c:	0004      	movs	r4, r0
 800bb5e:	1c43      	adds	r3, r0, #1
 800bb60:	d11e      	bne.n	800bba0 <_malloc_r+0x74>
 800bb62:	682c      	ldr	r4, [r5, #0]
 800bb64:	0025      	movs	r5, r4
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	d14a      	bne.n	800bc00 <_malloc_r+0xd4>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	0029      	movs	r1, r5
 800bb6e:	18e3      	adds	r3, r4, r3
 800bb70:	0030      	movs	r0, r6
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	f000 fb1a 	bl	800c1ac <_sbrk_r>
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	d143      	bne.n	800bc06 <_malloc_r+0xda>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	3703      	adds	r7, #3
 800bb82:	1aff      	subs	r7, r7, r3
 800bb84:	2303      	movs	r3, #3
 800bb86:	439f      	bics	r7, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	2f0c      	cmp	r7, #12
 800bb8c:	d200      	bcs.n	800bb90 <_malloc_r+0x64>
 800bb8e:	270c      	movs	r7, #12
 800bb90:	0039      	movs	r1, r7
 800bb92:	0030      	movs	r0, r6
 800bb94:	f7ff ffa8 	bl	800bae8 <sbrk_aligned>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d034      	beq.n	800bc06 <_malloc_r+0xda>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	19df      	adds	r7, r3, r7
 800bba0:	6027      	str	r7, [r4, #0]
 800bba2:	e013      	b.n	800bbcc <_malloc_r+0xa0>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	dacb      	bge.n	800bb40 <_malloc_r+0x14>
 800bba8:	230c      	movs	r3, #12
 800bbaa:	2500      	movs	r5, #0
 800bbac:	6033      	str	r3, [r6, #0]
 800bbae:	0028      	movs	r0, r5
 800bbb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	1bd1      	subs	r1, r2, r7
 800bbb6:	d420      	bmi.n	800bbfa <_malloc_r+0xce>
 800bbb8:	290b      	cmp	r1, #11
 800bbba:	d917      	bls.n	800bbec <_malloc_r+0xc0>
 800bbbc:	19e2      	adds	r2, r4, r7
 800bbbe:	6027      	str	r7, [r4, #0]
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d111      	bne.n	800bbe8 <_malloc_r+0xbc>
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	6863      	ldr	r3, [r4, #4]
 800bbc8:	6011      	str	r1, [r2, #0]
 800bbca:	6053      	str	r3, [r2, #4]
 800bbcc:	0030      	movs	r0, r6
 800bbce:	0025      	movs	r5, r4
 800bbd0:	f000 fdf4 	bl	800c7bc <__malloc_unlock>
 800bbd4:	2207      	movs	r2, #7
 800bbd6:	350b      	adds	r5, #11
 800bbd8:	1d23      	adds	r3, r4, #4
 800bbda:	4395      	bics	r5, r2
 800bbdc:	1aea      	subs	r2, r5, r3
 800bbde:	429d      	cmp	r5, r3
 800bbe0:	d0e5      	beq.n	800bbae <_malloc_r+0x82>
 800bbe2:	1b5b      	subs	r3, r3, r5
 800bbe4:	50a3      	str	r3, [r4, r2]
 800bbe6:	e7e2      	b.n	800bbae <_malloc_r+0x82>
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	e7ec      	b.n	800bbc6 <_malloc_r+0x9a>
 800bbec:	6862      	ldr	r2, [r4, #4]
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	d101      	bne.n	800bbf6 <_malloc_r+0xca>
 800bbf2:	602a      	str	r2, [r5, #0]
 800bbf4:	e7ea      	b.n	800bbcc <_malloc_r+0xa0>
 800bbf6:	605a      	str	r2, [r3, #4]
 800bbf8:	e7e8      	b.n	800bbcc <_malloc_r+0xa0>
 800bbfa:	0023      	movs	r3, r4
 800bbfc:	6864      	ldr	r4, [r4, #4]
 800bbfe:	e7a7      	b.n	800bb50 <_malloc_r+0x24>
 800bc00:	002c      	movs	r4, r5
 800bc02:	686d      	ldr	r5, [r5, #4]
 800bc04:	e7af      	b.n	800bb66 <_malloc_r+0x3a>
 800bc06:	230c      	movs	r3, #12
 800bc08:	0030      	movs	r0, r6
 800bc0a:	6033      	str	r3, [r6, #0]
 800bc0c:	f000 fdd6 	bl	800c7bc <__malloc_unlock>
 800bc10:	e7cd      	b.n	800bbae <_malloc_r+0x82>
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	20000568 	.word	0x20000568

0800bc18 <__ssputs_r>:
 800bc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc1a:	688e      	ldr	r6, [r1, #8]
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	0007      	movs	r7, r0
 800bc20:	000c      	movs	r4, r1
 800bc22:	9203      	str	r2, [sp, #12]
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	429e      	cmp	r6, r3
 800bc28:	d83c      	bhi.n	800bca4 <__ssputs_r+0x8c>
 800bc2a:	2390      	movs	r3, #144	; 0x90
 800bc2c:	898a      	ldrh	r2, [r1, #12]
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	421a      	tst	r2, r3
 800bc32:	d034      	beq.n	800bc9e <__ssputs_r+0x86>
 800bc34:	6909      	ldr	r1, [r1, #16]
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	6960      	ldr	r0, [r4, #20]
 800bc3a:	1a5b      	subs	r3, r3, r1
 800bc3c:	9302      	str	r3, [sp, #8]
 800bc3e:	2303      	movs	r3, #3
 800bc40:	4343      	muls	r3, r0
 800bc42:	0fdd      	lsrs	r5, r3, #31
 800bc44:	18ed      	adds	r5, r5, r3
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	9802      	ldr	r0, [sp, #8]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	181b      	adds	r3, r3, r0
 800bc4e:	106d      	asrs	r5, r5, #1
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	d900      	bls.n	800bc56 <__ssputs_r+0x3e>
 800bc54:	001d      	movs	r5, r3
 800bc56:	0553      	lsls	r3, r2, #21
 800bc58:	d532      	bpl.n	800bcc0 <__ssputs_r+0xa8>
 800bc5a:	0029      	movs	r1, r5
 800bc5c:	0038      	movs	r0, r7
 800bc5e:	f7ff ff65 	bl	800bb2c <_malloc_r>
 800bc62:	1e06      	subs	r6, r0, #0
 800bc64:	d109      	bne.n	800bc7a <__ssputs_r+0x62>
 800bc66:	230c      	movs	r3, #12
 800bc68:	603b      	str	r3, [r7, #0]
 800bc6a:	2340      	movs	r3, #64	; 0x40
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	89a2      	ldrh	r2, [r4, #12]
 800bc70:	4240      	negs	r0, r0
 800bc72:	4313      	orrs	r3, r2
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	b005      	add	sp, #20
 800bc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7a:	9a02      	ldr	r2, [sp, #8]
 800bc7c:	6921      	ldr	r1, [r4, #16]
 800bc7e:	f7fc f91b 	bl	8007eb8 <memcpy>
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	4a14      	ldr	r2, [pc, #80]	; (800bcd8 <__ssputs_r+0xc0>)
 800bc86:	401a      	ands	r2, r3
 800bc88:	2380      	movs	r3, #128	; 0x80
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	81a3      	strh	r3, [r4, #12]
 800bc8e:	9b02      	ldr	r3, [sp, #8]
 800bc90:	6126      	str	r6, [r4, #16]
 800bc92:	18f6      	adds	r6, r6, r3
 800bc94:	6026      	str	r6, [r4, #0]
 800bc96:	6165      	str	r5, [r4, #20]
 800bc98:	9e01      	ldr	r6, [sp, #4]
 800bc9a:	1aed      	subs	r5, r5, r3
 800bc9c:	60a5      	str	r5, [r4, #8]
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	429e      	cmp	r6, r3
 800bca2:	d900      	bls.n	800bca6 <__ssputs_r+0x8e>
 800bca4:	9e01      	ldr	r6, [sp, #4]
 800bca6:	0032      	movs	r2, r6
 800bca8:	9903      	ldr	r1, [sp, #12]
 800bcaa:	6820      	ldr	r0, [r4, #0]
 800bcac:	f000 fd6a 	bl	800c784 <memmove>
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	1b9b      	subs	r3, r3, r6
 800bcb6:	60a3      	str	r3, [r4, #8]
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	199e      	adds	r6, r3, r6
 800bcbc:	6026      	str	r6, [r4, #0]
 800bcbe:	e7da      	b.n	800bc76 <__ssputs_r+0x5e>
 800bcc0:	002a      	movs	r2, r5
 800bcc2:	0038      	movs	r0, r7
 800bcc4:	f000 fd82 	bl	800c7cc <_realloc_r>
 800bcc8:	1e06      	subs	r6, r0, #0
 800bcca:	d1e0      	bne.n	800bc8e <__ssputs_r+0x76>
 800bccc:	0038      	movs	r0, r7
 800bcce:	6921      	ldr	r1, [r4, #16]
 800bcd0:	f7ff fec0 	bl	800ba54 <_free_r>
 800bcd4:	e7c7      	b.n	800bc66 <__ssputs_r+0x4e>
 800bcd6:	46c0      	nop			; (mov r8, r8)
 800bcd8:	fffffb7f 	.word	0xfffffb7f

0800bcdc <_svfiprintf_r>:
 800bcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcde:	b0a1      	sub	sp, #132	; 0x84
 800bce0:	9003      	str	r0, [sp, #12]
 800bce2:	001d      	movs	r5, r3
 800bce4:	898b      	ldrh	r3, [r1, #12]
 800bce6:	000f      	movs	r7, r1
 800bce8:	0016      	movs	r6, r2
 800bcea:	061b      	lsls	r3, r3, #24
 800bcec:	d511      	bpl.n	800bd12 <_svfiprintf_r+0x36>
 800bcee:	690b      	ldr	r3, [r1, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10e      	bne.n	800bd12 <_svfiprintf_r+0x36>
 800bcf4:	2140      	movs	r1, #64	; 0x40
 800bcf6:	f7ff ff19 	bl	800bb2c <_malloc_r>
 800bcfa:	6038      	str	r0, [r7, #0]
 800bcfc:	6138      	str	r0, [r7, #16]
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d105      	bne.n	800bd0e <_svfiprintf_r+0x32>
 800bd02:	230c      	movs	r3, #12
 800bd04:	9a03      	ldr	r2, [sp, #12]
 800bd06:	3801      	subs	r0, #1
 800bd08:	6013      	str	r3, [r2, #0]
 800bd0a:	b021      	add	sp, #132	; 0x84
 800bd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd0e:	2340      	movs	r3, #64	; 0x40
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	2300      	movs	r3, #0
 800bd14:	ac08      	add	r4, sp, #32
 800bd16:	6163      	str	r3, [r4, #20]
 800bd18:	3320      	adds	r3, #32
 800bd1a:	7663      	strb	r3, [r4, #25]
 800bd1c:	3310      	adds	r3, #16
 800bd1e:	76a3      	strb	r3, [r4, #26]
 800bd20:	9507      	str	r5, [sp, #28]
 800bd22:	0035      	movs	r5, r6
 800bd24:	782b      	ldrb	r3, [r5, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <_svfiprintf_r+0x52>
 800bd2a:	2b25      	cmp	r3, #37	; 0x25
 800bd2c:	d147      	bne.n	800bdbe <_svfiprintf_r+0xe2>
 800bd2e:	1bab      	subs	r3, r5, r6
 800bd30:	9305      	str	r3, [sp, #20]
 800bd32:	42b5      	cmp	r5, r6
 800bd34:	d00c      	beq.n	800bd50 <_svfiprintf_r+0x74>
 800bd36:	0032      	movs	r2, r6
 800bd38:	0039      	movs	r1, r7
 800bd3a:	9803      	ldr	r0, [sp, #12]
 800bd3c:	f7ff ff6c 	bl	800bc18 <__ssputs_r>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d100      	bne.n	800bd46 <_svfiprintf_r+0x6a>
 800bd44:	e0ae      	b.n	800bea4 <_svfiprintf_r+0x1c8>
 800bd46:	6962      	ldr	r2, [r4, #20]
 800bd48:	9b05      	ldr	r3, [sp, #20]
 800bd4a:	4694      	mov	ip, r2
 800bd4c:	4463      	add	r3, ip
 800bd4e:	6163      	str	r3, [r4, #20]
 800bd50:	782b      	ldrb	r3, [r5, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d100      	bne.n	800bd58 <_svfiprintf_r+0x7c>
 800bd56:	e0a5      	b.n	800bea4 <_svfiprintf_r+0x1c8>
 800bd58:	2201      	movs	r2, #1
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	4252      	negs	r2, r2
 800bd5e:	6062      	str	r2, [r4, #4]
 800bd60:	a904      	add	r1, sp, #16
 800bd62:	3254      	adds	r2, #84	; 0x54
 800bd64:	1852      	adds	r2, r2, r1
 800bd66:	1c6e      	adds	r6, r5, #1
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	60e3      	str	r3, [r4, #12]
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	7013      	strb	r3, [r2, #0]
 800bd70:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd72:	2205      	movs	r2, #5
 800bd74:	7831      	ldrb	r1, [r6, #0]
 800bd76:	4854      	ldr	r0, [pc, #336]	; (800bec8 <_svfiprintf_r+0x1ec>)
 800bd78:	f7ff f96a 	bl	800b050 <memchr>
 800bd7c:	1c75      	adds	r5, r6, #1
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d11f      	bne.n	800bdc2 <_svfiprintf_r+0xe6>
 800bd82:	6822      	ldr	r2, [r4, #0]
 800bd84:	06d3      	lsls	r3, r2, #27
 800bd86:	d504      	bpl.n	800bd92 <_svfiprintf_r+0xb6>
 800bd88:	2353      	movs	r3, #83	; 0x53
 800bd8a:	a904      	add	r1, sp, #16
 800bd8c:	185b      	adds	r3, r3, r1
 800bd8e:	2120      	movs	r1, #32
 800bd90:	7019      	strb	r1, [r3, #0]
 800bd92:	0713      	lsls	r3, r2, #28
 800bd94:	d504      	bpl.n	800bda0 <_svfiprintf_r+0xc4>
 800bd96:	2353      	movs	r3, #83	; 0x53
 800bd98:	a904      	add	r1, sp, #16
 800bd9a:	185b      	adds	r3, r3, r1
 800bd9c:	212b      	movs	r1, #43	; 0x2b
 800bd9e:	7019      	strb	r1, [r3, #0]
 800bda0:	7833      	ldrb	r3, [r6, #0]
 800bda2:	2b2a      	cmp	r3, #42	; 0x2a
 800bda4:	d016      	beq.n	800bdd4 <_svfiprintf_r+0xf8>
 800bda6:	0035      	movs	r5, r6
 800bda8:	2100      	movs	r1, #0
 800bdaa:	200a      	movs	r0, #10
 800bdac:	68e3      	ldr	r3, [r4, #12]
 800bdae:	782a      	ldrb	r2, [r5, #0]
 800bdb0:	1c6e      	adds	r6, r5, #1
 800bdb2:	3a30      	subs	r2, #48	; 0x30
 800bdb4:	2a09      	cmp	r2, #9
 800bdb6:	d94e      	bls.n	800be56 <_svfiprintf_r+0x17a>
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	d111      	bne.n	800bde0 <_svfiprintf_r+0x104>
 800bdbc:	e017      	b.n	800bdee <_svfiprintf_r+0x112>
 800bdbe:	3501      	adds	r5, #1
 800bdc0:	e7b0      	b.n	800bd24 <_svfiprintf_r+0x48>
 800bdc2:	4b41      	ldr	r3, [pc, #260]	; (800bec8 <_svfiprintf_r+0x1ec>)
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	1ac0      	subs	r0, r0, r3
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4083      	lsls	r3, r0
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	002e      	movs	r6, r5
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	e7ce      	b.n	800bd72 <_svfiprintf_r+0x96>
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	1d19      	adds	r1, r3, #4
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	9107      	str	r1, [sp, #28]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	db01      	blt.n	800bde4 <_svfiprintf_r+0x108>
 800bde0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bde2:	e004      	b.n	800bdee <_svfiprintf_r+0x112>
 800bde4:	425b      	negs	r3, r3
 800bde6:	60e3      	str	r3, [r4, #12]
 800bde8:	2302      	movs	r3, #2
 800bdea:	4313      	orrs	r3, r2
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	782b      	ldrb	r3, [r5, #0]
 800bdf0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf2:	d10a      	bne.n	800be0a <_svfiprintf_r+0x12e>
 800bdf4:	786b      	ldrb	r3, [r5, #1]
 800bdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf8:	d135      	bne.n	800be66 <_svfiprintf_r+0x18a>
 800bdfa:	9b07      	ldr	r3, [sp, #28]
 800bdfc:	3502      	adds	r5, #2
 800bdfe:	1d1a      	adds	r2, r3, #4
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	9207      	str	r2, [sp, #28]
 800be04:	2b00      	cmp	r3, #0
 800be06:	db2b      	blt.n	800be60 <_svfiprintf_r+0x184>
 800be08:	9309      	str	r3, [sp, #36]	; 0x24
 800be0a:	4e30      	ldr	r6, [pc, #192]	; (800becc <_svfiprintf_r+0x1f0>)
 800be0c:	2203      	movs	r2, #3
 800be0e:	0030      	movs	r0, r6
 800be10:	7829      	ldrb	r1, [r5, #0]
 800be12:	f7ff f91d 	bl	800b050 <memchr>
 800be16:	2800      	cmp	r0, #0
 800be18:	d006      	beq.n	800be28 <_svfiprintf_r+0x14c>
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	1b80      	subs	r0, r0, r6
 800be1e:	4083      	lsls	r3, r0
 800be20:	6822      	ldr	r2, [r4, #0]
 800be22:	3501      	adds	r5, #1
 800be24:	4313      	orrs	r3, r2
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	7829      	ldrb	r1, [r5, #0]
 800be2a:	2206      	movs	r2, #6
 800be2c:	4828      	ldr	r0, [pc, #160]	; (800bed0 <_svfiprintf_r+0x1f4>)
 800be2e:	1c6e      	adds	r6, r5, #1
 800be30:	7621      	strb	r1, [r4, #24]
 800be32:	f7ff f90d 	bl	800b050 <memchr>
 800be36:	2800      	cmp	r0, #0
 800be38:	d03c      	beq.n	800beb4 <_svfiprintf_r+0x1d8>
 800be3a:	4b26      	ldr	r3, [pc, #152]	; (800bed4 <_svfiprintf_r+0x1f8>)
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d125      	bne.n	800be8c <_svfiprintf_r+0x1b0>
 800be40:	2207      	movs	r2, #7
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	3307      	adds	r3, #7
 800be46:	4393      	bics	r3, r2
 800be48:	3308      	adds	r3, #8
 800be4a:	9307      	str	r3, [sp, #28]
 800be4c:	6963      	ldr	r3, [r4, #20]
 800be4e:	9a04      	ldr	r2, [sp, #16]
 800be50:	189b      	adds	r3, r3, r2
 800be52:	6163      	str	r3, [r4, #20]
 800be54:	e765      	b.n	800bd22 <_svfiprintf_r+0x46>
 800be56:	4343      	muls	r3, r0
 800be58:	0035      	movs	r5, r6
 800be5a:	2101      	movs	r1, #1
 800be5c:	189b      	adds	r3, r3, r2
 800be5e:	e7a6      	b.n	800bdae <_svfiprintf_r+0xd2>
 800be60:	2301      	movs	r3, #1
 800be62:	425b      	negs	r3, r3
 800be64:	e7d0      	b.n	800be08 <_svfiprintf_r+0x12c>
 800be66:	2300      	movs	r3, #0
 800be68:	200a      	movs	r0, #10
 800be6a:	001a      	movs	r2, r3
 800be6c:	3501      	adds	r5, #1
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	7829      	ldrb	r1, [r5, #0]
 800be72:	1c6e      	adds	r6, r5, #1
 800be74:	3930      	subs	r1, #48	; 0x30
 800be76:	2909      	cmp	r1, #9
 800be78:	d903      	bls.n	800be82 <_svfiprintf_r+0x1a6>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0c5      	beq.n	800be0a <_svfiprintf_r+0x12e>
 800be7e:	9209      	str	r2, [sp, #36]	; 0x24
 800be80:	e7c3      	b.n	800be0a <_svfiprintf_r+0x12e>
 800be82:	4342      	muls	r2, r0
 800be84:	0035      	movs	r5, r6
 800be86:	2301      	movs	r3, #1
 800be88:	1852      	adds	r2, r2, r1
 800be8a:	e7f1      	b.n	800be70 <_svfiprintf_r+0x194>
 800be8c:	ab07      	add	r3, sp, #28
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	003a      	movs	r2, r7
 800be92:	0021      	movs	r1, r4
 800be94:	4b10      	ldr	r3, [pc, #64]	; (800bed8 <_svfiprintf_r+0x1fc>)
 800be96:	9803      	ldr	r0, [sp, #12]
 800be98:	f7fc f8ca 	bl	8008030 <_printf_float>
 800be9c:	9004      	str	r0, [sp, #16]
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	3301      	adds	r3, #1
 800bea2:	d1d3      	bne.n	800be4c <_svfiprintf_r+0x170>
 800bea4:	89bb      	ldrh	r3, [r7, #12]
 800bea6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bea8:	065b      	lsls	r3, r3, #25
 800beaa:	d400      	bmi.n	800beae <_svfiprintf_r+0x1d2>
 800beac:	e72d      	b.n	800bd0a <_svfiprintf_r+0x2e>
 800beae:	2001      	movs	r0, #1
 800beb0:	4240      	negs	r0, r0
 800beb2:	e72a      	b.n	800bd0a <_svfiprintf_r+0x2e>
 800beb4:	ab07      	add	r3, sp, #28
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	003a      	movs	r2, r7
 800beba:	0021      	movs	r1, r4
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <_svfiprintf_r+0x1fc>)
 800bebe:	9803      	ldr	r0, [sp, #12]
 800bec0:	f7fc fb68 	bl	8008594 <_printf_i>
 800bec4:	e7ea      	b.n	800be9c <_svfiprintf_r+0x1c0>
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	0800cec4 	.word	0x0800cec4
 800becc:	0800ceca 	.word	0x0800ceca
 800bed0:	0800cece 	.word	0x0800cece
 800bed4:	08008031 	.word	0x08008031
 800bed8:	0800bc19 	.word	0x0800bc19

0800bedc <__sfputc_r>:
 800bedc:	6893      	ldr	r3, [r2, #8]
 800bede:	b510      	push	{r4, lr}
 800bee0:	3b01      	subs	r3, #1
 800bee2:	6093      	str	r3, [r2, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	da04      	bge.n	800bef2 <__sfputc_r+0x16>
 800bee8:	6994      	ldr	r4, [r2, #24]
 800beea:	42a3      	cmp	r3, r4
 800beec:	db07      	blt.n	800befe <__sfputc_r+0x22>
 800beee:	290a      	cmp	r1, #10
 800bef0:	d005      	beq.n	800befe <__sfputc_r+0x22>
 800bef2:	6813      	ldr	r3, [r2, #0]
 800bef4:	1c58      	adds	r0, r3, #1
 800bef6:	6010      	str	r0, [r2, #0]
 800bef8:	7019      	strb	r1, [r3, #0]
 800befa:	0008      	movs	r0, r1
 800befc:	bd10      	pop	{r4, pc}
 800befe:	f000 f9c5 	bl	800c28c <__swbuf_r>
 800bf02:	0001      	movs	r1, r0
 800bf04:	e7f9      	b.n	800befa <__sfputc_r+0x1e>

0800bf06 <__sfputs_r>:
 800bf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf08:	0006      	movs	r6, r0
 800bf0a:	000f      	movs	r7, r1
 800bf0c:	0014      	movs	r4, r2
 800bf0e:	18d5      	adds	r5, r2, r3
 800bf10:	42ac      	cmp	r4, r5
 800bf12:	d101      	bne.n	800bf18 <__sfputs_r+0x12>
 800bf14:	2000      	movs	r0, #0
 800bf16:	e007      	b.n	800bf28 <__sfputs_r+0x22>
 800bf18:	7821      	ldrb	r1, [r4, #0]
 800bf1a:	003a      	movs	r2, r7
 800bf1c:	0030      	movs	r0, r6
 800bf1e:	f7ff ffdd 	bl	800bedc <__sfputc_r>
 800bf22:	3401      	adds	r4, #1
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d1f3      	bne.n	800bf10 <__sfputs_r+0xa>
 800bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf2c <_vfiprintf_r>:
 800bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2e:	b0a1      	sub	sp, #132	; 0x84
 800bf30:	0006      	movs	r6, r0
 800bf32:	000c      	movs	r4, r1
 800bf34:	001f      	movs	r7, r3
 800bf36:	9203      	str	r2, [sp, #12]
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d004      	beq.n	800bf46 <_vfiprintf_r+0x1a>
 800bf3c:	6983      	ldr	r3, [r0, #24]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <_vfiprintf_r+0x1a>
 800bf42:	f7fe fc4d 	bl	800a7e0 <__sinit>
 800bf46:	4b8e      	ldr	r3, [pc, #568]	; (800c180 <_vfiprintf_r+0x254>)
 800bf48:	429c      	cmp	r4, r3
 800bf4a:	d11c      	bne.n	800bf86 <_vfiprintf_r+0x5a>
 800bf4c:	6874      	ldr	r4, [r6, #4]
 800bf4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf50:	07db      	lsls	r3, r3, #31
 800bf52:	d405      	bmi.n	800bf60 <_vfiprintf_r+0x34>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	059b      	lsls	r3, r3, #22
 800bf58:	d402      	bmi.n	800bf60 <_vfiprintf_r+0x34>
 800bf5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf5c:	f7ff f859 	bl	800b012 <__retarget_lock_acquire_recursive>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	071b      	lsls	r3, r3, #28
 800bf64:	d502      	bpl.n	800bf6c <_vfiprintf_r+0x40>
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d11d      	bne.n	800bfa8 <_vfiprintf_r+0x7c>
 800bf6c:	0021      	movs	r1, r4
 800bf6e:	0030      	movs	r0, r6
 800bf70:	f000 fa04 	bl	800c37c <__swsetup_r>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d017      	beq.n	800bfa8 <_vfiprintf_r+0x7c>
 800bf78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf7a:	07db      	lsls	r3, r3, #31
 800bf7c:	d50d      	bpl.n	800bf9a <_vfiprintf_r+0x6e>
 800bf7e:	2001      	movs	r0, #1
 800bf80:	4240      	negs	r0, r0
 800bf82:	b021      	add	sp, #132	; 0x84
 800bf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf86:	4b7f      	ldr	r3, [pc, #508]	; (800c184 <_vfiprintf_r+0x258>)
 800bf88:	429c      	cmp	r4, r3
 800bf8a:	d101      	bne.n	800bf90 <_vfiprintf_r+0x64>
 800bf8c:	68b4      	ldr	r4, [r6, #8]
 800bf8e:	e7de      	b.n	800bf4e <_vfiprintf_r+0x22>
 800bf90:	4b7d      	ldr	r3, [pc, #500]	; (800c188 <_vfiprintf_r+0x25c>)
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d1db      	bne.n	800bf4e <_vfiprintf_r+0x22>
 800bf96:	68f4      	ldr	r4, [r6, #12]
 800bf98:	e7d9      	b.n	800bf4e <_vfiprintf_r+0x22>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	059b      	lsls	r3, r3, #22
 800bf9e:	d4ee      	bmi.n	800bf7e <_vfiprintf_r+0x52>
 800bfa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfa2:	f7ff f837 	bl	800b014 <__retarget_lock_release_recursive>
 800bfa6:	e7ea      	b.n	800bf7e <_vfiprintf_r+0x52>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	ad08      	add	r5, sp, #32
 800bfac:	616b      	str	r3, [r5, #20]
 800bfae:	3320      	adds	r3, #32
 800bfb0:	766b      	strb	r3, [r5, #25]
 800bfb2:	3310      	adds	r3, #16
 800bfb4:	76ab      	strb	r3, [r5, #26]
 800bfb6:	9707      	str	r7, [sp, #28]
 800bfb8:	9f03      	ldr	r7, [sp, #12]
 800bfba:	783b      	ldrb	r3, [r7, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <_vfiprintf_r+0x98>
 800bfc0:	2b25      	cmp	r3, #37	; 0x25
 800bfc2:	d14e      	bne.n	800c062 <_vfiprintf_r+0x136>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	1afb      	subs	r3, r7, r3
 800bfc8:	9305      	str	r3, [sp, #20]
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	429f      	cmp	r7, r3
 800bfce:	d00d      	beq.n	800bfec <_vfiprintf_r+0xc0>
 800bfd0:	9b05      	ldr	r3, [sp, #20]
 800bfd2:	0021      	movs	r1, r4
 800bfd4:	0030      	movs	r0, r6
 800bfd6:	9a03      	ldr	r2, [sp, #12]
 800bfd8:	f7ff ff95 	bl	800bf06 <__sfputs_r>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d100      	bne.n	800bfe2 <_vfiprintf_r+0xb6>
 800bfe0:	e0b5      	b.n	800c14e <_vfiprintf_r+0x222>
 800bfe2:	696a      	ldr	r2, [r5, #20]
 800bfe4:	9b05      	ldr	r3, [sp, #20]
 800bfe6:	4694      	mov	ip, r2
 800bfe8:	4463      	add	r3, ip
 800bfea:	616b      	str	r3, [r5, #20]
 800bfec:	783b      	ldrb	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d100      	bne.n	800bff4 <_vfiprintf_r+0xc8>
 800bff2:	e0ac      	b.n	800c14e <_vfiprintf_r+0x222>
 800bff4:	2201      	movs	r2, #1
 800bff6:	1c7b      	adds	r3, r7, #1
 800bff8:	9303      	str	r3, [sp, #12]
 800bffa:	2300      	movs	r3, #0
 800bffc:	4252      	negs	r2, r2
 800bffe:	606a      	str	r2, [r5, #4]
 800c000:	a904      	add	r1, sp, #16
 800c002:	3254      	adds	r2, #84	; 0x54
 800c004:	1852      	adds	r2, r2, r1
 800c006:	602b      	str	r3, [r5, #0]
 800c008:	60eb      	str	r3, [r5, #12]
 800c00a:	60ab      	str	r3, [r5, #8]
 800c00c:	7013      	strb	r3, [r2, #0]
 800c00e:	65ab      	str	r3, [r5, #88]	; 0x58
 800c010:	9b03      	ldr	r3, [sp, #12]
 800c012:	2205      	movs	r2, #5
 800c014:	7819      	ldrb	r1, [r3, #0]
 800c016:	485d      	ldr	r0, [pc, #372]	; (800c18c <_vfiprintf_r+0x260>)
 800c018:	f7ff f81a 	bl	800b050 <memchr>
 800c01c:	9b03      	ldr	r3, [sp, #12]
 800c01e:	1c5f      	adds	r7, r3, #1
 800c020:	2800      	cmp	r0, #0
 800c022:	d120      	bne.n	800c066 <_vfiprintf_r+0x13a>
 800c024:	682a      	ldr	r2, [r5, #0]
 800c026:	06d3      	lsls	r3, r2, #27
 800c028:	d504      	bpl.n	800c034 <_vfiprintf_r+0x108>
 800c02a:	2353      	movs	r3, #83	; 0x53
 800c02c:	a904      	add	r1, sp, #16
 800c02e:	185b      	adds	r3, r3, r1
 800c030:	2120      	movs	r1, #32
 800c032:	7019      	strb	r1, [r3, #0]
 800c034:	0713      	lsls	r3, r2, #28
 800c036:	d504      	bpl.n	800c042 <_vfiprintf_r+0x116>
 800c038:	2353      	movs	r3, #83	; 0x53
 800c03a:	a904      	add	r1, sp, #16
 800c03c:	185b      	adds	r3, r3, r1
 800c03e:	212b      	movs	r1, #43	; 0x2b
 800c040:	7019      	strb	r1, [r3, #0]
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2b2a      	cmp	r3, #42	; 0x2a
 800c048:	d016      	beq.n	800c078 <_vfiprintf_r+0x14c>
 800c04a:	2100      	movs	r1, #0
 800c04c:	68eb      	ldr	r3, [r5, #12]
 800c04e:	9f03      	ldr	r7, [sp, #12]
 800c050:	783a      	ldrb	r2, [r7, #0]
 800c052:	1c78      	adds	r0, r7, #1
 800c054:	3a30      	subs	r2, #48	; 0x30
 800c056:	4684      	mov	ip, r0
 800c058:	2a09      	cmp	r2, #9
 800c05a:	d94f      	bls.n	800c0fc <_vfiprintf_r+0x1d0>
 800c05c:	2900      	cmp	r1, #0
 800c05e:	d111      	bne.n	800c084 <_vfiprintf_r+0x158>
 800c060:	e017      	b.n	800c092 <_vfiprintf_r+0x166>
 800c062:	3701      	adds	r7, #1
 800c064:	e7a9      	b.n	800bfba <_vfiprintf_r+0x8e>
 800c066:	4b49      	ldr	r3, [pc, #292]	; (800c18c <_vfiprintf_r+0x260>)
 800c068:	682a      	ldr	r2, [r5, #0]
 800c06a:	1ac0      	subs	r0, r0, r3
 800c06c:	2301      	movs	r3, #1
 800c06e:	4083      	lsls	r3, r0
 800c070:	4313      	orrs	r3, r2
 800c072:	602b      	str	r3, [r5, #0]
 800c074:	9703      	str	r7, [sp, #12]
 800c076:	e7cb      	b.n	800c010 <_vfiprintf_r+0xe4>
 800c078:	9b07      	ldr	r3, [sp, #28]
 800c07a:	1d19      	adds	r1, r3, #4
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	9107      	str	r1, [sp, #28]
 800c080:	2b00      	cmp	r3, #0
 800c082:	db01      	blt.n	800c088 <_vfiprintf_r+0x15c>
 800c084:	930b      	str	r3, [sp, #44]	; 0x2c
 800c086:	e004      	b.n	800c092 <_vfiprintf_r+0x166>
 800c088:	425b      	negs	r3, r3
 800c08a:	60eb      	str	r3, [r5, #12]
 800c08c:	2302      	movs	r3, #2
 800c08e:	4313      	orrs	r3, r2
 800c090:	602b      	str	r3, [r5, #0]
 800c092:	783b      	ldrb	r3, [r7, #0]
 800c094:	2b2e      	cmp	r3, #46	; 0x2e
 800c096:	d10a      	bne.n	800c0ae <_vfiprintf_r+0x182>
 800c098:	787b      	ldrb	r3, [r7, #1]
 800c09a:	2b2a      	cmp	r3, #42	; 0x2a
 800c09c:	d137      	bne.n	800c10e <_vfiprintf_r+0x1e2>
 800c09e:	9b07      	ldr	r3, [sp, #28]
 800c0a0:	3702      	adds	r7, #2
 800c0a2:	1d1a      	adds	r2, r3, #4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	9207      	str	r2, [sp, #28]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	db2d      	blt.n	800c108 <_vfiprintf_r+0x1dc>
 800c0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ae:	2203      	movs	r2, #3
 800c0b0:	7839      	ldrb	r1, [r7, #0]
 800c0b2:	4837      	ldr	r0, [pc, #220]	; (800c190 <_vfiprintf_r+0x264>)
 800c0b4:	f7fe ffcc 	bl	800b050 <memchr>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d007      	beq.n	800c0cc <_vfiprintf_r+0x1a0>
 800c0bc:	4b34      	ldr	r3, [pc, #208]	; (800c190 <_vfiprintf_r+0x264>)
 800c0be:	682a      	ldr	r2, [r5, #0]
 800c0c0:	1ac0      	subs	r0, r0, r3
 800c0c2:	2340      	movs	r3, #64	; 0x40
 800c0c4:	4083      	lsls	r3, r0
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	3701      	adds	r7, #1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	7839      	ldrb	r1, [r7, #0]
 800c0ce:	1c7b      	adds	r3, r7, #1
 800c0d0:	2206      	movs	r2, #6
 800c0d2:	4830      	ldr	r0, [pc, #192]	; (800c194 <_vfiprintf_r+0x268>)
 800c0d4:	9303      	str	r3, [sp, #12]
 800c0d6:	7629      	strb	r1, [r5, #24]
 800c0d8:	f7fe ffba 	bl	800b050 <memchr>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d045      	beq.n	800c16c <_vfiprintf_r+0x240>
 800c0e0:	4b2d      	ldr	r3, [pc, #180]	; (800c198 <_vfiprintf_r+0x26c>)
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d127      	bne.n	800c136 <_vfiprintf_r+0x20a>
 800c0e6:	2207      	movs	r2, #7
 800c0e8:	9b07      	ldr	r3, [sp, #28]
 800c0ea:	3307      	adds	r3, #7
 800c0ec:	4393      	bics	r3, r2
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	9307      	str	r3, [sp, #28]
 800c0f2:	696b      	ldr	r3, [r5, #20]
 800c0f4:	9a04      	ldr	r2, [sp, #16]
 800c0f6:	189b      	adds	r3, r3, r2
 800c0f8:	616b      	str	r3, [r5, #20]
 800c0fa:	e75d      	b.n	800bfb8 <_vfiprintf_r+0x8c>
 800c0fc:	210a      	movs	r1, #10
 800c0fe:	434b      	muls	r3, r1
 800c100:	4667      	mov	r7, ip
 800c102:	189b      	adds	r3, r3, r2
 800c104:	3909      	subs	r1, #9
 800c106:	e7a3      	b.n	800c050 <_vfiprintf_r+0x124>
 800c108:	2301      	movs	r3, #1
 800c10a:	425b      	negs	r3, r3
 800c10c:	e7ce      	b.n	800c0ac <_vfiprintf_r+0x180>
 800c10e:	2300      	movs	r3, #0
 800c110:	001a      	movs	r2, r3
 800c112:	3701      	adds	r7, #1
 800c114:	606b      	str	r3, [r5, #4]
 800c116:	7839      	ldrb	r1, [r7, #0]
 800c118:	1c78      	adds	r0, r7, #1
 800c11a:	3930      	subs	r1, #48	; 0x30
 800c11c:	4684      	mov	ip, r0
 800c11e:	2909      	cmp	r1, #9
 800c120:	d903      	bls.n	800c12a <_vfiprintf_r+0x1fe>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d0c3      	beq.n	800c0ae <_vfiprintf_r+0x182>
 800c126:	9209      	str	r2, [sp, #36]	; 0x24
 800c128:	e7c1      	b.n	800c0ae <_vfiprintf_r+0x182>
 800c12a:	230a      	movs	r3, #10
 800c12c:	435a      	muls	r2, r3
 800c12e:	4667      	mov	r7, ip
 800c130:	1852      	adds	r2, r2, r1
 800c132:	3b09      	subs	r3, #9
 800c134:	e7ef      	b.n	800c116 <_vfiprintf_r+0x1ea>
 800c136:	ab07      	add	r3, sp, #28
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	0022      	movs	r2, r4
 800c13c:	0029      	movs	r1, r5
 800c13e:	0030      	movs	r0, r6
 800c140:	4b16      	ldr	r3, [pc, #88]	; (800c19c <_vfiprintf_r+0x270>)
 800c142:	f7fb ff75 	bl	8008030 <_printf_float>
 800c146:	9004      	str	r0, [sp, #16]
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	3301      	adds	r3, #1
 800c14c:	d1d1      	bne.n	800c0f2 <_vfiprintf_r+0x1c6>
 800c14e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c150:	07db      	lsls	r3, r3, #31
 800c152:	d405      	bmi.n	800c160 <_vfiprintf_r+0x234>
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	059b      	lsls	r3, r3, #22
 800c158:	d402      	bmi.n	800c160 <_vfiprintf_r+0x234>
 800c15a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c15c:	f7fe ff5a 	bl	800b014 <__retarget_lock_release_recursive>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	065b      	lsls	r3, r3, #25
 800c164:	d500      	bpl.n	800c168 <_vfiprintf_r+0x23c>
 800c166:	e70a      	b.n	800bf7e <_vfiprintf_r+0x52>
 800c168:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c16a:	e70a      	b.n	800bf82 <_vfiprintf_r+0x56>
 800c16c:	ab07      	add	r3, sp, #28
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	0022      	movs	r2, r4
 800c172:	0029      	movs	r1, r5
 800c174:	0030      	movs	r0, r6
 800c176:	4b09      	ldr	r3, [pc, #36]	; (800c19c <_vfiprintf_r+0x270>)
 800c178:	f7fc fa0c 	bl	8008594 <_printf_i>
 800c17c:	e7e3      	b.n	800c146 <_vfiprintf_r+0x21a>
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	0800ccac 	.word	0x0800ccac
 800c184:	0800cccc 	.word	0x0800cccc
 800c188:	0800cc8c 	.word	0x0800cc8c
 800c18c:	0800cec4 	.word	0x0800cec4
 800c190:	0800ceca 	.word	0x0800ceca
 800c194:	0800cece 	.word	0x0800cece
 800c198:	08008031 	.word	0x08008031
 800c19c:	0800bf07 	.word	0x0800bf07

0800c1a0 <nan>:
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	4901      	ldr	r1, [pc, #4]	; (800c1a8 <nan+0x8>)
 800c1a4:	4770      	bx	lr
 800c1a6:	46c0      	nop			; (mov r8, r8)
 800c1a8:	7ff80000 	.word	0x7ff80000

0800c1ac <_sbrk_r>:
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	b570      	push	{r4, r5, r6, lr}
 800c1b0:	4d06      	ldr	r5, [pc, #24]	; (800c1cc <_sbrk_r+0x20>)
 800c1b2:	0004      	movs	r4, r0
 800c1b4:	0008      	movs	r0, r1
 800c1b6:	602b      	str	r3, [r5, #0]
 800c1b8:	f7f6 ff32 	bl	8003020 <_sbrk>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d103      	bne.n	800c1c8 <_sbrk_r+0x1c>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d000      	beq.n	800c1c8 <_sbrk_r+0x1c>
 800c1c6:	6023      	str	r3, [r4, #0]
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	46c0      	nop			; (mov r8, r8)
 800c1cc:	20000570 	.word	0x20000570

0800c1d0 <__sread>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	000c      	movs	r4, r1
 800c1d4:	250e      	movs	r5, #14
 800c1d6:	5f49      	ldrsh	r1, [r1, r5]
 800c1d8:	f000 fb28 	bl	800c82c <_read_r>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	db03      	blt.n	800c1e8 <__sread+0x18>
 800c1e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c1e2:	181b      	adds	r3, r3, r0
 800c1e4:	6563      	str	r3, [r4, #84]	; 0x54
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	4a02      	ldr	r2, [pc, #8]	; (800c1f4 <__sread+0x24>)
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	81a3      	strh	r3, [r4, #12]
 800c1f0:	e7f9      	b.n	800c1e6 <__sread+0x16>
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	ffffefff 	.word	0xffffefff

0800c1f8 <__swrite>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	001f      	movs	r7, r3
 800c1fc:	898b      	ldrh	r3, [r1, #12]
 800c1fe:	0005      	movs	r5, r0
 800c200:	000c      	movs	r4, r1
 800c202:	0016      	movs	r6, r2
 800c204:	05db      	lsls	r3, r3, #23
 800c206:	d505      	bpl.n	800c214 <__swrite+0x1c>
 800c208:	230e      	movs	r3, #14
 800c20a:	5ec9      	ldrsh	r1, [r1, r3]
 800c20c:	2200      	movs	r2, #0
 800c20e:	2302      	movs	r3, #2
 800c210:	f000 fa38 	bl	800c684 <_lseek_r>
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	4a05      	ldr	r2, [pc, #20]	; (800c22c <__swrite+0x34>)
 800c218:	0028      	movs	r0, r5
 800c21a:	4013      	ands	r3, r2
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	0032      	movs	r2, r6
 800c220:	230e      	movs	r3, #14
 800c222:	5ee1      	ldrsh	r1, [r4, r3]
 800c224:	003b      	movs	r3, r7
 800c226:	f000 f895 	bl	800c354 <_write_r>
 800c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c22c:	ffffefff 	.word	0xffffefff

0800c230 <__sseek>:
 800c230:	b570      	push	{r4, r5, r6, lr}
 800c232:	000c      	movs	r4, r1
 800c234:	250e      	movs	r5, #14
 800c236:	5f49      	ldrsh	r1, [r1, r5]
 800c238:	f000 fa24 	bl	800c684 <_lseek_r>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	1c42      	adds	r2, r0, #1
 800c240:	d103      	bne.n	800c24a <__sseek+0x1a>
 800c242:	4a05      	ldr	r2, [pc, #20]	; (800c258 <__sseek+0x28>)
 800c244:	4013      	ands	r3, r2
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	bd70      	pop	{r4, r5, r6, pc}
 800c24a:	2280      	movs	r2, #128	; 0x80
 800c24c:	0152      	lsls	r2, r2, #5
 800c24e:	4313      	orrs	r3, r2
 800c250:	81a3      	strh	r3, [r4, #12]
 800c252:	6560      	str	r0, [r4, #84]	; 0x54
 800c254:	e7f8      	b.n	800c248 <__sseek+0x18>
 800c256:	46c0      	nop			; (mov r8, r8)
 800c258:	ffffefff 	.word	0xffffefff

0800c25c <__sclose>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	230e      	movs	r3, #14
 800c260:	5ec9      	ldrsh	r1, [r1, r3]
 800c262:	f000 f921 	bl	800c4a8 <_close_r>
 800c266:	bd10      	pop	{r4, pc}

0800c268 <strncmp>:
 800c268:	b530      	push	{r4, r5, lr}
 800c26a:	0005      	movs	r5, r0
 800c26c:	1e10      	subs	r0, r2, #0
 800c26e:	d008      	beq.n	800c282 <strncmp+0x1a>
 800c270:	2400      	movs	r4, #0
 800c272:	3a01      	subs	r2, #1
 800c274:	5d2b      	ldrb	r3, [r5, r4]
 800c276:	5d08      	ldrb	r0, [r1, r4]
 800c278:	4283      	cmp	r3, r0
 800c27a:	d101      	bne.n	800c280 <strncmp+0x18>
 800c27c:	4294      	cmp	r4, r2
 800c27e:	d101      	bne.n	800c284 <strncmp+0x1c>
 800c280:	1a18      	subs	r0, r3, r0
 800c282:	bd30      	pop	{r4, r5, pc}
 800c284:	3401      	adds	r4, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1f4      	bne.n	800c274 <strncmp+0xc>
 800c28a:	e7f9      	b.n	800c280 <strncmp+0x18>

0800c28c <__swbuf_r>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	0005      	movs	r5, r0
 800c290:	000e      	movs	r6, r1
 800c292:	0014      	movs	r4, r2
 800c294:	2800      	cmp	r0, #0
 800c296:	d004      	beq.n	800c2a2 <__swbuf_r+0x16>
 800c298:	6983      	ldr	r3, [r0, #24]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <__swbuf_r+0x16>
 800c29e:	f7fe fa9f 	bl	800a7e0 <__sinit>
 800c2a2:	4b22      	ldr	r3, [pc, #136]	; (800c32c <__swbuf_r+0xa0>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d12e      	bne.n	800c306 <__swbuf_r+0x7a>
 800c2a8:	686c      	ldr	r4, [r5, #4]
 800c2aa:	69a3      	ldr	r3, [r4, #24]
 800c2ac:	60a3      	str	r3, [r4, #8]
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	071b      	lsls	r3, r3, #28
 800c2b2:	d532      	bpl.n	800c31a <__swbuf_r+0x8e>
 800c2b4:	6923      	ldr	r3, [r4, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d02f      	beq.n	800c31a <__swbuf_r+0x8e>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	6922      	ldr	r2, [r4, #16]
 800c2be:	b2f7      	uxtb	r7, r6
 800c2c0:	1a98      	subs	r0, r3, r2
 800c2c2:	6963      	ldr	r3, [r4, #20]
 800c2c4:	b2f6      	uxtb	r6, r6
 800c2c6:	4283      	cmp	r3, r0
 800c2c8:	dc05      	bgt.n	800c2d6 <__swbuf_r+0x4a>
 800c2ca:	0021      	movs	r1, r4
 800c2cc:	0028      	movs	r0, r5
 800c2ce:	f000 f989 	bl	800c5e4 <_fflush_r>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d127      	bne.n	800c326 <__swbuf_r+0x9a>
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	3001      	adds	r0, #1
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	60a3      	str	r3, [r4, #8]
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	1c5a      	adds	r2, r3, #1
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	701f      	strb	r7, [r3, #0]
 800c2e6:	6963      	ldr	r3, [r4, #20]
 800c2e8:	4283      	cmp	r3, r0
 800c2ea:	d004      	beq.n	800c2f6 <__swbuf_r+0x6a>
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	07db      	lsls	r3, r3, #31
 800c2f0:	d507      	bpl.n	800c302 <__swbuf_r+0x76>
 800c2f2:	2e0a      	cmp	r6, #10
 800c2f4:	d105      	bne.n	800c302 <__swbuf_r+0x76>
 800c2f6:	0021      	movs	r1, r4
 800c2f8:	0028      	movs	r0, r5
 800c2fa:	f000 f973 	bl	800c5e4 <_fflush_r>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d111      	bne.n	800c326 <__swbuf_r+0x9a>
 800c302:	0030      	movs	r0, r6
 800c304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c306:	4b0a      	ldr	r3, [pc, #40]	; (800c330 <__swbuf_r+0xa4>)
 800c308:	429c      	cmp	r4, r3
 800c30a:	d101      	bne.n	800c310 <__swbuf_r+0x84>
 800c30c:	68ac      	ldr	r4, [r5, #8]
 800c30e:	e7cc      	b.n	800c2aa <__swbuf_r+0x1e>
 800c310:	4b08      	ldr	r3, [pc, #32]	; (800c334 <__swbuf_r+0xa8>)
 800c312:	429c      	cmp	r4, r3
 800c314:	d1c9      	bne.n	800c2aa <__swbuf_r+0x1e>
 800c316:	68ec      	ldr	r4, [r5, #12]
 800c318:	e7c7      	b.n	800c2aa <__swbuf_r+0x1e>
 800c31a:	0021      	movs	r1, r4
 800c31c:	0028      	movs	r0, r5
 800c31e:	f000 f82d 	bl	800c37c <__swsetup_r>
 800c322:	2800      	cmp	r0, #0
 800c324:	d0c9      	beq.n	800c2ba <__swbuf_r+0x2e>
 800c326:	2601      	movs	r6, #1
 800c328:	4276      	negs	r6, r6
 800c32a:	e7ea      	b.n	800c302 <__swbuf_r+0x76>
 800c32c:	0800ccac 	.word	0x0800ccac
 800c330:	0800cccc 	.word	0x0800cccc
 800c334:	0800cc8c 	.word	0x0800cc8c

0800c338 <__ascii_wctomb>:
 800c338:	0003      	movs	r3, r0
 800c33a:	1e08      	subs	r0, r1, #0
 800c33c:	d005      	beq.n	800c34a <__ascii_wctomb+0x12>
 800c33e:	2aff      	cmp	r2, #255	; 0xff
 800c340:	d904      	bls.n	800c34c <__ascii_wctomb+0x14>
 800c342:	228a      	movs	r2, #138	; 0x8a
 800c344:	2001      	movs	r0, #1
 800c346:	601a      	str	r2, [r3, #0]
 800c348:	4240      	negs	r0, r0
 800c34a:	4770      	bx	lr
 800c34c:	2001      	movs	r0, #1
 800c34e:	700a      	strb	r2, [r1, #0]
 800c350:	e7fb      	b.n	800c34a <__ascii_wctomb+0x12>
	...

0800c354 <_write_r>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	0004      	movs	r4, r0
 800c358:	0008      	movs	r0, r1
 800c35a:	0011      	movs	r1, r2
 800c35c:	001a      	movs	r2, r3
 800c35e:	2300      	movs	r3, #0
 800c360:	4d05      	ldr	r5, [pc, #20]	; (800c378 <_write_r+0x24>)
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	f7f6 fe13 	bl	8002f8e <_write>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d103      	bne.n	800c374 <_write_r+0x20>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d000      	beq.n	800c374 <_write_r+0x20>
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	bd70      	pop	{r4, r5, r6, pc}
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	20000570 	.word	0x20000570

0800c37c <__swsetup_r>:
 800c37c:	4b37      	ldr	r3, [pc, #220]	; (800c45c <__swsetup_r+0xe0>)
 800c37e:	b570      	push	{r4, r5, r6, lr}
 800c380:	681d      	ldr	r5, [r3, #0]
 800c382:	0006      	movs	r6, r0
 800c384:	000c      	movs	r4, r1
 800c386:	2d00      	cmp	r5, #0
 800c388:	d005      	beq.n	800c396 <__swsetup_r+0x1a>
 800c38a:	69ab      	ldr	r3, [r5, #24]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <__swsetup_r+0x1a>
 800c390:	0028      	movs	r0, r5
 800c392:	f7fe fa25 	bl	800a7e0 <__sinit>
 800c396:	4b32      	ldr	r3, [pc, #200]	; (800c460 <__swsetup_r+0xe4>)
 800c398:	429c      	cmp	r4, r3
 800c39a:	d10f      	bne.n	800c3bc <__swsetup_r+0x40>
 800c39c:	686c      	ldr	r4, [r5, #4]
 800c39e:	230c      	movs	r3, #12
 800c3a0:	5ee2      	ldrsh	r2, [r4, r3]
 800c3a2:	b293      	uxth	r3, r2
 800c3a4:	0711      	lsls	r1, r2, #28
 800c3a6:	d42d      	bmi.n	800c404 <__swsetup_r+0x88>
 800c3a8:	06d9      	lsls	r1, r3, #27
 800c3aa:	d411      	bmi.n	800c3d0 <__swsetup_r+0x54>
 800c3ac:	2309      	movs	r3, #9
 800c3ae:	2001      	movs	r0, #1
 800c3b0:	6033      	str	r3, [r6, #0]
 800c3b2:	3337      	adds	r3, #55	; 0x37
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	4240      	negs	r0, r0
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	4b29      	ldr	r3, [pc, #164]	; (800c464 <__swsetup_r+0xe8>)
 800c3be:	429c      	cmp	r4, r3
 800c3c0:	d101      	bne.n	800c3c6 <__swsetup_r+0x4a>
 800c3c2:	68ac      	ldr	r4, [r5, #8]
 800c3c4:	e7eb      	b.n	800c39e <__swsetup_r+0x22>
 800c3c6:	4b28      	ldr	r3, [pc, #160]	; (800c468 <__swsetup_r+0xec>)
 800c3c8:	429c      	cmp	r4, r3
 800c3ca:	d1e8      	bne.n	800c39e <__swsetup_r+0x22>
 800c3cc:	68ec      	ldr	r4, [r5, #12]
 800c3ce:	e7e6      	b.n	800c39e <__swsetup_r+0x22>
 800c3d0:	075b      	lsls	r3, r3, #29
 800c3d2:	d513      	bpl.n	800c3fc <__swsetup_r+0x80>
 800c3d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3d6:	2900      	cmp	r1, #0
 800c3d8:	d008      	beq.n	800c3ec <__swsetup_r+0x70>
 800c3da:	0023      	movs	r3, r4
 800c3dc:	3344      	adds	r3, #68	; 0x44
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	d002      	beq.n	800c3e8 <__swsetup_r+0x6c>
 800c3e2:	0030      	movs	r0, r6
 800c3e4:	f7ff fb36 	bl	800ba54 <_free_r>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ec:	2224      	movs	r2, #36	; 0x24
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	4393      	bics	r3, r2
 800c3f2:	81a3      	strh	r3, [r4, #12]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	6063      	str	r3, [r4, #4]
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	2308      	movs	r3, #8
 800c3fe:	89a2      	ldrh	r2, [r4, #12]
 800c400:	4313      	orrs	r3, r2
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	6923      	ldr	r3, [r4, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10b      	bne.n	800c422 <__swsetup_r+0xa6>
 800c40a:	21a0      	movs	r1, #160	; 0xa0
 800c40c:	2280      	movs	r2, #128	; 0x80
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	0089      	lsls	r1, r1, #2
 800c412:	0092      	lsls	r2, r2, #2
 800c414:	400b      	ands	r3, r1
 800c416:	4293      	cmp	r3, r2
 800c418:	d003      	beq.n	800c422 <__swsetup_r+0xa6>
 800c41a:	0021      	movs	r1, r4
 800c41c:	0030      	movs	r0, r6
 800c41e:	f000 f96d 	bl	800c6fc <__smakebuf_r>
 800c422:	220c      	movs	r2, #12
 800c424:	5ea3      	ldrsh	r3, [r4, r2]
 800c426:	2001      	movs	r0, #1
 800c428:	001a      	movs	r2, r3
 800c42a:	b299      	uxth	r1, r3
 800c42c:	4002      	ands	r2, r0
 800c42e:	4203      	tst	r3, r0
 800c430:	d00f      	beq.n	800c452 <__swsetup_r+0xd6>
 800c432:	2200      	movs	r2, #0
 800c434:	60a2      	str	r2, [r4, #8]
 800c436:	6962      	ldr	r2, [r4, #20]
 800c438:	4252      	negs	r2, r2
 800c43a:	61a2      	str	r2, [r4, #24]
 800c43c:	2000      	movs	r0, #0
 800c43e:	6922      	ldr	r2, [r4, #16]
 800c440:	4282      	cmp	r2, r0
 800c442:	d1ba      	bne.n	800c3ba <__swsetup_r+0x3e>
 800c444:	060a      	lsls	r2, r1, #24
 800c446:	d5b8      	bpl.n	800c3ba <__swsetup_r+0x3e>
 800c448:	2240      	movs	r2, #64	; 0x40
 800c44a:	4313      	orrs	r3, r2
 800c44c:	81a3      	strh	r3, [r4, #12]
 800c44e:	3801      	subs	r0, #1
 800c450:	e7b3      	b.n	800c3ba <__swsetup_r+0x3e>
 800c452:	0788      	lsls	r0, r1, #30
 800c454:	d400      	bmi.n	800c458 <__swsetup_r+0xdc>
 800c456:	6962      	ldr	r2, [r4, #20]
 800c458:	60a2      	str	r2, [r4, #8]
 800c45a:	e7ef      	b.n	800c43c <__swsetup_r+0xc0>
 800c45c:	20000024 	.word	0x20000024
 800c460:	0800ccac 	.word	0x0800ccac
 800c464:	0800cccc 	.word	0x0800cccc
 800c468:	0800cc8c 	.word	0x0800cc8c

0800c46c <__assert_func>:
 800c46c:	b530      	push	{r4, r5, lr}
 800c46e:	0014      	movs	r4, r2
 800c470:	001a      	movs	r2, r3
 800c472:	4b09      	ldr	r3, [pc, #36]	; (800c498 <__assert_func+0x2c>)
 800c474:	0005      	movs	r5, r0
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	b085      	sub	sp, #20
 800c47a:	68d8      	ldr	r0, [r3, #12]
 800c47c:	4b07      	ldr	r3, [pc, #28]	; (800c49c <__assert_func+0x30>)
 800c47e:	2c00      	cmp	r4, #0
 800c480:	d101      	bne.n	800c486 <__assert_func+0x1a>
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <__assert_func+0x34>)
 800c484:	001c      	movs	r4, r3
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	9100      	str	r1, [sp, #0]
 800c48a:	002b      	movs	r3, r5
 800c48c:	4905      	ldr	r1, [pc, #20]	; (800c4a4 <__assert_func+0x38>)
 800c48e:	9402      	str	r4, [sp, #8]
 800c490:	f000 f8e8 	bl	800c664 <fiprintf>
 800c494:	f000 f9de 	bl	800c854 <abort>
 800c498:	20000024 	.word	0x20000024
 800c49c:	0800ced5 	.word	0x0800ced5
 800c4a0:	0800cf10 	.word	0x0800cf10
 800c4a4:	0800cee2 	.word	0x0800cee2

0800c4a8 <_close_r>:
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	b570      	push	{r4, r5, r6, lr}
 800c4ac:	4d06      	ldr	r5, [pc, #24]	; (800c4c8 <_close_r+0x20>)
 800c4ae:	0004      	movs	r4, r0
 800c4b0:	0008      	movs	r0, r1
 800c4b2:	602b      	str	r3, [r5, #0]
 800c4b4:	f7f6 fd87 	bl	8002fc6 <_close>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d103      	bne.n	800c4c4 <_close_r+0x1c>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d000      	beq.n	800c4c4 <_close_r+0x1c>
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	bd70      	pop	{r4, r5, r6, pc}
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	20000570 	.word	0x20000570

0800c4cc <__sflush_r>:
 800c4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ce:	898b      	ldrh	r3, [r1, #12]
 800c4d0:	0005      	movs	r5, r0
 800c4d2:	000c      	movs	r4, r1
 800c4d4:	071a      	lsls	r2, r3, #28
 800c4d6:	d45f      	bmi.n	800c598 <__sflush_r+0xcc>
 800c4d8:	684a      	ldr	r2, [r1, #4]
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	dc04      	bgt.n	800c4e8 <__sflush_r+0x1c>
 800c4de:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	dc01      	bgt.n	800c4e8 <__sflush_r+0x1c>
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c4ea:	2f00      	cmp	r7, #0
 800c4ec:	d0fa      	beq.n	800c4e4 <__sflush_r+0x18>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2180      	movs	r1, #128	; 0x80
 800c4f2:	682e      	ldr	r6, [r5, #0]
 800c4f4:	602a      	str	r2, [r5, #0]
 800c4f6:	001a      	movs	r2, r3
 800c4f8:	0149      	lsls	r1, r1, #5
 800c4fa:	400a      	ands	r2, r1
 800c4fc:	420b      	tst	r3, r1
 800c4fe:	d034      	beq.n	800c56a <__sflush_r+0x9e>
 800c500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	075b      	lsls	r3, r3, #29
 800c506:	d506      	bpl.n	800c516 <__sflush_r+0x4a>
 800c508:	6863      	ldr	r3, [r4, #4]
 800c50a:	1ac0      	subs	r0, r0, r3
 800c50c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <__sflush_r+0x4a>
 800c512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c514:	1ac0      	subs	r0, r0, r3
 800c516:	0002      	movs	r2, r0
 800c518:	6a21      	ldr	r1, [r4, #32]
 800c51a:	2300      	movs	r3, #0
 800c51c:	0028      	movs	r0, r5
 800c51e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c520:	47b8      	blx	r7
 800c522:	89a1      	ldrh	r1, [r4, #12]
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d106      	bne.n	800c536 <__sflush_r+0x6a>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	2b1d      	cmp	r3, #29
 800c52c:	d831      	bhi.n	800c592 <__sflush_r+0xc6>
 800c52e:	4a2c      	ldr	r2, [pc, #176]	; (800c5e0 <__sflush_r+0x114>)
 800c530:	40da      	lsrs	r2, r3
 800c532:	07d3      	lsls	r3, r2, #31
 800c534:	d52d      	bpl.n	800c592 <__sflush_r+0xc6>
 800c536:	2300      	movs	r3, #0
 800c538:	6063      	str	r3, [r4, #4]
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	04cb      	lsls	r3, r1, #19
 800c540:	d505      	bpl.n	800c54e <__sflush_r+0x82>
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	d102      	bne.n	800c54c <__sflush_r+0x80>
 800c546:	682b      	ldr	r3, [r5, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d100      	bne.n	800c54e <__sflush_r+0x82>
 800c54c:	6560      	str	r0, [r4, #84]	; 0x54
 800c54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c550:	602e      	str	r6, [r5, #0]
 800c552:	2900      	cmp	r1, #0
 800c554:	d0c6      	beq.n	800c4e4 <__sflush_r+0x18>
 800c556:	0023      	movs	r3, r4
 800c558:	3344      	adds	r3, #68	; 0x44
 800c55a:	4299      	cmp	r1, r3
 800c55c:	d002      	beq.n	800c564 <__sflush_r+0x98>
 800c55e:	0028      	movs	r0, r5
 800c560:	f7ff fa78 	bl	800ba54 <_free_r>
 800c564:	2000      	movs	r0, #0
 800c566:	6360      	str	r0, [r4, #52]	; 0x34
 800c568:	e7bd      	b.n	800c4e6 <__sflush_r+0x1a>
 800c56a:	2301      	movs	r3, #1
 800c56c:	0028      	movs	r0, r5
 800c56e:	6a21      	ldr	r1, [r4, #32]
 800c570:	47b8      	blx	r7
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	d1c5      	bne.n	800c502 <__sflush_r+0x36>
 800c576:	682b      	ldr	r3, [r5, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0c2      	beq.n	800c502 <__sflush_r+0x36>
 800c57c:	2b1d      	cmp	r3, #29
 800c57e:	d001      	beq.n	800c584 <__sflush_r+0xb8>
 800c580:	2b16      	cmp	r3, #22
 800c582:	d101      	bne.n	800c588 <__sflush_r+0xbc>
 800c584:	602e      	str	r6, [r5, #0]
 800c586:	e7ad      	b.n	800c4e4 <__sflush_r+0x18>
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	89a2      	ldrh	r2, [r4, #12]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	81a3      	strh	r3, [r4, #12]
 800c590:	e7a9      	b.n	800c4e6 <__sflush_r+0x1a>
 800c592:	2340      	movs	r3, #64	; 0x40
 800c594:	430b      	orrs	r3, r1
 800c596:	e7fa      	b.n	800c58e <__sflush_r+0xc2>
 800c598:	690f      	ldr	r7, [r1, #16]
 800c59a:	2f00      	cmp	r7, #0
 800c59c:	d0a2      	beq.n	800c4e4 <__sflush_r+0x18>
 800c59e:	680a      	ldr	r2, [r1, #0]
 800c5a0:	600f      	str	r7, [r1, #0]
 800c5a2:	1bd2      	subs	r2, r2, r7
 800c5a4:	9201      	str	r2, [sp, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	079b      	lsls	r3, r3, #30
 800c5aa:	d100      	bne.n	800c5ae <__sflush_r+0xe2>
 800c5ac:	694a      	ldr	r2, [r1, #20]
 800c5ae:	60a2      	str	r2, [r4, #8]
 800c5b0:	9b01      	ldr	r3, [sp, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	dc00      	bgt.n	800c5b8 <__sflush_r+0xec>
 800c5b6:	e795      	b.n	800c4e4 <__sflush_r+0x18>
 800c5b8:	003a      	movs	r2, r7
 800c5ba:	0028      	movs	r0, r5
 800c5bc:	9b01      	ldr	r3, [sp, #4]
 800c5be:	6a21      	ldr	r1, [r4, #32]
 800c5c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c5c2:	47b0      	blx	r6
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	dc06      	bgt.n	800c5d6 <__sflush_r+0x10a>
 800c5c8:	2340      	movs	r3, #64	; 0x40
 800c5ca:	2001      	movs	r0, #1
 800c5cc:	89a2      	ldrh	r2, [r4, #12]
 800c5ce:	4240      	negs	r0, r0
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	81a3      	strh	r3, [r4, #12]
 800c5d4:	e787      	b.n	800c4e6 <__sflush_r+0x1a>
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	183f      	adds	r7, r7, r0
 800c5da:	1a1b      	subs	r3, r3, r0
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	e7e7      	b.n	800c5b0 <__sflush_r+0xe4>
 800c5e0:	20400001 	.word	0x20400001

0800c5e4 <_fflush_r>:
 800c5e4:	690b      	ldr	r3, [r1, #16]
 800c5e6:	b570      	push	{r4, r5, r6, lr}
 800c5e8:	0005      	movs	r5, r0
 800c5ea:	000c      	movs	r4, r1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <_fflush_r+0x12>
 800c5f0:	2500      	movs	r5, #0
 800c5f2:	0028      	movs	r0, r5
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d004      	beq.n	800c604 <_fflush_r+0x20>
 800c5fa:	6983      	ldr	r3, [r0, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <_fflush_r+0x20>
 800c600:	f7fe f8ee 	bl	800a7e0 <__sinit>
 800c604:	4b14      	ldr	r3, [pc, #80]	; (800c658 <_fflush_r+0x74>)
 800c606:	429c      	cmp	r4, r3
 800c608:	d11b      	bne.n	800c642 <_fflush_r+0x5e>
 800c60a:	686c      	ldr	r4, [r5, #4]
 800c60c:	220c      	movs	r2, #12
 800c60e:	5ea3      	ldrsh	r3, [r4, r2]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0ed      	beq.n	800c5f0 <_fflush_r+0xc>
 800c614:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c616:	07d2      	lsls	r2, r2, #31
 800c618:	d404      	bmi.n	800c624 <_fflush_r+0x40>
 800c61a:	059b      	lsls	r3, r3, #22
 800c61c:	d402      	bmi.n	800c624 <_fflush_r+0x40>
 800c61e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c620:	f7fe fcf7 	bl	800b012 <__retarget_lock_acquire_recursive>
 800c624:	0028      	movs	r0, r5
 800c626:	0021      	movs	r1, r4
 800c628:	f7ff ff50 	bl	800c4cc <__sflush_r>
 800c62c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c62e:	0005      	movs	r5, r0
 800c630:	07db      	lsls	r3, r3, #31
 800c632:	d4de      	bmi.n	800c5f2 <_fflush_r+0xe>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	059b      	lsls	r3, r3, #22
 800c638:	d4db      	bmi.n	800c5f2 <_fflush_r+0xe>
 800c63a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c63c:	f7fe fcea 	bl	800b014 <__retarget_lock_release_recursive>
 800c640:	e7d7      	b.n	800c5f2 <_fflush_r+0xe>
 800c642:	4b06      	ldr	r3, [pc, #24]	; (800c65c <_fflush_r+0x78>)
 800c644:	429c      	cmp	r4, r3
 800c646:	d101      	bne.n	800c64c <_fflush_r+0x68>
 800c648:	68ac      	ldr	r4, [r5, #8]
 800c64a:	e7df      	b.n	800c60c <_fflush_r+0x28>
 800c64c:	4b04      	ldr	r3, [pc, #16]	; (800c660 <_fflush_r+0x7c>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	d1dc      	bne.n	800c60c <_fflush_r+0x28>
 800c652:	68ec      	ldr	r4, [r5, #12]
 800c654:	e7da      	b.n	800c60c <_fflush_r+0x28>
 800c656:	46c0      	nop			; (mov r8, r8)
 800c658:	0800ccac 	.word	0x0800ccac
 800c65c:	0800cccc 	.word	0x0800cccc
 800c660:	0800cc8c 	.word	0x0800cc8c

0800c664 <fiprintf>:
 800c664:	b40e      	push	{r1, r2, r3}
 800c666:	b503      	push	{r0, r1, lr}
 800c668:	0001      	movs	r1, r0
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	4804      	ldr	r0, [pc, #16]	; (800c680 <fiprintf+0x1c>)
 800c66e:	cb04      	ldmia	r3!, {r2}
 800c670:	6800      	ldr	r0, [r0, #0]
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	f7ff fc5a 	bl	800bf2c <_vfiprintf_r>
 800c678:	b002      	add	sp, #8
 800c67a:	bc08      	pop	{r3}
 800c67c:	b003      	add	sp, #12
 800c67e:	4718      	bx	r3
 800c680:	20000024 	.word	0x20000024

0800c684 <_lseek_r>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	0004      	movs	r4, r0
 800c688:	0008      	movs	r0, r1
 800c68a:	0011      	movs	r1, r2
 800c68c:	001a      	movs	r2, r3
 800c68e:	2300      	movs	r3, #0
 800c690:	4d05      	ldr	r5, [pc, #20]	; (800c6a8 <_lseek_r+0x24>)
 800c692:	602b      	str	r3, [r5, #0]
 800c694:	f7f6 fcb8 	bl	8003008 <_lseek>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d103      	bne.n	800c6a4 <_lseek_r+0x20>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d000      	beq.n	800c6a4 <_lseek_r+0x20>
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	bd70      	pop	{r4, r5, r6, pc}
 800c6a6:	46c0      	nop			; (mov r8, r8)
 800c6a8:	20000570 	.word	0x20000570

0800c6ac <__swhatbuf_r>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	000e      	movs	r6, r1
 800c6b0:	001d      	movs	r5, r3
 800c6b2:	230e      	movs	r3, #14
 800c6b4:	5ec9      	ldrsh	r1, [r1, r3]
 800c6b6:	0014      	movs	r4, r2
 800c6b8:	b096      	sub	sp, #88	; 0x58
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	da08      	bge.n	800c6d0 <__swhatbuf_r+0x24>
 800c6be:	220c      	movs	r2, #12
 800c6c0:	5eb3      	ldrsh	r3, [r6, r2]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	061b      	lsls	r3, r3, #24
 800c6c8:	d411      	bmi.n	800c6ee <__swhatbuf_r+0x42>
 800c6ca:	2380      	movs	r3, #128	; 0x80
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	e00f      	b.n	800c6f0 <__swhatbuf_r+0x44>
 800c6d0:	466a      	mov	r2, sp
 800c6d2:	f000 f8c7 	bl	800c864 <_fstat_r>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	dbf1      	blt.n	800c6be <__swhatbuf_r+0x12>
 800c6da:	23f0      	movs	r3, #240	; 0xf0
 800c6dc:	9901      	ldr	r1, [sp, #4]
 800c6de:	021b      	lsls	r3, r3, #8
 800c6e0:	4019      	ands	r1, r3
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <__swhatbuf_r+0x4c>)
 800c6e4:	18c9      	adds	r1, r1, r3
 800c6e6:	424b      	negs	r3, r1
 800c6e8:	4159      	adcs	r1, r3
 800c6ea:	6029      	str	r1, [r5, #0]
 800c6ec:	e7ed      	b.n	800c6ca <__swhatbuf_r+0x1e>
 800c6ee:	2340      	movs	r3, #64	; 0x40
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	b016      	add	sp, #88	; 0x58
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	ffffe000 	.word	0xffffe000

0800c6fc <__smakebuf_r>:
 800c6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6fe:	2602      	movs	r6, #2
 800c700:	898b      	ldrh	r3, [r1, #12]
 800c702:	0005      	movs	r5, r0
 800c704:	000c      	movs	r4, r1
 800c706:	4233      	tst	r3, r6
 800c708:	d006      	beq.n	800c718 <__smakebuf_r+0x1c>
 800c70a:	0023      	movs	r3, r4
 800c70c:	3347      	adds	r3, #71	; 0x47
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	2301      	movs	r3, #1
 800c714:	6163      	str	r3, [r4, #20]
 800c716:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c718:	466a      	mov	r2, sp
 800c71a:	ab01      	add	r3, sp, #4
 800c71c:	f7ff ffc6 	bl	800c6ac <__swhatbuf_r>
 800c720:	9900      	ldr	r1, [sp, #0]
 800c722:	0007      	movs	r7, r0
 800c724:	0028      	movs	r0, r5
 800c726:	f7ff fa01 	bl	800bb2c <_malloc_r>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d108      	bne.n	800c740 <__smakebuf_r+0x44>
 800c72e:	220c      	movs	r2, #12
 800c730:	5ea3      	ldrsh	r3, [r4, r2]
 800c732:	059a      	lsls	r2, r3, #22
 800c734:	d4ef      	bmi.n	800c716 <__smakebuf_r+0x1a>
 800c736:	2203      	movs	r2, #3
 800c738:	4393      	bics	r3, r2
 800c73a:	431e      	orrs	r6, r3
 800c73c:	81a6      	strh	r6, [r4, #12]
 800c73e:	e7e4      	b.n	800c70a <__smakebuf_r+0xe>
 800c740:	4b0f      	ldr	r3, [pc, #60]	; (800c780 <__smakebuf_r+0x84>)
 800c742:	62ab      	str	r3, [r5, #40]	; 0x28
 800c744:	2380      	movs	r3, #128	; 0x80
 800c746:	89a2      	ldrh	r2, [r4, #12]
 800c748:	6020      	str	r0, [r4, #0]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	81a3      	strh	r3, [r4, #12]
 800c74e:	9b00      	ldr	r3, [sp, #0]
 800c750:	6120      	str	r0, [r4, #16]
 800c752:	6163      	str	r3, [r4, #20]
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00d      	beq.n	800c776 <__smakebuf_r+0x7a>
 800c75a:	0028      	movs	r0, r5
 800c75c:	230e      	movs	r3, #14
 800c75e:	5ee1      	ldrsh	r1, [r4, r3]
 800c760:	f000 f892 	bl	800c888 <_isatty_r>
 800c764:	2800      	cmp	r0, #0
 800c766:	d006      	beq.n	800c776 <__smakebuf_r+0x7a>
 800c768:	2203      	movs	r2, #3
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	4393      	bics	r3, r2
 800c76e:	001a      	movs	r2, r3
 800c770:	2301      	movs	r3, #1
 800c772:	4313      	orrs	r3, r2
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	89a0      	ldrh	r0, [r4, #12]
 800c778:	4307      	orrs	r7, r0
 800c77a:	81a7      	strh	r7, [r4, #12]
 800c77c:	e7cb      	b.n	800c716 <__smakebuf_r+0x1a>
 800c77e:	46c0      	nop			; (mov r8, r8)
 800c780:	0800a765 	.word	0x0800a765

0800c784 <memmove>:
 800c784:	b510      	push	{r4, lr}
 800c786:	4288      	cmp	r0, r1
 800c788:	d902      	bls.n	800c790 <memmove+0xc>
 800c78a:	188b      	adds	r3, r1, r2
 800c78c:	4298      	cmp	r0, r3
 800c78e:	d303      	bcc.n	800c798 <memmove+0x14>
 800c790:	2300      	movs	r3, #0
 800c792:	e007      	b.n	800c7a4 <memmove+0x20>
 800c794:	5c8b      	ldrb	r3, [r1, r2]
 800c796:	5483      	strb	r3, [r0, r2]
 800c798:	3a01      	subs	r2, #1
 800c79a:	d2fb      	bcs.n	800c794 <memmove+0x10>
 800c79c:	bd10      	pop	{r4, pc}
 800c79e:	5ccc      	ldrb	r4, [r1, r3]
 800c7a0:	54c4      	strb	r4, [r0, r3]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d1fa      	bne.n	800c79e <memmove+0x1a>
 800c7a8:	e7f8      	b.n	800c79c <memmove+0x18>
	...

0800c7ac <__malloc_lock>:
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	4802      	ldr	r0, [pc, #8]	; (800c7b8 <__malloc_lock+0xc>)
 800c7b0:	f7fe fc2f 	bl	800b012 <__retarget_lock_acquire_recursive>
 800c7b4:	bd10      	pop	{r4, pc}
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	20000564 	.word	0x20000564

0800c7bc <__malloc_unlock>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	4802      	ldr	r0, [pc, #8]	; (800c7c8 <__malloc_unlock+0xc>)
 800c7c0:	f7fe fc28 	bl	800b014 <__retarget_lock_release_recursive>
 800c7c4:	bd10      	pop	{r4, pc}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	20000564 	.word	0x20000564

0800c7cc <_realloc_r>:
 800c7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7ce:	0007      	movs	r7, r0
 800c7d0:	000e      	movs	r6, r1
 800c7d2:	0014      	movs	r4, r2
 800c7d4:	2900      	cmp	r1, #0
 800c7d6:	d105      	bne.n	800c7e4 <_realloc_r+0x18>
 800c7d8:	0011      	movs	r1, r2
 800c7da:	f7ff f9a7 	bl	800bb2c <_malloc_r>
 800c7de:	0005      	movs	r5, r0
 800c7e0:	0028      	movs	r0, r5
 800c7e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	d103      	bne.n	800c7f0 <_realloc_r+0x24>
 800c7e8:	f7ff f934 	bl	800ba54 <_free_r>
 800c7ec:	0025      	movs	r5, r4
 800c7ee:	e7f7      	b.n	800c7e0 <_realloc_r+0x14>
 800c7f0:	f000 f85c 	bl	800c8ac <_malloc_usable_size_r>
 800c7f4:	9001      	str	r0, [sp, #4]
 800c7f6:	4284      	cmp	r4, r0
 800c7f8:	d803      	bhi.n	800c802 <_realloc_r+0x36>
 800c7fa:	0035      	movs	r5, r6
 800c7fc:	0843      	lsrs	r3, r0, #1
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	d3ee      	bcc.n	800c7e0 <_realloc_r+0x14>
 800c802:	0021      	movs	r1, r4
 800c804:	0038      	movs	r0, r7
 800c806:	f7ff f991 	bl	800bb2c <_malloc_r>
 800c80a:	1e05      	subs	r5, r0, #0
 800c80c:	d0e8      	beq.n	800c7e0 <_realloc_r+0x14>
 800c80e:	9b01      	ldr	r3, [sp, #4]
 800c810:	0022      	movs	r2, r4
 800c812:	429c      	cmp	r4, r3
 800c814:	d900      	bls.n	800c818 <_realloc_r+0x4c>
 800c816:	001a      	movs	r2, r3
 800c818:	0031      	movs	r1, r6
 800c81a:	0028      	movs	r0, r5
 800c81c:	f7fb fb4c 	bl	8007eb8 <memcpy>
 800c820:	0031      	movs	r1, r6
 800c822:	0038      	movs	r0, r7
 800c824:	f7ff f916 	bl	800ba54 <_free_r>
 800c828:	e7da      	b.n	800c7e0 <_realloc_r+0x14>
	...

0800c82c <_read_r>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	0004      	movs	r4, r0
 800c830:	0008      	movs	r0, r1
 800c832:	0011      	movs	r1, r2
 800c834:	001a      	movs	r2, r3
 800c836:	2300      	movs	r3, #0
 800c838:	4d05      	ldr	r5, [pc, #20]	; (800c850 <_read_r+0x24>)
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f6 fb8a 	bl	8002f54 <_read>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d103      	bne.n	800c84c <_read_r+0x20>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d000      	beq.n	800c84c <_read_r+0x20>
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	bd70      	pop	{r4, r5, r6, pc}
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	20000570 	.word	0x20000570

0800c854 <abort>:
 800c854:	2006      	movs	r0, #6
 800c856:	b510      	push	{r4, lr}
 800c858:	f000 f85a 	bl	800c910 <raise>
 800c85c:	2001      	movs	r0, #1
 800c85e:	f7f6 fb6d 	bl	8002f3c <_exit>
	...

0800c864 <_fstat_r>:
 800c864:	2300      	movs	r3, #0
 800c866:	b570      	push	{r4, r5, r6, lr}
 800c868:	4d06      	ldr	r5, [pc, #24]	; (800c884 <_fstat_r+0x20>)
 800c86a:	0004      	movs	r4, r0
 800c86c:	0008      	movs	r0, r1
 800c86e:	0011      	movs	r1, r2
 800c870:	602b      	str	r3, [r5, #0]
 800c872:	f7f6 fbb2 	bl	8002fda <_fstat>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	d103      	bne.n	800c882 <_fstat_r+0x1e>
 800c87a:	682b      	ldr	r3, [r5, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d000      	beq.n	800c882 <_fstat_r+0x1e>
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	20000570 	.word	0x20000570

0800c888 <_isatty_r>:
 800c888:	2300      	movs	r3, #0
 800c88a:	b570      	push	{r4, r5, r6, lr}
 800c88c:	4d06      	ldr	r5, [pc, #24]	; (800c8a8 <_isatty_r+0x20>)
 800c88e:	0004      	movs	r4, r0
 800c890:	0008      	movs	r0, r1
 800c892:	602b      	str	r3, [r5, #0]
 800c894:	f7f6 fbaf 	bl	8002ff6 <_isatty>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d103      	bne.n	800c8a4 <_isatty_r+0x1c>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d000      	beq.n	800c8a4 <_isatty_r+0x1c>
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
 800c8a6:	46c0      	nop			; (mov r8, r8)
 800c8a8:	20000570 	.word	0x20000570

0800c8ac <_malloc_usable_size_r>:
 800c8ac:	1f0b      	subs	r3, r1, #4
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	1f18      	subs	r0, r3, #4
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da01      	bge.n	800c8ba <_malloc_usable_size_r+0xe>
 800c8b6:	580b      	ldr	r3, [r1, r0]
 800c8b8:	18c0      	adds	r0, r0, r3
 800c8ba:	4770      	bx	lr

0800c8bc <_raise_r>:
 800c8bc:	b570      	push	{r4, r5, r6, lr}
 800c8be:	0004      	movs	r4, r0
 800c8c0:	000d      	movs	r5, r1
 800c8c2:	291f      	cmp	r1, #31
 800c8c4:	d904      	bls.n	800c8d0 <_raise_r+0x14>
 800c8c6:	2316      	movs	r3, #22
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	2001      	movs	r0, #1
 800c8cc:	4240      	negs	r0, r0
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
 800c8d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <_raise_r+0x24>
 800c8d6:	008a      	lsls	r2, r1, #2
 800c8d8:	189b      	adds	r3, r3, r2
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	2a00      	cmp	r2, #0
 800c8de:	d108      	bne.n	800c8f2 <_raise_r+0x36>
 800c8e0:	0020      	movs	r0, r4
 800c8e2:	f000 f831 	bl	800c948 <_getpid_r>
 800c8e6:	002a      	movs	r2, r5
 800c8e8:	0001      	movs	r1, r0
 800c8ea:	0020      	movs	r0, r4
 800c8ec:	f000 f81a 	bl	800c924 <_kill_r>
 800c8f0:	e7ed      	b.n	800c8ce <_raise_r+0x12>
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	2a01      	cmp	r2, #1
 800c8f6:	d0ea      	beq.n	800c8ce <_raise_r+0x12>
 800c8f8:	1c51      	adds	r1, r2, #1
 800c8fa:	d103      	bne.n	800c904 <_raise_r+0x48>
 800c8fc:	2316      	movs	r3, #22
 800c8fe:	3001      	adds	r0, #1
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	e7e4      	b.n	800c8ce <_raise_r+0x12>
 800c904:	2400      	movs	r4, #0
 800c906:	0028      	movs	r0, r5
 800c908:	601c      	str	r4, [r3, #0]
 800c90a:	4790      	blx	r2
 800c90c:	0020      	movs	r0, r4
 800c90e:	e7de      	b.n	800c8ce <_raise_r+0x12>

0800c910 <raise>:
 800c910:	b510      	push	{r4, lr}
 800c912:	4b03      	ldr	r3, [pc, #12]	; (800c920 <raise+0x10>)
 800c914:	0001      	movs	r1, r0
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	f7ff ffd0 	bl	800c8bc <_raise_r>
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	20000024 	.word	0x20000024

0800c924 <_kill_r>:
 800c924:	2300      	movs	r3, #0
 800c926:	b570      	push	{r4, r5, r6, lr}
 800c928:	4d06      	ldr	r5, [pc, #24]	; (800c944 <_kill_r+0x20>)
 800c92a:	0004      	movs	r4, r0
 800c92c:	0008      	movs	r0, r1
 800c92e:	0011      	movs	r1, r2
 800c930:	602b      	str	r3, [r5, #0]
 800c932:	f7f6 faf3 	bl	8002f1c <_kill>
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	d103      	bne.n	800c942 <_kill_r+0x1e>
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d000      	beq.n	800c942 <_kill_r+0x1e>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	20000570 	.word	0x20000570

0800c948 <_getpid_r>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	f7f6 fae1 	bl	8002f10 <_getpid>
 800c94e:	bd10      	pop	{r4, pc}

0800c950 <_init>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	46c0      	nop			; (mov r8, r8)
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr

0800c95c <_fini>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	46c0      	nop			; (mov r8, r8)
 800c960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c962:	bc08      	pop	{r3}
 800c964:	469e      	mov	lr, r3
 800c966:	4770      	bx	lr
