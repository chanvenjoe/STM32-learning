
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e548  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800e608  0800e608  0001e608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed14  0800ed14  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed14  0800ed14  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed14  0800ed14  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed14  0800ed14  0001ed14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed18  0800ed18  0001ed18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ed1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  2000020c  0800ef28  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800ef28  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c69  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af3  00000000  00000000  00031e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00034990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004862  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c94  00000000  00000000  0003ae6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c122  00000000  00000000  0004fafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bbc20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf8  00000000  00000000  000bbc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e5f0 	.word	0x0800e5f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	0800e5f0 	.word	0x0800e5f0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 faaf 	bl	80019b4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f9ff 	bl	8001864 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 faa1 	bl	80019b4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa97 	bl	80019b4 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa27 	bl	80018e8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fa1d 	bl	80018e8 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f002 f8ef 	bl	80026b4 <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fd38 	bl	8001f54 <__aeabi_dsub>
 80004e4:	f002 f8e6 	bl	80026b4 <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0005      	movs	r5, r0
 80004fc:	000c      	movs	r4, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	0028      	movs	r0, r5
 8000504:	0021      	movs	r1, r4
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmplt>
 800050a:	2800      	cmp	r0, #0
 800050c:	d108      	bne.n	8000520 <__aeabi_d2lz+0x28>
 800050e:	0028      	movs	r0, r5
 8000510:	0021      	movs	r1, r4
 8000512:	f000 f80f 	bl	8000534 <__aeabi_d2ulz>
 8000516:	0002      	movs	r2, r0
 8000518:	000b      	movs	r3, r1
 800051a:	0010      	movs	r0, r2
 800051c:	0019      	movs	r1, r3
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	18e1      	adds	r1, r4, r3
 8000526:	0028      	movs	r0, r5
 8000528:	f000 f804 	bl	8000534 <__aeabi_d2ulz>
 800052c:	2300      	movs	r3, #0
 800052e:	4242      	negs	r2, r0
 8000530:	418b      	sbcs	r3, r1
 8000532:	e7f2      	b.n	800051a <__aeabi_d2lz+0x22>

08000534 <__aeabi_d2ulz>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2200      	movs	r2, #0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_d2ulz+0x34>)
 800053a:	000d      	movs	r5, r1
 800053c:	0004      	movs	r4, r0
 800053e:	f001 fa9d 	bl	8001a7c <__aeabi_dmul>
 8000542:	f7ff ffbb 	bl	80004bc <__aeabi_d2uiz>
 8000546:	0006      	movs	r6, r0
 8000548:	f002 f91a 	bl	8002780 <__aeabi_ui2d>
 800054c:	2200      	movs	r2, #0
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <__aeabi_d2ulz+0x38>)
 8000550:	f001 fa94 	bl	8001a7c <__aeabi_dmul>
 8000554:	0002      	movs	r2, r0
 8000556:	000b      	movs	r3, r1
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fcfa 	bl	8001f54 <__aeabi_dsub>
 8000560:	f7ff ffac 	bl	80004bc <__aeabi_d2uiz>
 8000564:	0031      	movs	r1, r6
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	3df00000 	.word	0x3df00000
 800056c:	41f00000 	.word	0x41f00000

08000570 <__aeabi_l2d>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	0006      	movs	r6, r0
 8000574:	0008      	movs	r0, r1
 8000576:	f002 f8d3 	bl	8002720 <__aeabi_i2d>
 800057a:	2200      	movs	r2, #0
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_l2d+0x28>)
 800057e:	f001 fa7d 	bl	8001a7c <__aeabi_dmul>
 8000582:	000d      	movs	r5, r1
 8000584:	0004      	movs	r4, r0
 8000586:	0030      	movs	r0, r6
 8000588:	f002 f8fa 	bl	8002780 <__aeabi_ui2d>
 800058c:	002b      	movs	r3, r5
 800058e:	0022      	movs	r2, r4
 8000590:	f000 fb36 	bl	8000c00 <__aeabi_dadd>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_fadd>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	46c6      	mov	lr, r8
 80005a0:	0243      	lsls	r3, r0, #9
 80005a2:	0a5b      	lsrs	r3, r3, #9
 80005a4:	024e      	lsls	r6, r1, #9
 80005a6:	0045      	lsls	r5, r0, #1
 80005a8:	004f      	lsls	r7, r1, #1
 80005aa:	00da      	lsls	r2, r3, #3
 80005ac:	0fc4      	lsrs	r4, r0, #31
 80005ae:	469c      	mov	ip, r3
 80005b0:	0a70      	lsrs	r0, r6, #9
 80005b2:	4690      	mov	r8, r2
 80005b4:	b500      	push	{lr}
 80005b6:	0e2d      	lsrs	r5, r5, #24
 80005b8:	0e3f      	lsrs	r7, r7, #24
 80005ba:	0fc9      	lsrs	r1, r1, #31
 80005bc:	09b6      	lsrs	r6, r6, #6
 80005be:	428c      	cmp	r4, r1
 80005c0:	d04b      	beq.n	800065a <__aeabi_fadd+0xbe>
 80005c2:	1bea      	subs	r2, r5, r7
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	dd36      	ble.n	8000636 <__aeabi_fadd+0x9a>
 80005c8:	2f00      	cmp	r7, #0
 80005ca:	d061      	beq.n	8000690 <__aeabi_fadd+0xf4>
 80005cc:	2dff      	cmp	r5, #255	; 0xff
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x36>
 80005d0:	e0ad      	b.n	800072e <__aeabi_fadd+0x192>
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	04db      	lsls	r3, r3, #19
 80005d6:	431e      	orrs	r6, r3
 80005d8:	2a1b      	cmp	r2, #27
 80005da:	dc00      	bgt.n	80005de <__aeabi_fadd+0x42>
 80005dc:	e0d3      	b.n	8000786 <__aeabi_fadd+0x1ea>
 80005de:	2001      	movs	r0, #1
 80005e0:	4643      	mov	r3, r8
 80005e2:	1a18      	subs	r0, r3, r0
 80005e4:	0143      	lsls	r3, r0, #5
 80005e6:	d400      	bmi.n	80005ea <__aeabi_fadd+0x4e>
 80005e8:	e08c      	b.n	8000704 <__aeabi_fadd+0x168>
 80005ea:	0180      	lsls	r0, r0, #6
 80005ec:	0987      	lsrs	r7, r0, #6
 80005ee:	0038      	movs	r0, r7
 80005f0:	f002 f9bc 	bl	800296c <__clzsi2>
 80005f4:	3805      	subs	r0, #5
 80005f6:	4087      	lsls	r7, r0
 80005f8:	4285      	cmp	r5, r0
 80005fa:	dc00      	bgt.n	80005fe <__aeabi_fadd+0x62>
 80005fc:	e0b6      	b.n	800076c <__aeabi_fadd+0x1d0>
 80005fe:	1a2d      	subs	r5, r5, r0
 8000600:	48b3      	ldr	r0, [pc, #716]	; (80008d0 <__aeabi_fadd+0x334>)
 8000602:	4038      	ands	r0, r7
 8000604:	0743      	lsls	r3, r0, #29
 8000606:	d004      	beq.n	8000612 <__aeabi_fadd+0x76>
 8000608:	230f      	movs	r3, #15
 800060a:	4003      	ands	r3, r0
 800060c:	2b04      	cmp	r3, #4
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x76>
 8000610:	3004      	adds	r0, #4
 8000612:	0143      	lsls	r3, r0, #5
 8000614:	d400      	bmi.n	8000618 <__aeabi_fadd+0x7c>
 8000616:	e078      	b.n	800070a <__aeabi_fadd+0x16e>
 8000618:	1c6a      	adds	r2, r5, #1
 800061a:	2dfe      	cmp	r5, #254	; 0xfe
 800061c:	d065      	beq.n	80006ea <__aeabi_fadd+0x14e>
 800061e:	0180      	lsls	r0, r0, #6
 8000620:	0a43      	lsrs	r3, r0, #9
 8000622:	469c      	mov	ip, r3
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	4663      	mov	r3, ip
 8000628:	05d0      	lsls	r0, r2, #23
 800062a:	4318      	orrs	r0, r3
 800062c:	07e4      	lsls	r4, r4, #31
 800062e:	4320      	orrs	r0, r4
 8000630:	bc80      	pop	{r7}
 8000632:	46b8      	mov	r8, r7
 8000634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000636:	2a00      	cmp	r2, #0
 8000638:	d035      	beq.n	80006a6 <__aeabi_fadd+0x10a>
 800063a:	1b7a      	subs	r2, r7, r5
 800063c:	2d00      	cmp	r5, #0
 800063e:	d000      	beq.n	8000642 <__aeabi_fadd+0xa6>
 8000640:	e0af      	b.n	80007a2 <__aeabi_fadd+0x206>
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xae>
 8000648:	e0a7      	b.n	800079a <__aeabi_fadd+0x1fe>
 800064a:	1e53      	subs	r3, r2, #1
 800064c:	2a01      	cmp	r2, #1
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0xb6>
 8000650:	e12f      	b.n	80008b2 <__aeabi_fadd+0x316>
 8000652:	2aff      	cmp	r2, #255	; 0xff
 8000654:	d069      	beq.n	800072a <__aeabi_fadd+0x18e>
 8000656:	001a      	movs	r2, r3
 8000658:	e0aa      	b.n	80007b0 <__aeabi_fadd+0x214>
 800065a:	1be9      	subs	r1, r5, r7
 800065c:	2900      	cmp	r1, #0
 800065e:	dd70      	ble.n	8000742 <__aeabi_fadd+0x1a6>
 8000660:	2f00      	cmp	r7, #0
 8000662:	d037      	beq.n	80006d4 <__aeabi_fadd+0x138>
 8000664:	2dff      	cmp	r5, #255	; 0xff
 8000666:	d062      	beq.n	800072e <__aeabi_fadd+0x192>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	04db      	lsls	r3, r3, #19
 800066c:	431e      	orrs	r6, r3
 800066e:	291b      	cmp	r1, #27
 8000670:	dc00      	bgt.n	8000674 <__aeabi_fadd+0xd8>
 8000672:	e0b0      	b.n	80007d6 <__aeabi_fadd+0x23a>
 8000674:	2001      	movs	r0, #1
 8000676:	4440      	add	r0, r8
 8000678:	0143      	lsls	r3, r0, #5
 800067a:	d543      	bpl.n	8000704 <__aeabi_fadd+0x168>
 800067c:	3501      	adds	r5, #1
 800067e:	2dff      	cmp	r5, #255	; 0xff
 8000680:	d033      	beq.n	80006ea <__aeabi_fadd+0x14e>
 8000682:	2301      	movs	r3, #1
 8000684:	4a93      	ldr	r2, [pc, #588]	; (80008d4 <__aeabi_fadd+0x338>)
 8000686:	4003      	ands	r3, r0
 8000688:	0840      	lsrs	r0, r0, #1
 800068a:	4010      	ands	r0, r2
 800068c:	4318      	orrs	r0, r3
 800068e:	e7b9      	b.n	8000604 <__aeabi_fadd+0x68>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0xfa>
 8000694:	e083      	b.n	800079e <__aeabi_fadd+0x202>
 8000696:	1e51      	subs	r1, r2, #1
 8000698:	2a01      	cmp	r2, #1
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x102>
 800069c:	e0d8      	b.n	8000850 <__aeabi_fadd+0x2b4>
 800069e:	2aff      	cmp	r2, #255	; 0xff
 80006a0:	d045      	beq.n	800072e <__aeabi_fadd+0x192>
 80006a2:	000a      	movs	r2, r1
 80006a4:	e798      	b.n	80005d8 <__aeabi_fadd+0x3c>
 80006a6:	27fe      	movs	r7, #254	; 0xfe
 80006a8:	1c6a      	adds	r2, r5, #1
 80006aa:	4217      	tst	r7, r2
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fadd+0x114>
 80006ae:	e086      	b.n	80007be <__aeabi_fadd+0x222>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_fadd+0x11a>
 80006b4:	e0b7      	b.n	8000826 <__aeabi_fadd+0x28a>
 80006b6:	4643      	mov	r3, r8
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x122>
 80006bc:	e0f3      	b.n	80008a6 <__aeabi_fadd+0x30a>
 80006be:	2200      	movs	r2, #0
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d0b0      	beq.n	8000626 <__aeabi_fadd+0x8a>
 80006c4:	1b98      	subs	r0, r3, r6
 80006c6:	0143      	lsls	r3, r0, #5
 80006c8:	d400      	bmi.n	80006cc <__aeabi_fadd+0x130>
 80006ca:	e0fa      	b.n	80008c2 <__aeabi_fadd+0x326>
 80006cc:	4643      	mov	r3, r8
 80006ce:	000c      	movs	r4, r1
 80006d0:	1af0      	subs	r0, r6, r3
 80006d2:	e797      	b.n	8000604 <__aeabi_fadd+0x68>
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x13e>
 80006d8:	e0c8      	b.n	800086c <__aeabi_fadd+0x2d0>
 80006da:	1e4a      	subs	r2, r1, #1
 80006dc:	2901      	cmp	r1, #1
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x146>
 80006e0:	e0ae      	b.n	8000840 <__aeabi_fadd+0x2a4>
 80006e2:	29ff      	cmp	r1, #255	; 0xff
 80006e4:	d023      	beq.n	800072e <__aeabi_fadd+0x192>
 80006e6:	0011      	movs	r1, r2
 80006e8:	e7c1      	b.n	800066e <__aeabi_fadd+0xd2>
 80006ea:	2300      	movs	r3, #0
 80006ec:	22ff      	movs	r2, #255	; 0xff
 80006ee:	469c      	mov	ip, r3
 80006f0:	e799      	b.n	8000626 <__aeabi_fadd+0x8a>
 80006f2:	21fe      	movs	r1, #254	; 0xfe
 80006f4:	1c6a      	adds	r2, r5, #1
 80006f6:	4211      	tst	r1, r2
 80006f8:	d077      	beq.n	80007ea <__aeabi_fadd+0x24e>
 80006fa:	2aff      	cmp	r2, #255	; 0xff
 80006fc:	d0f5      	beq.n	80006ea <__aeabi_fadd+0x14e>
 80006fe:	0015      	movs	r5, r2
 8000700:	4446      	add	r6, r8
 8000702:	0870      	lsrs	r0, r6, #1
 8000704:	0743      	lsls	r3, r0, #29
 8000706:	d000      	beq.n	800070a <__aeabi_fadd+0x16e>
 8000708:	e77e      	b.n	8000608 <__aeabi_fadd+0x6c>
 800070a:	08c3      	lsrs	r3, r0, #3
 800070c:	2dff      	cmp	r5, #255	; 0xff
 800070e:	d00e      	beq.n	800072e <__aeabi_fadd+0x192>
 8000710:	025b      	lsls	r3, r3, #9
 8000712:	0a5b      	lsrs	r3, r3, #9
 8000714:	469c      	mov	ip, r3
 8000716:	b2ea      	uxtb	r2, r5
 8000718:	e785      	b.n	8000626 <__aeabi_fadd+0x8a>
 800071a:	2e00      	cmp	r6, #0
 800071c:	d007      	beq.n	800072e <__aeabi_fadd+0x192>
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	03d2      	lsls	r2, r2, #15
 8000722:	4213      	tst	r3, r2
 8000724:	d003      	beq.n	800072e <__aeabi_fadd+0x192>
 8000726:	4210      	tst	r0, r2
 8000728:	d101      	bne.n	800072e <__aeabi_fadd+0x192>
 800072a:	000c      	movs	r4, r1
 800072c:	0003      	movs	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0db      	beq.n	80006ea <__aeabi_fadd+0x14e>
 8000732:	2080      	movs	r0, #128	; 0x80
 8000734:	03c0      	lsls	r0, r0, #15
 8000736:	4318      	orrs	r0, r3
 8000738:	0240      	lsls	r0, r0, #9
 800073a:	0a43      	lsrs	r3, r0, #9
 800073c:	469c      	mov	ip, r3
 800073e:	22ff      	movs	r2, #255	; 0xff
 8000740:	e771      	b.n	8000626 <__aeabi_fadd+0x8a>
 8000742:	2900      	cmp	r1, #0
 8000744:	d0d5      	beq.n	80006f2 <__aeabi_fadd+0x156>
 8000746:	1b7a      	subs	r2, r7, r5
 8000748:	2d00      	cmp	r5, #0
 800074a:	d160      	bne.n	800080e <__aeabi_fadd+0x272>
 800074c:	4643      	mov	r3, r8
 800074e:	2b00      	cmp	r3, #0
 8000750:	d024      	beq.n	800079c <__aeabi_fadd+0x200>
 8000752:	1e53      	subs	r3, r2, #1
 8000754:	2a01      	cmp	r2, #1
 8000756:	d073      	beq.n	8000840 <__aeabi_fadd+0x2a4>
 8000758:	2aff      	cmp	r2, #255	; 0xff
 800075a:	d0e7      	beq.n	800072c <__aeabi_fadd+0x190>
 800075c:	001a      	movs	r2, r3
 800075e:	2a1b      	cmp	r2, #27
 8000760:	dc00      	bgt.n	8000764 <__aeabi_fadd+0x1c8>
 8000762:	e085      	b.n	8000870 <__aeabi_fadd+0x2d4>
 8000764:	2001      	movs	r0, #1
 8000766:	003d      	movs	r5, r7
 8000768:	1980      	adds	r0, r0, r6
 800076a:	e785      	b.n	8000678 <__aeabi_fadd+0xdc>
 800076c:	2320      	movs	r3, #32
 800076e:	003a      	movs	r2, r7
 8000770:	1b45      	subs	r5, r0, r5
 8000772:	0038      	movs	r0, r7
 8000774:	3501      	adds	r5, #1
 8000776:	40ea      	lsrs	r2, r5
 8000778:	1b5d      	subs	r5, r3, r5
 800077a:	40a8      	lsls	r0, r5
 800077c:	1e43      	subs	r3, r0, #1
 800077e:	4198      	sbcs	r0, r3
 8000780:	2500      	movs	r5, #0
 8000782:	4310      	orrs	r0, r2
 8000784:	e73e      	b.n	8000604 <__aeabi_fadd+0x68>
 8000786:	2320      	movs	r3, #32
 8000788:	0030      	movs	r0, r6
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	0031      	movs	r1, r6
 800078e:	4098      	lsls	r0, r3
 8000790:	40d1      	lsrs	r1, r2
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	4198      	sbcs	r0, r3
 8000796:	4308      	orrs	r0, r1
 8000798:	e722      	b.n	80005e0 <__aeabi_fadd+0x44>
 800079a:	000c      	movs	r4, r1
 800079c:	0003      	movs	r3, r0
 800079e:	0015      	movs	r5, r2
 80007a0:	e7b4      	b.n	800070c <__aeabi_fadd+0x170>
 80007a2:	2fff      	cmp	r7, #255	; 0xff
 80007a4:	d0c1      	beq.n	800072a <__aeabi_fadd+0x18e>
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	4640      	mov	r0, r8
 80007aa:	04db      	lsls	r3, r3, #19
 80007ac:	4318      	orrs	r0, r3
 80007ae:	4680      	mov	r8, r0
 80007b0:	2a1b      	cmp	r2, #27
 80007b2:	dd51      	ble.n	8000858 <__aeabi_fadd+0x2bc>
 80007b4:	2001      	movs	r0, #1
 80007b6:	000c      	movs	r4, r1
 80007b8:	003d      	movs	r5, r7
 80007ba:	1a30      	subs	r0, r6, r0
 80007bc:	e712      	b.n	80005e4 <__aeabi_fadd+0x48>
 80007be:	4643      	mov	r3, r8
 80007c0:	1b9f      	subs	r7, r3, r6
 80007c2:	017b      	lsls	r3, r7, #5
 80007c4:	d42b      	bmi.n	800081e <__aeabi_fadd+0x282>
 80007c6:	2f00      	cmp	r7, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x230>
 80007ca:	e710      	b.n	80005ee <__aeabi_fadd+0x52>
 80007cc:	2300      	movs	r3, #0
 80007ce:	2400      	movs	r4, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	469c      	mov	ip, r3
 80007d4:	e727      	b.n	8000626 <__aeabi_fadd+0x8a>
 80007d6:	2320      	movs	r3, #32
 80007d8:	0032      	movs	r2, r6
 80007da:	0030      	movs	r0, r6
 80007dc:	40ca      	lsrs	r2, r1
 80007de:	1a59      	subs	r1, r3, r1
 80007e0:	4088      	lsls	r0, r1
 80007e2:	1e43      	subs	r3, r0, #1
 80007e4:	4198      	sbcs	r0, r3
 80007e6:	4310      	orrs	r0, r2
 80007e8:	e745      	b.n	8000676 <__aeabi_fadd+0xda>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d14a      	bne.n	8000884 <__aeabi_fadd+0x2e8>
 80007ee:	4643      	mov	r3, r8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d063      	beq.n	80008bc <__aeabi_fadd+0x320>
 80007f4:	2200      	movs	r2, #0
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x260>
 80007fa:	e714      	b.n	8000626 <__aeabi_fadd+0x8a>
 80007fc:	0030      	movs	r0, r6
 80007fe:	4440      	add	r0, r8
 8000800:	0143      	lsls	r3, r0, #5
 8000802:	d400      	bmi.n	8000806 <__aeabi_fadd+0x26a>
 8000804:	e77e      	b.n	8000704 <__aeabi_fadd+0x168>
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <__aeabi_fadd+0x334>)
 8000808:	3501      	adds	r5, #1
 800080a:	4018      	ands	r0, r3
 800080c:	e77a      	b.n	8000704 <__aeabi_fadd+0x168>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d08c      	beq.n	800072c <__aeabi_fadd+0x190>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4641      	mov	r1, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4319      	orrs	r1, r3
 800081a:	4688      	mov	r8, r1
 800081c:	e79f      	b.n	800075e <__aeabi_fadd+0x1c2>
 800081e:	4643      	mov	r3, r8
 8000820:	000c      	movs	r4, r1
 8000822:	1af7      	subs	r7, r6, r3
 8000824:	e6e3      	b.n	80005ee <__aeabi_fadd+0x52>
 8000826:	4642      	mov	r2, r8
 8000828:	2a00      	cmp	r2, #0
 800082a:	d000      	beq.n	800082e <__aeabi_fadd+0x292>
 800082c:	e775      	b.n	800071a <__aeabi_fadd+0x17e>
 800082e:	2e00      	cmp	r6, #0
 8000830:	d000      	beq.n	8000834 <__aeabi_fadd+0x298>
 8000832:	e77a      	b.n	800072a <__aeabi_fadd+0x18e>
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	03db      	lsls	r3, r3, #15
 8000838:	2400      	movs	r4, #0
 800083a:	469c      	mov	ip, r3
 800083c:	22ff      	movs	r2, #255	; 0xff
 800083e:	e6f2      	b.n	8000626 <__aeabi_fadd+0x8a>
 8000840:	0030      	movs	r0, r6
 8000842:	4440      	add	r0, r8
 8000844:	2501      	movs	r5, #1
 8000846:	0143      	lsls	r3, r0, #5
 8000848:	d400      	bmi.n	800084c <__aeabi_fadd+0x2b0>
 800084a:	e75b      	b.n	8000704 <__aeabi_fadd+0x168>
 800084c:	2502      	movs	r5, #2
 800084e:	e718      	b.n	8000682 <__aeabi_fadd+0xe6>
 8000850:	4643      	mov	r3, r8
 8000852:	2501      	movs	r5, #1
 8000854:	1b98      	subs	r0, r3, r6
 8000856:	e6c5      	b.n	80005e4 <__aeabi_fadd+0x48>
 8000858:	2320      	movs	r3, #32
 800085a:	4644      	mov	r4, r8
 800085c:	4640      	mov	r0, r8
 800085e:	40d4      	lsrs	r4, r2
 8000860:	1a9a      	subs	r2, r3, r2
 8000862:	4090      	lsls	r0, r2
 8000864:	1e43      	subs	r3, r0, #1
 8000866:	4198      	sbcs	r0, r3
 8000868:	4320      	orrs	r0, r4
 800086a:	e7a4      	b.n	80007b6 <__aeabi_fadd+0x21a>
 800086c:	000d      	movs	r5, r1
 800086e:	e74d      	b.n	800070c <__aeabi_fadd+0x170>
 8000870:	2320      	movs	r3, #32
 8000872:	4641      	mov	r1, r8
 8000874:	4640      	mov	r0, r8
 8000876:	40d1      	lsrs	r1, r2
 8000878:	1a9a      	subs	r2, r3, r2
 800087a:	4090      	lsls	r0, r2
 800087c:	1e43      	subs	r3, r0, #1
 800087e:	4198      	sbcs	r0, r3
 8000880:	4308      	orrs	r0, r1
 8000882:	e770      	b.n	8000766 <__aeabi_fadd+0x1ca>
 8000884:	4642      	mov	r2, r8
 8000886:	2a00      	cmp	r2, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x2f0>
 800088a:	e74f      	b.n	800072c <__aeabi_fadd+0x190>
 800088c:	2e00      	cmp	r6, #0
 800088e:	d100      	bne.n	8000892 <__aeabi_fadd+0x2f6>
 8000890:	e74d      	b.n	800072e <__aeabi_fadd+0x192>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	03d2      	lsls	r2, r2, #15
 8000896:	4213      	tst	r3, r2
 8000898:	d100      	bne.n	800089c <__aeabi_fadd+0x300>
 800089a:	e748      	b.n	800072e <__aeabi_fadd+0x192>
 800089c:	4210      	tst	r0, r2
 800089e:	d000      	beq.n	80008a2 <__aeabi_fadd+0x306>
 80008a0:	e745      	b.n	800072e <__aeabi_fadd+0x192>
 80008a2:	0003      	movs	r3, r0
 80008a4:	e743      	b.n	800072e <__aeabi_fadd+0x192>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d090      	beq.n	80007cc <__aeabi_fadd+0x230>
 80008aa:	000c      	movs	r4, r1
 80008ac:	4684      	mov	ip, r0
 80008ae:	2200      	movs	r2, #0
 80008b0:	e6b9      	b.n	8000626 <__aeabi_fadd+0x8a>
 80008b2:	4643      	mov	r3, r8
 80008b4:	000c      	movs	r4, r1
 80008b6:	1af0      	subs	r0, r6, r3
 80008b8:	3501      	adds	r5, #1
 80008ba:	e693      	b.n	80005e4 <__aeabi_fadd+0x48>
 80008bc:	4684      	mov	ip, r0
 80008be:	2200      	movs	r2, #0
 80008c0:	e6b1      	b.n	8000626 <__aeabi_fadd+0x8a>
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x32c>
 80008c6:	e71d      	b.n	8000704 <__aeabi_fadd+0x168>
 80008c8:	2300      	movs	r3, #0
 80008ca:	2400      	movs	r4, #0
 80008cc:	469c      	mov	ip, r3
 80008ce:	e6aa      	b.n	8000626 <__aeabi_fadd+0x8a>
 80008d0:	fbffffff 	.word	0xfbffffff
 80008d4:	7dffffff 	.word	0x7dffffff

080008d8 <__aeabi_fmul>:
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	464f      	mov	r7, r9
 80008dc:	4646      	mov	r6, r8
 80008de:	46d6      	mov	lr, sl
 80008e0:	0244      	lsls	r4, r0, #9
 80008e2:	0045      	lsls	r5, r0, #1
 80008e4:	b5c0      	push	{r6, r7, lr}
 80008e6:	0a64      	lsrs	r4, r4, #9
 80008e8:	1c0f      	adds	r7, r1, #0
 80008ea:	0e2d      	lsrs	r5, r5, #24
 80008ec:	0fc6      	lsrs	r6, r0, #31
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fmul+0x1c>
 80008f2:	e08d      	b.n	8000a10 <__aeabi_fmul+0x138>
 80008f4:	2dff      	cmp	r5, #255	; 0xff
 80008f6:	d100      	bne.n	80008fa <__aeabi_fmul+0x22>
 80008f8:	e092      	b.n	8000a20 <__aeabi_fmul+0x148>
 80008fa:	2300      	movs	r3, #0
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	4699      	mov	r9, r3
 8000900:	469a      	mov	sl, r3
 8000902:	00e4      	lsls	r4, r4, #3
 8000904:	04c0      	lsls	r0, r0, #19
 8000906:	4304      	orrs	r4, r0
 8000908:	3d7f      	subs	r5, #127	; 0x7f
 800090a:	0278      	lsls	r0, r7, #9
 800090c:	0a43      	lsrs	r3, r0, #9
 800090e:	4698      	mov	r8, r3
 8000910:	007b      	lsls	r3, r7, #1
 8000912:	0e1b      	lsrs	r3, r3, #24
 8000914:	0fff      	lsrs	r7, r7, #31
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fmul+0x44>
 800091a:	e070      	b.n	80009fe <__aeabi_fmul+0x126>
 800091c:	2bff      	cmp	r3, #255	; 0xff
 800091e:	d100      	bne.n	8000922 <__aeabi_fmul+0x4a>
 8000920:	e086      	b.n	8000a30 <__aeabi_fmul+0x158>
 8000922:	4642      	mov	r2, r8
 8000924:	00d0      	lsls	r0, r2, #3
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	3b7f      	subs	r3, #127	; 0x7f
 800092a:	18ed      	adds	r5, r5, r3
 800092c:	2300      	movs	r3, #0
 800092e:	04d2      	lsls	r2, r2, #19
 8000930:	4302      	orrs	r2, r0
 8000932:	4690      	mov	r8, r2
 8000934:	469c      	mov	ip, r3
 8000936:	0031      	movs	r1, r6
 8000938:	464b      	mov	r3, r9
 800093a:	4079      	eors	r1, r7
 800093c:	1c68      	adds	r0, r5, #1
 800093e:	2b0f      	cmp	r3, #15
 8000940:	d81c      	bhi.n	800097c <__aeabi_fmul+0xa4>
 8000942:	4a76      	ldr	r2, [pc, #472]	; (8000b1c <__aeabi_fmul+0x244>)
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	58d3      	ldr	r3, [r2, r3]
 8000948:	469f      	mov	pc, r3
 800094a:	0039      	movs	r1, r7
 800094c:	4644      	mov	r4, r8
 800094e:	46e2      	mov	sl, ip
 8000950:	4653      	mov	r3, sl
 8000952:	2b02      	cmp	r3, #2
 8000954:	d00f      	beq.n	8000976 <__aeabi_fmul+0x9e>
 8000956:	2b03      	cmp	r3, #3
 8000958:	d100      	bne.n	800095c <__aeabi_fmul+0x84>
 800095a:	e0d7      	b.n	8000b0c <__aeabi_fmul+0x234>
 800095c:	2b01      	cmp	r3, #1
 800095e:	d137      	bne.n	80009d0 <__aeabi_fmul+0xf8>
 8000960:	2000      	movs	r0, #0
 8000962:	2400      	movs	r4, #0
 8000964:	05c0      	lsls	r0, r0, #23
 8000966:	4320      	orrs	r0, r4
 8000968:	07c9      	lsls	r1, r1, #31
 800096a:	4308      	orrs	r0, r1
 800096c:	bce0      	pop	{r5, r6, r7}
 800096e:	46ba      	mov	sl, r7
 8000970:	46b1      	mov	r9, r6
 8000972:	46a8      	mov	r8, r5
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	2400      	movs	r4, #0
 800097a:	e7f3      	b.n	8000964 <__aeabi_fmul+0x8c>
 800097c:	0c26      	lsrs	r6, r4, #16
 800097e:	0424      	lsls	r4, r4, #16
 8000980:	0c22      	lsrs	r2, r4, #16
 8000982:	4644      	mov	r4, r8
 8000984:	0424      	lsls	r4, r4, #16
 8000986:	0c24      	lsrs	r4, r4, #16
 8000988:	4643      	mov	r3, r8
 800098a:	0027      	movs	r7, r4
 800098c:	0c1b      	lsrs	r3, r3, #16
 800098e:	4357      	muls	r7, r2
 8000990:	4374      	muls	r4, r6
 8000992:	435a      	muls	r2, r3
 8000994:	435e      	muls	r6, r3
 8000996:	1912      	adds	r2, r2, r4
 8000998:	0c3b      	lsrs	r3, r7, #16
 800099a:	189b      	adds	r3, r3, r2
 800099c:	429c      	cmp	r4, r3
 800099e:	d903      	bls.n	80009a8 <__aeabi_fmul+0xd0>
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	4694      	mov	ip, r2
 80009a6:	4466      	add	r6, ip
 80009a8:	043f      	lsls	r7, r7, #16
 80009aa:	041a      	lsls	r2, r3, #16
 80009ac:	0c3f      	lsrs	r7, r7, #16
 80009ae:	19d2      	adds	r2, r2, r7
 80009b0:	0194      	lsls	r4, r2, #6
 80009b2:	1e67      	subs	r7, r4, #1
 80009b4:	41bc      	sbcs	r4, r7
 80009b6:	0c1b      	lsrs	r3, r3, #16
 80009b8:	0e92      	lsrs	r2, r2, #26
 80009ba:	199b      	adds	r3, r3, r6
 80009bc:	4314      	orrs	r4, r2
 80009be:	019b      	lsls	r3, r3, #6
 80009c0:	431c      	orrs	r4, r3
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	d400      	bmi.n	80009c8 <__aeabi_fmul+0xf0>
 80009c6:	e09b      	b.n	8000b00 <__aeabi_fmul+0x228>
 80009c8:	2301      	movs	r3, #1
 80009ca:	0862      	lsrs	r2, r4, #1
 80009cc:	401c      	ands	r4, r3
 80009ce:	4314      	orrs	r4, r2
 80009d0:	0002      	movs	r2, r0
 80009d2:	327f      	adds	r2, #127	; 0x7f
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	dd64      	ble.n	8000aa2 <__aeabi_fmul+0x1ca>
 80009d8:	0763      	lsls	r3, r4, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fmul+0x10e>
 80009dc:	230f      	movs	r3, #15
 80009de:	4023      	ands	r3, r4
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fmul+0x10e>
 80009e4:	3404      	adds	r4, #4
 80009e6:	0123      	lsls	r3, r4, #4
 80009e8:	d503      	bpl.n	80009f2 <__aeabi_fmul+0x11a>
 80009ea:	0002      	movs	r2, r0
 80009ec:	4b4c      	ldr	r3, [pc, #304]	; (8000b20 <__aeabi_fmul+0x248>)
 80009ee:	3280      	adds	r2, #128	; 0x80
 80009f0:	401c      	ands	r4, r3
 80009f2:	2afe      	cmp	r2, #254	; 0xfe
 80009f4:	dcbf      	bgt.n	8000976 <__aeabi_fmul+0x9e>
 80009f6:	01a4      	lsls	r4, r4, #6
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	b2d0      	uxtb	r0, r2
 80009fc:	e7b2      	b.n	8000964 <__aeabi_fmul+0x8c>
 80009fe:	4643      	mov	r3, r8
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d13d      	bne.n	8000a80 <__aeabi_fmul+0x1a8>
 8000a04:	464a      	mov	r2, r9
 8000a06:	3301      	adds	r3, #1
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	4691      	mov	r9, r2
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	e792      	b.n	8000936 <__aeabi_fmul+0x5e>
 8000a10:	2c00      	cmp	r4, #0
 8000a12:	d129      	bne.n	8000a68 <__aeabi_fmul+0x190>
 8000a14:	2304      	movs	r3, #4
 8000a16:	4699      	mov	r9, r3
 8000a18:	3b03      	subs	r3, #3
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	e774      	b.n	800090a <__aeabi_fmul+0x32>
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	d11b      	bne.n	8000a5c <__aeabi_fmul+0x184>
 8000a24:	2308      	movs	r3, #8
 8000a26:	4699      	mov	r9, r3
 8000a28:	3b06      	subs	r3, #6
 8000a2a:	25ff      	movs	r5, #255	; 0xff
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	e76c      	b.n	800090a <__aeabi_fmul+0x32>
 8000a30:	4643      	mov	r3, r8
 8000a32:	35ff      	adds	r5, #255	; 0xff
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10b      	bne.n	8000a50 <__aeabi_fmul+0x178>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4691      	mov	r9, r2
 8000a40:	469c      	mov	ip, r3
 8000a42:	e778      	b.n	8000936 <__aeabi_fmul+0x5e>
 8000a44:	4653      	mov	r3, sl
 8000a46:	0031      	movs	r1, r6
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fmul+0x176>
 8000a4c:	e783      	b.n	8000956 <__aeabi_fmul+0x7e>
 8000a4e:	e792      	b.n	8000976 <__aeabi_fmul+0x9e>
 8000a50:	2303      	movs	r3, #3
 8000a52:	464a      	mov	r2, r9
 8000a54:	431a      	orrs	r2, r3
 8000a56:	4691      	mov	r9, r2
 8000a58:	469c      	mov	ip, r3
 8000a5a:	e76c      	b.n	8000936 <__aeabi_fmul+0x5e>
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	4699      	mov	r9, r3
 8000a60:	3b09      	subs	r3, #9
 8000a62:	25ff      	movs	r5, #255	; 0xff
 8000a64:	469a      	mov	sl, r3
 8000a66:	e750      	b.n	800090a <__aeabi_fmul+0x32>
 8000a68:	0020      	movs	r0, r4
 8000a6a:	f001 ff7f 	bl	800296c <__clzsi2>
 8000a6e:	2576      	movs	r5, #118	; 0x76
 8000a70:	1f43      	subs	r3, r0, #5
 8000a72:	409c      	lsls	r4, r3
 8000a74:	2300      	movs	r3, #0
 8000a76:	426d      	negs	r5, r5
 8000a78:	4699      	mov	r9, r3
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	1a2d      	subs	r5, r5, r0
 8000a7e:	e744      	b.n	800090a <__aeabi_fmul+0x32>
 8000a80:	4640      	mov	r0, r8
 8000a82:	f001 ff73 	bl	800296c <__clzsi2>
 8000a86:	4642      	mov	r2, r8
 8000a88:	1f43      	subs	r3, r0, #5
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	1a2d      	subs	r5, r5, r0
 8000a90:	4690      	mov	r8, r2
 8000a92:	469c      	mov	ip, r3
 8000a94:	3d76      	subs	r5, #118	; 0x76
 8000a96:	e74e      	b.n	8000936 <__aeabi_fmul+0x5e>
 8000a98:	2480      	movs	r4, #128	; 0x80
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	20ff      	movs	r0, #255	; 0xff
 8000a9e:	03e4      	lsls	r4, r4, #15
 8000aa0:	e760      	b.n	8000964 <__aeabi_fmul+0x8c>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	2b1b      	cmp	r3, #27
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_fmul+0x1d4>
 8000aaa:	e759      	b.n	8000960 <__aeabi_fmul+0x88>
 8000aac:	0022      	movs	r2, r4
 8000aae:	309e      	adds	r0, #158	; 0x9e
 8000ab0:	40da      	lsrs	r2, r3
 8000ab2:	4084      	lsls	r4, r0
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	1e62      	subs	r2, r4, #1
 8000ab8:	4194      	sbcs	r4, r2
 8000aba:	431c      	orrs	r4, r3
 8000abc:	0763      	lsls	r3, r4, #29
 8000abe:	d004      	beq.n	8000aca <__aeabi_fmul+0x1f2>
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d000      	beq.n	8000aca <__aeabi_fmul+0x1f2>
 8000ac8:	3404      	adds	r4, #4
 8000aca:	0163      	lsls	r3, r4, #5
 8000acc:	d51a      	bpl.n	8000b04 <__aeabi_fmul+0x22c>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	e747      	b.n	8000964 <__aeabi_fmul+0x8c>
 8000ad4:	2080      	movs	r0, #128	; 0x80
 8000ad6:	03c0      	lsls	r0, r0, #15
 8000ad8:	4204      	tst	r4, r0
 8000ada:	d009      	beq.n	8000af0 <__aeabi_fmul+0x218>
 8000adc:	4643      	mov	r3, r8
 8000ade:	4203      	tst	r3, r0
 8000ae0:	d106      	bne.n	8000af0 <__aeabi_fmul+0x218>
 8000ae2:	4644      	mov	r4, r8
 8000ae4:	4304      	orrs	r4, r0
 8000ae6:	0264      	lsls	r4, r4, #9
 8000ae8:	0039      	movs	r1, r7
 8000aea:	20ff      	movs	r0, #255	; 0xff
 8000aec:	0a64      	lsrs	r4, r4, #9
 8000aee:	e739      	b.n	8000964 <__aeabi_fmul+0x8c>
 8000af0:	2080      	movs	r0, #128	; 0x80
 8000af2:	03c0      	lsls	r0, r0, #15
 8000af4:	4304      	orrs	r4, r0
 8000af6:	0264      	lsls	r4, r4, #9
 8000af8:	0031      	movs	r1, r6
 8000afa:	20ff      	movs	r0, #255	; 0xff
 8000afc:	0a64      	lsrs	r4, r4, #9
 8000afe:	e731      	b.n	8000964 <__aeabi_fmul+0x8c>
 8000b00:	0028      	movs	r0, r5
 8000b02:	e765      	b.n	80009d0 <__aeabi_fmul+0xf8>
 8000b04:	01a4      	lsls	r4, r4, #6
 8000b06:	2000      	movs	r0, #0
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	e72b      	b.n	8000964 <__aeabi_fmul+0x8c>
 8000b0c:	2080      	movs	r0, #128	; 0x80
 8000b0e:	03c0      	lsls	r0, r0, #15
 8000b10:	4304      	orrs	r4, r0
 8000b12:	0264      	lsls	r4, r4, #9
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	0a64      	lsrs	r4, r4, #9
 8000b18:	e724      	b.n	8000964 <__aeabi_fmul+0x8c>
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	0800e758 	.word	0x0800e758
 8000b20:	f7ffffff 	.word	0xf7ffffff

08000b24 <__aeabi_f2iz>:
 8000b24:	0241      	lsls	r1, r0, #9
 8000b26:	0042      	lsls	r2, r0, #1
 8000b28:	0fc3      	lsrs	r3, r0, #31
 8000b2a:	0a49      	lsrs	r1, r1, #9
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	2a7e      	cmp	r2, #126	; 0x7e
 8000b32:	dd03      	ble.n	8000b3c <__aeabi_f2iz+0x18>
 8000b34:	2a9d      	cmp	r2, #157	; 0x9d
 8000b36:	dd02      	ble.n	8000b3e <__aeabi_f2iz+0x1a>
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <__aeabi_f2iz+0x3c>)
 8000b3a:	1898      	adds	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	2080      	movs	r0, #128	; 0x80
 8000b40:	0400      	lsls	r0, r0, #16
 8000b42:	4301      	orrs	r1, r0
 8000b44:	2a95      	cmp	r2, #149	; 0x95
 8000b46:	dc07      	bgt.n	8000b58 <__aeabi_f2iz+0x34>
 8000b48:	2096      	movs	r0, #150	; 0x96
 8000b4a:	1a82      	subs	r2, r0, r2
 8000b4c:	40d1      	lsrs	r1, r2
 8000b4e:	4248      	negs	r0, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f3      	bne.n	8000b3c <__aeabi_f2iz+0x18>
 8000b54:	0008      	movs	r0, r1
 8000b56:	e7f1      	b.n	8000b3c <__aeabi_f2iz+0x18>
 8000b58:	3a96      	subs	r2, #150	; 0x96
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	e7f7      	b.n	8000b4e <__aeabi_f2iz+0x2a>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	7fffffff 	.word	0x7fffffff

08000b64 <__aeabi_i2f>:
 8000b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d013      	beq.n	8000b92 <__aeabi_i2f+0x2e>
 8000b6a:	17c3      	asrs	r3, r0, #31
 8000b6c:	18c6      	adds	r6, r0, r3
 8000b6e:	405e      	eors	r6, r3
 8000b70:	0fc4      	lsrs	r4, r0, #31
 8000b72:	0030      	movs	r0, r6
 8000b74:	f001 fefa 	bl	800296c <__clzsi2>
 8000b78:	239e      	movs	r3, #158	; 0x9e
 8000b7a:	0005      	movs	r5, r0
 8000b7c:	1a1b      	subs	r3, r3, r0
 8000b7e:	2b96      	cmp	r3, #150	; 0x96
 8000b80:	dc0f      	bgt.n	8000ba2 <__aeabi_i2f+0x3e>
 8000b82:	2808      	cmp	r0, #8
 8000b84:	dd01      	ble.n	8000b8a <__aeabi_i2f+0x26>
 8000b86:	3d08      	subs	r5, #8
 8000b88:	40ae      	lsls	r6, r5
 8000b8a:	0276      	lsls	r6, r6, #9
 8000b8c:	0a76      	lsrs	r6, r6, #9
 8000b8e:	b2d8      	uxtb	r0, r3
 8000b90:	e002      	b.n	8000b98 <__aeabi_i2f+0x34>
 8000b92:	2400      	movs	r4, #0
 8000b94:	2000      	movs	r0, #0
 8000b96:	2600      	movs	r6, #0
 8000b98:	05c0      	lsls	r0, r0, #23
 8000b9a:	4330      	orrs	r0, r6
 8000b9c:	07e4      	lsls	r4, r4, #31
 8000b9e:	4320      	orrs	r0, r4
 8000ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba2:	2b99      	cmp	r3, #153	; 0x99
 8000ba4:	dd0c      	ble.n	8000bc0 <__aeabi_i2f+0x5c>
 8000ba6:	2205      	movs	r2, #5
 8000ba8:	0031      	movs	r1, r6
 8000baa:	1a12      	subs	r2, r2, r0
 8000bac:	40d1      	lsrs	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	0001      	movs	r1, r0
 8000bb2:	0030      	movs	r0, r6
 8000bb4:	311b      	adds	r1, #27
 8000bb6:	4088      	lsls	r0, r1
 8000bb8:	1e41      	subs	r1, r0, #1
 8000bba:	4188      	sbcs	r0, r1
 8000bbc:	4302      	orrs	r2, r0
 8000bbe:	0016      	movs	r6, r2
 8000bc0:	2d05      	cmp	r5, #5
 8000bc2:	dc12      	bgt.n	8000bea <__aeabi_i2f+0x86>
 8000bc4:	0031      	movs	r1, r6
 8000bc6:	4f0d      	ldr	r7, [pc, #52]	; (8000bfc <__aeabi_i2f+0x98>)
 8000bc8:	4039      	ands	r1, r7
 8000bca:	0772      	lsls	r2, r6, #29
 8000bcc:	d009      	beq.n	8000be2 <__aeabi_i2f+0x7e>
 8000bce:	200f      	movs	r0, #15
 8000bd0:	4030      	ands	r0, r6
 8000bd2:	2804      	cmp	r0, #4
 8000bd4:	d005      	beq.n	8000be2 <__aeabi_i2f+0x7e>
 8000bd6:	3104      	adds	r1, #4
 8000bd8:	014a      	lsls	r2, r1, #5
 8000bda:	d502      	bpl.n	8000be2 <__aeabi_i2f+0x7e>
 8000bdc:	239f      	movs	r3, #159	; 0x9f
 8000bde:	4039      	ands	r1, r7
 8000be0:	1b5b      	subs	r3, r3, r5
 8000be2:	0189      	lsls	r1, r1, #6
 8000be4:	0a4e      	lsrs	r6, r1, #9
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	e7d6      	b.n	8000b98 <__aeabi_i2f+0x34>
 8000bea:	1f6a      	subs	r2, r5, #5
 8000bec:	4096      	lsls	r6, r2
 8000bee:	0031      	movs	r1, r6
 8000bf0:	4f02      	ldr	r7, [pc, #8]	; (8000bfc <__aeabi_i2f+0x98>)
 8000bf2:	4039      	ands	r1, r7
 8000bf4:	0772      	lsls	r2, r6, #29
 8000bf6:	d0f4      	beq.n	8000be2 <__aeabi_i2f+0x7e>
 8000bf8:	e7e9      	b.n	8000bce <__aeabi_i2f+0x6a>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	fbffffff 	.word	0xfbffffff

08000c00 <__aeabi_dadd>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	464f      	mov	r7, r9
 8000c04:	4646      	mov	r6, r8
 8000c06:	46d6      	mov	lr, sl
 8000c08:	000d      	movs	r5, r1
 8000c0a:	0004      	movs	r4, r0
 8000c0c:	b5c0      	push	{r6, r7, lr}
 8000c0e:	001f      	movs	r7, r3
 8000c10:	0011      	movs	r1, r2
 8000c12:	0328      	lsls	r0, r5, #12
 8000c14:	0f62      	lsrs	r2, r4, #29
 8000c16:	0a40      	lsrs	r0, r0, #9
 8000c18:	4310      	orrs	r0, r2
 8000c1a:	007a      	lsls	r2, r7, #1
 8000c1c:	0d52      	lsrs	r2, r2, #21
 8000c1e:	00e3      	lsls	r3, r4, #3
 8000c20:	033c      	lsls	r4, r7, #12
 8000c22:	4691      	mov	r9, r2
 8000c24:	0a64      	lsrs	r4, r4, #9
 8000c26:	0ffa      	lsrs	r2, r7, #31
 8000c28:	0f4f      	lsrs	r7, r1, #29
 8000c2a:	006e      	lsls	r6, r5, #1
 8000c2c:	4327      	orrs	r7, r4
 8000c2e:	4692      	mov	sl, r2
 8000c30:	46b8      	mov	r8, r7
 8000c32:	0d76      	lsrs	r6, r6, #21
 8000c34:	0fed      	lsrs	r5, r5, #31
 8000c36:	00c9      	lsls	r1, r1, #3
 8000c38:	4295      	cmp	r5, r2
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dadd+0x3e>
 8000c3c:	e099      	b.n	8000d72 <__aeabi_dadd+0x172>
 8000c3e:	464c      	mov	r4, r9
 8000c40:	1b34      	subs	r4, r6, r4
 8000c42:	46a4      	mov	ip, r4
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	dc00      	bgt.n	8000c4a <__aeabi_dadd+0x4a>
 8000c48:	e07c      	b.n	8000d44 <__aeabi_dadd+0x144>
 8000c4a:	464a      	mov	r2, r9
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x52>
 8000c50:	e0b8      	b.n	8000dc4 <__aeabi_dadd+0x1c4>
 8000c52:	4ac5      	ldr	r2, [pc, #788]	; (8000f68 <__aeabi_dadd+0x368>)
 8000c54:	4296      	cmp	r6, r2
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x5a>
 8000c58:	e11c      	b.n	8000e94 <__aeabi_dadd+0x294>
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	003c      	movs	r4, r7
 8000c5e:	0412      	lsls	r2, r2, #16
 8000c60:	4314      	orrs	r4, r2
 8000c62:	46a0      	mov	r8, r4
 8000c64:	4662      	mov	r2, ip
 8000c66:	2a38      	cmp	r2, #56	; 0x38
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dadd+0x6c>
 8000c6a:	e161      	b.n	8000f30 <__aeabi_dadd+0x330>
 8000c6c:	2a1f      	cmp	r2, #31
 8000c6e:	dd00      	ble.n	8000c72 <__aeabi_dadd+0x72>
 8000c70:	e1cc      	b.n	800100c <__aeabi_dadd+0x40c>
 8000c72:	4664      	mov	r4, ip
 8000c74:	2220      	movs	r2, #32
 8000c76:	1b12      	subs	r2, r2, r4
 8000c78:	4644      	mov	r4, r8
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	000f      	movs	r7, r1
 8000c7e:	46a1      	mov	r9, r4
 8000c80:	4664      	mov	r4, ip
 8000c82:	4091      	lsls	r1, r2
 8000c84:	40e7      	lsrs	r7, r4
 8000c86:	464c      	mov	r4, r9
 8000c88:	1e4a      	subs	r2, r1, #1
 8000c8a:	4191      	sbcs	r1, r2
 8000c8c:	433c      	orrs	r4, r7
 8000c8e:	4642      	mov	r2, r8
 8000c90:	4321      	orrs	r1, r4
 8000c92:	4664      	mov	r4, ip
 8000c94:	40e2      	lsrs	r2, r4
 8000c96:	1a80      	subs	r0, r0, r2
 8000c98:	1a5c      	subs	r4, r3, r1
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	419b      	sbcs	r3, r3
 8000c9e:	425f      	negs	r7, r3
 8000ca0:	1bc7      	subs	r7, r0, r7
 8000ca2:	023b      	lsls	r3, r7, #8
 8000ca4:	d400      	bmi.n	8000ca8 <__aeabi_dadd+0xa8>
 8000ca6:	e0d0      	b.n	8000e4a <__aeabi_dadd+0x24a>
 8000ca8:	027f      	lsls	r7, r7, #9
 8000caa:	0a7f      	lsrs	r7, r7, #9
 8000cac:	2f00      	cmp	r7, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0xb2>
 8000cb0:	e0ff      	b.n	8000eb2 <__aeabi_dadd+0x2b2>
 8000cb2:	0038      	movs	r0, r7
 8000cb4:	f001 fe5a 	bl	800296c <__clzsi2>
 8000cb8:	0001      	movs	r1, r0
 8000cba:	3908      	subs	r1, #8
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	0022      	movs	r2, r4
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	408f      	lsls	r7, r1
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4317      	orrs	r7, r2
 8000cca:	42b1      	cmp	r1, r6
 8000ccc:	da00      	bge.n	8000cd0 <__aeabi_dadd+0xd0>
 8000cce:	e0ff      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 8000cd0:	1b89      	subs	r1, r1, r6
 8000cd2:	1c4b      	adds	r3, r1, #1
 8000cd4:	2b1f      	cmp	r3, #31
 8000cd6:	dd00      	ble.n	8000cda <__aeabi_dadd+0xda>
 8000cd8:	e0a8      	b.n	8000e2c <__aeabi_dadd+0x22c>
 8000cda:	2220      	movs	r2, #32
 8000cdc:	0039      	movs	r1, r7
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	0020      	movs	r0, r4
 8000ce2:	4094      	lsls	r4, r2
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	40d8      	lsrs	r0, r3
 8000ce8:	1e62      	subs	r2, r4, #1
 8000cea:	4194      	sbcs	r4, r2
 8000cec:	40df      	lsrs	r7, r3
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4301      	orrs	r1, r0
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	0763      	lsls	r3, r4, #29
 8000cf6:	d009      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	4023      	ands	r3, r4
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d005      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000d00:	1d23      	adds	r3, r4, #4
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	41a4      	sbcs	r4, r4
 8000d06:	4264      	negs	r4, r4
 8000d08:	193f      	adds	r7, r7, r4
 8000d0a:	001c      	movs	r4, r3
 8000d0c:	023b      	lsls	r3, r7, #8
 8000d0e:	d400      	bmi.n	8000d12 <__aeabi_dadd+0x112>
 8000d10:	e09e      	b.n	8000e50 <__aeabi_dadd+0x250>
 8000d12:	4b95      	ldr	r3, [pc, #596]	; (8000f68 <__aeabi_dadd+0x368>)
 8000d14:	3601      	adds	r6, #1
 8000d16:	429e      	cmp	r6, r3
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x11c>
 8000d1a:	e0b7      	b.n	8000e8c <__aeabi_dadd+0x28c>
 8000d1c:	4a93      	ldr	r2, [pc, #588]	; (8000f6c <__aeabi_dadd+0x36c>)
 8000d1e:	08e4      	lsrs	r4, r4, #3
 8000d20:	4017      	ands	r7, r2
 8000d22:	077b      	lsls	r3, r7, #29
 8000d24:	0571      	lsls	r1, r6, #21
 8000d26:	027f      	lsls	r7, r7, #9
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	0b3f      	lsrs	r7, r7, #12
 8000d2c:	0d4a      	lsrs	r2, r1, #21
 8000d2e:	0512      	lsls	r2, r2, #20
 8000d30:	433a      	orrs	r2, r7
 8000d32:	07ed      	lsls	r5, r5, #31
 8000d34:	432a      	orrs	r2, r5
 8000d36:	0018      	movs	r0, r3
 8000d38:	0011      	movs	r1, r2
 8000d3a:	bce0      	pop	{r5, r6, r7}
 8000d3c:	46ba      	mov	sl, r7
 8000d3e:	46b1      	mov	r9, r6
 8000d40:	46a8      	mov	r8, r5
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d04b      	beq.n	8000de0 <__aeabi_dadd+0x1e0>
 8000d48:	464c      	mov	r4, r9
 8000d4a:	1ba4      	subs	r4, r4, r6
 8000d4c:	46a4      	mov	ip, r4
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d000      	beq.n	8000d54 <__aeabi_dadd+0x154>
 8000d52:	e123      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8000d54:	0004      	movs	r4, r0
 8000d56:	431c      	orrs	r4, r3
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x15c>
 8000d5a:	e1af      	b.n	80010bc <__aeabi_dadd+0x4bc>
 8000d5c:	4662      	mov	r2, ip
 8000d5e:	1e54      	subs	r4, r2, #1
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x166>
 8000d64:	e215      	b.n	8001192 <__aeabi_dadd+0x592>
 8000d66:	4d80      	ldr	r5, [pc, #512]	; (8000f68 <__aeabi_dadd+0x368>)
 8000d68:	45ac      	cmp	ip, r5
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x16e>
 8000d6c:	e1c8      	b.n	8001100 <__aeabi_dadd+0x500>
 8000d6e:	46a4      	mov	ip, r4
 8000d70:	e11b      	b.n	8000faa <__aeabi_dadd+0x3aa>
 8000d72:	464a      	mov	r2, r9
 8000d74:	1ab2      	subs	r2, r6, r2
 8000d76:	4694      	mov	ip, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_dadd+0x17e>
 8000d7c:	e0ac      	b.n	8000ed8 <__aeabi_dadd+0x2d8>
 8000d7e:	464a      	mov	r2, r9
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d043      	beq.n	8000e0c <__aeabi_dadd+0x20c>
 8000d84:	4a78      	ldr	r2, [pc, #480]	; (8000f68 <__aeabi_dadd+0x368>)
 8000d86:	4296      	cmp	r6, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x18c>
 8000d8a:	e1af      	b.n	80010ec <__aeabi_dadd+0x4ec>
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	003c      	movs	r4, r7
 8000d90:	0412      	lsls	r2, r2, #16
 8000d92:	4314      	orrs	r4, r2
 8000d94:	46a0      	mov	r8, r4
 8000d96:	4662      	mov	r2, ip
 8000d98:	2a38      	cmp	r2, #56	; 0x38
 8000d9a:	dc67      	bgt.n	8000e6c <__aeabi_dadd+0x26c>
 8000d9c:	2a1f      	cmp	r2, #31
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_dadd+0x1a2>
 8000da0:	e15f      	b.n	8001062 <__aeabi_dadd+0x462>
 8000da2:	4647      	mov	r7, r8
 8000da4:	3a20      	subs	r2, #32
 8000da6:	40d7      	lsrs	r7, r2
 8000da8:	4662      	mov	r2, ip
 8000daa:	2a20      	cmp	r2, #32
 8000dac:	d005      	beq.n	8000dba <__aeabi_dadd+0x1ba>
 8000dae:	4664      	mov	r4, ip
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	1b12      	subs	r2, r2, r4
 8000db4:	4644      	mov	r4, r8
 8000db6:	4094      	lsls	r4, r2
 8000db8:	4321      	orrs	r1, r4
 8000dba:	1e4a      	subs	r2, r1, #1
 8000dbc:	4191      	sbcs	r1, r2
 8000dbe:	000c      	movs	r4, r1
 8000dc0:	433c      	orrs	r4, r7
 8000dc2:	e057      	b.n	8000e74 <__aeabi_dadd+0x274>
 8000dc4:	003a      	movs	r2, r7
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x1cc>
 8000dca:	e105      	b.n	8000fd8 <__aeabi_dadd+0x3d8>
 8000dcc:	0022      	movs	r2, r4
 8000dce:	3a01      	subs	r2, #1
 8000dd0:	2c01      	cmp	r4, #1
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x1d6>
 8000dd4:	e182      	b.n	80010dc <__aeabi_dadd+0x4dc>
 8000dd6:	4c64      	ldr	r4, [pc, #400]	; (8000f68 <__aeabi_dadd+0x368>)
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	d05b      	beq.n	8000e94 <__aeabi_dadd+0x294>
 8000ddc:	4694      	mov	ip, r2
 8000dde:	e741      	b.n	8000c64 <__aeabi_dadd+0x64>
 8000de0:	4c63      	ldr	r4, [pc, #396]	; (8000f70 <__aeabi_dadd+0x370>)
 8000de2:	1c77      	adds	r7, r6, #1
 8000de4:	4227      	tst	r7, r4
 8000de6:	d000      	beq.n	8000dea <__aeabi_dadd+0x1ea>
 8000de8:	e0c4      	b.n	8000f74 <__aeabi_dadd+0x374>
 8000dea:	0004      	movs	r4, r0
 8000dec:	431c      	orrs	r4, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_dadd+0x1f4>
 8000df2:	e169      	b.n	80010c8 <__aeabi_dadd+0x4c8>
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dadd+0x1fa>
 8000df8:	e1bf      	b.n	800117a <__aeabi_dadd+0x57a>
 8000dfa:	4644      	mov	r4, r8
 8000dfc:	430c      	orrs	r4, r1
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x202>
 8000e00:	e1d0      	b.n	80011a4 <__aeabi_dadd+0x5a4>
 8000e02:	0742      	lsls	r2, r0, #29
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	08c0      	lsrs	r0, r0, #3
 8000e0a:	e029      	b.n	8000e60 <__aeabi_dadd+0x260>
 8000e0c:	003a      	movs	r2, r7
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dadd+0x214>
 8000e12:	e170      	b.n	80010f6 <__aeabi_dadd+0x4f6>
 8000e14:	4662      	mov	r2, ip
 8000e16:	4664      	mov	r4, ip
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	2c01      	cmp	r4, #1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x220>
 8000e1e:	e0e0      	b.n	8000fe2 <__aeabi_dadd+0x3e2>
 8000e20:	4c51      	ldr	r4, [pc, #324]	; (8000f68 <__aeabi_dadd+0x368>)
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d100      	bne.n	8000e28 <__aeabi_dadd+0x228>
 8000e26:	e161      	b.n	80010ec <__aeabi_dadd+0x4ec>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	e7b4      	b.n	8000d96 <__aeabi_dadd+0x196>
 8000e2c:	003a      	movs	r2, r7
 8000e2e:	391f      	subs	r1, #31
 8000e30:	40ca      	lsrs	r2, r1
 8000e32:	0011      	movs	r1, r2
 8000e34:	2b20      	cmp	r3, #32
 8000e36:	d003      	beq.n	8000e40 <__aeabi_dadd+0x240>
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	409f      	lsls	r7, r3
 8000e3e:	433c      	orrs	r4, r7
 8000e40:	1e63      	subs	r3, r4, #1
 8000e42:	419c      	sbcs	r4, r3
 8000e44:	2700      	movs	r7, #0
 8000e46:	2600      	movs	r6, #0
 8000e48:	430c      	orrs	r4, r1
 8000e4a:	0763      	lsls	r3, r4, #29
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_dadd+0x250>
 8000e4e:	e753      	b.n	8000cf8 <__aeabi_dadd+0xf8>
 8000e50:	46b4      	mov	ip, r6
 8000e52:	08e4      	lsrs	r4, r4, #3
 8000e54:	077b      	lsls	r3, r7, #29
 8000e56:	4323      	orrs	r3, r4
 8000e58:	08f8      	lsrs	r0, r7, #3
 8000e5a:	4a43      	ldr	r2, [pc, #268]	; (8000f68 <__aeabi_dadd+0x368>)
 8000e5c:	4594      	cmp	ip, r2
 8000e5e:	d01d      	beq.n	8000e9c <__aeabi_dadd+0x29c>
 8000e60:	4662      	mov	r2, ip
 8000e62:	0307      	lsls	r7, r0, #12
 8000e64:	0552      	lsls	r2, r2, #21
 8000e66:	0b3f      	lsrs	r7, r7, #12
 8000e68:	0d52      	lsrs	r2, r2, #21
 8000e6a:	e760      	b.n	8000d2e <__aeabi_dadd+0x12e>
 8000e6c:	4644      	mov	r4, r8
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	1e62      	subs	r2, r4, #1
 8000e72:	4194      	sbcs	r4, r2
 8000e74:	18e4      	adds	r4, r4, r3
 8000e76:	429c      	cmp	r4, r3
 8000e78:	419b      	sbcs	r3, r3
 8000e7a:	425f      	negs	r7, r3
 8000e7c:	183f      	adds	r7, r7, r0
 8000e7e:	023b      	lsls	r3, r7, #8
 8000e80:	d5e3      	bpl.n	8000e4a <__aeabi_dadd+0x24a>
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <__aeabi_dadd+0x368>)
 8000e84:	3601      	adds	r6, #1
 8000e86:	429e      	cmp	r6, r3
 8000e88:	d000      	beq.n	8000e8c <__aeabi_dadd+0x28c>
 8000e8a:	e0b5      	b.n	8000ff8 <__aeabi_dadd+0x3f8>
 8000e8c:	0032      	movs	r2, r6
 8000e8e:	2700      	movs	r7, #0
 8000e90:	2300      	movs	r3, #0
 8000e92:	e74c      	b.n	8000d2e <__aeabi_dadd+0x12e>
 8000e94:	0742      	lsls	r2, r0, #29
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	08c0      	lsrs	r0, r0, #3
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	4302      	orrs	r2, r0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_dadd+0x2a4>
 8000ea2:	e1e1      	b.n	8001268 <__aeabi_dadd+0x668>
 8000ea4:	2780      	movs	r7, #128	; 0x80
 8000ea6:	033f      	lsls	r7, r7, #12
 8000ea8:	4307      	orrs	r7, r0
 8000eaa:	033f      	lsls	r7, r7, #12
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <__aeabi_dadd+0x368>)
 8000eae:	0b3f      	lsrs	r7, r7, #12
 8000eb0:	e73d      	b.n	8000d2e <__aeabi_dadd+0x12e>
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	f001 fd5a 	bl	800296c <__clzsi2>
 8000eb8:	0001      	movs	r1, r0
 8000eba:	3118      	adds	r1, #24
 8000ebc:	291f      	cmp	r1, #31
 8000ebe:	dc00      	bgt.n	8000ec2 <__aeabi_dadd+0x2c2>
 8000ec0:	e6fc      	b.n	8000cbc <__aeabi_dadd+0xbc>
 8000ec2:	3808      	subs	r0, #8
 8000ec4:	4084      	lsls	r4, r0
 8000ec6:	0027      	movs	r7, r4
 8000ec8:	2400      	movs	r4, #0
 8000eca:	42b1      	cmp	r1, r6
 8000ecc:	db00      	blt.n	8000ed0 <__aeabi_dadd+0x2d0>
 8000ece:	e6ff      	b.n	8000cd0 <__aeabi_dadd+0xd0>
 8000ed0:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <__aeabi_dadd+0x36c>)
 8000ed2:	1a76      	subs	r6, r6, r1
 8000ed4:	4017      	ands	r7, r2
 8000ed6:	e70d      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d02f      	beq.n	8000f3c <__aeabi_dadd+0x33c>
 8000edc:	464a      	mov	r2, r9
 8000ede:	1b92      	subs	r2, r2, r6
 8000ee0:	4694      	mov	ip, r2
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x2e8>
 8000ee6:	e0ad      	b.n	8001044 <__aeabi_dadd+0x444>
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <__aeabi_dadd+0x368>)
 8000eea:	4591      	cmp	r9, r2
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x2f0>
 8000eee:	e10f      	b.n	8001110 <__aeabi_dadd+0x510>
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	0412      	lsls	r2, r2, #16
 8000ef4:	4310      	orrs	r0, r2
 8000ef6:	4662      	mov	r2, ip
 8000ef8:	2a38      	cmp	r2, #56	; 0x38
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dadd+0x2fe>
 8000efc:	e10f      	b.n	800111e <__aeabi_dadd+0x51e>
 8000efe:	2a1f      	cmp	r2, #31
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_dadd+0x304>
 8000f02:	e180      	b.n	8001206 <__aeabi_dadd+0x606>
 8000f04:	4664      	mov	r4, ip
 8000f06:	2220      	movs	r2, #32
 8000f08:	001e      	movs	r6, r3
 8000f0a:	1b12      	subs	r2, r2, r4
 8000f0c:	4667      	mov	r7, ip
 8000f0e:	0004      	movs	r4, r0
 8000f10:	4093      	lsls	r3, r2
 8000f12:	4094      	lsls	r4, r2
 8000f14:	40fe      	lsrs	r6, r7
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	4193      	sbcs	r3, r2
 8000f1a:	40f8      	lsrs	r0, r7
 8000f1c:	4334      	orrs	r4, r6
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	4480      	add	r8, r0
 8000f22:	1864      	adds	r4, r4, r1
 8000f24:	428c      	cmp	r4, r1
 8000f26:	41bf      	sbcs	r7, r7
 8000f28:	427f      	negs	r7, r7
 8000f2a:	464e      	mov	r6, r9
 8000f2c:	4447      	add	r7, r8
 8000f2e:	e7a6      	b.n	8000e7e <__aeabi_dadd+0x27e>
 8000f30:	4642      	mov	r2, r8
 8000f32:	430a      	orrs	r2, r1
 8000f34:	0011      	movs	r1, r2
 8000f36:	1e4a      	subs	r2, r1, #1
 8000f38:	4191      	sbcs	r1, r2
 8000f3a:	e6ad      	b.n	8000c98 <__aeabi_dadd+0x98>
 8000f3c:	4c0c      	ldr	r4, [pc, #48]	; (8000f70 <__aeabi_dadd+0x370>)
 8000f3e:	1c72      	adds	r2, r6, #1
 8000f40:	4222      	tst	r2, r4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_dadd+0x346>
 8000f44:	e0a1      	b.n	800108a <__aeabi_dadd+0x48a>
 8000f46:	0002      	movs	r2, r0
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_dadd+0x350>
 8000f4e:	e0fa      	b.n	8001146 <__aeabi_dadd+0x546>
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x356>
 8000f54:	e145      	b.n	80011e2 <__aeabi_dadd+0x5e2>
 8000f56:	003a      	movs	r2, r7
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dadd+0x35e>
 8000f5c:	e146      	b.n	80011ec <__aeabi_dadd+0x5ec>
 8000f5e:	0742      	lsls	r2, r0, #29
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	08c0      	lsrs	r0, r0, #3
 8000f66:	e77b      	b.n	8000e60 <__aeabi_dadd+0x260>
 8000f68:	000007ff 	.word	0x000007ff
 8000f6c:	ff7fffff 	.word	0xff7fffff
 8000f70:	000007fe 	.word	0x000007fe
 8000f74:	4647      	mov	r7, r8
 8000f76:	1a5c      	subs	r4, r3, r1
 8000f78:	1bc2      	subs	r2, r0, r7
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	41bf      	sbcs	r7, r7
 8000f7e:	427f      	negs	r7, r7
 8000f80:	46b9      	mov	r9, r7
 8000f82:	0017      	movs	r7, r2
 8000f84:	464a      	mov	r2, r9
 8000f86:	1abf      	subs	r7, r7, r2
 8000f88:	023a      	lsls	r2, r7, #8
 8000f8a:	d500      	bpl.n	8000f8e <__aeabi_dadd+0x38e>
 8000f8c:	e08d      	b.n	80010aa <__aeabi_dadd+0x4aa>
 8000f8e:	0023      	movs	r3, r4
 8000f90:	433b      	orrs	r3, r7
 8000f92:	d000      	beq.n	8000f96 <__aeabi_dadd+0x396>
 8000f94:	e68a      	b.n	8000cac <__aeabi_dadd+0xac>
 8000f96:	2000      	movs	r0, #0
 8000f98:	2500      	movs	r5, #0
 8000f9a:	e761      	b.n	8000e60 <__aeabi_dadd+0x260>
 8000f9c:	4cb4      	ldr	r4, [pc, #720]	; (8001270 <__aeabi_dadd+0x670>)
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x3a4>
 8000fa2:	e0ad      	b.n	8001100 <__aeabi_dadd+0x500>
 8000fa4:	2480      	movs	r4, #128	; 0x80
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	4320      	orrs	r0, r4
 8000faa:	4664      	mov	r4, ip
 8000fac:	2c38      	cmp	r4, #56	; 0x38
 8000fae:	dc3d      	bgt.n	800102c <__aeabi_dadd+0x42c>
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	2c1f      	cmp	r4, #31
 8000fb4:	dd00      	ble.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000fb6:	e0b7      	b.n	8001128 <__aeabi_dadd+0x528>
 8000fb8:	2520      	movs	r5, #32
 8000fba:	001e      	movs	r6, r3
 8000fbc:	1b2d      	subs	r5, r5, r4
 8000fbe:	0004      	movs	r4, r0
 8000fc0:	40ab      	lsls	r3, r5
 8000fc2:	40ac      	lsls	r4, r5
 8000fc4:	40d6      	lsrs	r6, r2
 8000fc6:	40d0      	lsrs	r0, r2
 8000fc8:	4642      	mov	r2, r8
 8000fca:	1e5d      	subs	r5, r3, #1
 8000fcc:	41ab      	sbcs	r3, r5
 8000fce:	4334      	orrs	r4, r6
 8000fd0:	1a12      	subs	r2, r2, r0
 8000fd2:	4690      	mov	r8, r2
 8000fd4:	4323      	orrs	r3, r4
 8000fd6:	e02c      	b.n	8001032 <__aeabi_dadd+0x432>
 8000fd8:	0742      	lsls	r2, r0, #29
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	08c0      	lsrs	r0, r0, #3
 8000fe0:	e73b      	b.n	8000e5a <__aeabi_dadd+0x25a>
 8000fe2:	185c      	adds	r4, r3, r1
 8000fe4:	429c      	cmp	r4, r3
 8000fe6:	419b      	sbcs	r3, r3
 8000fe8:	4440      	add	r0, r8
 8000fea:	425b      	negs	r3, r3
 8000fec:	18c7      	adds	r7, r0, r3
 8000fee:	2601      	movs	r6, #1
 8000ff0:	023b      	lsls	r3, r7, #8
 8000ff2:	d400      	bmi.n	8000ff6 <__aeabi_dadd+0x3f6>
 8000ff4:	e729      	b.n	8000e4a <__aeabi_dadd+0x24a>
 8000ff6:	2602      	movs	r6, #2
 8000ff8:	4a9e      	ldr	r2, [pc, #632]	; (8001274 <__aeabi_dadd+0x674>)
 8000ffa:	0863      	lsrs	r3, r4, #1
 8000ffc:	4017      	ands	r7, r2
 8000ffe:	2201      	movs	r2, #1
 8001000:	4014      	ands	r4, r2
 8001002:	431c      	orrs	r4, r3
 8001004:	07fb      	lsls	r3, r7, #31
 8001006:	431c      	orrs	r4, r3
 8001008:	087f      	lsrs	r7, r7, #1
 800100a:	e673      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 800100c:	4644      	mov	r4, r8
 800100e:	3a20      	subs	r2, #32
 8001010:	40d4      	lsrs	r4, r2
 8001012:	4662      	mov	r2, ip
 8001014:	2a20      	cmp	r2, #32
 8001016:	d005      	beq.n	8001024 <__aeabi_dadd+0x424>
 8001018:	4667      	mov	r7, ip
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	1bd2      	subs	r2, r2, r7
 800101e:	4647      	mov	r7, r8
 8001020:	4097      	lsls	r7, r2
 8001022:	4339      	orrs	r1, r7
 8001024:	1e4a      	subs	r2, r1, #1
 8001026:	4191      	sbcs	r1, r2
 8001028:	4321      	orrs	r1, r4
 800102a:	e635      	b.n	8000c98 <__aeabi_dadd+0x98>
 800102c:	4303      	orrs	r3, r0
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	4183      	sbcs	r3, r0
 8001032:	1acc      	subs	r4, r1, r3
 8001034:	42a1      	cmp	r1, r4
 8001036:	41bf      	sbcs	r7, r7
 8001038:	4643      	mov	r3, r8
 800103a:	427f      	negs	r7, r7
 800103c:	4655      	mov	r5, sl
 800103e:	464e      	mov	r6, r9
 8001040:	1bdf      	subs	r7, r3, r7
 8001042:	e62e      	b.n	8000ca2 <__aeabi_dadd+0xa2>
 8001044:	0002      	movs	r2, r0
 8001046:	431a      	orrs	r2, r3
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x44c>
 800104a:	e0bd      	b.n	80011c8 <__aeabi_dadd+0x5c8>
 800104c:	4662      	mov	r2, ip
 800104e:	4664      	mov	r4, ip
 8001050:	3a01      	subs	r2, #1
 8001052:	2c01      	cmp	r4, #1
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0x458>
 8001056:	e0e5      	b.n	8001224 <__aeabi_dadd+0x624>
 8001058:	4c85      	ldr	r4, [pc, #532]	; (8001270 <__aeabi_dadd+0x670>)
 800105a:	45a4      	cmp	ip, r4
 800105c:	d058      	beq.n	8001110 <__aeabi_dadd+0x510>
 800105e:	4694      	mov	ip, r2
 8001060:	e749      	b.n	8000ef6 <__aeabi_dadd+0x2f6>
 8001062:	4664      	mov	r4, ip
 8001064:	2220      	movs	r2, #32
 8001066:	1b12      	subs	r2, r2, r4
 8001068:	4644      	mov	r4, r8
 800106a:	4094      	lsls	r4, r2
 800106c:	000f      	movs	r7, r1
 800106e:	46a1      	mov	r9, r4
 8001070:	4664      	mov	r4, ip
 8001072:	4091      	lsls	r1, r2
 8001074:	40e7      	lsrs	r7, r4
 8001076:	464c      	mov	r4, r9
 8001078:	1e4a      	subs	r2, r1, #1
 800107a:	4191      	sbcs	r1, r2
 800107c:	433c      	orrs	r4, r7
 800107e:	4642      	mov	r2, r8
 8001080:	430c      	orrs	r4, r1
 8001082:	4661      	mov	r1, ip
 8001084:	40ca      	lsrs	r2, r1
 8001086:	1880      	adds	r0, r0, r2
 8001088:	e6f4      	b.n	8000e74 <__aeabi_dadd+0x274>
 800108a:	4c79      	ldr	r4, [pc, #484]	; (8001270 <__aeabi_dadd+0x670>)
 800108c:	42a2      	cmp	r2, r4
 800108e:	d100      	bne.n	8001092 <__aeabi_dadd+0x492>
 8001090:	e6fd      	b.n	8000e8e <__aeabi_dadd+0x28e>
 8001092:	1859      	adds	r1, r3, r1
 8001094:	4299      	cmp	r1, r3
 8001096:	419b      	sbcs	r3, r3
 8001098:	4440      	add	r0, r8
 800109a:	425f      	negs	r7, r3
 800109c:	19c7      	adds	r7, r0, r7
 800109e:	07fc      	lsls	r4, r7, #31
 80010a0:	0849      	lsrs	r1, r1, #1
 80010a2:	0016      	movs	r6, r2
 80010a4:	430c      	orrs	r4, r1
 80010a6:	087f      	lsrs	r7, r7, #1
 80010a8:	e6cf      	b.n	8000e4a <__aeabi_dadd+0x24a>
 80010aa:	1acc      	subs	r4, r1, r3
 80010ac:	42a1      	cmp	r1, r4
 80010ae:	41bf      	sbcs	r7, r7
 80010b0:	4643      	mov	r3, r8
 80010b2:	427f      	negs	r7, r7
 80010b4:	1a18      	subs	r0, r3, r0
 80010b6:	4655      	mov	r5, sl
 80010b8:	1bc7      	subs	r7, r0, r7
 80010ba:	e5f7      	b.n	8000cac <__aeabi_dadd+0xac>
 80010bc:	08c9      	lsrs	r1, r1, #3
 80010be:	077b      	lsls	r3, r7, #29
 80010c0:	4655      	mov	r5, sl
 80010c2:	430b      	orrs	r3, r1
 80010c4:	08f8      	lsrs	r0, r7, #3
 80010c6:	e6c8      	b.n	8000e5a <__aeabi_dadd+0x25a>
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d000      	beq.n	80010ce <__aeabi_dadd+0x4ce>
 80010cc:	e081      	b.n	80011d2 <__aeabi_dadd+0x5d2>
 80010ce:	4643      	mov	r3, r8
 80010d0:	430b      	orrs	r3, r1
 80010d2:	d115      	bne.n	8001100 <__aeabi_dadd+0x500>
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	2500      	movs	r5, #0
 80010d8:	0300      	lsls	r0, r0, #12
 80010da:	e6e3      	b.n	8000ea4 <__aeabi_dadd+0x2a4>
 80010dc:	1a5c      	subs	r4, r3, r1
 80010de:	42a3      	cmp	r3, r4
 80010e0:	419b      	sbcs	r3, r3
 80010e2:	1bc7      	subs	r7, r0, r7
 80010e4:	425b      	negs	r3, r3
 80010e6:	2601      	movs	r6, #1
 80010e8:	1aff      	subs	r7, r7, r3
 80010ea:	e5da      	b.n	8000ca2 <__aeabi_dadd+0xa2>
 80010ec:	0742      	lsls	r2, r0, #29
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	08c0      	lsrs	r0, r0, #3
 80010f4:	e6d2      	b.n	8000e9c <__aeabi_dadd+0x29c>
 80010f6:	0742      	lsls	r2, r0, #29
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	08c0      	lsrs	r0, r0, #3
 80010fe:	e6ac      	b.n	8000e5a <__aeabi_dadd+0x25a>
 8001100:	4643      	mov	r3, r8
 8001102:	4642      	mov	r2, r8
 8001104:	08c9      	lsrs	r1, r1, #3
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	4655      	mov	r5, sl
 800110a:	430b      	orrs	r3, r1
 800110c:	08d0      	lsrs	r0, r2, #3
 800110e:	e6c5      	b.n	8000e9c <__aeabi_dadd+0x29c>
 8001110:	4643      	mov	r3, r8
 8001112:	4642      	mov	r2, r8
 8001114:	075b      	lsls	r3, r3, #29
 8001116:	08c9      	lsrs	r1, r1, #3
 8001118:	430b      	orrs	r3, r1
 800111a:	08d0      	lsrs	r0, r2, #3
 800111c:	e6be      	b.n	8000e9c <__aeabi_dadd+0x29c>
 800111e:	4303      	orrs	r3, r0
 8001120:	001c      	movs	r4, r3
 8001122:	1e63      	subs	r3, r4, #1
 8001124:	419c      	sbcs	r4, r3
 8001126:	e6fc      	b.n	8000f22 <__aeabi_dadd+0x322>
 8001128:	0002      	movs	r2, r0
 800112a:	3c20      	subs	r4, #32
 800112c:	40e2      	lsrs	r2, r4
 800112e:	0014      	movs	r4, r2
 8001130:	4662      	mov	r2, ip
 8001132:	2a20      	cmp	r2, #32
 8001134:	d003      	beq.n	800113e <__aeabi_dadd+0x53e>
 8001136:	2540      	movs	r5, #64	; 0x40
 8001138:	1aad      	subs	r5, r5, r2
 800113a:	40a8      	lsls	r0, r5
 800113c:	4303      	orrs	r3, r0
 800113e:	1e58      	subs	r0, r3, #1
 8001140:	4183      	sbcs	r3, r0
 8001142:	4323      	orrs	r3, r4
 8001144:	e775      	b.n	8001032 <__aeabi_dadd+0x432>
 8001146:	2a00      	cmp	r2, #0
 8001148:	d0e2      	beq.n	8001110 <__aeabi_dadd+0x510>
 800114a:	003a      	movs	r2, r7
 800114c:	430a      	orrs	r2, r1
 800114e:	d0cd      	beq.n	80010ec <__aeabi_dadd+0x4ec>
 8001150:	0742      	lsls	r2, r0, #29
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	4313      	orrs	r3, r2
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	08c0      	lsrs	r0, r0, #3
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4210      	tst	r0, r2
 800115e:	d006      	beq.n	800116e <__aeabi_dadd+0x56e>
 8001160:	08fc      	lsrs	r4, r7, #3
 8001162:	4214      	tst	r4, r2
 8001164:	d103      	bne.n	800116e <__aeabi_dadd+0x56e>
 8001166:	0020      	movs	r0, r4
 8001168:	08cb      	lsrs	r3, r1, #3
 800116a:	077a      	lsls	r2, r7, #29
 800116c:	4313      	orrs	r3, r2
 800116e:	0f5a      	lsrs	r2, r3, #29
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	0752      	lsls	r2, r2, #29
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	4313      	orrs	r3, r2
 8001178:	e690      	b.n	8000e9c <__aeabi_dadd+0x29c>
 800117a:	4643      	mov	r3, r8
 800117c:	430b      	orrs	r3, r1
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x582>
 8001180:	e709      	b.n	8000f96 <__aeabi_dadd+0x396>
 8001182:	4643      	mov	r3, r8
 8001184:	4642      	mov	r2, r8
 8001186:	08c9      	lsrs	r1, r1, #3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4655      	mov	r5, sl
 800118c:	430b      	orrs	r3, r1
 800118e:	08d0      	lsrs	r0, r2, #3
 8001190:	e666      	b.n	8000e60 <__aeabi_dadd+0x260>
 8001192:	1acc      	subs	r4, r1, r3
 8001194:	42a1      	cmp	r1, r4
 8001196:	4189      	sbcs	r1, r1
 8001198:	1a3f      	subs	r7, r7, r0
 800119a:	4249      	negs	r1, r1
 800119c:	4655      	mov	r5, sl
 800119e:	2601      	movs	r6, #1
 80011a0:	1a7f      	subs	r7, r7, r1
 80011a2:	e57e      	b.n	8000ca2 <__aeabi_dadd+0xa2>
 80011a4:	4642      	mov	r2, r8
 80011a6:	1a5c      	subs	r4, r3, r1
 80011a8:	1a87      	subs	r7, r0, r2
 80011aa:	42a3      	cmp	r3, r4
 80011ac:	4192      	sbcs	r2, r2
 80011ae:	4252      	negs	r2, r2
 80011b0:	1abf      	subs	r7, r7, r2
 80011b2:	023a      	lsls	r2, r7, #8
 80011b4:	d53d      	bpl.n	8001232 <__aeabi_dadd+0x632>
 80011b6:	1acc      	subs	r4, r1, r3
 80011b8:	42a1      	cmp	r1, r4
 80011ba:	4189      	sbcs	r1, r1
 80011bc:	4643      	mov	r3, r8
 80011be:	4249      	negs	r1, r1
 80011c0:	1a1f      	subs	r7, r3, r0
 80011c2:	4655      	mov	r5, sl
 80011c4:	1a7f      	subs	r7, r7, r1
 80011c6:	e595      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 80011c8:	077b      	lsls	r3, r7, #29
 80011ca:	08c9      	lsrs	r1, r1, #3
 80011cc:	430b      	orrs	r3, r1
 80011ce:	08f8      	lsrs	r0, r7, #3
 80011d0:	e643      	b.n	8000e5a <__aeabi_dadd+0x25a>
 80011d2:	4644      	mov	r4, r8
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	430c      	orrs	r4, r1
 80011d8:	d130      	bne.n	800123c <__aeabi_dadd+0x63c>
 80011da:	0742      	lsls	r2, r0, #29
 80011dc:	4313      	orrs	r3, r2
 80011de:	08c0      	lsrs	r0, r0, #3
 80011e0:	e65c      	b.n	8000e9c <__aeabi_dadd+0x29c>
 80011e2:	077b      	lsls	r3, r7, #29
 80011e4:	08c9      	lsrs	r1, r1, #3
 80011e6:	430b      	orrs	r3, r1
 80011e8:	08f8      	lsrs	r0, r7, #3
 80011ea:	e639      	b.n	8000e60 <__aeabi_dadd+0x260>
 80011ec:	185c      	adds	r4, r3, r1
 80011ee:	429c      	cmp	r4, r3
 80011f0:	419b      	sbcs	r3, r3
 80011f2:	4440      	add	r0, r8
 80011f4:	425b      	negs	r3, r3
 80011f6:	18c7      	adds	r7, r0, r3
 80011f8:	023b      	lsls	r3, r7, #8
 80011fa:	d400      	bmi.n	80011fe <__aeabi_dadd+0x5fe>
 80011fc:	e625      	b.n	8000e4a <__aeabi_dadd+0x24a>
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <__aeabi_dadd+0x674>)
 8001200:	2601      	movs	r6, #1
 8001202:	401f      	ands	r7, r3
 8001204:	e621      	b.n	8000e4a <__aeabi_dadd+0x24a>
 8001206:	0004      	movs	r4, r0
 8001208:	3a20      	subs	r2, #32
 800120a:	40d4      	lsrs	r4, r2
 800120c:	4662      	mov	r2, ip
 800120e:	2a20      	cmp	r2, #32
 8001210:	d004      	beq.n	800121c <__aeabi_dadd+0x61c>
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	4666      	mov	r6, ip
 8001216:	1b92      	subs	r2, r2, r6
 8001218:	4090      	lsls	r0, r2
 800121a:	4303      	orrs	r3, r0
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	4193      	sbcs	r3, r2
 8001220:	431c      	orrs	r4, r3
 8001222:	e67e      	b.n	8000f22 <__aeabi_dadd+0x322>
 8001224:	185c      	adds	r4, r3, r1
 8001226:	428c      	cmp	r4, r1
 8001228:	4189      	sbcs	r1, r1
 800122a:	4440      	add	r0, r8
 800122c:	4249      	negs	r1, r1
 800122e:	1847      	adds	r7, r0, r1
 8001230:	e6dd      	b.n	8000fee <__aeabi_dadd+0x3ee>
 8001232:	0023      	movs	r3, r4
 8001234:	433b      	orrs	r3, r7
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x63a>
 8001238:	e6ad      	b.n	8000f96 <__aeabi_dadd+0x396>
 800123a:	e606      	b.n	8000e4a <__aeabi_dadd+0x24a>
 800123c:	0744      	lsls	r4, r0, #29
 800123e:	4323      	orrs	r3, r4
 8001240:	2480      	movs	r4, #128	; 0x80
 8001242:	08c0      	lsrs	r0, r0, #3
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	4220      	tst	r0, r4
 8001248:	d008      	beq.n	800125c <__aeabi_dadd+0x65c>
 800124a:	4642      	mov	r2, r8
 800124c:	08d6      	lsrs	r6, r2, #3
 800124e:	4226      	tst	r6, r4
 8001250:	d104      	bne.n	800125c <__aeabi_dadd+0x65c>
 8001252:	4655      	mov	r5, sl
 8001254:	0030      	movs	r0, r6
 8001256:	08cb      	lsrs	r3, r1, #3
 8001258:	0751      	lsls	r1, r2, #29
 800125a:	430b      	orrs	r3, r1
 800125c:	0f5a      	lsrs	r2, r3, #29
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	0752      	lsls	r2, r2, #29
 8001264:	4313      	orrs	r3, r2
 8001266:	e619      	b.n	8000e9c <__aeabi_dadd+0x29c>
 8001268:	2300      	movs	r3, #0
 800126a:	4a01      	ldr	r2, [pc, #4]	; (8001270 <__aeabi_dadd+0x670>)
 800126c:	001f      	movs	r7, r3
 800126e:	e55e      	b.n	8000d2e <__aeabi_dadd+0x12e>
 8001270:	000007ff 	.word	0x000007ff
 8001274:	ff7fffff 	.word	0xff7fffff

08001278 <__aeabi_ddiv>:
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	4657      	mov	r7, sl
 800127c:	464e      	mov	r6, r9
 800127e:	4645      	mov	r5, r8
 8001280:	46de      	mov	lr, fp
 8001282:	b5e0      	push	{r5, r6, r7, lr}
 8001284:	4681      	mov	r9, r0
 8001286:	0005      	movs	r5, r0
 8001288:	030c      	lsls	r4, r1, #12
 800128a:	0048      	lsls	r0, r1, #1
 800128c:	4692      	mov	sl, r2
 800128e:	001f      	movs	r7, r3
 8001290:	b085      	sub	sp, #20
 8001292:	0b24      	lsrs	r4, r4, #12
 8001294:	0d40      	lsrs	r0, r0, #21
 8001296:	0fce      	lsrs	r6, r1, #31
 8001298:	2800      	cmp	r0, #0
 800129a:	d100      	bne.n	800129e <__aeabi_ddiv+0x26>
 800129c:	e156      	b.n	800154c <__aeabi_ddiv+0x2d4>
 800129e:	4bd4      	ldr	r3, [pc, #848]	; (80015f0 <__aeabi_ddiv+0x378>)
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d100      	bne.n	80012a6 <__aeabi_ddiv+0x2e>
 80012a4:	e172      	b.n	800158c <__aeabi_ddiv+0x314>
 80012a6:	0f6b      	lsrs	r3, r5, #29
 80012a8:	00e4      	lsls	r4, r4, #3
 80012aa:	431c      	orrs	r4, r3
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	4323      	orrs	r3, r4
 80012b2:	4698      	mov	r8, r3
 80012b4:	4bcf      	ldr	r3, [pc, #828]	; (80015f4 <__aeabi_ddiv+0x37c>)
 80012b6:	00ed      	lsls	r5, r5, #3
 80012b8:	469b      	mov	fp, r3
 80012ba:	2300      	movs	r3, #0
 80012bc:	4699      	mov	r9, r3
 80012be:	4483      	add	fp, r0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	033c      	lsls	r4, r7, #12
 80012c4:	007b      	lsls	r3, r7, #1
 80012c6:	4650      	mov	r0, sl
 80012c8:	0b24      	lsrs	r4, r4, #12
 80012ca:	0d5b      	lsrs	r3, r3, #21
 80012cc:	0fff      	lsrs	r7, r7, #31
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d100      	bne.n	80012d4 <__aeabi_ddiv+0x5c>
 80012d2:	e11f      	b.n	8001514 <__aeabi_ddiv+0x29c>
 80012d4:	4ac6      	ldr	r2, [pc, #792]	; (80015f0 <__aeabi_ddiv+0x378>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x64>
 80012da:	e162      	b.n	80015a2 <__aeabi_ddiv+0x32a>
 80012dc:	49c5      	ldr	r1, [pc, #788]	; (80015f4 <__aeabi_ddiv+0x37c>)
 80012de:	0f42      	lsrs	r2, r0, #29
 80012e0:	468c      	mov	ip, r1
 80012e2:	00e4      	lsls	r4, r4, #3
 80012e4:	4659      	mov	r1, fp
 80012e6:	4314      	orrs	r4, r2
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	4463      	add	r3, ip
 80012ec:	0412      	lsls	r2, r2, #16
 80012ee:	1acb      	subs	r3, r1, r3
 80012f0:	4314      	orrs	r4, r2
 80012f2:	469b      	mov	fp, r3
 80012f4:	00c2      	lsls	r2, r0, #3
 80012f6:	2000      	movs	r0, #0
 80012f8:	0033      	movs	r3, r6
 80012fa:	407b      	eors	r3, r7
 80012fc:	469a      	mov	sl, r3
 80012fe:	464b      	mov	r3, r9
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d827      	bhi.n	8001354 <__aeabi_ddiv+0xdc>
 8001304:	49bc      	ldr	r1, [pc, #752]	; (80015f8 <__aeabi_ddiv+0x380>)
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	58cb      	ldr	r3, [r1, r3]
 800130a:	469f      	mov	pc, r3
 800130c:	46b2      	mov	sl, r6
 800130e:	9b00      	ldr	r3, [sp, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d016      	beq.n	8001342 <__aeabi_ddiv+0xca>
 8001314:	2b03      	cmp	r3, #3
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0xa2>
 8001318:	e28e      	b.n	8001838 <__aeabi_ddiv+0x5c0>
 800131a:	2b01      	cmp	r3, #1
 800131c:	d000      	beq.n	8001320 <__aeabi_ddiv+0xa8>
 800131e:	e0d9      	b.n	80014d4 <__aeabi_ddiv+0x25c>
 8001320:	2300      	movs	r3, #0
 8001322:	2400      	movs	r4, #0
 8001324:	2500      	movs	r5, #0
 8001326:	4652      	mov	r2, sl
 8001328:	051b      	lsls	r3, r3, #20
 800132a:	4323      	orrs	r3, r4
 800132c:	07d2      	lsls	r2, r2, #31
 800132e:	4313      	orrs	r3, r2
 8001330:	0028      	movs	r0, r5
 8001332:	0019      	movs	r1, r3
 8001334:	b005      	add	sp, #20
 8001336:	bcf0      	pop	{r4, r5, r6, r7}
 8001338:	46bb      	mov	fp, r7
 800133a:	46b2      	mov	sl, r6
 800133c:	46a9      	mov	r9, r5
 800133e:	46a0      	mov	r8, r4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	2400      	movs	r4, #0
 8001344:	2500      	movs	r5, #0
 8001346:	4baa      	ldr	r3, [pc, #680]	; (80015f0 <__aeabi_ddiv+0x378>)
 8001348:	e7ed      	b.n	8001326 <__aeabi_ddiv+0xae>
 800134a:	46ba      	mov	sl, r7
 800134c:	46a0      	mov	r8, r4
 800134e:	0015      	movs	r5, r2
 8001350:	9000      	str	r0, [sp, #0]
 8001352:	e7dc      	b.n	800130e <__aeabi_ddiv+0x96>
 8001354:	4544      	cmp	r4, r8
 8001356:	d200      	bcs.n	800135a <__aeabi_ddiv+0xe2>
 8001358:	e1c7      	b.n	80016ea <__aeabi_ddiv+0x472>
 800135a:	d100      	bne.n	800135e <__aeabi_ddiv+0xe6>
 800135c:	e1c2      	b.n	80016e4 <__aeabi_ddiv+0x46c>
 800135e:	2301      	movs	r3, #1
 8001360:	425b      	negs	r3, r3
 8001362:	469c      	mov	ip, r3
 8001364:	002e      	movs	r6, r5
 8001366:	4640      	mov	r0, r8
 8001368:	2500      	movs	r5, #0
 800136a:	44e3      	add	fp, ip
 800136c:	0223      	lsls	r3, r4, #8
 800136e:	0e14      	lsrs	r4, r2, #24
 8001370:	431c      	orrs	r4, r3
 8001372:	0c1b      	lsrs	r3, r3, #16
 8001374:	4699      	mov	r9, r3
 8001376:	0423      	lsls	r3, r4, #16
 8001378:	0c1f      	lsrs	r7, r3, #16
 800137a:	0212      	lsls	r2, r2, #8
 800137c:	4649      	mov	r1, r9
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	9701      	str	r7, [sp, #4]
 8001382:	f7fe ff6d 	bl	8000260 <__aeabi_uidivmod>
 8001386:	0002      	movs	r2, r0
 8001388:	437a      	muls	r2, r7
 800138a:	040b      	lsls	r3, r1, #16
 800138c:	0c31      	lsrs	r1, r6, #16
 800138e:	4680      	mov	r8, r0
 8001390:	4319      	orrs	r1, r3
 8001392:	428a      	cmp	r2, r1
 8001394:	d907      	bls.n	80013a6 <__aeabi_ddiv+0x12e>
 8001396:	2301      	movs	r3, #1
 8001398:	425b      	negs	r3, r3
 800139a:	469c      	mov	ip, r3
 800139c:	1909      	adds	r1, r1, r4
 800139e:	44e0      	add	r8, ip
 80013a0:	428c      	cmp	r4, r1
 80013a2:	d800      	bhi.n	80013a6 <__aeabi_ddiv+0x12e>
 80013a4:	e207      	b.n	80017b6 <__aeabi_ddiv+0x53e>
 80013a6:	1a88      	subs	r0, r1, r2
 80013a8:	4649      	mov	r1, r9
 80013aa:	f7fe ff59 	bl	8000260 <__aeabi_uidivmod>
 80013ae:	0409      	lsls	r1, r1, #16
 80013b0:	468c      	mov	ip, r1
 80013b2:	0431      	lsls	r1, r6, #16
 80013b4:	4666      	mov	r6, ip
 80013b6:	9a01      	ldr	r2, [sp, #4]
 80013b8:	0c09      	lsrs	r1, r1, #16
 80013ba:	4342      	muls	r2, r0
 80013bc:	0003      	movs	r3, r0
 80013be:	4331      	orrs	r1, r6
 80013c0:	428a      	cmp	r2, r1
 80013c2:	d904      	bls.n	80013ce <__aeabi_ddiv+0x156>
 80013c4:	1909      	adds	r1, r1, r4
 80013c6:	3b01      	subs	r3, #1
 80013c8:	428c      	cmp	r4, r1
 80013ca:	d800      	bhi.n	80013ce <__aeabi_ddiv+0x156>
 80013cc:	e1ed      	b.n	80017aa <__aeabi_ddiv+0x532>
 80013ce:	1a88      	subs	r0, r1, r2
 80013d0:	4642      	mov	r2, r8
 80013d2:	0412      	lsls	r2, r2, #16
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4690      	mov	r8, r2
 80013d8:	4641      	mov	r1, r8
 80013da:	9b00      	ldr	r3, [sp, #0]
 80013dc:	040e      	lsls	r6, r1, #16
 80013de:	0c1b      	lsrs	r3, r3, #16
 80013e0:	001f      	movs	r7, r3
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	9b00      	ldr	r3, [sp, #0]
 80013e6:	0c36      	lsrs	r6, r6, #16
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	0c19      	lsrs	r1, r3, #16
 80013ec:	000b      	movs	r3, r1
 80013ee:	4373      	muls	r3, r6
 80013f0:	0c12      	lsrs	r2, r2, #16
 80013f2:	437e      	muls	r6, r7
 80013f4:	9103      	str	r1, [sp, #12]
 80013f6:	4351      	muls	r1, r2
 80013f8:	437a      	muls	r2, r7
 80013fa:	0c1f      	lsrs	r7, r3, #16
 80013fc:	46bc      	mov	ip, r7
 80013fe:	1876      	adds	r6, r6, r1
 8001400:	4466      	add	r6, ip
 8001402:	42b1      	cmp	r1, r6
 8001404:	d903      	bls.n	800140e <__aeabi_ddiv+0x196>
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0249      	lsls	r1, r1, #9
 800140a:	468c      	mov	ip, r1
 800140c:	4462      	add	r2, ip
 800140e:	0c31      	lsrs	r1, r6, #16
 8001410:	188a      	adds	r2, r1, r2
 8001412:	0431      	lsls	r1, r6, #16
 8001414:	041e      	lsls	r6, r3, #16
 8001416:	0c36      	lsrs	r6, r6, #16
 8001418:	198e      	adds	r6, r1, r6
 800141a:	4290      	cmp	r0, r2
 800141c:	d302      	bcc.n	8001424 <__aeabi_ddiv+0x1ac>
 800141e:	d112      	bne.n	8001446 <__aeabi_ddiv+0x1ce>
 8001420:	42b5      	cmp	r5, r6
 8001422:	d210      	bcs.n	8001446 <__aeabi_ddiv+0x1ce>
 8001424:	4643      	mov	r3, r8
 8001426:	1e59      	subs	r1, r3, #1
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	469c      	mov	ip, r3
 800142c:	4465      	add	r5, ip
 800142e:	001f      	movs	r7, r3
 8001430:	429d      	cmp	r5, r3
 8001432:	419b      	sbcs	r3, r3
 8001434:	425b      	negs	r3, r3
 8001436:	191b      	adds	r3, r3, r4
 8001438:	18c0      	adds	r0, r0, r3
 800143a:	4284      	cmp	r4, r0
 800143c:	d200      	bcs.n	8001440 <__aeabi_ddiv+0x1c8>
 800143e:	e1a0      	b.n	8001782 <__aeabi_ddiv+0x50a>
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x1cc>
 8001442:	e19b      	b.n	800177c <__aeabi_ddiv+0x504>
 8001444:	4688      	mov	r8, r1
 8001446:	1bae      	subs	r6, r5, r6
 8001448:	42b5      	cmp	r5, r6
 800144a:	41ad      	sbcs	r5, r5
 800144c:	1a80      	subs	r0, r0, r2
 800144e:	426d      	negs	r5, r5
 8001450:	1b40      	subs	r0, r0, r5
 8001452:	4284      	cmp	r4, r0
 8001454:	d100      	bne.n	8001458 <__aeabi_ddiv+0x1e0>
 8001456:	e1d5      	b.n	8001804 <__aeabi_ddiv+0x58c>
 8001458:	4649      	mov	r1, r9
 800145a:	f7fe ff01 	bl	8000260 <__aeabi_uidivmod>
 800145e:	9a01      	ldr	r2, [sp, #4]
 8001460:	040b      	lsls	r3, r1, #16
 8001462:	4342      	muls	r2, r0
 8001464:	0c31      	lsrs	r1, r6, #16
 8001466:	0005      	movs	r5, r0
 8001468:	4319      	orrs	r1, r3
 800146a:	428a      	cmp	r2, r1
 800146c:	d900      	bls.n	8001470 <__aeabi_ddiv+0x1f8>
 800146e:	e16c      	b.n	800174a <__aeabi_ddiv+0x4d2>
 8001470:	1a88      	subs	r0, r1, r2
 8001472:	4649      	mov	r1, r9
 8001474:	f7fe fef4 	bl	8000260 <__aeabi_uidivmod>
 8001478:	9a01      	ldr	r2, [sp, #4]
 800147a:	0436      	lsls	r6, r6, #16
 800147c:	4342      	muls	r2, r0
 800147e:	0409      	lsls	r1, r1, #16
 8001480:	0c36      	lsrs	r6, r6, #16
 8001482:	0003      	movs	r3, r0
 8001484:	430e      	orrs	r6, r1
 8001486:	42b2      	cmp	r2, r6
 8001488:	d900      	bls.n	800148c <__aeabi_ddiv+0x214>
 800148a:	e153      	b.n	8001734 <__aeabi_ddiv+0x4bc>
 800148c:	9803      	ldr	r0, [sp, #12]
 800148e:	1ab6      	subs	r6, r6, r2
 8001490:	0002      	movs	r2, r0
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	431d      	orrs	r5, r3
 8001496:	9f02      	ldr	r7, [sp, #8]
 8001498:	042b      	lsls	r3, r5, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	435a      	muls	r2, r3
 800149e:	437b      	muls	r3, r7
 80014a0:	469c      	mov	ip, r3
 80014a2:	0c29      	lsrs	r1, r5, #16
 80014a4:	4348      	muls	r0, r1
 80014a6:	0c13      	lsrs	r3, r2, #16
 80014a8:	4484      	add	ip, r0
 80014aa:	4463      	add	r3, ip
 80014ac:	4379      	muls	r1, r7
 80014ae:	4298      	cmp	r0, r3
 80014b0:	d903      	bls.n	80014ba <__aeabi_ddiv+0x242>
 80014b2:	2080      	movs	r0, #128	; 0x80
 80014b4:	0240      	lsls	r0, r0, #9
 80014b6:	4684      	mov	ip, r0
 80014b8:	4461      	add	r1, ip
 80014ba:	0c18      	lsrs	r0, r3, #16
 80014bc:	0412      	lsls	r2, r2, #16
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	0c12      	lsrs	r2, r2, #16
 80014c2:	1841      	adds	r1, r0, r1
 80014c4:	189b      	adds	r3, r3, r2
 80014c6:	428e      	cmp	r6, r1
 80014c8:	d200      	bcs.n	80014cc <__aeabi_ddiv+0x254>
 80014ca:	e0ff      	b.n	80016cc <__aeabi_ddiv+0x454>
 80014cc:	d100      	bne.n	80014d0 <__aeabi_ddiv+0x258>
 80014ce:	e0fa      	b.n	80016c6 <__aeabi_ddiv+0x44e>
 80014d0:	2301      	movs	r3, #1
 80014d2:	431d      	orrs	r5, r3
 80014d4:	4a49      	ldr	r2, [pc, #292]	; (80015fc <__aeabi_ddiv+0x384>)
 80014d6:	445a      	add	r2, fp
 80014d8:	2a00      	cmp	r2, #0
 80014da:	dc00      	bgt.n	80014de <__aeabi_ddiv+0x266>
 80014dc:	e0aa      	b.n	8001634 <__aeabi_ddiv+0x3bc>
 80014de:	076b      	lsls	r3, r5, #29
 80014e0:	d000      	beq.n	80014e4 <__aeabi_ddiv+0x26c>
 80014e2:	e13d      	b.n	8001760 <__aeabi_ddiv+0x4e8>
 80014e4:	08ed      	lsrs	r5, r5, #3
 80014e6:	4643      	mov	r3, r8
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	d506      	bpl.n	80014fa <__aeabi_ddiv+0x282>
 80014ec:	4642      	mov	r2, r8
 80014ee:	4b44      	ldr	r3, [pc, #272]	; (8001600 <__aeabi_ddiv+0x388>)
 80014f0:	401a      	ands	r2, r3
 80014f2:	4690      	mov	r8, r2
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	445a      	add	r2, fp
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <__aeabi_ddiv+0x38c>)
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dd00      	ble.n	8001502 <__aeabi_ddiv+0x28a>
 8001500:	e71f      	b.n	8001342 <__aeabi_ddiv+0xca>
 8001502:	4643      	mov	r3, r8
 8001504:	075b      	lsls	r3, r3, #29
 8001506:	431d      	orrs	r5, r3
 8001508:	4643      	mov	r3, r8
 800150a:	0552      	lsls	r2, r2, #21
 800150c:	025c      	lsls	r4, r3, #9
 800150e:	0b24      	lsrs	r4, r4, #12
 8001510:	0d53      	lsrs	r3, r2, #21
 8001512:	e708      	b.n	8001326 <__aeabi_ddiv+0xae>
 8001514:	4652      	mov	r2, sl
 8001516:	4322      	orrs	r2, r4
 8001518:	d100      	bne.n	800151c <__aeabi_ddiv+0x2a4>
 800151a:	e07b      	b.n	8001614 <__aeabi_ddiv+0x39c>
 800151c:	2c00      	cmp	r4, #0
 800151e:	d100      	bne.n	8001522 <__aeabi_ddiv+0x2aa>
 8001520:	e0fa      	b.n	8001718 <__aeabi_ddiv+0x4a0>
 8001522:	0020      	movs	r0, r4
 8001524:	f001 fa22 	bl	800296c <__clzsi2>
 8001528:	0002      	movs	r2, r0
 800152a:	3a0b      	subs	r2, #11
 800152c:	231d      	movs	r3, #29
 800152e:	0001      	movs	r1, r0
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	4652      	mov	r2, sl
 8001534:	3908      	subs	r1, #8
 8001536:	40da      	lsrs	r2, r3
 8001538:	408c      	lsls	r4, r1
 800153a:	4314      	orrs	r4, r2
 800153c:	4652      	mov	r2, sl
 800153e:	408a      	lsls	r2, r1
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <__aeabi_ddiv+0x390>)
 8001542:	4458      	add	r0, fp
 8001544:	469b      	mov	fp, r3
 8001546:	4483      	add	fp, r0
 8001548:	2000      	movs	r0, #0
 800154a:	e6d5      	b.n	80012f8 <__aeabi_ddiv+0x80>
 800154c:	464b      	mov	r3, r9
 800154e:	4323      	orrs	r3, r4
 8001550:	4698      	mov	r8, r3
 8001552:	d044      	beq.n	80015de <__aeabi_ddiv+0x366>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d100      	bne.n	800155a <__aeabi_ddiv+0x2e2>
 8001558:	e0ce      	b.n	80016f8 <__aeabi_ddiv+0x480>
 800155a:	0020      	movs	r0, r4
 800155c:	f001 fa06 	bl	800296c <__clzsi2>
 8001560:	0001      	movs	r1, r0
 8001562:	0002      	movs	r2, r0
 8001564:	390b      	subs	r1, #11
 8001566:	231d      	movs	r3, #29
 8001568:	1a5b      	subs	r3, r3, r1
 800156a:	4649      	mov	r1, r9
 800156c:	0010      	movs	r0, r2
 800156e:	40d9      	lsrs	r1, r3
 8001570:	3808      	subs	r0, #8
 8001572:	4084      	lsls	r4, r0
 8001574:	000b      	movs	r3, r1
 8001576:	464d      	mov	r5, r9
 8001578:	4323      	orrs	r3, r4
 800157a:	4698      	mov	r8, r3
 800157c:	4085      	lsls	r5, r0
 800157e:	4823      	ldr	r0, [pc, #140]	; (800160c <__aeabi_ddiv+0x394>)
 8001580:	1a83      	subs	r3, r0, r2
 8001582:	469b      	mov	fp, r3
 8001584:	2300      	movs	r3, #0
 8001586:	4699      	mov	r9, r3
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	e69a      	b.n	80012c2 <__aeabi_ddiv+0x4a>
 800158c:	464b      	mov	r3, r9
 800158e:	4323      	orrs	r3, r4
 8001590:	4698      	mov	r8, r3
 8001592:	d11d      	bne.n	80015d0 <__aeabi_ddiv+0x358>
 8001594:	2308      	movs	r3, #8
 8001596:	4699      	mov	r9, r3
 8001598:	3b06      	subs	r3, #6
 800159a:	2500      	movs	r5, #0
 800159c:	4683      	mov	fp, r0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	e68f      	b.n	80012c2 <__aeabi_ddiv+0x4a>
 80015a2:	4652      	mov	r2, sl
 80015a4:	4322      	orrs	r2, r4
 80015a6:	d109      	bne.n	80015bc <__aeabi_ddiv+0x344>
 80015a8:	2302      	movs	r3, #2
 80015aa:	4649      	mov	r1, r9
 80015ac:	4319      	orrs	r1, r3
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <__aeabi_ddiv+0x398>)
 80015b0:	4689      	mov	r9, r1
 80015b2:	469c      	mov	ip, r3
 80015b4:	2400      	movs	r4, #0
 80015b6:	2002      	movs	r0, #2
 80015b8:	44e3      	add	fp, ip
 80015ba:	e69d      	b.n	80012f8 <__aeabi_ddiv+0x80>
 80015bc:	2303      	movs	r3, #3
 80015be:	464a      	mov	r2, r9
 80015c0:	431a      	orrs	r2, r3
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <__aeabi_ddiv+0x398>)
 80015c4:	4691      	mov	r9, r2
 80015c6:	469c      	mov	ip, r3
 80015c8:	4652      	mov	r2, sl
 80015ca:	2003      	movs	r0, #3
 80015cc:	44e3      	add	fp, ip
 80015ce:	e693      	b.n	80012f8 <__aeabi_ddiv+0x80>
 80015d0:	230c      	movs	r3, #12
 80015d2:	4699      	mov	r9, r3
 80015d4:	3b09      	subs	r3, #9
 80015d6:	46a0      	mov	r8, r4
 80015d8:	4683      	mov	fp, r0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	e671      	b.n	80012c2 <__aeabi_ddiv+0x4a>
 80015de:	2304      	movs	r3, #4
 80015e0:	4699      	mov	r9, r3
 80015e2:	2300      	movs	r3, #0
 80015e4:	469b      	mov	fp, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	2500      	movs	r5, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	e669      	b.n	80012c2 <__aeabi_ddiv+0x4a>
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff
 80015f4:	fffffc01 	.word	0xfffffc01
 80015f8:	0800e798 	.word	0x0800e798
 80015fc:	000003ff 	.word	0x000003ff
 8001600:	feffffff 	.word	0xfeffffff
 8001604:	000007fe 	.word	0x000007fe
 8001608:	000003f3 	.word	0x000003f3
 800160c:	fffffc0d 	.word	0xfffffc0d
 8001610:	fffff801 	.word	0xfffff801
 8001614:	4649      	mov	r1, r9
 8001616:	2301      	movs	r3, #1
 8001618:	4319      	orrs	r1, r3
 800161a:	4689      	mov	r9, r1
 800161c:	2400      	movs	r4, #0
 800161e:	2001      	movs	r0, #1
 8001620:	e66a      	b.n	80012f8 <__aeabi_ddiv+0x80>
 8001622:	2300      	movs	r3, #0
 8001624:	2480      	movs	r4, #128	; 0x80
 8001626:	469a      	mov	sl, r3
 8001628:	2500      	movs	r5, #0
 800162a:	4b8a      	ldr	r3, [pc, #552]	; (8001854 <__aeabi_ddiv+0x5dc>)
 800162c:	0324      	lsls	r4, r4, #12
 800162e:	e67a      	b.n	8001326 <__aeabi_ddiv+0xae>
 8001630:	2501      	movs	r5, #1
 8001632:	426d      	negs	r5, r5
 8001634:	2301      	movs	r3, #1
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	2b38      	cmp	r3, #56	; 0x38
 800163a:	dd00      	ble.n	800163e <__aeabi_ddiv+0x3c6>
 800163c:	e670      	b.n	8001320 <__aeabi_ddiv+0xa8>
 800163e:	2b1f      	cmp	r3, #31
 8001640:	dc00      	bgt.n	8001644 <__aeabi_ddiv+0x3cc>
 8001642:	e0bf      	b.n	80017c4 <__aeabi_ddiv+0x54c>
 8001644:	211f      	movs	r1, #31
 8001646:	4249      	negs	r1, r1
 8001648:	1a8a      	subs	r2, r1, r2
 800164a:	4641      	mov	r1, r8
 800164c:	40d1      	lsrs	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	2b20      	cmp	r3, #32
 8001652:	d004      	beq.n	800165e <__aeabi_ddiv+0x3e6>
 8001654:	4641      	mov	r1, r8
 8001656:	4b80      	ldr	r3, [pc, #512]	; (8001858 <__aeabi_ddiv+0x5e0>)
 8001658:	445b      	add	r3, fp
 800165a:	4099      	lsls	r1, r3
 800165c:	430d      	orrs	r5, r1
 800165e:	1e6b      	subs	r3, r5, #1
 8001660:	419d      	sbcs	r5, r3
 8001662:	2307      	movs	r3, #7
 8001664:	432a      	orrs	r2, r5
 8001666:	001d      	movs	r5, r3
 8001668:	2400      	movs	r4, #0
 800166a:	4015      	ands	r5, r2
 800166c:	4213      	tst	r3, r2
 800166e:	d100      	bne.n	8001672 <__aeabi_ddiv+0x3fa>
 8001670:	e0d4      	b.n	800181c <__aeabi_ddiv+0x5a4>
 8001672:	210f      	movs	r1, #15
 8001674:	2300      	movs	r3, #0
 8001676:	4011      	ands	r1, r2
 8001678:	2904      	cmp	r1, #4
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x406>
 800167c:	e0cb      	b.n	8001816 <__aeabi_ddiv+0x59e>
 800167e:	1d11      	adds	r1, r2, #4
 8001680:	4291      	cmp	r1, r2
 8001682:	4192      	sbcs	r2, r2
 8001684:	4252      	negs	r2, r2
 8001686:	189b      	adds	r3, r3, r2
 8001688:	000a      	movs	r2, r1
 800168a:	0219      	lsls	r1, r3, #8
 800168c:	d400      	bmi.n	8001690 <__aeabi_ddiv+0x418>
 800168e:	e0c2      	b.n	8001816 <__aeabi_ddiv+0x59e>
 8001690:	2301      	movs	r3, #1
 8001692:	2400      	movs	r4, #0
 8001694:	2500      	movs	r5, #0
 8001696:	e646      	b.n	8001326 <__aeabi_ddiv+0xae>
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	4641      	mov	r1, r8
 800169c:	031b      	lsls	r3, r3, #12
 800169e:	4219      	tst	r1, r3
 80016a0:	d008      	beq.n	80016b4 <__aeabi_ddiv+0x43c>
 80016a2:	421c      	tst	r4, r3
 80016a4:	d106      	bne.n	80016b4 <__aeabi_ddiv+0x43c>
 80016a6:	431c      	orrs	r4, r3
 80016a8:	0324      	lsls	r4, r4, #12
 80016aa:	46ba      	mov	sl, r7
 80016ac:	0015      	movs	r5, r2
 80016ae:	4b69      	ldr	r3, [pc, #420]	; (8001854 <__aeabi_ddiv+0x5dc>)
 80016b0:	0b24      	lsrs	r4, r4, #12
 80016b2:	e638      	b.n	8001326 <__aeabi_ddiv+0xae>
 80016b4:	2480      	movs	r4, #128	; 0x80
 80016b6:	4643      	mov	r3, r8
 80016b8:	0324      	lsls	r4, r4, #12
 80016ba:	431c      	orrs	r4, r3
 80016bc:	0324      	lsls	r4, r4, #12
 80016be:	46b2      	mov	sl, r6
 80016c0:	4b64      	ldr	r3, [pc, #400]	; (8001854 <__aeabi_ddiv+0x5dc>)
 80016c2:	0b24      	lsrs	r4, r4, #12
 80016c4:	e62f      	b.n	8001326 <__aeabi_ddiv+0xae>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x454>
 80016ca:	e703      	b.n	80014d4 <__aeabi_ddiv+0x25c>
 80016cc:	19a6      	adds	r6, r4, r6
 80016ce:	1e68      	subs	r0, r5, #1
 80016d0:	42a6      	cmp	r6, r4
 80016d2:	d200      	bcs.n	80016d6 <__aeabi_ddiv+0x45e>
 80016d4:	e08d      	b.n	80017f2 <__aeabi_ddiv+0x57a>
 80016d6:	428e      	cmp	r6, r1
 80016d8:	d200      	bcs.n	80016dc <__aeabi_ddiv+0x464>
 80016da:	e0a3      	b.n	8001824 <__aeabi_ddiv+0x5ac>
 80016dc:	d100      	bne.n	80016e0 <__aeabi_ddiv+0x468>
 80016de:	e0b3      	b.n	8001848 <__aeabi_ddiv+0x5d0>
 80016e0:	0005      	movs	r5, r0
 80016e2:	e6f5      	b.n	80014d0 <__aeabi_ddiv+0x258>
 80016e4:	42aa      	cmp	r2, r5
 80016e6:	d900      	bls.n	80016ea <__aeabi_ddiv+0x472>
 80016e8:	e639      	b.n	800135e <__aeabi_ddiv+0xe6>
 80016ea:	4643      	mov	r3, r8
 80016ec:	07de      	lsls	r6, r3, #31
 80016ee:	0858      	lsrs	r0, r3, #1
 80016f0:	086b      	lsrs	r3, r5, #1
 80016f2:	431e      	orrs	r6, r3
 80016f4:	07ed      	lsls	r5, r5, #31
 80016f6:	e639      	b.n	800136c <__aeabi_ddiv+0xf4>
 80016f8:	4648      	mov	r0, r9
 80016fa:	f001 f937 	bl	800296c <__clzsi2>
 80016fe:	0001      	movs	r1, r0
 8001700:	0002      	movs	r2, r0
 8001702:	3115      	adds	r1, #21
 8001704:	3220      	adds	r2, #32
 8001706:	291c      	cmp	r1, #28
 8001708:	dc00      	bgt.n	800170c <__aeabi_ddiv+0x494>
 800170a:	e72c      	b.n	8001566 <__aeabi_ddiv+0x2ee>
 800170c:	464b      	mov	r3, r9
 800170e:	3808      	subs	r0, #8
 8001710:	4083      	lsls	r3, r0
 8001712:	2500      	movs	r5, #0
 8001714:	4698      	mov	r8, r3
 8001716:	e732      	b.n	800157e <__aeabi_ddiv+0x306>
 8001718:	f001 f928 	bl	800296c <__clzsi2>
 800171c:	0003      	movs	r3, r0
 800171e:	001a      	movs	r2, r3
 8001720:	3215      	adds	r2, #21
 8001722:	3020      	adds	r0, #32
 8001724:	2a1c      	cmp	r2, #28
 8001726:	dc00      	bgt.n	800172a <__aeabi_ddiv+0x4b2>
 8001728:	e700      	b.n	800152c <__aeabi_ddiv+0x2b4>
 800172a:	4654      	mov	r4, sl
 800172c:	3b08      	subs	r3, #8
 800172e:	2200      	movs	r2, #0
 8001730:	409c      	lsls	r4, r3
 8001732:	e705      	b.n	8001540 <__aeabi_ddiv+0x2c8>
 8001734:	1936      	adds	r6, r6, r4
 8001736:	3b01      	subs	r3, #1
 8001738:	42b4      	cmp	r4, r6
 800173a:	d900      	bls.n	800173e <__aeabi_ddiv+0x4c6>
 800173c:	e6a6      	b.n	800148c <__aeabi_ddiv+0x214>
 800173e:	42b2      	cmp	r2, r6
 8001740:	d800      	bhi.n	8001744 <__aeabi_ddiv+0x4cc>
 8001742:	e6a3      	b.n	800148c <__aeabi_ddiv+0x214>
 8001744:	1e83      	subs	r3, r0, #2
 8001746:	1936      	adds	r6, r6, r4
 8001748:	e6a0      	b.n	800148c <__aeabi_ddiv+0x214>
 800174a:	1909      	adds	r1, r1, r4
 800174c:	3d01      	subs	r5, #1
 800174e:	428c      	cmp	r4, r1
 8001750:	d900      	bls.n	8001754 <__aeabi_ddiv+0x4dc>
 8001752:	e68d      	b.n	8001470 <__aeabi_ddiv+0x1f8>
 8001754:	428a      	cmp	r2, r1
 8001756:	d800      	bhi.n	800175a <__aeabi_ddiv+0x4e2>
 8001758:	e68a      	b.n	8001470 <__aeabi_ddiv+0x1f8>
 800175a:	1e85      	subs	r5, r0, #2
 800175c:	1909      	adds	r1, r1, r4
 800175e:	e687      	b.n	8001470 <__aeabi_ddiv+0x1f8>
 8001760:	230f      	movs	r3, #15
 8001762:	402b      	ands	r3, r5
 8001764:	2b04      	cmp	r3, #4
 8001766:	d100      	bne.n	800176a <__aeabi_ddiv+0x4f2>
 8001768:	e6bc      	b.n	80014e4 <__aeabi_ddiv+0x26c>
 800176a:	2305      	movs	r3, #5
 800176c:	425b      	negs	r3, r3
 800176e:	42ab      	cmp	r3, r5
 8001770:	419b      	sbcs	r3, r3
 8001772:	3504      	adds	r5, #4
 8001774:	425b      	negs	r3, r3
 8001776:	08ed      	lsrs	r5, r5, #3
 8001778:	4498      	add	r8, r3
 800177a:	e6b4      	b.n	80014e6 <__aeabi_ddiv+0x26e>
 800177c:	42af      	cmp	r7, r5
 800177e:	d900      	bls.n	8001782 <__aeabi_ddiv+0x50a>
 8001780:	e660      	b.n	8001444 <__aeabi_ddiv+0x1cc>
 8001782:	4282      	cmp	r2, r0
 8001784:	d804      	bhi.n	8001790 <__aeabi_ddiv+0x518>
 8001786:	d000      	beq.n	800178a <__aeabi_ddiv+0x512>
 8001788:	e65c      	b.n	8001444 <__aeabi_ddiv+0x1cc>
 800178a:	42ae      	cmp	r6, r5
 800178c:	d800      	bhi.n	8001790 <__aeabi_ddiv+0x518>
 800178e:	e659      	b.n	8001444 <__aeabi_ddiv+0x1cc>
 8001790:	2302      	movs	r3, #2
 8001792:	425b      	negs	r3, r3
 8001794:	469c      	mov	ip, r3
 8001796:	9b00      	ldr	r3, [sp, #0]
 8001798:	44e0      	add	r8, ip
 800179a:	469c      	mov	ip, r3
 800179c:	4465      	add	r5, ip
 800179e:	429d      	cmp	r5, r3
 80017a0:	419b      	sbcs	r3, r3
 80017a2:	425b      	negs	r3, r3
 80017a4:	191b      	adds	r3, r3, r4
 80017a6:	18c0      	adds	r0, r0, r3
 80017a8:	e64d      	b.n	8001446 <__aeabi_ddiv+0x1ce>
 80017aa:	428a      	cmp	r2, r1
 80017ac:	d800      	bhi.n	80017b0 <__aeabi_ddiv+0x538>
 80017ae:	e60e      	b.n	80013ce <__aeabi_ddiv+0x156>
 80017b0:	1e83      	subs	r3, r0, #2
 80017b2:	1909      	adds	r1, r1, r4
 80017b4:	e60b      	b.n	80013ce <__aeabi_ddiv+0x156>
 80017b6:	428a      	cmp	r2, r1
 80017b8:	d800      	bhi.n	80017bc <__aeabi_ddiv+0x544>
 80017ba:	e5f4      	b.n	80013a6 <__aeabi_ddiv+0x12e>
 80017bc:	1e83      	subs	r3, r0, #2
 80017be:	4698      	mov	r8, r3
 80017c0:	1909      	adds	r1, r1, r4
 80017c2:	e5f0      	b.n	80013a6 <__aeabi_ddiv+0x12e>
 80017c4:	4925      	ldr	r1, [pc, #148]	; (800185c <__aeabi_ddiv+0x5e4>)
 80017c6:	0028      	movs	r0, r5
 80017c8:	4459      	add	r1, fp
 80017ca:	408d      	lsls	r5, r1
 80017cc:	4642      	mov	r2, r8
 80017ce:	408a      	lsls	r2, r1
 80017d0:	1e69      	subs	r1, r5, #1
 80017d2:	418d      	sbcs	r5, r1
 80017d4:	4641      	mov	r1, r8
 80017d6:	40d8      	lsrs	r0, r3
 80017d8:	40d9      	lsrs	r1, r3
 80017da:	4302      	orrs	r2, r0
 80017dc:	432a      	orrs	r2, r5
 80017de:	000b      	movs	r3, r1
 80017e0:	0751      	lsls	r1, r2, #29
 80017e2:	d100      	bne.n	80017e6 <__aeabi_ddiv+0x56e>
 80017e4:	e751      	b.n	800168a <__aeabi_ddiv+0x412>
 80017e6:	210f      	movs	r1, #15
 80017e8:	4011      	ands	r1, r2
 80017ea:	2904      	cmp	r1, #4
 80017ec:	d000      	beq.n	80017f0 <__aeabi_ddiv+0x578>
 80017ee:	e746      	b.n	800167e <__aeabi_ddiv+0x406>
 80017f0:	e74b      	b.n	800168a <__aeabi_ddiv+0x412>
 80017f2:	0005      	movs	r5, r0
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d000      	beq.n	80017fa <__aeabi_ddiv+0x582>
 80017f8:	e66a      	b.n	80014d0 <__aeabi_ddiv+0x258>
 80017fa:	9a00      	ldr	r2, [sp, #0]
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d000      	beq.n	8001802 <__aeabi_ddiv+0x58a>
 8001800:	e666      	b.n	80014d0 <__aeabi_ddiv+0x258>
 8001802:	e667      	b.n	80014d4 <__aeabi_ddiv+0x25c>
 8001804:	4a16      	ldr	r2, [pc, #88]	; (8001860 <__aeabi_ddiv+0x5e8>)
 8001806:	445a      	add	r2, fp
 8001808:	2a00      	cmp	r2, #0
 800180a:	dc00      	bgt.n	800180e <__aeabi_ddiv+0x596>
 800180c:	e710      	b.n	8001630 <__aeabi_ddiv+0x3b8>
 800180e:	2301      	movs	r3, #1
 8001810:	2500      	movs	r5, #0
 8001812:	4498      	add	r8, r3
 8001814:	e667      	b.n	80014e6 <__aeabi_ddiv+0x26e>
 8001816:	075d      	lsls	r5, r3, #29
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	0b1c      	lsrs	r4, r3, #12
 800181c:	08d2      	lsrs	r2, r2, #3
 800181e:	2300      	movs	r3, #0
 8001820:	4315      	orrs	r5, r2
 8001822:	e580      	b.n	8001326 <__aeabi_ddiv+0xae>
 8001824:	9800      	ldr	r0, [sp, #0]
 8001826:	3d02      	subs	r5, #2
 8001828:	0042      	lsls	r2, r0, #1
 800182a:	4282      	cmp	r2, r0
 800182c:	41bf      	sbcs	r7, r7
 800182e:	427f      	negs	r7, r7
 8001830:	193c      	adds	r4, r7, r4
 8001832:	1936      	adds	r6, r6, r4
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	e7dd      	b.n	80017f4 <__aeabi_ddiv+0x57c>
 8001838:	2480      	movs	r4, #128	; 0x80
 800183a:	4643      	mov	r3, r8
 800183c:	0324      	lsls	r4, r4, #12
 800183e:	431c      	orrs	r4, r3
 8001840:	0324      	lsls	r4, r4, #12
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__aeabi_ddiv+0x5dc>)
 8001844:	0b24      	lsrs	r4, r4, #12
 8001846:	e56e      	b.n	8001326 <__aeabi_ddiv+0xae>
 8001848:	9a00      	ldr	r2, [sp, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3ea      	bcc.n	8001824 <__aeabi_ddiv+0x5ac>
 800184e:	0005      	movs	r5, r0
 8001850:	e7d3      	b.n	80017fa <__aeabi_ddiv+0x582>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e
 8001860:	000003ff 	.word	0x000003ff

08001864 <__eqdf2>:
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	464e      	mov	r6, r9
 8001868:	4645      	mov	r5, r8
 800186a:	46de      	mov	lr, fp
 800186c:	4657      	mov	r7, sl
 800186e:	4690      	mov	r8, r2
 8001870:	b5e0      	push	{r5, r6, r7, lr}
 8001872:	0017      	movs	r7, r2
 8001874:	031a      	lsls	r2, r3, #12
 8001876:	0b12      	lsrs	r2, r2, #12
 8001878:	0005      	movs	r5, r0
 800187a:	4684      	mov	ip, r0
 800187c:	4819      	ldr	r0, [pc, #100]	; (80018e4 <__eqdf2+0x80>)
 800187e:	030e      	lsls	r6, r1, #12
 8001880:	004c      	lsls	r4, r1, #1
 8001882:	4691      	mov	r9, r2
 8001884:	005a      	lsls	r2, r3, #1
 8001886:	0fdb      	lsrs	r3, r3, #31
 8001888:	469b      	mov	fp, r3
 800188a:	0b36      	lsrs	r6, r6, #12
 800188c:	0d64      	lsrs	r4, r4, #21
 800188e:	0fc9      	lsrs	r1, r1, #31
 8001890:	0d52      	lsrs	r2, r2, #21
 8001892:	4284      	cmp	r4, r0
 8001894:	d019      	beq.n	80018ca <__eqdf2+0x66>
 8001896:	4282      	cmp	r2, r0
 8001898:	d010      	beq.n	80018bc <__eqdf2+0x58>
 800189a:	2001      	movs	r0, #1
 800189c:	4294      	cmp	r4, r2
 800189e:	d10e      	bne.n	80018be <__eqdf2+0x5a>
 80018a0:	454e      	cmp	r6, r9
 80018a2:	d10c      	bne.n	80018be <__eqdf2+0x5a>
 80018a4:	2001      	movs	r0, #1
 80018a6:	45c4      	cmp	ip, r8
 80018a8:	d109      	bne.n	80018be <__eqdf2+0x5a>
 80018aa:	4559      	cmp	r1, fp
 80018ac:	d017      	beq.n	80018de <__eqdf2+0x7a>
 80018ae:	2c00      	cmp	r4, #0
 80018b0:	d105      	bne.n	80018be <__eqdf2+0x5a>
 80018b2:	0030      	movs	r0, r6
 80018b4:	4328      	orrs	r0, r5
 80018b6:	1e43      	subs	r3, r0, #1
 80018b8:	4198      	sbcs	r0, r3
 80018ba:	e000      	b.n	80018be <__eqdf2+0x5a>
 80018bc:	2001      	movs	r0, #1
 80018be:	bcf0      	pop	{r4, r5, r6, r7}
 80018c0:	46bb      	mov	fp, r7
 80018c2:	46b2      	mov	sl, r6
 80018c4:	46a9      	mov	r9, r5
 80018c6:	46a0      	mov	r8, r4
 80018c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ca:	0033      	movs	r3, r6
 80018cc:	2001      	movs	r0, #1
 80018ce:	432b      	orrs	r3, r5
 80018d0:	d1f5      	bne.n	80018be <__eqdf2+0x5a>
 80018d2:	42a2      	cmp	r2, r4
 80018d4:	d1f3      	bne.n	80018be <__eqdf2+0x5a>
 80018d6:	464b      	mov	r3, r9
 80018d8:	433b      	orrs	r3, r7
 80018da:	d1f0      	bne.n	80018be <__eqdf2+0x5a>
 80018dc:	e7e2      	b.n	80018a4 <__eqdf2+0x40>
 80018de:	2000      	movs	r0, #0
 80018e0:	e7ed      	b.n	80018be <__eqdf2+0x5a>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff

080018e8 <__gedf2>:
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	4647      	mov	r7, r8
 80018ec:	46ce      	mov	lr, r9
 80018ee:	0004      	movs	r4, r0
 80018f0:	0018      	movs	r0, r3
 80018f2:	0016      	movs	r6, r2
 80018f4:	031b      	lsls	r3, r3, #12
 80018f6:	0b1b      	lsrs	r3, r3, #12
 80018f8:	4d2d      	ldr	r5, [pc, #180]	; (80019b0 <__gedf2+0xc8>)
 80018fa:	004a      	lsls	r2, r1, #1
 80018fc:	4699      	mov	r9, r3
 80018fe:	b580      	push	{r7, lr}
 8001900:	0043      	lsls	r3, r0, #1
 8001902:	030f      	lsls	r7, r1, #12
 8001904:	46a4      	mov	ip, r4
 8001906:	46b0      	mov	r8, r6
 8001908:	0b3f      	lsrs	r7, r7, #12
 800190a:	0d52      	lsrs	r2, r2, #21
 800190c:	0fc9      	lsrs	r1, r1, #31
 800190e:	0d5b      	lsrs	r3, r3, #21
 8001910:	0fc0      	lsrs	r0, r0, #31
 8001912:	42aa      	cmp	r2, r5
 8001914:	d021      	beq.n	800195a <__gedf2+0x72>
 8001916:	42ab      	cmp	r3, r5
 8001918:	d013      	beq.n	8001942 <__gedf2+0x5a>
 800191a:	2a00      	cmp	r2, #0
 800191c:	d122      	bne.n	8001964 <__gedf2+0x7c>
 800191e:	433c      	orrs	r4, r7
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <__gedf2+0x42>
 8001924:	464d      	mov	r5, r9
 8001926:	432e      	orrs	r6, r5
 8001928:	d022      	beq.n	8001970 <__gedf2+0x88>
 800192a:	2c00      	cmp	r4, #0
 800192c:	d010      	beq.n	8001950 <__gedf2+0x68>
 800192e:	4281      	cmp	r1, r0
 8001930:	d022      	beq.n	8001978 <__gedf2+0x90>
 8001932:	2002      	movs	r0, #2
 8001934:	3901      	subs	r1, #1
 8001936:	4008      	ands	r0, r1
 8001938:	3801      	subs	r0, #1
 800193a:	bcc0      	pop	{r6, r7}
 800193c:	46b9      	mov	r9, r7
 800193e:	46b0      	mov	r8, r6
 8001940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001942:	464d      	mov	r5, r9
 8001944:	432e      	orrs	r6, r5
 8001946:	d129      	bne.n	800199c <__gedf2+0xb4>
 8001948:	2a00      	cmp	r2, #0
 800194a:	d1f0      	bne.n	800192e <__gedf2+0x46>
 800194c:	433c      	orrs	r4, r7
 800194e:	d1ee      	bne.n	800192e <__gedf2+0x46>
 8001950:	2800      	cmp	r0, #0
 8001952:	d1f2      	bne.n	800193a <__gedf2+0x52>
 8001954:	2001      	movs	r0, #1
 8001956:	4240      	negs	r0, r0
 8001958:	e7ef      	b.n	800193a <__gedf2+0x52>
 800195a:	003d      	movs	r5, r7
 800195c:	4325      	orrs	r5, r4
 800195e:	d11d      	bne.n	800199c <__gedf2+0xb4>
 8001960:	4293      	cmp	r3, r2
 8001962:	d0ee      	beq.n	8001942 <__gedf2+0x5a>
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e2      	bne.n	800192e <__gedf2+0x46>
 8001968:	464c      	mov	r4, r9
 800196a:	4326      	orrs	r6, r4
 800196c:	d1df      	bne.n	800192e <__gedf2+0x46>
 800196e:	e7e0      	b.n	8001932 <__gedf2+0x4a>
 8001970:	2000      	movs	r0, #0
 8001972:	2c00      	cmp	r4, #0
 8001974:	d0e1      	beq.n	800193a <__gedf2+0x52>
 8001976:	e7dc      	b.n	8001932 <__gedf2+0x4a>
 8001978:	429a      	cmp	r2, r3
 800197a:	dc0a      	bgt.n	8001992 <__gedf2+0xaa>
 800197c:	dbe8      	blt.n	8001950 <__gedf2+0x68>
 800197e:	454f      	cmp	r7, r9
 8001980:	d8d7      	bhi.n	8001932 <__gedf2+0x4a>
 8001982:	d00e      	beq.n	80019a2 <__gedf2+0xba>
 8001984:	2000      	movs	r0, #0
 8001986:	454f      	cmp	r7, r9
 8001988:	d2d7      	bcs.n	800193a <__gedf2+0x52>
 800198a:	2900      	cmp	r1, #0
 800198c:	d0e2      	beq.n	8001954 <__gedf2+0x6c>
 800198e:	0008      	movs	r0, r1
 8001990:	e7d3      	b.n	800193a <__gedf2+0x52>
 8001992:	4243      	negs	r3, r0
 8001994:	4158      	adcs	r0, r3
 8001996:	0040      	lsls	r0, r0, #1
 8001998:	3801      	subs	r0, #1
 800199a:	e7ce      	b.n	800193a <__gedf2+0x52>
 800199c:	2002      	movs	r0, #2
 800199e:	4240      	negs	r0, r0
 80019a0:	e7cb      	b.n	800193a <__gedf2+0x52>
 80019a2:	45c4      	cmp	ip, r8
 80019a4:	d8c5      	bhi.n	8001932 <__gedf2+0x4a>
 80019a6:	2000      	movs	r0, #0
 80019a8:	45c4      	cmp	ip, r8
 80019aa:	d2c6      	bcs.n	800193a <__gedf2+0x52>
 80019ac:	e7ed      	b.n	800198a <__gedf2+0xa2>
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	000007ff 	.word	0x000007ff

080019b4 <__ledf2>:
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	4647      	mov	r7, r8
 80019b8:	46ce      	mov	lr, r9
 80019ba:	0004      	movs	r4, r0
 80019bc:	0018      	movs	r0, r3
 80019be:	0016      	movs	r6, r2
 80019c0:	031b      	lsls	r3, r3, #12
 80019c2:	0b1b      	lsrs	r3, r3, #12
 80019c4:	4d2c      	ldr	r5, [pc, #176]	; (8001a78 <__ledf2+0xc4>)
 80019c6:	004a      	lsls	r2, r1, #1
 80019c8:	4699      	mov	r9, r3
 80019ca:	b580      	push	{r7, lr}
 80019cc:	0043      	lsls	r3, r0, #1
 80019ce:	030f      	lsls	r7, r1, #12
 80019d0:	46a4      	mov	ip, r4
 80019d2:	46b0      	mov	r8, r6
 80019d4:	0b3f      	lsrs	r7, r7, #12
 80019d6:	0d52      	lsrs	r2, r2, #21
 80019d8:	0fc9      	lsrs	r1, r1, #31
 80019da:	0d5b      	lsrs	r3, r3, #21
 80019dc:	0fc0      	lsrs	r0, r0, #31
 80019de:	42aa      	cmp	r2, r5
 80019e0:	d00d      	beq.n	80019fe <__ledf2+0x4a>
 80019e2:	42ab      	cmp	r3, r5
 80019e4:	d010      	beq.n	8001a08 <__ledf2+0x54>
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d127      	bne.n	8001a3a <__ledf2+0x86>
 80019ea:	433c      	orrs	r4, r7
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <__ledf2+0x60>
 80019f0:	464d      	mov	r5, r9
 80019f2:	432e      	orrs	r6, r5
 80019f4:	d10e      	bne.n	8001a14 <__ledf2+0x60>
 80019f6:	2000      	movs	r0, #0
 80019f8:	2c00      	cmp	r4, #0
 80019fa:	d015      	beq.n	8001a28 <__ledf2+0x74>
 80019fc:	e00e      	b.n	8001a1c <__ledf2+0x68>
 80019fe:	003d      	movs	r5, r7
 8001a00:	4325      	orrs	r5, r4
 8001a02:	d110      	bne.n	8001a26 <__ledf2+0x72>
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d118      	bne.n	8001a3a <__ledf2+0x86>
 8001a08:	464d      	mov	r5, r9
 8001a0a:	432e      	orrs	r6, r5
 8001a0c:	d10b      	bne.n	8001a26 <__ledf2+0x72>
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d102      	bne.n	8001a18 <__ledf2+0x64>
 8001a12:	433c      	orrs	r4, r7
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d00b      	beq.n	8001a30 <__ledf2+0x7c>
 8001a18:	4281      	cmp	r1, r0
 8001a1a:	d014      	beq.n	8001a46 <__ledf2+0x92>
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	3901      	subs	r1, #1
 8001a20:	4008      	ands	r0, r1
 8001a22:	3801      	subs	r0, #1
 8001a24:	e000      	b.n	8001a28 <__ledf2+0x74>
 8001a26:	2002      	movs	r0, #2
 8001a28:	bcc0      	pop	{r6, r7}
 8001a2a:	46b9      	mov	r9, r7
 8001a2c:	46b0      	mov	r8, r6
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d1f9      	bne.n	8001a28 <__ledf2+0x74>
 8001a34:	2001      	movs	r0, #1
 8001a36:	4240      	negs	r0, r0
 8001a38:	e7f6      	b.n	8001a28 <__ledf2+0x74>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ec      	bne.n	8001a18 <__ledf2+0x64>
 8001a3e:	464c      	mov	r4, r9
 8001a40:	4326      	orrs	r6, r4
 8001a42:	d1e9      	bne.n	8001a18 <__ledf2+0x64>
 8001a44:	e7ea      	b.n	8001a1c <__ledf2+0x68>
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dd04      	ble.n	8001a54 <__ledf2+0xa0>
 8001a4a:	4243      	negs	r3, r0
 8001a4c:	4158      	adcs	r0, r3
 8001a4e:	0040      	lsls	r0, r0, #1
 8001a50:	3801      	subs	r0, #1
 8001a52:	e7e9      	b.n	8001a28 <__ledf2+0x74>
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbeb      	blt.n	8001a30 <__ledf2+0x7c>
 8001a58:	454f      	cmp	r7, r9
 8001a5a:	d8df      	bhi.n	8001a1c <__ledf2+0x68>
 8001a5c:	d006      	beq.n	8001a6c <__ledf2+0xb8>
 8001a5e:	2000      	movs	r0, #0
 8001a60:	454f      	cmp	r7, r9
 8001a62:	d2e1      	bcs.n	8001a28 <__ledf2+0x74>
 8001a64:	2900      	cmp	r1, #0
 8001a66:	d0e5      	beq.n	8001a34 <__ledf2+0x80>
 8001a68:	0008      	movs	r0, r1
 8001a6a:	e7dd      	b.n	8001a28 <__ledf2+0x74>
 8001a6c:	45c4      	cmp	ip, r8
 8001a6e:	d8d5      	bhi.n	8001a1c <__ledf2+0x68>
 8001a70:	2000      	movs	r0, #0
 8001a72:	45c4      	cmp	ip, r8
 8001a74:	d2d8      	bcs.n	8001a28 <__ledf2+0x74>
 8001a76:	e7f5      	b.n	8001a64 <__ledf2+0xb0>
 8001a78:	000007ff 	.word	0x000007ff

08001a7c <__aeabi_dmul>:
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	4657      	mov	r7, sl
 8001a80:	464e      	mov	r6, r9
 8001a82:	4645      	mov	r5, r8
 8001a84:	46de      	mov	lr, fp
 8001a86:	b5e0      	push	{r5, r6, r7, lr}
 8001a88:	4698      	mov	r8, r3
 8001a8a:	030c      	lsls	r4, r1, #12
 8001a8c:	004b      	lsls	r3, r1, #1
 8001a8e:	0006      	movs	r6, r0
 8001a90:	4692      	mov	sl, r2
 8001a92:	b087      	sub	sp, #28
 8001a94:	0b24      	lsrs	r4, r4, #12
 8001a96:	0d5b      	lsrs	r3, r3, #21
 8001a98:	0fcf      	lsrs	r7, r1, #31
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dmul+0x24>
 8001a9e:	e15c      	b.n	8001d5a <__aeabi_dmul+0x2de>
 8001aa0:	4ad9      	ldr	r2, [pc, #868]	; (8001e08 <__aeabi_dmul+0x38c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dmul+0x2c>
 8001aa6:	e175      	b.n	8001d94 <__aeabi_dmul+0x318>
 8001aa8:	0f42      	lsrs	r2, r0, #29
 8001aaa:	00e4      	lsls	r4, r4, #3
 8001aac:	4314      	orrs	r4, r2
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	0412      	lsls	r2, r2, #16
 8001ab2:	4314      	orrs	r4, r2
 8001ab4:	4ad5      	ldr	r2, [pc, #852]	; (8001e0c <__aeabi_dmul+0x390>)
 8001ab6:	00c5      	lsls	r5, r0, #3
 8001ab8:	4694      	mov	ip, r2
 8001aba:	4463      	add	r3, ip
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	469b      	mov	fp, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4642      	mov	r2, r8
 8001ac8:	031e      	lsls	r6, r3, #12
 8001aca:	0fd2      	lsrs	r2, r2, #31
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4650      	mov	r0, sl
 8001ad0:	4690      	mov	r8, r2
 8001ad2:	0b36      	lsrs	r6, r6, #12
 8001ad4:	0d5b      	lsrs	r3, r3, #21
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0x5e>
 8001ad8:	e120      	b.n	8001d1c <__aeabi_dmul+0x2a0>
 8001ada:	4acb      	ldr	r2, [pc, #812]	; (8001e08 <__aeabi_dmul+0x38c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dmul+0x66>
 8001ae0:	e162      	b.n	8001da8 <__aeabi_dmul+0x32c>
 8001ae2:	49ca      	ldr	r1, [pc, #808]	; (8001e0c <__aeabi_dmul+0x390>)
 8001ae4:	0f42      	lsrs	r2, r0, #29
 8001ae6:	468c      	mov	ip, r1
 8001ae8:	9900      	ldr	r1, [sp, #0]
 8001aea:	4463      	add	r3, ip
 8001aec:	00f6      	lsls	r6, r6, #3
 8001aee:	468c      	mov	ip, r1
 8001af0:	4316      	orrs	r6, r2
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	449c      	add	ip, r3
 8001af6:	0412      	lsls	r2, r2, #16
 8001af8:	4663      	mov	r3, ip
 8001afa:	4316      	orrs	r6, r2
 8001afc:	00c2      	lsls	r2, r0, #3
 8001afe:	2000      	movs	r0, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	9900      	ldr	r1, [sp, #0]
 8001b04:	4643      	mov	r3, r8
 8001b06:	3101      	adds	r1, #1
 8001b08:	468c      	mov	ip, r1
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	407b      	eors	r3, r7
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	290f      	cmp	r1, #15
 8001b12:	d826      	bhi.n	8001b62 <__aeabi_dmul+0xe6>
 8001b14:	4bbe      	ldr	r3, [pc, #760]	; (8001e10 <__aeabi_dmul+0x394>)
 8001b16:	0089      	lsls	r1, r1, #2
 8001b18:	5859      	ldr	r1, [r3, r1]
 8001b1a:	468f      	mov	pc, r1
 8001b1c:	4643      	mov	r3, r8
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	0034      	movs	r4, r6
 8001b22:	0015      	movs	r5, r2
 8001b24:	4683      	mov	fp, r0
 8001b26:	465b      	mov	r3, fp
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d016      	beq.n	8001b5a <__aeabi_dmul+0xde>
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dmul+0xb6>
 8001b30:	e203      	b.n	8001f3a <__aeabi_dmul+0x4be>
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d000      	beq.n	8001b38 <__aeabi_dmul+0xbc>
 8001b36:	e0cd      	b.n	8001cd4 <__aeabi_dmul+0x258>
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	9b01      	ldr	r3, [sp, #4]
 8001b40:	0512      	lsls	r2, r2, #20
 8001b42:	4322      	orrs	r2, r4
 8001b44:	07db      	lsls	r3, r3, #31
 8001b46:	431a      	orrs	r2, r3
 8001b48:	0028      	movs	r0, r5
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	b007      	add	sp, #28
 8001b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b50:	46bb      	mov	fp, r7
 8001b52:	46b2      	mov	sl, r6
 8001b54:	46a9      	mov	r9, r5
 8001b56:	46a0      	mov	r8, r4
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	2500      	movs	r5, #0
 8001b5e:	4aaa      	ldr	r2, [pc, #680]	; (8001e08 <__aeabi_dmul+0x38c>)
 8001b60:	e7ed      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001b62:	0c28      	lsrs	r0, r5, #16
 8001b64:	042d      	lsls	r5, r5, #16
 8001b66:	0c2d      	lsrs	r5, r5, #16
 8001b68:	002b      	movs	r3, r5
 8001b6a:	0c11      	lsrs	r1, r2, #16
 8001b6c:	0412      	lsls	r2, r2, #16
 8001b6e:	0c12      	lsrs	r2, r2, #16
 8001b70:	4353      	muls	r3, r2
 8001b72:	4698      	mov	r8, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	002f      	movs	r7, r5
 8001b78:	4343      	muls	r3, r0
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	434f      	muls	r7, r1
 8001b7e:	444f      	add	r7, r9
 8001b80:	46bb      	mov	fp, r7
 8001b82:	4647      	mov	r7, r8
 8001b84:	000b      	movs	r3, r1
 8001b86:	0c3f      	lsrs	r7, r7, #16
 8001b88:	46ba      	mov	sl, r7
 8001b8a:	4343      	muls	r3, r0
 8001b8c:	44da      	add	sl, fp
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	45d1      	cmp	r9, sl
 8001b92:	d904      	bls.n	8001b9e <__aeabi_dmul+0x122>
 8001b94:	2780      	movs	r7, #128	; 0x80
 8001b96:	027f      	lsls	r7, r7, #9
 8001b98:	46b9      	mov	r9, r7
 8001b9a:	444b      	add	r3, r9
 8001b9c:	9302      	str	r3, [sp, #8]
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	469b      	mov	fp, r3
 8001ba4:	4653      	mov	r3, sl
 8001ba6:	041f      	lsls	r7, r3, #16
 8001ba8:	4643      	mov	r3, r8
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	4698      	mov	r8, r3
 8001bb0:	003b      	movs	r3, r7
 8001bb2:	4443      	add	r3, r8
 8001bb4:	9304      	str	r3, [sp, #16]
 8001bb6:	0c33      	lsrs	r3, r6, #16
 8001bb8:	0436      	lsls	r6, r6, #16
 8001bba:	0c36      	lsrs	r6, r6, #16
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	0033      	movs	r3, r6
 8001bc0:	4343      	muls	r3, r0
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	4643      	mov	r3, r8
 8001bc6:	4343      	muls	r3, r0
 8001bc8:	002f      	movs	r7, r5
 8001bca:	469a      	mov	sl, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	4377      	muls	r7, r6
 8001bd0:	435d      	muls	r5, r3
 8001bd2:	0c38      	lsrs	r0, r7, #16
 8001bd4:	444d      	add	r5, r9
 8001bd6:	1945      	adds	r5, r0, r5
 8001bd8:	45a9      	cmp	r9, r5
 8001bda:	d903      	bls.n	8001be4 <__aeabi_dmul+0x168>
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	4699      	mov	r9, r3
 8001be2:	44ca      	add	sl, r9
 8001be4:	043f      	lsls	r7, r7, #16
 8001be6:	0c28      	lsrs	r0, r5, #16
 8001be8:	0c3f      	lsrs	r7, r7, #16
 8001bea:	042d      	lsls	r5, r5, #16
 8001bec:	19ed      	adds	r5, r5, r7
 8001bee:	0c27      	lsrs	r7, r4, #16
 8001bf0:	0424      	lsls	r4, r4, #16
 8001bf2:	0c24      	lsrs	r4, r4, #16
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	4350      	muls	r0, r2
 8001bfa:	437a      	muls	r2, r7
 8001bfc:	4691      	mov	r9, r2
 8001bfe:	003a      	movs	r2, r7
 8001c00:	4453      	add	r3, sl
 8001c02:	9305      	str	r3, [sp, #20]
 8001c04:	0c03      	lsrs	r3, r0, #16
 8001c06:	469a      	mov	sl, r3
 8001c08:	434a      	muls	r2, r1
 8001c0a:	4361      	muls	r1, r4
 8001c0c:	4449      	add	r1, r9
 8001c0e:	4451      	add	r1, sl
 8001c10:	44ab      	add	fp, r5
 8001c12:	4589      	cmp	r9, r1
 8001c14:	d903      	bls.n	8001c1e <__aeabi_dmul+0x1a2>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4699      	mov	r9, r3
 8001c1c:	444a      	add	r2, r9
 8001c1e:	0400      	lsls	r0, r0, #16
 8001c20:	0c0b      	lsrs	r3, r1, #16
 8001c22:	0c00      	lsrs	r0, r0, #16
 8001c24:	0409      	lsls	r1, r1, #16
 8001c26:	1809      	adds	r1, r1, r0
 8001c28:	0020      	movs	r0, r4
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	4643      	mov	r3, r8
 8001c2e:	4370      	muls	r0, r6
 8001c30:	435c      	muls	r4, r3
 8001c32:	437e      	muls	r6, r7
 8001c34:	435f      	muls	r7, r3
 8001c36:	0c03      	lsrs	r3, r0, #16
 8001c38:	4698      	mov	r8, r3
 8001c3a:	19a4      	adds	r4, r4, r6
 8001c3c:	4444      	add	r4, r8
 8001c3e:	444a      	add	r2, r9
 8001c40:	9703      	str	r7, [sp, #12]
 8001c42:	42a6      	cmp	r6, r4
 8001c44:	d904      	bls.n	8001c50 <__aeabi_dmul+0x1d4>
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4447      	add	r7, r8
 8001c4e:	9703      	str	r7, [sp, #12]
 8001c50:	0423      	lsls	r3, r4, #16
 8001c52:	9e02      	ldr	r6, [sp, #8]
 8001c54:	469a      	mov	sl, r3
 8001c56:	9b05      	ldr	r3, [sp, #20]
 8001c58:	445e      	add	r6, fp
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	42ae      	cmp	r6, r5
 8001c5e:	41ad      	sbcs	r5, r5
 8001c60:	1876      	adds	r6, r6, r1
 8001c62:	428e      	cmp	r6, r1
 8001c64:	4189      	sbcs	r1, r1
 8001c66:	0400      	lsls	r0, r0, #16
 8001c68:	0c00      	lsrs	r0, r0, #16
 8001c6a:	4450      	add	r0, sl
 8001c6c:	4440      	add	r0, r8
 8001c6e:	426d      	negs	r5, r5
 8001c70:	1947      	adds	r7, r0, r5
 8001c72:	46b8      	mov	r8, r7
 8001c74:	4693      	mov	fp, r2
 8001c76:	4249      	negs	r1, r1
 8001c78:	4689      	mov	r9, r1
 8001c7a:	44c3      	add	fp, r8
 8001c7c:	44d9      	add	r9, fp
 8001c7e:	4298      	cmp	r0, r3
 8001c80:	4180      	sbcs	r0, r0
 8001c82:	45a8      	cmp	r8, r5
 8001c84:	41ad      	sbcs	r5, r5
 8001c86:	4593      	cmp	fp, r2
 8001c88:	4192      	sbcs	r2, r2
 8001c8a:	4589      	cmp	r9, r1
 8001c8c:	4189      	sbcs	r1, r1
 8001c8e:	426d      	negs	r5, r5
 8001c90:	4240      	negs	r0, r0
 8001c92:	4328      	orrs	r0, r5
 8001c94:	0c24      	lsrs	r4, r4, #16
 8001c96:	4252      	negs	r2, r2
 8001c98:	4249      	negs	r1, r1
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	9b03      	ldr	r3, [sp, #12]
 8001c9e:	1900      	adds	r0, r0, r4
 8001ca0:	1880      	adds	r0, r0, r2
 8001ca2:	18c7      	adds	r7, r0, r3
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	0ddc      	lsrs	r4, r3, #23
 8001ca8:	9b04      	ldr	r3, [sp, #16]
 8001caa:	0275      	lsls	r5, r6, #9
 8001cac:	431d      	orrs	r5, r3
 8001cae:	1e6a      	subs	r2, r5, #1
 8001cb0:	4195      	sbcs	r5, r2
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	0df6      	lsrs	r6, r6, #23
 8001cb6:	027f      	lsls	r7, r7, #9
 8001cb8:	4335      	orrs	r5, r6
 8001cba:	025a      	lsls	r2, r3, #9
 8001cbc:	433c      	orrs	r4, r7
 8001cbe:	4315      	orrs	r5, r2
 8001cc0:	01fb      	lsls	r3, r7, #7
 8001cc2:	d400      	bmi.n	8001cc6 <__aeabi_dmul+0x24a>
 8001cc4:	e11c      	b.n	8001f00 <__aeabi_dmul+0x484>
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	086a      	lsrs	r2, r5, #1
 8001cca:	400d      	ands	r5, r1
 8001ccc:	4315      	orrs	r5, r2
 8001cce:	07e2      	lsls	r2, r4, #31
 8001cd0:	4315      	orrs	r5, r2
 8001cd2:	0864      	lsrs	r4, r4, #1
 8001cd4:	494f      	ldr	r1, [pc, #316]	; (8001e14 <__aeabi_dmul+0x398>)
 8001cd6:	4461      	add	r1, ip
 8001cd8:	2900      	cmp	r1, #0
 8001cda:	dc00      	bgt.n	8001cde <__aeabi_dmul+0x262>
 8001cdc:	e0b0      	b.n	8001e40 <__aeabi_dmul+0x3c4>
 8001cde:	076b      	lsls	r3, r5, #29
 8001ce0:	d009      	beq.n	8001cf6 <__aeabi_dmul+0x27a>
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	402a      	ands	r2, r5
 8001ce6:	2a04      	cmp	r2, #4
 8001ce8:	d005      	beq.n	8001cf6 <__aeabi_dmul+0x27a>
 8001cea:	1d2a      	adds	r2, r5, #4
 8001cec:	42aa      	cmp	r2, r5
 8001cee:	41ad      	sbcs	r5, r5
 8001cf0:	426d      	negs	r5, r5
 8001cf2:	1964      	adds	r4, r4, r5
 8001cf4:	0015      	movs	r5, r2
 8001cf6:	01e3      	lsls	r3, r4, #7
 8001cf8:	d504      	bpl.n	8001d04 <__aeabi_dmul+0x288>
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	4a46      	ldr	r2, [pc, #280]	; (8001e18 <__aeabi_dmul+0x39c>)
 8001cfe:	00c9      	lsls	r1, r1, #3
 8001d00:	4014      	ands	r4, r2
 8001d02:	4461      	add	r1, ip
 8001d04:	4a45      	ldr	r2, [pc, #276]	; (8001e1c <__aeabi_dmul+0x3a0>)
 8001d06:	4291      	cmp	r1, r2
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_dmul+0x290>
 8001d0a:	e726      	b.n	8001b5a <__aeabi_dmul+0xde>
 8001d0c:	0762      	lsls	r2, r4, #29
 8001d0e:	08ed      	lsrs	r5, r5, #3
 8001d10:	0264      	lsls	r4, r4, #9
 8001d12:	0549      	lsls	r1, r1, #21
 8001d14:	4315      	orrs	r5, r2
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	0d4a      	lsrs	r2, r1, #21
 8001d1a:	e710      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001d1c:	4652      	mov	r2, sl
 8001d1e:	4332      	orrs	r2, r6
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dmul+0x2a8>
 8001d22:	e07f      	b.n	8001e24 <__aeabi_dmul+0x3a8>
 8001d24:	2e00      	cmp	r6, #0
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dmul+0x2ae>
 8001d28:	e0dc      	b.n	8001ee4 <__aeabi_dmul+0x468>
 8001d2a:	0030      	movs	r0, r6
 8001d2c:	f000 fe1e 	bl	800296c <__clzsi2>
 8001d30:	0002      	movs	r2, r0
 8001d32:	3a0b      	subs	r2, #11
 8001d34:	231d      	movs	r3, #29
 8001d36:	0001      	movs	r1, r0
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	4652      	mov	r2, sl
 8001d3c:	3908      	subs	r1, #8
 8001d3e:	40da      	lsrs	r2, r3
 8001d40:	408e      	lsls	r6, r1
 8001d42:	4316      	orrs	r6, r2
 8001d44:	4652      	mov	r2, sl
 8001d46:	408a      	lsls	r2, r1
 8001d48:	9b00      	ldr	r3, [sp, #0]
 8001d4a:	4935      	ldr	r1, [pc, #212]	; (8001e20 <__aeabi_dmul+0x3a4>)
 8001d4c:	1a18      	subs	r0, r3, r0
 8001d4e:	0003      	movs	r3, r0
 8001d50:	468c      	mov	ip, r1
 8001d52:	4463      	add	r3, ip
 8001d54:	2000      	movs	r0, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	e6d3      	b.n	8001b02 <__aeabi_dmul+0x86>
 8001d5a:	0025      	movs	r5, r4
 8001d5c:	4305      	orrs	r5, r0
 8001d5e:	d04a      	beq.n	8001df6 <__aeabi_dmul+0x37a>
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dmul+0x2ea>
 8001d64:	e0b0      	b.n	8001ec8 <__aeabi_dmul+0x44c>
 8001d66:	0020      	movs	r0, r4
 8001d68:	f000 fe00 	bl	800296c <__clzsi2>
 8001d6c:	0001      	movs	r1, r0
 8001d6e:	0002      	movs	r2, r0
 8001d70:	390b      	subs	r1, #11
 8001d72:	231d      	movs	r3, #29
 8001d74:	0010      	movs	r0, r2
 8001d76:	1a5b      	subs	r3, r3, r1
 8001d78:	0031      	movs	r1, r6
 8001d7a:	0035      	movs	r5, r6
 8001d7c:	3808      	subs	r0, #8
 8001d7e:	4084      	lsls	r4, r0
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	4085      	lsls	r5, r0
 8001d84:	430c      	orrs	r4, r1
 8001d86:	4826      	ldr	r0, [pc, #152]	; (8001e20 <__aeabi_dmul+0x3a4>)
 8001d88:	1a83      	subs	r3, r0, r2
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4699      	mov	r9, r3
 8001d90:	469b      	mov	fp, r3
 8001d92:	e697      	b.n	8001ac4 <__aeabi_dmul+0x48>
 8001d94:	0005      	movs	r5, r0
 8001d96:	4325      	orrs	r5, r4
 8001d98:	d126      	bne.n	8001de8 <__aeabi_dmul+0x36c>
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2302      	movs	r3, #2
 8001da0:	2400      	movs	r4, #0
 8001da2:	4691      	mov	r9, r2
 8001da4:	469b      	mov	fp, r3
 8001da6:	e68d      	b.n	8001ac4 <__aeabi_dmul+0x48>
 8001da8:	4652      	mov	r2, sl
 8001daa:	9b00      	ldr	r3, [sp, #0]
 8001dac:	4332      	orrs	r2, r6
 8001dae:	d110      	bne.n	8001dd2 <__aeabi_dmul+0x356>
 8001db0:	4915      	ldr	r1, [pc, #84]	; (8001e08 <__aeabi_dmul+0x38c>)
 8001db2:	2600      	movs	r6, #0
 8001db4:	468c      	mov	ip, r1
 8001db6:	4463      	add	r3, ip
 8001db8:	4649      	mov	r1, r9
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	4319      	orrs	r1, r3
 8001dc0:	4689      	mov	r9, r1
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	e69d      	b.n	8001b02 <__aeabi_dmul+0x86>
 8001dc6:	465b      	mov	r3, fp
 8001dc8:	9701      	str	r7, [sp, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dmul+0x354>
 8001dce:	e6ad      	b.n	8001b2c <__aeabi_dmul+0xb0>
 8001dd0:	e6c3      	b.n	8001b5a <__aeabi_dmul+0xde>
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <__aeabi_dmul+0x38c>)
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	4694      	mov	ip, r2
 8001dd8:	4463      	add	r3, ip
 8001dda:	464a      	mov	r2, r9
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2303      	movs	r3, #3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	4691      	mov	r9, r2
 8001de4:	4652      	mov	r2, sl
 8001de6:	e68c      	b.n	8001b02 <__aeabi_dmul+0x86>
 8001de8:	220c      	movs	r2, #12
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2303      	movs	r3, #3
 8001dee:	0005      	movs	r5, r0
 8001df0:	4691      	mov	r9, r2
 8001df2:	469b      	mov	fp, r3
 8001df4:	e666      	b.n	8001ac4 <__aeabi_dmul+0x48>
 8001df6:	2304      	movs	r3, #4
 8001df8:	4699      	mov	r9, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	2400      	movs	r4, #0
 8001e02:	469b      	mov	fp, r3
 8001e04:	e65e      	b.n	8001ac4 <__aeabi_dmul+0x48>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	fffffc01 	.word	0xfffffc01
 8001e10:	0800e7d8 	.word	0x0800e7d8
 8001e14:	000003ff 	.word	0x000003ff
 8001e18:	feffffff 	.word	0xfeffffff
 8001e1c:	000007fe 	.word	0x000007fe
 8001e20:	fffffc0d 	.word	0xfffffc0d
 8001e24:	4649      	mov	r1, r9
 8001e26:	2301      	movs	r3, #1
 8001e28:	4319      	orrs	r1, r3
 8001e2a:	4689      	mov	r9, r1
 8001e2c:	2600      	movs	r6, #0
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e667      	b.n	8001b02 <__aeabi_dmul+0x86>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2480      	movs	r4, #128	; 0x80
 8001e36:	2500      	movs	r5, #0
 8001e38:	4a43      	ldr	r2, [pc, #268]	; (8001f48 <__aeabi_dmul+0x4cc>)
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	0324      	lsls	r4, r4, #12
 8001e3e:	e67e      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001e40:	2001      	movs	r0, #1
 8001e42:	1a40      	subs	r0, r0, r1
 8001e44:	2838      	cmp	r0, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dmul+0x3ce>
 8001e48:	e676      	b.n	8001b38 <__aeabi_dmul+0xbc>
 8001e4a:	281f      	cmp	r0, #31
 8001e4c:	dd5b      	ble.n	8001f06 <__aeabi_dmul+0x48a>
 8001e4e:	221f      	movs	r2, #31
 8001e50:	0023      	movs	r3, r4
 8001e52:	4252      	negs	r2, r2
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	40cb      	lsrs	r3, r1
 8001e58:	0019      	movs	r1, r3
 8001e5a:	2820      	cmp	r0, #32
 8001e5c:	d003      	beq.n	8001e66 <__aeabi_dmul+0x3ea>
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <__aeabi_dmul+0x4d0>)
 8001e60:	4462      	add	r2, ip
 8001e62:	4094      	lsls	r4, r2
 8001e64:	4325      	orrs	r5, r4
 8001e66:	1e6a      	subs	r2, r5, #1
 8001e68:	4195      	sbcs	r5, r2
 8001e6a:	002a      	movs	r2, r5
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	2107      	movs	r1, #7
 8001e70:	000d      	movs	r5, r1
 8001e72:	2400      	movs	r4, #0
 8001e74:	4015      	ands	r5, r2
 8001e76:	4211      	tst	r1, r2
 8001e78:	d05b      	beq.n	8001f32 <__aeabi_dmul+0x4b6>
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	4011      	ands	r1, r2
 8001e80:	2904      	cmp	r1, #4
 8001e82:	d053      	beq.n	8001f2c <__aeabi_dmul+0x4b0>
 8001e84:	1d11      	adds	r1, r2, #4
 8001e86:	4291      	cmp	r1, r2
 8001e88:	4192      	sbcs	r2, r2
 8001e8a:	4252      	negs	r2, r2
 8001e8c:	18a4      	adds	r4, r4, r2
 8001e8e:	000a      	movs	r2, r1
 8001e90:	0223      	lsls	r3, r4, #8
 8001e92:	d54b      	bpl.n	8001f2c <__aeabi_dmul+0x4b0>
 8001e94:	2201      	movs	r2, #1
 8001e96:	2400      	movs	r4, #0
 8001e98:	2500      	movs	r5, #0
 8001e9a:	e650      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	031b      	lsls	r3, r3, #12
 8001ea0:	421c      	tst	r4, r3
 8001ea2:	d009      	beq.n	8001eb8 <__aeabi_dmul+0x43c>
 8001ea4:	421e      	tst	r6, r3
 8001ea6:	d107      	bne.n	8001eb8 <__aeabi_dmul+0x43c>
 8001ea8:	4333      	orrs	r3, r6
 8001eaa:	031c      	lsls	r4, r3, #12
 8001eac:	4643      	mov	r3, r8
 8001eae:	0015      	movs	r5, r2
 8001eb0:	0b24      	lsrs	r4, r4, #12
 8001eb2:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <__aeabi_dmul+0x4cc>)
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	e642      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	0312      	lsls	r2, r2, #12
 8001ebc:	4314      	orrs	r4, r2
 8001ebe:	0324      	lsls	r4, r4, #12
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <__aeabi_dmul+0x4cc>)
 8001ec2:	0b24      	lsrs	r4, r4, #12
 8001ec4:	9701      	str	r7, [sp, #4]
 8001ec6:	e63a      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001ec8:	f000 fd50 	bl	800296c <__clzsi2>
 8001ecc:	0001      	movs	r1, r0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	3115      	adds	r1, #21
 8001ed2:	3220      	adds	r2, #32
 8001ed4:	291c      	cmp	r1, #28
 8001ed6:	dc00      	bgt.n	8001eda <__aeabi_dmul+0x45e>
 8001ed8:	e74b      	b.n	8001d72 <__aeabi_dmul+0x2f6>
 8001eda:	0034      	movs	r4, r6
 8001edc:	3808      	subs	r0, #8
 8001ede:	2500      	movs	r5, #0
 8001ee0:	4084      	lsls	r4, r0
 8001ee2:	e750      	b.n	8001d86 <__aeabi_dmul+0x30a>
 8001ee4:	f000 fd42 	bl	800296c <__clzsi2>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	001a      	movs	r2, r3
 8001eec:	3215      	adds	r2, #21
 8001eee:	3020      	adds	r0, #32
 8001ef0:	2a1c      	cmp	r2, #28
 8001ef2:	dc00      	bgt.n	8001ef6 <__aeabi_dmul+0x47a>
 8001ef4:	e71e      	b.n	8001d34 <__aeabi_dmul+0x2b8>
 8001ef6:	4656      	mov	r6, sl
 8001ef8:	3b08      	subs	r3, #8
 8001efa:	2200      	movs	r2, #0
 8001efc:	409e      	lsls	r6, r3
 8001efe:	e723      	b.n	8001d48 <__aeabi_dmul+0x2cc>
 8001f00:	9b00      	ldr	r3, [sp, #0]
 8001f02:	469c      	mov	ip, r3
 8001f04:	e6e6      	b.n	8001cd4 <__aeabi_dmul+0x258>
 8001f06:	4912      	ldr	r1, [pc, #72]	; (8001f50 <__aeabi_dmul+0x4d4>)
 8001f08:	0022      	movs	r2, r4
 8001f0a:	4461      	add	r1, ip
 8001f0c:	002e      	movs	r6, r5
 8001f0e:	408d      	lsls	r5, r1
 8001f10:	408a      	lsls	r2, r1
 8001f12:	40c6      	lsrs	r6, r0
 8001f14:	1e69      	subs	r1, r5, #1
 8001f16:	418d      	sbcs	r5, r1
 8001f18:	4332      	orrs	r2, r6
 8001f1a:	432a      	orrs	r2, r5
 8001f1c:	40c4      	lsrs	r4, r0
 8001f1e:	0753      	lsls	r3, r2, #29
 8001f20:	d0b6      	beq.n	8001e90 <__aeabi_dmul+0x414>
 8001f22:	210f      	movs	r1, #15
 8001f24:	4011      	ands	r1, r2
 8001f26:	2904      	cmp	r1, #4
 8001f28:	d1ac      	bne.n	8001e84 <__aeabi_dmul+0x408>
 8001f2a:	e7b1      	b.n	8001e90 <__aeabi_dmul+0x414>
 8001f2c:	0765      	lsls	r5, r4, #29
 8001f2e:	0264      	lsls	r4, r4, #9
 8001f30:	0b24      	lsrs	r4, r4, #12
 8001f32:	08d2      	lsrs	r2, r2, #3
 8001f34:	4315      	orrs	r5, r2
 8001f36:	2200      	movs	r2, #0
 8001f38:	e601      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	0312      	lsls	r2, r2, #12
 8001f3e:	4314      	orrs	r4, r2
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	4a01      	ldr	r2, [pc, #4]	; (8001f48 <__aeabi_dmul+0x4cc>)
 8001f44:	0b24      	lsrs	r4, r4, #12
 8001f46:	e5fa      	b.n	8001b3e <__aeabi_dmul+0xc2>
 8001f48:	000007ff 	.word	0x000007ff
 8001f4c:	0000043e 	.word	0x0000043e
 8001f50:	0000041e 	.word	0x0000041e

08001f54 <__aeabi_dsub>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	4657      	mov	r7, sl
 8001f58:	464e      	mov	r6, r9
 8001f5a:	4645      	mov	r5, r8
 8001f5c:	46de      	mov	lr, fp
 8001f5e:	b5e0      	push	{r5, r6, r7, lr}
 8001f60:	001e      	movs	r6, r3
 8001f62:	0017      	movs	r7, r2
 8001f64:	004a      	lsls	r2, r1, #1
 8001f66:	030b      	lsls	r3, r1, #12
 8001f68:	0d52      	lsrs	r2, r2, #21
 8001f6a:	0a5b      	lsrs	r3, r3, #9
 8001f6c:	4690      	mov	r8, r2
 8001f6e:	0f42      	lsrs	r2, r0, #29
 8001f70:	431a      	orrs	r2, r3
 8001f72:	0fcd      	lsrs	r5, r1, #31
 8001f74:	4ccd      	ldr	r4, [pc, #820]	; (80022ac <__aeabi_dsub+0x358>)
 8001f76:	0331      	lsls	r1, r6, #12
 8001f78:	00c3      	lsls	r3, r0, #3
 8001f7a:	4694      	mov	ip, r2
 8001f7c:	0070      	lsls	r0, r6, #1
 8001f7e:	0f7a      	lsrs	r2, r7, #29
 8001f80:	0a49      	lsrs	r1, r1, #9
 8001f82:	00ff      	lsls	r7, r7, #3
 8001f84:	469a      	mov	sl, r3
 8001f86:	46b9      	mov	r9, r7
 8001f88:	0d40      	lsrs	r0, r0, #21
 8001f8a:	0ff6      	lsrs	r6, r6, #31
 8001f8c:	4311      	orrs	r1, r2
 8001f8e:	42a0      	cmp	r0, r4
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x40>
 8001f92:	e0b1      	b.n	80020f8 <__aeabi_dsub+0x1a4>
 8001f94:	2201      	movs	r2, #1
 8001f96:	4056      	eors	r6, r2
 8001f98:	46b3      	mov	fp, r6
 8001f9a:	42b5      	cmp	r5, r6
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x4c>
 8001f9e:	e088      	b.n	80020b2 <__aeabi_dsub+0x15e>
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	1a12      	subs	r2, r2, r0
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	dc00      	bgt.n	8001faa <__aeabi_dsub+0x56>
 8001fa8:	e0ae      	b.n	8002108 <__aeabi_dsub+0x1b4>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x5c>
 8001fae:	e0c1      	b.n	8002134 <__aeabi_dsub+0x1e0>
 8001fb0:	48be      	ldr	r0, [pc, #760]	; (80022ac <__aeabi_dsub+0x358>)
 8001fb2:	4580      	cmp	r8, r0
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x64>
 8001fb6:	e151      	b.n	800225c <__aeabi_dsub+0x308>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	0400      	lsls	r0, r0, #16
 8001fbc:	4301      	orrs	r1, r0
 8001fbe:	2a38      	cmp	r2, #56	; 0x38
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_dsub+0x70>
 8001fc2:	e17b      	b.n	80022bc <__aeabi_dsub+0x368>
 8001fc4:	2a1f      	cmp	r2, #31
 8001fc6:	dd00      	ble.n	8001fca <__aeabi_dsub+0x76>
 8001fc8:	e1ee      	b.n	80023a8 <__aeabi_dsub+0x454>
 8001fca:	2020      	movs	r0, #32
 8001fcc:	003e      	movs	r6, r7
 8001fce:	1a80      	subs	r0, r0, r2
 8001fd0:	000c      	movs	r4, r1
 8001fd2:	40d6      	lsrs	r6, r2
 8001fd4:	40d1      	lsrs	r1, r2
 8001fd6:	4087      	lsls	r7, r0
 8001fd8:	4662      	mov	r2, ip
 8001fda:	4084      	lsls	r4, r0
 8001fdc:	1a52      	subs	r2, r2, r1
 8001fde:	1e78      	subs	r0, r7, #1
 8001fe0:	4187      	sbcs	r7, r0
 8001fe2:	4694      	mov	ip, r2
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4327      	orrs	r7, r4
 8001fe8:	1bdc      	subs	r4, r3, r7
 8001fea:	42a3      	cmp	r3, r4
 8001fec:	419b      	sbcs	r3, r3
 8001fee:	4662      	mov	r2, ip
 8001ff0:	425b      	negs	r3, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	d400      	bmi.n	8001ffe <__aeabi_dsub+0xaa>
 8001ffc:	e118      	b.n	8002230 <__aeabi_dsub+0x2dc>
 8001ffe:	464b      	mov	r3, r9
 8002000:	0258      	lsls	r0, r3, #9
 8002002:	0a43      	lsrs	r3, r0, #9
 8002004:	4699      	mov	r9, r3
 8002006:	464b      	mov	r3, r9
 8002008:	2b00      	cmp	r3, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0xba>
 800200c:	e137      	b.n	800227e <__aeabi_dsub+0x32a>
 800200e:	4648      	mov	r0, r9
 8002010:	f000 fcac 	bl	800296c <__clzsi2>
 8002014:	0001      	movs	r1, r0
 8002016:	3908      	subs	r1, #8
 8002018:	2320      	movs	r3, #32
 800201a:	0022      	movs	r2, r4
 800201c:	4648      	mov	r0, r9
 800201e:	1a5b      	subs	r3, r3, r1
 8002020:	40da      	lsrs	r2, r3
 8002022:	4088      	lsls	r0, r1
 8002024:	408c      	lsls	r4, r1
 8002026:	4643      	mov	r3, r8
 8002028:	4310      	orrs	r0, r2
 800202a:	4588      	cmp	r8, r1
 800202c:	dd00      	ble.n	8002030 <__aeabi_dsub+0xdc>
 800202e:	e136      	b.n	800229e <__aeabi_dsub+0x34a>
 8002030:	1ac9      	subs	r1, r1, r3
 8002032:	1c4b      	adds	r3, r1, #1
 8002034:	2b1f      	cmp	r3, #31
 8002036:	dd00      	ble.n	800203a <__aeabi_dsub+0xe6>
 8002038:	e0ea      	b.n	8002210 <__aeabi_dsub+0x2bc>
 800203a:	2220      	movs	r2, #32
 800203c:	0026      	movs	r6, r4
 800203e:	1ad2      	subs	r2, r2, r3
 8002040:	0001      	movs	r1, r0
 8002042:	4094      	lsls	r4, r2
 8002044:	40de      	lsrs	r6, r3
 8002046:	40d8      	lsrs	r0, r3
 8002048:	2300      	movs	r3, #0
 800204a:	4091      	lsls	r1, r2
 800204c:	1e62      	subs	r2, r4, #1
 800204e:	4194      	sbcs	r4, r2
 8002050:	4681      	mov	r9, r0
 8002052:	4698      	mov	r8, r3
 8002054:	4331      	orrs	r1, r6
 8002056:	430c      	orrs	r4, r1
 8002058:	0763      	lsls	r3, r4, #29
 800205a:	d009      	beq.n	8002070 <__aeabi_dsub+0x11c>
 800205c:	230f      	movs	r3, #15
 800205e:	4023      	ands	r3, r4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d005      	beq.n	8002070 <__aeabi_dsub+0x11c>
 8002064:	1d23      	adds	r3, r4, #4
 8002066:	42a3      	cmp	r3, r4
 8002068:	41a4      	sbcs	r4, r4
 800206a:	4264      	negs	r4, r4
 800206c:	44a1      	add	r9, r4
 800206e:	001c      	movs	r4, r3
 8002070:	464b      	mov	r3, r9
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	d400      	bmi.n	8002078 <__aeabi_dsub+0x124>
 8002076:	e0de      	b.n	8002236 <__aeabi_dsub+0x2e2>
 8002078:	4641      	mov	r1, r8
 800207a:	4b8c      	ldr	r3, [pc, #560]	; (80022ac <__aeabi_dsub+0x358>)
 800207c:	3101      	adds	r1, #1
 800207e:	4299      	cmp	r1, r3
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x130>
 8002082:	e0e7      	b.n	8002254 <__aeabi_dsub+0x300>
 8002084:	464b      	mov	r3, r9
 8002086:	488a      	ldr	r0, [pc, #552]	; (80022b0 <__aeabi_dsub+0x35c>)
 8002088:	08e4      	lsrs	r4, r4, #3
 800208a:	4003      	ands	r3, r0
 800208c:	0018      	movs	r0, r3
 800208e:	0549      	lsls	r1, r1, #21
 8002090:	075b      	lsls	r3, r3, #29
 8002092:	0240      	lsls	r0, r0, #9
 8002094:	4323      	orrs	r3, r4
 8002096:	0d4a      	lsrs	r2, r1, #21
 8002098:	0b04      	lsrs	r4, r0, #12
 800209a:	0512      	lsls	r2, r2, #20
 800209c:	07ed      	lsls	r5, r5, #31
 800209e:	4322      	orrs	r2, r4
 80020a0:	432a      	orrs	r2, r5
 80020a2:	0018      	movs	r0, r3
 80020a4:	0011      	movs	r1, r2
 80020a6:	bcf0      	pop	{r4, r5, r6, r7}
 80020a8:	46bb      	mov	fp, r7
 80020aa:	46b2      	mov	sl, r6
 80020ac:	46a9      	mov	r9, r5
 80020ae:	46a0      	mov	r8, r4
 80020b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020b2:	4642      	mov	r2, r8
 80020b4:	1a12      	subs	r2, r2, r0
 80020b6:	2a00      	cmp	r2, #0
 80020b8:	dd52      	ble.n	8002160 <__aeabi_dsub+0x20c>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x16c>
 80020be:	e09c      	b.n	80021fa <__aeabi_dsub+0x2a6>
 80020c0:	45a0      	cmp	r8, r4
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dsub+0x172>
 80020c4:	e0ca      	b.n	800225c <__aeabi_dsub+0x308>
 80020c6:	2080      	movs	r0, #128	; 0x80
 80020c8:	0400      	lsls	r0, r0, #16
 80020ca:	4301      	orrs	r1, r0
 80020cc:	2a38      	cmp	r2, #56	; 0x38
 80020ce:	dd00      	ble.n	80020d2 <__aeabi_dsub+0x17e>
 80020d0:	e149      	b.n	8002366 <__aeabi_dsub+0x412>
 80020d2:	2a1f      	cmp	r2, #31
 80020d4:	dc00      	bgt.n	80020d8 <__aeabi_dsub+0x184>
 80020d6:	e197      	b.n	8002408 <__aeabi_dsub+0x4b4>
 80020d8:	0010      	movs	r0, r2
 80020da:	000e      	movs	r6, r1
 80020dc:	3820      	subs	r0, #32
 80020de:	40c6      	lsrs	r6, r0
 80020e0:	2a20      	cmp	r2, #32
 80020e2:	d004      	beq.n	80020ee <__aeabi_dsub+0x19a>
 80020e4:	2040      	movs	r0, #64	; 0x40
 80020e6:	1a82      	subs	r2, r0, r2
 80020e8:	4091      	lsls	r1, r2
 80020ea:	430f      	orrs	r7, r1
 80020ec:	46b9      	mov	r9, r7
 80020ee:	464c      	mov	r4, r9
 80020f0:	1e62      	subs	r2, r4, #1
 80020f2:	4194      	sbcs	r4, r2
 80020f4:	4334      	orrs	r4, r6
 80020f6:	e13a      	b.n	800236e <__aeabi_dsub+0x41a>
 80020f8:	000a      	movs	r2, r1
 80020fa:	433a      	orrs	r2, r7
 80020fc:	d028      	beq.n	8002150 <__aeabi_dsub+0x1fc>
 80020fe:	46b3      	mov	fp, r6
 8002100:	42b5      	cmp	r5, r6
 8002102:	d02b      	beq.n	800215c <__aeabi_dsub+0x208>
 8002104:	4a6b      	ldr	r2, [pc, #428]	; (80022b4 <__aeabi_dsub+0x360>)
 8002106:	4442      	add	r2, r8
 8002108:	2a00      	cmp	r2, #0
 800210a:	d05d      	beq.n	80021c8 <__aeabi_dsub+0x274>
 800210c:	4642      	mov	r2, r8
 800210e:	4644      	mov	r4, r8
 8002110:	1a82      	subs	r2, r0, r2
 8002112:	2c00      	cmp	r4, #0
 8002114:	d000      	beq.n	8002118 <__aeabi_dsub+0x1c4>
 8002116:	e0f5      	b.n	8002304 <__aeabi_dsub+0x3b0>
 8002118:	4665      	mov	r5, ip
 800211a:	431d      	orrs	r5, r3
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x1cc>
 800211e:	e19c      	b.n	800245a <__aeabi_dsub+0x506>
 8002120:	1e55      	subs	r5, r2, #1
 8002122:	2a01      	cmp	r2, #1
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x1d4>
 8002126:	e1fb      	b.n	8002520 <__aeabi_dsub+0x5cc>
 8002128:	4c60      	ldr	r4, [pc, #384]	; (80022ac <__aeabi_dsub+0x358>)
 800212a:	42a2      	cmp	r2, r4
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x1dc>
 800212e:	e1bd      	b.n	80024ac <__aeabi_dsub+0x558>
 8002130:	002a      	movs	r2, r5
 8002132:	e0f0      	b.n	8002316 <__aeabi_dsub+0x3c2>
 8002134:	0008      	movs	r0, r1
 8002136:	4338      	orrs	r0, r7
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x1e8>
 800213a:	e0c3      	b.n	80022c4 <__aeabi_dsub+0x370>
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	2a01      	cmp	r2, #1
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x1f0>
 8002142:	e1a8      	b.n	8002496 <__aeabi_dsub+0x542>
 8002144:	4c59      	ldr	r4, [pc, #356]	; (80022ac <__aeabi_dsub+0x358>)
 8002146:	42a2      	cmp	r2, r4
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x1f8>
 800214a:	e087      	b.n	800225c <__aeabi_dsub+0x308>
 800214c:	0002      	movs	r2, r0
 800214e:	e736      	b.n	8001fbe <__aeabi_dsub+0x6a>
 8002150:	2201      	movs	r2, #1
 8002152:	4056      	eors	r6, r2
 8002154:	46b3      	mov	fp, r6
 8002156:	42b5      	cmp	r5, r6
 8002158:	d000      	beq.n	800215c <__aeabi_dsub+0x208>
 800215a:	e721      	b.n	8001fa0 <__aeabi_dsub+0x4c>
 800215c:	4a55      	ldr	r2, [pc, #340]	; (80022b4 <__aeabi_dsub+0x360>)
 800215e:	4442      	add	r2, r8
 8002160:	2a00      	cmp	r2, #0
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x212>
 8002164:	e0b5      	b.n	80022d2 <__aeabi_dsub+0x37e>
 8002166:	4642      	mov	r2, r8
 8002168:	4644      	mov	r4, r8
 800216a:	1a82      	subs	r2, r0, r2
 800216c:	2c00      	cmp	r4, #0
 800216e:	d100      	bne.n	8002172 <__aeabi_dsub+0x21e>
 8002170:	e138      	b.n	80023e4 <__aeabi_dsub+0x490>
 8002172:	4e4e      	ldr	r6, [pc, #312]	; (80022ac <__aeabi_dsub+0x358>)
 8002174:	42b0      	cmp	r0, r6
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x226>
 8002178:	e1de      	b.n	8002538 <__aeabi_dsub+0x5e4>
 800217a:	2680      	movs	r6, #128	; 0x80
 800217c:	4664      	mov	r4, ip
 800217e:	0436      	lsls	r6, r6, #16
 8002180:	4334      	orrs	r4, r6
 8002182:	46a4      	mov	ip, r4
 8002184:	2a38      	cmp	r2, #56	; 0x38
 8002186:	dd00      	ble.n	800218a <__aeabi_dsub+0x236>
 8002188:	e196      	b.n	80024b8 <__aeabi_dsub+0x564>
 800218a:	2a1f      	cmp	r2, #31
 800218c:	dd00      	ble.n	8002190 <__aeabi_dsub+0x23c>
 800218e:	e224      	b.n	80025da <__aeabi_dsub+0x686>
 8002190:	2620      	movs	r6, #32
 8002192:	1ab4      	subs	r4, r6, r2
 8002194:	46a2      	mov	sl, r4
 8002196:	4664      	mov	r4, ip
 8002198:	4656      	mov	r6, sl
 800219a:	40b4      	lsls	r4, r6
 800219c:	46a1      	mov	r9, r4
 800219e:	001c      	movs	r4, r3
 80021a0:	464e      	mov	r6, r9
 80021a2:	40d4      	lsrs	r4, r2
 80021a4:	4326      	orrs	r6, r4
 80021a6:	0034      	movs	r4, r6
 80021a8:	4656      	mov	r6, sl
 80021aa:	40b3      	lsls	r3, r6
 80021ac:	1e5e      	subs	r6, r3, #1
 80021ae:	41b3      	sbcs	r3, r6
 80021b0:	431c      	orrs	r4, r3
 80021b2:	4663      	mov	r3, ip
 80021b4:	40d3      	lsrs	r3, r2
 80021b6:	18c9      	adds	r1, r1, r3
 80021b8:	19e4      	adds	r4, r4, r7
 80021ba:	42bc      	cmp	r4, r7
 80021bc:	41bf      	sbcs	r7, r7
 80021be:	427f      	negs	r7, r7
 80021c0:	46b9      	mov	r9, r7
 80021c2:	4680      	mov	r8, r0
 80021c4:	4489      	add	r9, r1
 80021c6:	e0d8      	b.n	800237a <__aeabi_dsub+0x426>
 80021c8:	4640      	mov	r0, r8
 80021ca:	4c3b      	ldr	r4, [pc, #236]	; (80022b8 <__aeabi_dsub+0x364>)
 80021cc:	3001      	adds	r0, #1
 80021ce:	4220      	tst	r0, r4
 80021d0:	d000      	beq.n	80021d4 <__aeabi_dsub+0x280>
 80021d2:	e0b4      	b.n	800233e <__aeabi_dsub+0x3ea>
 80021d4:	4640      	mov	r0, r8
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d000      	beq.n	80021dc <__aeabi_dsub+0x288>
 80021da:	e144      	b.n	8002466 <__aeabi_dsub+0x512>
 80021dc:	4660      	mov	r0, ip
 80021de:	4318      	orrs	r0, r3
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x290>
 80021e2:	e190      	b.n	8002506 <__aeabi_dsub+0x5b2>
 80021e4:	0008      	movs	r0, r1
 80021e6:	4338      	orrs	r0, r7
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x298>
 80021ea:	e1aa      	b.n	8002542 <__aeabi_dsub+0x5ee>
 80021ec:	4661      	mov	r1, ip
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	0749      	lsls	r1, r1, #29
 80021f2:	430b      	orrs	r3, r1
 80021f4:	4661      	mov	r1, ip
 80021f6:	08cc      	lsrs	r4, r1, #3
 80021f8:	e027      	b.n	800224a <__aeabi_dsub+0x2f6>
 80021fa:	0008      	movs	r0, r1
 80021fc:	4338      	orrs	r0, r7
 80021fe:	d061      	beq.n	80022c4 <__aeabi_dsub+0x370>
 8002200:	1e50      	subs	r0, r2, #1
 8002202:	2a01      	cmp	r2, #1
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x2b4>
 8002206:	e139      	b.n	800247c <__aeabi_dsub+0x528>
 8002208:	42a2      	cmp	r2, r4
 800220a:	d027      	beq.n	800225c <__aeabi_dsub+0x308>
 800220c:	0002      	movs	r2, r0
 800220e:	e75d      	b.n	80020cc <__aeabi_dsub+0x178>
 8002210:	0002      	movs	r2, r0
 8002212:	391f      	subs	r1, #31
 8002214:	40ca      	lsrs	r2, r1
 8002216:	0011      	movs	r1, r2
 8002218:	2b20      	cmp	r3, #32
 800221a:	d003      	beq.n	8002224 <__aeabi_dsub+0x2d0>
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4098      	lsls	r0, r3
 8002222:	4304      	orrs	r4, r0
 8002224:	1e63      	subs	r3, r4, #1
 8002226:	419c      	sbcs	r4, r3
 8002228:	2300      	movs	r3, #0
 800222a:	4699      	mov	r9, r3
 800222c:	4698      	mov	r8, r3
 800222e:	430c      	orrs	r4, r1
 8002230:	0763      	lsls	r3, r4, #29
 8002232:	d000      	beq.n	8002236 <__aeabi_dsub+0x2e2>
 8002234:	e712      	b.n	800205c <__aeabi_dsub+0x108>
 8002236:	464b      	mov	r3, r9
 8002238:	464a      	mov	r2, r9
 800223a:	08e4      	lsrs	r4, r4, #3
 800223c:	075b      	lsls	r3, r3, #29
 800223e:	4323      	orrs	r3, r4
 8002240:	08d4      	lsrs	r4, r2, #3
 8002242:	4642      	mov	r2, r8
 8002244:	4919      	ldr	r1, [pc, #100]	; (80022ac <__aeabi_dsub+0x358>)
 8002246:	428a      	cmp	r2, r1
 8002248:	d00e      	beq.n	8002268 <__aeabi_dsub+0x314>
 800224a:	0324      	lsls	r4, r4, #12
 800224c:	0552      	lsls	r2, r2, #21
 800224e:	0b24      	lsrs	r4, r4, #12
 8002250:	0d52      	lsrs	r2, r2, #21
 8002252:	e722      	b.n	800209a <__aeabi_dsub+0x146>
 8002254:	000a      	movs	r2, r1
 8002256:	2400      	movs	r4, #0
 8002258:	2300      	movs	r3, #0
 800225a:	e71e      	b.n	800209a <__aeabi_dsub+0x146>
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4662      	mov	r2, ip
 8002260:	0752      	lsls	r2, r2, #29
 8002262:	4313      	orrs	r3, r2
 8002264:	4662      	mov	r2, ip
 8002266:	08d4      	lsrs	r4, r2, #3
 8002268:	001a      	movs	r2, r3
 800226a:	4322      	orrs	r2, r4
 800226c:	d100      	bne.n	8002270 <__aeabi_dsub+0x31c>
 800226e:	e1fc      	b.n	800266a <__aeabi_dsub+0x716>
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0312      	lsls	r2, r2, #12
 8002274:	4314      	orrs	r4, r2
 8002276:	0324      	lsls	r4, r4, #12
 8002278:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <__aeabi_dsub+0x358>)
 800227a:	0b24      	lsrs	r4, r4, #12
 800227c:	e70d      	b.n	800209a <__aeabi_dsub+0x146>
 800227e:	0020      	movs	r0, r4
 8002280:	f000 fb74 	bl	800296c <__clzsi2>
 8002284:	0001      	movs	r1, r0
 8002286:	3118      	adds	r1, #24
 8002288:	291f      	cmp	r1, #31
 800228a:	dc00      	bgt.n	800228e <__aeabi_dsub+0x33a>
 800228c:	e6c4      	b.n	8002018 <__aeabi_dsub+0xc4>
 800228e:	3808      	subs	r0, #8
 8002290:	4084      	lsls	r4, r0
 8002292:	4643      	mov	r3, r8
 8002294:	0020      	movs	r0, r4
 8002296:	2400      	movs	r4, #0
 8002298:	4588      	cmp	r8, r1
 800229a:	dc00      	bgt.n	800229e <__aeabi_dsub+0x34a>
 800229c:	e6c8      	b.n	8002030 <__aeabi_dsub+0xdc>
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__aeabi_dsub+0x35c>)
 80022a0:	1a5b      	subs	r3, r3, r1
 80022a2:	4010      	ands	r0, r2
 80022a4:	4698      	mov	r8, r3
 80022a6:	4681      	mov	r9, r0
 80022a8:	e6d6      	b.n	8002058 <__aeabi_dsub+0x104>
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	000007ff 	.word	0x000007ff
 80022b0:	ff7fffff 	.word	0xff7fffff
 80022b4:	fffff801 	.word	0xfffff801
 80022b8:	000007fe 	.word	0x000007fe
 80022bc:	430f      	orrs	r7, r1
 80022be:	1e7a      	subs	r2, r7, #1
 80022c0:	4197      	sbcs	r7, r2
 80022c2:	e691      	b.n	8001fe8 <__aeabi_dsub+0x94>
 80022c4:	4661      	mov	r1, ip
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	0749      	lsls	r1, r1, #29
 80022ca:	430b      	orrs	r3, r1
 80022cc:	4661      	mov	r1, ip
 80022ce:	08cc      	lsrs	r4, r1, #3
 80022d0:	e7b8      	b.n	8002244 <__aeabi_dsub+0x2f0>
 80022d2:	4640      	mov	r0, r8
 80022d4:	4cd3      	ldr	r4, [pc, #844]	; (8002624 <__aeabi_dsub+0x6d0>)
 80022d6:	3001      	adds	r0, #1
 80022d8:	4220      	tst	r0, r4
 80022da:	d000      	beq.n	80022de <__aeabi_dsub+0x38a>
 80022dc:	e0a2      	b.n	8002424 <__aeabi_dsub+0x4d0>
 80022de:	4640      	mov	r0, r8
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d000      	beq.n	80022e6 <__aeabi_dsub+0x392>
 80022e4:	e101      	b.n	80024ea <__aeabi_dsub+0x596>
 80022e6:	4660      	mov	r0, ip
 80022e8:	4318      	orrs	r0, r3
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x39a>
 80022ec:	e15e      	b.n	80025ac <__aeabi_dsub+0x658>
 80022ee:	0008      	movs	r0, r1
 80022f0:	4338      	orrs	r0, r7
 80022f2:	d000      	beq.n	80022f6 <__aeabi_dsub+0x3a2>
 80022f4:	e15f      	b.n	80025b6 <__aeabi_dsub+0x662>
 80022f6:	4661      	mov	r1, ip
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	0749      	lsls	r1, r1, #29
 80022fc:	430b      	orrs	r3, r1
 80022fe:	4661      	mov	r1, ip
 8002300:	08cc      	lsrs	r4, r1, #3
 8002302:	e7a2      	b.n	800224a <__aeabi_dsub+0x2f6>
 8002304:	4dc8      	ldr	r5, [pc, #800]	; (8002628 <__aeabi_dsub+0x6d4>)
 8002306:	42a8      	cmp	r0, r5
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x3b8>
 800230a:	e0cf      	b.n	80024ac <__aeabi_dsub+0x558>
 800230c:	2580      	movs	r5, #128	; 0x80
 800230e:	4664      	mov	r4, ip
 8002310:	042d      	lsls	r5, r5, #16
 8002312:	432c      	orrs	r4, r5
 8002314:	46a4      	mov	ip, r4
 8002316:	2a38      	cmp	r2, #56	; 0x38
 8002318:	dc56      	bgt.n	80023c8 <__aeabi_dsub+0x474>
 800231a:	2a1f      	cmp	r2, #31
 800231c:	dd00      	ble.n	8002320 <__aeabi_dsub+0x3cc>
 800231e:	e0d1      	b.n	80024c4 <__aeabi_dsub+0x570>
 8002320:	2520      	movs	r5, #32
 8002322:	001e      	movs	r6, r3
 8002324:	1aad      	subs	r5, r5, r2
 8002326:	4664      	mov	r4, ip
 8002328:	40ab      	lsls	r3, r5
 800232a:	40ac      	lsls	r4, r5
 800232c:	40d6      	lsrs	r6, r2
 800232e:	1e5d      	subs	r5, r3, #1
 8002330:	41ab      	sbcs	r3, r5
 8002332:	4334      	orrs	r4, r6
 8002334:	4323      	orrs	r3, r4
 8002336:	4664      	mov	r4, ip
 8002338:	40d4      	lsrs	r4, r2
 800233a:	1b09      	subs	r1, r1, r4
 800233c:	e049      	b.n	80023d2 <__aeabi_dsub+0x47e>
 800233e:	4660      	mov	r0, ip
 8002340:	1bdc      	subs	r4, r3, r7
 8002342:	1a46      	subs	r6, r0, r1
 8002344:	42a3      	cmp	r3, r4
 8002346:	4180      	sbcs	r0, r0
 8002348:	4240      	negs	r0, r0
 800234a:	4681      	mov	r9, r0
 800234c:	0030      	movs	r0, r6
 800234e:	464e      	mov	r6, r9
 8002350:	1b80      	subs	r0, r0, r6
 8002352:	4681      	mov	r9, r0
 8002354:	0200      	lsls	r0, r0, #8
 8002356:	d476      	bmi.n	8002446 <__aeabi_dsub+0x4f2>
 8002358:	464b      	mov	r3, r9
 800235a:	4323      	orrs	r3, r4
 800235c:	d000      	beq.n	8002360 <__aeabi_dsub+0x40c>
 800235e:	e652      	b.n	8002006 <__aeabi_dsub+0xb2>
 8002360:	2400      	movs	r4, #0
 8002362:	2500      	movs	r5, #0
 8002364:	e771      	b.n	800224a <__aeabi_dsub+0x2f6>
 8002366:	4339      	orrs	r1, r7
 8002368:	000c      	movs	r4, r1
 800236a:	1e62      	subs	r2, r4, #1
 800236c:	4194      	sbcs	r4, r2
 800236e:	18e4      	adds	r4, r4, r3
 8002370:	429c      	cmp	r4, r3
 8002372:	419b      	sbcs	r3, r3
 8002374:	425b      	negs	r3, r3
 8002376:	4463      	add	r3, ip
 8002378:	4699      	mov	r9, r3
 800237a:	464b      	mov	r3, r9
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	d400      	bmi.n	8002382 <__aeabi_dsub+0x42e>
 8002380:	e756      	b.n	8002230 <__aeabi_dsub+0x2dc>
 8002382:	2301      	movs	r3, #1
 8002384:	469c      	mov	ip, r3
 8002386:	4ba8      	ldr	r3, [pc, #672]	; (8002628 <__aeabi_dsub+0x6d4>)
 8002388:	44e0      	add	r8, ip
 800238a:	4598      	cmp	r8, r3
 800238c:	d038      	beq.n	8002400 <__aeabi_dsub+0x4ac>
 800238e:	464b      	mov	r3, r9
 8002390:	48a6      	ldr	r0, [pc, #664]	; (800262c <__aeabi_dsub+0x6d8>)
 8002392:	2201      	movs	r2, #1
 8002394:	4003      	ands	r3, r0
 8002396:	0018      	movs	r0, r3
 8002398:	0863      	lsrs	r3, r4, #1
 800239a:	4014      	ands	r4, r2
 800239c:	431c      	orrs	r4, r3
 800239e:	07c3      	lsls	r3, r0, #31
 80023a0:	431c      	orrs	r4, r3
 80023a2:	0843      	lsrs	r3, r0, #1
 80023a4:	4699      	mov	r9, r3
 80023a6:	e657      	b.n	8002058 <__aeabi_dsub+0x104>
 80023a8:	0010      	movs	r0, r2
 80023aa:	000e      	movs	r6, r1
 80023ac:	3820      	subs	r0, #32
 80023ae:	40c6      	lsrs	r6, r0
 80023b0:	2a20      	cmp	r2, #32
 80023b2:	d004      	beq.n	80023be <__aeabi_dsub+0x46a>
 80023b4:	2040      	movs	r0, #64	; 0x40
 80023b6:	1a82      	subs	r2, r0, r2
 80023b8:	4091      	lsls	r1, r2
 80023ba:	430f      	orrs	r7, r1
 80023bc:	46b9      	mov	r9, r7
 80023be:	464f      	mov	r7, r9
 80023c0:	1e7a      	subs	r2, r7, #1
 80023c2:	4197      	sbcs	r7, r2
 80023c4:	4337      	orrs	r7, r6
 80023c6:	e60f      	b.n	8001fe8 <__aeabi_dsub+0x94>
 80023c8:	4662      	mov	r2, ip
 80023ca:	431a      	orrs	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	4193      	sbcs	r3, r2
 80023d2:	1afc      	subs	r4, r7, r3
 80023d4:	42a7      	cmp	r7, r4
 80023d6:	41bf      	sbcs	r7, r7
 80023d8:	427f      	negs	r7, r7
 80023da:	1bcb      	subs	r3, r1, r7
 80023dc:	4699      	mov	r9, r3
 80023de:	465d      	mov	r5, fp
 80023e0:	4680      	mov	r8, r0
 80023e2:	e608      	b.n	8001ff6 <__aeabi_dsub+0xa2>
 80023e4:	4666      	mov	r6, ip
 80023e6:	431e      	orrs	r6, r3
 80023e8:	d100      	bne.n	80023ec <__aeabi_dsub+0x498>
 80023ea:	e0be      	b.n	800256a <__aeabi_dsub+0x616>
 80023ec:	1e56      	subs	r6, r2, #1
 80023ee:	2a01      	cmp	r2, #1
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x4a0>
 80023f2:	e109      	b.n	8002608 <__aeabi_dsub+0x6b4>
 80023f4:	4c8c      	ldr	r4, [pc, #560]	; (8002628 <__aeabi_dsub+0x6d4>)
 80023f6:	42a2      	cmp	r2, r4
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x4a8>
 80023fa:	e119      	b.n	8002630 <__aeabi_dsub+0x6dc>
 80023fc:	0032      	movs	r2, r6
 80023fe:	e6c1      	b.n	8002184 <__aeabi_dsub+0x230>
 8002400:	4642      	mov	r2, r8
 8002402:	2400      	movs	r4, #0
 8002404:	2300      	movs	r3, #0
 8002406:	e648      	b.n	800209a <__aeabi_dsub+0x146>
 8002408:	2020      	movs	r0, #32
 800240a:	000c      	movs	r4, r1
 800240c:	1a80      	subs	r0, r0, r2
 800240e:	003e      	movs	r6, r7
 8002410:	4087      	lsls	r7, r0
 8002412:	4084      	lsls	r4, r0
 8002414:	40d6      	lsrs	r6, r2
 8002416:	1e78      	subs	r0, r7, #1
 8002418:	4187      	sbcs	r7, r0
 800241a:	40d1      	lsrs	r1, r2
 800241c:	4334      	orrs	r4, r6
 800241e:	433c      	orrs	r4, r7
 8002420:	448c      	add	ip, r1
 8002422:	e7a4      	b.n	800236e <__aeabi_dsub+0x41a>
 8002424:	4a80      	ldr	r2, [pc, #512]	; (8002628 <__aeabi_dsub+0x6d4>)
 8002426:	4290      	cmp	r0, r2
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x4d8>
 800242a:	e0e9      	b.n	8002600 <__aeabi_dsub+0x6ac>
 800242c:	19df      	adds	r7, r3, r7
 800242e:	429f      	cmp	r7, r3
 8002430:	419b      	sbcs	r3, r3
 8002432:	4461      	add	r1, ip
 8002434:	425b      	negs	r3, r3
 8002436:	18c9      	adds	r1, r1, r3
 8002438:	07cc      	lsls	r4, r1, #31
 800243a:	087f      	lsrs	r7, r7, #1
 800243c:	084b      	lsrs	r3, r1, #1
 800243e:	4699      	mov	r9, r3
 8002440:	4680      	mov	r8, r0
 8002442:	433c      	orrs	r4, r7
 8002444:	e6f4      	b.n	8002230 <__aeabi_dsub+0x2dc>
 8002446:	1afc      	subs	r4, r7, r3
 8002448:	42a7      	cmp	r7, r4
 800244a:	41bf      	sbcs	r7, r7
 800244c:	4663      	mov	r3, ip
 800244e:	427f      	negs	r7, r7
 8002450:	1ac9      	subs	r1, r1, r3
 8002452:	1bcb      	subs	r3, r1, r7
 8002454:	4699      	mov	r9, r3
 8002456:	465d      	mov	r5, fp
 8002458:	e5d5      	b.n	8002006 <__aeabi_dsub+0xb2>
 800245a:	08ff      	lsrs	r7, r7, #3
 800245c:	074b      	lsls	r3, r1, #29
 800245e:	465d      	mov	r5, fp
 8002460:	433b      	orrs	r3, r7
 8002462:	08cc      	lsrs	r4, r1, #3
 8002464:	e6ee      	b.n	8002244 <__aeabi_dsub+0x2f0>
 8002466:	4662      	mov	r2, ip
 8002468:	431a      	orrs	r2, r3
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x51a>
 800246c:	e082      	b.n	8002574 <__aeabi_dsub+0x620>
 800246e:	000b      	movs	r3, r1
 8002470:	433b      	orrs	r3, r7
 8002472:	d11b      	bne.n	80024ac <__aeabi_dsub+0x558>
 8002474:	2480      	movs	r4, #128	; 0x80
 8002476:	2500      	movs	r5, #0
 8002478:	0324      	lsls	r4, r4, #12
 800247a:	e6f9      	b.n	8002270 <__aeabi_dsub+0x31c>
 800247c:	19dc      	adds	r4, r3, r7
 800247e:	429c      	cmp	r4, r3
 8002480:	419b      	sbcs	r3, r3
 8002482:	4461      	add	r1, ip
 8002484:	4689      	mov	r9, r1
 8002486:	425b      	negs	r3, r3
 8002488:	4499      	add	r9, r3
 800248a:	464b      	mov	r3, r9
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	d444      	bmi.n	800251a <__aeabi_dsub+0x5c6>
 8002490:	2301      	movs	r3, #1
 8002492:	4698      	mov	r8, r3
 8002494:	e6cc      	b.n	8002230 <__aeabi_dsub+0x2dc>
 8002496:	1bdc      	subs	r4, r3, r7
 8002498:	4662      	mov	r2, ip
 800249a:	42a3      	cmp	r3, r4
 800249c:	419b      	sbcs	r3, r3
 800249e:	1a51      	subs	r1, r2, r1
 80024a0:	425b      	negs	r3, r3
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	4699      	mov	r9, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	4698      	mov	r8, r3
 80024aa:	e5a4      	b.n	8001ff6 <__aeabi_dsub+0xa2>
 80024ac:	08ff      	lsrs	r7, r7, #3
 80024ae:	074b      	lsls	r3, r1, #29
 80024b0:	465d      	mov	r5, fp
 80024b2:	433b      	orrs	r3, r7
 80024b4:	08cc      	lsrs	r4, r1, #3
 80024b6:	e6d7      	b.n	8002268 <__aeabi_dsub+0x314>
 80024b8:	4662      	mov	r2, ip
 80024ba:	431a      	orrs	r2, r3
 80024bc:	0014      	movs	r4, r2
 80024be:	1e63      	subs	r3, r4, #1
 80024c0:	419c      	sbcs	r4, r3
 80024c2:	e679      	b.n	80021b8 <__aeabi_dsub+0x264>
 80024c4:	0015      	movs	r5, r2
 80024c6:	4664      	mov	r4, ip
 80024c8:	3d20      	subs	r5, #32
 80024ca:	40ec      	lsrs	r4, r5
 80024cc:	46a0      	mov	r8, r4
 80024ce:	2a20      	cmp	r2, #32
 80024d0:	d005      	beq.n	80024de <__aeabi_dsub+0x58a>
 80024d2:	2540      	movs	r5, #64	; 0x40
 80024d4:	4664      	mov	r4, ip
 80024d6:	1aaa      	subs	r2, r5, r2
 80024d8:	4094      	lsls	r4, r2
 80024da:	4323      	orrs	r3, r4
 80024dc:	469a      	mov	sl, r3
 80024de:	4654      	mov	r4, sl
 80024e0:	1e63      	subs	r3, r4, #1
 80024e2:	419c      	sbcs	r4, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	4323      	orrs	r3, r4
 80024e8:	e773      	b.n	80023d2 <__aeabi_dsub+0x47e>
 80024ea:	4662      	mov	r2, ip
 80024ec:	431a      	orrs	r2, r3
 80024ee:	d023      	beq.n	8002538 <__aeabi_dsub+0x5e4>
 80024f0:	000a      	movs	r2, r1
 80024f2:	433a      	orrs	r2, r7
 80024f4:	d000      	beq.n	80024f8 <__aeabi_dsub+0x5a4>
 80024f6:	e0a0      	b.n	800263a <__aeabi_dsub+0x6e6>
 80024f8:	4662      	mov	r2, ip
 80024fa:	08db      	lsrs	r3, r3, #3
 80024fc:	0752      	lsls	r2, r2, #29
 80024fe:	4313      	orrs	r3, r2
 8002500:	4662      	mov	r2, ip
 8002502:	08d4      	lsrs	r4, r2, #3
 8002504:	e6b0      	b.n	8002268 <__aeabi_dsub+0x314>
 8002506:	000b      	movs	r3, r1
 8002508:	433b      	orrs	r3, r7
 800250a:	d100      	bne.n	800250e <__aeabi_dsub+0x5ba>
 800250c:	e728      	b.n	8002360 <__aeabi_dsub+0x40c>
 800250e:	08ff      	lsrs	r7, r7, #3
 8002510:	074b      	lsls	r3, r1, #29
 8002512:	465d      	mov	r5, fp
 8002514:	433b      	orrs	r3, r7
 8002516:	08cc      	lsrs	r4, r1, #3
 8002518:	e697      	b.n	800224a <__aeabi_dsub+0x2f6>
 800251a:	2302      	movs	r3, #2
 800251c:	4698      	mov	r8, r3
 800251e:	e736      	b.n	800238e <__aeabi_dsub+0x43a>
 8002520:	1afc      	subs	r4, r7, r3
 8002522:	42a7      	cmp	r7, r4
 8002524:	41bf      	sbcs	r7, r7
 8002526:	4663      	mov	r3, ip
 8002528:	427f      	negs	r7, r7
 800252a:	1ac9      	subs	r1, r1, r3
 800252c:	1bcb      	subs	r3, r1, r7
 800252e:	4699      	mov	r9, r3
 8002530:	2301      	movs	r3, #1
 8002532:	465d      	mov	r5, fp
 8002534:	4698      	mov	r8, r3
 8002536:	e55e      	b.n	8001ff6 <__aeabi_dsub+0xa2>
 8002538:	074b      	lsls	r3, r1, #29
 800253a:	08ff      	lsrs	r7, r7, #3
 800253c:	433b      	orrs	r3, r7
 800253e:	08cc      	lsrs	r4, r1, #3
 8002540:	e692      	b.n	8002268 <__aeabi_dsub+0x314>
 8002542:	1bdc      	subs	r4, r3, r7
 8002544:	4660      	mov	r0, ip
 8002546:	42a3      	cmp	r3, r4
 8002548:	41b6      	sbcs	r6, r6
 800254a:	1a40      	subs	r0, r0, r1
 800254c:	4276      	negs	r6, r6
 800254e:	1b80      	subs	r0, r0, r6
 8002550:	4681      	mov	r9, r0
 8002552:	0200      	lsls	r0, r0, #8
 8002554:	d560      	bpl.n	8002618 <__aeabi_dsub+0x6c4>
 8002556:	1afc      	subs	r4, r7, r3
 8002558:	42a7      	cmp	r7, r4
 800255a:	41bf      	sbcs	r7, r7
 800255c:	4663      	mov	r3, ip
 800255e:	427f      	negs	r7, r7
 8002560:	1ac9      	subs	r1, r1, r3
 8002562:	1bcb      	subs	r3, r1, r7
 8002564:	4699      	mov	r9, r3
 8002566:	465d      	mov	r5, fp
 8002568:	e576      	b.n	8002058 <__aeabi_dsub+0x104>
 800256a:	08ff      	lsrs	r7, r7, #3
 800256c:	074b      	lsls	r3, r1, #29
 800256e:	433b      	orrs	r3, r7
 8002570:	08cc      	lsrs	r4, r1, #3
 8002572:	e667      	b.n	8002244 <__aeabi_dsub+0x2f0>
 8002574:	000a      	movs	r2, r1
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	433a      	orrs	r2, r7
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x62a>
 800257c:	e66f      	b.n	800225e <__aeabi_dsub+0x30a>
 800257e:	4662      	mov	r2, ip
 8002580:	0752      	lsls	r2, r2, #29
 8002582:	4313      	orrs	r3, r2
 8002584:	4662      	mov	r2, ip
 8002586:	08d4      	lsrs	r4, r2, #3
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0312      	lsls	r2, r2, #12
 800258c:	4214      	tst	r4, r2
 800258e:	d007      	beq.n	80025a0 <__aeabi_dsub+0x64c>
 8002590:	08c8      	lsrs	r0, r1, #3
 8002592:	4210      	tst	r0, r2
 8002594:	d104      	bne.n	80025a0 <__aeabi_dsub+0x64c>
 8002596:	465d      	mov	r5, fp
 8002598:	0004      	movs	r4, r0
 800259a:	08fb      	lsrs	r3, r7, #3
 800259c:	0749      	lsls	r1, r1, #29
 800259e:	430b      	orrs	r3, r1
 80025a0:	0f5a      	lsrs	r2, r3, #29
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	08db      	lsrs	r3, r3, #3
 80025a6:	0752      	lsls	r2, r2, #29
 80025a8:	4313      	orrs	r3, r2
 80025aa:	e65d      	b.n	8002268 <__aeabi_dsub+0x314>
 80025ac:	074b      	lsls	r3, r1, #29
 80025ae:	08ff      	lsrs	r7, r7, #3
 80025b0:	433b      	orrs	r3, r7
 80025b2:	08cc      	lsrs	r4, r1, #3
 80025b4:	e649      	b.n	800224a <__aeabi_dsub+0x2f6>
 80025b6:	19dc      	adds	r4, r3, r7
 80025b8:	429c      	cmp	r4, r3
 80025ba:	419b      	sbcs	r3, r3
 80025bc:	4461      	add	r1, ip
 80025be:	4689      	mov	r9, r1
 80025c0:	425b      	negs	r3, r3
 80025c2:	4499      	add	r9, r3
 80025c4:	464b      	mov	r3, r9
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	d400      	bmi.n	80025cc <__aeabi_dsub+0x678>
 80025ca:	e631      	b.n	8002230 <__aeabi_dsub+0x2dc>
 80025cc:	464a      	mov	r2, r9
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <__aeabi_dsub+0x6d8>)
 80025d0:	401a      	ands	r2, r3
 80025d2:	2301      	movs	r3, #1
 80025d4:	4691      	mov	r9, r2
 80025d6:	4698      	mov	r8, r3
 80025d8:	e62a      	b.n	8002230 <__aeabi_dsub+0x2dc>
 80025da:	0016      	movs	r6, r2
 80025dc:	4664      	mov	r4, ip
 80025de:	3e20      	subs	r6, #32
 80025e0:	40f4      	lsrs	r4, r6
 80025e2:	46a0      	mov	r8, r4
 80025e4:	2a20      	cmp	r2, #32
 80025e6:	d005      	beq.n	80025f4 <__aeabi_dsub+0x6a0>
 80025e8:	2640      	movs	r6, #64	; 0x40
 80025ea:	4664      	mov	r4, ip
 80025ec:	1ab2      	subs	r2, r6, r2
 80025ee:	4094      	lsls	r4, r2
 80025f0:	4323      	orrs	r3, r4
 80025f2:	469a      	mov	sl, r3
 80025f4:	4654      	mov	r4, sl
 80025f6:	1e63      	subs	r3, r4, #1
 80025f8:	419c      	sbcs	r4, r3
 80025fa:	4643      	mov	r3, r8
 80025fc:	431c      	orrs	r4, r3
 80025fe:	e5db      	b.n	80021b8 <__aeabi_dsub+0x264>
 8002600:	0002      	movs	r2, r0
 8002602:	2400      	movs	r4, #0
 8002604:	2300      	movs	r3, #0
 8002606:	e548      	b.n	800209a <__aeabi_dsub+0x146>
 8002608:	19dc      	adds	r4, r3, r7
 800260a:	42bc      	cmp	r4, r7
 800260c:	41bf      	sbcs	r7, r7
 800260e:	4461      	add	r1, ip
 8002610:	4689      	mov	r9, r1
 8002612:	427f      	negs	r7, r7
 8002614:	44b9      	add	r9, r7
 8002616:	e738      	b.n	800248a <__aeabi_dsub+0x536>
 8002618:	464b      	mov	r3, r9
 800261a:	4323      	orrs	r3, r4
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x6cc>
 800261e:	e69f      	b.n	8002360 <__aeabi_dsub+0x40c>
 8002620:	e606      	b.n	8002230 <__aeabi_dsub+0x2dc>
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	000007fe 	.word	0x000007fe
 8002628:	000007ff 	.word	0x000007ff
 800262c:	ff7fffff 	.word	0xff7fffff
 8002630:	08ff      	lsrs	r7, r7, #3
 8002632:	074b      	lsls	r3, r1, #29
 8002634:	433b      	orrs	r3, r7
 8002636:	08cc      	lsrs	r4, r1, #3
 8002638:	e616      	b.n	8002268 <__aeabi_dsub+0x314>
 800263a:	4662      	mov	r2, ip
 800263c:	08db      	lsrs	r3, r3, #3
 800263e:	0752      	lsls	r2, r2, #29
 8002640:	4313      	orrs	r3, r2
 8002642:	4662      	mov	r2, ip
 8002644:	08d4      	lsrs	r4, r2, #3
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0312      	lsls	r2, r2, #12
 800264a:	4214      	tst	r4, r2
 800264c:	d007      	beq.n	800265e <__aeabi_dsub+0x70a>
 800264e:	08c8      	lsrs	r0, r1, #3
 8002650:	4210      	tst	r0, r2
 8002652:	d104      	bne.n	800265e <__aeabi_dsub+0x70a>
 8002654:	465d      	mov	r5, fp
 8002656:	0004      	movs	r4, r0
 8002658:	08fb      	lsrs	r3, r7, #3
 800265a:	0749      	lsls	r1, r1, #29
 800265c:	430b      	orrs	r3, r1
 800265e:	0f5a      	lsrs	r2, r3, #29
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	0752      	lsls	r2, r2, #29
 8002664:	08db      	lsrs	r3, r3, #3
 8002666:	4313      	orrs	r3, r2
 8002668:	e5fe      	b.n	8002268 <__aeabi_dsub+0x314>
 800266a:	2300      	movs	r3, #0
 800266c:	4a01      	ldr	r2, [pc, #4]	; (8002674 <__aeabi_dsub+0x720>)
 800266e:	001c      	movs	r4, r3
 8002670:	e513      	b.n	800209a <__aeabi_dsub+0x146>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	000007ff 	.word	0x000007ff

08002678 <__aeabi_dcmpun>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	0005      	movs	r5, r0
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <__aeabi_dcmpun+0x38>)
 800267e:	031c      	lsls	r4, r3, #12
 8002680:	0016      	movs	r6, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	030a      	lsls	r2, r1, #12
 8002686:	0049      	lsls	r1, r1, #1
 8002688:	0b12      	lsrs	r2, r2, #12
 800268a:	0d49      	lsrs	r1, r1, #21
 800268c:	0b24      	lsrs	r4, r4, #12
 800268e:	0d5b      	lsrs	r3, r3, #21
 8002690:	4281      	cmp	r1, r0
 8002692:	d008      	beq.n	80026a6 <__aeabi_dcmpun+0x2e>
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <__aeabi_dcmpun+0x38>)
 8002696:	2000      	movs	r0, #0
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <__aeabi_dcmpun+0x2c>
 800269c:	0020      	movs	r0, r4
 800269e:	4330      	orrs	r0, r6
 80026a0:	1e43      	subs	r3, r0, #1
 80026a2:	4198      	sbcs	r0, r3
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	2001      	movs	r0, #1
 80026a8:	432a      	orrs	r2, r5
 80026aa:	d1fb      	bne.n	80026a4 <__aeabi_dcmpun+0x2c>
 80026ac:	e7f2      	b.n	8002694 <__aeabi_dcmpun+0x1c>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	000007ff 	.word	0x000007ff

080026b4 <__aeabi_d2iz>:
 80026b4:	000a      	movs	r2, r1
 80026b6:	b530      	push	{r4, r5, lr}
 80026b8:	4c13      	ldr	r4, [pc, #76]	; (8002708 <__aeabi_d2iz+0x54>)
 80026ba:	0053      	lsls	r3, r2, #1
 80026bc:	0309      	lsls	r1, r1, #12
 80026be:	0005      	movs	r5, r0
 80026c0:	0b09      	lsrs	r1, r1, #12
 80026c2:	2000      	movs	r0, #0
 80026c4:	0d5b      	lsrs	r3, r3, #21
 80026c6:	0fd2      	lsrs	r2, r2, #31
 80026c8:	42a3      	cmp	r3, r4
 80026ca:	dd04      	ble.n	80026d6 <__aeabi_d2iz+0x22>
 80026cc:	480f      	ldr	r0, [pc, #60]	; (800270c <__aeabi_d2iz+0x58>)
 80026ce:	4283      	cmp	r3, r0
 80026d0:	dd02      	ble.n	80026d8 <__aeabi_d2iz+0x24>
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <__aeabi_d2iz+0x5c>)
 80026d4:	18d0      	adds	r0, r2, r3
 80026d6:	bd30      	pop	{r4, r5, pc}
 80026d8:	2080      	movs	r0, #128	; 0x80
 80026da:	0340      	lsls	r0, r0, #13
 80026dc:	4301      	orrs	r1, r0
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <__aeabi_d2iz+0x60>)
 80026e0:	1ac0      	subs	r0, r0, r3
 80026e2:	281f      	cmp	r0, #31
 80026e4:	dd08      	ble.n	80026f8 <__aeabi_d2iz+0x44>
 80026e6:	480c      	ldr	r0, [pc, #48]	; (8002718 <__aeabi_d2iz+0x64>)
 80026e8:	1ac3      	subs	r3, r0, r3
 80026ea:	40d9      	lsrs	r1, r3
 80026ec:	000b      	movs	r3, r1
 80026ee:	4258      	negs	r0, r3
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d1f0      	bne.n	80026d6 <__aeabi_d2iz+0x22>
 80026f4:	0018      	movs	r0, r3
 80026f6:	e7ee      	b.n	80026d6 <__aeabi_d2iz+0x22>
 80026f8:	4c08      	ldr	r4, [pc, #32]	; (800271c <__aeabi_d2iz+0x68>)
 80026fa:	40c5      	lsrs	r5, r0
 80026fc:	46a4      	mov	ip, r4
 80026fe:	4463      	add	r3, ip
 8002700:	4099      	lsls	r1, r3
 8002702:	000b      	movs	r3, r1
 8002704:	432b      	orrs	r3, r5
 8002706:	e7f2      	b.n	80026ee <__aeabi_d2iz+0x3a>
 8002708:	000003fe 	.word	0x000003fe
 800270c:	0000041d 	.word	0x0000041d
 8002710:	7fffffff 	.word	0x7fffffff
 8002714:	00000433 	.word	0x00000433
 8002718:	00000413 	.word	0x00000413
 800271c:	fffffbed 	.word	0xfffffbed

08002720 <__aeabi_i2d>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2800      	cmp	r0, #0
 8002724:	d016      	beq.n	8002754 <__aeabi_i2d+0x34>
 8002726:	17c3      	asrs	r3, r0, #31
 8002728:	18c5      	adds	r5, r0, r3
 800272a:	405d      	eors	r5, r3
 800272c:	0fc4      	lsrs	r4, r0, #31
 800272e:	0028      	movs	r0, r5
 8002730:	f000 f91c 	bl	800296c <__clzsi2>
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <__aeabi_i2d+0x5c>)
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	280a      	cmp	r0, #10
 800273a:	dc16      	bgt.n	800276a <__aeabi_i2d+0x4a>
 800273c:	0003      	movs	r3, r0
 800273e:	002e      	movs	r6, r5
 8002740:	3315      	adds	r3, #21
 8002742:	409e      	lsls	r6, r3
 8002744:	230b      	movs	r3, #11
 8002746:	1a18      	subs	r0, r3, r0
 8002748:	40c5      	lsrs	r5, r0
 800274a:	0552      	lsls	r2, r2, #21
 800274c:	032d      	lsls	r5, r5, #12
 800274e:	0b2d      	lsrs	r5, r5, #12
 8002750:	0d53      	lsrs	r3, r2, #21
 8002752:	e003      	b.n	800275c <__aeabi_i2d+0x3c>
 8002754:	2400      	movs	r4, #0
 8002756:	2300      	movs	r3, #0
 8002758:	2500      	movs	r5, #0
 800275a:	2600      	movs	r6, #0
 800275c:	051b      	lsls	r3, r3, #20
 800275e:	432b      	orrs	r3, r5
 8002760:	07e4      	lsls	r4, r4, #31
 8002762:	4323      	orrs	r3, r4
 8002764:	0030      	movs	r0, r6
 8002766:	0019      	movs	r1, r3
 8002768:	bd70      	pop	{r4, r5, r6, pc}
 800276a:	380b      	subs	r0, #11
 800276c:	4085      	lsls	r5, r0
 800276e:	0552      	lsls	r2, r2, #21
 8002770:	032d      	lsls	r5, r5, #12
 8002772:	2600      	movs	r6, #0
 8002774:	0b2d      	lsrs	r5, r5, #12
 8002776:	0d53      	lsrs	r3, r2, #21
 8002778:	e7f0      	b.n	800275c <__aeabi_i2d+0x3c>
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	0000041e 	.word	0x0000041e

08002780 <__aeabi_ui2d>:
 8002780:	b510      	push	{r4, lr}
 8002782:	1e04      	subs	r4, r0, #0
 8002784:	d010      	beq.n	80027a8 <__aeabi_ui2d+0x28>
 8002786:	f000 f8f1 	bl	800296c <__clzsi2>
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <__aeabi_ui2d+0x48>)
 800278c:	1a1b      	subs	r3, r3, r0
 800278e:	280a      	cmp	r0, #10
 8002790:	dc11      	bgt.n	80027b6 <__aeabi_ui2d+0x36>
 8002792:	220b      	movs	r2, #11
 8002794:	0021      	movs	r1, r4
 8002796:	1a12      	subs	r2, r2, r0
 8002798:	40d1      	lsrs	r1, r2
 800279a:	3015      	adds	r0, #21
 800279c:	030a      	lsls	r2, r1, #12
 800279e:	055b      	lsls	r3, r3, #21
 80027a0:	4084      	lsls	r4, r0
 80027a2:	0b12      	lsrs	r2, r2, #12
 80027a4:	0d5b      	lsrs	r3, r3, #21
 80027a6:	e001      	b.n	80027ac <__aeabi_ui2d+0x2c>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2200      	movs	r2, #0
 80027ac:	051b      	lsls	r3, r3, #20
 80027ae:	4313      	orrs	r3, r2
 80027b0:	0020      	movs	r0, r4
 80027b2:	0019      	movs	r1, r3
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	0022      	movs	r2, r4
 80027b8:	380b      	subs	r0, #11
 80027ba:	4082      	lsls	r2, r0
 80027bc:	055b      	lsls	r3, r3, #21
 80027be:	0312      	lsls	r2, r2, #12
 80027c0:	2400      	movs	r4, #0
 80027c2:	0b12      	lsrs	r2, r2, #12
 80027c4:	0d5b      	lsrs	r3, r3, #21
 80027c6:	e7f1      	b.n	80027ac <__aeabi_ui2d+0x2c>
 80027c8:	0000041e 	.word	0x0000041e

080027cc <__aeabi_f2d>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	0043      	lsls	r3, r0, #1
 80027d0:	0246      	lsls	r6, r0, #9
 80027d2:	0fc4      	lsrs	r4, r0, #31
 80027d4:	20fe      	movs	r0, #254	; 0xfe
 80027d6:	0e1b      	lsrs	r3, r3, #24
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	0a75      	lsrs	r5, r6, #9
 80027dc:	4208      	tst	r0, r1
 80027de:	d00c      	beq.n	80027fa <__aeabi_f2d+0x2e>
 80027e0:	22e0      	movs	r2, #224	; 0xe0
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4694      	mov	ip, r2
 80027e6:	076d      	lsls	r5, r5, #29
 80027e8:	0b36      	lsrs	r6, r6, #12
 80027ea:	4463      	add	r3, ip
 80027ec:	051b      	lsls	r3, r3, #20
 80027ee:	4333      	orrs	r3, r6
 80027f0:	07e4      	lsls	r4, r4, #31
 80027f2:	4323      	orrs	r3, r4
 80027f4:	0028      	movs	r0, r5
 80027f6:	0019      	movs	r1, r3
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d114      	bne.n	8002828 <__aeabi_f2d+0x5c>
 80027fe:	2d00      	cmp	r5, #0
 8002800:	d01b      	beq.n	800283a <__aeabi_f2d+0x6e>
 8002802:	0028      	movs	r0, r5
 8002804:	f000 f8b2 	bl	800296c <__clzsi2>
 8002808:	280a      	cmp	r0, #10
 800280a:	dc1c      	bgt.n	8002846 <__aeabi_f2d+0x7a>
 800280c:	230b      	movs	r3, #11
 800280e:	002e      	movs	r6, r5
 8002810:	1a1b      	subs	r3, r3, r0
 8002812:	40de      	lsrs	r6, r3
 8002814:	0003      	movs	r3, r0
 8002816:	3315      	adds	r3, #21
 8002818:	409d      	lsls	r5, r3
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <__aeabi_f2d+0x88>)
 800281c:	0336      	lsls	r6, r6, #12
 800281e:	1a12      	subs	r2, r2, r0
 8002820:	0552      	lsls	r2, r2, #21
 8002822:	0b36      	lsrs	r6, r6, #12
 8002824:	0d53      	lsrs	r3, r2, #21
 8002826:	e7e1      	b.n	80027ec <__aeabi_f2d+0x20>
 8002828:	2d00      	cmp	r5, #0
 800282a:	d009      	beq.n	8002840 <__aeabi_f2d+0x74>
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	0b36      	lsrs	r6, r6, #12
 8002830:	0312      	lsls	r2, r2, #12
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <__aeabi_f2d+0x8c>)
 8002834:	076d      	lsls	r5, r5, #29
 8002836:	4316      	orrs	r6, r2
 8002838:	e7d8      	b.n	80027ec <__aeabi_f2d+0x20>
 800283a:	2300      	movs	r3, #0
 800283c:	2600      	movs	r6, #0
 800283e:	e7d5      	b.n	80027ec <__aeabi_f2d+0x20>
 8002840:	2600      	movs	r6, #0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <__aeabi_f2d+0x8c>)
 8002844:	e7d2      	b.n	80027ec <__aeabi_f2d+0x20>
 8002846:	0003      	movs	r3, r0
 8002848:	3b0b      	subs	r3, #11
 800284a:	409d      	lsls	r5, r3
 800284c:	002e      	movs	r6, r5
 800284e:	2500      	movs	r5, #0
 8002850:	e7e3      	b.n	800281a <__aeabi_f2d+0x4e>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	00000389 	.word	0x00000389
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_d2f>:
 800285c:	0002      	movs	r2, r0
 800285e:	004b      	lsls	r3, r1, #1
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	0d5b      	lsrs	r3, r3, #21
 8002864:	030c      	lsls	r4, r1, #12
 8002866:	4e3d      	ldr	r6, [pc, #244]	; (800295c <__aeabi_d2f+0x100>)
 8002868:	0a64      	lsrs	r4, r4, #9
 800286a:	0f40      	lsrs	r0, r0, #29
 800286c:	1c5f      	adds	r7, r3, #1
 800286e:	0fc9      	lsrs	r1, r1, #31
 8002870:	4304      	orrs	r4, r0
 8002872:	00d5      	lsls	r5, r2, #3
 8002874:	4237      	tst	r7, r6
 8002876:	d00a      	beq.n	800288e <__aeabi_d2f+0x32>
 8002878:	4839      	ldr	r0, [pc, #228]	; (8002960 <__aeabi_d2f+0x104>)
 800287a:	181e      	adds	r6, r3, r0
 800287c:	2efe      	cmp	r6, #254	; 0xfe
 800287e:	dd16      	ble.n	80028ae <__aeabi_d2f+0x52>
 8002880:	20ff      	movs	r0, #255	; 0xff
 8002882:	2400      	movs	r4, #0
 8002884:	05c0      	lsls	r0, r0, #23
 8002886:	4320      	orrs	r0, r4
 8002888:	07c9      	lsls	r1, r1, #31
 800288a:	4308      	orrs	r0, r1
 800288c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <__aeabi_d2f+0x44>
 8002892:	432c      	orrs	r4, r5
 8002894:	d026      	beq.n	80028e4 <__aeabi_d2f+0x88>
 8002896:	2205      	movs	r2, #5
 8002898:	0192      	lsls	r2, r2, #6
 800289a:	0a54      	lsrs	r4, r2, #9
 800289c:	b2d8      	uxtb	r0, r3
 800289e:	e7f1      	b.n	8002884 <__aeabi_d2f+0x28>
 80028a0:	4325      	orrs	r5, r4
 80028a2:	d0ed      	beq.n	8002880 <__aeabi_d2f+0x24>
 80028a4:	2080      	movs	r0, #128	; 0x80
 80028a6:	03c0      	lsls	r0, r0, #15
 80028a8:	4304      	orrs	r4, r0
 80028aa:	20ff      	movs	r0, #255	; 0xff
 80028ac:	e7ea      	b.n	8002884 <__aeabi_d2f+0x28>
 80028ae:	2e00      	cmp	r6, #0
 80028b0:	dd1b      	ble.n	80028ea <__aeabi_d2f+0x8e>
 80028b2:	0192      	lsls	r2, r2, #6
 80028b4:	1e53      	subs	r3, r2, #1
 80028b6:	419a      	sbcs	r2, r3
 80028b8:	00e4      	lsls	r4, r4, #3
 80028ba:	0f6d      	lsrs	r5, r5, #29
 80028bc:	4322      	orrs	r2, r4
 80028be:	432a      	orrs	r2, r5
 80028c0:	0753      	lsls	r3, r2, #29
 80028c2:	d048      	beq.n	8002956 <__aeabi_d2f+0xfa>
 80028c4:	230f      	movs	r3, #15
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d000      	beq.n	80028ce <__aeabi_d2f+0x72>
 80028cc:	3204      	adds	r2, #4
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	04db      	lsls	r3, r3, #19
 80028d2:	4013      	ands	r3, r2
 80028d4:	d03f      	beq.n	8002956 <__aeabi_d2f+0xfa>
 80028d6:	1c70      	adds	r0, r6, #1
 80028d8:	2efe      	cmp	r6, #254	; 0xfe
 80028da:	d0d1      	beq.n	8002880 <__aeabi_d2f+0x24>
 80028dc:	0192      	lsls	r2, r2, #6
 80028de:	0a54      	lsrs	r4, r2, #9
 80028e0:	b2c0      	uxtb	r0, r0
 80028e2:	e7cf      	b.n	8002884 <__aeabi_d2f+0x28>
 80028e4:	2000      	movs	r0, #0
 80028e6:	2400      	movs	r4, #0
 80028e8:	e7cc      	b.n	8002884 <__aeabi_d2f+0x28>
 80028ea:	0032      	movs	r2, r6
 80028ec:	3217      	adds	r2, #23
 80028ee:	db22      	blt.n	8002936 <__aeabi_d2f+0xda>
 80028f0:	2080      	movs	r0, #128	; 0x80
 80028f2:	0400      	lsls	r0, r0, #16
 80028f4:	4320      	orrs	r0, r4
 80028f6:	241e      	movs	r4, #30
 80028f8:	1ba4      	subs	r4, r4, r6
 80028fa:	2c1f      	cmp	r4, #31
 80028fc:	dd1d      	ble.n	800293a <__aeabi_d2f+0xde>
 80028fe:	2202      	movs	r2, #2
 8002900:	4252      	negs	r2, r2
 8002902:	1b96      	subs	r6, r2, r6
 8002904:	0002      	movs	r2, r0
 8002906:	40f2      	lsrs	r2, r6
 8002908:	0016      	movs	r6, r2
 800290a:	2c20      	cmp	r4, #32
 800290c:	d004      	beq.n	8002918 <__aeabi_d2f+0xbc>
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <__aeabi_d2f+0x108>)
 8002910:	4694      	mov	ip, r2
 8002912:	4463      	add	r3, ip
 8002914:	4098      	lsls	r0, r3
 8002916:	4305      	orrs	r5, r0
 8002918:	002a      	movs	r2, r5
 800291a:	1e53      	subs	r3, r2, #1
 800291c:	419a      	sbcs	r2, r3
 800291e:	4332      	orrs	r2, r6
 8002920:	2600      	movs	r6, #0
 8002922:	0753      	lsls	r3, r2, #29
 8002924:	d1ce      	bne.n	80028c4 <__aeabi_d2f+0x68>
 8002926:	2480      	movs	r4, #128	; 0x80
 8002928:	0013      	movs	r3, r2
 800292a:	04e4      	lsls	r4, r4, #19
 800292c:	2001      	movs	r0, #1
 800292e:	4023      	ands	r3, r4
 8002930:	4222      	tst	r2, r4
 8002932:	d1d3      	bne.n	80028dc <__aeabi_d2f+0x80>
 8002934:	e7b0      	b.n	8002898 <__aeabi_d2f+0x3c>
 8002936:	2300      	movs	r3, #0
 8002938:	e7ad      	b.n	8002896 <__aeabi_d2f+0x3a>
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <__aeabi_d2f+0x10c>)
 800293c:	4694      	mov	ip, r2
 800293e:	002a      	movs	r2, r5
 8002940:	40e2      	lsrs	r2, r4
 8002942:	0014      	movs	r4, r2
 8002944:	002a      	movs	r2, r5
 8002946:	4463      	add	r3, ip
 8002948:	409a      	lsls	r2, r3
 800294a:	4098      	lsls	r0, r3
 800294c:	1e55      	subs	r5, r2, #1
 800294e:	41aa      	sbcs	r2, r5
 8002950:	4302      	orrs	r2, r0
 8002952:	4322      	orrs	r2, r4
 8002954:	e7e4      	b.n	8002920 <__aeabi_d2f+0xc4>
 8002956:	0033      	movs	r3, r6
 8002958:	e79e      	b.n	8002898 <__aeabi_d2f+0x3c>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	000007fe 	.word	0x000007fe
 8002960:	fffffc80 	.word	0xfffffc80
 8002964:	fffffca2 	.word	0xfffffca2
 8002968:	fffffc82 	.word	0xfffffc82

0800296c <__clzsi2>:
 800296c:	211c      	movs	r1, #28
 800296e:	2301      	movs	r3, #1
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	4298      	cmp	r0, r3
 8002974:	d301      	bcc.n	800297a <__clzsi2+0xe>
 8002976:	0c00      	lsrs	r0, r0, #16
 8002978:	3910      	subs	r1, #16
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	4298      	cmp	r0, r3
 800297e:	d301      	bcc.n	8002984 <__clzsi2+0x18>
 8002980:	0a00      	lsrs	r0, r0, #8
 8002982:	3908      	subs	r1, #8
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	4298      	cmp	r0, r3
 8002988:	d301      	bcc.n	800298e <__clzsi2+0x22>
 800298a:	0900      	lsrs	r0, r0, #4
 800298c:	3904      	subs	r1, #4
 800298e:	a202      	add	r2, pc, #8	; (adr r2, 8002998 <__clzsi2+0x2c>)
 8002990:	5c10      	ldrb	r0, [r2, r0]
 8002992:	1840      	adds	r0, r0, r1
 8002994:	4770      	bx	lr
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	02020304 	.word	0x02020304
 800299c:	01010101 	.word	0x01010101
	...

080029a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80029ae:	f001 ff85 	bl	80048bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b2:	f000 f911 	bl	8002bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b6:	f000 fe1f 	bl	80035f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80029ba:	f000 fdff 	bl	80035bc <MX_DMA_Init>
  MX_ADC_Init();
 80029be:	f000 fc37 	bl	8003230 <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 80029c2:	f001 fe73 	bl	80046ac <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 80029c6:	496a      	ldr	r1, [pc, #424]	; (8002b70 <main+0x1c8>)
 80029c8:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <main+0x1cc>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	0018      	movs	r0, r3
 80029ce:	f005 fa47 	bl	8007e60 <HAL_UART_Receive_IT>

  MX_TIM1_Init();
 80029d2:	f001 fa9f 	bl	8003f14 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029d6:	f001 fba7 	bl	8004128 <MX_TIM3_Init>
  MX_TIM6_Init();
 80029da:	f001 fbfb 	bl	80041d4 <MX_TIM6_Init>
  MX_TIM14_Init();
 80029de:	f001 fc1b 	bl	8004218 <MX_TIM14_Init>
  MX_TIM15_Init();
 80029e2:	f001 fc65 	bl	80042b0 <MX_TIM15_Init>
  MX_TIM16_Init();
 80029e6:	f001 fcbb 	bl	8004360 <MX_TIM16_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <main+0x1d0>)
 80029ec:	0018      	movs	r0, r3
 80029ee:	f003 fe43 	bl	8006678 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80029f2:	4b62      	ldr	r3, [pc, #392]	; (8002b7c <main+0x1d4>)
 80029f4:	0018      	movs	r0, r3
 80029f6:	f003 fe3f 	bl	8006678 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80029fa:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <main+0x1d8>)
 80029fc:	0018      	movs	r0, r3
 80029fe:	f003 fe3b 	bl	8006678 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <main+0x1dc>)
 8002a04:	0018      	movs	r0, r3
 8002a06:	f003 fe37 	bl	8006678 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <main+0x1e0>)
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f003 fe33 	bl	8006678 <HAL_TIM_Base_Start_IT>

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 8002a12:	495e      	ldr	r1, [pc, #376]	; (8002b8c <main+0x1e4>)
 8002a14:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <main+0x1e8>)
 8002a16:	220a      	movs	r2, #10
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f002 f8f3 	bl	8004c04 <HAL_ADC_Start_DMA>
 8002a1e:	1e03      	subs	r3, r0, #0
 8002a20:	d001      	beq.n	8002a26 <main+0x7e>
	{
		Error_Handler(); //This function also enable the interruption
 8002a22:	f000 f94f 	bl	8002cc4 <Error_Handler>
	}

  /* USER CODE BEGIN 2 */
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
 8002a26:	4b5b      	ldr	r3, [pc, #364]	; (8002b94 <main+0x1ec>)
 8002a28:	210c      	movs	r1, #12
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f003 fef6 	bl	800681c <HAL_TIM_OC_Start>
	HX711_Calibration(&weight_par);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <main+0x1f0>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f001 f8b2 	bl	8003b9c <HX711_Calibration>
	printflag.PID_Set = FALSE;
 8002a38:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <main+0x1f4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	715a      	strb	r2, [r3, #5]
	while(printflag.PID_Set == FALSE)
 8002a3e:	e029      	b.n	8002a94 <main+0xec>
	{
		printf("0X31P%0.2f\n",PID_Parameters.Kp);
 8002a40:	4b57      	ldr	r3, [pc, #348]	; (8002ba0 <main+0x1f8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c18      	adds	r0, r3, #0
 8002a46:	f7ff fec1 	bl	80027cc <__aeabi_f2d>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	000b      	movs	r3, r1
 8002a4e:	4955      	ldr	r1, [pc, #340]	; (8002ba4 <main+0x1fc>)
 8002a50:	0008      	movs	r0, r1
 8002a52:	f007 fa13 	bl	8009e7c <iprintf>
		delay_ms(10);
 8002a56:	200a      	movs	r0, #10
 8002a58:	f001 fe10 	bl	800467c <delay_ms>
	//	while(printflag.PID_Set == FALSE);
		printf("0X31I%0.2f\n",PID_Parameters.Ki);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <main+0x1f8>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	1c18      	adds	r0, r3, #0
 8002a62:	f7ff feb3 	bl	80027cc <__aeabi_f2d>
 8002a66:	0002      	movs	r2, r0
 8002a68:	000b      	movs	r3, r1
 8002a6a:	494f      	ldr	r1, [pc, #316]	; (8002ba8 <main+0x200>)
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	f007 fa05 	bl	8009e7c <iprintf>
		delay_ms(10);
 8002a72:	200a      	movs	r0, #10
 8002a74:	f001 fe02 	bl	800467c <delay_ms>
	//	while(printflag.PID_Set == FALSE);
		printf("0X31D%0.2f\n",PID_Parameters.Kd);
 8002a78:	4b49      	ldr	r3, [pc, #292]	; (8002ba0 <main+0x1f8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	1c18      	adds	r0, r3, #0
 8002a7e:	f7ff fea5 	bl	80027cc <__aeabi_f2d>
 8002a82:	0002      	movs	r2, r0
 8002a84:	000b      	movs	r3, r1
 8002a86:	4949      	ldr	r1, [pc, #292]	; (8002bac <main+0x204>)
 8002a88:	0008      	movs	r0, r1
 8002a8a:	f007 f9f7 	bl	8009e7c <iprintf>
		delay_ms(10);
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f001 fdf4 	bl	800467c <delay_ms>
	while(printflag.PID_Set == FALSE)
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <main+0x1f4>)
 8002a96:	795b      	ldrb	r3, [r3, #5]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0d1      	beq.n	8002a40 <main+0x98>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(weight_par.calibration_flag)
 8002a9c:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <main+0x1f0>)
 8002a9e:	7b1b      	ldrb	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00f      	beq.n	8002ac4 <main+0x11c>
	  {
		  printf("0x31 0x14%d\n", weight_par.gramAvgval );
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <main+0x1f0>)
 8002aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa8:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <main+0x208>)
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f007 f9e5 	bl	8009e7c <iprintf>
//		  printf("0x31 0x14%d\n\r", weight_par.gram );
//	  printf("time laps: %d \r\n", adc_val.commutation_delay);
		  printf("PWM%d\n", (int)htim1.Instance->CCR1);
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <main+0x1ec>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	001a      	movs	r2, r3
 8002aba:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <main+0x20c>)
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f007 f9dc 	bl	8009e7c <iprintf>
	  }
//	  Print_Pooling(&printflag);
	  if(1000 <= printflag.TimeCNT)
 8002ac4:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <main+0x1f4>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	23fa      	movs	r3, #250	; 0xfa
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d34b      	bcc.n	8002b68 <main+0x1c0>
	  {
		  printf("VBat%0.2fV\n",	adc_val.vbat*(Vrefint*4095/adc_val.vref_data)/4095/VBAT_FACTOR);
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <main+0x210>)
 8002ad2:	8a1b      	ldrh	r3, [r3, #16]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff fe23 	bl	8002720 <__aeabi_i2d>
 8002ada:	0004      	movs	r4, r0
 8002adc:	000d      	movs	r5, r1
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <main+0x214>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff fe1b 	bl	8002720 <__aeabi_i2d>
 8002aea:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <main+0x218>)
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <main+0x21c>)
 8002aee:	f7fe ffc5 	bl	8001a7c <__aeabi_dmul>
 8002af2:	0002      	movs	r2, r0
 8002af4:	000b      	movs	r3, r1
 8002af6:	0010      	movs	r0, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <main+0x220>)
 8002afe:	f7fe fbbb 	bl	8001278 <__aeabi_ddiv>
 8002b02:	0002      	movs	r2, r0
 8002b04:	000b      	movs	r3, r1
 8002b06:	0010      	movs	r0, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <main+0x220>)
 8002b0e:	f7fe ffb5 	bl	8001a7c <__aeabi_dmul>
 8002b12:	0002      	movs	r2, r0
 8002b14:	000b      	movs	r3, r1
 8002b16:	603a      	str	r2, [r7, #0]
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <main+0x210>)
 8002b1c:	8a5b      	ldrh	r3, [r3, #18]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff fdfe 	bl	8002720 <__aeabi_i2d>
 8002b24:	0002      	movs	r2, r0
 8002b26:	000b      	movs	r3, r1
 8002b28:	6838      	ldr	r0, [r7, #0]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f7fe fba4 	bl	8001278 <__aeabi_ddiv>
 8002b30:	0002      	movs	r2, r0
 8002b32:	000b      	movs	r3, r1
 8002b34:	0020      	movs	r0, r4
 8002b36:	0029      	movs	r1, r5
 8002b38:	f7fe ffa0 	bl	8001a7c <__aeabi_dmul>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	000b      	movs	r3, r1
 8002b40:	0010      	movs	r0, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <main+0x220>)
 8002b48:	f7fe fb96 	bl	8001278 <__aeabi_ddiv>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	000b      	movs	r3, r1
 8002b50:	0010      	movs	r0, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <main+0x224>)
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <main+0x228>)
 8002b58:	f7fe fb8e 	bl	8001278 <__aeabi_ddiv>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	000b      	movs	r3, r1
 8002b60:	491c      	ldr	r1, [pc, #112]	; (8002bd4 <main+0x22c>)
 8002b62:	0008      	movs	r0, r1
 8002b64:	f007 f98a 	bl	8009e7c <iprintf>
	  }
	  delay_ms(50);
 8002b68:	2032      	movs	r0, #50	; 0x32
 8002b6a:	f001 fd87 	bl	800467c <delay_ms>
	  if(weight_par.calibration_flag)
 8002b6e:	e795      	b.n	8002a9c <main+0xf4>
 8002b70:	200005b7 	.word	0x200005b7
 8002b74:	200005bc 	.word	0x200005bc
 8002b78:	20000350 	.word	0x20000350
 8002b7c:	20000398 	.word	0x20000398
 8002b80:	200003e0 	.word	0x200003e0
 8002b84:	20000428 	.word	0x20000428
 8002b88:	20000470 	.word	0x20000470
 8002b8c:	20000228 	.word	0x20000228
 8002b90:	20000274 	.word	0x20000274
 8002b94:	20000308 	.word	0x20000308
 8002b98:	2000023c 	.word	0x2000023c
 8002b9c:	20000268 	.word	0x20000268
 8002ba0:	20000020 	.word	0x20000020
 8002ba4:	0800e608 	.word	0x0800e608
 8002ba8:	0800e614 	.word	0x0800e614
 8002bac:	0800e620 	.word	0x0800e620
 8002bb0:	0800e62c 	.word	0x0800e62c
 8002bb4:	0800e63c 	.word	0x0800e63c
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	1ffff7ba 	.word	0x1ffff7ba
 8002bc0:	66666666 	.word	0x66666666
 8002bc4:	400a6666 	.word	0x400a6666
 8002bc8:	40affe00 	.word	0x40affe00
 8002bcc:	9ba5e354 	.word	0x9ba5e354
 8002bd0:	3fc020c4 	.word	0x3fc020c4
 8002bd4:	0800e644 	.word	0x0800e644

08002bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b095      	sub	sp, #84	; 0x54
 8002bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bde:	2420      	movs	r4, #32
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	0018      	movs	r0, r3
 8002be4:	2330      	movs	r3, #48	; 0x30
 8002be6:	001a      	movs	r2, r3
 8002be8:	2100      	movs	r1, #0
 8002bea:	f006 fac8 	bl	800917e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bee:	2310      	movs	r3, #16
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f006 fac0 	bl	800917e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bfe:	003b      	movs	r3, r7
 8002c00:	0018      	movs	r0, r3
 8002c02:	2310      	movs	r3, #16
 8002c04:	001a      	movs	r2, r3
 8002c06:	2100      	movs	r1, #0
 8002c08:	f006 fab9 	bl	800917e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c0c:	0021      	movs	r1, r4
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2201      	movs	r2, #1
 8002c18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2202      	movs	r2, #2
 8002c24:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	2200      	movs	r2, #0
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	22a0      	movs	r2, #160	; 0xa0
 8002c30:	0392      	lsls	r2, r2, #14
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2200      	movs	r2, #0
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f002 ff35 	bl	8005aac <HAL_RCC_OscConfig>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c46:	f000 f83d 	bl	8002cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2207      	movs	r2, #7
 8002c50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2202      	movs	r2, #2
 8002c56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2200      	movs	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2101      	movs	r1, #1
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f003 fa39 	bl	80060e0 <HAL_RCC_ClockConfig>
 8002c6e:	1e03      	subs	r3, r0, #0
 8002c70:	d001      	beq.n	8002c76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c72:	f000 f827 	bl	8002cc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c76:	003b      	movs	r3, r7
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c7c:	003b      	movs	r3, r7
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c82:	003b      	movs	r3, r7
 8002c84:	0018      	movs	r0, r3
 8002c86:	f003 fb6f 	bl	8006368 <HAL_RCCEx_PeriphCLKConfig>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d001      	beq.n	8002c92 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002c8e:	f000 f819 	bl	8002cc4 <Error_Handler>
  }
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b015      	add	sp, #84	; 0x54
 8002c98:	bd90      	pop	{r4, r7, pc}
	...

08002c9c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <__io_putchar+0x20>)
 8002ca6:	1d39      	adds	r1, r7, #4
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <__io_putchar+0x24>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	f005 f838 	bl	8007d20 <HAL_UART_Transmit>
    return ch;
 8002cb0:	687b      	ldr	r3, [r7, #4]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b002      	add	sp, #8
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	0000ffff 	.word	0x0000ffff
 8002cc0:	200005bc 	.word	0x200005bc

08002cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <Error_Handler+0x8>
	...

08002cd0 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d13f      	bne.n	8002d60 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		if(weight_par.calibration_flag)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002ce2:	7b1b      	ldrb	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d100      	bne.n	8002cea <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002ce8:	e0e8      	b.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
		{
			weight_par.cnt= weight_par.cnt == 5? 0:weight_par.cnt++;
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002cec:	2224      	movs	r2, #36	; 0x24
 8002cee:	5c9b      	ldrb	r3, [r3, r2]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d008      	beq.n	8002d06 <HAL_TIM_PeriodElapsedCallback+0x36>
 8002cf4:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	b2d0      	uxtb	r0, r2
 8002cfe:	4a72      	ldr	r2, [pc, #456]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d00:	2124      	movs	r1, #36	; 0x24
 8002d02:	5450      	strb	r0, [r2, r1]
 8002d04:	e000      	b.n	8002d08 <HAL_TIM_PeriodElapsedCallback+0x38>
 8002d06:	2300      	movs	r3, #0
 8002d08:	4a6f      	ldr	r2, [pc, #444]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d0a:	2124      	movs	r1, #36	; 0x24
 8002d0c:	5453      	strb	r3, [r2, r1]
			Get_weight(&weight_par);
 8002d0e:	4b6e      	ldr	r3, [pc, #440]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 fef5 	bl	8003b00 <Get_weight>
			weight_par.gramAvg[weight_par.cnt] = weight_par.gram;
 8002d16:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d18:	2224      	movs	r2, #36	; 0x24
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d24:	3204      	adds	r2, #4
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	50d1      	str	r1, [r2, r3]
			weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	18d2      	adds	r2, r2, r3
 8002d34:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	18d2      	adds	r2, r2, r3
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	18d2      	adds	r2, r2, r3
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	18d3      	adds	r3, r2, r3
 8002d46:	2105      	movs	r1, #5
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fd fa8d 	bl	8000268 <__divsi3>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	001a      	movs	r2, r3
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
			weight_par.gram = weight_par.gramAvgval;
 8002d56:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d5c:	601a      	str	r2, [r3, #0]
	}
	else if(htim == &htim16)//1us interval for time counting
	{

	}
}
 8002d5e:	e0ad      	b.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
	else if(htim == &htim6)//20ms enter
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d000      	beq.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8002d68:	e08c      	b.n	8002e84 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		if(weight_par.calibration_flag == 1)
 8002d6a:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d6c:	7b1b      	ldrb	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d000      	beq.n	8002d74 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002d72:	e0a3      	b.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
			pid_pwm += Incremental_PID(&weight_par, PULL_FORCE_THR, &PID_Parameters);
 8002d74:	4a56      	ldr	r2, [pc, #344]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d76:	23fa      	movs	r3, #250	; 0xfa
 8002d78:	0099      	lsls	r1, r3, #2
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 ff8f 	bl	8003ca0 <Incremental_PID>
 8002d82:	0003      	movs	r3, r0
 8002d84:	001a      	movs	r2, r3
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	18d3      	adds	r3, r2, r3
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002d90:	701a      	strb	r2, [r3, #0]
			if(0<(pid_pwm-dc_pwm))
 8002d92:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	001a      	movs	r2, r3
 8002d98:	4b4f      	ldr	r3, [pc, #316]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dd38      	ble.n	8002e14 <HAL_TIM_PeriodElapsedCallback+0x144>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002da2:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	2101      	movs	r1, #1
 8002da8:	0018      	movs	r0, r3
 8002daa:	f002 fe3c 	bl	8005a26 <HAL_GPIO_WritePin>
				AHBL_ON;
 8002dae:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002db0:	2100      	movs	r1, #0
 8002db2:	0018      	movs	r0, r3
 8002db4:	f003 feee 	bl	8006b94 <HAL_TIM_PWM_Stop>
 8002db8:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002dba:	2104      	movs	r1, #4
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f003 fee9 	bl	8006b94 <HAL_TIM_PWM_Stop>
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002dc4:	2108      	movs	r1, #8
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f003 fee4 	bl	8006b94 <HAL_TIM_PWM_Stop>
 8002dcc:	23e0      	movs	r3, #224	; 0xe0
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	4844      	ldr	r0, [pc, #272]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	f002 fe26 	bl	8005a26 <HAL_GPIO_WritePin>
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	0018      	movs	r0, r3
 8002de0:	f003 fe26 	bl	8006a30 <HAL_TIM_PWM_Start>
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	01db      	lsls	r3, r3, #7
 8002de8:	483e      	ldr	r0, [pc, #248]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	0019      	movs	r1, r3
 8002dee:	f002 fe1a 	bl	8005a26 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 1;
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	735a      	strb	r2, [r3, #13]
				dc_pwm = dc_pwm + PWM_STEP>100? 100:dc_pwm+PWM_STEP;
 8002df8:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	1c1a      	adds	r2, r3, #0
 8002dfe:	b2d3      	uxtb	r3, r2
 8002e00:	2b63      	cmp	r3, #99	; 0x63
 8002e02:	d901      	bls.n	8002e08 <HAL_TIM_PeriodElapsedCallback+0x138>
 8002e04:	2363      	movs	r3, #99	; 0x63
 8002e06:	1c1a      	adds	r2, r3, #0
 8002e08:	b2d3      	uxtb	r3, r2
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e00f      	b.n	8002e34 <HAL_TIM_PeriodElapsedCallback+0x164>
			else if(0>(pid_pwm-dc_pwm))
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	001a      	movs	r2, r3
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	d508      	bpl.n	8002e34 <HAL_TIM_PeriodElapsedCallback+0x164>
				dc_pwm = pid_pwm;
 8002e22:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e28:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
			if(dc_pwm>10)
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b0a      	cmp	r3, #10
 8002e3a:	d904      	bls.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x176>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002e3c:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
			if(weight_par.gram<LOWER_LIMMIT)
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	23fa      	movs	r3, #250	; 0xfa
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	da34      	bge.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	2101      	movs	r1, #1
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f002 fde4 	bl	8005a26 <HAL_GPIO_WritePin>
				CLOSE_PWM;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e60:	2100      	movs	r1, #0
 8002e62:	0018      	movs	r0, r3
 8002e64:	f003 fe96 	bl	8006b94 <HAL_TIM_PWM_Stop>
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	01db      	lsls	r3, r3, #7
 8002e6c:	481d      	ldr	r0, [pc, #116]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	0019      	movs	r1, r3
 8002e72:	f002 fdd8 	bl	8005a26 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 0;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	735a      	strb	r2, [r3, #13]
				pid_pwm = 0;//if not, the PID_PWM will always be the same value and dc_pwm never be 0
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
}
 8002e82:	e01b      	b.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
	else if(htim == &htim14)//10ms enter for E-wagon protection counting
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d117      	bne.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
		printflag.TimeCNT = printflag.TimeCNT>1100? 0:printflag.TimeCNT+1;
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d803      	bhi.n	8002e9e <HAL_TIM_PeriodElapsedCallback+0x1ce>
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002ea2:	601a      	str	r2, [r3, #0]
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002ea6:	8b5a      	ldrh	r2, [r3, #26]
 8002ea8:	23fa      	movs	r3, #250	; 0xfa
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d905      	bls.n	8002ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>
			adc_val.commutation_timeout = 0;
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	831a      	strh	r2, [r3, #24]
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000350 	.word	0x20000350
 8002ec8:	2000023c 	.word	0x2000023c
 8002ecc:	20000398 	.word	0x20000398
 8002ed0:	20000020 	.word	0x20000020
 8002ed4:	20000270 	.word	0x20000270
 8002ed8:	20000271 	.word	0x20000271
 8002edc:	48000800 	.word	0x48000800
 8002ee0:	20000308 	.word	0x20000308
 8002ee4:	48000400 	.word	0x48000400
 8002ee8:	200003e0 	.word	0x200003e0
 8002eec:	20000268 	.word	0x20000268
 8002ef0:	0000044c 	.word	0x0000044c
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b08d      	sub	sp, #52	; 0x34
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4baa      	ldr	r3, [pc, #680]	; (80031ac <HAL_UART_RxCpltCallback+0x2b4>)
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d000      	beq.n	8002f0a <HAL_UART_RxCpltCallback+0x12>
 8002f08:	e14c      	b.n	80031a4 <HAL_UART_RxCpltCallback+0x2ac>
	{
		extern uint8_t cnt;
		rxbuf[cnt] = rxdata;
 8002f0a:	4ba9      	ldr	r3, [pc, #676]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	4ba8      	ldr	r3, [pc, #672]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 8002f12:	7819      	ldrb	r1, [r3, #0]
 8002f14:	4ba8      	ldr	r3, [pc, #672]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8002f16:	5499      	strb	r1, [r3, r2]
		const char cat[] = "0X13\r\n"; //APP(A:1) to Controller(C:3)
 8002f18:	2314      	movs	r3, #20
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	4aa7      	ldr	r2, [pc, #668]	; (80031bc <HAL_UART_RxCpltCallback+0x2c4>)
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	6019      	str	r1, [r3, #0]
 8002f22:	8891      	ldrh	r1, [r2, #4]
 8002f24:	8099      	strh	r1, [r3, #4]
 8002f26:	7992      	ldrb	r2, [r2, #6]
 8002f28:	719a      	strb	r2, [r3, #6]
		cnt=cnt==RX_BUF_NUM?1:cnt+1;
 8002f2a:	4ba1      	ldr	r3, [pc, #644]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2bff      	cmp	r3, #255	; 0xff
 8002f30:	d004      	beq.n	8002f3c <HAL_UART_RxCpltCallback+0x44>
 8002f32:	4b9f      	ldr	r3, [pc, #636]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_RxCpltCallback+0x46>
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4b9c      	ldr	r3, [pc, #624]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f40:	701a      	strb	r2, [r3, #0]
		float PIDV;

		char a[6];

		if(rxdata == 'e')//'\n')
 8002f42:	4b9c      	ldr	r3, [pc, #624]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b65      	cmp	r3, #101	; 0x65
 8002f48:	d000      	beq.n	8002f4c <HAL_UART_RxCpltCallback+0x54>
 8002f4a:	e08b      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
		{
//			printf("sting:%s\r\n", rxbuf);

			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002f4c:	4b98      	ldr	r3, [pc, #608]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f52:	e007      	b.n	8002f64 <HAL_UART_RxCpltCallback+0x6c>
				rxbuf[t]=0;
 8002f54:	4a98      	ldr	r2, [pc, #608]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	3301      	adds	r3, #1
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	2bfe      	cmp	r3, #254	; 0xfe
 8002f68:	ddf4      	ble.n	8002f54 <HAL_UART_RxCpltCallback+0x5c>
			cnt = 0;
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]

			if(0 == strcmp((char*) rxbuf,"0x00"))
 8002f70:	4a93      	ldr	r2, [pc, #588]	; (80031c0 <HAL_UART_RxCpltCallback+0x2c8>)
 8002f72:	4b91      	ldr	r3, [pc, #580]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7fd f8c6 	bl	8000108 <strcmp>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d104      	bne.n	8002f8a <HAL_UART_RxCpltCallback+0x92>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 8002f80:	4b90      	ldr	r3, [pc, #576]	; (80031c4 <HAL_UART_RxCpltCallback+0x2cc>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f003 fbc4 	bl	8006710 <HAL_TIM_Base_Stop_IT>
 8002f88:	e06c      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}

			else if(0 == strcmp((char*) rxbuf, "0x01"))
 8002f8a:	4a8f      	ldr	r2, [pc, #572]	; (80031c8 <HAL_UART_RxCpltCallback+0x2d0>)
 8002f8c:	4b8a      	ldr	r3, [pc, #552]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8002f8e:	0011      	movs	r1, r2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd f8b9 	bl	8000108 <strcmp>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d104      	bne.n	8002fa4 <HAL_UART_RxCpltCallback+0xac>
			{
				HAL_TIM_Base_Start_IT(&htim6);
 8002f9a:	4b8a      	ldr	r3, [pc, #552]	; (80031c4 <HAL_UART_RxCpltCallback+0x2cc>)
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f003 fb6b 	bl	8006678 <HAL_TIM_Base_Start_IT>
 8002fa2:	e05f      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}
			else if(0 == strcmp((char*)rxbuf, "0x02"))
 8002fa4:	4a89      	ldr	r2, [pc, #548]	; (80031cc <HAL_UART_RxCpltCallback+0x2d4>)
 8002fa6:	4b84      	ldr	r3, [pc, #528]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7fd f8ac 	bl	8000108 <strcmp>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d103      	bne.n	8002fbc <HAL_UART_RxCpltCallback+0xc4>
			{
				BT_PWM_handle(TURE);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f001 fc0b 	bl	80047d0 <BT_PWM_handle>
 8002fba:	e053      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}
			else if(0 == strcmp(cat, "0x03"))
 8002fbc:	4a84      	ldr	r2, [pc, #528]	; (80031d0 <HAL_UART_RxCpltCallback+0x2d8>)
 8002fbe:	2314      	movs	r3, #20
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7fd f89f 	bl	8000108 <strcmp>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_UART_RxCpltCallback+0xde>
			{
				BT_PWM_handle(FALSE);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f001 fbfe 	bl	80047d0 <BT_PWM_handle>
 8002fd4:	e046      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}
			else if(0 == strcmp(cat, "0x04"))
 8002fd6:	4a7f      	ldr	r2, [pc, #508]	; (80031d4 <HAL_UART_RxCpltCallback+0x2dc>)
 8002fd8:	2314      	movs	r3, #20
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd f892 	bl	8000108 <strcmp>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d10f      	bne.n	8003008 <HAL_UART_RxCpltCallback+0x110>
			{
				htim1.Instance->CCR1++;
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_UART_RxCpltCallback+0x2e0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fee:	3201      	adds	r2, #1
 8002ff0:	635a      	str	r2, [r3, #52]	; 0x34
				htim1.Instance->CCR2++;
 8002ff2:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <HAL_UART_RxCpltCallback+0x2e0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff8:	3201      	adds	r2, #1
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38
				htim1.Instance->CCR3++;
 8002ffc:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_UART_RxCpltCallback+0x2e0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003002:	3201      	adds	r2, #1
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c
 8003006:	e02d      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}
			else if(0 == strcmp(cat, "0x05"))
 8003008:	4a74      	ldr	r2, [pc, #464]	; (80031dc <HAL_UART_RxCpltCallback+0x2e4>)
 800300a:	2314      	movs	r3, #20
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	0011      	movs	r1, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f7fd f879 	bl	8000108 <strcmp>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x12c>
			{
				TIM14->ARR--;
 800301a:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <HAL_UART_RxCpltCallback+0x2e8>)
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	3a01      	subs	r2, #1
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c
 8003022:	e01f      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}
			else if(0 == strcmp(cat, "0x06"))
 8003024:	4a6f      	ldr	r2, [pc, #444]	; (80031e4 <HAL_UART_RxCpltCallback+0x2ec>)
 8003026:	2314      	movs	r3, #20
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f7fd f86b 	bl	8000108 <strcmp>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d016      	beq.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			{

			}
			else if(0 == strcmp((char*) rxbuf, MotorOn))
 8003036:	4a6c      	ldr	r2, [pc, #432]	; (80031e8 <HAL_UART_RxCpltCallback+0x2f0>)
 8003038:	4b5f      	ldr	r3, [pc, #380]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd f863 	bl	8000108 <strcmp>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d103      	bne.n	800304e <HAL_UART_RxCpltCallback+0x156>
			{
				printflag.Motor_On = TRUE;
 8003046:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_UART_RxCpltCallback+0x2f4>)
 8003048:	2201      	movs	r2, #1
 800304a:	719a      	strb	r2, [r3, #6]
 800304c:	e00a      	b.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			}
			else if(0 == strcmp((char*) rxbuf, MotorOff)) // 0X13MOff
 800304e:	4a68      	ldr	r2, [pc, #416]	; (80031f0 <HAL_UART_RxCpltCallback+0x2f8>)
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f7fd f857 	bl	8000108 <strcmp>
 800305a:	1e03      	subs	r3, r0, #0
 800305c:	d102      	bne.n	8003064 <HAL_UART_RxCpltCallback+0x16c>
			{
				printflag.Motor_Off = TRUE;
 800305e:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_UART_RxCpltCallback+0x2f4>)
 8003060:	2201      	movs	r2, #1
 8003062:	71da      	strb	r2, [r3, #7]

			}
		}
		if(rxdata == 'P') // This code comsumes 3KB?
 8003064:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b50      	cmp	r3, #80	; 0x50
 800306a:	d128      	bne.n	80030be <HAL_UART_RxCpltCallback+0x1c6>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
 8003072:	e007      	b.n	8003084 <HAL_UART_RxCpltCallback+0x18c>
				rxbuf[t]=0;
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	18d3      	adds	r3, r2, r3
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	3301      	adds	r3, #1
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2bfe      	cmp	r3, #254	; 0xfe
 8003088:	ddf4      	ble.n	8003074 <HAL_UART_RxCpltCallback+0x17c>
			cnt = 0;
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^P]", a);
 8003090:	240c      	movs	r4, #12
 8003092:	193a      	adds	r2, r7, r4
 8003094:	4957      	ldr	r1, [pc, #348]	; (80031f4 <HAL_UART_RxCpltCallback+0x2fc>)
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003098:	0018      	movs	r0, r3
 800309a:	f006 ffa9 	bl	8009ff0 <siscanf>
			PIDV = atof(a);
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	0018      	movs	r0, r3
 80030a2:	f006 f833 	bl	800910c <atof>
 80030a6:	0002      	movs	r2, r0
 80030a8:	000b      	movs	r3, r1
 80030aa:	0010      	movs	r0, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	f7ff fbd5 	bl	800285c <__aeabi_d2f>
 80030b2:	1c03      	adds	r3, r0, #0
 80030b4:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Kp = PIDV;
 80030b6:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_UART_RxCpltCallback+0x300>)
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e06c      	b.n	8003198 <HAL_UART_RxCpltCallback+0x2a0>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'I')
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b49      	cmp	r3, #73	; 0x49
 80030c4:	d128      	bne.n	8003118 <HAL_UART_RxCpltCallback+0x220>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e007      	b.n	80030de <HAL_UART_RxCpltCallback+0x1e6>
				rxbuf[t]=0;
 80030ce:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	18d3      	adds	r3, r2, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2bfe      	cmp	r3, #254	; 0xfe
 80030e2:	ddf4      	ble.n	80030ce <HAL_UART_RxCpltCallback+0x1d6>
			cnt = 0;
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^I]", a);
 80030ea:	240c      	movs	r4, #12
 80030ec:	193a      	adds	r2, r7, r4
 80030ee:	4943      	ldr	r1, [pc, #268]	; (80031fc <HAL_UART_RxCpltCallback+0x304>)
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 80030f2:	0018      	movs	r0, r3
 80030f4:	f006 ff7c 	bl	8009ff0 <siscanf>
			PIDV = atof(a);
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	0018      	movs	r0, r3
 80030fc:	f006 f806 	bl	800910c <atof>
 8003100:	0002      	movs	r2, r0
 8003102:	000b      	movs	r3, r1
 8003104:	0010      	movs	r0, r2
 8003106:	0019      	movs	r1, r3
 8003108:	f7ff fba8 	bl	800285c <__aeabi_d2f>
 800310c:	1c03      	adds	r3, r0, #0
 800310e:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Ki = PIDV;
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_UART_RxCpltCallback+0x300>)
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e03f      	b.n	8003198 <HAL_UART_RxCpltCallback+0x2a0>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'D'|| rxdata == 'E')
 8003118:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b44      	cmp	r3, #68	; 0x44
 800311e:	d003      	beq.n	8003128 <HAL_UART_RxCpltCallback+0x230>
 8003120:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b45      	cmp	r3, #69	; 0x45
 8003126:	d137      	bne.n	8003198 <HAL_UART_RxCpltCallback+0x2a0>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	623b      	str	r3, [r7, #32]
 800312e:	e007      	b.n	8003140 <HAL_UART_RxCpltCallback+0x248>
				rxbuf[t]=0;
 8003130:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	3301      	adds	r3, #1
 800313e:	623b      	str	r3, [r7, #32]
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	2bfe      	cmp	r3, #254	; 0xfe
 8003144:	ddf4      	ble.n	8003130 <HAL_UART_RxCpltCallback+0x238>
			cnt = 0;
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
			if(rxdata == 'D')
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b44      	cmp	r3, #68	; 0x44
 8003152:	d11a      	bne.n	800318a <HAL_UART_RxCpltCallback+0x292>
			{
				sscanf(rxbuf, "%[^D]", a);
 8003154:	240c      	movs	r4, #12
 8003156:	193a      	adds	r2, r7, r4
 8003158:	4929      	ldr	r1, [pc, #164]	; (8003200 <HAL_UART_RxCpltCallback+0x308>)
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_UART_RxCpltCallback+0x2c0>)
 800315c:	0018      	movs	r0, r3
 800315e:	f006 ff47 	bl	8009ff0 <siscanf>
				PIDV = atof(a);
 8003162:	193b      	adds	r3, r7, r4
 8003164:	0018      	movs	r0, r3
 8003166:	f005 ffd1 	bl	800910c <atof>
 800316a:	0002      	movs	r2, r0
 800316c:	000b      	movs	r3, r1
 800316e:	0010      	movs	r0, r2
 8003170:	0019      	movs	r1, r3
 8003172:	f7ff fb73 	bl	800285c <__aeabi_d2f>
 8003176:	1c03      	adds	r3, r0, #0
 8003178:	61fb      	str	r3, [r7, #28]
				PID_Parameters.Kd = PIDV;
 800317a:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_UART_RxCpltCallback+0x300>)
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	609a      	str	r2, [r3, #8]
				printf("0X31 Set ok\n");
 8003180:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_UART_RxCpltCallback+0x30c>)
 8003182:	0018      	movs	r0, r3
 8003184:	f006 ff06 	bl	8009f94 <puts>
 8003188:	e006      	b.n	8003198 <HAL_UART_RxCpltCallback+0x2a0>
			}
			else
			{
				printflag.PID_Set = TRUE;
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_UART_RxCpltCallback+0x2f4>)
 800318c:	2201      	movs	r2, #1
 800318e:	715a      	strb	r2, [r3, #5]
				printf("0X31 PID align ok\n");
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_UART_RxCpltCallback+0x310>)
 8003192:	0018      	movs	r0, r3
 8003194:	f006 fefe 	bl	8009f94 <puts>

			}
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8003198:	4906      	ldr	r1, [pc, #24]	; (80031b4 <HAL_UART_RxCpltCallback+0x2bc>)
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <HAL_UART_RxCpltCallback+0x2b4>)
 800319c:	2201      	movs	r2, #1
 800319e:	0018      	movs	r0, r3
 80031a0:	f004 fe5e 	bl	8007e60 <HAL_UART_Receive_IT>
	}
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b00d      	add	sp, #52	; 0x34
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	200005bc 	.word	0x200005bc
 80031b0:	200005b8 	.word	0x200005b8
 80031b4:	200005b7 	.word	0x200005b7
 80031b8:	200004b8 	.word	0x200004b8
 80031bc:	0800e6d8 	.word	0x0800e6d8
 80031c0:	0800e650 	.word	0x0800e650
 80031c4:	20000398 	.word	0x20000398
 80031c8:	0800e658 	.word	0x0800e658
 80031cc:	0800e660 	.word	0x0800e660
 80031d0:	0800e668 	.word	0x0800e668
 80031d4:	0800e670 	.word	0x0800e670
 80031d8:	20000308 	.word	0x20000308
 80031dc:	0800e678 	.word	0x0800e678
 80031e0:	40002000 	.word	0x40002000
 80031e4:	0800e680 	.word	0x0800e680
 80031e8:	0800e688 	.word	0x0800e688
 80031ec:	20000268 	.word	0x20000268
 80031f0:	0800e694 	.word	0x0800e694
 80031f4:	0800e6a0 	.word	0x0800e6a0
 80031f8:	20000020 	.word	0x20000020
 80031fc:	0800e6a8 	.word	0x0800e6a8
 8003200:	0800e6b0 	.word	0x0800e6b0
 8003204:	0800e6b8 	.word	0x0800e6b8
 8003208:	0800e6c4 	.word	0x0800e6c4

0800320c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{									  // The ADC sample time is for all channel, the DMA
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6278      	str	r0, [r7, #36]	; 0x24
	My_ADC_getvalue(adc_buf, &adc_val);
 8003214:	003b      	movs	r3, r7
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003218:	4904      	ldr	r1, [pc, #16]	; (800322c <HAL_ADC_ConvCpltCallback+0x20>)
 800321a:	0018      	movs	r0, r3
 800321c:	f000 f968 	bl	80034f0 <My_ADC_getvalue>
//	BLDC_Phase_switching(&adc_val);
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b00a      	add	sp, #40	; 0x28
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000000 	.word	0x20000000
 800322c:	20000228 	.word	0x20000228

08003230 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	0018      	movs	r0, r3
 800323a:	230c      	movs	r3, #12
 800323c:	001a      	movs	r2, r3
 800323e:	2100      	movs	r1, #0
 8003240:	f005 ff9d 	bl	800917e <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <MX_ADC_Init+0x198>)
 8003246:	4a61      	ldr	r2, [pc, #388]	; (80033cc <MX_ADC_Init+0x19c>)
 8003248:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <MX_ADC_Init+0x198>)
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003250:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <MX_ADC_Init+0x198>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <MX_ADC_Init+0x198>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800325c:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <MX_ADC_Init+0x198>)
 800325e:	2201      	movs	r2, #1
 8003260:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003262:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <MX_ADC_Init+0x198>)
 8003264:	2208      	movs	r2, #8
 8003266:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003268:	4b57      	ldr	r3, [pc, #348]	; (80033c8 <MX_ADC_Init+0x198>)
 800326a:	2200      	movs	r2, #0
 800326c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <MX_ADC_Init+0x198>)
 8003270:	2200      	movs	r2, #0
 8003272:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003274:	4b54      	ldr	r3, [pc, #336]	; (80033c8 <MX_ADC_Init+0x198>)
 8003276:	2200      	movs	r2, #0
 8003278:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800327a:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <MX_ADC_Init+0x198>)
 800327c:	2200      	movs	r2, #0
 800327e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003280:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <MX_ADC_Init+0x198>)
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003286:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <MX_ADC_Init+0x198>)
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	00d2      	lsls	r2, r2, #3
 800328c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800328e:	4b4e      	ldr	r3, [pc, #312]	; (80033c8 <MX_ADC_Init+0x198>)
 8003290:	2224      	movs	r2, #36	; 0x24
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003296:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <MX_ADC_Init+0x198>)
 8003298:	2201      	movs	r2, #1
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800329c:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <MX_ADC_Init+0x198>)
 800329e:	0018      	movs	r0, r3
 80032a0:	f001 fb70 	bl	8004984 <HAL_ADC_Init>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80032a8:	f7ff fd0c 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	0152      	lsls	r2, r2, #5
 80032b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	2206      	movs	r2, #6
 80032be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032c0:	1d3a      	adds	r2, r7, #4
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <MX_ADC_Init+0x198>)
 80032c4:	0011      	movs	r1, r2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 fd2e 	bl	8004d28 <HAL_ADC_ConfigChannel>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80032d0:	f7ff fcf8 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032da:	1d3a      	adds	r2, r7, #4
 80032dc:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <MX_ADC_Init+0x198>)
 80032de:	0011      	movs	r1, r2
 80032e0:	0018      	movs	r0, r3
 80032e2:	f001 fd21 	bl	8004d28 <HAL_ADC_ConfigChannel>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d001      	beq.n	80032ee <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80032ea:	f7ff fceb 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2202      	movs	r2, #2
 80032f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032f4:	1d3a      	adds	r2, r7, #4
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <MX_ADC_Init+0x198>)
 80032f8:	0011      	movs	r1, r2
 80032fa:	0018      	movs	r0, r3
 80032fc:	f001 fd14 	bl	8004d28 <HAL_ADC_ConfigChannel>
 8003300:	1e03      	subs	r3, r0, #0
 8003302:	d001      	beq.n	8003308 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8003304:	f7ff fcde 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2203      	movs	r2, #3
 800330c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800330e:	1d3a      	adds	r2, r7, #4
 8003310:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <MX_ADC_Init+0x198>)
 8003312:	0011      	movs	r1, r2
 8003314:	0018      	movs	r0, r3
 8003316:	f001 fd07 	bl	8004d28 <HAL_ADC_ConfigChannel>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d001      	beq.n	8003322 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800331e:	f7ff fcd1 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2204      	movs	r2, #4
 8003326:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003328:	1d3a      	adds	r2, r7, #4
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <MX_ADC_Init+0x198>)
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f001 fcfa 	bl	8004d28 <HAL_ADC_ConfigChannel>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d001      	beq.n	800333c <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8003338:	f7ff fcc4 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	2205      	movs	r2, #5
 8003340:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003342:	1d3a      	adds	r2, r7, #4
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <MX_ADC_Init+0x198>)
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f001 fced 	bl	8004d28 <HAL_ADC_ConfigChannel>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8003352:	f7ff fcb7 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	2206      	movs	r2, #6
 800335a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800335c:	1d3a      	adds	r2, r7, #4
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <MX_ADC_Init+0x198>)
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f001 fce0 	bl	8004d28 <HAL_ADC_ConfigChannel>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d001      	beq.n	8003370 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 800336c:	f7ff fcaa 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	2207      	movs	r2, #7
 8003374:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003376:	1d3a      	adds	r2, r7, #4
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <MX_ADC_Init+0x198>)
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f001 fcd3 	bl	8004d28 <HAL_ADC_ConfigChannel>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8003386:	f7ff fc9d 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	2208      	movs	r2, #8
 800338e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003390:	1d3a      	adds	r2, r7, #4
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <MX_ADC_Init+0x198>)
 8003394:	0011      	movs	r1, r2
 8003396:	0018      	movs	r0, r3
 8003398:	f001 fcc6 	bl	8004d28 <HAL_ADC_ConfigChannel>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d001      	beq.n	80033a4 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80033a0:	f7ff fc90 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2211      	movs	r2, #17
 80033a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033aa:	1d3a      	adds	r2, r7, #4
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_ADC_Init+0x198>)
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f001 fcb9 	bl	8004d28 <HAL_ADC_ConfigChannel>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d001      	beq.n	80033be <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80033ba:	f7ff fc83 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000274 	.word	0x20000274
 80033cc:	40012400 	.word	0x40012400

080033d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	2414      	movs	r4, #20
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	0018      	movs	r0, r3
 80033de:	2314      	movs	r3, #20
 80033e0:	001a      	movs	r2, r3
 80033e2:	2100      	movs	r1, #0
 80033e4:	f005 fecb 	bl	800917e <memset>
  if(adcHandle->Instance==ADC1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <HAL_ADC_MspInit+0x10c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d170      	bne.n	80034d4 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	0089      	lsls	r1, r1, #2
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
 8003400:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0289      	lsls	r1, r1, #10
 8003418:	430a      	orrs	r2, r1
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	02c9      	lsls	r1, r1, #11
 8003434:	430a      	orrs	r2, r1
 8003436:	615a      	str	r2, [r3, #20]
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_ADC_MspInit+0x110>)
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	02db      	lsls	r3, r3, #11
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003446:	193b      	adds	r3, r7, r4
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800344c:	193b      	adds	r3, r7, r4
 800344e:	2203      	movs	r2, #3
 8003450:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	193b      	adds	r3, r7, r4
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003458:	193a      	adds	r2, r7, r4
 800345a:	2390      	movs	r3, #144	; 0x90
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f002 f953 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003466:	193b      	adds	r3, r7, r4
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800346c:	193b      	adds	r3, r7, r4
 800346e:	2203      	movs	r2, #3
 8003470:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	193b      	adds	r3, r7, r4
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003478:	193b      	adds	r3, r7, r4
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_ADC_MspInit+0x114>)
 800347c:	0019      	movs	r1, r3
 800347e:	0010      	movs	r0, r2
 8003480:	f002 f944 	bl	800570c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003484:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 8003486:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_ADC_MspInit+0x11c>)
 8003488:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 80034ae:	2220      	movs	r2, #32
 80034b0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 80034ba:	0018      	movs	r0, r3
 80034bc:	f001 ff10 	bl	80052e0 <HAL_DMA_Init>
 80034c0:	1e03      	subs	r3, r0, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80034c4:	f7ff fbfe 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_ADC_MspInit+0x118>)
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b00b      	add	sp, #44	; 0x2c
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	40012400 	.word	0x40012400
 80034e0:	40021000 	.word	0x40021000
 80034e4:	48000400 	.word	0x48000400
 80034e8:	200002b4 	.word	0x200002b4
 80034ec:	40020008 	.word	0x40020008

080034f0 <My_ADC_getvalue>:
//How to get the actual Vdda
//Vrefint_cal is based on 3.3V VDDA, while Vrefint_data is based on actual VDDA
//Vref_int/Vref_cal == 3.3/4095	   Vref_int/Vrefint_data == VDDA/4095 ==> VDDA = 3.3V*Vreint_cal/Vrefint_data
//Then using the actual Vdda to get the actual Vrevint and Voltage of other channels
MADC_Structure My_ADC_getvalue(uint16_t* adc_buf, MADC_Structure * adc_val)// the local array addr is not valid after function done
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]

	adc_val->bemf_pa 		= adc_buf[0] / 300>1?1:0; //620 == 0.5V
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	8819      	ldrh	r1, [r3, #0]
 8003500:	2396      	movs	r3, #150	; 0x96
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	2300      	movs	r3, #0
 8003506:	4291      	cmp	r1, r2
 8003508:	415b      	adcs	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	801a      	strh	r2, [r3, #0]
	adc_val->bemf_pb 		= adc_buf[1] / 300>1?1:0;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3302      	adds	r3, #2
 8003516:	8819      	ldrh	r1, [r3, #0]
 8003518:	2396      	movs	r3, #150	; 0x96
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	2300      	movs	r3, #0
 800351e:	4291      	cmp	r1, r2
 8003520:	415b      	adcs	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	805a      	strh	r2, [r3, #2]
	adc_val->bemf_pc 		= adc_buf[2] / 300>1?1:0;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3304      	adds	r3, #4
 800352e:	8819      	ldrh	r1, [r3, #0]
 8003530:	2396      	movs	r3, #150	; 0x96
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	2300      	movs	r3, #0
 8003536:	4291      	cmp	r1, r2
 8003538:	415b      	adcs	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	809a      	strh	r2, [r3, #4]
	adc_val->vbat 			= adc_buf[3];
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	88da      	ldrh	r2, [r3, #6]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	821a      	strh	r2, [r3, #16]
	adc_val->ia				= adc_buf[4];
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	891a      	ldrh	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	811a      	strh	r2, [r3, #8]
	adc_val->ib				= adc_buf[5];
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	895a      	ldrh	r2, [r3, #10]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	815a      	strh	r2, [r3, #10]
	adc_val->isum			= adc_buf[6];
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	899a      	ldrh	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	819a      	strh	r2, [r3, #12]
	adc_val->isum_filtered 	= adc_buf[7];
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	89da      	ldrh	r2, [r3, #14]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	81da      	strh	r2, [r3, #14]
	adc_val->bemf_mid		= adc_buf[8];
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	8a1a      	ldrh	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	80da      	strh	r2, [r3, #6]
	adc_val->vref_data 		= adc_buf[9];
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	8a5a      	ldrh	r2, [r3, #18]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	825a      	strh	r2, [r3, #18]

	// zero_acrross_flag <<= adc_val_bemf_pa if(zero_acrross_flag==0xff) ,

	adc_val->bemf_last = adc_val->bemf_now;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7d1a      	ldrb	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	755a      	strb	r2, [r3, #21]
	adc_val->bemf_now  = adc_val->bemf_pa * 4 + adc_val->bemf_pb * 2 + adc_val->bemf_pc * 1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	8852      	ldrh	r2, [r2, #2]
 800358c:	189b      	adds	r3, r3, r2
 800358e:	b2db      	uxtb	r3, r3
 8003590:	18db      	adds	r3, r3, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	889b      	ldrh	r3, [r3, #4]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	b2da      	uxtb	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	751a      	strb	r2, [r3, #20]

	return *adc_val;
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0010      	movs	r0, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	231e      	movs	r3, #30
 80035ac:	001a      	movs	r2, r3
 80035ae:	f005 fddd 	bl	800916c <memcpy>
}
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <MX_DMA_Init+0x38>)
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <MX_DMA_Init+0x38>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	615a      	str	r2, [r3, #20]
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <MX_DMA_Init+0x38>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2201      	movs	r2, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	2009      	movs	r0, #9
 80035e0:	f001 fe4c 	bl	800527c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035e4:	2009      	movs	r0, #9
 80035e6:	f001 fe5e 	bl	80052a6 <HAL_NVIC_EnableIRQ>

}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40021000 	.word	0x40021000

080035f8 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b08b      	sub	sp, #44	; 0x2c
 80035fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fe:	2414      	movs	r4, #20
 8003600:	193b      	adds	r3, r7, r4
 8003602:	0018      	movs	r0, r3
 8003604:	2314      	movs	r3, #20
 8003606:	001a      	movs	r2, r3
 8003608:	2100      	movs	r1, #0
 800360a:	f005 fdb8 	bl	800917e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800360e:	4bb9      	ldr	r3, [pc, #740]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	4bb8      	ldr	r3, [pc, #736]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	0309      	lsls	r1, r1, #12
 8003618:	430a      	orrs	r2, r1
 800361a:	615a      	str	r2, [r3, #20]
 800361c:	4bb5      	ldr	r3, [pc, #724]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	031b      	lsls	r3, r3, #12
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800362a:	4bb2      	ldr	r3, [pc, #712]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	4bb1      	ldr	r3, [pc, #708]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	03c9      	lsls	r1, r1, #15
 8003634:	430a      	orrs	r2, r1
 8003636:	615a      	str	r2, [r3, #20]
 8003638:	4bae      	ldr	r3, [pc, #696]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	03db      	lsls	r3, r3, #15
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	4bab      	ldr	r3, [pc, #684]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	4baa      	ldr	r3, [pc, #680]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0289      	lsls	r1, r1, #10
 8003650:	430a      	orrs	r2, r1
 8003652:	615a      	str	r2, [r3, #20]
 8003654:	4ba7      	ldr	r3, [pc, #668]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003662:	4ba4      	ldr	r3, [pc, #656]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	4ba3      	ldr	r3, [pc, #652]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	02c9      	lsls	r1, r1, #11
 800366c:	430a      	orrs	r2, r1
 800366e:	615a      	str	r2, [r3, #20]
 8003670:	4ba0      	ldr	r3, [pc, #640]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	02db      	lsls	r3, r3, #11
 8003678:	4013      	ands	r3, r2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800367e:	4b9d      	ldr	r3, [pc, #628]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	4b9c      	ldr	r3, [pc, #624]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 8003684:	2180      	movs	r1, #128	; 0x80
 8003686:	0349      	lsls	r1, r1, #13
 8003688:	430a      	orrs	r2, r1
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	4b99      	ldr	r3, [pc, #612]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	035b      	lsls	r3, r3, #13
 8003694:	4013      	ands	r3, r2
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTWakeUp_GPIO_Port, BTWakeUp_Pin, GPIO_PIN_SET);
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	4896      	ldr	r0, [pc, #600]	; (80038f8 <MX_GPIO_Init+0x300>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	0019      	movs	r1, r3
 80036a4:	f002 f9bf 	bl	8005a26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 80036a8:	4994      	ldr	r1, [pc, #592]	; (80038fc <MX_GPIO_Init+0x304>)
 80036aa:	4b93      	ldr	r3, [pc, #588]	; (80038f8 <MX_GPIO_Init+0x300>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	0018      	movs	r0, r3
 80036b0:	f002 f9b9 	bl	8005a26 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80036b4:	4b92      	ldr	r3, [pc, #584]	; (8003900 <MX_GPIO_Init+0x308>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	2110      	movs	r1, #16
 80036ba:	0018      	movs	r0, r3
 80036bc:	f002 f9b3 	bl	8005a26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80036c0:	4990      	ldr	r1, [pc, #576]	; (8003904 <MX_GPIO_Init+0x30c>)
 80036c2:	4b91      	ldr	r3, [pc, #580]	; (8003908 <MX_GPIO_Init+0x310>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	0018      	movs	r0, r3
 80036c8:	f002 f9ad 	bl	8005a26 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	0219      	lsls	r1, r3, #8
 80036d0:	2390      	movs	r3, #144	; 0x90
 80036d2:	05db      	lsls	r3, r3, #23
 80036d4:	2200      	movs	r2, #0
 80036d6:	0018      	movs	r0, r3
 80036d8:	f002 f9a5 	bl	8005a26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036dc:	193b      	adds	r3, r7, r4
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	01d2      	lsls	r2, r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	4a81      	ldr	r2, [pc, #516]	; (80038f8 <MX_GPIO_Init+0x300>)
 80036f4:	0019      	movs	r1, r3
 80036f6:	0010      	movs	r0, r2
 80036f8:	f002 f808 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTWakeUp_Pin;
 80036fc:	0021      	movs	r1, r4
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	0212      	lsls	r2, r2, #8
 8003704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003706:	000c      	movs	r4, r1
 8003708:	193b      	adds	r3, r7, r4
 800370a:	2201      	movs	r2, #1
 800370c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370e:	193b      	adds	r3, r7, r4
 8003710:	2201      	movs	r2, #1
 8003712:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003714:	193b      	adds	r3, r7, r4
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BTWakeUp_GPIO_Port, &GPIO_InitStruct);
 800371a:	193b      	adds	r3, r7, r4
 800371c:	4a76      	ldr	r2, [pc, #472]	; (80038f8 <MX_GPIO_Init+0x300>)
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f001 fff3 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2243      	movs	r2, #67	; 0x43
 800372a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800372c:	193b      	adds	r3, r7, r4
 800372e:	2203      	movs	r2, #3
 8003730:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	193b      	adds	r3, r7, r4
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003738:	193b      	adds	r3, r7, r4
 800373a:	4a71      	ldr	r2, [pc, #452]	; (8003900 <MX_GPIO_Init+0x308>)
 800373c:	0019      	movs	r1, r3
 800373e:	0010      	movs	r0, r2
 8003740:	f001 ffe4 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003744:	193b      	adds	r3, r7, r4
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374a:	193b      	adds	r3, r7, r4
 800374c:	2201      	movs	r2, #1
 800374e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003750:	193b      	adds	r3, r7, r4
 8003752:	2202      	movs	r2, #2
 8003754:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	193b      	adds	r3, r7, r4
 8003758:	2200      	movs	r2, #0
 800375a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375c:	193b      	adds	r3, r7, r4
 800375e:	4a66      	ldr	r2, [pc, #408]	; (80038f8 <MX_GPIO_Init+0x300>)
 8003760:	0019      	movs	r1, r3
 8003762:	0010      	movs	r0, r2
 8003764:	f001 ffd2 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	220e      	movs	r2, #14
 800376c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800376e:	193b      	adds	r3, r7, r4
 8003770:	2203      	movs	r2, #3
 8003772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	193b      	adds	r3, r7, r4
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377a:	193b      	adds	r3, r7, r4
 800377c:	4a5e      	ldr	r2, [pc, #376]	; (80038f8 <MX_GPIO_Init+0x300>)
 800377e:	0019      	movs	r1, r3
 8003780:	0010      	movs	r0, r2
 8003782:	f001 ffc3 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003786:	193b      	adds	r3, r7, r4
 8003788:	2210      	movs	r2, #16
 800378a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800378c:	193b      	adds	r3, r7, r4
 800378e:	2201      	movs	r2, #1
 8003790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	193b      	adds	r3, r7, r4
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	193b      	adds	r3, r7, r4
 800379a:	2200      	movs	r2, #0
 800379c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	4a57      	ldr	r2, [pc, #348]	; (8003900 <MX_GPIO_Init+0x308>)
 80037a2:	0019      	movs	r1, r3
 80037a4:	0010      	movs	r0, r2
 80037a6:	f001 ffb1 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	2220      	movs	r2, #32
 80037ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	4a50      	ldr	r2, [pc, #320]	; (8003900 <MX_GPIO_Init+0x308>)
 80037c0:	0019      	movs	r1, r3
 80037c2:	0010      	movs	r0, r2
 80037c4:	f001 ffa2 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80037c8:	0021      	movs	r1, r4
 80037ca:	187b      	adds	r3, r7, r1
 80037cc:	22e1      	movs	r2, #225	; 0xe1
 80037ce:	0152      	lsls	r2, r2, #5
 80037d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d2:	000c      	movs	r4, r1
 80037d4:	193b      	adds	r3, r7, r4
 80037d6:	2201      	movs	r2, #1
 80037d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	193b      	adds	r3, r7, r4
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	193b      	adds	r3, r7, r4
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e6:	193b      	adds	r3, r7, r4
 80037e8:	4a43      	ldr	r2, [pc, #268]	; (80038f8 <MX_GPIO_Init+0x300>)
 80037ea:	0019      	movs	r1, r3
 80037ec:	0010      	movs	r0, r2
 80037ee:	f001 ff8d 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	4a43      	ldr	r2, [pc, #268]	; (8003904 <MX_GPIO_Init+0x30c>)
 80037f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	2201      	movs	r2, #1
 80037fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	193b      	adds	r3, r7, r4
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380a:	193b      	adds	r3, r7, r4
 800380c:	4a3e      	ldr	r2, [pc, #248]	; (8003908 <MX_GPIO_Init+0x310>)
 800380e:	0019      	movs	r1, r3
 8003810:	0010      	movs	r0, r2
 8003812:	f001 ff7b 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003816:	193b      	adds	r3, r7, r4
 8003818:	22c0      	movs	r2, #192	; 0xc0
 800381a:	0152      	lsls	r2, r2, #5
 800381c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800381e:	193b      	adds	r3, r7, r4
 8003820:	2203      	movs	r2, #3
 8003822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	193b      	adds	r3, r7, r4
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382a:	193a      	adds	r2, r7, r4
 800382c:	2390      	movs	r3, #144	; 0x90
 800382e:	05db      	lsls	r3, r3, #23
 8003830:	0011      	movs	r1, r2
 8003832:	0018      	movs	r0, r3
 8003834:	f001 ff6a 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003838:	0021      	movs	r1, r4
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2288      	movs	r2, #136	; 0x88
 8003844:	0352      	lsls	r2, r2, #13
 8003846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	187b      	adds	r3, r7, r1
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800384e:	000c      	movs	r4, r1
 8003850:	187b      	adds	r3, r7, r1
 8003852:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <MX_GPIO_Init+0x308>)
 8003854:	0019      	movs	r1, r3
 8003856:	0010      	movs	r0, r2
 8003858:	f001 ff58 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800385c:	0021      	movs	r1, r4
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	0212      	lsls	r2, r2, #8
 8003864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003866:	000c      	movs	r4, r1
 8003868:	193b      	adds	r3, r7, r4
 800386a:	2201      	movs	r2, #1
 800386c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	193b      	adds	r3, r7, r4
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	193b      	adds	r3, r7, r4
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	193a      	adds	r2, r7, r4
 800387c:	2390      	movs	r3, #144	; 0x90
 800387e:	05db      	lsls	r3, r3, #23
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f001 ff42 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003888:	0021      	movs	r1, r4
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2204      	movs	r2, #4
 800388e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2288      	movs	r2, #136	; 0x88
 8003894:	0352      	lsls	r2, r2, #13
 8003896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	187b      	adds	r3, r7, r1
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389e:	000c      	movs	r4, r1
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <MX_GPIO_Init+0x314>)
 80038a4:	0019      	movs	r1, r3
 80038a6:	0010      	movs	r0, r2
 80038a8:	f001 ff30 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038ac:	0021      	movs	r1, r4
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	22c0      	movs	r2, #192	; 0xc0
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2212      	movs	r2, #18
 80038ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2203      	movs	r2, #3
 80038c6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2201      	movs	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <MX_GPIO_Init+0x310>)
 80038d2:	0019      	movs	r1, r3
 80038d4:	0010      	movs	r0, r2
 80038d6:	f001 ff19 	bl	800570c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	2007      	movs	r0, #7
 80038e0:	f001 fccc 	bl	800527c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038e4:	2007      	movs	r0, #7
 80038e6:	f001 fcde 	bl	80052a6 <HAL_NVIC_EnableIRQ>

}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b00b      	add	sp, #44	; 0x2c
 80038f0:	bd90      	pop	{r4, r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	40021000 	.word	0x40021000
 80038f8:	48000800 	.word	0x48000800
 80038fc:	00001c21 	.word	0x00001c21
 8003900:	48001400 	.word	0x48001400
 8003904:	0000fc04 	.word	0x0000fc04
 8003908:	48000400 	.word	0x48000400
 800390c:	48000c00 	.word	0x48000c00

08003910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_MspInit+0x44>)
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_MspInit+0x44>)
 800391c:	2101      	movs	r1, #1
 800391e:	430a      	orrs	r2, r1
 8003920:	619a      	str	r2, [r3, #24]
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_MspInit+0x44>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2201      	movs	r2, #1
 8003928:	4013      	ands	r3, r2
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_MspInit+0x44>)
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_MspInit+0x44>)
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0549      	lsls	r1, r1, #21
 8003938:	430a      	orrs	r2, r1
 800393a:	61da      	str	r2, [r3, #28]
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_MspInit+0x44>)
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	055b      	lsls	r3, r3, #21
 8003944:	4013      	ands	r3, r2
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	40021000 	.word	0x40021000

08003958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800395c:	e7fe      	b.n	800395c <NMI_Handler+0x4>

0800395e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <HardFault_Handler+0x4>

08003964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800397c:	f000 ffe6 	bl	800494c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800398a:	2080      	movs	r0, #128	; 0x80
 800398c:	f002 f868 	bl	8005a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <DMA1_Channel1_IRQHandler+0x14>)
 800399e:	0018      	movs	r0, r3
 80039a0:	f001 fdc9 	bl	8005536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	200002b4 	.word	0x200002b4

080039b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <TIM3_IRQHandler+0x14>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f003 f968 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000350 	.word	0x20000350

080039c8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <TIM6_IRQHandler+0x14>)
 80039ce:	0018      	movs	r0, r3
 80039d0:	f003 f95c 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000398 	.word	0x20000398

080039e0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <TIM14_IRQHandler+0x14>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f003 f950 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	200003e0 	.word	0x200003e0

080039f8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <TIM15_IRQHandler+0x14>)
 80039fe:	0018      	movs	r0, r3
 8003a00:	f003 f944 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000428 	.word	0x20000428

08003a10 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <TIM16_IRQHandler+0x14>)
 8003a16:	0018      	movs	r0, r3
 8003a18:	f003 f938 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	20000470 	.word	0x20000470

08003a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <USART1_IRQHandler+0x14>)
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f004 fa6e 	bl	8007f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	200005bc 	.word	0x200005bc

08003a40 <Get_24bit_Weight>:
 *      Author: kzhou
 */
#include "sw_spi.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	0002      	movs	r2, r0
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	701a      	strb	r2, [r3, #0]
	unsigned int weight=0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
	SW_SPI_PWR_ON; //Pull down clk
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	2110      	movs	r1, #16
 8003a56:	0018      	movs	r0, r3
 8003a58:	f001 ffe5 	bl	8005a26 <HAL_GPIO_WritePin>

	while(SW_SPI_DAT_RDY)
 8003a5c:	e003      	b.n	8003a66 <Get_24bit_Weight+0x26>
	{
//		SW_SPI_CLK_H;
//		SW_SPI_CLK_L;
		printf("Un-ready\r\n");
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <Get_24bit_Weight+0xbc>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f006 fa97 	bl	8009f94 <puts>
	while(SW_SPI_DAT_RDY)
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003a68:	2120      	movs	r1, #32
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f001 ffbe 	bl	80059ec <HAL_GPIO_ReadPin>
 8003a70:	1e03      	subs	r3, r0, #0
 8003a72:	d1f4      	bne.n	8003a5e <Get_24bit_Weight+0x1e>
	}

	for(char i = 24; i!=0; i--)
 8003a74:	230b      	movs	r3, #11
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2218      	movs	r2, #24
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e021      	b.n	8003ac2 <Get_24bit_Weight+0x82>
	{
		SW_SPI_CLK_H;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	2110      	movs	r1, #16
 8003a84:	0018      	movs	r0, r3
 8003a86:	f001 ffce 	bl	8005a26 <HAL_GPIO_WritePin>
		weight = weight<<1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
		SW_SPI_CLK_L;
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	2110      	movs	r1, #16
 8003a96:	0018      	movs	r0, r3
 8003a98:	f001 ffc5 	bl	8005a26 <HAL_GPIO_WritePin>
		if(SW_SPI_DAT_RDY)
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f001 ffa3 	bl	80059ec <HAL_GPIO_ReadPin>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d002      	beq.n	8003ab0 <Get_24bit_Weight+0x70>
		{
		 weight+=1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
		}
		delay_us(1);
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f000 fdb5 	bl	8004620 <delay_us>
	for(char i = 24; i!=0; i--)
 8003ab6:	210b      	movs	r1, #11
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	230b      	movs	r3, #11
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1d8      	bne.n	8003a7e <Get_24bit_Weight+0x3e>
	}
	SW_SPI_CLK_H;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f001 ffa7 	bl	8005a26 <HAL_GPIO_WritePin>
	weight = weight^0x800000;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	0412      	lsls	r2, r2, #16
 8003ade:	4053      	eors	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
	SW_SPI_CLK_L;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <Get_24bit_Weight+0xb8>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f001 ff9c 	bl	8005a26 <HAL_GPIO_WritePin>

	//Preserved for channel selection

	return weight;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	48001400 	.word	0x48001400
 8003afc:	0800e6e0 	.word	0x0800e6e0

08003b00 <Get_weight>:

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	if(weight_par->calibration_flag)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7b1b      	ldrb	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d03d      	beq.n	8003b8c <Get_weight+0x8c>
	{
		weight_par->gross_weight = Get_24bit_Weight(CHA_128);
 8003b10:	2019      	movs	r0, #25
 8003b12:	f7ff ff95 	bl	8003a40 <Get_24bit_Weight>
 8003b16:	0003      	movs	r3, r0
 8003b18:	001a      	movs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]
		weight_par->gram = (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2137      	movs	r1, #55	; 0x37
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7fc fb9c 	bl	8000268 <__divsi3>
 8003b30:	0003      	movs	r3, r0
 8003b32:	001a      	movs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	601a      	str	r2, [r3, #0]
		if(weight_par->gram > 2 && weight_par->gram <10000)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	dd12      	ble.n	8003b66 <Get_weight+0x66>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <Get_weight+0x94>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	dc0d      	bgt.n	8003b66 <Get_weight+0x66>
			weight_par->gram = (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2137      	movs	r1, #55	; 0x37
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fc fb86 	bl	8000268 <__divsi3>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	001a      	movs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	601a      	str	r2, [r3, #0]
			weight_par->gram = 5;
			printf("value is abnormal: %d \r\n" , (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR);
		}
		//Kalman  filter
	}
}
 8003b64:	e012      	b.n	8003b8c <Get_weight+0x8c>
			weight_par->gram = 5;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2205      	movs	r2, #5
 8003b6a:	601a      	str	r2, [r3, #0]
			printf("value is abnormal: %d \r\n" , (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2137      	movs	r1, #55	; 0x37
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7fc fb75 	bl	8000268 <__divsi3>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	001a      	movs	r2, r3
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <Get_weight+0x98>)
 8003b84:	0011      	movs	r1, r2
 8003b86:	0018      	movs	r0, r3
 8003b88:	f006 f978 	bl	8009e7c <iprintf>
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	0000270f 	.word	0x0000270f
 8003b98:	0800e6ec 	.word	0x0800e6ec

08003b9c <HX711_Calibration>:

void HX711_Calibration(HX711_Structure* weight_par)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	  /*******Get gross weight**************/
	for(char i=0;i<5;i++)
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e020      	b.n	8003bf0 <HX711_Calibration+0x54>
	{
		SW_SPI_PWR_OFF;
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HX711_Calibration+0xf0>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f001 ff36 	bl	8005a26 <HAL_GPIO_WritePin>
		delay_us(2000);
 8003bba:	23fa      	movs	r3, #250	; 0xfa
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 fd2e 	bl	8004620 <delay_us>
		SW_SPI_PWR_ON;
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HX711_Calibration+0xf0>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2110      	movs	r1, #16
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f001 ff2b 	bl	8005a26 <HAL_GPIO_WritePin>
		weight_par->calibrated_value+= Get_24bit_Weight(CHA_128);
 8003bd0:	2019      	movs	r0, #25
 8003bd2:	f7ff ff35 	bl	8003a40 <Get_24bit_Weight>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	18d3      	adds	r3, r2, r3
 8003bde:	001a      	movs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]
	for(char i=0;i<5;i++)
 8003be4:	210f      	movs	r1, #15
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	3201      	adds	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	230f      	movs	r3, #15
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d9d9      	bls.n	8003bae <HX711_Calibration+0x12>
	}
	weight_par->calibrated_value /=5;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2105      	movs	r1, #5
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7fc fb31 	bl	8000268 <__divsi3>
 8003c06:	0003      	movs	r3, r0
 8003c08:	001a      	movs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]



	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003c0e:	e025      	b.n	8003c5c <HX711_Calibration+0xc0>
	  {
		  printf("Sensor initial error, re-calibrating\r\n");
 8003c10:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <HX711_Calibration+0xf4>)
 8003c12:	0018      	movs	r0, r3
 8003c14:	f006 f9be 	bl	8009f94 <puts>
		  SW_SPI_PWR_OFF;
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HX711_Calibration+0xf0>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f001 ff01 	bl	8005a26 <HAL_GPIO_WritePin>
		  delay_us(200);
 8003c24:	20c8      	movs	r0, #200	; 0xc8
 8003c26:	f000 fcfb 	bl	8004620 <delay_us>
		  SW_SPI_PWR_ON;
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HX711_Calibration+0xf0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2110      	movs	r1, #16
 8003c30:	0018      	movs	r0, r3
 8003c32:	f001 fef8 	bl	8005a26 <HAL_GPIO_WritePin>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003c36:	2019      	movs	r0, #25
 8003c38:	f7ff ff02 	bl	8003a40 <Get_24bit_Weight>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	001a      	movs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]
		  delay_us(2000);
 8003c44:	23fa      	movs	r3, #250	; 0xfa
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 fce9 	bl	8004620 <delay_us>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003c4e:	2019      	movs	r0, #25
 8003c50:	f7ff fef6 	bl	8003a40 <Get_24bit_Weight>
 8003c54:	0003      	movs	r3, r0
 8003c56:	001a      	movs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <HX711_Calibration+0xf8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	ddd4      	ble.n	8003c10 <HX711_Calibration+0x74>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <HX711_Calibration+0xfc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	dccf      	bgt.n	8003c10 <HX711_Calibration+0x74>
	  }
	  printf("calibration ok weight:%d\r\n", weight_par->calibrated_value);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HX711_Calibration+0x100>)
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f006 f8ff 	bl	8009e7c <iprintf>
	  weight_par->calibration_flag = 1; //Calibration done
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	731a      	strb	r2, [r3, #12]

}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b004      	add	sp, #16
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	48001400 	.word	0x48001400
 8003c90:	0800e708 	.word	0x0800e708
 8003c94:	007a11ff 	.word	0x007a11ff
 8003c98:	0084c060 	.word	0x0084c060
 8003c9c:	0800e730 	.word	0x0800e730

08003ca0 <Incremental_PID>:
// e(k) the value difference of actual and setting e(k-1) the last time difference
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]

char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr, PID_ParameterStruct* PID_Parameters)
{
 8003ca0:	b5b0      	push	{r4, r5, r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	230a      	movs	r3, #10
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	1c0a      	adds	r2, r1, #0
 8003cb0:	801a      	strh	r2, [r3, #0]
	static signed int   Bias=0, Last_bias=0, Last1_bias = 0;
	int PWM = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
	Bias = weight_par->gramAvgval> LOWER_LIMMIT? weight_par->gram - LOWER_LIMMIT : 0;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cba:	23fa      	movs	r3, #250	; 0xfa
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dd05      	ble.n	8003cce <Incremental_PID+0x2e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3bf5      	subs	r3, #245	; 0xf5
 8003cc8:	3bff      	subs	r3, #255	; 0xff
 8003cca:	001a      	movs	r2, r3
 8003ccc:	e000      	b.n	8003cd0 <Incremental_PID+0x30>
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <Incremental_PID+0xe0>)
 8003cd2:	601a      	str	r2, [r3, #0]
	//sum_integral +=Bias*Ki;
	PWM = PID_Parameters->Kp*(Bias-Last_bias)+PID_Parameters->Ki*Bias + PID_Parameters->Kd*(Bias - Last_bias);//(Bias-2*Last_bias+Last1_bias);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681c      	ldr	r4, [r3, #0]
 8003cd8:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <Incremental_PID+0xe0>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <Incremental_PID+0xe4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fc ff3e 	bl	8000b64 <__aeabi_i2f>
 8003ce8:	1c03      	adds	r3, r0, #0
 8003cea:	1c19      	adds	r1, r3, #0
 8003cec:	1c20      	adds	r0, r4, #0
 8003cee:	f7fc fdf3 	bl	80008d8 <__aeabi_fmul>
 8003cf2:	1c03      	adds	r3, r0, #0
 8003cf4:	1c1d      	adds	r5, r3, #0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685c      	ldr	r4, [r3, #4]
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <Incremental_PID+0xe0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7fc ff30 	bl	8000b64 <__aeabi_i2f>
 8003d04:	1c03      	adds	r3, r0, #0
 8003d06:	1c19      	adds	r1, r3, #0
 8003d08:	1c20      	adds	r0, r4, #0
 8003d0a:	f7fc fde5 	bl	80008d8 <__aeabi_fmul>
 8003d0e:	1c03      	adds	r3, r0, #0
 8003d10:	1c19      	adds	r1, r3, #0
 8003d12:	1c28      	adds	r0, r5, #0
 8003d14:	f7fc fc42 	bl	800059c <__aeabi_fadd>
 8003d18:	1c03      	adds	r3, r0, #0
 8003d1a:	1c1d      	adds	r5, r3, #0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689c      	ldr	r4, [r3, #8]
 8003d20:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <Incremental_PID+0xe0>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <Incremental_PID+0xe4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fc ff1a 	bl	8000b64 <__aeabi_i2f>
 8003d30:	1c03      	adds	r3, r0, #0
 8003d32:	1c19      	adds	r1, r3, #0
 8003d34:	1c20      	adds	r0, r4, #0
 8003d36:	f7fc fdcf 	bl	80008d8 <__aeabi_fmul>
 8003d3a:	1c03      	adds	r3, r0, #0
 8003d3c:	1c19      	adds	r1, r3, #0
 8003d3e:	1c28      	adds	r0, r5, #0
 8003d40:	f7fc fc2c 	bl	800059c <__aeabi_fadd>
 8003d44:	1c03      	adds	r3, r0, #0
 8003d46:	1c18      	adds	r0, r3, #0
 8003d48:	f7fc feec 	bl	8000b24 <__aeabi_f2iz>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	617b      	str	r3, [r7, #20]
	if(PWM>=0)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db06      	blt.n	8003d64 <Incremental_PID+0xc4>
	{
		PWM = PWM>=95? 100:PWM;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b5e      	cmp	r3, #94	; 0x5e
 8003d5a:	dc01      	bgt.n	8003d60 <Incremental_PID+0xc0>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	e000      	b.n	8003d62 <Incremental_PID+0xc2>
 8003d60:	2364      	movs	r3, #100	; 0x64
 8003d62:	617b      	str	r3, [r7, #20]
	}
	else
	{
		PWM = PWM;
	}
	Last1_bias = Last_bias;
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <Incremental_PID+0xe4>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <Incremental_PID+0xe8>)
 8003d6a:	601a      	str	r2, [r3, #0]
	Last_bias = Bias;
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <Incremental_PID+0xe0>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <Incremental_PID+0xe4>)
 8003d72:	601a      	str	r2, [r3, #0]
	return PWM;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	b2db      	uxtb	r3, r3
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d80:	200002f8 	.word	0x200002f8
 8003d84:	200002fc 	.word	0x200002fc
 8003d88:	20000300 	.word	0x20000300

08003d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  return 1;
 8003d90:	2301      	movs	r3, #1
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_kill>:

int _kill(int pid, int sig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003da2:	f005 f9b9 	bl	8009118 <__errno>
 8003da6:	0003      	movs	r3, r0
 8003da8:	2216      	movs	r2, #22
 8003daa:	601a      	str	r2, [r3, #0]
  return -1;
 8003dac:	2301      	movs	r3, #1
 8003dae:	425b      	negs	r3, r3
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_exit>:

void _exit (int status)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	425a      	negs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff ffe5 	bl	8003d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dce:	e7fe      	b.n	8003dce <_exit+0x16>

08003dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e00a      	b.n	8003df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003de2:	e000      	b.n	8003de6 <_read+0x16>
 8003de4:	bf00      	nop
 8003de6:	0001      	movs	r1, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	60ba      	str	r2, [r7, #8]
 8003dee:	b2ca      	uxtb	r2, r1
 8003df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	dbf0      	blt.n	8003de2 <_read+0x12>
  }

  return len;
 8003e00:	687b      	ldr	r3, [r7, #4]
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b006      	add	sp, #24
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e009      	b.n	8003e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60ba      	str	r2, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7fe ff39 	bl	8002c9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf1      	blt.n	8003e1c <_write+0x12>
  }
  return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	425b      	negs	r3, r3
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0192      	lsls	r2, r2, #6
 8003e66:	605a      	str	r2, [r3, #4]
  return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <_isatty>:

int _isatty(int file)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e7a:	2301      	movs	r3, #1
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <_sbrk+0x5c>)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <_sbrk+0x60>)
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_sbrk+0x64>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <_sbrk+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ecc:	f005 f924 	bl	8009118 <__errno>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	425b      	negs	r3, r3
 8003eda:	e009      	b.n	8003ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <_sbrk+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	18d2      	adds	r2, r2, r3
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_sbrk+0x64>)
 8003eec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b006      	add	sp, #24
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20002000 	.word	0x20002000
 8003efc:	00000400 	.word	0x00000400
 8003f00:	20000304 	.word	0x20000304
 8003f04:	20000660 	.word	0x20000660

08003f08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b09a      	sub	sp, #104	; 0x68
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1a:	2358      	movs	r3, #88	; 0x58
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	0018      	movs	r0, r3
 8003f20:	2310      	movs	r3, #16
 8003f22:	001a      	movs	r2, r3
 8003f24:	2100      	movs	r1, #0
 8003f26:	f005 f92a 	bl	800917e <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003f2a:	2344      	movs	r3, #68	; 0x44
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	0018      	movs	r0, r3
 8003f30:	2314      	movs	r3, #20
 8003f32:	001a      	movs	r2, r3
 8003f34:	2100      	movs	r1, #0
 8003f36:	f005 f922 	bl	800917e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f3a:	233c      	movs	r3, #60	; 0x3c
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	0018      	movs	r0, r3
 8003f40:	2308      	movs	r3, #8
 8003f42:	001a      	movs	r2, r3
 8003f44:	2100      	movs	r1, #0
 8003f46:	f005 f91a 	bl	800917e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	0018      	movs	r0, r3
 8003f50:	231c      	movs	r3, #28
 8003f52:	001a      	movs	r2, r3
 8003f54:	2100      	movs	r1, #0
 8003f56:	f005 f912 	bl	800917e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f5a:	003b      	movs	r3, r7
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	2320      	movs	r3, #32
 8003f60:	001a      	movs	r2, r3
 8003f62:	2100      	movs	r1, #0
 8003f64:	f005 f90b 	bl	800917e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f68:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f6a:	4a6e      	ldr	r2, [pc, #440]	; (8004124 <MX_TIM1_Init+0x210>)
 8003f6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f70:	2217      	movs	r2, #23
 8003f72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f74:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003f7a:	4b69      	ldr	r3, [pc, #420]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f7c:	2263      	movs	r2, #99	; 0x63
 8003f7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f80:	4b67      	ldr	r3, [pc, #412]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f86:	4b66      	ldr	r3, [pc, #408]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8c:	4b64      	ldr	r3, [pc, #400]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003f94:	0018      	movs	r0, r3
 8003f96:	f002 fab5 	bl	8006504 <HAL_TIM_Base_Init>
 8003f9a:	1e03      	subs	r3, r0, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8003f9e:	f7fe fe91 	bl	8002cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa2:	2158      	movs	r1, #88	; 0x58
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	0152      	lsls	r2, r2, #5
 8003faa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fac:	187a      	adds	r2, r7, r1
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f003 f89e 	bl	80070f4 <HAL_TIM_ConfigClockSource>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003fbc:	f7fe fe82 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fc0:	4b57      	ldr	r3, [pc, #348]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f002 fcdc 	bl	8006980 <HAL_TIM_PWM_Init>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003fcc:	f7fe fe7a 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003fd0:	4b53      	ldr	r3, [pc, #332]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f002 fbca 	bl	800676c <HAL_TIM_OC_Init>
 8003fd8:	1e03      	subs	r3, r0, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003fdc:	f7fe fe72 	bl	8002cc4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003fe0:	2144      	movs	r1, #68	; 0x44
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2200      	movs	r2, #0
 8003fec:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003fee:	187a      	adds	r2, r7, r1
 8003ff0:	4b4b      	ldr	r3, [pc, #300]	; (8004120 <MX_TIM1_Init+0x20c>)
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f003 f951 	bl	800729c <HAL_TIM_SlaveConfigSynchro>
 8003ffa:	1e03      	subs	r3, r0, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003ffe:	f7fe fe61 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004002:	213c      	movs	r1, #60	; 0x3c
 8004004:	187b      	adds	r3, r7, r1
 8004006:	2270      	movs	r2, #112	; 0x70
 8004008:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400a:	187b      	adds	r3, r7, r1
 800400c:	2200      	movs	r2, #0
 800400e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004010:	187a      	adds	r2, r7, r1
 8004012:	4b43      	ldr	r3, [pc, #268]	; (8004120 <MX_TIM1_Init+0x20c>)
 8004014:	0011      	movs	r1, r2
 8004016:	0018      	movs	r0, r3
 8004018:	f003 fd68 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004020:	f7fe fe50 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004024:	2120      	movs	r1, #32
 8004026:	187b      	adds	r3, r7, r1
 8004028:	2260      	movs	r2, #96	; 0x60
 800402a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800402c:	187b      	adds	r3, r7, r1
 800402e:	2200      	movs	r2, #0
 8004030:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004032:	187b      	adds	r3, r7, r1
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004038:	187b      	adds	r3, r7, r1
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800403e:	187b      	adds	r3, r7, r1
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004050:	1879      	adds	r1, r7, r1
 8004052:	4b33      	ldr	r3, [pc, #204]	; (8004120 <MX_TIM1_Init+0x20c>)
 8004054:	2200      	movs	r2, #0
 8004056:	0018      	movs	r0, r3
 8004058:	f002 ff86 	bl	8006f68 <HAL_TIM_PWM_ConfigChannel>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8004060:	f7fe fe30 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004064:	2320      	movs	r3, #32
 8004066:	18f9      	adds	r1, r7, r3
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <MX_TIM1_Init+0x20c>)
 800406a:	2204      	movs	r2, #4
 800406c:	0018      	movs	r0, r3
 800406e:	f002 ff7b 	bl	8006f68 <HAL_TIM_PWM_ConfigChannel>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d001      	beq.n	800407a <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8004076:	f7fe fe25 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800407a:	2320      	movs	r3, #32
 800407c:	18f9      	adds	r1, r7, r3
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <MX_TIM1_Init+0x20c>)
 8004080:	2208      	movs	r2, #8
 8004082:	0018      	movs	r0, r3
 8004084:	f002 ff70 	bl	8006f68 <HAL_TIM_PWM_ConfigChannel>
 8004088:	1e03      	subs	r3, r0, #0
 800408a:	d001      	beq.n	8004090 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 800408c:	f7fe fe1a 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004090:	2120      	movs	r1, #32
 8004092:	187b      	adds	r3, r7, r1
 8004094:	2230      	movs	r2, #48	; 0x30
 8004096:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8004098:	187b      	adds	r3, r7, r1
 800409a:	2232      	movs	r2, #50	; 0x32
 800409c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800409e:	1879      	adds	r1, r7, r1
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <MX_TIM1_Init+0x20c>)
 80040a2:	220c      	movs	r2, #12
 80040a4:	0018      	movs	r0, r3
 80040a6:	f002 ff07 	bl	8006eb8 <HAL_TIM_OC_ConfigChannel>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 80040ae:	f7fe fe09 	bl	8002cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040b2:	003b      	movs	r3, r7
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040b8:	003b      	movs	r3, r7
 80040ba:	2200      	movs	r2, #0
 80040bc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040be:	003b      	movs	r3, r7
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040c4:	003b      	movs	r3, r7
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ca:	003b      	movs	r3, r7
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040d0:	003b      	movs	r3, r7
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	0192      	lsls	r2, r2, #6
 80040d6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040d8:	003b      	movs	r3, r7
 80040da:	2200      	movs	r2, #0
 80040dc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040de:	003a      	movs	r2, r7
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <MX_TIM1_Init+0x20c>)
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f003 fd59 	bl	8007b9c <HAL_TIMEx_ConfigBreakDeadTime>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d001      	beq.n	80040f2 <MX_TIM1_Init+0x1de>
  {
    Error_Handler();
 80040ee:	f7fe fde9 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 80040f2:	003b      	movs	r3, r7
 80040f4:	22f4      	movs	r2, #244	; 0xf4
 80040f6:	32ff      	adds	r2, #255	; 0xff
 80040f8:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040fa:	003a      	movs	r2, r7
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <MX_TIM1_Init+0x20c>)
 80040fe:	0011      	movs	r1, r2
 8004100:	0018      	movs	r0, r3
 8004102:	f003 fd4b 	bl	8007b9c <HAL_TIMEx_ConfigBreakDeadTime>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d001      	beq.n	800410e <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 800410a:	f7fe fddb 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <MX_TIM1_Init+0x20c>)
 8004110:	0018      	movs	r0, r3
 8004112:	f000 fa45 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	b01a      	add	sp, #104	; 0x68
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	20000308 	.word	0x20000308
 8004124:	40012c00 	.word	0x40012c00

08004128 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800412e:	2308      	movs	r3, #8
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	0018      	movs	r0, r3
 8004134:	2310      	movs	r3, #16
 8004136:	001a      	movs	r2, r3
 8004138:	2100      	movs	r1, #0
 800413a:	f005 f820 	bl	800917e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800413e:	003b      	movs	r3, r7
 8004140:	0018      	movs	r0, r3
 8004142:	2308      	movs	r3, #8
 8004144:	001a      	movs	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	f005 f819 	bl	800917e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <MX_TIM3_Init+0xa0>)
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <MX_TIM3_Init+0xa4>)
 8004150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <MX_TIM3_Init+0xa0>)
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <MX_TIM3_Init+0xa8>)
 8004156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <MX_TIM3_Init+0xa0>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <MX_TIM3_Init+0xa0>)
 8004160:	2263      	movs	r2, #99	; 0x63
 8004162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <MX_TIM3_Init+0xa0>)
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <MX_TIM3_Init+0xa0>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <MX_TIM3_Init+0xa0>)
 8004172:	0018      	movs	r0, r3
 8004174:	f002 f9c6 	bl	8006504 <HAL_TIM_Base_Init>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800417c:	f7fe fda2 	bl	8002cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004180:	2108      	movs	r1, #8
 8004182:	187b      	adds	r3, r7, r1
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	0152      	lsls	r2, r2, #5
 8004188:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800418a:	187a      	adds	r2, r7, r1
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_TIM3_Init+0xa0>)
 800418e:	0011      	movs	r1, r2
 8004190:	0018      	movs	r0, r3
 8004192:	f002 ffaf 	bl	80070f4 <HAL_TIM_ConfigClockSource>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d001      	beq.n	800419e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800419a:	f7fe fd93 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419e:	003b      	movs	r3, r7
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a4:	003b      	movs	r3, r7
 80041a6:	2200      	movs	r2, #0
 80041a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041aa:	003a      	movs	r2, r7
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_TIM3_Init+0xa0>)
 80041ae:	0011      	movs	r1, r2
 80041b0:	0018      	movs	r0, r3
 80041b2:	f003 fc9b 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 80041b6:	1e03      	subs	r3, r0, #0
 80041b8:	d001      	beq.n	80041be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80041ba:	f7fe fd83 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b006      	add	sp, #24
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	20000350 	.word	0x20000350
 80041cc:	40000400 	.word	0x40000400
 80041d0:	0000bb7f 	.word	0x0000bb7f

080041d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <MX_TIM6_Init+0x38>)
 80041da:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <MX_TIM6_Init+0x3c>)
 80041dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <MX_TIM6_Init+0x38>)
 80041e0:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <MX_TIM6_Init+0x40>)
 80041e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <MX_TIM6_Init+0x38>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <MX_TIM6_Init+0x38>)
 80041ec:	2263      	movs	r2, #99	; 0x63
 80041ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <MX_TIM6_Init+0x38>)
 80041f2:	2280      	movs	r2, #128	; 0x80
 80041f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <MX_TIM6_Init+0x38>)
 80041f8:	0018      	movs	r0, r3
 80041fa:	f002 f983 	bl	8006504 <HAL_TIM_Base_Init>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8004202:	f7fe fd5f 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000398 	.word	0x20000398
 8004210:	40001000 	.word	0x40001000
 8004214:	0000bb7f 	.word	0x0000bb7f

08004218 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	0018      	movs	r0, r3
 8004222:	231c      	movs	r3, #28
 8004224:	001a      	movs	r2, r3
 8004226:	2100      	movs	r1, #0
 8004228:	f004 ffa9 	bl	800917e <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <MX_TIM14_Init+0x8c>)
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <MX_TIM14_Init+0x90>)
 8004230:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <MX_TIM14_Init+0x8c>)
 8004234:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <MX_TIM14_Init+0x94>)
 8004236:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <MX_TIM14_Init+0x8c>)
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <MX_TIM14_Init+0x8c>)
 8004240:	2263      	movs	r2, #99	; 0x63
 8004242:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004244:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <MX_TIM14_Init+0x8c>)
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <MX_TIM14_Init+0x8c>)
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <MX_TIM14_Init+0x8c>)
 8004252:	0018      	movs	r0, r3
 8004254:	f002 f956 	bl	8006504 <HAL_TIM_Base_Init>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800425c:	f7fe fd32 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <MX_TIM14_Init+0x8c>)
 8004262:	0018      	movs	r0, r3
 8004264:	f002 fa82 	bl	800676c <HAL_TIM_OC_Init>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d001      	beq.n	8004270 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800426c:	f7fe fd2a 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	2200      	movs	r2, #0
 800427a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <MX_TIM14_Init+0x8c>)
 800428c:	2200      	movs	r2, #0
 800428e:	0018      	movs	r0, r3
 8004290:	f002 fe12 	bl	8006eb8 <HAL_TIM_OC_ConfigChannel>
 8004294:	1e03      	subs	r3, r0, #0
 8004296:	d001      	beq.n	800429c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004298:	f7fe fd14 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b008      	add	sp, #32
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200003e0 	.word	0x200003e0
 80042a8:	40002000 	.word	0x40002000
 80042ac:	000012bf 	.word	0x000012bf

080042b0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b6:	2308      	movs	r3, #8
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	0018      	movs	r0, r3
 80042bc:	2310      	movs	r3, #16
 80042be:	001a      	movs	r2, r3
 80042c0:	2100      	movs	r1, #0
 80042c2:	f004 ff5c 	bl	800917e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c6:	003b      	movs	r3, r7
 80042c8:	0018      	movs	r0, r3
 80042ca:	2308      	movs	r3, #8
 80042cc:	001a      	movs	r2, r3
 80042ce:	2100      	movs	r1, #0
 80042d0:	f004 ff55 	bl	800917e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042d6:	4a20      	ldr	r2, [pc, #128]	; (8004358 <MX_TIM15_Init+0xa8>)
 80042d8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 80042da:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042dc:	222f      	movs	r2, #47	; 0x2f
 80042de:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535-1;
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042e8:	4a1c      	ldr	r2, [pc, #112]	; (800435c <MX_TIM15_Init+0xac>)
 80042ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80042f2:	4b18      	ldr	r3, [pc, #96]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042f8:	4b16      	ldr	r3, [pc, #88]	; (8004354 <MX_TIM15_Init+0xa4>)
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <MX_TIM15_Init+0xa4>)
 8004300:	0018      	movs	r0, r3
 8004302:	f002 f8ff 	bl	8006504 <HAL_TIM_Base_Init>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d001      	beq.n	800430e <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800430a:	f7fe fcdb 	bl	8002cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800430e:	2108      	movs	r1, #8
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	0152      	lsls	r2, r2, #5
 8004316:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004318:	187a      	adds	r2, r7, r1
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <MX_TIM15_Init+0xa4>)
 800431c:	0011      	movs	r1, r2
 800431e:	0018      	movs	r0, r3
 8004320:	f002 fee8 	bl	80070f4 <HAL_TIM_ConfigClockSource>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004328:	f7fe fccc 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800432c:	003b      	movs	r3, r7
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004332:	003b      	movs	r3, r7
 8004334:	2200      	movs	r2, #0
 8004336:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004338:	003a      	movs	r2, r7
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <MX_TIM15_Init+0xa4>)
 800433c:	0011      	movs	r1, r2
 800433e:	0018      	movs	r0, r3
 8004340:	f003 fbd4 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d001      	beq.n	800434c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8004348:	f7fe fcbc 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b006      	add	sp, #24
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000428 	.word	0x20000428
 8004358:	40014000 	.word	0x40014000
 800435c:	0000fffe 	.word	0x0000fffe

08004360 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <MX_TIM16_Init+0x44>)
 8004366:	4a10      	ldr	r2, [pc, #64]	; (80043a8 <MX_TIM16_Init+0x48>)
 8004368:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <MX_TIM16_Init+0x44>)
 800436c:	222f      	movs	r2, #47	; 0x2f
 800436e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <MX_TIM16_Init+0x44>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <MX_TIM16_Init+0x44>)
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <MX_TIM16_Init+0x4c>)
 800437a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <MX_TIM16_Init+0x44>)
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <MX_TIM16_Init+0x44>)
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <MX_TIM16_Init+0x44>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <MX_TIM16_Init+0x44>)
 8004390:	0018      	movs	r0, r3
 8004392:	f002 f8b7 	bl	8006504 <HAL_TIM_Base_Init>
 8004396:	1e03      	subs	r3, r0, #0
 8004398:	d001      	beq.n	800439e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800439a:	f7fe fc93 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000470 	.word	0x20000470
 80043a8:	40014400 	.word	0x40014400
 80043ac:	0000fffe 	.word	0x0000fffe

080043b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b08f      	sub	sp, #60	; 0x3c
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	2324      	movs	r3, #36	; 0x24
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	0018      	movs	r0, r3
 80043be:	2314      	movs	r3, #20
 80043c0:	001a      	movs	r2, r3
 80043c2:	2100      	movs	r1, #0
 80043c4:	f004 fedb 	bl	800917e <memset>
  if(tim_baseHandle->Instance==TIM1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6c      	ldr	r2, [pc, #432]	; (8004580 <HAL_TIM_Base_MspInit+0x1d0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10e      	bne.n	80043f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043d2:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	4b6b      	ldr	r3, [pc, #428]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	0109      	lsls	r1, r1, #4
 80043dc:	430a      	orrs	r2, r1
 80043de:	619a      	str	r2, [r3, #24]
 80043e0:	4b68      	ldr	r3, [pc, #416]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80043ee:	e0c3      	b.n	8004578 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a64      	ldr	r2, [pc, #400]	; (8004588 <HAL_TIM_Base_MspInit+0x1d8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d151      	bne.n	800449e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043fa:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004400:	2102      	movs	r1, #2
 8004402:	430a      	orrs	r2, r1
 8004404:	61da      	str	r2, [r3, #28]
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	2202      	movs	r2, #2
 800440c:	4013      	ands	r3, r2
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	0309      	lsls	r1, r1, #12
 800441c:	430a      	orrs	r2, r1
 800441e:	615a      	str	r2, [r3, #20]
 8004420:	4b58      	ldr	r3, [pc, #352]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	031b      	lsls	r3, r3, #12
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800442e:	2124      	movs	r1, #36	; 0x24
 8004430:	187b      	adds	r3, r7, r1
 8004432:	22b0      	movs	r2, #176	; 0xb0
 8004434:	0092      	lsls	r2, r2, #2
 8004436:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	000c      	movs	r4, r1
 800443a:	193b      	adds	r3, r7, r4
 800443c:	2202      	movs	r2, #2
 800443e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	193b      	adds	r3, r7, r4
 8004442:	2200      	movs	r2, #0
 8004444:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004446:	193b      	adds	r3, r7, r4
 8004448:	2200      	movs	r2, #0
 800444a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800444c:	193b      	adds	r3, r7, r4
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004452:	193b      	adds	r3, r7, r4
 8004454:	4a4d      	ldr	r2, [pc, #308]	; (800458c <HAL_TIM_Base_MspInit+0x1dc>)
 8004456:	0019      	movs	r1, r3
 8004458:	0010      	movs	r0, r2
 800445a:	f001 f957 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800445e:	0021      	movs	r1, r4
 8004460:	187b      	adds	r3, r7, r1
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0052      	lsls	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004468:	187b      	adds	r3, r7, r1
 800446a:	2202      	movs	r2, #2
 800446c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	187b      	adds	r3, r7, r1
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	187b      	adds	r3, r7, r1
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800447a:	187b      	adds	r3, r7, r1
 800447c:	2201      	movs	r2, #1
 800447e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004480:	187b      	adds	r3, r7, r1
 8004482:	4a42      	ldr	r2, [pc, #264]	; (800458c <HAL_TIM_Base_MspInit+0x1dc>)
 8004484:	0019      	movs	r1, r3
 8004486:	0010      	movs	r0, r2
 8004488:	f001 f940 	bl	800570c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800448c:	2200      	movs	r2, #0
 800448e:	2102      	movs	r1, #2
 8004490:	2010      	movs	r0, #16
 8004492:	f000 fef3 	bl	800527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004496:	2010      	movs	r0, #16
 8004498:	f000 ff05 	bl	80052a6 <HAL_NVIC_EnableIRQ>
}
 800449c:	e06c      	b.n	8004578 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM6)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <HAL_TIM_Base_MspInit+0x1e0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d114      	bne.n	80044d2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80044a8:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80044ae:	2110      	movs	r1, #16
 80044b0:	430a      	orrs	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
 80044b4:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2210      	movs	r2, #16
 80044ba:	4013      	ands	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80044c0:	2200      	movs	r2, #0
 80044c2:	2101      	movs	r1, #1
 80044c4:	2011      	movs	r0, #17
 80044c6:	f000 fed9 	bl	800527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80044ca:	2011      	movs	r0, #17
 80044cc:	f000 feeb 	bl	80052a6 <HAL_NVIC_EnableIRQ>
}
 80044d0:	e052      	b.n	8004578 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM14)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2f      	ldr	r2, [pc, #188]	; (8004594 <HAL_TIM_Base_MspInit+0x1e4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d116      	bne.n	800450a <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044dc:	4b29      	ldr	r3, [pc, #164]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	0049      	lsls	r1, r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	61da      	str	r2, [r3, #28]
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2101      	movs	r1, #1
 80044fc:	2013      	movs	r0, #19
 80044fe:	f000 febd 	bl	800527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004502:	2013      	movs	r0, #19
 8004504:	f000 fecf 	bl	80052a6 <HAL_NVIC_EnableIRQ>
}
 8004508:	e036      	b.n	8004578 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM15)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a22      	ldr	r2, [pc, #136]	; (8004598 <HAL_TIM_Base_MspInit+0x1e8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d116      	bne.n	8004542 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 800451a:	2180      	movs	r1, #128	; 0x80
 800451c:	0249      	lsls	r1, r1, #9
 800451e:	430a      	orrs	r2, r1
 8004520:	619a      	str	r2, [r3, #24]
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	025b      	lsls	r3, r3, #9
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	2100      	movs	r1, #0
 8004534:	2014      	movs	r0, #20
 8004536:	f000 fea1 	bl	800527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800453a:	2014      	movs	r0, #20
 800453c:	f000 feb3 	bl	80052a6 <HAL_NVIC_EnableIRQ>
}
 8004540:	e01a      	b.n	8004578 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM16)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a15      	ldr	r2, [pc, #84]	; (800459c <HAL_TIM_Base_MspInit+0x1ec>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d115      	bne.n	8004578 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 8004552:	2180      	movs	r1, #128	; 0x80
 8004554:	0289      	lsls	r1, r1, #10
 8004556:	430a      	orrs	r2, r1
 8004558:	619a      	str	r2, [r3, #24]
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_TIM_Base_MspInit+0x1d4>)
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	4013      	ands	r3, r2
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004568:	2200      	movs	r2, #0
 800456a:	2100      	movs	r1, #0
 800456c:	2015      	movs	r0, #21
 800456e:	f000 fe85 	bl	800527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004572:	2015      	movs	r0, #21
 8004574:	f000 fe97 	bl	80052a6 <HAL_NVIC_EnableIRQ>
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b00f      	add	sp, #60	; 0x3c
 800457e:	bd90      	pop	{r4, r7, pc}
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40021000 	.word	0x40021000
 8004588:	40000400 	.word	0x40000400
 800458c:	48000800 	.word	0x48000800
 8004590:	40001000 	.word	0x40001000
 8004594:	40002000 	.word	0x40002000
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400

080045a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	240c      	movs	r4, #12
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	0018      	movs	r0, r3
 80045ae:	2314      	movs	r3, #20
 80045b0:	001a      	movs	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	f004 fde3 	bl	800917e <memset>
  if(timHandle->Instance==TIM1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_TIM_MspPostInit+0x78>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d125      	bne.n	800460e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_TIM_MspPostInit+0x7c>)
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_TIM_MspPostInit+0x7c>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0289      	lsls	r1, r1, #10
 80045cc:	430a      	orrs	r2, r1
 80045ce:	615a      	str	r2, [r3, #20]
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_TIM_MspPostInit+0x7c>)
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	029b      	lsls	r3, r3, #10
 80045d8:	4013      	ands	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045de:	193b      	adds	r3, r7, r4
 80045e0:	22e0      	movs	r2, #224	; 0xe0
 80045e2:	00d2      	lsls	r2, r2, #3
 80045e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	0021      	movs	r1, r4
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	2202      	movs	r2, #2
 80045ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	2202      	movs	r2, #2
 80045fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004600:	187a      	adds	r2, r7, r1
 8004602:	2390      	movs	r3, #144	; 0x90
 8004604:	05db      	lsls	r3, r3, #23
 8004606:	0011      	movs	r1, r2
 8004608:	0018      	movs	r0, r3
 800460a:	f001 f87f 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b009      	add	sp, #36	; 0x24
 8004614:	bd90      	pop	{r4, r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40021000 	.word	0x40021000

08004620 <delay_us>:

/* USER CODE BEGIN 1 */


void delay_us(uint16_t us)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	0002      	movs	r2, r0
 8004628:	1dbb      	adds	r3, r7, #6
 800462a:	801a      	strh	r2, [r3, #0]
	us = 0xffff - us-10;
 800462c:	1dbb      	adds	r3, r7, #6
 800462e:	1dba      	adds	r2, r7, #6
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	210b      	movs	r1, #11
 8004634:	4249      	negs	r1, r1
 8004636:	1a8a      	subs	r2, r1, r2
 8004638:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, us);//the auto reload is set to 65535
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <delay_us+0x54>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1dba      	adds	r2, r7, #6
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim15);
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <delay_us+0x54>)
 8004646:	0018      	movs	r0, r3
 8004648:	f001 ffac 	bl	80065a4 <HAL_TIM_Base_Start>
	while(us<0xffff-10)
 800464c:	e004      	b.n	8004658 <delay_us+0x38>
	{
		us = __HAL_TIM_GET_COUNTER(&htim15);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <delay_us+0x54>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004654:	1dbb      	adds	r3, r7, #6
 8004656:	801a      	strh	r2, [r3, #0]
	while(us<0xffff-10)
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	4a06      	ldr	r2, [pc, #24]	; (8004678 <delay_us+0x58>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d9f5      	bls.n	800464e <delay_us+0x2e>
	}
	HAL_TIM_Base_Stop(&htim15);
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <delay_us+0x54>)
 8004664:	0018      	movs	r0, r3
 8004666:	f001 ffe1 	bl	800662c <HAL_TIM_Base_Stop>
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b002      	add	sp, #8
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	20000428 	.word	0x20000428
 8004678:	0000fff4 	.word	0x0000fff4

0800467c <delay_ms>:

void delay_ms(uint32_t delay)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	uint32_t tick_start;
	tick_start = HAL_GetTick();
 8004684:	f000 f974 	bl	8004970 <HAL_GetTick>
 8004688:	0003      	movs	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick()-tick_start)<delay)
 800468c:	e000      	b.n	8004690 <delay_ms+0x14>
		__NOP();
 800468e:	46c0      	nop			; (mov r8, r8)
	while((HAL_GetTick()-tick_start)<delay)
 8004690:	f000 f96e 	bl	8004970 <HAL_GetTick>
 8004694:	0002      	movs	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d8f6      	bhi.n	800468e <delay_ms+0x12>
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <MX_USART1_UART_Init+0x74>)
 80046b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046b8:	22e1      	movs	r2, #225	; 0xe1
 80046ba:	0252      	lsls	r2, r2, #9
 80046bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046be:	4b17      	ldr	r3, [pc, #92]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046d2:	220c      	movs	r2, #12
 80046d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046de:	2200      	movs	r2, #0
 80046e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046ea:	2238      	movs	r2, #56	; 0x38
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	0212      	lsls	r2, r2, #8
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <MX_USART1_UART_Init+0x70>)
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	0152      	lsls	r2, r2, #5
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <MX_USART1_UART_Init+0x70>)
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	0192      	lsls	r2, r2, #6
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <MX_USART1_UART_Init+0x70>)
 8004708:	0018      	movs	r0, r3
 800470a:	f003 fab5 	bl	8007c78 <HAL_UART_Init>
 800470e:	1e03      	subs	r3, r0, #0
 8004710:	d001      	beq.n	8004716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004712:	f7fe fad7 	bl	8002cc4 <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END USART1_Init 2 */

}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	200005bc 	.word	0x200005bc
 8004720:	40013800 	.word	0x40013800

08004724 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b08b      	sub	sp, #44	; 0x2c
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	2414      	movs	r4, #20
 800472e:	193b      	adds	r3, r7, r4
 8004730:	0018      	movs	r0, r3
 8004732:	2314      	movs	r3, #20
 8004734:	001a      	movs	r2, r3
 8004736:	2100      	movs	r1, #0
 8004738:	f004 fd21 	bl	800917e <memset>
  if(uartHandle->Instance==USART1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <HAL_UART_MspInit+0xa0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d139      	bne.n	80047ba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_UART_MspInit+0xa4>)
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_UART_MspInit+0xa4>)
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	01c9      	lsls	r1, r1, #7
 8004750:	430a      	orrs	r2, r1
 8004752:	619a      	str	r2, [r3, #24]
 8004754:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <HAL_UART_MspInit+0xa4>)
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	01db      	lsls	r3, r3, #7
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_UART_MspInit+0xa4>)
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_UART_MspInit+0xa4>)
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	02c9      	lsls	r1, r1, #11
 800476c:	430a      	orrs	r2, r1
 800476e:	615a      	str	r2, [r3, #20]
 8004770:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_UART_MspInit+0xa4>)
 8004772:	695a      	ldr	r2, [r3, #20]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	02db      	lsls	r3, r3, #11
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800477e:	0021      	movs	r1, r4
 8004780:	187b      	adds	r3, r7, r1
 8004782:	22c0      	movs	r2, #192	; 0xc0
 8004784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	187b      	adds	r3, r7, r1
 8004788:	2202      	movs	r2, #2
 800478a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	187b      	adds	r3, r7, r1
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004792:	187b      	adds	r3, r7, r1
 8004794:	2203      	movs	r2, #3
 8004796:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004798:	187b      	adds	r3, r7, r1
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479e:	187b      	adds	r3, r7, r1
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_UART_MspInit+0xa8>)
 80047a2:	0019      	movs	r1, r3
 80047a4:	0010      	movs	r0, r2
 80047a6:	f000 ffb1 	bl	800570c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80047aa:	2200      	movs	r2, #0
 80047ac:	2102      	movs	r1, #2
 80047ae:	201b      	movs	r0, #27
 80047b0:	f000 fd64 	bl	800527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047b4:	201b      	movs	r0, #27
 80047b6:	f000 fd76 	bl	80052a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	46bd      	mov	sp, r7
 80047be:	b00b      	add	sp, #44	; 0x2c
 80047c0:	bd90      	pop	{r4, r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	40013800 	.word	0x40013800
 80047c8:	40021000 	.word	0x40021000
 80047cc:	48000400 	.word	0x48000400

080047d0 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	0002      	movs	r2, r0
 80047d8:	1dfb      	adds	r3, r7, #7
 80047da:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d110      	bne.n	8004806 <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <BT_PWM_handle+0x90>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	dc07      	bgt.n	80047fe <BT_PWM_handle+0x2e>
 80047ee:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <BT_PWM_handle+0x90>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	b25a      	sxtb	r2, r3
 80047fc:	e000      	b.n	8004800 <BT_PWM_handle+0x30>
 80047fe:	220a      	movs	r2, #10
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <BT_PWM_handle+0x90>)
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e00f      	b.n	8004826 <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <BT_PWM_handle+0x90>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b25b      	sxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	dd07      	ble.n	8004820 <BT_PWM_handle+0x50>
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <BT_PWM_handle+0x90>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b25b      	sxtb	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	b25a      	sxtb	r2, r3
 800481e:	e000      	b.n	8004822 <BT_PWM_handle+0x52>
 8004820:	2200      	movs	r2, #0
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <BT_PWM_handle+0x90>)
 8004824:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <BT_PWM_handle+0x90>)
 8004828:	2200      	movs	r2, #0
 800482a:	569a      	ldrsb	r2, [r3, r2]
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <BT_PWM_handle+0x94>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <BT_PWM_handle+0x90>)
 8004834:	2200      	movs	r2, #0
 8004836:	569a      	ldrsb	r2, [r3, r2]
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <BT_PWM_handle+0x94>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <BT_PWM_handle+0x90>)
 8004840:	2200      	movs	r2, #0
 8004842:	569a      	ldrsb	r2, [r3, r2]
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <BT_PWM_handle+0x94>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <BT_PWM_handle+0x90>)
 800484c:	2200      	movs	r2, #0
 800484e:	569a      	ldrsb	r2, [r3, r2]
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <BT_PWM_handle+0x94>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	20000644 	.word	0x20000644
 8004864:	20000350 	.word	0x20000350

08004868 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004868:	480d      	ldr	r0, [pc, #52]	; (80048a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800486a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800486c:	f7ff fb4c 	bl	8003f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004870:	480c      	ldr	r0, [pc, #48]	; (80048a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004872:	490d      	ldr	r1, [pc, #52]	; (80048a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <LoopForever+0xe>)
  movs r3, #0
 8004876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004878:	e002      	b.n	8004880 <LoopCopyDataInit>

0800487a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800487a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800487c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800487e:	3304      	adds	r3, #4

08004880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004884:	d3f9      	bcc.n	800487a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004888:	4c0a      	ldr	r4, [pc, #40]	; (80048b4 <LoopForever+0x16>)
  movs r3, #0
 800488a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800488c:	e001      	b.n	8004892 <LoopFillZerobss>

0800488e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800488e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004890:	3204      	adds	r2, #4

08004892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004894:	d3fb      	bcc.n	800488e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004896:	f004 fc45 	bl	8009124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800489a:	f7fe f885 	bl	80029a8 <main>

0800489e <LoopForever>:

LoopForever:
    b LoopForever
 800489e:	e7fe      	b.n	800489e <LoopForever>
  ldr   r0, =_estack
 80048a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80048a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048a8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80048ac:	0800ed1c 	.word	0x0800ed1c
  ldr r2, =_sbss
 80048b0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80048b4:	2000065c 	.word	0x2000065c

080048b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048b8:	e7fe      	b.n	80048b8 <ADC1_IRQHandler>
	...

080048bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_Init+0x24>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_Init+0x24>)
 80048c6:	2110      	movs	r1, #16
 80048c8:	430a      	orrs	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80048cc:	2003      	movs	r0, #3
 80048ce:	f000 f809 	bl	80048e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048d2:	f7ff f81d 	bl	8003910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	40022000 	.word	0x40022000

080048e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_InitTick+0x5c>)
 80048ee:	681c      	ldr	r4, [r3, #0]
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <HAL_InitTick+0x60>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	0019      	movs	r1, r3
 80048f6:	23fa      	movs	r3, #250	; 0xfa
 80048f8:	0098      	lsls	r0, r3, #2
 80048fa:	f7fb fc2b 	bl	8000154 <__udivsi3>
 80048fe:	0003      	movs	r3, r0
 8004900:	0019      	movs	r1, r3
 8004902:	0020      	movs	r0, r4
 8004904:	f7fb fc26 	bl	8000154 <__udivsi3>
 8004908:	0003      	movs	r3, r0
 800490a:	0018      	movs	r0, r3
 800490c:	f000 fcdb 	bl	80052c6 <HAL_SYSTICK_Config>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d001      	beq.n	8004918 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e00f      	b.n	8004938 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d80b      	bhi.n	8004936 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	2301      	movs	r3, #1
 8004922:	425b      	negs	r3, r3
 8004924:	2200      	movs	r2, #0
 8004926:	0018      	movs	r0, r3
 8004928:	f000 fca8 	bl	800527c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_InitTick+0x64>)
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e000      	b.n	8004938 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b003      	add	sp, #12
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	2000002c 	.word	0x2000002c
 8004944:	20000034 	.word	0x20000034
 8004948:	20000030 	.word	0x20000030

0800494c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_IncTick+0x1c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	001a      	movs	r2, r3
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_IncTick+0x20>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	18d2      	adds	r2, r2, r3
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_IncTick+0x20>)
 800495e:	601a      	str	r2, [r3, #0]
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	20000034 	.word	0x20000034
 800496c:	20000648 	.word	0x20000648

08004970 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  return uwTick;
 8004974:	4b02      	ldr	r3, [pc, #8]	; (8004980 <HAL_GetTick+0x10>)
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	20000648 	.word	0x20000648

08004984 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800498c:	230f      	movs	r3, #15
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e125      	b.n	8004bee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2234      	movs	r2, #52	; 0x34
 80049b4:	2100      	movs	r1, #0
 80049b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7fe fd08 	bl	80033d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2210      	movs	r2, #16
 80049c6:	4013      	ands	r3, r2
 80049c8:	d000      	beq.n	80049cc <HAL_ADC_Init+0x48>
 80049ca:	e103      	b.n	8004bd4 <HAL_ADC_Init+0x250>
 80049cc:	230f      	movs	r3, #15
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d000      	beq.n	80049d8 <HAL_ADC_Init+0x54>
 80049d6:	e0fd      	b.n	8004bd4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2204      	movs	r2, #4
 80049e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80049e2:	d000      	beq.n	80049e6 <HAL_ADC_Init+0x62>
 80049e4:	e0f6      	b.n	8004bd4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	4a83      	ldr	r2, [pc, #524]	; (8004bf8 <HAL_ADC_Init+0x274>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	2202      	movs	r2, #2
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2203      	movs	r2, #3
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d112      	bne.n	8004a2a <HAL_ADC_Init+0xa6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d009      	beq.n	8004a26 <HAL_ADC_Init+0xa2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	401a      	ands	r2, r3
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_Init+0xa6>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_ADC_Init+0xa8>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d116      	bne.n	8004a5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2218      	movs	r2, #24
 8004a38:	4393      	bics	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	0899      	lsrs	r1, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4964      	ldr	r1, [pc, #400]	; (8004bfc <HAL_ADC_Init+0x278>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7e1b      	ldrb	r3, [r3, #24]
 8004a72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	7e5b      	ldrb	r3, [r3, #25]
 8004a78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7e9b      	ldrb	r3, [r3, #26]
 8004a80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d002      	beq.n	8004a92 <HAL_ADC_Init+0x10e>
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	e000      	b.n	8004a94 <HAL_ADC_Init+0x110>
 8004a92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_Init+0x124>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	e000      	b.n	8004aaa <HAL_ADC_Init+0x126>
 8004aa8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004aaa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2124      	movs	r1, #36	; 0x24
 8004ab0:	5c5b      	ldrb	r3, [r3, r1]
 8004ab2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004ab4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	7edb      	ldrb	r3, [r3, #27]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d115      	bne.n	8004af0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7e9b      	ldrb	r3, [r3, #26]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	0252      	lsls	r2, r2, #9
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	e00b      	b.n	8004af0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	2220      	movs	r2, #32
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	2201      	movs	r2, #1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	23c2      	movs	r3, #194	; 0xc2
 8004af6:	33ff      	adds	r3, #255	; 0xff
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d007      	beq.n	8004b0c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004b04:	4313      	orrs	r3, r2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68d9      	ldr	r1, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	055b      	lsls	r3, r3, #21
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d01b      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d017      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d013      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d00f      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d00b      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d007      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d003      	beq.n	8004b60 <HAL_ADC_Init+0x1dc>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	d112      	bne.n	8004b86 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2107      	movs	r1, #7
 8004b6c:	438a      	bics	r2, r1
 8004b6e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6959      	ldr	r1, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	2207      	movs	r2, #7
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_ADC_Init+0x27c>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10b      	bne.n	8004bae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004bac:	e01c      	b.n	8004be8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	2212      	movs	r2, #18
 8004bb4:	4393      	bics	r3, r2
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004bca:	230f      	movs	r3, #15
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004bd2:	e009      	b.n	8004be8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	2210      	movs	r2, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004be0:	230f      	movs	r3, #15
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004be8:	230f      	movs	r3, #15
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	fffffefd 	.word	0xfffffefd
 8004bfc:	fffe0219 	.word	0xfffe0219
 8004c00:	833fffe7 	.word	0x833fffe7

08004c04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c10:	2317      	movs	r3, #23
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2204      	movs	r2, #4
 8004c20:	4013      	ands	r3, r2
 8004c22:	d15e      	bne.n	8004ce2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2234      	movs	r2, #52	; 0x34
 8004c28:	5c9b      	ldrb	r3, [r3, r2]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_Start_DMA+0x2e>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e05e      	b.n	8004cf0 <HAL_ADC_Start_DMA+0xec>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2234      	movs	r2, #52	; 0x34
 8004c36:	2101      	movs	r1, #1
 8004c38:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	7e5b      	ldrb	r3, [r3, #25]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d007      	beq.n	8004c52 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004c42:	2317      	movs	r3, #23
 8004c44:	18fc      	adds	r4, r7, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 f963 	bl	8004f14 <ADC_Enable>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c52:	2317      	movs	r3, #23
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d146      	bne.n	8004cea <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	4a25      	ldr	r2, [pc, #148]	; (8004cf8 <HAL_ADC_Start_DMA+0xf4>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	0052      	lsls	r2, r2, #1
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2234      	movs	r2, #52	; 0x34
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_ADC_Start_DMA+0xf8>)
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <HAL_ADC_Start_DMA+0xfc>)
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_ADC_Start_DMA+0x100>)
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	221c      	movs	r2, #28
 8004c9a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2110      	movs	r1, #16
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3340      	adds	r3, #64	; 0x40
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f000 fb50 	bl	8005370 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2104      	movs	r1, #4
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	e003      	b.n	8004cea <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ce2:	2317      	movs	r3, #23
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004cea:	2317      	movs	r3, #23
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	781b      	ldrb	r3, [r3, #0]
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b007      	add	sp, #28
 8004cf6:	bd90      	pop	{r4, r7, pc}
 8004cf8:	fffff0fe 	.word	0xfffff0fe
 8004cfc:	0800501d 	.word	0x0800501d
 8004d00:	080050d1 	.word	0x080050d1
 8004d04:	080050ef 	.word	0x080050ef

08004d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d32:	230f      	movs	r3, #15
 8004d34:	18fb      	adds	r3, r7, r3
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	055b      	lsls	r3, r3, #21
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d011      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x46>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00d      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x46>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d009      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x46>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d005      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x46>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d001      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x46>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2234      	movs	r2, #52	; 0x34
 8004d72:	5c9b      	ldrb	r3, [r3, r2]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x54>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0bb      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x1cc>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2234      	movs	r2, #52	; 0x34
 8004d80:	2101      	movs	r1, #1
 8004d82:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d000      	beq.n	8004d92 <HAL_ADC_ConfigChannel+0x6a>
 8004d90:	e09f      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a59      	ldr	r2, [pc, #356]	; (8004efc <HAL_ADC_ConfigChannel+0x1d4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x76>
 8004d9c:	e077      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	055b      	lsls	r3, r3, #21
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d037      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d033      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d02f      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d02b      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d027      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d023      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d01f      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	2b07      	cmp	r3, #7
 8004df6:	d01b      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2107      	movs	r1, #7
 8004e04:	400b      	ands	r3, r1
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d012      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2107      	movs	r1, #7
 8004e16:	438a      	bics	r2, r1
 8004e18:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6959      	ldr	r1, [r3, #20]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2207      	movs	r2, #7
 8004e26:	401a      	ands	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d003      	beq.n	8004e40 <HAL_ADC_ConfigChannel+0x118>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b11      	cmp	r3, #17
 8004e3e:	d152      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004e40:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d102      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x12a>
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	e001      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x12e>
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	03db      	lsls	r3, r3, #15
 8004e56:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d140      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e64:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <HAL_ADC_ConfigChannel+0x1dc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4927      	ldr	r1, [pc, #156]	; (8004f08 <HAL_ADC_ConfigChannel+0x1e0>)
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7fb f972 	bl	8000154 <__udivsi3>
 8004e70:	0003      	movs	r3, r0
 8004e72:	001a      	movs	r2, r3
 8004e74:	0013      	movs	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	189b      	adds	r3, r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e7e:	e002      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f9      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x158>
 8004e8c:	e02b      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4099      	lsls	r1, r3
 8004e9c:	000b      	movs	r3, r1
 8004e9e:	43d9      	mvns	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d003      	beq.n	8004eb8 <HAL_ADC_ConfigChannel+0x190>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b11      	cmp	r3, #17
 8004eb6:	d116      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_ADC_ConfigChannel+0x1d8>)
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x1a0>
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <HAL_ADC_ConfigChannel+0x1e4>)
 8004ec6:	e000      	b.n	8004eca <HAL_ADC_ConfigChannel+0x1a2>
 8004ec8:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <HAL_ADC_ConfigChannel+0x1e8>)
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <HAL_ADC_ConfigChannel+0x1d8>)
 8004ecc:	400a      	ands	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e009      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004ede:	230f      	movs	r3, #15
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2234      	movs	r2, #52	; 0x34
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004eee:	230f      	movs	r3, #15
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b004      	add	sp, #16
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	00001001 	.word	0x00001001
 8004f00:	40012708 	.word	0x40012708
 8004f04:	2000002c 	.word	0x2000002c
 8004f08:	000f4240 	.word	0x000f4240
 8004f0c:	ff7fffff 	.word	0xff7fffff
 8004f10:	ffbfffff 	.word	0xffbfffff

08004f14 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d112      	bne.n	8004f58 <ADC_Enable+0x44>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d009      	beq.n	8004f54 <ADC_Enable+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d101      	bne.n	8004f58 <ADC_Enable+0x44>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <ADC_Enable+0x46>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d152      	bne.n	8005004 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <ADC_Enable+0xfc>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	d00d      	beq.n	8004f86 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	2210      	movs	r2, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e03f      	b.n	8005006 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2101      	movs	r1, #1
 8004f92:	430a      	orrs	r2, r1
 8004f94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <ADC_Enable+0x100>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	491f      	ldr	r1, [pc, #124]	; (8005018 <ADC_Enable+0x104>)
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fb f8d9 	bl	8000154 <__udivsi3>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fa6:	e002      	b.n	8004fae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f9      	bne.n	8004fa8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fb4:	f7ff fcdc 	bl	8004970 <HAL_GetTick>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004fbc:	e01b      	b.n	8004ff6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fbe:	f7ff fcd7 	bl	8004970 <HAL_GetTick>
 8004fc2:	0002      	movs	r2, r0
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d914      	bls.n	8004ff6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d00d      	beq.n	8004ff6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	2210      	movs	r2, #16
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	2201      	movs	r2, #1
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e007      	b.n	8005006 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b01      	cmp	r3, #1
 8005002:	d1dc      	bne.n	8004fbe <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b004      	add	sp, #16
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	80000017 	.word	0x80000017
 8005014:	2000002c 	.word	0x2000002c
 8005018:	000f4240 	.word	0x000f4240

0800501c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	2250      	movs	r2, #80	; 0x50
 8005030:	4013      	ands	r3, r2
 8005032:	d140      	bne.n	80050b6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	2280      	movs	r2, #128	; 0x80
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	23c0      	movs	r3, #192	; 0xc0
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	4013      	ands	r3, r2
 800504e:	d12d      	bne.n	80050ac <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005054:	2b00      	cmp	r3, #0
 8005056:	d129      	bne.n	80050ac <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2208      	movs	r2, #8
 8005060:	4013      	ands	r3, r2
 8005062:	2b08      	cmp	r3, #8
 8005064:	d122      	bne.n	80050ac <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2204      	movs	r2, #4
 800506e:	4013      	ands	r3, r2
 8005070:	d110      	bne.n	8005094 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	210c      	movs	r1, #12
 800507e:	438a      	bics	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	4a11      	ldr	r2, [pc, #68]	; (80050cc <ADC_DMAConvCplt+0xb0>)
 8005088:	4013      	ands	r3, r2
 800508a:	2201      	movs	r2, #1
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
 8005092:	e00b      	b.n	80050ac <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	2220      	movs	r2, #32
 800509a:	431a      	orrs	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	2201      	movs	r2, #1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fe f8ac 	bl	800320c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80050b4:	e005      	b.n	80050c2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	0010      	movs	r0, r2
 80050c0:	4798      	blx	r3
}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b004      	add	sp, #16
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	fffffefe 	.word	0xfffffefe

080050d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7ff fe11 	bl	8004d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b004      	add	sp, #16
 80050ec:	bd80      	pop	{r7, pc}

080050ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	2240      	movs	r2, #64	; 0x40
 8005102:	431a      	orrs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510c:	2204      	movs	r2, #4
 800510e:	431a      	orrs	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	0018      	movs	r0, r3
 8005118:	f7ff fdfe 	bl	8004d18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bd80      	pop	{r7, pc}

08005124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	0002      	movs	r2, r0
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005130:	1dfb      	adds	r3, r7, #7
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d809      	bhi.n	800514c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005138:	1dfb      	adds	r3, r7, #7
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	001a      	movs	r2, r3
 800513e:	231f      	movs	r3, #31
 8005140:	401a      	ands	r2, r3
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <__NVIC_EnableIRQ+0x30>)
 8005144:	2101      	movs	r1, #1
 8005146:	4091      	lsls	r1, r2
 8005148:	000a      	movs	r2, r1
 800514a:	601a      	str	r2, [r3, #0]
  }
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}
 8005154:	e000e100 	.word	0xe000e100

08005158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	0002      	movs	r2, r0
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	1dfb      	adds	r3, r7, #7
 8005164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005166:	1dfb      	adds	r3, r7, #7
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b7f      	cmp	r3, #127	; 0x7f
 800516c:	d828      	bhi.n	80051c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800516e:	4a2f      	ldr	r2, [pc, #188]	; (800522c <__NVIC_SetPriority+0xd4>)
 8005170:	1dfb      	adds	r3, r7, #7
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b25b      	sxtb	r3, r3
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	33c0      	adds	r3, #192	; 0xc0
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	589b      	ldr	r3, [r3, r2]
 800517e:	1dfa      	adds	r2, r7, #7
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	0011      	movs	r1, r2
 8005184:	2203      	movs	r2, #3
 8005186:	400a      	ands	r2, r1
 8005188:	00d2      	lsls	r2, r2, #3
 800518a:	21ff      	movs	r1, #255	; 0xff
 800518c:	4091      	lsls	r1, r2
 800518e:	000a      	movs	r2, r1
 8005190:	43d2      	mvns	r2, r2
 8005192:	401a      	ands	r2, r3
 8005194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	22ff      	movs	r2, #255	; 0xff
 800519c:	401a      	ands	r2, r3
 800519e:	1dfb      	adds	r3, r7, #7
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	0018      	movs	r0, r3
 80051a4:	2303      	movs	r3, #3
 80051a6:	4003      	ands	r3, r0
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051ac:	481f      	ldr	r0, [pc, #124]	; (800522c <__NVIC_SetPriority+0xd4>)
 80051ae:	1dfb      	adds	r3, r7, #7
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	430a      	orrs	r2, r1
 80051b8:	33c0      	adds	r3, #192	; 0xc0
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80051be:	e031      	b.n	8005224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <__NVIC_SetPriority+0xd8>)
 80051c2:	1dfb      	adds	r3, r7, #7
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	0019      	movs	r1, r3
 80051c8:	230f      	movs	r3, #15
 80051ca:	400b      	ands	r3, r1
 80051cc:	3b08      	subs	r3, #8
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	3306      	adds	r3, #6
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	18d3      	adds	r3, r2, r3
 80051d6:	3304      	adds	r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1dfa      	adds	r2, r7, #7
 80051dc:	7812      	ldrb	r2, [r2, #0]
 80051de:	0011      	movs	r1, r2
 80051e0:	2203      	movs	r2, #3
 80051e2:	400a      	ands	r2, r1
 80051e4:	00d2      	lsls	r2, r2, #3
 80051e6:	21ff      	movs	r1, #255	; 0xff
 80051e8:	4091      	lsls	r1, r2
 80051ea:	000a      	movs	r2, r1
 80051ec:	43d2      	mvns	r2, r2
 80051ee:	401a      	ands	r2, r3
 80051f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	401a      	ands	r2, r3
 80051fa:	1dfb      	adds	r3, r7, #7
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	0018      	movs	r0, r3
 8005200:	2303      	movs	r3, #3
 8005202:	4003      	ands	r3, r0
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005208:	4809      	ldr	r0, [pc, #36]	; (8005230 <__NVIC_SetPriority+0xd8>)
 800520a:	1dfb      	adds	r3, r7, #7
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	001c      	movs	r4, r3
 8005210:	230f      	movs	r3, #15
 8005212:	4023      	ands	r3, r4
 8005214:	3b08      	subs	r3, #8
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	430a      	orrs	r2, r1
 800521a:	3306      	adds	r3, #6
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	18c3      	adds	r3, r0, r3
 8005220:	3304      	adds	r3, #4
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	b003      	add	sp, #12
 800522a:	bd90      	pop	{r4, r7, pc}
 800522c:	e000e100 	.word	0xe000e100
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1e5a      	subs	r2, r3, #1
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	045b      	lsls	r3, r3, #17
 8005244:	429a      	cmp	r2, r3
 8005246:	d301      	bcc.n	800524c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005248:	2301      	movs	r3, #1
 800524a:	e010      	b.n	800526e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <SysTick_Config+0x44>)
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	3a01      	subs	r2, #1
 8005252:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005254:	2301      	movs	r3, #1
 8005256:	425b      	negs	r3, r3
 8005258:	2103      	movs	r1, #3
 800525a:	0018      	movs	r0, r3
 800525c:	f7ff ff7c 	bl	8005158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <SysTick_Config+0x44>)
 8005262:	2200      	movs	r2, #0
 8005264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005266:	4b04      	ldr	r3, [pc, #16]	; (8005278 <SysTick_Config+0x44>)
 8005268:	2207      	movs	r2, #7
 800526a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800526c:	2300      	movs	r3, #0
}
 800526e:	0018      	movs	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	b002      	add	sp, #8
 8005274:	bd80      	pop	{r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	e000e010 	.word	0xe000e010

0800527c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	210f      	movs	r1, #15
 8005288:	187b      	adds	r3, r7, r1
 800528a:	1c02      	adds	r2, r0, #0
 800528c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	187b      	adds	r3, r7, r1
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	b25b      	sxtb	r3, r3
 8005296:	0011      	movs	r1, r2
 8005298:	0018      	movs	r0, r3
 800529a:	f7ff ff5d 	bl	8005158 <__NVIC_SetPriority>
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	0002      	movs	r2, r0
 80052ae:	1dfb      	adds	r3, r7, #7
 80052b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052b2:	1dfb      	adds	r3, r7, #7
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	0018      	movs	r0, r3
 80052ba:	f7ff ff33 	bl	8005124 <__NVIC_EnableIRQ>
}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b002      	add	sp, #8
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7ff ffaf 	bl	8005234 <SysTick_Config>
 80052d6:	0003      	movs	r3, r0
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e036      	b.n	8005364 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2221      	movs	r2, #33	; 0x21
 80052fa:	2102      	movs	r1, #2
 80052fc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <HAL_DMA_Init+0x8c>)
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800532e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 f9c4 	bl	80056d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	2100      	movs	r1, #0
 8005360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b004      	add	sp, #16
 800536a:	bd80      	pop	{r7, pc}
 800536c:	ffffc00f 	.word	0xffffc00f

08005370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2317      	movs	r3, #23
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_DMA_Start_IT+0x24>
 8005390:	2302      	movs	r3, #2
 8005392:	e04f      	b.n	8005434 <HAL_DMA_Start_IT+0xc4>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	2101      	movs	r1, #1
 800539a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2221      	movs	r2, #33	; 0x21
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d13a      	bne.n	800541e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2221      	movs	r2, #33	; 0x21
 80053ac:	2102      	movs	r1, #2
 80053ae:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2101      	movs	r1, #1
 80053c2:	438a      	bics	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f954 	bl	800567a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	210e      	movs	r1, #14
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e00f      	b.n	800540c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	210a      	movs	r1, #10
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2104      	movs	r1, #4
 8005408:	438a      	bics	r2, r1
 800540a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2101      	movs	r1, #1
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005426:	2317      	movs	r3, #23
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2202      	movs	r2, #2
 800542c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800542e:	2317      	movs	r3, #23
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	781b      	ldrb	r3, [r3, #0]
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b006      	add	sp, #24
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2221      	movs	r2, #33	; 0x21
 8005448:	5c9b      	ldrb	r3, [r3, r2]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d008      	beq.n	8005462 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2204      	movs	r2, #4
 8005454:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	2100      	movs	r1, #0
 800545c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e020      	b.n	80054a4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	210e      	movs	r1, #14
 800546e:	438a      	bics	r2, r1
 8005470:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2101      	movs	r1, #1
 800547e:	438a      	bics	r2, r1
 8005480:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	2101      	movs	r1, #1
 800548c:	4091      	lsls	r1, r2
 800548e:	000a      	movs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2221      	movs	r2, #33	; 0x21
 8005496:	2101      	movs	r1, #1
 8005498:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	2100      	movs	r1, #0
 80054a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	210f      	movs	r1, #15
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2221      	movs	r2, #33	; 0x21
 80054c0:	5c9b      	ldrb	r3, [r3, r2]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d006      	beq.n	80054d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2204      	movs	r2, #4
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e028      	b.n	8005528 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	210e      	movs	r1, #14
 80054e2:	438a      	bics	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2101      	movs	r1, #1
 80054f2:	438a      	bics	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	2101      	movs	r1, #1
 8005500:	4091      	lsls	r1, r2
 8005502:	000a      	movs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2221      	movs	r2, #33	; 0x21
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	2100      	movs	r1, #0
 8005514:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	0010      	movs	r0, r2
 8005526:	4798      	blx	r3
    }
  }
  return status;
 8005528:	230f      	movs	r3, #15
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	781b      	ldrb	r3, [r3, #0]
}
 800552e:	0018      	movs	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	b004      	add	sp, #16
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2204      	movs	r2, #4
 8005554:	409a      	lsls	r2, r3
 8005556:	0013      	movs	r3, r2
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	d024      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x72>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2204      	movs	r2, #4
 8005562:	4013      	ands	r3, r2
 8005564:	d020      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2220      	movs	r2, #32
 800556e:	4013      	ands	r3, r2
 8005570:	d107      	bne.n	8005582 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2104      	movs	r1, #4
 800557e:	438a      	bics	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2104      	movs	r1, #4
 800558c:	4091      	lsls	r1, r2
 800558e:	000a      	movs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d100      	bne.n	800559c <HAL_DMA_IRQHandler+0x66>
 800559a:	e06a      	b.n	8005672 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	0010      	movs	r0, r2
 80055a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055a6:	e064      	b.n	8005672 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2202      	movs	r2, #2
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	d02b      	beq.n	8005610 <HAL_DMA_IRQHandler+0xda>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2202      	movs	r2, #2
 80055bc:	4013      	ands	r3, r2
 80055be:	d027      	beq.n	8005610 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2220      	movs	r2, #32
 80055c8:	4013      	ands	r3, r2
 80055ca:	d10b      	bne.n	80055e4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	210a      	movs	r1, #10
 80055d8:	438a      	bics	r2, r1
 80055da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2221      	movs	r2, #33	; 0x21
 80055e0:	2101      	movs	r1, #1
 80055e2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ec:	2102      	movs	r1, #2
 80055ee:	4091      	lsls	r1, r2
 80055f0:	000a      	movs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	2100      	movs	r1, #0
 80055fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	d036      	beq.n	8005672 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	0010      	movs	r0, r2
 800560c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800560e:	e030      	b.n	8005672 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	2208      	movs	r2, #8
 8005616:	409a      	lsls	r2, r3
 8005618:	0013      	movs	r3, r2
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	d028      	beq.n	8005672 <HAL_DMA_IRQHandler+0x13c>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2208      	movs	r2, #8
 8005624:	4013      	ands	r3, r2
 8005626:	d024      	beq.n	8005672 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	210e      	movs	r1, #14
 8005634:	438a      	bics	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	2101      	movs	r1, #1
 8005642:	4091      	lsls	r1, r2
 8005644:	000a      	movs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2221      	movs	r2, #33	; 0x21
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	0010      	movs	r0, r2
 800566e:	4798      	blx	r3
    }
  }
}
 8005670:	e7ff      	b.n	8005672 <HAL_DMA_IRQHandler+0x13c>
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b004      	add	sp, #16
 8005678:	bd80      	pop	{r7, pc}

0800567a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	2101      	movs	r1, #1
 8005692:	4091      	lsls	r1, r2
 8005694:	000a      	movs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d108      	bne.n	80056ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056b8:	e007      	b.n	80056ca <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	60da      	str	r2, [r3, #12]
}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b004      	add	sp, #16
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a08      	ldr	r2, [pc, #32]	; (8005704 <DMA_CalcBaseAndBitshift+0x30>)
 80056e2:	4694      	mov	ip, r2
 80056e4:	4463      	add	r3, ip
 80056e6:	2114      	movs	r1, #20
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7fa fd33 	bl	8000154 <__udivsi3>
 80056ee:	0003      	movs	r3, r0
 80056f0:	009a      	lsls	r2, r3, #2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a03      	ldr	r2, [pc, #12]	; (8005708 <DMA_CalcBaseAndBitshift+0x34>)
 80056fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b002      	add	sp, #8
 8005702:	bd80      	pop	{r7, pc}
 8005704:	bffdfff8 	.word	0xbffdfff8
 8005708:	40020000 	.word	0x40020000

0800570c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800571a:	e14f      	b.n	80059bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2101      	movs	r1, #1
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4091      	lsls	r1, r2
 8005726:	000a      	movs	r2, r1
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d100      	bne.n	8005734 <HAL_GPIO_Init+0x28>
 8005732:	e140      	b.n	80059b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2203      	movs	r2, #3
 800573a:	4013      	ands	r3, r2
 800573c:	2b01      	cmp	r3, #1
 800573e:	d005      	beq.n	800574c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2203      	movs	r2, #3
 8005746:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005748:	2b02      	cmp	r3, #2
 800574a:	d130      	bne.n	80057ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2203      	movs	r2, #3
 8005758:	409a      	lsls	r2, r3
 800575a:	0013      	movs	r3, r2
 800575c:	43da      	mvns	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	0013      	movs	r3, r2
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005782:	2201      	movs	r2, #1
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	409a      	lsls	r2, r3
 8005788:	0013      	movs	r3, r2
 800578a:	43da      	mvns	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	2201      	movs	r2, #1
 800579a:	401a      	ands	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	409a      	lsls	r2, r3
 80057a0:	0013      	movs	r3, r2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2203      	movs	r2, #3
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d017      	beq.n	80057ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	2203      	movs	r2, #3
 80057c6:	409a      	lsls	r2, r3
 80057c8:	0013      	movs	r3, r2
 80057ca:	43da      	mvns	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4013      	ands	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	409a      	lsls	r2, r3
 80057dc:	0013      	movs	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2203      	movs	r2, #3
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d123      	bne.n	800583e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	08da      	lsrs	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3208      	adds	r2, #8
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	58d3      	ldr	r3, [r2, r3]
 8005802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2207      	movs	r2, #7
 8005808:	4013      	ands	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	220f      	movs	r2, #15
 800580e:	409a      	lsls	r2, r3
 8005810:	0013      	movs	r3, r2
 8005812:	43da      	mvns	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4013      	ands	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2107      	movs	r1, #7
 8005822:	400b      	ands	r3, r1
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	409a      	lsls	r2, r3
 8005828:	0013      	movs	r3, r2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	08da      	lsrs	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3208      	adds	r2, #8
 8005838:	0092      	lsls	r2, r2, #2
 800583a:	6939      	ldr	r1, [r7, #16]
 800583c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	2203      	movs	r2, #3
 800584a:	409a      	lsls	r2, r3
 800584c:	0013      	movs	r3, r2
 800584e:	43da      	mvns	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4013      	ands	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2203      	movs	r2, #3
 800585c:	401a      	ands	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	409a      	lsls	r2, r3
 8005864:	0013      	movs	r3, r2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	23c0      	movs	r3, #192	; 0xc0
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	4013      	ands	r3, r2
 800587c:	d100      	bne.n	8005880 <HAL_GPIO_Init+0x174>
 800587e:	e09a      	b.n	80059b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005880:	4b54      	ldr	r3, [pc, #336]	; (80059d4 <HAL_GPIO_Init+0x2c8>)
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	4b53      	ldr	r3, [pc, #332]	; (80059d4 <HAL_GPIO_Init+0x2c8>)
 8005886:	2101      	movs	r1, #1
 8005888:	430a      	orrs	r2, r1
 800588a:	619a      	str	r2, [r3, #24]
 800588c:	4b51      	ldr	r3, [pc, #324]	; (80059d4 <HAL_GPIO_Init+0x2c8>)
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2201      	movs	r2, #1
 8005892:	4013      	ands	r3, r2
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005898:	4a4f      	ldr	r2, [pc, #316]	; (80059d8 <HAL_GPIO_Init+0x2cc>)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	089b      	lsrs	r3, r3, #2
 800589e:	3302      	adds	r3, #2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	589b      	ldr	r3, [r3, r2]
 80058a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2203      	movs	r2, #3
 80058aa:	4013      	ands	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	220f      	movs	r2, #15
 80058b0:	409a      	lsls	r2, r3
 80058b2:	0013      	movs	r3, r2
 80058b4:	43da      	mvns	r2, r3
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	2390      	movs	r3, #144	; 0x90
 80058c0:	05db      	lsls	r3, r3, #23
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d013      	beq.n	80058ee <HAL_GPIO_Init+0x1e2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a44      	ldr	r2, [pc, #272]	; (80059dc <HAL_GPIO_Init+0x2d0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00d      	beq.n	80058ea <HAL_GPIO_Init+0x1de>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a43      	ldr	r2, [pc, #268]	; (80059e0 <HAL_GPIO_Init+0x2d4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <HAL_GPIO_Init+0x1da>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a42      	ldr	r2, [pc, #264]	; (80059e4 <HAL_GPIO_Init+0x2d8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d101      	bne.n	80058e2 <HAL_GPIO_Init+0x1d6>
 80058de:	2303      	movs	r3, #3
 80058e0:	e006      	b.n	80058f0 <HAL_GPIO_Init+0x1e4>
 80058e2:	2305      	movs	r3, #5
 80058e4:	e004      	b.n	80058f0 <HAL_GPIO_Init+0x1e4>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e002      	b.n	80058f0 <HAL_GPIO_Init+0x1e4>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_GPIO_Init+0x1e4>
 80058ee:	2300      	movs	r3, #0
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	2103      	movs	r1, #3
 80058f4:	400a      	ands	r2, r1
 80058f6:	0092      	lsls	r2, r2, #2
 80058f8:	4093      	lsls	r3, r2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005900:	4935      	ldr	r1, [pc, #212]	; (80059d8 <HAL_GPIO_Init+0x2cc>)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	3302      	adds	r3, #2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	43da      	mvns	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4013      	ands	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	035b      	lsls	r3, r3, #13
 8005926:	4013      	ands	r3, r2
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005932:	4b2d      	ldr	r3, [pc, #180]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005938:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	43da      	mvns	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	039b      	lsls	r3, r3, #14
 8005950:	4013      	ands	r3, r2
 8005952:	d003      	beq.n	800595c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800595c:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	43da      	mvns	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4013      	ands	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	4013      	ands	r3, r2
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800598c:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	43da      	mvns	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4013      	ands	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	025b      	lsls	r3, r3, #9
 80059a4:	4013      	ands	r3, r2
 80059a6:	d003      	beq.n	80059b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_GPIO_Init+0x2dc>)
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	3301      	adds	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	40da      	lsrs	r2, r3
 80059c4:	1e13      	subs	r3, r2, #0
 80059c6:	d000      	beq.n	80059ca <HAL_GPIO_Init+0x2be>
 80059c8:	e6a8      	b.n	800571c <HAL_GPIO_Init+0x10>
  } 
}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	46c0      	nop			; (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b006      	add	sp, #24
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40010000 	.word	0x40010000
 80059dc:	48000400 	.word	0x48000400
 80059e0:	48000800 	.word	0x48000800
 80059e4:	48000c00 	.word	0x48000c00
 80059e8:	40010400 	.word	0x40010400

080059ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	000a      	movs	r2, r1
 80059f6:	1cbb      	adds	r3, r7, #2
 80059f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	1cba      	adds	r2, r7, #2
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	4013      	ands	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005a06:	230f      	movs	r3, #15
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e003      	b.n	8005a18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a10:	230f      	movs	r3, #15
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005a18:	230f      	movs	r3, #15
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	781b      	ldrb	r3, [r3, #0]
  }
 8005a1e:	0018      	movs	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b004      	add	sp, #16
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	0008      	movs	r0, r1
 8005a30:	0011      	movs	r1, r2
 8005a32:	1cbb      	adds	r3, r7, #2
 8005a34:	1c02      	adds	r2, r0, #0
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	1c7b      	adds	r3, r7, #1
 8005a3a:	1c0a      	adds	r2, r1, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a3e:	1c7b      	adds	r3, r7, #1
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a46:	1cbb      	adds	r3, r7, #2
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a4e:	e003      	b.n	8005a58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a50:	1cbb      	adds	r3, r7, #2
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a58:	46c0      	nop			; (mov r8, r8)
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	0002      	movs	r2, r0
 8005a68:	1dbb      	adds	r3, r7, #6
 8005a6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	1dba      	adds	r2, r7, #6
 8005a72:	8812      	ldrh	r2, [r2, #0]
 8005a74:	4013      	ands	r3, r2
 8005a76:	d008      	beq.n	8005a8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005a7a:	1dba      	adds	r2, r7, #6
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a80:	1dbb      	adds	r3, r7, #6
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f000 f807 	bl	8005a98 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b002      	add	sp, #8
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	40010400 	.word	0x40010400

08005a98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	1dbb      	adds	r3, r7, #6
 8005aa2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b002      	add	sp, #8
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e301      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d100      	bne.n	8005aca <HAL_RCC_OscConfig+0x1e>
 8005ac8:	e08d      	b.n	8005be6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005aca:	4bc3      	ldr	r3, [pc, #780]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	220c      	movs	r2, #12
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d00e      	beq.n	8005af4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ad6:	4bc0      	ldr	r3, [pc, #768]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	220c      	movs	r2, #12
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d116      	bne.n	8005b10 <HAL_RCC_OscConfig+0x64>
 8005ae2:	4bbd      	ldr	r3, [pc, #756]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	025b      	lsls	r3, r3, #9
 8005aea:	401a      	ands	r2, r3
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	025b      	lsls	r3, r3, #9
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af4:	4bb8      	ldr	r3, [pc, #736]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	4013      	ands	r3, r2
 8005afe:	d100      	bne.n	8005b02 <HAL_RCC_OscConfig+0x56>
 8005b00:	e070      	b.n	8005be4 <HAL_RCC_OscConfig+0x138>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d000      	beq.n	8005b0c <HAL_RCC_OscConfig+0x60>
 8005b0a:	e06b      	b.n	8005be4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e2d8      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_OscConfig+0x7c>
 8005b18:	4baf      	ldr	r3, [pc, #700]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4bae      	ldr	r3, [pc, #696]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	0249      	lsls	r1, r1, #9
 8005b22:	430a      	orrs	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e02f      	b.n	8005b88 <HAL_RCC_OscConfig+0xdc>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10c      	bne.n	8005b4a <HAL_RCC_OscConfig+0x9e>
 8005b30:	4ba9      	ldr	r3, [pc, #676]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4ba8      	ldr	r3, [pc, #672]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b36:	49a9      	ldr	r1, [pc, #676]	; (8005ddc <HAL_RCC_OscConfig+0x330>)
 8005b38:	400a      	ands	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	4ba6      	ldr	r3, [pc, #664]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4ba5      	ldr	r3, [pc, #660]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b42:	49a7      	ldr	r1, [pc, #668]	; (8005de0 <HAL_RCC_OscConfig+0x334>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e01e      	b.n	8005b88 <HAL_RCC_OscConfig+0xdc>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d10e      	bne.n	8005b70 <HAL_RCC_OscConfig+0xc4>
 8005b52:	4ba1      	ldr	r3, [pc, #644]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4ba0      	ldr	r3, [pc, #640]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	02c9      	lsls	r1, r1, #11
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	4b9d      	ldr	r3, [pc, #628]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b9c      	ldr	r3, [pc, #624]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	0249      	lsls	r1, r1, #9
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e00b      	b.n	8005b88 <HAL_RCC_OscConfig+0xdc>
 8005b70:	4b99      	ldr	r3, [pc, #612]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b98      	ldr	r3, [pc, #608]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b76:	4999      	ldr	r1, [pc, #612]	; (8005ddc <HAL_RCC_OscConfig+0x330>)
 8005b78:	400a      	ands	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	4b96      	ldr	r3, [pc, #600]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4b95      	ldr	r3, [pc, #596]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005b82:	4997      	ldr	r1, [pc, #604]	; (8005de0 <HAL_RCC_OscConfig+0x334>)
 8005b84:	400a      	ands	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d014      	beq.n	8005bba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fe feee 	bl	8004970 <HAL_GetTick>
 8005b94:	0003      	movs	r3, r0
 8005b96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b9a:	f7fe fee9 	bl	8004970 <HAL_GetTick>
 8005b9e:	0002      	movs	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b64      	cmp	r3, #100	; 0x64
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e28a      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bac:	4b8a      	ldr	r3, [pc, #552]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0xee>
 8005bb8:	e015      	b.n	8005be6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bba:	f7fe fed9 	bl	8004970 <HAL_GetTick>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc4:	f7fe fed4 	bl	8004970 <HAL_GetTick>
 8005bc8:	0002      	movs	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	; 0x64
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e275      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bd6:	4b80      	ldr	r3, [pc, #512]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	4013      	ands	r3, r2
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x118>
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x146>
 8005bf0:	e069      	b.n	8005cc6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005bf2:	4b79      	ldr	r3, [pc, #484]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	220c      	movs	r2, #12
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005bfc:	4b76      	ldr	r3, [pc, #472]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	220c      	movs	r2, #12
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d11c      	bne.n	8005c42 <HAL_RCC_OscConfig+0x196>
 8005c08:	4b73      	ldr	r3, [pc, #460]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	025b      	lsls	r3, r3, #9
 8005c10:	4013      	ands	r3, r2
 8005c12:	d116      	bne.n	8005c42 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c14:	4b70      	ldr	r3, [pc, #448]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d005      	beq.n	8005c2a <HAL_RCC_OscConfig+0x17e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d001      	beq.n	8005c2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e24b      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2a:	4b6b      	ldr	r3, [pc, #428]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	22f8      	movs	r2, #248	; 0xf8
 8005c30:	4393      	bics	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	00da      	lsls	r2, r3, #3
 8005c3a:	4b67      	ldr	r3, [pc, #412]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c40:	e041      	b.n	8005cc6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d024      	beq.n	8005c94 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c4a:	4b63      	ldr	r3, [pc, #396]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b62      	ldr	r3, [pc, #392]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c50:	2101      	movs	r1, #1
 8005c52:	430a      	orrs	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c56:	f7fe fe8b 	bl	8004970 <HAL_GetTick>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c60:	f7fe fe86 	bl	8004970 <HAL_GetTick>
 8005c64:	0002      	movs	r2, r0
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e227      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c72:	4b59      	ldr	r3, [pc, #356]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2202      	movs	r2, #2
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d0f1      	beq.n	8005c60 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7c:	4b56      	ldr	r3, [pc, #344]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	22f8      	movs	r2, #248	; 0xf8
 8005c82:	4393      	bics	r3, r2
 8005c84:	0019      	movs	r1, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	00da      	lsls	r2, r3, #3
 8005c8c:	4b52      	ldr	r3, [pc, #328]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	e018      	b.n	8005cc6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c94:	4b50      	ldr	r3, [pc, #320]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	4b4f      	ldr	r3, [pc, #316]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	438a      	bics	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fe fe66 	bl	8004970 <HAL_GetTick>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fe fe61 	bl	8004970 <HAL_GetTick>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e202      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cbc:	4b46      	ldr	r3, [pc, #280]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d1f1      	bne.n	8005caa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d036      	beq.n	8005d3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d019      	beq.n	8005d0c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd8:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cdc:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005cde:	2101      	movs	r1, #1
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce4:	f7fe fe44 	bl	8004970 <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cee:	f7fe fe3f 	bl	8004970 <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e1e0      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d00:	4b35      	ldr	r3, [pc, #212]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2202      	movs	r2, #2
 8005d06:	4013      	ands	r3, r2
 8005d08:	d0f1      	beq.n	8005cee <HAL_RCC_OscConfig+0x242>
 8005d0a:	e018      	b.n	8005d3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d10:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d12:	2101      	movs	r1, #1
 8005d14:	438a      	bics	r2, r1
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d18:	f7fe fe2a 	bl	8004970 <HAL_GetTick>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d22:	f7fe fe25 	bl	8004970 <HAL_GetTick>
 8005d26:	0002      	movs	r2, r0
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e1c6      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d34:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2202      	movs	r2, #2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d1f1      	bne.n	8005d22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2204      	movs	r2, #4
 8005d44:	4013      	ands	r3, r2
 8005d46:	d100      	bne.n	8005d4a <HAL_RCC_OscConfig+0x29e>
 8005d48:	e0b4      	b.n	8005eb4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d4a:	201f      	movs	r0, #31
 8005d4c:	183b      	adds	r3, r7, r0
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d52:	4b21      	ldr	r3, [pc, #132]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	055b      	lsls	r3, r3, #21
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d110      	bne.n	8005d80 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	0549      	lsls	r1, r1, #21
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	61da      	str	r2, [r3, #28]
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	055b      	lsls	r3, r3, #21
 8005d74:	4013      	ands	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d7a:	183b      	adds	r3, r7, r0
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <HAL_RCC_OscConfig+0x338>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d11a      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d8c:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_RCC_OscConfig+0x338>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <HAL_RCC_OscConfig+0x338>)
 8005d92:	2180      	movs	r1, #128	; 0x80
 8005d94:	0049      	lsls	r1, r1, #1
 8005d96:	430a      	orrs	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9a:	f7fe fde9 	bl	8004970 <HAL_GetTick>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fe fde4 	bl	8004970 <HAL_GetTick>
 8005da8:	0002      	movs	r2, r0
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b64      	cmp	r3, #100	; 0x64
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e185      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <HAL_RCC_OscConfig+0x338>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d10e      	bne.n	8005de8 <HAL_RCC_OscConfig+0x33c>
 8005dca:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <HAL_RCC_OscConfig+0x32c>)
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	621a      	str	r2, [r3, #32]
 8005dd6:	e035      	b.n	8005e44 <HAL_RCC_OscConfig+0x398>
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	fffeffff 	.word	0xfffeffff
 8005de0:	fffbffff 	.word	0xfffbffff
 8005de4:	40007000 	.word	0x40007000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10c      	bne.n	8005e0a <HAL_RCC_OscConfig+0x35e>
 8005df0:	4bb6      	ldr	r3, [pc, #728]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	4bb5      	ldr	r3, [pc, #724]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005df6:	2101      	movs	r1, #1
 8005df8:	438a      	bics	r2, r1
 8005dfa:	621a      	str	r2, [r3, #32]
 8005dfc:	4bb3      	ldr	r3, [pc, #716]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	4bb2      	ldr	r3, [pc, #712]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e02:	2104      	movs	r1, #4
 8005e04:	438a      	bics	r2, r1
 8005e06:	621a      	str	r2, [r3, #32]
 8005e08:	e01c      	b.n	8005e44 <HAL_RCC_OscConfig+0x398>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCC_OscConfig+0x380>
 8005e12:	4bae      	ldr	r3, [pc, #696]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	4bad      	ldr	r3, [pc, #692]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e18:	2104      	movs	r1, #4
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	621a      	str	r2, [r3, #32]
 8005e1e:	4bab      	ldr	r3, [pc, #684]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	4baa      	ldr	r3, [pc, #680]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e24:	2101      	movs	r1, #1
 8005e26:	430a      	orrs	r2, r1
 8005e28:	621a      	str	r2, [r3, #32]
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCC_OscConfig+0x398>
 8005e2c:	4ba7      	ldr	r3, [pc, #668]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	4ba6      	ldr	r3, [pc, #664]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e32:	2101      	movs	r1, #1
 8005e34:	438a      	bics	r2, r1
 8005e36:	621a      	str	r2, [r3, #32]
 8005e38:	4ba4      	ldr	r3, [pc, #656]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	4ba3      	ldr	r3, [pc, #652]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e3e:	2104      	movs	r1, #4
 8005e40:	438a      	bics	r2, r1
 8005e42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d014      	beq.n	8005e76 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e4c:	f7fe fd90 	bl	8004970 <HAL_GetTick>
 8005e50:	0003      	movs	r3, r0
 8005e52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e54:	e009      	b.n	8005e6a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e56:	f7fe fd8b 	bl	8004970 <HAL_GetTick>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	4a9b      	ldr	r2, [pc, #620]	; (80060d0 <HAL_RCC_OscConfig+0x624>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e12b      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6a:	4b98      	ldr	r3, [pc, #608]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	4013      	ands	r3, r2
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x3aa>
 8005e74:	e013      	b.n	8005e9e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e76:	f7fe fd7b 	bl	8004970 <HAL_GetTick>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7e:	e009      	b.n	8005e94 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e80:	f7fe fd76 	bl	8004970 <HAL_GetTick>
 8005e84:	0002      	movs	r2, r0
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	4a91      	ldr	r2, [pc, #580]	; (80060d0 <HAL_RCC_OscConfig+0x624>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e116      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e94:	4b8d      	ldr	r3, [pc, #564]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e9e:	231f      	movs	r3, #31
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea8:	4b88      	ldr	r3, [pc, #544]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	4b87      	ldr	r3, [pc, #540]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005eae:	4989      	ldr	r1, [pc, #548]	; (80060d4 <HAL_RCC_OscConfig+0x628>)
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2210      	movs	r2, #16
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d063      	beq.n	8005f86 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d12a      	bne.n	8005f1c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005ec6:	4b81      	ldr	r3, [pc, #516]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eca:	4b80      	ldr	r3, [pc, #512]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005ecc:	2104      	movs	r1, #4
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005ed2:	4b7e      	ldr	r3, [pc, #504]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed6:	4b7d      	ldr	r3, [pc, #500]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005ed8:	2101      	movs	r1, #1
 8005eda:	430a      	orrs	r2, r1
 8005edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ede:	f7fe fd47 	bl	8004970 <HAL_GetTick>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ee8:	f7fe fd42 	bl	8004970 <HAL_GetTick>
 8005eec:	0002      	movs	r2, r0
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e0e3      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005efa:	4b74      	ldr	r3, [pc, #464]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efe:	2202      	movs	r2, #2
 8005f00:	4013      	ands	r3, r2
 8005f02:	d0f1      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f04:	4b71      	ldr	r3, [pc, #452]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	22f8      	movs	r2, #248	; 0xf8
 8005f0a:	4393      	bics	r3, r2
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	4b6d      	ldr	r3, [pc, #436]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f16:	430a      	orrs	r2, r1
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34
 8005f1a:	e034      	b.n	8005f86 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	3305      	adds	r3, #5
 8005f22:	d111      	bne.n	8005f48 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005f24:	4b69      	ldr	r3, [pc, #420]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f28:	4b68      	ldr	r3, [pc, #416]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f2a:	2104      	movs	r1, #4
 8005f2c:	438a      	bics	r2, r1
 8005f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f30:	4b66      	ldr	r3, [pc, #408]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	22f8      	movs	r2, #248	; 0xf8
 8005f36:	4393      	bics	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	00da      	lsls	r2, r3, #3
 8005f40:	4b62      	ldr	r3, [pc, #392]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f42:	430a      	orrs	r2, r1
 8005f44:	635a      	str	r2, [r3, #52]	; 0x34
 8005f46:	e01e      	b.n	8005f86 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005f48:	4b60      	ldr	r3, [pc, #384]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4c:	4b5f      	ldr	r3, [pc, #380]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f4e:	2104      	movs	r1, #4
 8005f50:	430a      	orrs	r2, r1
 8005f52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005f54:	4b5d      	ldr	r3, [pc, #372]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f58:	4b5c      	ldr	r3, [pc, #368]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	438a      	bics	r2, r1
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f60:	f7fe fd06 	bl	8004970 <HAL_GetTick>
 8005f64:	0003      	movs	r3, r0
 8005f66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005f6a:	f7fe fd01 	bl	8004970 <HAL_GetTick>
 8005f6e:	0002      	movs	r2, r0
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e0a2      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f7c:	4b53      	ldr	r3, [pc, #332]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	2202      	movs	r2, #2
 8005f82:	4013      	ands	r3, r2
 8005f84:	d1f1      	bne.n	8005f6a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d100      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4e4>
 8005f8e:	e097      	b.n	80060c0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f90:	4b4e      	ldr	r3, [pc, #312]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	220c      	movs	r2, #12
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d100      	bne.n	8005f9e <HAL_RCC_OscConfig+0x4f2>
 8005f9c:	e06b      	b.n	8006076 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d14c      	bne.n	8006040 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa6:	4b49      	ldr	r3, [pc, #292]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b48      	ldr	r3, [pc, #288]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005fac:	494a      	ldr	r1, [pc, #296]	; (80060d8 <HAL_RCC_OscConfig+0x62c>)
 8005fae:	400a      	ands	r2, r1
 8005fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb2:	f7fe fcdd 	bl	8004970 <HAL_GetTick>
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fe fcd8 	bl	8004970 <HAL_GetTick>
 8005fc0:	0002      	movs	r2, r0
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e079      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fce:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	049b      	lsls	r3, r3, #18
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fda:	4b3c      	ldr	r3, [pc, #240]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	220f      	movs	r2, #15
 8005fe0:	4393      	bics	r3, r2
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	4b38      	ldr	r3, [pc, #224]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005fea:	430a      	orrs	r2, r1
 8005fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4a3a      	ldr	r2, [pc, #232]	; (80060dc <HAL_RCC_OscConfig+0x630>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	431a      	orrs	r2, r3
 8006002:	4b32      	ldr	r3, [pc, #200]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8006004:	430a      	orrs	r2, r1
 8006006:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006008:	4b30      	ldr	r3, [pc, #192]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	0449      	lsls	r1, r1, #17
 8006012:	430a      	orrs	r2, r1
 8006014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006016:	f7fe fcab 	bl	8004970 <HAL_GetTick>
 800601a:	0003      	movs	r3, r0
 800601c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006020:	f7fe fca6 	bl	8004970 <HAL_GetTick>
 8006024:	0002      	movs	r2, r0
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e047      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	049b      	lsls	r3, r3, #18
 800603a:	4013      	ands	r3, r2
 800603c:	d0f0      	beq.n	8006020 <HAL_RCC_OscConfig+0x574>
 800603e:	e03f      	b.n	80060c0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006040:	4b22      	ldr	r3, [pc, #136]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b21      	ldr	r3, [pc, #132]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8006046:	4924      	ldr	r1, [pc, #144]	; (80060d8 <HAL_RCC_OscConfig+0x62c>)
 8006048:	400a      	ands	r2, r1
 800604a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604c:	f7fe fc90 	bl	8004970 <HAL_GetTick>
 8006050:	0003      	movs	r3, r0
 8006052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006056:	f7fe fc8b 	bl	8004970 <HAL_GetTick>
 800605a:	0002      	movs	r2, r0
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e02c      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006068:	4b18      	ldr	r3, [pc, #96]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	049b      	lsls	r3, r3, #18
 8006070:	4013      	ands	r3, r2
 8006072:	d1f0      	bne.n	8006056 <HAL_RCC_OscConfig+0x5aa>
 8006074:	e024      	b.n	80060c0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e01f      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006088:	4b10      	ldr	r3, [pc, #64]	; (80060cc <HAL_RCC_OscConfig+0x620>)
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	025b      	lsls	r3, r3, #9
 8006094:	401a      	ands	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	429a      	cmp	r2, r3
 800609c:	d10e      	bne.n	80060bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	220f      	movs	r2, #15
 80060a2:	401a      	ands	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	23f0      	movs	r3, #240	; 0xf0
 80060b0:	039b      	lsls	r3, r3, #14
 80060b2:	401a      	ands	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b008      	add	sp, #32
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	40021000 	.word	0x40021000
 80060d0:	00001388 	.word	0x00001388
 80060d4:	efffffff 	.word	0xefffffff
 80060d8:	feffffff 	.word	0xfeffffff
 80060dc:	ffc2ffff 	.word	0xffc2ffff

080060e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0b3      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060f4:	4b5b      	ldr	r3, [pc, #364]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d911      	bls.n	8006126 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b58      	ldr	r3, [pc, #352]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2201      	movs	r2, #1
 8006108:	4393      	bics	r3, r2
 800610a:	0019      	movs	r1, r3
 800610c:	4b55      	ldr	r3, [pc, #340]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006114:	4b53      	ldr	r3, [pc, #332]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2201      	movs	r2, #1
 800611a:	4013      	ands	r3, r2
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d001      	beq.n	8006126 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e09a      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2202      	movs	r2, #2
 800612c:	4013      	ands	r3, r2
 800612e:	d015      	beq.n	800615c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2204      	movs	r2, #4
 8006136:	4013      	ands	r3, r2
 8006138:	d006      	beq.n	8006148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800613a:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006140:	21e0      	movs	r1, #224	; 0xe0
 8006142:	00c9      	lsls	r1, r1, #3
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b47      	ldr	r3, [pc, #284]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	22f0      	movs	r2, #240	; 0xf0
 800614e:	4393      	bics	r3, r2
 8006150:	0019      	movs	r1, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	4b44      	ldr	r3, [pc, #272]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	4013      	ands	r3, r2
 8006164:	d040      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	2380      	movs	r3, #128	; 0x80
 8006174:	029b      	lsls	r3, r3, #10
 8006176:	4013      	ands	r3, r2
 8006178:	d114      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e06e      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006186:	4b38      	ldr	r3, [pc, #224]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	2380      	movs	r3, #128	; 0x80
 800618c:	049b      	lsls	r3, r3, #18
 800618e:	4013      	ands	r3, r2
 8006190:	d108      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e062      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2202      	movs	r2, #2
 800619c:	4013      	ands	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e05b      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061a4:	4b30      	ldr	r3, [pc, #192]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2203      	movs	r2, #3
 80061aa:	4393      	bics	r3, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4b2d      	ldr	r3, [pc, #180]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061b8:	f7fe fbda 	bl	8004970 <HAL_GetTick>
 80061bc:	0003      	movs	r3, r0
 80061be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c0:	e009      	b.n	80061d6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c2:	f7fe fbd5 	bl	8004970 <HAL_GetTick>
 80061c6:	0002      	movs	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	4a27      	ldr	r2, [pc, #156]	; (800626c <HAL_RCC_ClockConfig+0x18c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e042      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	220c      	movs	r2, #12
 80061dc:	401a      	ands	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d1ec      	bne.n	80061c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2201      	movs	r2, #1
 80061ee:	4013      	ands	r3, r2
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d211      	bcs.n	800621a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f6:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	4393      	bics	r3, r2
 80061fe:	0019      	movs	r1, r3
 8006200:	4b18      	ldr	r3, [pc, #96]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006208:	4b16      	ldr	r3, [pc, #88]	; (8006264 <HAL_RCC_ClockConfig+0x184>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	4013      	ands	r3, r2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d001      	beq.n	800621a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e020      	b.n	800625c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2204      	movs	r2, #4
 8006220:	4013      	ands	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006224:	4b10      	ldr	r3, [pc, #64]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a11      	ldr	r2, [pc, #68]	; (8006270 <HAL_RCC_ClockConfig+0x190>)
 800622a:	4013      	ands	r3, r2
 800622c:	0019      	movs	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006238:	f000 f820 	bl	800627c <HAL_RCC_GetSysClockFreq>
 800623c:	0001      	movs	r1, r0
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <HAL_RCC_ClockConfig+0x188>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	220f      	movs	r2, #15
 8006246:	4013      	ands	r3, r2
 8006248:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <HAL_RCC_ClockConfig+0x194>)
 800624a:	5cd3      	ldrb	r3, [r2, r3]
 800624c:	000a      	movs	r2, r1
 800624e:	40da      	lsrs	r2, r3
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <HAL_RCC_ClockConfig+0x198>)
 8006252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006254:	2003      	movs	r0, #3
 8006256:	f7fe fb45 	bl	80048e4 <HAL_InitTick>
  
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	0018      	movs	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	b004      	add	sp, #16
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40022000 	.word	0x40022000
 8006268:	40021000 	.word	0x40021000
 800626c:	00001388 	.word	0x00001388
 8006270:	fffff8ff 	.word	0xfffff8ff
 8006274:	0800e818 	.word	0x0800e818
 8006278:	2000002c 	.word	0x2000002c

0800627c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	220c      	movs	r2, #12
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d002      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x30>
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d003      	beq.n	80062b2 <HAL_RCC_GetSysClockFreq+0x36>
 80062aa:	e02c      	b.n	8006306 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_RCC_GetSysClockFreq+0xa0>)
 80062ae:	613b      	str	r3, [r7, #16]
      break;
 80062b0:	e02c      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	0c9b      	lsrs	r3, r3, #18
 80062b6:	220f      	movs	r2, #15
 80062b8:	4013      	ands	r3, r2
 80062ba:	4a19      	ldr	r2, [pc, #100]	; (8006320 <HAL_RCC_GetSysClockFreq+0xa4>)
 80062bc:	5cd3      	ldrb	r3, [r2, r3]
 80062be:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80062c0:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_RCC_GetSysClockFreq+0x9c>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	220f      	movs	r2, #15
 80062c6:	4013      	ands	r3, r2
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_RCC_GetSysClockFreq+0xa8>)
 80062ca:	5cd3      	ldrb	r3, [r2, r3]
 80062cc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	025b      	lsls	r3, r3, #9
 80062d4:	4013      	ands	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4810      	ldr	r0, [pc, #64]	; (800631c <HAL_RCC_GetSysClockFreq+0xa0>)
 80062dc:	f7f9 ff3a 	bl	8000154 <__udivsi3>
 80062e0:	0003      	movs	r3, r0
 80062e2:	001a      	movs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4353      	muls	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	e009      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	000a      	movs	r2, r1
 80062f0:	0152      	lsls	r2, r2, #5
 80062f2:	1a52      	subs	r2, r2, r1
 80062f4:	0193      	lsls	r3, r2, #6
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	185b      	adds	r3, r3, r1
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	613b      	str	r3, [r7, #16]
      break;
 8006304:	e002      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006308:	613b      	str	r3, [r7, #16]
      break;
 800630a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800630c:	693b      	ldr	r3, [r7, #16]
}
 800630e:	0018      	movs	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	b006      	add	sp, #24
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	40021000 	.word	0x40021000
 800631c:	007a1200 	.word	0x007a1200
 8006320:	0800e830 	.word	0x0800e830
 8006324:	0800e840 	.word	0x0800e840

08006328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <HAL_RCC_GetHCLKFreq+0x10>)
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	0018      	movs	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	2000002c 	.word	0x2000002c

0800633c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006340:	f7ff fff2 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006344:	0001      	movs	r1, r0
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	2207      	movs	r2, #7
 800634e:	4013      	ands	r3, r2
 8006350:	4a04      	ldr	r2, [pc, #16]	; (8006364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006352:	5cd3      	ldrb	r3, [r2, r3]
 8006354:	40d9      	lsrs	r1, r3
 8006356:	000b      	movs	r3, r1
}    
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	40021000 	.word	0x40021000
 8006364:	0800e828 	.word	0x0800e828

08006368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	025b      	lsls	r3, r3, #9
 8006380:	4013      	ands	r3, r2
 8006382:	d100      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006384:	e08e      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006386:	2017      	movs	r0, #23
 8006388:	183b      	adds	r3, r7, r0
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800638e:	4b57      	ldr	r3, [pc, #348]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006390:	69da      	ldr	r2, [r3, #28]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	055b      	lsls	r3, r3, #21
 8006396:	4013      	ands	r3, r2
 8006398:	d110      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800639c:	69da      	ldr	r2, [r3, #28]
 800639e:	4b53      	ldr	r3, [pc, #332]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063a0:	2180      	movs	r1, #128	; 0x80
 80063a2:	0549      	lsls	r1, r1, #21
 80063a4:	430a      	orrs	r2, r1
 80063a6:	61da      	str	r2, [r3, #28]
 80063a8:	4b50      	ldr	r3, [pc, #320]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	055b      	lsls	r3, r3, #21
 80063b0:	4013      	ands	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b6:	183b      	adds	r3, r7, r0
 80063b8:	2201      	movs	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063bc:	4b4c      	ldr	r3, [pc, #304]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	4013      	ands	r3, r2
 80063c6:	d11a      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063c8:	4b49      	ldr	r3, [pc, #292]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b48      	ldr	r3, [pc, #288]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	0049      	lsls	r1, r1, #1
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063d6:	f7fe facb 	bl	8004970 <HAL_GetTick>
 80063da:	0003      	movs	r3, r0
 80063dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063de:	e008      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e0:	f7fe fac6 	bl	8004970 <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b64      	cmp	r3, #100	; 0x64
 80063ec:	d901      	bls.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e077      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f2:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	2380      	movs	r3, #128	; 0x80
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4013      	ands	r3, r2
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063fe:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006400:	6a1a      	ldr	r2, [r3, #32]
 8006402:	23c0      	movs	r3, #192	; 0xc0
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d034      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	23c0      	movs	r3, #192	; 0xc0
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4013      	ands	r3, r2
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	429a      	cmp	r2, r3
 800641e:	d02c      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006420:	4b32      	ldr	r3, [pc, #200]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800642a:	4b30      	ldr	r3, [pc, #192]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800642c:	6a1a      	ldr	r2, [r3, #32]
 800642e:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	0249      	lsls	r1, r1, #9
 8006434:	430a      	orrs	r2, r1
 8006436:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006438:	4b2c      	ldr	r3, [pc, #176]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800643a:	6a1a      	ldr	r2, [r3, #32]
 800643c:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800643e:	492e      	ldr	r1, [pc, #184]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006440:	400a      	ands	r2, r1
 8006442:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006444:	4b29      	ldr	r3, [pc, #164]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	4013      	ands	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006452:	f7fe fa8d 	bl	8004970 <HAL_GetTick>
 8006456:	0003      	movs	r3, r0
 8006458:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645a:	e009      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645c:	f7fe fa88 	bl	8004970 <HAL_GetTick>
 8006460:	0002      	movs	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	4a25      	ldr	r2, [pc, #148]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e038      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006470:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	2202      	movs	r2, #2
 8006476:	4013      	ands	r3, r2
 8006478:	d0f0      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800647a:	4b1c      	ldr	r3, [pc, #112]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006480:	4013      	ands	r3, r2
 8006482:	0019      	movs	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	4b18      	ldr	r3, [pc, #96]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800648a:	430a      	orrs	r2, r1
 800648c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800648e:	2317      	movs	r3, #23
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006498:	4b14      	ldr	r3, [pc, #80]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	4b13      	ldr	r3, [pc, #76]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800649e:	4918      	ldr	r1, [pc, #96]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80064a0:	400a      	ands	r2, r1
 80064a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	4013      	ands	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	2203      	movs	r2, #3
 80064b4:	4393      	bics	r3, r2
 80064b6:	0019      	movs	r1, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064be:	430a      	orrs	r2, r1
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2220      	movs	r2, #32
 80064c8:	4013      	ands	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	2210      	movs	r2, #16
 80064d2:	4393      	bics	r3, r2
 80064d4:	0019      	movs	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	4b04      	ldr	r3, [pc, #16]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064dc:	430a      	orrs	r2, r1
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b006      	add	sp, #24
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40007000 	.word	0x40007000
 80064f4:	fffffcff 	.word	0xfffffcff
 80064f8:	fffeffff 	.word	0xfffeffff
 80064fc:	00001388 	.word	0x00001388
 8006500:	efffffff 	.word	0xefffffff

08006504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e042      	b.n	800659c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	223d      	movs	r2, #61	; 0x3d
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	223c      	movs	r2, #60	; 0x3c
 8006526:	2100      	movs	r1, #0
 8006528:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	0018      	movs	r0, r3
 800652e:	f7fd ff3f 	bl	80043b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	223d      	movs	r2, #61	; 0x3d
 8006536:	2102      	movs	r1, #2
 8006538:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3304      	adds	r3, #4
 8006542:	0019      	movs	r1, r3
 8006544:	0010      	movs	r0, r2
 8006546:	f000 ff0f 	bl	8007368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2246      	movs	r2, #70	; 0x46
 800654e:	2101      	movs	r1, #1
 8006550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	223e      	movs	r2, #62	; 0x3e
 8006556:	2101      	movs	r1, #1
 8006558:	5499      	strb	r1, [r3, r2]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	223f      	movs	r2, #63	; 0x3f
 800655e:	2101      	movs	r1, #1
 8006560:	5499      	strb	r1, [r3, r2]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2240      	movs	r2, #64	; 0x40
 8006566:	2101      	movs	r1, #1
 8006568:	5499      	strb	r1, [r3, r2]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2241      	movs	r2, #65	; 0x41
 800656e:	2101      	movs	r1, #1
 8006570:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2242      	movs	r2, #66	; 0x42
 8006576:	2101      	movs	r1, #1
 8006578:	5499      	strb	r1, [r3, r2]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2243      	movs	r2, #67	; 0x43
 800657e:	2101      	movs	r1, #1
 8006580:	5499      	strb	r1, [r3, r2]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2244      	movs	r2, #68	; 0x44
 8006586:	2101      	movs	r1, #1
 8006588:	5499      	strb	r1, [r3, r2]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2245      	movs	r2, #69	; 0x45
 800658e:	2101      	movs	r1, #1
 8006590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	223d      	movs	r2, #61	; 0x3d
 8006596:	2101      	movs	r1, #1
 8006598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	223d      	movs	r2, #61	; 0x3d
 80065b0:	5c9b      	ldrb	r3, [r3, r2]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d001      	beq.n	80065bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e02d      	b.n	8006618 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	223d      	movs	r2, #61	; 0x3d
 80065c0:	2102      	movs	r1, #2
 80065c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <HAL_TIM_Base_Start+0x7c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_TIM_Base_Start+0x3e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a14      	ldr	r2, [pc, #80]	; (8006624 <HAL_TIM_Base_Start+0x80>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIM_Base_Start+0x3e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a12      	ldr	r2, [pc, #72]	; (8006628 <HAL_TIM_Base_Start+0x84>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d111      	bne.n	8006606 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2207      	movs	r2, #7
 80065ea:	4013      	ands	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b06      	cmp	r3, #6
 80065f2:	d010      	beq.n	8006616 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2101      	movs	r1, #1
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006604:	e007      	b.n	8006616 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2101      	movs	r1, #1
 8006612:	430a      	orrs	r2, r1
 8006614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	0018      	movs	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	b004      	add	sp, #16
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40000400 	.word	0x40000400
 8006628:	40014000 	.word	0x40014000

0800662c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	4a0d      	ldr	r2, [pc, #52]	; (8006670 <HAL_TIM_Base_Stop+0x44>)
 800663c:	4013      	ands	r3, r2
 800663e:	d10d      	bne.n	800665c <HAL_TIM_Base_Stop+0x30>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	4a0b      	ldr	r2, [pc, #44]	; (8006674 <HAL_TIM_Base_Stop+0x48>)
 8006648:	4013      	ands	r3, r2
 800664a:	d107      	bne.n	800665c <HAL_TIM_Base_Stop+0x30>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2101      	movs	r1, #1
 8006658:	438a      	bics	r2, r1
 800665a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	223d      	movs	r2, #61	; 0x3d
 8006660:	2101      	movs	r1, #1
 8006662:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	0018      	movs	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	b002      	add	sp, #8
 800666c:	bd80      	pop	{r7, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	00001111 	.word	0x00001111
 8006674:	00000444 	.word	0x00000444

08006678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	223d      	movs	r2, #61	; 0x3d
 8006684:	5c9b      	ldrb	r3, [r3, r2]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e035      	b.n	80066fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	223d      	movs	r2, #61	; 0x3d
 8006694:	2102      	movs	r1, #2
 8006696:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a15      	ldr	r2, [pc, #84]	; (8006704 <HAL_TIM_Base_Start_IT+0x8c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d009      	beq.n	80066c6 <HAL_TIM_Base_Start_IT+0x4e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <HAL_TIM_Base_Start_IT+0x90>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_TIM_Base_Start_IT+0x4e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <HAL_TIM_Base_Start_IT+0x94>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d111      	bne.n	80066ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2207      	movs	r2, #7
 80066ce:	4013      	ands	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d010      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2101      	movs	r1, #1
 80066e4:	430a      	orrs	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e8:	e007      	b.n	80066fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2101      	movs	r1, #1
 80066f6:	430a      	orrs	r2, r1
 80066f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b004      	add	sp, #16
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40000400 	.word	0x40000400
 800670c:	40014000 	.word	0x40014000

08006710 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2101      	movs	r1, #1
 8006724:	438a      	bics	r2, r1
 8006726:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	4a0d      	ldr	r2, [pc, #52]	; (8006764 <HAL_TIM_Base_Stop_IT+0x54>)
 8006730:	4013      	ands	r3, r2
 8006732:	d10d      	bne.n	8006750 <HAL_TIM_Base_Stop_IT+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <HAL_TIM_Base_Stop_IT+0x58>)
 800673c:	4013      	ands	r3, r2
 800673e:	d107      	bne.n	8006750 <HAL_TIM_Base_Stop_IT+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2101      	movs	r1, #1
 800674c:	438a      	bics	r2, r1
 800674e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	223d      	movs	r2, #61	; 0x3d
 8006754:	2101      	movs	r1, #1
 8006756:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b002      	add	sp, #8
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	00001111 	.word	0x00001111
 8006768:	00000444 	.word	0x00000444

0800676c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e042      	b.n	8006804 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	223d      	movs	r2, #61	; 0x3d
 8006782:	5c9b      	ldrb	r3, [r3, r2]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d107      	bne.n	800679a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	223c      	movs	r2, #60	; 0x3c
 800678e:	2100      	movs	r1, #0
 8006790:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f839 	bl	800680c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	223d      	movs	r2, #61	; 0x3d
 800679e:	2102      	movs	r1, #2
 80067a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	0019      	movs	r1, r3
 80067ac:	0010      	movs	r0, r2
 80067ae:	f000 fddb 	bl	8007368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2246      	movs	r2, #70	; 0x46
 80067b6:	2101      	movs	r1, #1
 80067b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	223e      	movs	r2, #62	; 0x3e
 80067be:	2101      	movs	r1, #1
 80067c0:	5499      	strb	r1, [r3, r2]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	223f      	movs	r2, #63	; 0x3f
 80067c6:	2101      	movs	r1, #1
 80067c8:	5499      	strb	r1, [r3, r2]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	2101      	movs	r1, #1
 80067d0:	5499      	strb	r1, [r3, r2]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2241      	movs	r2, #65	; 0x41
 80067d6:	2101      	movs	r1, #1
 80067d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2242      	movs	r2, #66	; 0x42
 80067de:	2101      	movs	r1, #1
 80067e0:	5499      	strb	r1, [r3, r2]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2243      	movs	r2, #67	; 0x43
 80067e6:	2101      	movs	r1, #1
 80067e8:	5499      	strb	r1, [r3, r2]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2244      	movs	r2, #68	; 0x44
 80067ee:	2101      	movs	r1, #1
 80067f0:	5499      	strb	r1, [r3, r2]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2245      	movs	r2, #69	; 0x45
 80067f6:	2101      	movs	r1, #1
 80067f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	223d      	movs	r2, #61	; 0x3d
 80067fe:	2101      	movs	r1, #1
 8006800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b002      	add	sp, #8
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <HAL_TIM_OC_Start+0x22>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	223e      	movs	r2, #62	; 0x3e
 8006830:	5c9b      	ldrb	r3, [r3, r2]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	1e5a      	subs	r2, r3, #1
 8006838:	4193      	sbcs	r3, r2
 800683a:	b2db      	uxtb	r3, r3
 800683c:	e01f      	b.n	800687e <HAL_TIM_OC_Start+0x62>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d108      	bne.n	8006856 <HAL_TIM_OC_Start+0x3a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	223f      	movs	r2, #63	; 0x3f
 8006848:	5c9b      	ldrb	r3, [r3, r2]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	1e5a      	subs	r2, r3, #1
 8006850:	4193      	sbcs	r3, r2
 8006852:	b2db      	uxtb	r3, r3
 8006854:	e013      	b.n	800687e <HAL_TIM_OC_Start+0x62>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d108      	bne.n	800686e <HAL_TIM_OC_Start+0x52>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	4193      	sbcs	r3, r2
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e007      	b.n	800687e <HAL_TIM_OC_Start+0x62>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2241      	movs	r2, #65	; 0x41
 8006872:	5c9b      	ldrb	r3, [r3, r2]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	1e5a      	subs	r2, r3, #1
 800687a:	4193      	sbcs	r3, r2
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e06e      	b.n	8006964 <HAL_TIM_OC_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_TIM_OC_Start+0x7a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	223e      	movs	r2, #62	; 0x3e
 8006890:	2102      	movs	r1, #2
 8006892:	5499      	strb	r1, [r3, r2]
 8006894:	e013      	b.n	80068be <HAL_TIM_OC_Start+0xa2>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_OC_Start+0x8a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	223f      	movs	r2, #63	; 0x3f
 80068a0:	2102      	movs	r1, #2
 80068a2:	5499      	strb	r1, [r3, r2]
 80068a4:	e00b      	b.n	80068be <HAL_TIM_OC_Start+0xa2>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_OC_Start+0x9a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	2102      	movs	r1, #2
 80068b2:	5499      	strb	r1, [r3, r2]
 80068b4:	e003      	b.n	80068be <HAL_TIM_OC_Start+0xa2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2241      	movs	r2, #65	; 0x41
 80068ba:	2102      	movs	r1, #2
 80068bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	0018      	movs	r0, r3
 80068c8:	f001 f8ec 	bl	8007aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a26      	ldr	r2, [pc, #152]	; (800696c <HAL_TIM_OC_Start+0x150>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00e      	beq.n	80068f4 <HAL_TIM_OC_Start+0xd8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a25      	ldr	r2, [pc, #148]	; (8006970 <HAL_TIM_OC_Start+0x154>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d009      	beq.n	80068f4 <HAL_TIM_OC_Start+0xd8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	; (8006974 <HAL_TIM_OC_Start+0x158>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <HAL_TIM_OC_Start+0xd8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a22      	ldr	r2, [pc, #136]	; (8006978 <HAL_TIM_OC_Start+0x15c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_OC_Start+0xdc>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <HAL_TIM_OC_Start+0xde>
 80068f8:	2300      	movs	r3, #0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	0209      	lsls	r1, r1, #8
 800690c:	430a      	orrs	r2, r1
 800690e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a15      	ldr	r2, [pc, #84]	; (800696c <HAL_TIM_OC_Start+0x150>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d009      	beq.n	800692e <HAL_TIM_OC_Start+0x112>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a17      	ldr	r2, [pc, #92]	; (800697c <HAL_TIM_OC_Start+0x160>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_TIM_OC_Start+0x112>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a11      	ldr	r2, [pc, #68]	; (8006970 <HAL_TIM_OC_Start+0x154>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d111      	bne.n	8006952 <HAL_TIM_OC_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2207      	movs	r2, #7
 8006936:	4013      	ands	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b06      	cmp	r3, #6
 800693e:	d010      	beq.n	8006962 <HAL_TIM_OC_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2101      	movs	r1, #1
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006950:	e007      	b.n	8006962 <HAL_TIM_OC_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2101      	movs	r1, #1
 800695e:	430a      	orrs	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	0018      	movs	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	b004      	add	sp, #16
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800
 800697c:	40000400 	.word	0x40000400

08006980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e042      	b.n	8006a18 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	223d      	movs	r2, #61	; 0x3d
 8006996:	5c9b      	ldrb	r3, [r3, r2]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d107      	bne.n	80069ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	223c      	movs	r2, #60	; 0x3c
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 f839 	bl	8006a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	223d      	movs	r2, #61	; 0x3d
 80069b2:	2102      	movs	r1, #2
 80069b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	0019      	movs	r1, r3
 80069c0:	0010      	movs	r0, r2
 80069c2:	f000 fcd1 	bl	8007368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2246      	movs	r2, #70	; 0x46
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	223e      	movs	r2, #62	; 0x3e
 80069d2:	2101      	movs	r1, #1
 80069d4:	5499      	strb	r1, [r3, r2]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	223f      	movs	r2, #63	; 0x3f
 80069da:	2101      	movs	r1, #1
 80069dc:	5499      	strb	r1, [r3, r2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2240      	movs	r2, #64	; 0x40
 80069e2:	2101      	movs	r1, #1
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2241      	movs	r2, #65	; 0x41
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2242      	movs	r2, #66	; 0x42
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2243      	movs	r2, #67	; 0x43
 80069fa:	2101      	movs	r1, #1
 80069fc:	5499      	strb	r1, [r3, r2]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2244      	movs	r2, #68	; 0x44
 8006a02:	2101      	movs	r1, #1
 8006a04:	5499      	strb	r1, [r3, r2]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2245      	movs	r2, #69	; 0x45
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	223d      	movs	r2, #61	; 0x3d
 8006a12:	2101      	movs	r1, #1
 8006a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	0018      	movs	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b002      	add	sp, #8
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d108      	bne.n	8006a52 <HAL_TIM_PWM_Start+0x22>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	223e      	movs	r2, #62	; 0x3e
 8006a44:	5c9b      	ldrb	r3, [r3, r2]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	1e5a      	subs	r2, r3, #1
 8006a4c:	4193      	sbcs	r3, r2
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e01f      	b.n	8006a92 <HAL_TIM_PWM_Start+0x62>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d108      	bne.n	8006a6a <HAL_TIM_PWM_Start+0x3a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	223f      	movs	r2, #63	; 0x3f
 8006a5c:	5c9b      	ldrb	r3, [r3, r2]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	1e5a      	subs	r2, r3, #1
 8006a64:	4193      	sbcs	r3, r2
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e013      	b.n	8006a92 <HAL_TIM_PWM_Start+0x62>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d108      	bne.n	8006a82 <HAL_TIM_PWM_Start+0x52>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	5c9b      	ldrb	r3, [r3, r2]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	1e5a      	subs	r2, r3, #1
 8006a7c:	4193      	sbcs	r3, r2
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	e007      	b.n	8006a92 <HAL_TIM_PWM_Start+0x62>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2241      	movs	r2, #65	; 0x41
 8006a86:	5c9b      	ldrb	r3, [r3, r2]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	4193      	sbcs	r3, r2
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e06e      	b.n	8006b78 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <HAL_TIM_PWM_Start+0x7a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	223e      	movs	r2, #62	; 0x3e
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	5499      	strb	r1, [r3, r2]
 8006aa8:	e013      	b.n	8006ad2 <HAL_TIM_PWM_Start+0xa2>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d104      	bne.n	8006aba <HAL_TIM_PWM_Start+0x8a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	223f      	movs	r2, #63	; 0x3f
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	5499      	strb	r1, [r3, r2]
 8006ab8:	e00b      	b.n	8006ad2 <HAL_TIM_PWM_Start+0xa2>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d104      	bne.n	8006aca <HAL_TIM_PWM_Start+0x9a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2240      	movs	r2, #64	; 0x40
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	5499      	strb	r1, [r3, r2]
 8006ac8:	e003      	b.n	8006ad2 <HAL_TIM_PWM_Start+0xa2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2241      	movs	r2, #65	; 0x41
 8006ace:	2102      	movs	r1, #2
 8006ad0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 ffe2 	bl	8007aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <HAL_TIM_PWM_Start+0x150>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00e      	beq.n	8006b08 <HAL_TIM_PWM_Start+0xd8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a25      	ldr	r2, [pc, #148]	; (8006b84 <HAL_TIM_PWM_Start+0x154>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_TIM_PWM_Start+0xd8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <HAL_TIM_PWM_Start+0x158>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_TIM_PWM_Start+0xd8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <HAL_TIM_PWM_Start+0x15c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_PWM_Start+0xdc>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <HAL_TIM_PWM_Start+0xde>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d008      	beq.n	8006b24 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2180      	movs	r1, #128	; 0x80
 8006b1e:	0209      	lsls	r1, r1, #8
 8006b20:	430a      	orrs	r2, r1
 8006b22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <HAL_TIM_PWM_Start+0x150>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x112>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <HAL_TIM_PWM_Start+0x160>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x112>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a11      	ldr	r2, [pc, #68]	; (8006b84 <HAL_TIM_PWM_Start+0x154>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d111      	bne.n	8006b66 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2207      	movs	r2, #7
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d010      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2101      	movs	r1, #1
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b64:	e007      	b.n	8006b76 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2101      	movs	r1, #1
 8006b72:	430a      	orrs	r2, r1
 8006b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b004      	add	sp, #16
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800
 8006b90:	40000400 	.word	0x40000400

08006b94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f000 ff7c 	bl	8007aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <HAL_TIM_PWM_Stop+0xdc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_TIM_PWM_Stop+0x40>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <HAL_TIM_PWM_Stop+0xe0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d009      	beq.n	8006bd4 <HAL_TIM_PWM_Stop+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <HAL_TIM_PWM_Stop+0xe4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <HAL_TIM_PWM_Stop+0x40>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2b      	ldr	r2, [pc, #172]	; (8006c7c <HAL_TIM_PWM_Stop+0xe8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d101      	bne.n	8006bd8 <HAL_TIM_PWM_Stop+0x44>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <HAL_TIM_PWM_Stop+0x46>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <HAL_TIM_PWM_Stop+0xec>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	d10d      	bne.n	8006c06 <HAL_TIM_PWM_Stop+0x72>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <HAL_TIM_PWM_Stop+0xf0>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d107      	bne.n	8006c06 <HAL_TIM_PWM_Stop+0x72>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4921      	ldr	r1, [pc, #132]	; (8006c88 <HAL_TIM_PWM_Stop+0xf4>)
 8006c02:	400a      	ands	r2, r1
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	; (8006c80 <HAL_TIM_PWM_Stop+0xec>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d10d      	bne.n	8006c2e <HAL_TIM_PWM_Stop+0x9a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <HAL_TIM_PWM_Stop+0xf0>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d107      	bne.n	8006c2e <HAL_TIM_PWM_Stop+0x9a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2101      	movs	r1, #1
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_PWM_Stop+0xaa>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	223e      	movs	r2, #62	; 0x3e
 8006c38:	2101      	movs	r1, #1
 8006c3a:	5499      	strb	r1, [r3, r2]
 8006c3c:	e013      	b.n	8006c66 <HAL_TIM_PWM_Stop+0xd2>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_PWM_Stop+0xba>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	223f      	movs	r2, #63	; 0x3f
 8006c48:	2101      	movs	r1, #1
 8006c4a:	5499      	strb	r1, [r3, r2]
 8006c4c:	e00b      	b.n	8006c66 <HAL_TIM_PWM_Stop+0xd2>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Stop+0xca>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2240      	movs	r2, #64	; 0x40
 8006c58:	2101      	movs	r1, #1
 8006c5a:	5499      	strb	r1, [r3, r2]
 8006c5c:	e003      	b.n	8006c66 <HAL_TIM_PWM_Stop+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2241      	movs	r2, #65	; 0x41
 8006c62:	2101      	movs	r1, #1
 8006c64:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800
 8006c80:	00001111 	.word	0x00001111
 8006c84:	00000444 	.word	0x00000444
 8006c88:	ffff7fff 	.word	0xffff7fff

08006c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d124      	bne.n	8006cec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d11d      	bne.n	8006cec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	4252      	negs	r2, r2
 8006cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 fb32 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e007      	b.n	8006ce6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f000 fb25 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 fb31 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d125      	bne.n	8006d46 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2204      	movs	r2, #4
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d11e      	bne.n	8006d46 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	4252      	negs	r2, r2
 8006d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	23c0      	movs	r3, #192	; 0xc0
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4013      	ands	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 fb05 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006d2e:	e007      	b.n	8006d40 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 faf8 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f000 fb04 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d124      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d11d      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2209      	movs	r2, #9
 8006d68:	4252      	negs	r2, r2
 8006d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2203      	movs	r2, #3
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 fad9 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006d86:	e007      	b.n	8006d98 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 facc 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f000 fad8 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2210      	movs	r2, #16
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d125      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2210      	movs	r2, #16
 8006db4:	4013      	ands	r3, r2
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d11e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2211      	movs	r2, #17
 8006dc0:	4252      	negs	r2, r2
 8006dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	23c0      	movs	r3, #192	; 0xc0
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f000 faac 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006de0:	e007      	b.n	8006df2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f000 fa9f 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 faab 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10f      	bne.n	8006e26 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d108      	bne.n	8006e26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	4252      	negs	r2, r2
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7fb ff55 	bl	8002cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2280      	movs	r2, #128	; 0x80
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b80      	cmp	r3, #128	; 0x80
 8006e32:	d10f      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2280      	movs	r2, #128	; 0x80
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b80      	cmp	r3, #128	; 0x80
 8006e40:	d108      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2281      	movs	r2, #129	; 0x81
 8006e48:	4252      	negs	r2, r2
 8006e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f000 ff0a 	bl	8007c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2240      	movs	r2, #64	; 0x40
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b40      	cmp	r3, #64	; 0x40
 8006e60:	d10f      	bne.n	8006e82 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d108      	bne.n	8006e82 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2241      	movs	r2, #65	; 0x41
 8006e76:	4252      	negs	r2, r2
 8006e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 fa6b 	bl	8007358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d10f      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d108      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2221      	movs	r2, #33	; 0x21
 8006ea4:	4252      	negs	r2, r2
 8006ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 fed4 	bl	8007c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2317      	movs	r3, #23
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	223c      	movs	r2, #60	; 0x3c
 8006ed0:	5c9b      	ldrb	r3, [r3, r2]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_TIM_OC_ConfigChannel+0x22>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e042      	b.n	8006f60 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	223c      	movs	r2, #60	; 0x3c
 8006ede:	2101      	movs	r1, #1
 8006ee0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d027      	beq.n	8006f38 <HAL_TIM_OC_ConfigChannel+0x80>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d82c      	bhi.n	8006f48 <HAL_TIM_OC_ConfigChannel+0x90>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d019      	beq.n	8006f28 <HAL_TIM_OC_ConfigChannel+0x70>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d826      	bhi.n	8006f48 <HAL_TIM_OC_ConfigChannel+0x90>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_TIM_OC_ConfigChannel+0x50>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d008      	beq.n	8006f18 <HAL_TIM_OC_ConfigChannel+0x60>
 8006f06:	e01f      	b.n	8006f48 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fa9f 	bl	8007454 <TIM_OC1_SetConfig>
      break;
 8006f16:	e01c      	b.n	8006f52 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	0011      	movs	r1, r2
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 fb1f 	bl	8007564 <TIM_OC2_SetConfig>
      break;
 8006f26:	e014      	b.n	8006f52 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f000 fb9b 	bl	800766c <TIM_OC3_SetConfig>
      break;
 8006f36:	e00c      	b.n	8006f52 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	0011      	movs	r1, r2
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 fc19 	bl	8007778 <TIM_OC4_SetConfig>
      break;
 8006f46:	e004      	b.n	8006f52 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006f48:	2317      	movs	r3, #23
 8006f4a:	18fb      	adds	r3, r7, r3
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]
      break;
 8006f50:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	223c      	movs	r2, #60	; 0x3c
 8006f56:	2100      	movs	r1, #0
 8006f58:	5499      	strb	r1, [r3, r2]

  return status;
 8006f5a:	2317      	movs	r3, #23
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	781b      	ldrb	r3, [r3, #0]
}
 8006f60:	0018      	movs	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b006      	add	sp, #24
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f74:	2317      	movs	r3, #23
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	223c      	movs	r2, #60	; 0x3c
 8006f80:	5c9b      	ldrb	r3, [r3, r2]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e0ad      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	223c      	movs	r2, #60	; 0x3c
 8006f8e:	2101      	movs	r1, #1
 8006f90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b0c      	cmp	r3, #12
 8006f96:	d100      	bne.n	8006f9a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006f98:	e076      	b.n	8007088 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	d900      	bls.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006fa0:	e095      	b.n	80070ce <HAL_TIM_PWM_ConfigChannel+0x166>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d04e      	beq.n	8007046 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b08      	cmp	r3, #8
 8006fac:	d900      	bls.n	8006fb0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006fae:	e08e      	b.n	80070ce <HAL_TIM_PWM_ConfigChannel+0x166>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_TIM_PWM_ConfigChannel+0x56>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d021      	beq.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006fbc:	e087      	b.n	80070ce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	0011      	movs	r1, r2
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 fa44 	bl	8007454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2108      	movs	r1, #8
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2104      	movs	r1, #4
 8006fe8:	438a      	bics	r2, r1
 8006fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6999      	ldr	r1, [r3, #24]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	619a      	str	r2, [r3, #24]
      break;
 8006ffe:	e06b      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	0011      	movs	r1, r2
 8007008:	0018      	movs	r0, r3
 800700a:	f000 faab 	bl	8007564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699a      	ldr	r2, [r3, #24]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2180      	movs	r1, #128	; 0x80
 800701a:	0109      	lsls	r1, r1, #4
 800701c:	430a      	orrs	r2, r1
 800701e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4931      	ldr	r1, [pc, #196]	; (80070f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800702c:	400a      	ands	r2, r1
 800702e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6999      	ldr	r1, [r3, #24]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	021a      	lsls	r2, r3, #8
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	619a      	str	r2, [r3, #24]
      break;
 8007044:	e048      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f000 fb0c 	bl	800766c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69da      	ldr	r2, [r3, #28]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2108      	movs	r1, #8
 8007060:	430a      	orrs	r2, r1
 8007062:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2104      	movs	r1, #4
 8007070:	438a      	bics	r2, r1
 8007072:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69d9      	ldr	r1, [r3, #28]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	61da      	str	r2, [r3, #28]
      break;
 8007086:	e027      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	0011      	movs	r1, r2
 8007090:	0018      	movs	r0, r3
 8007092:	f000 fb71 	bl	8007778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2180      	movs	r1, #128	; 0x80
 80070a2:	0109      	lsls	r1, r1, #4
 80070a4:	430a      	orrs	r2, r1
 80070a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69da      	ldr	r2, [r3, #28]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	490f      	ldr	r1, [pc, #60]	; (80070f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80070b4:	400a      	ands	r2, r1
 80070b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69d9      	ldr	r1, [r3, #28]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	021a      	lsls	r2, r3, #8
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	61da      	str	r2, [r3, #28]
      break;
 80070cc:	e004      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80070ce:	2317      	movs	r3, #23
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
      break;
 80070d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	223c      	movs	r2, #60	; 0x3c
 80070dc:	2100      	movs	r1, #0
 80070de:	5499      	strb	r1, [r3, r2]

  return status;
 80070e0:	2317      	movs	r3, #23
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	781b      	ldrb	r3, [r3, #0]
}
 80070e6:	0018      	movs	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b006      	add	sp, #24
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	fffffbff 	.word	0xfffffbff

080070f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070fe:	230f      	movs	r3, #15
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	223c      	movs	r2, #60	; 0x3c
 800710a:	5c9b      	ldrb	r3, [r3, r2]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIM_ConfigClockSource+0x20>
 8007110:	2302      	movs	r3, #2
 8007112:	e0bc      	b.n	800728e <HAL_TIM_ConfigClockSource+0x19a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	223c      	movs	r2, #60	; 0x3c
 8007118:	2101      	movs	r1, #1
 800711a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	223d      	movs	r2, #61	; 0x3d
 8007120:	2102      	movs	r1, #2
 8007122:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2277      	movs	r2, #119	; 0x77
 8007130:	4393      	bics	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4a58      	ldr	r2, [pc, #352]	; (8007298 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007138:	4013      	ands	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	0192      	lsls	r2, r2, #6
 800714c:	4293      	cmp	r3, r2
 800714e:	d040      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0xde>
 8007150:	2280      	movs	r2, #128	; 0x80
 8007152:	0192      	lsls	r2, r2, #6
 8007154:	4293      	cmp	r3, r2
 8007156:	d900      	bls.n	800715a <HAL_TIM_ConfigClockSource+0x66>
 8007158:	e088      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 800715a:	2280      	movs	r2, #128	; 0x80
 800715c:	0152      	lsls	r2, r2, #5
 800715e:	4293      	cmp	r3, r2
 8007160:	d100      	bne.n	8007164 <HAL_TIM_ConfigClockSource+0x70>
 8007162:	e088      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x182>
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	0152      	lsls	r2, r2, #5
 8007168:	4293      	cmp	r3, r2
 800716a:	d900      	bls.n	800716e <HAL_TIM_ConfigClockSource+0x7a>
 800716c:	e07e      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 800716e:	2b70      	cmp	r3, #112	; 0x70
 8007170:	d018      	beq.n	80071a4 <HAL_TIM_ConfigClockSource+0xb0>
 8007172:	d900      	bls.n	8007176 <HAL_TIM_ConfigClockSource+0x82>
 8007174:	e07a      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 8007176:	2b60      	cmp	r3, #96	; 0x60
 8007178:	d04f      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x126>
 800717a:	d900      	bls.n	800717e <HAL_TIM_ConfigClockSource+0x8a>
 800717c:	e076      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 800717e:	2b50      	cmp	r3, #80	; 0x50
 8007180:	d03b      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x106>
 8007182:	d900      	bls.n	8007186 <HAL_TIM_ConfigClockSource+0x92>
 8007184:	e072      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d057      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x146>
 800718a:	d900      	bls.n	800718e <HAL_TIM_ConfigClockSource+0x9a>
 800718c:	e06e      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 800718e:	2b30      	cmp	r3, #48	; 0x30
 8007190:	d063      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x166>
 8007192:	d86b      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d060      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x166>
 8007198:	d868      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x178>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d05d      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x166>
 800719e:	2b10      	cmp	r3, #16
 80071a0:	d05b      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x166>
 80071a2:	e063      	b.n	800726c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6899      	ldr	r1, [r3, #8]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f000 fc56 	bl	8007a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2277      	movs	r2, #119	; 0x77
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	609a      	str	r2, [r3, #8]
      break;
 80071d0:	e052      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6899      	ldr	r1, [r3, #8]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f000 fc3f 	bl	8007a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2180      	movs	r1, #128	; 0x80
 80071f2:	01c9      	lsls	r1, r1, #7
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
      break;
 80071f8:	e03e      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6859      	ldr	r1, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	001a      	movs	r2, r3
 8007208:	f000 fbb2 	bl	8007970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2150      	movs	r1, #80	; 0x50
 8007212:	0018      	movs	r0, r3
 8007214:	f000 fc0c 	bl	8007a30 <TIM_ITRx_SetConfig>
      break;
 8007218:	e02e      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	001a      	movs	r2, r3
 8007228:	f000 fbd0 	bl	80079cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2160      	movs	r1, #96	; 0x60
 8007232:	0018      	movs	r0, r3
 8007234:	f000 fbfc 	bl	8007a30 <TIM_ITRx_SetConfig>
      break;
 8007238:	e01e      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	001a      	movs	r2, r3
 8007248:	f000 fb92 	bl	8007970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2140      	movs	r1, #64	; 0x40
 8007252:	0018      	movs	r0, r3
 8007254:	f000 fbec 	bl	8007a30 <TIM_ITRx_SetConfig>
      break;
 8007258:	e00e      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	0019      	movs	r1, r3
 8007264:	0010      	movs	r0, r2
 8007266:	f000 fbe3 	bl	8007a30 <TIM_ITRx_SetConfig>
      break;
 800726a:	e005      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800726c:	230f      	movs	r3, #15
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	2201      	movs	r2, #1
 8007272:	701a      	strb	r2, [r3, #0]
      break;
 8007274:	e000      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007276:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	223d      	movs	r2, #61	; 0x3d
 800727c:	2101      	movs	r1, #1
 800727e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	223c      	movs	r2, #60	; 0x3c
 8007284:	2100      	movs	r1, #0
 8007286:	5499      	strb	r1, [r3, r2]

  return status;
 8007288:	230f      	movs	r3, #15
 800728a:	18fb      	adds	r3, r7, r3
 800728c:	781b      	ldrb	r3, [r3, #0]
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b004      	add	sp, #16
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	ffff00ff 	.word	0xffff00ff

0800729c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	223c      	movs	r2, #60	; 0x3c
 80072aa:	5c9b      	ldrb	r3, [r3, r2]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e032      	b.n	800731a <HAL_TIM_SlaveConfigSynchro+0x7e>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	223c      	movs	r2, #60	; 0x3c
 80072b8:	2101      	movs	r1, #1
 80072ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	223d      	movs	r2, #61	; 0x3d
 80072c0:	2102      	movs	r1, #2
 80072c2:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0011      	movs	r1, r2
 80072ca:	0018      	movs	r0, r3
 80072cc:	f000 fabe 	bl	800784c <TIM_SlaveTimer_SetConfig>
 80072d0:	1e03      	subs	r3, r0, #0
 80072d2:	d009      	beq.n	80072e8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	223d      	movs	r2, #61	; 0x3d
 80072d8:	2101      	movs	r1, #1
 80072da:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	223c      	movs	r2, #60	; 0x3c
 80072e0:	2100      	movs	r1, #0
 80072e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e018      	b.n	800731a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2140      	movs	r1, #64	; 0x40
 80072f4:	438a      	bics	r2, r1
 80072f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4908      	ldr	r1, [pc, #32]	; (8007324 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8007304:	400a      	ands	r2, r1
 8007306:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	223d      	movs	r2, #61	; 0x3d
 800730c:	2101      	movs	r1, #1
 800730e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	223c      	movs	r2, #60	; 0x3c
 8007314:	2100      	movs	r1, #0
 8007316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	0018      	movs	r0, r3
 800731c:	46bd      	mov	sp, r7
 800731e:	b002      	add	sp, #8
 8007320:	bd80      	pop	{r7, pc}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	ffffbfff 	.word	0xffffbfff

08007328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007330:	46c0      	nop			; (mov r8, r8)
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007340:	46c0      	nop			; (mov r8, r8)
 8007342:	46bd      	mov	sp, r7
 8007344:	b002      	add	sp, #8
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b002      	add	sp, #8
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007360:	46c0      	nop			; (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b002      	add	sp, #8
 8007366:	bd80      	pop	{r7, pc}

08007368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <TIM_Base_SetConfig+0xd0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_Base_SetConfig+0x20>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a2e      	ldr	r2, [pc, #184]	; (800743c <TIM_Base_SetConfig+0xd4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d108      	bne.n	800739a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2270      	movs	r2, #112	; 0x70
 800738c:	4393      	bics	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a26      	ldr	r2, [pc, #152]	; (8007438 <TIM_Base_SetConfig+0xd0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <TIM_Base_SetConfig+0x62>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a25      	ldr	r2, [pc, #148]	; (800743c <TIM_Base_SetConfig+0xd4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00f      	beq.n	80073ca <TIM_Base_SetConfig+0x62>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a24      	ldr	r2, [pc, #144]	; (8007440 <TIM_Base_SetConfig+0xd8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <TIM_Base_SetConfig+0x62>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a23      	ldr	r2, [pc, #140]	; (8007444 <TIM_Base_SetConfig+0xdc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <TIM_Base_SetConfig+0x62>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a22      	ldr	r2, [pc, #136]	; (8007448 <TIM_Base_SetConfig+0xe0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_Base_SetConfig+0x62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a21      	ldr	r2, [pc, #132]	; (800744c <TIM_Base_SetConfig+0xe4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d108      	bne.n	80073dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a20      	ldr	r2, [pc, #128]	; (8007450 <TIM_Base_SetConfig+0xe8>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2280      	movs	r2, #128	; 0x80
 80073e0:	4393      	bics	r3, r2
 80073e2:	001a      	movs	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a0c      	ldr	r2, [pc, #48]	; (8007438 <TIM_Base_SetConfig+0xd0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00b      	beq.n	8007422 <TIM_Base_SetConfig+0xba>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <TIM_Base_SetConfig+0xdc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <TIM_Base_SetConfig+0xba>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a0c      	ldr	r2, [pc, #48]	; (8007448 <TIM_Base_SetConfig+0xe0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_Base_SetConfig+0xba>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a0b      	ldr	r2, [pc, #44]	; (800744c <TIM_Base_SetConfig+0xe4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d103      	bne.n	800742a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	615a      	str	r2, [r3, #20]
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46bd      	mov	sp, r7
 8007434:	b004      	add	sp, #16
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40000400 	.word	0x40000400
 8007440:	40002000 	.word	0x40002000
 8007444:	40014000 	.word	0x40014000
 8007448:	40014400 	.word	0x40014400
 800744c:	40014800 	.word	0x40014800
 8007450:	fffffcff 	.word	0xfffffcff

08007454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	2201      	movs	r2, #1
 8007464:	4393      	bics	r3, r2
 8007466:	001a      	movs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2270      	movs	r2, #112	; 0x70
 8007482:	4393      	bics	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2203      	movs	r2, #3
 800748a:	4393      	bics	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2202      	movs	r2, #2
 800749c:	4393      	bics	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a27      	ldr	r2, [pc, #156]	; (800754c <TIM_OC1_SetConfig+0xf8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00b      	beq.n	80074ca <TIM_OC1_SetConfig+0x76>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a26      	ldr	r2, [pc, #152]	; (8007550 <TIM_OC1_SetConfig+0xfc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d007      	beq.n	80074ca <TIM_OC1_SetConfig+0x76>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a25      	ldr	r2, [pc, #148]	; (8007554 <TIM_OC1_SetConfig+0x100>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_OC1_SetConfig+0x76>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a24      	ldr	r2, [pc, #144]	; (8007558 <TIM_OC1_SetConfig+0x104>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d10c      	bne.n	80074e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2208      	movs	r2, #8
 80074ce:	4393      	bics	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2204      	movs	r2, #4
 80074e0:	4393      	bics	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a19      	ldr	r2, [pc, #100]	; (800754c <TIM_OC1_SetConfig+0xf8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00b      	beq.n	8007504 <TIM_OC1_SetConfig+0xb0>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a18      	ldr	r2, [pc, #96]	; (8007550 <TIM_OC1_SetConfig+0xfc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d007      	beq.n	8007504 <TIM_OC1_SetConfig+0xb0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a17      	ldr	r2, [pc, #92]	; (8007554 <TIM_OC1_SetConfig+0x100>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_OC1_SetConfig+0xb0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a16      	ldr	r2, [pc, #88]	; (8007558 <TIM_OC1_SetConfig+0x104>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d111      	bne.n	8007528 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4a15      	ldr	r2, [pc, #84]	; (800755c <TIM_OC1_SetConfig+0x108>)
 8007508:	4013      	ands	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	4a14      	ldr	r2, [pc, #80]	; (8007560 <TIM_OC1_SetConfig+0x10c>)
 8007510:	4013      	ands	r3, r2
 8007512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	46bd      	mov	sp, r7
 8007546:	b006      	add	sp, #24
 8007548:	bd80      	pop	{r7, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	fffffeff 	.word	0xfffffeff
 8007560:	fffffdff 	.word	0xfffffdff

08007564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	2210      	movs	r2, #16
 8007574:	4393      	bics	r3, r2
 8007576:	001a      	movs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a2e      	ldr	r2, [pc, #184]	; (800764c <TIM_OC2_SetConfig+0xe8>)
 8007592:	4013      	ands	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a2d      	ldr	r2, [pc, #180]	; (8007650 <TIM_OC2_SetConfig+0xec>)
 800759a:	4013      	ands	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2220      	movs	r2, #32
 80075ae:	4393      	bics	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a24      	ldr	r2, [pc, #144]	; (8007654 <TIM_OC2_SetConfig+0xf0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10d      	bne.n	80075e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2280      	movs	r2, #128	; 0x80
 80075ca:	4393      	bics	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2240      	movs	r2, #64	; 0x40
 80075de:	4393      	bics	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <TIM_OC2_SetConfig+0xf0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00b      	beq.n	8007602 <TIM_OC2_SetConfig+0x9e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <TIM_OC2_SetConfig+0xf4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d007      	beq.n	8007602 <TIM_OC2_SetConfig+0x9e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <TIM_OC2_SetConfig+0xf8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_OC2_SetConfig+0x9e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <TIM_OC2_SetConfig+0xfc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d113      	bne.n	800762a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <TIM_OC2_SetConfig+0x100>)
 8007606:	4013      	ands	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <TIM_OC2_SetConfig+0x104>)
 800760e:	4013      	ands	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	4313      	orrs	r3, r2
 800761c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	621a      	str	r2, [r3, #32]
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	b006      	add	sp, #24
 800764a:	bd80      	pop	{r7, pc}
 800764c:	ffff8fff 	.word	0xffff8fff
 8007650:	fffffcff 	.word	0xfffffcff
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40014000 	.word	0x40014000
 800765c:	40014400 	.word	0x40014400
 8007660:	40014800 	.word	0x40014800
 8007664:	fffffbff 	.word	0xfffffbff
 8007668:	fffff7ff 	.word	0xfffff7ff

0800766c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	4a35      	ldr	r2, [pc, #212]	; (8007750 <TIM_OC3_SetConfig+0xe4>)
 800767c:	401a      	ands	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2270      	movs	r2, #112	; 0x70
 8007698:	4393      	bics	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2203      	movs	r2, #3
 80076a0:	4393      	bics	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	4a28      	ldr	r2, [pc, #160]	; (8007754 <TIM_OC3_SetConfig+0xe8>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a24      	ldr	r2, [pc, #144]	; (8007758 <TIM_OC3_SetConfig+0xec>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d10d      	bne.n	80076e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4a23      	ldr	r2, [pc, #140]	; (800775c <TIM_OC3_SetConfig+0xf0>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <TIM_OC3_SetConfig+0xf4>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <TIM_OC3_SetConfig+0xec>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_OC3_SetConfig+0x9a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <TIM_OC3_SetConfig+0xf8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_OC3_SetConfig+0x9a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1b      	ldr	r2, [pc, #108]	; (8007768 <TIM_OC3_SetConfig+0xfc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_OC3_SetConfig+0x9a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1a      	ldr	r2, [pc, #104]	; (800776c <TIM_OC3_SetConfig+0x100>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d113      	bne.n	800772e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	4a19      	ldr	r2, [pc, #100]	; (8007770 <TIM_OC3_SetConfig+0x104>)
 800770a:	4013      	ands	r3, r2
 800770c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4a18      	ldr	r2, [pc, #96]	; (8007774 <TIM_OC3_SetConfig+0x108>)
 8007712:	4013      	ands	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	621a      	str	r2, [r3, #32]
}
 8007748:	46c0      	nop			; (mov r8, r8)
 800774a:	46bd      	mov	sp, r7
 800774c:	b006      	add	sp, #24
 800774e:	bd80      	pop	{r7, pc}
 8007750:	fffffeff 	.word	0xfffffeff
 8007754:	fffffdff 	.word	0xfffffdff
 8007758:	40012c00 	.word	0x40012c00
 800775c:	fffff7ff 	.word	0xfffff7ff
 8007760:	fffffbff 	.word	0xfffffbff
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400
 800776c:	40014800 	.word	0x40014800
 8007770:	ffffefff 	.word	0xffffefff
 8007774:	ffffdfff 	.word	0xffffdfff

08007778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	4a28      	ldr	r2, [pc, #160]	; (8007828 <TIM_OC4_SetConfig+0xb0>)
 8007788:	401a      	ands	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a22      	ldr	r2, [pc, #136]	; (800782c <TIM_OC4_SetConfig+0xb4>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a21      	ldr	r2, [pc, #132]	; (8007830 <TIM_OC4_SetConfig+0xb8>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <TIM_OC4_SetConfig+0xbc>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	031b      	lsls	r3, r3, #12
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a19      	ldr	r2, [pc, #100]	; (8007838 <TIM_OC4_SetConfig+0xc0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <TIM_OC4_SetConfig+0x78>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a18      	ldr	r2, [pc, #96]	; (800783c <TIM_OC4_SetConfig+0xc4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d007      	beq.n	80077f0 <TIM_OC4_SetConfig+0x78>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a17      	ldr	r2, [pc, #92]	; (8007840 <TIM_OC4_SetConfig+0xc8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC4_SetConfig+0x78>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a16      	ldr	r2, [pc, #88]	; (8007844 <TIM_OC4_SetConfig+0xcc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d109      	bne.n	8007804 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	4a15      	ldr	r2, [pc, #84]	; (8007848 <TIM_OC4_SetConfig+0xd0>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	019b      	lsls	r3, r3, #6
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	46bd      	mov	sp, r7
 8007822:	b006      	add	sp, #24
 8007824:	bd80      	pop	{r7, pc}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	ffffefff 	.word	0xffffefff
 800782c:	ffff8fff 	.word	0xffff8fff
 8007830:	fffffcff 	.word	0xfffffcff
 8007834:	ffffdfff 	.word	0xffffdfff
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800
 8007848:	ffffbfff 	.word	0xffffbfff

0800784c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007856:	2317      	movs	r3, #23
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2270      	movs	r2, #112	; 0x70
 800786a:	4393      	bics	r3, r2
 800786c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2207      	movs	r2, #7
 800787c:	4393      	bics	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b70      	cmp	r3, #112	; 0x70
 8007898:	d015      	beq.n	80078c6 <TIM_SlaveTimer_SetConfig+0x7a>
 800789a:	d900      	bls.n	800789e <TIM_SlaveTimer_SetConfig+0x52>
 800789c:	e05b      	b.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
 800789e:	2b60      	cmp	r3, #96	; 0x60
 80078a0:	d04f      	beq.n	8007942 <TIM_SlaveTimer_SetConfig+0xf6>
 80078a2:	d858      	bhi.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
 80078a4:	2b50      	cmp	r3, #80	; 0x50
 80078a6:	d042      	beq.n	800792e <TIM_SlaveTimer_SetConfig+0xe2>
 80078a8:	d855      	bhi.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d016      	beq.n	80078dc <TIM_SlaveTimer_SetConfig+0x90>
 80078ae:	d852      	bhi.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
 80078b0:	2b30      	cmp	r3, #48	; 0x30
 80078b2:	d055      	beq.n	8007960 <TIM_SlaveTimer_SetConfig+0x114>
 80078b4:	d84f      	bhi.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d052      	beq.n	8007960 <TIM_SlaveTimer_SetConfig+0x114>
 80078ba:	d84c      	bhi.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d04f      	beq.n	8007960 <TIM_SlaveTimer_SetConfig+0x114>
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d04d      	beq.n	8007960 <TIM_SlaveTimer_SetConfig+0x114>
 80078c4:	e047      	b.n	8007956 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68d9      	ldr	r1, [r3, #12]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f000 f8c5 	bl	8007a64 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80078da:	e042      	b.n	8007962 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b05      	cmp	r3, #5
 80078e2:	d101      	bne.n	80078e8 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e03f      	b.n	8007968 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2101      	movs	r1, #1
 80078fc:	438a      	bics	r2, r1
 80078fe:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	22f0      	movs	r2, #240	; 0xf0
 800790c:	4393      	bics	r3, r2
 800790e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	4313      	orrs	r3, r2
 800791a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	621a      	str	r2, [r3, #32]
      break;
 800792c:	e019      	b.n	8007962 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6899      	ldr	r1, [r3, #8]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	001a      	movs	r2, r3
 800793c:	f000 f818 	bl	8007970 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007940:	e00f      	b.n	8007962 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6899      	ldr	r1, [r3, #8]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	001a      	movs	r2, r3
 8007950:	f000 f83c 	bl	80079cc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007954:	e005      	b.n	8007962 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007956:	2317      	movs	r3, #23
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	2201      	movs	r2, #1
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e000      	b.n	8007962 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8007960:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8007962:	2317      	movs	r3, #23
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	781b      	ldrb	r3, [r3, #0]
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b006      	add	sp, #24
 800796e:	bd80      	pop	{r7, pc}

08007970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	2201      	movs	r2, #1
 8007988:	4393      	bics	r3, r2
 800798a:	001a      	movs	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	22f0      	movs	r2, #240	; 0xf0
 800799a:	4393      	bics	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	220a      	movs	r2, #10
 80079ac:	4393      	bics	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b006      	add	sp, #24
 80079ca:	bd80      	pop	{r7, pc}

080079cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	2210      	movs	r2, #16
 80079de:	4393      	bics	r3, r2
 80079e0:	001a      	movs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4a0d      	ldr	r2, [pc, #52]	; (8007a2c <TIM_TI2_ConfigInputStage+0x60>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	031b      	lsls	r3, r3, #12
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	22a0      	movs	r2, #160	; 0xa0
 8007a08:	4393      	bics	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b006      	add	sp, #24
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	ffff0fff 	.word	0xffff0fff

08007a30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2270      	movs	r2, #112	; 0x70
 8007a44:	4393      	bics	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	2207      	movs	r2, #7
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	609a      	str	r2, [r3, #8]
}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	b004      	add	sp, #16
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <TIM_ETR_SetConfig+0x3c>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	021a      	lsls	r2, r3, #8
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	431a      	orrs	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	609a      	str	r2, [r3, #8]
}
 8007a98:	46c0      	nop			; (mov r8, r8)
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b006      	add	sp, #24
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	ffff00ff 	.word	0xffff00ff

08007aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	221f      	movs	r2, #31
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	409a      	lsls	r2, r3
 8007aba:	0013      	movs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	43d2      	mvns	r2, r2
 8007ac6:	401a      	ands	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	211f      	movs	r1, #31
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4099      	lsls	r1, r3
 8007ada:	000b      	movs	r3, r1
 8007adc:	431a      	orrs	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	b006      	add	sp, #24
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	223c      	movs	r2, #60	; 0x3c
 8007afa:	5c9b      	ldrb	r3, [r3, r2]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d101      	bne.n	8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e041      	b.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	223c      	movs	r2, #60	; 0x3c
 8007b08:	2101      	movs	r1, #1
 8007b0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	223d      	movs	r2, #61	; 0x3d
 8007b10:	2102      	movs	r1, #2
 8007b12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2270      	movs	r2, #112	; 0x70
 8007b28:	4393      	bics	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d009      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a11      	ldr	r2, [pc, #68]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d004      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a10      	ldr	r2, [pc, #64]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d10c      	bne.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2280      	movs	r2, #128	; 0x80
 8007b60:	4393      	bics	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	223d      	movs	r2, #61	; 0x3d
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	223c      	movs	r2, #60	; 0x3c
 8007b82:	2100      	movs	r1, #0
 8007b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	0018      	movs	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b004      	add	sp, #16
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40014000 	.word	0x40014000

08007b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	223c      	movs	r2, #60	; 0x3c
 8007bae:	5c9b      	ldrb	r3, [r3, r2]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e03e      	b.n	8007c36 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	223c      	movs	r2, #60	; 0x3c
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	22ff      	movs	r2, #255	; 0xff
 8007bc4:	4393      	bics	r3, r2
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007bd4:	401a      	ands	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007be2:	401a      	ands	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4a16      	ldr	r2, [pc, #88]	; (8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007bf0:	401a      	ands	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007bfe:	401a      	ands	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a11      	ldr	r2, [pc, #68]	; (8007c50 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007c0c:	401a      	ands	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4a0e      	ldr	r2, [pc, #56]	; (8007c54 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	223c      	movs	r2, #60	; 0x3c
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b004      	add	sp, #16
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	fffffcff 	.word	0xfffffcff
 8007c44:	fffffbff 	.word	0xfffffbff
 8007c48:	fffff7ff 	.word	0xfffff7ff
 8007c4c:	ffffefff 	.word	0xffffefff
 8007c50:	ffffdfff 	.word	0xffffdfff
 8007c54:	ffffbfff 	.word	0xffffbfff

08007c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c60:	46c0      	nop			; (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e044      	b.n	8007d14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d107      	bne.n	8007ca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2278      	movs	r2, #120	; 0x78
 8007c96:	2100      	movs	r1, #0
 8007c98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f7fc fd41 	bl	8004724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2224      	movs	r2, #36	; 0x24
 8007ca6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	438a      	bics	r2, r1
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f000 fc0c 	bl	80084d8 <UART_SetConfig>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e024      	b.n	8007d14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f000 fd3f 	bl	8008758 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	490d      	ldr	r1, [pc, #52]	; (8007d1c <HAL_UART_Init+0xa4>)
 8007ce6:	400a      	ands	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2108      	movs	r1, #8
 8007cf6:	438a      	bics	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2101      	movs	r1, #1
 8007d06:	430a      	orrs	r2, r1
 8007d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f000 fdd7 	bl	80088c0 <UART_CheckIdleState>
 8007d12:	0003      	movs	r3, r0
}
 8007d14:	0018      	movs	r0, r3
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	fffff7ff 	.word	0xfffff7ff

08007d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	; 0x28
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	1dbb      	adds	r3, r7, #6
 8007d2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d000      	beq.n	8007d3a <HAL_UART_Transmit+0x1a>
 8007d38:	e08d      	b.n	8007e56 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_UART_Transmit+0x28>
 8007d40:	1dbb      	adds	r3, r7, #6
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e085      	b.n	8007e58 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	2380      	movs	r3, #128	; 0x80
 8007d52:	015b      	lsls	r3, r3, #5
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d109      	bne.n	8007d6c <HAL_UART_Transmit+0x4c>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2201      	movs	r2, #1
 8007d64:	4013      	ands	r3, r2
 8007d66:	d001      	beq.n	8007d6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e075      	b.n	8007e58 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2284      	movs	r2, #132	; 0x84
 8007d70:	2100      	movs	r1, #0
 8007d72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2221      	movs	r2, #33	; 0x21
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d7a:	f7fc fdf9 	bl	8004970 <HAL_GetTick>
 8007d7e:	0003      	movs	r3, r0
 8007d80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1dba      	adds	r2, r7, #6
 8007d86:	2150      	movs	r1, #80	; 0x50
 8007d88:	8812      	ldrh	r2, [r2, #0]
 8007d8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1dba      	adds	r2, r7, #6
 8007d90:	2152      	movs	r1, #82	; 0x52
 8007d92:	8812      	ldrh	r2, [r2, #0]
 8007d94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	2380      	movs	r3, #128	; 0x80
 8007d9c:	015b      	lsls	r3, r3, #5
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d108      	bne.n	8007db4 <HAL_UART_Transmit+0x94>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	e003      	b.n	8007dbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dbc:	e030      	b.n	8007e20 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	0013      	movs	r3, r2
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	f000 fe20 	bl	8008a10 <UART_WaitOnFlagUntilTimeout>
 8007dd0:	1e03      	subs	r3, r0, #0
 8007dd2:	d004      	beq.n	8007dde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e03c      	b.n	8007e58 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	881a      	ldrh	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	05d2      	lsls	r2, r2, #23
 8007dee:	0dd2      	lsrs	r2, r2, #23
 8007df0:	b292      	uxth	r2, r2
 8007df2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	3302      	adds	r3, #2
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	e008      	b.n	8007e0e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	b292      	uxth	r2, r2
 8007e06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2252      	movs	r2, #82	; 0x52
 8007e12:	5a9b      	ldrh	r3, [r3, r2]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b299      	uxth	r1, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2252      	movs	r2, #82	; 0x52
 8007e1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2252      	movs	r2, #82	; 0x52
 8007e24:	5a9b      	ldrh	r3, [r3, r2]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1c8      	bne.n	8007dbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	0013      	movs	r3, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	2140      	movs	r1, #64	; 0x40
 8007e3a:	f000 fde9 	bl	8008a10 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	1e03      	subs	r3, r0, #0
 8007e40:	d004      	beq.n	8007e4c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2220      	movs	r2, #32
 8007e46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e005      	b.n	8007e58 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e000      	b.n	8007e58 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8007e56:	2302      	movs	r3, #2
  }
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b008      	add	sp, #32
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	1dbb      	adds	r3, r7, #6
 8007e6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2280      	movs	r2, #128	; 0x80
 8007e72:	589b      	ldr	r3, [r3, r2]
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d145      	bne.n	8007f04 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_UART_Receive_IT+0x26>
 8007e7e:	1dbb      	adds	r3, r7, #6
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e03d      	b.n	8007f06 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	2380      	movs	r3, #128	; 0x80
 8007e90:	015b      	lsls	r3, r3, #5
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d109      	bne.n	8007eaa <HAL_UART_Receive_IT+0x4a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	d001      	beq.n	8007eaa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e02d      	b.n	8007f06 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	2380      	movs	r3, #128	; 0x80
 8007eb8:	041b      	lsls	r3, r3, #16
 8007eba:	4013      	ands	r3, r2
 8007ebc:	d019      	beq.n	8007ef2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ec4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	2301      	movs	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f383 8810 	msr	PRIMASK, r3
}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	04c9      	lsls	r1, r1, #19
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f383 8810 	msr	PRIMASK, r3
}
 8007ef0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ef2:	1dbb      	adds	r3, r7, #6
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	0018      	movs	r0, r3
 8007efc:	f000 fdf2 	bl	8008ae4 <UART_Start_Receive_IT>
 8007f00:	0003      	movs	r3, r0
 8007f02:	e000      	b.n	8007f06 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007f04:	2302      	movs	r3, #2
  }
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b008      	add	sp, #32
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f10:	b590      	push	{r4, r7, lr}
 8007f12:	b0ab      	sub	sp, #172	; 0xac
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	22a4      	movs	r2, #164	; 0xa4
 8007f20:	18b9      	adds	r1, r7, r2
 8007f22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	20a0      	movs	r0, #160	; 0xa0
 8007f2c:	1839      	adds	r1, r7, r0
 8007f2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	219c      	movs	r1, #156	; 0x9c
 8007f38:	1879      	adds	r1, r7, r1
 8007f3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f3c:	0011      	movs	r1, r2
 8007f3e:	18bb      	adds	r3, r7, r2
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a99      	ldr	r2, [pc, #612]	; (80081a8 <HAL_UART_IRQHandler+0x298>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	2298      	movs	r2, #152	; 0x98
 8007f48:	18bc      	adds	r4, r7, r2
 8007f4a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007f4c:	18bb      	adds	r3, r7, r2
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d114      	bne.n	8007f7e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	d00f      	beq.n	8007f7e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f5e:	183b      	adds	r3, r7, r0
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2220      	movs	r2, #32
 8007f64:	4013      	ands	r3, r2
 8007f66:	d00a      	beq.n	8007f7e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d100      	bne.n	8007f72 <HAL_UART_IRQHandler+0x62>
 8007f70:	e286      	b.n	8008480 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	0010      	movs	r0, r2
 8007f7a:	4798      	blx	r3
      }
      return;
 8007f7c:	e280      	b.n	8008480 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f7e:	2398      	movs	r3, #152	; 0x98
 8007f80:	18fb      	adds	r3, r7, r3
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d100      	bne.n	8007f8a <HAL_UART_IRQHandler+0x7a>
 8007f88:	e114      	b.n	80081b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f8a:	239c      	movs	r3, #156	; 0x9c
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2201      	movs	r2, #1
 8007f92:	4013      	ands	r3, r2
 8007f94:	d106      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f96:	23a0      	movs	r3, #160	; 0xa0
 8007f98:	18fb      	adds	r3, r7, r3
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a83      	ldr	r2, [pc, #524]	; (80081ac <HAL_UART_IRQHandler+0x29c>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d100      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x94>
 8007fa2:	e107      	b.n	80081b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fa4:	23a4      	movs	r3, #164	; 0xa4
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2201      	movs	r2, #1
 8007fac:	4013      	ands	r3, r2
 8007fae:	d012      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xc6>
 8007fb0:	23a0      	movs	r3, #160	; 0xa0
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	2380      	movs	r3, #128	; 0x80
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4013      	ands	r3, r2
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2284      	movs	r2, #132	; 0x84
 8007fca:	589b      	ldr	r3, [r3, r2]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2184      	movs	r1, #132	; 0x84
 8007fd4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd6:	23a4      	movs	r3, #164	; 0xa4
 8007fd8:	18fb      	adds	r3, r7, r3
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d011      	beq.n	8008006 <HAL_UART_IRQHandler+0xf6>
 8007fe2:	239c      	movs	r3, #156	; 0x9c
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4013      	ands	r3, r2
 8007fec:	d00b      	beq.n	8008006 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2284      	movs	r2, #132	; 0x84
 8007ffa:	589b      	ldr	r3, [r3, r2]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2184      	movs	r1, #132	; 0x84
 8008004:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008006:	23a4      	movs	r3, #164	; 0xa4
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2204      	movs	r2, #4
 800800e:	4013      	ands	r3, r2
 8008010:	d011      	beq.n	8008036 <HAL_UART_IRQHandler+0x126>
 8008012:	239c      	movs	r3, #156	; 0x9c
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2201      	movs	r2, #1
 800801a:	4013      	ands	r3, r2
 800801c:	d00b      	beq.n	8008036 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2204      	movs	r2, #4
 8008024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2284      	movs	r2, #132	; 0x84
 800802a:	589b      	ldr	r3, [r3, r2]
 800802c:	2202      	movs	r2, #2
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2184      	movs	r1, #132	; 0x84
 8008034:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008036:	23a4      	movs	r3, #164	; 0xa4
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2208      	movs	r2, #8
 800803e:	4013      	ands	r3, r2
 8008040:	d017      	beq.n	8008072 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008042:	23a0      	movs	r3, #160	; 0xa0
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2220      	movs	r2, #32
 800804a:	4013      	ands	r3, r2
 800804c:	d105      	bne.n	800805a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800804e:	239c      	movs	r3, #156	; 0x9c
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2201      	movs	r2, #1
 8008056:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008058:	d00b      	beq.n	8008072 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2208      	movs	r2, #8
 8008060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2284      	movs	r2, #132	; 0x84
 8008066:	589b      	ldr	r3, [r3, r2]
 8008068:	2208      	movs	r2, #8
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2184      	movs	r1, #132	; 0x84
 8008070:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008072:	23a4      	movs	r3, #164	; 0xa4
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	2380      	movs	r3, #128	; 0x80
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	4013      	ands	r3, r2
 800807e:	d013      	beq.n	80080a8 <HAL_UART_IRQHandler+0x198>
 8008080:	23a0      	movs	r3, #160	; 0xa0
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	2380      	movs	r3, #128	; 0x80
 8008088:	04db      	lsls	r3, r3, #19
 800808a:	4013      	ands	r3, r2
 800808c:	d00c      	beq.n	80080a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2280      	movs	r2, #128	; 0x80
 8008094:	0112      	lsls	r2, r2, #4
 8008096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2284      	movs	r2, #132	; 0x84
 800809c:	589b      	ldr	r3, [r3, r2]
 800809e:	2220      	movs	r2, #32
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2184      	movs	r1, #132	; 0x84
 80080a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2284      	movs	r2, #132	; 0x84
 80080ac:	589b      	ldr	r3, [r3, r2]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d100      	bne.n	80080b4 <HAL_UART_IRQHandler+0x1a4>
 80080b2:	e1e7      	b.n	8008484 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080b4:	23a4      	movs	r3, #164	; 0xa4
 80080b6:	18fb      	adds	r3, r7, r3
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2220      	movs	r2, #32
 80080bc:	4013      	ands	r3, r2
 80080be:	d00e      	beq.n	80080de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080c0:	23a0      	movs	r3, #160	; 0xa0
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2220      	movs	r2, #32
 80080c8:	4013      	ands	r3, r2
 80080ca:	d008      	beq.n	80080de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d004      	beq.n	80080de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	0010      	movs	r0, r2
 80080dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2284      	movs	r2, #132	; 0x84
 80080e2:	589b      	ldr	r3, [r3, r2]
 80080e4:	2194      	movs	r1, #148	; 0x94
 80080e6:	187a      	adds	r2, r7, r1
 80080e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	2240      	movs	r2, #64	; 0x40
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d004      	beq.n	8008102 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2228      	movs	r2, #40	; 0x28
 80080fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008100:	d047      	beq.n	8008192 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	0018      	movs	r0, r3
 8008106:	f000 fda3 	bl	8008c50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2240      	movs	r2, #64	; 0x40
 8008112:	4013      	ands	r3, r2
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	d137      	bne.n	8008188 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008118:	f3ef 8310 	mrs	r3, PRIMASK
 800811c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800811e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008120:	2090      	movs	r0, #144	; 0x90
 8008122:	183a      	adds	r2, r7, r0
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	2301      	movs	r3, #1
 8008128:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800812c:	f383 8810 	msr	PRIMASK, r3
}
 8008130:	46c0      	nop			; (mov r8, r8)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2140      	movs	r1, #64	; 0x40
 800813e:	438a      	bics	r2, r1
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	183b      	adds	r3, r7, r0
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800814a:	f383 8810 	msr	PRIMASK, r3
}
 800814e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008154:	2b00      	cmp	r3, #0
 8008156:	d012      	beq.n	800817e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815c:	4a14      	ldr	r2, [pc, #80]	; (80081b0 <HAL_UART_IRQHandler+0x2a0>)
 800815e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008164:	0018      	movs	r0, r3
 8008166:	f7fd f9a1 	bl	80054ac <HAL_DMA_Abort_IT>
 800816a:	1e03      	subs	r3, r0, #0
 800816c:	d01a      	beq.n	80081a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008178:	0018      	movs	r0, r3
 800817a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817c:	e012      	b.n	80081a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	0018      	movs	r0, r3
 8008182:	f000 f995 	bl	80084b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008186:	e00d      	b.n	80081a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	0018      	movs	r0, r3
 800818c:	f000 f990 	bl	80084b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008190:	e008      	b.n	80081a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	0018      	movs	r0, r3
 8008196:	f000 f98b 	bl	80084b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2284      	movs	r2, #132	; 0x84
 800819e:	2100      	movs	r1, #0
 80081a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80081a2:	e16f      	b.n	8008484 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a4:	46c0      	nop			; (mov r8, r8)
    return;
 80081a6:	e16d      	b.n	8008484 <HAL_UART_IRQHandler+0x574>
 80081a8:	0000080f 	.word	0x0000080f
 80081ac:	04000120 	.word	0x04000120
 80081b0:	08008d19 	.word	0x08008d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d000      	beq.n	80081be <HAL_UART_IRQHandler+0x2ae>
 80081bc:	e139      	b.n	8008432 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081be:	23a4      	movs	r3, #164	; 0xa4
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2210      	movs	r2, #16
 80081c6:	4013      	ands	r3, r2
 80081c8:	d100      	bne.n	80081cc <HAL_UART_IRQHandler+0x2bc>
 80081ca:	e132      	b.n	8008432 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081cc:	23a0      	movs	r3, #160	; 0xa0
 80081ce:	18fb      	adds	r3, r7, r3
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2210      	movs	r2, #16
 80081d4:	4013      	ands	r3, r2
 80081d6:	d100      	bne.n	80081da <HAL_UART_IRQHandler+0x2ca>
 80081d8:	e12b      	b.n	8008432 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2210      	movs	r2, #16
 80081e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2240      	movs	r2, #64	; 0x40
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b40      	cmp	r3, #64	; 0x40
 80081ee:	d000      	beq.n	80081f2 <HAL_UART_IRQHandler+0x2e2>
 80081f0:	e09f      	b.n	8008332 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	217e      	movs	r1, #126	; 0x7e
 80081fc:	187b      	adds	r3, r7, r1
 80081fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008200:	187b      	adds	r3, r7, r1
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d100      	bne.n	800820a <HAL_UART_IRQHandler+0x2fa>
 8008208:	e13e      	b.n	8008488 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2258      	movs	r2, #88	; 0x58
 800820e:	5a9b      	ldrh	r3, [r3, r2]
 8008210:	187a      	adds	r2, r7, r1
 8008212:	8812      	ldrh	r2, [r2, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d300      	bcc.n	800821a <HAL_UART_IRQHandler+0x30a>
 8008218:	e136      	b.n	8008488 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	187a      	adds	r2, r7, r1
 800821e:	215a      	movs	r1, #90	; 0x5a
 8008220:	8812      	ldrh	r2, [r2, #0]
 8008222:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	2b20      	cmp	r3, #32
 800822c:	d06f      	beq.n	800830e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800822e:	f3ef 8310 	mrs	r3, PRIMASK
 8008232:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008236:	67bb      	str	r3, [r7, #120]	; 0x78
 8008238:	2301      	movs	r3, #1
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800823c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823e:	f383 8810 	msr	PRIMASK, r3
}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4992      	ldr	r1, [pc, #584]	; (8008498 <HAL_UART_IRQHandler+0x588>)
 8008250:	400a      	ands	r2, r1
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	f383 8810 	msr	PRIMASK, r3
}
 800825e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008260:	f3ef 8310 	mrs	r3, PRIMASK
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008268:	677b      	str	r3, [r7, #116]	; 0x74
 800826a:	2301      	movs	r3, #1
 800826c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	f383 8810 	msr	PRIMASK, r3
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2101      	movs	r1, #1
 8008282:	438a      	bics	r2, r1
 8008284:	609a      	str	r2, [r3, #8]
 8008286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008288:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800828c:	f383 8810 	msr	PRIMASK, r3
}
 8008290:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008292:	f3ef 8310 	mrs	r3, PRIMASK
 8008296:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008298:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	673b      	str	r3, [r7, #112]	; 0x70
 800829c:	2301      	movs	r3, #1
 800829e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a2:	f383 8810 	msr	PRIMASK, r3
}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2140      	movs	r1, #64	; 0x40
 80082b4:	438a      	bics	r2, r1
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082be:	f383 8810 	msr	PRIMASK, r3
}
 80082c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2280      	movs	r2, #128	; 0x80
 80082c8:	2120      	movs	r1, #32
 80082ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d2:	f3ef 8310 	mrs	r3, PRIMASK
 80082d6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80082d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082dc:	2301      	movs	r3, #1
 80082de:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082e2:	f383 8810 	msr	PRIMASK, r3
}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2110      	movs	r1, #16
 80082f4:	438a      	bics	r2, r1
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fe:	f383 8810 	msr	PRIMASK, r3
}
 8008302:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008308:	0018      	movs	r0, r3
 800830a:	f7fd f897 	bl	800543c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2202      	movs	r2, #2
 8008312:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2258      	movs	r2, #88	; 0x58
 8008318:	5a9a      	ldrh	r2, [r3, r2]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	215a      	movs	r1, #90	; 0x5a
 800831e:	5a5b      	ldrh	r3, [r3, r1]
 8008320:	b29b      	uxth	r3, r3
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	0011      	movs	r1, r2
 800832a:	0018      	movs	r0, r3
 800832c:	f000 f8c8 	bl	80084c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008330:	e0aa      	b.n	8008488 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2258      	movs	r2, #88	; 0x58
 8008336:	5a99      	ldrh	r1, [r3, r2]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	225a      	movs	r2, #90	; 0x5a
 800833c:	5a9b      	ldrh	r3, [r3, r2]
 800833e:	b29a      	uxth	r2, r3
 8008340:	208e      	movs	r0, #142	; 0x8e
 8008342:	183b      	adds	r3, r7, r0
 8008344:	1a8a      	subs	r2, r1, r2
 8008346:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	225a      	movs	r2, #90	; 0x5a
 800834c:	5a9b      	ldrh	r3, [r3, r2]
 800834e:	b29b      	uxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d100      	bne.n	8008356 <HAL_UART_IRQHandler+0x446>
 8008354:	e09a      	b.n	800848c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8008356:	183b      	adds	r3, r7, r0
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d100      	bne.n	8008360 <HAL_UART_IRQHandler+0x450>
 800835e:	e095      	b.n	800848c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008360:	f3ef 8310 	mrs	r3, PRIMASK
 8008364:	60fb      	str	r3, [r7, #12]
  return(result);
 8008366:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008368:	2488      	movs	r4, #136	; 0x88
 800836a:	193a      	adds	r2, r7, r4
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	2301      	movs	r3, #1
 8008370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f383 8810 	msr	PRIMASK, r3
}
 8008378:	46c0      	nop			; (mov r8, r8)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4945      	ldr	r1, [pc, #276]	; (800849c <HAL_UART_IRQHandler+0x58c>)
 8008386:	400a      	ands	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	193b      	adds	r3, r7, r4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f383 8810 	msr	PRIMASK, r3
}
 8008396:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008398:	f3ef 8310 	mrs	r3, PRIMASK
 800839c:	61bb      	str	r3, [r7, #24]
  return(result);
 800839e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a0:	2484      	movs	r4, #132	; 0x84
 80083a2:	193a      	adds	r2, r7, r4
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	2301      	movs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f383 8810 	msr	PRIMASK, r3
}
 80083b0:	46c0      	nop			; (mov r8, r8)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2101      	movs	r1, #1
 80083be:	438a      	bics	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]
 80083c2:	193b      	adds	r3, r7, r4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	f383 8810 	msr	PRIMASK, r3
}
 80083ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2280      	movs	r2, #128	; 0x80
 80083d4:	2120      	movs	r1, #32
 80083d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e4:	f3ef 8310 	mrs	r3, PRIMASK
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ec:	2480      	movs	r4, #128	; 0x80
 80083ee:	193a      	adds	r2, r7, r4
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	2301      	movs	r3, #1
 80083f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	f383 8810 	msr	PRIMASK, r3
}
 80083fc:	46c0      	nop			; (mov r8, r8)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2110      	movs	r1, #16
 800840a:	438a      	bics	r2, r1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	193b      	adds	r3, r7, r4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	f383 8810 	msr	PRIMASK, r3
}
 800841a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008422:	183b      	adds	r3, r7, r0
 8008424:	881a      	ldrh	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	0011      	movs	r1, r2
 800842a:	0018      	movs	r0, r3
 800842c:	f000 f848 	bl	80084c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008430:	e02c      	b.n	800848c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008432:	23a4      	movs	r3, #164	; 0xa4
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2280      	movs	r2, #128	; 0x80
 800843a:	4013      	ands	r3, r2
 800843c:	d00f      	beq.n	800845e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800843e:	23a0      	movs	r3, #160	; 0xa0
 8008440:	18fb      	adds	r3, r7, r3
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2280      	movs	r2, #128	; 0x80
 8008446:	4013      	ands	r3, r2
 8008448:	d009      	beq.n	800845e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01e      	beq.n	8008490 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	0010      	movs	r0, r2
 800845a:	4798      	blx	r3
    }
    return;
 800845c:	e018      	b.n	8008490 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800845e:	23a4      	movs	r3, #164	; 0xa4
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2240      	movs	r2, #64	; 0x40
 8008466:	4013      	ands	r3, r2
 8008468:	d013      	beq.n	8008492 <HAL_UART_IRQHandler+0x582>
 800846a:	23a0      	movs	r3, #160	; 0xa0
 800846c:	18fb      	adds	r3, r7, r3
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2240      	movs	r2, #64	; 0x40
 8008472:	4013      	ands	r3, r2
 8008474:	d00d      	beq.n	8008492 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0018      	movs	r0, r3
 800847a:	f000 fc64 	bl	8008d46 <UART_EndTransmit_IT>
    return;
 800847e:	e008      	b.n	8008492 <HAL_UART_IRQHandler+0x582>
      return;
 8008480:	46c0      	nop			; (mov r8, r8)
 8008482:	e006      	b.n	8008492 <HAL_UART_IRQHandler+0x582>
    return;
 8008484:	46c0      	nop			; (mov r8, r8)
 8008486:	e004      	b.n	8008492 <HAL_UART_IRQHandler+0x582>
      return;
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	e002      	b.n	8008492 <HAL_UART_IRQHandler+0x582>
      return;
 800848c:	46c0      	nop			; (mov r8, r8)
 800848e:	e000      	b.n	8008492 <HAL_UART_IRQHandler+0x582>
    return;
 8008490:	46c0      	nop			; (mov r8, r8)
  }

}
 8008492:	46bd      	mov	sp, r7
 8008494:	b02b      	add	sp, #172	; 0xac
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	fffffeff 	.word	0xfffffeff
 800849c:	fffffedf 	.word	0xfffffedf

080084a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084a8:	46c0      	nop			; (mov r8, r8)
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b002      	add	sp, #8
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084b8:	46c0      	nop			; (mov r8, r8)
 80084ba:	46bd      	mov	sp, r7
 80084bc:	b002      	add	sp, #8
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	000a      	movs	r2, r1
 80084ca:	1cbb      	adds	r3, r7, #2
 80084cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b002      	add	sp, #8
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084e0:	231e      	movs	r3, #30
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	2200      	movs	r2, #0
 80084e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a8d      	ldr	r2, [pc, #564]	; (800873c <UART_SetConfig+0x264>)
 8008508:	4013      	ands	r3, r2
 800850a:	0019      	movs	r1, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	430a      	orrs	r2, r1
 8008514:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4a88      	ldr	r2, [pc, #544]	; (8008740 <UART_SetConfig+0x268>)
 800851e:	4013      	ands	r3, r2
 8008520:	0019      	movs	r1, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4a7f      	ldr	r2, [pc, #508]	; (8008744 <UART_SetConfig+0x26c>)
 8008546:	4013      	ands	r3, r2
 8008548:	0019      	movs	r1, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	430a      	orrs	r2, r1
 8008552:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7b      	ldr	r2, [pc, #492]	; (8008748 <UART_SetConfig+0x270>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d127      	bne.n	80085ae <UART_SetConfig+0xd6>
 800855e:	4b7b      	ldr	r3, [pc, #492]	; (800874c <UART_SetConfig+0x274>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	2203      	movs	r2, #3
 8008564:	4013      	ands	r3, r2
 8008566:	2b03      	cmp	r3, #3
 8008568:	d00d      	beq.n	8008586 <UART_SetConfig+0xae>
 800856a:	d81b      	bhi.n	80085a4 <UART_SetConfig+0xcc>
 800856c:	2b02      	cmp	r3, #2
 800856e:	d014      	beq.n	800859a <UART_SetConfig+0xc2>
 8008570:	d818      	bhi.n	80085a4 <UART_SetConfig+0xcc>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <UART_SetConfig+0xa4>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d00a      	beq.n	8008590 <UART_SetConfig+0xb8>
 800857a:	e013      	b.n	80085a4 <UART_SetConfig+0xcc>
 800857c:	231f      	movs	r3, #31
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
 8008584:	e021      	b.n	80085ca <UART_SetConfig+0xf2>
 8008586:	231f      	movs	r3, #31
 8008588:	18fb      	adds	r3, r7, r3
 800858a:	2202      	movs	r2, #2
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e01c      	b.n	80085ca <UART_SetConfig+0xf2>
 8008590:	231f      	movs	r3, #31
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	2204      	movs	r2, #4
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	e017      	b.n	80085ca <UART_SetConfig+0xf2>
 800859a:	231f      	movs	r3, #31
 800859c:	18fb      	adds	r3, r7, r3
 800859e:	2208      	movs	r2, #8
 80085a0:	701a      	strb	r2, [r3, #0]
 80085a2:	e012      	b.n	80085ca <UART_SetConfig+0xf2>
 80085a4:	231f      	movs	r3, #31
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	2210      	movs	r2, #16
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	e00d      	b.n	80085ca <UART_SetConfig+0xf2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a67      	ldr	r2, [pc, #412]	; (8008750 <UART_SetConfig+0x278>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d104      	bne.n	80085c2 <UART_SetConfig+0xea>
 80085b8:	231f      	movs	r3, #31
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e003      	b.n	80085ca <UART_SetConfig+0xf2>
 80085c2:	231f      	movs	r3, #31
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	2210      	movs	r2, #16
 80085c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69da      	ldr	r2, [r3, #28]
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d15c      	bne.n	8008690 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80085d6:	231f      	movs	r3, #31
 80085d8:	18fb      	adds	r3, r7, r3
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d015      	beq.n	800860c <UART_SetConfig+0x134>
 80085e0:	dc18      	bgt.n	8008614 <UART_SetConfig+0x13c>
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d00d      	beq.n	8008602 <UART_SetConfig+0x12a>
 80085e6:	dc15      	bgt.n	8008614 <UART_SetConfig+0x13c>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <UART_SetConfig+0x11a>
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d005      	beq.n	80085fc <UART_SetConfig+0x124>
 80085f0:	e010      	b.n	8008614 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085f2:	f7fd fea3 	bl	800633c <HAL_RCC_GetPCLK1Freq>
 80085f6:	0003      	movs	r3, r0
 80085f8:	61bb      	str	r3, [r7, #24]
        break;
 80085fa:	e012      	b.n	8008622 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085fc:	4b55      	ldr	r3, [pc, #340]	; (8008754 <UART_SetConfig+0x27c>)
 80085fe:	61bb      	str	r3, [r7, #24]
        break;
 8008600:	e00f      	b.n	8008622 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008602:	f7fd fe3b 	bl	800627c <HAL_RCC_GetSysClockFreq>
 8008606:	0003      	movs	r3, r0
 8008608:	61bb      	str	r3, [r7, #24]
        break;
 800860a:	e00a      	b.n	8008622 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	021b      	lsls	r3, r3, #8
 8008610:	61bb      	str	r3, [r7, #24]
        break;
 8008612:	e006      	b.n	8008622 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008618:	231e      	movs	r3, #30
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
        break;
 8008620:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d100      	bne.n	800862a <UART_SetConfig+0x152>
 8008628:	e07a      	b.n	8008720 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	005a      	lsls	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	18d2      	adds	r2, r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	0019      	movs	r1, r3
 800863c:	0010      	movs	r0, r2
 800863e:	f7f7 fd89 	bl	8000154 <__udivsi3>
 8008642:	0003      	movs	r3, r0
 8008644:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b0f      	cmp	r3, #15
 800864a:	d91c      	bls.n	8008686 <UART_SetConfig+0x1ae>
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	2380      	movs	r3, #128	; 0x80
 8008650:	025b      	lsls	r3, r3, #9
 8008652:	429a      	cmp	r2, r3
 8008654:	d217      	bcs.n	8008686 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	b29a      	uxth	r2, r3
 800865a:	200e      	movs	r0, #14
 800865c:	183b      	adds	r3, r7, r0
 800865e:	210f      	movs	r1, #15
 8008660:	438a      	bics	r2, r1
 8008662:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	2207      	movs	r2, #7
 800866c:	4013      	ands	r3, r2
 800866e:	b299      	uxth	r1, r3
 8008670:	183b      	adds	r3, r7, r0
 8008672:	183a      	adds	r2, r7, r0
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	183a      	adds	r2, r7, r0
 8008680:	8812      	ldrh	r2, [r2, #0]
 8008682:	60da      	str	r2, [r3, #12]
 8008684:	e04c      	b.n	8008720 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008686:	231e      	movs	r3, #30
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	2201      	movs	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e047      	b.n	8008720 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008690:	231f      	movs	r3, #31
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b08      	cmp	r3, #8
 8008698:	d015      	beq.n	80086c6 <UART_SetConfig+0x1ee>
 800869a:	dc18      	bgt.n	80086ce <UART_SetConfig+0x1f6>
 800869c:	2b04      	cmp	r3, #4
 800869e:	d00d      	beq.n	80086bc <UART_SetConfig+0x1e4>
 80086a0:	dc15      	bgt.n	80086ce <UART_SetConfig+0x1f6>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <UART_SetConfig+0x1d4>
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d005      	beq.n	80086b6 <UART_SetConfig+0x1de>
 80086aa:	e010      	b.n	80086ce <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ac:	f7fd fe46 	bl	800633c <HAL_RCC_GetPCLK1Freq>
 80086b0:	0003      	movs	r3, r0
 80086b2:	61bb      	str	r3, [r7, #24]
        break;
 80086b4:	e012      	b.n	80086dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086b6:	4b27      	ldr	r3, [pc, #156]	; (8008754 <UART_SetConfig+0x27c>)
 80086b8:	61bb      	str	r3, [r7, #24]
        break;
 80086ba:	e00f      	b.n	80086dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086bc:	f7fd fdde 	bl	800627c <HAL_RCC_GetSysClockFreq>
 80086c0:	0003      	movs	r3, r0
 80086c2:	61bb      	str	r3, [r7, #24]
        break;
 80086c4:	e00a      	b.n	80086dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	61bb      	str	r3, [r7, #24]
        break;
 80086cc:	e006      	b.n	80086dc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086d2:	231e      	movs	r3, #30
 80086d4:	18fb      	adds	r3, r7, r3
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
        break;
 80086da:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d01e      	beq.n	8008720 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	085a      	lsrs	r2, r3, #1
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	18d2      	adds	r2, r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	0019      	movs	r1, r3
 80086f2:	0010      	movs	r0, r2
 80086f4:	f7f7 fd2e 	bl	8000154 <__udivsi3>
 80086f8:	0003      	movs	r3, r0
 80086fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b0f      	cmp	r3, #15
 8008700:	d90a      	bls.n	8008718 <UART_SetConfig+0x240>
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	2380      	movs	r3, #128	; 0x80
 8008706:	025b      	lsls	r3, r3, #9
 8008708:	429a      	cmp	r2, r3
 800870a:	d205      	bcs.n	8008718 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	e003      	b.n	8008720 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008718:	231e      	movs	r3, #30
 800871a:	18fb      	adds	r3, r7, r3
 800871c:	2201      	movs	r2, #1
 800871e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800872c:	231e      	movs	r3, #30
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	781b      	ldrb	r3, [r3, #0]
}
 8008732:	0018      	movs	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	b008      	add	sp, #32
 8008738:	bd80      	pop	{r7, pc}
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	ffff69f3 	.word	0xffff69f3
 8008740:	ffffcfff 	.word	0xffffcfff
 8008744:	fffff4ff 	.word	0xfffff4ff
 8008748:	40013800 	.word	0x40013800
 800874c:	40021000 	.word	0x40021000
 8008750:	40004400 	.word	0x40004400
 8008754:	007a1200 	.word	0x007a1200

08008758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2201      	movs	r2, #1
 8008766:	4013      	ands	r3, r2
 8008768:	d00b      	beq.n	8008782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	4a4a      	ldr	r2, [pc, #296]	; (800889c <UART_AdvFeatureConfig+0x144>)
 8008772:	4013      	ands	r3, r2
 8008774:	0019      	movs	r1, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2202      	movs	r2, #2
 8008788:	4013      	ands	r3, r2
 800878a:	d00b      	beq.n	80087a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4a43      	ldr	r2, [pc, #268]	; (80088a0 <UART_AdvFeatureConfig+0x148>)
 8008794:	4013      	ands	r3, r2
 8008796:	0019      	movs	r1, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	430a      	orrs	r2, r1
 80087a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2204      	movs	r2, #4
 80087aa:	4013      	ands	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4a3b      	ldr	r2, [pc, #236]	; (80088a4 <UART_AdvFeatureConfig+0x14c>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	0019      	movs	r1, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	2208      	movs	r2, #8
 80087cc:	4013      	ands	r3, r2
 80087ce:	d00b      	beq.n	80087e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	4a34      	ldr	r2, [pc, #208]	; (80088a8 <UART_AdvFeatureConfig+0x150>)
 80087d8:	4013      	ands	r3, r2
 80087da:	0019      	movs	r1, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2210      	movs	r2, #16
 80087ee:	4013      	ands	r3, r2
 80087f0:	d00b      	beq.n	800880a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	4a2c      	ldr	r2, [pc, #176]	; (80088ac <UART_AdvFeatureConfig+0x154>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	0019      	movs	r1, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2220      	movs	r2, #32
 8008810:	4013      	ands	r3, r2
 8008812:	d00b      	beq.n	800882c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	4a25      	ldr	r2, [pc, #148]	; (80088b0 <UART_AdvFeatureConfig+0x158>)
 800881c:	4013      	ands	r3, r2
 800881e:	0019      	movs	r1, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	2240      	movs	r2, #64	; 0x40
 8008832:	4013      	ands	r3, r2
 8008834:	d01d      	beq.n	8008872 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <UART_AdvFeatureConfig+0x15c>)
 800883e:	4013      	ands	r3, r2
 8008840:	0019      	movs	r1, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008852:	2380      	movs	r3, #128	; 0x80
 8008854:	035b      	lsls	r3, r3, #13
 8008856:	429a      	cmp	r2, r3
 8008858:	d10b      	bne.n	8008872 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a15      	ldr	r2, [pc, #84]	; (80088b8 <UART_AdvFeatureConfig+0x160>)
 8008862:	4013      	ands	r3, r2
 8008864:	0019      	movs	r1, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	2280      	movs	r2, #128	; 0x80
 8008878:	4013      	ands	r3, r2
 800887a:	d00b      	beq.n	8008894 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	4a0e      	ldr	r2, [pc, #56]	; (80088bc <UART_AdvFeatureConfig+0x164>)
 8008884:	4013      	ands	r3, r2
 8008886:	0019      	movs	r1, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
  }
}
 8008894:	46c0      	nop			; (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b002      	add	sp, #8
 800889a:	bd80      	pop	{r7, pc}
 800889c:	fffdffff 	.word	0xfffdffff
 80088a0:	fffeffff 	.word	0xfffeffff
 80088a4:	fffbffff 	.word	0xfffbffff
 80088a8:	ffff7fff 	.word	0xffff7fff
 80088ac:	ffffefff 	.word	0xffffefff
 80088b0:	ffffdfff 	.word	0xffffdfff
 80088b4:	ffefffff 	.word	0xffefffff
 80088b8:	ff9fffff 	.word	0xff9fffff
 80088bc:	fff7ffff 	.word	0xfff7ffff

080088c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b092      	sub	sp, #72	; 0x48
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2284      	movs	r2, #132	; 0x84
 80088cc:	2100      	movs	r1, #0
 80088ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088d0:	f7fc f84e 	bl	8004970 <HAL_GetTick>
 80088d4:	0003      	movs	r3, r0
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2208      	movs	r2, #8
 80088e0:	4013      	ands	r3, r2
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d12c      	bne.n	8008940 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e8:	2280      	movs	r2, #128	; 0x80
 80088ea:	0391      	lsls	r1, r2, #14
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4a46      	ldr	r2, [pc, #280]	; (8008a08 <UART_CheckIdleState+0x148>)
 80088f0:	9200      	str	r2, [sp, #0]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f000 f88c 	bl	8008a10 <UART_WaitOnFlagUntilTimeout>
 80088f8:	1e03      	subs	r3, r0, #0
 80088fa:	d021      	beq.n	8008940 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008904:	63bb      	str	r3, [r7, #56]	; 0x38
 8008906:	2301      	movs	r3, #1
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	f383 8810 	msr	PRIMASK, r3
}
 8008910:	46c0      	nop			; (mov r8, r8)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2180      	movs	r1, #128	; 0x80
 800891e:	438a      	bics	r2, r1
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	f383 8810 	msr	PRIMASK, r3
}
 800892c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2278      	movs	r2, #120	; 0x78
 8008938:	2100      	movs	r1, #0
 800893a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e05f      	b.n	8008a00 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2204      	movs	r2, #4
 8008948:	4013      	ands	r3, r2
 800894a:	2b04      	cmp	r3, #4
 800894c:	d146      	bne.n	80089dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008950:	2280      	movs	r2, #128	; 0x80
 8008952:	03d1      	lsls	r1, r2, #15
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4a2c      	ldr	r2, [pc, #176]	; (8008a08 <UART_CheckIdleState+0x148>)
 8008958:	9200      	str	r2, [sp, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	f000 f858 	bl	8008a10 <UART_WaitOnFlagUntilTimeout>
 8008960:	1e03      	subs	r3, r0, #0
 8008962:	d03b      	beq.n	80089dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008964:	f3ef 8310 	mrs	r3, PRIMASK
 8008968:	60fb      	str	r3, [r7, #12]
  return(result);
 800896a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
 800896e:	2301      	movs	r3, #1
 8008970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f383 8810 	msr	PRIMASK, r3
}
 8008978:	46c0      	nop			; (mov r8, r8)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4921      	ldr	r1, [pc, #132]	; (8008a0c <UART_CheckIdleState+0x14c>)
 8008986:	400a      	ands	r2, r1
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f383 8810 	msr	PRIMASK, r3
}
 8008994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008996:	f3ef 8310 	mrs	r3, PRIMASK
 800899a:	61bb      	str	r3, [r7, #24]
  return(result);
 800899c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800899e:	633b      	str	r3, [r7, #48]	; 0x30
 80089a0:	2301      	movs	r3, #1
 80089a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f383 8810 	msr	PRIMASK, r3
}
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2101      	movs	r1, #1
 80089b8:	438a      	bics	r2, r1
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	f383 8810 	msr	PRIMASK, r3
}
 80089c6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2280      	movs	r2, #128	; 0x80
 80089cc:	2120      	movs	r1, #32
 80089ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2278      	movs	r2, #120	; 0x78
 80089d4:	2100      	movs	r1, #0
 80089d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e011      	b.n	8008a00 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2280      	movs	r2, #128	; 0x80
 80089e6:	2120      	movs	r1, #32
 80089e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2278      	movs	r2, #120	; 0x78
 80089fa:	2100      	movs	r1, #0
 80089fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b010      	add	sp, #64	; 0x40
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	01ffffff 	.word	0x01ffffff
 8008a0c:	fffffedf 	.word	0xfffffedf

08008a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	603b      	str	r3, [r7, #0]
 8008a1c:	1dfb      	adds	r3, r7, #7
 8008a1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a20:	e04b      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	3301      	adds	r3, #1
 8008a26:	d048      	beq.n	8008aba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a28:	f7fb ffa2 	bl	8004970 <HAL_GetTick>
 8008a2c:	0002      	movs	r2, r0
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d302      	bcc.n	8008a3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e04b      	b.n	8008ada <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	d035      	beq.n	8008aba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	2208      	movs	r2, #8
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d111      	bne.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2208      	movs	r2, #8
 8008a62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	0018      	movs	r0, r3
 8008a68:	f000 f8f2 	bl	8008c50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2284      	movs	r2, #132	; 0x84
 8008a70:	2108      	movs	r1, #8
 8008a72:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2278      	movs	r2, #120	; 0x78
 8008a78:	2100      	movs	r1, #0
 8008a7a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e02c      	b.n	8008ada <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	2380      	movs	r3, #128	; 0x80
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d112      	bne.n	8008aba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2280      	movs	r2, #128	; 0x80
 8008a9a:	0112      	lsls	r2, r2, #4
 8008a9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f000 f8d5 	bl	8008c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2284      	movs	r2, #132	; 0x84
 8008aaa:	2120      	movs	r1, #32
 8008aac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2278      	movs	r2, #120	; 0x78
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e00f      	b.n	8008ada <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	425a      	negs	r2, r3
 8008aca:	4153      	adcs	r3, r2
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	001a      	movs	r2, r3
 8008ad0:	1dfb      	adds	r3, r7, #7
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d0a4      	beq.n	8008a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	0018      	movs	r0, r3
 8008adc:	46bd      	mov	sp, r7
 8008ade:	b004      	add	sp, #16
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b090      	sub	sp, #64	; 0x40
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	1dbb      	adds	r3, r7, #6
 8008af0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	1dba      	adds	r2, r7, #6
 8008afc:	2158      	movs	r1, #88	; 0x58
 8008afe:	8812      	ldrh	r2, [r2, #0]
 8008b00:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1dba      	adds	r2, r7, #6
 8008b06:	215a      	movs	r1, #90	; 0x5a
 8008b08:	8812      	ldrh	r2, [r2, #0]
 8008b0a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	2380      	movs	r3, #128	; 0x80
 8008b18:	015b      	lsls	r3, r3, #5
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d10d      	bne.n	8008b3a <UART_Start_Receive_IT+0x56>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <UART_Start_Receive_IT+0x4c>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	225c      	movs	r2, #92	; 0x5c
 8008b2a:	4946      	ldr	r1, [pc, #280]	; (8008c44 <UART_Start_Receive_IT+0x160>)
 8008b2c:	5299      	strh	r1, [r3, r2]
 8008b2e:	e01a      	b.n	8008b66 <UART_Start_Receive_IT+0x82>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	225c      	movs	r2, #92	; 0x5c
 8008b34:	21ff      	movs	r1, #255	; 0xff
 8008b36:	5299      	strh	r1, [r3, r2]
 8008b38:	e015      	b.n	8008b66 <UART_Start_Receive_IT+0x82>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10d      	bne.n	8008b5e <UART_Start_Receive_IT+0x7a>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <UART_Start_Receive_IT+0x70>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	225c      	movs	r2, #92	; 0x5c
 8008b4e:	21ff      	movs	r1, #255	; 0xff
 8008b50:	5299      	strh	r1, [r3, r2]
 8008b52:	e008      	b.n	8008b66 <UART_Start_Receive_IT+0x82>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	225c      	movs	r2, #92	; 0x5c
 8008b58:	217f      	movs	r1, #127	; 0x7f
 8008b5a:	5299      	strh	r1, [r3, r2]
 8008b5c:	e003      	b.n	8008b66 <UART_Start_Receive_IT+0x82>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	225c      	movs	r2, #92	; 0x5c
 8008b62:	2100      	movs	r1, #0
 8008b64:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2284      	movs	r2, #132	; 0x84
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2280      	movs	r2, #128	; 0x80
 8008b72:	2122      	movs	r1, #34	; 0x22
 8008b74:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b76:	f3ef 8310 	mrs	r3, PRIMASK
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b80:	2301      	movs	r3, #1
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	f383 8810 	msr	PRIMASK, r3
}
 8008b8a:	46c0      	nop			; (mov r8, r8)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2101      	movs	r1, #1
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	f383 8810 	msr	PRIMASK, r3
}
 8008ba6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	015b      	lsls	r3, r3, #5
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d107      	bne.n	8008bc4 <UART_Start_Receive_IT+0xe0>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d103      	bne.n	8008bc4 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4a22      	ldr	r2, [pc, #136]	; (8008c48 <UART_Start_Receive_IT+0x164>)
 8008bc0:	669a      	str	r2, [r3, #104]	; 0x68
 8008bc2:	e002      	b.n	8008bca <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a21      	ldr	r2, [pc, #132]	; (8008c4c <UART_Start_Receive_IT+0x168>)
 8008bc8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d019      	beq.n	8008c06 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008bda:	637b      	str	r3, [r7, #52]	; 0x34
 8008bdc:	2301      	movs	r3, #1
 8008bde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	f383 8810 	msr	PRIMASK, r3
}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2190      	movs	r1, #144	; 0x90
 8008bf4:	0049      	lsls	r1, r1, #1
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	f383 8810 	msr	PRIMASK, r3
}
 8008c04:	e018      	b.n	8008c38 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c06:	f3ef 8310 	mrs	r3, PRIMASK
 8008c0a:	613b      	str	r3, [r7, #16]
  return(result);
 8008c0c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c10:	2301      	movs	r3, #1
 8008c12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f383 8810 	msr	PRIMASK, r3
}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2120      	movs	r1, #32
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	f383 8810 	msr	PRIMASK, r3
}
 8008c36:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b010      	add	sp, #64	; 0x40
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	000001ff 	.word	0x000001ff
 8008c48:	08008f55 	.word	0x08008f55
 8008c4c:	08008d9d 	.word	0x08008d9d

08008c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	; 0x38
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c58:	f3ef 8310 	mrs	r3, PRIMASK
 8008c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
 8008c62:	2301      	movs	r3, #1
 8008c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	f383 8810 	msr	PRIMASK, r3
}
 8008c6c:	46c0      	nop			; (mov r8, r8)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4926      	ldr	r1, [pc, #152]	; (8008d14 <UART_EndRxTransfer+0xc4>)
 8008c7a:	400a      	ands	r2, r1
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f383 8810 	msr	PRIMASK, r3
}
 8008c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c8e:	623b      	str	r3, [r7, #32]
  return(result);
 8008c90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c92:	633b      	str	r3, [r7, #48]	; 0x30
 8008c94:	2301      	movs	r3, #1
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	f383 8810 	msr	PRIMASK, r3
}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2101      	movs	r1, #1
 8008cac:	438a      	bics	r2, r1
 8008cae:	609a      	str	r2, [r3, #8]
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	f383 8810 	msr	PRIMASK, r3
}
 8008cba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d118      	bne.n	8008cf6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cce:	2301      	movs	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f383 8810 	msr	PRIMASK, r3
}
 8008cd8:	46c0      	nop			; (mov r8, r8)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2110      	movs	r1, #16
 8008ce6:	438a      	bics	r2, r1
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f383 8810 	msr	PRIMASK, r3
}
 8008cf4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2280      	movs	r2, #128	; 0x80
 8008cfa:	2120      	movs	r1, #32
 8008cfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b00e      	add	sp, #56	; 0x38
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	fffffedf 	.word	0xfffffedf

08008d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	225a      	movs	r2, #90	; 0x5a
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2252      	movs	r2, #82	; 0x52
 8008d32:	2100      	movs	r1, #0
 8008d34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7ff fbb9 	bl	80084b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	46bd      	mov	sp, r7
 8008d42:	b004      	add	sp, #16
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	2301      	movs	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f383 8810 	msr	PRIMASK, r3
}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2140      	movs	r1, #64	; 0x40
 8008d70:	438a      	bics	r2, r1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f383 8810 	msr	PRIMASK, r3
}
 8008d7e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f7ff fb86 	bl	80084a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d94:	46c0      	nop			; (mov r8, r8)
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b006      	add	sp, #24
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b094      	sub	sp, #80	; 0x50
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008da4:	204e      	movs	r0, #78	; 0x4e
 8008da6:	183b      	adds	r3, r7, r0
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	215c      	movs	r1, #92	; 0x5c
 8008dac:	5a52      	ldrh	r2, [r2, r1]
 8008dae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2280      	movs	r2, #128	; 0x80
 8008db4:	589b      	ldr	r3, [r3, r2]
 8008db6:	2b22      	cmp	r3, #34	; 0x22
 8008db8:	d000      	beq.n	8008dbc <UART_RxISR_8BIT+0x20>
 8008dba:	e0ba      	b.n	8008f32 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	214c      	movs	r1, #76	; 0x4c
 8008dc2:	187b      	adds	r3, r7, r1
 8008dc4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008dc6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dc8:	187b      	adds	r3, r7, r1
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	183b      	adds	r3, r7, r0
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b2d9      	uxtb	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd8:	400a      	ands	r2, r1
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	225a      	movs	r2, #90	; 0x5a
 8008dec:	5a9b      	ldrh	r3, [r3, r2]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b299      	uxth	r1, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	225a      	movs	r2, #90	; 0x5a
 8008df8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	225a      	movs	r2, #90	; 0x5a
 8008dfe:	5a9b      	ldrh	r3, [r3, r2]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d000      	beq.n	8008e08 <UART_RxISR_8BIT+0x6c>
 8008e06:	e09c      	b.n	8008f42 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e08:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e12:	2301      	movs	r3, #1
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	f383 8810 	msr	PRIMASK, r3
}
 8008e1c:	46c0      	nop			; (mov r8, r8)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4948      	ldr	r1, [pc, #288]	; (8008f4c <UART_RxISR_8BIT+0x1b0>)
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	f383 8810 	msr	PRIMASK, r3
}
 8008e38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e42:	647b      	str	r3, [r7, #68]	; 0x44
 8008e44:	2301      	movs	r3, #1
 8008e46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4a:	f383 8810 	msr	PRIMASK, r3
}
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	438a      	bics	r2, r1
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	f383 8810 	msr	PRIMASK, r3
}
 8008e6a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2280      	movs	r2, #128	; 0x80
 8008e70:	2120      	movs	r1, #32
 8008e72:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	2380      	movs	r3, #128	; 0x80
 8008e88:	041b      	lsls	r3, r3, #16
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	d018      	beq.n	8008ec0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e92:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e94:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e96:	643b      	str	r3, [r7, #64]	; 0x40
 8008e98:	2301      	movs	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4928      	ldr	r1, [pc, #160]	; (8008f50 <UART_RxISR_8BIT+0x1b4>)
 8008eb0:	400a      	ands	r2, r1
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	f383 8810 	msr	PRIMASK, r3
}
 8008ebe:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d12f      	bne.n	8008f28 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ece:	f3ef 8310 	mrs	r3, PRIMASK
 8008ed2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ed4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	2301      	movs	r3, #1
 8008eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f383 8810 	msr	PRIMASK, r3
}
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2110      	movs	r1, #16
 8008ef0:	438a      	bics	r2, r1
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f383 8810 	msr	PRIMASK, r3
}
 8008efe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	2210      	movs	r2, #16
 8008f08:	4013      	ands	r3, r2
 8008f0a:	2b10      	cmp	r3, #16
 8008f0c:	d103      	bne.n	8008f16 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2210      	movs	r2, #16
 8008f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2258      	movs	r2, #88	; 0x58
 8008f1a:	5a9a      	ldrh	r2, [r3, r2]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff facd 	bl	80084c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f26:	e00c      	b.n	8008f42 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f7f9 ffe4 	bl	8002ef8 <HAL_UART_RxCpltCallback>
}
 8008f30:	e007      	b.n	8008f42 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699a      	ldr	r2, [r3, #24]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2108      	movs	r1, #8
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	619a      	str	r2, [r3, #24]
}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	46bd      	mov	sp, r7
 8008f46:	b014      	add	sp, #80	; 0x50
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	fffffedf 	.word	0xfffffedf
 8008f50:	fbffffff 	.word	0xfbffffff

08008f54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b094      	sub	sp, #80	; 0x50
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f5c:	204e      	movs	r0, #78	; 0x4e
 8008f5e:	183b      	adds	r3, r7, r0
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	215c      	movs	r1, #92	; 0x5c
 8008f64:	5a52      	ldrh	r2, [r2, r1]
 8008f66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2280      	movs	r2, #128	; 0x80
 8008f6c:	589b      	ldr	r3, [r3, r2]
 8008f6e:	2b22      	cmp	r3, #34	; 0x22
 8008f70:	d000      	beq.n	8008f74 <UART_RxISR_16BIT+0x20>
 8008f72:	e0ba      	b.n	80090ea <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	214c      	movs	r1, #76	; 0x4c
 8008f7a:	187b      	adds	r3, r7, r1
 8008f7c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008f7e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f86:	187b      	adds	r3, r7, r1
 8008f88:	183a      	adds	r2, r7, r0
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	8812      	ldrh	r2, [r2, #0]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	225a      	movs	r2, #90	; 0x5a
 8008fa4:	5a9b      	ldrh	r3, [r3, r2]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b299      	uxth	r1, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	225a      	movs	r2, #90	; 0x5a
 8008fb0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	225a      	movs	r2, #90	; 0x5a
 8008fb6:	5a9b      	ldrh	r3, [r3, r2]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d000      	beq.n	8008fc0 <UART_RxISR_16BIT+0x6c>
 8008fbe:	e09c      	b.n	80090fa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc4:	623b      	str	r3, [r7, #32]
  return(result);
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8008fca:	2301      	movs	r3, #1
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	f383 8810 	msr	PRIMASK, r3
}
 8008fd4:	46c0      	nop			; (mov r8, r8)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4948      	ldr	r1, [pc, #288]	; (8009104 <UART_RxISR_16BIT+0x1b0>)
 8008fe2:	400a      	ands	r2, r1
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	f383 8810 	msr	PRIMASK, r3
}
 8008ff0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	f383 8810 	msr	PRIMASK, r3
}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689a      	ldr	r2, [r3, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2101      	movs	r1, #1
 8009014:	438a      	bics	r2, r1
 8009016:	609a      	str	r2, [r3, #8]
 8009018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	f383 8810 	msr	PRIMASK, r3
}
 8009022:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2280      	movs	r2, #128	; 0x80
 8009028:	2120      	movs	r1, #32
 800902a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	2380      	movs	r3, #128	; 0x80
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	4013      	ands	r3, r2
 8009044:	d018      	beq.n	8009078 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009046:	f3ef 8310 	mrs	r3, PRIMASK
 800904a:	617b      	str	r3, [r7, #20]
  return(result);
 800904c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009050:	2301      	movs	r3, #1
 8009052:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f383 8810 	msr	PRIMASK, r3
}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4928      	ldr	r1, [pc, #160]	; (8009108 <UART_RxISR_16BIT+0x1b4>)
 8009068:	400a      	ands	r2, r1
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f383 8810 	msr	PRIMASK, r3
}
 8009076:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907c:	2b01      	cmp	r3, #1
 800907e:	d12f      	bne.n	80090e0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009086:	f3ef 8310 	mrs	r3, PRIMASK
 800908a:	60bb      	str	r3, [r7, #8]
  return(result);
 800908c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009090:	2301      	movs	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f383 8810 	msr	PRIMASK, r3
}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2110      	movs	r1, #16
 80090a8:	438a      	bics	r2, r1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f383 8810 	msr	PRIMASK, r3
}
 80090b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	2210      	movs	r2, #16
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b10      	cmp	r3, #16
 80090c4:	d103      	bne.n	80090ce <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2210      	movs	r2, #16
 80090cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2258      	movs	r2, #88	; 0x58
 80090d2:	5a9a      	ldrh	r2, [r3, r2]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	0011      	movs	r1, r2
 80090d8:	0018      	movs	r0, r3
 80090da:	f7ff f9f1 	bl	80084c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090de:	e00c      	b.n	80090fa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7f9 ff08 	bl	8002ef8 <HAL_UART_RxCpltCallback>
}
 80090e8:	e007      	b.n	80090fa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699a      	ldr	r2, [r3, #24]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2108      	movs	r1, #8
 80090f6:	430a      	orrs	r2, r1
 80090f8:	619a      	str	r2, [r3, #24]
}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	46bd      	mov	sp, r7
 80090fe:	b014      	add	sp, #80	; 0x50
 8009100:	bd80      	pop	{r7, pc}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	fffffedf 	.word	0xfffffedf
 8009108:	fbffffff 	.word	0xfbffffff

0800910c <atof>:
 800910c:	b510      	push	{r4, lr}
 800910e:	2100      	movs	r1, #0
 8009110:	f001 fe18 	bl	800ad44 <strtod>
 8009114:	bd10      	pop	{r4, pc}
	...

08009118 <__errno>:
 8009118:	4b01      	ldr	r3, [pc, #4]	; (8009120 <__errno+0x8>)
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	4770      	bx	lr
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	20000038 	.word	0x20000038

08009124 <__libc_init_array>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	2600      	movs	r6, #0
 8009128:	4d0c      	ldr	r5, [pc, #48]	; (800915c <__libc_init_array+0x38>)
 800912a:	4c0d      	ldr	r4, [pc, #52]	; (8009160 <__libc_init_array+0x3c>)
 800912c:	1b64      	subs	r4, r4, r5
 800912e:	10a4      	asrs	r4, r4, #2
 8009130:	42a6      	cmp	r6, r4
 8009132:	d109      	bne.n	8009148 <__libc_init_array+0x24>
 8009134:	2600      	movs	r6, #0
 8009136:	f005 fa5b 	bl	800e5f0 <_init>
 800913a:	4d0a      	ldr	r5, [pc, #40]	; (8009164 <__libc_init_array+0x40>)
 800913c:	4c0a      	ldr	r4, [pc, #40]	; (8009168 <__libc_init_array+0x44>)
 800913e:	1b64      	subs	r4, r4, r5
 8009140:	10a4      	asrs	r4, r4, #2
 8009142:	42a6      	cmp	r6, r4
 8009144:	d105      	bne.n	8009152 <__libc_init_array+0x2e>
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	00b3      	lsls	r3, r6, #2
 800914a:	58eb      	ldr	r3, [r5, r3]
 800914c:	4798      	blx	r3
 800914e:	3601      	adds	r6, #1
 8009150:	e7ee      	b.n	8009130 <__libc_init_array+0xc>
 8009152:	00b3      	lsls	r3, r6, #2
 8009154:	58eb      	ldr	r3, [r5, r3]
 8009156:	4798      	blx	r3
 8009158:	3601      	adds	r6, #1
 800915a:	e7f2      	b.n	8009142 <__libc_init_array+0x1e>
 800915c:	0800ed14 	.word	0x0800ed14
 8009160:	0800ed14 	.word	0x0800ed14
 8009164:	0800ed14 	.word	0x0800ed14
 8009168:	0800ed18 	.word	0x0800ed18

0800916c <memcpy>:
 800916c:	2300      	movs	r3, #0
 800916e:	b510      	push	{r4, lr}
 8009170:	429a      	cmp	r2, r3
 8009172:	d100      	bne.n	8009176 <memcpy+0xa>
 8009174:	bd10      	pop	{r4, pc}
 8009176:	5ccc      	ldrb	r4, [r1, r3]
 8009178:	54c4      	strb	r4, [r0, r3]
 800917a:	3301      	adds	r3, #1
 800917c:	e7f8      	b.n	8009170 <memcpy+0x4>

0800917e <memset>:
 800917e:	0003      	movs	r3, r0
 8009180:	1882      	adds	r2, r0, r2
 8009182:	4293      	cmp	r3, r2
 8009184:	d100      	bne.n	8009188 <memset+0xa>
 8009186:	4770      	bx	lr
 8009188:	7019      	strb	r1, [r3, #0]
 800918a:	3301      	adds	r3, #1
 800918c:	e7f9      	b.n	8009182 <memset+0x4>

0800918e <__cvt>:
 800918e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009190:	001e      	movs	r6, r3
 8009192:	2300      	movs	r3, #0
 8009194:	0014      	movs	r4, r2
 8009196:	b08b      	sub	sp, #44	; 0x2c
 8009198:	429e      	cmp	r6, r3
 800919a:	da04      	bge.n	80091a6 <__cvt+0x18>
 800919c:	2180      	movs	r1, #128	; 0x80
 800919e:	0609      	lsls	r1, r1, #24
 80091a0:	1873      	adds	r3, r6, r1
 80091a2:	001e      	movs	r6, r3
 80091a4:	232d      	movs	r3, #45	; 0x2d
 80091a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091a8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80091aa:	7013      	strb	r3, [r2, #0]
 80091ac:	2320      	movs	r3, #32
 80091ae:	2203      	movs	r2, #3
 80091b0:	439f      	bics	r7, r3
 80091b2:	2f46      	cmp	r7, #70	; 0x46
 80091b4:	d007      	beq.n	80091c6 <__cvt+0x38>
 80091b6:	003b      	movs	r3, r7
 80091b8:	3b45      	subs	r3, #69	; 0x45
 80091ba:	4259      	negs	r1, r3
 80091bc:	414b      	adcs	r3, r1
 80091be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80091c0:	3a01      	subs	r2, #1
 80091c2:	18cb      	adds	r3, r1, r3
 80091c4:	9310      	str	r3, [sp, #64]	; 0x40
 80091c6:	ab09      	add	r3, sp, #36	; 0x24
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	ab08      	add	r3, sp, #32
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091d0:	9200      	str	r2, [sp, #0]
 80091d2:	9302      	str	r3, [sp, #8]
 80091d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d6:	0022      	movs	r2, r4
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	0033      	movs	r3, r6
 80091dc:	f001 ffd2 	bl	800b184 <_dtoa_r>
 80091e0:	0005      	movs	r5, r0
 80091e2:	2f47      	cmp	r7, #71	; 0x47
 80091e4:	d102      	bne.n	80091ec <__cvt+0x5e>
 80091e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091e8:	07db      	lsls	r3, r3, #31
 80091ea:	d528      	bpl.n	800923e <__cvt+0xb0>
 80091ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ee:	18eb      	adds	r3, r5, r3
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	2f46      	cmp	r7, #70	; 0x46
 80091f4:	d114      	bne.n	8009220 <__cvt+0x92>
 80091f6:	782b      	ldrb	r3, [r5, #0]
 80091f8:	2b30      	cmp	r3, #48	; 0x30
 80091fa:	d10c      	bne.n	8009216 <__cvt+0x88>
 80091fc:	2200      	movs	r2, #0
 80091fe:	2300      	movs	r3, #0
 8009200:	0020      	movs	r0, r4
 8009202:	0031      	movs	r1, r6
 8009204:	f7f7 f92c 	bl	8000460 <__aeabi_dcmpeq>
 8009208:	2800      	cmp	r0, #0
 800920a:	d104      	bne.n	8009216 <__cvt+0x88>
 800920c:	2301      	movs	r3, #1
 800920e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009218:	9a07      	ldr	r2, [sp, #28]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	18d3      	adds	r3, r2, r3
 800921e:	9307      	str	r3, [sp, #28]
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	0020      	movs	r0, r4
 8009226:	0031      	movs	r1, r6
 8009228:	f7f7 f91a 	bl	8000460 <__aeabi_dcmpeq>
 800922c:	2800      	cmp	r0, #0
 800922e:	d001      	beq.n	8009234 <__cvt+0xa6>
 8009230:	9b07      	ldr	r3, [sp, #28]
 8009232:	9309      	str	r3, [sp, #36]	; 0x24
 8009234:	2230      	movs	r2, #48	; 0x30
 8009236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009238:	9907      	ldr	r1, [sp, #28]
 800923a:	428b      	cmp	r3, r1
 800923c:	d306      	bcc.n	800924c <__cvt+0xbe>
 800923e:	0028      	movs	r0, r5
 8009240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009244:	1b5b      	subs	r3, r3, r5
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	b00b      	add	sp, #44	; 0x2c
 800924a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924c:	1c59      	adds	r1, r3, #1
 800924e:	9109      	str	r1, [sp, #36]	; 0x24
 8009250:	701a      	strb	r2, [r3, #0]
 8009252:	e7f0      	b.n	8009236 <__cvt+0xa8>

08009254 <__exponent>:
 8009254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009256:	1c83      	adds	r3, r0, #2
 8009258:	b087      	sub	sp, #28
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	0005      	movs	r5, r0
 800925e:	000c      	movs	r4, r1
 8009260:	232b      	movs	r3, #43	; 0x2b
 8009262:	7002      	strb	r2, [r0, #0]
 8009264:	2900      	cmp	r1, #0
 8009266:	da01      	bge.n	800926c <__exponent+0x18>
 8009268:	424c      	negs	r4, r1
 800926a:	3302      	adds	r3, #2
 800926c:	706b      	strb	r3, [r5, #1]
 800926e:	2c09      	cmp	r4, #9
 8009270:	dd31      	ble.n	80092d6 <__exponent+0x82>
 8009272:	270a      	movs	r7, #10
 8009274:	ab04      	add	r3, sp, #16
 8009276:	1dde      	adds	r6, r3, #7
 8009278:	0020      	movs	r0, r4
 800927a:	0039      	movs	r1, r7
 800927c:	9601      	str	r6, [sp, #4]
 800927e:	f7f7 f8d9 	bl	8000434 <__aeabi_idivmod>
 8009282:	3e01      	subs	r6, #1
 8009284:	3130      	adds	r1, #48	; 0x30
 8009286:	0020      	movs	r0, r4
 8009288:	7031      	strb	r1, [r6, #0]
 800928a:	0039      	movs	r1, r7
 800928c:	9402      	str	r4, [sp, #8]
 800928e:	f7f6 ffeb 	bl	8000268 <__divsi3>
 8009292:	9b02      	ldr	r3, [sp, #8]
 8009294:	0004      	movs	r4, r0
 8009296:	2b63      	cmp	r3, #99	; 0x63
 8009298:	dcee      	bgt.n	8009278 <__exponent+0x24>
 800929a:	9b01      	ldr	r3, [sp, #4]
 800929c:	3430      	adds	r4, #48	; 0x30
 800929e:	1e9a      	subs	r2, r3, #2
 80092a0:	0013      	movs	r3, r2
 80092a2:	9903      	ldr	r1, [sp, #12]
 80092a4:	7014      	strb	r4, [r2, #0]
 80092a6:	a804      	add	r0, sp, #16
 80092a8:	3007      	adds	r0, #7
 80092aa:	4298      	cmp	r0, r3
 80092ac:	d80e      	bhi.n	80092cc <__exponent+0x78>
 80092ae:	ab04      	add	r3, sp, #16
 80092b0:	3307      	adds	r3, #7
 80092b2:	2000      	movs	r0, #0
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d804      	bhi.n	80092c2 <__exponent+0x6e>
 80092b8:	ab04      	add	r3, sp, #16
 80092ba:	3009      	adds	r0, #9
 80092bc:	18c0      	adds	r0, r0, r3
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	1ac0      	subs	r0, r0, r3
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	1818      	adds	r0, r3, r0
 80092c6:	1b40      	subs	r0, r0, r5
 80092c8:	b007      	add	sp, #28
 80092ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092cc:	7818      	ldrb	r0, [r3, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	7008      	strb	r0, [r1, #0]
 80092d2:	3101      	adds	r1, #1
 80092d4:	e7e7      	b.n	80092a6 <__exponent+0x52>
 80092d6:	2330      	movs	r3, #48	; 0x30
 80092d8:	18e4      	adds	r4, r4, r3
 80092da:	70ab      	strb	r3, [r5, #2]
 80092dc:	1d28      	adds	r0, r5, #4
 80092de:	70ec      	strb	r4, [r5, #3]
 80092e0:	e7f1      	b.n	80092c6 <__exponent+0x72>
	...

080092e4 <_printf_float>:
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	b095      	sub	sp, #84	; 0x54
 80092e8:	000c      	movs	r4, r1
 80092ea:	9209      	str	r2, [sp, #36]	; 0x24
 80092ec:	001e      	movs	r6, r3
 80092ee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80092f0:	0007      	movs	r7, r0
 80092f2:	f003 faa3 	bl	800c83c <_localeconv_r>
 80092f6:	6803      	ldr	r3, [r0, #0]
 80092f8:	0018      	movs	r0, r3
 80092fa:	930c      	str	r3, [sp, #48]	; 0x30
 80092fc:	f7f6 ff0e 	bl	800011c <strlen>
 8009300:	2300      	movs	r3, #0
 8009302:	9312      	str	r3, [sp, #72]	; 0x48
 8009304:	7e23      	ldrb	r3, [r4, #24]
 8009306:	2207      	movs	r2, #7
 8009308:	930a      	str	r3, [sp, #40]	; 0x28
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	900e      	str	r0, [sp, #56]	; 0x38
 800930e:	930d      	str	r3, [sp, #52]	; 0x34
 8009310:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	05c9      	lsls	r1, r1, #23
 8009316:	d547      	bpl.n	80093a8 <_printf_float+0xc4>
 8009318:	189b      	adds	r3, r3, r2
 800931a:	4393      	bics	r3, r2
 800931c:	001a      	movs	r2, r3
 800931e:	3208      	adds	r2, #8
 8009320:	602a      	str	r2, [r5, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	64a2      	str	r2, [r4, #72]	; 0x48
 8009328:	64e3      	str	r3, [r4, #76]	; 0x4c
 800932a:	2201      	movs	r2, #1
 800932c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800932e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009330:	930b      	str	r3, [sp, #44]	; 0x2c
 8009332:	006b      	lsls	r3, r5, #1
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	930f      	str	r3, [sp, #60]	; 0x3c
 8009338:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800933a:	4ba7      	ldr	r3, [pc, #668]	; (80095d8 <_printf_float+0x2f4>)
 800933c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800933e:	4252      	negs	r2, r2
 8009340:	f7f9 f99a 	bl	8002678 <__aeabi_dcmpun>
 8009344:	2800      	cmp	r0, #0
 8009346:	d131      	bne.n	80093ac <_printf_float+0xc8>
 8009348:	2201      	movs	r2, #1
 800934a:	4ba3      	ldr	r3, [pc, #652]	; (80095d8 <_printf_float+0x2f4>)
 800934c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800934e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009350:	4252      	negs	r2, r2
 8009352:	f7f7 f895 	bl	8000480 <__aeabi_dcmple>
 8009356:	2800      	cmp	r0, #0
 8009358:	d128      	bne.n	80093ac <_printf_float+0xc8>
 800935a:	2200      	movs	r2, #0
 800935c:	2300      	movs	r3, #0
 800935e:	0029      	movs	r1, r5
 8009360:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009362:	f7f7 f883 	bl	800046c <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	d003      	beq.n	8009372 <_printf_float+0x8e>
 800936a:	0023      	movs	r3, r4
 800936c:	222d      	movs	r2, #45	; 0x2d
 800936e:	3343      	adds	r3, #67	; 0x43
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009374:	4d99      	ldr	r5, [pc, #612]	; (80095dc <_printf_float+0x2f8>)
 8009376:	2b47      	cmp	r3, #71	; 0x47
 8009378:	d900      	bls.n	800937c <_printf_float+0x98>
 800937a:	4d99      	ldr	r5, [pc, #612]	; (80095e0 <_printf_float+0x2fc>)
 800937c:	2303      	movs	r3, #3
 800937e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	3301      	adds	r3, #1
 8009384:	439a      	bics	r2, r3
 8009386:	2300      	movs	r3, #0
 8009388:	6022      	str	r2, [r4, #0]
 800938a:	930b      	str	r3, [sp, #44]	; 0x2c
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938e:	0021      	movs	r1, r4
 8009390:	0038      	movs	r0, r7
 8009392:	9600      	str	r6, [sp, #0]
 8009394:	aa13      	add	r2, sp, #76	; 0x4c
 8009396:	f000 f9e7 	bl	8009768 <_printf_common>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	d000      	beq.n	80093a0 <_printf_float+0xbc>
 800939e:	e0a2      	b.n	80094e6 <_printf_float+0x202>
 80093a0:	2001      	movs	r0, #1
 80093a2:	4240      	negs	r0, r0
 80093a4:	b015      	add	sp, #84	; 0x54
 80093a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a8:	3307      	adds	r3, #7
 80093aa:	e7b6      	b.n	800931a <_printf_float+0x36>
 80093ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093ae:	002b      	movs	r3, r5
 80093b0:	0010      	movs	r0, r2
 80093b2:	0029      	movs	r1, r5
 80093b4:	f7f9 f960 	bl	8002678 <__aeabi_dcmpun>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d00b      	beq.n	80093d4 <_printf_float+0xf0>
 80093bc:	2d00      	cmp	r5, #0
 80093be:	da03      	bge.n	80093c8 <_printf_float+0xe4>
 80093c0:	0023      	movs	r3, r4
 80093c2:	222d      	movs	r2, #45	; 0x2d
 80093c4:	3343      	adds	r3, #67	; 0x43
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ca:	4d86      	ldr	r5, [pc, #536]	; (80095e4 <_printf_float+0x300>)
 80093cc:	2b47      	cmp	r3, #71	; 0x47
 80093ce:	d9d5      	bls.n	800937c <_printf_float+0x98>
 80093d0:	4d85      	ldr	r5, [pc, #532]	; (80095e8 <_printf_float+0x304>)
 80093d2:	e7d3      	b.n	800937c <_printf_float+0x98>
 80093d4:	2220      	movs	r2, #32
 80093d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	4391      	bics	r1, r2
 80093dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	d149      	bne.n	8009476 <_printf_float+0x192>
 80093e2:	3307      	adds	r3, #7
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	2380      	movs	r3, #128	; 0x80
 80093e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	4313      	orrs	r3, r2
 80093ee:	2200      	movs	r2, #0
 80093f0:	9206      	str	r2, [sp, #24]
 80093f2:	aa12      	add	r2, sp, #72	; 0x48
 80093f4:	9205      	str	r2, [sp, #20]
 80093f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f8:	a908      	add	r1, sp, #32
 80093fa:	9204      	str	r2, [sp, #16]
 80093fc:	aa11      	add	r2, sp, #68	; 0x44
 80093fe:	9203      	str	r2, [sp, #12]
 8009400:	2223      	movs	r2, #35	; 0x23
 8009402:	6023      	str	r3, [r4, #0]
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	1852      	adds	r2, r2, r1
 800940a:	9202      	str	r2, [sp, #8]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	0038      	movs	r0, r7
 8009410:	002b      	movs	r3, r5
 8009412:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009414:	f7ff febb 	bl	800918e <__cvt>
 8009418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800941a:	0005      	movs	r5, r0
 800941c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800941e:	2b47      	cmp	r3, #71	; 0x47
 8009420:	d108      	bne.n	8009434 <_printf_float+0x150>
 8009422:	1ccb      	adds	r3, r1, #3
 8009424:	db02      	blt.n	800942c <_printf_float+0x148>
 8009426:	6863      	ldr	r3, [r4, #4]
 8009428:	4299      	cmp	r1, r3
 800942a:	dd48      	ble.n	80094be <_printf_float+0x1da>
 800942c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942e:	3b02      	subs	r3, #2
 8009430:	b2db      	uxtb	r3, r3
 8009432:	930a      	str	r3, [sp, #40]	; 0x28
 8009434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009436:	2b65      	cmp	r3, #101	; 0x65
 8009438:	d824      	bhi.n	8009484 <_printf_float+0x1a0>
 800943a:	0020      	movs	r0, r4
 800943c:	001a      	movs	r2, r3
 800943e:	3901      	subs	r1, #1
 8009440:	3050      	adds	r0, #80	; 0x50
 8009442:	9111      	str	r1, [sp, #68]	; 0x44
 8009444:	f7ff ff06 	bl	8009254 <__exponent>
 8009448:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800944a:	900b      	str	r0, [sp, #44]	; 0x2c
 800944c:	1813      	adds	r3, r2, r0
 800944e:	6123      	str	r3, [r4, #16]
 8009450:	2a01      	cmp	r2, #1
 8009452:	dc02      	bgt.n	800945a <_printf_float+0x176>
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	07d2      	lsls	r2, r2, #31
 8009458:	d501      	bpl.n	800945e <_printf_float+0x17a>
 800945a:	3301      	adds	r3, #1
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	2323      	movs	r3, #35	; 0x23
 8009460:	aa08      	add	r2, sp, #32
 8009462:	189b      	adds	r3, r3, r2
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d100      	bne.n	800946c <_printf_float+0x188>
 800946a:	e78f      	b.n	800938c <_printf_float+0xa8>
 800946c:	0023      	movs	r3, r4
 800946e:	222d      	movs	r2, #45	; 0x2d
 8009470:	3343      	adds	r3, #67	; 0x43
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	e78a      	b.n	800938c <_printf_float+0xa8>
 8009476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009478:	2a47      	cmp	r2, #71	; 0x47
 800947a:	d1b4      	bne.n	80093e6 <_printf_float+0x102>
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1b2      	bne.n	80093e6 <_printf_float+0x102>
 8009480:	3301      	adds	r3, #1
 8009482:	e7af      	b.n	80093e4 <_printf_float+0x100>
 8009484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009486:	2b66      	cmp	r3, #102	; 0x66
 8009488:	d11b      	bne.n	80094c2 <_printf_float+0x1de>
 800948a:	6863      	ldr	r3, [r4, #4]
 800948c:	2900      	cmp	r1, #0
 800948e:	dd0d      	ble.n	80094ac <_printf_float+0x1c8>
 8009490:	6121      	str	r1, [r4, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <_printf_float+0x1b8>
 8009496:	6822      	ldr	r2, [r4, #0]
 8009498:	07d2      	lsls	r2, r2, #31
 800949a:	d502      	bpl.n	80094a2 <_printf_float+0x1be>
 800949c:	3301      	adds	r3, #1
 800949e:	1859      	adds	r1, r3, r1
 80094a0:	6121      	str	r1, [r4, #16]
 80094a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80094a6:	2300      	movs	r3, #0
 80094a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80094aa:	e7d8      	b.n	800945e <_printf_float+0x17a>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <_printf_float+0x1d4>
 80094b0:	2201      	movs	r2, #1
 80094b2:	6821      	ldr	r1, [r4, #0]
 80094b4:	4211      	tst	r1, r2
 80094b6:	d000      	beq.n	80094ba <_printf_float+0x1d6>
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	6122      	str	r2, [r4, #16]
 80094bc:	e7f1      	b.n	80094a2 <_printf_float+0x1be>
 80094be:	2367      	movs	r3, #103	; 0x67
 80094c0:	930a      	str	r3, [sp, #40]	; 0x28
 80094c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094c6:	4293      	cmp	r3, r2
 80094c8:	db06      	blt.n	80094d8 <_printf_float+0x1f4>
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	6123      	str	r3, [r4, #16]
 80094ce:	07d2      	lsls	r2, r2, #31
 80094d0:	d5e7      	bpl.n	80094a2 <_printf_float+0x1be>
 80094d2:	3301      	adds	r3, #1
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	e7e4      	b.n	80094a2 <_printf_float+0x1be>
 80094d8:	2101      	movs	r1, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dc01      	bgt.n	80094e2 <_printf_float+0x1fe>
 80094de:	1849      	adds	r1, r1, r1
 80094e0:	1ac9      	subs	r1, r1, r3
 80094e2:	1852      	adds	r2, r2, r1
 80094e4:	e7e9      	b.n	80094ba <_printf_float+0x1d6>
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	0553      	lsls	r3, r2, #21
 80094ea:	d407      	bmi.n	80094fc <_printf_float+0x218>
 80094ec:	6923      	ldr	r3, [r4, #16]
 80094ee:	002a      	movs	r2, r5
 80094f0:	0038      	movs	r0, r7
 80094f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f4:	47b0      	blx	r6
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	d128      	bne.n	800954c <_printf_float+0x268>
 80094fa:	e751      	b.n	80093a0 <_printf_float+0xbc>
 80094fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fe:	2b65      	cmp	r3, #101	; 0x65
 8009500:	d800      	bhi.n	8009504 <_printf_float+0x220>
 8009502:	e0e1      	b.n	80096c8 <_printf_float+0x3e4>
 8009504:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009506:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009508:	2200      	movs	r2, #0
 800950a:	2300      	movs	r3, #0
 800950c:	f7f6 ffa8 	bl	8000460 <__aeabi_dcmpeq>
 8009510:	2800      	cmp	r0, #0
 8009512:	d031      	beq.n	8009578 <_printf_float+0x294>
 8009514:	2301      	movs	r3, #1
 8009516:	0038      	movs	r0, r7
 8009518:	4a34      	ldr	r2, [pc, #208]	; (80095ec <_printf_float+0x308>)
 800951a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800951c:	47b0      	blx	r6
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d100      	bne.n	8009524 <_printf_float+0x240>
 8009522:	e73d      	b.n	80093a0 <_printf_float+0xbc>
 8009524:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009526:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009528:	4293      	cmp	r3, r2
 800952a:	db02      	blt.n	8009532 <_printf_float+0x24e>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	07db      	lsls	r3, r3, #31
 8009530:	d50c      	bpl.n	800954c <_printf_float+0x268>
 8009532:	0038      	movs	r0, r7
 8009534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009538:	9909      	ldr	r1, [sp, #36]	; 0x24
 800953a:	47b0      	blx	r6
 800953c:	2500      	movs	r5, #0
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d100      	bne.n	8009544 <_printf_float+0x260>
 8009542:	e72d      	b.n	80093a0 <_printf_float+0xbc>
 8009544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009546:	3b01      	subs	r3, #1
 8009548:	42ab      	cmp	r3, r5
 800954a:	dc0a      	bgt.n	8009562 <_printf_float+0x27e>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	079b      	lsls	r3, r3, #30
 8009550:	d500      	bpl.n	8009554 <_printf_float+0x270>
 8009552:	e106      	b.n	8009762 <_printf_float+0x47e>
 8009554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009556:	68e0      	ldr	r0, [r4, #12]
 8009558:	4298      	cmp	r0, r3
 800955a:	db00      	blt.n	800955e <_printf_float+0x27a>
 800955c:	e722      	b.n	80093a4 <_printf_float+0xc0>
 800955e:	0018      	movs	r0, r3
 8009560:	e720      	b.n	80093a4 <_printf_float+0xc0>
 8009562:	0022      	movs	r2, r4
 8009564:	2301      	movs	r3, #1
 8009566:	0038      	movs	r0, r7
 8009568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800956a:	321a      	adds	r2, #26
 800956c:	47b0      	blx	r6
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d100      	bne.n	8009574 <_printf_float+0x290>
 8009572:	e715      	b.n	80093a0 <_printf_float+0xbc>
 8009574:	3501      	adds	r5, #1
 8009576:	e7e5      	b.n	8009544 <_printf_float+0x260>
 8009578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800957a:	2b00      	cmp	r3, #0
 800957c:	dc38      	bgt.n	80095f0 <_printf_float+0x30c>
 800957e:	2301      	movs	r3, #1
 8009580:	0038      	movs	r0, r7
 8009582:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <_printf_float+0x308>)
 8009584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009586:	47b0      	blx	r6
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d100      	bne.n	800958e <_printf_float+0x2aa>
 800958c:	e708      	b.n	80093a0 <_printf_float+0xbc>
 800958e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009590:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009592:	4313      	orrs	r3, r2
 8009594:	d102      	bne.n	800959c <_printf_float+0x2b8>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	07db      	lsls	r3, r3, #31
 800959a:	d5d7      	bpl.n	800954c <_printf_float+0x268>
 800959c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800959e:	0038      	movs	r0, r7
 80095a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095a4:	47b0      	blx	r6
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d100      	bne.n	80095ac <_printf_float+0x2c8>
 80095aa:	e6f9      	b.n	80093a0 <_printf_float+0xbc>
 80095ac:	2300      	movs	r3, #0
 80095ae:	930a      	str	r3, [sp, #40]	; 0x28
 80095b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095b4:	425b      	negs	r3, r3
 80095b6:	4293      	cmp	r3, r2
 80095b8:	dc01      	bgt.n	80095be <_printf_float+0x2da>
 80095ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095bc:	e797      	b.n	80094ee <_printf_float+0x20a>
 80095be:	0022      	movs	r2, r4
 80095c0:	2301      	movs	r3, #1
 80095c2:	0038      	movs	r0, r7
 80095c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095c6:	321a      	adds	r2, #26
 80095c8:	47b0      	blx	r6
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	d100      	bne.n	80095d0 <_printf_float+0x2ec>
 80095ce:	e6e7      	b.n	80093a0 <_printf_float+0xbc>
 80095d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d2:	3301      	adds	r3, #1
 80095d4:	e7eb      	b.n	80095ae <_printf_float+0x2ca>
 80095d6:	46c0      	nop			; (mov r8, r8)
 80095d8:	7fefffff 	.word	0x7fefffff
 80095dc:	0800e854 	.word	0x0800e854
 80095e0:	0800e858 	.word	0x0800e858
 80095e4:	0800e85c 	.word	0x0800e85c
 80095e8:	0800e860 	.word	0x0800e860
 80095ec:	0800ecc1 	.word	0x0800ecc1
 80095f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095f4:	920a      	str	r2, [sp, #40]	; 0x28
 80095f6:	429a      	cmp	r2, r3
 80095f8:	dd00      	ble.n	80095fc <_printf_float+0x318>
 80095fa:	930a      	str	r3, [sp, #40]	; 0x28
 80095fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dc3c      	bgt.n	800967c <_printf_float+0x398>
 8009602:	2300      	movs	r3, #0
 8009604:	930d      	str	r3, [sp, #52]	; 0x34
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	43db      	mvns	r3, r3
 800960a:	17db      	asrs	r3, r3, #31
 800960c:	930f      	str	r3, [sp, #60]	; 0x3c
 800960e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009612:	930b      	str	r3, [sp, #44]	; 0x2c
 8009614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009616:	4013      	ands	r3, r2
 8009618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800961e:	4293      	cmp	r3, r2
 8009620:	dc34      	bgt.n	800968c <_printf_float+0x3a8>
 8009622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009626:	4293      	cmp	r3, r2
 8009628:	db3d      	blt.n	80096a6 <_printf_float+0x3c2>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	07db      	lsls	r3, r3, #31
 800962e:	d43a      	bmi.n	80096a6 <_printf_float+0x3c2>
 8009630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009634:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	1a52      	subs	r2, r2, r1
 800963a:	920a      	str	r2, [sp, #40]	; 0x28
 800963c:	429a      	cmp	r2, r3
 800963e:	dd00      	ble.n	8009642 <_printf_float+0x35e>
 8009640:	930a      	str	r3, [sp, #40]	; 0x28
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	2b00      	cmp	r3, #0
 8009646:	dc36      	bgt.n	80096b6 <_printf_float+0x3d2>
 8009648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964a:	2500      	movs	r5, #0
 800964c:	43db      	mvns	r3, r3
 800964e:	17db      	asrs	r3, r3, #31
 8009650:	930b      	str	r3, [sp, #44]	; 0x2c
 8009652:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965c:	400a      	ands	r2, r1
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	42ab      	cmp	r3, r5
 8009662:	dc00      	bgt.n	8009666 <_printf_float+0x382>
 8009664:	e772      	b.n	800954c <_printf_float+0x268>
 8009666:	0022      	movs	r2, r4
 8009668:	2301      	movs	r3, #1
 800966a:	0038      	movs	r0, r7
 800966c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800966e:	321a      	adds	r2, #26
 8009670:	47b0      	blx	r6
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	d100      	bne.n	8009678 <_printf_float+0x394>
 8009676:	e693      	b.n	80093a0 <_printf_float+0xbc>
 8009678:	3501      	adds	r5, #1
 800967a:	e7ea      	b.n	8009652 <_printf_float+0x36e>
 800967c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800967e:	002a      	movs	r2, r5
 8009680:	0038      	movs	r0, r7
 8009682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009684:	47b0      	blx	r6
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d1bb      	bne.n	8009602 <_printf_float+0x31e>
 800968a:	e689      	b.n	80093a0 <_printf_float+0xbc>
 800968c:	0022      	movs	r2, r4
 800968e:	2301      	movs	r3, #1
 8009690:	0038      	movs	r0, r7
 8009692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009694:	321a      	adds	r2, #26
 8009696:	47b0      	blx	r6
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d100      	bne.n	800969e <_printf_float+0x3ba>
 800969c:	e680      	b.n	80093a0 <_printf_float+0xbc>
 800969e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a0:	3301      	adds	r3, #1
 80096a2:	930d      	str	r3, [sp, #52]	; 0x34
 80096a4:	e7b3      	b.n	800960e <_printf_float+0x32a>
 80096a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096a8:	0038      	movs	r0, r7
 80096aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ae:	47b0      	blx	r6
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d1bd      	bne.n	8009630 <_printf_float+0x34c>
 80096b4:	e674      	b.n	80093a0 <_printf_float+0xbc>
 80096b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b8:	0038      	movs	r0, r7
 80096ba:	18ea      	adds	r2, r5, r3
 80096bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c0:	47b0      	blx	r6
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d1c0      	bne.n	8009648 <_printf_float+0x364>
 80096c6:	e66b      	b.n	80093a0 <_printf_float+0xbc>
 80096c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	dc02      	bgt.n	80096d4 <_printf_float+0x3f0>
 80096ce:	2301      	movs	r3, #1
 80096d0:	421a      	tst	r2, r3
 80096d2:	d034      	beq.n	800973e <_printf_float+0x45a>
 80096d4:	2301      	movs	r3, #1
 80096d6:	002a      	movs	r2, r5
 80096d8:	0038      	movs	r0, r7
 80096da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096dc:	47b0      	blx	r6
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	d100      	bne.n	80096e4 <_printf_float+0x400>
 80096e2:	e65d      	b.n	80093a0 <_printf_float+0xbc>
 80096e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e6:	0038      	movs	r0, r7
 80096e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ec:	47b0      	blx	r6
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d100      	bne.n	80096f4 <_printf_float+0x410>
 80096f2:	e655      	b.n	80093a0 <_printf_float+0xbc>
 80096f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80096f8:	2200      	movs	r2, #0
 80096fa:	2300      	movs	r3, #0
 80096fc:	f7f6 feb0 	bl	8000460 <__aeabi_dcmpeq>
 8009700:	2800      	cmp	r0, #0
 8009702:	d11a      	bne.n	800973a <_printf_float+0x456>
 8009704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009706:	1c6a      	adds	r2, r5, #1
 8009708:	3b01      	subs	r3, #1
 800970a:	0038      	movs	r0, r7
 800970c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800970e:	47b0      	blx	r6
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d10e      	bne.n	8009732 <_printf_float+0x44e>
 8009714:	e644      	b.n	80093a0 <_printf_float+0xbc>
 8009716:	0022      	movs	r2, r4
 8009718:	2301      	movs	r3, #1
 800971a:	0038      	movs	r0, r7
 800971c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800971e:	321a      	adds	r2, #26
 8009720:	47b0      	blx	r6
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	d100      	bne.n	8009728 <_printf_float+0x444>
 8009726:	e63b      	b.n	80093a0 <_printf_float+0xbc>
 8009728:	3501      	adds	r5, #1
 800972a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800972c:	3b01      	subs	r3, #1
 800972e:	42ab      	cmp	r3, r5
 8009730:	dcf1      	bgt.n	8009716 <_printf_float+0x432>
 8009732:	0022      	movs	r2, r4
 8009734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009736:	3250      	adds	r2, #80	; 0x50
 8009738:	e6da      	b.n	80094f0 <_printf_float+0x20c>
 800973a:	2500      	movs	r5, #0
 800973c:	e7f5      	b.n	800972a <_printf_float+0x446>
 800973e:	002a      	movs	r2, r5
 8009740:	e7e3      	b.n	800970a <_printf_float+0x426>
 8009742:	0022      	movs	r2, r4
 8009744:	2301      	movs	r3, #1
 8009746:	0038      	movs	r0, r7
 8009748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800974a:	3219      	adds	r2, #25
 800974c:	47b0      	blx	r6
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d100      	bne.n	8009754 <_printf_float+0x470>
 8009752:	e625      	b.n	80093a0 <_printf_float+0xbc>
 8009754:	3501      	adds	r5, #1
 8009756:	68e3      	ldr	r3, [r4, #12]
 8009758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	42ab      	cmp	r3, r5
 800975e:	dcf0      	bgt.n	8009742 <_printf_float+0x45e>
 8009760:	e6f8      	b.n	8009554 <_printf_float+0x270>
 8009762:	2500      	movs	r5, #0
 8009764:	e7f7      	b.n	8009756 <_printf_float+0x472>
 8009766:	46c0      	nop			; (mov r8, r8)

08009768 <_printf_common>:
 8009768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800976a:	0015      	movs	r5, r2
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	688a      	ldr	r2, [r1, #8]
 8009770:	690b      	ldr	r3, [r1, #16]
 8009772:	000c      	movs	r4, r1
 8009774:	9000      	str	r0, [sp, #0]
 8009776:	4293      	cmp	r3, r2
 8009778:	da00      	bge.n	800977c <_printf_common+0x14>
 800977a:	0013      	movs	r3, r2
 800977c:	0022      	movs	r2, r4
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	3243      	adds	r2, #67	; 0x43
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	2a00      	cmp	r2, #0
 8009786:	d001      	beq.n	800978c <_printf_common+0x24>
 8009788:	3301      	adds	r3, #1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	069b      	lsls	r3, r3, #26
 8009790:	d502      	bpl.n	8009798 <_printf_common+0x30>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	3302      	adds	r3, #2
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	6822      	ldr	r2, [r4, #0]
 800979a:	2306      	movs	r3, #6
 800979c:	0017      	movs	r7, r2
 800979e:	401f      	ands	r7, r3
 80097a0:	421a      	tst	r2, r3
 80097a2:	d027      	beq.n	80097f4 <_printf_common+0x8c>
 80097a4:	0023      	movs	r3, r4
 80097a6:	3343      	adds	r3, #67	; 0x43
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	1e5a      	subs	r2, r3, #1
 80097ac:	4193      	sbcs	r3, r2
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	0692      	lsls	r2, r2, #26
 80097b2:	d430      	bmi.n	8009816 <_printf_common+0xae>
 80097b4:	0022      	movs	r2, r4
 80097b6:	9901      	ldr	r1, [sp, #4]
 80097b8:	9800      	ldr	r0, [sp, #0]
 80097ba:	9e08      	ldr	r6, [sp, #32]
 80097bc:	3243      	adds	r2, #67	; 0x43
 80097be:	47b0      	blx	r6
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d025      	beq.n	8009810 <_printf_common+0xa8>
 80097c4:	2306      	movs	r3, #6
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	682a      	ldr	r2, [r5, #0]
 80097ca:	68e1      	ldr	r1, [r4, #12]
 80097cc:	2500      	movs	r5, #0
 80097ce:	4003      	ands	r3, r0
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d103      	bne.n	80097dc <_printf_common+0x74>
 80097d4:	1a8d      	subs	r5, r1, r2
 80097d6:	43eb      	mvns	r3, r5
 80097d8:	17db      	asrs	r3, r3, #31
 80097da:	401d      	ands	r5, r3
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	6922      	ldr	r2, [r4, #16]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	dd01      	ble.n	80097e8 <_printf_common+0x80>
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	18ed      	adds	r5, r5, r3
 80097e8:	2700      	movs	r7, #0
 80097ea:	42bd      	cmp	r5, r7
 80097ec:	d120      	bne.n	8009830 <_printf_common+0xc8>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e010      	b.n	8009814 <_printf_common+0xac>
 80097f2:	3701      	adds	r7, #1
 80097f4:	68e3      	ldr	r3, [r4, #12]
 80097f6:	682a      	ldr	r2, [r5, #0]
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	42bb      	cmp	r3, r7
 80097fc:	ddd2      	ble.n	80097a4 <_printf_common+0x3c>
 80097fe:	0022      	movs	r2, r4
 8009800:	2301      	movs	r3, #1
 8009802:	9901      	ldr	r1, [sp, #4]
 8009804:	9800      	ldr	r0, [sp, #0]
 8009806:	9e08      	ldr	r6, [sp, #32]
 8009808:	3219      	adds	r2, #25
 800980a:	47b0      	blx	r6
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d1f0      	bne.n	80097f2 <_printf_common+0x8a>
 8009810:	2001      	movs	r0, #1
 8009812:	4240      	negs	r0, r0
 8009814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009816:	2030      	movs	r0, #48	; 0x30
 8009818:	18e1      	adds	r1, r4, r3
 800981a:	3143      	adds	r1, #67	; 0x43
 800981c:	7008      	strb	r0, [r1, #0]
 800981e:	0021      	movs	r1, r4
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	3145      	adds	r1, #69	; 0x45
 8009824:	7809      	ldrb	r1, [r1, #0]
 8009826:	18a2      	adds	r2, r4, r2
 8009828:	3243      	adds	r2, #67	; 0x43
 800982a:	3302      	adds	r3, #2
 800982c:	7011      	strb	r1, [r2, #0]
 800982e:	e7c1      	b.n	80097b4 <_printf_common+0x4c>
 8009830:	0022      	movs	r2, r4
 8009832:	2301      	movs	r3, #1
 8009834:	9901      	ldr	r1, [sp, #4]
 8009836:	9800      	ldr	r0, [sp, #0]
 8009838:	9e08      	ldr	r6, [sp, #32]
 800983a:	321a      	adds	r2, #26
 800983c:	47b0      	blx	r6
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d0e6      	beq.n	8009810 <_printf_common+0xa8>
 8009842:	3701      	adds	r7, #1
 8009844:	e7d1      	b.n	80097ea <_printf_common+0x82>
	...

08009848 <_printf_i>:
 8009848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984a:	b08b      	sub	sp, #44	; 0x2c
 800984c:	9206      	str	r2, [sp, #24]
 800984e:	000a      	movs	r2, r1
 8009850:	3243      	adds	r2, #67	; 0x43
 8009852:	9307      	str	r3, [sp, #28]
 8009854:	9005      	str	r0, [sp, #20]
 8009856:	9204      	str	r2, [sp, #16]
 8009858:	7e0a      	ldrb	r2, [r1, #24]
 800985a:	000c      	movs	r4, r1
 800985c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800985e:	2a78      	cmp	r2, #120	; 0x78
 8009860:	d807      	bhi.n	8009872 <_printf_i+0x2a>
 8009862:	2a62      	cmp	r2, #98	; 0x62
 8009864:	d809      	bhi.n	800987a <_printf_i+0x32>
 8009866:	2a00      	cmp	r2, #0
 8009868:	d100      	bne.n	800986c <_printf_i+0x24>
 800986a:	e0c1      	b.n	80099f0 <_printf_i+0x1a8>
 800986c:	2a58      	cmp	r2, #88	; 0x58
 800986e:	d100      	bne.n	8009872 <_printf_i+0x2a>
 8009870:	e08c      	b.n	800998c <_printf_i+0x144>
 8009872:	0026      	movs	r6, r4
 8009874:	3642      	adds	r6, #66	; 0x42
 8009876:	7032      	strb	r2, [r6, #0]
 8009878:	e022      	b.n	80098c0 <_printf_i+0x78>
 800987a:	0010      	movs	r0, r2
 800987c:	3863      	subs	r0, #99	; 0x63
 800987e:	2815      	cmp	r0, #21
 8009880:	d8f7      	bhi.n	8009872 <_printf_i+0x2a>
 8009882:	f7f6 fc5d 	bl	8000140 <__gnu_thumb1_case_shi>
 8009886:	0016      	.short	0x0016
 8009888:	fff6001f 	.word	0xfff6001f
 800988c:	fff6fff6 	.word	0xfff6fff6
 8009890:	001ffff6 	.word	0x001ffff6
 8009894:	fff6fff6 	.word	0xfff6fff6
 8009898:	fff6fff6 	.word	0xfff6fff6
 800989c:	003600a8 	.word	0x003600a8
 80098a0:	fff6009a 	.word	0xfff6009a
 80098a4:	00b9fff6 	.word	0x00b9fff6
 80098a8:	0036fff6 	.word	0x0036fff6
 80098ac:	fff6fff6 	.word	0xfff6fff6
 80098b0:	009e      	.short	0x009e
 80098b2:	0026      	movs	r6, r4
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	3642      	adds	r6, #66	; 0x42
 80098b8:	1d11      	adds	r1, r2, #4
 80098ba:	6019      	str	r1, [r3, #0]
 80098bc:	6813      	ldr	r3, [r2, #0]
 80098be:	7033      	strb	r3, [r6, #0]
 80098c0:	2301      	movs	r3, #1
 80098c2:	e0a7      	b.n	8009a14 <_printf_i+0x1cc>
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	6819      	ldr	r1, [r3, #0]
 80098c8:	1d0a      	adds	r2, r1, #4
 80098ca:	0605      	lsls	r5, r0, #24
 80098cc:	d50b      	bpl.n	80098e6 <_printf_i+0x9e>
 80098ce:	680d      	ldr	r5, [r1, #0]
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	2d00      	cmp	r5, #0
 80098d4:	da03      	bge.n	80098de <_printf_i+0x96>
 80098d6:	232d      	movs	r3, #45	; 0x2d
 80098d8:	9a04      	ldr	r2, [sp, #16]
 80098da:	426d      	negs	r5, r5
 80098dc:	7013      	strb	r3, [r2, #0]
 80098de:	4b61      	ldr	r3, [pc, #388]	; (8009a64 <_printf_i+0x21c>)
 80098e0:	270a      	movs	r7, #10
 80098e2:	9303      	str	r3, [sp, #12]
 80098e4:	e01b      	b.n	800991e <_printf_i+0xd6>
 80098e6:	680d      	ldr	r5, [r1, #0]
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	0641      	lsls	r1, r0, #25
 80098ec:	d5f1      	bpl.n	80098d2 <_printf_i+0x8a>
 80098ee:	b22d      	sxth	r5, r5
 80098f0:	e7ef      	b.n	80098d2 <_printf_i+0x8a>
 80098f2:	680d      	ldr	r5, [r1, #0]
 80098f4:	6819      	ldr	r1, [r3, #0]
 80098f6:	1d08      	adds	r0, r1, #4
 80098f8:	6018      	str	r0, [r3, #0]
 80098fa:	062e      	lsls	r6, r5, #24
 80098fc:	d501      	bpl.n	8009902 <_printf_i+0xba>
 80098fe:	680d      	ldr	r5, [r1, #0]
 8009900:	e003      	b.n	800990a <_printf_i+0xc2>
 8009902:	066d      	lsls	r5, r5, #25
 8009904:	d5fb      	bpl.n	80098fe <_printf_i+0xb6>
 8009906:	680d      	ldr	r5, [r1, #0]
 8009908:	b2ad      	uxth	r5, r5
 800990a:	4b56      	ldr	r3, [pc, #344]	; (8009a64 <_printf_i+0x21c>)
 800990c:	2708      	movs	r7, #8
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	2a6f      	cmp	r2, #111	; 0x6f
 8009912:	d000      	beq.n	8009916 <_printf_i+0xce>
 8009914:	3702      	adds	r7, #2
 8009916:	0023      	movs	r3, r4
 8009918:	2200      	movs	r2, #0
 800991a:	3343      	adds	r3, #67	; 0x43
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	6863      	ldr	r3, [r4, #4]
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	db03      	blt.n	800992e <_printf_i+0xe6>
 8009926:	2204      	movs	r2, #4
 8009928:	6821      	ldr	r1, [r4, #0]
 800992a:	4391      	bics	r1, r2
 800992c:	6021      	str	r1, [r4, #0]
 800992e:	2d00      	cmp	r5, #0
 8009930:	d102      	bne.n	8009938 <_printf_i+0xf0>
 8009932:	9e04      	ldr	r6, [sp, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00c      	beq.n	8009952 <_printf_i+0x10a>
 8009938:	9e04      	ldr	r6, [sp, #16]
 800993a:	0028      	movs	r0, r5
 800993c:	0039      	movs	r1, r7
 800993e:	f7f6 fc8f 	bl	8000260 <__aeabi_uidivmod>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	3e01      	subs	r6, #1
 8009946:	5c5b      	ldrb	r3, [r3, r1]
 8009948:	7033      	strb	r3, [r6, #0]
 800994a:	002b      	movs	r3, r5
 800994c:	0005      	movs	r5, r0
 800994e:	429f      	cmp	r7, r3
 8009950:	d9f3      	bls.n	800993a <_printf_i+0xf2>
 8009952:	2f08      	cmp	r7, #8
 8009954:	d109      	bne.n	800996a <_printf_i+0x122>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	07db      	lsls	r3, r3, #31
 800995a:	d506      	bpl.n	800996a <_printf_i+0x122>
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	6922      	ldr	r2, [r4, #16]
 8009960:	4293      	cmp	r3, r2
 8009962:	dc02      	bgt.n	800996a <_printf_i+0x122>
 8009964:	2330      	movs	r3, #48	; 0x30
 8009966:	3e01      	subs	r6, #1
 8009968:	7033      	strb	r3, [r6, #0]
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	1b9b      	subs	r3, r3, r6
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	9b07      	ldr	r3, [sp, #28]
 8009972:	0021      	movs	r1, r4
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	9805      	ldr	r0, [sp, #20]
 8009978:	9b06      	ldr	r3, [sp, #24]
 800997a:	aa09      	add	r2, sp, #36	; 0x24
 800997c:	f7ff fef4 	bl	8009768 <_printf_common>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d14c      	bne.n	8009a1e <_printf_i+0x1d6>
 8009984:	2001      	movs	r0, #1
 8009986:	4240      	negs	r0, r0
 8009988:	b00b      	add	sp, #44	; 0x2c
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998c:	3145      	adds	r1, #69	; 0x45
 800998e:	700a      	strb	r2, [r1, #0]
 8009990:	4a34      	ldr	r2, [pc, #208]	; (8009a64 <_printf_i+0x21c>)
 8009992:	9203      	str	r2, [sp, #12]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	6821      	ldr	r1, [r4, #0]
 8009998:	ca20      	ldmia	r2!, {r5}
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	0608      	lsls	r0, r1, #24
 800999e:	d516      	bpl.n	80099ce <_printf_i+0x186>
 80099a0:	07cb      	lsls	r3, r1, #31
 80099a2:	d502      	bpl.n	80099aa <_printf_i+0x162>
 80099a4:	2320      	movs	r3, #32
 80099a6:	4319      	orrs	r1, r3
 80099a8:	6021      	str	r1, [r4, #0]
 80099aa:	2710      	movs	r7, #16
 80099ac:	2d00      	cmp	r5, #0
 80099ae:	d1b2      	bne.n	8009916 <_printf_i+0xce>
 80099b0:	2320      	movs	r3, #32
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	439a      	bics	r2, r3
 80099b6:	6022      	str	r2, [r4, #0]
 80099b8:	e7ad      	b.n	8009916 <_printf_i+0xce>
 80099ba:	2220      	movs	r2, #32
 80099bc:	6809      	ldr	r1, [r1, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	0022      	movs	r2, r4
 80099c4:	2178      	movs	r1, #120	; 0x78
 80099c6:	3245      	adds	r2, #69	; 0x45
 80099c8:	7011      	strb	r1, [r2, #0]
 80099ca:	4a27      	ldr	r2, [pc, #156]	; (8009a68 <_printf_i+0x220>)
 80099cc:	e7e1      	b.n	8009992 <_printf_i+0x14a>
 80099ce:	0648      	lsls	r0, r1, #25
 80099d0:	d5e6      	bpl.n	80099a0 <_printf_i+0x158>
 80099d2:	b2ad      	uxth	r5, r5
 80099d4:	e7e4      	b.n	80099a0 <_printf_i+0x158>
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	680d      	ldr	r5, [r1, #0]
 80099da:	1d10      	adds	r0, r2, #4
 80099dc:	6949      	ldr	r1, [r1, #20]
 80099de:	6018      	str	r0, [r3, #0]
 80099e0:	6813      	ldr	r3, [r2, #0]
 80099e2:	062e      	lsls	r6, r5, #24
 80099e4:	d501      	bpl.n	80099ea <_printf_i+0x1a2>
 80099e6:	6019      	str	r1, [r3, #0]
 80099e8:	e002      	b.n	80099f0 <_printf_i+0x1a8>
 80099ea:	066d      	lsls	r5, r5, #25
 80099ec:	d5fb      	bpl.n	80099e6 <_printf_i+0x19e>
 80099ee:	8019      	strh	r1, [r3, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9e04      	ldr	r6, [sp, #16]
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	e7bb      	b.n	8009970 <_printf_i+0x128>
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	1d11      	adds	r1, r2, #4
 80099fc:	6019      	str	r1, [r3, #0]
 80099fe:	6816      	ldr	r6, [r2, #0]
 8009a00:	2100      	movs	r1, #0
 8009a02:	0030      	movs	r0, r6
 8009a04:	6862      	ldr	r2, [r4, #4]
 8009a06:	f002 ffbd 	bl	800c984 <memchr>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d001      	beq.n	8009a12 <_printf_i+0x1ca>
 8009a0e:	1b80      	subs	r0, r0, r6
 8009a10:	6060      	str	r0, [r4, #4]
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	6123      	str	r3, [r4, #16]
 8009a16:	2300      	movs	r3, #0
 8009a18:	9a04      	ldr	r2, [sp, #16]
 8009a1a:	7013      	strb	r3, [r2, #0]
 8009a1c:	e7a8      	b.n	8009970 <_printf_i+0x128>
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	0032      	movs	r2, r6
 8009a22:	9906      	ldr	r1, [sp, #24]
 8009a24:	9805      	ldr	r0, [sp, #20]
 8009a26:	9d07      	ldr	r5, [sp, #28]
 8009a28:	47a8      	blx	r5
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	d0aa      	beq.n	8009984 <_printf_i+0x13c>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	079b      	lsls	r3, r3, #30
 8009a32:	d415      	bmi.n	8009a60 <_printf_i+0x218>
 8009a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a36:	68e0      	ldr	r0, [r4, #12]
 8009a38:	4298      	cmp	r0, r3
 8009a3a:	daa5      	bge.n	8009988 <_printf_i+0x140>
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	e7a3      	b.n	8009988 <_printf_i+0x140>
 8009a40:	0022      	movs	r2, r4
 8009a42:	2301      	movs	r3, #1
 8009a44:	9906      	ldr	r1, [sp, #24]
 8009a46:	9805      	ldr	r0, [sp, #20]
 8009a48:	9e07      	ldr	r6, [sp, #28]
 8009a4a:	3219      	adds	r2, #25
 8009a4c:	47b0      	blx	r6
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	d098      	beq.n	8009984 <_printf_i+0x13c>
 8009a52:	3501      	adds	r5, #1
 8009a54:	68e3      	ldr	r3, [r4, #12]
 8009a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a58:	1a9b      	subs	r3, r3, r2
 8009a5a:	42ab      	cmp	r3, r5
 8009a5c:	dcf0      	bgt.n	8009a40 <_printf_i+0x1f8>
 8009a5e:	e7e9      	b.n	8009a34 <_printf_i+0x1ec>
 8009a60:	2500      	movs	r5, #0
 8009a62:	e7f7      	b.n	8009a54 <_printf_i+0x20c>
 8009a64:	0800e864 	.word	0x0800e864
 8009a68:	0800e875 	.word	0x0800e875

08009a6c <_scanf_float>:
 8009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6e:	b08b      	sub	sp, #44	; 0x2c
 8009a70:	0015      	movs	r5, r2
 8009a72:	9001      	str	r0, [sp, #4]
 8009a74:	22ae      	movs	r2, #174	; 0xae
 8009a76:	2000      	movs	r0, #0
 8009a78:	9306      	str	r3, [sp, #24]
 8009a7a:	688b      	ldr	r3, [r1, #8]
 8009a7c:	000e      	movs	r6, r1
 8009a7e:	1e59      	subs	r1, r3, #1
 8009a80:	0052      	lsls	r2, r2, #1
 8009a82:	9005      	str	r0, [sp, #20]
 8009a84:	4291      	cmp	r1, r2
 8009a86:	d905      	bls.n	8009a94 <_scanf_float+0x28>
 8009a88:	3b5e      	subs	r3, #94	; 0x5e
 8009a8a:	3bff      	subs	r3, #255	; 0xff
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	235e      	movs	r3, #94	; 0x5e
 8009a90:	33ff      	adds	r3, #255	; 0xff
 8009a92:	60b3      	str	r3, [r6, #8]
 8009a94:	23f0      	movs	r3, #240	; 0xf0
 8009a96:	6832      	ldr	r2, [r6, #0]
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	6033      	str	r3, [r6, #0]
 8009a9e:	0033      	movs	r3, r6
 8009aa0:	2400      	movs	r4, #0
 8009aa2:	331c      	adds	r3, #28
 8009aa4:	001f      	movs	r7, r3
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	9402      	str	r4, [sp, #8]
 8009aaa:	9408      	str	r4, [sp, #32]
 8009aac:	9407      	str	r4, [sp, #28]
 8009aae:	9400      	str	r4, [sp, #0]
 8009ab0:	9404      	str	r4, [sp, #16]
 8009ab2:	68b2      	ldr	r2, [r6, #8]
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	d00a      	beq.n	8009ace <_scanf_float+0x62>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b4e      	cmp	r3, #78	; 0x4e
 8009abe:	d844      	bhi.n	8009b4a <_scanf_float+0xde>
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	2b40      	cmp	r3, #64	; 0x40
 8009ac4:	d82c      	bhi.n	8009b20 <_scanf_float+0xb4>
 8009ac6:	382b      	subs	r0, #43	; 0x2b
 8009ac8:	b2c1      	uxtb	r1, r0
 8009aca:	290e      	cmp	r1, #14
 8009acc:	d92a      	bls.n	8009b24 <_scanf_float+0xb8>
 8009ace:	9b00      	ldr	r3, [sp, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <_scanf_float+0x70>
 8009ad4:	6832      	ldr	r2, [r6, #0]
 8009ad6:	4ba4      	ldr	r3, [pc, #656]	; (8009d68 <_scanf_float+0x2fc>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d900      	bls.n	8009ae6 <_scanf_float+0x7a>
 8009ae4:	e0f9      	b.n	8009cda <_scanf_float+0x26e>
 8009ae6:	24be      	movs	r4, #190	; 0xbe
 8009ae8:	0064      	lsls	r4, r4, #1
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	429f      	cmp	r7, r3
 8009aee:	d900      	bls.n	8009af2 <_scanf_float+0x86>
 8009af0:	e0e9      	b.n	8009cc6 <_scanf_float+0x25a>
 8009af2:	2301      	movs	r3, #1
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	e185      	b.n	8009e04 <_scanf_float+0x398>
 8009af8:	0018      	movs	r0, r3
 8009afa:	3861      	subs	r0, #97	; 0x61
 8009afc:	280d      	cmp	r0, #13
 8009afe:	d8e6      	bhi.n	8009ace <_scanf_float+0x62>
 8009b00:	f7f6 fb1e 	bl	8000140 <__gnu_thumb1_case_shi>
 8009b04:	ffe50083 	.word	0xffe50083
 8009b08:	ffe5ffe5 	.word	0xffe5ffe5
 8009b0c:	00a200b6 	.word	0x00a200b6
 8009b10:	ffe5ffe5 	.word	0xffe5ffe5
 8009b14:	ffe50089 	.word	0xffe50089
 8009b18:	ffe5ffe5 	.word	0xffe5ffe5
 8009b1c:	0065ffe5 	.word	0x0065ffe5
 8009b20:	3841      	subs	r0, #65	; 0x41
 8009b22:	e7eb      	b.n	8009afc <_scanf_float+0x90>
 8009b24:	280e      	cmp	r0, #14
 8009b26:	d8d2      	bhi.n	8009ace <_scanf_float+0x62>
 8009b28:	f7f6 fb0a 	bl	8000140 <__gnu_thumb1_case_shi>
 8009b2c:	ffd1004b 	.word	0xffd1004b
 8009b30:	0098004b 	.word	0x0098004b
 8009b34:	0020ffd1 	.word	0x0020ffd1
 8009b38:	00400040 	.word	0x00400040
 8009b3c:	00400040 	.word	0x00400040
 8009b40:	00400040 	.word	0x00400040
 8009b44:	00400040 	.word	0x00400040
 8009b48:	0040      	.short	0x0040
 8009b4a:	2b6e      	cmp	r3, #110	; 0x6e
 8009b4c:	d809      	bhi.n	8009b62 <_scanf_float+0xf6>
 8009b4e:	2b60      	cmp	r3, #96	; 0x60
 8009b50:	d8d2      	bhi.n	8009af8 <_scanf_float+0x8c>
 8009b52:	2b54      	cmp	r3, #84	; 0x54
 8009b54:	d07d      	beq.n	8009c52 <_scanf_float+0x1e6>
 8009b56:	2b59      	cmp	r3, #89	; 0x59
 8009b58:	d1b9      	bne.n	8009ace <_scanf_float+0x62>
 8009b5a:	2c07      	cmp	r4, #7
 8009b5c:	d1b7      	bne.n	8009ace <_scanf_float+0x62>
 8009b5e:	2408      	movs	r4, #8
 8009b60:	e02c      	b.n	8009bbc <_scanf_float+0x150>
 8009b62:	2b74      	cmp	r3, #116	; 0x74
 8009b64:	d075      	beq.n	8009c52 <_scanf_float+0x1e6>
 8009b66:	2b79      	cmp	r3, #121	; 0x79
 8009b68:	d0f7      	beq.n	8009b5a <_scanf_float+0xee>
 8009b6a:	e7b0      	b.n	8009ace <_scanf_float+0x62>
 8009b6c:	6831      	ldr	r1, [r6, #0]
 8009b6e:	05c8      	lsls	r0, r1, #23
 8009b70:	d51c      	bpl.n	8009bac <_scanf_float+0x140>
 8009b72:	2380      	movs	r3, #128	; 0x80
 8009b74:	4399      	bics	r1, r3
 8009b76:	9b00      	ldr	r3, [sp, #0]
 8009b78:	6031      	str	r1, [r6, #0]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	9b05      	ldr	r3, [sp, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <_scanf_float+0x120>
 8009b84:	3b01      	subs	r3, #1
 8009b86:	3201      	adds	r2, #1
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	60b2      	str	r2, [r6, #8]
 8009b8c:	68b3      	ldr	r3, [r6, #8]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	60b3      	str	r3, [r6, #8]
 8009b92:	6933      	ldr	r3, [r6, #16]
 8009b94:	3301      	adds	r3, #1
 8009b96:	6133      	str	r3, [r6, #16]
 8009b98:	686b      	ldr	r3, [r5, #4]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	606b      	str	r3, [r5, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	dc00      	bgt.n	8009ba4 <_scanf_float+0x138>
 8009ba2:	e086      	b.n	8009cb2 <_scanf_float+0x246>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	e782      	b.n	8009ab2 <_scanf_float+0x46>
 8009bac:	9a02      	ldr	r2, [sp, #8]
 8009bae:	1912      	adds	r2, r2, r4
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	d18c      	bne.n	8009ace <_scanf_float+0x62>
 8009bb4:	4a6d      	ldr	r2, [pc, #436]	; (8009d6c <_scanf_float+0x300>)
 8009bb6:	6831      	ldr	r1, [r6, #0]
 8009bb8:	400a      	ands	r2, r1
 8009bba:	6032      	str	r2, [r6, #0]
 8009bbc:	703b      	strb	r3, [r7, #0]
 8009bbe:	3701      	adds	r7, #1
 8009bc0:	e7e4      	b.n	8009b8c <_scanf_float+0x120>
 8009bc2:	2180      	movs	r1, #128	; 0x80
 8009bc4:	6832      	ldr	r2, [r6, #0]
 8009bc6:	420a      	tst	r2, r1
 8009bc8:	d081      	beq.n	8009ace <_scanf_float+0x62>
 8009bca:	438a      	bics	r2, r1
 8009bcc:	e7f5      	b.n	8009bba <_scanf_float+0x14e>
 8009bce:	9a02      	ldr	r2, [sp, #8]
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	d10f      	bne.n	8009bf4 <_scanf_float+0x188>
 8009bd4:	9a00      	ldr	r2, [sp, #0]
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d10f      	bne.n	8009bfa <_scanf_float+0x18e>
 8009bda:	6832      	ldr	r2, [r6, #0]
 8009bdc:	21e0      	movs	r1, #224	; 0xe0
 8009bde:	0010      	movs	r0, r2
 8009be0:	00c9      	lsls	r1, r1, #3
 8009be2:	4008      	ands	r0, r1
 8009be4:	4288      	cmp	r0, r1
 8009be6:	d108      	bne.n	8009bfa <_scanf_float+0x18e>
 8009be8:	4961      	ldr	r1, [pc, #388]	; (8009d70 <_scanf_float+0x304>)
 8009bea:	400a      	ands	r2, r1
 8009bec:	6032      	str	r2, [r6, #0]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	9202      	str	r2, [sp, #8]
 8009bf2:	e7e3      	b.n	8009bbc <_scanf_float+0x150>
 8009bf4:	9a02      	ldr	r2, [sp, #8]
 8009bf6:	2a02      	cmp	r2, #2
 8009bf8:	d059      	beq.n	8009cae <_scanf_float+0x242>
 8009bfa:	2c01      	cmp	r4, #1
 8009bfc:	d002      	beq.n	8009c04 <_scanf_float+0x198>
 8009bfe:	2c04      	cmp	r4, #4
 8009c00:	d000      	beq.n	8009c04 <_scanf_float+0x198>
 8009c02:	e764      	b.n	8009ace <_scanf_float+0x62>
 8009c04:	3401      	adds	r4, #1
 8009c06:	b2e4      	uxtb	r4, r4
 8009c08:	e7d8      	b.n	8009bbc <_scanf_float+0x150>
 8009c0a:	9a02      	ldr	r2, [sp, #8]
 8009c0c:	2a01      	cmp	r2, #1
 8009c0e:	d000      	beq.n	8009c12 <_scanf_float+0x1a6>
 8009c10:	e75d      	b.n	8009ace <_scanf_float+0x62>
 8009c12:	2202      	movs	r2, #2
 8009c14:	e7ec      	b.n	8009bf0 <_scanf_float+0x184>
 8009c16:	2c00      	cmp	r4, #0
 8009c18:	d110      	bne.n	8009c3c <_scanf_float+0x1d0>
 8009c1a:	9a00      	ldr	r2, [sp, #0]
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d000      	beq.n	8009c22 <_scanf_float+0x1b6>
 8009c20:	e758      	b.n	8009ad4 <_scanf_float+0x68>
 8009c22:	6832      	ldr	r2, [r6, #0]
 8009c24:	21e0      	movs	r1, #224	; 0xe0
 8009c26:	0010      	movs	r0, r2
 8009c28:	00c9      	lsls	r1, r1, #3
 8009c2a:	4008      	ands	r0, r1
 8009c2c:	4288      	cmp	r0, r1
 8009c2e:	d000      	beq.n	8009c32 <_scanf_float+0x1c6>
 8009c30:	e754      	b.n	8009adc <_scanf_float+0x70>
 8009c32:	494f      	ldr	r1, [pc, #316]	; (8009d70 <_scanf_float+0x304>)
 8009c34:	3401      	adds	r4, #1
 8009c36:	400a      	ands	r2, r1
 8009c38:	6032      	str	r2, [r6, #0]
 8009c3a:	e7bf      	b.n	8009bbc <_scanf_float+0x150>
 8009c3c:	21fd      	movs	r1, #253	; 0xfd
 8009c3e:	1ee2      	subs	r2, r4, #3
 8009c40:	420a      	tst	r2, r1
 8009c42:	d000      	beq.n	8009c46 <_scanf_float+0x1da>
 8009c44:	e743      	b.n	8009ace <_scanf_float+0x62>
 8009c46:	e7dd      	b.n	8009c04 <_scanf_float+0x198>
 8009c48:	2c02      	cmp	r4, #2
 8009c4a:	d000      	beq.n	8009c4e <_scanf_float+0x1e2>
 8009c4c:	e73f      	b.n	8009ace <_scanf_float+0x62>
 8009c4e:	2403      	movs	r4, #3
 8009c50:	e7b4      	b.n	8009bbc <_scanf_float+0x150>
 8009c52:	2c06      	cmp	r4, #6
 8009c54:	d000      	beq.n	8009c58 <_scanf_float+0x1ec>
 8009c56:	e73a      	b.n	8009ace <_scanf_float+0x62>
 8009c58:	2407      	movs	r4, #7
 8009c5a:	e7af      	b.n	8009bbc <_scanf_float+0x150>
 8009c5c:	6832      	ldr	r2, [r6, #0]
 8009c5e:	0591      	lsls	r1, r2, #22
 8009c60:	d400      	bmi.n	8009c64 <_scanf_float+0x1f8>
 8009c62:	e734      	b.n	8009ace <_scanf_float+0x62>
 8009c64:	4943      	ldr	r1, [pc, #268]	; (8009d74 <_scanf_float+0x308>)
 8009c66:	400a      	ands	r2, r1
 8009c68:	6032      	str	r2, [r6, #0]
 8009c6a:	9a00      	ldr	r2, [sp, #0]
 8009c6c:	9204      	str	r2, [sp, #16]
 8009c6e:	e7a5      	b.n	8009bbc <_scanf_float+0x150>
 8009c70:	21a0      	movs	r1, #160	; 0xa0
 8009c72:	2080      	movs	r0, #128	; 0x80
 8009c74:	6832      	ldr	r2, [r6, #0]
 8009c76:	00c9      	lsls	r1, r1, #3
 8009c78:	4011      	ands	r1, r2
 8009c7a:	00c0      	lsls	r0, r0, #3
 8009c7c:	4281      	cmp	r1, r0
 8009c7e:	d006      	beq.n	8009c8e <_scanf_float+0x222>
 8009c80:	4202      	tst	r2, r0
 8009c82:	d100      	bne.n	8009c86 <_scanf_float+0x21a>
 8009c84:	e723      	b.n	8009ace <_scanf_float+0x62>
 8009c86:	9900      	ldr	r1, [sp, #0]
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	d100      	bne.n	8009c8e <_scanf_float+0x222>
 8009c8c:	e726      	b.n	8009adc <_scanf_float+0x70>
 8009c8e:	0591      	lsls	r1, r2, #22
 8009c90:	d404      	bmi.n	8009c9c <_scanf_float+0x230>
 8009c92:	9900      	ldr	r1, [sp, #0]
 8009c94:	9804      	ldr	r0, [sp, #16]
 8009c96:	9708      	str	r7, [sp, #32]
 8009c98:	1a09      	subs	r1, r1, r0
 8009c9a:	9107      	str	r1, [sp, #28]
 8009c9c:	4934      	ldr	r1, [pc, #208]	; (8009d70 <_scanf_float+0x304>)
 8009c9e:	400a      	ands	r2, r1
 8009ca0:	21c0      	movs	r1, #192	; 0xc0
 8009ca2:	0049      	lsls	r1, r1, #1
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	6032      	str	r2, [r6, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	9200      	str	r2, [sp, #0]
 8009cac:	e786      	b.n	8009bbc <_scanf_float+0x150>
 8009cae:	2203      	movs	r2, #3
 8009cb0:	e79e      	b.n	8009bf0 <_scanf_float+0x184>
 8009cb2:	23c0      	movs	r3, #192	; 0xc0
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	0029      	movs	r1, r5
 8009cb8:	58f3      	ldr	r3, [r6, r3]
 8009cba:	9801      	ldr	r0, [sp, #4]
 8009cbc:	4798      	blx	r3
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d100      	bne.n	8009cc4 <_scanf_float+0x258>
 8009cc2:	e6f6      	b.n	8009ab2 <_scanf_float+0x46>
 8009cc4:	e703      	b.n	8009ace <_scanf_float+0x62>
 8009cc6:	3f01      	subs	r7, #1
 8009cc8:	5933      	ldr	r3, [r6, r4]
 8009cca:	002a      	movs	r2, r5
 8009ccc:	7839      	ldrb	r1, [r7, #0]
 8009cce:	9801      	ldr	r0, [sp, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	6933      	ldr	r3, [r6, #16]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	6133      	str	r3, [r6, #16]
 8009cd8:	e707      	b.n	8009aea <_scanf_float+0x7e>
 8009cda:	1e63      	subs	r3, r4, #1
 8009cdc:	2b06      	cmp	r3, #6
 8009cde:	d80e      	bhi.n	8009cfe <_scanf_float+0x292>
 8009ce0:	9702      	str	r7, [sp, #8]
 8009ce2:	2c02      	cmp	r4, #2
 8009ce4:	d920      	bls.n	8009d28 <_scanf_float+0x2bc>
 8009ce6:	1be3      	subs	r3, r4, r7
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	9a05      	ldr	r2, [sp, #20]
 8009cf0:	189b      	adds	r3, r3, r2
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d827      	bhi.n	8009d48 <_scanf_float+0x2dc>
 8009cf8:	3c03      	subs	r4, #3
 8009cfa:	b2e4      	uxtb	r4, r4
 8009cfc:	1b3f      	subs	r7, r7, r4
 8009cfe:	6833      	ldr	r3, [r6, #0]
 8009d00:	05da      	lsls	r2, r3, #23
 8009d02:	d554      	bpl.n	8009dae <_scanf_float+0x342>
 8009d04:	055b      	lsls	r3, r3, #21
 8009d06:	d537      	bpl.n	8009d78 <_scanf_float+0x30c>
 8009d08:	24be      	movs	r4, #190	; 0xbe
 8009d0a:	0064      	lsls	r4, r4, #1
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	429f      	cmp	r7, r3
 8009d10:	d800      	bhi.n	8009d14 <_scanf_float+0x2a8>
 8009d12:	e6ee      	b.n	8009af2 <_scanf_float+0x86>
 8009d14:	3f01      	subs	r7, #1
 8009d16:	5933      	ldr	r3, [r6, r4]
 8009d18:	002a      	movs	r2, r5
 8009d1a:	7839      	ldrb	r1, [r7, #0]
 8009d1c:	9801      	ldr	r0, [sp, #4]
 8009d1e:	4798      	blx	r3
 8009d20:	6933      	ldr	r3, [r6, #16]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	6133      	str	r3, [r6, #16]
 8009d26:	e7f1      	b.n	8009d0c <_scanf_float+0x2a0>
 8009d28:	24be      	movs	r4, #190	; 0xbe
 8009d2a:	0064      	lsls	r4, r4, #1
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	429f      	cmp	r7, r3
 8009d30:	d800      	bhi.n	8009d34 <_scanf_float+0x2c8>
 8009d32:	e6de      	b.n	8009af2 <_scanf_float+0x86>
 8009d34:	3f01      	subs	r7, #1
 8009d36:	5933      	ldr	r3, [r6, r4]
 8009d38:	002a      	movs	r2, r5
 8009d3a:	7839      	ldrb	r1, [r7, #0]
 8009d3c:	9801      	ldr	r0, [sp, #4]
 8009d3e:	4798      	blx	r3
 8009d40:	6933      	ldr	r3, [r6, #16]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	6133      	str	r3, [r6, #16]
 8009d46:	e7f1      	b.n	8009d2c <_scanf_float+0x2c0>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	002a      	movs	r2, r5
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	7819      	ldrb	r1, [r3, #0]
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	23be      	movs	r3, #190	; 0xbe
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	58f3      	ldr	r3, [r6, r3]
 8009d58:	9801      	ldr	r0, [sp, #4]
 8009d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5c:	4798      	blx	r3
 8009d5e:	6933      	ldr	r3, [r6, #16]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	6133      	str	r3, [r6, #16]
 8009d64:	e7c2      	b.n	8009cec <_scanf_float+0x280>
 8009d66:	46c0      	nop			; (mov r8, r8)
 8009d68:	fffffeff 	.word	0xfffffeff
 8009d6c:	fffffe7f 	.word	0xfffffe7f
 8009d70:	fffff87f 	.word	0xfffff87f
 8009d74:	fffffd7f 	.word	0xfffffd7f
 8009d78:	6933      	ldr	r3, [r6, #16]
 8009d7a:	1e7c      	subs	r4, r7, #1
 8009d7c:	7821      	ldrb	r1, [r4, #0]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	6133      	str	r3, [r6, #16]
 8009d82:	2965      	cmp	r1, #101	; 0x65
 8009d84:	d00c      	beq.n	8009da0 <_scanf_float+0x334>
 8009d86:	2945      	cmp	r1, #69	; 0x45
 8009d88:	d00a      	beq.n	8009da0 <_scanf_float+0x334>
 8009d8a:	23be      	movs	r3, #190	; 0xbe
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	58f3      	ldr	r3, [r6, r3]
 8009d90:	002a      	movs	r2, r5
 8009d92:	9801      	ldr	r0, [sp, #4]
 8009d94:	4798      	blx	r3
 8009d96:	6933      	ldr	r3, [r6, #16]
 8009d98:	1ebc      	subs	r4, r7, #2
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	7821      	ldrb	r1, [r4, #0]
 8009d9e:	6133      	str	r3, [r6, #16]
 8009da0:	23be      	movs	r3, #190	; 0xbe
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	002a      	movs	r2, r5
 8009da6:	58f3      	ldr	r3, [r6, r3]
 8009da8:	9801      	ldr	r0, [sp, #4]
 8009daa:	4798      	blx	r3
 8009dac:	0027      	movs	r7, r4
 8009dae:	6832      	ldr	r2, [r6, #0]
 8009db0:	2310      	movs	r3, #16
 8009db2:	0011      	movs	r1, r2
 8009db4:	4019      	ands	r1, r3
 8009db6:	9102      	str	r1, [sp, #8]
 8009db8:	421a      	tst	r2, r3
 8009dba:	d158      	bne.n	8009e6e <_scanf_float+0x402>
 8009dbc:	23c0      	movs	r3, #192	; 0xc0
 8009dbe:	7039      	strb	r1, [r7, #0]
 8009dc0:	6832      	ldr	r2, [r6, #0]
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2280      	movs	r2, #128	; 0x80
 8009dc8:	00d2      	lsls	r2, r2, #3
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d11d      	bne.n	8009e0a <_scanf_float+0x39e>
 8009dce:	9b04      	ldr	r3, [sp, #16]
 8009dd0:	9a00      	ldr	r2, [sp, #0]
 8009dd2:	9900      	ldr	r1, [sp, #0]
 8009dd4:	1a9a      	subs	r2, r3, r2
 8009dd6:	428b      	cmp	r3, r1
 8009dd8:	d124      	bne.n	8009e24 <_scanf_float+0x3b8>
 8009dda:	2200      	movs	r2, #0
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	9801      	ldr	r0, [sp, #4]
 8009de0:	f000 ffa8 	bl	800ad34 <_strtod_r>
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	000d      	movs	r5, r1
 8009de8:	6831      	ldr	r1, [r6, #0]
 8009dea:	0004      	movs	r4, r0
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	078a      	lsls	r2, r1, #30
 8009df0:	d525      	bpl.n	8009e3e <_scanf_float+0x3d2>
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	9906      	ldr	r1, [sp, #24]
 8009df6:	600a      	str	r2, [r1, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	601c      	str	r4, [r3, #0]
 8009dfc:	605d      	str	r5, [r3, #4]
 8009dfe:	68f3      	ldr	r3, [r6, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	60f3      	str	r3, [r6, #12]
 8009e04:	9802      	ldr	r0, [sp, #8]
 8009e06:	b00b      	add	sp, #44	; 0x2c
 8009e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0a:	9b07      	ldr	r3, [sp, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0e4      	beq.n	8009dda <_scanf_float+0x36e>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	9a02      	ldr	r2, [sp, #8]
 8009e14:	1c59      	adds	r1, r3, #1
 8009e16:	9801      	ldr	r0, [sp, #4]
 8009e18:	230a      	movs	r3, #10
 8009e1a:	f001 f82f 	bl	800ae7c <_strtol_r>
 8009e1e:	9b07      	ldr	r3, [sp, #28]
 8009e20:	9f08      	ldr	r7, [sp, #32]
 8009e22:	1ac2      	subs	r2, r0, r3
 8009e24:	0033      	movs	r3, r6
 8009e26:	3370      	adds	r3, #112	; 0x70
 8009e28:	33ff      	adds	r3, #255	; 0xff
 8009e2a:	429f      	cmp	r7, r3
 8009e2c:	d302      	bcc.n	8009e34 <_scanf_float+0x3c8>
 8009e2e:	0037      	movs	r7, r6
 8009e30:	376f      	adds	r7, #111	; 0x6f
 8009e32:	37ff      	adds	r7, #255	; 0xff
 8009e34:	0038      	movs	r0, r7
 8009e36:	490f      	ldr	r1, [pc, #60]	; (8009e74 <_scanf_float+0x408>)
 8009e38:	f000 f8ba 	bl	8009fb0 <siprintf>
 8009e3c:	e7cd      	b.n	8009dda <_scanf_float+0x36e>
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	0749      	lsls	r1, r1, #29
 8009e42:	d4d7      	bmi.n	8009df4 <_scanf_float+0x388>
 8009e44:	9906      	ldr	r1, [sp, #24]
 8009e46:	0020      	movs	r0, r4
 8009e48:	600a      	str	r2, [r1, #0]
 8009e4a:	681f      	ldr	r7, [r3, #0]
 8009e4c:	0022      	movs	r2, r4
 8009e4e:	002b      	movs	r3, r5
 8009e50:	0029      	movs	r1, r5
 8009e52:	f7f8 fc11 	bl	8002678 <__aeabi_dcmpun>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d004      	beq.n	8009e64 <_scanf_float+0x3f8>
 8009e5a:	4807      	ldr	r0, [pc, #28]	; (8009e78 <_scanf_float+0x40c>)
 8009e5c:	f000 f8a4 	bl	8009fa8 <nanf>
 8009e60:	6038      	str	r0, [r7, #0]
 8009e62:	e7cc      	b.n	8009dfe <_scanf_float+0x392>
 8009e64:	0020      	movs	r0, r4
 8009e66:	0029      	movs	r1, r5
 8009e68:	f7f8 fcf8 	bl	800285c <__aeabi_d2f>
 8009e6c:	e7f8      	b.n	8009e60 <_scanf_float+0x3f4>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e640      	b.n	8009af4 <_scanf_float+0x88>
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	0800e886 	.word	0x0800e886
 8009e78:	0800ed13 	.word	0x0800ed13

08009e7c <iprintf>:
 8009e7c:	b40f      	push	{r0, r1, r2, r3}
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <iprintf+0x30>)
 8009e80:	b513      	push	{r0, r1, r4, lr}
 8009e82:	681c      	ldr	r4, [r3, #0]
 8009e84:	2c00      	cmp	r4, #0
 8009e86:	d005      	beq.n	8009e94 <iprintf+0x18>
 8009e88:	69a3      	ldr	r3, [r4, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <iprintf+0x18>
 8009e8e:	0020      	movs	r0, r4
 8009e90:	f002 f8c0 	bl	800c014 <__sinit>
 8009e94:	ab05      	add	r3, sp, #20
 8009e96:	0020      	movs	r0, r4
 8009e98:	9a04      	ldr	r2, [sp, #16]
 8009e9a:	68a1      	ldr	r1, [r4, #8]
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	f003 feb9 	bl	800dc14 <_vfiprintf_r>
 8009ea2:	bc16      	pop	{r1, r2, r4}
 8009ea4:	bc08      	pop	{r3}
 8009ea6:	b004      	add	sp, #16
 8009ea8:	4718      	bx	r3
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	20000038 	.word	0x20000038

08009eb0 <_puts_r>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	0005      	movs	r5, r0
 8009eb4:	000e      	movs	r6, r1
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d004      	beq.n	8009ec4 <_puts_r+0x14>
 8009eba:	6983      	ldr	r3, [r0, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <_puts_r+0x14>
 8009ec0:	f002 f8a8 	bl	800c014 <__sinit>
 8009ec4:	69ab      	ldr	r3, [r5, #24]
 8009ec6:	68ac      	ldr	r4, [r5, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <_puts_r+0x22>
 8009ecc:	0028      	movs	r0, r5
 8009ece:	f002 f8a1 	bl	800c014 <__sinit>
 8009ed2:	4b2d      	ldr	r3, [pc, #180]	; (8009f88 <_puts_r+0xd8>)
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	d122      	bne.n	8009f1e <_puts_r+0x6e>
 8009ed8:	686c      	ldr	r4, [r5, #4]
 8009eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009edc:	07db      	lsls	r3, r3, #31
 8009ede:	d405      	bmi.n	8009eec <_puts_r+0x3c>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	059b      	lsls	r3, r3, #22
 8009ee4:	d402      	bmi.n	8009eec <_puts_r+0x3c>
 8009ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee8:	f002 fcad 	bl	800c846 <__retarget_lock_acquire_recursive>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	071b      	lsls	r3, r3, #28
 8009ef0:	d502      	bpl.n	8009ef8 <_puts_r+0x48>
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d129      	bne.n	8009f4c <_puts_r+0x9c>
 8009ef8:	0021      	movs	r1, r4
 8009efa:	0028      	movs	r0, r5
 8009efc:	f001 f82c 	bl	800af58 <__swsetup_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d023      	beq.n	8009f4c <_puts_r+0x9c>
 8009f04:	2501      	movs	r5, #1
 8009f06:	426d      	negs	r5, r5
 8009f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f0a:	07db      	lsls	r3, r3, #31
 8009f0c:	d405      	bmi.n	8009f1a <_puts_r+0x6a>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	059b      	lsls	r3, r3, #22
 8009f12:	d402      	bmi.n	8009f1a <_puts_r+0x6a>
 8009f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f16:	f002 fc97 	bl	800c848 <__retarget_lock_release_recursive>
 8009f1a:	0028      	movs	r0, r5
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <_puts_r+0xdc>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	d101      	bne.n	8009f28 <_puts_r+0x78>
 8009f24:	68ac      	ldr	r4, [r5, #8]
 8009f26:	e7d8      	b.n	8009eda <_puts_r+0x2a>
 8009f28:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <_puts_r+0xe0>)
 8009f2a:	429c      	cmp	r4, r3
 8009f2c:	d1d5      	bne.n	8009eda <_puts_r+0x2a>
 8009f2e:	68ec      	ldr	r4, [r5, #12]
 8009f30:	e7d3      	b.n	8009eda <_puts_r+0x2a>
 8009f32:	3601      	adds	r6, #1
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da04      	bge.n	8009f44 <_puts_r+0x94>
 8009f3a:	69a2      	ldr	r2, [r4, #24]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	dc16      	bgt.n	8009f6e <_puts_r+0xbe>
 8009f40:	290a      	cmp	r1, #10
 8009f42:	d014      	beq.n	8009f6e <_puts_r+0xbe>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	6022      	str	r2, [r4, #0]
 8009f4a:	7019      	strb	r1, [r3, #0]
 8009f4c:	68a3      	ldr	r3, [r4, #8]
 8009f4e:	7831      	ldrb	r1, [r6, #0]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	2900      	cmp	r1, #0
 8009f54:	d1ed      	bne.n	8009f32 <_puts_r+0x82>
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	da0f      	bge.n	8009f7c <_puts_r+0xcc>
 8009f5c:	0028      	movs	r0, r5
 8009f5e:	0022      	movs	r2, r4
 8009f60:	310a      	adds	r1, #10
 8009f62:	f000 ff8f 	bl	800ae84 <__swbuf_r>
 8009f66:	250a      	movs	r5, #10
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d1cd      	bne.n	8009f08 <_puts_r+0x58>
 8009f6c:	e7ca      	b.n	8009f04 <_puts_r+0x54>
 8009f6e:	0022      	movs	r2, r4
 8009f70:	0028      	movs	r0, r5
 8009f72:	f000 ff87 	bl	800ae84 <__swbuf_r>
 8009f76:	1c43      	adds	r3, r0, #1
 8009f78:	d1e8      	bne.n	8009f4c <_puts_r+0x9c>
 8009f7a:	e7c3      	b.n	8009f04 <_puts_r+0x54>
 8009f7c:	250a      	movs	r5, #10
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	6022      	str	r2, [r4, #0]
 8009f84:	701d      	strb	r5, [r3, #0]
 8009f86:	e7bf      	b.n	8009f08 <_puts_r+0x58>
 8009f88:	0800ea94 	.word	0x0800ea94
 8009f8c:	0800eab4 	.word	0x0800eab4
 8009f90:	0800ea74 	.word	0x0800ea74

08009f94 <puts>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	4b03      	ldr	r3, [pc, #12]	; (8009fa4 <puts+0x10>)
 8009f98:	0001      	movs	r1, r0
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	f7ff ff88 	bl	8009eb0 <_puts_r>
 8009fa0:	bd10      	pop	{r4, pc}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	20000038 	.word	0x20000038

08009fa8 <nanf>:
 8009fa8:	4800      	ldr	r0, [pc, #0]	; (8009fac <nanf+0x4>)
 8009faa:	4770      	bx	lr
 8009fac:	7fc00000 	.word	0x7fc00000

08009fb0 <siprintf>:
 8009fb0:	b40e      	push	{r1, r2, r3}
 8009fb2:	b500      	push	{lr}
 8009fb4:	490b      	ldr	r1, [pc, #44]	; (8009fe4 <siprintf+0x34>)
 8009fb6:	b09c      	sub	sp, #112	; 0x70
 8009fb8:	ab1d      	add	r3, sp, #116	; 0x74
 8009fba:	9002      	str	r0, [sp, #8]
 8009fbc:	9006      	str	r0, [sp, #24]
 8009fbe:	9107      	str	r1, [sp, #28]
 8009fc0:	9104      	str	r1, [sp, #16]
 8009fc2:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <siprintf+0x38>)
 8009fc4:	4909      	ldr	r1, [pc, #36]	; (8009fec <siprintf+0x3c>)
 8009fc6:	cb04      	ldmia	r3!, {r2}
 8009fc8:	9105      	str	r1, [sp, #20]
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	a902      	add	r1, sp, #8
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	f003 fb1e 	bl	800d610 <_svfiprintf_r>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9a02      	ldr	r2, [sp, #8]
 8009fd8:	7013      	strb	r3, [r2, #0]
 8009fda:	b01c      	add	sp, #112	; 0x70
 8009fdc:	bc08      	pop	{r3}
 8009fde:	b003      	add	sp, #12
 8009fe0:	4718      	bx	r3
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	7fffffff 	.word	0x7fffffff
 8009fe8:	20000038 	.word	0x20000038
 8009fec:	ffff0208 	.word	0xffff0208

08009ff0 <siscanf>:
 8009ff0:	b40e      	push	{r1, r2, r3}
 8009ff2:	b530      	push	{r4, r5, lr}
 8009ff4:	2381      	movs	r3, #129	; 0x81
 8009ff6:	b09c      	sub	sp, #112	; 0x70
 8009ff8:	466a      	mov	r2, sp
 8009ffa:	ac1f      	add	r4, sp, #124	; 0x7c
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	cc20      	ldmia	r4!, {r5}
 800a000:	8293      	strh	r3, [r2, #20]
 800a002:	9002      	str	r0, [sp, #8]
 800a004:	9006      	str	r0, [sp, #24]
 800a006:	f7f6 f889 	bl	800011c <strlen>
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <siscanf+0x48>)
 800a00c:	466a      	mov	r2, sp
 800a00e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a010:	2300      	movs	r3, #0
 800a012:	9003      	str	r0, [sp, #12]
 800a014:	9007      	str	r0, [sp, #28]
 800a016:	4809      	ldr	r0, [pc, #36]	; (800a03c <siscanf+0x4c>)
 800a018:	930f      	str	r3, [sp, #60]	; 0x3c
 800a01a:	9314      	str	r3, [sp, #80]	; 0x50
 800a01c:	3b01      	subs	r3, #1
 800a01e:	82d3      	strh	r3, [r2, #22]
 800a020:	a902      	add	r1, sp, #8
 800a022:	0023      	movs	r3, r4
 800a024:	002a      	movs	r2, r5
 800a026:	6800      	ldr	r0, [r0, #0]
 800a028:	9401      	str	r4, [sp, #4]
 800a02a:	f003 fc4d 	bl	800d8c8 <__ssvfiscanf_r>
 800a02e:	b01c      	add	sp, #112	; 0x70
 800a030:	bc30      	pop	{r4, r5}
 800a032:	bc08      	pop	{r3}
 800a034:	b003      	add	sp, #12
 800a036:	4718      	bx	r3
 800a038:	0800a069 	.word	0x0800a069
 800a03c:	20000038 	.word	0x20000038

0800a040 <__sread>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	000c      	movs	r4, r1
 800a044:	250e      	movs	r5, #14
 800a046:	5f49      	ldrsh	r1, [r1, r5]
 800a048:	f004 f880 	bl	800e14c <_read_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	db03      	blt.n	800a058 <__sread+0x18>
 800a050:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a052:	181b      	adds	r3, r3, r0
 800a054:	6563      	str	r3, [r4, #84]	; 0x54
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	4a02      	ldr	r2, [pc, #8]	; (800a064 <__sread+0x24>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	e7f9      	b.n	800a056 <__sread+0x16>
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	ffffefff 	.word	0xffffefff

0800a068 <__seofread>:
 800a068:	2000      	movs	r0, #0
 800a06a:	4770      	bx	lr

0800a06c <__swrite>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	001f      	movs	r7, r3
 800a070:	898b      	ldrh	r3, [r1, #12]
 800a072:	0005      	movs	r5, r0
 800a074:	000c      	movs	r4, r1
 800a076:	0016      	movs	r6, r2
 800a078:	05db      	lsls	r3, r3, #23
 800a07a:	d505      	bpl.n	800a088 <__swrite+0x1c>
 800a07c:	230e      	movs	r3, #14
 800a07e:	5ec9      	ldrsh	r1, [r1, r3]
 800a080:	2200      	movs	r2, #0
 800a082:	2302      	movs	r3, #2
 800a084:	f002 fbe2 	bl	800c84c <_lseek_r>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	4a05      	ldr	r2, [pc, #20]	; (800a0a0 <__swrite+0x34>)
 800a08c:	0028      	movs	r0, r5
 800a08e:	4013      	ands	r3, r2
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	0032      	movs	r2, r6
 800a094:	230e      	movs	r3, #14
 800a096:	5ee1      	ldrsh	r1, [r4, r3]
 800a098:	003b      	movs	r3, r7
 800a09a:	f000 ff49 	bl	800af30 <_write_r>
 800a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a0:	ffffefff 	.word	0xffffefff

0800a0a4 <__sseek>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	000c      	movs	r4, r1
 800a0a8:	250e      	movs	r5, #14
 800a0aa:	5f49      	ldrsh	r1, [r1, r5]
 800a0ac:	f002 fbce 	bl	800c84c <_lseek_r>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	1c42      	adds	r2, r0, #1
 800a0b4:	d103      	bne.n	800a0be <__sseek+0x1a>
 800a0b6:	4a05      	ldr	r2, [pc, #20]	; (800a0cc <__sseek+0x28>)
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
 800a0be:	2280      	movs	r2, #128	; 0x80
 800a0c0:	0152      	lsls	r2, r2, #5
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a0c8:	e7f8      	b.n	800a0bc <__sseek+0x18>
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	ffffefff 	.word	0xffffefff

0800a0d0 <__sclose>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	230e      	movs	r3, #14
 800a0d4:	5ec9      	ldrsh	r1, [r1, r3]
 800a0d6:	f000 ffb7 	bl	800b048 <_close_r>
 800a0da:	bd10      	pop	{r4, pc}

0800a0dc <sulp>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	0016      	movs	r6, r2
 800a0e0:	000d      	movs	r5, r1
 800a0e2:	f002 ffdf 	bl	800d0a4 <__ulp>
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	d00d      	beq.n	800a106 <sulp+0x2a>
 800a0ea:	236b      	movs	r3, #107	; 0x6b
 800a0ec:	006a      	lsls	r2, r5, #1
 800a0ee:	0d52      	lsrs	r2, r2, #21
 800a0f0:	1a9b      	subs	r3, r3, r2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dd07      	ble.n	800a106 <sulp+0x2a>
 800a0f6:	2400      	movs	r4, #0
 800a0f8:	4a03      	ldr	r2, [pc, #12]	; (800a108 <sulp+0x2c>)
 800a0fa:	051b      	lsls	r3, r3, #20
 800a0fc:	189d      	adds	r5, r3, r2
 800a0fe:	002b      	movs	r3, r5
 800a100:	0022      	movs	r2, r4
 800a102:	f7f7 fcbb 	bl	8001a7c <__aeabi_dmul>
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	3ff00000 	.word	0x3ff00000

0800a10c <_strtod_l>:
 800a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a10e:	001d      	movs	r5, r3
 800a110:	2300      	movs	r3, #0
 800a112:	b0a5      	sub	sp, #148	; 0x94
 800a114:	9320      	str	r3, [sp, #128]	; 0x80
 800a116:	4bac      	ldr	r3, [pc, #688]	; (800a3c8 <_strtod_l+0x2bc>)
 800a118:	9005      	str	r0, [sp, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9108      	str	r1, [sp, #32]
 800a11e:	0018      	movs	r0, r3
 800a120:	9307      	str	r3, [sp, #28]
 800a122:	921b      	str	r2, [sp, #108]	; 0x6c
 800a124:	f7f5 fffa 	bl	800011c <strlen>
 800a128:	2600      	movs	r6, #0
 800a12a:	0004      	movs	r4, r0
 800a12c:	2700      	movs	r7, #0
 800a12e:	9b08      	ldr	r3, [sp, #32]
 800a130:	931f      	str	r3, [sp, #124]	; 0x7c
 800a132:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a134:	7813      	ldrb	r3, [r2, #0]
 800a136:	2b2b      	cmp	r3, #43	; 0x2b
 800a138:	d058      	beq.n	800a1ec <_strtod_l+0xe0>
 800a13a:	d844      	bhi.n	800a1c6 <_strtod_l+0xba>
 800a13c:	2b0d      	cmp	r3, #13
 800a13e:	d83d      	bhi.n	800a1bc <_strtod_l+0xb0>
 800a140:	2b08      	cmp	r3, #8
 800a142:	d83d      	bhi.n	800a1c0 <_strtod_l+0xb4>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d047      	beq.n	800a1d8 <_strtod_l+0xcc>
 800a148:	2300      	movs	r3, #0
 800a14a:	930e      	str	r3, [sp, #56]	; 0x38
 800a14c:	2200      	movs	r2, #0
 800a14e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a150:	920a      	str	r2, [sp, #40]	; 0x28
 800a152:	9306      	str	r3, [sp, #24]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b30      	cmp	r3, #48	; 0x30
 800a158:	d000      	beq.n	800a15c <_strtod_l+0x50>
 800a15a:	e07f      	b.n	800a25c <_strtod_l+0x150>
 800a15c:	9b06      	ldr	r3, [sp, #24]
 800a15e:	3220      	adds	r2, #32
 800a160:	785b      	ldrb	r3, [r3, #1]
 800a162:	4393      	bics	r3, r2
 800a164:	2b58      	cmp	r3, #88	; 0x58
 800a166:	d000      	beq.n	800a16a <_strtod_l+0x5e>
 800a168:	e06e      	b.n	800a248 <_strtod_l+0x13c>
 800a16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a16c:	9502      	str	r5, [sp, #8]
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	ab20      	add	r3, sp, #128	; 0x80
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	4a95      	ldr	r2, [pc, #596]	; (800a3cc <_strtod_l+0x2c0>)
 800a176:	ab21      	add	r3, sp, #132	; 0x84
 800a178:	9805      	ldr	r0, [sp, #20]
 800a17a:	a91f      	add	r1, sp, #124	; 0x7c
 800a17c:	f002 f854 	bl	800c228 <__gethex>
 800a180:	2307      	movs	r3, #7
 800a182:	0005      	movs	r5, r0
 800a184:	0004      	movs	r4, r0
 800a186:	401d      	ands	r5, r3
 800a188:	4218      	tst	r0, r3
 800a18a:	d006      	beq.n	800a19a <_strtod_l+0x8e>
 800a18c:	2d06      	cmp	r5, #6
 800a18e:	d12f      	bne.n	800a1f0 <_strtod_l+0xe4>
 800a190:	9b06      	ldr	r3, [sp, #24]
 800a192:	3301      	adds	r3, #1
 800a194:	931f      	str	r3, [sp, #124]	; 0x7c
 800a196:	2300      	movs	r3, #0
 800a198:	930e      	str	r3, [sp, #56]	; 0x38
 800a19a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <_strtod_l+0x9a>
 800a1a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01c      	beq.n	800a1e6 <_strtod_l+0xda>
 800a1ac:	2380      	movs	r3, #128	; 0x80
 800a1ae:	0032      	movs	r2, r6
 800a1b0:	061b      	lsls	r3, r3, #24
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	0010      	movs	r0, r2
 800a1b6:	0019      	movs	r1, r3
 800a1b8:	b025      	add	sp, #148	; 0x94
 800a1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d1c3      	bne.n	800a148 <_strtod_l+0x3c>
 800a1c0:	3201      	adds	r2, #1
 800a1c2:	921f      	str	r2, [sp, #124]	; 0x7c
 800a1c4:	e7b5      	b.n	800a132 <_strtod_l+0x26>
 800a1c6:	2b2d      	cmp	r3, #45	; 0x2d
 800a1c8:	d1be      	bne.n	800a148 <_strtod_l+0x3c>
 800a1ca:	3b2c      	subs	r3, #44	; 0x2c
 800a1cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ce:	1c53      	adds	r3, r2, #1
 800a1d0:	931f      	str	r3, [sp, #124]	; 0x7c
 800a1d2:	7853      	ldrb	r3, [r2, #1]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1b9      	bne.n	800a14c <_strtod_l+0x40>
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	931f      	str	r3, [sp, #124]	; 0x7c
 800a1dc:	2300      	movs	r3, #0
 800a1de:	930e      	str	r3, [sp, #56]	; 0x38
 800a1e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1dc      	bne.n	800a1a0 <_strtod_l+0x94>
 800a1e6:	0032      	movs	r2, r6
 800a1e8:	003b      	movs	r3, r7
 800a1ea:	e7e3      	b.n	800a1b4 <_strtod_l+0xa8>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e7ed      	b.n	800a1cc <_strtod_l+0xc0>
 800a1f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	d007      	beq.n	800a206 <_strtod_l+0xfa>
 800a1f6:	2135      	movs	r1, #53	; 0x35
 800a1f8:	a822      	add	r0, sp, #136	; 0x88
 800a1fa:	f003 f854 	bl	800d2a6 <__copybits>
 800a1fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a200:	9805      	ldr	r0, [sp, #20]
 800a202:	f002 fc0f 	bl	800ca24 <_Bfree>
 800a206:	1e68      	subs	r0, r5, #1
 800a208:	2804      	cmp	r0, #4
 800a20a:	d806      	bhi.n	800a21a <_strtod_l+0x10e>
 800a20c:	f7f5 ff8e 	bl	800012c <__gnu_thumb1_case_uqi>
 800a210:	1816030b 	.word	0x1816030b
 800a214:	0b          	.byte	0x0b
 800a215:	00          	.byte	0x00
 800a216:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a218:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800a21a:	0723      	lsls	r3, r4, #28
 800a21c:	d5bd      	bpl.n	800a19a <_strtod_l+0x8e>
 800a21e:	2380      	movs	r3, #128	; 0x80
 800a220:	061b      	lsls	r3, r3, #24
 800a222:	431f      	orrs	r7, r3
 800a224:	e7b9      	b.n	800a19a <_strtod_l+0x8e>
 800a226:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a228:	4a69      	ldr	r2, [pc, #420]	; (800a3d0 <_strtod_l+0x2c4>)
 800a22a:	496a      	ldr	r1, [pc, #424]	; (800a3d4 <_strtod_l+0x2c8>)
 800a22c:	401a      	ands	r2, r3
 800a22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a230:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a232:	185b      	adds	r3, r3, r1
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	431a      	orrs	r2, r3
 800a238:	0017      	movs	r7, r2
 800a23a:	e7ee      	b.n	800a21a <_strtod_l+0x10e>
 800a23c:	4f66      	ldr	r7, [pc, #408]	; (800a3d8 <_strtod_l+0x2cc>)
 800a23e:	e7ec      	b.n	800a21a <_strtod_l+0x10e>
 800a240:	2601      	movs	r6, #1
 800a242:	4f66      	ldr	r7, [pc, #408]	; (800a3dc <_strtod_l+0x2d0>)
 800a244:	4276      	negs	r6, r6
 800a246:	e7e8      	b.n	800a21a <_strtod_l+0x10e>
 800a248:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	921f      	str	r2, [sp, #124]	; 0x7c
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	2b30      	cmp	r3, #48	; 0x30
 800a252:	d0f9      	beq.n	800a248 <_strtod_l+0x13c>
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0a0      	beq.n	800a19a <_strtod_l+0x8e>
 800a258:	2301      	movs	r3, #1
 800a25a:	930a      	str	r3, [sp, #40]	; 0x28
 800a25c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a25e:	220a      	movs	r2, #10
 800a260:	9310      	str	r3, [sp, #64]	; 0x40
 800a262:	2300      	movs	r3, #0
 800a264:	930f      	str	r3, [sp, #60]	; 0x3c
 800a266:	930b      	str	r3, [sp, #44]	; 0x2c
 800a268:	9309      	str	r3, [sp, #36]	; 0x24
 800a26a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800a26c:	7805      	ldrb	r5, [r0, #0]
 800a26e:	002b      	movs	r3, r5
 800a270:	3b30      	subs	r3, #48	; 0x30
 800a272:	b2d9      	uxtb	r1, r3
 800a274:	2909      	cmp	r1, #9
 800a276:	d927      	bls.n	800a2c8 <_strtod_l+0x1bc>
 800a278:	0022      	movs	r2, r4
 800a27a:	9907      	ldr	r1, [sp, #28]
 800a27c:	f003 ffce 	bl	800e21c <strncmp>
 800a280:	2800      	cmp	r0, #0
 800a282:	d033      	beq.n	800a2ec <_strtod_l+0x1e0>
 800a284:	2000      	movs	r0, #0
 800a286:	002b      	movs	r3, r5
 800a288:	4684      	mov	ip, r0
 800a28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a28c:	900c      	str	r0, [sp, #48]	; 0x30
 800a28e:	9206      	str	r2, [sp, #24]
 800a290:	2220      	movs	r2, #32
 800a292:	0019      	movs	r1, r3
 800a294:	4391      	bics	r1, r2
 800a296:	000a      	movs	r2, r1
 800a298:	2100      	movs	r1, #0
 800a29a:	9107      	str	r1, [sp, #28]
 800a29c:	2a45      	cmp	r2, #69	; 0x45
 800a29e:	d000      	beq.n	800a2a2 <_strtod_l+0x196>
 800a2a0:	e0c5      	b.n	800a42e <_strtod_l+0x322>
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2a6:	4303      	orrs	r3, r0
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	428b      	cmp	r3, r1
 800a2ac:	d094      	beq.n	800a1d8 <_strtod_l+0xcc>
 800a2ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a2b0:	9308      	str	r3, [sp, #32]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	931f      	str	r3, [sp, #124]	; 0x7c
 800a2b6:	9b08      	ldr	r3, [sp, #32]
 800a2b8:	785b      	ldrb	r3, [r3, #1]
 800a2ba:	2b2b      	cmp	r3, #43	; 0x2b
 800a2bc:	d076      	beq.n	800a3ac <_strtod_l+0x2a0>
 800a2be:	000c      	movs	r4, r1
 800a2c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a2c2:	d179      	bne.n	800a3b8 <_strtod_l+0x2ac>
 800a2c4:	2401      	movs	r4, #1
 800a2c6:	e072      	b.n	800a3ae <_strtod_l+0x2a2>
 800a2c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2ca:	2908      	cmp	r1, #8
 800a2cc:	dc09      	bgt.n	800a2e2 <_strtod_l+0x1d6>
 800a2ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2d0:	4351      	muls	r1, r2
 800a2d2:	185b      	adds	r3, r3, r1
 800a2d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d8:	3001      	adds	r0, #1
 800a2da:	3301      	adds	r3, #1
 800a2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2de:	901f      	str	r0, [sp, #124]	; 0x7c
 800a2e0:	e7c3      	b.n	800a26a <_strtod_l+0x15e>
 800a2e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2e4:	4351      	muls	r1, r2
 800a2e6:	185b      	adds	r3, r3, r1
 800a2e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ea:	e7f4      	b.n	800a2d6 <_strtod_l+0x1ca>
 800a2ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f0:	191c      	adds	r4, r3, r4
 800a2f2:	941f      	str	r4, [sp, #124]	; 0x7c
 800a2f4:	7823      	ldrb	r3, [r4, #0]
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	d039      	beq.n	800a36e <_strtod_l+0x262>
 800a2fa:	900c      	str	r0, [sp, #48]	; 0x30
 800a2fc:	9206      	str	r2, [sp, #24]
 800a2fe:	001a      	movs	r2, r3
 800a300:	3a30      	subs	r2, #48	; 0x30
 800a302:	2a09      	cmp	r2, #9
 800a304:	d912      	bls.n	800a32c <_strtod_l+0x220>
 800a306:	2201      	movs	r2, #1
 800a308:	4694      	mov	ip, r2
 800a30a:	e7c1      	b.n	800a290 <_strtod_l+0x184>
 800a30c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a30e:	3001      	adds	r0, #1
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	921f      	str	r2, [sp, #124]	; 0x7c
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	2b30      	cmp	r3, #48	; 0x30
 800a318:	d0f8      	beq.n	800a30c <_strtod_l+0x200>
 800a31a:	001a      	movs	r2, r3
 800a31c:	3a31      	subs	r2, #49	; 0x31
 800a31e:	2a08      	cmp	r2, #8
 800a320:	d83f      	bhi.n	800a3a2 <_strtod_l+0x296>
 800a322:	900c      	str	r0, [sp, #48]	; 0x30
 800a324:	2000      	movs	r0, #0
 800a326:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a328:	9006      	str	r0, [sp, #24]
 800a32a:	9210      	str	r2, [sp, #64]	; 0x40
 800a32c:	001a      	movs	r2, r3
 800a32e:	1c41      	adds	r1, r0, #1
 800a330:	3a30      	subs	r2, #48	; 0x30
 800a332:	2b30      	cmp	r3, #48	; 0x30
 800a334:	d015      	beq.n	800a362 <_strtod_l+0x256>
 800a336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a338:	185b      	adds	r3, r3, r1
 800a33a:	210a      	movs	r1, #10
 800a33c:	930c      	str	r3, [sp, #48]	; 0x30
 800a33e:	9b06      	ldr	r3, [sp, #24]
 800a340:	18c4      	adds	r4, r0, r3
 800a342:	42a3      	cmp	r3, r4
 800a344:	d115      	bne.n	800a372 <_strtod_l+0x266>
 800a346:	9906      	ldr	r1, [sp, #24]
 800a348:	9b06      	ldr	r3, [sp, #24]
 800a34a:	3101      	adds	r1, #1
 800a34c:	1809      	adds	r1, r1, r0
 800a34e:	181b      	adds	r3, r3, r0
 800a350:	9106      	str	r1, [sp, #24]
 800a352:	2b08      	cmp	r3, #8
 800a354:	dc1b      	bgt.n	800a38e <_strtod_l+0x282>
 800a356:	230a      	movs	r3, #10
 800a358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a35a:	434b      	muls	r3, r1
 800a35c:	2100      	movs	r1, #0
 800a35e:	18d3      	adds	r3, r2, r3
 800a360:	930b      	str	r3, [sp, #44]	; 0x2c
 800a362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a364:	0008      	movs	r0, r1
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	921f      	str	r2, [sp, #124]	; 0x7c
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	e7c7      	b.n	800a2fe <_strtod_l+0x1f2>
 800a36e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a370:	e7d1      	b.n	800a316 <_strtod_l+0x20a>
 800a372:	2b08      	cmp	r3, #8
 800a374:	dc04      	bgt.n	800a380 <_strtod_l+0x274>
 800a376:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a378:	434d      	muls	r5, r1
 800a37a:	950b      	str	r5, [sp, #44]	; 0x2c
 800a37c:	3301      	adds	r3, #1
 800a37e:	e7e0      	b.n	800a342 <_strtod_l+0x236>
 800a380:	1c5d      	adds	r5, r3, #1
 800a382:	2d10      	cmp	r5, #16
 800a384:	dcfa      	bgt.n	800a37c <_strtod_l+0x270>
 800a386:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a388:	434d      	muls	r5, r1
 800a38a:	950f      	str	r5, [sp, #60]	; 0x3c
 800a38c:	e7f6      	b.n	800a37c <_strtod_l+0x270>
 800a38e:	9b06      	ldr	r3, [sp, #24]
 800a390:	2100      	movs	r1, #0
 800a392:	2b10      	cmp	r3, #16
 800a394:	dce5      	bgt.n	800a362 <_strtod_l+0x256>
 800a396:	230a      	movs	r3, #10
 800a398:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a39a:	4343      	muls	r3, r0
 800a39c:	18d3      	adds	r3, r2, r3
 800a39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3a0:	e7df      	b.n	800a362 <_strtod_l+0x256>
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	920c      	str	r2, [sp, #48]	; 0x30
 800a3a6:	9206      	str	r2, [sp, #24]
 800a3a8:	3201      	adds	r2, #1
 800a3aa:	e7ad      	b.n	800a308 <_strtod_l+0x1fc>
 800a3ac:	2400      	movs	r4, #0
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	789b      	ldrb	r3, [r3, #2]
 800a3b8:	001a      	movs	r2, r3
 800a3ba:	3a30      	subs	r2, #48	; 0x30
 800a3bc:	2a09      	cmp	r2, #9
 800a3be:	d913      	bls.n	800a3e8 <_strtod_l+0x2dc>
 800a3c0:	9a08      	ldr	r2, [sp, #32]
 800a3c2:	921f      	str	r2, [sp, #124]	; 0x7c
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	e031      	b.n	800a42c <_strtod_l+0x320>
 800a3c8:	0800eb3c 	.word	0x0800eb3c
 800a3cc:	0800e88c 	.word	0x0800e88c
 800a3d0:	ffefffff 	.word	0xffefffff
 800a3d4:	00000433 	.word	0x00000433
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	7fffffff 	.word	0x7fffffff
 800a3e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	921f      	str	r2, [sp, #124]	; 0x7c
 800a3e6:	785b      	ldrb	r3, [r3, #1]
 800a3e8:	2b30      	cmp	r3, #48	; 0x30
 800a3ea:	d0f9      	beq.n	800a3e0 <_strtod_l+0x2d4>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	9207      	str	r2, [sp, #28]
 800a3f0:	001a      	movs	r2, r3
 800a3f2:	3a31      	subs	r2, #49	; 0x31
 800a3f4:	2a08      	cmp	r2, #8
 800a3f6:	d81a      	bhi.n	800a42e <_strtod_l+0x322>
 800a3f8:	3b30      	subs	r3, #48	; 0x30
 800a3fa:	001a      	movs	r2, r3
 800a3fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a402:	1c59      	adds	r1, r3, #1
 800a404:	911f      	str	r1, [sp, #124]	; 0x7c
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	001d      	movs	r5, r3
 800a40a:	3d30      	subs	r5, #48	; 0x30
 800a40c:	2d09      	cmp	r5, #9
 800a40e:	d939      	bls.n	800a484 <_strtod_l+0x378>
 800a410:	9d07      	ldr	r5, [sp, #28]
 800a412:	1b49      	subs	r1, r1, r5
 800a414:	4db0      	ldr	r5, [pc, #704]	; (800a6d8 <_strtod_l+0x5cc>)
 800a416:	9507      	str	r5, [sp, #28]
 800a418:	2908      	cmp	r1, #8
 800a41a:	dc03      	bgt.n	800a424 <_strtod_l+0x318>
 800a41c:	9207      	str	r2, [sp, #28]
 800a41e:	42aa      	cmp	r2, r5
 800a420:	dd00      	ble.n	800a424 <_strtod_l+0x318>
 800a422:	9507      	str	r5, [sp, #28]
 800a424:	2c00      	cmp	r4, #0
 800a426:	d002      	beq.n	800a42e <_strtod_l+0x322>
 800a428:	9a07      	ldr	r2, [sp, #28]
 800a42a:	4252      	negs	r2, r2
 800a42c:	9207      	str	r2, [sp, #28]
 800a42e:	9a06      	ldr	r2, [sp, #24]
 800a430:	2a00      	cmp	r2, #0
 800a432:	d14b      	bne.n	800a4cc <_strtod_l+0x3c0>
 800a434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a436:	4310      	orrs	r0, r2
 800a438:	d000      	beq.n	800a43c <_strtod_l+0x330>
 800a43a:	e6ae      	b.n	800a19a <_strtod_l+0x8e>
 800a43c:	4662      	mov	r2, ip
 800a43e:	2a00      	cmp	r2, #0
 800a440:	d000      	beq.n	800a444 <_strtod_l+0x338>
 800a442:	e6c9      	b.n	800a1d8 <_strtod_l+0xcc>
 800a444:	2b69      	cmp	r3, #105	; 0x69
 800a446:	d025      	beq.n	800a494 <_strtod_l+0x388>
 800a448:	dc21      	bgt.n	800a48e <_strtod_l+0x382>
 800a44a:	2b49      	cmp	r3, #73	; 0x49
 800a44c:	d022      	beq.n	800a494 <_strtod_l+0x388>
 800a44e:	2b4e      	cmp	r3, #78	; 0x4e
 800a450:	d000      	beq.n	800a454 <_strtod_l+0x348>
 800a452:	e6c1      	b.n	800a1d8 <_strtod_l+0xcc>
 800a454:	49a1      	ldr	r1, [pc, #644]	; (800a6dc <_strtod_l+0x5d0>)
 800a456:	a81f      	add	r0, sp, #124	; 0x7c
 800a458:	f002 f934 	bl	800c6c4 <__match>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d100      	bne.n	800a462 <_strtod_l+0x356>
 800a460:	e6ba      	b.n	800a1d8 <_strtod_l+0xcc>
 800a462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b28      	cmp	r3, #40	; 0x28
 800a468:	d12a      	bne.n	800a4c0 <_strtod_l+0x3b4>
 800a46a:	499d      	ldr	r1, [pc, #628]	; (800a6e0 <_strtod_l+0x5d4>)
 800a46c:	aa22      	add	r2, sp, #136	; 0x88
 800a46e:	a81f      	add	r0, sp, #124	; 0x7c
 800a470:	f002 f93c 	bl	800c6ec <__hexnan>
 800a474:	2805      	cmp	r0, #5
 800a476:	d123      	bne.n	800a4c0 <_strtod_l+0x3b4>
 800a478:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a47a:	4a9a      	ldr	r2, [pc, #616]	; (800a6e4 <_strtod_l+0x5d8>)
 800a47c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a47e:	431a      	orrs	r2, r3
 800a480:	0017      	movs	r7, r2
 800a482:	e68a      	b.n	800a19a <_strtod_l+0x8e>
 800a484:	210a      	movs	r1, #10
 800a486:	434a      	muls	r2, r1
 800a488:	18d2      	adds	r2, r2, r3
 800a48a:	3a30      	subs	r2, #48	; 0x30
 800a48c:	e7b8      	b.n	800a400 <_strtod_l+0x2f4>
 800a48e:	2b6e      	cmp	r3, #110	; 0x6e
 800a490:	d0e0      	beq.n	800a454 <_strtod_l+0x348>
 800a492:	e6a1      	b.n	800a1d8 <_strtod_l+0xcc>
 800a494:	4994      	ldr	r1, [pc, #592]	; (800a6e8 <_strtod_l+0x5dc>)
 800a496:	a81f      	add	r0, sp, #124	; 0x7c
 800a498:	f002 f914 	bl	800c6c4 <__match>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d100      	bne.n	800a4a2 <_strtod_l+0x396>
 800a4a0:	e69a      	b.n	800a1d8 <_strtod_l+0xcc>
 800a4a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4a4:	4991      	ldr	r1, [pc, #580]	; (800a6ec <_strtod_l+0x5e0>)
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	a81f      	add	r0, sp, #124	; 0x7c
 800a4aa:	931f      	str	r3, [sp, #124]	; 0x7c
 800a4ac:	f002 f90a 	bl	800c6c4 <__match>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d102      	bne.n	800a4ba <_strtod_l+0x3ae>
 800a4b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	931f      	str	r3, [sp, #124]	; 0x7c
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	4f89      	ldr	r7, [pc, #548]	; (800a6e4 <_strtod_l+0x5d8>)
 800a4be:	e66c      	b.n	800a19a <_strtod_l+0x8e>
 800a4c0:	488b      	ldr	r0, [pc, #556]	; (800a6f0 <_strtod_l+0x5e4>)
 800a4c2:	f003 fe57 	bl	800e174 <nan>
 800a4c6:	0006      	movs	r6, r0
 800a4c8:	000f      	movs	r7, r1
 800a4ca:	e666      	b.n	800a19a <_strtod_l+0x8e>
 800a4cc:	9b07      	ldr	r3, [sp, #28]
 800a4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <_strtod_l+0x3d2>
 800a4da:	9b06      	ldr	r3, [sp, #24]
 800a4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4de:	9c06      	ldr	r4, [sp, #24]
 800a4e0:	2c10      	cmp	r4, #16
 800a4e2:	dd00      	ble.n	800a4e6 <_strtod_l+0x3da>
 800a4e4:	2410      	movs	r4, #16
 800a4e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a4e8:	f7f8 f94a 	bl	8002780 <__aeabi_ui2d>
 800a4ec:	9b06      	ldr	r3, [sp, #24]
 800a4ee:	0006      	movs	r6, r0
 800a4f0:	000f      	movs	r7, r1
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	dd15      	ble.n	800a522 <_strtod_l+0x416>
 800a4f6:	0022      	movs	r2, r4
 800a4f8:	4b7e      	ldr	r3, [pc, #504]	; (800a6f4 <_strtod_l+0x5e8>)
 800a4fa:	3a09      	subs	r2, #9
 800a4fc:	00d2      	lsls	r2, r2, #3
 800a4fe:	189b      	adds	r3, r3, r2
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f7f7 faba 	bl	8001a7c <__aeabi_dmul>
 800a508:	0006      	movs	r6, r0
 800a50a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a50c:	000f      	movs	r7, r1
 800a50e:	f7f8 f937 	bl	8002780 <__aeabi_ui2d>
 800a512:	0002      	movs	r2, r0
 800a514:	000b      	movs	r3, r1
 800a516:	0030      	movs	r0, r6
 800a518:	0039      	movs	r1, r7
 800a51a:	f7f6 fb71 	bl	8000c00 <__aeabi_dadd>
 800a51e:	0006      	movs	r6, r0
 800a520:	000f      	movs	r7, r1
 800a522:	9b06      	ldr	r3, [sp, #24]
 800a524:	2b0f      	cmp	r3, #15
 800a526:	dc39      	bgt.n	800a59c <_strtod_l+0x490>
 800a528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d100      	bne.n	800a530 <_strtod_l+0x424>
 800a52e:	e634      	b.n	800a19a <_strtod_l+0x8e>
 800a530:	dd24      	ble.n	800a57c <_strtod_l+0x470>
 800a532:	2b16      	cmp	r3, #22
 800a534:	dc09      	bgt.n	800a54a <_strtod_l+0x43e>
 800a536:	496f      	ldr	r1, [pc, #444]	; (800a6f4 <_strtod_l+0x5e8>)
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	18c9      	adds	r1, r1, r3
 800a53c:	0032      	movs	r2, r6
 800a53e:	6808      	ldr	r0, [r1, #0]
 800a540:	6849      	ldr	r1, [r1, #4]
 800a542:	003b      	movs	r3, r7
 800a544:	f7f7 fa9a 	bl	8001a7c <__aeabi_dmul>
 800a548:	e7bd      	b.n	800a4c6 <_strtod_l+0x3ba>
 800a54a:	2325      	movs	r3, #37	; 0x25
 800a54c:	9a06      	ldr	r2, [sp, #24]
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a552:	4293      	cmp	r3, r2
 800a554:	db22      	blt.n	800a59c <_strtod_l+0x490>
 800a556:	240f      	movs	r4, #15
 800a558:	9b06      	ldr	r3, [sp, #24]
 800a55a:	4d66      	ldr	r5, [pc, #408]	; (800a6f4 <_strtod_l+0x5e8>)
 800a55c:	1ae4      	subs	r4, r4, r3
 800a55e:	00e1      	lsls	r1, r4, #3
 800a560:	1869      	adds	r1, r5, r1
 800a562:	0032      	movs	r2, r6
 800a564:	6808      	ldr	r0, [r1, #0]
 800a566:	6849      	ldr	r1, [r1, #4]
 800a568:	003b      	movs	r3, r7
 800a56a:	f7f7 fa87 	bl	8001a7c <__aeabi_dmul>
 800a56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a570:	1b1c      	subs	r4, r3, r4
 800a572:	00e4      	lsls	r4, r4, #3
 800a574:	192c      	adds	r4, r5, r4
 800a576:	6822      	ldr	r2, [r4, #0]
 800a578:	6863      	ldr	r3, [r4, #4]
 800a57a:	e7e3      	b.n	800a544 <_strtod_l+0x438>
 800a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57e:	3316      	adds	r3, #22
 800a580:	db0c      	blt.n	800a59c <_strtod_l+0x490>
 800a582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a584:	9a07      	ldr	r2, [sp, #28]
 800a586:	0030      	movs	r0, r6
 800a588:	1a9a      	subs	r2, r3, r2
 800a58a:	4b5a      	ldr	r3, [pc, #360]	; (800a6f4 <_strtod_l+0x5e8>)
 800a58c:	00d2      	lsls	r2, r2, #3
 800a58e:	189b      	adds	r3, r3, r2
 800a590:	0039      	movs	r1, r7
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f7f6 fe6f 	bl	8001278 <__aeabi_ddiv>
 800a59a:	e794      	b.n	800a4c6 <_strtod_l+0x3ba>
 800a59c:	9b06      	ldr	r3, [sp, #24]
 800a59e:	1b1c      	subs	r4, r3, r4
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a2:	18e4      	adds	r4, r4, r3
 800a5a4:	2c00      	cmp	r4, #0
 800a5a6:	dd72      	ble.n	800a68e <_strtod_l+0x582>
 800a5a8:	230f      	movs	r3, #15
 800a5aa:	0021      	movs	r1, r4
 800a5ac:	4019      	ands	r1, r3
 800a5ae:	421c      	tst	r4, r3
 800a5b0:	d00a      	beq.n	800a5c8 <_strtod_l+0x4bc>
 800a5b2:	00cb      	lsls	r3, r1, #3
 800a5b4:	494f      	ldr	r1, [pc, #316]	; (800a6f4 <_strtod_l+0x5e8>)
 800a5b6:	0032      	movs	r2, r6
 800a5b8:	18c9      	adds	r1, r1, r3
 800a5ba:	6808      	ldr	r0, [r1, #0]
 800a5bc:	6849      	ldr	r1, [r1, #4]
 800a5be:	003b      	movs	r3, r7
 800a5c0:	f7f7 fa5c 	bl	8001a7c <__aeabi_dmul>
 800a5c4:	0006      	movs	r6, r0
 800a5c6:	000f      	movs	r7, r1
 800a5c8:	230f      	movs	r3, #15
 800a5ca:	439c      	bics	r4, r3
 800a5cc:	d04a      	beq.n	800a664 <_strtod_l+0x558>
 800a5ce:	3326      	adds	r3, #38	; 0x26
 800a5d0:	33ff      	adds	r3, #255	; 0xff
 800a5d2:	429c      	cmp	r4, r3
 800a5d4:	dd22      	ble.n	800a61c <_strtod_l+0x510>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9306      	str	r3, [sp, #24]
 800a5da:	9307      	str	r3, [sp, #28]
 800a5dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5de:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e0:	2322      	movs	r3, #34	; 0x22
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	9a05      	ldr	r2, [sp, #20]
 800a5e6:	4f3f      	ldr	r7, [pc, #252]	; (800a6e4 <_strtod_l+0x5d8>)
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ec:	42b3      	cmp	r3, r6
 800a5ee:	d100      	bne.n	800a5f2 <_strtod_l+0x4e6>
 800a5f0:	e5d3      	b.n	800a19a <_strtod_l+0x8e>
 800a5f2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a5f4:	9805      	ldr	r0, [sp, #20]
 800a5f6:	f002 fa15 	bl	800ca24 <_Bfree>
 800a5fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5fc:	9805      	ldr	r0, [sp, #20]
 800a5fe:	f002 fa11 	bl	800ca24 <_Bfree>
 800a602:	9907      	ldr	r1, [sp, #28]
 800a604:	9805      	ldr	r0, [sp, #20]
 800a606:	f002 fa0d 	bl	800ca24 <_Bfree>
 800a60a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a60c:	9805      	ldr	r0, [sp, #20]
 800a60e:	f002 fa09 	bl	800ca24 <_Bfree>
 800a612:	9906      	ldr	r1, [sp, #24]
 800a614:	9805      	ldr	r0, [sp, #20]
 800a616:	f002 fa05 	bl	800ca24 <_Bfree>
 800a61a:	e5be      	b.n	800a19a <_strtod_l+0x8e>
 800a61c:	2300      	movs	r3, #0
 800a61e:	0030      	movs	r0, r6
 800a620:	0039      	movs	r1, r7
 800a622:	4d35      	ldr	r5, [pc, #212]	; (800a6f8 <_strtod_l+0x5ec>)
 800a624:	1124      	asrs	r4, r4, #4
 800a626:	9308      	str	r3, [sp, #32]
 800a628:	2c01      	cmp	r4, #1
 800a62a:	dc1e      	bgt.n	800a66a <_strtod_l+0x55e>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <_strtod_l+0x528>
 800a630:	0006      	movs	r6, r0
 800a632:	000f      	movs	r7, r1
 800a634:	4b31      	ldr	r3, [pc, #196]	; (800a6fc <_strtod_l+0x5f0>)
 800a636:	0032      	movs	r2, r6
 800a638:	18ff      	adds	r7, r7, r3
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	00dd      	lsls	r5, r3, #3
 800a63e:	4b2e      	ldr	r3, [pc, #184]	; (800a6f8 <_strtod_l+0x5ec>)
 800a640:	195d      	adds	r5, r3, r5
 800a642:	6828      	ldr	r0, [r5, #0]
 800a644:	6869      	ldr	r1, [r5, #4]
 800a646:	003b      	movs	r3, r7
 800a648:	f7f7 fa18 	bl	8001a7c <__aeabi_dmul>
 800a64c:	4b25      	ldr	r3, [pc, #148]	; (800a6e4 <_strtod_l+0x5d8>)
 800a64e:	4a2c      	ldr	r2, [pc, #176]	; (800a700 <_strtod_l+0x5f4>)
 800a650:	0006      	movs	r6, r0
 800a652:	400b      	ands	r3, r1
 800a654:	4293      	cmp	r3, r2
 800a656:	d8be      	bhi.n	800a5d6 <_strtod_l+0x4ca>
 800a658:	4a2a      	ldr	r2, [pc, #168]	; (800a704 <_strtod_l+0x5f8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d913      	bls.n	800a686 <_strtod_l+0x57a>
 800a65e:	2601      	movs	r6, #1
 800a660:	4f29      	ldr	r7, [pc, #164]	; (800a708 <_strtod_l+0x5fc>)
 800a662:	4276      	negs	r6, r6
 800a664:	2300      	movs	r3, #0
 800a666:	9308      	str	r3, [sp, #32]
 800a668:	e087      	b.n	800a77a <_strtod_l+0x66e>
 800a66a:	2201      	movs	r2, #1
 800a66c:	4214      	tst	r4, r2
 800a66e:	d004      	beq.n	800a67a <_strtod_l+0x56e>
 800a670:	682a      	ldr	r2, [r5, #0]
 800a672:	686b      	ldr	r3, [r5, #4]
 800a674:	f7f7 fa02 	bl	8001a7c <__aeabi_dmul>
 800a678:	2301      	movs	r3, #1
 800a67a:	9a08      	ldr	r2, [sp, #32]
 800a67c:	1064      	asrs	r4, r4, #1
 800a67e:	3201      	adds	r2, #1
 800a680:	9208      	str	r2, [sp, #32]
 800a682:	3508      	adds	r5, #8
 800a684:	e7d0      	b.n	800a628 <_strtod_l+0x51c>
 800a686:	23d4      	movs	r3, #212	; 0xd4
 800a688:	049b      	lsls	r3, r3, #18
 800a68a:	18cf      	adds	r7, r1, r3
 800a68c:	e7ea      	b.n	800a664 <_strtod_l+0x558>
 800a68e:	2c00      	cmp	r4, #0
 800a690:	d0e8      	beq.n	800a664 <_strtod_l+0x558>
 800a692:	4264      	negs	r4, r4
 800a694:	220f      	movs	r2, #15
 800a696:	0023      	movs	r3, r4
 800a698:	4013      	ands	r3, r2
 800a69a:	4214      	tst	r4, r2
 800a69c:	d00a      	beq.n	800a6b4 <_strtod_l+0x5a8>
 800a69e:	00da      	lsls	r2, r3, #3
 800a6a0:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <_strtod_l+0x5e8>)
 800a6a2:	0030      	movs	r0, r6
 800a6a4:	189b      	adds	r3, r3, r2
 800a6a6:	0039      	movs	r1, r7
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	f7f6 fde4 	bl	8001278 <__aeabi_ddiv>
 800a6b0:	0006      	movs	r6, r0
 800a6b2:	000f      	movs	r7, r1
 800a6b4:	1124      	asrs	r4, r4, #4
 800a6b6:	d0d5      	beq.n	800a664 <_strtod_l+0x558>
 800a6b8:	2c1f      	cmp	r4, #31
 800a6ba:	dd27      	ble.n	800a70c <_strtod_l+0x600>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9306      	str	r3, [sp, #24]
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c6:	2322      	movs	r3, #34	; 0x22
 800a6c8:	9a05      	ldr	r2, [sp, #20]
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d0:	2700      	movs	r7, #0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d18d      	bne.n	800a5f2 <_strtod_l+0x4e6>
 800a6d6:	e560      	b.n	800a19a <_strtod_l+0x8e>
 800a6d8:	00004e1f 	.word	0x00004e1f
 800a6dc:	0800e861 	.word	0x0800e861
 800a6e0:	0800e8a0 	.word	0x0800e8a0
 800a6e4:	7ff00000 	.word	0x7ff00000
 800a6e8:	0800e859 	.word	0x0800e859
 800a6ec:	0800e9e4 	.word	0x0800e9e4
 800a6f0:	0800ed13 	.word	0x0800ed13
 800a6f4:	0800ebd8 	.word	0x0800ebd8
 800a6f8:	0800ebb0 	.word	0x0800ebb0
 800a6fc:	fcb00000 	.word	0xfcb00000
 800a700:	7ca00000 	.word	0x7ca00000
 800a704:	7c900000 	.word	0x7c900000
 800a708:	7fefffff 	.word	0x7fefffff
 800a70c:	2310      	movs	r3, #16
 800a70e:	0022      	movs	r2, r4
 800a710:	401a      	ands	r2, r3
 800a712:	9208      	str	r2, [sp, #32]
 800a714:	421c      	tst	r4, r3
 800a716:	d001      	beq.n	800a71c <_strtod_l+0x610>
 800a718:	335a      	adds	r3, #90	; 0x5a
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	0030      	movs	r0, r6
 800a71e:	0039      	movs	r1, r7
 800a720:	2300      	movs	r3, #0
 800a722:	4dc5      	ldr	r5, [pc, #788]	; (800aa38 <_strtod_l+0x92c>)
 800a724:	2201      	movs	r2, #1
 800a726:	4214      	tst	r4, r2
 800a728:	d004      	beq.n	800a734 <_strtod_l+0x628>
 800a72a:	682a      	ldr	r2, [r5, #0]
 800a72c:	686b      	ldr	r3, [r5, #4]
 800a72e:	f7f7 f9a5 	bl	8001a7c <__aeabi_dmul>
 800a732:	2301      	movs	r3, #1
 800a734:	1064      	asrs	r4, r4, #1
 800a736:	3508      	adds	r5, #8
 800a738:	2c00      	cmp	r4, #0
 800a73a:	d1f3      	bne.n	800a724 <_strtod_l+0x618>
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <_strtod_l+0x638>
 800a740:	0006      	movs	r6, r0
 800a742:	000f      	movs	r7, r1
 800a744:	9b08      	ldr	r3, [sp, #32]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00f      	beq.n	800a76a <_strtod_l+0x65e>
 800a74a:	236b      	movs	r3, #107	; 0x6b
 800a74c:	007a      	lsls	r2, r7, #1
 800a74e:	0d52      	lsrs	r2, r2, #21
 800a750:	0039      	movs	r1, r7
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	2b00      	cmp	r3, #0
 800a756:	dd08      	ble.n	800a76a <_strtod_l+0x65e>
 800a758:	2b1f      	cmp	r3, #31
 800a75a:	dc00      	bgt.n	800a75e <_strtod_l+0x652>
 800a75c:	e124      	b.n	800a9a8 <_strtod_l+0x89c>
 800a75e:	2600      	movs	r6, #0
 800a760:	2b34      	cmp	r3, #52	; 0x34
 800a762:	dc00      	bgt.n	800a766 <_strtod_l+0x65a>
 800a764:	e119      	b.n	800a99a <_strtod_l+0x88e>
 800a766:	27dc      	movs	r7, #220	; 0xdc
 800a768:	04bf      	lsls	r7, r7, #18
 800a76a:	2200      	movs	r2, #0
 800a76c:	2300      	movs	r3, #0
 800a76e:	0030      	movs	r0, r6
 800a770:	0039      	movs	r1, r7
 800a772:	f7f5 fe75 	bl	8000460 <__aeabi_dcmpeq>
 800a776:	2800      	cmp	r0, #0
 800a778:	d1a0      	bne.n	800a6bc <_strtod_l+0x5b0>
 800a77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	9805      	ldr	r0, [sp, #20]
 800a786:	f002 f9b5 	bl	800caf4 <__s2b>
 800a78a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d100      	bne.n	800a792 <_strtod_l+0x686>
 800a790:	e721      	b.n	800a5d6 <_strtod_l+0x4ca>
 800a792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a794:	9907      	ldr	r1, [sp, #28]
 800a796:	17da      	asrs	r2, r3, #31
 800a798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a79a:	1a5b      	subs	r3, r3, r1
 800a79c:	401a      	ands	r2, r3
 800a79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a0:	9215      	str	r2, [sp, #84]	; 0x54
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7a6:	17db      	asrs	r3, r3, #31
 800a7a8:	401a      	ands	r2, r3
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	921a      	str	r2, [sp, #104]	; 0x68
 800a7ae:	9306      	str	r3, [sp, #24]
 800a7b0:	9307      	str	r3, [sp, #28]
 800a7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b4:	9805      	ldr	r0, [sp, #20]
 800a7b6:	6859      	ldr	r1, [r3, #4]
 800a7b8:	f002 f8f0 	bl	800c99c <_Balloc>
 800a7bc:	9009      	str	r0, [sp, #36]	; 0x24
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d100      	bne.n	800a7c4 <_strtod_l+0x6b8>
 800a7c2:	e70d      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	310c      	adds	r1, #12
 800a7cc:	1c9a      	adds	r2, r3, #2
 800a7ce:	0092      	lsls	r2, r2, #2
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7d4:	f7fe fcca 	bl	800916c <memcpy>
 800a7d8:	ab22      	add	r3, sp, #136	; 0x88
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	ab21      	add	r3, sp, #132	; 0x84
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	0032      	movs	r2, r6
 800a7e2:	003b      	movs	r3, r7
 800a7e4:	9805      	ldr	r0, [sp, #20]
 800a7e6:	9612      	str	r6, [sp, #72]	; 0x48
 800a7e8:	9713      	str	r7, [sp, #76]	; 0x4c
 800a7ea:	f002 fccf 	bl	800d18c <__d2b>
 800a7ee:	9020      	str	r0, [sp, #128]	; 0x80
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d100      	bne.n	800a7f6 <_strtod_l+0x6ea>
 800a7f4:	e6f4      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	9805      	ldr	r0, [sp, #20]
 800a7fa:	f002 fa0f 	bl	800cc1c <__i2b>
 800a7fe:	9007      	str	r0, [sp, #28]
 800a800:	2800      	cmp	r0, #0
 800a802:	d100      	bne.n	800a806 <_strtod_l+0x6fa>
 800a804:	e6ec      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a808:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a80a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a80c:	1ad4      	subs	r4, r2, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	db01      	blt.n	800a816 <_strtod_l+0x70a>
 800a812:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a814:	195d      	adds	r5, r3, r5
 800a816:	9908      	ldr	r1, [sp, #32]
 800a818:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a81a:	1a5b      	subs	r3, r3, r1
 800a81c:	2136      	movs	r1, #54	; 0x36
 800a81e:	189b      	adds	r3, r3, r2
 800a820:	1a8a      	subs	r2, r1, r2
 800a822:	4986      	ldr	r1, [pc, #536]	; (800aa3c <_strtod_l+0x930>)
 800a824:	2001      	movs	r0, #1
 800a826:	468c      	mov	ip, r1
 800a828:	2100      	movs	r1, #0
 800a82a:	3b01      	subs	r3, #1
 800a82c:	9110      	str	r1, [sp, #64]	; 0x40
 800a82e:	9014      	str	r0, [sp, #80]	; 0x50
 800a830:	4563      	cmp	r3, ip
 800a832:	da07      	bge.n	800a844 <_strtod_l+0x738>
 800a834:	4661      	mov	r1, ip
 800a836:	1ac9      	subs	r1, r1, r3
 800a838:	1a52      	subs	r2, r2, r1
 800a83a:	291f      	cmp	r1, #31
 800a83c:	dd00      	ble.n	800a840 <_strtod_l+0x734>
 800a83e:	e0b8      	b.n	800a9b2 <_strtod_l+0x8a6>
 800a840:	4088      	lsls	r0, r1
 800a842:	9014      	str	r0, [sp, #80]	; 0x50
 800a844:	18ab      	adds	r3, r5, r2
 800a846:	930c      	str	r3, [sp, #48]	; 0x30
 800a848:	18a4      	adds	r4, r4, r2
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a84e:	191c      	adds	r4, r3, r4
 800a850:	002b      	movs	r3, r5
 800a852:	4295      	cmp	r5, r2
 800a854:	dd00      	ble.n	800a858 <_strtod_l+0x74c>
 800a856:	0013      	movs	r3, r2
 800a858:	42a3      	cmp	r3, r4
 800a85a:	dd00      	ble.n	800a85e <_strtod_l+0x752>
 800a85c:	0023      	movs	r3, r4
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd04      	ble.n	800a86c <_strtod_l+0x760>
 800a862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a864:	1ae4      	subs	r4, r4, r3
 800a866:	1ad2      	subs	r2, r2, r3
 800a868:	920c      	str	r2, [sp, #48]	; 0x30
 800a86a:	1aed      	subs	r5, r5, r3
 800a86c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dd17      	ble.n	800a8a2 <_strtod_l+0x796>
 800a872:	001a      	movs	r2, r3
 800a874:	9907      	ldr	r1, [sp, #28]
 800a876:	9805      	ldr	r0, [sp, #20]
 800a878:	f002 fa96 	bl	800cda8 <__pow5mult>
 800a87c:	9007      	str	r0, [sp, #28]
 800a87e:	2800      	cmp	r0, #0
 800a880:	d100      	bne.n	800a884 <_strtod_l+0x778>
 800a882:	e6ad      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a884:	0001      	movs	r1, r0
 800a886:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a888:	9805      	ldr	r0, [sp, #20]
 800a88a:	f002 f9dd 	bl	800cc48 <__multiply>
 800a88e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a890:	2800      	cmp	r0, #0
 800a892:	d100      	bne.n	800a896 <_strtod_l+0x78a>
 800a894:	e6a4      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a896:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a898:	9805      	ldr	r0, [sp, #20]
 800a89a:	f002 f8c3 	bl	800ca24 <_Bfree>
 800a89e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8a0:	9320      	str	r3, [sp, #128]	; 0x80
 800a8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dd00      	ble.n	800a8aa <_strtod_l+0x79e>
 800a8a8:	e089      	b.n	800a9be <_strtod_l+0x8b2>
 800a8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dd08      	ble.n	800a8c2 <_strtod_l+0x7b6>
 800a8b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a8b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8b4:	9805      	ldr	r0, [sp, #20]
 800a8b6:	f002 fa77 	bl	800cda8 <__pow5mult>
 800a8ba:	9009      	str	r0, [sp, #36]	; 0x24
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d100      	bne.n	800a8c2 <_strtod_l+0x7b6>
 800a8c0:	e68e      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	dd08      	ble.n	800a8d8 <_strtod_l+0x7cc>
 800a8c6:	0022      	movs	r2, r4
 800a8c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ca:	9805      	ldr	r0, [sp, #20]
 800a8cc:	f002 fac8 	bl	800ce60 <__lshift>
 800a8d0:	9009      	str	r0, [sp, #36]	; 0x24
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d100      	bne.n	800a8d8 <_strtod_l+0x7cc>
 800a8d6:	e683      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	dd08      	ble.n	800a8ee <_strtod_l+0x7e2>
 800a8dc:	002a      	movs	r2, r5
 800a8de:	9907      	ldr	r1, [sp, #28]
 800a8e0:	9805      	ldr	r0, [sp, #20]
 800a8e2:	f002 fabd 	bl	800ce60 <__lshift>
 800a8e6:	9007      	str	r0, [sp, #28]
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d100      	bne.n	800a8ee <_strtod_l+0x7e2>
 800a8ec:	e678      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a8f2:	9805      	ldr	r0, [sp, #20]
 800a8f4:	f002 fb3e 	bl	800cf74 <__mdiff>
 800a8f8:	9006      	str	r0, [sp, #24]
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d100      	bne.n	800a900 <_strtod_l+0x7f4>
 800a8fe:	e66f      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a900:	2200      	movs	r2, #0
 800a902:	68c3      	ldr	r3, [r0, #12]
 800a904:	9907      	ldr	r1, [sp, #28]
 800a906:	60c2      	str	r2, [r0, #12]
 800a908:	930f      	str	r3, [sp, #60]	; 0x3c
 800a90a:	f002 fb17 	bl	800cf3c <__mcmp>
 800a90e:	2800      	cmp	r0, #0
 800a910:	da5f      	bge.n	800a9d2 <_strtod_l+0x8c6>
 800a912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a914:	4333      	orrs	r3, r6
 800a916:	d000      	beq.n	800a91a <_strtod_l+0x80e>
 800a918:	e08a      	b.n	800aa30 <_strtod_l+0x924>
 800a91a:	033b      	lsls	r3, r7, #12
 800a91c:	d000      	beq.n	800a920 <_strtod_l+0x814>
 800a91e:	e087      	b.n	800aa30 <_strtod_l+0x924>
 800a920:	22d6      	movs	r2, #214	; 0xd6
 800a922:	4b47      	ldr	r3, [pc, #284]	; (800aa40 <_strtod_l+0x934>)
 800a924:	04d2      	lsls	r2, r2, #19
 800a926:	403b      	ands	r3, r7
 800a928:	4293      	cmp	r3, r2
 800a92a:	d800      	bhi.n	800a92e <_strtod_l+0x822>
 800a92c:	e080      	b.n	800aa30 <_strtod_l+0x924>
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	930a      	str	r3, [sp, #40]	; 0x28
 800a934:	2b00      	cmp	r3, #0
 800a936:	d104      	bne.n	800a942 <_strtod_l+0x836>
 800a938:	9b06      	ldr	r3, [sp, #24]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	930a      	str	r3, [sp, #40]	; 0x28
 800a93e:	2b01      	cmp	r3, #1
 800a940:	dd76      	ble.n	800aa30 <_strtod_l+0x924>
 800a942:	9906      	ldr	r1, [sp, #24]
 800a944:	2201      	movs	r2, #1
 800a946:	9805      	ldr	r0, [sp, #20]
 800a948:	f002 fa8a 	bl	800ce60 <__lshift>
 800a94c:	9907      	ldr	r1, [sp, #28]
 800a94e:	9006      	str	r0, [sp, #24]
 800a950:	f002 faf4 	bl	800cf3c <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	dd6b      	ble.n	800aa30 <_strtod_l+0x924>
 800a958:	9908      	ldr	r1, [sp, #32]
 800a95a:	003b      	movs	r3, r7
 800a95c:	4a38      	ldr	r2, [pc, #224]	; (800aa40 <_strtod_l+0x934>)
 800a95e:	2900      	cmp	r1, #0
 800a960:	d100      	bne.n	800a964 <_strtod_l+0x858>
 800a962:	e092      	b.n	800aa8a <_strtod_l+0x97e>
 800a964:	0011      	movs	r1, r2
 800a966:	20d6      	movs	r0, #214	; 0xd6
 800a968:	4039      	ands	r1, r7
 800a96a:	04c0      	lsls	r0, r0, #19
 800a96c:	4281      	cmp	r1, r0
 800a96e:	dd00      	ble.n	800a972 <_strtod_l+0x866>
 800a970:	e08b      	b.n	800aa8a <_strtod_l+0x97e>
 800a972:	23dc      	movs	r3, #220	; 0xdc
 800a974:	049b      	lsls	r3, r3, #18
 800a976:	4299      	cmp	r1, r3
 800a978:	dc00      	bgt.n	800a97c <_strtod_l+0x870>
 800a97a:	e6a4      	b.n	800a6c6 <_strtod_l+0x5ba>
 800a97c:	0030      	movs	r0, r6
 800a97e:	0039      	movs	r1, r7
 800a980:	2200      	movs	r2, #0
 800a982:	4b30      	ldr	r3, [pc, #192]	; (800aa44 <_strtod_l+0x938>)
 800a984:	f7f7 f87a 	bl	8001a7c <__aeabi_dmul>
 800a988:	0006      	movs	r6, r0
 800a98a:	000f      	movs	r7, r1
 800a98c:	4308      	orrs	r0, r1
 800a98e:	d000      	beq.n	800a992 <_strtod_l+0x886>
 800a990:	e62f      	b.n	800a5f2 <_strtod_l+0x4e6>
 800a992:	2322      	movs	r3, #34	; 0x22
 800a994:	9a05      	ldr	r2, [sp, #20]
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	e62b      	b.n	800a5f2 <_strtod_l+0x4e6>
 800a99a:	234b      	movs	r3, #75	; 0x4b
 800a99c:	1a9a      	subs	r2, r3, r2
 800a99e:	3b4c      	subs	r3, #76	; 0x4c
 800a9a0:	4093      	lsls	r3, r2
 800a9a2:	4019      	ands	r1, r3
 800a9a4:	000f      	movs	r7, r1
 800a9a6:	e6e0      	b.n	800a76a <_strtod_l+0x65e>
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	4252      	negs	r2, r2
 800a9ac:	409a      	lsls	r2, r3
 800a9ae:	4016      	ands	r6, r2
 800a9b0:	e6db      	b.n	800a76a <_strtod_l+0x65e>
 800a9b2:	4925      	ldr	r1, [pc, #148]	; (800aa48 <_strtod_l+0x93c>)
 800a9b4:	1acb      	subs	r3, r1, r3
 800a9b6:	0001      	movs	r1, r0
 800a9b8:	4099      	lsls	r1, r3
 800a9ba:	9110      	str	r1, [sp, #64]	; 0x40
 800a9bc:	e741      	b.n	800a842 <_strtod_l+0x736>
 800a9be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9c0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a9c2:	9805      	ldr	r0, [sp, #20]
 800a9c4:	f002 fa4c 	bl	800ce60 <__lshift>
 800a9c8:	9020      	str	r0, [sp, #128]	; 0x80
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d000      	beq.n	800a9d0 <_strtod_l+0x8c4>
 800a9ce:	e76c      	b.n	800a8aa <_strtod_l+0x79e>
 800a9d0:	e606      	b.n	800a5e0 <_strtod_l+0x4d4>
 800a9d2:	970c      	str	r7, [sp, #48]	; 0x30
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d176      	bne.n	800aac6 <_strtod_l+0x9ba>
 800a9d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9da:	033b      	lsls	r3, r7, #12
 800a9dc:	0b1b      	lsrs	r3, r3, #12
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d038      	beq.n	800aa54 <_strtod_l+0x948>
 800a9e2:	4a1a      	ldr	r2, [pc, #104]	; (800aa4c <_strtod_l+0x940>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d138      	bne.n	800aa5a <_strtod_l+0x94e>
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	9b08      	ldr	r3, [sp, #32]
 800a9ec:	4252      	negs	r2, r2
 800a9ee:	0031      	movs	r1, r6
 800a9f0:	0010      	movs	r0, r2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00b      	beq.n	800aa0e <_strtod_l+0x902>
 800a9f6:	24d4      	movs	r4, #212	; 0xd4
 800a9f8:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <_strtod_l+0x934>)
 800a9fa:	0010      	movs	r0, r2
 800a9fc:	403b      	ands	r3, r7
 800a9fe:	04e4      	lsls	r4, r4, #19
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	d804      	bhi.n	800aa0e <_strtod_l+0x902>
 800aa04:	306c      	adds	r0, #108	; 0x6c
 800aa06:	0d1b      	lsrs	r3, r3, #20
 800aa08:	1ac3      	subs	r3, r0, r3
 800aa0a:	409a      	lsls	r2, r3
 800aa0c:	0010      	movs	r0, r2
 800aa0e:	4281      	cmp	r1, r0
 800aa10:	d123      	bne.n	800aa5a <_strtod_l+0x94e>
 800aa12:	4b0f      	ldr	r3, [pc, #60]	; (800aa50 <_strtod_l+0x944>)
 800aa14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d102      	bne.n	800aa20 <_strtod_l+0x914>
 800aa1a:	1c4b      	adds	r3, r1, #1
 800aa1c:	d100      	bne.n	800aa20 <_strtod_l+0x914>
 800aa1e:	e5df      	b.n	800a5e0 <_strtod_l+0x4d4>
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <_strtod_l+0x934>)
 800aa22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa24:	2600      	movs	r6, #0
 800aa26:	401a      	ands	r2, r3
 800aa28:	0013      	movs	r3, r2
 800aa2a:	2280      	movs	r2, #128	; 0x80
 800aa2c:	0352      	lsls	r2, r2, #13
 800aa2e:	189f      	adds	r7, r3, r2
 800aa30:	9b08      	ldr	r3, [sp, #32]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1a2      	bne.n	800a97c <_strtod_l+0x870>
 800aa36:	e5dc      	b.n	800a5f2 <_strtod_l+0x4e6>
 800aa38:	0800e8b8 	.word	0x0800e8b8
 800aa3c:	fffffc02 	.word	0xfffffc02
 800aa40:	7ff00000 	.word	0x7ff00000
 800aa44:	39500000 	.word	0x39500000
 800aa48:	fffffbe2 	.word	0xfffffbe2
 800aa4c:	000fffff 	.word	0x000fffff
 800aa50:	7fefffff 	.word	0x7fefffff
 800aa54:	4333      	orrs	r3, r6
 800aa56:	d100      	bne.n	800aa5a <_strtod_l+0x94e>
 800aa58:	e77e      	b.n	800a958 <_strtod_l+0x84c>
 800aa5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01d      	beq.n	800aa9c <_strtod_l+0x990>
 800aa60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa64:	4213      	tst	r3, r2
 800aa66:	d0e3      	beq.n	800aa30 <_strtod_l+0x924>
 800aa68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa6a:	0030      	movs	r0, r6
 800aa6c:	0039      	movs	r1, r7
 800aa6e:	9a08      	ldr	r2, [sp, #32]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d017      	beq.n	800aaa4 <_strtod_l+0x998>
 800aa74:	f7ff fb32 	bl	800a0dc <sulp>
 800aa78:	0002      	movs	r2, r0
 800aa7a:	000b      	movs	r3, r1
 800aa7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa80:	f7f6 f8be 	bl	8000c00 <__aeabi_dadd>
 800aa84:	0006      	movs	r6, r0
 800aa86:	000f      	movs	r7, r1
 800aa88:	e7d2      	b.n	800aa30 <_strtod_l+0x924>
 800aa8a:	2601      	movs	r6, #1
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	4a99      	ldr	r2, [pc, #612]	; (800acf4 <_strtod_l+0xbe8>)
 800aa90:	4276      	negs	r6, r6
 800aa92:	189b      	adds	r3, r3, r2
 800aa94:	4a98      	ldr	r2, [pc, #608]	; (800acf8 <_strtod_l+0xbec>)
 800aa96:	431a      	orrs	r2, r3
 800aa98:	0017      	movs	r7, r2
 800aa9a:	e7c9      	b.n	800aa30 <_strtod_l+0x924>
 800aa9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa9e:	4233      	tst	r3, r6
 800aaa0:	d0c6      	beq.n	800aa30 <_strtod_l+0x924>
 800aaa2:	e7e1      	b.n	800aa68 <_strtod_l+0x95c>
 800aaa4:	f7ff fb1a 	bl	800a0dc <sulp>
 800aaa8:	0002      	movs	r2, r0
 800aaaa:	000b      	movs	r3, r1
 800aaac:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aaae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aab0:	f7f7 fa50 	bl	8001f54 <__aeabi_dsub>
 800aab4:	2200      	movs	r2, #0
 800aab6:	2300      	movs	r3, #0
 800aab8:	0006      	movs	r6, r0
 800aaba:	000f      	movs	r7, r1
 800aabc:	f7f5 fcd0 	bl	8000460 <__aeabi_dcmpeq>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0b5      	beq.n	800aa30 <_strtod_l+0x924>
 800aac4:	e5ff      	b.n	800a6c6 <_strtod_l+0x5ba>
 800aac6:	9907      	ldr	r1, [sp, #28]
 800aac8:	9806      	ldr	r0, [sp, #24]
 800aaca:	f002 fbc3 	bl	800d254 <__ratio>
 800aace:	2380      	movs	r3, #128	; 0x80
 800aad0:	2200      	movs	r2, #0
 800aad2:	05db      	lsls	r3, r3, #23
 800aad4:	0004      	movs	r4, r0
 800aad6:	000d      	movs	r5, r1
 800aad8:	f7f5 fcd2 	bl	8000480 <__aeabi_dcmple>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d075      	beq.n	800abcc <_strtod_l+0xac0>
 800aae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d047      	beq.n	800ab76 <_strtod_l+0xa6a>
 800aae6:	2300      	movs	r3, #0
 800aae8:	4c84      	ldr	r4, [pc, #528]	; (800acfc <_strtod_l+0xbf0>)
 800aaea:	2500      	movs	r5, #0
 800aaec:	9310      	str	r3, [sp, #64]	; 0x40
 800aaee:	9411      	str	r4, [sp, #68]	; 0x44
 800aaf0:	4c82      	ldr	r4, [pc, #520]	; (800acfc <_strtod_l+0xbf0>)
 800aaf2:	4a83      	ldr	r2, [pc, #524]	; (800ad00 <_strtod_l+0xbf4>)
 800aaf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	9314      	str	r3, [sp, #80]	; 0x50
 800aafa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aafc:	4b81      	ldr	r3, [pc, #516]	; (800ad04 <_strtod_l+0xbf8>)
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d000      	beq.n	800ab04 <_strtod_l+0x9f8>
 800ab02:	e0ac      	b.n	800ac5e <_strtod_l+0xb52>
 800ab04:	4a80      	ldr	r2, [pc, #512]	; (800ad08 <_strtod_l+0xbfc>)
 800ab06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab08:	4694      	mov	ip, r2
 800ab0a:	4463      	add	r3, ip
 800ab0c:	001f      	movs	r7, r3
 800ab0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab12:	0030      	movs	r0, r6
 800ab14:	0039      	movs	r1, r7
 800ab16:	920c      	str	r2, [sp, #48]	; 0x30
 800ab18:	930d      	str	r3, [sp, #52]	; 0x34
 800ab1a:	f002 fac3 	bl	800d0a4 <__ulp>
 800ab1e:	0002      	movs	r2, r0
 800ab20:	000b      	movs	r3, r1
 800ab22:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab24:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab26:	f7f6 ffa9 	bl	8001a7c <__aeabi_dmul>
 800ab2a:	0032      	movs	r2, r6
 800ab2c:	003b      	movs	r3, r7
 800ab2e:	f7f6 f867 	bl	8000c00 <__aeabi_dadd>
 800ab32:	4a73      	ldr	r2, [pc, #460]	; (800ad00 <_strtod_l+0xbf4>)
 800ab34:	4b75      	ldr	r3, [pc, #468]	; (800ad0c <_strtod_l+0xc00>)
 800ab36:	0006      	movs	r6, r0
 800ab38:	400a      	ands	r2, r1
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d95e      	bls.n	800abfc <_strtod_l+0xaf0>
 800ab3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab40:	4b73      	ldr	r3, [pc, #460]	; (800ad10 <_strtod_l+0xc04>)
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d103      	bne.n	800ab4e <_strtod_l+0xa42>
 800ab46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab48:	3301      	adds	r3, #1
 800ab4a:	d100      	bne.n	800ab4e <_strtod_l+0xa42>
 800ab4c:	e548      	b.n	800a5e0 <_strtod_l+0x4d4>
 800ab4e:	2601      	movs	r6, #1
 800ab50:	4f6f      	ldr	r7, [pc, #444]	; (800ad10 <_strtod_l+0xc04>)
 800ab52:	4276      	negs	r6, r6
 800ab54:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ab56:	9805      	ldr	r0, [sp, #20]
 800ab58:	f001 ff64 	bl	800ca24 <_Bfree>
 800ab5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab5e:	9805      	ldr	r0, [sp, #20]
 800ab60:	f001 ff60 	bl	800ca24 <_Bfree>
 800ab64:	9907      	ldr	r1, [sp, #28]
 800ab66:	9805      	ldr	r0, [sp, #20]
 800ab68:	f001 ff5c 	bl	800ca24 <_Bfree>
 800ab6c:	9906      	ldr	r1, [sp, #24]
 800ab6e:	9805      	ldr	r0, [sp, #20]
 800ab70:	f001 ff58 	bl	800ca24 <_Bfree>
 800ab74:	e61d      	b.n	800a7b2 <_strtod_l+0x6a6>
 800ab76:	2e00      	cmp	r6, #0
 800ab78:	d11c      	bne.n	800abb4 <_strtod_l+0xaa8>
 800ab7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab7c:	031b      	lsls	r3, r3, #12
 800ab7e:	d11f      	bne.n	800abc0 <_strtod_l+0xab4>
 800ab80:	2200      	movs	r2, #0
 800ab82:	0020      	movs	r0, r4
 800ab84:	0029      	movs	r1, r5
 800ab86:	4b5d      	ldr	r3, [pc, #372]	; (800acfc <_strtod_l+0xbf0>)
 800ab88:	f7f5 fc70 	bl	800046c <__aeabi_dcmplt>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d11a      	bne.n	800abc6 <_strtod_l+0xaba>
 800ab90:	0020      	movs	r0, r4
 800ab92:	0029      	movs	r1, r5
 800ab94:	2200      	movs	r2, #0
 800ab96:	4b5f      	ldr	r3, [pc, #380]	; (800ad14 <_strtod_l+0xc08>)
 800ab98:	f7f6 ff70 	bl	8001a7c <__aeabi_dmul>
 800ab9c:	0005      	movs	r5, r0
 800ab9e:	000c      	movs	r4, r1
 800aba0:	2380      	movs	r3, #128	; 0x80
 800aba2:	061b      	lsls	r3, r3, #24
 800aba4:	18e3      	adds	r3, r4, r3
 800aba6:	951c      	str	r5, [sp, #112]	; 0x70
 800aba8:	931d      	str	r3, [sp, #116]	; 0x74
 800abaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800abac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abae:	9210      	str	r2, [sp, #64]	; 0x40
 800abb0:	9311      	str	r3, [sp, #68]	; 0x44
 800abb2:	e79e      	b.n	800aaf2 <_strtod_l+0x9e6>
 800abb4:	2e01      	cmp	r6, #1
 800abb6:	d103      	bne.n	800abc0 <_strtod_l+0xab4>
 800abb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d100      	bne.n	800abc0 <_strtod_l+0xab4>
 800abbe:	e582      	b.n	800a6c6 <_strtod_l+0x5ba>
 800abc0:	2300      	movs	r3, #0
 800abc2:	4c55      	ldr	r4, [pc, #340]	; (800ad18 <_strtod_l+0xc0c>)
 800abc4:	e791      	b.n	800aaea <_strtod_l+0x9de>
 800abc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abc8:	4c52      	ldr	r4, [pc, #328]	; (800ad14 <_strtod_l+0xc08>)
 800abca:	e7e9      	b.n	800aba0 <_strtod_l+0xa94>
 800abcc:	2200      	movs	r2, #0
 800abce:	0020      	movs	r0, r4
 800abd0:	0029      	movs	r1, r5
 800abd2:	4b50      	ldr	r3, [pc, #320]	; (800ad14 <_strtod_l+0xc08>)
 800abd4:	f7f6 ff52 	bl	8001a7c <__aeabi_dmul>
 800abd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abda:	0005      	movs	r5, r0
 800abdc:	000b      	movs	r3, r1
 800abde:	000c      	movs	r4, r1
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	d107      	bne.n	800abf4 <_strtod_l+0xae8>
 800abe4:	2280      	movs	r2, #128	; 0x80
 800abe6:	0612      	lsls	r2, r2, #24
 800abe8:	188b      	adds	r3, r1, r2
 800abea:	9016      	str	r0, [sp, #88]	; 0x58
 800abec:	9317      	str	r3, [sp, #92]	; 0x5c
 800abee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800abf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abf2:	e7dc      	b.n	800abae <_strtod_l+0xaa2>
 800abf4:	0002      	movs	r2, r0
 800abf6:	9216      	str	r2, [sp, #88]	; 0x58
 800abf8:	9317      	str	r3, [sp, #92]	; 0x5c
 800abfa:	e7f8      	b.n	800abee <_strtod_l+0xae2>
 800abfc:	23d4      	movs	r3, #212	; 0xd4
 800abfe:	049b      	lsls	r3, r3, #18
 800ac00:	18cf      	adds	r7, r1, r3
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1a5      	bne.n	800ab54 <_strtod_l+0xa48>
 800ac08:	4b3d      	ldr	r3, [pc, #244]	; (800ad00 <_strtod_l+0xbf4>)
 800ac0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac0c:	403b      	ands	r3, r7
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d1a0      	bne.n	800ab54 <_strtod_l+0xa48>
 800ac12:	0028      	movs	r0, r5
 800ac14:	0021      	movs	r1, r4
 800ac16:	f7f5 fc6f 	bl	80004f8 <__aeabi_d2lz>
 800ac1a:	f7f5 fca9 	bl	8000570 <__aeabi_l2d>
 800ac1e:	0002      	movs	r2, r0
 800ac20:	000b      	movs	r3, r1
 800ac22:	0028      	movs	r0, r5
 800ac24:	0021      	movs	r1, r4
 800ac26:	f7f7 f995 	bl	8001f54 <__aeabi_dsub>
 800ac2a:	033b      	lsls	r3, r7, #12
 800ac2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac2e:	0b1b      	lsrs	r3, r3, #12
 800ac30:	4333      	orrs	r3, r6
 800ac32:	4313      	orrs	r3, r2
 800ac34:	0004      	movs	r4, r0
 800ac36:	000d      	movs	r5, r1
 800ac38:	4a38      	ldr	r2, [pc, #224]	; (800ad1c <_strtod_l+0xc10>)
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d055      	beq.n	800acea <_strtod_l+0xbde>
 800ac3e:	4b38      	ldr	r3, [pc, #224]	; (800ad20 <_strtod_l+0xc14>)
 800ac40:	f7f5 fc14 	bl	800046c <__aeabi_dcmplt>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d000      	beq.n	800ac4a <_strtod_l+0xb3e>
 800ac48:	e4d3      	b.n	800a5f2 <_strtod_l+0x4e6>
 800ac4a:	0020      	movs	r0, r4
 800ac4c:	0029      	movs	r1, r5
 800ac4e:	4a35      	ldr	r2, [pc, #212]	; (800ad24 <_strtod_l+0xc18>)
 800ac50:	4b30      	ldr	r3, [pc, #192]	; (800ad14 <_strtod_l+0xc08>)
 800ac52:	f7f5 fc1f 	bl	8000494 <__aeabi_dcmpgt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d100      	bne.n	800ac5c <_strtod_l+0xb50>
 800ac5a:	e77b      	b.n	800ab54 <_strtod_l+0xa48>
 800ac5c:	e4c9      	b.n	800a5f2 <_strtod_l+0x4e6>
 800ac5e:	9b08      	ldr	r3, [sp, #32]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d02b      	beq.n	800acbc <_strtod_l+0xbb0>
 800ac64:	23d4      	movs	r3, #212	; 0xd4
 800ac66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac68:	04db      	lsls	r3, r3, #19
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d826      	bhi.n	800acbc <_strtod_l+0xbb0>
 800ac6e:	0028      	movs	r0, r5
 800ac70:	0021      	movs	r1, r4
 800ac72:	4a2d      	ldr	r2, [pc, #180]	; (800ad28 <_strtod_l+0xc1c>)
 800ac74:	4b2d      	ldr	r3, [pc, #180]	; (800ad2c <_strtod_l+0xc20>)
 800ac76:	f7f5 fc03 	bl	8000480 <__aeabi_dcmple>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d017      	beq.n	800acae <_strtod_l+0xba2>
 800ac7e:	0028      	movs	r0, r5
 800ac80:	0021      	movs	r1, r4
 800ac82:	f7f5 fc1b 	bl	80004bc <__aeabi_d2uiz>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d100      	bne.n	800ac8c <_strtod_l+0xb80>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f7f7 fd78 	bl	8002780 <__aeabi_ui2d>
 800ac90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac92:	0005      	movs	r5, r0
 800ac94:	000b      	movs	r3, r1
 800ac96:	000c      	movs	r4, r1
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	d122      	bne.n	800ace2 <_strtod_l+0xbd6>
 800ac9c:	2280      	movs	r2, #128	; 0x80
 800ac9e:	0612      	lsls	r2, r2, #24
 800aca0:	188b      	adds	r3, r1, r2
 800aca2:	9018      	str	r0, [sp, #96]	; 0x60
 800aca4:	9319      	str	r3, [sp, #100]	; 0x64
 800aca6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aca8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acaa:	9210      	str	r2, [sp, #64]	; 0x40
 800acac:	9311      	str	r3, [sp, #68]	; 0x44
 800acae:	22d6      	movs	r2, #214	; 0xd6
 800acb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acb2:	04d2      	lsls	r2, r2, #19
 800acb4:	189b      	adds	r3, r3, r2
 800acb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acb8:	1a9b      	subs	r3, r3, r2
 800acba:	9311      	str	r3, [sp, #68]	; 0x44
 800acbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800acbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800acc0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800acc2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800acc4:	f002 f9ee 	bl	800d0a4 <__ulp>
 800acc8:	0002      	movs	r2, r0
 800acca:	000b      	movs	r3, r1
 800accc:	0030      	movs	r0, r6
 800acce:	0039      	movs	r1, r7
 800acd0:	f7f6 fed4 	bl	8001a7c <__aeabi_dmul>
 800acd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acd8:	f7f5 ff92 	bl	8000c00 <__aeabi_dadd>
 800acdc:	0006      	movs	r6, r0
 800acde:	000f      	movs	r7, r1
 800ace0:	e78f      	b.n	800ac02 <_strtod_l+0xaf6>
 800ace2:	0002      	movs	r2, r0
 800ace4:	9218      	str	r2, [sp, #96]	; 0x60
 800ace6:	9319      	str	r3, [sp, #100]	; 0x64
 800ace8:	e7dd      	b.n	800aca6 <_strtod_l+0xb9a>
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <_strtod_l+0xc24>)
 800acec:	f7f5 fbbe 	bl	800046c <__aeabi_dcmplt>
 800acf0:	e7b1      	b.n	800ac56 <_strtod_l+0xb4a>
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	fff00000 	.word	0xfff00000
 800acf8:	000fffff 	.word	0x000fffff
 800acfc:	3ff00000 	.word	0x3ff00000
 800ad00:	7ff00000 	.word	0x7ff00000
 800ad04:	7fe00000 	.word	0x7fe00000
 800ad08:	fcb00000 	.word	0xfcb00000
 800ad0c:	7c9fffff 	.word	0x7c9fffff
 800ad10:	7fefffff 	.word	0x7fefffff
 800ad14:	3fe00000 	.word	0x3fe00000
 800ad18:	bff00000 	.word	0xbff00000
 800ad1c:	94a03595 	.word	0x94a03595
 800ad20:	3fdfffff 	.word	0x3fdfffff
 800ad24:	35afe535 	.word	0x35afe535
 800ad28:	ffc00000 	.word	0xffc00000
 800ad2c:	41dfffff 	.word	0x41dfffff
 800ad30:	3fcfffff 	.word	0x3fcfffff

0800ad34 <_strtod_r>:
 800ad34:	b510      	push	{r4, lr}
 800ad36:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <_strtod_r+0xc>)
 800ad38:	f7ff f9e8 	bl	800a10c <_strtod_l>
 800ad3c:	bd10      	pop	{r4, pc}
 800ad3e:	46c0      	nop			; (mov r8, r8)
 800ad40:	200000a0 	.word	0x200000a0

0800ad44 <strtod>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	000a      	movs	r2, r1
 800ad48:	0001      	movs	r1, r0
 800ad4a:	4803      	ldr	r0, [pc, #12]	; (800ad58 <strtod+0x14>)
 800ad4c:	4b03      	ldr	r3, [pc, #12]	; (800ad5c <strtod+0x18>)
 800ad4e:	6800      	ldr	r0, [r0, #0]
 800ad50:	f7ff f9dc 	bl	800a10c <_strtod_l>
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	46c0      	nop			; (mov r8, r8)
 800ad58:	20000038 	.word	0x20000038
 800ad5c:	200000a0 	.word	0x200000a0

0800ad60 <_strtol_l.constprop.0>:
 800ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad62:	b087      	sub	sp, #28
 800ad64:	001e      	movs	r6, r3
 800ad66:	9005      	str	r0, [sp, #20]
 800ad68:	9101      	str	r1, [sp, #4]
 800ad6a:	9202      	str	r2, [sp, #8]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d045      	beq.n	800adfc <_strtol_l.constprop.0+0x9c>
 800ad70:	000b      	movs	r3, r1
 800ad72:	2e24      	cmp	r6, #36	; 0x24
 800ad74:	d842      	bhi.n	800adfc <_strtol_l.constprop.0+0x9c>
 800ad76:	4a3f      	ldr	r2, [pc, #252]	; (800ae74 <_strtol_l.constprop.0+0x114>)
 800ad78:	2108      	movs	r1, #8
 800ad7a:	4694      	mov	ip, r2
 800ad7c:	001a      	movs	r2, r3
 800ad7e:	4660      	mov	r0, ip
 800ad80:	7814      	ldrb	r4, [r2, #0]
 800ad82:	3301      	adds	r3, #1
 800ad84:	5d00      	ldrb	r0, [r0, r4]
 800ad86:	001d      	movs	r5, r3
 800ad88:	0007      	movs	r7, r0
 800ad8a:	400f      	ands	r7, r1
 800ad8c:	4208      	tst	r0, r1
 800ad8e:	d1f5      	bne.n	800ad7c <_strtol_l.constprop.0+0x1c>
 800ad90:	2c2d      	cmp	r4, #45	; 0x2d
 800ad92:	d13a      	bne.n	800ae0a <_strtol_l.constprop.0+0xaa>
 800ad94:	2701      	movs	r7, #1
 800ad96:	781c      	ldrb	r4, [r3, #0]
 800ad98:	1c95      	adds	r5, r2, #2
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	d065      	beq.n	800ae6a <_strtol_l.constprop.0+0x10a>
 800ad9e:	2e10      	cmp	r6, #16
 800ada0:	d109      	bne.n	800adb6 <_strtol_l.constprop.0+0x56>
 800ada2:	2c30      	cmp	r4, #48	; 0x30
 800ada4:	d107      	bne.n	800adb6 <_strtol_l.constprop.0+0x56>
 800ada6:	2220      	movs	r2, #32
 800ada8:	782b      	ldrb	r3, [r5, #0]
 800adaa:	4393      	bics	r3, r2
 800adac:	2b58      	cmp	r3, #88	; 0x58
 800adae:	d157      	bne.n	800ae60 <_strtol_l.constprop.0+0x100>
 800adb0:	2610      	movs	r6, #16
 800adb2:	786c      	ldrb	r4, [r5, #1]
 800adb4:	3502      	adds	r5, #2
 800adb6:	4b30      	ldr	r3, [pc, #192]	; (800ae78 <_strtol_l.constprop.0+0x118>)
 800adb8:	0031      	movs	r1, r6
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	0018      	movs	r0, r3
 800adbe:	9303      	str	r3, [sp, #12]
 800adc0:	f7f5 fa4e 	bl	8000260 <__aeabi_uidivmod>
 800adc4:	2300      	movs	r3, #0
 800adc6:	2201      	movs	r2, #1
 800adc8:	4684      	mov	ip, r0
 800adca:	0018      	movs	r0, r3
 800adcc:	9104      	str	r1, [sp, #16]
 800adce:	4252      	negs	r2, r2
 800add0:	0021      	movs	r1, r4
 800add2:	3930      	subs	r1, #48	; 0x30
 800add4:	2909      	cmp	r1, #9
 800add6:	d81d      	bhi.n	800ae14 <_strtol_l.constprop.0+0xb4>
 800add8:	000c      	movs	r4, r1
 800adda:	42a6      	cmp	r6, r4
 800addc:	dd28      	ble.n	800ae30 <_strtol_l.constprop.0+0xd0>
 800adde:	2b00      	cmp	r3, #0
 800ade0:	db24      	blt.n	800ae2c <_strtol_l.constprop.0+0xcc>
 800ade2:	0013      	movs	r3, r2
 800ade4:	4584      	cmp	ip, r0
 800ade6:	d306      	bcc.n	800adf6 <_strtol_l.constprop.0+0x96>
 800ade8:	d102      	bne.n	800adf0 <_strtol_l.constprop.0+0x90>
 800adea:	9904      	ldr	r1, [sp, #16]
 800adec:	42a1      	cmp	r1, r4
 800adee:	db02      	blt.n	800adf6 <_strtol_l.constprop.0+0x96>
 800adf0:	2301      	movs	r3, #1
 800adf2:	4370      	muls	r0, r6
 800adf4:	1820      	adds	r0, r4, r0
 800adf6:	782c      	ldrb	r4, [r5, #0]
 800adf8:	3501      	adds	r5, #1
 800adfa:	e7e9      	b.n	800add0 <_strtol_l.constprop.0+0x70>
 800adfc:	f7fe f98c 	bl	8009118 <__errno>
 800ae00:	2316      	movs	r3, #22
 800ae02:	6003      	str	r3, [r0, #0]
 800ae04:	2000      	movs	r0, #0
 800ae06:	b007      	add	sp, #28
 800ae08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae0a:	2c2b      	cmp	r4, #43	; 0x2b
 800ae0c:	d1c5      	bne.n	800ad9a <_strtol_l.constprop.0+0x3a>
 800ae0e:	781c      	ldrb	r4, [r3, #0]
 800ae10:	1c95      	adds	r5, r2, #2
 800ae12:	e7c2      	b.n	800ad9a <_strtol_l.constprop.0+0x3a>
 800ae14:	0021      	movs	r1, r4
 800ae16:	3941      	subs	r1, #65	; 0x41
 800ae18:	2919      	cmp	r1, #25
 800ae1a:	d801      	bhi.n	800ae20 <_strtol_l.constprop.0+0xc0>
 800ae1c:	3c37      	subs	r4, #55	; 0x37
 800ae1e:	e7dc      	b.n	800adda <_strtol_l.constprop.0+0x7a>
 800ae20:	0021      	movs	r1, r4
 800ae22:	3961      	subs	r1, #97	; 0x61
 800ae24:	2919      	cmp	r1, #25
 800ae26:	d803      	bhi.n	800ae30 <_strtol_l.constprop.0+0xd0>
 800ae28:	3c57      	subs	r4, #87	; 0x57
 800ae2a:	e7d6      	b.n	800adda <_strtol_l.constprop.0+0x7a>
 800ae2c:	0013      	movs	r3, r2
 800ae2e:	e7e2      	b.n	800adf6 <_strtol_l.constprop.0+0x96>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	da09      	bge.n	800ae48 <_strtol_l.constprop.0+0xe8>
 800ae34:	2322      	movs	r3, #34	; 0x22
 800ae36:	9a05      	ldr	r2, [sp, #20]
 800ae38:	9803      	ldr	r0, [sp, #12]
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0e1      	beq.n	800ae06 <_strtol_l.constprop.0+0xa6>
 800ae42:	1e6b      	subs	r3, r5, #1
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	e007      	b.n	800ae58 <_strtol_l.constprop.0+0xf8>
 800ae48:	2f00      	cmp	r7, #0
 800ae4a:	d000      	beq.n	800ae4e <_strtol_l.constprop.0+0xee>
 800ae4c:	4240      	negs	r0, r0
 800ae4e:	9a02      	ldr	r2, [sp, #8]
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	d0d8      	beq.n	800ae06 <_strtol_l.constprop.0+0xa6>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1f4      	bne.n	800ae42 <_strtol_l.constprop.0+0xe2>
 800ae58:	9b02      	ldr	r3, [sp, #8]
 800ae5a:	9a01      	ldr	r2, [sp, #4]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	e7d2      	b.n	800ae06 <_strtol_l.constprop.0+0xa6>
 800ae60:	2430      	movs	r4, #48	; 0x30
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	d1a7      	bne.n	800adb6 <_strtol_l.constprop.0+0x56>
 800ae66:	3608      	adds	r6, #8
 800ae68:	e7a5      	b.n	800adb6 <_strtol_l.constprop.0+0x56>
 800ae6a:	2c30      	cmp	r4, #48	; 0x30
 800ae6c:	d09b      	beq.n	800ada6 <_strtol_l.constprop.0+0x46>
 800ae6e:	260a      	movs	r6, #10
 800ae70:	e7a1      	b.n	800adb6 <_strtol_l.constprop.0+0x56>
 800ae72:	46c0      	nop			; (mov r8, r8)
 800ae74:	0800e8e1 	.word	0x0800e8e1
 800ae78:	7fffffff 	.word	0x7fffffff

0800ae7c <_strtol_r>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	f7ff ff6f 	bl	800ad60 <_strtol_l.constprop.0>
 800ae82:	bd10      	pop	{r4, pc}

0800ae84 <__swbuf_r>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	0005      	movs	r5, r0
 800ae88:	000e      	movs	r6, r1
 800ae8a:	0014      	movs	r4, r2
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d004      	beq.n	800ae9a <__swbuf_r+0x16>
 800ae90:	6983      	ldr	r3, [r0, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <__swbuf_r+0x16>
 800ae96:	f001 f8bd 	bl	800c014 <__sinit>
 800ae9a:	4b22      	ldr	r3, [pc, #136]	; (800af24 <__swbuf_r+0xa0>)
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d12e      	bne.n	800aefe <__swbuf_r+0x7a>
 800aea0:	686c      	ldr	r4, [r5, #4]
 800aea2:	69a3      	ldr	r3, [r4, #24]
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	071b      	lsls	r3, r3, #28
 800aeaa:	d532      	bpl.n	800af12 <__swbuf_r+0x8e>
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d02f      	beq.n	800af12 <__swbuf_r+0x8e>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	6922      	ldr	r2, [r4, #16]
 800aeb6:	b2f7      	uxtb	r7, r6
 800aeb8:	1a98      	subs	r0, r3, r2
 800aeba:	6963      	ldr	r3, [r4, #20]
 800aebc:	b2f6      	uxtb	r6, r6
 800aebe:	4283      	cmp	r3, r0
 800aec0:	dc05      	bgt.n	800aece <__swbuf_r+0x4a>
 800aec2:	0021      	movs	r1, r4
 800aec4:	0028      	movs	r0, r5
 800aec6:	f001 f803 	bl	800bed0 <_fflush_r>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d127      	bne.n	800af1e <__swbuf_r+0x9a>
 800aece:	68a3      	ldr	r3, [r4, #8]
 800aed0:	3001      	adds	r0, #1
 800aed2:	3b01      	subs	r3, #1
 800aed4:	60a3      	str	r3, [r4, #8]
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	6022      	str	r2, [r4, #0]
 800aedc:	701f      	strb	r7, [r3, #0]
 800aede:	6963      	ldr	r3, [r4, #20]
 800aee0:	4283      	cmp	r3, r0
 800aee2:	d004      	beq.n	800aeee <__swbuf_r+0x6a>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	07db      	lsls	r3, r3, #31
 800aee8:	d507      	bpl.n	800aefa <__swbuf_r+0x76>
 800aeea:	2e0a      	cmp	r6, #10
 800aeec:	d105      	bne.n	800aefa <__swbuf_r+0x76>
 800aeee:	0021      	movs	r1, r4
 800aef0:	0028      	movs	r0, r5
 800aef2:	f000 ffed 	bl	800bed0 <_fflush_r>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d111      	bne.n	800af1e <__swbuf_r+0x9a>
 800aefa:	0030      	movs	r0, r6
 800aefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aefe:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <__swbuf_r+0xa4>)
 800af00:	429c      	cmp	r4, r3
 800af02:	d101      	bne.n	800af08 <__swbuf_r+0x84>
 800af04:	68ac      	ldr	r4, [r5, #8]
 800af06:	e7cc      	b.n	800aea2 <__swbuf_r+0x1e>
 800af08:	4b08      	ldr	r3, [pc, #32]	; (800af2c <__swbuf_r+0xa8>)
 800af0a:	429c      	cmp	r4, r3
 800af0c:	d1c9      	bne.n	800aea2 <__swbuf_r+0x1e>
 800af0e:	68ec      	ldr	r4, [r5, #12]
 800af10:	e7c7      	b.n	800aea2 <__swbuf_r+0x1e>
 800af12:	0021      	movs	r1, r4
 800af14:	0028      	movs	r0, r5
 800af16:	f000 f81f 	bl	800af58 <__swsetup_r>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d0c9      	beq.n	800aeb2 <__swbuf_r+0x2e>
 800af1e:	2601      	movs	r6, #1
 800af20:	4276      	negs	r6, r6
 800af22:	e7ea      	b.n	800aefa <__swbuf_r+0x76>
 800af24:	0800ea94 	.word	0x0800ea94
 800af28:	0800eab4 	.word	0x0800eab4
 800af2c:	0800ea74 	.word	0x0800ea74

0800af30 <_write_r>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	0004      	movs	r4, r0
 800af34:	0008      	movs	r0, r1
 800af36:	0011      	movs	r1, r2
 800af38:	001a      	movs	r2, r3
 800af3a:	2300      	movs	r3, #0
 800af3c:	4d05      	ldr	r5, [pc, #20]	; (800af54 <_write_r+0x24>)
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f8 ff63 	bl	8003e0a <_write>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d103      	bne.n	800af50 <_write_r+0x20>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d000      	beq.n	800af50 <_write_r+0x20>
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	bd70      	pop	{r4, r5, r6, pc}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	20000658 	.word	0x20000658

0800af58 <__swsetup_r>:
 800af58:	4b37      	ldr	r3, [pc, #220]	; (800b038 <__swsetup_r+0xe0>)
 800af5a:	b570      	push	{r4, r5, r6, lr}
 800af5c:	681d      	ldr	r5, [r3, #0]
 800af5e:	0006      	movs	r6, r0
 800af60:	000c      	movs	r4, r1
 800af62:	2d00      	cmp	r5, #0
 800af64:	d005      	beq.n	800af72 <__swsetup_r+0x1a>
 800af66:	69ab      	ldr	r3, [r5, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <__swsetup_r+0x1a>
 800af6c:	0028      	movs	r0, r5
 800af6e:	f001 f851 	bl	800c014 <__sinit>
 800af72:	4b32      	ldr	r3, [pc, #200]	; (800b03c <__swsetup_r+0xe4>)
 800af74:	429c      	cmp	r4, r3
 800af76:	d10f      	bne.n	800af98 <__swsetup_r+0x40>
 800af78:	686c      	ldr	r4, [r5, #4]
 800af7a:	230c      	movs	r3, #12
 800af7c:	5ee2      	ldrsh	r2, [r4, r3]
 800af7e:	b293      	uxth	r3, r2
 800af80:	0711      	lsls	r1, r2, #28
 800af82:	d42d      	bmi.n	800afe0 <__swsetup_r+0x88>
 800af84:	06d9      	lsls	r1, r3, #27
 800af86:	d411      	bmi.n	800afac <__swsetup_r+0x54>
 800af88:	2309      	movs	r3, #9
 800af8a:	2001      	movs	r0, #1
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	3337      	adds	r3, #55	; 0x37
 800af90:	4313      	orrs	r3, r2
 800af92:	81a3      	strh	r3, [r4, #12]
 800af94:	4240      	negs	r0, r0
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	4b29      	ldr	r3, [pc, #164]	; (800b040 <__swsetup_r+0xe8>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d101      	bne.n	800afa2 <__swsetup_r+0x4a>
 800af9e:	68ac      	ldr	r4, [r5, #8]
 800afa0:	e7eb      	b.n	800af7a <__swsetup_r+0x22>
 800afa2:	4b28      	ldr	r3, [pc, #160]	; (800b044 <__swsetup_r+0xec>)
 800afa4:	429c      	cmp	r4, r3
 800afa6:	d1e8      	bne.n	800af7a <__swsetup_r+0x22>
 800afa8:	68ec      	ldr	r4, [r5, #12]
 800afaa:	e7e6      	b.n	800af7a <__swsetup_r+0x22>
 800afac:	075b      	lsls	r3, r3, #29
 800afae:	d513      	bpl.n	800afd8 <__swsetup_r+0x80>
 800afb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afb2:	2900      	cmp	r1, #0
 800afb4:	d008      	beq.n	800afc8 <__swsetup_r+0x70>
 800afb6:	0023      	movs	r3, r4
 800afb8:	3344      	adds	r3, #68	; 0x44
 800afba:	4299      	cmp	r1, r3
 800afbc:	d002      	beq.n	800afc4 <__swsetup_r+0x6c>
 800afbe:	0030      	movs	r0, r6
 800afc0:	f002 f9e2 	bl	800d388 <_free_r>
 800afc4:	2300      	movs	r3, #0
 800afc6:	6363      	str	r3, [r4, #52]	; 0x34
 800afc8:	2224      	movs	r2, #36	; 0x24
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	4393      	bics	r3, r2
 800afce:	81a3      	strh	r3, [r4, #12]
 800afd0:	2300      	movs	r3, #0
 800afd2:	6063      	str	r3, [r4, #4]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	6023      	str	r3, [r4, #0]
 800afd8:	2308      	movs	r3, #8
 800afda:	89a2      	ldrh	r2, [r4, #12]
 800afdc:	4313      	orrs	r3, r2
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10b      	bne.n	800affe <__swsetup_r+0xa6>
 800afe6:	21a0      	movs	r1, #160	; 0xa0
 800afe8:	2280      	movs	r2, #128	; 0x80
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	0089      	lsls	r1, r1, #2
 800afee:	0092      	lsls	r2, r2, #2
 800aff0:	400b      	ands	r3, r1
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d003      	beq.n	800affe <__swsetup_r+0xa6>
 800aff6:	0021      	movs	r1, r4
 800aff8:	0030      	movs	r0, r6
 800affa:	f001 fc63 	bl	800c8c4 <__smakebuf_r>
 800affe:	220c      	movs	r2, #12
 800b000:	5ea3      	ldrsh	r3, [r4, r2]
 800b002:	2001      	movs	r0, #1
 800b004:	001a      	movs	r2, r3
 800b006:	b299      	uxth	r1, r3
 800b008:	4002      	ands	r2, r0
 800b00a:	4203      	tst	r3, r0
 800b00c:	d00f      	beq.n	800b02e <__swsetup_r+0xd6>
 800b00e:	2200      	movs	r2, #0
 800b010:	60a2      	str	r2, [r4, #8]
 800b012:	6962      	ldr	r2, [r4, #20]
 800b014:	4252      	negs	r2, r2
 800b016:	61a2      	str	r2, [r4, #24]
 800b018:	2000      	movs	r0, #0
 800b01a:	6922      	ldr	r2, [r4, #16]
 800b01c:	4282      	cmp	r2, r0
 800b01e:	d1ba      	bne.n	800af96 <__swsetup_r+0x3e>
 800b020:	060a      	lsls	r2, r1, #24
 800b022:	d5b8      	bpl.n	800af96 <__swsetup_r+0x3e>
 800b024:	2240      	movs	r2, #64	; 0x40
 800b026:	4313      	orrs	r3, r2
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	3801      	subs	r0, #1
 800b02c:	e7b3      	b.n	800af96 <__swsetup_r+0x3e>
 800b02e:	0788      	lsls	r0, r1, #30
 800b030:	d400      	bmi.n	800b034 <__swsetup_r+0xdc>
 800b032:	6962      	ldr	r2, [r4, #20]
 800b034:	60a2      	str	r2, [r4, #8]
 800b036:	e7ef      	b.n	800b018 <__swsetup_r+0xc0>
 800b038:	20000038 	.word	0x20000038
 800b03c:	0800ea94 	.word	0x0800ea94
 800b040:	0800eab4 	.word	0x0800eab4
 800b044:	0800ea74 	.word	0x0800ea74

0800b048 <_close_r>:
 800b048:	2300      	movs	r3, #0
 800b04a:	b570      	push	{r4, r5, r6, lr}
 800b04c:	4d06      	ldr	r5, [pc, #24]	; (800b068 <_close_r+0x20>)
 800b04e:	0004      	movs	r4, r0
 800b050:	0008      	movs	r0, r1
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	f7f8 fef5 	bl	8003e42 <_close>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d103      	bne.n	800b064 <_close_r+0x1c>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d000      	beq.n	800b064 <_close_r+0x1c>
 800b062:	6023      	str	r3, [r4, #0]
 800b064:	bd70      	pop	{r4, r5, r6, pc}
 800b066:	46c0      	nop			; (mov r8, r8)
 800b068:	20000658 	.word	0x20000658

0800b06c <quorem>:
 800b06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06e:	0006      	movs	r6, r0
 800b070:	690b      	ldr	r3, [r1, #16]
 800b072:	6932      	ldr	r2, [r6, #16]
 800b074:	b087      	sub	sp, #28
 800b076:	2000      	movs	r0, #0
 800b078:	9103      	str	r1, [sp, #12]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	db65      	blt.n	800b14a <quorem+0xde>
 800b07e:	3b01      	subs	r3, #1
 800b080:	009c      	lsls	r4, r3, #2
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	000b      	movs	r3, r1
 800b086:	3314      	adds	r3, #20
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	191b      	adds	r3, r3, r4
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	0033      	movs	r3, r6
 800b090:	3314      	adds	r3, #20
 800b092:	9302      	str	r3, [sp, #8]
 800b094:	191c      	adds	r4, r3, r4
 800b096:	9b04      	ldr	r3, [sp, #16]
 800b098:	6827      	ldr	r7, [r4, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	0038      	movs	r0, r7
 800b09e:	1c5d      	adds	r5, r3, #1
 800b0a0:	0029      	movs	r1, r5
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	f7f5 f856 	bl	8000154 <__udivsi3>
 800b0a8:	9001      	str	r0, [sp, #4]
 800b0aa:	42af      	cmp	r7, r5
 800b0ac:	d324      	bcc.n	800b0f8 <quorem+0x8c>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	46ac      	mov	ip, r5
 800b0b2:	9802      	ldr	r0, [sp, #8]
 800b0b4:	9f05      	ldr	r7, [sp, #20]
 800b0b6:	cf08      	ldmia	r7!, {r3}
 800b0b8:	9a01      	ldr	r2, [sp, #4]
 800b0ba:	b299      	uxth	r1, r3
 800b0bc:	4351      	muls	r1, r2
 800b0be:	0c1b      	lsrs	r3, r3, #16
 800b0c0:	4353      	muls	r3, r2
 800b0c2:	1949      	adds	r1, r1, r5
 800b0c4:	0c0a      	lsrs	r2, r1, #16
 800b0c6:	189b      	adds	r3, r3, r2
 800b0c8:	6802      	ldr	r2, [r0, #0]
 800b0ca:	b289      	uxth	r1, r1
 800b0cc:	b292      	uxth	r2, r2
 800b0ce:	4462      	add	r2, ip
 800b0d0:	1a52      	subs	r2, r2, r1
 800b0d2:	6801      	ldr	r1, [r0, #0]
 800b0d4:	0c1d      	lsrs	r5, r3, #16
 800b0d6:	0c09      	lsrs	r1, r1, #16
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	1acb      	subs	r3, r1, r3
 800b0dc:	1411      	asrs	r1, r2, #16
 800b0de:	185b      	adds	r3, r3, r1
 800b0e0:	1419      	asrs	r1, r3, #16
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	431a      	orrs	r2, r3
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	468c      	mov	ip, r1
 800b0ec:	c004      	stmia	r0!, {r2}
 800b0ee:	42bb      	cmp	r3, r7
 800b0f0:	d2e1      	bcs.n	800b0b6 <quorem+0x4a>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d030      	beq.n	800b15a <quorem+0xee>
 800b0f8:	0030      	movs	r0, r6
 800b0fa:	9903      	ldr	r1, [sp, #12]
 800b0fc:	f001 ff1e 	bl	800cf3c <__mcmp>
 800b100:	2800      	cmp	r0, #0
 800b102:	db21      	blt.n	800b148 <quorem+0xdc>
 800b104:	0030      	movs	r0, r6
 800b106:	2400      	movs	r4, #0
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	9903      	ldr	r1, [sp, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	3014      	adds	r0, #20
 800b112:	3114      	adds	r1, #20
 800b114:	6803      	ldr	r3, [r0, #0]
 800b116:	c920      	ldmia	r1!, {r5}
 800b118:	b29a      	uxth	r2, r3
 800b11a:	1914      	adds	r4, r2, r4
 800b11c:	b2aa      	uxth	r2, r5
 800b11e:	1aa2      	subs	r2, r4, r2
 800b120:	0c1b      	lsrs	r3, r3, #16
 800b122:	0c2d      	lsrs	r5, r5, #16
 800b124:	1414      	asrs	r4, r2, #16
 800b126:	1b5b      	subs	r3, r3, r5
 800b128:	191b      	adds	r3, r3, r4
 800b12a:	141c      	asrs	r4, r3, #16
 800b12c:	b292      	uxth	r2, r2
 800b12e:	041b      	lsls	r3, r3, #16
 800b130:	4313      	orrs	r3, r2
 800b132:	c008      	stmia	r0!, {r3}
 800b134:	9b04      	ldr	r3, [sp, #16]
 800b136:	428b      	cmp	r3, r1
 800b138:	d2ec      	bcs.n	800b114 <quorem+0xa8>
 800b13a:	9b00      	ldr	r3, [sp, #0]
 800b13c:	9a02      	ldr	r2, [sp, #8]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	18d3      	adds	r3, r2, r3
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	2a00      	cmp	r2, #0
 800b146:	d015      	beq.n	800b174 <quorem+0x108>
 800b148:	9801      	ldr	r0, [sp, #4]
 800b14a:	b007      	add	sp, #28
 800b14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <quorem+0xf6>
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	3b01      	subs	r3, #1
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	9b02      	ldr	r3, [sp, #8]
 800b15c:	3c04      	subs	r4, #4
 800b15e:	42a3      	cmp	r3, r4
 800b160:	d3f5      	bcc.n	800b14e <quorem+0xe2>
 800b162:	9b00      	ldr	r3, [sp, #0]
 800b164:	6133      	str	r3, [r6, #16]
 800b166:	e7c7      	b.n	800b0f8 <quorem+0x8c>
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	d106      	bne.n	800b17c <quorem+0x110>
 800b16e:	9a00      	ldr	r2, [sp, #0]
 800b170:	3a01      	subs	r2, #1
 800b172:	9200      	str	r2, [sp, #0]
 800b174:	9a02      	ldr	r2, [sp, #8]
 800b176:	3b04      	subs	r3, #4
 800b178:	429a      	cmp	r2, r3
 800b17a:	d3f5      	bcc.n	800b168 <quorem+0xfc>
 800b17c:	9b00      	ldr	r3, [sp, #0]
 800b17e:	6133      	str	r3, [r6, #16]
 800b180:	e7e2      	b.n	800b148 <quorem+0xdc>
	...

0800b184 <_dtoa_r>:
 800b184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b186:	b09d      	sub	sp, #116	; 0x74
 800b188:	9202      	str	r2, [sp, #8]
 800b18a:	9303      	str	r3, [sp, #12]
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	9c03      	ldr	r4, [sp, #12]
 800b190:	9308      	str	r3, [sp, #32]
 800b192:	9409      	str	r4, [sp, #36]	; 0x24
 800b194:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b196:	0007      	movs	r7, r0
 800b198:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d10e      	bne.n	800b1bc <_dtoa_r+0x38>
 800b19e:	2010      	movs	r0, #16
 800b1a0:	f001 fbd4 	bl	800c94c <malloc>
 800b1a4:	1e02      	subs	r2, r0, #0
 800b1a6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1a8:	d104      	bne.n	800b1b4 <_dtoa_r+0x30>
 800b1aa:	21ea      	movs	r1, #234	; 0xea
 800b1ac:	4bc7      	ldr	r3, [pc, #796]	; (800b4cc <_dtoa_r+0x348>)
 800b1ae:	48c8      	ldr	r0, [pc, #800]	; (800b4d0 <_dtoa_r+0x34c>)
 800b1b0:	f003 f920 	bl	800e3f4 <__assert_func>
 800b1b4:	6044      	str	r4, [r0, #4]
 800b1b6:	6084      	str	r4, [r0, #8]
 800b1b8:	6004      	str	r4, [r0, #0]
 800b1ba:	60c4      	str	r4, [r0, #12]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	6819      	ldr	r1, [r3, #0]
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	d00a      	beq.n	800b1da <_dtoa_r+0x56>
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4093      	lsls	r3, r2
 800b1ca:	604a      	str	r2, [r1, #4]
 800b1cc:	608b      	str	r3, [r1, #8]
 800b1ce:	0038      	movs	r0, r7
 800b1d0:	f001 fc28 	bl	800ca24 <_Bfree>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da20      	bge.n	800b222 <_dtoa_r+0x9e>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	085b      	lsrs	r3, r3, #1
 800b1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b1ee:	4bb9      	ldr	r3, [pc, #740]	; (800b4d4 <_dtoa_r+0x350>)
 800b1f0:	4ab8      	ldr	r2, [pc, #736]	; (800b4d4 <_dtoa_r+0x350>)
 800b1f2:	402b      	ands	r3, r5
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d117      	bne.n	800b228 <_dtoa_r+0xa4>
 800b1f8:	4bb7      	ldr	r3, [pc, #732]	; (800b4d8 <_dtoa_r+0x354>)
 800b1fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1fc:	0328      	lsls	r0, r5, #12
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	9b02      	ldr	r3, [sp, #8]
 800b202:	0b00      	lsrs	r0, r0, #12
 800b204:	4318      	orrs	r0, r3
 800b206:	d101      	bne.n	800b20c <_dtoa_r+0x88>
 800b208:	f000 fdbf 	bl	800bd8a <_dtoa_r+0xc06>
 800b20c:	48b3      	ldr	r0, [pc, #716]	; (800b4dc <_dtoa_r+0x358>)
 800b20e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b210:	9006      	str	r0, [sp, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <_dtoa_r+0x98>
 800b216:	4bb2      	ldr	r3, [pc, #712]	; (800b4e0 <_dtoa_r+0x35c>)
 800b218:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	9806      	ldr	r0, [sp, #24]
 800b21e:	b01d      	add	sp, #116	; 0x74
 800b220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b222:	2300      	movs	r3, #0
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	e7e1      	b.n	800b1ec <_dtoa_r+0x68>
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b22c:	9312      	str	r3, [sp, #72]	; 0x48
 800b22e:	9413      	str	r4, [sp, #76]	; 0x4c
 800b230:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b232:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b234:	2200      	movs	r2, #0
 800b236:	2300      	movs	r3, #0
 800b238:	f7f5 f912 	bl	8000460 <__aeabi_dcmpeq>
 800b23c:	1e04      	subs	r4, r0, #0
 800b23e:	d009      	beq.n	800b254 <_dtoa_r+0xd0>
 800b240:	2301      	movs	r3, #1
 800b242:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	4ba7      	ldr	r3, [pc, #668]	; (800b4e4 <_dtoa_r+0x360>)
 800b248:	9306      	str	r3, [sp, #24]
 800b24a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0e5      	beq.n	800b21c <_dtoa_r+0x98>
 800b250:	4ba5      	ldr	r3, [pc, #660]	; (800b4e8 <_dtoa_r+0x364>)
 800b252:	e7e1      	b.n	800b218 <_dtoa_r+0x94>
 800b254:	ab1a      	add	r3, sp, #104	; 0x68
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	ab1b      	add	r3, sp, #108	; 0x6c
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	0038      	movs	r0, r7
 800b25e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b260:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b262:	f001 ff93 	bl	800d18c <__d2b>
 800b266:	006e      	lsls	r6, r5, #1
 800b268:	9005      	str	r0, [sp, #20]
 800b26a:	0d76      	lsrs	r6, r6, #21
 800b26c:	d100      	bne.n	800b270 <_dtoa_r+0xec>
 800b26e:	e07c      	b.n	800b36a <_dtoa_r+0x1e6>
 800b270:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b272:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b276:	4a9d      	ldr	r2, [pc, #628]	; (800b4ec <_dtoa_r+0x368>)
 800b278:	031b      	lsls	r3, r3, #12
 800b27a:	0b1b      	lsrs	r3, r3, #12
 800b27c:	431a      	orrs	r2, r3
 800b27e:	0011      	movs	r1, r2
 800b280:	4b9b      	ldr	r3, [pc, #620]	; (800b4f0 <_dtoa_r+0x36c>)
 800b282:	9418      	str	r4, [sp, #96]	; 0x60
 800b284:	18f6      	adds	r6, r6, r3
 800b286:	2200      	movs	r2, #0
 800b288:	4b9a      	ldr	r3, [pc, #616]	; (800b4f4 <_dtoa_r+0x370>)
 800b28a:	f7f6 fe63 	bl	8001f54 <__aeabi_dsub>
 800b28e:	4a9a      	ldr	r2, [pc, #616]	; (800b4f8 <_dtoa_r+0x374>)
 800b290:	4b9a      	ldr	r3, [pc, #616]	; (800b4fc <_dtoa_r+0x378>)
 800b292:	f7f6 fbf3 	bl	8001a7c <__aeabi_dmul>
 800b296:	4a9a      	ldr	r2, [pc, #616]	; (800b500 <_dtoa_r+0x37c>)
 800b298:	4b9a      	ldr	r3, [pc, #616]	; (800b504 <_dtoa_r+0x380>)
 800b29a:	f7f5 fcb1 	bl	8000c00 <__aeabi_dadd>
 800b29e:	0004      	movs	r4, r0
 800b2a0:	0030      	movs	r0, r6
 800b2a2:	000d      	movs	r5, r1
 800b2a4:	f7f7 fa3c 	bl	8002720 <__aeabi_i2d>
 800b2a8:	4a97      	ldr	r2, [pc, #604]	; (800b508 <_dtoa_r+0x384>)
 800b2aa:	4b98      	ldr	r3, [pc, #608]	; (800b50c <_dtoa_r+0x388>)
 800b2ac:	f7f6 fbe6 	bl	8001a7c <__aeabi_dmul>
 800b2b0:	0002      	movs	r2, r0
 800b2b2:	000b      	movs	r3, r1
 800b2b4:	0020      	movs	r0, r4
 800b2b6:	0029      	movs	r1, r5
 800b2b8:	f7f5 fca2 	bl	8000c00 <__aeabi_dadd>
 800b2bc:	0004      	movs	r4, r0
 800b2be:	000d      	movs	r5, r1
 800b2c0:	f7f7 f9f8 	bl	80026b4 <__aeabi_d2iz>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	9002      	str	r0, [sp, #8]
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	0020      	movs	r0, r4
 800b2cc:	0029      	movs	r1, r5
 800b2ce:	f7f5 f8cd 	bl	800046c <__aeabi_dcmplt>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d00b      	beq.n	800b2ee <_dtoa_r+0x16a>
 800b2d6:	9802      	ldr	r0, [sp, #8]
 800b2d8:	f7f7 fa22 	bl	8002720 <__aeabi_i2d>
 800b2dc:	002b      	movs	r3, r5
 800b2de:	0022      	movs	r2, r4
 800b2e0:	f7f5 f8be 	bl	8000460 <__aeabi_dcmpeq>
 800b2e4:	4243      	negs	r3, r0
 800b2e6:	4158      	adcs	r0, r3
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	1a1b      	subs	r3, r3, r0
 800b2ec:	9302      	str	r3, [sp, #8]
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	9316      	str	r3, [sp, #88]	; 0x58
 800b2f2:	9b02      	ldr	r3, [sp, #8]
 800b2f4:	2b16      	cmp	r3, #22
 800b2f6:	d80f      	bhi.n	800b318 <_dtoa_r+0x194>
 800b2f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b2fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b2fc:	00da      	lsls	r2, r3, #3
 800b2fe:	4b84      	ldr	r3, [pc, #528]	; (800b510 <_dtoa_r+0x38c>)
 800b300:	189b      	adds	r3, r3, r2
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f7f5 f8b1 	bl	800046c <__aeabi_dcmplt>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d049      	beq.n	800b3a2 <_dtoa_r+0x21e>
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	3b01      	subs	r3, #1
 800b312:	9302      	str	r3, [sp, #8]
 800b314:	2300      	movs	r3, #0
 800b316:	9316      	str	r3, [sp, #88]	; 0x58
 800b318:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b31a:	1b9e      	subs	r6, r3, r6
 800b31c:	2300      	movs	r3, #0
 800b31e:	930a      	str	r3, [sp, #40]	; 0x28
 800b320:	0033      	movs	r3, r6
 800b322:	3b01      	subs	r3, #1
 800b324:	930d      	str	r3, [sp, #52]	; 0x34
 800b326:	d504      	bpl.n	800b332 <_dtoa_r+0x1ae>
 800b328:	2301      	movs	r3, #1
 800b32a:	1b9b      	subs	r3, r3, r6
 800b32c:	930a      	str	r3, [sp, #40]	; 0x28
 800b32e:	2300      	movs	r3, #0
 800b330:	930d      	str	r3, [sp, #52]	; 0x34
 800b332:	9b02      	ldr	r3, [sp, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	db36      	blt.n	800b3a6 <_dtoa_r+0x222>
 800b338:	9a02      	ldr	r2, [sp, #8]
 800b33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b33c:	4694      	mov	ip, r2
 800b33e:	4463      	add	r3, ip
 800b340:	930d      	str	r3, [sp, #52]	; 0x34
 800b342:	2300      	movs	r3, #0
 800b344:	9215      	str	r2, [sp, #84]	; 0x54
 800b346:	930e      	str	r3, [sp, #56]	; 0x38
 800b348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b34a:	2401      	movs	r4, #1
 800b34c:	2b09      	cmp	r3, #9
 800b34e:	d864      	bhi.n	800b41a <_dtoa_r+0x296>
 800b350:	2b05      	cmp	r3, #5
 800b352:	dd02      	ble.n	800b35a <_dtoa_r+0x1d6>
 800b354:	2400      	movs	r4, #0
 800b356:	3b04      	subs	r3, #4
 800b358:	9322      	str	r3, [sp, #136]	; 0x88
 800b35a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b35c:	1e98      	subs	r0, r3, #2
 800b35e:	2803      	cmp	r0, #3
 800b360:	d864      	bhi.n	800b42c <_dtoa_r+0x2a8>
 800b362:	f7f4 fee3 	bl	800012c <__gnu_thumb1_case_uqi>
 800b366:	3829      	.short	0x3829
 800b368:	5836      	.short	0x5836
 800b36a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b36c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b36e:	189e      	adds	r6, r3, r2
 800b370:	4b68      	ldr	r3, [pc, #416]	; (800b514 <_dtoa_r+0x390>)
 800b372:	18f2      	adds	r2, r6, r3
 800b374:	2a20      	cmp	r2, #32
 800b376:	dd0f      	ble.n	800b398 <_dtoa_r+0x214>
 800b378:	2340      	movs	r3, #64	; 0x40
 800b37a:	1a9b      	subs	r3, r3, r2
 800b37c:	409d      	lsls	r5, r3
 800b37e:	4b66      	ldr	r3, [pc, #408]	; (800b518 <_dtoa_r+0x394>)
 800b380:	9802      	ldr	r0, [sp, #8]
 800b382:	18f3      	adds	r3, r6, r3
 800b384:	40d8      	lsrs	r0, r3
 800b386:	4328      	orrs	r0, r5
 800b388:	f7f7 f9fa 	bl	8002780 <__aeabi_ui2d>
 800b38c:	2301      	movs	r3, #1
 800b38e:	4c63      	ldr	r4, [pc, #396]	; (800b51c <_dtoa_r+0x398>)
 800b390:	3e01      	subs	r6, #1
 800b392:	1909      	adds	r1, r1, r4
 800b394:	9318      	str	r3, [sp, #96]	; 0x60
 800b396:	e776      	b.n	800b286 <_dtoa_r+0x102>
 800b398:	2320      	movs	r3, #32
 800b39a:	9802      	ldr	r0, [sp, #8]
 800b39c:	1a9b      	subs	r3, r3, r2
 800b39e:	4098      	lsls	r0, r3
 800b3a0:	e7f2      	b.n	800b388 <_dtoa_r+0x204>
 800b3a2:	9016      	str	r0, [sp, #88]	; 0x58
 800b3a4:	e7b8      	b.n	800b318 <_dtoa_r+0x194>
 800b3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a8:	9a02      	ldr	r2, [sp, #8]
 800b3aa:	1a9b      	subs	r3, r3, r2
 800b3ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ae:	4253      	negs	r3, r2
 800b3b0:	930e      	str	r3, [sp, #56]	; 0x38
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9315      	str	r3, [sp, #84]	; 0x54
 800b3b6:	e7c7      	b.n	800b348 <_dtoa_r+0x1c4>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3be:	930c      	str	r3, [sp, #48]	; 0x30
 800b3c0:	9307      	str	r3, [sp, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dc13      	bgt.n	800b3ee <_dtoa_r+0x26a>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	001a      	movs	r2, r3
 800b3ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b3cc:	9307      	str	r3, [sp, #28]
 800b3ce:	9223      	str	r2, [sp, #140]	; 0x8c
 800b3d0:	e00d      	b.n	800b3ee <_dtoa_r+0x26a>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e7f1      	b.n	800b3ba <_dtoa_r+0x236>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b3da:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3dc:	4694      	mov	ip, r2
 800b3de:	9b02      	ldr	r3, [sp, #8]
 800b3e0:	4463      	add	r3, ip
 800b3e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	dc00      	bgt.n	800b3ee <_dtoa_r+0x26a>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f2:	6042      	str	r2, [r0, #4]
 800b3f4:	3204      	adds	r2, #4
 800b3f6:	0015      	movs	r5, r2
 800b3f8:	3514      	adds	r5, #20
 800b3fa:	6841      	ldr	r1, [r0, #4]
 800b3fc:	429d      	cmp	r5, r3
 800b3fe:	d919      	bls.n	800b434 <_dtoa_r+0x2b0>
 800b400:	0038      	movs	r0, r7
 800b402:	f001 facb 	bl	800c99c <_Balloc>
 800b406:	9006      	str	r0, [sp, #24]
 800b408:	2800      	cmp	r0, #0
 800b40a:	d117      	bne.n	800b43c <_dtoa_r+0x2b8>
 800b40c:	21d5      	movs	r1, #213	; 0xd5
 800b40e:	0002      	movs	r2, r0
 800b410:	4b43      	ldr	r3, [pc, #268]	; (800b520 <_dtoa_r+0x39c>)
 800b412:	0049      	lsls	r1, r1, #1
 800b414:	e6cb      	b.n	800b1ae <_dtoa_r+0x2a>
 800b416:	2301      	movs	r3, #1
 800b418:	e7de      	b.n	800b3d8 <_dtoa_r+0x254>
 800b41a:	2300      	movs	r3, #0
 800b41c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b41e:	9322      	str	r3, [sp, #136]	; 0x88
 800b420:	3b01      	subs	r3, #1
 800b422:	930c      	str	r3, [sp, #48]	; 0x30
 800b424:	9307      	str	r3, [sp, #28]
 800b426:	2200      	movs	r2, #0
 800b428:	3313      	adds	r3, #19
 800b42a:	e7d0      	b.n	800b3ce <_dtoa_r+0x24a>
 800b42c:	2301      	movs	r3, #1
 800b42e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b430:	3b02      	subs	r3, #2
 800b432:	e7f6      	b.n	800b422 <_dtoa_r+0x29e>
 800b434:	3101      	adds	r1, #1
 800b436:	6041      	str	r1, [r0, #4]
 800b438:	0052      	lsls	r2, r2, #1
 800b43a:	e7dc      	b.n	800b3f6 <_dtoa_r+0x272>
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	9a06      	ldr	r2, [sp, #24]
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	9b07      	ldr	r3, [sp, #28]
 800b444:	2b0e      	cmp	r3, #14
 800b446:	d900      	bls.n	800b44a <_dtoa_r+0x2c6>
 800b448:	e0eb      	b.n	800b622 <_dtoa_r+0x49e>
 800b44a:	2c00      	cmp	r4, #0
 800b44c:	d100      	bne.n	800b450 <_dtoa_r+0x2cc>
 800b44e:	e0e8      	b.n	800b622 <_dtoa_r+0x49e>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	dd68      	ble.n	800b528 <_dtoa_r+0x3a4>
 800b456:	001a      	movs	r2, r3
 800b458:	210f      	movs	r1, #15
 800b45a:	4b2d      	ldr	r3, [pc, #180]	; (800b510 <_dtoa_r+0x38c>)
 800b45c:	400a      	ands	r2, r1
 800b45e:	00d2      	lsls	r2, r2, #3
 800b460:	189b      	adds	r3, r3, r2
 800b462:	681d      	ldr	r5, [r3, #0]
 800b464:	685e      	ldr	r6, [r3, #4]
 800b466:	9b02      	ldr	r3, [sp, #8]
 800b468:	111c      	asrs	r4, r3, #4
 800b46a:	2302      	movs	r3, #2
 800b46c:	9310      	str	r3, [sp, #64]	; 0x40
 800b46e:	9b02      	ldr	r3, [sp, #8]
 800b470:	05db      	lsls	r3, r3, #23
 800b472:	d50b      	bpl.n	800b48c <_dtoa_r+0x308>
 800b474:	4b2b      	ldr	r3, [pc, #172]	; (800b524 <_dtoa_r+0x3a0>)
 800b476:	400c      	ands	r4, r1
 800b478:	6a1a      	ldr	r2, [r3, #32]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b47e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b480:	f7f5 fefa 	bl	8001278 <__aeabi_ddiv>
 800b484:	2303      	movs	r3, #3
 800b486:	9008      	str	r0, [sp, #32]
 800b488:	9109      	str	r1, [sp, #36]	; 0x24
 800b48a:	9310      	str	r3, [sp, #64]	; 0x40
 800b48c:	4b25      	ldr	r3, [pc, #148]	; (800b524 <_dtoa_r+0x3a0>)
 800b48e:	9314      	str	r3, [sp, #80]	; 0x50
 800b490:	2c00      	cmp	r4, #0
 800b492:	d108      	bne.n	800b4a6 <_dtoa_r+0x322>
 800b494:	9808      	ldr	r0, [sp, #32]
 800b496:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b498:	002a      	movs	r2, r5
 800b49a:	0033      	movs	r3, r6
 800b49c:	f7f5 feec 	bl	8001278 <__aeabi_ddiv>
 800b4a0:	9008      	str	r0, [sp, #32]
 800b4a2:	9109      	str	r1, [sp, #36]	; 0x24
 800b4a4:	e05c      	b.n	800b560 <_dtoa_r+0x3dc>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	421c      	tst	r4, r3
 800b4aa:	d00b      	beq.n	800b4c4 <_dtoa_r+0x340>
 800b4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ae:	0028      	movs	r0, r5
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	9310      	str	r3, [sp, #64]	; 0x40
 800b4b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4b6:	0031      	movs	r1, r6
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f7f6 fade 	bl	8001a7c <__aeabi_dmul>
 800b4c0:	0005      	movs	r5, r0
 800b4c2:	000e      	movs	r6, r1
 800b4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4c6:	1064      	asrs	r4, r4, #1
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	e7e0      	b.n	800b48e <_dtoa_r+0x30a>
 800b4cc:	0800e9ee 	.word	0x0800e9ee
 800b4d0:	0800ea05 	.word	0x0800ea05
 800b4d4:	7ff00000 	.word	0x7ff00000
 800b4d8:	0000270f 	.word	0x0000270f
 800b4dc:	0800e9ea 	.word	0x0800e9ea
 800b4e0:	0800e9ed 	.word	0x0800e9ed
 800b4e4:	0800ecc1 	.word	0x0800ecc1
 800b4e8:	0800ecc2 	.word	0x0800ecc2
 800b4ec:	3ff00000 	.word	0x3ff00000
 800b4f0:	fffffc01 	.word	0xfffffc01
 800b4f4:	3ff80000 	.word	0x3ff80000
 800b4f8:	636f4361 	.word	0x636f4361
 800b4fc:	3fd287a7 	.word	0x3fd287a7
 800b500:	8b60c8b3 	.word	0x8b60c8b3
 800b504:	3fc68a28 	.word	0x3fc68a28
 800b508:	509f79fb 	.word	0x509f79fb
 800b50c:	3fd34413 	.word	0x3fd34413
 800b510:	0800ebd8 	.word	0x0800ebd8
 800b514:	00000432 	.word	0x00000432
 800b518:	00000412 	.word	0x00000412
 800b51c:	fe100000 	.word	0xfe100000
 800b520:	0800ea60 	.word	0x0800ea60
 800b524:	0800ebb0 	.word	0x0800ebb0
 800b528:	2302      	movs	r3, #2
 800b52a:	9310      	str	r3, [sp, #64]	; 0x40
 800b52c:	9b02      	ldr	r3, [sp, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d016      	beq.n	800b560 <_dtoa_r+0x3dc>
 800b532:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b534:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b536:	425c      	negs	r4, r3
 800b538:	230f      	movs	r3, #15
 800b53a:	4ab6      	ldr	r2, [pc, #728]	; (800b814 <_dtoa_r+0x690>)
 800b53c:	4023      	ands	r3, r4
 800b53e:	00db      	lsls	r3, r3, #3
 800b540:	18d3      	adds	r3, r2, r3
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f7f6 fa99 	bl	8001a7c <__aeabi_dmul>
 800b54a:	2601      	movs	r6, #1
 800b54c:	2300      	movs	r3, #0
 800b54e:	9008      	str	r0, [sp, #32]
 800b550:	9109      	str	r1, [sp, #36]	; 0x24
 800b552:	4db1      	ldr	r5, [pc, #708]	; (800b818 <_dtoa_r+0x694>)
 800b554:	1124      	asrs	r4, r4, #4
 800b556:	2c00      	cmp	r4, #0
 800b558:	d000      	beq.n	800b55c <_dtoa_r+0x3d8>
 800b55a:	e094      	b.n	800b686 <_dtoa_r+0x502>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d19f      	bne.n	800b4a0 <_dtoa_r+0x31c>
 800b560:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b562:	2b00      	cmp	r3, #0
 800b564:	d100      	bne.n	800b568 <_dtoa_r+0x3e4>
 800b566:	e09b      	b.n	800b6a0 <_dtoa_r+0x51c>
 800b568:	9c08      	ldr	r4, [sp, #32]
 800b56a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b56c:	2200      	movs	r2, #0
 800b56e:	0020      	movs	r0, r4
 800b570:	0029      	movs	r1, r5
 800b572:	4baa      	ldr	r3, [pc, #680]	; (800b81c <_dtoa_r+0x698>)
 800b574:	f7f4 ff7a 	bl	800046c <__aeabi_dcmplt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d100      	bne.n	800b57e <_dtoa_r+0x3fa>
 800b57c:	e090      	b.n	800b6a0 <_dtoa_r+0x51c>
 800b57e:	9b07      	ldr	r3, [sp, #28]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d100      	bne.n	800b586 <_dtoa_r+0x402>
 800b584:	e08c      	b.n	800b6a0 <_dtoa_r+0x51c>
 800b586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dd46      	ble.n	800b61a <_dtoa_r+0x496>
 800b58c:	9b02      	ldr	r3, [sp, #8]
 800b58e:	2200      	movs	r2, #0
 800b590:	0020      	movs	r0, r4
 800b592:	0029      	movs	r1, r5
 800b594:	1e5e      	subs	r6, r3, #1
 800b596:	4ba2      	ldr	r3, [pc, #648]	; (800b820 <_dtoa_r+0x69c>)
 800b598:	f7f6 fa70 	bl	8001a7c <__aeabi_dmul>
 800b59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b59e:	9008      	str	r0, [sp, #32]
 800b5a0:	9109      	str	r1, [sp, #36]	; 0x24
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9310      	str	r3, [sp, #64]	; 0x40
 800b5a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b5aa:	9c08      	ldr	r4, [sp, #32]
 800b5ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b5ae:	9314      	str	r3, [sp, #80]	; 0x50
 800b5b0:	f7f7 f8b6 	bl	8002720 <__aeabi_i2d>
 800b5b4:	0022      	movs	r2, r4
 800b5b6:	002b      	movs	r3, r5
 800b5b8:	f7f6 fa60 	bl	8001a7c <__aeabi_dmul>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4b99      	ldr	r3, [pc, #612]	; (800b824 <_dtoa_r+0x6a0>)
 800b5c0:	f7f5 fb1e 	bl	8000c00 <__aeabi_dadd>
 800b5c4:	9010      	str	r0, [sp, #64]	; 0x40
 800b5c6:	9111      	str	r1, [sp, #68]	; 0x44
 800b5c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5cc:	9208      	str	r2, [sp, #32]
 800b5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d0:	4a95      	ldr	r2, [pc, #596]	; (800b828 <_dtoa_r+0x6a4>)
 800b5d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5d4:	4694      	mov	ip, r2
 800b5d6:	4463      	add	r3, ip
 800b5d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5da:	9309      	str	r3, [sp, #36]	; 0x24
 800b5dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d161      	bne.n	800b6a6 <_dtoa_r+0x522>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	0020      	movs	r0, r4
 800b5e6:	0029      	movs	r1, r5
 800b5e8:	4b90      	ldr	r3, [pc, #576]	; (800b82c <_dtoa_r+0x6a8>)
 800b5ea:	f7f6 fcb3 	bl	8001f54 <__aeabi_dsub>
 800b5ee:	9a08      	ldr	r2, [sp, #32]
 800b5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5f2:	0004      	movs	r4, r0
 800b5f4:	000d      	movs	r5, r1
 800b5f6:	f7f4 ff4d 	bl	8000494 <__aeabi_dcmpgt>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d000      	beq.n	800b600 <_dtoa_r+0x47c>
 800b5fe:	e2af      	b.n	800bb60 <_dtoa_r+0x9dc>
 800b600:	488b      	ldr	r0, [pc, #556]	; (800b830 <_dtoa_r+0x6ac>)
 800b602:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b604:	4684      	mov	ip, r0
 800b606:	4461      	add	r1, ip
 800b608:	000b      	movs	r3, r1
 800b60a:	0020      	movs	r0, r4
 800b60c:	0029      	movs	r1, r5
 800b60e:	9a08      	ldr	r2, [sp, #32]
 800b610:	f7f4 ff2c 	bl	800046c <__aeabi_dcmplt>
 800b614:	2800      	cmp	r0, #0
 800b616:	d000      	beq.n	800b61a <_dtoa_r+0x496>
 800b618:	e29f      	b.n	800bb5a <_dtoa_r+0x9d6>
 800b61a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b61c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b61e:	9308      	str	r3, [sp, #32]
 800b620:	9409      	str	r4, [sp, #36]	; 0x24
 800b622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b624:	2b00      	cmp	r3, #0
 800b626:	da00      	bge.n	800b62a <_dtoa_r+0x4a6>
 800b628:	e172      	b.n	800b910 <_dtoa_r+0x78c>
 800b62a:	9a02      	ldr	r2, [sp, #8]
 800b62c:	2a0e      	cmp	r2, #14
 800b62e:	dd00      	ble.n	800b632 <_dtoa_r+0x4ae>
 800b630:	e16e      	b.n	800b910 <_dtoa_r+0x78c>
 800b632:	4b78      	ldr	r3, [pc, #480]	; (800b814 <_dtoa_r+0x690>)
 800b634:	00d2      	lsls	r2, r2, #3
 800b636:	189b      	adds	r3, r3, r2
 800b638:	685c      	ldr	r4, [r3, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	930a      	str	r3, [sp, #40]	; 0x28
 800b63e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b640:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b642:	2b00      	cmp	r3, #0
 800b644:	db00      	blt.n	800b648 <_dtoa_r+0x4c4>
 800b646:	e0f7      	b.n	800b838 <_dtoa_r+0x6b4>
 800b648:	9b07      	ldr	r3, [sp, #28]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dd00      	ble.n	800b650 <_dtoa_r+0x4cc>
 800b64e:	e0f3      	b.n	800b838 <_dtoa_r+0x6b4>
 800b650:	d000      	beq.n	800b654 <_dtoa_r+0x4d0>
 800b652:	e282      	b.n	800bb5a <_dtoa_r+0x9d6>
 800b654:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b658:	2200      	movs	r2, #0
 800b65a:	4b74      	ldr	r3, [pc, #464]	; (800b82c <_dtoa_r+0x6a8>)
 800b65c:	f7f6 fa0e 	bl	8001a7c <__aeabi_dmul>
 800b660:	9a08      	ldr	r2, [sp, #32]
 800b662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b664:	f7f4 ff20 	bl	80004a8 <__aeabi_dcmpge>
 800b668:	9e07      	ldr	r6, [sp, #28]
 800b66a:	0035      	movs	r5, r6
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d000      	beq.n	800b672 <_dtoa_r+0x4ee>
 800b670:	e259      	b.n	800bb26 <_dtoa_r+0x9a2>
 800b672:	9b06      	ldr	r3, [sp, #24]
 800b674:	9a06      	ldr	r2, [sp, #24]
 800b676:	3301      	adds	r3, #1
 800b678:	9308      	str	r3, [sp, #32]
 800b67a:	2331      	movs	r3, #49	; 0x31
 800b67c:	7013      	strb	r3, [r2, #0]
 800b67e:	9b02      	ldr	r3, [sp, #8]
 800b680:	3301      	adds	r3, #1
 800b682:	9302      	str	r3, [sp, #8]
 800b684:	e254      	b.n	800bb30 <_dtoa_r+0x9ac>
 800b686:	4234      	tst	r4, r6
 800b688:	d007      	beq.n	800b69a <_dtoa_r+0x516>
 800b68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b68c:	3301      	adds	r3, #1
 800b68e:	9310      	str	r3, [sp, #64]	; 0x40
 800b690:	682a      	ldr	r2, [r5, #0]
 800b692:	686b      	ldr	r3, [r5, #4]
 800b694:	f7f6 f9f2 	bl	8001a7c <__aeabi_dmul>
 800b698:	0033      	movs	r3, r6
 800b69a:	1064      	asrs	r4, r4, #1
 800b69c:	3508      	adds	r5, #8
 800b69e:	e75a      	b.n	800b556 <_dtoa_r+0x3d2>
 800b6a0:	9e02      	ldr	r6, [sp, #8]
 800b6a2:	9b07      	ldr	r3, [sp, #28]
 800b6a4:	e780      	b.n	800b5a8 <_dtoa_r+0x424>
 800b6a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6aa:	1e5a      	subs	r2, r3, #1
 800b6ac:	4b59      	ldr	r3, [pc, #356]	; (800b814 <_dtoa_r+0x690>)
 800b6ae:	00d2      	lsls	r2, r2, #3
 800b6b0:	189b      	adds	r3, r3, r2
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	2900      	cmp	r1, #0
 800b6b8:	d051      	beq.n	800b75e <_dtoa_r+0x5da>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	495d      	ldr	r1, [pc, #372]	; (800b834 <_dtoa_r+0x6b0>)
 800b6be:	f7f5 fddb 	bl	8001278 <__aeabi_ddiv>
 800b6c2:	9a08      	ldr	r2, [sp, #32]
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	f7f6 fc45 	bl	8001f54 <__aeabi_dsub>
 800b6ca:	9a06      	ldr	r2, [sp, #24]
 800b6cc:	9b06      	ldr	r3, [sp, #24]
 800b6ce:	4694      	mov	ip, r2
 800b6d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6d4:	9010      	str	r0, [sp, #64]	; 0x40
 800b6d6:	9111      	str	r1, [sp, #68]	; 0x44
 800b6d8:	4463      	add	r3, ip
 800b6da:	9319      	str	r3, [sp, #100]	; 0x64
 800b6dc:	0029      	movs	r1, r5
 800b6de:	0020      	movs	r0, r4
 800b6e0:	f7f6 ffe8 	bl	80026b4 <__aeabi_d2iz>
 800b6e4:	9014      	str	r0, [sp, #80]	; 0x50
 800b6e6:	f7f7 f81b 	bl	8002720 <__aeabi_i2d>
 800b6ea:	0002      	movs	r2, r0
 800b6ec:	000b      	movs	r3, r1
 800b6ee:	0020      	movs	r0, r4
 800b6f0:	0029      	movs	r1, r5
 800b6f2:	f7f6 fc2f 	bl	8001f54 <__aeabi_dsub>
 800b6f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	9308      	str	r3, [sp, #32]
 800b6fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b700:	0004      	movs	r4, r0
 800b702:	3330      	adds	r3, #48	; 0x30
 800b704:	7013      	strb	r3, [r2, #0]
 800b706:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b70a:	000d      	movs	r5, r1
 800b70c:	f7f4 feae 	bl	800046c <__aeabi_dcmplt>
 800b710:	2800      	cmp	r0, #0
 800b712:	d175      	bne.n	800b800 <_dtoa_r+0x67c>
 800b714:	0022      	movs	r2, r4
 800b716:	002b      	movs	r3, r5
 800b718:	2000      	movs	r0, #0
 800b71a:	4940      	ldr	r1, [pc, #256]	; (800b81c <_dtoa_r+0x698>)
 800b71c:	f7f6 fc1a 	bl	8001f54 <__aeabi_dsub>
 800b720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b724:	f7f4 fea2 	bl	800046c <__aeabi_dcmplt>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d000      	beq.n	800b72e <_dtoa_r+0x5aa>
 800b72c:	e0d2      	b.n	800b8d4 <_dtoa_r+0x750>
 800b72e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b730:	9a08      	ldr	r2, [sp, #32]
 800b732:	4293      	cmp	r3, r2
 800b734:	d100      	bne.n	800b738 <_dtoa_r+0x5b4>
 800b736:	e770      	b.n	800b61a <_dtoa_r+0x496>
 800b738:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b73a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b73c:	2200      	movs	r2, #0
 800b73e:	4b38      	ldr	r3, [pc, #224]	; (800b820 <_dtoa_r+0x69c>)
 800b740:	f7f6 f99c 	bl	8001a7c <__aeabi_dmul>
 800b744:	4b36      	ldr	r3, [pc, #216]	; (800b820 <_dtoa_r+0x69c>)
 800b746:	9010      	str	r0, [sp, #64]	; 0x40
 800b748:	9111      	str	r1, [sp, #68]	; 0x44
 800b74a:	2200      	movs	r2, #0
 800b74c:	0020      	movs	r0, r4
 800b74e:	0029      	movs	r1, r5
 800b750:	f7f6 f994 	bl	8001a7c <__aeabi_dmul>
 800b754:	9b08      	ldr	r3, [sp, #32]
 800b756:	0004      	movs	r4, r0
 800b758:	000d      	movs	r5, r1
 800b75a:	9317      	str	r3, [sp, #92]	; 0x5c
 800b75c:	e7be      	b.n	800b6dc <_dtoa_r+0x558>
 800b75e:	9808      	ldr	r0, [sp, #32]
 800b760:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b762:	f7f6 f98b 	bl	8001a7c <__aeabi_dmul>
 800b766:	9a06      	ldr	r2, [sp, #24]
 800b768:	9b06      	ldr	r3, [sp, #24]
 800b76a:	4694      	mov	ip, r2
 800b76c:	9308      	str	r3, [sp, #32]
 800b76e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b770:	9010      	str	r0, [sp, #64]	; 0x40
 800b772:	9111      	str	r1, [sp, #68]	; 0x44
 800b774:	4463      	add	r3, ip
 800b776:	9319      	str	r3, [sp, #100]	; 0x64
 800b778:	0029      	movs	r1, r5
 800b77a:	0020      	movs	r0, r4
 800b77c:	f7f6 ff9a 	bl	80026b4 <__aeabi_d2iz>
 800b780:	9017      	str	r0, [sp, #92]	; 0x5c
 800b782:	f7f6 ffcd 	bl	8002720 <__aeabi_i2d>
 800b786:	0002      	movs	r2, r0
 800b788:	000b      	movs	r3, r1
 800b78a:	0020      	movs	r0, r4
 800b78c:	0029      	movs	r1, r5
 800b78e:	f7f6 fbe1 	bl	8001f54 <__aeabi_dsub>
 800b792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b794:	9a08      	ldr	r2, [sp, #32]
 800b796:	3330      	adds	r3, #48	; 0x30
 800b798:	7013      	strb	r3, [r2, #0]
 800b79a:	0013      	movs	r3, r2
 800b79c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b79e:	3301      	adds	r3, #1
 800b7a0:	0004      	movs	r4, r0
 800b7a2:	000d      	movs	r5, r1
 800b7a4:	9308      	str	r3, [sp, #32]
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d12c      	bne.n	800b804 <_dtoa_r+0x680>
 800b7aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b7ae:	9a06      	ldr	r2, [sp, #24]
 800b7b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7b2:	4694      	mov	ip, r2
 800b7b4:	4463      	add	r3, ip
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	9308      	str	r3, [sp, #32]
 800b7ba:	4b1e      	ldr	r3, [pc, #120]	; (800b834 <_dtoa_r+0x6b0>)
 800b7bc:	f7f5 fa20 	bl	8000c00 <__aeabi_dadd>
 800b7c0:	0002      	movs	r2, r0
 800b7c2:	000b      	movs	r3, r1
 800b7c4:	0020      	movs	r0, r4
 800b7c6:	0029      	movs	r1, r5
 800b7c8:	f7f4 fe64 	bl	8000494 <__aeabi_dcmpgt>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d000      	beq.n	800b7d2 <_dtoa_r+0x64e>
 800b7d0:	e080      	b.n	800b8d4 <_dtoa_r+0x750>
 800b7d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	4916      	ldr	r1, [pc, #88]	; (800b834 <_dtoa_r+0x6b0>)
 800b7da:	f7f6 fbbb 	bl	8001f54 <__aeabi_dsub>
 800b7de:	0002      	movs	r2, r0
 800b7e0:	000b      	movs	r3, r1
 800b7e2:	0020      	movs	r0, r4
 800b7e4:	0029      	movs	r1, r5
 800b7e6:	f7f4 fe41 	bl	800046c <__aeabi_dcmplt>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d100      	bne.n	800b7f0 <_dtoa_r+0x66c>
 800b7ee:	e714      	b.n	800b61a <_dtoa_r+0x496>
 800b7f0:	9b08      	ldr	r3, [sp, #32]
 800b7f2:	001a      	movs	r2, r3
 800b7f4:	3a01      	subs	r2, #1
 800b7f6:	9208      	str	r2, [sp, #32]
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	2a30      	cmp	r2, #48	; 0x30
 800b7fc:	d0f8      	beq.n	800b7f0 <_dtoa_r+0x66c>
 800b7fe:	9308      	str	r3, [sp, #32]
 800b800:	9602      	str	r6, [sp, #8]
 800b802:	e055      	b.n	800b8b0 <_dtoa_r+0x72c>
 800b804:	2200      	movs	r2, #0
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <_dtoa_r+0x69c>)
 800b808:	f7f6 f938 	bl	8001a7c <__aeabi_dmul>
 800b80c:	0004      	movs	r4, r0
 800b80e:	000d      	movs	r5, r1
 800b810:	e7b2      	b.n	800b778 <_dtoa_r+0x5f4>
 800b812:	46c0      	nop			; (mov r8, r8)
 800b814:	0800ebd8 	.word	0x0800ebd8
 800b818:	0800ebb0 	.word	0x0800ebb0
 800b81c:	3ff00000 	.word	0x3ff00000
 800b820:	40240000 	.word	0x40240000
 800b824:	401c0000 	.word	0x401c0000
 800b828:	fcc00000 	.word	0xfcc00000
 800b82c:	40140000 	.word	0x40140000
 800b830:	7cc00000 	.word	0x7cc00000
 800b834:	3fe00000 	.word	0x3fe00000
 800b838:	9b07      	ldr	r3, [sp, #28]
 800b83a:	9e06      	ldr	r6, [sp, #24]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	199b      	adds	r3, r3, r6
 800b840:	930c      	str	r3, [sp, #48]	; 0x30
 800b842:	9c08      	ldr	r4, [sp, #32]
 800b844:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b84a:	0020      	movs	r0, r4
 800b84c:	0029      	movs	r1, r5
 800b84e:	f7f5 fd13 	bl	8001278 <__aeabi_ddiv>
 800b852:	f7f6 ff2f 	bl	80026b4 <__aeabi_d2iz>
 800b856:	9007      	str	r0, [sp, #28]
 800b858:	f7f6 ff62 	bl	8002720 <__aeabi_i2d>
 800b85c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b860:	f7f6 f90c 	bl	8001a7c <__aeabi_dmul>
 800b864:	0002      	movs	r2, r0
 800b866:	000b      	movs	r3, r1
 800b868:	0020      	movs	r0, r4
 800b86a:	0029      	movs	r1, r5
 800b86c:	f7f6 fb72 	bl	8001f54 <__aeabi_dsub>
 800b870:	0033      	movs	r3, r6
 800b872:	9a07      	ldr	r2, [sp, #28]
 800b874:	3601      	adds	r6, #1
 800b876:	3230      	adds	r2, #48	; 0x30
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b87c:	9608      	str	r6, [sp, #32]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d139      	bne.n	800b8f6 <_dtoa_r+0x772>
 800b882:	0002      	movs	r2, r0
 800b884:	000b      	movs	r3, r1
 800b886:	f7f5 f9bb 	bl	8000c00 <__aeabi_dadd>
 800b88a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88e:	0004      	movs	r4, r0
 800b890:	000d      	movs	r5, r1
 800b892:	f7f4 fdff 	bl	8000494 <__aeabi_dcmpgt>
 800b896:	2800      	cmp	r0, #0
 800b898:	d11b      	bne.n	800b8d2 <_dtoa_r+0x74e>
 800b89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b89e:	0020      	movs	r0, r4
 800b8a0:	0029      	movs	r1, r5
 800b8a2:	f7f4 fddd 	bl	8000460 <__aeabi_dcmpeq>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d002      	beq.n	800b8b0 <_dtoa_r+0x72c>
 800b8aa:	9b07      	ldr	r3, [sp, #28]
 800b8ac:	07db      	lsls	r3, r3, #31
 800b8ae:	d410      	bmi.n	800b8d2 <_dtoa_r+0x74e>
 800b8b0:	0038      	movs	r0, r7
 800b8b2:	9905      	ldr	r1, [sp, #20]
 800b8b4:	f001 f8b6 	bl	800ca24 <_Bfree>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9a08      	ldr	r2, [sp, #32]
 800b8bc:	9802      	ldr	r0, [sp, #8]
 800b8be:	7013      	strb	r3, [r2, #0]
 800b8c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	6018      	str	r0, [r3, #0]
 800b8c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d100      	bne.n	800b8ce <_dtoa_r+0x74a>
 800b8cc:	e4a6      	b.n	800b21c <_dtoa_r+0x98>
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	e4a4      	b.n	800b21c <_dtoa_r+0x98>
 800b8d2:	9e02      	ldr	r6, [sp, #8]
 800b8d4:	9b08      	ldr	r3, [sp, #32]
 800b8d6:	9308      	str	r3, [sp, #32]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	2a39      	cmp	r2, #57	; 0x39
 800b8de:	d106      	bne.n	800b8ee <_dtoa_r+0x76a>
 800b8e0:	9a06      	ldr	r2, [sp, #24]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d1f7      	bne.n	800b8d6 <_dtoa_r+0x752>
 800b8e6:	2230      	movs	r2, #48	; 0x30
 800b8e8:	9906      	ldr	r1, [sp, #24]
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	700a      	strb	r2, [r1, #0]
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	e784      	b.n	800b800 <_dtoa_r+0x67c>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4baa      	ldr	r3, [pc, #680]	; (800bba4 <_dtoa_r+0xa20>)
 800b8fa:	f7f6 f8bf 	bl	8001a7c <__aeabi_dmul>
 800b8fe:	2200      	movs	r2, #0
 800b900:	2300      	movs	r3, #0
 800b902:	0004      	movs	r4, r0
 800b904:	000d      	movs	r5, r1
 800b906:	f7f4 fdab 	bl	8000460 <__aeabi_dcmpeq>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d09b      	beq.n	800b846 <_dtoa_r+0x6c2>
 800b90e:	e7cf      	b.n	800b8b0 <_dtoa_r+0x72c>
 800b910:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b912:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b916:	2d00      	cmp	r5, #0
 800b918:	d012      	beq.n	800b940 <_dtoa_r+0x7bc>
 800b91a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b91c:	2a01      	cmp	r2, #1
 800b91e:	dc66      	bgt.n	800b9ee <_dtoa_r+0x86a>
 800b920:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b922:	2a00      	cmp	r2, #0
 800b924:	d05d      	beq.n	800b9e2 <_dtoa_r+0x85e>
 800b926:	4aa0      	ldr	r2, [pc, #640]	; (800bba8 <_dtoa_r+0xa24>)
 800b928:	189b      	adds	r3, r3, r2
 800b92a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b92c:	2101      	movs	r1, #1
 800b92e:	18d2      	adds	r2, r2, r3
 800b930:	920a      	str	r2, [sp, #40]	; 0x28
 800b932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b934:	0038      	movs	r0, r7
 800b936:	18d3      	adds	r3, r2, r3
 800b938:	930d      	str	r3, [sp, #52]	; 0x34
 800b93a:	f001 f96f 	bl	800cc1c <__i2b>
 800b93e:	0005      	movs	r5, r0
 800b940:	2c00      	cmp	r4, #0
 800b942:	dd0e      	ble.n	800b962 <_dtoa_r+0x7de>
 800b944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b946:	2b00      	cmp	r3, #0
 800b948:	dd0b      	ble.n	800b962 <_dtoa_r+0x7de>
 800b94a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b94c:	0023      	movs	r3, r4
 800b94e:	4294      	cmp	r4, r2
 800b950:	dd00      	ble.n	800b954 <_dtoa_r+0x7d0>
 800b952:	0013      	movs	r3, r2
 800b954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b956:	1ae4      	subs	r4, r4, r3
 800b958:	1ad2      	subs	r2, r2, r3
 800b95a:	920a      	str	r2, [sp, #40]	; 0x28
 800b95c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	930d      	str	r3, [sp, #52]	; 0x34
 800b962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01f      	beq.n	800b9a8 <_dtoa_r+0x824>
 800b968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d054      	beq.n	800ba18 <_dtoa_r+0x894>
 800b96e:	2e00      	cmp	r6, #0
 800b970:	dd11      	ble.n	800b996 <_dtoa_r+0x812>
 800b972:	0029      	movs	r1, r5
 800b974:	0032      	movs	r2, r6
 800b976:	0038      	movs	r0, r7
 800b978:	f001 fa16 	bl	800cda8 <__pow5mult>
 800b97c:	9a05      	ldr	r2, [sp, #20]
 800b97e:	0001      	movs	r1, r0
 800b980:	0005      	movs	r5, r0
 800b982:	0038      	movs	r0, r7
 800b984:	f001 f960 	bl	800cc48 <__multiply>
 800b988:	9905      	ldr	r1, [sp, #20]
 800b98a:	9014      	str	r0, [sp, #80]	; 0x50
 800b98c:	0038      	movs	r0, r7
 800b98e:	f001 f849 	bl	800ca24 <_Bfree>
 800b992:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b994:	9305      	str	r3, [sp, #20]
 800b996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b998:	1b9a      	subs	r2, r3, r6
 800b99a:	42b3      	cmp	r3, r6
 800b99c:	d004      	beq.n	800b9a8 <_dtoa_r+0x824>
 800b99e:	0038      	movs	r0, r7
 800b9a0:	9905      	ldr	r1, [sp, #20]
 800b9a2:	f001 fa01 	bl	800cda8 <__pow5mult>
 800b9a6:	9005      	str	r0, [sp, #20]
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	0038      	movs	r0, r7
 800b9ac:	f001 f936 	bl	800cc1c <__i2b>
 800b9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9b2:	0006      	movs	r6, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	dd31      	ble.n	800ba1c <_dtoa_r+0x898>
 800b9b8:	001a      	movs	r2, r3
 800b9ba:	0001      	movs	r1, r0
 800b9bc:	0038      	movs	r0, r7
 800b9be:	f001 f9f3 	bl	800cda8 <__pow5mult>
 800b9c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9c4:	0006      	movs	r6, r0
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	dd2d      	ble.n	800ba26 <_dtoa_r+0x8a2>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	930e      	str	r3, [sp, #56]	; 0x38
 800b9ce:	6933      	ldr	r3, [r6, #16]
 800b9d0:	3303      	adds	r3, #3
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	18f3      	adds	r3, r6, r3
 800b9d6:	6858      	ldr	r0, [r3, #4]
 800b9d8:	f001 f8d8 	bl	800cb8c <__hi0bits>
 800b9dc:	2320      	movs	r3, #32
 800b9de:	1a18      	subs	r0, r3, r0
 800b9e0:	e039      	b.n	800ba56 <_dtoa_r+0x8d2>
 800b9e2:	2336      	movs	r3, #54	; 0x36
 800b9e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b9e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b9e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b9ea:	1a9b      	subs	r3, r3, r2
 800b9ec:	e79d      	b.n	800b92a <_dtoa_r+0x7a6>
 800b9ee:	9b07      	ldr	r3, [sp, #28]
 800b9f0:	1e5e      	subs	r6, r3, #1
 800b9f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9f4:	42b3      	cmp	r3, r6
 800b9f6:	db07      	blt.n	800ba08 <_dtoa_r+0x884>
 800b9f8:	1b9e      	subs	r6, r3, r6
 800b9fa:	9b07      	ldr	r3, [sp, #28]
 800b9fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da93      	bge.n	800b92a <_dtoa_r+0x7a6>
 800ba02:	1ae4      	subs	r4, r4, r3
 800ba04:	2300      	movs	r3, #0
 800ba06:	e790      	b.n	800b92a <_dtoa_r+0x7a6>
 800ba08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba0c:	1af3      	subs	r3, r6, r3
 800ba0e:	18d3      	adds	r3, r2, r3
 800ba10:	960e      	str	r6, [sp, #56]	; 0x38
 800ba12:	9315      	str	r3, [sp, #84]	; 0x54
 800ba14:	2600      	movs	r6, #0
 800ba16:	e7f0      	b.n	800b9fa <_dtoa_r+0x876>
 800ba18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba1a:	e7c0      	b.n	800b99e <_dtoa_r+0x81a>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	dc13      	bgt.n	800ba4e <_dtoa_r+0x8ca>
 800ba26:	2300      	movs	r3, #0
 800ba28:	930e      	str	r3, [sp, #56]	; 0x38
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10e      	bne.n	800ba4e <_dtoa_r+0x8ca>
 800ba30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba32:	031b      	lsls	r3, r3, #12
 800ba34:	d10b      	bne.n	800ba4e <_dtoa_r+0x8ca>
 800ba36:	4b5d      	ldr	r3, [pc, #372]	; (800bbac <_dtoa_r+0xa28>)
 800ba38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba3a:	4213      	tst	r3, r2
 800ba3c:	d007      	beq.n	800ba4e <_dtoa_r+0x8ca>
 800ba3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba40:	3301      	adds	r3, #1
 800ba42:	930a      	str	r3, [sp, #40]	; 0x28
 800ba44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba46:	3301      	adds	r3, #1
 800ba48:	930d      	str	r3, [sp, #52]	; 0x34
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba50:	2001      	movs	r0, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1bb      	bne.n	800b9ce <_dtoa_r+0x84a>
 800ba56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba58:	221f      	movs	r2, #31
 800ba5a:	1818      	adds	r0, r3, r0
 800ba5c:	0003      	movs	r3, r0
 800ba5e:	4013      	ands	r3, r2
 800ba60:	4210      	tst	r0, r2
 800ba62:	d046      	beq.n	800baf2 <_dtoa_r+0x96e>
 800ba64:	3201      	adds	r2, #1
 800ba66:	1ad2      	subs	r2, r2, r3
 800ba68:	2a04      	cmp	r2, #4
 800ba6a:	dd3f      	ble.n	800baec <_dtoa_r+0x968>
 800ba6c:	221c      	movs	r2, #28
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba72:	18e4      	adds	r4, r4, r3
 800ba74:	18d2      	adds	r2, r2, r3
 800ba76:	920a      	str	r2, [sp, #40]	; 0x28
 800ba78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba7a:	18d3      	adds	r3, r2, r3
 800ba7c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dd05      	ble.n	800ba90 <_dtoa_r+0x90c>
 800ba84:	001a      	movs	r2, r3
 800ba86:	0038      	movs	r0, r7
 800ba88:	9905      	ldr	r1, [sp, #20]
 800ba8a:	f001 f9e9 	bl	800ce60 <__lshift>
 800ba8e:	9005      	str	r0, [sp, #20]
 800ba90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd05      	ble.n	800baa2 <_dtoa_r+0x91e>
 800ba96:	0031      	movs	r1, r6
 800ba98:	001a      	movs	r2, r3
 800ba9a:	0038      	movs	r0, r7
 800ba9c:	f001 f9e0 	bl	800ce60 <__lshift>
 800baa0:	0006      	movs	r6, r0
 800baa2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d026      	beq.n	800baf6 <_dtoa_r+0x972>
 800baa8:	0031      	movs	r1, r6
 800baaa:	9805      	ldr	r0, [sp, #20]
 800baac:	f001 fa46 	bl	800cf3c <__mcmp>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	da20      	bge.n	800baf6 <_dtoa_r+0x972>
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	220a      	movs	r2, #10
 800bab8:	3b01      	subs	r3, #1
 800baba:	9302      	str	r3, [sp, #8]
 800babc:	0038      	movs	r0, r7
 800babe:	2300      	movs	r3, #0
 800bac0:	9905      	ldr	r1, [sp, #20]
 800bac2:	f000 ffd3 	bl	800ca6c <__multadd>
 800bac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bac8:	9005      	str	r0, [sp, #20]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d100      	bne.n	800bad0 <_dtoa_r+0x94c>
 800bace:	e166      	b.n	800bd9e <_dtoa_r+0xc1a>
 800bad0:	2300      	movs	r3, #0
 800bad2:	0029      	movs	r1, r5
 800bad4:	220a      	movs	r2, #10
 800bad6:	0038      	movs	r0, r7
 800bad8:	f000 ffc8 	bl	800ca6c <__multadd>
 800badc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bade:	0005      	movs	r5, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dc47      	bgt.n	800bb74 <_dtoa_r+0x9f0>
 800bae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	dc0d      	bgt.n	800bb06 <_dtoa_r+0x982>
 800baea:	e043      	b.n	800bb74 <_dtoa_r+0x9f0>
 800baec:	2a04      	cmp	r2, #4
 800baee:	d0c6      	beq.n	800ba7e <_dtoa_r+0x8fa>
 800baf0:	0013      	movs	r3, r2
 800baf2:	331c      	adds	r3, #28
 800baf4:	e7bc      	b.n	800ba70 <_dtoa_r+0x8ec>
 800baf6:	9b07      	ldr	r3, [sp, #28]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	dc35      	bgt.n	800bb68 <_dtoa_r+0x9e4>
 800bafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	dd32      	ble.n	800bb68 <_dtoa_r+0x9e4>
 800bb02:	9b07      	ldr	r3, [sp, #28]
 800bb04:	930c      	str	r3, [sp, #48]	; 0x30
 800bb06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10c      	bne.n	800bb26 <_dtoa_r+0x9a2>
 800bb0c:	0031      	movs	r1, r6
 800bb0e:	2205      	movs	r2, #5
 800bb10:	0038      	movs	r0, r7
 800bb12:	f000 ffab 	bl	800ca6c <__multadd>
 800bb16:	0006      	movs	r6, r0
 800bb18:	0001      	movs	r1, r0
 800bb1a:	9805      	ldr	r0, [sp, #20]
 800bb1c:	f001 fa0e 	bl	800cf3c <__mcmp>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	dd00      	ble.n	800bb26 <_dtoa_r+0x9a2>
 800bb24:	e5a5      	b.n	800b672 <_dtoa_r+0x4ee>
 800bb26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb28:	43db      	mvns	r3, r3
 800bb2a:	9302      	str	r3, [sp, #8]
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	9308      	str	r3, [sp, #32]
 800bb30:	2400      	movs	r4, #0
 800bb32:	0031      	movs	r1, r6
 800bb34:	0038      	movs	r0, r7
 800bb36:	f000 ff75 	bl	800ca24 <_Bfree>
 800bb3a:	2d00      	cmp	r5, #0
 800bb3c:	d100      	bne.n	800bb40 <_dtoa_r+0x9bc>
 800bb3e:	e6b7      	b.n	800b8b0 <_dtoa_r+0x72c>
 800bb40:	2c00      	cmp	r4, #0
 800bb42:	d005      	beq.n	800bb50 <_dtoa_r+0x9cc>
 800bb44:	42ac      	cmp	r4, r5
 800bb46:	d003      	beq.n	800bb50 <_dtoa_r+0x9cc>
 800bb48:	0021      	movs	r1, r4
 800bb4a:	0038      	movs	r0, r7
 800bb4c:	f000 ff6a 	bl	800ca24 <_Bfree>
 800bb50:	0029      	movs	r1, r5
 800bb52:	0038      	movs	r0, r7
 800bb54:	f000 ff66 	bl	800ca24 <_Bfree>
 800bb58:	e6aa      	b.n	800b8b0 <_dtoa_r+0x72c>
 800bb5a:	2600      	movs	r6, #0
 800bb5c:	0035      	movs	r5, r6
 800bb5e:	e7e2      	b.n	800bb26 <_dtoa_r+0x9a2>
 800bb60:	9602      	str	r6, [sp, #8]
 800bb62:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800bb64:	0035      	movs	r5, r6
 800bb66:	e584      	b.n	800b672 <_dtoa_r+0x4ee>
 800bb68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d100      	bne.n	800bb70 <_dtoa_r+0x9ec>
 800bb6e:	e0ce      	b.n	800bd0e <_dtoa_r+0xb8a>
 800bb70:	9b07      	ldr	r3, [sp, #28]
 800bb72:	930c      	str	r3, [sp, #48]	; 0x30
 800bb74:	2c00      	cmp	r4, #0
 800bb76:	dd05      	ble.n	800bb84 <_dtoa_r+0xa00>
 800bb78:	0029      	movs	r1, r5
 800bb7a:	0022      	movs	r2, r4
 800bb7c:	0038      	movs	r0, r7
 800bb7e:	f001 f96f 	bl	800ce60 <__lshift>
 800bb82:	0005      	movs	r5, r0
 800bb84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb86:	0028      	movs	r0, r5
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d022      	beq.n	800bbd2 <_dtoa_r+0xa4e>
 800bb8c:	0038      	movs	r0, r7
 800bb8e:	6869      	ldr	r1, [r5, #4]
 800bb90:	f000 ff04 	bl	800c99c <_Balloc>
 800bb94:	1e04      	subs	r4, r0, #0
 800bb96:	d10f      	bne.n	800bbb8 <_dtoa_r+0xa34>
 800bb98:	0002      	movs	r2, r0
 800bb9a:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <_dtoa_r+0xa2c>)
 800bb9c:	4905      	ldr	r1, [pc, #20]	; (800bbb4 <_dtoa_r+0xa30>)
 800bb9e:	f7ff fb06 	bl	800b1ae <_dtoa_r+0x2a>
 800bba2:	46c0      	nop			; (mov r8, r8)
 800bba4:	40240000 	.word	0x40240000
 800bba8:	00000433 	.word	0x00000433
 800bbac:	7ff00000 	.word	0x7ff00000
 800bbb0:	0800ea60 	.word	0x0800ea60
 800bbb4:	000002ea 	.word	0x000002ea
 800bbb8:	0029      	movs	r1, r5
 800bbba:	692b      	ldr	r3, [r5, #16]
 800bbbc:	310c      	adds	r1, #12
 800bbbe:	1c9a      	adds	r2, r3, #2
 800bbc0:	0092      	lsls	r2, r2, #2
 800bbc2:	300c      	adds	r0, #12
 800bbc4:	f7fd fad2 	bl	800916c <memcpy>
 800bbc8:	2201      	movs	r2, #1
 800bbca:	0021      	movs	r1, r4
 800bbcc:	0038      	movs	r0, r7
 800bbce:	f001 f947 	bl	800ce60 <__lshift>
 800bbd2:	9b06      	ldr	r3, [sp, #24]
 800bbd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	189b      	adds	r3, r3, r2
 800bbdc:	2201      	movs	r2, #1
 800bbde:	002c      	movs	r4, r5
 800bbe0:	0005      	movs	r5, r0
 800bbe2:	9314      	str	r3, [sp, #80]	; 0x50
 800bbe4:	9b08      	ldr	r3, [sp, #32]
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbea:	0031      	movs	r1, r6
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	f7ff fa3d 	bl	800b06c <quorem>
 800bbf2:	0003      	movs	r3, r0
 800bbf4:	0021      	movs	r1, r4
 800bbf6:	3330      	adds	r3, #48	; 0x30
 800bbf8:	900d      	str	r0, [sp, #52]	; 0x34
 800bbfa:	9805      	ldr	r0, [sp, #20]
 800bbfc:	9307      	str	r3, [sp, #28]
 800bbfe:	f001 f99d 	bl	800cf3c <__mcmp>
 800bc02:	002a      	movs	r2, r5
 800bc04:	900e      	str	r0, [sp, #56]	; 0x38
 800bc06:	0031      	movs	r1, r6
 800bc08:	0038      	movs	r0, r7
 800bc0a:	f001 f9b3 	bl	800cf74 <__mdiff>
 800bc0e:	68c3      	ldr	r3, [r0, #12]
 800bc10:	9008      	str	r0, [sp, #32]
 800bc12:	9310      	str	r3, [sp, #64]	; 0x40
 800bc14:	2301      	movs	r3, #1
 800bc16:	930c      	str	r3, [sp, #48]	; 0x30
 800bc18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d104      	bne.n	800bc28 <_dtoa_r+0xaa4>
 800bc1e:	0001      	movs	r1, r0
 800bc20:	9805      	ldr	r0, [sp, #20]
 800bc22:	f001 f98b 	bl	800cf3c <__mcmp>
 800bc26:	900c      	str	r0, [sp, #48]	; 0x30
 800bc28:	0038      	movs	r0, r7
 800bc2a:	9908      	ldr	r1, [sp, #32]
 800bc2c:	f000 fefa 	bl	800ca24 <_Bfree>
 800bc30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc34:	3301      	adds	r3, #1
 800bc36:	9308      	str	r3, [sp, #32]
 800bc38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	d10c      	bne.n	800bc5c <_dtoa_r+0xad8>
 800bc42:	9b07      	ldr	r3, [sp, #28]
 800bc44:	2b39      	cmp	r3, #57	; 0x39
 800bc46:	d026      	beq.n	800bc96 <_dtoa_r+0xb12>
 800bc48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dd02      	ble.n	800bc54 <_dtoa_r+0xad0>
 800bc4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc50:	3331      	adds	r3, #49	; 0x31
 800bc52:	9307      	str	r3, [sp, #28]
 800bc54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc56:	9a07      	ldr	r2, [sp, #28]
 800bc58:	701a      	strb	r2, [r3, #0]
 800bc5a:	e76a      	b.n	800bb32 <_dtoa_r+0x9ae>
 800bc5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	db04      	blt.n	800bc6c <_dtoa_r+0xae8>
 800bc62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bc64:	4313      	orrs	r3, r2
 800bc66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	d11f      	bne.n	800bcac <_dtoa_r+0xb28>
 800bc6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	ddf0      	ble.n	800bc54 <_dtoa_r+0xad0>
 800bc72:	9905      	ldr	r1, [sp, #20]
 800bc74:	2201      	movs	r2, #1
 800bc76:	0038      	movs	r0, r7
 800bc78:	f001 f8f2 	bl	800ce60 <__lshift>
 800bc7c:	0031      	movs	r1, r6
 800bc7e:	9005      	str	r0, [sp, #20]
 800bc80:	f001 f95c 	bl	800cf3c <__mcmp>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	dc03      	bgt.n	800bc90 <_dtoa_r+0xb0c>
 800bc88:	d1e4      	bne.n	800bc54 <_dtoa_r+0xad0>
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	07db      	lsls	r3, r3, #31
 800bc8e:	d5e1      	bpl.n	800bc54 <_dtoa_r+0xad0>
 800bc90:	9b07      	ldr	r3, [sp, #28]
 800bc92:	2b39      	cmp	r3, #57	; 0x39
 800bc94:	d1db      	bne.n	800bc4e <_dtoa_r+0xaca>
 800bc96:	2339      	movs	r3, #57	; 0x39
 800bc98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc9a:	7013      	strb	r3, [r2, #0]
 800bc9c:	9b08      	ldr	r3, [sp, #32]
 800bc9e:	9308      	str	r3, [sp, #32]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	781a      	ldrb	r2, [r3, #0]
 800bca4:	2a39      	cmp	r2, #57	; 0x39
 800bca6:	d068      	beq.n	800bd7a <_dtoa_r+0xbf6>
 800bca8:	3201      	adds	r2, #1
 800bcaa:	e7d5      	b.n	800bc58 <_dtoa_r+0xad4>
 800bcac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	dd07      	ble.n	800bcc2 <_dtoa_r+0xb3e>
 800bcb2:	9b07      	ldr	r3, [sp, #28]
 800bcb4:	2b39      	cmp	r3, #57	; 0x39
 800bcb6:	d0ee      	beq.n	800bc96 <_dtoa_r+0xb12>
 800bcb8:	9b07      	ldr	r3, [sp, #28]
 800bcba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	7013      	strb	r3, [r2, #0]
 800bcc0:	e737      	b.n	800bb32 <_dtoa_r+0x9ae>
 800bcc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcc4:	9a07      	ldr	r2, [sp, #28]
 800bcc6:	701a      	strb	r2, [r3, #0]
 800bcc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d03e      	beq.n	800bd4e <_dtoa_r+0xbca>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	220a      	movs	r2, #10
 800bcd4:	9905      	ldr	r1, [sp, #20]
 800bcd6:	0038      	movs	r0, r7
 800bcd8:	f000 fec8 	bl	800ca6c <__multadd>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9005      	str	r0, [sp, #20]
 800bce0:	220a      	movs	r2, #10
 800bce2:	0021      	movs	r1, r4
 800bce4:	0038      	movs	r0, r7
 800bce6:	42ac      	cmp	r4, r5
 800bce8:	d106      	bne.n	800bcf8 <_dtoa_r+0xb74>
 800bcea:	f000 febf 	bl	800ca6c <__multadd>
 800bcee:	0004      	movs	r4, r0
 800bcf0:	0005      	movs	r5, r0
 800bcf2:	9b08      	ldr	r3, [sp, #32]
 800bcf4:	930a      	str	r3, [sp, #40]	; 0x28
 800bcf6:	e778      	b.n	800bbea <_dtoa_r+0xa66>
 800bcf8:	f000 feb8 	bl	800ca6c <__multadd>
 800bcfc:	0029      	movs	r1, r5
 800bcfe:	0004      	movs	r4, r0
 800bd00:	2300      	movs	r3, #0
 800bd02:	220a      	movs	r2, #10
 800bd04:	0038      	movs	r0, r7
 800bd06:	f000 feb1 	bl	800ca6c <__multadd>
 800bd0a:	0005      	movs	r5, r0
 800bd0c:	e7f1      	b.n	800bcf2 <_dtoa_r+0xb6e>
 800bd0e:	9b07      	ldr	r3, [sp, #28]
 800bd10:	930c      	str	r3, [sp, #48]	; 0x30
 800bd12:	2400      	movs	r4, #0
 800bd14:	0031      	movs	r1, r6
 800bd16:	9805      	ldr	r0, [sp, #20]
 800bd18:	f7ff f9a8 	bl	800b06c <quorem>
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	3030      	adds	r0, #48	; 0x30
 800bd20:	5518      	strb	r0, [r3, r4]
 800bd22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd24:	3401      	adds	r4, #1
 800bd26:	9007      	str	r0, [sp, #28]
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	dd07      	ble.n	800bd3c <_dtoa_r+0xbb8>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	220a      	movs	r2, #10
 800bd30:	0038      	movs	r0, r7
 800bd32:	9905      	ldr	r1, [sp, #20]
 800bd34:	f000 fe9a 	bl	800ca6c <__multadd>
 800bd38:	9005      	str	r0, [sp, #20]
 800bd3a:	e7eb      	b.n	800bd14 <_dtoa_r+0xb90>
 800bd3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd3e:	2001      	movs	r0, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd00      	ble.n	800bd46 <_dtoa_r+0xbc2>
 800bd44:	0018      	movs	r0, r3
 800bd46:	2400      	movs	r4, #0
 800bd48:	9b06      	ldr	r3, [sp, #24]
 800bd4a:	181b      	adds	r3, r3, r0
 800bd4c:	9308      	str	r3, [sp, #32]
 800bd4e:	9905      	ldr	r1, [sp, #20]
 800bd50:	2201      	movs	r2, #1
 800bd52:	0038      	movs	r0, r7
 800bd54:	f001 f884 	bl	800ce60 <__lshift>
 800bd58:	0031      	movs	r1, r6
 800bd5a:	9005      	str	r0, [sp, #20]
 800bd5c:	f001 f8ee 	bl	800cf3c <__mcmp>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	dc9b      	bgt.n	800bc9c <_dtoa_r+0xb18>
 800bd64:	d102      	bne.n	800bd6c <_dtoa_r+0xbe8>
 800bd66:	9b07      	ldr	r3, [sp, #28]
 800bd68:	07db      	lsls	r3, r3, #31
 800bd6a:	d497      	bmi.n	800bc9c <_dtoa_r+0xb18>
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	9308      	str	r3, [sp, #32]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	2a30      	cmp	r2, #48	; 0x30
 800bd76:	d0fa      	beq.n	800bd6e <_dtoa_r+0xbea>
 800bd78:	e6db      	b.n	800bb32 <_dtoa_r+0x9ae>
 800bd7a:	9a06      	ldr	r2, [sp, #24]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d18e      	bne.n	800bc9e <_dtoa_r+0xb1a>
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	3301      	adds	r3, #1
 800bd84:	9302      	str	r3, [sp, #8]
 800bd86:	2331      	movs	r3, #49	; 0x31
 800bd88:	e799      	b.n	800bcbe <_dtoa_r+0xb3a>
 800bd8a:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <_dtoa_r+0xc2c>)
 800bd8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd8e:	9306      	str	r3, [sp, #24]
 800bd90:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <_dtoa_r+0xc30>)
 800bd92:	2a00      	cmp	r2, #0
 800bd94:	d001      	beq.n	800bd9a <_dtoa_r+0xc16>
 800bd96:	f7ff fa3f 	bl	800b218 <_dtoa_r+0x94>
 800bd9a:	f7ff fa3f 	bl	800b21c <_dtoa_r+0x98>
 800bd9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dcb6      	bgt.n	800bd12 <_dtoa_r+0xb8e>
 800bda4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	dd00      	ble.n	800bdac <_dtoa_r+0xc28>
 800bdaa:	e6ac      	b.n	800bb06 <_dtoa_r+0x982>
 800bdac:	e7b1      	b.n	800bd12 <_dtoa_r+0xb8e>
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	0800e9e1 	.word	0x0800e9e1
 800bdb4:	0800e9e9 	.word	0x0800e9e9

0800bdb8 <__sflush_r>:
 800bdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdba:	898b      	ldrh	r3, [r1, #12]
 800bdbc:	0005      	movs	r5, r0
 800bdbe:	000c      	movs	r4, r1
 800bdc0:	071a      	lsls	r2, r3, #28
 800bdc2:	d45f      	bmi.n	800be84 <__sflush_r+0xcc>
 800bdc4:	684a      	ldr	r2, [r1, #4]
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	dc04      	bgt.n	800bdd4 <__sflush_r+0x1c>
 800bdca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	dc01      	bgt.n	800bdd4 <__sflush_r+0x1c>
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdd4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	d0fa      	beq.n	800bdd0 <__sflush_r+0x18>
 800bdda:	2200      	movs	r2, #0
 800bddc:	2180      	movs	r1, #128	; 0x80
 800bdde:	682e      	ldr	r6, [r5, #0]
 800bde0:	602a      	str	r2, [r5, #0]
 800bde2:	001a      	movs	r2, r3
 800bde4:	0149      	lsls	r1, r1, #5
 800bde6:	400a      	ands	r2, r1
 800bde8:	420b      	tst	r3, r1
 800bdea:	d034      	beq.n	800be56 <__sflush_r+0x9e>
 800bdec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	075b      	lsls	r3, r3, #29
 800bdf2:	d506      	bpl.n	800be02 <__sflush_r+0x4a>
 800bdf4:	6863      	ldr	r3, [r4, #4]
 800bdf6:	1ac0      	subs	r0, r0, r3
 800bdf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <__sflush_r+0x4a>
 800bdfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be00:	1ac0      	subs	r0, r0, r3
 800be02:	0002      	movs	r2, r0
 800be04:	6a21      	ldr	r1, [r4, #32]
 800be06:	2300      	movs	r3, #0
 800be08:	0028      	movs	r0, r5
 800be0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800be0c:	47b8      	blx	r7
 800be0e:	89a1      	ldrh	r1, [r4, #12]
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d106      	bne.n	800be22 <__sflush_r+0x6a>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	2b1d      	cmp	r3, #29
 800be18:	d831      	bhi.n	800be7e <__sflush_r+0xc6>
 800be1a:	4a2c      	ldr	r2, [pc, #176]	; (800becc <__sflush_r+0x114>)
 800be1c:	40da      	lsrs	r2, r3
 800be1e:	07d3      	lsls	r3, r2, #31
 800be20:	d52d      	bpl.n	800be7e <__sflush_r+0xc6>
 800be22:	2300      	movs	r3, #0
 800be24:	6063      	str	r3, [r4, #4]
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	04cb      	lsls	r3, r1, #19
 800be2c:	d505      	bpl.n	800be3a <__sflush_r+0x82>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d102      	bne.n	800be38 <__sflush_r+0x80>
 800be32:	682b      	ldr	r3, [r5, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d100      	bne.n	800be3a <__sflush_r+0x82>
 800be38:	6560      	str	r0, [r4, #84]	; 0x54
 800be3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be3c:	602e      	str	r6, [r5, #0]
 800be3e:	2900      	cmp	r1, #0
 800be40:	d0c6      	beq.n	800bdd0 <__sflush_r+0x18>
 800be42:	0023      	movs	r3, r4
 800be44:	3344      	adds	r3, #68	; 0x44
 800be46:	4299      	cmp	r1, r3
 800be48:	d002      	beq.n	800be50 <__sflush_r+0x98>
 800be4a:	0028      	movs	r0, r5
 800be4c:	f001 fa9c 	bl	800d388 <_free_r>
 800be50:	2000      	movs	r0, #0
 800be52:	6360      	str	r0, [r4, #52]	; 0x34
 800be54:	e7bd      	b.n	800bdd2 <__sflush_r+0x1a>
 800be56:	2301      	movs	r3, #1
 800be58:	0028      	movs	r0, r5
 800be5a:	6a21      	ldr	r1, [r4, #32]
 800be5c:	47b8      	blx	r7
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	d1c5      	bne.n	800bdee <__sflush_r+0x36>
 800be62:	682b      	ldr	r3, [r5, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0c2      	beq.n	800bdee <__sflush_r+0x36>
 800be68:	2b1d      	cmp	r3, #29
 800be6a:	d001      	beq.n	800be70 <__sflush_r+0xb8>
 800be6c:	2b16      	cmp	r3, #22
 800be6e:	d101      	bne.n	800be74 <__sflush_r+0xbc>
 800be70:	602e      	str	r6, [r5, #0]
 800be72:	e7ad      	b.n	800bdd0 <__sflush_r+0x18>
 800be74:	2340      	movs	r3, #64	; 0x40
 800be76:	89a2      	ldrh	r2, [r4, #12]
 800be78:	4313      	orrs	r3, r2
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	e7a9      	b.n	800bdd2 <__sflush_r+0x1a>
 800be7e:	2340      	movs	r3, #64	; 0x40
 800be80:	430b      	orrs	r3, r1
 800be82:	e7fa      	b.n	800be7a <__sflush_r+0xc2>
 800be84:	690f      	ldr	r7, [r1, #16]
 800be86:	2f00      	cmp	r7, #0
 800be88:	d0a2      	beq.n	800bdd0 <__sflush_r+0x18>
 800be8a:	680a      	ldr	r2, [r1, #0]
 800be8c:	600f      	str	r7, [r1, #0]
 800be8e:	1bd2      	subs	r2, r2, r7
 800be90:	9201      	str	r2, [sp, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	079b      	lsls	r3, r3, #30
 800be96:	d100      	bne.n	800be9a <__sflush_r+0xe2>
 800be98:	694a      	ldr	r2, [r1, #20]
 800be9a:	60a2      	str	r2, [r4, #8]
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	dc00      	bgt.n	800bea4 <__sflush_r+0xec>
 800bea2:	e795      	b.n	800bdd0 <__sflush_r+0x18>
 800bea4:	003a      	movs	r2, r7
 800bea6:	0028      	movs	r0, r5
 800bea8:	9b01      	ldr	r3, [sp, #4]
 800beaa:	6a21      	ldr	r1, [r4, #32]
 800beac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beae:	47b0      	blx	r6
 800beb0:	2800      	cmp	r0, #0
 800beb2:	dc06      	bgt.n	800bec2 <__sflush_r+0x10a>
 800beb4:	2340      	movs	r3, #64	; 0x40
 800beb6:	2001      	movs	r0, #1
 800beb8:	89a2      	ldrh	r2, [r4, #12]
 800beba:	4240      	negs	r0, r0
 800bebc:	4313      	orrs	r3, r2
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	e787      	b.n	800bdd2 <__sflush_r+0x1a>
 800bec2:	9b01      	ldr	r3, [sp, #4]
 800bec4:	183f      	adds	r7, r7, r0
 800bec6:	1a1b      	subs	r3, r3, r0
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	e7e7      	b.n	800be9c <__sflush_r+0xe4>
 800becc:	20400001 	.word	0x20400001

0800bed0 <_fflush_r>:
 800bed0:	690b      	ldr	r3, [r1, #16]
 800bed2:	b570      	push	{r4, r5, r6, lr}
 800bed4:	0005      	movs	r5, r0
 800bed6:	000c      	movs	r4, r1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d102      	bne.n	800bee2 <_fflush_r+0x12>
 800bedc:	2500      	movs	r5, #0
 800bede:	0028      	movs	r0, r5
 800bee0:	bd70      	pop	{r4, r5, r6, pc}
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d004      	beq.n	800bef0 <_fflush_r+0x20>
 800bee6:	6983      	ldr	r3, [r0, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <_fflush_r+0x20>
 800beec:	f000 f892 	bl	800c014 <__sinit>
 800bef0:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <_fflush_r+0x74>)
 800bef2:	429c      	cmp	r4, r3
 800bef4:	d11b      	bne.n	800bf2e <_fflush_r+0x5e>
 800bef6:	686c      	ldr	r4, [r5, #4]
 800bef8:	220c      	movs	r2, #12
 800befa:	5ea3      	ldrsh	r3, [r4, r2]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0ed      	beq.n	800bedc <_fflush_r+0xc>
 800bf00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf02:	07d2      	lsls	r2, r2, #31
 800bf04:	d404      	bmi.n	800bf10 <_fflush_r+0x40>
 800bf06:	059b      	lsls	r3, r3, #22
 800bf08:	d402      	bmi.n	800bf10 <_fflush_r+0x40>
 800bf0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf0c:	f000 fc9b 	bl	800c846 <__retarget_lock_acquire_recursive>
 800bf10:	0028      	movs	r0, r5
 800bf12:	0021      	movs	r1, r4
 800bf14:	f7ff ff50 	bl	800bdb8 <__sflush_r>
 800bf18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf1a:	0005      	movs	r5, r0
 800bf1c:	07db      	lsls	r3, r3, #31
 800bf1e:	d4de      	bmi.n	800bede <_fflush_r+0xe>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	059b      	lsls	r3, r3, #22
 800bf24:	d4db      	bmi.n	800bede <_fflush_r+0xe>
 800bf26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf28:	f000 fc8e 	bl	800c848 <__retarget_lock_release_recursive>
 800bf2c:	e7d7      	b.n	800bede <_fflush_r+0xe>
 800bf2e:	4b06      	ldr	r3, [pc, #24]	; (800bf48 <_fflush_r+0x78>)
 800bf30:	429c      	cmp	r4, r3
 800bf32:	d101      	bne.n	800bf38 <_fflush_r+0x68>
 800bf34:	68ac      	ldr	r4, [r5, #8]
 800bf36:	e7df      	b.n	800bef8 <_fflush_r+0x28>
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <_fflush_r+0x7c>)
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d1dc      	bne.n	800bef8 <_fflush_r+0x28>
 800bf3e:	68ec      	ldr	r4, [r5, #12]
 800bf40:	e7da      	b.n	800bef8 <_fflush_r+0x28>
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	0800ea94 	.word	0x0800ea94
 800bf48:	0800eab4 	.word	0x0800eab4
 800bf4c:	0800ea74 	.word	0x0800ea74

0800bf50 <std>:
 800bf50:	2300      	movs	r3, #0
 800bf52:	b510      	push	{r4, lr}
 800bf54:	0004      	movs	r4, r0
 800bf56:	6003      	str	r3, [r0, #0]
 800bf58:	6043      	str	r3, [r0, #4]
 800bf5a:	6083      	str	r3, [r0, #8]
 800bf5c:	8181      	strh	r1, [r0, #12]
 800bf5e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf60:	0019      	movs	r1, r3
 800bf62:	81c2      	strh	r2, [r0, #14]
 800bf64:	6103      	str	r3, [r0, #16]
 800bf66:	6143      	str	r3, [r0, #20]
 800bf68:	6183      	str	r3, [r0, #24]
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	305c      	adds	r0, #92	; 0x5c
 800bf6e:	f7fd f906 	bl	800917e <memset>
 800bf72:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <std+0x38>)
 800bf74:	6224      	str	r4, [r4, #32]
 800bf76:	6263      	str	r3, [r4, #36]	; 0x24
 800bf78:	4b04      	ldr	r3, [pc, #16]	; (800bf8c <std+0x3c>)
 800bf7a:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf7c:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <std+0x40>)
 800bf7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf80:	4b04      	ldr	r3, [pc, #16]	; (800bf94 <std+0x44>)
 800bf82:	6323      	str	r3, [r4, #48]	; 0x30
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	0800a041 	.word	0x0800a041
 800bf8c:	0800a06d 	.word	0x0800a06d
 800bf90:	0800a0a5 	.word	0x0800a0a5
 800bf94:	0800a0d1 	.word	0x0800a0d1

0800bf98 <_cleanup_r>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	4902      	ldr	r1, [pc, #8]	; (800bfa4 <_cleanup_r+0xc>)
 800bf9c:	f000 f8ba 	bl	800c114 <_fwalk_reent>
 800bfa0:	bd10      	pop	{r4, pc}
 800bfa2:	46c0      	nop			; (mov r8, r8)
 800bfa4:	0800bed1 	.word	0x0800bed1

0800bfa8 <__sfmoreglue>:
 800bfa8:	b570      	push	{r4, r5, r6, lr}
 800bfaa:	2568      	movs	r5, #104	; 0x68
 800bfac:	1e4a      	subs	r2, r1, #1
 800bfae:	4355      	muls	r5, r2
 800bfb0:	000e      	movs	r6, r1
 800bfb2:	0029      	movs	r1, r5
 800bfb4:	3174      	adds	r1, #116	; 0x74
 800bfb6:	f001 fa53 	bl	800d460 <_malloc_r>
 800bfba:	1e04      	subs	r4, r0, #0
 800bfbc:	d008      	beq.n	800bfd0 <__sfmoreglue+0x28>
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	002a      	movs	r2, r5
 800bfc2:	6001      	str	r1, [r0, #0]
 800bfc4:	6046      	str	r6, [r0, #4]
 800bfc6:	300c      	adds	r0, #12
 800bfc8:	60a0      	str	r0, [r4, #8]
 800bfca:	3268      	adds	r2, #104	; 0x68
 800bfcc:	f7fd f8d7 	bl	800917e <memset>
 800bfd0:	0020      	movs	r0, r4
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}

0800bfd4 <__sfp_lock_acquire>:
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	4802      	ldr	r0, [pc, #8]	; (800bfe0 <__sfp_lock_acquire+0xc>)
 800bfd8:	f000 fc35 	bl	800c846 <__retarget_lock_acquire_recursive>
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	46c0      	nop			; (mov r8, r8)
 800bfe0:	2000064d 	.word	0x2000064d

0800bfe4 <__sfp_lock_release>:
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	4802      	ldr	r0, [pc, #8]	; (800bff0 <__sfp_lock_release+0xc>)
 800bfe8:	f000 fc2e 	bl	800c848 <__retarget_lock_release_recursive>
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	46c0      	nop			; (mov r8, r8)
 800bff0:	2000064d 	.word	0x2000064d

0800bff4 <__sinit_lock_acquire>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	4802      	ldr	r0, [pc, #8]	; (800c000 <__sinit_lock_acquire+0xc>)
 800bff8:	f000 fc25 	bl	800c846 <__retarget_lock_acquire_recursive>
 800bffc:	bd10      	pop	{r4, pc}
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	2000064e 	.word	0x2000064e

0800c004 <__sinit_lock_release>:
 800c004:	b510      	push	{r4, lr}
 800c006:	4802      	ldr	r0, [pc, #8]	; (800c010 <__sinit_lock_release+0xc>)
 800c008:	f000 fc1e 	bl	800c848 <__retarget_lock_release_recursive>
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	2000064e 	.word	0x2000064e

0800c014 <__sinit>:
 800c014:	b513      	push	{r0, r1, r4, lr}
 800c016:	0004      	movs	r4, r0
 800c018:	f7ff ffec 	bl	800bff4 <__sinit_lock_acquire>
 800c01c:	69a3      	ldr	r3, [r4, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <__sinit+0x14>
 800c022:	f7ff ffef 	bl	800c004 <__sinit_lock_release>
 800c026:	bd13      	pop	{r0, r1, r4, pc}
 800c028:	64a3      	str	r3, [r4, #72]	; 0x48
 800c02a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c02c:	6523      	str	r3, [r4, #80]	; 0x50
 800c02e:	4b13      	ldr	r3, [pc, #76]	; (800c07c <__sinit+0x68>)
 800c030:	4a13      	ldr	r2, [pc, #76]	; (800c080 <__sinit+0x6c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	62a2      	str	r2, [r4, #40]	; 0x28
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	42a3      	cmp	r3, r4
 800c03a:	d101      	bne.n	800c040 <__sinit+0x2c>
 800c03c:	2301      	movs	r3, #1
 800c03e:	61a3      	str	r3, [r4, #24]
 800c040:	0020      	movs	r0, r4
 800c042:	f000 f81f 	bl	800c084 <__sfp>
 800c046:	6060      	str	r0, [r4, #4]
 800c048:	0020      	movs	r0, r4
 800c04a:	f000 f81b 	bl	800c084 <__sfp>
 800c04e:	60a0      	str	r0, [r4, #8]
 800c050:	0020      	movs	r0, r4
 800c052:	f000 f817 	bl	800c084 <__sfp>
 800c056:	2200      	movs	r2, #0
 800c058:	2104      	movs	r1, #4
 800c05a:	60e0      	str	r0, [r4, #12]
 800c05c:	6860      	ldr	r0, [r4, #4]
 800c05e:	f7ff ff77 	bl	800bf50 <std>
 800c062:	2201      	movs	r2, #1
 800c064:	2109      	movs	r1, #9
 800c066:	68a0      	ldr	r0, [r4, #8]
 800c068:	f7ff ff72 	bl	800bf50 <std>
 800c06c:	2202      	movs	r2, #2
 800c06e:	2112      	movs	r1, #18
 800c070:	68e0      	ldr	r0, [r4, #12]
 800c072:	f7ff ff6d 	bl	800bf50 <std>
 800c076:	2301      	movs	r3, #1
 800c078:	61a3      	str	r3, [r4, #24]
 800c07a:	e7d2      	b.n	800c022 <__sinit+0xe>
 800c07c:	0800e850 	.word	0x0800e850
 800c080:	0800bf99 	.word	0x0800bf99

0800c084 <__sfp>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	0007      	movs	r7, r0
 800c088:	f7ff ffa4 	bl	800bfd4 <__sfp_lock_acquire>
 800c08c:	4b1f      	ldr	r3, [pc, #124]	; (800c10c <__sfp+0x88>)
 800c08e:	681e      	ldr	r6, [r3, #0]
 800c090:	69b3      	ldr	r3, [r6, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <__sfp+0x18>
 800c096:	0030      	movs	r0, r6
 800c098:	f7ff ffbc 	bl	800c014 <__sinit>
 800c09c:	3648      	adds	r6, #72	; 0x48
 800c09e:	68b4      	ldr	r4, [r6, #8]
 800c0a0:	6873      	ldr	r3, [r6, #4]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	d504      	bpl.n	800c0b0 <__sfp+0x2c>
 800c0a6:	6833      	ldr	r3, [r6, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d022      	beq.n	800c0f2 <__sfp+0x6e>
 800c0ac:	6836      	ldr	r6, [r6, #0]
 800c0ae:	e7f6      	b.n	800c09e <__sfp+0x1a>
 800c0b0:	220c      	movs	r2, #12
 800c0b2:	5ea5      	ldrsh	r5, [r4, r2]
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	d11a      	bne.n	800c0ee <__sfp+0x6a>
 800c0b8:	0020      	movs	r0, r4
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <__sfp+0x8c>)
 800c0bc:	3058      	adds	r0, #88	; 0x58
 800c0be:	60e3      	str	r3, [r4, #12]
 800c0c0:	6665      	str	r5, [r4, #100]	; 0x64
 800c0c2:	f000 fbbf 	bl	800c844 <__retarget_lock_init_recursive>
 800c0c6:	f7ff ff8d 	bl	800bfe4 <__sfp_lock_release>
 800c0ca:	0020      	movs	r0, r4
 800c0cc:	2208      	movs	r2, #8
 800c0ce:	0029      	movs	r1, r5
 800c0d0:	6025      	str	r5, [r4, #0]
 800c0d2:	60a5      	str	r5, [r4, #8]
 800c0d4:	6065      	str	r5, [r4, #4]
 800c0d6:	6125      	str	r5, [r4, #16]
 800c0d8:	6165      	str	r5, [r4, #20]
 800c0da:	61a5      	str	r5, [r4, #24]
 800c0dc:	305c      	adds	r0, #92	; 0x5c
 800c0de:	f7fd f84e 	bl	800917e <memset>
 800c0e2:	6365      	str	r5, [r4, #52]	; 0x34
 800c0e4:	63a5      	str	r5, [r4, #56]	; 0x38
 800c0e6:	64a5      	str	r5, [r4, #72]	; 0x48
 800c0e8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c0ea:	0020      	movs	r0, r4
 800c0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ee:	3468      	adds	r4, #104	; 0x68
 800c0f0:	e7d7      	b.n	800c0a2 <__sfp+0x1e>
 800c0f2:	2104      	movs	r1, #4
 800c0f4:	0038      	movs	r0, r7
 800c0f6:	f7ff ff57 	bl	800bfa8 <__sfmoreglue>
 800c0fa:	1e04      	subs	r4, r0, #0
 800c0fc:	6030      	str	r0, [r6, #0]
 800c0fe:	d1d5      	bne.n	800c0ac <__sfp+0x28>
 800c100:	f7ff ff70 	bl	800bfe4 <__sfp_lock_release>
 800c104:	230c      	movs	r3, #12
 800c106:	603b      	str	r3, [r7, #0]
 800c108:	e7ef      	b.n	800c0ea <__sfp+0x66>
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	0800e850 	.word	0x0800e850
 800c110:	ffff0001 	.word	0xffff0001

0800c114 <_fwalk_reent>:
 800c114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c116:	0004      	movs	r4, r0
 800c118:	0006      	movs	r6, r0
 800c11a:	2700      	movs	r7, #0
 800c11c:	9101      	str	r1, [sp, #4]
 800c11e:	3448      	adds	r4, #72	; 0x48
 800c120:	6863      	ldr	r3, [r4, #4]
 800c122:	68a5      	ldr	r5, [r4, #8]
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	9b00      	ldr	r3, [sp, #0]
 800c128:	3b01      	subs	r3, #1
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	d504      	bpl.n	800c138 <_fwalk_reent+0x24>
 800c12e:	6824      	ldr	r4, [r4, #0]
 800c130:	2c00      	cmp	r4, #0
 800c132:	d1f5      	bne.n	800c120 <_fwalk_reent+0xc>
 800c134:	0038      	movs	r0, r7
 800c136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c138:	89ab      	ldrh	r3, [r5, #12]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d908      	bls.n	800c150 <_fwalk_reent+0x3c>
 800c13e:	220e      	movs	r2, #14
 800c140:	5eab      	ldrsh	r3, [r5, r2]
 800c142:	3301      	adds	r3, #1
 800c144:	d004      	beq.n	800c150 <_fwalk_reent+0x3c>
 800c146:	0029      	movs	r1, r5
 800c148:	0030      	movs	r0, r6
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	4798      	blx	r3
 800c14e:	4307      	orrs	r7, r0
 800c150:	3568      	adds	r5, #104	; 0x68
 800c152:	e7e8      	b.n	800c126 <_fwalk_reent+0x12>

0800c154 <rshift>:
 800c154:	0002      	movs	r2, r0
 800c156:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c158:	6904      	ldr	r4, [r0, #16]
 800c15a:	3214      	adds	r2, #20
 800c15c:	0013      	movs	r3, r2
 800c15e:	b085      	sub	sp, #20
 800c160:	114f      	asrs	r7, r1, #5
 800c162:	42bc      	cmp	r4, r7
 800c164:	dd31      	ble.n	800c1ca <rshift+0x76>
 800c166:	00bb      	lsls	r3, r7, #2
 800c168:	18d3      	adds	r3, r2, r3
 800c16a:	261f      	movs	r6, #31
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	000b      	movs	r3, r1
 800c170:	00a5      	lsls	r5, r4, #2
 800c172:	4033      	ands	r3, r6
 800c174:	1955      	adds	r5, r2, r5
 800c176:	9302      	str	r3, [sp, #8]
 800c178:	4231      	tst	r1, r6
 800c17a:	d10c      	bne.n	800c196 <rshift+0x42>
 800c17c:	0016      	movs	r6, r2
 800c17e:	9901      	ldr	r1, [sp, #4]
 800c180:	428d      	cmp	r5, r1
 800c182:	d838      	bhi.n	800c1f6 <rshift+0xa2>
 800c184:	9901      	ldr	r1, [sp, #4]
 800c186:	2300      	movs	r3, #0
 800c188:	3903      	subs	r1, #3
 800c18a:	428d      	cmp	r5, r1
 800c18c:	d301      	bcc.n	800c192 <rshift+0x3e>
 800c18e:	1be3      	subs	r3, r4, r7
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	18d3      	adds	r3, r2, r3
 800c194:	e019      	b.n	800c1ca <rshift+0x76>
 800c196:	2120      	movs	r1, #32
 800c198:	9b02      	ldr	r3, [sp, #8]
 800c19a:	9e01      	ldr	r6, [sp, #4]
 800c19c:	1acb      	subs	r3, r1, r3
 800c19e:	9303      	str	r3, [sp, #12]
 800c1a0:	ce02      	ldmia	r6!, {r1}
 800c1a2:	9b02      	ldr	r3, [sp, #8]
 800c1a4:	4694      	mov	ip, r2
 800c1a6:	40d9      	lsrs	r1, r3
 800c1a8:	9100      	str	r1, [sp, #0]
 800c1aa:	42b5      	cmp	r5, r6
 800c1ac:	d816      	bhi.n	800c1dc <rshift+0x88>
 800c1ae:	9e01      	ldr	r6, [sp, #4]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	42b5      	cmp	r5, r6
 800c1b6:	d302      	bcc.n	800c1be <rshift+0x6a>
 800c1b8:	1be3      	subs	r3, r4, r7
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	3b04      	subs	r3, #4
 800c1be:	9900      	ldr	r1, [sp, #0]
 800c1c0:	18d3      	adds	r3, r2, r3
 800c1c2:	6019      	str	r1, [r3, #0]
 800c1c4:	2900      	cmp	r1, #0
 800c1c6:	d000      	beq.n	800c1ca <rshift+0x76>
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	1a99      	subs	r1, r3, r2
 800c1cc:	1089      	asrs	r1, r1, #2
 800c1ce:	6101      	str	r1, [r0, #16]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d101      	bne.n	800c1d8 <rshift+0x84>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	6143      	str	r3, [r0, #20]
 800c1d8:	b005      	add	sp, #20
 800c1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1dc:	6833      	ldr	r3, [r6, #0]
 800c1de:	9903      	ldr	r1, [sp, #12]
 800c1e0:	408b      	lsls	r3, r1
 800c1e2:	9900      	ldr	r1, [sp, #0]
 800c1e4:	4319      	orrs	r1, r3
 800c1e6:	4663      	mov	r3, ip
 800c1e8:	c302      	stmia	r3!, {r1}
 800c1ea:	469c      	mov	ip, r3
 800c1ec:	ce02      	ldmia	r6!, {r1}
 800c1ee:	9b02      	ldr	r3, [sp, #8]
 800c1f0:	40d9      	lsrs	r1, r3
 800c1f2:	9100      	str	r1, [sp, #0]
 800c1f4:	e7d9      	b.n	800c1aa <rshift+0x56>
 800c1f6:	c908      	ldmia	r1!, {r3}
 800c1f8:	c608      	stmia	r6!, {r3}
 800c1fa:	e7c1      	b.n	800c180 <rshift+0x2c>

0800c1fc <__hexdig_fun>:
 800c1fc:	0002      	movs	r2, r0
 800c1fe:	3a30      	subs	r2, #48	; 0x30
 800c200:	0003      	movs	r3, r0
 800c202:	2a09      	cmp	r2, #9
 800c204:	d802      	bhi.n	800c20c <__hexdig_fun+0x10>
 800c206:	3b20      	subs	r3, #32
 800c208:	b2d8      	uxtb	r0, r3
 800c20a:	4770      	bx	lr
 800c20c:	0002      	movs	r2, r0
 800c20e:	3a61      	subs	r2, #97	; 0x61
 800c210:	2a05      	cmp	r2, #5
 800c212:	d801      	bhi.n	800c218 <__hexdig_fun+0x1c>
 800c214:	3b47      	subs	r3, #71	; 0x47
 800c216:	e7f7      	b.n	800c208 <__hexdig_fun+0xc>
 800c218:	001a      	movs	r2, r3
 800c21a:	3a41      	subs	r2, #65	; 0x41
 800c21c:	2000      	movs	r0, #0
 800c21e:	2a05      	cmp	r2, #5
 800c220:	d8f3      	bhi.n	800c20a <__hexdig_fun+0xe>
 800c222:	3b27      	subs	r3, #39	; 0x27
 800c224:	e7f0      	b.n	800c208 <__hexdig_fun+0xc>
	...

0800c228 <__gethex>:
 800c228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22a:	b08d      	sub	sp, #52	; 0x34
 800c22c:	930a      	str	r3, [sp, #40]	; 0x28
 800c22e:	4bbf      	ldr	r3, [pc, #764]	; (800c52c <__gethex+0x304>)
 800c230:	9005      	str	r0, [sp, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	9109      	str	r1, [sp, #36]	; 0x24
 800c236:	0018      	movs	r0, r3
 800c238:	9202      	str	r2, [sp, #8]
 800c23a:	9307      	str	r3, [sp, #28]
 800c23c:	f7f3 ff6e 	bl	800011c <strlen>
 800c240:	2202      	movs	r2, #2
 800c242:	9b07      	ldr	r3, [sp, #28]
 800c244:	4252      	negs	r2, r2
 800c246:	181b      	adds	r3, r3, r0
 800c248:	3b01      	subs	r3, #1
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	9003      	str	r0, [sp, #12]
 800c24e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c252:	6819      	ldr	r1, [r3, #0]
 800c254:	1c8b      	adds	r3, r1, #2
 800c256:	1a52      	subs	r2, r2, r1
 800c258:	18d1      	adds	r1, r2, r3
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	9108      	str	r1, [sp, #32]
 800c25e:	9901      	ldr	r1, [sp, #4]
 800c260:	3301      	adds	r3, #1
 800c262:	7808      	ldrb	r0, [r1, #0]
 800c264:	2830      	cmp	r0, #48	; 0x30
 800c266:	d0f7      	beq.n	800c258 <__gethex+0x30>
 800c268:	f7ff ffc8 	bl	800c1fc <__hexdig_fun>
 800c26c:	2300      	movs	r3, #0
 800c26e:	001c      	movs	r4, r3
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	4298      	cmp	r0, r3
 800c274:	d11f      	bne.n	800c2b6 <__gethex+0x8e>
 800c276:	9a03      	ldr	r2, [sp, #12]
 800c278:	9907      	ldr	r1, [sp, #28]
 800c27a:	9801      	ldr	r0, [sp, #4]
 800c27c:	f001 ffce 	bl	800e21c <strncmp>
 800c280:	0007      	movs	r7, r0
 800c282:	42a0      	cmp	r0, r4
 800c284:	d000      	beq.n	800c288 <__gethex+0x60>
 800c286:	e06b      	b.n	800c360 <__gethex+0x138>
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	9a03      	ldr	r2, [sp, #12]
 800c28c:	5c98      	ldrb	r0, [r3, r2]
 800c28e:	189d      	adds	r5, r3, r2
 800c290:	f7ff ffb4 	bl	800c1fc <__hexdig_fun>
 800c294:	2301      	movs	r3, #1
 800c296:	9304      	str	r3, [sp, #16]
 800c298:	42a0      	cmp	r0, r4
 800c29a:	d030      	beq.n	800c2fe <__gethex+0xd6>
 800c29c:	9501      	str	r5, [sp, #4]
 800c29e:	9b01      	ldr	r3, [sp, #4]
 800c2a0:	7818      	ldrb	r0, [r3, #0]
 800c2a2:	2830      	cmp	r0, #48	; 0x30
 800c2a4:	d009      	beq.n	800c2ba <__gethex+0x92>
 800c2a6:	f7ff ffa9 	bl	800c1fc <__hexdig_fun>
 800c2aa:	4242      	negs	r2, r0
 800c2ac:	4142      	adcs	r2, r0
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	002c      	movs	r4, r5
 800c2b2:	9204      	str	r2, [sp, #16]
 800c2b4:	9308      	str	r3, [sp, #32]
 800c2b6:	9d01      	ldr	r5, [sp, #4]
 800c2b8:	e004      	b.n	800c2c4 <__gethex+0x9c>
 800c2ba:	9b01      	ldr	r3, [sp, #4]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	e7ed      	b.n	800c29e <__gethex+0x76>
 800c2c2:	3501      	adds	r5, #1
 800c2c4:	7828      	ldrb	r0, [r5, #0]
 800c2c6:	f7ff ff99 	bl	800c1fc <__hexdig_fun>
 800c2ca:	1e07      	subs	r7, r0, #0
 800c2cc:	d1f9      	bne.n	800c2c2 <__gethex+0x9a>
 800c2ce:	0028      	movs	r0, r5
 800c2d0:	9a03      	ldr	r2, [sp, #12]
 800c2d2:	9907      	ldr	r1, [sp, #28]
 800c2d4:	f001 ffa2 	bl	800e21c <strncmp>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d10e      	bne.n	800c2fa <__gethex+0xd2>
 800c2dc:	2c00      	cmp	r4, #0
 800c2de:	d107      	bne.n	800c2f0 <__gethex+0xc8>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	18ed      	adds	r5, r5, r3
 800c2e4:	002c      	movs	r4, r5
 800c2e6:	7828      	ldrb	r0, [r5, #0]
 800c2e8:	f7ff ff88 	bl	800c1fc <__hexdig_fun>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d102      	bne.n	800c2f6 <__gethex+0xce>
 800c2f0:	1b64      	subs	r4, r4, r5
 800c2f2:	00a7      	lsls	r7, r4, #2
 800c2f4:	e003      	b.n	800c2fe <__gethex+0xd6>
 800c2f6:	3501      	adds	r5, #1
 800c2f8:	e7f5      	b.n	800c2e6 <__gethex+0xbe>
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	d1f8      	bne.n	800c2f0 <__gethex+0xc8>
 800c2fe:	2220      	movs	r2, #32
 800c300:	782b      	ldrb	r3, [r5, #0]
 800c302:	002e      	movs	r6, r5
 800c304:	4393      	bics	r3, r2
 800c306:	2b50      	cmp	r3, #80	; 0x50
 800c308:	d11d      	bne.n	800c346 <__gethex+0x11e>
 800c30a:	786b      	ldrb	r3, [r5, #1]
 800c30c:	2b2b      	cmp	r3, #43	; 0x2b
 800c30e:	d02c      	beq.n	800c36a <__gethex+0x142>
 800c310:	2b2d      	cmp	r3, #45	; 0x2d
 800c312:	d02e      	beq.n	800c372 <__gethex+0x14a>
 800c314:	2300      	movs	r3, #0
 800c316:	1c6e      	adds	r6, r5, #1
 800c318:	9306      	str	r3, [sp, #24]
 800c31a:	7830      	ldrb	r0, [r6, #0]
 800c31c:	f7ff ff6e 	bl	800c1fc <__hexdig_fun>
 800c320:	1e43      	subs	r3, r0, #1
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b18      	cmp	r3, #24
 800c326:	d82b      	bhi.n	800c380 <__gethex+0x158>
 800c328:	3810      	subs	r0, #16
 800c32a:	0004      	movs	r4, r0
 800c32c:	7870      	ldrb	r0, [r6, #1]
 800c32e:	f7ff ff65 	bl	800c1fc <__hexdig_fun>
 800c332:	1e43      	subs	r3, r0, #1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	3601      	adds	r6, #1
 800c338:	2b18      	cmp	r3, #24
 800c33a:	d91c      	bls.n	800c376 <__gethex+0x14e>
 800c33c:	9b06      	ldr	r3, [sp, #24]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d000      	beq.n	800c344 <__gethex+0x11c>
 800c342:	4264      	negs	r4, r4
 800c344:	193f      	adds	r7, r7, r4
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	601e      	str	r6, [r3, #0]
 800c34a:	9b04      	ldr	r3, [sp, #16]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d019      	beq.n	800c384 <__gethex+0x15c>
 800c350:	2600      	movs	r6, #0
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	42b3      	cmp	r3, r6
 800c356:	d100      	bne.n	800c35a <__gethex+0x132>
 800c358:	3606      	adds	r6, #6
 800c35a:	0030      	movs	r0, r6
 800c35c:	b00d      	add	sp, #52	; 0x34
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c360:	2301      	movs	r3, #1
 800c362:	2700      	movs	r7, #0
 800c364:	9d01      	ldr	r5, [sp, #4]
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	e7c9      	b.n	800c2fe <__gethex+0xd6>
 800c36a:	2300      	movs	r3, #0
 800c36c:	9306      	str	r3, [sp, #24]
 800c36e:	1cae      	adds	r6, r5, #2
 800c370:	e7d3      	b.n	800c31a <__gethex+0xf2>
 800c372:	2301      	movs	r3, #1
 800c374:	e7fa      	b.n	800c36c <__gethex+0x144>
 800c376:	230a      	movs	r3, #10
 800c378:	435c      	muls	r4, r3
 800c37a:	1824      	adds	r4, r4, r0
 800c37c:	3c10      	subs	r4, #16
 800c37e:	e7d5      	b.n	800c32c <__gethex+0x104>
 800c380:	002e      	movs	r6, r5
 800c382:	e7e0      	b.n	800c346 <__gethex+0x11e>
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	9904      	ldr	r1, [sp, #16]
 800c388:	1aeb      	subs	r3, r5, r3
 800c38a:	3b01      	subs	r3, #1
 800c38c:	2b07      	cmp	r3, #7
 800c38e:	dc0a      	bgt.n	800c3a6 <__gethex+0x17e>
 800c390:	9805      	ldr	r0, [sp, #20]
 800c392:	f000 fb03 	bl	800c99c <_Balloc>
 800c396:	1e04      	subs	r4, r0, #0
 800c398:	d108      	bne.n	800c3ac <__gethex+0x184>
 800c39a:	0002      	movs	r2, r0
 800c39c:	21de      	movs	r1, #222	; 0xde
 800c39e:	4b64      	ldr	r3, [pc, #400]	; (800c530 <__gethex+0x308>)
 800c3a0:	4864      	ldr	r0, [pc, #400]	; (800c534 <__gethex+0x30c>)
 800c3a2:	f002 f827 	bl	800e3f4 <__assert_func>
 800c3a6:	3101      	adds	r1, #1
 800c3a8:	105b      	asrs	r3, r3, #1
 800c3aa:	e7ef      	b.n	800c38c <__gethex+0x164>
 800c3ac:	0003      	movs	r3, r0
 800c3ae:	3314      	adds	r3, #20
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	001e      	movs	r6, r3
 800c3b8:	9306      	str	r3, [sp, #24]
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	42ab      	cmp	r3, r5
 800c3be:	d340      	bcc.n	800c442 <__gethex+0x21a>
 800c3c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c3c2:	9b04      	ldr	r3, [sp, #16]
 800c3c4:	c540      	stmia	r5!, {r6}
 800c3c6:	1aed      	subs	r5, r5, r3
 800c3c8:	10ad      	asrs	r5, r5, #2
 800c3ca:	0030      	movs	r0, r6
 800c3cc:	6125      	str	r5, [r4, #16]
 800c3ce:	f000 fbdd 	bl	800cb8c <__hi0bits>
 800c3d2:	9b02      	ldr	r3, [sp, #8]
 800c3d4:	016d      	lsls	r5, r5, #5
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	1a2e      	subs	r6, r5, r0
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	429e      	cmp	r6, r3
 800c3de:	dd5a      	ble.n	800c496 <__gethex+0x26e>
 800c3e0:	1af6      	subs	r6, r6, r3
 800c3e2:	0031      	movs	r1, r6
 800c3e4:	0020      	movs	r0, r4
 800c3e6:	f000 ff7f 	bl	800d2e8 <__any_on>
 800c3ea:	1e05      	subs	r5, r0, #0
 800c3ec:	d016      	beq.n	800c41c <__gethex+0x1f4>
 800c3ee:	2501      	movs	r5, #1
 800c3f0:	211f      	movs	r1, #31
 800c3f2:	0028      	movs	r0, r5
 800c3f4:	1e73      	subs	r3, r6, #1
 800c3f6:	4019      	ands	r1, r3
 800c3f8:	4088      	lsls	r0, r1
 800c3fa:	0001      	movs	r1, r0
 800c3fc:	115a      	asrs	r2, r3, #5
 800c3fe:	9804      	ldr	r0, [sp, #16]
 800c400:	0092      	lsls	r2, r2, #2
 800c402:	5812      	ldr	r2, [r2, r0]
 800c404:	420a      	tst	r2, r1
 800c406:	d009      	beq.n	800c41c <__gethex+0x1f4>
 800c408:	42ab      	cmp	r3, r5
 800c40a:	dd06      	ble.n	800c41a <__gethex+0x1f2>
 800c40c:	0020      	movs	r0, r4
 800c40e:	1eb1      	subs	r1, r6, #2
 800c410:	f000 ff6a 	bl	800d2e8 <__any_on>
 800c414:	3502      	adds	r5, #2
 800c416:	2800      	cmp	r0, #0
 800c418:	d100      	bne.n	800c41c <__gethex+0x1f4>
 800c41a:	2502      	movs	r5, #2
 800c41c:	0031      	movs	r1, r6
 800c41e:	0020      	movs	r0, r4
 800c420:	f7ff fe98 	bl	800c154 <rshift>
 800c424:	19bf      	adds	r7, r7, r6
 800c426:	9b02      	ldr	r3, [sp, #8]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	9303      	str	r3, [sp, #12]
 800c42c:	42bb      	cmp	r3, r7
 800c42e:	da42      	bge.n	800c4b6 <__gethex+0x28e>
 800c430:	0021      	movs	r1, r4
 800c432:	9805      	ldr	r0, [sp, #20]
 800c434:	f000 faf6 	bl	800ca24 <_Bfree>
 800c438:	2300      	movs	r3, #0
 800c43a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c43c:	26a3      	movs	r6, #163	; 0xa3
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	e78b      	b.n	800c35a <__gethex+0x132>
 800c442:	1e6b      	subs	r3, r5, #1
 800c444:	9308      	str	r3, [sp, #32]
 800c446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d014      	beq.n	800c478 <__gethex+0x250>
 800c44e:	9b06      	ldr	r3, [sp, #24]
 800c450:	2b20      	cmp	r3, #32
 800c452:	d104      	bne.n	800c45e <__gethex+0x236>
 800c454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c456:	c340      	stmia	r3!, {r6}
 800c458:	2600      	movs	r6, #0
 800c45a:	9309      	str	r3, [sp, #36]	; 0x24
 800c45c:	9606      	str	r6, [sp, #24]
 800c45e:	9b08      	ldr	r3, [sp, #32]
 800c460:	7818      	ldrb	r0, [r3, #0]
 800c462:	f7ff fecb 	bl	800c1fc <__hexdig_fun>
 800c466:	230f      	movs	r3, #15
 800c468:	4018      	ands	r0, r3
 800c46a:	9b06      	ldr	r3, [sp, #24]
 800c46c:	9d08      	ldr	r5, [sp, #32]
 800c46e:	4098      	lsls	r0, r3
 800c470:	3304      	adds	r3, #4
 800c472:	4306      	orrs	r6, r0
 800c474:	9306      	str	r3, [sp, #24]
 800c476:	e7a0      	b.n	800c3ba <__gethex+0x192>
 800c478:	2301      	movs	r3, #1
 800c47a:	9a03      	ldr	r2, [sp, #12]
 800c47c:	1a9d      	subs	r5, r3, r2
 800c47e:	9b08      	ldr	r3, [sp, #32]
 800c480:	195d      	adds	r5, r3, r5
 800c482:	9b01      	ldr	r3, [sp, #4]
 800c484:	429d      	cmp	r5, r3
 800c486:	d3e2      	bcc.n	800c44e <__gethex+0x226>
 800c488:	0028      	movs	r0, r5
 800c48a:	9907      	ldr	r1, [sp, #28]
 800c48c:	f001 fec6 	bl	800e21c <strncmp>
 800c490:	2800      	cmp	r0, #0
 800c492:	d1dc      	bne.n	800c44e <__gethex+0x226>
 800c494:	e791      	b.n	800c3ba <__gethex+0x192>
 800c496:	9b01      	ldr	r3, [sp, #4]
 800c498:	2500      	movs	r5, #0
 800c49a:	429e      	cmp	r6, r3
 800c49c:	dac3      	bge.n	800c426 <__gethex+0x1fe>
 800c49e:	1b9e      	subs	r6, r3, r6
 800c4a0:	0021      	movs	r1, r4
 800c4a2:	0032      	movs	r2, r6
 800c4a4:	9805      	ldr	r0, [sp, #20]
 800c4a6:	f000 fcdb 	bl	800ce60 <__lshift>
 800c4aa:	0003      	movs	r3, r0
 800c4ac:	3314      	adds	r3, #20
 800c4ae:	0004      	movs	r4, r0
 800c4b0:	1bbf      	subs	r7, r7, r6
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	e7b7      	b.n	800c426 <__gethex+0x1fe>
 800c4b6:	9b02      	ldr	r3, [sp, #8]
 800c4b8:	685e      	ldr	r6, [r3, #4]
 800c4ba:	42be      	cmp	r6, r7
 800c4bc:	dd71      	ble.n	800c5a2 <__gethex+0x37a>
 800c4be:	9b01      	ldr	r3, [sp, #4]
 800c4c0:	1bf6      	subs	r6, r6, r7
 800c4c2:	42b3      	cmp	r3, r6
 800c4c4:	dc38      	bgt.n	800c538 <__gethex+0x310>
 800c4c6:	9b02      	ldr	r3, [sp, #8]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d026      	beq.n	800c51c <__gethex+0x2f4>
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d028      	beq.n	800c524 <__gethex+0x2fc>
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d119      	bne.n	800c50a <__gethex+0x2e2>
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	42b3      	cmp	r3, r6
 800c4da:	d116      	bne.n	800c50a <__gethex+0x2e2>
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10d      	bne.n	800c4fc <__gethex+0x2d4>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	2662      	movs	r6, #98	; 0x62
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	9a01      	ldr	r2, [sp, #4]
 800c4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	9a04      	ldr	r2, [sp, #16]
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4f8:	601c      	str	r4, [r3, #0]
 800c4fa:	e72e      	b.n	800c35a <__gethex+0x132>
 800c4fc:	9901      	ldr	r1, [sp, #4]
 800c4fe:	0020      	movs	r0, r4
 800c500:	3901      	subs	r1, #1
 800c502:	f000 fef1 	bl	800d2e8 <__any_on>
 800c506:	2800      	cmp	r0, #0
 800c508:	d1ea      	bne.n	800c4e0 <__gethex+0x2b8>
 800c50a:	0021      	movs	r1, r4
 800c50c:	9805      	ldr	r0, [sp, #20]
 800c50e:	f000 fa89 	bl	800ca24 <_Bfree>
 800c512:	2300      	movs	r3, #0
 800c514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c516:	2650      	movs	r6, #80	; 0x50
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	e71e      	b.n	800c35a <__gethex+0x132>
 800c51c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1f3      	bne.n	800c50a <__gethex+0x2e2>
 800c522:	e7dd      	b.n	800c4e0 <__gethex+0x2b8>
 800c524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1da      	bne.n	800c4e0 <__gethex+0x2b8>
 800c52a:	e7ee      	b.n	800c50a <__gethex+0x2e2>
 800c52c:	0800eb3c 	.word	0x0800eb3c
 800c530:	0800ea60 	.word	0x0800ea60
 800c534:	0800ead4 	.word	0x0800ead4
 800c538:	1e77      	subs	r7, r6, #1
 800c53a:	2d00      	cmp	r5, #0
 800c53c:	d12f      	bne.n	800c59e <__gethex+0x376>
 800c53e:	2f00      	cmp	r7, #0
 800c540:	d004      	beq.n	800c54c <__gethex+0x324>
 800c542:	0039      	movs	r1, r7
 800c544:	0020      	movs	r0, r4
 800c546:	f000 fecf 	bl	800d2e8 <__any_on>
 800c54a:	0005      	movs	r5, r0
 800c54c:	231f      	movs	r3, #31
 800c54e:	117a      	asrs	r2, r7, #5
 800c550:	401f      	ands	r7, r3
 800c552:	3b1e      	subs	r3, #30
 800c554:	40bb      	lsls	r3, r7
 800c556:	9904      	ldr	r1, [sp, #16]
 800c558:	0092      	lsls	r2, r2, #2
 800c55a:	5852      	ldr	r2, [r2, r1]
 800c55c:	421a      	tst	r2, r3
 800c55e:	d001      	beq.n	800c564 <__gethex+0x33c>
 800c560:	2302      	movs	r3, #2
 800c562:	431d      	orrs	r5, r3
 800c564:	9b01      	ldr	r3, [sp, #4]
 800c566:	0031      	movs	r1, r6
 800c568:	1b9b      	subs	r3, r3, r6
 800c56a:	2602      	movs	r6, #2
 800c56c:	0020      	movs	r0, r4
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	f7ff fdf0 	bl	800c154 <rshift>
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	685f      	ldr	r7, [r3, #4]
 800c578:	2d00      	cmp	r5, #0
 800c57a:	d041      	beq.n	800c600 <__gethex+0x3d8>
 800c57c:	9b02      	ldr	r3, [sp, #8]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d010      	beq.n	800c5a6 <__gethex+0x37e>
 800c584:	2b03      	cmp	r3, #3
 800c586:	d012      	beq.n	800c5ae <__gethex+0x386>
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d106      	bne.n	800c59a <__gethex+0x372>
 800c58c:	07aa      	lsls	r2, r5, #30
 800c58e:	d504      	bpl.n	800c59a <__gethex+0x372>
 800c590:	9a04      	ldr	r2, [sp, #16]
 800c592:	6810      	ldr	r0, [r2, #0]
 800c594:	4305      	orrs	r5, r0
 800c596:	421d      	tst	r5, r3
 800c598:	d10c      	bne.n	800c5b4 <__gethex+0x38c>
 800c59a:	2310      	movs	r3, #16
 800c59c:	e02f      	b.n	800c5fe <__gethex+0x3d6>
 800c59e:	2501      	movs	r5, #1
 800c5a0:	e7d4      	b.n	800c54c <__gethex+0x324>
 800c5a2:	2601      	movs	r6, #1
 800c5a4:	e7e8      	b.n	800c578 <__gethex+0x350>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5aa:	1a9b      	subs	r3, r3, r2
 800c5ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800c5ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0f2      	beq.n	800c59a <__gethex+0x372>
 800c5b4:	6923      	ldr	r3, [r4, #16]
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	0023      	movs	r3, r4
 800c5c0:	9a04      	ldr	r2, [sp, #16]
 800c5c2:	3314      	adds	r3, #20
 800c5c4:	1899      	adds	r1, r3, r2
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	1c55      	adds	r5, r2, #1
 800c5ca:	d01e      	beq.n	800c60a <__gethex+0x3e2>
 800c5cc:	3201      	adds	r2, #1
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	0023      	movs	r3, r4
 800c5d2:	3314      	adds	r3, #20
 800c5d4:	2e02      	cmp	r6, #2
 800c5d6:	d140      	bne.n	800c65a <__gethex+0x432>
 800c5d8:	9a02      	ldr	r2, [sp, #8]
 800c5da:	9901      	ldr	r1, [sp, #4]
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	3a01      	subs	r2, #1
 800c5e0:	428a      	cmp	r2, r1
 800c5e2:	d10b      	bne.n	800c5fc <__gethex+0x3d4>
 800c5e4:	114a      	asrs	r2, r1, #5
 800c5e6:	211f      	movs	r1, #31
 800c5e8:	9801      	ldr	r0, [sp, #4]
 800c5ea:	0092      	lsls	r2, r2, #2
 800c5ec:	4001      	ands	r1, r0
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	0005      	movs	r5, r0
 800c5f2:	408d      	lsls	r5, r1
 800c5f4:	58d3      	ldr	r3, [r2, r3]
 800c5f6:	422b      	tst	r3, r5
 800c5f8:	d000      	beq.n	800c5fc <__gethex+0x3d4>
 800c5fa:	2601      	movs	r6, #1
 800c5fc:	2320      	movs	r3, #32
 800c5fe:	431e      	orrs	r6, r3
 800c600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c602:	601c      	str	r4, [r3, #0]
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	601f      	str	r7, [r3, #0]
 800c608:	e6a7      	b.n	800c35a <__gethex+0x132>
 800c60a:	c301      	stmia	r3!, {r0}
 800c60c:	4299      	cmp	r1, r3
 800c60e:	d8da      	bhi.n	800c5c6 <__gethex+0x39e>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	68a2      	ldr	r2, [r4, #8]
 800c614:	4293      	cmp	r3, r2
 800c616:	db17      	blt.n	800c648 <__gethex+0x420>
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	9805      	ldr	r0, [sp, #20]
 800c61c:	1c59      	adds	r1, r3, #1
 800c61e:	f000 f9bd 	bl	800c99c <_Balloc>
 800c622:	1e05      	subs	r5, r0, #0
 800c624:	d103      	bne.n	800c62e <__gethex+0x406>
 800c626:	0002      	movs	r2, r0
 800c628:	2184      	movs	r1, #132	; 0x84
 800c62a:	4b1c      	ldr	r3, [pc, #112]	; (800c69c <__gethex+0x474>)
 800c62c:	e6b8      	b.n	800c3a0 <__gethex+0x178>
 800c62e:	0021      	movs	r1, r4
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	310c      	adds	r1, #12
 800c634:	1c9a      	adds	r2, r3, #2
 800c636:	0092      	lsls	r2, r2, #2
 800c638:	300c      	adds	r0, #12
 800c63a:	f7fc fd97 	bl	800916c <memcpy>
 800c63e:	0021      	movs	r1, r4
 800c640:	9805      	ldr	r0, [sp, #20]
 800c642:	f000 f9ef 	bl	800ca24 <_Bfree>
 800c646:	002c      	movs	r4, r5
 800c648:	6923      	ldr	r3, [r4, #16]
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	6122      	str	r2, [r4, #16]
 800c64e:	2201      	movs	r2, #1
 800c650:	3304      	adds	r3, #4
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	18e3      	adds	r3, r4, r3
 800c656:	605a      	str	r2, [r3, #4]
 800c658:	e7ba      	b.n	800c5d0 <__gethex+0x3a8>
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	9903      	ldr	r1, [sp, #12]
 800c65e:	428a      	cmp	r2, r1
 800c660:	dd09      	ble.n	800c676 <__gethex+0x44e>
 800c662:	2101      	movs	r1, #1
 800c664:	0020      	movs	r0, r4
 800c666:	f7ff fd75 	bl	800c154 <rshift>
 800c66a:	9b02      	ldr	r3, [sp, #8]
 800c66c:	3701      	adds	r7, #1
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	42bb      	cmp	r3, r7
 800c672:	dac2      	bge.n	800c5fa <__gethex+0x3d2>
 800c674:	e6dc      	b.n	800c430 <__gethex+0x208>
 800c676:	221f      	movs	r2, #31
 800c678:	9d01      	ldr	r5, [sp, #4]
 800c67a:	9901      	ldr	r1, [sp, #4]
 800c67c:	2601      	movs	r6, #1
 800c67e:	4015      	ands	r5, r2
 800c680:	4211      	tst	r1, r2
 800c682:	d0bb      	beq.n	800c5fc <__gethex+0x3d4>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	189b      	adds	r3, r3, r2
 800c688:	3b04      	subs	r3, #4
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	f000 fa7e 	bl	800cb8c <__hi0bits>
 800c690:	2320      	movs	r3, #32
 800c692:	1b5d      	subs	r5, r3, r5
 800c694:	42a8      	cmp	r0, r5
 800c696:	dbe4      	blt.n	800c662 <__gethex+0x43a>
 800c698:	e7b0      	b.n	800c5fc <__gethex+0x3d4>
 800c69a:	46c0      	nop			; (mov r8, r8)
 800c69c:	0800ea60 	.word	0x0800ea60

0800c6a0 <L_shift>:
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	b570      	push	{r4, r5, r6, lr}
 800c6a4:	2520      	movs	r5, #32
 800c6a6:	1a9a      	subs	r2, r3, r2
 800c6a8:	0092      	lsls	r2, r2, #2
 800c6aa:	1aad      	subs	r5, r5, r2
 800c6ac:	6843      	ldr	r3, [r0, #4]
 800c6ae:	6806      	ldr	r6, [r0, #0]
 800c6b0:	001c      	movs	r4, r3
 800c6b2:	40ac      	lsls	r4, r5
 800c6b4:	40d3      	lsrs	r3, r2
 800c6b6:	4334      	orrs	r4, r6
 800c6b8:	6004      	str	r4, [r0, #0]
 800c6ba:	6043      	str	r3, [r0, #4]
 800c6bc:	3004      	adds	r0, #4
 800c6be:	4288      	cmp	r0, r1
 800c6c0:	d3f4      	bcc.n	800c6ac <L_shift+0xc>
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}

0800c6c4 <__match>:
 800c6c4:	b530      	push	{r4, r5, lr}
 800c6c6:	6803      	ldr	r3, [r0, #0]
 800c6c8:	780c      	ldrb	r4, [r1, #0]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	2c00      	cmp	r4, #0
 800c6ce:	d102      	bne.n	800c6d6 <__match+0x12>
 800c6d0:	6003      	str	r3, [r0, #0]
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	bd30      	pop	{r4, r5, pc}
 800c6d6:	781a      	ldrb	r2, [r3, #0]
 800c6d8:	0015      	movs	r5, r2
 800c6da:	3d41      	subs	r5, #65	; 0x41
 800c6dc:	2d19      	cmp	r5, #25
 800c6de:	d800      	bhi.n	800c6e2 <__match+0x1e>
 800c6e0:	3220      	adds	r2, #32
 800c6e2:	3101      	adds	r1, #1
 800c6e4:	42a2      	cmp	r2, r4
 800c6e6:	d0ef      	beq.n	800c6c8 <__match+0x4>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e7f3      	b.n	800c6d4 <__match+0x10>

0800c6ec <__hexnan>:
 800c6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ee:	680b      	ldr	r3, [r1, #0]
 800c6f0:	b08b      	sub	sp, #44	; 0x2c
 800c6f2:	9201      	str	r2, [sp, #4]
 800c6f4:	9901      	ldr	r1, [sp, #4]
 800c6f6:	115a      	asrs	r2, r3, #5
 800c6f8:	0092      	lsls	r2, r2, #2
 800c6fa:	188a      	adds	r2, r1, r2
 800c6fc:	9202      	str	r2, [sp, #8]
 800c6fe:	0019      	movs	r1, r3
 800c700:	221f      	movs	r2, #31
 800c702:	4011      	ands	r1, r2
 800c704:	9008      	str	r0, [sp, #32]
 800c706:	9106      	str	r1, [sp, #24]
 800c708:	4213      	tst	r3, r2
 800c70a:	d002      	beq.n	800c712 <__hexnan+0x26>
 800c70c:	9b02      	ldr	r3, [sp, #8]
 800c70e:	3304      	adds	r3, #4
 800c710:	9302      	str	r3, [sp, #8]
 800c712:	9b02      	ldr	r3, [sp, #8]
 800c714:	2500      	movs	r5, #0
 800c716:	1f1e      	subs	r6, r3, #4
 800c718:	0037      	movs	r7, r6
 800c71a:	0034      	movs	r4, r6
 800c71c:	9b08      	ldr	r3, [sp, #32]
 800c71e:	6035      	str	r5, [r6, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	9507      	str	r5, [sp, #28]
 800c724:	9305      	str	r3, [sp, #20]
 800c726:	9503      	str	r5, [sp, #12]
 800c728:	9b05      	ldr	r3, [sp, #20]
 800c72a:	3301      	adds	r3, #1
 800c72c:	9309      	str	r3, [sp, #36]	; 0x24
 800c72e:	9b05      	ldr	r3, [sp, #20]
 800c730:	785b      	ldrb	r3, [r3, #1]
 800c732:	9304      	str	r3, [sp, #16]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d028      	beq.n	800c78a <__hexnan+0x9e>
 800c738:	9804      	ldr	r0, [sp, #16]
 800c73a:	f7ff fd5f 	bl	800c1fc <__hexdig_fun>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d154      	bne.n	800c7ec <__hexnan+0x100>
 800c742:	9b04      	ldr	r3, [sp, #16]
 800c744:	2b20      	cmp	r3, #32
 800c746:	d819      	bhi.n	800c77c <__hexnan+0x90>
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	dd12      	ble.n	800c776 <__hexnan+0x8a>
 800c750:	42bc      	cmp	r4, r7
 800c752:	d206      	bcs.n	800c762 <__hexnan+0x76>
 800c754:	2d07      	cmp	r5, #7
 800c756:	dc04      	bgt.n	800c762 <__hexnan+0x76>
 800c758:	002a      	movs	r2, r5
 800c75a:	0039      	movs	r1, r7
 800c75c:	0020      	movs	r0, r4
 800c75e:	f7ff ff9f 	bl	800c6a0 <L_shift>
 800c762:	9b01      	ldr	r3, [sp, #4]
 800c764:	2508      	movs	r5, #8
 800c766:	429c      	cmp	r4, r3
 800c768:	d905      	bls.n	800c776 <__hexnan+0x8a>
 800c76a:	1f27      	subs	r7, r4, #4
 800c76c:	2500      	movs	r5, #0
 800c76e:	003c      	movs	r4, r7
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	603d      	str	r5, [r7, #0]
 800c774:	9307      	str	r3, [sp, #28]
 800c776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	e7d5      	b.n	800c728 <__hexnan+0x3c>
 800c77c:	9b04      	ldr	r3, [sp, #16]
 800c77e:	2b29      	cmp	r3, #41	; 0x29
 800c780:	d159      	bne.n	800c836 <__hexnan+0x14a>
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	9a08      	ldr	r2, [sp, #32]
 800c786:	3302      	adds	r3, #2
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	9b03      	ldr	r3, [sp, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d052      	beq.n	800c836 <__hexnan+0x14a>
 800c790:	42bc      	cmp	r4, r7
 800c792:	d206      	bcs.n	800c7a2 <__hexnan+0xb6>
 800c794:	2d07      	cmp	r5, #7
 800c796:	dc04      	bgt.n	800c7a2 <__hexnan+0xb6>
 800c798:	002a      	movs	r2, r5
 800c79a:	0039      	movs	r1, r7
 800c79c:	0020      	movs	r0, r4
 800c79e:	f7ff ff7f 	bl	800c6a0 <L_shift>
 800c7a2:	9b01      	ldr	r3, [sp, #4]
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	d935      	bls.n	800c814 <__hexnan+0x128>
 800c7a8:	001a      	movs	r2, r3
 800c7aa:	0023      	movs	r3, r4
 800c7ac:	cb02      	ldmia	r3!, {r1}
 800c7ae:	c202      	stmia	r2!, {r1}
 800c7b0:	429e      	cmp	r6, r3
 800c7b2:	d2fb      	bcs.n	800c7ac <__hexnan+0xc0>
 800c7b4:	9b02      	ldr	r3, [sp, #8]
 800c7b6:	1c61      	adds	r1, r4, #1
 800c7b8:	1eda      	subs	r2, r3, #3
 800c7ba:	2304      	movs	r3, #4
 800c7bc:	4291      	cmp	r1, r2
 800c7be:	d805      	bhi.n	800c7cc <__hexnan+0xe0>
 800c7c0:	9b02      	ldr	r3, [sp, #8]
 800c7c2:	3b04      	subs	r3, #4
 800c7c4:	1b1b      	subs	r3, r3, r4
 800c7c6:	089b      	lsrs	r3, r3, #2
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	9a01      	ldr	r2, [sp, #4]
 800c7ce:	18d3      	adds	r3, r2, r3
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	c304      	stmia	r3!, {r2}
 800c7d4:	429e      	cmp	r6, r3
 800c7d6:	d2fc      	bcs.n	800c7d2 <__hexnan+0xe6>
 800c7d8:	6833      	ldr	r3, [r6, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d104      	bne.n	800c7e8 <__hexnan+0xfc>
 800c7de:	9b01      	ldr	r3, [sp, #4]
 800c7e0:	429e      	cmp	r6, r3
 800c7e2:	d126      	bne.n	800c832 <__hexnan+0x146>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	6033      	str	r3, [r6, #0]
 800c7e8:	2005      	movs	r0, #5
 800c7ea:	e025      	b.n	800c838 <__hexnan+0x14c>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	3501      	adds	r5, #1
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	9303      	str	r3, [sp, #12]
 800c7f4:	2d08      	cmp	r5, #8
 800c7f6:	dd06      	ble.n	800c806 <__hexnan+0x11a>
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	429c      	cmp	r4, r3
 800c7fc:	d9bb      	bls.n	800c776 <__hexnan+0x8a>
 800c7fe:	2300      	movs	r3, #0
 800c800:	2501      	movs	r5, #1
 800c802:	3c04      	subs	r4, #4
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	220f      	movs	r2, #15
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	4010      	ands	r0, r2
 800c80c:	011b      	lsls	r3, r3, #4
 800c80e:	4318      	orrs	r0, r3
 800c810:	6020      	str	r0, [r4, #0]
 800c812:	e7b0      	b.n	800c776 <__hexnan+0x8a>
 800c814:	9b06      	ldr	r3, [sp, #24]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d0de      	beq.n	800c7d8 <__hexnan+0xec>
 800c81a:	2120      	movs	r1, #32
 800c81c:	9a06      	ldr	r2, [sp, #24]
 800c81e:	9b02      	ldr	r3, [sp, #8]
 800c820:	1a89      	subs	r1, r1, r2
 800c822:	2201      	movs	r2, #1
 800c824:	4252      	negs	r2, r2
 800c826:	40ca      	lsrs	r2, r1
 800c828:	3b04      	subs	r3, #4
 800c82a:	6819      	ldr	r1, [r3, #0]
 800c82c:	400a      	ands	r2, r1
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	e7d2      	b.n	800c7d8 <__hexnan+0xec>
 800c832:	3e04      	subs	r6, #4
 800c834:	e7d0      	b.n	800c7d8 <__hexnan+0xec>
 800c836:	2004      	movs	r0, #4
 800c838:	b00b      	add	sp, #44	; 0x2c
 800c83a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c83c <_localeconv_r>:
 800c83c:	4800      	ldr	r0, [pc, #0]	; (800c840 <_localeconv_r+0x4>)
 800c83e:	4770      	bx	lr
 800c840:	20000190 	.word	0x20000190

0800c844 <__retarget_lock_init_recursive>:
 800c844:	4770      	bx	lr

0800c846 <__retarget_lock_acquire_recursive>:
 800c846:	4770      	bx	lr

0800c848 <__retarget_lock_release_recursive>:
 800c848:	4770      	bx	lr
	...

0800c84c <_lseek_r>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	0004      	movs	r4, r0
 800c850:	0008      	movs	r0, r1
 800c852:	0011      	movs	r1, r2
 800c854:	001a      	movs	r2, r3
 800c856:	2300      	movs	r3, #0
 800c858:	4d05      	ldr	r5, [pc, #20]	; (800c870 <_lseek_r+0x24>)
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f7f7 fb12 	bl	8003e84 <_lseek>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d103      	bne.n	800c86c <_lseek_r+0x20>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d000      	beq.n	800c86c <_lseek_r+0x20>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	bd70      	pop	{r4, r5, r6, pc}
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	20000658 	.word	0x20000658

0800c874 <__swhatbuf_r>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	000e      	movs	r6, r1
 800c878:	001d      	movs	r5, r3
 800c87a:	230e      	movs	r3, #14
 800c87c:	5ec9      	ldrsh	r1, [r1, r3]
 800c87e:	0014      	movs	r4, r2
 800c880:	b096      	sub	sp, #88	; 0x58
 800c882:	2900      	cmp	r1, #0
 800c884:	da08      	bge.n	800c898 <__swhatbuf_r+0x24>
 800c886:	220c      	movs	r2, #12
 800c888:	5eb3      	ldrsh	r3, [r6, r2]
 800c88a:	2200      	movs	r2, #0
 800c88c:	602a      	str	r2, [r5, #0]
 800c88e:	061b      	lsls	r3, r3, #24
 800c890:	d411      	bmi.n	800c8b6 <__swhatbuf_r+0x42>
 800c892:	2380      	movs	r3, #128	; 0x80
 800c894:	00db      	lsls	r3, r3, #3
 800c896:	e00f      	b.n	800c8b8 <__swhatbuf_r+0x44>
 800c898:	466a      	mov	r2, sp
 800c89a:	f001 fdd9 	bl	800e450 <_fstat_r>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	dbf1      	blt.n	800c886 <__swhatbuf_r+0x12>
 800c8a2:	23f0      	movs	r3, #240	; 0xf0
 800c8a4:	9901      	ldr	r1, [sp, #4]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	4019      	ands	r1, r3
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <__swhatbuf_r+0x4c>)
 800c8ac:	18c9      	adds	r1, r1, r3
 800c8ae:	424b      	negs	r3, r1
 800c8b0:	4159      	adcs	r1, r3
 800c8b2:	6029      	str	r1, [r5, #0]
 800c8b4:	e7ed      	b.n	800c892 <__swhatbuf_r+0x1e>
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	b016      	add	sp, #88	; 0x58
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	ffffe000 	.word	0xffffe000

0800c8c4 <__smakebuf_r>:
 800c8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c6:	2602      	movs	r6, #2
 800c8c8:	898b      	ldrh	r3, [r1, #12]
 800c8ca:	0005      	movs	r5, r0
 800c8cc:	000c      	movs	r4, r1
 800c8ce:	4233      	tst	r3, r6
 800c8d0:	d006      	beq.n	800c8e0 <__smakebuf_r+0x1c>
 800c8d2:	0023      	movs	r3, r4
 800c8d4:	3347      	adds	r3, #71	; 0x47
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	6123      	str	r3, [r4, #16]
 800c8da:	2301      	movs	r3, #1
 800c8dc:	6163      	str	r3, [r4, #20]
 800c8de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c8e0:	466a      	mov	r2, sp
 800c8e2:	ab01      	add	r3, sp, #4
 800c8e4:	f7ff ffc6 	bl	800c874 <__swhatbuf_r>
 800c8e8:	9900      	ldr	r1, [sp, #0]
 800c8ea:	0007      	movs	r7, r0
 800c8ec:	0028      	movs	r0, r5
 800c8ee:	f000 fdb7 	bl	800d460 <_malloc_r>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d108      	bne.n	800c908 <__smakebuf_r+0x44>
 800c8f6:	220c      	movs	r2, #12
 800c8f8:	5ea3      	ldrsh	r3, [r4, r2]
 800c8fa:	059a      	lsls	r2, r3, #22
 800c8fc:	d4ef      	bmi.n	800c8de <__smakebuf_r+0x1a>
 800c8fe:	2203      	movs	r2, #3
 800c900:	4393      	bics	r3, r2
 800c902:	431e      	orrs	r6, r3
 800c904:	81a6      	strh	r6, [r4, #12]
 800c906:	e7e4      	b.n	800c8d2 <__smakebuf_r+0xe>
 800c908:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <__smakebuf_r+0x84>)
 800c90a:	62ab      	str	r3, [r5, #40]	; 0x28
 800c90c:	2380      	movs	r3, #128	; 0x80
 800c90e:	89a2      	ldrh	r2, [r4, #12]
 800c910:	6020      	str	r0, [r4, #0]
 800c912:	4313      	orrs	r3, r2
 800c914:	81a3      	strh	r3, [r4, #12]
 800c916:	9b00      	ldr	r3, [sp, #0]
 800c918:	6120      	str	r0, [r4, #16]
 800c91a:	6163      	str	r3, [r4, #20]
 800c91c:	9b01      	ldr	r3, [sp, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00d      	beq.n	800c93e <__smakebuf_r+0x7a>
 800c922:	0028      	movs	r0, r5
 800c924:	230e      	movs	r3, #14
 800c926:	5ee1      	ldrsh	r1, [r4, r3]
 800c928:	f001 fda4 	bl	800e474 <_isatty_r>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d006      	beq.n	800c93e <__smakebuf_r+0x7a>
 800c930:	2203      	movs	r2, #3
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	4393      	bics	r3, r2
 800c936:	001a      	movs	r2, r3
 800c938:	2301      	movs	r3, #1
 800c93a:	4313      	orrs	r3, r2
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	89a0      	ldrh	r0, [r4, #12]
 800c940:	4307      	orrs	r7, r0
 800c942:	81a7      	strh	r7, [r4, #12]
 800c944:	e7cb      	b.n	800c8de <__smakebuf_r+0x1a>
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	0800bf99 	.word	0x0800bf99

0800c94c <malloc>:
 800c94c:	b510      	push	{r4, lr}
 800c94e:	4b03      	ldr	r3, [pc, #12]	; (800c95c <malloc+0x10>)
 800c950:	0001      	movs	r1, r0
 800c952:	6818      	ldr	r0, [r3, #0]
 800c954:	f000 fd84 	bl	800d460 <_malloc_r>
 800c958:	bd10      	pop	{r4, pc}
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	20000038 	.word	0x20000038

0800c960 <__ascii_mbtowc>:
 800c960:	b082      	sub	sp, #8
 800c962:	2900      	cmp	r1, #0
 800c964:	d100      	bne.n	800c968 <__ascii_mbtowc+0x8>
 800c966:	a901      	add	r1, sp, #4
 800c968:	1e10      	subs	r0, r2, #0
 800c96a:	d006      	beq.n	800c97a <__ascii_mbtowc+0x1a>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d006      	beq.n	800c97e <__ascii_mbtowc+0x1e>
 800c970:	7813      	ldrb	r3, [r2, #0]
 800c972:	600b      	str	r3, [r1, #0]
 800c974:	7810      	ldrb	r0, [r2, #0]
 800c976:	1e43      	subs	r3, r0, #1
 800c978:	4198      	sbcs	r0, r3
 800c97a:	b002      	add	sp, #8
 800c97c:	4770      	bx	lr
 800c97e:	2002      	movs	r0, #2
 800c980:	4240      	negs	r0, r0
 800c982:	e7fa      	b.n	800c97a <__ascii_mbtowc+0x1a>

0800c984 <memchr>:
 800c984:	b2c9      	uxtb	r1, r1
 800c986:	1882      	adds	r2, r0, r2
 800c988:	4290      	cmp	r0, r2
 800c98a:	d101      	bne.n	800c990 <memchr+0xc>
 800c98c:	2000      	movs	r0, #0
 800c98e:	4770      	bx	lr
 800c990:	7803      	ldrb	r3, [r0, #0]
 800c992:	428b      	cmp	r3, r1
 800c994:	d0fb      	beq.n	800c98e <memchr+0xa>
 800c996:	3001      	adds	r0, #1
 800c998:	e7f6      	b.n	800c988 <memchr+0x4>
	...

0800c99c <_Balloc>:
 800c99c:	b570      	push	{r4, r5, r6, lr}
 800c99e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9a0:	0006      	movs	r6, r0
 800c9a2:	000c      	movs	r4, r1
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	d10e      	bne.n	800c9c6 <_Balloc+0x2a>
 800c9a8:	2010      	movs	r0, #16
 800c9aa:	f7ff ffcf 	bl	800c94c <malloc>
 800c9ae:	1e02      	subs	r2, r0, #0
 800c9b0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9b2:	d104      	bne.n	800c9be <_Balloc+0x22>
 800c9b4:	2166      	movs	r1, #102	; 0x66
 800c9b6:	4b19      	ldr	r3, [pc, #100]	; (800ca1c <_Balloc+0x80>)
 800c9b8:	4819      	ldr	r0, [pc, #100]	; (800ca20 <_Balloc+0x84>)
 800c9ba:	f001 fd1b 	bl	800e3f4 <__assert_func>
 800c9be:	6045      	str	r5, [r0, #4]
 800c9c0:	6085      	str	r5, [r0, #8]
 800c9c2:	6005      	str	r5, [r0, #0]
 800c9c4:	60c5      	str	r5, [r0, #12]
 800c9c6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c9c8:	68eb      	ldr	r3, [r5, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d013      	beq.n	800c9f6 <_Balloc+0x5a>
 800c9ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9d0:	00a2      	lsls	r2, r4, #2
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	189b      	adds	r3, r3, r2
 800c9d6:	6818      	ldr	r0, [r3, #0]
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d118      	bne.n	800ca0e <_Balloc+0x72>
 800c9dc:	2101      	movs	r1, #1
 800c9de:	000d      	movs	r5, r1
 800c9e0:	40a5      	lsls	r5, r4
 800c9e2:	1d6a      	adds	r2, r5, #5
 800c9e4:	0030      	movs	r0, r6
 800c9e6:	0092      	lsls	r2, r2, #2
 800c9e8:	f000 fca1 	bl	800d32e <_calloc_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d00c      	beq.n	800ca0a <_Balloc+0x6e>
 800c9f0:	6044      	str	r4, [r0, #4]
 800c9f2:	6085      	str	r5, [r0, #8]
 800c9f4:	e00d      	b.n	800ca12 <_Balloc+0x76>
 800c9f6:	2221      	movs	r2, #33	; 0x21
 800c9f8:	2104      	movs	r1, #4
 800c9fa:	0030      	movs	r0, r6
 800c9fc:	f000 fc97 	bl	800d32e <_calloc_r>
 800ca00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca02:	60e8      	str	r0, [r5, #12]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e1      	bne.n	800c9ce <_Balloc+0x32>
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
 800ca0e:	6802      	ldr	r2, [r0, #0]
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	2300      	movs	r3, #0
 800ca14:	6103      	str	r3, [r0, #16]
 800ca16:	60c3      	str	r3, [r0, #12]
 800ca18:	e7f8      	b.n	800ca0c <_Balloc+0x70>
 800ca1a:	46c0      	nop			; (mov r8, r8)
 800ca1c:	0800e9ee 	.word	0x0800e9ee
 800ca20:	0800eb50 	.word	0x0800eb50

0800ca24 <_Bfree>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca28:	0005      	movs	r5, r0
 800ca2a:	000c      	movs	r4, r1
 800ca2c:	2e00      	cmp	r6, #0
 800ca2e:	d10e      	bne.n	800ca4e <_Bfree+0x2a>
 800ca30:	2010      	movs	r0, #16
 800ca32:	f7ff ff8b 	bl	800c94c <malloc>
 800ca36:	1e02      	subs	r2, r0, #0
 800ca38:	6268      	str	r0, [r5, #36]	; 0x24
 800ca3a:	d104      	bne.n	800ca46 <_Bfree+0x22>
 800ca3c:	218a      	movs	r1, #138	; 0x8a
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <_Bfree+0x40>)
 800ca40:	4809      	ldr	r0, [pc, #36]	; (800ca68 <_Bfree+0x44>)
 800ca42:	f001 fcd7 	bl	800e3f4 <__assert_func>
 800ca46:	6046      	str	r6, [r0, #4]
 800ca48:	6086      	str	r6, [r0, #8]
 800ca4a:	6006      	str	r6, [r0, #0]
 800ca4c:	60c6      	str	r6, [r0, #12]
 800ca4e:	2c00      	cmp	r4, #0
 800ca50:	d007      	beq.n	800ca62 <_Bfree+0x3e>
 800ca52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca54:	6862      	ldr	r2, [r4, #4]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	0092      	lsls	r2, r2, #2
 800ca5a:	189b      	adds	r3, r3, r2
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	6022      	str	r2, [r4, #0]
 800ca60:	601c      	str	r4, [r3, #0]
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
 800ca64:	0800e9ee 	.word	0x0800e9ee
 800ca68:	0800eb50 	.word	0x0800eb50

0800ca6c <__multadd>:
 800ca6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca6e:	000e      	movs	r6, r1
 800ca70:	9001      	str	r0, [sp, #4]
 800ca72:	000c      	movs	r4, r1
 800ca74:	001d      	movs	r5, r3
 800ca76:	2000      	movs	r0, #0
 800ca78:	690f      	ldr	r7, [r1, #16]
 800ca7a:	3614      	adds	r6, #20
 800ca7c:	6833      	ldr	r3, [r6, #0]
 800ca7e:	3001      	adds	r0, #1
 800ca80:	b299      	uxth	r1, r3
 800ca82:	4351      	muls	r1, r2
 800ca84:	0c1b      	lsrs	r3, r3, #16
 800ca86:	4353      	muls	r3, r2
 800ca88:	1949      	adds	r1, r1, r5
 800ca8a:	0c0d      	lsrs	r5, r1, #16
 800ca8c:	195b      	adds	r3, r3, r5
 800ca8e:	0c1d      	lsrs	r5, r3, #16
 800ca90:	b289      	uxth	r1, r1
 800ca92:	041b      	lsls	r3, r3, #16
 800ca94:	185b      	adds	r3, r3, r1
 800ca96:	c608      	stmia	r6!, {r3}
 800ca98:	4287      	cmp	r7, r0
 800ca9a:	dcef      	bgt.n	800ca7c <__multadd+0x10>
 800ca9c:	2d00      	cmp	r5, #0
 800ca9e:	d022      	beq.n	800cae6 <__multadd+0x7a>
 800caa0:	68a3      	ldr	r3, [r4, #8]
 800caa2:	42bb      	cmp	r3, r7
 800caa4:	dc19      	bgt.n	800cada <__multadd+0x6e>
 800caa6:	6863      	ldr	r3, [r4, #4]
 800caa8:	9801      	ldr	r0, [sp, #4]
 800caaa:	1c59      	adds	r1, r3, #1
 800caac:	f7ff ff76 	bl	800c99c <_Balloc>
 800cab0:	1e06      	subs	r6, r0, #0
 800cab2:	d105      	bne.n	800cac0 <__multadd+0x54>
 800cab4:	0002      	movs	r2, r0
 800cab6:	21b5      	movs	r1, #181	; 0xb5
 800cab8:	4b0c      	ldr	r3, [pc, #48]	; (800caec <__multadd+0x80>)
 800caba:	480d      	ldr	r0, [pc, #52]	; (800caf0 <__multadd+0x84>)
 800cabc:	f001 fc9a 	bl	800e3f4 <__assert_func>
 800cac0:	0021      	movs	r1, r4
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	310c      	adds	r1, #12
 800cac6:	1c9a      	adds	r2, r3, #2
 800cac8:	0092      	lsls	r2, r2, #2
 800caca:	300c      	adds	r0, #12
 800cacc:	f7fc fb4e 	bl	800916c <memcpy>
 800cad0:	0021      	movs	r1, r4
 800cad2:	9801      	ldr	r0, [sp, #4]
 800cad4:	f7ff ffa6 	bl	800ca24 <_Bfree>
 800cad8:	0034      	movs	r4, r6
 800cada:	1d3b      	adds	r3, r7, #4
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	18e3      	adds	r3, r4, r3
 800cae0:	605d      	str	r5, [r3, #4]
 800cae2:	1c7b      	adds	r3, r7, #1
 800cae4:	6123      	str	r3, [r4, #16]
 800cae6:	0020      	movs	r0, r4
 800cae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800caea:	46c0      	nop			; (mov r8, r8)
 800caec:	0800ea60 	.word	0x0800ea60
 800caf0:	0800eb50 	.word	0x0800eb50

0800caf4 <__s2b>:
 800caf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caf6:	0006      	movs	r6, r0
 800caf8:	0018      	movs	r0, r3
 800cafa:	000c      	movs	r4, r1
 800cafc:	3008      	adds	r0, #8
 800cafe:	2109      	movs	r1, #9
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	0015      	movs	r5, r2
 800cb04:	f7f3 fbb0 	bl	8000268 <__divsi3>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	4283      	cmp	r3, r0
 800cb0e:	db0a      	blt.n	800cb26 <__s2b+0x32>
 800cb10:	0030      	movs	r0, r6
 800cb12:	f7ff ff43 	bl	800c99c <_Balloc>
 800cb16:	1e01      	subs	r1, r0, #0
 800cb18:	d108      	bne.n	800cb2c <__s2b+0x38>
 800cb1a:	0002      	movs	r2, r0
 800cb1c:	4b19      	ldr	r3, [pc, #100]	; (800cb84 <__s2b+0x90>)
 800cb1e:	481a      	ldr	r0, [pc, #104]	; (800cb88 <__s2b+0x94>)
 800cb20:	31ce      	adds	r1, #206	; 0xce
 800cb22:	f001 fc67 	bl	800e3f4 <__assert_func>
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	3101      	adds	r1, #1
 800cb2a:	e7ef      	b.n	800cb0c <__s2b+0x18>
 800cb2c:	9b08      	ldr	r3, [sp, #32]
 800cb2e:	6143      	str	r3, [r0, #20]
 800cb30:	2301      	movs	r3, #1
 800cb32:	6103      	str	r3, [r0, #16]
 800cb34:	2d09      	cmp	r5, #9
 800cb36:	dd18      	ble.n	800cb6a <__s2b+0x76>
 800cb38:	0023      	movs	r3, r4
 800cb3a:	3309      	adds	r3, #9
 800cb3c:	001f      	movs	r7, r3
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	1964      	adds	r4, r4, r5
 800cb42:	783b      	ldrb	r3, [r7, #0]
 800cb44:	220a      	movs	r2, #10
 800cb46:	0030      	movs	r0, r6
 800cb48:	3b30      	subs	r3, #48	; 0x30
 800cb4a:	f7ff ff8f 	bl	800ca6c <__multadd>
 800cb4e:	3701      	adds	r7, #1
 800cb50:	0001      	movs	r1, r0
 800cb52:	42a7      	cmp	r7, r4
 800cb54:	d1f5      	bne.n	800cb42 <__s2b+0x4e>
 800cb56:	002c      	movs	r4, r5
 800cb58:	9b00      	ldr	r3, [sp, #0]
 800cb5a:	3c08      	subs	r4, #8
 800cb5c:	191c      	adds	r4, r3, r4
 800cb5e:	002f      	movs	r7, r5
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	429f      	cmp	r7, r3
 800cb64:	db04      	blt.n	800cb70 <__s2b+0x7c>
 800cb66:	0008      	movs	r0, r1
 800cb68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb6a:	2509      	movs	r5, #9
 800cb6c:	340a      	adds	r4, #10
 800cb6e:	e7f6      	b.n	800cb5e <__s2b+0x6a>
 800cb70:	1b63      	subs	r3, r4, r5
 800cb72:	5ddb      	ldrb	r3, [r3, r7]
 800cb74:	220a      	movs	r2, #10
 800cb76:	0030      	movs	r0, r6
 800cb78:	3b30      	subs	r3, #48	; 0x30
 800cb7a:	f7ff ff77 	bl	800ca6c <__multadd>
 800cb7e:	3701      	adds	r7, #1
 800cb80:	0001      	movs	r1, r0
 800cb82:	e7ed      	b.n	800cb60 <__s2b+0x6c>
 800cb84:	0800ea60 	.word	0x0800ea60
 800cb88:	0800eb50 	.word	0x0800eb50

0800cb8c <__hi0bits>:
 800cb8c:	0003      	movs	r3, r0
 800cb8e:	0c02      	lsrs	r2, r0, #16
 800cb90:	2000      	movs	r0, #0
 800cb92:	4282      	cmp	r2, r0
 800cb94:	d101      	bne.n	800cb9a <__hi0bits+0xe>
 800cb96:	041b      	lsls	r3, r3, #16
 800cb98:	3010      	adds	r0, #16
 800cb9a:	0e1a      	lsrs	r2, r3, #24
 800cb9c:	d101      	bne.n	800cba2 <__hi0bits+0x16>
 800cb9e:	3008      	adds	r0, #8
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	0f1a      	lsrs	r2, r3, #28
 800cba4:	d101      	bne.n	800cbaa <__hi0bits+0x1e>
 800cba6:	3004      	adds	r0, #4
 800cba8:	011b      	lsls	r3, r3, #4
 800cbaa:	0f9a      	lsrs	r2, r3, #30
 800cbac:	d101      	bne.n	800cbb2 <__hi0bits+0x26>
 800cbae:	3002      	adds	r0, #2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	db03      	blt.n	800cbbe <__hi0bits+0x32>
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	d400      	bmi.n	800cbbe <__hi0bits+0x32>
 800cbbc:	2020      	movs	r0, #32
 800cbbe:	4770      	bx	lr

0800cbc0 <__lo0bits>:
 800cbc0:	6803      	ldr	r3, [r0, #0]
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	2107      	movs	r1, #7
 800cbc6:	0018      	movs	r0, r3
 800cbc8:	4008      	ands	r0, r1
 800cbca:	420b      	tst	r3, r1
 800cbcc:	d00d      	beq.n	800cbea <__lo0bits+0x2a>
 800cbce:	3906      	subs	r1, #6
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	420b      	tst	r3, r1
 800cbd4:	d105      	bne.n	800cbe2 <__lo0bits+0x22>
 800cbd6:	3002      	adds	r0, #2
 800cbd8:	4203      	tst	r3, r0
 800cbda:	d003      	beq.n	800cbe4 <__lo0bits+0x24>
 800cbdc:	40cb      	lsrs	r3, r1
 800cbde:	0008      	movs	r0, r1
 800cbe0:	6013      	str	r3, [r2, #0]
 800cbe2:	4770      	bx	lr
 800cbe4:	089b      	lsrs	r3, r3, #2
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e7fb      	b.n	800cbe2 <__lo0bits+0x22>
 800cbea:	b299      	uxth	r1, r3
 800cbec:	2900      	cmp	r1, #0
 800cbee:	d101      	bne.n	800cbf4 <__lo0bits+0x34>
 800cbf0:	2010      	movs	r0, #16
 800cbf2:	0c1b      	lsrs	r3, r3, #16
 800cbf4:	b2d9      	uxtb	r1, r3
 800cbf6:	2900      	cmp	r1, #0
 800cbf8:	d101      	bne.n	800cbfe <__lo0bits+0x3e>
 800cbfa:	3008      	adds	r0, #8
 800cbfc:	0a1b      	lsrs	r3, r3, #8
 800cbfe:	0719      	lsls	r1, r3, #28
 800cc00:	d101      	bne.n	800cc06 <__lo0bits+0x46>
 800cc02:	3004      	adds	r0, #4
 800cc04:	091b      	lsrs	r3, r3, #4
 800cc06:	0799      	lsls	r1, r3, #30
 800cc08:	d101      	bne.n	800cc0e <__lo0bits+0x4e>
 800cc0a:	3002      	adds	r0, #2
 800cc0c:	089b      	lsrs	r3, r3, #2
 800cc0e:	07d9      	lsls	r1, r3, #31
 800cc10:	d4e9      	bmi.n	800cbe6 <__lo0bits+0x26>
 800cc12:	3001      	adds	r0, #1
 800cc14:	085b      	lsrs	r3, r3, #1
 800cc16:	d1e6      	bne.n	800cbe6 <__lo0bits+0x26>
 800cc18:	2020      	movs	r0, #32
 800cc1a:	e7e2      	b.n	800cbe2 <__lo0bits+0x22>

0800cc1c <__i2b>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	000c      	movs	r4, r1
 800cc20:	2101      	movs	r1, #1
 800cc22:	f7ff febb 	bl	800c99c <_Balloc>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d106      	bne.n	800cc38 <__i2b+0x1c>
 800cc2a:	21a0      	movs	r1, #160	; 0xa0
 800cc2c:	0002      	movs	r2, r0
 800cc2e:	4b04      	ldr	r3, [pc, #16]	; (800cc40 <__i2b+0x24>)
 800cc30:	4804      	ldr	r0, [pc, #16]	; (800cc44 <__i2b+0x28>)
 800cc32:	0049      	lsls	r1, r1, #1
 800cc34:	f001 fbde 	bl	800e3f4 <__assert_func>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	6144      	str	r4, [r0, #20]
 800cc3c:	6103      	str	r3, [r0, #16]
 800cc3e:	bd10      	pop	{r4, pc}
 800cc40:	0800ea60 	.word	0x0800ea60
 800cc44:	0800eb50 	.word	0x0800eb50

0800cc48 <__multiply>:
 800cc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4a:	690b      	ldr	r3, [r1, #16]
 800cc4c:	0014      	movs	r4, r2
 800cc4e:	6912      	ldr	r2, [r2, #16]
 800cc50:	000d      	movs	r5, r1
 800cc52:	b089      	sub	sp, #36	; 0x24
 800cc54:	4293      	cmp	r3, r2
 800cc56:	da01      	bge.n	800cc5c <__multiply+0x14>
 800cc58:	0025      	movs	r5, r4
 800cc5a:	000c      	movs	r4, r1
 800cc5c:	692f      	ldr	r7, [r5, #16]
 800cc5e:	6926      	ldr	r6, [r4, #16]
 800cc60:	6869      	ldr	r1, [r5, #4]
 800cc62:	19bb      	adds	r3, r7, r6
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	68ab      	ldr	r3, [r5, #8]
 800cc68:	19ba      	adds	r2, r7, r6
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	da00      	bge.n	800cc70 <__multiply+0x28>
 800cc6e:	3101      	adds	r1, #1
 800cc70:	f7ff fe94 	bl	800c99c <_Balloc>
 800cc74:	9001      	str	r0, [sp, #4]
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d106      	bne.n	800cc88 <__multiply+0x40>
 800cc7a:	215e      	movs	r1, #94	; 0x5e
 800cc7c:	0002      	movs	r2, r0
 800cc7e:	4b48      	ldr	r3, [pc, #288]	; (800cda0 <__multiply+0x158>)
 800cc80:	4848      	ldr	r0, [pc, #288]	; (800cda4 <__multiply+0x15c>)
 800cc82:	31ff      	adds	r1, #255	; 0xff
 800cc84:	f001 fbb6 	bl	800e3f4 <__assert_func>
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	3314      	adds	r3, #20
 800cc8e:	469c      	mov	ip, r3
 800cc90:	19bb      	adds	r3, r7, r6
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4463      	add	r3, ip
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	4663      	mov	r3, ip
 800cc9a:	9903      	ldr	r1, [sp, #12]
 800cc9c:	428b      	cmp	r3, r1
 800cc9e:	d32c      	bcc.n	800ccfa <__multiply+0xb2>
 800cca0:	002b      	movs	r3, r5
 800cca2:	0022      	movs	r2, r4
 800cca4:	3314      	adds	r3, #20
 800cca6:	00bf      	lsls	r7, r7, #2
 800cca8:	3214      	adds	r2, #20
 800ccaa:	9306      	str	r3, [sp, #24]
 800ccac:	00b6      	lsls	r6, r6, #2
 800ccae:	19db      	adds	r3, r3, r7
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	1993      	adds	r3, r2, r6
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	2304      	movs	r3, #4
 800ccb8:	9305      	str	r3, [sp, #20]
 800ccba:	002b      	movs	r3, r5
 800ccbc:	9904      	ldr	r1, [sp, #16]
 800ccbe:	3315      	adds	r3, #21
 800ccc0:	9200      	str	r2, [sp, #0]
 800ccc2:	4299      	cmp	r1, r3
 800ccc4:	d305      	bcc.n	800ccd2 <__multiply+0x8a>
 800ccc6:	1b4b      	subs	r3, r1, r5
 800ccc8:	3b15      	subs	r3, #21
 800ccca:	089b      	lsrs	r3, r3, #2
 800cccc:	3301      	adds	r3, #1
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	9305      	str	r3, [sp, #20]
 800ccd2:	9b07      	ldr	r3, [sp, #28]
 800ccd4:	9a00      	ldr	r2, [sp, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d311      	bcc.n	800ccfe <__multiply+0xb6>
 800ccda:	9b02      	ldr	r3, [sp, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	dd06      	ble.n	800ccee <__multiply+0xa6>
 800cce0:	9b03      	ldr	r3, [sp, #12]
 800cce2:	3b04      	subs	r3, #4
 800cce4:	9303      	str	r3, [sp, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d053      	beq.n	800cd96 <__multiply+0x14e>
 800ccee:	9b01      	ldr	r3, [sp, #4]
 800ccf0:	9a02      	ldr	r2, [sp, #8]
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	611a      	str	r2, [r3, #16]
 800ccf6:	b009      	add	sp, #36	; 0x24
 800ccf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfa:	c304      	stmia	r3!, {r2}
 800ccfc:	e7cd      	b.n	800cc9a <__multiply+0x52>
 800ccfe:	9b00      	ldr	r3, [sp, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	b298      	uxth	r0, r3
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d01b      	beq.n	800cd40 <__multiply+0xf8>
 800cd08:	4667      	mov	r7, ip
 800cd0a:	2400      	movs	r4, #0
 800cd0c:	9e06      	ldr	r6, [sp, #24]
 800cd0e:	ce02      	ldmia	r6!, {r1}
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	b28b      	uxth	r3, r1
 800cd14:	4343      	muls	r3, r0
 800cd16:	b292      	uxth	r2, r2
 800cd18:	189b      	adds	r3, r3, r2
 800cd1a:	191b      	adds	r3, r3, r4
 800cd1c:	0c0c      	lsrs	r4, r1, #16
 800cd1e:	4344      	muls	r4, r0
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	0c11      	lsrs	r1, r2, #16
 800cd24:	1861      	adds	r1, r4, r1
 800cd26:	0c1c      	lsrs	r4, r3, #16
 800cd28:	1909      	adds	r1, r1, r4
 800cd2a:	0c0c      	lsrs	r4, r1, #16
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	0409      	lsls	r1, r1, #16
 800cd30:	430b      	orrs	r3, r1
 800cd32:	c708      	stmia	r7!, {r3}
 800cd34:	9b04      	ldr	r3, [sp, #16]
 800cd36:	42b3      	cmp	r3, r6
 800cd38:	d8e9      	bhi.n	800cd0e <__multiply+0xc6>
 800cd3a:	4663      	mov	r3, ip
 800cd3c:	9a05      	ldr	r2, [sp, #20]
 800cd3e:	509c      	str	r4, [r3, r2]
 800cd40:	9b00      	ldr	r3, [sp, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	0c1e      	lsrs	r6, r3, #16
 800cd46:	d020      	beq.n	800cd8a <__multiply+0x142>
 800cd48:	4663      	mov	r3, ip
 800cd4a:	002c      	movs	r4, r5
 800cd4c:	4660      	mov	r0, ip
 800cd4e:	2700      	movs	r7, #0
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3414      	adds	r4, #20
 800cd54:	6822      	ldr	r2, [r4, #0]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	b291      	uxth	r1, r2
 800cd5a:	4371      	muls	r1, r6
 800cd5c:	6802      	ldr	r2, [r0, #0]
 800cd5e:	0c12      	lsrs	r2, r2, #16
 800cd60:	1889      	adds	r1, r1, r2
 800cd62:	19cf      	adds	r7, r1, r7
 800cd64:	0439      	lsls	r1, r7, #16
 800cd66:	430b      	orrs	r3, r1
 800cd68:	6003      	str	r3, [r0, #0]
 800cd6a:	cc02      	ldmia	r4!, {r1}
 800cd6c:	6843      	ldr	r3, [r0, #4]
 800cd6e:	0c09      	lsrs	r1, r1, #16
 800cd70:	4371      	muls	r1, r6
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	0c3f      	lsrs	r7, r7, #16
 800cd76:	18cb      	adds	r3, r1, r3
 800cd78:	9a04      	ldr	r2, [sp, #16]
 800cd7a:	19db      	adds	r3, r3, r7
 800cd7c:	0c1f      	lsrs	r7, r3, #16
 800cd7e:	3004      	adds	r0, #4
 800cd80:	42a2      	cmp	r2, r4
 800cd82:	d8e7      	bhi.n	800cd54 <__multiply+0x10c>
 800cd84:	4662      	mov	r2, ip
 800cd86:	9905      	ldr	r1, [sp, #20]
 800cd88:	5053      	str	r3, [r2, r1]
 800cd8a:	9b00      	ldr	r3, [sp, #0]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	2304      	movs	r3, #4
 800cd92:	449c      	add	ip, r3
 800cd94:	e79d      	b.n	800ccd2 <__multiply+0x8a>
 800cd96:	9b02      	ldr	r3, [sp, #8]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	e79d      	b.n	800ccda <__multiply+0x92>
 800cd9e:	46c0      	nop			; (mov r8, r8)
 800cda0:	0800ea60 	.word	0x0800ea60
 800cda4:	0800eb50 	.word	0x0800eb50

0800cda8 <__pow5mult>:
 800cda8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdaa:	2303      	movs	r3, #3
 800cdac:	0015      	movs	r5, r2
 800cdae:	0007      	movs	r7, r0
 800cdb0:	000e      	movs	r6, r1
 800cdb2:	401a      	ands	r2, r3
 800cdb4:	421d      	tst	r5, r3
 800cdb6:	d008      	beq.n	800cdca <__pow5mult+0x22>
 800cdb8:	4925      	ldr	r1, [pc, #148]	; (800ce50 <__pow5mult+0xa8>)
 800cdba:	3a01      	subs	r2, #1
 800cdbc:	0092      	lsls	r2, r2, #2
 800cdbe:	5852      	ldr	r2, [r2, r1]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	0031      	movs	r1, r6
 800cdc4:	f7ff fe52 	bl	800ca6c <__multadd>
 800cdc8:	0006      	movs	r6, r0
 800cdca:	10ad      	asrs	r5, r5, #2
 800cdcc:	d03d      	beq.n	800ce4a <__pow5mult+0xa2>
 800cdce:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cdd0:	2c00      	cmp	r4, #0
 800cdd2:	d10f      	bne.n	800cdf4 <__pow5mult+0x4c>
 800cdd4:	2010      	movs	r0, #16
 800cdd6:	f7ff fdb9 	bl	800c94c <malloc>
 800cdda:	1e02      	subs	r2, r0, #0
 800cddc:	6278      	str	r0, [r7, #36]	; 0x24
 800cdde:	d105      	bne.n	800cdec <__pow5mult+0x44>
 800cde0:	21d7      	movs	r1, #215	; 0xd7
 800cde2:	4b1c      	ldr	r3, [pc, #112]	; (800ce54 <__pow5mult+0xac>)
 800cde4:	481c      	ldr	r0, [pc, #112]	; (800ce58 <__pow5mult+0xb0>)
 800cde6:	0049      	lsls	r1, r1, #1
 800cde8:	f001 fb04 	bl	800e3f4 <__assert_func>
 800cdec:	6044      	str	r4, [r0, #4]
 800cdee:	6084      	str	r4, [r0, #8]
 800cdf0:	6004      	str	r4, [r0, #0]
 800cdf2:	60c4      	str	r4, [r0, #12]
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	689c      	ldr	r4, [r3, #8]
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	2c00      	cmp	r4, #0
 800cdfc:	d108      	bne.n	800ce10 <__pow5mult+0x68>
 800cdfe:	0038      	movs	r0, r7
 800ce00:	4916      	ldr	r1, [pc, #88]	; (800ce5c <__pow5mult+0xb4>)
 800ce02:	f7ff ff0b 	bl	800cc1c <__i2b>
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	0004      	movs	r4, r0
 800ce0a:	6098      	str	r0, [r3, #8]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	6003      	str	r3, [r0, #0]
 800ce10:	2301      	movs	r3, #1
 800ce12:	421d      	tst	r5, r3
 800ce14:	d00a      	beq.n	800ce2c <__pow5mult+0x84>
 800ce16:	0031      	movs	r1, r6
 800ce18:	0022      	movs	r2, r4
 800ce1a:	0038      	movs	r0, r7
 800ce1c:	f7ff ff14 	bl	800cc48 <__multiply>
 800ce20:	0031      	movs	r1, r6
 800ce22:	9001      	str	r0, [sp, #4]
 800ce24:	0038      	movs	r0, r7
 800ce26:	f7ff fdfd 	bl	800ca24 <_Bfree>
 800ce2a:	9e01      	ldr	r6, [sp, #4]
 800ce2c:	106d      	asrs	r5, r5, #1
 800ce2e:	d00c      	beq.n	800ce4a <__pow5mult+0xa2>
 800ce30:	6820      	ldr	r0, [r4, #0]
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d107      	bne.n	800ce46 <__pow5mult+0x9e>
 800ce36:	0022      	movs	r2, r4
 800ce38:	0021      	movs	r1, r4
 800ce3a:	0038      	movs	r0, r7
 800ce3c:	f7ff ff04 	bl	800cc48 <__multiply>
 800ce40:	2300      	movs	r3, #0
 800ce42:	6020      	str	r0, [r4, #0]
 800ce44:	6003      	str	r3, [r0, #0]
 800ce46:	0004      	movs	r4, r0
 800ce48:	e7e2      	b.n	800ce10 <__pow5mult+0x68>
 800ce4a:	0030      	movs	r0, r6
 800ce4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	0800eca0 	.word	0x0800eca0
 800ce54:	0800e9ee 	.word	0x0800e9ee
 800ce58:	0800eb50 	.word	0x0800eb50
 800ce5c:	00000271 	.word	0x00000271

0800ce60 <__lshift>:
 800ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce62:	000c      	movs	r4, r1
 800ce64:	0017      	movs	r7, r2
 800ce66:	6923      	ldr	r3, [r4, #16]
 800ce68:	1155      	asrs	r5, r2, #5
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	18eb      	adds	r3, r5, r3
 800ce6e:	9302      	str	r3, [sp, #8]
 800ce70:	3301      	adds	r3, #1
 800ce72:	9301      	str	r3, [sp, #4]
 800ce74:	6849      	ldr	r1, [r1, #4]
 800ce76:	68a3      	ldr	r3, [r4, #8]
 800ce78:	9004      	str	r0, [sp, #16]
 800ce7a:	9a01      	ldr	r2, [sp, #4]
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	db10      	blt.n	800cea2 <__lshift+0x42>
 800ce80:	9804      	ldr	r0, [sp, #16]
 800ce82:	f7ff fd8b 	bl	800c99c <_Balloc>
 800ce86:	2300      	movs	r3, #0
 800ce88:	0002      	movs	r2, r0
 800ce8a:	0006      	movs	r6, r0
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	3214      	adds	r2, #20
 800ce90:	4298      	cmp	r0, r3
 800ce92:	d10c      	bne.n	800ceae <__lshift+0x4e>
 800ce94:	21da      	movs	r1, #218	; 0xda
 800ce96:	0002      	movs	r2, r0
 800ce98:	4b26      	ldr	r3, [pc, #152]	; (800cf34 <__lshift+0xd4>)
 800ce9a:	4827      	ldr	r0, [pc, #156]	; (800cf38 <__lshift+0xd8>)
 800ce9c:	31ff      	adds	r1, #255	; 0xff
 800ce9e:	f001 faa9 	bl	800e3f4 <__assert_func>
 800cea2:	3101      	adds	r1, #1
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	e7e8      	b.n	800ce7a <__lshift+0x1a>
 800cea8:	0098      	lsls	r0, r3, #2
 800ceaa:	5011      	str	r1, [r2, r0]
 800ceac:	3301      	adds	r3, #1
 800ceae:	42ab      	cmp	r3, r5
 800ceb0:	dbfa      	blt.n	800cea8 <__lshift+0x48>
 800ceb2:	43eb      	mvns	r3, r5
 800ceb4:	17db      	asrs	r3, r3, #31
 800ceb6:	401d      	ands	r5, r3
 800ceb8:	211f      	movs	r1, #31
 800ceba:	0023      	movs	r3, r4
 800cebc:	0038      	movs	r0, r7
 800cebe:	00ad      	lsls	r5, r5, #2
 800cec0:	1955      	adds	r5, r2, r5
 800cec2:	6922      	ldr	r2, [r4, #16]
 800cec4:	3314      	adds	r3, #20
 800cec6:	0092      	lsls	r2, r2, #2
 800cec8:	4008      	ands	r0, r1
 800ceca:	4684      	mov	ip, r0
 800cecc:	189a      	adds	r2, r3, r2
 800cece:	420f      	tst	r7, r1
 800ced0:	d02a      	beq.n	800cf28 <__lshift+0xc8>
 800ced2:	3101      	adds	r1, #1
 800ced4:	1a09      	subs	r1, r1, r0
 800ced6:	9105      	str	r1, [sp, #20]
 800ced8:	2100      	movs	r1, #0
 800ceda:	9503      	str	r5, [sp, #12]
 800cedc:	4667      	mov	r7, ip
 800cede:	6818      	ldr	r0, [r3, #0]
 800cee0:	40b8      	lsls	r0, r7
 800cee2:	4301      	orrs	r1, r0
 800cee4:	9803      	ldr	r0, [sp, #12]
 800cee6:	c002      	stmia	r0!, {r1}
 800cee8:	cb02      	ldmia	r3!, {r1}
 800ceea:	9003      	str	r0, [sp, #12]
 800ceec:	9805      	ldr	r0, [sp, #20]
 800ceee:	40c1      	lsrs	r1, r0
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d8f3      	bhi.n	800cedc <__lshift+0x7c>
 800cef4:	0020      	movs	r0, r4
 800cef6:	3015      	adds	r0, #21
 800cef8:	2304      	movs	r3, #4
 800cefa:	4282      	cmp	r2, r0
 800cefc:	d304      	bcc.n	800cf08 <__lshift+0xa8>
 800cefe:	1b13      	subs	r3, r2, r4
 800cf00:	3b15      	subs	r3, #21
 800cf02:	089b      	lsrs	r3, r3, #2
 800cf04:	3301      	adds	r3, #1
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	50e9      	str	r1, [r5, r3]
 800cf0a:	2900      	cmp	r1, #0
 800cf0c:	d002      	beq.n	800cf14 <__lshift+0xb4>
 800cf0e:	9b02      	ldr	r3, [sp, #8]
 800cf10:	3302      	adds	r3, #2
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	9804      	ldr	r0, [sp, #16]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	0021      	movs	r1, r4
 800cf1c:	6133      	str	r3, [r6, #16]
 800cf1e:	f7ff fd81 	bl	800ca24 <_Bfree>
 800cf22:	0030      	movs	r0, r6
 800cf24:	b007      	add	sp, #28
 800cf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf28:	cb02      	ldmia	r3!, {r1}
 800cf2a:	c502      	stmia	r5!, {r1}
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d8fb      	bhi.n	800cf28 <__lshift+0xc8>
 800cf30:	e7f0      	b.n	800cf14 <__lshift+0xb4>
 800cf32:	46c0      	nop			; (mov r8, r8)
 800cf34:	0800ea60 	.word	0x0800ea60
 800cf38:	0800eb50 	.word	0x0800eb50

0800cf3c <__mcmp>:
 800cf3c:	6902      	ldr	r2, [r0, #16]
 800cf3e:	690b      	ldr	r3, [r1, #16]
 800cf40:	b530      	push	{r4, r5, lr}
 800cf42:	0004      	movs	r4, r0
 800cf44:	1ad0      	subs	r0, r2, r3
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d10d      	bne.n	800cf66 <__mcmp+0x2a>
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	3414      	adds	r4, #20
 800cf4e:	3114      	adds	r1, #20
 800cf50:	18e2      	adds	r2, r4, r3
 800cf52:	18c9      	adds	r1, r1, r3
 800cf54:	3a04      	subs	r2, #4
 800cf56:	3904      	subs	r1, #4
 800cf58:	6815      	ldr	r5, [r2, #0]
 800cf5a:	680b      	ldr	r3, [r1, #0]
 800cf5c:	429d      	cmp	r5, r3
 800cf5e:	d003      	beq.n	800cf68 <__mcmp+0x2c>
 800cf60:	2001      	movs	r0, #1
 800cf62:	429d      	cmp	r5, r3
 800cf64:	d303      	bcc.n	800cf6e <__mcmp+0x32>
 800cf66:	bd30      	pop	{r4, r5, pc}
 800cf68:	4294      	cmp	r4, r2
 800cf6a:	d3f3      	bcc.n	800cf54 <__mcmp+0x18>
 800cf6c:	e7fb      	b.n	800cf66 <__mcmp+0x2a>
 800cf6e:	4240      	negs	r0, r0
 800cf70:	e7f9      	b.n	800cf66 <__mcmp+0x2a>
	...

0800cf74 <__mdiff>:
 800cf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf76:	000e      	movs	r6, r1
 800cf78:	0007      	movs	r7, r0
 800cf7a:	0011      	movs	r1, r2
 800cf7c:	0030      	movs	r0, r6
 800cf7e:	b087      	sub	sp, #28
 800cf80:	0014      	movs	r4, r2
 800cf82:	f7ff ffdb 	bl	800cf3c <__mcmp>
 800cf86:	1e05      	subs	r5, r0, #0
 800cf88:	d110      	bne.n	800cfac <__mdiff+0x38>
 800cf8a:	0001      	movs	r1, r0
 800cf8c:	0038      	movs	r0, r7
 800cf8e:	f7ff fd05 	bl	800c99c <_Balloc>
 800cf92:	1e02      	subs	r2, r0, #0
 800cf94:	d104      	bne.n	800cfa0 <__mdiff+0x2c>
 800cf96:	4b40      	ldr	r3, [pc, #256]	; (800d098 <__mdiff+0x124>)
 800cf98:	4940      	ldr	r1, [pc, #256]	; (800d09c <__mdiff+0x128>)
 800cf9a:	4841      	ldr	r0, [pc, #260]	; (800d0a0 <__mdiff+0x12c>)
 800cf9c:	f001 fa2a 	bl	800e3f4 <__assert_func>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	6145      	str	r5, [r0, #20]
 800cfa4:	6103      	str	r3, [r0, #16]
 800cfa6:	0010      	movs	r0, r2
 800cfa8:	b007      	add	sp, #28
 800cfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfac:	2301      	movs	r3, #1
 800cfae:	9301      	str	r3, [sp, #4]
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	db04      	blt.n	800cfbe <__mdiff+0x4a>
 800cfb4:	0023      	movs	r3, r4
 800cfb6:	0034      	movs	r4, r6
 800cfb8:	001e      	movs	r6, r3
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	0038      	movs	r0, r7
 800cfc0:	6861      	ldr	r1, [r4, #4]
 800cfc2:	f7ff fceb 	bl	800c99c <_Balloc>
 800cfc6:	1e02      	subs	r2, r0, #0
 800cfc8:	d103      	bne.n	800cfd2 <__mdiff+0x5e>
 800cfca:	2190      	movs	r1, #144	; 0x90
 800cfcc:	4b32      	ldr	r3, [pc, #200]	; (800d098 <__mdiff+0x124>)
 800cfce:	0089      	lsls	r1, r1, #2
 800cfd0:	e7e3      	b.n	800cf9a <__mdiff+0x26>
 800cfd2:	9b01      	ldr	r3, [sp, #4]
 800cfd4:	2700      	movs	r7, #0
 800cfd6:	60c3      	str	r3, [r0, #12]
 800cfd8:	6920      	ldr	r0, [r4, #16]
 800cfda:	3414      	adds	r4, #20
 800cfdc:	9401      	str	r4, [sp, #4]
 800cfde:	9b01      	ldr	r3, [sp, #4]
 800cfe0:	0084      	lsls	r4, r0, #2
 800cfe2:	191b      	adds	r3, r3, r4
 800cfe4:	0034      	movs	r4, r6
 800cfe6:	9302      	str	r3, [sp, #8]
 800cfe8:	6933      	ldr	r3, [r6, #16]
 800cfea:	3414      	adds	r4, #20
 800cfec:	0099      	lsls	r1, r3, #2
 800cfee:	1863      	adds	r3, r4, r1
 800cff0:	9303      	str	r3, [sp, #12]
 800cff2:	0013      	movs	r3, r2
 800cff4:	3314      	adds	r3, #20
 800cff6:	469c      	mov	ip, r3
 800cff8:	9305      	str	r3, [sp, #20]
 800cffa:	9b01      	ldr	r3, [sp, #4]
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	9b04      	ldr	r3, [sp, #16]
 800d000:	cc02      	ldmia	r4!, {r1}
 800d002:	cb20      	ldmia	r3!, {r5}
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	b2ab      	uxth	r3, r5
 800d008:	19df      	adds	r7, r3, r7
 800d00a:	b28b      	uxth	r3, r1
 800d00c:	1afb      	subs	r3, r7, r3
 800d00e:	0c09      	lsrs	r1, r1, #16
 800d010:	0c2d      	lsrs	r5, r5, #16
 800d012:	1a6d      	subs	r5, r5, r1
 800d014:	1419      	asrs	r1, r3, #16
 800d016:	186d      	adds	r5, r5, r1
 800d018:	4661      	mov	r1, ip
 800d01a:	142f      	asrs	r7, r5, #16
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	042d      	lsls	r5, r5, #16
 800d020:	432b      	orrs	r3, r5
 800d022:	c108      	stmia	r1!, {r3}
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	468c      	mov	ip, r1
 800d028:	42a3      	cmp	r3, r4
 800d02a:	d8e8      	bhi.n	800cffe <__mdiff+0x8a>
 800d02c:	0031      	movs	r1, r6
 800d02e:	9c03      	ldr	r4, [sp, #12]
 800d030:	3115      	adds	r1, #21
 800d032:	2304      	movs	r3, #4
 800d034:	428c      	cmp	r4, r1
 800d036:	d304      	bcc.n	800d042 <__mdiff+0xce>
 800d038:	1ba3      	subs	r3, r4, r6
 800d03a:	3b15      	subs	r3, #21
 800d03c:	089b      	lsrs	r3, r3, #2
 800d03e:	3301      	adds	r3, #1
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	9901      	ldr	r1, [sp, #4]
 800d044:	18cc      	adds	r4, r1, r3
 800d046:	9905      	ldr	r1, [sp, #20]
 800d048:	0026      	movs	r6, r4
 800d04a:	18cb      	adds	r3, r1, r3
 800d04c:	469c      	mov	ip, r3
 800d04e:	9902      	ldr	r1, [sp, #8]
 800d050:	428e      	cmp	r6, r1
 800d052:	d310      	bcc.n	800d076 <__mdiff+0x102>
 800d054:	9e02      	ldr	r6, [sp, #8]
 800d056:	1ee1      	subs	r1, r4, #3
 800d058:	2500      	movs	r5, #0
 800d05a:	428e      	cmp	r6, r1
 800d05c:	d304      	bcc.n	800d068 <__mdiff+0xf4>
 800d05e:	0031      	movs	r1, r6
 800d060:	3103      	adds	r1, #3
 800d062:	1b0c      	subs	r4, r1, r4
 800d064:	08a4      	lsrs	r4, r4, #2
 800d066:	00a5      	lsls	r5, r4, #2
 800d068:	195b      	adds	r3, r3, r5
 800d06a:	3b04      	subs	r3, #4
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	2900      	cmp	r1, #0
 800d070:	d00f      	beq.n	800d092 <__mdiff+0x11e>
 800d072:	6110      	str	r0, [r2, #16]
 800d074:	e797      	b.n	800cfa6 <__mdiff+0x32>
 800d076:	ce02      	ldmia	r6!, {r1}
 800d078:	b28d      	uxth	r5, r1
 800d07a:	19ed      	adds	r5, r5, r7
 800d07c:	0c0f      	lsrs	r7, r1, #16
 800d07e:	1429      	asrs	r1, r5, #16
 800d080:	1879      	adds	r1, r7, r1
 800d082:	140f      	asrs	r7, r1, #16
 800d084:	b2ad      	uxth	r5, r5
 800d086:	0409      	lsls	r1, r1, #16
 800d088:	430d      	orrs	r5, r1
 800d08a:	4661      	mov	r1, ip
 800d08c:	c120      	stmia	r1!, {r5}
 800d08e:	468c      	mov	ip, r1
 800d090:	e7dd      	b.n	800d04e <__mdiff+0xda>
 800d092:	3801      	subs	r0, #1
 800d094:	e7e9      	b.n	800d06a <__mdiff+0xf6>
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	0800ea60 	.word	0x0800ea60
 800d09c:	00000232 	.word	0x00000232
 800d0a0:	0800eb50 	.word	0x0800eb50

0800d0a4 <__ulp>:
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <__ulp+0x40>)
 800d0a6:	4019      	ands	r1, r3
 800d0a8:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <__ulp+0x44>)
 800d0aa:	18c9      	adds	r1, r1, r3
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	dd04      	ble.n	800d0ba <__ulp+0x16>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	000b      	movs	r3, r1
 800d0b4:	0010      	movs	r0, r2
 800d0b6:	0019      	movs	r1, r3
 800d0b8:	4770      	bx	lr
 800d0ba:	4249      	negs	r1, r1
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	1509      	asrs	r1, r1, #20
 800d0c2:	2913      	cmp	r1, #19
 800d0c4:	dc04      	bgt.n	800d0d0 <__ulp+0x2c>
 800d0c6:	2080      	movs	r0, #128	; 0x80
 800d0c8:	0300      	lsls	r0, r0, #12
 800d0ca:	4108      	asrs	r0, r1
 800d0cc:	0003      	movs	r3, r0
 800d0ce:	e7f1      	b.n	800d0b4 <__ulp+0x10>
 800d0d0:	3914      	subs	r1, #20
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	291e      	cmp	r1, #30
 800d0d6:	dc02      	bgt.n	800d0de <__ulp+0x3a>
 800d0d8:	2080      	movs	r0, #128	; 0x80
 800d0da:	0600      	lsls	r0, r0, #24
 800d0dc:	40c8      	lsrs	r0, r1
 800d0de:	0002      	movs	r2, r0
 800d0e0:	e7e8      	b.n	800d0b4 <__ulp+0x10>
 800d0e2:	46c0      	nop			; (mov r8, r8)
 800d0e4:	7ff00000 	.word	0x7ff00000
 800d0e8:	fcc00000 	.word	0xfcc00000

0800d0ec <__b2d>:
 800d0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ee:	0006      	movs	r6, r0
 800d0f0:	6903      	ldr	r3, [r0, #16]
 800d0f2:	3614      	adds	r6, #20
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	18f3      	adds	r3, r6, r3
 800d0f8:	1f1d      	subs	r5, r3, #4
 800d0fa:	682c      	ldr	r4, [r5, #0]
 800d0fc:	000f      	movs	r7, r1
 800d0fe:	0020      	movs	r0, r4
 800d100:	9301      	str	r3, [sp, #4]
 800d102:	f7ff fd43 	bl	800cb8c <__hi0bits>
 800d106:	2320      	movs	r3, #32
 800d108:	1a1b      	subs	r3, r3, r0
 800d10a:	491f      	ldr	r1, [pc, #124]	; (800d188 <__b2d+0x9c>)
 800d10c:	603b      	str	r3, [r7, #0]
 800d10e:	280a      	cmp	r0, #10
 800d110:	dc16      	bgt.n	800d140 <__b2d+0x54>
 800d112:	230b      	movs	r3, #11
 800d114:	0027      	movs	r7, r4
 800d116:	1a1b      	subs	r3, r3, r0
 800d118:	40df      	lsrs	r7, r3
 800d11a:	4339      	orrs	r1, r7
 800d11c:	469c      	mov	ip, r3
 800d11e:	000b      	movs	r3, r1
 800d120:	2100      	movs	r1, #0
 800d122:	42ae      	cmp	r6, r5
 800d124:	d202      	bcs.n	800d12c <__b2d+0x40>
 800d126:	9901      	ldr	r1, [sp, #4]
 800d128:	3908      	subs	r1, #8
 800d12a:	6809      	ldr	r1, [r1, #0]
 800d12c:	3015      	adds	r0, #21
 800d12e:	4084      	lsls	r4, r0
 800d130:	4660      	mov	r0, ip
 800d132:	40c1      	lsrs	r1, r0
 800d134:	430c      	orrs	r4, r1
 800d136:	0022      	movs	r2, r4
 800d138:	0010      	movs	r0, r2
 800d13a:	0019      	movs	r1, r3
 800d13c:	b003      	add	sp, #12
 800d13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d140:	2700      	movs	r7, #0
 800d142:	42ae      	cmp	r6, r5
 800d144:	d202      	bcs.n	800d14c <__b2d+0x60>
 800d146:	9d01      	ldr	r5, [sp, #4]
 800d148:	3d08      	subs	r5, #8
 800d14a:	682f      	ldr	r7, [r5, #0]
 800d14c:	230b      	movs	r3, #11
 800d14e:	425b      	negs	r3, r3
 800d150:	469c      	mov	ip, r3
 800d152:	4484      	add	ip, r0
 800d154:	280b      	cmp	r0, #11
 800d156:	d013      	beq.n	800d180 <__b2d+0x94>
 800d158:	4663      	mov	r3, ip
 800d15a:	2020      	movs	r0, #32
 800d15c:	409c      	lsls	r4, r3
 800d15e:	1ac0      	subs	r0, r0, r3
 800d160:	003b      	movs	r3, r7
 800d162:	40c3      	lsrs	r3, r0
 800d164:	431c      	orrs	r4, r3
 800d166:	4321      	orrs	r1, r4
 800d168:	000b      	movs	r3, r1
 800d16a:	2100      	movs	r1, #0
 800d16c:	42b5      	cmp	r5, r6
 800d16e:	d901      	bls.n	800d174 <__b2d+0x88>
 800d170:	3d04      	subs	r5, #4
 800d172:	6829      	ldr	r1, [r5, #0]
 800d174:	4664      	mov	r4, ip
 800d176:	40c1      	lsrs	r1, r0
 800d178:	40a7      	lsls	r7, r4
 800d17a:	430f      	orrs	r7, r1
 800d17c:	003a      	movs	r2, r7
 800d17e:	e7db      	b.n	800d138 <__b2d+0x4c>
 800d180:	4321      	orrs	r1, r4
 800d182:	000b      	movs	r3, r1
 800d184:	e7fa      	b.n	800d17c <__b2d+0x90>
 800d186:	46c0      	nop			; (mov r8, r8)
 800d188:	3ff00000 	.word	0x3ff00000

0800d18c <__d2b>:
 800d18c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d18e:	2101      	movs	r1, #1
 800d190:	0014      	movs	r4, r2
 800d192:	001e      	movs	r6, r3
 800d194:	9f08      	ldr	r7, [sp, #32]
 800d196:	f7ff fc01 	bl	800c99c <_Balloc>
 800d19a:	1e05      	subs	r5, r0, #0
 800d19c:	d105      	bne.n	800d1aa <__d2b+0x1e>
 800d19e:	0002      	movs	r2, r0
 800d1a0:	4b26      	ldr	r3, [pc, #152]	; (800d23c <__d2b+0xb0>)
 800d1a2:	4927      	ldr	r1, [pc, #156]	; (800d240 <__d2b+0xb4>)
 800d1a4:	4827      	ldr	r0, [pc, #156]	; (800d244 <__d2b+0xb8>)
 800d1a6:	f001 f925 	bl	800e3f4 <__assert_func>
 800d1aa:	0333      	lsls	r3, r6, #12
 800d1ac:	0076      	lsls	r6, r6, #1
 800d1ae:	0b1b      	lsrs	r3, r3, #12
 800d1b0:	0d76      	lsrs	r6, r6, #21
 800d1b2:	d124      	bne.n	800d1fe <__d2b+0x72>
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	2c00      	cmp	r4, #0
 800d1b8:	d027      	beq.n	800d20a <__d2b+0x7e>
 800d1ba:	4668      	mov	r0, sp
 800d1bc:	9400      	str	r4, [sp, #0]
 800d1be:	f7ff fcff 	bl	800cbc0 <__lo0bits>
 800d1c2:	9c00      	ldr	r4, [sp, #0]
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d01e      	beq.n	800d206 <__d2b+0x7a>
 800d1c8:	9b01      	ldr	r3, [sp, #4]
 800d1ca:	2120      	movs	r1, #32
 800d1cc:	001a      	movs	r2, r3
 800d1ce:	1a09      	subs	r1, r1, r0
 800d1d0:	408a      	lsls	r2, r1
 800d1d2:	40c3      	lsrs	r3, r0
 800d1d4:	4322      	orrs	r2, r4
 800d1d6:	616a      	str	r2, [r5, #20]
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	9c01      	ldr	r4, [sp, #4]
 800d1dc:	61ac      	str	r4, [r5, #24]
 800d1de:	1e63      	subs	r3, r4, #1
 800d1e0:	419c      	sbcs	r4, r3
 800d1e2:	3401      	adds	r4, #1
 800d1e4:	612c      	str	r4, [r5, #16]
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	d018      	beq.n	800d21c <__d2b+0x90>
 800d1ea:	4b17      	ldr	r3, [pc, #92]	; (800d248 <__d2b+0xbc>)
 800d1ec:	18f6      	adds	r6, r6, r3
 800d1ee:	2335      	movs	r3, #53	; 0x35
 800d1f0:	1836      	adds	r6, r6, r0
 800d1f2:	1a18      	subs	r0, r3, r0
 800d1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f6:	603e      	str	r6, [r7, #0]
 800d1f8:	6018      	str	r0, [r3, #0]
 800d1fa:	0028      	movs	r0, r5
 800d1fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1fe:	2280      	movs	r2, #128	; 0x80
 800d200:	0352      	lsls	r2, r2, #13
 800d202:	4313      	orrs	r3, r2
 800d204:	e7d6      	b.n	800d1b4 <__d2b+0x28>
 800d206:	616c      	str	r4, [r5, #20]
 800d208:	e7e7      	b.n	800d1da <__d2b+0x4e>
 800d20a:	a801      	add	r0, sp, #4
 800d20c:	f7ff fcd8 	bl	800cbc0 <__lo0bits>
 800d210:	2401      	movs	r4, #1
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	612c      	str	r4, [r5, #16]
 800d216:	616b      	str	r3, [r5, #20]
 800d218:	3020      	adds	r0, #32
 800d21a:	e7e4      	b.n	800d1e6 <__d2b+0x5a>
 800d21c:	4b0b      	ldr	r3, [pc, #44]	; (800d24c <__d2b+0xc0>)
 800d21e:	18c0      	adds	r0, r0, r3
 800d220:	4b0b      	ldr	r3, [pc, #44]	; (800d250 <__d2b+0xc4>)
 800d222:	6038      	str	r0, [r7, #0]
 800d224:	18e3      	adds	r3, r4, r3
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	18eb      	adds	r3, r5, r3
 800d22a:	6958      	ldr	r0, [r3, #20]
 800d22c:	f7ff fcae 	bl	800cb8c <__hi0bits>
 800d230:	0164      	lsls	r4, r4, #5
 800d232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d234:	1a24      	subs	r4, r4, r0
 800d236:	601c      	str	r4, [r3, #0]
 800d238:	e7df      	b.n	800d1fa <__d2b+0x6e>
 800d23a:	46c0      	nop			; (mov r8, r8)
 800d23c:	0800ea60 	.word	0x0800ea60
 800d240:	0000030a 	.word	0x0000030a
 800d244:	0800eb50 	.word	0x0800eb50
 800d248:	fffffbcd 	.word	0xfffffbcd
 800d24c:	fffffbce 	.word	0xfffffbce
 800d250:	3fffffff 	.word	0x3fffffff

0800d254 <__ratio>:
 800d254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d256:	b087      	sub	sp, #28
 800d258:	000f      	movs	r7, r1
 800d25a:	a904      	add	r1, sp, #16
 800d25c:	0006      	movs	r6, r0
 800d25e:	f7ff ff45 	bl	800d0ec <__b2d>
 800d262:	9000      	str	r0, [sp, #0]
 800d264:	9101      	str	r1, [sp, #4]
 800d266:	9c00      	ldr	r4, [sp, #0]
 800d268:	9d01      	ldr	r5, [sp, #4]
 800d26a:	0038      	movs	r0, r7
 800d26c:	a905      	add	r1, sp, #20
 800d26e:	f7ff ff3d 	bl	800d0ec <__b2d>
 800d272:	9002      	str	r0, [sp, #8]
 800d274:	9103      	str	r1, [sp, #12]
 800d276:	9a02      	ldr	r2, [sp, #8]
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	6931      	ldr	r1, [r6, #16]
 800d27c:	6938      	ldr	r0, [r7, #16]
 800d27e:	9e05      	ldr	r6, [sp, #20]
 800d280:	1a08      	subs	r0, r1, r0
 800d282:	9904      	ldr	r1, [sp, #16]
 800d284:	0140      	lsls	r0, r0, #5
 800d286:	1b89      	subs	r1, r1, r6
 800d288:	1841      	adds	r1, r0, r1
 800d28a:	0508      	lsls	r0, r1, #20
 800d28c:	2900      	cmp	r1, #0
 800d28e:	dd07      	ble.n	800d2a0 <__ratio+0x4c>
 800d290:	9901      	ldr	r1, [sp, #4]
 800d292:	1845      	adds	r5, r0, r1
 800d294:	0020      	movs	r0, r4
 800d296:	0029      	movs	r1, r5
 800d298:	f7f3 ffee 	bl	8001278 <__aeabi_ddiv>
 800d29c:	b007      	add	sp, #28
 800d29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a0:	9903      	ldr	r1, [sp, #12]
 800d2a2:	1a0b      	subs	r3, r1, r0
 800d2a4:	e7f6      	b.n	800d294 <__ratio+0x40>

0800d2a6 <__copybits>:
 800d2a6:	b570      	push	{r4, r5, r6, lr}
 800d2a8:	0014      	movs	r4, r2
 800d2aa:	0005      	movs	r5, r0
 800d2ac:	3901      	subs	r1, #1
 800d2ae:	6913      	ldr	r3, [r2, #16]
 800d2b0:	1149      	asrs	r1, r1, #5
 800d2b2:	3101      	adds	r1, #1
 800d2b4:	0089      	lsls	r1, r1, #2
 800d2b6:	3414      	adds	r4, #20
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	1841      	adds	r1, r0, r1
 800d2bc:	18e3      	adds	r3, r4, r3
 800d2be:	42a3      	cmp	r3, r4
 800d2c0:	d80d      	bhi.n	800d2de <__copybits+0x38>
 800d2c2:	0014      	movs	r4, r2
 800d2c4:	3411      	adds	r4, #17
 800d2c6:	2500      	movs	r5, #0
 800d2c8:	429c      	cmp	r4, r3
 800d2ca:	d803      	bhi.n	800d2d4 <__copybits+0x2e>
 800d2cc:	1a9b      	subs	r3, r3, r2
 800d2ce:	3b11      	subs	r3, #17
 800d2d0:	089b      	lsrs	r3, r3, #2
 800d2d2:	009d      	lsls	r5, r3, #2
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	1940      	adds	r0, r0, r5
 800d2d8:	4281      	cmp	r1, r0
 800d2da:	d803      	bhi.n	800d2e4 <__copybits+0x3e>
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	cc40      	ldmia	r4!, {r6}
 800d2e0:	c540      	stmia	r5!, {r6}
 800d2e2:	e7ec      	b.n	800d2be <__copybits+0x18>
 800d2e4:	c008      	stmia	r0!, {r3}
 800d2e6:	e7f7      	b.n	800d2d8 <__copybits+0x32>

0800d2e8 <__any_on>:
 800d2e8:	0002      	movs	r2, r0
 800d2ea:	6900      	ldr	r0, [r0, #16]
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	3214      	adds	r2, #20
 800d2f0:	114b      	asrs	r3, r1, #5
 800d2f2:	4298      	cmp	r0, r3
 800d2f4:	db13      	blt.n	800d31e <__any_on+0x36>
 800d2f6:	dd0c      	ble.n	800d312 <__any_on+0x2a>
 800d2f8:	241f      	movs	r4, #31
 800d2fa:	0008      	movs	r0, r1
 800d2fc:	4020      	ands	r0, r4
 800d2fe:	4221      	tst	r1, r4
 800d300:	d007      	beq.n	800d312 <__any_on+0x2a>
 800d302:	0099      	lsls	r1, r3, #2
 800d304:	588c      	ldr	r4, [r1, r2]
 800d306:	0021      	movs	r1, r4
 800d308:	40c1      	lsrs	r1, r0
 800d30a:	4081      	lsls	r1, r0
 800d30c:	2001      	movs	r0, #1
 800d30e:	428c      	cmp	r4, r1
 800d310:	d104      	bne.n	800d31c <__any_on+0x34>
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	18d3      	adds	r3, r2, r3
 800d316:	4293      	cmp	r3, r2
 800d318:	d803      	bhi.n	800d322 <__any_on+0x3a>
 800d31a:	2000      	movs	r0, #0
 800d31c:	bd10      	pop	{r4, pc}
 800d31e:	0003      	movs	r3, r0
 800d320:	e7f7      	b.n	800d312 <__any_on+0x2a>
 800d322:	3b04      	subs	r3, #4
 800d324:	6819      	ldr	r1, [r3, #0]
 800d326:	2900      	cmp	r1, #0
 800d328:	d0f5      	beq.n	800d316 <__any_on+0x2e>
 800d32a:	2001      	movs	r0, #1
 800d32c:	e7f6      	b.n	800d31c <__any_on+0x34>

0800d32e <_calloc_r>:
 800d32e:	b570      	push	{r4, r5, r6, lr}
 800d330:	0c13      	lsrs	r3, r2, #16
 800d332:	0c0d      	lsrs	r5, r1, #16
 800d334:	d11e      	bne.n	800d374 <_calloc_r+0x46>
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10c      	bne.n	800d354 <_calloc_r+0x26>
 800d33a:	b289      	uxth	r1, r1
 800d33c:	b294      	uxth	r4, r2
 800d33e:	434c      	muls	r4, r1
 800d340:	0021      	movs	r1, r4
 800d342:	f000 f88d 	bl	800d460 <_malloc_r>
 800d346:	1e05      	subs	r5, r0, #0
 800d348:	d01b      	beq.n	800d382 <_calloc_r+0x54>
 800d34a:	0022      	movs	r2, r4
 800d34c:	2100      	movs	r1, #0
 800d34e:	f7fb ff16 	bl	800917e <memset>
 800d352:	e016      	b.n	800d382 <_calloc_r+0x54>
 800d354:	1c1d      	adds	r5, r3, #0
 800d356:	1c0b      	adds	r3, r1, #0
 800d358:	b292      	uxth	r2, r2
 800d35a:	b289      	uxth	r1, r1
 800d35c:	b29c      	uxth	r4, r3
 800d35e:	4351      	muls	r1, r2
 800d360:	b2ab      	uxth	r3, r5
 800d362:	4363      	muls	r3, r4
 800d364:	0c0c      	lsrs	r4, r1, #16
 800d366:	191c      	adds	r4, r3, r4
 800d368:	0c22      	lsrs	r2, r4, #16
 800d36a:	d107      	bne.n	800d37c <_calloc_r+0x4e>
 800d36c:	0424      	lsls	r4, r4, #16
 800d36e:	b289      	uxth	r1, r1
 800d370:	430c      	orrs	r4, r1
 800d372:	e7e5      	b.n	800d340 <_calloc_r+0x12>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <_calloc_r+0x4e>
 800d378:	1c13      	adds	r3, r2, #0
 800d37a:	e7ed      	b.n	800d358 <_calloc_r+0x2a>
 800d37c:	230c      	movs	r3, #12
 800d37e:	2500      	movs	r5, #0
 800d380:	6003      	str	r3, [r0, #0]
 800d382:	0028      	movs	r0, r5
 800d384:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d388 <_free_r>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	0005      	movs	r5, r0
 800d38c:	2900      	cmp	r1, #0
 800d38e:	d010      	beq.n	800d3b2 <_free_r+0x2a>
 800d390:	1f0c      	subs	r4, r1, #4
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	da00      	bge.n	800d39a <_free_r+0x12>
 800d398:	18e4      	adds	r4, r4, r3
 800d39a:	0028      	movs	r0, r5
 800d39c:	f001 f890 	bl	800e4c0 <__malloc_lock>
 800d3a0:	4a1d      	ldr	r2, [pc, #116]	; (800d418 <_free_r+0x90>)
 800d3a2:	6813      	ldr	r3, [r2, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d105      	bne.n	800d3b4 <_free_r+0x2c>
 800d3a8:	6063      	str	r3, [r4, #4]
 800d3aa:	6014      	str	r4, [r2, #0]
 800d3ac:	0028      	movs	r0, r5
 800d3ae:	f001 f88f 	bl	800e4d0 <__malloc_unlock>
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	d908      	bls.n	800d3ca <_free_r+0x42>
 800d3b8:	6821      	ldr	r1, [r4, #0]
 800d3ba:	1860      	adds	r0, r4, r1
 800d3bc:	4283      	cmp	r3, r0
 800d3be:	d1f3      	bne.n	800d3a8 <_free_r+0x20>
 800d3c0:	6818      	ldr	r0, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	1841      	adds	r1, r0, r1
 800d3c6:	6021      	str	r1, [r4, #0]
 800d3c8:	e7ee      	b.n	800d3a8 <_free_r+0x20>
 800d3ca:	001a      	movs	r2, r3
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <_free_r+0x4e>
 800d3d2:	42a3      	cmp	r3, r4
 800d3d4:	d9f9      	bls.n	800d3ca <_free_r+0x42>
 800d3d6:	6811      	ldr	r1, [r2, #0]
 800d3d8:	1850      	adds	r0, r2, r1
 800d3da:	42a0      	cmp	r0, r4
 800d3dc:	d10b      	bne.n	800d3f6 <_free_r+0x6e>
 800d3de:	6820      	ldr	r0, [r4, #0]
 800d3e0:	1809      	adds	r1, r1, r0
 800d3e2:	1850      	adds	r0, r2, r1
 800d3e4:	6011      	str	r1, [r2, #0]
 800d3e6:	4283      	cmp	r3, r0
 800d3e8:	d1e0      	bne.n	800d3ac <_free_r+0x24>
 800d3ea:	6818      	ldr	r0, [r3, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	1841      	adds	r1, r0, r1
 800d3f0:	6011      	str	r1, [r2, #0]
 800d3f2:	6053      	str	r3, [r2, #4]
 800d3f4:	e7da      	b.n	800d3ac <_free_r+0x24>
 800d3f6:	42a0      	cmp	r0, r4
 800d3f8:	d902      	bls.n	800d400 <_free_r+0x78>
 800d3fa:	230c      	movs	r3, #12
 800d3fc:	602b      	str	r3, [r5, #0]
 800d3fe:	e7d5      	b.n	800d3ac <_free_r+0x24>
 800d400:	6821      	ldr	r1, [r4, #0]
 800d402:	1860      	adds	r0, r4, r1
 800d404:	4283      	cmp	r3, r0
 800d406:	d103      	bne.n	800d410 <_free_r+0x88>
 800d408:	6818      	ldr	r0, [r3, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	1841      	adds	r1, r0, r1
 800d40e:	6021      	str	r1, [r4, #0]
 800d410:	6063      	str	r3, [r4, #4]
 800d412:	6054      	str	r4, [r2, #4]
 800d414:	e7ca      	b.n	800d3ac <_free_r+0x24>
 800d416:	46c0      	nop			; (mov r8, r8)
 800d418:	20000650 	.word	0x20000650

0800d41c <sbrk_aligned>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	4e0f      	ldr	r6, [pc, #60]	; (800d45c <sbrk_aligned+0x40>)
 800d420:	000d      	movs	r5, r1
 800d422:	6831      	ldr	r1, [r6, #0]
 800d424:	0004      	movs	r4, r0
 800d426:	2900      	cmp	r1, #0
 800d428:	d102      	bne.n	800d430 <sbrk_aligned+0x14>
 800d42a:	f000 fea9 	bl	800e180 <_sbrk_r>
 800d42e:	6030      	str	r0, [r6, #0]
 800d430:	0029      	movs	r1, r5
 800d432:	0020      	movs	r0, r4
 800d434:	f000 fea4 	bl	800e180 <_sbrk_r>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d00a      	beq.n	800d452 <sbrk_aligned+0x36>
 800d43c:	2303      	movs	r3, #3
 800d43e:	1cc5      	adds	r5, r0, #3
 800d440:	439d      	bics	r5, r3
 800d442:	42a8      	cmp	r0, r5
 800d444:	d007      	beq.n	800d456 <sbrk_aligned+0x3a>
 800d446:	1a29      	subs	r1, r5, r0
 800d448:	0020      	movs	r0, r4
 800d44a:	f000 fe99 	bl	800e180 <_sbrk_r>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d101      	bne.n	800d456 <sbrk_aligned+0x3a>
 800d452:	2501      	movs	r5, #1
 800d454:	426d      	negs	r5, r5
 800d456:	0028      	movs	r0, r5
 800d458:	bd70      	pop	{r4, r5, r6, pc}
 800d45a:	46c0      	nop			; (mov r8, r8)
 800d45c:	20000654 	.word	0x20000654

0800d460 <_malloc_r>:
 800d460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d462:	2203      	movs	r2, #3
 800d464:	1ccb      	adds	r3, r1, #3
 800d466:	4393      	bics	r3, r2
 800d468:	3308      	adds	r3, #8
 800d46a:	0006      	movs	r6, r0
 800d46c:	001f      	movs	r7, r3
 800d46e:	2b0c      	cmp	r3, #12
 800d470:	d232      	bcs.n	800d4d8 <_malloc_r+0x78>
 800d472:	270c      	movs	r7, #12
 800d474:	42b9      	cmp	r1, r7
 800d476:	d831      	bhi.n	800d4dc <_malloc_r+0x7c>
 800d478:	0030      	movs	r0, r6
 800d47a:	f001 f821 	bl	800e4c0 <__malloc_lock>
 800d47e:	4d32      	ldr	r5, [pc, #200]	; (800d548 <_malloc_r+0xe8>)
 800d480:	682b      	ldr	r3, [r5, #0]
 800d482:	001c      	movs	r4, r3
 800d484:	2c00      	cmp	r4, #0
 800d486:	d12e      	bne.n	800d4e6 <_malloc_r+0x86>
 800d488:	0039      	movs	r1, r7
 800d48a:	0030      	movs	r0, r6
 800d48c:	f7ff ffc6 	bl	800d41c <sbrk_aligned>
 800d490:	0004      	movs	r4, r0
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	d11e      	bne.n	800d4d4 <_malloc_r+0x74>
 800d496:	682c      	ldr	r4, [r5, #0]
 800d498:	0025      	movs	r5, r4
 800d49a:	2d00      	cmp	r5, #0
 800d49c:	d14a      	bne.n	800d534 <_malloc_r+0xd4>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	0029      	movs	r1, r5
 800d4a2:	18e3      	adds	r3, r4, r3
 800d4a4:	0030      	movs	r0, r6
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	f000 fe6a 	bl	800e180 <_sbrk_r>
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	d143      	bne.n	800d53a <_malloc_r+0xda>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	3703      	adds	r7, #3
 800d4b6:	1aff      	subs	r7, r7, r3
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	439f      	bics	r7, r3
 800d4bc:	3708      	adds	r7, #8
 800d4be:	2f0c      	cmp	r7, #12
 800d4c0:	d200      	bcs.n	800d4c4 <_malloc_r+0x64>
 800d4c2:	270c      	movs	r7, #12
 800d4c4:	0039      	movs	r1, r7
 800d4c6:	0030      	movs	r0, r6
 800d4c8:	f7ff ffa8 	bl	800d41c <sbrk_aligned>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d034      	beq.n	800d53a <_malloc_r+0xda>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	19df      	adds	r7, r3, r7
 800d4d4:	6027      	str	r7, [r4, #0]
 800d4d6:	e013      	b.n	800d500 <_malloc_r+0xa0>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dacb      	bge.n	800d474 <_malloc_r+0x14>
 800d4dc:	230c      	movs	r3, #12
 800d4de:	2500      	movs	r5, #0
 800d4e0:	6033      	str	r3, [r6, #0]
 800d4e2:	0028      	movs	r0, r5
 800d4e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4e6:	6822      	ldr	r2, [r4, #0]
 800d4e8:	1bd1      	subs	r1, r2, r7
 800d4ea:	d420      	bmi.n	800d52e <_malloc_r+0xce>
 800d4ec:	290b      	cmp	r1, #11
 800d4ee:	d917      	bls.n	800d520 <_malloc_r+0xc0>
 800d4f0:	19e2      	adds	r2, r4, r7
 800d4f2:	6027      	str	r7, [r4, #0]
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	d111      	bne.n	800d51c <_malloc_r+0xbc>
 800d4f8:	602a      	str	r2, [r5, #0]
 800d4fa:	6863      	ldr	r3, [r4, #4]
 800d4fc:	6011      	str	r1, [r2, #0]
 800d4fe:	6053      	str	r3, [r2, #4]
 800d500:	0030      	movs	r0, r6
 800d502:	0025      	movs	r5, r4
 800d504:	f000 ffe4 	bl	800e4d0 <__malloc_unlock>
 800d508:	2207      	movs	r2, #7
 800d50a:	350b      	adds	r5, #11
 800d50c:	1d23      	adds	r3, r4, #4
 800d50e:	4395      	bics	r5, r2
 800d510:	1aea      	subs	r2, r5, r3
 800d512:	429d      	cmp	r5, r3
 800d514:	d0e5      	beq.n	800d4e2 <_malloc_r+0x82>
 800d516:	1b5b      	subs	r3, r3, r5
 800d518:	50a3      	str	r3, [r4, r2]
 800d51a:	e7e2      	b.n	800d4e2 <_malloc_r+0x82>
 800d51c:	605a      	str	r2, [r3, #4]
 800d51e:	e7ec      	b.n	800d4fa <_malloc_r+0x9a>
 800d520:	6862      	ldr	r2, [r4, #4]
 800d522:	42a3      	cmp	r3, r4
 800d524:	d101      	bne.n	800d52a <_malloc_r+0xca>
 800d526:	602a      	str	r2, [r5, #0]
 800d528:	e7ea      	b.n	800d500 <_malloc_r+0xa0>
 800d52a:	605a      	str	r2, [r3, #4]
 800d52c:	e7e8      	b.n	800d500 <_malloc_r+0xa0>
 800d52e:	0023      	movs	r3, r4
 800d530:	6864      	ldr	r4, [r4, #4]
 800d532:	e7a7      	b.n	800d484 <_malloc_r+0x24>
 800d534:	002c      	movs	r4, r5
 800d536:	686d      	ldr	r5, [r5, #4]
 800d538:	e7af      	b.n	800d49a <_malloc_r+0x3a>
 800d53a:	230c      	movs	r3, #12
 800d53c:	0030      	movs	r0, r6
 800d53e:	6033      	str	r3, [r6, #0]
 800d540:	f000 ffc6 	bl	800e4d0 <__malloc_unlock>
 800d544:	e7cd      	b.n	800d4e2 <_malloc_r+0x82>
 800d546:	46c0      	nop			; (mov r8, r8)
 800d548:	20000650 	.word	0x20000650

0800d54c <__ssputs_r>:
 800d54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d54e:	688e      	ldr	r6, [r1, #8]
 800d550:	b085      	sub	sp, #20
 800d552:	0007      	movs	r7, r0
 800d554:	000c      	movs	r4, r1
 800d556:	9203      	str	r2, [sp, #12]
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	429e      	cmp	r6, r3
 800d55c:	d83c      	bhi.n	800d5d8 <__ssputs_r+0x8c>
 800d55e:	2390      	movs	r3, #144	; 0x90
 800d560:	898a      	ldrh	r2, [r1, #12]
 800d562:	00db      	lsls	r3, r3, #3
 800d564:	421a      	tst	r2, r3
 800d566:	d034      	beq.n	800d5d2 <__ssputs_r+0x86>
 800d568:	6909      	ldr	r1, [r1, #16]
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	6960      	ldr	r0, [r4, #20]
 800d56e:	1a5b      	subs	r3, r3, r1
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	2303      	movs	r3, #3
 800d574:	4343      	muls	r3, r0
 800d576:	0fdd      	lsrs	r5, r3, #31
 800d578:	18ed      	adds	r5, r5, r3
 800d57a:	9b01      	ldr	r3, [sp, #4]
 800d57c:	9802      	ldr	r0, [sp, #8]
 800d57e:	3301      	adds	r3, #1
 800d580:	181b      	adds	r3, r3, r0
 800d582:	106d      	asrs	r5, r5, #1
 800d584:	42ab      	cmp	r3, r5
 800d586:	d900      	bls.n	800d58a <__ssputs_r+0x3e>
 800d588:	001d      	movs	r5, r3
 800d58a:	0553      	lsls	r3, r2, #21
 800d58c:	d532      	bpl.n	800d5f4 <__ssputs_r+0xa8>
 800d58e:	0029      	movs	r1, r5
 800d590:	0038      	movs	r0, r7
 800d592:	f7ff ff65 	bl	800d460 <_malloc_r>
 800d596:	1e06      	subs	r6, r0, #0
 800d598:	d109      	bne.n	800d5ae <__ssputs_r+0x62>
 800d59a:	230c      	movs	r3, #12
 800d59c:	603b      	str	r3, [r7, #0]
 800d59e:	2340      	movs	r3, #64	; 0x40
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	89a2      	ldrh	r2, [r4, #12]
 800d5a4:	4240      	negs	r0, r0
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	81a3      	strh	r3, [r4, #12]
 800d5aa:	b005      	add	sp, #20
 800d5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ae:	9a02      	ldr	r2, [sp, #8]
 800d5b0:	6921      	ldr	r1, [r4, #16]
 800d5b2:	f7fb fddb 	bl	800916c <memcpy>
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	4a14      	ldr	r2, [pc, #80]	; (800d60c <__ssputs_r+0xc0>)
 800d5ba:	401a      	ands	r2, r3
 800d5bc:	2380      	movs	r3, #128	; 0x80
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	9b02      	ldr	r3, [sp, #8]
 800d5c4:	6126      	str	r6, [r4, #16]
 800d5c6:	18f6      	adds	r6, r6, r3
 800d5c8:	6026      	str	r6, [r4, #0]
 800d5ca:	6165      	str	r5, [r4, #20]
 800d5cc:	9e01      	ldr	r6, [sp, #4]
 800d5ce:	1aed      	subs	r5, r5, r3
 800d5d0:	60a5      	str	r5, [r4, #8]
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	429e      	cmp	r6, r3
 800d5d6:	d900      	bls.n	800d5da <__ssputs_r+0x8e>
 800d5d8:	9e01      	ldr	r6, [sp, #4]
 800d5da:	0032      	movs	r2, r6
 800d5dc:	9903      	ldr	r1, [sp, #12]
 800d5de:	6820      	ldr	r0, [r4, #0]
 800d5e0:	f000 ff5a 	bl	800e498 <memmove>
 800d5e4:	68a3      	ldr	r3, [r4, #8]
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	1b9b      	subs	r3, r3, r6
 800d5ea:	60a3      	str	r3, [r4, #8]
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	199e      	adds	r6, r3, r6
 800d5f0:	6026      	str	r6, [r4, #0]
 800d5f2:	e7da      	b.n	800d5aa <__ssputs_r+0x5e>
 800d5f4:	002a      	movs	r2, r5
 800d5f6:	0038      	movs	r0, r7
 800d5f8:	f000 ff72 	bl	800e4e0 <_realloc_r>
 800d5fc:	1e06      	subs	r6, r0, #0
 800d5fe:	d1e0      	bne.n	800d5c2 <__ssputs_r+0x76>
 800d600:	0038      	movs	r0, r7
 800d602:	6921      	ldr	r1, [r4, #16]
 800d604:	f7ff fec0 	bl	800d388 <_free_r>
 800d608:	e7c7      	b.n	800d59a <__ssputs_r+0x4e>
 800d60a:	46c0      	nop			; (mov r8, r8)
 800d60c:	fffffb7f 	.word	0xfffffb7f

0800d610 <_svfiprintf_r>:
 800d610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d612:	b0a1      	sub	sp, #132	; 0x84
 800d614:	9003      	str	r0, [sp, #12]
 800d616:	001d      	movs	r5, r3
 800d618:	898b      	ldrh	r3, [r1, #12]
 800d61a:	000f      	movs	r7, r1
 800d61c:	0016      	movs	r6, r2
 800d61e:	061b      	lsls	r3, r3, #24
 800d620:	d511      	bpl.n	800d646 <_svfiprintf_r+0x36>
 800d622:	690b      	ldr	r3, [r1, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10e      	bne.n	800d646 <_svfiprintf_r+0x36>
 800d628:	2140      	movs	r1, #64	; 0x40
 800d62a:	f7ff ff19 	bl	800d460 <_malloc_r>
 800d62e:	6038      	str	r0, [r7, #0]
 800d630:	6138      	str	r0, [r7, #16]
 800d632:	2800      	cmp	r0, #0
 800d634:	d105      	bne.n	800d642 <_svfiprintf_r+0x32>
 800d636:	230c      	movs	r3, #12
 800d638:	9a03      	ldr	r2, [sp, #12]
 800d63a:	3801      	subs	r0, #1
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	b021      	add	sp, #132	; 0x84
 800d640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d642:	2340      	movs	r3, #64	; 0x40
 800d644:	617b      	str	r3, [r7, #20]
 800d646:	2300      	movs	r3, #0
 800d648:	ac08      	add	r4, sp, #32
 800d64a:	6163      	str	r3, [r4, #20]
 800d64c:	3320      	adds	r3, #32
 800d64e:	7663      	strb	r3, [r4, #25]
 800d650:	3310      	adds	r3, #16
 800d652:	76a3      	strb	r3, [r4, #26]
 800d654:	9507      	str	r5, [sp, #28]
 800d656:	0035      	movs	r5, r6
 800d658:	782b      	ldrb	r3, [r5, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <_svfiprintf_r+0x52>
 800d65e:	2b25      	cmp	r3, #37	; 0x25
 800d660:	d147      	bne.n	800d6f2 <_svfiprintf_r+0xe2>
 800d662:	1bab      	subs	r3, r5, r6
 800d664:	9305      	str	r3, [sp, #20]
 800d666:	42b5      	cmp	r5, r6
 800d668:	d00c      	beq.n	800d684 <_svfiprintf_r+0x74>
 800d66a:	0032      	movs	r2, r6
 800d66c:	0039      	movs	r1, r7
 800d66e:	9803      	ldr	r0, [sp, #12]
 800d670:	f7ff ff6c 	bl	800d54c <__ssputs_r>
 800d674:	1c43      	adds	r3, r0, #1
 800d676:	d100      	bne.n	800d67a <_svfiprintf_r+0x6a>
 800d678:	e0ae      	b.n	800d7d8 <_svfiprintf_r+0x1c8>
 800d67a:	6962      	ldr	r2, [r4, #20]
 800d67c:	9b05      	ldr	r3, [sp, #20]
 800d67e:	4694      	mov	ip, r2
 800d680:	4463      	add	r3, ip
 800d682:	6163      	str	r3, [r4, #20]
 800d684:	782b      	ldrb	r3, [r5, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d100      	bne.n	800d68c <_svfiprintf_r+0x7c>
 800d68a:	e0a5      	b.n	800d7d8 <_svfiprintf_r+0x1c8>
 800d68c:	2201      	movs	r2, #1
 800d68e:	2300      	movs	r3, #0
 800d690:	4252      	negs	r2, r2
 800d692:	6062      	str	r2, [r4, #4]
 800d694:	a904      	add	r1, sp, #16
 800d696:	3254      	adds	r2, #84	; 0x54
 800d698:	1852      	adds	r2, r2, r1
 800d69a:	1c6e      	adds	r6, r5, #1
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	60e3      	str	r3, [r4, #12]
 800d6a0:	60a3      	str	r3, [r4, #8]
 800d6a2:	7013      	strb	r3, [r2, #0]
 800d6a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800d6a6:	2205      	movs	r2, #5
 800d6a8:	7831      	ldrb	r1, [r6, #0]
 800d6aa:	4854      	ldr	r0, [pc, #336]	; (800d7fc <_svfiprintf_r+0x1ec>)
 800d6ac:	f7ff f96a 	bl	800c984 <memchr>
 800d6b0:	1c75      	adds	r5, r6, #1
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d11f      	bne.n	800d6f6 <_svfiprintf_r+0xe6>
 800d6b6:	6822      	ldr	r2, [r4, #0]
 800d6b8:	06d3      	lsls	r3, r2, #27
 800d6ba:	d504      	bpl.n	800d6c6 <_svfiprintf_r+0xb6>
 800d6bc:	2353      	movs	r3, #83	; 0x53
 800d6be:	a904      	add	r1, sp, #16
 800d6c0:	185b      	adds	r3, r3, r1
 800d6c2:	2120      	movs	r1, #32
 800d6c4:	7019      	strb	r1, [r3, #0]
 800d6c6:	0713      	lsls	r3, r2, #28
 800d6c8:	d504      	bpl.n	800d6d4 <_svfiprintf_r+0xc4>
 800d6ca:	2353      	movs	r3, #83	; 0x53
 800d6cc:	a904      	add	r1, sp, #16
 800d6ce:	185b      	adds	r3, r3, r1
 800d6d0:	212b      	movs	r1, #43	; 0x2b
 800d6d2:	7019      	strb	r1, [r3, #0]
 800d6d4:	7833      	ldrb	r3, [r6, #0]
 800d6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6d8:	d016      	beq.n	800d708 <_svfiprintf_r+0xf8>
 800d6da:	0035      	movs	r5, r6
 800d6dc:	2100      	movs	r1, #0
 800d6de:	200a      	movs	r0, #10
 800d6e0:	68e3      	ldr	r3, [r4, #12]
 800d6e2:	782a      	ldrb	r2, [r5, #0]
 800d6e4:	1c6e      	adds	r6, r5, #1
 800d6e6:	3a30      	subs	r2, #48	; 0x30
 800d6e8:	2a09      	cmp	r2, #9
 800d6ea:	d94e      	bls.n	800d78a <_svfiprintf_r+0x17a>
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	d111      	bne.n	800d714 <_svfiprintf_r+0x104>
 800d6f0:	e017      	b.n	800d722 <_svfiprintf_r+0x112>
 800d6f2:	3501      	adds	r5, #1
 800d6f4:	e7b0      	b.n	800d658 <_svfiprintf_r+0x48>
 800d6f6:	4b41      	ldr	r3, [pc, #260]	; (800d7fc <_svfiprintf_r+0x1ec>)
 800d6f8:	6822      	ldr	r2, [r4, #0]
 800d6fa:	1ac0      	subs	r0, r0, r3
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	4083      	lsls	r3, r0
 800d700:	4313      	orrs	r3, r2
 800d702:	002e      	movs	r6, r5
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	e7ce      	b.n	800d6a6 <_svfiprintf_r+0x96>
 800d708:	9b07      	ldr	r3, [sp, #28]
 800d70a:	1d19      	adds	r1, r3, #4
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	9107      	str	r1, [sp, #28]
 800d710:	2b00      	cmp	r3, #0
 800d712:	db01      	blt.n	800d718 <_svfiprintf_r+0x108>
 800d714:	930b      	str	r3, [sp, #44]	; 0x2c
 800d716:	e004      	b.n	800d722 <_svfiprintf_r+0x112>
 800d718:	425b      	negs	r3, r3
 800d71a:	60e3      	str	r3, [r4, #12]
 800d71c:	2302      	movs	r3, #2
 800d71e:	4313      	orrs	r3, r2
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	782b      	ldrb	r3, [r5, #0]
 800d724:	2b2e      	cmp	r3, #46	; 0x2e
 800d726:	d10a      	bne.n	800d73e <_svfiprintf_r+0x12e>
 800d728:	786b      	ldrb	r3, [r5, #1]
 800d72a:	2b2a      	cmp	r3, #42	; 0x2a
 800d72c:	d135      	bne.n	800d79a <_svfiprintf_r+0x18a>
 800d72e:	9b07      	ldr	r3, [sp, #28]
 800d730:	3502      	adds	r5, #2
 800d732:	1d1a      	adds	r2, r3, #4
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	9207      	str	r2, [sp, #28]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	db2b      	blt.n	800d794 <_svfiprintf_r+0x184>
 800d73c:	9309      	str	r3, [sp, #36]	; 0x24
 800d73e:	4e30      	ldr	r6, [pc, #192]	; (800d800 <_svfiprintf_r+0x1f0>)
 800d740:	2203      	movs	r2, #3
 800d742:	0030      	movs	r0, r6
 800d744:	7829      	ldrb	r1, [r5, #0]
 800d746:	f7ff f91d 	bl	800c984 <memchr>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d006      	beq.n	800d75c <_svfiprintf_r+0x14c>
 800d74e:	2340      	movs	r3, #64	; 0x40
 800d750:	1b80      	subs	r0, r0, r6
 800d752:	4083      	lsls	r3, r0
 800d754:	6822      	ldr	r2, [r4, #0]
 800d756:	3501      	adds	r5, #1
 800d758:	4313      	orrs	r3, r2
 800d75a:	6023      	str	r3, [r4, #0]
 800d75c:	7829      	ldrb	r1, [r5, #0]
 800d75e:	2206      	movs	r2, #6
 800d760:	4828      	ldr	r0, [pc, #160]	; (800d804 <_svfiprintf_r+0x1f4>)
 800d762:	1c6e      	adds	r6, r5, #1
 800d764:	7621      	strb	r1, [r4, #24]
 800d766:	f7ff f90d 	bl	800c984 <memchr>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d03c      	beq.n	800d7e8 <_svfiprintf_r+0x1d8>
 800d76e:	4b26      	ldr	r3, [pc, #152]	; (800d808 <_svfiprintf_r+0x1f8>)
 800d770:	2b00      	cmp	r3, #0
 800d772:	d125      	bne.n	800d7c0 <_svfiprintf_r+0x1b0>
 800d774:	2207      	movs	r2, #7
 800d776:	9b07      	ldr	r3, [sp, #28]
 800d778:	3307      	adds	r3, #7
 800d77a:	4393      	bics	r3, r2
 800d77c:	3308      	adds	r3, #8
 800d77e:	9307      	str	r3, [sp, #28]
 800d780:	6963      	ldr	r3, [r4, #20]
 800d782:	9a04      	ldr	r2, [sp, #16]
 800d784:	189b      	adds	r3, r3, r2
 800d786:	6163      	str	r3, [r4, #20]
 800d788:	e765      	b.n	800d656 <_svfiprintf_r+0x46>
 800d78a:	4343      	muls	r3, r0
 800d78c:	0035      	movs	r5, r6
 800d78e:	2101      	movs	r1, #1
 800d790:	189b      	adds	r3, r3, r2
 800d792:	e7a6      	b.n	800d6e2 <_svfiprintf_r+0xd2>
 800d794:	2301      	movs	r3, #1
 800d796:	425b      	negs	r3, r3
 800d798:	e7d0      	b.n	800d73c <_svfiprintf_r+0x12c>
 800d79a:	2300      	movs	r3, #0
 800d79c:	200a      	movs	r0, #10
 800d79e:	001a      	movs	r2, r3
 800d7a0:	3501      	adds	r5, #1
 800d7a2:	6063      	str	r3, [r4, #4]
 800d7a4:	7829      	ldrb	r1, [r5, #0]
 800d7a6:	1c6e      	adds	r6, r5, #1
 800d7a8:	3930      	subs	r1, #48	; 0x30
 800d7aa:	2909      	cmp	r1, #9
 800d7ac:	d903      	bls.n	800d7b6 <_svfiprintf_r+0x1a6>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d0c5      	beq.n	800d73e <_svfiprintf_r+0x12e>
 800d7b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d7b4:	e7c3      	b.n	800d73e <_svfiprintf_r+0x12e>
 800d7b6:	4342      	muls	r2, r0
 800d7b8:	0035      	movs	r5, r6
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	1852      	adds	r2, r2, r1
 800d7be:	e7f1      	b.n	800d7a4 <_svfiprintf_r+0x194>
 800d7c0:	ab07      	add	r3, sp, #28
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	003a      	movs	r2, r7
 800d7c6:	0021      	movs	r1, r4
 800d7c8:	4b10      	ldr	r3, [pc, #64]	; (800d80c <_svfiprintf_r+0x1fc>)
 800d7ca:	9803      	ldr	r0, [sp, #12]
 800d7cc:	f7fb fd8a 	bl	80092e4 <_printf_float>
 800d7d0:	9004      	str	r0, [sp, #16]
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	d1d3      	bne.n	800d780 <_svfiprintf_r+0x170>
 800d7d8:	89bb      	ldrh	r3, [r7, #12]
 800d7da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d7dc:	065b      	lsls	r3, r3, #25
 800d7de:	d400      	bmi.n	800d7e2 <_svfiprintf_r+0x1d2>
 800d7e0:	e72d      	b.n	800d63e <_svfiprintf_r+0x2e>
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	4240      	negs	r0, r0
 800d7e6:	e72a      	b.n	800d63e <_svfiprintf_r+0x2e>
 800d7e8:	ab07      	add	r3, sp, #28
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	003a      	movs	r2, r7
 800d7ee:	0021      	movs	r1, r4
 800d7f0:	4b06      	ldr	r3, [pc, #24]	; (800d80c <_svfiprintf_r+0x1fc>)
 800d7f2:	9803      	ldr	r0, [sp, #12]
 800d7f4:	f7fc f828 	bl	8009848 <_printf_i>
 800d7f8:	e7ea      	b.n	800d7d0 <_svfiprintf_r+0x1c0>
 800d7fa:	46c0      	nop			; (mov r8, r8)
 800d7fc:	0800ecac 	.word	0x0800ecac
 800d800:	0800ecb2 	.word	0x0800ecb2
 800d804:	0800ecb6 	.word	0x0800ecb6
 800d808:	080092e5 	.word	0x080092e5
 800d80c:	0800d54d 	.word	0x0800d54d

0800d810 <_sungetc_r>:
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	0014      	movs	r4, r2
 800d814:	1c4b      	adds	r3, r1, #1
 800d816:	d103      	bne.n	800d820 <_sungetc_r+0x10>
 800d818:	2501      	movs	r5, #1
 800d81a:	426d      	negs	r5, r5
 800d81c:	0028      	movs	r0, r5
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	8993      	ldrh	r3, [r2, #12]
 800d822:	2220      	movs	r2, #32
 800d824:	4393      	bics	r3, r2
 800d826:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d828:	81a3      	strh	r3, [r4, #12]
 800d82a:	b2ce      	uxtb	r6, r1
 800d82c:	6863      	ldr	r3, [r4, #4]
 800d82e:	b2cd      	uxtb	r5, r1
 800d830:	2a00      	cmp	r2, #0
 800d832:	d010      	beq.n	800d856 <_sungetc_r+0x46>
 800d834:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d836:	429a      	cmp	r2, r3
 800d838:	dd07      	ble.n	800d84a <_sungetc_r+0x3a>
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	701e      	strb	r6, [r3, #0]
 800d842:	6863      	ldr	r3, [r4, #4]
 800d844:	3301      	adds	r3, #1
 800d846:	6063      	str	r3, [r4, #4]
 800d848:	e7e8      	b.n	800d81c <_sungetc_r+0xc>
 800d84a:	0021      	movs	r1, r4
 800d84c:	f000 fd86 	bl	800e35c <__submore>
 800d850:	2800      	cmp	r0, #0
 800d852:	d0f2      	beq.n	800d83a <_sungetc_r+0x2a>
 800d854:	e7e0      	b.n	800d818 <_sungetc_r+0x8>
 800d856:	6921      	ldr	r1, [r4, #16]
 800d858:	6822      	ldr	r2, [r4, #0]
 800d85a:	2900      	cmp	r1, #0
 800d85c:	d007      	beq.n	800d86e <_sungetc_r+0x5e>
 800d85e:	4291      	cmp	r1, r2
 800d860:	d205      	bcs.n	800d86e <_sungetc_r+0x5e>
 800d862:	1e51      	subs	r1, r2, #1
 800d864:	7808      	ldrb	r0, [r1, #0]
 800d866:	42a8      	cmp	r0, r5
 800d868:	d101      	bne.n	800d86e <_sungetc_r+0x5e>
 800d86a:	6021      	str	r1, [r4, #0]
 800d86c:	e7ea      	b.n	800d844 <_sungetc_r+0x34>
 800d86e:	6423      	str	r3, [r4, #64]	; 0x40
 800d870:	0023      	movs	r3, r4
 800d872:	3344      	adds	r3, #68	; 0x44
 800d874:	6363      	str	r3, [r4, #52]	; 0x34
 800d876:	2303      	movs	r3, #3
 800d878:	63a3      	str	r3, [r4, #56]	; 0x38
 800d87a:	0023      	movs	r3, r4
 800d87c:	3346      	adds	r3, #70	; 0x46
 800d87e:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d880:	701e      	strb	r6, [r3, #0]
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	2301      	movs	r3, #1
 800d886:	e7de      	b.n	800d846 <_sungetc_r+0x36>

0800d888 <__ssrefill_r>:
 800d888:	b510      	push	{r4, lr}
 800d88a:	000c      	movs	r4, r1
 800d88c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d88e:	2900      	cmp	r1, #0
 800d890:	d00e      	beq.n	800d8b0 <__ssrefill_r+0x28>
 800d892:	0023      	movs	r3, r4
 800d894:	3344      	adds	r3, #68	; 0x44
 800d896:	4299      	cmp	r1, r3
 800d898:	d001      	beq.n	800d89e <__ssrefill_r+0x16>
 800d89a:	f7ff fd75 	bl	800d388 <_free_r>
 800d89e:	2000      	movs	r0, #0
 800d8a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8a2:	6360      	str	r0, [r4, #52]	; 0x34
 800d8a4:	6063      	str	r3, [r4, #4]
 800d8a6:	4283      	cmp	r3, r0
 800d8a8:	d002      	beq.n	800d8b0 <__ssrefill_r+0x28>
 800d8aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd10      	pop	{r4, pc}
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	89a2      	ldrh	r2, [r4, #12]
 800d8ba:	6063      	str	r3, [r4, #4]
 800d8bc:	3320      	adds	r3, #32
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	4240      	negs	r0, r0
 800d8c4:	e7f3      	b.n	800d8ae <__ssrefill_r+0x26>
	...

0800d8c8 <__ssvfiscanf_r>:
 800d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ca:	4cb8      	ldr	r4, [pc, #736]	; (800dbac <__ssvfiscanf_r+0x2e4>)
 800d8cc:	0006      	movs	r6, r0
 800d8ce:	44a5      	add	sp, r4
 800d8d0:	000c      	movs	r4, r1
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	9146      	str	r1, [sp, #280]	; 0x118
 800d8d6:	9147      	str	r1, [sp, #284]	; 0x11c
 800d8d8:	a903      	add	r1, sp, #12
 800d8da:	9148      	str	r1, [sp, #288]	; 0x120
 800d8dc:	21be      	movs	r1, #190	; 0xbe
 800d8de:	48b4      	ldr	r0, [pc, #720]	; (800dbb0 <__ssvfiscanf_r+0x2e8>)
 800d8e0:	0049      	lsls	r1, r1, #1
 800d8e2:	ad43      	add	r5, sp, #268	; 0x10c
 800d8e4:	5068      	str	r0, [r5, r1]
 800d8e6:	25c0      	movs	r5, #192	; 0xc0
 800d8e8:	49b2      	ldr	r1, [pc, #712]	; (800dbb4 <__ssvfiscanf_r+0x2ec>)
 800d8ea:	006d      	lsls	r5, r5, #1
 800d8ec:	a843      	add	r0, sp, #268	; 0x10c
 800d8ee:	5141      	str	r1, [r0, r5]
 800d8f0:	9302      	str	r3, [sp, #8]
 800d8f2:	7813      	ldrb	r3, [r2, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d100      	bne.n	800d8fa <__ssvfiscanf_r+0x32>
 800d8f8:	e155      	b.n	800dba6 <__ssvfiscanf_r+0x2de>
 800d8fa:	49af      	ldr	r1, [pc, #700]	; (800dbb8 <__ssvfiscanf_r+0x2f0>)
 800d8fc:	2508      	movs	r5, #8
 800d8fe:	5cc8      	ldrb	r0, [r1, r3]
 800d900:	2108      	movs	r1, #8
 800d902:	1c57      	adds	r7, r2, #1
 800d904:	4001      	ands	r1, r0
 800d906:	4228      	tst	r0, r5
 800d908:	d020      	beq.n	800d94c <__ssvfiscanf_r+0x84>
 800d90a:	6863      	ldr	r3, [r4, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	dd12      	ble.n	800d936 <__ssvfiscanf_r+0x6e>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	49a9      	ldr	r1, [pc, #676]	; (800dbb8 <__ssvfiscanf_r+0x2f0>)
 800d914:	781a      	ldrb	r2, [r3, #0]
 800d916:	5c8a      	ldrb	r2, [r1, r2]
 800d918:	2108      	movs	r1, #8
 800d91a:	420a      	tst	r2, r1
 800d91c:	d101      	bne.n	800d922 <__ssvfiscanf_r+0x5a>
 800d91e:	003a      	movs	r2, r7
 800d920:	e7e7      	b.n	800d8f2 <__ssvfiscanf_r+0x2a>
 800d922:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800d924:	3301      	adds	r3, #1
 800d926:	9200      	str	r2, [sp, #0]
 800d928:	3201      	adds	r2, #1
 800d92a:	9247      	str	r2, [sp, #284]	; 0x11c
 800d92c:	6862      	ldr	r2, [r4, #4]
 800d92e:	6023      	str	r3, [r4, #0]
 800d930:	3a01      	subs	r2, #1
 800d932:	6062      	str	r2, [r4, #4]
 800d934:	e7e9      	b.n	800d90a <__ssvfiscanf_r+0x42>
 800d936:	22c0      	movs	r2, #192	; 0xc0
 800d938:	ab43      	add	r3, sp, #268	; 0x10c
 800d93a:	0052      	lsls	r2, r2, #1
 800d93c:	589b      	ldr	r3, [r3, r2]
 800d93e:	0021      	movs	r1, r4
 800d940:	0030      	movs	r0, r6
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	4798      	blx	r3
 800d946:	2800      	cmp	r0, #0
 800d948:	d0e2      	beq.n	800d910 <__ssvfiscanf_r+0x48>
 800d94a:	e7e8      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800d94c:	001d      	movs	r5, r3
 800d94e:	2b25      	cmp	r3, #37	; 0x25
 800d950:	d164      	bne.n	800da1c <__ssvfiscanf_r+0x154>
 800d952:	9145      	str	r1, [sp, #276]	; 0x114
 800d954:	9143      	str	r1, [sp, #268]	; 0x10c
 800d956:	7853      	ldrb	r3, [r2, #1]
 800d958:	2b2a      	cmp	r3, #42	; 0x2a
 800d95a:	d102      	bne.n	800d962 <__ssvfiscanf_r+0x9a>
 800d95c:	3b1a      	subs	r3, #26
 800d95e:	9343      	str	r3, [sp, #268]	; 0x10c
 800d960:	1c97      	adds	r7, r2, #2
 800d962:	003d      	movs	r5, r7
 800d964:	220a      	movs	r2, #10
 800d966:	7829      	ldrb	r1, [r5, #0]
 800d968:	1c6b      	adds	r3, r5, #1
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	000b      	movs	r3, r1
 800d96e:	3b30      	subs	r3, #48	; 0x30
 800d970:	2b09      	cmp	r3, #9
 800d972:	d91f      	bls.n	800d9b4 <__ssvfiscanf_r+0xec>
 800d974:	4f91      	ldr	r7, [pc, #580]	; (800dbbc <__ssvfiscanf_r+0x2f4>)
 800d976:	2203      	movs	r2, #3
 800d978:	0038      	movs	r0, r7
 800d97a:	f7ff f803 	bl	800c984 <memchr>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d007      	beq.n	800d992 <__ssvfiscanf_r+0xca>
 800d982:	2301      	movs	r3, #1
 800d984:	1bc0      	subs	r0, r0, r7
 800d986:	4083      	lsls	r3, r0
 800d988:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800d98a:	9d00      	ldr	r5, [sp, #0]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	9343      	str	r3, [sp, #268]	; 0x10c
 800d992:	1c6f      	adds	r7, r5, #1
 800d994:	782d      	ldrb	r5, [r5, #0]
 800d996:	2d78      	cmp	r5, #120	; 0x78
 800d998:	d807      	bhi.n	800d9aa <__ssvfiscanf_r+0xe2>
 800d99a:	2d57      	cmp	r5, #87	; 0x57
 800d99c:	d812      	bhi.n	800d9c4 <__ssvfiscanf_r+0xfc>
 800d99e:	2d25      	cmp	r5, #37	; 0x25
 800d9a0:	d03c      	beq.n	800da1c <__ssvfiscanf_r+0x154>
 800d9a2:	d836      	bhi.n	800da12 <__ssvfiscanf_r+0x14a>
 800d9a4:	2d00      	cmp	r5, #0
 800d9a6:	d100      	bne.n	800d9aa <__ssvfiscanf_r+0xe2>
 800d9a8:	e0fa      	b.n	800dba0 <__ssvfiscanf_r+0x2d8>
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	9349      	str	r3, [sp, #292]	; 0x124
 800d9ae:	3307      	adds	r3, #7
 800d9b0:	9344      	str	r3, [sp, #272]	; 0x110
 800d9b2:	e06d      	b.n	800da90 <__ssvfiscanf_r+0x1c8>
 800d9b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d9b6:	9d00      	ldr	r5, [sp, #0]
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	4353      	muls	r3, r2
 800d9bc:	3b30      	subs	r3, #48	; 0x30
 800d9be:	185b      	adds	r3, r3, r1
 800d9c0:	9345      	str	r3, [sp, #276]	; 0x114
 800d9c2:	e7d0      	b.n	800d966 <__ssvfiscanf_r+0x9e>
 800d9c4:	0028      	movs	r0, r5
 800d9c6:	3858      	subs	r0, #88	; 0x58
 800d9c8:	2820      	cmp	r0, #32
 800d9ca:	d8ee      	bhi.n	800d9aa <__ssvfiscanf_r+0xe2>
 800d9cc:	f7f2 fbb8 	bl	8000140 <__gnu_thumb1_case_shi>
 800d9d0:	ffed0051 	.word	0xffed0051
 800d9d4:	0087ffed 	.word	0x0087ffed
 800d9d8:	ffedffed 	.word	0xffedffed
 800d9dc:	ffedffed 	.word	0xffedffed
 800d9e0:	ffedffed 	.word	0xffedffed
 800d9e4:	0095ffed 	.word	0x0095ffed
 800d9e8:	0024007d 	.word	0x0024007d
 800d9ec:	00240024 	.word	0x00240024
 800d9f0:	007fffed 	.word	0x007fffed
 800d9f4:	ffedffed 	.word	0xffedffed
 800d9f8:	ffedffed 	.word	0xffedffed
 800d9fc:	0083009f 	.word	0x0083009f
 800da00:	ffed004b 	.word	0xffed004b
 800da04:	009dffed 	.word	0x009dffed
 800da08:	007dffed 	.word	0x007dffed
 800da0c:	ffedffed 	.word	0xffedffed
 800da10:	0051      	.short	0x0051
 800da12:	3d45      	subs	r5, #69	; 0x45
 800da14:	2d02      	cmp	r5, #2
 800da16:	d8c8      	bhi.n	800d9aa <__ssvfiscanf_r+0xe2>
 800da18:	2305      	movs	r3, #5
 800da1a:	e06c      	b.n	800daf6 <__ssvfiscanf_r+0x22e>
 800da1c:	6863      	ldr	r3, [r4, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dd0e      	ble.n	800da40 <__ssvfiscanf_r+0x178>
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	781a      	ldrb	r2, [r3, #0]
 800da26:	42aa      	cmp	r2, r5
 800da28:	d000      	beq.n	800da2c <__ssvfiscanf_r+0x164>
 800da2a:	e0bc      	b.n	800dba6 <__ssvfiscanf_r+0x2de>
 800da2c:	3301      	adds	r3, #1
 800da2e:	6862      	ldr	r2, [r4, #4]
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800da34:	3a01      	subs	r2, #1
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	6062      	str	r2, [r4, #4]
 800da3c:	9347      	str	r3, [sp, #284]	; 0x11c
 800da3e:	e76e      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800da40:	22c0      	movs	r2, #192	; 0xc0
 800da42:	ab43      	add	r3, sp, #268	; 0x10c
 800da44:	0052      	lsls	r2, r2, #1
 800da46:	589b      	ldr	r3, [r3, r2]
 800da48:	0021      	movs	r1, r4
 800da4a:	0030      	movs	r0, r6
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	4798      	blx	r3
 800da50:	2800      	cmp	r0, #0
 800da52:	d0e6      	beq.n	800da22 <__ssvfiscanf_r+0x15a>
 800da54:	9846      	ldr	r0, [sp, #280]	; 0x118
 800da56:	2800      	cmp	r0, #0
 800da58:	d000      	beq.n	800da5c <__ssvfiscanf_r+0x194>
 800da5a:	e09d      	b.n	800db98 <__ssvfiscanf_r+0x2d0>
 800da5c:	3801      	subs	r0, #1
 800da5e:	23a5      	movs	r3, #165	; 0xa5
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	449d      	add	sp, r3
 800da64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da66:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	2320      	movs	r3, #32
 800da6c:	9a00      	ldr	r2, [sp, #0]
 800da6e:	4313      	orrs	r3, r2
 800da70:	9343      	str	r3, [sp, #268]	; 0x10c
 800da72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	2380      	movs	r3, #128	; 0x80
 800da78:	9a00      	ldr	r2, [sp, #0]
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4313      	orrs	r3, r2
 800da7e:	9343      	str	r3, [sp, #268]	; 0x10c
 800da80:	2310      	movs	r3, #16
 800da82:	9344      	str	r3, [sp, #272]	; 0x110
 800da84:	236e      	movs	r3, #110	; 0x6e
 800da86:	42ab      	cmp	r3, r5
 800da88:	41ad      	sbcs	r5, r5
 800da8a:	426d      	negs	r5, r5
 800da8c:	3503      	adds	r5, #3
 800da8e:	9549      	str	r5, [sp, #292]	; 0x124
 800da90:	6863      	ldr	r3, [r4, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	dd4a      	ble.n	800db2c <__ssvfiscanf_r+0x264>
 800da96:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	065b      	lsls	r3, r3, #25
 800da9c:	d406      	bmi.n	800daac <__ssvfiscanf_r+0x1e4>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	4945      	ldr	r1, [pc, #276]	; (800dbb8 <__ssvfiscanf_r+0x2f0>)
 800daa2:	781a      	ldrb	r2, [r3, #0]
 800daa4:	5c8a      	ldrb	r2, [r1, r2]
 800daa6:	2108      	movs	r1, #8
 800daa8:	420a      	tst	r2, r1
 800daaa:	d14a      	bne.n	800db42 <__ssvfiscanf_r+0x27a>
 800daac:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800daae:	2b02      	cmp	r3, #2
 800dab0:	dc5e      	bgt.n	800db70 <__ssvfiscanf_r+0x2a8>
 800dab2:	0022      	movs	r2, r4
 800dab4:	0030      	movs	r0, r6
 800dab6:	ab02      	add	r3, sp, #8
 800dab8:	a943      	add	r1, sp, #268	; 0x10c
 800daba:	f000 f9e5 	bl	800de88 <_scanf_chars>
 800dabe:	2801      	cmp	r0, #1
 800dac0:	d071      	beq.n	800dba6 <__ssvfiscanf_r+0x2de>
 800dac2:	2802      	cmp	r0, #2
 800dac4:	d000      	beq.n	800dac8 <__ssvfiscanf_r+0x200>
 800dac6:	e72a      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800dac8:	e7c4      	b.n	800da54 <__ssvfiscanf_r+0x18c>
 800daca:	230a      	movs	r3, #10
 800dacc:	e7d9      	b.n	800da82 <__ssvfiscanf_r+0x1ba>
 800dace:	2300      	movs	r3, #0
 800dad0:	2503      	movs	r5, #3
 800dad2:	9344      	str	r3, [sp, #272]	; 0x110
 800dad4:	e7db      	b.n	800da8e <__ssvfiscanf_r+0x1c6>
 800dad6:	2308      	movs	r3, #8
 800dad8:	2504      	movs	r5, #4
 800dada:	9344      	str	r3, [sp, #272]	; 0x110
 800dadc:	e7d7      	b.n	800da8e <__ssvfiscanf_r+0x1c6>
 800dade:	0039      	movs	r1, r7
 800dae0:	a803      	add	r0, sp, #12
 800dae2:	f000 fb5f 	bl	800e1a4 <__sccl>
 800dae6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dae8:	0007      	movs	r7, r0
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	9a00      	ldr	r2, [sp, #0]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	9343      	str	r3, [sp, #268]	; 0x10c
 800daf4:	2301      	movs	r3, #1
 800daf6:	9349      	str	r3, [sp, #292]	; 0x124
 800daf8:	e7ca      	b.n	800da90 <__ssvfiscanf_r+0x1c8>
 800dafa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	2340      	movs	r3, #64	; 0x40
 800db00:	9a00      	ldr	r2, [sp, #0]
 800db02:	4313      	orrs	r3, r2
 800db04:	9343      	str	r3, [sp, #268]	; 0x10c
 800db06:	2300      	movs	r3, #0
 800db08:	e7f5      	b.n	800daf6 <__ssvfiscanf_r+0x22e>
 800db0a:	2302      	movs	r3, #2
 800db0c:	e7f3      	b.n	800daf6 <__ssvfiscanf_r+0x22e>
 800db0e:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800db10:	06c3      	lsls	r3, r0, #27
 800db12:	d500      	bpl.n	800db16 <__ssvfiscanf_r+0x24e>
 800db14:	e703      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800db16:	9b02      	ldr	r3, [sp, #8]
 800db18:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800db1a:	1d19      	adds	r1, r3, #4
 800db1c:	9102      	str	r1, [sp, #8]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	07c5      	lsls	r5, r0, #31
 800db22:	d501      	bpl.n	800db28 <__ssvfiscanf_r+0x260>
 800db24:	801a      	strh	r2, [r3, #0]
 800db26:	e6fa      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	e6f8      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800db2c:	22c0      	movs	r2, #192	; 0xc0
 800db2e:	ab43      	add	r3, sp, #268	; 0x10c
 800db30:	0052      	lsls	r2, r2, #1
 800db32:	589b      	ldr	r3, [r3, r2]
 800db34:	0021      	movs	r1, r4
 800db36:	0030      	movs	r0, r6
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	4798      	blx	r3
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d0aa      	beq.n	800da96 <__ssvfiscanf_r+0x1ce>
 800db40:	e788      	b.n	800da54 <__ssvfiscanf_r+0x18c>
 800db42:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800db44:	9200      	str	r2, [sp, #0]
 800db46:	3201      	adds	r2, #1
 800db48:	9247      	str	r2, [sp, #284]	; 0x11c
 800db4a:	6862      	ldr	r2, [r4, #4]
 800db4c:	3a01      	subs	r2, #1
 800db4e:	6062      	str	r2, [r4, #4]
 800db50:	2a00      	cmp	r2, #0
 800db52:	dd02      	ble.n	800db5a <__ssvfiscanf_r+0x292>
 800db54:	3301      	adds	r3, #1
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	e7a1      	b.n	800da9e <__ssvfiscanf_r+0x1d6>
 800db5a:	22c0      	movs	r2, #192	; 0xc0
 800db5c:	ab43      	add	r3, sp, #268	; 0x10c
 800db5e:	0052      	lsls	r2, r2, #1
 800db60:	589b      	ldr	r3, [r3, r2]
 800db62:	0021      	movs	r1, r4
 800db64:	0030      	movs	r0, r6
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	4798      	blx	r3
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d097      	beq.n	800da9e <__ssvfiscanf_r+0x1d6>
 800db6e:	e771      	b.n	800da54 <__ssvfiscanf_r+0x18c>
 800db70:	2b04      	cmp	r3, #4
 800db72:	dc06      	bgt.n	800db82 <__ssvfiscanf_r+0x2ba>
 800db74:	0022      	movs	r2, r4
 800db76:	0030      	movs	r0, r6
 800db78:	ab02      	add	r3, sp, #8
 800db7a:	a943      	add	r1, sp, #268	; 0x10c
 800db7c:	f000 f9e2 	bl	800df44 <_scanf_i>
 800db80:	e79d      	b.n	800dabe <__ssvfiscanf_r+0x1f6>
 800db82:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <__ssvfiscanf_r+0x2f8>)
 800db84:	2b00      	cmp	r3, #0
 800db86:	d100      	bne.n	800db8a <__ssvfiscanf_r+0x2c2>
 800db88:	e6c9      	b.n	800d91e <__ssvfiscanf_r+0x56>
 800db8a:	0022      	movs	r2, r4
 800db8c:	0030      	movs	r0, r6
 800db8e:	ab02      	add	r3, sp, #8
 800db90:	a943      	add	r1, sp, #268	; 0x10c
 800db92:	f7fb ff6b 	bl	8009a6c <_scanf_float>
 800db96:	e792      	b.n	800dabe <__ssvfiscanf_r+0x1f6>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	065b      	lsls	r3, r3, #25
 800db9c:	d400      	bmi.n	800dba0 <__ssvfiscanf_r+0x2d8>
 800db9e:	e75e      	b.n	800da5e <__ssvfiscanf_r+0x196>
 800dba0:	2001      	movs	r0, #1
 800dba2:	4240      	negs	r0, r0
 800dba4:	e75b      	b.n	800da5e <__ssvfiscanf_r+0x196>
 800dba6:	9846      	ldr	r0, [sp, #280]	; 0x118
 800dba8:	e759      	b.n	800da5e <__ssvfiscanf_r+0x196>
 800dbaa:	46c0      	nop			; (mov r8, r8)
 800dbac:	fffffd6c 	.word	0xfffffd6c
 800dbb0:	0800d811 	.word	0x0800d811
 800dbb4:	0800d889 	.word	0x0800d889
 800dbb8:	0800e8e1 	.word	0x0800e8e1
 800dbbc:	0800ecb2 	.word	0x0800ecb2
 800dbc0:	08009a6d 	.word	0x08009a6d

0800dbc4 <__sfputc_r>:
 800dbc4:	6893      	ldr	r3, [r2, #8]
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	6093      	str	r3, [r2, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	da04      	bge.n	800dbda <__sfputc_r+0x16>
 800dbd0:	6994      	ldr	r4, [r2, #24]
 800dbd2:	42a3      	cmp	r3, r4
 800dbd4:	db07      	blt.n	800dbe6 <__sfputc_r+0x22>
 800dbd6:	290a      	cmp	r1, #10
 800dbd8:	d005      	beq.n	800dbe6 <__sfputc_r+0x22>
 800dbda:	6813      	ldr	r3, [r2, #0]
 800dbdc:	1c58      	adds	r0, r3, #1
 800dbde:	6010      	str	r0, [r2, #0]
 800dbe0:	7019      	strb	r1, [r3, #0]
 800dbe2:	0008      	movs	r0, r1
 800dbe4:	bd10      	pop	{r4, pc}
 800dbe6:	f7fd f94d 	bl	800ae84 <__swbuf_r>
 800dbea:	0001      	movs	r1, r0
 800dbec:	e7f9      	b.n	800dbe2 <__sfputc_r+0x1e>

0800dbee <__sfputs_r>:
 800dbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf0:	0006      	movs	r6, r0
 800dbf2:	000f      	movs	r7, r1
 800dbf4:	0014      	movs	r4, r2
 800dbf6:	18d5      	adds	r5, r2, r3
 800dbf8:	42ac      	cmp	r4, r5
 800dbfa:	d101      	bne.n	800dc00 <__sfputs_r+0x12>
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	e007      	b.n	800dc10 <__sfputs_r+0x22>
 800dc00:	7821      	ldrb	r1, [r4, #0]
 800dc02:	003a      	movs	r2, r7
 800dc04:	0030      	movs	r0, r6
 800dc06:	f7ff ffdd 	bl	800dbc4 <__sfputc_r>
 800dc0a:	3401      	adds	r4, #1
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d1f3      	bne.n	800dbf8 <__sfputs_r+0xa>
 800dc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc14 <_vfiprintf_r>:
 800dc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc16:	b0a1      	sub	sp, #132	; 0x84
 800dc18:	0006      	movs	r6, r0
 800dc1a:	000c      	movs	r4, r1
 800dc1c:	001f      	movs	r7, r3
 800dc1e:	9203      	str	r2, [sp, #12]
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d004      	beq.n	800dc2e <_vfiprintf_r+0x1a>
 800dc24:	6983      	ldr	r3, [r0, #24]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <_vfiprintf_r+0x1a>
 800dc2a:	f7fe f9f3 	bl	800c014 <__sinit>
 800dc2e:	4b8e      	ldr	r3, [pc, #568]	; (800de68 <_vfiprintf_r+0x254>)
 800dc30:	429c      	cmp	r4, r3
 800dc32:	d11c      	bne.n	800dc6e <_vfiprintf_r+0x5a>
 800dc34:	6874      	ldr	r4, [r6, #4]
 800dc36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc38:	07db      	lsls	r3, r3, #31
 800dc3a:	d405      	bmi.n	800dc48 <_vfiprintf_r+0x34>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	059b      	lsls	r3, r3, #22
 800dc40:	d402      	bmi.n	800dc48 <_vfiprintf_r+0x34>
 800dc42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc44:	f7fe fdff 	bl	800c846 <__retarget_lock_acquire_recursive>
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	071b      	lsls	r3, r3, #28
 800dc4c:	d502      	bpl.n	800dc54 <_vfiprintf_r+0x40>
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d11d      	bne.n	800dc90 <_vfiprintf_r+0x7c>
 800dc54:	0021      	movs	r1, r4
 800dc56:	0030      	movs	r0, r6
 800dc58:	f7fd f97e 	bl	800af58 <__swsetup_r>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d017      	beq.n	800dc90 <_vfiprintf_r+0x7c>
 800dc60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc62:	07db      	lsls	r3, r3, #31
 800dc64:	d50d      	bpl.n	800dc82 <_vfiprintf_r+0x6e>
 800dc66:	2001      	movs	r0, #1
 800dc68:	4240      	negs	r0, r0
 800dc6a:	b021      	add	sp, #132	; 0x84
 800dc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc6e:	4b7f      	ldr	r3, [pc, #508]	; (800de6c <_vfiprintf_r+0x258>)
 800dc70:	429c      	cmp	r4, r3
 800dc72:	d101      	bne.n	800dc78 <_vfiprintf_r+0x64>
 800dc74:	68b4      	ldr	r4, [r6, #8]
 800dc76:	e7de      	b.n	800dc36 <_vfiprintf_r+0x22>
 800dc78:	4b7d      	ldr	r3, [pc, #500]	; (800de70 <_vfiprintf_r+0x25c>)
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	d1db      	bne.n	800dc36 <_vfiprintf_r+0x22>
 800dc7e:	68f4      	ldr	r4, [r6, #12]
 800dc80:	e7d9      	b.n	800dc36 <_vfiprintf_r+0x22>
 800dc82:	89a3      	ldrh	r3, [r4, #12]
 800dc84:	059b      	lsls	r3, r3, #22
 800dc86:	d4ee      	bmi.n	800dc66 <_vfiprintf_r+0x52>
 800dc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc8a:	f7fe fddd 	bl	800c848 <__retarget_lock_release_recursive>
 800dc8e:	e7ea      	b.n	800dc66 <_vfiprintf_r+0x52>
 800dc90:	2300      	movs	r3, #0
 800dc92:	ad08      	add	r5, sp, #32
 800dc94:	616b      	str	r3, [r5, #20]
 800dc96:	3320      	adds	r3, #32
 800dc98:	766b      	strb	r3, [r5, #25]
 800dc9a:	3310      	adds	r3, #16
 800dc9c:	76ab      	strb	r3, [r5, #26]
 800dc9e:	9707      	str	r7, [sp, #28]
 800dca0:	9f03      	ldr	r7, [sp, #12]
 800dca2:	783b      	ldrb	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <_vfiprintf_r+0x98>
 800dca8:	2b25      	cmp	r3, #37	; 0x25
 800dcaa:	d14e      	bne.n	800dd4a <_vfiprintf_r+0x136>
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	1afb      	subs	r3, r7, r3
 800dcb0:	9305      	str	r3, [sp, #20]
 800dcb2:	9b03      	ldr	r3, [sp, #12]
 800dcb4:	429f      	cmp	r7, r3
 800dcb6:	d00d      	beq.n	800dcd4 <_vfiprintf_r+0xc0>
 800dcb8:	9b05      	ldr	r3, [sp, #20]
 800dcba:	0021      	movs	r1, r4
 800dcbc:	0030      	movs	r0, r6
 800dcbe:	9a03      	ldr	r2, [sp, #12]
 800dcc0:	f7ff ff95 	bl	800dbee <__sfputs_r>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d100      	bne.n	800dcca <_vfiprintf_r+0xb6>
 800dcc8:	e0b5      	b.n	800de36 <_vfiprintf_r+0x222>
 800dcca:	696a      	ldr	r2, [r5, #20]
 800dccc:	9b05      	ldr	r3, [sp, #20]
 800dcce:	4694      	mov	ip, r2
 800dcd0:	4463      	add	r3, ip
 800dcd2:	616b      	str	r3, [r5, #20]
 800dcd4:	783b      	ldrb	r3, [r7, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d100      	bne.n	800dcdc <_vfiprintf_r+0xc8>
 800dcda:	e0ac      	b.n	800de36 <_vfiprintf_r+0x222>
 800dcdc:	2201      	movs	r2, #1
 800dcde:	1c7b      	adds	r3, r7, #1
 800dce0:	9303      	str	r3, [sp, #12]
 800dce2:	2300      	movs	r3, #0
 800dce4:	4252      	negs	r2, r2
 800dce6:	606a      	str	r2, [r5, #4]
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	3254      	adds	r2, #84	; 0x54
 800dcec:	1852      	adds	r2, r2, r1
 800dcee:	602b      	str	r3, [r5, #0]
 800dcf0:	60eb      	str	r3, [r5, #12]
 800dcf2:	60ab      	str	r3, [r5, #8]
 800dcf4:	7013      	strb	r3, [r2, #0]
 800dcf6:	65ab      	str	r3, [r5, #88]	; 0x58
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	2205      	movs	r2, #5
 800dcfc:	7819      	ldrb	r1, [r3, #0]
 800dcfe:	485d      	ldr	r0, [pc, #372]	; (800de74 <_vfiprintf_r+0x260>)
 800dd00:	f7fe fe40 	bl	800c984 <memchr>
 800dd04:	9b03      	ldr	r3, [sp, #12]
 800dd06:	1c5f      	adds	r7, r3, #1
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d120      	bne.n	800dd4e <_vfiprintf_r+0x13a>
 800dd0c:	682a      	ldr	r2, [r5, #0]
 800dd0e:	06d3      	lsls	r3, r2, #27
 800dd10:	d504      	bpl.n	800dd1c <_vfiprintf_r+0x108>
 800dd12:	2353      	movs	r3, #83	; 0x53
 800dd14:	a904      	add	r1, sp, #16
 800dd16:	185b      	adds	r3, r3, r1
 800dd18:	2120      	movs	r1, #32
 800dd1a:	7019      	strb	r1, [r3, #0]
 800dd1c:	0713      	lsls	r3, r2, #28
 800dd1e:	d504      	bpl.n	800dd2a <_vfiprintf_r+0x116>
 800dd20:	2353      	movs	r3, #83	; 0x53
 800dd22:	a904      	add	r1, sp, #16
 800dd24:	185b      	adds	r3, r3, r1
 800dd26:	212b      	movs	r1, #43	; 0x2b
 800dd28:	7019      	strb	r1, [r3, #0]
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd30:	d016      	beq.n	800dd60 <_vfiprintf_r+0x14c>
 800dd32:	2100      	movs	r1, #0
 800dd34:	68eb      	ldr	r3, [r5, #12]
 800dd36:	9f03      	ldr	r7, [sp, #12]
 800dd38:	783a      	ldrb	r2, [r7, #0]
 800dd3a:	1c78      	adds	r0, r7, #1
 800dd3c:	3a30      	subs	r2, #48	; 0x30
 800dd3e:	4684      	mov	ip, r0
 800dd40:	2a09      	cmp	r2, #9
 800dd42:	d94f      	bls.n	800dde4 <_vfiprintf_r+0x1d0>
 800dd44:	2900      	cmp	r1, #0
 800dd46:	d111      	bne.n	800dd6c <_vfiprintf_r+0x158>
 800dd48:	e017      	b.n	800dd7a <_vfiprintf_r+0x166>
 800dd4a:	3701      	adds	r7, #1
 800dd4c:	e7a9      	b.n	800dca2 <_vfiprintf_r+0x8e>
 800dd4e:	4b49      	ldr	r3, [pc, #292]	; (800de74 <_vfiprintf_r+0x260>)
 800dd50:	682a      	ldr	r2, [r5, #0]
 800dd52:	1ac0      	subs	r0, r0, r3
 800dd54:	2301      	movs	r3, #1
 800dd56:	4083      	lsls	r3, r0
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	602b      	str	r3, [r5, #0]
 800dd5c:	9703      	str	r7, [sp, #12]
 800dd5e:	e7cb      	b.n	800dcf8 <_vfiprintf_r+0xe4>
 800dd60:	9b07      	ldr	r3, [sp, #28]
 800dd62:	1d19      	adds	r1, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	9107      	str	r1, [sp, #28]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	db01      	blt.n	800dd70 <_vfiprintf_r+0x15c>
 800dd6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd6e:	e004      	b.n	800dd7a <_vfiprintf_r+0x166>
 800dd70:	425b      	negs	r3, r3
 800dd72:	60eb      	str	r3, [r5, #12]
 800dd74:	2302      	movs	r3, #2
 800dd76:	4313      	orrs	r3, r2
 800dd78:	602b      	str	r3, [r5, #0]
 800dd7a:	783b      	ldrb	r3, [r7, #0]
 800dd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd7e:	d10a      	bne.n	800dd96 <_vfiprintf_r+0x182>
 800dd80:	787b      	ldrb	r3, [r7, #1]
 800dd82:	2b2a      	cmp	r3, #42	; 0x2a
 800dd84:	d137      	bne.n	800ddf6 <_vfiprintf_r+0x1e2>
 800dd86:	9b07      	ldr	r3, [sp, #28]
 800dd88:	3702      	adds	r7, #2
 800dd8a:	1d1a      	adds	r2, r3, #4
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	9207      	str	r2, [sp, #28]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	db2d      	blt.n	800ddf0 <_vfiprintf_r+0x1dc>
 800dd94:	9309      	str	r3, [sp, #36]	; 0x24
 800dd96:	2203      	movs	r2, #3
 800dd98:	7839      	ldrb	r1, [r7, #0]
 800dd9a:	4837      	ldr	r0, [pc, #220]	; (800de78 <_vfiprintf_r+0x264>)
 800dd9c:	f7fe fdf2 	bl	800c984 <memchr>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d007      	beq.n	800ddb4 <_vfiprintf_r+0x1a0>
 800dda4:	4b34      	ldr	r3, [pc, #208]	; (800de78 <_vfiprintf_r+0x264>)
 800dda6:	682a      	ldr	r2, [r5, #0]
 800dda8:	1ac0      	subs	r0, r0, r3
 800ddaa:	2340      	movs	r3, #64	; 0x40
 800ddac:	4083      	lsls	r3, r0
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	3701      	adds	r7, #1
 800ddb2:	602b      	str	r3, [r5, #0]
 800ddb4:	7839      	ldrb	r1, [r7, #0]
 800ddb6:	1c7b      	adds	r3, r7, #1
 800ddb8:	2206      	movs	r2, #6
 800ddba:	4830      	ldr	r0, [pc, #192]	; (800de7c <_vfiprintf_r+0x268>)
 800ddbc:	9303      	str	r3, [sp, #12]
 800ddbe:	7629      	strb	r1, [r5, #24]
 800ddc0:	f7fe fde0 	bl	800c984 <memchr>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d045      	beq.n	800de54 <_vfiprintf_r+0x240>
 800ddc8:	4b2d      	ldr	r3, [pc, #180]	; (800de80 <_vfiprintf_r+0x26c>)
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d127      	bne.n	800de1e <_vfiprintf_r+0x20a>
 800ddce:	2207      	movs	r2, #7
 800ddd0:	9b07      	ldr	r3, [sp, #28]
 800ddd2:	3307      	adds	r3, #7
 800ddd4:	4393      	bics	r3, r2
 800ddd6:	3308      	adds	r3, #8
 800ddd8:	9307      	str	r3, [sp, #28]
 800ddda:	696b      	ldr	r3, [r5, #20]
 800dddc:	9a04      	ldr	r2, [sp, #16]
 800ddde:	189b      	adds	r3, r3, r2
 800dde0:	616b      	str	r3, [r5, #20]
 800dde2:	e75d      	b.n	800dca0 <_vfiprintf_r+0x8c>
 800dde4:	210a      	movs	r1, #10
 800dde6:	434b      	muls	r3, r1
 800dde8:	4667      	mov	r7, ip
 800ddea:	189b      	adds	r3, r3, r2
 800ddec:	3909      	subs	r1, #9
 800ddee:	e7a3      	b.n	800dd38 <_vfiprintf_r+0x124>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	425b      	negs	r3, r3
 800ddf4:	e7ce      	b.n	800dd94 <_vfiprintf_r+0x180>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	001a      	movs	r2, r3
 800ddfa:	3701      	adds	r7, #1
 800ddfc:	606b      	str	r3, [r5, #4]
 800ddfe:	7839      	ldrb	r1, [r7, #0]
 800de00:	1c78      	adds	r0, r7, #1
 800de02:	3930      	subs	r1, #48	; 0x30
 800de04:	4684      	mov	ip, r0
 800de06:	2909      	cmp	r1, #9
 800de08:	d903      	bls.n	800de12 <_vfiprintf_r+0x1fe>
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d0c3      	beq.n	800dd96 <_vfiprintf_r+0x182>
 800de0e:	9209      	str	r2, [sp, #36]	; 0x24
 800de10:	e7c1      	b.n	800dd96 <_vfiprintf_r+0x182>
 800de12:	230a      	movs	r3, #10
 800de14:	435a      	muls	r2, r3
 800de16:	4667      	mov	r7, ip
 800de18:	1852      	adds	r2, r2, r1
 800de1a:	3b09      	subs	r3, #9
 800de1c:	e7ef      	b.n	800ddfe <_vfiprintf_r+0x1ea>
 800de1e:	ab07      	add	r3, sp, #28
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	0022      	movs	r2, r4
 800de24:	0029      	movs	r1, r5
 800de26:	0030      	movs	r0, r6
 800de28:	4b16      	ldr	r3, [pc, #88]	; (800de84 <_vfiprintf_r+0x270>)
 800de2a:	f7fb fa5b 	bl	80092e4 <_printf_float>
 800de2e:	9004      	str	r0, [sp, #16]
 800de30:	9b04      	ldr	r3, [sp, #16]
 800de32:	3301      	adds	r3, #1
 800de34:	d1d1      	bne.n	800ddda <_vfiprintf_r+0x1c6>
 800de36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de38:	07db      	lsls	r3, r3, #31
 800de3a:	d405      	bmi.n	800de48 <_vfiprintf_r+0x234>
 800de3c:	89a3      	ldrh	r3, [r4, #12]
 800de3e:	059b      	lsls	r3, r3, #22
 800de40:	d402      	bmi.n	800de48 <_vfiprintf_r+0x234>
 800de42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de44:	f7fe fd00 	bl	800c848 <__retarget_lock_release_recursive>
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	065b      	lsls	r3, r3, #25
 800de4c:	d500      	bpl.n	800de50 <_vfiprintf_r+0x23c>
 800de4e:	e70a      	b.n	800dc66 <_vfiprintf_r+0x52>
 800de50:	980d      	ldr	r0, [sp, #52]	; 0x34
 800de52:	e70a      	b.n	800dc6a <_vfiprintf_r+0x56>
 800de54:	ab07      	add	r3, sp, #28
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	0022      	movs	r2, r4
 800de5a:	0029      	movs	r1, r5
 800de5c:	0030      	movs	r0, r6
 800de5e:	4b09      	ldr	r3, [pc, #36]	; (800de84 <_vfiprintf_r+0x270>)
 800de60:	f7fb fcf2 	bl	8009848 <_printf_i>
 800de64:	e7e3      	b.n	800de2e <_vfiprintf_r+0x21a>
 800de66:	46c0      	nop			; (mov r8, r8)
 800de68:	0800ea94 	.word	0x0800ea94
 800de6c:	0800eab4 	.word	0x0800eab4
 800de70:	0800ea74 	.word	0x0800ea74
 800de74:	0800ecac 	.word	0x0800ecac
 800de78:	0800ecb2 	.word	0x0800ecb2
 800de7c:	0800ecb6 	.word	0x0800ecb6
 800de80:	080092e5 	.word	0x080092e5
 800de84:	0800dbef 	.word	0x0800dbef

0800de88 <_scanf_chars>:
 800de88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de8a:	0015      	movs	r5, r2
 800de8c:	688a      	ldr	r2, [r1, #8]
 800de8e:	000c      	movs	r4, r1
 800de90:	9001      	str	r0, [sp, #4]
 800de92:	2a00      	cmp	r2, #0
 800de94:	d105      	bne.n	800dea2 <_scanf_chars+0x1a>
 800de96:	6989      	ldr	r1, [r1, #24]
 800de98:	3201      	adds	r2, #1
 800de9a:	2900      	cmp	r1, #0
 800de9c:	d000      	beq.n	800dea0 <_scanf_chars+0x18>
 800de9e:	3a02      	subs	r2, #2
 800dea0:	60a2      	str	r2, [r4, #8]
 800dea2:	6822      	ldr	r2, [r4, #0]
 800dea4:	06d2      	lsls	r2, r2, #27
 800dea6:	d403      	bmi.n	800deb0 <_scanf_chars+0x28>
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	1d11      	adds	r1, r2, #4
 800deac:	6019      	str	r1, [r3, #0]
 800deae:	6817      	ldr	r7, [r2, #0]
 800deb0:	2600      	movs	r6, #0
 800deb2:	69a0      	ldr	r0, [r4, #24]
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d013      	beq.n	800dee0 <_scanf_chars+0x58>
 800deb8:	2801      	cmp	r0, #1
 800deba:	d108      	bne.n	800dece <_scanf_chars+0x46>
 800debc:	682b      	ldr	r3, [r5, #0]
 800debe:	6962      	ldr	r2, [r4, #20]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	5cd3      	ldrb	r3, [r2, r3]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10b      	bne.n	800dee0 <_scanf_chars+0x58>
 800dec8:	2e00      	cmp	r6, #0
 800deca:	d038      	beq.n	800df3e <_scanf_chars+0xb6>
 800decc:	e026      	b.n	800df1c <_scanf_chars+0x94>
 800dece:	2802      	cmp	r0, #2
 800ded0:	d124      	bne.n	800df1c <_scanf_chars+0x94>
 800ded2:	682b      	ldr	r3, [r5, #0]
 800ded4:	4a1a      	ldr	r2, [pc, #104]	; (800df40 <_scanf_chars+0xb8>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	5cd3      	ldrb	r3, [r2, r3]
 800deda:	2208      	movs	r2, #8
 800dedc:	4213      	tst	r3, r2
 800dede:	d11d      	bne.n	800df1c <_scanf_chars+0x94>
 800dee0:	2210      	movs	r2, #16
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	3601      	adds	r6, #1
 800dee6:	4213      	tst	r3, r2
 800dee8:	d103      	bne.n	800def2 <_scanf_chars+0x6a>
 800deea:	682b      	ldr	r3, [r5, #0]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	703b      	strb	r3, [r7, #0]
 800def0:	3701      	adds	r7, #1
 800def2:	682a      	ldr	r2, [r5, #0]
 800def4:	686b      	ldr	r3, [r5, #4]
 800def6:	3201      	adds	r2, #1
 800def8:	602a      	str	r2, [r5, #0]
 800defa:	68a2      	ldr	r2, [r4, #8]
 800defc:	3b01      	subs	r3, #1
 800defe:	3a01      	subs	r2, #1
 800df00:	606b      	str	r3, [r5, #4]
 800df02:	60a2      	str	r2, [r4, #8]
 800df04:	2a00      	cmp	r2, #0
 800df06:	d009      	beq.n	800df1c <_scanf_chars+0x94>
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dcd2      	bgt.n	800deb2 <_scanf_chars+0x2a>
 800df0c:	23c0      	movs	r3, #192	; 0xc0
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	0029      	movs	r1, r5
 800df12:	58e3      	ldr	r3, [r4, r3]
 800df14:	9801      	ldr	r0, [sp, #4]
 800df16:	4798      	blx	r3
 800df18:	2800      	cmp	r0, #0
 800df1a:	d0ca      	beq.n	800deb2 <_scanf_chars+0x2a>
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	2310      	movs	r3, #16
 800df20:	0011      	movs	r1, r2
 800df22:	4019      	ands	r1, r3
 800df24:	421a      	tst	r2, r3
 800df26:	d106      	bne.n	800df36 <_scanf_chars+0xae>
 800df28:	68e3      	ldr	r3, [r4, #12]
 800df2a:	3301      	adds	r3, #1
 800df2c:	60e3      	str	r3, [r4, #12]
 800df2e:	69a3      	ldr	r3, [r4, #24]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d000      	beq.n	800df36 <_scanf_chars+0xae>
 800df34:	7039      	strb	r1, [r7, #0]
 800df36:	2000      	movs	r0, #0
 800df38:	6923      	ldr	r3, [r4, #16]
 800df3a:	199e      	adds	r6, r3, r6
 800df3c:	6126      	str	r6, [r4, #16]
 800df3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df40:	0800e8e1 	.word	0x0800e8e1

0800df44 <_scanf_i>:
 800df44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df46:	000c      	movs	r4, r1
 800df48:	b08d      	sub	sp, #52	; 0x34
 800df4a:	9302      	str	r3, [sp, #8]
 800df4c:	4b79      	ldr	r3, [pc, #484]	; (800e134 <_scanf_i+0x1f0>)
 800df4e:	0016      	movs	r6, r2
 800df50:	9005      	str	r0, [sp, #20]
 800df52:	aa09      	add	r2, sp, #36	; 0x24
 800df54:	cb23      	ldmia	r3!, {r0, r1, r5}
 800df56:	c223      	stmia	r2!, {r0, r1, r5}
 800df58:	4b77      	ldr	r3, [pc, #476]	; (800e138 <_scanf_i+0x1f4>)
 800df5a:	9306      	str	r3, [sp, #24]
 800df5c:	69a3      	ldr	r3, [r4, #24]
 800df5e:	2b03      	cmp	r3, #3
 800df60:	d001      	beq.n	800df66 <_scanf_i+0x22>
 800df62:	4b76      	ldr	r3, [pc, #472]	; (800e13c <_scanf_i+0x1f8>)
 800df64:	9306      	str	r3, [sp, #24]
 800df66:	22ae      	movs	r2, #174	; 0xae
 800df68:	2000      	movs	r0, #0
 800df6a:	68a3      	ldr	r3, [r4, #8]
 800df6c:	0052      	lsls	r2, r2, #1
 800df6e:	1e59      	subs	r1, r3, #1
 800df70:	9004      	str	r0, [sp, #16]
 800df72:	4291      	cmp	r1, r2
 800df74:	d905      	bls.n	800df82 <_scanf_i+0x3e>
 800df76:	3b5e      	subs	r3, #94	; 0x5e
 800df78:	3bff      	subs	r3, #255	; 0xff
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	235e      	movs	r3, #94	; 0x5e
 800df7e:	33ff      	adds	r3, #255	; 0xff
 800df80:	60a3      	str	r3, [r4, #8]
 800df82:	0023      	movs	r3, r4
 800df84:	331c      	adds	r3, #28
 800df86:	9301      	str	r3, [sp, #4]
 800df88:	23d0      	movs	r3, #208	; 0xd0
 800df8a:	2700      	movs	r7, #0
 800df8c:	6822      	ldr	r2, [r4, #0]
 800df8e:	011b      	lsls	r3, r3, #4
 800df90:	4313      	orrs	r3, r2
 800df92:	6023      	str	r3, [r4, #0]
 800df94:	9b01      	ldr	r3, [sp, #4]
 800df96:	9303      	str	r3, [sp, #12]
 800df98:	6833      	ldr	r3, [r6, #0]
 800df9a:	a809      	add	r0, sp, #36	; 0x24
 800df9c:	7819      	ldrb	r1, [r3, #0]
 800df9e:	00bb      	lsls	r3, r7, #2
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	5818      	ldr	r0, [r3, r0]
 800dfa4:	f7fe fcee 	bl	800c984 <memchr>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d02b      	beq.n	800e004 <_scanf_i+0xc0>
 800dfac:	2f01      	cmp	r7, #1
 800dfae:	d162      	bne.n	800e076 <_scanf_i+0x132>
 800dfb0:	6863      	ldr	r3, [r4, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <_scanf_i+0x80>
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	6822      	ldr	r2, [r4, #0]
 800dfba:	6063      	str	r3, [r4, #4]
 800dfbc:	33f9      	adds	r3, #249	; 0xf9
 800dfbe:	33ff      	adds	r3, #255	; 0xff
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	6023      	str	r3, [r4, #0]
 800dfc4:	4b5e      	ldr	r3, [pc, #376]	; (800e140 <_scanf_i+0x1fc>)
 800dfc6:	6822      	ldr	r2, [r4, #0]
 800dfc8:	4013      	ands	r3, r2
 800dfca:	6023      	str	r3, [r4, #0]
 800dfcc:	68a3      	ldr	r3, [r4, #8]
 800dfce:	1e5a      	subs	r2, r3, #1
 800dfd0:	60a2      	str	r2, [r4, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d016      	beq.n	800e004 <_scanf_i+0xc0>
 800dfd6:	6833      	ldr	r3, [r6, #0]
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	6032      	str	r2, [r6, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	9a03      	ldr	r2, [sp, #12]
 800dfe0:	7013      	strb	r3, [r2, #0]
 800dfe2:	6873      	ldr	r3, [r6, #4]
 800dfe4:	1c55      	adds	r5, r2, #1
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	6073      	str	r3, [r6, #4]
 800dfea:	9503      	str	r5, [sp, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	dc09      	bgt.n	800e004 <_scanf_i+0xc0>
 800dff0:	23c0      	movs	r3, #192	; 0xc0
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	58e3      	ldr	r3, [r4, r3]
 800dff6:	0031      	movs	r1, r6
 800dff8:	9805      	ldr	r0, [sp, #20]
 800dffa:	9307      	str	r3, [sp, #28]
 800dffc:	4798      	blx	r3
 800dffe:	2800      	cmp	r0, #0
 800e000:	d000      	beq.n	800e004 <_scanf_i+0xc0>
 800e002:	e081      	b.n	800e108 <_scanf_i+0x1c4>
 800e004:	3701      	adds	r7, #1
 800e006:	2f03      	cmp	r7, #3
 800e008:	d1c6      	bne.n	800df98 <_scanf_i+0x54>
 800e00a:	6863      	ldr	r3, [r4, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <_scanf_i+0xd0>
 800e010:	330a      	adds	r3, #10
 800e012:	6063      	str	r3, [r4, #4]
 800e014:	2110      	movs	r1, #16
 800e016:	2700      	movs	r7, #0
 800e018:	6863      	ldr	r3, [r4, #4]
 800e01a:	6960      	ldr	r0, [r4, #20]
 800e01c:	1ac9      	subs	r1, r1, r3
 800e01e:	4b49      	ldr	r3, [pc, #292]	; (800e144 <_scanf_i+0x200>)
 800e020:	18c9      	adds	r1, r1, r3
 800e022:	f000 f8bf 	bl	800e1a4 <__sccl>
 800e026:	9d03      	ldr	r5, [sp, #12]
 800e028:	68a3      	ldr	r3, [r4, #8]
 800e02a:	6822      	ldr	r2, [r4, #0]
 800e02c:	9303      	str	r3, [sp, #12]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d041      	beq.n	800e0b6 <_scanf_i+0x172>
 800e032:	6831      	ldr	r1, [r6, #0]
 800e034:	6963      	ldr	r3, [r4, #20]
 800e036:	7808      	ldrb	r0, [r1, #0]
 800e038:	5c1b      	ldrb	r3, [r3, r0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d03b      	beq.n	800e0b6 <_scanf_i+0x172>
 800e03e:	2830      	cmp	r0, #48	; 0x30
 800e040:	d129      	bne.n	800e096 <_scanf_i+0x152>
 800e042:	2380      	movs	r3, #128	; 0x80
 800e044:	011b      	lsls	r3, r3, #4
 800e046:	421a      	tst	r2, r3
 800e048:	d025      	beq.n	800e096 <_scanf_i+0x152>
 800e04a:	9b04      	ldr	r3, [sp, #16]
 800e04c:	3701      	adds	r7, #1
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d005      	beq.n	800e05e <_scanf_i+0x11a>
 800e052:	001a      	movs	r2, r3
 800e054:	9b03      	ldr	r3, [sp, #12]
 800e056:	3a01      	subs	r2, #1
 800e058:	3301      	adds	r3, #1
 800e05a:	9204      	str	r2, [sp, #16]
 800e05c:	60a3      	str	r3, [r4, #8]
 800e05e:	6873      	ldr	r3, [r6, #4]
 800e060:	3b01      	subs	r3, #1
 800e062:	6073      	str	r3, [r6, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	dd1d      	ble.n	800e0a4 <_scanf_i+0x160>
 800e068:	6833      	ldr	r3, [r6, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	6033      	str	r3, [r6, #0]
 800e06e:	68a3      	ldr	r3, [r4, #8]
 800e070:	3b01      	subs	r3, #1
 800e072:	60a3      	str	r3, [r4, #8]
 800e074:	e7d8      	b.n	800e028 <_scanf_i+0xe4>
 800e076:	2f02      	cmp	r7, #2
 800e078:	d1a8      	bne.n	800dfcc <_scanf_i+0x88>
 800e07a:	21c0      	movs	r1, #192	; 0xc0
 800e07c:	2380      	movs	r3, #128	; 0x80
 800e07e:	6822      	ldr	r2, [r4, #0]
 800e080:	00c9      	lsls	r1, r1, #3
 800e082:	4011      	ands	r1, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4299      	cmp	r1, r3
 800e088:	d1bf      	bne.n	800e00a <_scanf_i+0xc6>
 800e08a:	3bf1      	subs	r3, #241	; 0xf1
 800e08c:	3bff      	subs	r3, #255	; 0xff
 800e08e:	6063      	str	r3, [r4, #4]
 800e090:	33f0      	adds	r3, #240	; 0xf0
 800e092:	4313      	orrs	r3, r2
 800e094:	e799      	b.n	800dfca <_scanf_i+0x86>
 800e096:	4b2c      	ldr	r3, [pc, #176]	; (800e148 <_scanf_i+0x204>)
 800e098:	4013      	ands	r3, r2
 800e09a:	6023      	str	r3, [r4, #0]
 800e09c:	780b      	ldrb	r3, [r1, #0]
 800e09e:	702b      	strb	r3, [r5, #0]
 800e0a0:	3501      	adds	r5, #1
 800e0a2:	e7dc      	b.n	800e05e <_scanf_i+0x11a>
 800e0a4:	23c0      	movs	r3, #192	; 0xc0
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	58e3      	ldr	r3, [r4, r3]
 800e0aa:	0031      	movs	r1, r6
 800e0ac:	9805      	ldr	r0, [sp, #20]
 800e0ae:	9303      	str	r3, [sp, #12]
 800e0b0:	4798      	blx	r3
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d0db      	beq.n	800e06e <_scanf_i+0x12a>
 800e0b6:	6823      	ldr	r3, [r4, #0]
 800e0b8:	05db      	lsls	r3, r3, #23
 800e0ba:	d50e      	bpl.n	800e0da <_scanf_i+0x196>
 800e0bc:	9b01      	ldr	r3, [sp, #4]
 800e0be:	429d      	cmp	r5, r3
 800e0c0:	d907      	bls.n	800e0d2 <_scanf_i+0x18e>
 800e0c2:	23be      	movs	r3, #190	; 0xbe
 800e0c4:	3d01      	subs	r5, #1
 800e0c6:	005b      	lsls	r3, r3, #1
 800e0c8:	0032      	movs	r2, r6
 800e0ca:	7829      	ldrb	r1, [r5, #0]
 800e0cc:	58e3      	ldr	r3, [r4, r3]
 800e0ce:	9805      	ldr	r0, [sp, #20]
 800e0d0:	4798      	blx	r3
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	429d      	cmp	r5, r3
 800e0d8:	d029      	beq.n	800e12e <_scanf_i+0x1ea>
 800e0da:	6821      	ldr	r1, [r4, #0]
 800e0dc:	2310      	movs	r3, #16
 800e0de:	000a      	movs	r2, r1
 800e0e0:	401a      	ands	r2, r3
 800e0e2:	4219      	tst	r1, r3
 800e0e4:	d11c      	bne.n	800e120 <_scanf_i+0x1dc>
 800e0e6:	702a      	strb	r2, [r5, #0]
 800e0e8:	6863      	ldr	r3, [r4, #4]
 800e0ea:	9901      	ldr	r1, [sp, #4]
 800e0ec:	9805      	ldr	r0, [sp, #20]
 800e0ee:	9e06      	ldr	r6, [sp, #24]
 800e0f0:	47b0      	blx	r6
 800e0f2:	9b02      	ldr	r3, [sp, #8]
 800e0f4:	6821      	ldr	r1, [r4, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	068a      	lsls	r2, r1, #26
 800e0fa:	d507      	bpl.n	800e10c <_scanf_i+0x1c8>
 800e0fc:	1d1a      	adds	r2, r3, #4
 800e0fe:	9902      	ldr	r1, [sp, #8]
 800e100:	600a      	str	r2, [r1, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6018      	str	r0, [r3, #0]
 800e106:	e008      	b.n	800e11a <_scanf_i+0x1d6>
 800e108:	2700      	movs	r7, #0
 800e10a:	e7d4      	b.n	800e0b6 <_scanf_i+0x172>
 800e10c:	1d1a      	adds	r2, r3, #4
 800e10e:	07ce      	lsls	r6, r1, #31
 800e110:	d5f5      	bpl.n	800e0fe <_scanf_i+0x1ba>
 800e112:	9902      	ldr	r1, [sp, #8]
 800e114:	600a      	str	r2, [r1, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	8018      	strh	r0, [r3, #0]
 800e11a:	68e3      	ldr	r3, [r4, #12]
 800e11c:	3301      	adds	r3, #1
 800e11e:	60e3      	str	r3, [r4, #12]
 800e120:	2000      	movs	r0, #0
 800e122:	9b01      	ldr	r3, [sp, #4]
 800e124:	1aed      	subs	r5, r5, r3
 800e126:	6923      	ldr	r3, [r4, #16]
 800e128:	19ef      	adds	r7, r5, r7
 800e12a:	19df      	adds	r7, r3, r7
 800e12c:	6127      	str	r7, [r4, #16]
 800e12e:	b00d      	add	sp, #52	; 0x34
 800e130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e132:	46c0      	nop			; (mov r8, r8)
 800e134:	0800e74c 	.word	0x0800e74c
 800e138:	0800ae7d 	.word	0x0800ae7d
 800e13c:	0800e355 	.word	0x0800e355
 800e140:	fffffaff 	.word	0xfffffaff
 800e144:	0800ecc6 	.word	0x0800ecc6
 800e148:	fffff6ff 	.word	0xfffff6ff

0800e14c <_read_r>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	0004      	movs	r4, r0
 800e150:	0008      	movs	r0, r1
 800e152:	0011      	movs	r1, r2
 800e154:	001a      	movs	r2, r3
 800e156:	2300      	movs	r3, #0
 800e158:	4d05      	ldr	r5, [pc, #20]	; (800e170 <_read_r+0x24>)
 800e15a:	602b      	str	r3, [r5, #0]
 800e15c:	f7f5 fe38 	bl	8003dd0 <_read>
 800e160:	1c43      	adds	r3, r0, #1
 800e162:	d103      	bne.n	800e16c <_read_r+0x20>
 800e164:	682b      	ldr	r3, [r5, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d000      	beq.n	800e16c <_read_r+0x20>
 800e16a:	6023      	str	r3, [r4, #0]
 800e16c:	bd70      	pop	{r4, r5, r6, pc}
 800e16e:	46c0      	nop			; (mov r8, r8)
 800e170:	20000658 	.word	0x20000658

0800e174 <nan>:
 800e174:	2000      	movs	r0, #0
 800e176:	4901      	ldr	r1, [pc, #4]	; (800e17c <nan+0x8>)
 800e178:	4770      	bx	lr
 800e17a:	46c0      	nop			; (mov r8, r8)
 800e17c:	7ff80000 	.word	0x7ff80000

0800e180 <_sbrk_r>:
 800e180:	2300      	movs	r3, #0
 800e182:	b570      	push	{r4, r5, r6, lr}
 800e184:	4d06      	ldr	r5, [pc, #24]	; (800e1a0 <_sbrk_r+0x20>)
 800e186:	0004      	movs	r4, r0
 800e188:	0008      	movs	r0, r1
 800e18a:	602b      	str	r3, [r5, #0]
 800e18c:	f7f5 fe86 	bl	8003e9c <_sbrk>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d103      	bne.n	800e19c <_sbrk_r+0x1c>
 800e194:	682b      	ldr	r3, [r5, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d000      	beq.n	800e19c <_sbrk_r+0x1c>
 800e19a:	6023      	str	r3, [r4, #0]
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
 800e19e:	46c0      	nop			; (mov r8, r8)
 800e1a0:	20000658 	.word	0x20000658

0800e1a4 <__sccl>:
 800e1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1a6:	780b      	ldrb	r3, [r1, #0]
 800e1a8:	0004      	movs	r4, r0
 800e1aa:	2b5e      	cmp	r3, #94	; 0x5e
 800e1ac:	d00c      	beq.n	800e1c8 <__sccl+0x24>
 800e1ae:	1c48      	adds	r0, r1, #1
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	0022      	movs	r2, r4
 800e1b4:	1c65      	adds	r5, r4, #1
 800e1b6:	35ff      	adds	r5, #255	; 0xff
 800e1b8:	7011      	strb	r1, [r2, #0]
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	42aa      	cmp	r2, r5
 800e1be:	d1fb      	bne.n	800e1b8 <__sccl+0x14>
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d105      	bne.n	800e1d0 <__sccl+0x2c>
 800e1c4:	3801      	subs	r0, #1
 800e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c8:	784b      	ldrb	r3, [r1, #1]
 800e1ca:	1c88      	adds	r0, r1, #2
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	e7f0      	b.n	800e1b2 <__sccl+0xe>
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	262d      	movs	r6, #45	; 0x2d
 800e1d4:	4051      	eors	r1, r2
 800e1d6:	0002      	movs	r2, r0
 800e1d8:	54e1      	strb	r1, [r4, r3]
 800e1da:	7815      	ldrb	r5, [r2, #0]
 800e1dc:	1c50      	adds	r0, r2, #1
 800e1de:	2d2d      	cmp	r5, #45	; 0x2d
 800e1e0:	d009      	beq.n	800e1f6 <__sccl+0x52>
 800e1e2:	2d5d      	cmp	r5, #93	; 0x5d
 800e1e4:	d0ef      	beq.n	800e1c6 <__sccl+0x22>
 800e1e6:	2d00      	cmp	r5, #0
 800e1e8:	d101      	bne.n	800e1ee <__sccl+0x4a>
 800e1ea:	0010      	movs	r0, r2
 800e1ec:	e7eb      	b.n	800e1c6 <__sccl+0x22>
 800e1ee:	002b      	movs	r3, r5
 800e1f0:	e7f1      	b.n	800e1d6 <__sccl+0x32>
 800e1f2:	0033      	movs	r3, r6
 800e1f4:	e7ef      	b.n	800e1d6 <__sccl+0x32>
 800e1f6:	7855      	ldrb	r5, [r2, #1]
 800e1f8:	2d5d      	cmp	r5, #93	; 0x5d
 800e1fa:	d0fa      	beq.n	800e1f2 <__sccl+0x4e>
 800e1fc:	42ab      	cmp	r3, r5
 800e1fe:	dcf8      	bgt.n	800e1f2 <__sccl+0x4e>
 800e200:	0018      	movs	r0, r3
 800e202:	3202      	adds	r2, #2
 800e204:	3001      	adds	r0, #1
 800e206:	5421      	strb	r1, [r4, r0]
 800e208:	4285      	cmp	r5, r0
 800e20a:	dcfb      	bgt.n	800e204 <__sccl+0x60>
 800e20c:	2000      	movs	r0, #0
 800e20e:	1c5f      	adds	r7, r3, #1
 800e210:	42ab      	cmp	r3, r5
 800e212:	da01      	bge.n	800e218 <__sccl+0x74>
 800e214:	1ae8      	subs	r0, r5, r3
 800e216:	3801      	subs	r0, #1
 800e218:	183b      	adds	r3, r7, r0
 800e21a:	e7de      	b.n	800e1da <__sccl+0x36>

0800e21c <strncmp>:
 800e21c:	b530      	push	{r4, r5, lr}
 800e21e:	0005      	movs	r5, r0
 800e220:	1e10      	subs	r0, r2, #0
 800e222:	d008      	beq.n	800e236 <strncmp+0x1a>
 800e224:	2400      	movs	r4, #0
 800e226:	3a01      	subs	r2, #1
 800e228:	5d2b      	ldrb	r3, [r5, r4]
 800e22a:	5d08      	ldrb	r0, [r1, r4]
 800e22c:	4283      	cmp	r3, r0
 800e22e:	d101      	bne.n	800e234 <strncmp+0x18>
 800e230:	4294      	cmp	r4, r2
 800e232:	d101      	bne.n	800e238 <strncmp+0x1c>
 800e234:	1a18      	subs	r0, r3, r0
 800e236:	bd30      	pop	{r4, r5, pc}
 800e238:	3401      	adds	r4, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1f4      	bne.n	800e228 <strncmp+0xc>
 800e23e:	e7f9      	b.n	800e234 <strncmp+0x18>

0800e240 <_strtoul_l.constprop.0>:
 800e240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e242:	b087      	sub	sp, #28
 800e244:	9202      	str	r2, [sp, #8]
 800e246:	4a42      	ldr	r2, [pc, #264]	; (800e350 <_strtoul_l.constprop.0+0x110>)
 800e248:	001e      	movs	r6, r3
 800e24a:	9101      	str	r1, [sp, #4]
 800e24c:	000b      	movs	r3, r1
 800e24e:	4694      	mov	ip, r2
 800e250:	2108      	movs	r1, #8
 800e252:	9005      	str	r0, [sp, #20]
 800e254:	001a      	movs	r2, r3
 800e256:	4660      	mov	r0, ip
 800e258:	7814      	ldrb	r4, [r2, #0]
 800e25a:	3301      	adds	r3, #1
 800e25c:	5d00      	ldrb	r0, [r0, r4]
 800e25e:	001d      	movs	r5, r3
 800e260:	0007      	movs	r7, r0
 800e262:	400f      	ands	r7, r1
 800e264:	4208      	tst	r0, r1
 800e266:	d1f5      	bne.n	800e254 <_strtoul_l.constprop.0+0x14>
 800e268:	2c2d      	cmp	r4, #45	; 0x2d
 800e26a:	d13a      	bne.n	800e2e2 <_strtoul_l.constprop.0+0xa2>
 800e26c:	2701      	movs	r7, #1
 800e26e:	781c      	ldrb	r4, [r3, #0]
 800e270:	1c95      	adds	r5, r2, #2
 800e272:	2e00      	cmp	r6, #0
 800e274:	d067      	beq.n	800e346 <_strtoul_l.constprop.0+0x106>
 800e276:	2e10      	cmp	r6, #16
 800e278:	d109      	bne.n	800e28e <_strtoul_l.constprop.0+0x4e>
 800e27a:	2c30      	cmp	r4, #48	; 0x30
 800e27c:	d107      	bne.n	800e28e <_strtoul_l.constprop.0+0x4e>
 800e27e:	2220      	movs	r2, #32
 800e280:	782b      	ldrb	r3, [r5, #0]
 800e282:	4393      	bics	r3, r2
 800e284:	2b58      	cmp	r3, #88	; 0x58
 800e286:	d159      	bne.n	800e33c <_strtoul_l.constprop.0+0xfc>
 800e288:	2610      	movs	r6, #16
 800e28a:	786c      	ldrb	r4, [r5, #1]
 800e28c:	3502      	adds	r5, #2
 800e28e:	2001      	movs	r0, #1
 800e290:	0031      	movs	r1, r6
 800e292:	4240      	negs	r0, r0
 800e294:	f7f1 ff5e 	bl	8000154 <__udivsi3>
 800e298:	9003      	str	r0, [sp, #12]
 800e29a:	2001      	movs	r0, #1
 800e29c:	0031      	movs	r1, r6
 800e29e:	4240      	negs	r0, r0
 800e2a0:	f7f1 ffde 	bl	8000260 <__aeabi_uidivmod>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	9104      	str	r1, [sp, #16]
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	0018      	movs	r0, r3
 800e2ae:	468c      	mov	ip, r1
 800e2b0:	4252      	negs	r2, r2
 800e2b2:	0021      	movs	r1, r4
 800e2b4:	3930      	subs	r1, #48	; 0x30
 800e2b6:	2909      	cmp	r1, #9
 800e2b8:	d818      	bhi.n	800e2ec <_strtoul_l.constprop.0+0xac>
 800e2ba:	000c      	movs	r4, r1
 800e2bc:	42a6      	cmp	r6, r4
 800e2be:	dd23      	ble.n	800e308 <_strtoul_l.constprop.0+0xc8>
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	db1f      	blt.n	800e304 <_strtoul_l.constprop.0+0xc4>
 800e2c4:	9903      	ldr	r1, [sp, #12]
 800e2c6:	0013      	movs	r3, r2
 800e2c8:	4281      	cmp	r1, r0
 800e2ca:	d307      	bcc.n	800e2dc <_strtoul_l.constprop.0+0x9c>
 800e2cc:	d103      	bne.n	800e2d6 <_strtoul_l.constprop.0+0x96>
 800e2ce:	9904      	ldr	r1, [sp, #16]
 800e2d0:	0013      	movs	r3, r2
 800e2d2:	42a1      	cmp	r1, r4
 800e2d4:	db02      	blt.n	800e2dc <_strtoul_l.constprop.0+0x9c>
 800e2d6:	4663      	mov	r3, ip
 800e2d8:	4370      	muls	r0, r6
 800e2da:	1820      	adds	r0, r4, r0
 800e2dc:	782c      	ldrb	r4, [r5, #0]
 800e2de:	3501      	adds	r5, #1
 800e2e0:	e7e7      	b.n	800e2b2 <_strtoul_l.constprop.0+0x72>
 800e2e2:	2c2b      	cmp	r4, #43	; 0x2b
 800e2e4:	d1c5      	bne.n	800e272 <_strtoul_l.constprop.0+0x32>
 800e2e6:	781c      	ldrb	r4, [r3, #0]
 800e2e8:	1c95      	adds	r5, r2, #2
 800e2ea:	e7c2      	b.n	800e272 <_strtoul_l.constprop.0+0x32>
 800e2ec:	0021      	movs	r1, r4
 800e2ee:	3941      	subs	r1, #65	; 0x41
 800e2f0:	2919      	cmp	r1, #25
 800e2f2:	d801      	bhi.n	800e2f8 <_strtoul_l.constprop.0+0xb8>
 800e2f4:	3c37      	subs	r4, #55	; 0x37
 800e2f6:	e7e1      	b.n	800e2bc <_strtoul_l.constprop.0+0x7c>
 800e2f8:	0021      	movs	r1, r4
 800e2fa:	3961      	subs	r1, #97	; 0x61
 800e2fc:	2919      	cmp	r1, #25
 800e2fe:	d803      	bhi.n	800e308 <_strtoul_l.constprop.0+0xc8>
 800e300:	3c57      	subs	r4, #87	; 0x57
 800e302:	e7db      	b.n	800e2bc <_strtoul_l.constprop.0+0x7c>
 800e304:	0013      	movs	r3, r2
 800e306:	e7e9      	b.n	800e2dc <_strtoul_l.constprop.0+0x9c>
 800e308:	2b00      	cmp	r3, #0
 800e30a:	da09      	bge.n	800e320 <_strtoul_l.constprop.0+0xe0>
 800e30c:	2322      	movs	r3, #34	; 0x22
 800e30e:	2001      	movs	r0, #1
 800e310:	9a05      	ldr	r2, [sp, #20]
 800e312:	4240      	negs	r0, r0
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	9b02      	ldr	r3, [sp, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d109      	bne.n	800e330 <_strtoul_l.constprop.0+0xf0>
 800e31c:	b007      	add	sp, #28
 800e31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e320:	2f00      	cmp	r7, #0
 800e322:	d000      	beq.n	800e326 <_strtoul_l.constprop.0+0xe6>
 800e324:	4240      	negs	r0, r0
 800e326:	9a02      	ldr	r2, [sp, #8]
 800e328:	2a00      	cmp	r2, #0
 800e32a:	d0f7      	beq.n	800e31c <_strtoul_l.constprop.0+0xdc>
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <_strtoul_l.constprop.0+0xf4>
 800e330:	1e6b      	subs	r3, r5, #1
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	9b02      	ldr	r3, [sp, #8]
 800e336:	9a01      	ldr	r2, [sp, #4]
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	e7ef      	b.n	800e31c <_strtoul_l.constprop.0+0xdc>
 800e33c:	2430      	movs	r4, #48	; 0x30
 800e33e:	2e00      	cmp	r6, #0
 800e340:	d1a5      	bne.n	800e28e <_strtoul_l.constprop.0+0x4e>
 800e342:	3608      	adds	r6, #8
 800e344:	e7a3      	b.n	800e28e <_strtoul_l.constprop.0+0x4e>
 800e346:	2c30      	cmp	r4, #48	; 0x30
 800e348:	d099      	beq.n	800e27e <_strtoul_l.constprop.0+0x3e>
 800e34a:	260a      	movs	r6, #10
 800e34c:	e79f      	b.n	800e28e <_strtoul_l.constprop.0+0x4e>
 800e34e:	46c0      	nop			; (mov r8, r8)
 800e350:	0800e8e1 	.word	0x0800e8e1

0800e354 <_strtoul_r>:
 800e354:	b510      	push	{r4, lr}
 800e356:	f7ff ff73 	bl	800e240 <_strtoul_l.constprop.0>
 800e35a:	bd10      	pop	{r4, pc}

0800e35c <__submore>:
 800e35c:	000b      	movs	r3, r1
 800e35e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e360:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800e362:	3344      	adds	r3, #68	; 0x44
 800e364:	000c      	movs	r4, r1
 800e366:	429d      	cmp	r5, r3
 800e368:	d11c      	bne.n	800e3a4 <__submore+0x48>
 800e36a:	2680      	movs	r6, #128	; 0x80
 800e36c:	00f6      	lsls	r6, r6, #3
 800e36e:	0031      	movs	r1, r6
 800e370:	f7ff f876 	bl	800d460 <_malloc_r>
 800e374:	2800      	cmp	r0, #0
 800e376:	d102      	bne.n	800e37e <__submore+0x22>
 800e378:	2001      	movs	r0, #1
 800e37a:	4240      	negs	r0, r0
 800e37c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e37e:	0023      	movs	r3, r4
 800e380:	6360      	str	r0, [r4, #52]	; 0x34
 800e382:	63a6      	str	r6, [r4, #56]	; 0x38
 800e384:	3346      	adds	r3, #70	; 0x46
 800e386:	781a      	ldrb	r2, [r3, #0]
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <__submore+0x70>)
 800e38a:	54c2      	strb	r2, [r0, r3]
 800e38c:	0023      	movs	r3, r4
 800e38e:	3345      	adds	r3, #69	; 0x45
 800e390:	781a      	ldrb	r2, [r3, #0]
 800e392:	4b0f      	ldr	r3, [pc, #60]	; (800e3d0 <__submore+0x74>)
 800e394:	54c2      	strb	r2, [r0, r3]
 800e396:	782a      	ldrb	r2, [r5, #0]
 800e398:	4b0e      	ldr	r3, [pc, #56]	; (800e3d4 <__submore+0x78>)
 800e39a:	54c2      	strb	r2, [r0, r3]
 800e39c:	18c0      	adds	r0, r0, r3
 800e39e:	6020      	str	r0, [r4, #0]
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	e7eb      	b.n	800e37c <__submore+0x20>
 800e3a4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800e3a6:	0029      	movs	r1, r5
 800e3a8:	0073      	lsls	r3, r6, #1
 800e3aa:	001a      	movs	r2, r3
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	f000 f897 	bl	800e4e0 <_realloc_r>
 800e3b2:	1e05      	subs	r5, r0, #0
 800e3b4:	d0e0      	beq.n	800e378 <__submore+0x1c>
 800e3b6:	1987      	adds	r7, r0, r6
 800e3b8:	0001      	movs	r1, r0
 800e3ba:	0032      	movs	r2, r6
 800e3bc:	0038      	movs	r0, r7
 800e3be:	f7fa fed5 	bl	800916c <memcpy>
 800e3c2:	9b01      	ldr	r3, [sp, #4]
 800e3c4:	6027      	str	r7, [r4, #0]
 800e3c6:	6365      	str	r5, [r4, #52]	; 0x34
 800e3c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800e3ca:	e7e9      	b.n	800e3a0 <__submore+0x44>
 800e3cc:	000003ff 	.word	0x000003ff
 800e3d0:	000003fe 	.word	0x000003fe
 800e3d4:	000003fd 	.word	0x000003fd

0800e3d8 <__ascii_wctomb>:
 800e3d8:	0003      	movs	r3, r0
 800e3da:	1e08      	subs	r0, r1, #0
 800e3dc:	d005      	beq.n	800e3ea <__ascii_wctomb+0x12>
 800e3de:	2aff      	cmp	r2, #255	; 0xff
 800e3e0:	d904      	bls.n	800e3ec <__ascii_wctomb+0x14>
 800e3e2:	228a      	movs	r2, #138	; 0x8a
 800e3e4:	2001      	movs	r0, #1
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	4240      	negs	r0, r0
 800e3ea:	4770      	bx	lr
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	700a      	strb	r2, [r1, #0]
 800e3f0:	e7fb      	b.n	800e3ea <__ascii_wctomb+0x12>
	...

0800e3f4 <__assert_func>:
 800e3f4:	b530      	push	{r4, r5, lr}
 800e3f6:	0014      	movs	r4, r2
 800e3f8:	001a      	movs	r2, r3
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <__assert_func+0x2c>)
 800e3fc:	0005      	movs	r5, r0
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	b085      	sub	sp, #20
 800e402:	68d8      	ldr	r0, [r3, #12]
 800e404:	4b07      	ldr	r3, [pc, #28]	; (800e424 <__assert_func+0x30>)
 800e406:	2c00      	cmp	r4, #0
 800e408:	d101      	bne.n	800e40e <__assert_func+0x1a>
 800e40a:	4b07      	ldr	r3, [pc, #28]	; (800e428 <__assert_func+0x34>)
 800e40c:	001c      	movs	r4, r3
 800e40e:	9301      	str	r3, [sp, #4]
 800e410:	9100      	str	r1, [sp, #0]
 800e412:	002b      	movs	r3, r5
 800e414:	4905      	ldr	r1, [pc, #20]	; (800e42c <__assert_func+0x38>)
 800e416:	9402      	str	r4, [sp, #8]
 800e418:	f000 f80a 	bl	800e430 <fiprintf>
 800e41c:	f000 f88f 	bl	800e53e <abort>
 800e420:	20000038 	.word	0x20000038
 800e424:	0800ecd8 	.word	0x0800ecd8
 800e428:	0800ed13 	.word	0x0800ed13
 800e42c:	0800ece5 	.word	0x0800ece5

0800e430 <fiprintf>:
 800e430:	b40e      	push	{r1, r2, r3}
 800e432:	b503      	push	{r0, r1, lr}
 800e434:	0001      	movs	r1, r0
 800e436:	ab03      	add	r3, sp, #12
 800e438:	4804      	ldr	r0, [pc, #16]	; (800e44c <fiprintf+0x1c>)
 800e43a:	cb04      	ldmia	r3!, {r2}
 800e43c:	6800      	ldr	r0, [r0, #0]
 800e43e:	9301      	str	r3, [sp, #4]
 800e440:	f7ff fbe8 	bl	800dc14 <_vfiprintf_r>
 800e444:	b002      	add	sp, #8
 800e446:	bc08      	pop	{r3}
 800e448:	b003      	add	sp, #12
 800e44a:	4718      	bx	r3
 800e44c:	20000038 	.word	0x20000038

0800e450 <_fstat_r>:
 800e450:	2300      	movs	r3, #0
 800e452:	b570      	push	{r4, r5, r6, lr}
 800e454:	4d06      	ldr	r5, [pc, #24]	; (800e470 <_fstat_r+0x20>)
 800e456:	0004      	movs	r4, r0
 800e458:	0008      	movs	r0, r1
 800e45a:	0011      	movs	r1, r2
 800e45c:	602b      	str	r3, [r5, #0]
 800e45e:	f7f5 fcfa 	bl	8003e56 <_fstat>
 800e462:	1c43      	adds	r3, r0, #1
 800e464:	d103      	bne.n	800e46e <_fstat_r+0x1e>
 800e466:	682b      	ldr	r3, [r5, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d000      	beq.n	800e46e <_fstat_r+0x1e>
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	bd70      	pop	{r4, r5, r6, pc}
 800e470:	20000658 	.word	0x20000658

0800e474 <_isatty_r>:
 800e474:	2300      	movs	r3, #0
 800e476:	b570      	push	{r4, r5, r6, lr}
 800e478:	4d06      	ldr	r5, [pc, #24]	; (800e494 <_isatty_r+0x20>)
 800e47a:	0004      	movs	r4, r0
 800e47c:	0008      	movs	r0, r1
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	f7f5 fcf7 	bl	8003e72 <_isatty>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d103      	bne.n	800e490 <_isatty_r+0x1c>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d000      	beq.n	800e490 <_isatty_r+0x1c>
 800e48e:	6023      	str	r3, [r4, #0]
 800e490:	bd70      	pop	{r4, r5, r6, pc}
 800e492:	46c0      	nop			; (mov r8, r8)
 800e494:	20000658 	.word	0x20000658

0800e498 <memmove>:
 800e498:	b510      	push	{r4, lr}
 800e49a:	4288      	cmp	r0, r1
 800e49c:	d902      	bls.n	800e4a4 <memmove+0xc>
 800e49e:	188b      	adds	r3, r1, r2
 800e4a0:	4298      	cmp	r0, r3
 800e4a2:	d303      	bcc.n	800e4ac <memmove+0x14>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	e007      	b.n	800e4b8 <memmove+0x20>
 800e4a8:	5c8b      	ldrb	r3, [r1, r2]
 800e4aa:	5483      	strb	r3, [r0, r2]
 800e4ac:	3a01      	subs	r2, #1
 800e4ae:	d2fb      	bcs.n	800e4a8 <memmove+0x10>
 800e4b0:	bd10      	pop	{r4, pc}
 800e4b2:	5ccc      	ldrb	r4, [r1, r3]
 800e4b4:	54c4      	strb	r4, [r0, r3]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d1fa      	bne.n	800e4b2 <memmove+0x1a>
 800e4bc:	e7f8      	b.n	800e4b0 <memmove+0x18>
	...

0800e4c0 <__malloc_lock>:
 800e4c0:	b510      	push	{r4, lr}
 800e4c2:	4802      	ldr	r0, [pc, #8]	; (800e4cc <__malloc_lock+0xc>)
 800e4c4:	f7fe f9bf 	bl	800c846 <__retarget_lock_acquire_recursive>
 800e4c8:	bd10      	pop	{r4, pc}
 800e4ca:	46c0      	nop			; (mov r8, r8)
 800e4cc:	2000064c 	.word	0x2000064c

0800e4d0 <__malloc_unlock>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	4802      	ldr	r0, [pc, #8]	; (800e4dc <__malloc_unlock+0xc>)
 800e4d4:	f7fe f9b8 	bl	800c848 <__retarget_lock_release_recursive>
 800e4d8:	bd10      	pop	{r4, pc}
 800e4da:	46c0      	nop			; (mov r8, r8)
 800e4dc:	2000064c 	.word	0x2000064c

0800e4e0 <_realloc_r>:
 800e4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4e2:	0007      	movs	r7, r0
 800e4e4:	000e      	movs	r6, r1
 800e4e6:	0014      	movs	r4, r2
 800e4e8:	2900      	cmp	r1, #0
 800e4ea:	d105      	bne.n	800e4f8 <_realloc_r+0x18>
 800e4ec:	0011      	movs	r1, r2
 800e4ee:	f7fe ffb7 	bl	800d460 <_malloc_r>
 800e4f2:	0005      	movs	r5, r0
 800e4f4:	0028      	movs	r0, r5
 800e4f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e4f8:	2a00      	cmp	r2, #0
 800e4fa:	d103      	bne.n	800e504 <_realloc_r+0x24>
 800e4fc:	f7fe ff44 	bl	800d388 <_free_r>
 800e500:	0025      	movs	r5, r4
 800e502:	e7f7      	b.n	800e4f4 <_realloc_r+0x14>
 800e504:	f000 f822 	bl	800e54c <_malloc_usable_size_r>
 800e508:	9001      	str	r0, [sp, #4]
 800e50a:	4284      	cmp	r4, r0
 800e50c:	d803      	bhi.n	800e516 <_realloc_r+0x36>
 800e50e:	0035      	movs	r5, r6
 800e510:	0843      	lsrs	r3, r0, #1
 800e512:	42a3      	cmp	r3, r4
 800e514:	d3ee      	bcc.n	800e4f4 <_realloc_r+0x14>
 800e516:	0021      	movs	r1, r4
 800e518:	0038      	movs	r0, r7
 800e51a:	f7fe ffa1 	bl	800d460 <_malloc_r>
 800e51e:	1e05      	subs	r5, r0, #0
 800e520:	d0e8      	beq.n	800e4f4 <_realloc_r+0x14>
 800e522:	9b01      	ldr	r3, [sp, #4]
 800e524:	0022      	movs	r2, r4
 800e526:	429c      	cmp	r4, r3
 800e528:	d900      	bls.n	800e52c <_realloc_r+0x4c>
 800e52a:	001a      	movs	r2, r3
 800e52c:	0031      	movs	r1, r6
 800e52e:	0028      	movs	r0, r5
 800e530:	f7fa fe1c 	bl	800916c <memcpy>
 800e534:	0031      	movs	r1, r6
 800e536:	0038      	movs	r0, r7
 800e538:	f7fe ff26 	bl	800d388 <_free_r>
 800e53c:	e7da      	b.n	800e4f4 <_realloc_r+0x14>

0800e53e <abort>:
 800e53e:	2006      	movs	r0, #6
 800e540:	b510      	push	{r4, lr}
 800e542:	f000 f835 	bl	800e5b0 <raise>
 800e546:	2001      	movs	r0, #1
 800e548:	f7f5 fc36 	bl	8003db8 <_exit>

0800e54c <_malloc_usable_size_r>:
 800e54c:	1f0b      	subs	r3, r1, #4
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	1f18      	subs	r0, r3, #4
 800e552:	2b00      	cmp	r3, #0
 800e554:	da01      	bge.n	800e55a <_malloc_usable_size_r+0xe>
 800e556:	580b      	ldr	r3, [r1, r0]
 800e558:	18c0      	adds	r0, r0, r3
 800e55a:	4770      	bx	lr

0800e55c <_raise_r>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	0004      	movs	r4, r0
 800e560:	000d      	movs	r5, r1
 800e562:	291f      	cmp	r1, #31
 800e564:	d904      	bls.n	800e570 <_raise_r+0x14>
 800e566:	2316      	movs	r3, #22
 800e568:	6003      	str	r3, [r0, #0]
 800e56a:	2001      	movs	r0, #1
 800e56c:	4240      	negs	r0, r0
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e572:	2b00      	cmp	r3, #0
 800e574:	d004      	beq.n	800e580 <_raise_r+0x24>
 800e576:	008a      	lsls	r2, r1, #2
 800e578:	189b      	adds	r3, r3, r2
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	d108      	bne.n	800e592 <_raise_r+0x36>
 800e580:	0020      	movs	r0, r4
 800e582:	f000 f831 	bl	800e5e8 <_getpid_r>
 800e586:	002a      	movs	r2, r5
 800e588:	0001      	movs	r1, r0
 800e58a:	0020      	movs	r0, r4
 800e58c:	f000 f81a 	bl	800e5c4 <_kill_r>
 800e590:	e7ed      	b.n	800e56e <_raise_r+0x12>
 800e592:	2000      	movs	r0, #0
 800e594:	2a01      	cmp	r2, #1
 800e596:	d0ea      	beq.n	800e56e <_raise_r+0x12>
 800e598:	1c51      	adds	r1, r2, #1
 800e59a:	d103      	bne.n	800e5a4 <_raise_r+0x48>
 800e59c:	2316      	movs	r3, #22
 800e59e:	3001      	adds	r0, #1
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	e7e4      	b.n	800e56e <_raise_r+0x12>
 800e5a4:	2400      	movs	r4, #0
 800e5a6:	0028      	movs	r0, r5
 800e5a8:	601c      	str	r4, [r3, #0]
 800e5aa:	4790      	blx	r2
 800e5ac:	0020      	movs	r0, r4
 800e5ae:	e7de      	b.n	800e56e <_raise_r+0x12>

0800e5b0 <raise>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	4b03      	ldr	r3, [pc, #12]	; (800e5c0 <raise+0x10>)
 800e5b4:	0001      	movs	r1, r0
 800e5b6:	6818      	ldr	r0, [r3, #0]
 800e5b8:	f7ff ffd0 	bl	800e55c <_raise_r>
 800e5bc:	bd10      	pop	{r4, pc}
 800e5be:	46c0      	nop			; (mov r8, r8)
 800e5c0:	20000038 	.word	0x20000038

0800e5c4 <_kill_r>:
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	b570      	push	{r4, r5, r6, lr}
 800e5c8:	4d06      	ldr	r5, [pc, #24]	; (800e5e4 <_kill_r+0x20>)
 800e5ca:	0004      	movs	r4, r0
 800e5cc:	0008      	movs	r0, r1
 800e5ce:	0011      	movs	r1, r2
 800e5d0:	602b      	str	r3, [r5, #0]
 800e5d2:	f7f5 fbe1 	bl	8003d98 <_kill>
 800e5d6:	1c43      	adds	r3, r0, #1
 800e5d8:	d103      	bne.n	800e5e2 <_kill_r+0x1e>
 800e5da:	682b      	ldr	r3, [r5, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d000      	beq.n	800e5e2 <_kill_r+0x1e>
 800e5e0:	6023      	str	r3, [r4, #0]
 800e5e2:	bd70      	pop	{r4, r5, r6, pc}
 800e5e4:	20000658 	.word	0x20000658

0800e5e8 <_getpid_r>:
 800e5e8:	b510      	push	{r4, lr}
 800e5ea:	f7f5 fbcf 	bl	8003d8c <_getpid>
 800e5ee:	bd10      	pop	{r4, pc}

0800e5f0 <_init>:
 800e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f2:	46c0      	nop			; (mov r8, r8)
 800e5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5f6:	bc08      	pop	{r3}
 800e5f8:	469e      	mov	lr, r3
 800e5fa:	4770      	bx	lr

0800e5fc <_fini>:
 800e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fe:	46c0      	nop			; (mov r8, r8)
 800e600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e602:	bc08      	pop	{r3}
 800e604:	469e      	mov	lr, r3
 800e606:	4770      	bx	lr
