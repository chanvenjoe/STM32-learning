
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800e7a0  0800e7a0  0000f7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed24  0800ed24  00010214  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed24  0800ed24  00010214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed24  0800ed24  00010214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed24  0800ed24  0000fd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed28  0800ed28  0000fd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800ed2c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000214  0800ef40  00010214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800ef40  000107ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110f1  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2f  00000000  00000000  0002132d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00023f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b98  00000000  00000000  00024e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045e5  00000000  00000000  000259e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153b4  00000000  00000000  00029fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c663  00000000  00000000  0003f379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab9dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  000aba20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000b06bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e784 	.word	0x0800e784

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	0800e784 	.word	0x0800e784

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fb0b 	bl	8001a6c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fa4b 	bl	80018fc <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fafd 	bl	8001a6c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faf3 	bl	8001a6c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa75 	bl	8001984 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fa6b 	bl	8001984 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f002 f9c3 	bl	800285c <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fdfe 	bl	80020e0 <__aeabi_dsub>
 80004e4:	f002 f9ba 	bl	800285c <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	2200      	movs	r2, #0
 80004fc:	2300      	movs	r3, #0
 80004fe:	0004      	movs	r4, r0
 8000500:	000d      	movs	r5, r1
 8000502:	f7ff ffb3 	bl	800046c <__aeabi_dcmplt>
 8000506:	2800      	cmp	r0, #0
 8000508:	d108      	bne.n	800051c <__aeabi_d2lz+0x24>
 800050a:	0020      	movs	r0, r4
 800050c:	0029      	movs	r1, r5
 800050e:	f000 f80f 	bl	8000530 <__aeabi_d2ulz>
 8000512:	0002      	movs	r2, r0
 8000514:	000b      	movs	r3, r1
 8000516:	0010      	movs	r0, r2
 8000518:	0019      	movs	r1, r3
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	061b      	lsls	r3, r3, #24
 8000520:	18e9      	adds	r1, r5, r3
 8000522:	0020      	movs	r0, r4
 8000524:	f000 f804 	bl	8000530 <__aeabi_d2ulz>
 8000528:	2300      	movs	r3, #0
 800052a:	4242      	negs	r2, r0
 800052c:	418b      	sbcs	r3, r1
 800052e:	e7f2      	b.n	8000516 <__aeabi_d2lz+0x1e>

08000530 <__aeabi_d2ulz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <__aeabi_d2ulz+0x34>)
 8000536:	000d      	movs	r5, r1
 8000538:	0004      	movs	r4, r0
 800053a:	f001 fb09 	bl	8001b50 <__aeabi_dmul>
 800053e:	f7ff ffbd 	bl	80004bc <__aeabi_d2uiz>
 8000542:	0006      	movs	r6, r0
 8000544:	f002 f9f4 	bl	8002930 <__aeabi_ui2d>
 8000548:	2200      	movs	r2, #0
 800054a:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <__aeabi_d2ulz+0x38>)
 800054c:	f001 fb00 	bl	8001b50 <__aeabi_dmul>
 8000550:	0002      	movs	r2, r0
 8000552:	000b      	movs	r3, r1
 8000554:	0020      	movs	r0, r4
 8000556:	0029      	movs	r1, r5
 8000558:	f001 fdc2 	bl	80020e0 <__aeabi_dsub>
 800055c:	f7ff ffae 	bl	80004bc <__aeabi_d2uiz>
 8000560:	0031      	movs	r1, r6
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	3df00000 	.word	0x3df00000
 8000568:	41f00000 	.word	0x41f00000

0800056c <__aeabi_l2d>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0006      	movs	r6, r0
 8000570:	0008      	movs	r0, r1
 8000572:	f002 f9af 	bl	80028d4 <__aeabi_i2d>
 8000576:	2200      	movs	r2, #0
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <__aeabi_l2d+0x28>)
 800057a:	f001 fae9 	bl	8001b50 <__aeabi_dmul>
 800057e:	000d      	movs	r5, r1
 8000580:	0004      	movs	r4, r0
 8000582:	0030      	movs	r0, r6
 8000584:	f002 f9d4 	bl	8002930 <__aeabi_ui2d>
 8000588:	002b      	movs	r3, r5
 800058a:	0022      	movs	r2, r4
 800058c:	f000 fb38 	bl	8000c00 <__aeabi_dadd>
 8000590:	bd70      	pop	{r4, r5, r6, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_fadd>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	46ce      	mov	lr, r9
 800059c:	4647      	mov	r7, r8
 800059e:	0243      	lsls	r3, r0, #9
 80005a0:	0a5a      	lsrs	r2, r3, #9
 80005a2:	024e      	lsls	r6, r1, #9
 80005a4:	0045      	lsls	r5, r0, #1
 80005a6:	0fc4      	lsrs	r4, r0, #31
 80005a8:	0048      	lsls	r0, r1, #1
 80005aa:	4691      	mov	r9, r2
 80005ac:	0e2d      	lsrs	r5, r5, #24
 80005ae:	0a72      	lsrs	r2, r6, #9
 80005b0:	0e00      	lsrs	r0, r0, #24
 80005b2:	4694      	mov	ip, r2
 80005b4:	b580      	push	{r7, lr}
 80005b6:	099b      	lsrs	r3, r3, #6
 80005b8:	0fc9      	lsrs	r1, r1, #31
 80005ba:	09b6      	lsrs	r6, r6, #6
 80005bc:	1a2a      	subs	r2, r5, r0
 80005be:	428c      	cmp	r4, r1
 80005c0:	d021      	beq.n	8000606 <__aeabi_fadd+0x6e>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	dd0d      	ble.n	80005e2 <__aeabi_fadd+0x4a>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d12d      	bne.n	8000626 <__aeabi_fadd+0x8e>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x38>
 80005ce:	e08d      	b.n	80006ec <__aeabi_fadd+0x154>
 80005d0:	1e51      	subs	r1, r2, #1
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x40>
 80005d6:	e11d      	b.n	8000814 <__aeabi_fadd+0x27c>
 80005d8:	2aff      	cmp	r2, #255	@ 0xff
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x46>
 80005dc:	e0ab      	b.n	8000736 <__aeabi_fadd+0x19e>
 80005de:	000a      	movs	r2, r1
 80005e0:	e027      	b.n	8000632 <__aeabi_fadd+0x9a>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d04d      	beq.n	8000682 <__aeabi_fadd+0xea>
 80005e6:	1b42      	subs	r2, r0, r5
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d000      	beq.n	80005ee <__aeabi_fadd+0x56>
 80005ec:	e0cc      	b.n	8000788 <__aeabi_fadd+0x1f0>
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0x5c>
 80005f2:	e079      	b.n	80006e8 <__aeabi_fadd+0x150>
 80005f4:	1e54      	subs	r4, r2, #1
 80005f6:	2a01      	cmp	r2, #1
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x64>
 80005fa:	e128      	b.n	800084e <__aeabi_fadd+0x2b6>
 80005fc:	2aff      	cmp	r2, #255	@ 0xff
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0x6a>
 8000600:	e097      	b.n	8000732 <__aeabi_fadd+0x19a>
 8000602:	0022      	movs	r2, r4
 8000604:	e0c5      	b.n	8000792 <__aeabi_fadd+0x1fa>
 8000606:	2a00      	cmp	r2, #0
 8000608:	dc00      	bgt.n	800060c <__aeabi_fadd+0x74>
 800060a:	e096      	b.n	800073a <__aeabi_fadd+0x1a2>
 800060c:	2800      	cmp	r0, #0
 800060e:	d04f      	beq.n	80006b0 <__aeabi_fadd+0x118>
 8000610:	2dff      	cmp	r5, #255	@ 0xff
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x7e>
 8000614:	e08f      	b.n	8000736 <__aeabi_fadd+0x19e>
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	04c9      	lsls	r1, r1, #19
 800061a:	430e      	orrs	r6, r1
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd51      	ble.n	80006c4 <__aeabi_fadd+0x12c>
 8000620:	002a      	movs	r2, r5
 8000622:	3301      	adds	r3, #1
 8000624:	e018      	b.n	8000658 <__aeabi_fadd+0xc0>
 8000626:	2dff      	cmp	r5, #255	@ 0xff
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x94>
 800062a:	e084      	b.n	8000736 <__aeabi_fadd+0x19e>
 800062c:	2180      	movs	r1, #128	@ 0x80
 800062e:	04c9      	lsls	r1, r1, #19
 8000630:	430e      	orrs	r6, r1
 8000632:	2101      	movs	r1, #1
 8000634:	2a1b      	cmp	r2, #27
 8000636:	dc08      	bgt.n	800064a <__aeabi_fadd+0xb2>
 8000638:	0031      	movs	r1, r6
 800063a:	2020      	movs	r0, #32
 800063c:	40d1      	lsrs	r1, r2
 800063e:	1a82      	subs	r2, r0, r2
 8000640:	4096      	lsls	r6, r2
 8000642:	0032      	movs	r2, r6
 8000644:	1e50      	subs	r0, r2, #1
 8000646:	4182      	sbcs	r2, r0
 8000648:	4311      	orrs	r1, r2
 800064a:	1a5b      	subs	r3, r3, r1
 800064c:	015a      	lsls	r2, r3, #5
 800064e:	d459      	bmi.n	8000704 <__aeabi_fadd+0x16c>
 8000650:	2107      	movs	r1, #7
 8000652:	002a      	movs	r2, r5
 8000654:	4019      	ands	r1, r3
 8000656:	d049      	beq.n	80006ec <__aeabi_fadd+0x154>
 8000658:	210f      	movs	r1, #15
 800065a:	4019      	ands	r1, r3
 800065c:	2904      	cmp	r1, #4
 800065e:	d000      	beq.n	8000662 <__aeabi_fadd+0xca>
 8000660:	3304      	adds	r3, #4
 8000662:	0159      	lsls	r1, r3, #5
 8000664:	d542      	bpl.n	80006ec <__aeabi_fadd+0x154>
 8000666:	1c50      	adds	r0, r2, #1
 8000668:	2afe      	cmp	r2, #254	@ 0xfe
 800066a:	d03a      	beq.n	80006e2 <__aeabi_fadd+0x14a>
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	b2c0      	uxtb	r0, r0
 8000670:	0a5b      	lsrs	r3, r3, #9
 8000672:	05c0      	lsls	r0, r0, #23
 8000674:	4318      	orrs	r0, r3
 8000676:	07e4      	lsls	r4, r4, #31
 8000678:	4320      	orrs	r0, r4
 800067a:	bcc0      	pop	{r6, r7}
 800067c:	46b9      	mov	r9, r7
 800067e:	46b0      	mov	r8, r6
 8000680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000682:	20fe      	movs	r0, #254	@ 0xfe
 8000684:	4680      	mov	r8, r0
 8000686:	1c6f      	adds	r7, r5, #1
 8000688:	0038      	movs	r0, r7
 800068a:	4647      	mov	r7, r8
 800068c:	4207      	tst	r7, r0
 800068e:	d000      	beq.n	8000692 <__aeabi_fadd+0xfa>
 8000690:	e08e      	b.n	80007b0 <__aeabi_fadd+0x218>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x100>
 8000696:	e0b4      	b.n	8000802 <__aeabi_fadd+0x26a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x106>
 800069c:	e0db      	b.n	8000856 <__aeabi_fadd+0x2be>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d06c      	beq.n	800077c <__aeabi_fadd+0x1e4>
 80006a2:	1b98      	subs	r0, r3, r6
 80006a4:	0145      	lsls	r5, r0, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x112>
 80006a8:	e0f7      	b.n	800089a <__aeabi_fadd+0x302>
 80006aa:	000c      	movs	r4, r1
 80006ac:	1af3      	subs	r3, r6, r3
 80006ae:	e03d      	b.n	800072c <__aeabi_fadd+0x194>
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d01b      	beq.n	80006ec <__aeabi_fadd+0x154>
 80006b4:	1e51      	subs	r1, r2, #1
 80006b6:	2a01      	cmp	r2, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x124>
 80006ba:	e082      	b.n	80007c2 <__aeabi_fadd+0x22a>
 80006bc:	2aff      	cmp	r2, #255	@ 0xff
 80006be:	d03a      	beq.n	8000736 <__aeabi_fadd+0x19e>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7ab      	b.n	800061c <__aeabi_fadd+0x84>
 80006c4:	0031      	movs	r1, r6
 80006c6:	2020      	movs	r0, #32
 80006c8:	40d1      	lsrs	r1, r2
 80006ca:	1a82      	subs	r2, r0, r2
 80006cc:	4096      	lsls	r6, r2
 80006ce:	0032      	movs	r2, r6
 80006d0:	1e50      	subs	r0, r2, #1
 80006d2:	4182      	sbcs	r2, r0
 80006d4:	430a      	orrs	r2, r1
 80006d6:	189b      	adds	r3, r3, r2
 80006d8:	015a      	lsls	r2, r3, #5
 80006da:	d5b9      	bpl.n	8000650 <__aeabi_fadd+0xb8>
 80006dc:	1c6a      	adds	r2, r5, #1
 80006de:	2dfe      	cmp	r5, #254	@ 0xfe
 80006e0:	d175      	bne.n	80007ce <__aeabi_fadd+0x236>
 80006e2:	20ff      	movs	r0, #255	@ 0xff
 80006e4:	2300      	movs	r3, #0
 80006e6:	e7c4      	b.n	8000672 <__aeabi_fadd+0xda>
 80006e8:	000c      	movs	r4, r1
 80006ea:	0033      	movs	r3, r6
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d146      	bne.n	8000780 <__aeabi_fadd+0x1e8>
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14a>
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	03d2      	lsls	r2, r2, #15
 80006fa:	4313      	orrs	r3, r2
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	20ff      	movs	r0, #255	@ 0xff
 8000700:	0a5b      	lsrs	r3, r3, #9
 8000702:	e7b6      	b.n	8000672 <__aeabi_fadd+0xda>
 8000704:	019f      	lsls	r7, r3, #6
 8000706:	09bf      	lsrs	r7, r7, #6
 8000708:	0038      	movs	r0, r7
 800070a:	f002 f9b9 	bl	8002a80 <__clzsi2>
 800070e:	3805      	subs	r0, #5
 8000710:	4087      	lsls	r7, r0
 8000712:	4285      	cmp	r5, r0
 8000714:	dc24      	bgt.n	8000760 <__aeabi_fadd+0x1c8>
 8000716:	003b      	movs	r3, r7
 8000718:	2120      	movs	r1, #32
 800071a:	1b42      	subs	r2, r0, r5
 800071c:	3201      	adds	r2, #1
 800071e:	40d3      	lsrs	r3, r2
 8000720:	1a8a      	subs	r2, r1, r2
 8000722:	4097      	lsls	r7, r2
 8000724:	1e7a      	subs	r2, r7, #1
 8000726:	4197      	sbcs	r7, r2
 8000728:	2200      	movs	r2, #0
 800072a:	433b      	orrs	r3, r7
 800072c:	0759      	lsls	r1, r3, #29
 800072e:	d193      	bne.n	8000658 <__aeabi_fadd+0xc0>
 8000730:	e797      	b.n	8000662 <__aeabi_fadd+0xca>
 8000732:	000c      	movs	r4, r1
 8000734:	0033      	movs	r3, r6
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	e7db      	b.n	80006f2 <__aeabi_fadd+0x15a>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d014      	beq.n	8000768 <__aeabi_fadd+0x1d0>
 800073e:	1b42      	subs	r2, r0, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d14b      	bne.n	80007dc <__aeabi_fadd+0x244>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0d0      	beq.n	80006ea <__aeabi_fadd+0x152>
 8000748:	1e51      	subs	r1, r2, #1
 800074a:	2a01      	cmp	r2, #1
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x1b8>
 800074e:	e09e      	b.n	800088e <__aeabi_fadd+0x2f6>
 8000750:	2aff      	cmp	r2, #255	@ 0xff
 8000752:	d0ef      	beq.n	8000734 <__aeabi_fadd+0x19c>
 8000754:	000a      	movs	r2, r1
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dd5f      	ble.n	800081a <__aeabi_fadd+0x282>
 800075a:	0002      	movs	r2, r0
 800075c:	1c73      	adds	r3, r6, #1
 800075e:	e77b      	b.n	8000658 <__aeabi_fadd+0xc0>
 8000760:	4b50      	ldr	r3, [pc, #320]	@ (80008a4 <__aeabi_fadd+0x30c>)
 8000762:	1a2a      	subs	r2, r5, r0
 8000764:	403b      	ands	r3, r7
 8000766:	e7e1      	b.n	800072c <__aeabi_fadd+0x194>
 8000768:	21fe      	movs	r1, #254	@ 0xfe
 800076a:	1c6a      	adds	r2, r5, #1
 800076c:	4211      	tst	r1, r2
 800076e:	d13b      	bne.n	80007e8 <__aeabi_fadd+0x250>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15d      	bne.n	8000830 <__aeabi_fadd+0x298>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d07f      	beq.n	8000878 <__aeabi_fadd+0x2e0>
 8000778:	2e00      	cmp	r6, #0
 800077a:	d17f      	bne.n	800087c <__aeabi_fadd+0x2e4>
 800077c:	2200      	movs	r2, #0
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	025b      	lsls	r3, r3, #9
 8000782:	0a5b      	lsrs	r3, r3, #9
 8000784:	b2d0      	uxtb	r0, r2
 8000786:	e774      	b.n	8000672 <__aeabi_fadd+0xda>
 8000788:	28ff      	cmp	r0, #255	@ 0xff
 800078a:	d0d2      	beq.n	8000732 <__aeabi_fadd+0x19a>
 800078c:	2480      	movs	r4, #128	@ 0x80
 800078e:	04e4      	lsls	r4, r4, #19
 8000790:	4323      	orrs	r3, r4
 8000792:	2401      	movs	r4, #1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dc07      	bgt.n	80007a8 <__aeabi_fadd+0x210>
 8000798:	001c      	movs	r4, r3
 800079a:	2520      	movs	r5, #32
 800079c:	40d4      	lsrs	r4, r2
 800079e:	1aaa      	subs	r2, r5, r2
 80007a0:	4093      	lsls	r3, r2
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	4193      	sbcs	r3, r2
 80007a6:	431c      	orrs	r4, r3
 80007a8:	1b33      	subs	r3, r6, r4
 80007aa:	0005      	movs	r5, r0
 80007ac:	000c      	movs	r4, r1
 80007ae:	e74d      	b.n	800064c <__aeabi_fadd+0xb4>
 80007b0:	1b9f      	subs	r7, r3, r6
 80007b2:	017a      	lsls	r2, r7, #5
 80007b4:	d422      	bmi.n	80007fc <__aeabi_fadd+0x264>
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d1a6      	bne.n	8000708 <__aeabi_fadd+0x170>
 80007ba:	2400      	movs	r4, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	2300      	movs	r3, #0
 80007c0:	e757      	b.n	8000672 <__aeabi_fadd+0xda>
 80007c2:	199b      	adds	r3, r3, r6
 80007c4:	2501      	movs	r5, #1
 80007c6:	3201      	adds	r2, #1
 80007c8:	0159      	lsls	r1, r3, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x236>
 80007cc:	e740      	b.n	8000650 <__aeabi_fadd+0xb8>
 80007ce:	2101      	movs	r1, #1
 80007d0:	4835      	ldr	r0, [pc, #212]	@ (80008a8 <__aeabi_fadd+0x310>)
 80007d2:	4019      	ands	r1, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	4003      	ands	r3, r0
 80007d8:	430b      	orrs	r3, r1
 80007da:	e7a7      	b.n	800072c <__aeabi_fadd+0x194>
 80007dc:	28ff      	cmp	r0, #255	@ 0xff
 80007de:	d0a9      	beq.n	8000734 <__aeabi_fadd+0x19c>
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	04c9      	lsls	r1, r1, #19
 80007e4:	430b      	orrs	r3, r1
 80007e6:	e7b6      	b.n	8000756 <__aeabi_fadd+0x1be>
 80007e8:	2aff      	cmp	r2, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x256>
 80007ec:	e779      	b.n	80006e2 <__aeabi_fadd+0x14a>
 80007ee:	199b      	adds	r3, r3, r6
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	0759      	lsls	r1, r3, #29
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x260>
 80007f6:	e72f      	b.n	8000658 <__aeabi_fadd+0xc0>
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	e7c1      	b.n	8000780 <__aeabi_fadd+0x1e8>
 80007fc:	000c      	movs	r4, r1
 80007fe:	1af7      	subs	r7, r6, r3
 8000800:	e782      	b.n	8000708 <__aeabi_fadd+0x170>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d12c      	bne.n	8000860 <__aeabi_fadd+0x2c8>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d193      	bne.n	8000732 <__aeabi_fadd+0x19a>
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	2400      	movs	r4, #0
 800080e:	20ff      	movs	r0, #255	@ 0xff
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	e72e      	b.n	8000672 <__aeabi_fadd+0xda>
 8000814:	2501      	movs	r5, #1
 8000816:	1b9b      	subs	r3, r3, r6
 8000818:	e718      	b.n	800064c <__aeabi_fadd+0xb4>
 800081a:	0019      	movs	r1, r3
 800081c:	2520      	movs	r5, #32
 800081e:	40d1      	lsrs	r1, r2
 8000820:	1aaa      	subs	r2, r5, r2
 8000822:	4093      	lsls	r3, r2
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4193      	sbcs	r3, r2
 8000828:	430b      	orrs	r3, r1
 800082a:	0005      	movs	r5, r0
 800082c:	199b      	adds	r3, r3, r6
 800082e:	e753      	b.n	80006d8 <__aeabi_fadd+0x140>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0x29e>
 8000834:	e77e      	b.n	8000734 <__aeabi_fadd+0x19c>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2a4>
 800083a:	e77c      	b.n	8000736 <__aeabi_fadd+0x19e>
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	03d2      	lsls	r2, r2, #15
 8000840:	4591      	cmp	r9, r2
 8000842:	d302      	bcc.n	800084a <__aeabi_fadd+0x2b2>
 8000844:	4594      	cmp	ip, r2
 8000846:	d200      	bcs.n	800084a <__aeabi_fadd+0x2b2>
 8000848:	0033      	movs	r3, r6
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e753      	b.n	80006f6 <__aeabi_fadd+0x15e>
 800084e:	000c      	movs	r4, r1
 8000850:	1af3      	subs	r3, r6, r3
 8000852:	3501      	adds	r5, #1
 8000854:	e6fa      	b.n	800064c <__aeabi_fadd+0xb4>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d0af      	beq.n	80007ba <__aeabi_fadd+0x222>
 800085a:	000c      	movs	r4, r1
 800085c:	0033      	movs	r3, r6
 800085e:	e78d      	b.n	800077c <__aeabi_fadd+0x1e4>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x2ce>
 8000864:	e767      	b.n	8000736 <__aeabi_fadd+0x19e>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	03d2      	lsls	r2, r2, #15
 800086a:	4591      	cmp	r9, r2
 800086c:	d3ed      	bcc.n	800084a <__aeabi_fadd+0x2b2>
 800086e:	4594      	cmp	ip, r2
 8000870:	d2eb      	bcs.n	800084a <__aeabi_fadd+0x2b2>
 8000872:	000c      	movs	r4, r1
 8000874:	0033      	movs	r3, r6
 8000876:	e7e8      	b.n	800084a <__aeabi_fadd+0x2b2>
 8000878:	0033      	movs	r3, r6
 800087a:	e77f      	b.n	800077c <__aeabi_fadd+0x1e4>
 800087c:	199b      	adds	r3, r3, r6
 800087e:	2200      	movs	r2, #0
 8000880:	0159      	lsls	r1, r3, #5
 8000882:	d5b9      	bpl.n	80007f8 <__aeabi_fadd+0x260>
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <__aeabi_fadd+0x30c>)
 8000886:	4013      	ands	r3, r2
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	2201      	movs	r2, #1
 800088c:	e778      	b.n	8000780 <__aeabi_fadd+0x1e8>
 800088e:	199b      	adds	r3, r3, r6
 8000890:	3201      	adds	r2, #1
 8000892:	3501      	adds	r5, #1
 8000894:	0159      	lsls	r1, r3, #5
 8000896:	d49a      	bmi.n	80007ce <__aeabi_fadd+0x236>
 8000898:	e6da      	b.n	8000650 <__aeabi_fadd+0xb8>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d08d      	beq.n	80007ba <__aeabi_fadd+0x222>
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	e76e      	b.n	8000780 <__aeabi_fadd+0x1e8>
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	fbffffff 	.word	0xfbffffff
 80008a8:	7dffffff 	.word	0x7dffffff

080008ac <__aeabi_fmul>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0243      	lsls	r3, r0, #9
 80008b6:	0a5b      	lsrs	r3, r3, #9
 80008b8:	0045      	lsls	r5, r0, #1
 80008ba:	b5c0      	push	{r6, r7, lr}
 80008bc:	4699      	mov	r9, r3
 80008be:	1c0f      	adds	r7, r1, #0
 80008c0:	0e2d      	lsrs	r5, r5, #24
 80008c2:	0fc6      	lsrs	r6, r0, #31
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fmul+0x1e>
 80008c8:	e088      	b.n	80009dc <__aeabi_fmul+0x130>
 80008ca:	2dff      	cmp	r5, #255	@ 0xff
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fmul+0x24>
 80008ce:	e08d      	b.n	80009ec <__aeabi_fmul+0x140>
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	431a      	orrs	r2, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	4691      	mov	r9, r2
 80008dc:	4698      	mov	r8, r3
 80008de:	469a      	mov	sl, r3
 80008e0:	3d7f      	subs	r5, #127	@ 0x7f
 80008e2:	027c      	lsls	r4, r7, #9
 80008e4:	007b      	lsls	r3, r7, #1
 80008e6:	0a64      	lsrs	r4, r4, #9
 80008e8:	0e1b      	lsrs	r3, r3, #24
 80008ea:	0fff      	lsrs	r7, r7, #31
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fmul+0x116>
 80008f0:	2bff      	cmp	r3, #255	@ 0xff
 80008f2:	d021      	beq.n	8000938 <__aeabi_fmul+0x8c>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	00e4      	lsls	r4, r4, #3
 80008f8:	04d2      	lsls	r2, r2, #19
 80008fa:	4314      	orrs	r4, r2
 80008fc:	4642      	mov	r2, r8
 80008fe:	3b7f      	subs	r3, #127	@ 0x7f
 8000900:	195b      	adds	r3, r3, r5
 8000902:	2100      	movs	r1, #0
 8000904:	1c5d      	adds	r5, r3, #1
 8000906:	2a0a      	cmp	r2, #10
 8000908:	dc2e      	bgt.n	8000968 <__aeabi_fmul+0xbc>
 800090a:	407e      	eors	r6, r7
 800090c:	4642      	mov	r2, r8
 800090e:	2a02      	cmp	r2, #2
 8000910:	dc23      	bgt.n	800095a <__aeabi_fmul+0xae>
 8000912:	3a01      	subs	r2, #1
 8000914:	2a01      	cmp	r2, #1
 8000916:	d900      	bls.n	800091a <__aeabi_fmul+0x6e>
 8000918:	e0bd      	b.n	8000a96 <__aeabi_fmul+0x1ea>
 800091a:	2902      	cmp	r1, #2
 800091c:	d06e      	beq.n	80009fc <__aeabi_fmul+0x150>
 800091e:	2901      	cmp	r1, #1
 8000920:	d12c      	bne.n	800097c <__aeabi_fmul+0xd0>
 8000922:	2000      	movs	r0, #0
 8000924:	2200      	movs	r2, #0
 8000926:	05c0      	lsls	r0, r0, #23
 8000928:	07f6      	lsls	r6, r6, #31
 800092a:	4310      	orrs	r0, r2
 800092c:	4330      	orrs	r0, r6
 800092e:	bce0      	pop	{r5, r6, r7}
 8000930:	46ba      	mov	sl, r7
 8000932:	46b1      	mov	r9, r6
 8000934:	46a8      	mov	r8, r5
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	002b      	movs	r3, r5
 800093a:	33ff      	adds	r3, #255	@ 0xff
 800093c:	2c00      	cmp	r4, #0
 800093e:	d065      	beq.n	8000a0c <__aeabi_fmul+0x160>
 8000940:	2203      	movs	r2, #3
 8000942:	4641      	mov	r1, r8
 8000944:	4311      	orrs	r1, r2
 8000946:	0032      	movs	r2, r6
 8000948:	3501      	adds	r5, #1
 800094a:	4688      	mov	r8, r1
 800094c:	407a      	eors	r2, r7
 800094e:	35ff      	adds	r5, #255	@ 0xff
 8000950:	290a      	cmp	r1, #10
 8000952:	dd00      	ble.n	8000956 <__aeabi_fmul+0xaa>
 8000954:	e0d8      	b.n	8000b08 <__aeabi_fmul+0x25c>
 8000956:	0016      	movs	r6, r2
 8000958:	2103      	movs	r1, #3
 800095a:	4640      	mov	r0, r8
 800095c:	2201      	movs	r2, #1
 800095e:	4082      	lsls	r2, r0
 8000960:	20a6      	movs	r0, #166	@ 0xa6
 8000962:	00c0      	lsls	r0, r0, #3
 8000964:	4202      	tst	r2, r0
 8000966:	d020      	beq.n	80009aa <__aeabi_fmul+0xfe>
 8000968:	4653      	mov	r3, sl
 800096a:	2b02      	cmp	r3, #2
 800096c:	d046      	beq.n	80009fc <__aeabi_fmul+0x150>
 800096e:	2b03      	cmp	r3, #3
 8000970:	d100      	bne.n	8000974 <__aeabi_fmul+0xc8>
 8000972:	e0bb      	b.n	8000aec <__aeabi_fmul+0x240>
 8000974:	4651      	mov	r1, sl
 8000976:	464c      	mov	r4, r9
 8000978:	2901      	cmp	r1, #1
 800097a:	d0d2      	beq.n	8000922 <__aeabi_fmul+0x76>
 800097c:	002b      	movs	r3, r5
 800097e:	337f      	adds	r3, #127	@ 0x7f
 8000980:	2b00      	cmp	r3, #0
 8000982:	dd70      	ble.n	8000a66 <__aeabi_fmul+0x1ba>
 8000984:	0762      	lsls	r2, r4, #29
 8000986:	d004      	beq.n	8000992 <__aeabi_fmul+0xe6>
 8000988:	220f      	movs	r2, #15
 800098a:	4022      	ands	r2, r4
 800098c:	2a04      	cmp	r2, #4
 800098e:	d000      	beq.n	8000992 <__aeabi_fmul+0xe6>
 8000990:	3404      	adds	r4, #4
 8000992:	0122      	lsls	r2, r4, #4
 8000994:	d503      	bpl.n	800099e <__aeabi_fmul+0xf2>
 8000996:	4b63      	ldr	r3, [pc, #396]	@ (8000b24 <__aeabi_fmul+0x278>)
 8000998:	401c      	ands	r4, r3
 800099a:	002b      	movs	r3, r5
 800099c:	3380      	adds	r3, #128	@ 0x80
 800099e:	2bfe      	cmp	r3, #254	@ 0xfe
 80009a0:	dc2c      	bgt.n	80009fc <__aeabi_fmul+0x150>
 80009a2:	01a2      	lsls	r2, r4, #6
 80009a4:	0a52      	lsrs	r2, r2, #9
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	e7bd      	b.n	8000926 <__aeabi_fmul+0x7a>
 80009aa:	2090      	movs	r0, #144	@ 0x90
 80009ac:	0080      	lsls	r0, r0, #2
 80009ae:	4202      	tst	r2, r0
 80009b0:	d127      	bne.n	8000a02 <__aeabi_fmul+0x156>
 80009b2:	38b9      	subs	r0, #185	@ 0xb9
 80009b4:	38ff      	subs	r0, #255	@ 0xff
 80009b6:	4210      	tst	r0, r2
 80009b8:	d06d      	beq.n	8000a96 <__aeabi_fmul+0x1ea>
 80009ba:	003e      	movs	r6, r7
 80009bc:	46a1      	mov	r9, r4
 80009be:	468a      	mov	sl, r1
 80009c0:	e7d2      	b.n	8000968 <__aeabi_fmul+0xbc>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d141      	bne.n	8000a4a <__aeabi_fmul+0x19e>
 80009c6:	2301      	movs	r3, #1
 80009c8:	4642      	mov	r2, r8
 80009ca:	431a      	orrs	r2, r3
 80009cc:	4690      	mov	r8, r2
 80009ce:	002b      	movs	r3, r5
 80009d0:	4642      	mov	r2, r8
 80009d2:	2101      	movs	r1, #1
 80009d4:	1c5d      	adds	r5, r3, #1
 80009d6:	2a0a      	cmp	r2, #10
 80009d8:	dd97      	ble.n	800090a <__aeabi_fmul+0x5e>
 80009da:	e7c5      	b.n	8000968 <__aeabi_fmul+0xbc>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d126      	bne.n	8000a2e <__aeabi_fmul+0x182>
 80009e0:	2304      	movs	r3, #4
 80009e2:	4698      	mov	r8, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2500      	movs	r5, #0
 80009e8:	469a      	mov	sl, r3
 80009ea:	e77a      	b.n	80008e2 <__aeabi_fmul+0x36>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d118      	bne.n	8000a22 <__aeabi_fmul+0x176>
 80009f0:	2308      	movs	r3, #8
 80009f2:	4698      	mov	r8, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	25ff      	movs	r5, #255	@ 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e772      	b.n	80008e2 <__aeabi_fmul+0x36>
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	2200      	movs	r2, #0
 8000a00:	e791      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	@ 0xff
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	e78c      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a0c:	4641      	mov	r1, r8
 8000a0e:	2202      	movs	r2, #2
 8000a10:	3501      	adds	r5, #1
 8000a12:	4311      	orrs	r1, r2
 8000a14:	4688      	mov	r8, r1
 8000a16:	35ff      	adds	r5, #255	@ 0xff
 8000a18:	290a      	cmp	r1, #10
 8000a1a:	dca5      	bgt.n	8000968 <__aeabi_fmul+0xbc>
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	407e      	eors	r6, r7
 8000a20:	e774      	b.n	800090c <__aeabi_fmul+0x60>
 8000a22:	230c      	movs	r3, #12
 8000a24:	4698      	mov	r8, r3
 8000a26:	3b09      	subs	r3, #9
 8000a28:	25ff      	movs	r5, #255	@ 0xff
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	e759      	b.n	80008e2 <__aeabi_fmul+0x36>
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f826 	bl	8002a80 <__clzsi2>
 8000a34:	464a      	mov	r2, r9
 8000a36:	1f43      	subs	r3, r0, #5
 8000a38:	2576      	movs	r5, #118	@ 0x76
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	426d      	negs	r5, r5
 8000a40:	4691      	mov	r9, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	469a      	mov	sl, r3
 8000a46:	1a2d      	subs	r5, r5, r0
 8000a48:	e74b      	b.n	80008e2 <__aeabi_fmul+0x36>
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f002 f818 	bl	8002a80 <__clzsi2>
 8000a50:	4642      	mov	r2, r8
 8000a52:	1f43      	subs	r3, r0, #5
 8000a54:	409c      	lsls	r4, r3
 8000a56:	1a2b      	subs	r3, r5, r0
 8000a58:	3b76      	subs	r3, #118	@ 0x76
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	1c5d      	adds	r5, r3, #1
 8000a5e:	2a0a      	cmp	r2, #10
 8000a60:	dc00      	bgt.n	8000a64 <__aeabi_fmul+0x1b8>
 8000a62:	e752      	b.n	800090a <__aeabi_fmul+0x5e>
 8000a64:	e780      	b.n	8000968 <__aeabi_fmul+0xbc>
 8000a66:	2201      	movs	r2, #1
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b1b      	cmp	r3, #27
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x1c4>
 8000a6e:	e758      	b.n	8000922 <__aeabi_fmul+0x76>
 8000a70:	359e      	adds	r5, #158	@ 0x9e
 8000a72:	0022      	movs	r2, r4
 8000a74:	40ac      	lsls	r4, r5
 8000a76:	40da      	lsrs	r2, r3
 8000a78:	1e63      	subs	r3, r4, #1
 8000a7a:	419c      	sbcs	r4, r3
 8000a7c:	4322      	orrs	r2, r4
 8000a7e:	0753      	lsls	r3, r2, #29
 8000a80:	d004      	beq.n	8000a8c <__aeabi_fmul+0x1e0>
 8000a82:	230f      	movs	r3, #15
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fmul+0x1e0>
 8000a8a:	3204      	adds	r2, #4
 8000a8c:	0153      	lsls	r3, r2, #5
 8000a8e:	d537      	bpl.n	8000b00 <__aeabi_fmul+0x254>
 8000a90:	2001      	movs	r0, #1
 8000a92:	2200      	movs	r2, #0
 8000a94:	e747      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	464a      	mov	r2, r9
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	0c24      	lsrs	r4, r4, #16
 8000a9e:	0027      	movs	r7, r4
 8000aa0:	0c10      	lsrs	r0, r2, #16
 8000aa2:	0412      	lsls	r2, r2, #16
 8000aa4:	0c12      	lsrs	r2, r2, #16
 8000aa6:	4344      	muls	r4, r0
 8000aa8:	4357      	muls	r7, r2
 8000aaa:	4348      	muls	r0, r1
 8000aac:	4351      	muls	r1, r2
 8000aae:	0c3a      	lsrs	r2, r7, #16
 8000ab0:	1909      	adds	r1, r1, r4
 8000ab2:	1852      	adds	r2, r2, r1
 8000ab4:	4294      	cmp	r4, r2
 8000ab6:	d903      	bls.n	8000ac0 <__aeabi_fmul+0x214>
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	0249      	lsls	r1, r1, #9
 8000abc:	468c      	mov	ip, r1
 8000abe:	4460      	add	r0, ip
 8000ac0:	043f      	lsls	r7, r7, #16
 8000ac2:	0411      	lsls	r1, r2, #16
 8000ac4:	0c3f      	lsrs	r7, r7, #16
 8000ac6:	19c9      	adds	r1, r1, r7
 8000ac8:	018c      	lsls	r4, r1, #6
 8000aca:	1e67      	subs	r7, r4, #1
 8000acc:	41bc      	sbcs	r4, r7
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	0e89      	lsrs	r1, r1, #26
 8000ad2:	1812      	adds	r2, r2, r0
 8000ad4:	430c      	orrs	r4, r1
 8000ad6:	0192      	lsls	r2, r2, #6
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	d50e      	bpl.n	8000afc <__aeabi_fmul+0x250>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	0862      	lsrs	r2, r4, #1
 8000ae2:	401c      	ands	r4, r3
 8000ae4:	4314      	orrs	r4, r2
 8000ae6:	e749      	b.n	800097c <__aeabi_fmul+0xd0>
 8000ae8:	003e      	movs	r6, r7
 8000aea:	46a1      	mov	r9, r4
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	464b      	mov	r3, r9
 8000af0:	03d2      	lsls	r2, r2, #15
 8000af2:	431a      	orrs	r2, r3
 8000af4:	0252      	lsls	r2, r2, #9
 8000af6:	20ff      	movs	r0, #255	@ 0xff
 8000af8:	0a52      	lsrs	r2, r2, #9
 8000afa:	e714      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000afc:	001d      	movs	r5, r3
 8000afe:	e73d      	b.n	800097c <__aeabi_fmul+0xd0>
 8000b00:	0192      	lsls	r2, r2, #6
 8000b02:	2000      	movs	r0, #0
 8000b04:	0a52      	lsrs	r2, r2, #9
 8000b06:	e70e      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000b08:	290f      	cmp	r1, #15
 8000b0a:	d1ed      	bne.n	8000ae8 <__aeabi_fmul+0x23c>
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	464b      	mov	r3, r9
 8000b10:	03d2      	lsls	r2, r2, #15
 8000b12:	4213      	tst	r3, r2
 8000b14:	d0ea      	beq.n	8000aec <__aeabi_fmul+0x240>
 8000b16:	4214      	tst	r4, r2
 8000b18:	d1e8      	bne.n	8000aec <__aeabi_fmul+0x240>
 8000b1a:	003e      	movs	r6, r7
 8000b1c:	20ff      	movs	r0, #255	@ 0xff
 8000b1e:	4322      	orrs	r2, r4
 8000b20:	e701      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	f7ffffff 	.word	0xf7ffffff

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	@ 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	@ 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	@ 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	@ 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	@ 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	@ 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c5      	adds	r5, r0, r3
 8000b72:	405d      	eors	r5, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0028      	movs	r0, r5
 8000b78:	f001 ff82 	bl	8002a80 <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	@ 0x9e
 8000b7e:	0001      	movs	r1, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	@ 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	d034      	beq.n	8000bf4 <__aeabi_i2f+0x8c>
 8000b8a:	3908      	subs	r1, #8
 8000b8c:	408d      	lsls	r5, r1
 8000b8e:	026d      	lsls	r5, r5, #9
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4328      	orrs	r0, r5
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	2b99      	cmp	r3, #153	@ 0x99
 8000ba8:	dc16      	bgt.n	8000bd8 <__aeabi_i2f+0x70>
 8000baa:	1f42      	subs	r2, r0, #5
 8000bac:	2805      	cmp	r0, #5
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_i2f+0x4a>
 8000bb0:	4095      	lsls	r5, r2
 8000bb2:	002a      	movs	r2, r5
 8000bb4:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <__aeabi_i2f+0x94>)
 8000bb6:	4002      	ands	r2, r0
 8000bb8:	076e      	lsls	r6, r5, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_i2f+0x68>
 8000bbc:	260f      	movs	r6, #15
 8000bbe:	4035      	ands	r5, r6
 8000bc0:	2d04      	cmp	r5, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_i2f+0x68>
 8000bc4:	3204      	adds	r2, #4
 8000bc6:	0155      	lsls	r5, r2, #5
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_i2f+0x68>
 8000bca:	239f      	movs	r3, #159	@ 0x9f
 8000bcc:	4002      	ands	r2, r0
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	0192      	lsls	r2, r2, #6
 8000bd2:	0a55      	lsrs	r5, r2, #9
 8000bd4:	b2d8      	uxtb	r0, r3
 8000bd6:	e7e1      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bd8:	2205      	movs	r2, #5
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	0028      	movs	r0, r5
 8000bde:	40d0      	lsrs	r0, r2
 8000be0:	0002      	movs	r2, r0
 8000be2:	0008      	movs	r0, r1
 8000be4:	301b      	adds	r0, #27
 8000be6:	4085      	lsls	r5, r0
 8000be8:	0028      	movs	r0, r5
 8000bea:	1e45      	subs	r5, r0, #1
 8000bec:	41a8      	sbcs	r0, r5
 8000bee:	4302      	orrs	r2, r0
 8000bf0:	0015      	movs	r5, r2
 8000bf2:	e7de      	b.n	8000bb2 <__aeabi_i2f+0x4a>
 8000bf4:	026d      	lsls	r5, r5, #9
 8000bf6:	2096      	movs	r0, #150	@ 0x96
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	e7cf      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bfc:	fbffffff 	.word	0xfbffffff

08000c00 <__aeabi_dadd>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	9000      	str	r0, [sp, #0]
 8000c10:	9101      	str	r1, [sp, #4]
 8000c12:	030c      	lsls	r4, r1, #12
 8000c14:	004f      	lsls	r7, r1, #1
 8000c16:	0fce      	lsrs	r6, r1, #31
 8000c18:	0a61      	lsrs	r1, r4, #9
 8000c1a:	9c00      	ldr	r4, [sp, #0]
 8000c1c:	031d      	lsls	r5, r3, #12
 8000c1e:	0f64      	lsrs	r4, r4, #29
 8000c20:	430c      	orrs	r4, r1
 8000c22:	9900      	ldr	r1, [sp, #0]
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	00c8      	lsls	r0, r1, #3
 8000c2a:	0059      	lsls	r1, r3, #1
 8000c2c:	0d4b      	lsrs	r3, r1, #21
 8000c2e:	4699      	mov	r9, r3
 8000c30:	9a00      	ldr	r2, [sp, #0]
 8000c32:	9b01      	ldr	r3, [sp, #4]
 8000c34:	0a6d      	lsrs	r5, r5, #9
 8000c36:	0fd9      	lsrs	r1, r3, #31
 8000c38:	0f53      	lsrs	r3, r2, #29
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	9b00      	ldr	r3, [sp, #0]
 8000c40:	0d7f      	lsrs	r7, r7, #21
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	4694      	mov	ip, r2
 8000c46:	464a      	mov	r2, r9
 8000c48:	46b0      	mov	r8, r6
 8000c4a:	1aba      	subs	r2, r7, r2
 8000c4c:	428e      	cmp	r6, r1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x52>
 8000c50:	e0b0      	b.n	8000db4 <__aeabi_dadd+0x1b4>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	dc00      	bgt.n	8000c58 <__aeabi_dadd+0x58>
 8000c56:	e078      	b.n	8000d4a <__aeabi_dadd+0x14a>
 8000c58:	4649      	mov	r1, r9
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x60>
 8000c5e:	e0e9      	b.n	8000e34 <__aeabi_dadd+0x234>
 8000c60:	49c9      	ldr	r1, [pc, #804]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000c62:	428f      	cmp	r7, r1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x68>
 8000c66:	e195      	b.n	8000f94 <__aeabi_dadd+0x394>
 8000c68:	2501      	movs	r5, #1
 8000c6a:	2a38      	cmp	r2, #56	@ 0x38
 8000c6c:	dc16      	bgt.n	8000c9c <__aeabi_dadd+0x9c>
 8000c6e:	2180      	movs	r1, #128	@ 0x80
 8000c70:	4653      	mov	r3, sl
 8000c72:	0409      	lsls	r1, r1, #16
 8000c74:	430b      	orrs	r3, r1
 8000c76:	469a      	mov	sl, r3
 8000c78:	2a1f      	cmp	r2, #31
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0x7e>
 8000c7c:	e1e7      	b.n	800104e <__aeabi_dadd+0x44e>
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4655      	mov	r5, sl
 8000c82:	1a8b      	subs	r3, r1, r2
 8000c84:	4661      	mov	r1, ip
 8000c86:	409d      	lsls	r5, r3
 8000c88:	40d1      	lsrs	r1, r2
 8000c8a:	430d      	orrs	r5, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	4099      	lsls	r1, r3
 8000c90:	1e4b      	subs	r3, r1, #1
 8000c92:	4199      	sbcs	r1, r3
 8000c94:	4653      	mov	r3, sl
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	430d      	orrs	r5, r1
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	1b45      	subs	r5, r0, r5
 8000c9e:	42a8      	cmp	r0, r5
 8000ca0:	4180      	sbcs	r0, r0
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	1a24      	subs	r4, r4, r0
 8000ca6:	0223      	lsls	r3, r4, #8
 8000ca8:	d400      	bmi.n	8000cac <__aeabi_dadd+0xac>
 8000caa:	e10f      	b.n	8000ecc <__aeabi_dadd+0x2cc>
 8000cac:	0264      	lsls	r4, r4, #9
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0xb6>
 8000cb4:	e139      	b.n	8000f2a <__aeabi_dadd+0x32a>
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f001 fee2 	bl	8002a80 <__clzsi2>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	1aca      	subs	r2, r1, r3
 8000cc6:	40d0      	lsrs	r0, r2
 8000cc8:	409c      	lsls	r4, r3
 8000cca:	0002      	movs	r2, r0
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	4322      	orrs	r2, r4
 8000cd0:	429f      	cmp	r7, r3
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0xd6>
 8000cd4:	e173      	b.n	8000fbe <__aeabi_dadd+0x3be>
 8000cd6:	1bd8      	subs	r0, r3, r7
 8000cd8:	3001      	adds	r0, #1
 8000cda:	1a09      	subs	r1, r1, r0
 8000cdc:	002c      	movs	r4, r5
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	40c4      	lsrs	r4, r0
 8000ce2:	1e6b      	subs	r3, r5, #1
 8000ce4:	419d      	sbcs	r5, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	40c2      	lsrs	r2, r0
 8000cea:	408b      	lsls	r3, r1
 8000cec:	4325      	orrs	r5, r4
 8000cee:	2700      	movs	r7, #0
 8000cf0:	0014      	movs	r4, r2
 8000cf2:	431d      	orrs	r5, r3
 8000cf4:	076b      	lsls	r3, r5, #29
 8000cf6:	d009      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	402b      	ands	r3, r5
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d005      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000d00:	1d2b      	adds	r3, r5, #4
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	41ad      	sbcs	r5, r5
 8000d06:	426d      	negs	r5, r5
 8000d08:	1964      	adds	r4, r4, r5
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	0223      	lsls	r3, r4, #8
 8000d0e:	d400      	bmi.n	8000d12 <__aeabi_dadd+0x112>
 8000d10:	e12d      	b.n	8000f6e <__aeabi_dadd+0x36e>
 8000d12:	4a9d      	ldr	r2, [pc, #628]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000d14:	3701      	adds	r7, #1
 8000d16:	4297      	cmp	r7, r2
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x11c>
 8000d1a:	e0d3      	b.n	8000ec4 <__aeabi_dadd+0x2c4>
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	499b      	ldr	r1, [pc, #620]	@ (8000f8c <__aeabi_dadd+0x38c>)
 8000d20:	08ed      	lsrs	r5, r5, #3
 8000d22:	4021      	ands	r1, r4
 8000d24:	074a      	lsls	r2, r1, #29
 8000d26:	432a      	orrs	r2, r5
 8000d28:	057c      	lsls	r4, r7, #21
 8000d2a:	024d      	lsls	r5, r1, #9
 8000d2c:	0b2d      	lsrs	r5, r5, #12
 8000d2e:	0d64      	lsrs	r4, r4, #21
 8000d30:	0524      	lsls	r4, r4, #20
 8000d32:	432c      	orrs	r4, r5
 8000d34:	07f6      	lsls	r6, r6, #31
 8000d36:	4334      	orrs	r4, r6
 8000d38:	0010      	movs	r0, r2
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x150>
 8000d4e:	e084      	b.n	8000e5a <__aeabi_dadd+0x25a>
 8000d50:	464a      	mov	r2, r9
 8000d52:	1bd2      	subs	r2, r2, r7
 8000d54:	2f00      	cmp	r7, #0
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x15a>
 8000d58:	e16d      	b.n	8001036 <__aeabi_dadd+0x436>
 8000d5a:	0025      	movs	r5, r4
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dadd+0x162>
 8000d60:	e127      	b.n	8000fb2 <__aeabi_dadd+0x3b2>
 8000d62:	1e56      	subs	r6, r2, #1
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x16a>
 8000d68:	e23b      	b.n	80011e2 <__aeabi_dadd+0x5e2>
 8000d6a:	4d87      	ldr	r5, [pc, #540]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000d6c:	42aa      	cmp	r2, r5
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x172>
 8000d70:	e26a      	b.n	8001248 <__aeabi_dadd+0x648>
 8000d72:	2501      	movs	r5, #1
 8000d74:	2e38      	cmp	r6, #56	@ 0x38
 8000d76:	dc12      	bgt.n	8000d9e <__aeabi_dadd+0x19e>
 8000d78:	0032      	movs	r2, r6
 8000d7a:	2a1f      	cmp	r2, #31
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_dadd+0x180>
 8000d7e:	e1f8      	b.n	8001172 <__aeabi_dadd+0x572>
 8000d80:	2620      	movs	r6, #32
 8000d82:	0025      	movs	r5, r4
 8000d84:	1ab6      	subs	r6, r6, r2
 8000d86:	0007      	movs	r7, r0
 8000d88:	4653      	mov	r3, sl
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	40d4      	lsrs	r4, r2
 8000d8e:	40b5      	lsls	r5, r6
 8000d90:	40d7      	lsrs	r7, r2
 8000d92:	1e46      	subs	r6, r0, #1
 8000d94:	41b0      	sbcs	r0, r6
 8000d96:	1b1b      	subs	r3, r3, r4
 8000d98:	469a      	mov	sl, r3
 8000d9a:	433d      	orrs	r5, r7
 8000d9c:	4305      	orrs	r5, r0
 8000d9e:	4662      	mov	r2, ip
 8000da0:	1b55      	subs	r5, r2, r5
 8000da2:	45ac      	cmp	ip, r5
 8000da4:	4192      	sbcs	r2, r2
 8000da6:	4653      	mov	r3, sl
 8000da8:	4252      	negs	r2, r2
 8000daa:	000e      	movs	r6, r1
 8000dac:	464f      	mov	r7, r9
 8000dae:	4688      	mov	r8, r1
 8000db0:	1a9c      	subs	r4, r3, r2
 8000db2:	e778      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_dadd+0x1ba>
 8000db8:	e08e      	b.n	8000ed8 <__aeabi_dadd+0x2d8>
 8000dba:	4649      	mov	r1, r9
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	d175      	bne.n	8000eac <__aeabi_dadd+0x2ac>
 8000dc0:	4661      	mov	r1, ip
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x1ca>
 8000dc8:	e0f6      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000dca:	1e51      	subs	r1, r2, #1
 8000dcc:	2a01      	cmp	r2, #1
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x1d2>
 8000dd0:	e191      	b.n	80010f6 <__aeabi_dadd+0x4f6>
 8000dd2:	4d6d      	ldr	r5, [pc, #436]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000dd4:	42aa      	cmp	r2, r5
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x1da>
 8000dd8:	e0dc      	b.n	8000f94 <__aeabi_dadd+0x394>
 8000dda:	2501      	movs	r5, #1
 8000ddc:	2938      	cmp	r1, #56	@ 0x38
 8000dde:	dc14      	bgt.n	8000e0a <__aeabi_dadd+0x20a>
 8000de0:	000a      	movs	r2, r1
 8000de2:	2a1f      	cmp	r2, #31
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x1e8>
 8000de6:	e1a2      	b.n	800112e <__aeabi_dadd+0x52e>
 8000de8:	2120      	movs	r1, #32
 8000dea:	4653      	mov	r3, sl
 8000dec:	1a89      	subs	r1, r1, r2
 8000dee:	408b      	lsls	r3, r1
 8000df0:	001d      	movs	r5, r3
 8000df2:	4663      	mov	r3, ip
 8000df4:	40d3      	lsrs	r3, r2
 8000df6:	431d      	orrs	r5, r3
 8000df8:	4663      	mov	r3, ip
 8000dfa:	408b      	lsls	r3, r1
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	1e4b      	subs	r3, r1, #1
 8000e00:	4199      	sbcs	r1, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	40d3      	lsrs	r3, r2
 8000e06:	430d      	orrs	r5, r1
 8000e08:	18e4      	adds	r4, r4, r3
 8000e0a:	182d      	adds	r5, r5, r0
 8000e0c:	4285      	cmp	r5, r0
 8000e0e:	4180      	sbcs	r0, r0
 8000e10:	4240      	negs	r0, r0
 8000e12:	1824      	adds	r4, r4, r0
 8000e14:	0223      	lsls	r3, r4, #8
 8000e16:	d559      	bpl.n	8000ecc <__aeabi_dadd+0x2cc>
 8000e18:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000e1a:	3701      	adds	r7, #1
 8000e1c:	429f      	cmp	r7, r3
 8000e1e:	d051      	beq.n	8000ec4 <__aeabi_dadd+0x2c4>
 8000e20:	2101      	movs	r1, #1
 8000e22:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <__aeabi_dadd+0x38c>)
 8000e24:	086a      	lsrs	r2, r5, #1
 8000e26:	401c      	ands	r4, r3
 8000e28:	4029      	ands	r1, r5
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	07e5      	lsls	r5, r4, #31
 8000e2e:	4315      	orrs	r5, r2
 8000e30:	0864      	lsrs	r4, r4, #1
 8000e32:	e75f      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000e34:	4661      	mov	r1, ip
 8000e36:	4653      	mov	r3, sl
 8000e38:	4319      	orrs	r1, r3
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x23e>
 8000e3c:	e0bc      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000e3e:	1e51      	subs	r1, r2, #1
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x246>
 8000e44:	e164      	b.n	8001110 <__aeabi_dadd+0x510>
 8000e46:	4d50      	ldr	r5, [pc, #320]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000e48:	42aa      	cmp	r2, r5
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x24e>
 8000e4c:	e16a      	b.n	8001124 <__aeabi_dadd+0x524>
 8000e4e:	2501      	movs	r5, #1
 8000e50:	2938      	cmp	r1, #56	@ 0x38
 8000e52:	dd00      	ble.n	8000e56 <__aeabi_dadd+0x256>
 8000e54:	e722      	b.n	8000c9c <__aeabi_dadd+0x9c>
 8000e56:	000a      	movs	r2, r1
 8000e58:	e70e      	b.n	8000c78 <__aeabi_dadd+0x78>
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <__aeabi_dadd+0x390>)
 8000e5c:	1c7d      	adds	r5, r7, #1
 8000e5e:	4215      	tst	r5, r2
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x264>
 8000e62:	e0d0      	b.n	8001006 <__aeabi_dadd+0x406>
 8000e64:	0025      	movs	r5, r4
 8000e66:	4662      	mov	r2, ip
 8000e68:	4653      	mov	r3, sl
 8000e6a:	4305      	orrs	r5, r0
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	d000      	beq.n	8000e74 <__aeabi_dadd+0x274>
 8000e72:	e137      	b.n	80010e4 <__aeabi_dadd+0x4e4>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x27a>
 8000e78:	e1a8      	b.n	80011cc <__aeabi_dadd+0x5cc>
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x280>
 8000e7e:	e16a      	b.n	8001156 <__aeabi_dadd+0x556>
 8000e80:	4663      	mov	r3, ip
 8000e82:	1ac5      	subs	r5, r0, r3
 8000e84:	4653      	mov	r3, sl
 8000e86:	1ae2      	subs	r2, r4, r3
 8000e88:	42a8      	cmp	r0, r5
 8000e8a:	419b      	sbcs	r3, r3
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	021a      	lsls	r2, r3, #8
 8000e92:	d400      	bmi.n	8000e96 <__aeabi_dadd+0x296>
 8000e94:	e203      	b.n	800129e <__aeabi_dadd+0x69e>
 8000e96:	4663      	mov	r3, ip
 8000e98:	1a1d      	subs	r5, r3, r0
 8000e9a:	45ac      	cmp	ip, r5
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4653      	mov	r3, sl
 8000ea0:	4252      	negs	r2, r2
 8000ea2:	1b1c      	subs	r4, r3, r4
 8000ea4:	000e      	movs	r6, r1
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	1aa4      	subs	r4, r4, r2
 8000eaa:	e723      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000eac:	4936      	ldr	r1, [pc, #216]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000eae:	428f      	cmp	r7, r1
 8000eb0:	d070      	beq.n	8000f94 <__aeabi_dadd+0x394>
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	2a38      	cmp	r2, #56	@ 0x38
 8000eb6:	dca8      	bgt.n	8000e0a <__aeabi_dadd+0x20a>
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	4653      	mov	r3, sl
 8000ebc:	0409      	lsls	r1, r1, #16
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	469a      	mov	sl, r3
 8000ec2:	e78e      	b.n	8000de2 <__aeabi_dadd+0x1e2>
 8000ec4:	003c      	movs	r4, r7
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	e731      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000ecc:	2307      	movs	r3, #7
 8000ece:	402b      	ands	r3, r5
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x2d6>
 8000ed4:	e710      	b.n	8000cf8 <__aeabi_dadd+0xf8>
 8000ed6:	e093      	b.n	8001000 <__aeabi_dadd+0x400>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d074      	beq.n	8000fc6 <__aeabi_dadd+0x3c6>
 8000edc:	464a      	mov	r2, r9
 8000ede:	1bd2      	subs	r2, r2, r7
 8000ee0:	2f00      	cmp	r7, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x2e6>
 8000ee4:	e0c7      	b.n	8001076 <__aeabi_dadd+0x476>
 8000ee6:	4928      	ldr	r1, [pc, #160]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x2ee>
 8000eec:	e185      	b.n	80011fa <__aeabi_dadd+0x5fa>
 8000eee:	2501      	movs	r5, #1
 8000ef0:	2a38      	cmp	r2, #56	@ 0x38
 8000ef2:	dc12      	bgt.n	8000f1a <__aeabi_dadd+0x31a>
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0409      	lsls	r1, r1, #16
 8000ef8:	430c      	orrs	r4, r1
 8000efa:	2a1f      	cmp	r2, #31
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_dadd+0x300>
 8000efe:	e1ab      	b.n	8001258 <__aeabi_dadd+0x658>
 8000f00:	2120      	movs	r1, #32
 8000f02:	0025      	movs	r5, r4
 8000f04:	1a89      	subs	r1, r1, r2
 8000f06:	0007      	movs	r7, r0
 8000f08:	4088      	lsls	r0, r1
 8000f0a:	408d      	lsls	r5, r1
 8000f0c:	40d7      	lsrs	r7, r2
 8000f0e:	1e41      	subs	r1, r0, #1
 8000f10:	4188      	sbcs	r0, r1
 8000f12:	40d4      	lsrs	r4, r2
 8000f14:	433d      	orrs	r5, r7
 8000f16:	4305      	orrs	r5, r0
 8000f18:	44a2      	add	sl, r4
 8000f1a:	4465      	add	r5, ip
 8000f1c:	4565      	cmp	r5, ip
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4252      	negs	r2, r2
 8000f22:	4452      	add	r2, sl
 8000f24:	0014      	movs	r4, r2
 8000f26:	464f      	mov	r7, r9
 8000f28:	e774      	b.n	8000e14 <__aeabi_dadd+0x214>
 8000f2a:	0028      	movs	r0, r5
 8000f2c:	f001 fda8 	bl	8002a80 <__clzsi2>
 8000f30:	0003      	movs	r3, r0
 8000f32:	3318      	adds	r3, #24
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_dadd+0x33a>
 8000f38:	e6c2      	b.n	8000cc0 <__aeabi_dadd+0xc0>
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	3808      	subs	r0, #8
 8000f3e:	4082      	lsls	r2, r0
 8000f40:	429f      	cmp	r7, r3
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dadd+0x346>
 8000f44:	e0a9      	b.n	800109a <__aeabi_dadd+0x49a>
 8000f46:	1bdb      	subs	r3, r3, r7
 8000f48:	1c58      	adds	r0, r3, #1
 8000f4a:	281f      	cmp	r0, #31
 8000f4c:	dc00      	bgt.n	8000f50 <__aeabi_dadd+0x350>
 8000f4e:	e1ac      	b.n	80012aa <__aeabi_dadd+0x6aa>
 8000f50:	0015      	movs	r5, r2
 8000f52:	3b1f      	subs	r3, #31
 8000f54:	40dd      	lsrs	r5, r3
 8000f56:	2820      	cmp	r0, #32
 8000f58:	d005      	beq.n	8000f66 <__aeabi_dadd+0x366>
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	1e53      	subs	r3, r2, #1
 8000f62:	419a      	sbcs	r2, r3
 8000f64:	4315      	orrs	r5, r2
 8000f66:	2307      	movs	r3, #7
 8000f68:	2700      	movs	r7, #0
 8000f6a:	402b      	ands	r3, r5
 8000f6c:	e7b0      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 8000f6e:	08ed      	lsrs	r5, r5, #3
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000f72:	0762      	lsls	r2, r4, #29
 8000f74:	432a      	orrs	r2, r5
 8000f76:	08e4      	lsrs	r4, r4, #3
 8000f78:	429f      	cmp	r7, r3
 8000f7a:	d00f      	beq.n	8000f9c <__aeabi_dadd+0x39c>
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	0b25      	lsrs	r5, r4, #12
 8000f80:	057c      	lsls	r4, r7, #21
 8000f82:	0d64      	lsrs	r4, r4, #21
 8000f84:	e6d4      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	000007ff 	.word	0x000007ff
 8000f8c:	ff7fffff 	.word	0xff7fffff
 8000f90:	000007fe 	.word	0x000007fe
 8000f94:	08c0      	lsrs	r0, r0, #3
 8000f96:	0762      	lsls	r2, r4, #29
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	08e4      	lsrs	r4, r4, #3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x3a4>
 8000fa2:	e186      	b.n	80012b2 <__aeabi_dadd+0x6b2>
 8000fa4:	2580      	movs	r5, #128	@ 0x80
 8000fa6:	032d      	lsls	r5, r5, #12
 8000fa8:	4325      	orrs	r5, r4
 8000faa:	032d      	lsls	r5, r5, #12
 8000fac:	4cc3      	ldr	r4, [pc, #780]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8000fae:	0b2d      	lsrs	r5, r5, #12
 8000fb0:	e6be      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	4654      	mov	r4, sl
 8000fb6:	000e      	movs	r6, r1
 8000fb8:	0017      	movs	r7, r2
 8000fba:	08c5      	lsrs	r5, r0, #3
 8000fbc:	e7d8      	b.n	8000f70 <__aeabi_dadd+0x370>
 8000fbe:	4cc0      	ldr	r4, [pc, #768]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 8000fc0:	1aff      	subs	r7, r7, r3
 8000fc2:	4014      	ands	r4, r2
 8000fc4:	e696      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000fc6:	4abf      	ldr	r2, [pc, #764]	@ (80012c4 <__aeabi_dadd+0x6c4>)
 8000fc8:	1c79      	adds	r1, r7, #1
 8000fca:	4211      	tst	r1, r2
 8000fcc:	d16b      	bne.n	80010a6 <__aeabi_dadd+0x4a6>
 8000fce:	0022      	movs	r2, r4
 8000fd0:	4302      	orrs	r2, r0
 8000fd2:	2f00      	cmp	r7, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_dadd+0x3d8>
 8000fd6:	e0db      	b.n	8001190 <__aeabi_dadd+0x590>
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x3de>
 8000fdc:	e12d      	b.n	800123a <__aeabi_dadd+0x63a>
 8000fde:	4662      	mov	r2, ip
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x3e8>
 8000fe6:	e0b6      	b.n	8001156 <__aeabi_dadd+0x556>
 8000fe8:	4663      	mov	r3, ip
 8000fea:	18c5      	adds	r5, r0, r3
 8000fec:	4285      	cmp	r5, r0
 8000fee:	4180      	sbcs	r0, r0
 8000ff0:	4454      	add	r4, sl
 8000ff2:	4240      	negs	r0, r0
 8000ff4:	1824      	adds	r4, r4, r0
 8000ff6:	0223      	lsls	r3, r4, #8
 8000ff8:	d502      	bpl.n	8001000 <__aeabi_dadd+0x400>
 8000ffa:	000f      	movs	r7, r1
 8000ffc:	4bb0      	ldr	r3, [pc, #704]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 8000ffe:	401c      	ands	r4, r3
 8001000:	003a      	movs	r2, r7
 8001002:	0028      	movs	r0, r5
 8001004:	e7d8      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8001006:	4662      	mov	r2, ip
 8001008:	1a85      	subs	r5, r0, r2
 800100a:	42a8      	cmp	r0, r5
 800100c:	4192      	sbcs	r2, r2
 800100e:	4653      	mov	r3, sl
 8001010:	4252      	negs	r2, r2
 8001012:	4691      	mov	r9, r2
 8001014:	1ae3      	subs	r3, r4, r3
 8001016:	001a      	movs	r2, r3
 8001018:	464b      	mov	r3, r9
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	4691      	mov	r9, r2
 8001020:	021a      	lsls	r2, r3, #8
 8001022:	d454      	bmi.n	80010ce <__aeabi_dadd+0x4ce>
 8001024:	464a      	mov	r2, r9
 8001026:	464c      	mov	r4, r9
 8001028:	432a      	orrs	r2, r5
 800102a:	d000      	beq.n	800102e <__aeabi_dadd+0x42e>
 800102c:	e640      	b.n	8000cb0 <__aeabi_dadd+0xb0>
 800102e:	2600      	movs	r6, #0
 8001030:	2400      	movs	r4, #0
 8001032:	2500      	movs	r5, #0
 8001034:	e67c      	b.n	8000d30 <__aeabi_dadd+0x130>
 8001036:	4da1      	ldr	r5, [pc, #644]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8001038:	45a9      	cmp	r9, r5
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x43e>
 800103c:	e090      	b.n	8001160 <__aeabi_dadd+0x560>
 800103e:	2501      	movs	r5, #1
 8001040:	2a38      	cmp	r2, #56	@ 0x38
 8001042:	dd00      	ble.n	8001046 <__aeabi_dadd+0x446>
 8001044:	e6ab      	b.n	8000d9e <__aeabi_dadd+0x19e>
 8001046:	2580      	movs	r5, #128	@ 0x80
 8001048:	042d      	lsls	r5, r5, #16
 800104a:	432c      	orrs	r4, r5
 800104c:	e695      	b.n	8000d7a <__aeabi_dadd+0x17a>
 800104e:	0011      	movs	r1, r2
 8001050:	4655      	mov	r5, sl
 8001052:	3920      	subs	r1, #32
 8001054:	40cd      	lsrs	r5, r1
 8001056:	46a9      	mov	r9, r5
 8001058:	2a20      	cmp	r2, #32
 800105a:	d006      	beq.n	800106a <__aeabi_dadd+0x46a>
 800105c:	2140      	movs	r1, #64	@ 0x40
 800105e:	4653      	mov	r3, sl
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	4093      	lsls	r3, r2
 8001064:	4662      	mov	r2, ip
 8001066:	431a      	orrs	r2, r3
 8001068:	4694      	mov	ip, r2
 800106a:	4665      	mov	r5, ip
 800106c:	1e6b      	subs	r3, r5, #1
 800106e:	419d      	sbcs	r5, r3
 8001070:	464b      	mov	r3, r9
 8001072:	431d      	orrs	r5, r3
 8001074:	e612      	b.n	8000c9c <__aeabi_dadd+0x9c>
 8001076:	0021      	movs	r1, r4
 8001078:	4301      	orrs	r1, r0
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x47e>
 800107c:	e0c4      	b.n	8001208 <__aeabi_dadd+0x608>
 800107e:	1e51      	subs	r1, r2, #1
 8001080:	2a01      	cmp	r2, #1
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x486>
 8001084:	e0fb      	b.n	800127e <__aeabi_dadd+0x67e>
 8001086:	4d8d      	ldr	r5, [pc, #564]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8001088:	42aa      	cmp	r2, r5
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x48e>
 800108c:	e0b5      	b.n	80011fa <__aeabi_dadd+0x5fa>
 800108e:	2501      	movs	r5, #1
 8001090:	2938      	cmp	r1, #56	@ 0x38
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0x496>
 8001094:	e741      	b.n	8000f1a <__aeabi_dadd+0x31a>
 8001096:	000a      	movs	r2, r1
 8001098:	e72f      	b.n	8000efa <__aeabi_dadd+0x2fa>
 800109a:	4c89      	ldr	r4, [pc, #548]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 800109c:	1aff      	subs	r7, r7, r3
 800109e:	4014      	ands	r4, r2
 80010a0:	0762      	lsls	r2, r4, #29
 80010a2:	08e4      	lsrs	r4, r4, #3
 80010a4:	e76a      	b.n	8000f7c <__aeabi_dadd+0x37c>
 80010a6:	4a85      	ldr	r2, [pc, #532]	@ (80012bc <__aeabi_dadd+0x6bc>)
 80010a8:	4291      	cmp	r1, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x4ae>
 80010ac:	e0e3      	b.n	8001276 <__aeabi_dadd+0x676>
 80010ae:	4663      	mov	r3, ip
 80010b0:	18c2      	adds	r2, r0, r3
 80010b2:	4282      	cmp	r2, r0
 80010b4:	4180      	sbcs	r0, r0
 80010b6:	0023      	movs	r3, r4
 80010b8:	4240      	negs	r0, r0
 80010ba:	4453      	add	r3, sl
 80010bc:	181b      	adds	r3, r3, r0
 80010be:	07dd      	lsls	r5, r3, #31
 80010c0:	085c      	lsrs	r4, r3, #1
 80010c2:	2307      	movs	r3, #7
 80010c4:	0852      	lsrs	r2, r2, #1
 80010c6:	4315      	orrs	r5, r2
 80010c8:	000f      	movs	r7, r1
 80010ca:	402b      	ands	r3, r5
 80010cc:	e700      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 80010ce:	4663      	mov	r3, ip
 80010d0:	1a1d      	subs	r5, r3, r0
 80010d2:	45ac      	cmp	ip, r5
 80010d4:	4192      	sbcs	r2, r2
 80010d6:	4653      	mov	r3, sl
 80010d8:	4252      	negs	r2, r2
 80010da:	1b1c      	subs	r4, r3, r4
 80010dc:	000e      	movs	r6, r1
 80010de:	4688      	mov	r8, r1
 80010e0:	1aa4      	subs	r4, r4, r2
 80010e2:	e5e5      	b.n	8000cb0 <__aeabi_dadd+0xb0>
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x4ea>
 80010e8:	e091      	b.n	800120e <__aeabi_dadd+0x60e>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d138      	bne.n	8001160 <__aeabi_dadd+0x560>
 80010ee:	2480      	movs	r4, #128	@ 0x80
 80010f0:	2600      	movs	r6, #0
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	e756      	b.n	8000fa4 <__aeabi_dadd+0x3a4>
 80010f6:	4663      	mov	r3, ip
 80010f8:	18c5      	adds	r5, r0, r3
 80010fa:	4285      	cmp	r5, r0
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	4454      	add	r4, sl
 8001100:	4240      	negs	r0, r0
 8001102:	1824      	adds	r4, r4, r0
 8001104:	2701      	movs	r7, #1
 8001106:	0223      	lsls	r3, r4, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_dadd+0x50c>
 800110a:	e6df      	b.n	8000ecc <__aeabi_dadd+0x2cc>
 800110c:	2702      	movs	r7, #2
 800110e:	e687      	b.n	8000e20 <__aeabi_dadd+0x220>
 8001110:	4663      	mov	r3, ip
 8001112:	1ac5      	subs	r5, r0, r3
 8001114:	42a8      	cmp	r0, r5
 8001116:	4180      	sbcs	r0, r0
 8001118:	4653      	mov	r3, sl
 800111a:	4240      	negs	r0, r0
 800111c:	1ae4      	subs	r4, r4, r3
 800111e:	2701      	movs	r7, #1
 8001120:	1a24      	subs	r4, r4, r0
 8001122:	e5c0      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 8001124:	0762      	lsls	r2, r4, #29
 8001126:	08c0      	lsrs	r0, r0, #3
 8001128:	4302      	orrs	r2, r0
 800112a:	08e4      	lsrs	r4, r4, #3
 800112c:	e736      	b.n	8000f9c <__aeabi_dadd+0x39c>
 800112e:	0011      	movs	r1, r2
 8001130:	4653      	mov	r3, sl
 8001132:	3920      	subs	r1, #32
 8001134:	40cb      	lsrs	r3, r1
 8001136:	4699      	mov	r9, r3
 8001138:	2a20      	cmp	r2, #32
 800113a:	d006      	beq.n	800114a <__aeabi_dadd+0x54a>
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	4653      	mov	r3, sl
 8001140:	1a8a      	subs	r2, r1, r2
 8001142:	4093      	lsls	r3, r2
 8001144:	4662      	mov	r2, ip
 8001146:	431a      	orrs	r2, r3
 8001148:	4694      	mov	ip, r2
 800114a:	4665      	mov	r5, ip
 800114c:	1e6b      	subs	r3, r5, #1
 800114e:	419d      	sbcs	r5, r3
 8001150:	464b      	mov	r3, r9
 8001152:	431d      	orrs	r5, r3
 8001154:	e659      	b.n	8000e0a <__aeabi_dadd+0x20a>
 8001156:	0762      	lsls	r2, r4, #29
 8001158:	08c0      	lsrs	r0, r0, #3
 800115a:	4302      	orrs	r2, r0
 800115c:	08e4      	lsrs	r4, r4, #3
 800115e:	e70d      	b.n	8000f7c <__aeabi_dadd+0x37c>
 8001160:	4653      	mov	r3, sl
 8001162:	075a      	lsls	r2, r3, #29
 8001164:	4663      	mov	r3, ip
 8001166:	08d8      	lsrs	r0, r3, #3
 8001168:	4653      	mov	r3, sl
 800116a:	000e      	movs	r6, r1
 800116c:	4302      	orrs	r2, r0
 800116e:	08dc      	lsrs	r4, r3, #3
 8001170:	e714      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001172:	0015      	movs	r5, r2
 8001174:	0026      	movs	r6, r4
 8001176:	3d20      	subs	r5, #32
 8001178:	40ee      	lsrs	r6, r5
 800117a:	2a20      	cmp	r2, #32
 800117c:	d003      	beq.n	8001186 <__aeabi_dadd+0x586>
 800117e:	2540      	movs	r5, #64	@ 0x40
 8001180:	1aaa      	subs	r2, r5, r2
 8001182:	4094      	lsls	r4, r2
 8001184:	4320      	orrs	r0, r4
 8001186:	1e42      	subs	r2, r0, #1
 8001188:	4190      	sbcs	r0, r2
 800118a:	0005      	movs	r5, r0
 800118c:	4335      	orrs	r5, r6
 800118e:	e606      	b.n	8000d9e <__aeabi_dadd+0x19e>
 8001190:	2a00      	cmp	r2, #0
 8001192:	d07c      	beq.n	800128e <__aeabi_dadd+0x68e>
 8001194:	4662      	mov	r2, ip
 8001196:	4653      	mov	r3, sl
 8001198:	08c0      	lsrs	r0, r0, #3
 800119a:	431a      	orrs	r2, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x5a0>
 800119e:	e6fa      	b.n	8000f96 <__aeabi_dadd+0x396>
 80011a0:	0762      	lsls	r2, r4, #29
 80011a2:	4310      	orrs	r0, r2
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	08e4      	lsrs	r4, r4, #3
 80011a8:	0312      	lsls	r2, r2, #12
 80011aa:	4214      	tst	r4, r2
 80011ac:	d008      	beq.n	80011c0 <__aeabi_dadd+0x5c0>
 80011ae:	08d9      	lsrs	r1, r3, #3
 80011b0:	4211      	tst	r1, r2
 80011b2:	d105      	bne.n	80011c0 <__aeabi_dadd+0x5c0>
 80011b4:	4663      	mov	r3, ip
 80011b6:	08d8      	lsrs	r0, r3, #3
 80011b8:	4653      	mov	r3, sl
 80011ba:	000c      	movs	r4, r1
 80011bc:	075b      	lsls	r3, r3, #29
 80011be:	4318      	orrs	r0, r3
 80011c0:	0f42      	lsrs	r2, r0, #29
 80011c2:	00c0      	lsls	r0, r0, #3
 80011c4:	08c0      	lsrs	r0, r0, #3
 80011c6:	0752      	lsls	r2, r2, #29
 80011c8:	4302      	orrs	r2, r0
 80011ca:	e6e7      	b.n	8000f9c <__aeabi_dadd+0x39c>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x5d2>
 80011d0:	e72d      	b.n	800102e <__aeabi_dadd+0x42e>
 80011d2:	4663      	mov	r3, ip
 80011d4:	08d8      	lsrs	r0, r3, #3
 80011d6:	4653      	mov	r3, sl
 80011d8:	075a      	lsls	r2, r3, #29
 80011da:	000e      	movs	r6, r1
 80011dc:	4302      	orrs	r2, r0
 80011de:	08dc      	lsrs	r4, r3, #3
 80011e0:	e6cc      	b.n	8000f7c <__aeabi_dadd+0x37c>
 80011e2:	4663      	mov	r3, ip
 80011e4:	1a1d      	subs	r5, r3, r0
 80011e6:	45ac      	cmp	ip, r5
 80011e8:	4192      	sbcs	r2, r2
 80011ea:	4653      	mov	r3, sl
 80011ec:	4252      	negs	r2, r2
 80011ee:	1b1c      	subs	r4, r3, r4
 80011f0:	000e      	movs	r6, r1
 80011f2:	4688      	mov	r8, r1
 80011f4:	1aa4      	subs	r4, r4, r2
 80011f6:	3701      	adds	r7, #1
 80011f8:	e555      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 80011fa:	4663      	mov	r3, ip
 80011fc:	08d9      	lsrs	r1, r3, #3
 80011fe:	4653      	mov	r3, sl
 8001200:	075a      	lsls	r2, r3, #29
 8001202:	430a      	orrs	r2, r1
 8001204:	08dc      	lsrs	r4, r3, #3
 8001206:	e6c9      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001208:	4660      	mov	r0, ip
 800120a:	4654      	mov	r4, sl
 800120c:	e6d4      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 800120e:	08c0      	lsrs	r0, r0, #3
 8001210:	2a00      	cmp	r2, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x616>
 8001214:	e6bf      	b.n	8000f96 <__aeabi_dadd+0x396>
 8001216:	0762      	lsls	r2, r4, #29
 8001218:	4310      	orrs	r0, r2
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	08e4      	lsrs	r4, r4, #3
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	4214      	tst	r4, r2
 8001222:	d0cd      	beq.n	80011c0 <__aeabi_dadd+0x5c0>
 8001224:	08dd      	lsrs	r5, r3, #3
 8001226:	4215      	tst	r5, r2
 8001228:	d1ca      	bne.n	80011c0 <__aeabi_dadd+0x5c0>
 800122a:	4663      	mov	r3, ip
 800122c:	08d8      	lsrs	r0, r3, #3
 800122e:	4653      	mov	r3, sl
 8001230:	075b      	lsls	r3, r3, #29
 8001232:	000e      	movs	r6, r1
 8001234:	002c      	movs	r4, r5
 8001236:	4318      	orrs	r0, r3
 8001238:	e7c2      	b.n	80011c0 <__aeabi_dadd+0x5c0>
 800123a:	4663      	mov	r3, ip
 800123c:	08d9      	lsrs	r1, r3, #3
 800123e:	4653      	mov	r3, sl
 8001240:	075a      	lsls	r2, r3, #29
 8001242:	430a      	orrs	r2, r1
 8001244:	08dc      	lsrs	r4, r3, #3
 8001246:	e699      	b.n	8000f7c <__aeabi_dadd+0x37c>
 8001248:	4663      	mov	r3, ip
 800124a:	08d8      	lsrs	r0, r3, #3
 800124c:	4653      	mov	r3, sl
 800124e:	075a      	lsls	r2, r3, #29
 8001250:	000e      	movs	r6, r1
 8001252:	4302      	orrs	r2, r0
 8001254:	08dc      	lsrs	r4, r3, #3
 8001256:	e6a1      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001258:	0011      	movs	r1, r2
 800125a:	0027      	movs	r7, r4
 800125c:	3920      	subs	r1, #32
 800125e:	40cf      	lsrs	r7, r1
 8001260:	2a20      	cmp	r2, #32
 8001262:	d003      	beq.n	800126c <__aeabi_dadd+0x66c>
 8001264:	2140      	movs	r1, #64	@ 0x40
 8001266:	1a8a      	subs	r2, r1, r2
 8001268:	4094      	lsls	r4, r2
 800126a:	4320      	orrs	r0, r4
 800126c:	1e42      	subs	r2, r0, #1
 800126e:	4190      	sbcs	r0, r2
 8001270:	0005      	movs	r5, r0
 8001272:	433d      	orrs	r5, r7
 8001274:	e651      	b.n	8000f1a <__aeabi_dadd+0x31a>
 8001276:	000c      	movs	r4, r1
 8001278:	2500      	movs	r5, #0
 800127a:	2200      	movs	r2, #0
 800127c:	e558      	b.n	8000d30 <__aeabi_dadd+0x130>
 800127e:	4460      	add	r0, ip
 8001280:	4560      	cmp	r0, ip
 8001282:	4192      	sbcs	r2, r2
 8001284:	4454      	add	r4, sl
 8001286:	4252      	negs	r2, r2
 8001288:	0005      	movs	r5, r0
 800128a:	18a4      	adds	r4, r4, r2
 800128c:	e73a      	b.n	8001104 <__aeabi_dadd+0x504>
 800128e:	4653      	mov	r3, sl
 8001290:	075a      	lsls	r2, r3, #29
 8001292:	4663      	mov	r3, ip
 8001294:	08d9      	lsrs	r1, r3, #3
 8001296:	4653      	mov	r3, sl
 8001298:	430a      	orrs	r2, r1
 800129a:	08dc      	lsrs	r4, r3, #3
 800129c:	e67e      	b.n	8000f9c <__aeabi_dadd+0x39c>
 800129e:	001a      	movs	r2, r3
 80012a0:	001c      	movs	r4, r3
 80012a2:	432a      	orrs	r2, r5
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x6a8>
 80012a6:	e6ab      	b.n	8001000 <__aeabi_dadd+0x400>
 80012a8:	e6c1      	b.n	800102e <__aeabi_dadd+0x42e>
 80012aa:	2120      	movs	r1, #32
 80012ac:	2500      	movs	r5, #0
 80012ae:	1a09      	subs	r1, r1, r0
 80012b0:	e519      	b.n	8000ce6 <__aeabi_dadd+0xe6>
 80012b2:	2200      	movs	r2, #0
 80012b4:	2500      	movs	r5, #0
 80012b6:	4c01      	ldr	r4, [pc, #4]	@ (80012bc <__aeabi_dadd+0x6bc>)
 80012b8:	e53a      	b.n	8000d30 <__aeabi_dadd+0x130>
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	000007ff 	.word	0x000007ff
 80012c0:	ff7fffff 	.word	0xff7fffff
 80012c4:	000007fe 	.word	0x000007fe

080012c8 <__aeabi_ddiv>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	46de      	mov	lr, fp
 80012cc:	4645      	mov	r5, r8
 80012ce:	4657      	mov	r7, sl
 80012d0:	464e      	mov	r6, r9
 80012d2:	b5e0      	push	{r5, r6, r7, lr}
 80012d4:	b087      	sub	sp, #28
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	030b      	lsls	r3, r1, #12
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	469b      	mov	fp, r3
 80012e0:	0fca      	lsrs	r2, r1, #31
 80012e2:	004b      	lsls	r3, r1, #1
 80012e4:	0004      	movs	r4, r0
 80012e6:	4680      	mov	r8, r0
 80012e8:	0d5b      	lsrs	r3, r3, #21
 80012ea:	9202      	str	r2, [sp, #8]
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x28>
 80012ee:	e16a      	b.n	80015c6 <__aeabi_ddiv+0x2fe>
 80012f0:	4ad4      	ldr	r2, [pc, #848]	@ (8001644 <__aeabi_ddiv+0x37c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0x30>
 80012f6:	e18c      	b.n	8001612 <__aeabi_ddiv+0x34a>
 80012f8:	4659      	mov	r1, fp
 80012fa:	0f42      	lsrs	r2, r0, #29
 80012fc:	00c9      	lsls	r1, r1, #3
 80012fe:	430a      	orrs	r2, r1
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0409      	lsls	r1, r1, #16
 8001304:	4311      	orrs	r1, r2
 8001306:	00c2      	lsls	r2, r0, #3
 8001308:	4690      	mov	r8, r2
 800130a:	4acf      	ldr	r2, [pc, #828]	@ (8001648 <__aeabi_ddiv+0x380>)
 800130c:	4689      	mov	r9, r1
 800130e:	4692      	mov	sl, r2
 8001310:	449a      	add	sl, r3
 8001312:	2300      	movs	r3, #0
 8001314:	2400      	movs	r4, #0
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	9e00      	ldr	r6, [sp, #0]
 800131a:	9f01      	ldr	r7, [sp, #4]
 800131c:	033b      	lsls	r3, r7, #12
 800131e:	0b1b      	lsrs	r3, r3, #12
 8001320:	469b      	mov	fp, r3
 8001322:	007b      	lsls	r3, r7, #1
 8001324:	0030      	movs	r0, r6
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	0ffd      	lsrs	r5, r7, #31
 800132a:	2b00      	cmp	r3, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x68>
 800132e:	e128      	b.n	8001582 <__aeabi_ddiv+0x2ba>
 8001330:	4ac4      	ldr	r2, [pc, #784]	@ (8001644 <__aeabi_ddiv+0x37c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d100      	bne.n	8001338 <__aeabi_ddiv+0x70>
 8001336:	e177      	b.n	8001628 <__aeabi_ddiv+0x360>
 8001338:	4659      	mov	r1, fp
 800133a:	0f72      	lsrs	r2, r6, #29
 800133c:	00c9      	lsls	r1, r1, #3
 800133e:	430a      	orrs	r2, r1
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	0409      	lsls	r1, r1, #16
 8001344:	4311      	orrs	r1, r2
 8001346:	468b      	mov	fp, r1
 8001348:	49bf      	ldr	r1, [pc, #764]	@ (8001648 <__aeabi_ddiv+0x380>)
 800134a:	00f2      	lsls	r2, r6, #3
 800134c:	468c      	mov	ip, r1
 800134e:	4651      	mov	r1, sl
 8001350:	4463      	add	r3, ip
 8001352:	1acb      	subs	r3, r1, r3
 8001354:	469a      	mov	sl, r3
 8001356:	2300      	movs	r3, #0
 8001358:	9e02      	ldr	r6, [sp, #8]
 800135a:	406e      	eors	r6, r5
 800135c:	2c0f      	cmp	r4, #15
 800135e:	d827      	bhi.n	80013b0 <__aeabi_ddiv+0xe8>
 8001360:	49ba      	ldr	r1, [pc, #744]	@ (800164c <__aeabi_ddiv+0x384>)
 8001362:	00a4      	lsls	r4, r4, #2
 8001364:	5909      	ldr	r1, [r1, r4]
 8001366:	468f      	mov	pc, r1
 8001368:	46cb      	mov	fp, r9
 800136a:	4642      	mov	r2, r8
 800136c:	9e02      	ldr	r6, [sp, #8]
 800136e:	9b03      	ldr	r3, [sp, #12]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d016      	beq.n	80013a2 <__aeabi_ddiv+0xda>
 8001374:	2b03      	cmp	r3, #3
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0xb2>
 8001378:	e2a6      	b.n	80018c8 <__aeabi_ddiv+0x600>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d000      	beq.n	8001380 <__aeabi_ddiv+0xb8>
 800137e:	e0df      	b.n	8001540 <__aeabi_ddiv+0x278>
 8001380:	2200      	movs	r2, #0
 8001382:	2300      	movs	r3, #0
 8001384:	2400      	movs	r4, #0
 8001386:	4690      	mov	r8, r2
 8001388:	051b      	lsls	r3, r3, #20
 800138a:	4323      	orrs	r3, r4
 800138c:	07f6      	lsls	r6, r6, #31
 800138e:	4333      	orrs	r3, r6
 8001390:	4640      	mov	r0, r8
 8001392:	0019      	movs	r1, r3
 8001394:	b007      	add	sp, #28
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	2200      	movs	r2, #0
 80013a4:	2400      	movs	r4, #0
 80013a6:	4690      	mov	r8, r2
 80013a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001644 <__aeabi_ddiv+0x37c>)
 80013aa:	e7ed      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80013ac:	002e      	movs	r6, r5
 80013ae:	e7df      	b.n	8001370 <__aeabi_ddiv+0xa8>
 80013b0:	45cb      	cmp	fp, r9
 80013b2:	d200      	bcs.n	80013b6 <__aeabi_ddiv+0xee>
 80013b4:	e1d4      	b.n	8001760 <__aeabi_ddiv+0x498>
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0xf2>
 80013b8:	e1cf      	b.n	800175a <__aeabi_ddiv+0x492>
 80013ba:	2301      	movs	r3, #1
 80013bc:	425b      	negs	r3, r3
 80013be:	469c      	mov	ip, r3
 80013c0:	4644      	mov	r4, r8
 80013c2:	4648      	mov	r0, r9
 80013c4:	2700      	movs	r7, #0
 80013c6:	44e2      	add	sl, ip
 80013c8:	465b      	mov	r3, fp
 80013ca:	0e15      	lsrs	r5, r2, #24
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	431d      	orrs	r5, r3
 80013d0:	0c19      	lsrs	r1, r3, #16
 80013d2:	042b      	lsls	r3, r5, #16
 80013d4:	0212      	lsls	r2, r2, #8
 80013d6:	9500      	str	r5, [sp, #0]
 80013d8:	0c1d      	lsrs	r5, r3, #16
 80013da:	4691      	mov	r9, r2
 80013dc:	9102      	str	r1, [sp, #8]
 80013de:	9503      	str	r5, [sp, #12]
 80013e0:	f7fe ff3e 	bl	8000260 <__aeabi_uidivmod>
 80013e4:	0002      	movs	r2, r0
 80013e6:	436a      	muls	r2, r5
 80013e8:	040b      	lsls	r3, r1, #16
 80013ea:	0c21      	lsrs	r1, r4, #16
 80013ec:	4680      	mov	r8, r0
 80013ee:	4319      	orrs	r1, r3
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d909      	bls.n	8001408 <__aeabi_ddiv+0x140>
 80013f4:	9d00      	ldr	r5, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	46ac      	mov	ip, r5
 80013fa:	425b      	negs	r3, r3
 80013fc:	4461      	add	r1, ip
 80013fe:	469c      	mov	ip, r3
 8001400:	44e0      	add	r8, ip
 8001402:	428d      	cmp	r5, r1
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x140>
 8001406:	e1fb      	b.n	8001800 <__aeabi_ddiv+0x538>
 8001408:	1a88      	subs	r0, r1, r2
 800140a:	9902      	ldr	r1, [sp, #8]
 800140c:	f7fe ff28 	bl	8000260 <__aeabi_uidivmod>
 8001410:	9a03      	ldr	r2, [sp, #12]
 8001412:	0424      	lsls	r4, r4, #16
 8001414:	4342      	muls	r2, r0
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	0c24      	lsrs	r4, r4, #16
 800141a:	0003      	movs	r3, r0
 800141c:	430c      	orrs	r4, r1
 800141e:	42a2      	cmp	r2, r4
 8001420:	d906      	bls.n	8001430 <__aeabi_ddiv+0x168>
 8001422:	9900      	ldr	r1, [sp, #0]
 8001424:	3b01      	subs	r3, #1
 8001426:	468c      	mov	ip, r1
 8001428:	4464      	add	r4, ip
 800142a:	42a1      	cmp	r1, r4
 800142c:	d800      	bhi.n	8001430 <__aeabi_ddiv+0x168>
 800142e:	e1e1      	b.n	80017f4 <__aeabi_ddiv+0x52c>
 8001430:	1aa0      	subs	r0, r4, r2
 8001432:	4642      	mov	r2, r8
 8001434:	0412      	lsls	r2, r2, #16
 8001436:	431a      	orrs	r2, r3
 8001438:	4693      	mov	fp, r2
 800143a:	464b      	mov	r3, r9
 800143c:	4659      	mov	r1, fp
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	001d      	movs	r5, r3
 8001442:	9304      	str	r3, [sp, #16]
 8001444:	040b      	lsls	r3, r1, #16
 8001446:	4649      	mov	r1, r9
 8001448:	0409      	lsls	r1, r1, #16
 800144a:	0c09      	lsrs	r1, r1, #16
 800144c:	000c      	movs	r4, r1
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435c      	muls	r4, r3
 8001452:	0c12      	lsrs	r2, r2, #16
 8001454:	436b      	muls	r3, r5
 8001456:	4688      	mov	r8, r1
 8001458:	4351      	muls	r1, r2
 800145a:	436a      	muls	r2, r5
 800145c:	0c25      	lsrs	r5, r4, #16
 800145e:	46ac      	mov	ip, r5
 8001460:	185b      	adds	r3, r3, r1
 8001462:	4463      	add	r3, ip
 8001464:	4299      	cmp	r1, r3
 8001466:	d903      	bls.n	8001470 <__aeabi_ddiv+0x1a8>
 8001468:	2180      	movs	r1, #128	@ 0x80
 800146a:	0249      	lsls	r1, r1, #9
 800146c:	468c      	mov	ip, r1
 800146e:	4462      	add	r2, ip
 8001470:	0c19      	lsrs	r1, r3, #16
 8001472:	0424      	lsls	r4, r4, #16
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	0c24      	lsrs	r4, r4, #16
 8001478:	188a      	adds	r2, r1, r2
 800147a:	191c      	adds	r4, r3, r4
 800147c:	4290      	cmp	r0, r2
 800147e:	d302      	bcc.n	8001486 <__aeabi_ddiv+0x1be>
 8001480:	d116      	bne.n	80014b0 <__aeabi_ddiv+0x1e8>
 8001482:	42a7      	cmp	r7, r4
 8001484:	d214      	bcs.n	80014b0 <__aeabi_ddiv+0x1e8>
 8001486:	465b      	mov	r3, fp
 8001488:	9d00      	ldr	r5, [sp, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	444f      	add	r7, r9
 800148e:	9305      	str	r3, [sp, #20]
 8001490:	454f      	cmp	r7, r9
 8001492:	419b      	sbcs	r3, r3
 8001494:	46ac      	mov	ip, r5
 8001496:	425b      	negs	r3, r3
 8001498:	4463      	add	r3, ip
 800149a:	18c0      	adds	r0, r0, r3
 800149c:	4285      	cmp	r5, r0
 800149e:	d300      	bcc.n	80014a2 <__aeabi_ddiv+0x1da>
 80014a0:	e1a1      	b.n	80017e6 <__aeabi_ddiv+0x51e>
 80014a2:	4282      	cmp	r2, r0
 80014a4:	d900      	bls.n	80014a8 <__aeabi_ddiv+0x1e0>
 80014a6:	e1f6      	b.n	8001896 <__aeabi_ddiv+0x5ce>
 80014a8:	d100      	bne.n	80014ac <__aeabi_ddiv+0x1e4>
 80014aa:	e1f1      	b.n	8001890 <__aeabi_ddiv+0x5c8>
 80014ac:	9b05      	ldr	r3, [sp, #20]
 80014ae:	469b      	mov	fp, r3
 80014b0:	1b3c      	subs	r4, r7, r4
 80014b2:	42a7      	cmp	r7, r4
 80014b4:	41bf      	sbcs	r7, r7
 80014b6:	9d00      	ldr	r5, [sp, #0]
 80014b8:	1a80      	subs	r0, r0, r2
 80014ba:	427f      	negs	r7, r7
 80014bc:	1bc0      	subs	r0, r0, r7
 80014be:	4285      	cmp	r5, r0
 80014c0:	d100      	bne.n	80014c4 <__aeabi_ddiv+0x1fc>
 80014c2:	e1d0      	b.n	8001866 <__aeabi_ddiv+0x59e>
 80014c4:	9902      	ldr	r1, [sp, #8]
 80014c6:	f7fe fecb 	bl	8000260 <__aeabi_uidivmod>
 80014ca:	9a03      	ldr	r2, [sp, #12]
 80014cc:	040b      	lsls	r3, r1, #16
 80014ce:	4342      	muls	r2, r0
 80014d0:	0c21      	lsrs	r1, r4, #16
 80014d2:	0007      	movs	r7, r0
 80014d4:	4319      	orrs	r1, r3
 80014d6:	428a      	cmp	r2, r1
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x214>
 80014da:	e178      	b.n	80017ce <__aeabi_ddiv+0x506>
 80014dc:	1a88      	subs	r0, r1, r2
 80014de:	9902      	ldr	r1, [sp, #8]
 80014e0:	f7fe febe 	bl	8000260 <__aeabi_uidivmod>
 80014e4:	9a03      	ldr	r2, [sp, #12]
 80014e6:	0424      	lsls	r4, r4, #16
 80014e8:	4342      	muls	r2, r0
 80014ea:	0409      	lsls	r1, r1, #16
 80014ec:	0c24      	lsrs	r4, r4, #16
 80014ee:	0003      	movs	r3, r0
 80014f0:	430c      	orrs	r4, r1
 80014f2:	42a2      	cmp	r2, r4
 80014f4:	d900      	bls.n	80014f8 <__aeabi_ddiv+0x230>
 80014f6:	e15d      	b.n	80017b4 <__aeabi_ddiv+0x4ec>
 80014f8:	4641      	mov	r1, r8
 80014fa:	1aa4      	subs	r4, r4, r2
 80014fc:	043a      	lsls	r2, r7, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	9d04      	ldr	r5, [sp, #16]
 8001502:	0413      	lsls	r3, r2, #16
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	4359      	muls	r1, r3
 8001508:	4647      	mov	r7, r8
 800150a:	436b      	muls	r3, r5
 800150c:	469c      	mov	ip, r3
 800150e:	0c10      	lsrs	r0, r2, #16
 8001510:	4347      	muls	r7, r0
 8001512:	0c0b      	lsrs	r3, r1, #16
 8001514:	44bc      	add	ip, r7
 8001516:	4463      	add	r3, ip
 8001518:	4368      	muls	r0, r5
 800151a:	429f      	cmp	r7, r3
 800151c:	d903      	bls.n	8001526 <__aeabi_ddiv+0x25e>
 800151e:	2580      	movs	r5, #128	@ 0x80
 8001520:	026d      	lsls	r5, r5, #9
 8001522:	46ac      	mov	ip, r5
 8001524:	4460      	add	r0, ip
 8001526:	0c1f      	lsrs	r7, r3, #16
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	183f      	adds	r7, r7, r0
 8001530:	185b      	adds	r3, r3, r1
 8001532:	42bc      	cmp	r4, r7
 8001534:	d200      	bcs.n	8001538 <__aeabi_ddiv+0x270>
 8001536:	e102      	b.n	800173e <__aeabi_ddiv+0x476>
 8001538:	d100      	bne.n	800153c <__aeabi_ddiv+0x274>
 800153a:	e0fd      	b.n	8001738 <__aeabi_ddiv+0x470>
 800153c:	2301      	movs	r3, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <__aeabi_ddiv+0x388>)
 8001542:	4453      	add	r3, sl
 8001544:	2b00      	cmp	r3, #0
 8001546:	dc00      	bgt.n	800154a <__aeabi_ddiv+0x282>
 8001548:	e0ae      	b.n	80016a8 <__aeabi_ddiv+0x3e0>
 800154a:	0751      	lsls	r1, r2, #29
 800154c:	d000      	beq.n	8001550 <__aeabi_ddiv+0x288>
 800154e:	e198      	b.n	8001882 <__aeabi_ddiv+0x5ba>
 8001550:	4659      	mov	r1, fp
 8001552:	01c9      	lsls	r1, r1, #7
 8001554:	d506      	bpl.n	8001564 <__aeabi_ddiv+0x29c>
 8001556:	4659      	mov	r1, fp
 8001558:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <__aeabi_ddiv+0x38c>)
 800155a:	4019      	ands	r1, r3
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	468b      	mov	fp, r1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4453      	add	r3, sl
 8001564:	493c      	ldr	r1, [pc, #240]	@ (8001658 <__aeabi_ddiv+0x390>)
 8001566:	428b      	cmp	r3, r1
 8001568:	dd00      	ble.n	800156c <__aeabi_ddiv+0x2a4>
 800156a:	e71a      	b.n	80013a2 <__aeabi_ddiv+0xda>
 800156c:	4659      	mov	r1, fp
 800156e:	08d2      	lsrs	r2, r2, #3
 8001570:	0749      	lsls	r1, r1, #29
 8001572:	4311      	orrs	r1, r2
 8001574:	465a      	mov	r2, fp
 8001576:	055b      	lsls	r3, r3, #21
 8001578:	0254      	lsls	r4, r2, #9
 800157a:	4688      	mov	r8, r1
 800157c:	0b24      	lsrs	r4, r4, #12
 800157e:	0d5b      	lsrs	r3, r3, #21
 8001580:	e702      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001582:	465a      	mov	r2, fp
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x2c4>
 800158a:	e07e      	b.n	800168a <__aeabi_ddiv+0x3c2>
 800158c:	465b      	mov	r3, fp
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_ddiv+0x2cc>
 8001592:	e100      	b.n	8001796 <__aeabi_ddiv+0x4ce>
 8001594:	4658      	mov	r0, fp
 8001596:	f001 fa73 	bl	8002a80 <__clzsi2>
 800159a:	0002      	movs	r2, r0
 800159c:	0003      	movs	r3, r0
 800159e:	3a0b      	subs	r2, #11
 80015a0:	271d      	movs	r7, #29
 80015a2:	9e00      	ldr	r6, [sp, #0]
 80015a4:	1aba      	subs	r2, r7, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4658      	mov	r0, fp
 80015aa:	40d6      	lsrs	r6, r2
 80015ac:	3908      	subs	r1, #8
 80015ae:	4088      	lsls	r0, r1
 80015b0:	0032      	movs	r2, r6
 80015b2:	4302      	orrs	r2, r0
 80015b4:	4693      	mov	fp, r2
 80015b6:	9a00      	ldr	r2, [sp, #0]
 80015b8:	408a      	lsls	r2, r1
 80015ba:	4928      	ldr	r1, [pc, #160]	@ (800165c <__aeabi_ddiv+0x394>)
 80015bc:	4453      	add	r3, sl
 80015be:	468a      	mov	sl, r1
 80015c0:	449a      	add	sl, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	e6c8      	b.n	8001358 <__aeabi_ddiv+0x90>
 80015c6:	465b      	mov	r3, fp
 80015c8:	4303      	orrs	r3, r0
 80015ca:	4699      	mov	r9, r3
 80015cc:	d056      	beq.n	800167c <__aeabi_ddiv+0x3b4>
 80015ce:	465b      	mov	r3, fp
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x30e>
 80015d4:	e0cd      	b.n	8001772 <__aeabi_ddiv+0x4aa>
 80015d6:	4658      	mov	r0, fp
 80015d8:	f001 fa52 	bl	8002a80 <__clzsi2>
 80015dc:	230b      	movs	r3, #11
 80015de:	425b      	negs	r3, r3
 80015e0:	469c      	mov	ip, r3
 80015e2:	0002      	movs	r2, r0
 80015e4:	4484      	add	ip, r0
 80015e6:	4666      	mov	r6, ip
 80015e8:	231d      	movs	r3, #29
 80015ea:	1b9b      	subs	r3, r3, r6
 80015ec:	0026      	movs	r6, r4
 80015ee:	0011      	movs	r1, r2
 80015f0:	4658      	mov	r0, fp
 80015f2:	40de      	lsrs	r6, r3
 80015f4:	3908      	subs	r1, #8
 80015f6:	4088      	lsls	r0, r1
 80015f8:	0033      	movs	r3, r6
 80015fa:	4303      	orrs	r3, r0
 80015fc:	4699      	mov	r9, r3
 80015fe:	0023      	movs	r3, r4
 8001600:	408b      	lsls	r3, r1
 8001602:	4698      	mov	r8, r3
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <__aeabi_ddiv+0x398>)
 8001606:	2400      	movs	r4, #0
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	469a      	mov	sl, r3
 800160c:	2300      	movs	r3, #0
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	e682      	b.n	8001318 <__aeabi_ddiv+0x50>
 8001612:	465a      	mov	r2, fp
 8001614:	4302      	orrs	r2, r0
 8001616:	4691      	mov	r9, r2
 8001618:	d12a      	bne.n	8001670 <__aeabi_ddiv+0x3a8>
 800161a:	2200      	movs	r2, #0
 800161c:	469a      	mov	sl, r3
 800161e:	2302      	movs	r3, #2
 8001620:	4690      	mov	r8, r2
 8001622:	2408      	movs	r4, #8
 8001624:	9303      	str	r3, [sp, #12]
 8001626:	e677      	b.n	8001318 <__aeabi_ddiv+0x50>
 8001628:	465a      	mov	r2, fp
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	431a      	orrs	r2, r3
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <__aeabi_ddiv+0x39c>)
 8001630:	469c      	mov	ip, r3
 8001632:	44e2      	add	sl, ip
 8001634:	2a00      	cmp	r2, #0
 8001636:	d117      	bne.n	8001668 <__aeabi_ddiv+0x3a0>
 8001638:	2302      	movs	r3, #2
 800163a:	431c      	orrs	r4, r3
 800163c:	2300      	movs	r3, #0
 800163e:	469b      	mov	fp, r3
 8001640:	3302      	adds	r3, #2
 8001642:	e689      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001644:	000007ff 	.word	0x000007ff
 8001648:	fffffc01 	.word	0xfffffc01
 800164c:	0800e860 	.word	0x0800e860
 8001650:	000003ff 	.word	0x000003ff
 8001654:	feffffff 	.word	0xfeffffff
 8001658:	000007fe 	.word	0x000007fe
 800165c:	000003f3 	.word	0x000003f3
 8001660:	fffffc0d 	.word	0xfffffc0d
 8001664:	fffff801 	.word	0xfffff801
 8001668:	2303      	movs	r3, #3
 800166a:	0032      	movs	r2, r6
 800166c:	431c      	orrs	r4, r3
 800166e:	e673      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001670:	469a      	mov	sl, r3
 8001672:	2303      	movs	r3, #3
 8001674:	46d9      	mov	r9, fp
 8001676:	240c      	movs	r4, #12
 8001678:	9303      	str	r3, [sp, #12]
 800167a:	e64d      	b.n	8001318 <__aeabi_ddiv+0x50>
 800167c:	2300      	movs	r3, #0
 800167e:	4698      	mov	r8, r3
 8001680:	469a      	mov	sl, r3
 8001682:	3301      	adds	r3, #1
 8001684:	2404      	movs	r4, #4
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	e646      	b.n	8001318 <__aeabi_ddiv+0x50>
 800168a:	2301      	movs	r3, #1
 800168c:	431c      	orrs	r4, r3
 800168e:	2300      	movs	r3, #0
 8001690:	469b      	mov	fp, r3
 8001692:	3301      	adds	r3, #1
 8001694:	e660      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001696:	2300      	movs	r3, #0
 8001698:	2480      	movs	r4, #128	@ 0x80
 800169a:	4698      	mov	r8, r3
 800169c:	2600      	movs	r6, #0
 800169e:	4b92      	ldr	r3, [pc, #584]	@ (80018e8 <__aeabi_ddiv+0x620>)
 80016a0:	0324      	lsls	r4, r4, #12
 80016a2:	e671      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80016a4:	2201      	movs	r2, #1
 80016a6:	4252      	negs	r2, r2
 80016a8:	2101      	movs	r1, #1
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	2938      	cmp	r1, #56	@ 0x38
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_ddiv+0x3ea>
 80016b0:	e666      	b.n	8001380 <__aeabi_ddiv+0xb8>
 80016b2:	291f      	cmp	r1, #31
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x3f0>
 80016b6:	e0ab      	b.n	8001810 <__aeabi_ddiv+0x548>
 80016b8:	201f      	movs	r0, #31
 80016ba:	4240      	negs	r0, r0
 80016bc:	1ac3      	subs	r3, r0, r3
 80016be:	4658      	mov	r0, fp
 80016c0:	40d8      	lsrs	r0, r3
 80016c2:	0003      	movs	r3, r0
 80016c4:	2920      	cmp	r1, #32
 80016c6:	d004      	beq.n	80016d2 <__aeabi_ddiv+0x40a>
 80016c8:	4658      	mov	r0, fp
 80016ca:	4988      	ldr	r1, [pc, #544]	@ (80018ec <__aeabi_ddiv+0x624>)
 80016cc:	4451      	add	r1, sl
 80016ce:	4088      	lsls	r0, r1
 80016d0:	4302      	orrs	r2, r0
 80016d2:	1e51      	subs	r1, r2, #1
 80016d4:	418a      	sbcs	r2, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	2307      	movs	r3, #7
 80016da:	0019      	movs	r1, r3
 80016dc:	2400      	movs	r4, #0
 80016de:	4011      	ands	r1, r2
 80016e0:	4213      	tst	r3, r2
 80016e2:	d00c      	beq.n	80016fe <__aeabi_ddiv+0x436>
 80016e4:	230f      	movs	r3, #15
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x426>
 80016ec:	e0f9      	b.n	80018e2 <__aeabi_ddiv+0x61a>
 80016ee:	1d11      	adds	r1, r2, #4
 80016f0:	4291      	cmp	r1, r2
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	000a      	movs	r2, r1
 80016f6:	425b      	negs	r3, r3
 80016f8:	0759      	lsls	r1, r3, #29
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	0b1c      	lsrs	r4, r3, #12
 80016fe:	08d2      	lsrs	r2, r2, #3
 8001700:	430a      	orrs	r2, r1
 8001702:	4690      	mov	r8, r2
 8001704:	2300      	movs	r3, #0
 8001706:	e63f      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001708:	2480      	movs	r4, #128	@ 0x80
 800170a:	464b      	mov	r3, r9
 800170c:	0324      	lsls	r4, r4, #12
 800170e:	4223      	tst	r3, r4
 8001710:	d009      	beq.n	8001726 <__aeabi_ddiv+0x45e>
 8001712:	465b      	mov	r3, fp
 8001714:	4223      	tst	r3, r4
 8001716:	d106      	bne.n	8001726 <__aeabi_ddiv+0x45e>
 8001718:	431c      	orrs	r4, r3
 800171a:	0324      	lsls	r4, r4, #12
 800171c:	002e      	movs	r6, r5
 800171e:	4690      	mov	r8, r2
 8001720:	4b71      	ldr	r3, [pc, #452]	@ (80018e8 <__aeabi_ddiv+0x620>)
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	e630      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001726:	2480      	movs	r4, #128	@ 0x80
 8001728:	464b      	mov	r3, r9
 800172a:	0324      	lsls	r4, r4, #12
 800172c:	431c      	orrs	r4, r3
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	9e02      	ldr	r6, [sp, #8]
 8001732:	4b6d      	ldr	r3, [pc, #436]	@ (80018e8 <__aeabi_ddiv+0x620>)
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	e627      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <__aeabi_ddiv+0x476>
 800173c:	e700      	b.n	8001540 <__aeabi_ddiv+0x278>
 800173e:	9800      	ldr	r0, [sp, #0]
 8001740:	1e51      	subs	r1, r2, #1
 8001742:	4684      	mov	ip, r0
 8001744:	4464      	add	r4, ip
 8001746:	4284      	cmp	r4, r0
 8001748:	d200      	bcs.n	800174c <__aeabi_ddiv+0x484>
 800174a:	e084      	b.n	8001856 <__aeabi_ddiv+0x58e>
 800174c:	42bc      	cmp	r4, r7
 800174e:	d200      	bcs.n	8001752 <__aeabi_ddiv+0x48a>
 8001750:	e0ae      	b.n	80018b0 <__aeabi_ddiv+0x5e8>
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0x48e>
 8001754:	e0c1      	b.n	80018da <__aeabi_ddiv+0x612>
 8001756:	000a      	movs	r2, r1
 8001758:	e6f0      	b.n	800153c <__aeabi_ddiv+0x274>
 800175a:	4542      	cmp	r2, r8
 800175c:	d900      	bls.n	8001760 <__aeabi_ddiv+0x498>
 800175e:	e62c      	b.n	80013ba <__aeabi_ddiv+0xf2>
 8001760:	464b      	mov	r3, r9
 8001762:	07dc      	lsls	r4, r3, #31
 8001764:	0858      	lsrs	r0, r3, #1
 8001766:	4643      	mov	r3, r8
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	431c      	orrs	r4, r3
 800176c:	4643      	mov	r3, r8
 800176e:	07df      	lsls	r7, r3, #31
 8001770:	e62a      	b.n	80013c8 <__aeabi_ddiv+0x100>
 8001772:	f001 f985 	bl	8002a80 <__clzsi2>
 8001776:	2315      	movs	r3, #21
 8001778:	469c      	mov	ip, r3
 800177a:	4484      	add	ip, r0
 800177c:	0002      	movs	r2, r0
 800177e:	4663      	mov	r3, ip
 8001780:	3220      	adds	r2, #32
 8001782:	2b1c      	cmp	r3, #28
 8001784:	dc00      	bgt.n	8001788 <__aeabi_ddiv+0x4c0>
 8001786:	e72e      	b.n	80015e6 <__aeabi_ddiv+0x31e>
 8001788:	0023      	movs	r3, r4
 800178a:	3808      	subs	r0, #8
 800178c:	4083      	lsls	r3, r0
 800178e:	4699      	mov	r9, r3
 8001790:	2300      	movs	r3, #0
 8001792:	4698      	mov	r8, r3
 8001794:	e736      	b.n	8001604 <__aeabi_ddiv+0x33c>
 8001796:	f001 f973 	bl	8002a80 <__clzsi2>
 800179a:	0002      	movs	r2, r0
 800179c:	0003      	movs	r3, r0
 800179e:	3215      	adds	r2, #21
 80017a0:	3320      	adds	r3, #32
 80017a2:	2a1c      	cmp	r2, #28
 80017a4:	dc00      	bgt.n	80017a8 <__aeabi_ddiv+0x4e0>
 80017a6:	e6fb      	b.n	80015a0 <__aeabi_ddiv+0x2d8>
 80017a8:	9900      	ldr	r1, [sp, #0]
 80017aa:	3808      	subs	r0, #8
 80017ac:	4081      	lsls	r1, r0
 80017ae:	2200      	movs	r2, #0
 80017b0:	468b      	mov	fp, r1
 80017b2:	e702      	b.n	80015ba <__aeabi_ddiv+0x2f2>
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	468c      	mov	ip, r1
 80017ba:	4464      	add	r4, ip
 80017bc:	42a1      	cmp	r1, r4
 80017be:	d900      	bls.n	80017c2 <__aeabi_ddiv+0x4fa>
 80017c0:	e69a      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017c2:	42a2      	cmp	r2, r4
 80017c4:	d800      	bhi.n	80017c8 <__aeabi_ddiv+0x500>
 80017c6:	e697      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017c8:	1e83      	subs	r3, r0, #2
 80017ca:	4464      	add	r4, ip
 80017cc:	e694      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017ce:	46ac      	mov	ip, r5
 80017d0:	4461      	add	r1, ip
 80017d2:	3f01      	subs	r7, #1
 80017d4:	428d      	cmp	r5, r1
 80017d6:	d900      	bls.n	80017da <__aeabi_ddiv+0x512>
 80017d8:	e680      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017da:	428a      	cmp	r2, r1
 80017dc:	d800      	bhi.n	80017e0 <__aeabi_ddiv+0x518>
 80017de:	e67d      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017e0:	1e87      	subs	r7, r0, #2
 80017e2:	4461      	add	r1, ip
 80017e4:	e67a      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017e6:	4285      	cmp	r5, r0
 80017e8:	d000      	beq.n	80017ec <__aeabi_ddiv+0x524>
 80017ea:	e65f      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 80017ec:	45b9      	cmp	r9, r7
 80017ee:	d900      	bls.n	80017f2 <__aeabi_ddiv+0x52a>
 80017f0:	e65c      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 80017f2:	e656      	b.n	80014a2 <__aeabi_ddiv+0x1da>
 80017f4:	42a2      	cmp	r2, r4
 80017f6:	d800      	bhi.n	80017fa <__aeabi_ddiv+0x532>
 80017f8:	e61a      	b.n	8001430 <__aeabi_ddiv+0x168>
 80017fa:	1e83      	subs	r3, r0, #2
 80017fc:	4464      	add	r4, ip
 80017fe:	e617      	b.n	8001430 <__aeabi_ddiv+0x168>
 8001800:	428a      	cmp	r2, r1
 8001802:	d800      	bhi.n	8001806 <__aeabi_ddiv+0x53e>
 8001804:	e600      	b.n	8001408 <__aeabi_ddiv+0x140>
 8001806:	46ac      	mov	ip, r5
 8001808:	1e83      	subs	r3, r0, #2
 800180a:	4698      	mov	r8, r3
 800180c:	4461      	add	r1, ip
 800180e:	e5fb      	b.n	8001408 <__aeabi_ddiv+0x140>
 8001810:	4837      	ldr	r0, [pc, #220]	@ (80018f0 <__aeabi_ddiv+0x628>)
 8001812:	0014      	movs	r4, r2
 8001814:	4450      	add	r0, sl
 8001816:	4082      	lsls	r2, r0
 8001818:	465b      	mov	r3, fp
 800181a:	0017      	movs	r7, r2
 800181c:	4083      	lsls	r3, r0
 800181e:	40cc      	lsrs	r4, r1
 8001820:	1e7a      	subs	r2, r7, #1
 8001822:	4197      	sbcs	r7, r2
 8001824:	4323      	orrs	r3, r4
 8001826:	433b      	orrs	r3, r7
 8001828:	001a      	movs	r2, r3
 800182a:	465b      	mov	r3, fp
 800182c:	40cb      	lsrs	r3, r1
 800182e:	0751      	lsls	r1, r2, #29
 8001830:	d009      	beq.n	8001846 <__aeabi_ddiv+0x57e>
 8001832:	210f      	movs	r1, #15
 8001834:	4011      	ands	r1, r2
 8001836:	2904      	cmp	r1, #4
 8001838:	d005      	beq.n	8001846 <__aeabi_ddiv+0x57e>
 800183a:	1d11      	adds	r1, r2, #4
 800183c:	4291      	cmp	r1, r2
 800183e:	4192      	sbcs	r2, r2
 8001840:	4252      	negs	r2, r2
 8001842:	189b      	adds	r3, r3, r2
 8001844:	000a      	movs	r2, r1
 8001846:	0219      	lsls	r1, r3, #8
 8001848:	d400      	bmi.n	800184c <__aeabi_ddiv+0x584>
 800184a:	e755      	b.n	80016f8 <__aeabi_ddiv+0x430>
 800184c:	2200      	movs	r2, #0
 800184e:	2301      	movs	r3, #1
 8001850:	2400      	movs	r4, #0
 8001852:	4690      	mov	r8, r2
 8001854:	e598      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001856:	000a      	movs	r2, r1
 8001858:	42bc      	cmp	r4, r7
 800185a:	d000      	beq.n	800185e <__aeabi_ddiv+0x596>
 800185c:	e66e      	b.n	800153c <__aeabi_ddiv+0x274>
 800185e:	454b      	cmp	r3, r9
 8001860:	d000      	beq.n	8001864 <__aeabi_ddiv+0x59c>
 8001862:	e66b      	b.n	800153c <__aeabi_ddiv+0x274>
 8001864:	e66c      	b.n	8001540 <__aeabi_ddiv+0x278>
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <__aeabi_ddiv+0x62c>)
 8001868:	4a23      	ldr	r2, [pc, #140]	@ (80018f8 <__aeabi_ddiv+0x630>)
 800186a:	4453      	add	r3, sl
 800186c:	4592      	cmp	sl, r2
 800186e:	da00      	bge.n	8001872 <__aeabi_ddiv+0x5aa>
 8001870:	e718      	b.n	80016a4 <__aeabi_ddiv+0x3dc>
 8001872:	2101      	movs	r1, #1
 8001874:	4249      	negs	r1, r1
 8001876:	1d0a      	adds	r2, r1, #4
 8001878:	428a      	cmp	r2, r1
 800187a:	4189      	sbcs	r1, r1
 800187c:	4249      	negs	r1, r1
 800187e:	448b      	add	fp, r1
 8001880:	e666      	b.n	8001550 <__aeabi_ddiv+0x288>
 8001882:	210f      	movs	r1, #15
 8001884:	4011      	ands	r1, r2
 8001886:	2904      	cmp	r1, #4
 8001888:	d100      	bne.n	800188c <__aeabi_ddiv+0x5c4>
 800188a:	e661      	b.n	8001550 <__aeabi_ddiv+0x288>
 800188c:	0011      	movs	r1, r2
 800188e:	e7f2      	b.n	8001876 <__aeabi_ddiv+0x5ae>
 8001890:	42bc      	cmp	r4, r7
 8001892:	d800      	bhi.n	8001896 <__aeabi_ddiv+0x5ce>
 8001894:	e60a      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 8001896:	2302      	movs	r3, #2
 8001898:	425b      	negs	r3, r3
 800189a:	469c      	mov	ip, r3
 800189c:	9900      	ldr	r1, [sp, #0]
 800189e:	444f      	add	r7, r9
 80018a0:	454f      	cmp	r7, r9
 80018a2:	419b      	sbcs	r3, r3
 80018a4:	44e3      	add	fp, ip
 80018a6:	468c      	mov	ip, r1
 80018a8:	425b      	negs	r3, r3
 80018aa:	4463      	add	r3, ip
 80018ac:	18c0      	adds	r0, r0, r3
 80018ae:	e5ff      	b.n	80014b0 <__aeabi_ddiv+0x1e8>
 80018b0:	4649      	mov	r1, r9
 80018b2:	9d00      	ldr	r5, [sp, #0]
 80018b4:	0048      	lsls	r0, r1, #1
 80018b6:	4548      	cmp	r0, r9
 80018b8:	4189      	sbcs	r1, r1
 80018ba:	46ac      	mov	ip, r5
 80018bc:	4249      	negs	r1, r1
 80018be:	4461      	add	r1, ip
 80018c0:	4681      	mov	r9, r0
 80018c2:	3a02      	subs	r2, #2
 80018c4:	1864      	adds	r4, r4, r1
 80018c6:	e7c7      	b.n	8001858 <__aeabi_ddiv+0x590>
 80018c8:	2480      	movs	r4, #128	@ 0x80
 80018ca:	465b      	mov	r3, fp
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	431c      	orrs	r4, r3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	4690      	mov	r8, r2
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__aeabi_ddiv+0x620>)
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	e556      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80018da:	4599      	cmp	r9, r3
 80018dc:	d3e8      	bcc.n	80018b0 <__aeabi_ddiv+0x5e8>
 80018de:	000a      	movs	r2, r1
 80018e0:	e7bd      	b.n	800185e <__aeabi_ddiv+0x596>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e708      	b.n	80016f8 <__aeabi_ddiv+0x430>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	000007ff 	.word	0x000007ff
 80018ec:	0000043e 	.word	0x0000043e
 80018f0:	0000041e 	.word	0x0000041e
 80018f4:	000003ff 	.word	0x000003ff
 80018f8:	fffffc02 	.word	0xfffffc02

080018fc <__eqdf2>:
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	4657      	mov	r7, sl
 8001900:	46de      	mov	lr, fp
 8001902:	464e      	mov	r6, r9
 8001904:	4645      	mov	r5, r8
 8001906:	b5e0      	push	{r5, r6, r7, lr}
 8001908:	000d      	movs	r5, r1
 800190a:	0004      	movs	r4, r0
 800190c:	0fe8      	lsrs	r0, r5, #31
 800190e:	4683      	mov	fp, r0
 8001910:	0309      	lsls	r1, r1, #12
 8001912:	0fd8      	lsrs	r0, r3, #31
 8001914:	0b09      	lsrs	r1, r1, #12
 8001916:	4682      	mov	sl, r0
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <__eqdf2+0x84>)
 800191a:	468c      	mov	ip, r1
 800191c:	031f      	lsls	r7, r3, #12
 800191e:	0069      	lsls	r1, r5, #1
 8001920:	005e      	lsls	r6, r3, #1
 8001922:	0d49      	lsrs	r1, r1, #21
 8001924:	0b3f      	lsrs	r7, r7, #12
 8001926:	0d76      	lsrs	r6, r6, #21
 8001928:	4281      	cmp	r1, r0
 800192a:	d018      	beq.n	800195e <__eqdf2+0x62>
 800192c:	4286      	cmp	r6, r0
 800192e:	d00f      	beq.n	8001950 <__eqdf2+0x54>
 8001930:	2001      	movs	r0, #1
 8001932:	42b1      	cmp	r1, r6
 8001934:	d10d      	bne.n	8001952 <__eqdf2+0x56>
 8001936:	45bc      	cmp	ip, r7
 8001938:	d10b      	bne.n	8001952 <__eqdf2+0x56>
 800193a:	4294      	cmp	r4, r2
 800193c:	d109      	bne.n	8001952 <__eqdf2+0x56>
 800193e:	45d3      	cmp	fp, sl
 8001940:	d01c      	beq.n	800197c <__eqdf2+0x80>
 8001942:	2900      	cmp	r1, #0
 8001944:	d105      	bne.n	8001952 <__eqdf2+0x56>
 8001946:	4660      	mov	r0, ip
 8001948:	4320      	orrs	r0, r4
 800194a:	1e43      	subs	r3, r0, #1
 800194c:	4198      	sbcs	r0, r3
 800194e:	e000      	b.n	8001952 <__eqdf2+0x56>
 8001950:	2001      	movs	r0, #1
 8001952:	bcf0      	pop	{r4, r5, r6, r7}
 8001954:	46bb      	mov	fp, r7
 8001956:	46b2      	mov	sl, r6
 8001958:	46a9      	mov	r9, r5
 800195a:	46a0      	mov	r8, r4
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	2001      	movs	r0, #1
 8001960:	428e      	cmp	r6, r1
 8001962:	d1f6      	bne.n	8001952 <__eqdf2+0x56>
 8001964:	4661      	mov	r1, ip
 8001966:	4339      	orrs	r1, r7
 8001968:	000f      	movs	r7, r1
 800196a:	4317      	orrs	r7, r2
 800196c:	4327      	orrs	r7, r4
 800196e:	d1f0      	bne.n	8001952 <__eqdf2+0x56>
 8001970:	465b      	mov	r3, fp
 8001972:	4652      	mov	r2, sl
 8001974:	1a98      	subs	r0, r3, r2
 8001976:	1e43      	subs	r3, r0, #1
 8001978:	4198      	sbcs	r0, r3
 800197a:	e7ea      	b.n	8001952 <__eqdf2+0x56>
 800197c:	2000      	movs	r0, #0
 800197e:	e7e8      	b.n	8001952 <__eqdf2+0x56>
 8001980:	000007ff 	.word	0x000007ff

08001984 <__gedf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4657      	mov	r7, sl
 8001988:	464e      	mov	r6, r9
 800198a:	4645      	mov	r5, r8
 800198c:	46de      	mov	lr, fp
 800198e:	b5e0      	push	{r5, r6, r7, lr}
 8001990:	000d      	movs	r5, r1
 8001992:	030f      	lsls	r7, r1, #12
 8001994:	0b39      	lsrs	r1, r7, #12
 8001996:	b083      	sub	sp, #12
 8001998:	0004      	movs	r4, r0
 800199a:	4680      	mov	r8, r0
 800199c:	9101      	str	r1, [sp, #4]
 800199e:	0058      	lsls	r0, r3, #1
 80019a0:	0fe9      	lsrs	r1, r5, #31
 80019a2:	4f31      	ldr	r7, [pc, #196]	@ (8001a68 <__gedf2+0xe4>)
 80019a4:	0d40      	lsrs	r0, r0, #21
 80019a6:	468c      	mov	ip, r1
 80019a8:	006e      	lsls	r6, r5, #1
 80019aa:	0319      	lsls	r1, r3, #12
 80019ac:	4682      	mov	sl, r0
 80019ae:	4691      	mov	r9, r2
 80019b0:	0d76      	lsrs	r6, r6, #21
 80019b2:	0b09      	lsrs	r1, r1, #12
 80019b4:	0fd8      	lsrs	r0, r3, #31
 80019b6:	42be      	cmp	r6, r7
 80019b8:	d01f      	beq.n	80019fa <__gedf2+0x76>
 80019ba:	45ba      	cmp	sl, r7
 80019bc:	d00f      	beq.n	80019de <__gedf2+0x5a>
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d12f      	bne.n	8001a22 <__gedf2+0x9e>
 80019c2:	4655      	mov	r5, sl
 80019c4:	9e01      	ldr	r6, [sp, #4]
 80019c6:	4334      	orrs	r4, r6
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d127      	bne.n	8001a1c <__gedf2+0x98>
 80019cc:	430a      	orrs	r2, r1
 80019ce:	d03a      	beq.n	8001a46 <__gedf2+0xc2>
 80019d0:	2c00      	cmp	r4, #0
 80019d2:	d145      	bne.n	8001a60 <__gedf2+0xdc>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d11a      	bne.n	8001a0e <__gedf2+0x8a>
 80019d8:	2001      	movs	r0, #1
 80019da:	4240      	negs	r0, r0
 80019dc:	e017      	b.n	8001a0e <__gedf2+0x8a>
 80019de:	4311      	orrs	r1, r2
 80019e0:	d13b      	bne.n	8001a5a <__gedf2+0xd6>
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	d102      	bne.n	80019ec <__gedf2+0x68>
 80019e6:	9f01      	ldr	r7, [sp, #4]
 80019e8:	4327      	orrs	r7, r4
 80019ea:	d0f3      	beq.n	80019d4 <__gedf2+0x50>
 80019ec:	4584      	cmp	ip, r0
 80019ee:	d109      	bne.n	8001a04 <__gedf2+0x80>
 80019f0:	4663      	mov	r3, ip
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <__gedf2+0x54>
 80019f6:	4660      	mov	r0, ip
 80019f8:	e009      	b.n	8001a0e <__gedf2+0x8a>
 80019fa:	9f01      	ldr	r7, [sp, #4]
 80019fc:	4327      	orrs	r7, r4
 80019fe:	d12c      	bne.n	8001a5a <__gedf2+0xd6>
 8001a00:	45b2      	cmp	sl, r6
 8001a02:	d024      	beq.n	8001a4e <__gedf2+0xca>
 8001a04:	4663      	mov	r3, ip
 8001a06:	2002      	movs	r0, #2
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4018      	ands	r0, r3
 8001a0c:	3801      	subs	r0, #1
 8001a0e:	b003      	add	sp, #12
 8001a10:	bcf0      	pop	{r4, r5, r6, r7}
 8001a12:	46bb      	mov	fp, r7
 8001a14:	46b2      	mov	sl, r6
 8001a16:	46a9      	mov	r9, r5
 8001a18:	46a0      	mov	r8, r4
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1c:	2c00      	cmp	r4, #0
 8001a1e:	d0d9      	beq.n	80019d4 <__gedf2+0x50>
 8001a20:	e7e4      	b.n	80019ec <__gedf2+0x68>
 8001a22:	4654      	mov	r4, sl
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d0ed      	beq.n	8001a04 <__gedf2+0x80>
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d1eb      	bne.n	8001a04 <__gedf2+0x80>
 8001a2c:	4556      	cmp	r6, sl
 8001a2e:	dce9      	bgt.n	8001a04 <__gedf2+0x80>
 8001a30:	dbde      	blt.n	80019f0 <__gedf2+0x6c>
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d8e5      	bhi.n	8001a04 <__gedf2+0x80>
 8001a38:	d1da      	bne.n	80019f0 <__gedf2+0x6c>
 8001a3a:	45c8      	cmp	r8, r9
 8001a3c:	d8e2      	bhi.n	8001a04 <__gedf2+0x80>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	45c8      	cmp	r8, r9
 8001a42:	d2e4      	bcs.n	8001a0e <__gedf2+0x8a>
 8001a44:	e7d4      	b.n	80019f0 <__gedf2+0x6c>
 8001a46:	2000      	movs	r0, #0
 8001a48:	2c00      	cmp	r4, #0
 8001a4a:	d0e0      	beq.n	8001a0e <__gedf2+0x8a>
 8001a4c:	e7da      	b.n	8001a04 <__gedf2+0x80>
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	d103      	bne.n	8001a5a <__gedf2+0xd6>
 8001a52:	4584      	cmp	ip, r0
 8001a54:	d1d6      	bne.n	8001a04 <__gedf2+0x80>
 8001a56:	2000      	movs	r0, #0
 8001a58:	e7d9      	b.n	8001a0e <__gedf2+0x8a>
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	e7d6      	b.n	8001a0e <__gedf2+0x8a>
 8001a60:	4584      	cmp	ip, r0
 8001a62:	d0e6      	beq.n	8001a32 <__gedf2+0xae>
 8001a64:	e7ce      	b.n	8001a04 <__gedf2+0x80>
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__ledf2>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4657      	mov	r7, sl
 8001a70:	464e      	mov	r6, r9
 8001a72:	4645      	mov	r5, r8
 8001a74:	46de      	mov	lr, fp
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	000d      	movs	r5, r1
 8001a7a:	030f      	lsls	r7, r1, #12
 8001a7c:	0004      	movs	r4, r0
 8001a7e:	4680      	mov	r8, r0
 8001a80:	0fe8      	lsrs	r0, r5, #31
 8001a82:	0b39      	lsrs	r1, r7, #12
 8001a84:	4684      	mov	ip, r0
 8001a86:	b083      	sub	sp, #12
 8001a88:	0058      	lsls	r0, r3, #1
 8001a8a:	4f30      	ldr	r7, [pc, #192]	@ (8001b4c <__ledf2+0xe0>)
 8001a8c:	0d40      	lsrs	r0, r0, #21
 8001a8e:	9101      	str	r1, [sp, #4]
 8001a90:	031e      	lsls	r6, r3, #12
 8001a92:	0069      	lsls	r1, r5, #1
 8001a94:	4682      	mov	sl, r0
 8001a96:	4691      	mov	r9, r2
 8001a98:	0d49      	lsrs	r1, r1, #21
 8001a9a:	0b36      	lsrs	r6, r6, #12
 8001a9c:	0fd8      	lsrs	r0, r3, #31
 8001a9e:	42b9      	cmp	r1, r7
 8001aa0:	d020      	beq.n	8001ae4 <__ledf2+0x78>
 8001aa2:	45ba      	cmp	sl, r7
 8001aa4:	d00f      	beq.n	8001ac6 <__ledf2+0x5a>
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d12b      	bne.n	8001b02 <__ledf2+0x96>
 8001aaa:	9901      	ldr	r1, [sp, #4]
 8001aac:	430c      	orrs	r4, r1
 8001aae:	4651      	mov	r1, sl
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d137      	bne.n	8001b24 <__ledf2+0xb8>
 8001ab4:	4332      	orrs	r2, r6
 8001ab6:	d038      	beq.n	8001b2a <__ledf2+0xbe>
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d144      	bne.n	8001b46 <__ledf2+0xda>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d119      	bne.n	8001af4 <__ledf2+0x88>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	4240      	negs	r0, r0
 8001ac4:	e016      	b.n	8001af4 <__ledf2+0x88>
 8001ac6:	4316      	orrs	r6, r2
 8001ac8:	d113      	bne.n	8001af2 <__ledf2+0x86>
 8001aca:	2900      	cmp	r1, #0
 8001acc:	d102      	bne.n	8001ad4 <__ledf2+0x68>
 8001ace:	9f01      	ldr	r7, [sp, #4]
 8001ad0:	4327      	orrs	r7, r4
 8001ad2:	d0f3      	beq.n	8001abc <__ledf2+0x50>
 8001ad4:	4584      	cmp	ip, r0
 8001ad6:	d020      	beq.n	8001b1a <__ledf2+0xae>
 8001ad8:	4663      	mov	r3, ip
 8001ada:	2002      	movs	r0, #2
 8001adc:	3b01      	subs	r3, #1
 8001ade:	4018      	ands	r0, r3
 8001ae0:	3801      	subs	r0, #1
 8001ae2:	e007      	b.n	8001af4 <__ledf2+0x88>
 8001ae4:	9f01      	ldr	r7, [sp, #4]
 8001ae6:	4327      	orrs	r7, r4
 8001ae8:	d103      	bne.n	8001af2 <__ledf2+0x86>
 8001aea:	458a      	cmp	sl, r1
 8001aec:	d1f4      	bne.n	8001ad8 <__ledf2+0x6c>
 8001aee:	4316      	orrs	r6, r2
 8001af0:	d01f      	beq.n	8001b32 <__ledf2+0xc6>
 8001af2:	2002      	movs	r0, #2
 8001af4:	b003      	add	sp, #12
 8001af6:	bcf0      	pop	{r4, r5, r6, r7}
 8001af8:	46bb      	mov	fp, r7
 8001afa:	46b2      	mov	sl, r6
 8001afc:	46a9      	mov	r9, r5
 8001afe:	46a0      	mov	r8, r4
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	4654      	mov	r4, sl
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	d0e7      	beq.n	8001ad8 <__ledf2+0x6c>
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d1e5      	bne.n	8001ad8 <__ledf2+0x6c>
 8001b0c:	4551      	cmp	r1, sl
 8001b0e:	dce3      	bgt.n	8001ad8 <__ledf2+0x6c>
 8001b10:	db03      	blt.n	8001b1a <__ledf2+0xae>
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	42b3      	cmp	r3, r6
 8001b16:	d8df      	bhi.n	8001ad8 <__ledf2+0x6c>
 8001b18:	d00f      	beq.n	8001b3a <__ledf2+0xce>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0cf      	beq.n	8001ac0 <__ledf2+0x54>
 8001b20:	4660      	mov	r0, ip
 8001b22:	e7e7      	b.n	8001af4 <__ledf2+0x88>
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d0c9      	beq.n	8001abc <__ledf2+0x50>
 8001b28:	e7d4      	b.n	8001ad4 <__ledf2+0x68>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	2c00      	cmp	r4, #0
 8001b2e:	d0e1      	beq.n	8001af4 <__ledf2+0x88>
 8001b30:	e7d2      	b.n	8001ad8 <__ledf2+0x6c>
 8001b32:	4584      	cmp	ip, r0
 8001b34:	d1d0      	bne.n	8001ad8 <__ledf2+0x6c>
 8001b36:	2000      	movs	r0, #0
 8001b38:	e7dc      	b.n	8001af4 <__ledf2+0x88>
 8001b3a:	45c8      	cmp	r8, r9
 8001b3c:	d8cc      	bhi.n	8001ad8 <__ledf2+0x6c>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	45c8      	cmp	r8, r9
 8001b42:	d2d7      	bcs.n	8001af4 <__ledf2+0x88>
 8001b44:	e7e9      	b.n	8001b1a <__ledf2+0xae>
 8001b46:	4584      	cmp	ip, r0
 8001b48:	d0e3      	beq.n	8001b12 <__ledf2+0xa6>
 8001b4a:	e7c5      	b.n	8001ad8 <__ledf2+0x6c>
 8001b4c:	000007ff 	.word	0x000007ff

08001b50 <__aeabi_dmul>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	46de      	mov	lr, fp
 8001b56:	464e      	mov	r6, r9
 8001b58:	4645      	mov	r5, r8
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	001f      	movs	r7, r3
 8001b5e:	030b      	lsls	r3, r1, #12
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0016      	movs	r6, r2
 8001b64:	469a      	mov	sl, r3
 8001b66:	0fca      	lsrs	r2, r1, #31
 8001b68:	004b      	lsls	r3, r1, #1
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	b087      	sub	sp, #28
 8001b70:	0d5b      	lsrs	r3, r3, #21
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dmul+0x26>
 8001b74:	e0d5      	b.n	8001d22 <__aeabi_dmul+0x1d2>
 8001b76:	4abb      	ldr	r2, [pc, #748]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dmul+0x2e>
 8001b7c:	e0f8      	b.n	8001d70 <__aeabi_dmul+0x220>
 8001b7e:	4651      	mov	r1, sl
 8001b80:	0f42      	lsrs	r2, r0, #29
 8001b82:	00c9      	lsls	r1, r1, #3
 8001b84:	430a      	orrs	r2, r1
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	00c2      	lsls	r2, r0, #3
 8001b8e:	4691      	mov	r9, r2
 8001b90:	4ab5      	ldr	r2, [pc, #724]	@ (8001e68 <__aeabi_dmul+0x318>)
 8001b92:	468a      	mov	sl, r1
 8001b94:	189d      	adds	r5, r3, r2
 8001b96:	2300      	movs	r3, #0
 8001b98:	4698      	mov	r8, r3
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	033c      	lsls	r4, r7, #12
 8001b9e:	007b      	lsls	r3, r7, #1
 8001ba0:	0ffa      	lsrs	r2, r7, #31
 8001ba2:	0030      	movs	r0, r6
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	0d5b      	lsrs	r3, r3, #21
 8001ba8:	9200      	str	r2, [sp, #0]
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x5e>
 8001bac:	e096      	b.n	8001cdc <__aeabi_dmul+0x18c>
 8001bae:	4aad      	ldr	r2, [pc, #692]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <__aeabi_dmul+0xc8>
 8001bb4:	0f72      	lsrs	r2, r6, #29
 8001bb6:	00e4      	lsls	r4, r4, #3
 8001bb8:	4322      	orrs	r2, r4
 8001bba:	2480      	movs	r4, #128	@ 0x80
 8001bbc:	0424      	lsls	r4, r4, #16
 8001bbe:	4314      	orrs	r4, r2
 8001bc0:	4aa9      	ldr	r2, [pc, #676]	@ (8001e68 <__aeabi_dmul+0x318>)
 8001bc2:	00f0      	lsls	r0, r6, #3
 8001bc4:	4694      	mov	ip, r2
 8001bc6:	4463      	add	r3, ip
 8001bc8:	195b      	adds	r3, r3, r5
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	4642      	mov	r2, r8
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	2a0a      	cmp	r2, #10
 8001bd4:	dc42      	bgt.n	8001c5c <__aeabi_dmul+0x10c>
 8001bd6:	465a      	mov	r2, fp
 8001bd8:	9900      	ldr	r1, [sp, #0]
 8001bda:	404a      	eors	r2, r1
 8001bdc:	4693      	mov	fp, r2
 8001bde:	4642      	mov	r2, r8
 8001be0:	2a02      	cmp	r2, #2
 8001be2:	dc32      	bgt.n	8001c4a <__aeabi_dmul+0xfa>
 8001be4:	3a01      	subs	r2, #1
 8001be6:	2a01      	cmp	r2, #1
 8001be8:	d900      	bls.n	8001bec <__aeabi_dmul+0x9c>
 8001bea:	e149      	b.n	8001e80 <__aeabi_dmul+0x330>
 8001bec:	2e02      	cmp	r6, #2
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dmul+0xa2>
 8001bf0:	e0ca      	b.n	8001d88 <__aeabi_dmul+0x238>
 8001bf2:	2e01      	cmp	r6, #1
 8001bf4:	d13d      	bne.n	8001c72 <__aeabi_dmul+0x122>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	465a      	mov	r2, fp
 8001c00:	051b      	lsls	r3, r3, #20
 8001c02:	4323      	orrs	r3, r4
 8001c04:	07d2      	lsls	r2, r2, #31
 8001c06:	4313      	orrs	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	b007      	add	sp, #28
 8001c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c0e:	46bb      	mov	fp, r7
 8001c10:	46b2      	mov	sl, r6
 8001c12:	46a9      	mov	r9, r5
 8001c14:	46a0      	mov	r8, r4
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	4b92      	ldr	r3, [pc, #584]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001c1a:	4326      	orrs	r6, r4
 8001c1c:	18eb      	adds	r3, r5, r3
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dmul+0xd4>
 8001c22:	e0bb      	b.n	8001d9c <__aeabi_dmul+0x24c>
 8001c24:	2203      	movs	r2, #3
 8001c26:	4641      	mov	r1, r8
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	465a      	mov	r2, fp
 8001c2c:	4688      	mov	r8, r1
 8001c2e:	9900      	ldr	r1, [sp, #0]
 8001c30:	404a      	eors	r2, r1
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0109      	lsls	r1, r1, #4
 8001c36:	468c      	mov	ip, r1
 8001c38:	0029      	movs	r1, r5
 8001c3a:	4461      	add	r1, ip
 8001c3c:	9101      	str	r1, [sp, #4]
 8001c3e:	4641      	mov	r1, r8
 8001c40:	290a      	cmp	r1, #10
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dmul+0xf6>
 8001c44:	e233      	b.n	80020ae <__aeabi_dmul+0x55e>
 8001c46:	4693      	mov	fp, r2
 8001c48:	2603      	movs	r6, #3
 8001c4a:	4642      	mov	r2, r8
 8001c4c:	2701      	movs	r7, #1
 8001c4e:	4097      	lsls	r7, r2
 8001c50:	21a6      	movs	r1, #166	@ 0xa6
 8001c52:	003a      	movs	r2, r7
 8001c54:	00c9      	lsls	r1, r1, #3
 8001c56:	400a      	ands	r2, r1
 8001c58:	420f      	tst	r7, r1
 8001c5a:	d031      	beq.n	8001cc0 <__aeabi_dmul+0x170>
 8001c5c:	9e02      	ldr	r6, [sp, #8]
 8001c5e:	2e02      	cmp	r6, #2
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dmul+0x114>
 8001c62:	e235      	b.n	80020d0 <__aeabi_dmul+0x580>
 8001c64:	2e03      	cmp	r6, #3
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dmul+0x11a>
 8001c68:	e1d2      	b.n	8002010 <__aeabi_dmul+0x4c0>
 8001c6a:	4654      	mov	r4, sl
 8001c6c:	4648      	mov	r0, r9
 8001c6e:	2e01      	cmp	r6, #1
 8001c70:	d0c1      	beq.n	8001bf6 <__aeabi_dmul+0xa6>
 8001c72:	9a01      	ldr	r2, [sp, #4]
 8001c74:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <__aeabi_dmul+0x31c>)
 8001c76:	4694      	mov	ip, r2
 8001c78:	4463      	add	r3, ip
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_dmul+0x130>
 8001c7e:	e0c0      	b.n	8001e02 <__aeabi_dmul+0x2b2>
 8001c80:	0742      	lsls	r2, r0, #29
 8001c82:	d009      	beq.n	8001c98 <__aeabi_dmul+0x148>
 8001c84:	220f      	movs	r2, #15
 8001c86:	4002      	ands	r2, r0
 8001c88:	2a04      	cmp	r2, #4
 8001c8a:	d005      	beq.n	8001c98 <__aeabi_dmul+0x148>
 8001c8c:	1d02      	adds	r2, r0, #4
 8001c8e:	4282      	cmp	r2, r0
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	4240      	negs	r0, r0
 8001c94:	1824      	adds	r4, r4, r0
 8001c96:	0010      	movs	r0, r2
 8001c98:	01e2      	lsls	r2, r4, #7
 8001c9a:	d506      	bpl.n	8001caa <__aeabi_dmul+0x15a>
 8001c9c:	4b74      	ldr	r3, [pc, #464]	@ (8001e70 <__aeabi_dmul+0x320>)
 8001c9e:	9a01      	ldr	r2, [sp, #4]
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	4694      	mov	ip, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4463      	add	r3, ip
 8001caa:	4a72      	ldr	r2, [pc, #456]	@ (8001e74 <__aeabi_dmul+0x324>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	dc6b      	bgt.n	8001d88 <__aeabi_dmul+0x238>
 8001cb0:	0762      	lsls	r2, r4, #29
 8001cb2:	08c0      	lsrs	r0, r0, #3
 8001cb4:	0264      	lsls	r4, r4, #9
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	0b24      	lsrs	r4, r4, #12
 8001cbc:	0d5b      	lsrs	r3, r3, #21
 8001cbe:	e79d      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001cc0:	2190      	movs	r1, #144	@ 0x90
 8001cc2:	0089      	lsls	r1, r1, #2
 8001cc4:	420f      	tst	r7, r1
 8001cc6:	d163      	bne.n	8001d90 <__aeabi_dmul+0x240>
 8001cc8:	2288      	movs	r2, #136	@ 0x88
 8001cca:	423a      	tst	r2, r7
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x180>
 8001cce:	e0d7      	b.n	8001e80 <__aeabi_dmul+0x330>
 8001cd0:	9b00      	ldr	r3, [sp, #0]
 8001cd2:	46a2      	mov	sl, r4
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	4681      	mov	r9, r0
 8001cd8:	9602      	str	r6, [sp, #8]
 8001cda:	e7bf      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001cdc:	0023      	movs	r3, r4
 8001cde:	4333      	orrs	r3, r6
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dmul+0x194>
 8001ce2:	e07f      	b.n	8001de4 <__aeabi_dmul+0x294>
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dmul+0x19a>
 8001ce8:	e1ad      	b.n	8002046 <__aeabi_dmul+0x4f6>
 8001cea:	0020      	movs	r0, r4
 8001cec:	f000 fec8 	bl	8002a80 <__clzsi2>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3a0b      	subs	r2, #11
 8001cf6:	201d      	movs	r0, #29
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	1a82      	subs	r2, r0, r2
 8001cfc:	0030      	movs	r0, r6
 8001cfe:	3908      	subs	r1, #8
 8001d00:	40d0      	lsrs	r0, r2
 8001d02:	408c      	lsls	r4, r1
 8001d04:	4304      	orrs	r4, r0
 8001d06:	0030      	movs	r0, r6
 8001d08:	4088      	lsls	r0, r1
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <__aeabi_dmul+0x328>)
 8001d0c:	1aeb      	subs	r3, r5, r3
 8001d0e:	4694      	mov	ip, r2
 8001d10:	4463      	add	r3, ip
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	4642      	mov	r2, r8
 8001d18:	2600      	movs	r6, #0
 8001d1a:	2a0a      	cmp	r2, #10
 8001d1c:	dc00      	bgt.n	8001d20 <__aeabi_dmul+0x1d0>
 8001d1e:	e75a      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001d20:	e79c      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001d22:	4653      	mov	r3, sl
 8001d24:	4303      	orrs	r3, r0
 8001d26:	4699      	mov	r9, r3
 8001d28:	d054      	beq.n	8001dd4 <__aeabi_dmul+0x284>
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dmul+0x1e2>
 8001d30:	e177      	b.n	8002022 <__aeabi_dmul+0x4d2>
 8001d32:	4650      	mov	r0, sl
 8001d34:	f000 fea4 	bl	8002a80 <__clzsi2>
 8001d38:	230b      	movs	r3, #11
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	0002      	movs	r2, r0
 8001d40:	4484      	add	ip, r0
 8001d42:	0011      	movs	r1, r2
 8001d44:	4650      	mov	r0, sl
 8001d46:	3908      	subs	r1, #8
 8001d48:	4088      	lsls	r0, r1
 8001d4a:	231d      	movs	r3, #29
 8001d4c:	4680      	mov	r8, r0
 8001d4e:	4660      	mov	r0, ip
 8001d50:	1a1b      	subs	r3, r3, r0
 8001d52:	0020      	movs	r0, r4
 8001d54:	40d8      	lsrs	r0, r3
 8001d56:	0003      	movs	r3, r0
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	469a      	mov	sl, r3
 8001d5e:	0023      	movs	r3, r4
 8001d60:	408b      	lsls	r3, r1
 8001d62:	4699      	mov	r9, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	4d44      	ldr	r5, [pc, #272]	@ (8001e78 <__aeabi_dmul+0x328>)
 8001d68:	4698      	mov	r8, r3
 8001d6a:	1aad      	subs	r5, r5, r2
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	e715      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001d70:	4652      	mov	r2, sl
 8001d72:	4302      	orrs	r2, r0
 8001d74:	4691      	mov	r9, r2
 8001d76:	d126      	bne.n	8001dc6 <__aeabi_dmul+0x276>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	001d      	movs	r5, r3
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	4692      	mov	sl, r2
 8001d80:	3208      	adds	r2, #8
 8001d82:	4690      	mov	r8, r2
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	e709      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001d88:	2400      	movs	r4, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001d8e:	e735      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2480      	movs	r4, #128	@ 0x80
 8001d94:	469b      	mov	fp, r3
 8001d96:	0324      	lsls	r4, r4, #12
 8001d98:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001d9a:	e72f      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4641      	mov	r1, r8
 8001da0:	4311      	orrs	r1, r2
 8001da2:	2280      	movs	r2, #128	@ 0x80
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	4694      	mov	ip, r2
 8001da8:	002a      	movs	r2, r5
 8001daa:	4462      	add	r2, ip
 8001dac:	4688      	mov	r8, r1
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	290a      	cmp	r1, #10
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dmul+0x266>
 8001db4:	e752      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001db6:	465a      	mov	r2, fp
 8001db8:	2000      	movs	r0, #0
 8001dba:	9900      	ldr	r1, [sp, #0]
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	404a      	eors	r2, r1
 8001dc0:	4693      	mov	fp, r2
 8001dc2:	2602      	movs	r6, #2
 8001dc4:	e70b      	b.n	8001bde <__aeabi_dmul+0x8e>
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	001d      	movs	r5, r3
 8001dca:	2303      	movs	r3, #3
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4690      	mov	r8, r2
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	e6e3      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	3304      	adds	r3, #4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	2500      	movs	r5, #0
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	e6db      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001de4:	4642      	mov	r2, r8
 8001de6:	3301      	adds	r3, #1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	002b      	movs	r3, r5
 8001dec:	4690      	mov	r8, r2
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	9201      	str	r2, [sp, #4]
 8001df2:	4642      	mov	r2, r8
 8001df4:	2400      	movs	r4, #0
 8001df6:	2000      	movs	r0, #0
 8001df8:	2601      	movs	r6, #1
 8001dfa:	2a0a      	cmp	r2, #10
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_dmul+0x2b0>
 8001dfe:	e6ea      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e00:	e72c      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001e02:	2201      	movs	r2, #1
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	2a38      	cmp	r2, #56	@ 0x38
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_dmul+0x2bc>
 8001e0a:	e6f4      	b.n	8001bf6 <__aeabi_dmul+0xa6>
 8001e0c:	2a1f      	cmp	r2, #31
 8001e0e:	dc00      	bgt.n	8001e12 <__aeabi_dmul+0x2c2>
 8001e10:	e12a      	b.n	8002068 <__aeabi_dmul+0x518>
 8001e12:	211f      	movs	r1, #31
 8001e14:	4249      	negs	r1, r1
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	0021      	movs	r1, r4
 8001e1a:	40d9      	lsrs	r1, r3
 8001e1c:	000b      	movs	r3, r1
 8001e1e:	2a20      	cmp	r2, #32
 8001e20:	d005      	beq.n	8001e2e <__aeabi_dmul+0x2de>
 8001e22:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <__aeabi_dmul+0x32c>)
 8001e24:	9d01      	ldr	r5, [sp, #4]
 8001e26:	4694      	mov	ip, r2
 8001e28:	4465      	add	r5, ip
 8001e2a:	40ac      	lsls	r4, r5
 8001e2c:	4320      	orrs	r0, r4
 8001e2e:	1e42      	subs	r2, r0, #1
 8001e30:	4190      	sbcs	r0, r2
 8001e32:	4318      	orrs	r0, r3
 8001e34:	2307      	movs	r3, #7
 8001e36:	0019      	movs	r1, r3
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4001      	ands	r1, r0
 8001e3c:	4203      	tst	r3, r0
 8001e3e:	d00c      	beq.n	8001e5a <__aeabi_dmul+0x30a>
 8001e40:	230f      	movs	r3, #15
 8001e42:	4003      	ands	r3, r0
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dmul+0x2fa>
 8001e48:	e140      	b.n	80020cc <__aeabi_dmul+0x57c>
 8001e4a:	1d03      	adds	r3, r0, #4
 8001e4c:	4283      	cmp	r3, r0
 8001e4e:	41a4      	sbcs	r4, r4
 8001e50:	0018      	movs	r0, r3
 8001e52:	4264      	negs	r4, r4
 8001e54:	0761      	lsls	r1, r4, #29
 8001e56:	0264      	lsls	r4, r4, #9
 8001e58:	0b24      	lsrs	r4, r4, #12
 8001e5a:	08c2      	lsrs	r2, r0, #3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	e6cc      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff
 8001e68:	fffffc01 	.word	0xfffffc01
 8001e6c:	000003ff 	.word	0x000003ff
 8001e70:	feffffff 	.word	0xfeffffff
 8001e74:	000007fe 	.word	0x000007fe
 8001e78:	fffffc0d 	.word	0xfffffc0d
 8001e7c:	0000043e 	.word	0x0000043e
 8001e80:	4649      	mov	r1, r9
 8001e82:	464a      	mov	r2, r9
 8001e84:	0409      	lsls	r1, r1, #16
 8001e86:	0c09      	lsrs	r1, r1, #16
 8001e88:	000d      	movs	r5, r1
 8001e8a:	0c16      	lsrs	r6, r2, #16
 8001e8c:	0c02      	lsrs	r2, r0, #16
 8001e8e:	0400      	lsls	r0, r0, #16
 8001e90:	0c00      	lsrs	r0, r0, #16
 8001e92:	4345      	muls	r5, r0
 8001e94:	46ac      	mov	ip, r5
 8001e96:	0005      	movs	r5, r0
 8001e98:	4375      	muls	r5, r6
 8001e9a:	46a8      	mov	r8, r5
 8001e9c:	0015      	movs	r5, r2
 8001e9e:	000f      	movs	r7, r1
 8001ea0:	4375      	muls	r5, r6
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	9502      	str	r5, [sp, #8]
 8001ea6:	002a      	movs	r2, r5
 8001ea8:	9d00      	ldr	r5, [sp, #0]
 8001eaa:	436f      	muls	r7, r5
 8001eac:	4665      	mov	r5, ip
 8001eae:	0c2d      	lsrs	r5, r5, #16
 8001eb0:	46a9      	mov	r9, r5
 8001eb2:	4447      	add	r7, r8
 8001eb4:	444f      	add	r7, r9
 8001eb6:	45b8      	cmp	r8, r7
 8001eb8:	d905      	bls.n	8001ec6 <__aeabi_dmul+0x376>
 8001eba:	0015      	movs	r5, r2
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	0252      	lsls	r2, r2, #9
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	4445      	add	r5, r8
 8001ec4:	9502      	str	r5, [sp, #8]
 8001ec6:	0c3d      	lsrs	r5, r7, #16
 8001ec8:	9503      	str	r5, [sp, #12]
 8001eca:	4665      	mov	r5, ip
 8001ecc:	042d      	lsls	r5, r5, #16
 8001ece:	043f      	lsls	r7, r7, #16
 8001ed0:	0c2d      	lsrs	r5, r5, #16
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	003d      	movs	r5, r7
 8001ed6:	4465      	add	r5, ip
 8001ed8:	9504      	str	r5, [sp, #16]
 8001eda:	0c25      	lsrs	r5, r4, #16
 8001edc:	0424      	lsls	r4, r4, #16
 8001ede:	0c24      	lsrs	r4, r4, #16
 8001ee0:	46ac      	mov	ip, r5
 8001ee2:	0025      	movs	r5, r4
 8001ee4:	4375      	muls	r5, r6
 8001ee6:	46a8      	mov	r8, r5
 8001ee8:	4665      	mov	r5, ip
 8001eea:	000f      	movs	r7, r1
 8001eec:	4369      	muls	r1, r5
 8001eee:	4441      	add	r1, r8
 8001ef0:	4689      	mov	r9, r1
 8001ef2:	4367      	muls	r7, r4
 8001ef4:	0c39      	lsrs	r1, r7, #16
 8001ef6:	4449      	add	r1, r9
 8001ef8:	436e      	muls	r6, r5
 8001efa:	4588      	cmp	r8, r1
 8001efc:	d903      	bls.n	8001f06 <__aeabi_dmul+0x3b6>
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	0252      	lsls	r2, r2, #9
 8001f02:	4690      	mov	r8, r2
 8001f04:	4446      	add	r6, r8
 8001f06:	0c0d      	lsrs	r5, r1, #16
 8001f08:	46a8      	mov	r8, r5
 8001f0a:	0035      	movs	r5, r6
 8001f0c:	4445      	add	r5, r8
 8001f0e:	9505      	str	r5, [sp, #20]
 8001f10:	9d03      	ldr	r5, [sp, #12]
 8001f12:	043f      	lsls	r7, r7, #16
 8001f14:	46a8      	mov	r8, r5
 8001f16:	0c3f      	lsrs	r7, r7, #16
 8001f18:	0409      	lsls	r1, r1, #16
 8001f1a:	19c9      	adds	r1, r1, r7
 8001f1c:	4488      	add	r8, r1
 8001f1e:	4645      	mov	r5, r8
 8001f20:	9503      	str	r5, [sp, #12]
 8001f22:	4655      	mov	r5, sl
 8001f24:	042e      	lsls	r6, r5, #16
 8001f26:	0c36      	lsrs	r6, r6, #16
 8001f28:	0c2f      	lsrs	r7, r5, #16
 8001f2a:	0035      	movs	r5, r6
 8001f2c:	4345      	muls	r5, r0
 8001f2e:	4378      	muls	r0, r7
 8001f30:	4681      	mov	r9, r0
 8001f32:	0038      	movs	r0, r7
 8001f34:	46a8      	mov	r8, r5
 8001f36:	0c2d      	lsrs	r5, r5, #16
 8001f38:	46aa      	mov	sl, r5
 8001f3a:	9a00      	ldr	r2, [sp, #0]
 8001f3c:	4350      	muls	r0, r2
 8001f3e:	4372      	muls	r2, r6
 8001f40:	444a      	add	r2, r9
 8001f42:	4452      	add	r2, sl
 8001f44:	4591      	cmp	r9, r2
 8001f46:	d903      	bls.n	8001f50 <__aeabi_dmul+0x400>
 8001f48:	2580      	movs	r5, #128	@ 0x80
 8001f4a:	026d      	lsls	r5, r5, #9
 8001f4c:	46a9      	mov	r9, r5
 8001f4e:	4448      	add	r0, r9
 8001f50:	0c15      	lsrs	r5, r2, #16
 8001f52:	46a9      	mov	r9, r5
 8001f54:	4645      	mov	r5, r8
 8001f56:	042d      	lsls	r5, r5, #16
 8001f58:	0c2d      	lsrs	r5, r5, #16
 8001f5a:	46a8      	mov	r8, r5
 8001f5c:	4665      	mov	r5, ip
 8001f5e:	437d      	muls	r5, r7
 8001f60:	0412      	lsls	r2, r2, #16
 8001f62:	4448      	add	r0, r9
 8001f64:	4490      	add	r8, r2
 8001f66:	46a9      	mov	r9, r5
 8001f68:	0032      	movs	r2, r6
 8001f6a:	4665      	mov	r5, ip
 8001f6c:	4362      	muls	r2, r4
 8001f6e:	436e      	muls	r6, r5
 8001f70:	437c      	muls	r4, r7
 8001f72:	0c17      	lsrs	r7, r2, #16
 8001f74:	1936      	adds	r6, r6, r4
 8001f76:	19bf      	adds	r7, r7, r6
 8001f78:	42bc      	cmp	r4, r7
 8001f7a:	d903      	bls.n	8001f84 <__aeabi_dmul+0x434>
 8001f7c:	2480      	movs	r4, #128	@ 0x80
 8001f7e:	0264      	lsls	r4, r4, #9
 8001f80:	46a4      	mov	ip, r4
 8001f82:	44e1      	add	r9, ip
 8001f84:	9c02      	ldr	r4, [sp, #8]
 8001f86:	9e03      	ldr	r6, [sp, #12]
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	9d05      	ldr	r5, [sp, #20]
 8001f8c:	4466      	add	r6, ip
 8001f8e:	428e      	cmp	r6, r1
 8001f90:	4189      	sbcs	r1, r1
 8001f92:	46ac      	mov	ip, r5
 8001f94:	0412      	lsls	r2, r2, #16
 8001f96:	043c      	lsls	r4, r7, #16
 8001f98:	0c12      	lsrs	r2, r2, #16
 8001f9a:	18a2      	adds	r2, r4, r2
 8001f9c:	4462      	add	r2, ip
 8001f9e:	4249      	negs	r1, r1
 8001fa0:	1854      	adds	r4, r2, r1
 8001fa2:	4446      	add	r6, r8
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4546      	cmp	r6, r8
 8001fa8:	41a4      	sbcs	r4, r4
 8001faa:	4682      	mov	sl, r0
 8001fac:	4264      	negs	r4, r4
 8001fae:	46a0      	mov	r8, r4
 8001fb0:	42aa      	cmp	r2, r5
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	458c      	cmp	ip, r1
 8001fb6:	4189      	sbcs	r1, r1
 8001fb8:	44e2      	add	sl, ip
 8001fba:	44d0      	add	r8, sl
 8001fbc:	4249      	negs	r1, r1
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	45a0      	cmp	r8, r4
 8001fc4:	41a4      	sbcs	r4, r4
 8001fc6:	4582      	cmp	sl, r0
 8001fc8:	4189      	sbcs	r1, r1
 8001fca:	4264      	negs	r4, r4
 8001fcc:	4249      	negs	r1, r1
 8001fce:	430c      	orrs	r4, r1
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	0c3f      	lsrs	r7, r7, #16
 8001fd4:	19d2      	adds	r2, r2, r7
 8001fd6:	1912      	adds	r2, r2, r4
 8001fd8:	0dcc      	lsrs	r4, r1, #23
 8001fda:	9904      	ldr	r1, [sp, #16]
 8001fdc:	0270      	lsls	r0, r6, #9
 8001fde:	4308      	orrs	r0, r1
 8001fe0:	1e41      	subs	r1, r0, #1
 8001fe2:	4188      	sbcs	r0, r1
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	444a      	add	r2, r9
 8001fe8:	0df6      	lsrs	r6, r6, #23
 8001fea:	0252      	lsls	r2, r2, #9
 8001fec:	4330      	orrs	r0, r6
 8001fee:	0249      	lsls	r1, r1, #9
 8001ff0:	4314      	orrs	r4, r2
 8001ff2:	4308      	orrs	r0, r1
 8001ff4:	01d2      	lsls	r2, r2, #7
 8001ff6:	d535      	bpl.n	8002064 <__aeabi_dmul+0x514>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	0843      	lsrs	r3, r0, #1
 8001ffc:	4002      	ands	r2, r0
 8001ffe:	4313      	orrs	r3, r2
 8002000:	07e0      	lsls	r0, r4, #31
 8002002:	4318      	orrs	r0, r3
 8002004:	0864      	lsrs	r4, r4, #1
 8002006:	e634      	b.n	8001c72 <__aeabi_dmul+0x122>
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	46a2      	mov	sl, r4
 800200c:	469b      	mov	fp, r3
 800200e:	4681      	mov	r9, r0
 8002010:	2480      	movs	r4, #128	@ 0x80
 8002012:	4653      	mov	r3, sl
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	431c      	orrs	r4, r3
 8002018:	0324      	lsls	r4, r4, #12
 800201a:	464a      	mov	r2, r9
 800201c:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <__aeabi_dmul+0x588>)
 800201e:	0b24      	lsrs	r4, r4, #12
 8002020:	e5ec      	b.n	8001bfc <__aeabi_dmul+0xac>
 8002022:	f000 fd2d 	bl	8002a80 <__clzsi2>
 8002026:	2315      	movs	r3, #21
 8002028:	469c      	mov	ip, r3
 800202a:	4484      	add	ip, r0
 800202c:	0002      	movs	r2, r0
 800202e:	4663      	mov	r3, ip
 8002030:	3220      	adds	r2, #32
 8002032:	2b1c      	cmp	r3, #28
 8002034:	dc00      	bgt.n	8002038 <__aeabi_dmul+0x4e8>
 8002036:	e684      	b.n	8001d42 <__aeabi_dmul+0x1f2>
 8002038:	2300      	movs	r3, #0
 800203a:	4699      	mov	r9, r3
 800203c:	0023      	movs	r3, r4
 800203e:	3808      	subs	r0, #8
 8002040:	4083      	lsls	r3, r0
 8002042:	469a      	mov	sl, r3
 8002044:	e68e      	b.n	8001d64 <__aeabi_dmul+0x214>
 8002046:	f000 fd1b 	bl	8002a80 <__clzsi2>
 800204a:	0002      	movs	r2, r0
 800204c:	0003      	movs	r3, r0
 800204e:	3215      	adds	r2, #21
 8002050:	3320      	adds	r3, #32
 8002052:	2a1c      	cmp	r2, #28
 8002054:	dc00      	bgt.n	8002058 <__aeabi_dmul+0x508>
 8002056:	e64e      	b.n	8001cf6 <__aeabi_dmul+0x1a6>
 8002058:	0002      	movs	r2, r0
 800205a:	0034      	movs	r4, r6
 800205c:	3a08      	subs	r2, #8
 800205e:	2000      	movs	r0, #0
 8002060:	4094      	lsls	r4, r2
 8002062:	e652      	b.n	8001d0a <__aeabi_dmul+0x1ba>
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	e604      	b.n	8001c72 <__aeabi_dmul+0x122>
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <__aeabi_dmul+0x58c>)
 800206a:	0021      	movs	r1, r4
 800206c:	469c      	mov	ip, r3
 800206e:	0003      	movs	r3, r0
 8002070:	9d01      	ldr	r5, [sp, #4]
 8002072:	40d3      	lsrs	r3, r2
 8002074:	4465      	add	r5, ip
 8002076:	40a9      	lsls	r1, r5
 8002078:	4319      	orrs	r1, r3
 800207a:	0003      	movs	r3, r0
 800207c:	40ab      	lsls	r3, r5
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	4183      	sbcs	r3, r0
 8002082:	4319      	orrs	r1, r3
 8002084:	0008      	movs	r0, r1
 8002086:	40d4      	lsrs	r4, r2
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	d009      	beq.n	80020a0 <__aeabi_dmul+0x550>
 800208c:	230f      	movs	r3, #15
 800208e:	400b      	ands	r3, r1
 8002090:	2b04      	cmp	r3, #4
 8002092:	d005      	beq.n	80020a0 <__aeabi_dmul+0x550>
 8002094:	1d0b      	adds	r3, r1, #4
 8002096:	428b      	cmp	r3, r1
 8002098:	4180      	sbcs	r0, r0
 800209a:	4240      	negs	r0, r0
 800209c:	1824      	adds	r4, r4, r0
 800209e:	0018      	movs	r0, r3
 80020a0:	0223      	lsls	r3, r4, #8
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dmul+0x556>
 80020a4:	e6d6      	b.n	8001e54 <__aeabi_dmul+0x304>
 80020a6:	2301      	movs	r3, #1
 80020a8:	2400      	movs	r4, #0
 80020aa:	2200      	movs	r2, #0
 80020ac:	e5a6      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020ae:	290f      	cmp	r1, #15
 80020b0:	d1aa      	bne.n	8002008 <__aeabi_dmul+0x4b8>
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	4652      	mov	r2, sl
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	421a      	tst	r2, r3
 80020ba:	d0a9      	beq.n	8002010 <__aeabi_dmul+0x4c0>
 80020bc:	421c      	tst	r4, r3
 80020be:	d1a7      	bne.n	8002010 <__aeabi_dmul+0x4c0>
 80020c0:	431c      	orrs	r4, r3
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	0002      	movs	r2, r0
 80020c6:	469b      	mov	fp, r3
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <__aeabi_dmul+0x588>)
 80020ca:	e597      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6c1      	b.n	8001e54 <__aeabi_dmul+0x304>
 80020d0:	2400      	movs	r4, #0
 80020d2:	4b01      	ldr	r3, [pc, #4]	@ (80020d8 <__aeabi_dmul+0x588>)
 80020d4:	0022      	movs	r2, r4
 80020d6:	e591      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020d8:	000007ff 	.word	0x000007ff
 80020dc:	0000041e 	.word	0x0000041e

080020e0 <__aeabi_dsub>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	464e      	mov	r6, r9
 80020e4:	4645      	mov	r5, r8
 80020e6:	46de      	mov	lr, fp
 80020e8:	4657      	mov	r7, sl
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b085      	sub	sp, #20
 80020ee:	9000      	str	r0, [sp, #0]
 80020f0:	9101      	str	r1, [sp, #4]
 80020f2:	030c      	lsls	r4, r1, #12
 80020f4:	004f      	lsls	r7, r1, #1
 80020f6:	0fce      	lsrs	r6, r1, #31
 80020f8:	0a61      	lsrs	r1, r4, #9
 80020fa:	9c00      	ldr	r4, [sp, #0]
 80020fc:	46b0      	mov	r8, r6
 80020fe:	0f64      	lsrs	r4, r4, #29
 8002100:	430c      	orrs	r4, r1
 8002102:	9900      	ldr	r1, [sp, #0]
 8002104:	0d7f      	lsrs	r7, r7, #21
 8002106:	00c8      	lsls	r0, r1, #3
 8002108:	0011      	movs	r1, r2
 800210a:	001a      	movs	r2, r3
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	469c      	mov	ip, r3
 8002110:	9100      	str	r1, [sp, #0]
 8002112:	9201      	str	r2, [sp, #4]
 8002114:	0051      	lsls	r1, r2, #1
 8002116:	0d4b      	lsrs	r3, r1, #21
 8002118:	4699      	mov	r9, r3
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	9d00      	ldr	r5, [sp, #0]
 800211e:	0fd9      	lsrs	r1, r3, #31
 8002120:	4663      	mov	r3, ip
 8002122:	0f6a      	lsrs	r2, r5, #29
 8002124:	0a5b      	lsrs	r3, r3, #9
 8002126:	4313      	orrs	r3, r2
 8002128:	00ea      	lsls	r2, r5, #3
 800212a:	4694      	mov	ip, r2
 800212c:	4693      	mov	fp, r2
 800212e:	4ac1      	ldr	r2, [pc, #772]	@ (8002434 <__aeabi_dsub+0x354>)
 8002130:	9003      	str	r0, [sp, #12]
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	4591      	cmp	r9, r2
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x5a>
 8002138:	e0cd      	b.n	80022d6 <__aeabi_dsub+0x1f6>
 800213a:	2501      	movs	r5, #1
 800213c:	4069      	eors	r1, r5
 800213e:	464d      	mov	r5, r9
 8002140:	1b7d      	subs	r5, r7, r5
 8002142:	46aa      	mov	sl, r5
 8002144:	428e      	cmp	r6, r1
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x6a>
 8002148:	e080      	b.n	800224c <__aeabi_dsub+0x16c>
 800214a:	2d00      	cmp	r5, #0
 800214c:	dc00      	bgt.n	8002150 <__aeabi_dsub+0x70>
 800214e:	e335      	b.n	80027bc <__aeabi_dsub+0x6dc>
 8002150:	4649      	mov	r1, r9
 8002152:	2900      	cmp	r1, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x78>
 8002156:	e0df      	b.n	8002318 <__aeabi_dsub+0x238>
 8002158:	4297      	cmp	r7, r2
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x7e>
 800215c:	e194      	b.n	8002488 <__aeabi_dsub+0x3a8>
 800215e:	4652      	mov	r2, sl
 8002160:	2501      	movs	r5, #1
 8002162:	2a38      	cmp	r2, #56	@ 0x38
 8002164:	dc19      	bgt.n	800219a <__aeabi_dsub+0xba>
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	9b02      	ldr	r3, [sp, #8]
 800216a:	0412      	lsls	r2, r2, #16
 800216c:	4313      	orrs	r3, r2
 800216e:	9302      	str	r3, [sp, #8]
 8002170:	4652      	mov	r2, sl
 8002172:	2a1f      	cmp	r2, #31
 8002174:	dd00      	ble.n	8002178 <__aeabi_dsub+0x98>
 8002176:	e1e3      	b.n	8002540 <__aeabi_dsub+0x460>
 8002178:	4653      	mov	r3, sl
 800217a:	2220      	movs	r2, #32
 800217c:	4661      	mov	r1, ip
 800217e:	9d02      	ldr	r5, [sp, #8]
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	4095      	lsls	r5, r2
 8002184:	40d9      	lsrs	r1, r3
 8002186:	430d      	orrs	r5, r1
 8002188:	4661      	mov	r1, ip
 800218a:	4091      	lsls	r1, r2
 800218c:	000a      	movs	r2, r1
 800218e:	1e51      	subs	r1, r2, #1
 8002190:	418a      	sbcs	r2, r1
 8002192:	4315      	orrs	r5, r2
 8002194:	9a02      	ldr	r2, [sp, #8]
 8002196:	40da      	lsrs	r2, r3
 8002198:	1aa4      	subs	r4, r4, r2
 800219a:	1b45      	subs	r5, r0, r5
 800219c:	42a8      	cmp	r0, r5
 800219e:	4180      	sbcs	r0, r0
 80021a0:	4240      	negs	r0, r0
 80021a2:	1a24      	subs	r4, r4, r0
 80021a4:	0223      	lsls	r3, r4, #8
 80021a6:	d400      	bmi.n	80021aa <__aeabi_dsub+0xca>
 80021a8:	e13d      	b.n	8002426 <__aeabi_dsub+0x346>
 80021aa:	0264      	lsls	r4, r4, #9
 80021ac:	0a64      	lsrs	r4, r4, #9
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0xd4>
 80021b2:	e147      	b.n	8002444 <__aeabi_dsub+0x364>
 80021b4:	0020      	movs	r0, r4
 80021b6:	f000 fc63 	bl	8002a80 <__clzsi2>
 80021ba:	0003      	movs	r3, r0
 80021bc:	3b08      	subs	r3, #8
 80021be:	2120      	movs	r1, #32
 80021c0:	0028      	movs	r0, r5
 80021c2:	1aca      	subs	r2, r1, r3
 80021c4:	40d0      	lsrs	r0, r2
 80021c6:	409c      	lsls	r4, r3
 80021c8:	0002      	movs	r2, r0
 80021ca:	409d      	lsls	r5, r3
 80021cc:	4322      	orrs	r2, r4
 80021ce:	429f      	cmp	r7, r3
 80021d0:	dd00      	ble.n	80021d4 <__aeabi_dsub+0xf4>
 80021d2:	e177      	b.n	80024c4 <__aeabi_dsub+0x3e4>
 80021d4:	1bd8      	subs	r0, r3, r7
 80021d6:	3001      	adds	r0, #1
 80021d8:	1a09      	subs	r1, r1, r0
 80021da:	002c      	movs	r4, r5
 80021dc:	408d      	lsls	r5, r1
 80021de:	40c4      	lsrs	r4, r0
 80021e0:	1e6b      	subs	r3, r5, #1
 80021e2:	419d      	sbcs	r5, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	40c2      	lsrs	r2, r0
 80021e8:	408b      	lsls	r3, r1
 80021ea:	4325      	orrs	r5, r4
 80021ec:	2700      	movs	r7, #0
 80021ee:	0014      	movs	r4, r2
 80021f0:	431d      	orrs	r5, r3
 80021f2:	076b      	lsls	r3, r5, #29
 80021f4:	d009      	beq.n	800220a <__aeabi_dsub+0x12a>
 80021f6:	230f      	movs	r3, #15
 80021f8:	402b      	ands	r3, r5
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d005      	beq.n	800220a <__aeabi_dsub+0x12a>
 80021fe:	1d2b      	adds	r3, r5, #4
 8002200:	42ab      	cmp	r3, r5
 8002202:	41ad      	sbcs	r5, r5
 8002204:	426d      	negs	r5, r5
 8002206:	1964      	adds	r4, r4, r5
 8002208:	001d      	movs	r5, r3
 800220a:	0223      	lsls	r3, r4, #8
 800220c:	d400      	bmi.n	8002210 <__aeabi_dsub+0x130>
 800220e:	e140      	b.n	8002492 <__aeabi_dsub+0x3b2>
 8002210:	4a88      	ldr	r2, [pc, #544]	@ (8002434 <__aeabi_dsub+0x354>)
 8002212:	3701      	adds	r7, #1
 8002214:	4297      	cmp	r7, r2
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x13a>
 8002218:	e101      	b.n	800241e <__aeabi_dsub+0x33e>
 800221a:	2601      	movs	r6, #1
 800221c:	4643      	mov	r3, r8
 800221e:	4986      	ldr	r1, [pc, #536]	@ (8002438 <__aeabi_dsub+0x358>)
 8002220:	08ed      	lsrs	r5, r5, #3
 8002222:	4021      	ands	r1, r4
 8002224:	074a      	lsls	r2, r1, #29
 8002226:	432a      	orrs	r2, r5
 8002228:	057c      	lsls	r4, r7, #21
 800222a:	024d      	lsls	r5, r1, #9
 800222c:	0b2d      	lsrs	r5, r5, #12
 800222e:	0d64      	lsrs	r4, r4, #21
 8002230:	401e      	ands	r6, r3
 8002232:	0524      	lsls	r4, r4, #20
 8002234:	432c      	orrs	r4, r5
 8002236:	07f6      	lsls	r6, r6, #31
 8002238:	4334      	orrs	r4, r6
 800223a:	0010      	movs	r0, r2
 800223c:	0021      	movs	r1, r4
 800223e:	b005      	add	sp, #20
 8002240:	bcf0      	pop	{r4, r5, r6, r7}
 8002242:	46bb      	mov	fp, r7
 8002244:	46b2      	mov	sl, r6
 8002246:	46a9      	mov	r9, r5
 8002248:	46a0      	mov	r8, r4
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224c:	2d00      	cmp	r5, #0
 800224e:	dc00      	bgt.n	8002252 <__aeabi_dsub+0x172>
 8002250:	e2d0      	b.n	80027f4 <__aeabi_dsub+0x714>
 8002252:	4649      	mov	r1, r9
 8002254:	2900      	cmp	r1, #0
 8002256:	d000      	beq.n	800225a <__aeabi_dsub+0x17a>
 8002258:	e0d4      	b.n	8002404 <__aeabi_dsub+0x324>
 800225a:	4661      	mov	r1, ip
 800225c:	9b02      	ldr	r3, [sp, #8]
 800225e:	4319      	orrs	r1, r3
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x184>
 8002262:	e12b      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002264:	1e69      	subs	r1, r5, #1
 8002266:	2d01      	cmp	r5, #1
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x18c>
 800226a:	e1d9      	b.n	8002620 <__aeabi_dsub+0x540>
 800226c:	4295      	cmp	r5, r2
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x192>
 8002270:	e10a      	b.n	8002488 <__aeabi_dsub+0x3a8>
 8002272:	2501      	movs	r5, #1
 8002274:	2938      	cmp	r1, #56	@ 0x38
 8002276:	dc17      	bgt.n	80022a8 <__aeabi_dsub+0x1c8>
 8002278:	468a      	mov	sl, r1
 800227a:	4653      	mov	r3, sl
 800227c:	2b1f      	cmp	r3, #31
 800227e:	dd00      	ble.n	8002282 <__aeabi_dsub+0x1a2>
 8002280:	e1e7      	b.n	8002652 <__aeabi_dsub+0x572>
 8002282:	2220      	movs	r2, #32
 8002284:	1ad2      	subs	r2, r2, r3
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	4661      	mov	r1, ip
 800228a:	4093      	lsls	r3, r2
 800228c:	001d      	movs	r5, r3
 800228e:	4653      	mov	r3, sl
 8002290:	40d9      	lsrs	r1, r3
 8002292:	4663      	mov	r3, ip
 8002294:	4093      	lsls	r3, r2
 8002296:	001a      	movs	r2, r3
 8002298:	430d      	orrs	r5, r1
 800229a:	1e51      	subs	r1, r2, #1
 800229c:	418a      	sbcs	r2, r1
 800229e:	4653      	mov	r3, sl
 80022a0:	4315      	orrs	r5, r2
 80022a2:	9a02      	ldr	r2, [sp, #8]
 80022a4:	40da      	lsrs	r2, r3
 80022a6:	18a4      	adds	r4, r4, r2
 80022a8:	182d      	adds	r5, r5, r0
 80022aa:	4285      	cmp	r5, r0
 80022ac:	4180      	sbcs	r0, r0
 80022ae:	4240      	negs	r0, r0
 80022b0:	1824      	adds	r4, r4, r0
 80022b2:	0223      	lsls	r3, r4, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x1d8>
 80022b6:	e0b6      	b.n	8002426 <__aeabi_dsub+0x346>
 80022b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002434 <__aeabi_dsub+0x354>)
 80022ba:	3701      	adds	r7, #1
 80022bc:	429f      	cmp	r7, r3
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x1e2>
 80022c0:	e0ad      	b.n	800241e <__aeabi_dsub+0x33e>
 80022c2:	2101      	movs	r1, #1
 80022c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <__aeabi_dsub+0x358>)
 80022c6:	086a      	lsrs	r2, r5, #1
 80022c8:	401c      	ands	r4, r3
 80022ca:	4029      	ands	r1, r5
 80022cc:	430a      	orrs	r2, r1
 80022ce:	07e5      	lsls	r5, r4, #31
 80022d0:	4315      	orrs	r5, r2
 80022d2:	0864      	lsrs	r4, r4, #1
 80022d4:	e78d      	b.n	80021f2 <__aeabi_dsub+0x112>
 80022d6:	4a59      	ldr	r2, [pc, #356]	@ (800243c <__aeabi_dsub+0x35c>)
 80022d8:	9b02      	ldr	r3, [sp, #8]
 80022da:	4692      	mov	sl, r2
 80022dc:	4662      	mov	r2, ip
 80022de:	44ba      	add	sl, r7
 80022e0:	431a      	orrs	r2, r3
 80022e2:	d02c      	beq.n	800233e <__aeabi_dsub+0x25e>
 80022e4:	428e      	cmp	r6, r1
 80022e6:	d02e      	beq.n	8002346 <__aeabi_dsub+0x266>
 80022e8:	4652      	mov	r2, sl
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d060      	beq.n	80023b0 <__aeabi_dsub+0x2d0>
 80022ee:	2f00      	cmp	r7, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x214>
 80022f2:	e0db      	b.n	80024ac <__aeabi_dsub+0x3cc>
 80022f4:	4663      	mov	r3, ip
 80022f6:	000e      	movs	r6, r1
 80022f8:	9c02      	ldr	r4, [sp, #8]
 80022fa:	08d8      	lsrs	r0, r3, #3
 80022fc:	0762      	lsls	r2, r4, #29
 80022fe:	4302      	orrs	r2, r0
 8002300:	08e4      	lsrs	r4, r4, #3
 8002302:	0013      	movs	r3, r2
 8002304:	4323      	orrs	r3, r4
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x22a>
 8002308:	e254      	b.n	80027b4 <__aeabi_dsub+0x6d4>
 800230a:	2580      	movs	r5, #128	@ 0x80
 800230c:	032d      	lsls	r5, r5, #12
 800230e:	4325      	orrs	r5, r4
 8002310:	032d      	lsls	r5, r5, #12
 8002312:	4c48      	ldr	r4, [pc, #288]	@ (8002434 <__aeabi_dsub+0x354>)
 8002314:	0b2d      	lsrs	r5, r5, #12
 8002316:	e78c      	b.n	8002232 <__aeabi_dsub+0x152>
 8002318:	4661      	mov	r1, ip
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	4319      	orrs	r1, r3
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x242>
 8002320:	e0cc      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002322:	0029      	movs	r1, r5
 8002324:	3901      	subs	r1, #1
 8002326:	2d01      	cmp	r5, #1
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x24c>
 800232a:	e188      	b.n	800263e <__aeabi_dsub+0x55e>
 800232c:	4295      	cmp	r5, r2
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x252>
 8002330:	e0aa      	b.n	8002488 <__aeabi_dsub+0x3a8>
 8002332:	2501      	movs	r5, #1
 8002334:	2938      	cmp	r1, #56	@ 0x38
 8002336:	dd00      	ble.n	800233a <__aeabi_dsub+0x25a>
 8002338:	e72f      	b.n	800219a <__aeabi_dsub+0xba>
 800233a:	468a      	mov	sl, r1
 800233c:	e718      	b.n	8002170 <__aeabi_dsub+0x90>
 800233e:	2201      	movs	r2, #1
 8002340:	4051      	eors	r1, r2
 8002342:	428e      	cmp	r6, r1
 8002344:	d1d0      	bne.n	80022e8 <__aeabi_dsub+0x208>
 8002346:	4653      	mov	r3, sl
 8002348:	2b00      	cmp	r3, #0
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x26e>
 800234c:	e0be      	b.n	80024cc <__aeabi_dsub+0x3ec>
 800234e:	2f00      	cmp	r7, #0
 8002350:	d000      	beq.n	8002354 <__aeabi_dsub+0x274>
 8002352:	e138      	b.n	80025c6 <__aeabi_dsub+0x4e6>
 8002354:	46ca      	mov	sl, r9
 8002356:	0022      	movs	r2, r4
 8002358:	4302      	orrs	r2, r0
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x27e>
 800235c:	e1e2      	b.n	8002724 <__aeabi_dsub+0x644>
 800235e:	4653      	mov	r3, sl
 8002360:	1e59      	subs	r1, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x288>
 8002366:	e20d      	b.n	8002784 <__aeabi_dsub+0x6a4>
 8002368:	4a32      	ldr	r2, [pc, #200]	@ (8002434 <__aeabi_dsub+0x354>)
 800236a:	4592      	cmp	sl, r2
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x290>
 800236e:	e1d2      	b.n	8002716 <__aeabi_dsub+0x636>
 8002370:	2701      	movs	r7, #1
 8002372:	2938      	cmp	r1, #56	@ 0x38
 8002374:	dc13      	bgt.n	800239e <__aeabi_dsub+0x2be>
 8002376:	291f      	cmp	r1, #31
 8002378:	dd00      	ble.n	800237c <__aeabi_dsub+0x29c>
 800237a:	e1ee      	b.n	800275a <__aeabi_dsub+0x67a>
 800237c:	2220      	movs	r2, #32
 800237e:	9b02      	ldr	r3, [sp, #8]
 8002380:	1a52      	subs	r2, r2, r1
 8002382:	0025      	movs	r5, r4
 8002384:	0007      	movs	r7, r0
 8002386:	469a      	mov	sl, r3
 8002388:	40cc      	lsrs	r4, r1
 800238a:	4090      	lsls	r0, r2
 800238c:	4095      	lsls	r5, r2
 800238e:	40cf      	lsrs	r7, r1
 8002390:	44a2      	add	sl, r4
 8002392:	1e42      	subs	r2, r0, #1
 8002394:	4190      	sbcs	r0, r2
 8002396:	4653      	mov	r3, sl
 8002398:	432f      	orrs	r7, r5
 800239a:	4307      	orrs	r7, r0
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	003d      	movs	r5, r7
 80023a0:	4465      	add	r5, ip
 80023a2:	4565      	cmp	r5, ip
 80023a4:	4192      	sbcs	r2, r2
 80023a6:	9b02      	ldr	r3, [sp, #8]
 80023a8:	4252      	negs	r2, r2
 80023aa:	464f      	mov	r7, r9
 80023ac:	18d4      	adds	r4, r2, r3
 80023ae:	e780      	b.n	80022b2 <__aeabi_dsub+0x1d2>
 80023b0:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <__aeabi_dsub+0x360>)
 80023b2:	1c7d      	adds	r5, r7, #1
 80023b4:	4215      	tst	r5, r2
 80023b6:	d000      	beq.n	80023ba <__aeabi_dsub+0x2da>
 80023b8:	e0aa      	b.n	8002510 <__aeabi_dsub+0x430>
 80023ba:	4662      	mov	r2, ip
 80023bc:	0025      	movs	r5, r4
 80023be:	9b02      	ldr	r3, [sp, #8]
 80023c0:	4305      	orrs	r5, r0
 80023c2:	431a      	orrs	r2, r3
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d000      	beq.n	80023ca <__aeabi_dsub+0x2ea>
 80023c8:	e0f5      	b.n	80025b6 <__aeabi_dsub+0x4d6>
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x2f0>
 80023ce:	e16b      	b.n	80026a8 <__aeabi_dsub+0x5c8>
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x2f6>
 80023d4:	e152      	b.n	800267c <__aeabi_dsub+0x59c>
 80023d6:	4663      	mov	r3, ip
 80023d8:	1ac5      	subs	r5, r0, r3
 80023da:	9b02      	ldr	r3, [sp, #8]
 80023dc:	1ae2      	subs	r2, r4, r3
 80023de:	42a8      	cmp	r0, r5
 80023e0:	419b      	sbcs	r3, r3
 80023e2:	425b      	negs	r3, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	d400      	bmi.n	80023ec <__aeabi_dsub+0x30c>
 80023ea:	e1d5      	b.n	8002798 <__aeabi_dsub+0x6b8>
 80023ec:	4663      	mov	r3, ip
 80023ee:	1a1d      	subs	r5, r3, r0
 80023f0:	45ac      	cmp	ip, r5
 80023f2:	4192      	sbcs	r2, r2
 80023f4:	2601      	movs	r6, #1
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	4252      	negs	r2, r2
 80023fa:	1b1c      	subs	r4, r3, r4
 80023fc:	4688      	mov	r8, r1
 80023fe:	1aa4      	subs	r4, r4, r2
 8002400:	400e      	ands	r6, r1
 8002402:	e6f6      	b.n	80021f2 <__aeabi_dsub+0x112>
 8002404:	4297      	cmp	r7, r2
 8002406:	d03f      	beq.n	8002488 <__aeabi_dsub+0x3a8>
 8002408:	4652      	mov	r2, sl
 800240a:	2501      	movs	r5, #1
 800240c:	2a38      	cmp	r2, #56	@ 0x38
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0x332>
 8002410:	e74a      	b.n	80022a8 <__aeabi_dsub+0x1c8>
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	9b02      	ldr	r3, [sp, #8]
 8002416:	0412      	lsls	r2, r2, #16
 8002418:	4313      	orrs	r3, r2
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	e72d      	b.n	800227a <__aeabi_dsub+0x19a>
 800241e:	003c      	movs	r4, r7
 8002420:	2500      	movs	r5, #0
 8002422:	2200      	movs	r2, #0
 8002424:	e705      	b.n	8002232 <__aeabi_dsub+0x152>
 8002426:	2307      	movs	r3, #7
 8002428:	402b      	ands	r3, r5
 800242a:	2b00      	cmp	r3, #0
 800242c:	d000      	beq.n	8002430 <__aeabi_dsub+0x350>
 800242e:	e6e2      	b.n	80021f6 <__aeabi_dsub+0x116>
 8002430:	e06b      	b.n	800250a <__aeabi_dsub+0x42a>
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff
 8002438:	ff7fffff 	.word	0xff7fffff
 800243c:	fffff801 	.word	0xfffff801
 8002440:	000007fe 	.word	0x000007fe
 8002444:	0028      	movs	r0, r5
 8002446:	f000 fb1b 	bl	8002a80 <__clzsi2>
 800244a:	0003      	movs	r3, r0
 800244c:	3318      	adds	r3, #24
 800244e:	2b1f      	cmp	r3, #31
 8002450:	dc00      	bgt.n	8002454 <__aeabi_dsub+0x374>
 8002452:	e6b4      	b.n	80021be <__aeabi_dsub+0xde>
 8002454:	002a      	movs	r2, r5
 8002456:	3808      	subs	r0, #8
 8002458:	4082      	lsls	r2, r0
 800245a:	429f      	cmp	r7, r3
 800245c:	dd00      	ble.n	8002460 <__aeabi_dsub+0x380>
 800245e:	e0b9      	b.n	80025d4 <__aeabi_dsub+0x4f4>
 8002460:	1bdb      	subs	r3, r3, r7
 8002462:	1c58      	adds	r0, r3, #1
 8002464:	281f      	cmp	r0, #31
 8002466:	dc00      	bgt.n	800246a <__aeabi_dsub+0x38a>
 8002468:	e1a0      	b.n	80027ac <__aeabi_dsub+0x6cc>
 800246a:	0015      	movs	r5, r2
 800246c:	3b1f      	subs	r3, #31
 800246e:	40dd      	lsrs	r5, r3
 8002470:	2820      	cmp	r0, #32
 8002472:	d005      	beq.n	8002480 <__aeabi_dsub+0x3a0>
 8002474:	2340      	movs	r3, #64	@ 0x40
 8002476:	1a1b      	subs	r3, r3, r0
 8002478:	409a      	lsls	r2, r3
 800247a:	1e53      	subs	r3, r2, #1
 800247c:	419a      	sbcs	r2, r3
 800247e:	4315      	orrs	r5, r2
 8002480:	2307      	movs	r3, #7
 8002482:	2700      	movs	r7, #0
 8002484:	402b      	ands	r3, r5
 8002486:	e7d0      	b.n	800242a <__aeabi_dsub+0x34a>
 8002488:	08c0      	lsrs	r0, r0, #3
 800248a:	0762      	lsls	r2, r4, #29
 800248c:	4302      	orrs	r2, r0
 800248e:	08e4      	lsrs	r4, r4, #3
 8002490:	e737      	b.n	8002302 <__aeabi_dsub+0x222>
 8002492:	08ea      	lsrs	r2, r5, #3
 8002494:	0763      	lsls	r3, r4, #29
 8002496:	431a      	orrs	r2, r3
 8002498:	4bd3      	ldr	r3, [pc, #844]	@ (80027e8 <__aeabi_dsub+0x708>)
 800249a:	08e4      	lsrs	r4, r4, #3
 800249c:	429f      	cmp	r7, r3
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x3c2>
 80024a0:	e72f      	b.n	8002302 <__aeabi_dsub+0x222>
 80024a2:	0324      	lsls	r4, r4, #12
 80024a4:	0b25      	lsrs	r5, r4, #12
 80024a6:	057c      	lsls	r4, r7, #21
 80024a8:	0d64      	lsrs	r4, r4, #21
 80024aa:	e6c2      	b.n	8002232 <__aeabi_dsub+0x152>
 80024ac:	46ca      	mov	sl, r9
 80024ae:	0022      	movs	r2, r4
 80024b0:	4302      	orrs	r2, r0
 80024b2:	d158      	bne.n	8002566 <__aeabi_dsub+0x486>
 80024b4:	4663      	mov	r3, ip
 80024b6:	000e      	movs	r6, r1
 80024b8:	9c02      	ldr	r4, [sp, #8]
 80024ba:	9303      	str	r3, [sp, #12]
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	4657      	mov	r7, sl
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	e7e7      	b.n	8002494 <__aeabi_dsub+0x3b4>
 80024c4:	4cc9      	ldr	r4, [pc, #804]	@ (80027ec <__aeabi_dsub+0x70c>)
 80024c6:	1aff      	subs	r7, r7, r3
 80024c8:	4014      	ands	r4, r2
 80024ca:	e692      	b.n	80021f2 <__aeabi_dsub+0x112>
 80024cc:	4dc8      	ldr	r5, [pc, #800]	@ (80027f0 <__aeabi_dsub+0x710>)
 80024ce:	1c7a      	adds	r2, r7, #1
 80024d0:	422a      	tst	r2, r5
 80024d2:	d000      	beq.n	80024d6 <__aeabi_dsub+0x3f6>
 80024d4:	e084      	b.n	80025e0 <__aeabi_dsub+0x500>
 80024d6:	0022      	movs	r2, r4
 80024d8:	4302      	orrs	r2, r0
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d000      	beq.n	80024e0 <__aeabi_dsub+0x400>
 80024de:	e0ef      	b.n	80026c0 <__aeabi_dsub+0x5e0>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x406>
 80024e4:	e0e5      	b.n	80026b2 <__aeabi_dsub+0x5d2>
 80024e6:	4662      	mov	r2, ip
 80024e8:	9902      	ldr	r1, [sp, #8]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x410>
 80024ee:	e0c5      	b.n	800267c <__aeabi_dsub+0x59c>
 80024f0:	4663      	mov	r3, ip
 80024f2:	18c5      	adds	r5, r0, r3
 80024f4:	468c      	mov	ip, r1
 80024f6:	4285      	cmp	r5, r0
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4464      	add	r4, ip
 80024fc:	4240      	negs	r0, r0
 80024fe:	1824      	adds	r4, r4, r0
 8002500:	0223      	lsls	r3, r4, #8
 8002502:	d502      	bpl.n	800250a <__aeabi_dsub+0x42a>
 8002504:	4bb9      	ldr	r3, [pc, #740]	@ (80027ec <__aeabi_dsub+0x70c>)
 8002506:	3701      	adds	r7, #1
 8002508:	401c      	ands	r4, r3
 800250a:	46ba      	mov	sl, r7
 800250c:	9503      	str	r5, [sp, #12]
 800250e:	e7d5      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002510:	4662      	mov	r2, ip
 8002512:	1a85      	subs	r5, r0, r2
 8002514:	42a8      	cmp	r0, r5
 8002516:	4192      	sbcs	r2, r2
 8002518:	4252      	negs	r2, r2
 800251a:	4691      	mov	r9, r2
 800251c:	9b02      	ldr	r3, [sp, #8]
 800251e:	1ae3      	subs	r3, r4, r3
 8002520:	001a      	movs	r2, r3
 8002522:	464b      	mov	r3, r9
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	4691      	mov	r9, r2
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	d46c      	bmi.n	8002608 <__aeabi_dsub+0x528>
 800252e:	464a      	mov	r2, r9
 8002530:	464c      	mov	r4, r9
 8002532:	432a      	orrs	r2, r5
 8002534:	d000      	beq.n	8002538 <__aeabi_dsub+0x458>
 8002536:	e63a      	b.n	80021ae <__aeabi_dsub+0xce>
 8002538:	2600      	movs	r6, #0
 800253a:	2400      	movs	r4, #0
 800253c:	2500      	movs	r5, #0
 800253e:	e678      	b.n	8002232 <__aeabi_dsub+0x152>
 8002540:	9902      	ldr	r1, [sp, #8]
 8002542:	4653      	mov	r3, sl
 8002544:	000d      	movs	r5, r1
 8002546:	3a20      	subs	r2, #32
 8002548:	40d5      	lsrs	r5, r2
 800254a:	2b20      	cmp	r3, #32
 800254c:	d006      	beq.n	800255c <__aeabi_dsub+0x47c>
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	000b      	movs	r3, r1
 8002554:	4093      	lsls	r3, r2
 8002556:	4662      	mov	r2, ip
 8002558:	431a      	orrs	r2, r3
 800255a:	4693      	mov	fp, r2
 800255c:	465b      	mov	r3, fp
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	4193      	sbcs	r3, r2
 8002562:	431d      	orrs	r5, r3
 8002564:	e619      	b.n	800219a <__aeabi_dsub+0xba>
 8002566:	4653      	mov	r3, sl
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x490>
 800256e:	e0c6      	b.n	80026fe <__aeabi_dsub+0x61e>
 8002570:	4e9d      	ldr	r6, [pc, #628]	@ (80027e8 <__aeabi_dsub+0x708>)
 8002572:	45b2      	cmp	sl, r6
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x498>
 8002576:	e6bd      	b.n	80022f4 <__aeabi_dsub+0x214>
 8002578:	4688      	mov	r8, r1
 800257a:	000e      	movs	r6, r1
 800257c:	2501      	movs	r5, #1
 800257e:	2a38      	cmp	r2, #56	@ 0x38
 8002580:	dc10      	bgt.n	80025a4 <__aeabi_dsub+0x4c4>
 8002582:	2a1f      	cmp	r2, #31
 8002584:	dc7f      	bgt.n	8002686 <__aeabi_dsub+0x5a6>
 8002586:	2120      	movs	r1, #32
 8002588:	0025      	movs	r5, r4
 800258a:	1a89      	subs	r1, r1, r2
 800258c:	0007      	movs	r7, r0
 800258e:	4088      	lsls	r0, r1
 8002590:	408d      	lsls	r5, r1
 8002592:	40d7      	lsrs	r7, r2
 8002594:	40d4      	lsrs	r4, r2
 8002596:	1e41      	subs	r1, r0, #1
 8002598:	4188      	sbcs	r0, r1
 800259a:	9b02      	ldr	r3, [sp, #8]
 800259c:	433d      	orrs	r5, r7
 800259e:	1b1b      	subs	r3, r3, r4
 80025a0:	4305      	orrs	r5, r0
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	4662      	mov	r2, ip
 80025a6:	1b55      	subs	r5, r2, r5
 80025a8:	45ac      	cmp	ip, r5
 80025aa:	4192      	sbcs	r2, r2
 80025ac:	9b02      	ldr	r3, [sp, #8]
 80025ae:	4252      	negs	r2, r2
 80025b0:	464f      	mov	r7, r9
 80025b2:	1a9c      	subs	r4, r3, r2
 80025b4:	e5f6      	b.n	80021a4 <__aeabi_dsub+0xc4>
 80025b6:	2d00      	cmp	r5, #0
 80025b8:	d000      	beq.n	80025bc <__aeabi_dsub+0x4dc>
 80025ba:	e0b7      	b.n	800272c <__aeabi_dsub+0x64c>
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x4e2>
 80025c0:	e0f0      	b.n	80027a4 <__aeabi_dsub+0x6c4>
 80025c2:	2601      	movs	r6, #1
 80025c4:	400e      	ands	r6, r1
 80025c6:	4663      	mov	r3, ip
 80025c8:	9802      	ldr	r0, [sp, #8]
 80025ca:	08d9      	lsrs	r1, r3, #3
 80025cc:	0742      	lsls	r2, r0, #29
 80025ce:	430a      	orrs	r2, r1
 80025d0:	08c4      	lsrs	r4, r0, #3
 80025d2:	e696      	b.n	8002302 <__aeabi_dsub+0x222>
 80025d4:	4c85      	ldr	r4, [pc, #532]	@ (80027ec <__aeabi_dsub+0x70c>)
 80025d6:	1aff      	subs	r7, r7, r3
 80025d8:	4014      	ands	r4, r2
 80025da:	0762      	lsls	r2, r4, #29
 80025dc:	08e4      	lsrs	r4, r4, #3
 80025de:	e760      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80025e0:	4981      	ldr	r1, [pc, #516]	@ (80027e8 <__aeabi_dsub+0x708>)
 80025e2:	428a      	cmp	r2, r1
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x508>
 80025e6:	e0c9      	b.n	800277c <__aeabi_dsub+0x69c>
 80025e8:	4663      	mov	r3, ip
 80025ea:	18c1      	adds	r1, r0, r3
 80025ec:	4281      	cmp	r1, r0
 80025ee:	4180      	sbcs	r0, r0
 80025f0:	9b02      	ldr	r3, [sp, #8]
 80025f2:	4240      	negs	r0, r0
 80025f4:	18e3      	adds	r3, r4, r3
 80025f6:	181b      	adds	r3, r3, r0
 80025f8:	07dd      	lsls	r5, r3, #31
 80025fa:	085c      	lsrs	r4, r3, #1
 80025fc:	2307      	movs	r3, #7
 80025fe:	0849      	lsrs	r1, r1, #1
 8002600:	430d      	orrs	r5, r1
 8002602:	0017      	movs	r7, r2
 8002604:	402b      	ands	r3, r5
 8002606:	e710      	b.n	800242a <__aeabi_dsub+0x34a>
 8002608:	4663      	mov	r3, ip
 800260a:	1a1d      	subs	r5, r3, r0
 800260c:	45ac      	cmp	ip, r5
 800260e:	4192      	sbcs	r2, r2
 8002610:	2601      	movs	r6, #1
 8002612:	9b02      	ldr	r3, [sp, #8]
 8002614:	4252      	negs	r2, r2
 8002616:	1b1c      	subs	r4, r3, r4
 8002618:	4688      	mov	r8, r1
 800261a:	1aa4      	subs	r4, r4, r2
 800261c:	400e      	ands	r6, r1
 800261e:	e5c6      	b.n	80021ae <__aeabi_dsub+0xce>
 8002620:	4663      	mov	r3, ip
 8002622:	18c5      	adds	r5, r0, r3
 8002624:	9b02      	ldr	r3, [sp, #8]
 8002626:	4285      	cmp	r5, r0
 8002628:	4180      	sbcs	r0, r0
 800262a:	469c      	mov	ip, r3
 800262c:	4240      	negs	r0, r0
 800262e:	4464      	add	r4, ip
 8002630:	1824      	adds	r4, r4, r0
 8002632:	2701      	movs	r7, #1
 8002634:	0223      	lsls	r3, r4, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0x55a>
 8002638:	e6f5      	b.n	8002426 <__aeabi_dsub+0x346>
 800263a:	2702      	movs	r7, #2
 800263c:	e641      	b.n	80022c2 <__aeabi_dsub+0x1e2>
 800263e:	4663      	mov	r3, ip
 8002640:	1ac5      	subs	r5, r0, r3
 8002642:	42a8      	cmp	r0, r5
 8002644:	4180      	sbcs	r0, r0
 8002646:	9b02      	ldr	r3, [sp, #8]
 8002648:	4240      	negs	r0, r0
 800264a:	1ae4      	subs	r4, r4, r3
 800264c:	2701      	movs	r7, #1
 800264e:	1a24      	subs	r4, r4, r0
 8002650:	e5a8      	b.n	80021a4 <__aeabi_dsub+0xc4>
 8002652:	9d02      	ldr	r5, [sp, #8]
 8002654:	4652      	mov	r2, sl
 8002656:	002b      	movs	r3, r5
 8002658:	3a20      	subs	r2, #32
 800265a:	40d3      	lsrs	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	4653      	mov	r3, sl
 8002660:	2b20      	cmp	r3, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x592>
 8002664:	2240      	movs	r2, #64	@ 0x40
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	002b      	movs	r3, r5
 800266a:	4093      	lsls	r3, r2
 800266c:	4662      	mov	r2, ip
 800266e:	431a      	orrs	r2, r3
 8002670:	4693      	mov	fp, r2
 8002672:	465d      	mov	r5, fp
 8002674:	1e6b      	subs	r3, r5, #1
 8002676:	419d      	sbcs	r5, r3
 8002678:	430d      	orrs	r5, r1
 800267a:	e615      	b.n	80022a8 <__aeabi_dsub+0x1c8>
 800267c:	0762      	lsls	r2, r4, #29
 800267e:	08c0      	lsrs	r0, r0, #3
 8002680:	4302      	orrs	r2, r0
 8002682:	08e4      	lsrs	r4, r4, #3
 8002684:	e70d      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 8002686:	0011      	movs	r1, r2
 8002688:	0027      	movs	r7, r4
 800268a:	3920      	subs	r1, #32
 800268c:	40cf      	lsrs	r7, r1
 800268e:	2a20      	cmp	r2, #32
 8002690:	d005      	beq.n	800269e <__aeabi_dsub+0x5be>
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	1a8a      	subs	r2, r1, r2
 8002696:	4094      	lsls	r4, r2
 8002698:	0025      	movs	r5, r4
 800269a:	4305      	orrs	r5, r0
 800269c:	9503      	str	r5, [sp, #12]
 800269e:	9d03      	ldr	r5, [sp, #12]
 80026a0:	1e6a      	subs	r2, r5, #1
 80026a2:	4195      	sbcs	r5, r2
 80026a4:	433d      	orrs	r5, r7
 80026a6:	e77d      	b.n	80025a4 <__aeabi_dsub+0x4c4>
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dsub+0x5ce>
 80026ac:	e744      	b.n	8002538 <__aeabi_dsub+0x458>
 80026ae:	2601      	movs	r6, #1
 80026b0:	400e      	ands	r6, r1
 80026b2:	4663      	mov	r3, ip
 80026b4:	08d9      	lsrs	r1, r3, #3
 80026b6:	9b02      	ldr	r3, [sp, #8]
 80026b8:	075a      	lsls	r2, r3, #29
 80026ba:	430a      	orrs	r2, r1
 80026bc:	08dc      	lsrs	r4, r3, #3
 80026be:	e6f0      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d028      	beq.n	8002716 <__aeabi_dsub+0x636>
 80026c4:	4662      	mov	r2, ip
 80026c6:	9f02      	ldr	r7, [sp, #8]
 80026c8:	08c0      	lsrs	r0, r0, #3
 80026ca:	433a      	orrs	r2, r7
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x5f0>
 80026ce:	e6dc      	b.n	800248a <__aeabi_dsub+0x3aa>
 80026d0:	0762      	lsls	r2, r4, #29
 80026d2:	4310      	orrs	r0, r2
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	08e4      	lsrs	r4, r4, #3
 80026d8:	0312      	lsls	r2, r2, #12
 80026da:	4214      	tst	r4, r2
 80026dc:	d009      	beq.n	80026f2 <__aeabi_dsub+0x612>
 80026de:	08fd      	lsrs	r5, r7, #3
 80026e0:	4215      	tst	r5, r2
 80026e2:	d106      	bne.n	80026f2 <__aeabi_dsub+0x612>
 80026e4:	4663      	mov	r3, ip
 80026e6:	2601      	movs	r6, #1
 80026e8:	002c      	movs	r4, r5
 80026ea:	08d8      	lsrs	r0, r3, #3
 80026ec:	077b      	lsls	r3, r7, #29
 80026ee:	4318      	orrs	r0, r3
 80026f0:	400e      	ands	r6, r1
 80026f2:	0f42      	lsrs	r2, r0, #29
 80026f4:	00c0      	lsls	r0, r0, #3
 80026f6:	08c0      	lsrs	r0, r0, #3
 80026f8:	0752      	lsls	r2, r2, #29
 80026fa:	4302      	orrs	r2, r0
 80026fc:	e601      	b.n	8002302 <__aeabi_dsub+0x222>
 80026fe:	4663      	mov	r3, ip
 8002700:	1a1d      	subs	r5, r3, r0
 8002702:	45ac      	cmp	ip, r5
 8002704:	4192      	sbcs	r2, r2
 8002706:	9b02      	ldr	r3, [sp, #8]
 8002708:	4252      	negs	r2, r2
 800270a:	1b1c      	subs	r4, r3, r4
 800270c:	000e      	movs	r6, r1
 800270e:	4688      	mov	r8, r1
 8002710:	2701      	movs	r7, #1
 8002712:	1aa4      	subs	r4, r4, r2
 8002714:	e546      	b.n	80021a4 <__aeabi_dsub+0xc4>
 8002716:	4663      	mov	r3, ip
 8002718:	08d9      	lsrs	r1, r3, #3
 800271a:	9b02      	ldr	r3, [sp, #8]
 800271c:	075a      	lsls	r2, r3, #29
 800271e:	430a      	orrs	r2, r1
 8002720:	08dc      	lsrs	r4, r3, #3
 8002722:	e5ee      	b.n	8002302 <__aeabi_dsub+0x222>
 8002724:	4663      	mov	r3, ip
 8002726:	9c02      	ldr	r4, [sp, #8]
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	e6c7      	b.n	80024bc <__aeabi_dsub+0x3dc>
 800272c:	08c0      	lsrs	r0, r0, #3
 800272e:	2a00      	cmp	r2, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x654>
 8002732:	e6aa      	b.n	800248a <__aeabi_dsub+0x3aa>
 8002734:	0762      	lsls	r2, r4, #29
 8002736:	4310      	orrs	r0, r2
 8002738:	2280      	movs	r2, #128	@ 0x80
 800273a:	08e4      	lsrs	r4, r4, #3
 800273c:	0312      	lsls	r2, r2, #12
 800273e:	4214      	tst	r4, r2
 8002740:	d0d7      	beq.n	80026f2 <__aeabi_dsub+0x612>
 8002742:	9f02      	ldr	r7, [sp, #8]
 8002744:	08fd      	lsrs	r5, r7, #3
 8002746:	4215      	tst	r5, r2
 8002748:	d1d3      	bne.n	80026f2 <__aeabi_dsub+0x612>
 800274a:	4663      	mov	r3, ip
 800274c:	2601      	movs	r6, #1
 800274e:	08d8      	lsrs	r0, r3, #3
 8002750:	077b      	lsls	r3, r7, #29
 8002752:	002c      	movs	r4, r5
 8002754:	4318      	orrs	r0, r3
 8002756:	400e      	ands	r6, r1
 8002758:	e7cb      	b.n	80026f2 <__aeabi_dsub+0x612>
 800275a:	000a      	movs	r2, r1
 800275c:	0027      	movs	r7, r4
 800275e:	3a20      	subs	r2, #32
 8002760:	40d7      	lsrs	r7, r2
 8002762:	2920      	cmp	r1, #32
 8002764:	d005      	beq.n	8002772 <__aeabi_dsub+0x692>
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	1a52      	subs	r2, r2, r1
 800276a:	4094      	lsls	r4, r2
 800276c:	0025      	movs	r5, r4
 800276e:	4305      	orrs	r5, r0
 8002770:	9503      	str	r5, [sp, #12]
 8002772:	9d03      	ldr	r5, [sp, #12]
 8002774:	1e6a      	subs	r2, r5, #1
 8002776:	4195      	sbcs	r5, r2
 8002778:	432f      	orrs	r7, r5
 800277a:	e610      	b.n	800239e <__aeabi_dsub+0x2be>
 800277c:	0014      	movs	r4, r2
 800277e:	2500      	movs	r5, #0
 8002780:	2200      	movs	r2, #0
 8002782:	e556      	b.n	8002232 <__aeabi_dsub+0x152>
 8002784:	9b02      	ldr	r3, [sp, #8]
 8002786:	4460      	add	r0, ip
 8002788:	4699      	mov	r9, r3
 800278a:	4560      	cmp	r0, ip
 800278c:	4192      	sbcs	r2, r2
 800278e:	444c      	add	r4, r9
 8002790:	4252      	negs	r2, r2
 8002792:	0005      	movs	r5, r0
 8002794:	18a4      	adds	r4, r4, r2
 8002796:	e74c      	b.n	8002632 <__aeabi_dsub+0x552>
 8002798:	001a      	movs	r2, r3
 800279a:	001c      	movs	r4, r3
 800279c:	432a      	orrs	r2, r5
 800279e:	d000      	beq.n	80027a2 <__aeabi_dsub+0x6c2>
 80027a0:	e6b3      	b.n	800250a <__aeabi_dsub+0x42a>
 80027a2:	e6c9      	b.n	8002538 <__aeabi_dsub+0x458>
 80027a4:	2480      	movs	r4, #128	@ 0x80
 80027a6:	2600      	movs	r6, #0
 80027a8:	0324      	lsls	r4, r4, #12
 80027aa:	e5ae      	b.n	800230a <__aeabi_dsub+0x22a>
 80027ac:	2120      	movs	r1, #32
 80027ae:	2500      	movs	r5, #0
 80027b0:	1a09      	subs	r1, r1, r0
 80027b2:	e517      	b.n	80021e4 <__aeabi_dsub+0x104>
 80027b4:	2200      	movs	r2, #0
 80027b6:	2500      	movs	r5, #0
 80027b8:	4c0b      	ldr	r4, [pc, #44]	@ (80027e8 <__aeabi_dsub+0x708>)
 80027ba:	e53a      	b.n	8002232 <__aeabi_dsub+0x152>
 80027bc:	2d00      	cmp	r5, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x6e2>
 80027c0:	e5f6      	b.n	80023b0 <__aeabi_dsub+0x2d0>
 80027c2:	464b      	mov	r3, r9
 80027c4:	1bda      	subs	r2, r3, r7
 80027c6:	4692      	mov	sl, r2
 80027c8:	2f00      	cmp	r7, #0
 80027ca:	d100      	bne.n	80027ce <__aeabi_dsub+0x6ee>
 80027cc:	e66f      	b.n	80024ae <__aeabi_dsub+0x3ce>
 80027ce:	2a38      	cmp	r2, #56	@ 0x38
 80027d0:	dc05      	bgt.n	80027de <__aeabi_dsub+0x6fe>
 80027d2:	2680      	movs	r6, #128	@ 0x80
 80027d4:	0436      	lsls	r6, r6, #16
 80027d6:	4334      	orrs	r4, r6
 80027d8:	4688      	mov	r8, r1
 80027da:	000e      	movs	r6, r1
 80027dc:	e6d1      	b.n	8002582 <__aeabi_dsub+0x4a2>
 80027de:	4688      	mov	r8, r1
 80027e0:	000e      	movs	r6, r1
 80027e2:	2501      	movs	r5, #1
 80027e4:	e6de      	b.n	80025a4 <__aeabi_dsub+0x4c4>
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	000007ff 	.word	0x000007ff
 80027ec:	ff7fffff 	.word	0xff7fffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x71a>
 80027f8:	e668      	b.n	80024cc <__aeabi_dsub+0x3ec>
 80027fa:	464b      	mov	r3, r9
 80027fc:	1bd9      	subs	r1, r3, r7
 80027fe:	2f00      	cmp	r7, #0
 8002800:	d101      	bne.n	8002806 <__aeabi_dsub+0x726>
 8002802:	468a      	mov	sl, r1
 8002804:	e5a7      	b.n	8002356 <__aeabi_dsub+0x276>
 8002806:	2701      	movs	r7, #1
 8002808:	2938      	cmp	r1, #56	@ 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x72e>
 800280c:	e5c7      	b.n	800239e <__aeabi_dsub+0x2be>
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	4314      	orrs	r4, r2
 8002814:	e5af      	b.n	8002376 <__aeabi_dsub+0x296>
 8002816:	46c0      	nop			@ (mov r8, r8)

08002818 <__aeabi_dcmpun>:
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	46c6      	mov	lr, r8
 800281c:	031e      	lsls	r6, r3, #12
 800281e:	0b36      	lsrs	r6, r6, #12
 8002820:	46b0      	mov	r8, r6
 8002822:	4e0d      	ldr	r6, [pc, #52]	@ (8002858 <__aeabi_dcmpun+0x40>)
 8002824:	030c      	lsls	r4, r1, #12
 8002826:	004d      	lsls	r5, r1, #1
 8002828:	005f      	lsls	r7, r3, #1
 800282a:	b500      	push	{lr}
 800282c:	0b24      	lsrs	r4, r4, #12
 800282e:	0d6d      	lsrs	r5, r5, #21
 8002830:	0d7f      	lsrs	r7, r7, #21
 8002832:	42b5      	cmp	r5, r6
 8002834:	d00b      	beq.n	800284e <__aeabi_dcmpun+0x36>
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__aeabi_dcmpun+0x40>)
 8002838:	2000      	movs	r0, #0
 800283a:	428f      	cmp	r7, r1
 800283c:	d104      	bne.n	8002848 <__aeabi_dcmpun+0x30>
 800283e:	4646      	mov	r6, r8
 8002840:	4316      	orrs	r6, r2
 8002842:	0030      	movs	r0, r6
 8002844:	1e43      	subs	r3, r0, #1
 8002846:	4198      	sbcs	r0, r3
 8002848:	bc80      	pop	{r7}
 800284a:	46b8      	mov	r8, r7
 800284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284e:	4304      	orrs	r4, r0
 8002850:	2001      	movs	r0, #1
 8002852:	2c00      	cmp	r4, #0
 8002854:	d1f8      	bne.n	8002848 <__aeabi_dcmpun+0x30>
 8002856:	e7ee      	b.n	8002836 <__aeabi_dcmpun+0x1e>
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_d2iz>:
 800285c:	000b      	movs	r3, r1
 800285e:	0002      	movs	r2, r0
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	4d16      	ldr	r5, [pc, #88]	@ (80028bc <__aeabi_d2iz+0x60>)
 8002864:	030c      	lsls	r4, r1, #12
 8002866:	b082      	sub	sp, #8
 8002868:	0049      	lsls	r1, r1, #1
 800286a:	2000      	movs	r0, #0
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	0b24      	lsrs	r4, r4, #12
 8002872:	0d49      	lsrs	r1, r1, #21
 8002874:	0fde      	lsrs	r6, r3, #31
 8002876:	42a9      	cmp	r1, r5
 8002878:	dd04      	ble.n	8002884 <__aeabi_d2iz+0x28>
 800287a:	4811      	ldr	r0, [pc, #68]	@ (80028c0 <__aeabi_d2iz+0x64>)
 800287c:	4281      	cmp	r1, r0
 800287e:	dd03      	ble.n	8002888 <__aeabi_d2iz+0x2c>
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <__aeabi_d2iz+0x68>)
 8002882:	18f0      	adds	r0, r6, r3
 8002884:	b002      	add	sp, #8
 8002886:	bd70      	pop	{r4, r5, r6, pc}
 8002888:	2080      	movs	r0, #128	@ 0x80
 800288a:	0340      	lsls	r0, r0, #13
 800288c:	4320      	orrs	r0, r4
 800288e:	4c0e      	ldr	r4, [pc, #56]	@ (80028c8 <__aeabi_d2iz+0x6c>)
 8002890:	1a64      	subs	r4, r4, r1
 8002892:	2c1f      	cmp	r4, #31
 8002894:	dd08      	ble.n	80028a8 <__aeabi_d2iz+0x4c>
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <__aeabi_d2iz+0x70>)
 8002898:	1a5b      	subs	r3, r3, r1
 800289a:	40d8      	lsrs	r0, r3
 800289c:	0003      	movs	r3, r0
 800289e:	4258      	negs	r0, r3
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	d1ef      	bne.n	8002884 <__aeabi_d2iz+0x28>
 80028a4:	0018      	movs	r0, r3
 80028a6:	e7ed      	b.n	8002884 <__aeabi_d2iz+0x28>
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <__aeabi_d2iz+0x74>)
 80028aa:	9a00      	ldr	r2, [sp, #0]
 80028ac:	469c      	mov	ip, r3
 80028ae:	0003      	movs	r3, r0
 80028b0:	4461      	add	r1, ip
 80028b2:	408b      	lsls	r3, r1
 80028b4:	40e2      	lsrs	r2, r4
 80028b6:	4313      	orrs	r3, r2
 80028b8:	e7f1      	b.n	800289e <__aeabi_d2iz+0x42>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	000003fe 	.word	0x000003fe
 80028c0:	0000041d 	.word	0x0000041d
 80028c4:	7fffffff 	.word	0x7fffffff
 80028c8:	00000433 	.word	0x00000433
 80028cc:	00000413 	.word	0x00000413
 80028d0:	fffffbed 	.word	0xfffffbed

080028d4 <__aeabi_i2d>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d016      	beq.n	8002908 <__aeabi_i2d+0x34>
 80028da:	17c3      	asrs	r3, r0, #31
 80028dc:	18c5      	adds	r5, r0, r3
 80028de:	405d      	eors	r5, r3
 80028e0:	0fc4      	lsrs	r4, r0, #31
 80028e2:	0028      	movs	r0, r5
 80028e4:	f000 f8cc 	bl	8002a80 <__clzsi2>
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <__aeabi_i2d+0x58>)
 80028ea:	1a1b      	subs	r3, r3, r0
 80028ec:	055b      	lsls	r3, r3, #21
 80028ee:	0d5b      	lsrs	r3, r3, #21
 80028f0:	280a      	cmp	r0, #10
 80028f2:	dc14      	bgt.n	800291e <__aeabi_i2d+0x4a>
 80028f4:	0002      	movs	r2, r0
 80028f6:	002e      	movs	r6, r5
 80028f8:	3215      	adds	r2, #21
 80028fa:	4096      	lsls	r6, r2
 80028fc:	220b      	movs	r2, #11
 80028fe:	1a12      	subs	r2, r2, r0
 8002900:	40d5      	lsrs	r5, r2
 8002902:	032d      	lsls	r5, r5, #12
 8002904:	0b2d      	lsrs	r5, r5, #12
 8002906:	e003      	b.n	8002910 <__aeabi_i2d+0x3c>
 8002908:	2400      	movs	r4, #0
 800290a:	2300      	movs	r3, #0
 800290c:	2500      	movs	r5, #0
 800290e:	2600      	movs	r6, #0
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	432b      	orrs	r3, r5
 8002914:	07e4      	lsls	r4, r4, #31
 8002916:	4323      	orrs	r3, r4
 8002918:	0030      	movs	r0, r6
 800291a:	0019      	movs	r1, r3
 800291c:	bd70      	pop	{r4, r5, r6, pc}
 800291e:	380b      	subs	r0, #11
 8002920:	4085      	lsls	r5, r0
 8002922:	032d      	lsls	r5, r5, #12
 8002924:	2600      	movs	r6, #0
 8002926:	0b2d      	lsrs	r5, r5, #12
 8002928:	e7f2      	b.n	8002910 <__aeabi_i2d+0x3c>
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	0000041e 	.word	0x0000041e

08002930 <__aeabi_ui2d>:
 8002930:	b510      	push	{r4, lr}
 8002932:	1e04      	subs	r4, r0, #0
 8002934:	d010      	beq.n	8002958 <__aeabi_ui2d+0x28>
 8002936:	f000 f8a3 	bl	8002a80 <__clzsi2>
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <__aeabi_ui2d+0x44>)
 800293c:	1a1b      	subs	r3, r3, r0
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	0d5b      	lsrs	r3, r3, #21
 8002942:	280a      	cmp	r0, #10
 8002944:	dc0f      	bgt.n	8002966 <__aeabi_ui2d+0x36>
 8002946:	220b      	movs	r2, #11
 8002948:	0021      	movs	r1, r4
 800294a:	1a12      	subs	r2, r2, r0
 800294c:	40d1      	lsrs	r1, r2
 800294e:	3015      	adds	r0, #21
 8002950:	030a      	lsls	r2, r1, #12
 8002952:	4084      	lsls	r4, r0
 8002954:	0b12      	lsrs	r2, r2, #12
 8002956:	e001      	b.n	800295c <__aeabi_ui2d+0x2c>
 8002958:	2300      	movs	r3, #0
 800295a:	2200      	movs	r2, #0
 800295c:	051b      	lsls	r3, r3, #20
 800295e:	4313      	orrs	r3, r2
 8002960:	0020      	movs	r0, r4
 8002962:	0019      	movs	r1, r3
 8002964:	bd10      	pop	{r4, pc}
 8002966:	0022      	movs	r2, r4
 8002968:	380b      	subs	r0, #11
 800296a:	4082      	lsls	r2, r0
 800296c:	0312      	lsls	r2, r2, #12
 800296e:	2400      	movs	r4, #0
 8002970:	0b12      	lsrs	r2, r2, #12
 8002972:	e7f3      	b.n	800295c <__aeabi_ui2d+0x2c>
 8002974:	0000041e 	.word	0x0000041e

08002978 <__aeabi_d2f>:
 8002978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297a:	004b      	lsls	r3, r1, #1
 800297c:	030f      	lsls	r7, r1, #12
 800297e:	0d5b      	lsrs	r3, r3, #21
 8002980:	4c3b      	ldr	r4, [pc, #236]	@ (8002a70 <__aeabi_d2f+0xf8>)
 8002982:	0f45      	lsrs	r5, r0, #29
 8002984:	b083      	sub	sp, #12
 8002986:	0a7f      	lsrs	r7, r7, #9
 8002988:	1c5e      	adds	r6, r3, #1
 800298a:	432f      	orrs	r7, r5
 800298c:	9000      	str	r0, [sp, #0]
 800298e:	9101      	str	r1, [sp, #4]
 8002990:	0fca      	lsrs	r2, r1, #31
 8002992:	00c5      	lsls	r5, r0, #3
 8002994:	4226      	tst	r6, r4
 8002996:	d00b      	beq.n	80029b0 <__aeabi_d2f+0x38>
 8002998:	4936      	ldr	r1, [pc, #216]	@ (8002a74 <__aeabi_d2f+0xfc>)
 800299a:	185c      	adds	r4, r3, r1
 800299c:	2cfe      	cmp	r4, #254	@ 0xfe
 800299e:	dd13      	ble.n	80029c8 <__aeabi_d2f+0x50>
 80029a0:	20ff      	movs	r0, #255	@ 0xff
 80029a2:	2300      	movs	r3, #0
 80029a4:	05c0      	lsls	r0, r0, #23
 80029a6:	4318      	orrs	r0, r3
 80029a8:	07d2      	lsls	r2, r2, #31
 80029aa:	4310      	orrs	r0, r2
 80029ac:	b003      	add	sp, #12
 80029ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <__aeabi_d2f+0x42>
 80029b4:	2000      	movs	r0, #0
 80029b6:	2300      	movs	r3, #0
 80029b8:	e7f4      	b.n	80029a4 <__aeabi_d2f+0x2c>
 80029ba:	433d      	orrs	r5, r7
 80029bc:	d0f0      	beq.n	80029a0 <__aeabi_d2f+0x28>
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	03db      	lsls	r3, r3, #15
 80029c2:	20ff      	movs	r0, #255	@ 0xff
 80029c4:	433b      	orrs	r3, r7
 80029c6:	e7ed      	b.n	80029a4 <__aeabi_d2f+0x2c>
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	dd14      	ble.n	80029f6 <__aeabi_d2f+0x7e>
 80029cc:	9b00      	ldr	r3, [sp, #0]
 80029ce:	00ff      	lsls	r7, r7, #3
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	4183      	sbcs	r3, r0
 80029d6:	0f69      	lsrs	r1, r5, #29
 80029d8:	433b      	orrs	r3, r7
 80029da:	430b      	orrs	r3, r1
 80029dc:	0759      	lsls	r1, r3, #29
 80029de:	d041      	beq.n	8002a64 <__aeabi_d2f+0xec>
 80029e0:	210f      	movs	r1, #15
 80029e2:	4019      	ands	r1, r3
 80029e4:	2904      	cmp	r1, #4
 80029e6:	d028      	beq.n	8002a3a <__aeabi_d2f+0xc2>
 80029e8:	3304      	adds	r3, #4
 80029ea:	0159      	lsls	r1, r3, #5
 80029ec:	d525      	bpl.n	8002a3a <__aeabi_d2f+0xc2>
 80029ee:	3401      	adds	r4, #1
 80029f0:	2300      	movs	r3, #0
 80029f2:	b2e0      	uxtb	r0, r4
 80029f4:	e7d6      	b.n	80029a4 <__aeabi_d2f+0x2c>
 80029f6:	0021      	movs	r1, r4
 80029f8:	3117      	adds	r1, #23
 80029fa:	dbdb      	blt.n	80029b4 <__aeabi_d2f+0x3c>
 80029fc:	2180      	movs	r1, #128	@ 0x80
 80029fe:	201e      	movs	r0, #30
 8002a00:	0409      	lsls	r1, r1, #16
 8002a02:	4339      	orrs	r1, r7
 8002a04:	1b00      	subs	r0, r0, r4
 8002a06:	281f      	cmp	r0, #31
 8002a08:	dd1b      	ble.n	8002a42 <__aeabi_d2f+0xca>
 8002a0a:	2602      	movs	r6, #2
 8002a0c:	4276      	negs	r6, r6
 8002a0e:	1b34      	subs	r4, r6, r4
 8002a10:	000e      	movs	r6, r1
 8002a12:	40e6      	lsrs	r6, r4
 8002a14:	0034      	movs	r4, r6
 8002a16:	2820      	cmp	r0, #32
 8002a18:	d004      	beq.n	8002a24 <__aeabi_d2f+0xac>
 8002a1a:	4817      	ldr	r0, [pc, #92]	@ (8002a78 <__aeabi_d2f+0x100>)
 8002a1c:	4684      	mov	ip, r0
 8002a1e:	4463      	add	r3, ip
 8002a20:	4099      	lsls	r1, r3
 8002a22:	430d      	orrs	r5, r1
 8002a24:	002b      	movs	r3, r5
 8002a26:	1e59      	subs	r1, r3, #1
 8002a28:	418b      	sbcs	r3, r1
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	0759      	lsls	r1, r3, #29
 8002a2e:	d015      	beq.n	8002a5c <__aeabi_d2f+0xe4>
 8002a30:	210f      	movs	r1, #15
 8002a32:	2400      	movs	r4, #0
 8002a34:	4019      	ands	r1, r3
 8002a36:	2904      	cmp	r1, #4
 8002a38:	d117      	bne.n	8002a6a <__aeabi_d2f+0xf2>
 8002a3a:	019b      	lsls	r3, r3, #6
 8002a3c:	0a5b      	lsrs	r3, r3, #9
 8002a3e:	b2e0      	uxtb	r0, r4
 8002a40:	e7b0      	b.n	80029a4 <__aeabi_d2f+0x2c>
 8002a42:	4c0e      	ldr	r4, [pc, #56]	@ (8002a7c <__aeabi_d2f+0x104>)
 8002a44:	191c      	adds	r4, r3, r4
 8002a46:	002b      	movs	r3, r5
 8002a48:	40a5      	lsls	r5, r4
 8002a4a:	40c3      	lsrs	r3, r0
 8002a4c:	40a1      	lsls	r1, r4
 8002a4e:	1e68      	subs	r0, r5, #1
 8002a50:	4185      	sbcs	r5, r0
 8002a52:	4329      	orrs	r1, r5
 8002a54:	430b      	orrs	r3, r1
 8002a56:	2400      	movs	r4, #0
 8002a58:	0759      	lsls	r1, r3, #29
 8002a5a:	d1c1      	bne.n	80029e0 <__aeabi_d2f+0x68>
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	2000      	movs	r0, #0
 8002a60:	0a5b      	lsrs	r3, r3, #9
 8002a62:	e79f      	b.n	80029a4 <__aeabi_d2f+0x2c>
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	b2e0      	uxtb	r0, r4
 8002a68:	e79c      	b.n	80029a4 <__aeabi_d2f+0x2c>
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	e7e5      	b.n	8002a3a <__aeabi_d2f+0xc2>
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	000007fe 	.word	0x000007fe
 8002a74:	fffffc80 	.word	0xfffffc80
 8002a78:	fffffca2 	.word	0xfffffca2
 8002a7c:	fffffc82 	.word	0xfffffc82

08002a80 <__clzsi2>:
 8002a80:	211c      	movs	r1, #28
 8002a82:	2301      	movs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	4298      	cmp	r0, r3
 8002a88:	d301      	bcc.n	8002a8e <__clzsi2+0xe>
 8002a8a:	0c00      	lsrs	r0, r0, #16
 8002a8c:	3910      	subs	r1, #16
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d301      	bcc.n	8002a98 <__clzsi2+0x18>
 8002a94:	0a00      	lsrs	r0, r0, #8
 8002a96:	3908      	subs	r1, #8
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	4298      	cmp	r0, r3
 8002a9c:	d301      	bcc.n	8002aa2 <__clzsi2+0x22>
 8002a9e:	0900      	lsrs	r0, r0, #4
 8002aa0:	3904      	subs	r1, #4
 8002aa2:	a202      	add	r2, pc, #8	@ (adr r2, 8002aac <__clzsi2+0x2c>)
 8002aa4:	5c10      	ldrb	r0, [r2, r0]
 8002aa6:	1840      	adds	r0, r0, r1
 8002aa8:	4770      	bx	lr
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	02020304 	.word	0x02020304
 8002ab0:	01010101 	.word	0x01010101
	...

08002abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002ac0:	f001 febe 	bl	8004840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac4:	f000 f884 	bl	8002bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ac8:	f000 fd5e 	bl	8003588 <MX_GPIO_Init>
  MX_DMA_Init();
 8002acc:	f000 fd36 	bl	800353c <MX_DMA_Init>
  MX_ADC_Init();
 8002ad0:	f000 fb6e 	bl	80031b0 <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 8002ad4:	f001 fd8a 	bl	80045ec <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8002ad8:	4930      	ldr	r1, [pc, #192]	@ (8002b9c <main+0xe0>)
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <main+0xe4>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f005 f9d6 	bl	8007e90 <HAL_UART_Receive_IT>

  MX_TIM1_Init();
 8002ae4:	f001 f9b6 	bl	8003e54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ae8:	f001 fabe 	bl	8004068 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002aec:	f001 fb12 	bl	8004114 <MX_TIM6_Init>
  MX_TIM14_Init();
 8002af0:	f001 fb32 	bl	8004158 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002af4:	f001 fb7c 	bl	80041f0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002af8:	f001 fbd2 	bl	80042a0 <MX_TIM16_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 8002afc:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <main+0xe8>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f003 fd7c 	bl	80065fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8002b04:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <main+0xec>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f003 fd78 	bl	80065fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <main+0xf0>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f003 fd74 	bl	80065fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8002b14:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <main+0xf4>)
 8002b16:	0018      	movs	r0, r3
 8002b18:	f003 fd70 	bl	80065fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <main+0xf8>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f003 fd6c 	bl	80065fc <HAL_TIM_Base_Start_IT>

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 8002b24:	4924      	ldr	r1, [pc, #144]	@ (8002bb8 <main+0xfc>)
 8002b26:	4b25      	ldr	r3, [pc, #148]	@ (8002bbc <main+0x100>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 f82c 	bl	8004b88 <HAL_ADC_Start_DMA>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d001      	beq.n	8002b38 <main+0x7c>
	{
		Error_Handler(); //This function also enable the interruption
 8002b34:	f000 f8c2 	bl	8002cbc <Error_Handler>
	}

  /* USER CODE BEGIN 2 */
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
 8002b38:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <main+0x104>)
 8002b3a:	210c      	movs	r1, #12
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f003 fe2f 	bl	80067a0 <HAL_TIM_OC_Start>
	HX711_Calibration(&weight_par);
 8002b42:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <main+0x108>)
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 ffd1 	bl	8003aec <HX711_Calibration>
	printflag.PID_Set = FALSE;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <main+0x10c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	715a      	strb	r2, [r3, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Kalman  filter
	weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <main+0x108>)
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <main+0x108>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <main+0x108>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <main+0x108>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	18d2      	adds	r2, r2, r3
 8002b66:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <main+0x108>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	18d3      	adds	r3, r2, r3
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7fd fb7a 	bl	8000268 <__divsi3>
 8002b74:	0003      	movs	r3, r0
 8002b76:	001a      	movs	r2, r3
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <main+0x108>)
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if(weight_par.calibration_flag)
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <main+0x108>)
 8002b7e:	7b1b      	ldrb	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <main+0xd4>
	{
//		printf("%d, %d\n", weight_par.gramAvgval,(int)htim1.Instance->CCR1 );

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)rx_buff, sizeof(rx_buff)+1);
 8002b84:	4911      	ldr	r1, [pc, #68]	@ (8002bcc <main+0x110>)
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <main+0xe4>)
 8002b88:	2212      	movs	r2, #18
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f005 f9d8 	bl	8007f40 <HAL_UART_Transmit_DMA>
	//	  Print_Pooling(&printflag);
	if(1000 <= printflag.TimeCNT)
	{
	//		  printf("VBat%0.2fV\n",	adc_val.vbat*(Vrefint*4095/adc_val.vref_data)/4095/VBAT_FACTOR);
	}
	delay_ms(500);
 8002b90:	23fa      	movs	r3, #250	@ 0xfa
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	0018      	movs	r0, r3
 8002b96:	f001 fd11 	bl	80045bc <delay_ms>
	weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
 8002b9a:	e7d9      	b.n	8002b50 <main+0x94>
 8002b9c:	200005c7 	.word	0x200005c7
 8002ba0:	200005cc 	.word	0x200005cc
 8002ba4:	20000360 	.word	0x20000360
 8002ba8:	200003a8 	.word	0x200003a8
 8002bac:	200003f0 	.word	0x200003f0
 8002bb0:	20000438 	.word	0x20000438
 8002bb4:	20000480 	.word	0x20000480
 8002bb8:	20000230 	.word	0x20000230
 8002bbc:	20000280 	.word	0x20000280
 8002bc0:	20000318 	.word	0x20000318
 8002bc4:	20000244 	.word	0x20000244
 8002bc8:	20000274 	.word	0x20000274
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b095      	sub	sp, #84	@ 0x54
 8002bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bd6:	2420      	movs	r4, #32
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	0018      	movs	r0, r3
 8002bdc:	2330      	movs	r3, #48	@ 0x30
 8002bde:	001a      	movs	r2, r3
 8002be0:	2100      	movs	r1, #0
 8002be2:	f008 fbb7 	bl	800b354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be6:	2310      	movs	r3, #16
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	0018      	movs	r0, r3
 8002bec:	2310      	movs	r3, #16
 8002bee:	001a      	movs	r2, r3
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f008 fbaf 	bl	800b354 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf6:	003b      	movs	r3, r7
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f008 fba8 	bl	800b354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c04:	0021      	movs	r1, r4
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2201      	movs	r2, #1
 8002c10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2210      	movs	r2, #16
 8002c16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	22a0      	movs	r2, #160	@ 0xa0
 8002c28:	0392      	lsls	r2, r2, #14
 8002c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	2200      	movs	r2, #0
 8002c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 fefb 	bl	8005a30 <HAL_RCC_OscConfig>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c3e:	f000 f83d 	bl	8002cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c42:	2110      	movs	r1, #16
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	2207      	movs	r2, #7
 8002c48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2101      	movs	r1, #1
 8002c60:	0018      	movs	r0, r3
 8002c62:	f003 f9ff 	bl	8006064 <HAL_RCC_ClockConfig>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c6a:	f000 f827 	bl	8002cbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c6e:	003b      	movs	r3, r7
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c74:	003b      	movs	r3, r7
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f003 fb35 	bl	80062ec <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002c86:	f000 f819 	bl	8002cbc <Error_Handler>
  }
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b015      	add	sp, #84	@ 0x54
 8002c90:	bd90      	pop	{r4, r7, pc}
	...

08002c94 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit_DMA(&huart1 , (uint8_t *)&ch, 1);
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <__io_putchar+0x20>)
 8002c9e:	1d39      	adds	r1, r7, #4
 8002ca0:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <__io_putchar+0x24>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f004 ffe4 	bl	8007c70 <HAL_UART_Transmit>
    return ch;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	0000ffff 	.word	0x0000ffff
 8002cb8:	200005cc 	.word	0x200005cc

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc0:	b672      	cpsid	i
}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	e7fd      	b.n	8002cc4 <Error_Handler+0x8>

08002cc8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4b78      	ldr	r3, [pc, #480]	@ (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d11c      	bne.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		if(1 == weight_par.calibration_flag)
 8002cd8:	4b77      	ldr	r3, [pc, #476]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002cda:	7b1b      	ldrb	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d000      	beq.n	8002ce2 <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002ce0:	e0e3      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
		{
			Get_weight(&weight_par);
 8002ce2:	4b75      	ldr	r3, [pc, #468]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fedb 	bl	8003aa0 <Get_weight>
			weight_par.cnt= weight_par.cnt >= 5? 0:weight_par.cnt+1;
 8002cea:	4b73      	ldr	r3, [pc, #460]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	dc03      	bgt.n	8002cfa <HAL_TIM_PeriodElapsedCallback+0x32>
 8002cf2:	4b71      	ldr	r3, [pc, #452]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x34>
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
			weight_par.gramAvg[weight_par.cnt] = weight_par.gram;
 8002d00:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d04:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	4b6b      	ldr	r3, [pc, #428]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d0a:	3204      	adds	r2, #4
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	50d1      	str	r1, [r2, r3]
	}
	else if(htim == &htim16)//1us interval for time counting
	{

	}
}
 8002d10:	e0cb      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
	else if(htim == &htim6)// PWM step 1 for accurate acceleration, change the timer to modify the ramp time
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4b69      	ldr	r3, [pc, #420]	@ (8002ebc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d000      	beq.n	8002d1c <HAL_TIM_PeriodElapsedCallback+0x54>
 8002d1a:	e0aa      	b.n	8002e72 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		if(1 == weight_par.calibration_flag)
 8002d1c:	4b66      	ldr	r3, [pc, #408]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d1e:	7b1b      	ldrb	r3, [r3, #12]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d000      	beq.n	8002d26 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8002d24:	e0c1      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
			temp = Incremental_PID(&weight_par, PULL_FORCE_THR, &PID_Parameters);
 8002d26:	250f      	movs	r5, #15
 8002d28:	197c      	adds	r4, r7, r5
 8002d2a:	4a65      	ldr	r2, [pc, #404]	@ (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d2c:	23fa      	movs	r3, #250	@ 0xfa
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	4b61      	ldr	r3, [pc, #388]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 ff5c 	bl	8003bf0 <Incremental_PID>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	7023      	strb	r3, [r4, #0]
			temp = (temp + pid_pwm)>100? 100: temp;
 8002d3c:	0029      	movs	r1, r5
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4a60      	ldr	r2, [pc, #384]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	2b64      	cmp	r3, #100	@ 0x64
 8002d4a:	dc02      	bgt.n	8002d52 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	e000      	b.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8002d52:	2264      	movs	r2, #100	@ 0x64
 8002d54:	210f      	movs	r1, #15
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	701a      	strb	r2, [r3, #0]
			temp = (temp + pid_pwm)<0? 0: temp;
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	187a      	adds	r2, r7, r1
 8002d5e:	7812      	ldrb	r2, [r2, #0]
 8002d60:	701a      	strb	r2, [r3, #0]
			pid_pwm += temp;
 8002d62:	4b58      	ldr	r3, [pc, #352]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	18d3      	adds	r3, r2, r3
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b55      	ldr	r3, [pc, #340]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002d70:	701a      	strb	r2, [r3, #0]
			if(0<(pid_pwm-dc_pwm))
 8002d72:	4b54      	ldr	r3, [pc, #336]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	001a      	movs	r2, r3
 8002d78:	4b53      	ldr	r3, [pc, #332]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	dd33      	ble.n	8002dea <HAL_TIM_PeriodElapsedCallback+0x122>
				if(0 == weight_par.eps_flag)
 8002d82:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d84:	7b5b      	ldrb	r3, [r3, #13]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d127      	bne.n	8002dda <HAL_TIM_PeriodElapsedCallback+0x112>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);// LED indicator
 8002d8a:	4b50      	ldr	r3, [pc, #320]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2101      	movs	r1, #1
 8002d90:	0018      	movs	r0, r3
 8002d92:	f002 fe0a 	bl	80059aa <HAL_GPIO_WritePin>
					AHBL_ON;
 8002d96:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f003 febc 	bl	8006b18 <HAL_TIM_PWM_Stop>
 8002da0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002da2:	2104      	movs	r1, #4
 8002da4:	0018      	movs	r0, r3
 8002da6:	f003 feb7 	bl	8006b18 <HAL_TIM_PWM_Stop>
 8002daa:	4b49      	ldr	r3, [pc, #292]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002dac:	2108      	movs	r1, #8
 8002dae:	0018      	movs	r0, r3
 8002db0:	f003 feb2 	bl	8006b18 <HAL_TIM_PWM_Stop>
 8002db4:	23e0      	movs	r3, #224	@ 0xe0
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	4846      	ldr	r0, [pc, #280]	@ (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	f002 fdf4 	bl	80059aa <HAL_GPIO_WritePin>
 8002dc2:	4b43      	ldr	r3, [pc, #268]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f003 fdf4 	bl	80069b4 <HAL_TIM_PWM_Start>
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	01db      	lsls	r3, r3, #7
 8002dd0:	4840      	ldr	r0, [pc, #256]	@ (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	f002 fde8 	bl	80059aa <HAL_GPIO_WritePin>
				weight_par.eps_flag = 1;
 8002dda:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	735a      	strb	r2, [r3, #13]
				dc_pwm = pid_pwm;
 8002de0:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	4b38      	ldr	r3, [pc, #224]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e00a      	b.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x138>
			else if(0>(pid_pwm-dc_pwm))//dc_pwm > pid_pwm,
 8002dea:	4b36      	ldr	r3, [pc, #216]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	001a      	movs	r2, r3
 8002df0:	4b35      	ldr	r3, [pc, #212]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	d503      	bpl.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x138>
				dc_pwm = pid_pwm;
 8002df8:	4b32      	ldr	r3, [pc, #200]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002dfe:	701a      	strb	r2, [r3, #0]
			if(dc_pwm>10) //When PWM>10%, start to drive
 8002e00:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b0a      	cmp	r3, #10
 8002e06:	d904      	bls.n	8002e12 <HAL_TIM_PeriodElapsedCallback+0x14a>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002e08:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34
			if(weight_par.gramAvgval<PULL_FORCE_THR)//LOWER_LIMMIT)// when release the handle, turn off all
 8002e12:	4b29      	ldr	r3, [pc, #164]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e16:	23fa      	movs	r3, #250	@ 0xfa
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	da45      	bge.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	2101      	movs	r1, #1
 8002e24:	0018      	movs	r0, r3
 8002e26:	f002 fdc0 	bl	80059aa <HAL_GPIO_WritePin>
				CLOSE_PWM;
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f003 fe72 	bl	8006b18 <HAL_TIM_PWM_Stop>
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	4826      	ldr	r0, [pc, #152]	@ (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	f002 fdb4 	bl	80059aa <HAL_GPIO_WritePin>
				weight_par.eps_flag = 0;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	735a      	strb	r2, [r3, #13]
				pid_pwm = 0;//if not, the PID_PWM will always be the same value and dc_pwm never be 0
 8002e48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
				dc_pwm = dc_pwm<=10? 0:dc_pwm-PWM_STEP;
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b0a      	cmp	r3, #10
 8002e54:	d904      	bls.n	8002e60 <HAL_TIM_PeriodElapsedCallback+0x198>
 8002e56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8002e60:	2200      	movs	r2, #0
 8002e62:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e64:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002e66:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e70:	e01b      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
	else if(htim == &htim14)//10ms enter for E-wagon protection counting
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d117      	bne.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
		printflag.TimeCNT = printflag.TimeCNT>1100? 0:printflag.TimeCNT+1;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d803      	bhi.n	8002e8c <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8002e84:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_TIM_PeriodElapsedCallback+0x1c6>
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e90:	601a      	str	r2, [r3, #0]
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 8002e92:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e94:	8b5a      	ldrh	r2, [r3, #26]
 8002e96:	23fa      	movs	r3, #250	@ 0xfa
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d905      	bls.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1e2>
			adc_val.commutation_timeout = 0;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	831a      	strh	r2, [r3, #24]
}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	20000360 	.word	0x20000360
 8002eb8:	20000244 	.word	0x20000244
 8002ebc:	200003a8 	.word	0x200003a8
 8002ec0:	20000034 	.word	0x20000034
 8002ec4:	2000027c 	.word	0x2000027c
 8002ec8:	2000027d 	.word	0x2000027d
 8002ecc:	48000800 	.word	0x48000800
 8002ed0:	20000318 	.word	0x20000318
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	200003f0 	.word	0x200003f0
 8002edc:	20000274 	.word	0x20000274
 8002ee0:	0000044c 	.word	0x0000044c
 8002ee4:	20000014 	.word	0x20000014

08002ee8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b08d      	sub	sp, #52	@ 0x34
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8003120 <HAL_UART_RxCpltCallback+0x238>)
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d000      	beq.n	8002efa <HAL_UART_RxCpltCallback+0x12>
 8002ef8:	e10e      	b.n	8003118 <HAL_UART_RxCpltCallback+0x230>
	{
		extern uint8_t cnt;
		rxbuf[cnt] = rxdata;
 8002efa:	4b8a      	ldr	r3, [pc, #552]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	001a      	movs	r2, r3
 8002f00:	4b89      	ldr	r3, [pc, #548]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 8002f02:	7819      	ldrb	r1, [r3, #0]
 8002f04:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002f06:	5499      	strb	r1, [r3, r2]
		const char cat[] = "0X13\r\n"; //APP(A:1) to Controller(C:3)
 8002f08:	2314      	movs	r3, #20
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	4a88      	ldr	r2, [pc, #544]	@ (8003130 <HAL_UART_RxCpltCallback+0x248>)
 8002f0e:	6811      	ldr	r1, [r2, #0]
 8002f10:	6019      	str	r1, [r3, #0]
 8002f12:	8891      	ldrh	r1, [r2, #4]
 8002f14:	8099      	strh	r1, [r3, #4]
 8002f16:	7992      	ldrb	r2, [r2, #6]
 8002f18:	719a      	strb	r2, [r3, #6]
		cnt=cnt==RX_BUF_NUM?1:cnt+1;
 8002f1a:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2bff      	cmp	r3, #255	@ 0xff
 8002f20:	d004      	beq.n	8002f2c <HAL_UART_RxCpltCallback+0x44>
 8002f22:	4b80      	ldr	r3, [pc, #512]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_RxCpltCallback+0x46>
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002f30:	701a      	strb	r2, [r3, #0]
		float PIDV;

		char a[6];

		if(rxdata == 'e')//'\n')
 8002f32:	4b7d      	ldr	r3, [pc, #500]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b65      	cmp	r3, #101	@ 0x65
 8002f38:	d14e      	bne.n	8002fd8 <HAL_UART_RxCpltCallback+0xf0>
		{
//			printf("sting:%s\r\n", rxbuf);

			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f40:	e007      	b.n	8002f52 <HAL_UART_RxCpltCallback+0x6a>
				rxbuf[t]=0;
 8002f42:	4a7a      	ldr	r2, [pc, #488]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	18d3      	adds	r3, r2, r3
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	3301      	adds	r3, #1
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f56:	ddf4      	ble.n	8002f42 <HAL_UART_RxCpltCallback+0x5a>
			cnt = 0;
 8002f58:	4b72      	ldr	r3, [pc, #456]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]

			if(0 == strcmp((char*) rxbuf,"0x00"))
 8002f5e:	4a75      	ldr	r2, [pc, #468]	@ (8003134 <HAL_UART_RxCpltCallback+0x24c>)
 8002f60:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fd f8cf 	bl	8000108 <strcmp>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_UART_RxCpltCallback+0x90>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 8002f6e:	4b72      	ldr	r3, [pc, #456]	@ (8003138 <HAL_UART_RxCpltCallback+0x250>)
 8002f70:	0018      	movs	r0, r3
 8002f72:	f003 fb8f 	bl	8006694 <HAL_TIM_Base_Stop_IT>
 8002f76:	e02f      	b.n	8002fd8 <HAL_UART_RxCpltCallback+0xf0>
			}

			else if(0 == strcmp((char*) rxbuf, "0x01"))
 8002f78:	4a70      	ldr	r2, [pc, #448]	@ (800313c <HAL_UART_RxCpltCallback+0x254>)
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7fd f8c2 	bl	8000108 <strcmp>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_UART_RxCpltCallback+0xaa>
			{
				HAL_TIM_Base_Start_IT(&htim6);
 8002f88:	4b6b      	ldr	r3, [pc, #428]	@ (8003138 <HAL_UART_RxCpltCallback+0x250>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f003 fb36 	bl	80065fc <HAL_TIM_Base_Start_IT>
 8002f90:	e022      	b.n	8002fd8 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp((char*)rxbuf, "0x02"))
 8002f92:	4a6b      	ldr	r2, [pc, #428]	@ (8003140 <HAL_UART_RxCpltCallback+0x258>)
 8002f94:	4b65      	ldr	r3, [pc, #404]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002f96:	0011      	movs	r1, r2
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7fd f8b5 	bl	8000108 <strcmp>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_UART_RxCpltCallback+0xc2>
			{
				BT_PWM_handle(TURE);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f001 fbd6 	bl	8004754 <BT_PWM_handle>
 8002fa8:	e016      	b.n	8002fd8 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp(cat, "0x06"))
			{

			}
			else if(0 == strcmp((char*) rxbuf, MotorOn))
 8002faa:	4a66      	ldr	r2, [pc, #408]	@ (8003144 <HAL_UART_RxCpltCallback+0x25c>)
 8002fac:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fd f8a9 	bl	8000108 <strcmp>
 8002fb6:	1e03      	subs	r3, r0, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_UART_RxCpltCallback+0xda>
			{
				printflag.Motor_On = TRUE;
 8002fba:	4b63      	ldr	r3, [pc, #396]	@ (8003148 <HAL_UART_RxCpltCallback+0x260>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	719a      	strb	r2, [r3, #6]
 8002fc0:	e00a      	b.n	8002fd8 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp((char*) rxbuf, MotorOff)) // 0X13MOff
 8002fc2:	4a62      	ldr	r2, [pc, #392]	@ (800314c <HAL_UART_RxCpltCallback+0x264>)
 8002fc4:	4b59      	ldr	r3, [pc, #356]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd f89d 	bl	8000108 <strcmp>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_UART_RxCpltCallback+0xf0>
			{
				printflag.Motor_Off = TRUE;
 8002fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003148 <HAL_UART_RxCpltCallback+0x260>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	71da      	strb	r2, [r3, #7]

			}
		}
		if(rxdata == 'P') // This code comsumes 3KB?
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b50      	cmp	r3, #80	@ 0x50
 8002fde:	d128      	bne.n	8003032 <HAL_UART_RxCpltCallback+0x14a>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002fe0:	4b50      	ldr	r3, [pc, #320]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe6:	e007      	b.n	8002ff8 <HAL_UART_RxCpltCallback+0x110>
				rxbuf[t]=0;
 8002fe8:	4a50      	ldr	r2, [pc, #320]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	2bfe      	cmp	r3, #254	@ 0xfe
 8002ffc:	ddf4      	ble.n	8002fe8 <HAL_UART_RxCpltCallback+0x100>
			cnt = 0;
 8002ffe:	4b49      	ldr	r3, [pc, #292]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^P]", a);
 8003004:	240c      	movs	r4, #12
 8003006:	193a      	adds	r2, r7, r4
 8003008:	4951      	ldr	r1, [pc, #324]	@ (8003150 <HAL_UART_RxCpltCallback+0x268>)
 800300a:	4b48      	ldr	r3, [pc, #288]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 800300c:	0018      	movs	r0, r3
 800300e:	f008 f88b 	bl	800b128 <siscanf>
			PIDV = atof(a);
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0018      	movs	r0, r3
 8003016:	f006 fa9d 	bl	8009554 <atof>
 800301a:	0002      	movs	r2, r0
 800301c:	000b      	movs	r3, r1
 800301e:	0010      	movs	r0, r2
 8003020:	0019      	movs	r1, r3
 8003022:	f7ff fca9 	bl	8002978 <__aeabi_d2f>
 8003026:	1c03      	adds	r3, r0, #0
 8003028:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Kp = PIDV;
 800302a:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_UART_RxCpltCallback+0x26c>)
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e06c      	b.n	800310c <HAL_UART_RxCpltCallback+0x224>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'I')
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b49      	cmp	r3, #73	@ 0x49
 8003038:	d128      	bne.n	800308c <HAL_UART_RxCpltCallback+0x1a4>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800303a:	4b3a      	ldr	r3, [pc, #232]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	e007      	b.n	8003052 <HAL_UART_RxCpltCallback+0x16a>
				rxbuf[t]=0;
 8003042:	4a3a      	ldr	r2, [pc, #232]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	3301      	adds	r3, #1
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2bfe      	cmp	r3, #254	@ 0xfe
 8003056:	ddf4      	ble.n	8003042 <HAL_UART_RxCpltCallback+0x15a>
			cnt = 0;
 8003058:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^I]", a);
 800305e:	240c      	movs	r4, #12
 8003060:	193a      	adds	r2, r7, r4
 8003062:	493d      	ldr	r1, [pc, #244]	@ (8003158 <HAL_UART_RxCpltCallback+0x270>)
 8003064:	4b31      	ldr	r3, [pc, #196]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 8003066:	0018      	movs	r0, r3
 8003068:	f008 f85e 	bl	800b128 <siscanf>
			PIDV = atof(a);
 800306c:	193b      	adds	r3, r7, r4
 800306e:	0018      	movs	r0, r3
 8003070:	f006 fa70 	bl	8009554 <atof>
 8003074:	0002      	movs	r2, r0
 8003076:	000b      	movs	r3, r1
 8003078:	0010      	movs	r0, r2
 800307a:	0019      	movs	r1, r3
 800307c:	f7ff fc7c 	bl	8002978 <__aeabi_d2f>
 8003080:	1c03      	adds	r3, r0, #0
 8003082:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Ki = PIDV;
 8003084:	4b33      	ldr	r3, [pc, #204]	@ (8003154 <HAL_UART_RxCpltCallback+0x26c>)
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	e03f      	b.n	800310c <HAL_UART_RxCpltCallback+0x224>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'D'|| rxdata == 'E')
 800308c:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b44      	cmp	r3, #68	@ 0x44
 8003092:	d003      	beq.n	800309c <HAL_UART_RxCpltCallback+0x1b4>
 8003094:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b45      	cmp	r3, #69	@ 0x45
 800309a:	d137      	bne.n	800310c <HAL_UART_RxCpltCallback+0x224>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800309c:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	e007      	b.n	80030b4 <HAL_UART_RxCpltCallback+0x1cc>
				rxbuf[t]=0;
 80030a4:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 80030a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80030ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b0:	3301      	adds	r3, #1
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80030b8:	ddf4      	ble.n	80030a4 <HAL_UART_RxCpltCallback+0x1bc>
			cnt = 0;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <HAL_UART_RxCpltCallback+0x23c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
			if(rxdata == 'D')
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b44      	cmp	r3, #68	@ 0x44
 80030c6:	d11a      	bne.n	80030fe <HAL_UART_RxCpltCallback+0x216>
			{
				sscanf(rxbuf, "%[^D]", a);
 80030c8:	240c      	movs	r4, #12
 80030ca:	193a      	adds	r2, r7, r4
 80030cc:	4923      	ldr	r1, [pc, #140]	@ (800315c <HAL_UART_RxCpltCallback+0x274>)
 80030ce:	4b17      	ldr	r3, [pc, #92]	@ (800312c <HAL_UART_RxCpltCallback+0x244>)
 80030d0:	0018      	movs	r0, r3
 80030d2:	f008 f829 	bl	800b128 <siscanf>
				PIDV = atof(a);
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	0018      	movs	r0, r3
 80030da:	f006 fa3b 	bl	8009554 <atof>
 80030de:	0002      	movs	r2, r0
 80030e0:	000b      	movs	r3, r1
 80030e2:	0010      	movs	r0, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	f7ff fc47 	bl	8002978 <__aeabi_d2f>
 80030ea:	1c03      	adds	r3, r0, #0
 80030ec:	61fb      	str	r3, [r7, #28]
				PID_Parameters.Kd = PIDV;
 80030ee:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <HAL_UART_RxCpltCallback+0x26c>)
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	609a      	str	r2, [r3, #8]
				printf("0X31 Set ok\n");
 80030f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <HAL_UART_RxCpltCallback+0x278>)
 80030f6:	0018      	movs	r0, r3
 80030f8:	f007 ffec 	bl	800b0d4 <puts>
 80030fc:	e006      	b.n	800310c <HAL_UART_RxCpltCallback+0x224>
			}
			else
			{
				printflag.PID_Set = TRUE;
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_UART_RxCpltCallback+0x260>)
 8003100:	2201      	movs	r2, #1
 8003102:	715a      	strb	r2, [r3, #5]
				printf("0X31 PID align ok\n");
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <HAL_UART_RxCpltCallback+0x27c>)
 8003106:	0018      	movs	r0, r3
 8003108:	f007 ffe4 	bl	800b0d4 <puts>

			}
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 800310c:	4906      	ldr	r1, [pc, #24]	@ (8003128 <HAL_UART_RxCpltCallback+0x240>)
 800310e:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <HAL_UART_RxCpltCallback+0x238>)
 8003110:	2201      	movs	r2, #1
 8003112:	0018      	movs	r0, r3
 8003114:	f004 febc 	bl	8007e90 <HAL_UART_Receive_IT>
	}
}
 8003118:	46c0      	nop			@ (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b00d      	add	sp, #52	@ 0x34
 800311e:	bd90      	pop	{r4, r7, pc}
 8003120:	200005cc 	.word	0x200005cc
 8003124:	200005c8 	.word	0x200005c8
 8003128:	200005c7 	.word	0x200005c7
 800312c:	200004c8 	.word	0x200004c8
 8003130:	0800e808 	.word	0x0800e808
 8003134:	0800e7a0 	.word	0x0800e7a0
 8003138:	200003a8 	.word	0x200003a8
 800313c:	0800e7a8 	.word	0x0800e7a8
 8003140:	0800e7b0 	.word	0x0800e7b0
 8003144:	0800e7b8 	.word	0x0800e7b8
 8003148:	20000274 	.word	0x20000274
 800314c:	0800e7c4 	.word	0x0800e7c4
 8003150:	0800e7d0 	.word	0x0800e7d0
 8003154:	20000034 	.word	0x20000034
 8003158:	0800e7d8 	.word	0x0800e7d8
 800315c:	0800e7e0 	.word	0x0800e7e0
 8003160:	0800e7e8 	.word	0x0800e7e8
 8003164:	0800e7f4 	.word	0x0800e7f4

08003168 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1, rx_buff, sizeof(rx_buff)+1);
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <HAL_UART_TxCpltCallback+0x1c>)
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_UART_TxCpltCallback+0x20>)
 8003174:	2212      	movs	r2, #18
 8003176:	0018      	movs	r0, r3
 8003178:	f004 fe1a 	bl	8007db0 <HAL_UART_Transmit_IT>
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000000 	.word	0x20000000
 8003188:	200005cc 	.word	0x200005cc

0800318c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{									  // The ADC sample time is for all channel, the DMA
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	@ 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6278      	str	r0, [r7, #36]	@ 0x24
	My_ADC_getvalue(adc_buf, &adc_val);
 8003194:	003b      	movs	r3, r7
 8003196:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003198:	4904      	ldr	r1, [pc, #16]	@ (80031ac <HAL_ADC_ConvCpltCallback+0x20>)
 800319a:	0018      	movs	r0, r3
 800319c:	f000 f968 	bl	8003470 <My_ADC_getvalue>
//	BLDC_Phase_switching(&adc_val);
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b00a      	add	sp, #40	@ 0x28
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000014 	.word	0x20000014
 80031ac:	20000230 	.word	0x20000230

080031b0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	0018      	movs	r0, r3
 80031ba:	230c      	movs	r3, #12
 80031bc:	001a      	movs	r2, r3
 80031be:	2100      	movs	r1, #0
 80031c0:	f008 f8c8 	bl	800b354 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80031c4:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <MX_ADC_Init+0x198>)
 80031c6:	4a61      	ldr	r2, [pc, #388]	@ (800334c <MX_ADC_Init+0x19c>)
 80031c8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <MX_ADC_Init+0x198>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80031d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003348 <MX_ADC_Init+0x198>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003348 <MX_ADC_Init+0x198>)
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80031dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003348 <MX_ADC_Init+0x198>)
 80031de:	2201      	movs	r2, #1
 80031e0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80031e2:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <MX_ADC_Init+0x198>)
 80031e4:	2208      	movs	r2, #8
 80031e6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80031e8:	4b57      	ldr	r3, [pc, #348]	@ (8003348 <MX_ADC_Init+0x198>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80031ee:	4b56      	ldr	r3, [pc, #344]	@ (8003348 <MX_ADC_Init+0x198>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80031f4:	4b54      	ldr	r3, [pc, #336]	@ (8003348 <MX_ADC_Init+0x198>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80031fa:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <MX_ADC_Init+0x198>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003200:	4b51      	ldr	r3, [pc, #324]	@ (8003348 <MX_ADC_Init+0x198>)
 8003202:	2240      	movs	r2, #64	@ 0x40
 8003204:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003206:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <MX_ADC_Init+0x198>)
 8003208:	2280      	movs	r2, #128	@ 0x80
 800320a:	00d2      	lsls	r2, r2, #3
 800320c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800320e:	4b4e      	ldr	r3, [pc, #312]	@ (8003348 <MX_ADC_Init+0x198>)
 8003210:	2224      	movs	r2, #36	@ 0x24
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003216:	4b4c      	ldr	r3, [pc, #304]	@ (8003348 <MX_ADC_Init+0x198>)
 8003218:	2201      	movs	r2, #1
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800321c:	4b4a      	ldr	r3, [pc, #296]	@ (8003348 <MX_ADC_Init+0x198>)
 800321e:	0018      	movs	r0, r3
 8003220:	f001 fb72 	bl	8004908 <HAL_ADC_Init>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003228:	f7ff fd48 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	0152      	lsls	r2, r2, #5
 8003238:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	2206      	movs	r2, #6
 800323e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003240:	1d3a      	adds	r2, r7, #4
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <MX_ADC_Init+0x198>)
 8003244:	0011      	movs	r1, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f001 fd30 	bl	8004cac <HAL_ADC_ConfigChannel>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d001      	beq.n	8003254 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003250:	f7ff fd34 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800325a:	1d3a      	adds	r2, r7, #4
 800325c:	4b3a      	ldr	r3, [pc, #232]	@ (8003348 <MX_ADC_Init+0x198>)
 800325e:	0011      	movs	r1, r2
 8003260:	0018      	movs	r0, r3
 8003262:	f001 fd23 	bl	8004cac <HAL_ADC_ConfigChannel>
 8003266:	1e03      	subs	r3, r0, #0
 8003268:	d001      	beq.n	800326e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800326a:	f7ff fd27 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2202      	movs	r2, #2
 8003272:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003274:	1d3a      	adds	r2, r7, #4
 8003276:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <MX_ADC_Init+0x198>)
 8003278:	0011      	movs	r1, r2
 800327a:	0018      	movs	r0, r3
 800327c:	f001 fd16 	bl	8004cac <HAL_ADC_ConfigChannel>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8003284:	f7ff fd1a 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	2203      	movs	r2, #3
 800328c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800328e:	1d3a      	adds	r2, r7, #4
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <MX_ADC_Init+0x198>)
 8003292:	0011      	movs	r1, r2
 8003294:	0018      	movs	r0, r3
 8003296:	f001 fd09 	bl	8004cac <HAL_ADC_ConfigChannel>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800329e:	f7ff fd0d 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	2204      	movs	r2, #4
 80032a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032a8:	1d3a      	adds	r2, r7, #4
 80032aa:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <MX_ADC_Init+0x198>)
 80032ac:	0011      	movs	r1, r2
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 fcfc 	bl	8004cac <HAL_ADC_ConfigChannel>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80032b8:	f7ff fd00 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2205      	movs	r2, #5
 80032c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032c2:	1d3a      	adds	r2, r7, #4
 80032c4:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <MX_ADC_Init+0x198>)
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f001 fcef 	bl	8004cac <HAL_ADC_ConfigChannel>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80032d2:	f7ff fcf3 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	2206      	movs	r2, #6
 80032da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032dc:	1d3a      	adds	r2, r7, #4
 80032de:	4b1a      	ldr	r3, [pc, #104]	@ (8003348 <MX_ADC_Init+0x198>)
 80032e0:	0011      	movs	r1, r2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f001 fce2 	bl	8004cac <HAL_ADC_ConfigChannel>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80032ec:	f7ff fce6 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	2207      	movs	r2, #7
 80032f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <MX_ADC_Init+0x198>)
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f001 fcd5 	bl	8004cac <HAL_ADC_ConfigChannel>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8003306:	f7ff fcd9 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2208      	movs	r2, #8
 800330e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003310:	1d3a      	adds	r2, r7, #4
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <MX_ADC_Init+0x198>)
 8003314:	0011      	movs	r1, r2
 8003316:	0018      	movs	r0, r3
 8003318:	f001 fcc8 	bl	8004cac <HAL_ADC_ConfigChannel>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d001      	beq.n	8003324 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8003320:	f7ff fccc 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2211      	movs	r2, #17
 8003328:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800332a:	1d3a      	adds	r2, r7, #4
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <MX_ADC_Init+0x198>)
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f001 fcbb 	bl	8004cac <HAL_ADC_ConfigChannel>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 800333a:	f7ff fcbf 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	20000280 	.word	0x20000280
 800334c:	40012400 	.word	0x40012400

08003350 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b08b      	sub	sp, #44	@ 0x2c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	2414      	movs	r4, #20
 800335a:	193b      	adds	r3, r7, r4
 800335c:	0018      	movs	r0, r3
 800335e:	2314      	movs	r3, #20
 8003360:	001a      	movs	r2, r3
 8003362:	2100      	movs	r1, #0
 8003364:	f007 fff6 	bl	800b354 <memset>
  if(adcHandle->Instance==ADC1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3b      	ldr	r2, [pc, #236]	@ (800345c <HAL_ADC_MspInit+0x10c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d170      	bne.n	8003454 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003372:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	0089      	lsls	r1, r1, #2
 800337c:	430a      	orrs	r2, r1
 800337e:	619a      	str	r2, [r3, #24]
 8003380:	4b37      	ldr	r3, [pc, #220]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 8003394:	2180      	movs	r1, #128	@ 0x80
 8003396:	0289      	lsls	r1, r1, #10
 8003398:	430a      	orrs	r2, r1
 800339a:	615a      	str	r2, [r3, #20]
 800339c:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	2380      	movs	r3, #128	@ 0x80
 80033a2:	029b      	lsls	r3, r3, #10
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	02c9      	lsls	r1, r1, #11
 80033b4:	430a      	orrs	r2, r1
 80033b6:	615a      	str	r2, [r3, #20]
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <HAL_ADC_MspInit+0x110>)
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	02db      	lsls	r3, r3, #11
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	22ff      	movs	r2, #255	@ 0xff
 80033ca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2203      	movs	r2, #3
 80033d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	193a      	adds	r2, r7, r4
 80033da:	2390      	movs	r3, #144	@ 0x90
 80033dc:	05db      	lsls	r3, r3, #23
 80033de:	0011      	movs	r1, r2
 80033e0:	0018      	movs	r0, r3
 80033e2:	f002 f955 	bl	8005690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	2203      	movs	r2, #3
 80033f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <HAL_ADC_MspInit+0x114>)
 80033fc:	0019      	movs	r1, r3
 80033fe:	0010      	movs	r0, r2
 8003400:	f002 f946 	bl	8005690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003404:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 8003406:	4a19      	ldr	r2, [pc, #100]	@ (800346c <HAL_ADC_MspInit+0x11c>)
 8003408:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800340a:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 8003418:	2280      	movs	r2, #128	@ 0x80
 800341a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800341c:	4b12      	ldr	r3, [pc, #72]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 800341e:	2280      	movs	r2, #128	@ 0x80
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003424:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 8003426:	2280      	movs	r2, #128	@ 0x80
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800342c:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 800342e:	2220      	movs	r2, #32
 8003430:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 8003434:	2200      	movs	r2, #0
 8003436:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 800343a:	0018      	movs	r0, r3
 800343c:	f001 ff12 	bl	8005264 <HAL_DMA_Init>
 8003440:	1e03      	subs	r3, r0, #0
 8003442:	d001      	beq.n	8003448 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8003444:	f7ff fc3a 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_ADC_MspInit+0x118>)
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b00b      	add	sp, #44	@ 0x2c
 800345a:	bd90      	pop	{r4, r7, pc}
 800345c:	40012400 	.word	0x40012400
 8003460:	40021000 	.word	0x40021000
 8003464:	48000400 	.word	0x48000400
 8003468:	200002c0 	.word	0x200002c0
 800346c:	40020008 	.word	0x40020008

08003470 <My_ADC_getvalue>:
//How to get the actual Vdda
//Vrefint_cal is based on 3.3V VDDA, while Vrefint_data is based on actual VDDA
//Vref_int/Vref_cal == 3.3/4095	   Vref_int/Vrefint_data == VDDA/4095 ==> VDDA = 3.3V*Vreint_cal/Vrefint_data
//Then using the actual Vdda to get the actual Vrevint and Voltage of other channels
MADC_Structure My_ADC_getvalue(uint16_t* adc_buf, MADC_Structure * adc_val)// the local array addr is not valid after function done
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]

	adc_val->bemf_pa 		= adc_buf[0] / 300>1?1:0; //620 == 0.5V
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	8819      	ldrh	r1, [r3, #0]
 8003480:	2396      	movs	r3, #150	@ 0x96
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	2300      	movs	r3, #0
 8003486:	4291      	cmp	r1, r2
 8003488:	415b      	adcs	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	001a      	movs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	801a      	strh	r2, [r3, #0]
	adc_val->bemf_pb 		= adc_buf[1] / 300>1?1:0;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3302      	adds	r3, #2
 8003496:	8819      	ldrh	r1, [r3, #0]
 8003498:	2396      	movs	r3, #150	@ 0x96
 800349a:	009a      	lsls	r2, r3, #2
 800349c:	2300      	movs	r3, #0
 800349e:	4291      	cmp	r1, r2
 80034a0:	415b      	adcs	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	001a      	movs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	805a      	strh	r2, [r3, #2]
	adc_val->bemf_pc 		= adc_buf[2] / 300>1?1:0;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3304      	adds	r3, #4
 80034ae:	8819      	ldrh	r1, [r3, #0]
 80034b0:	2396      	movs	r3, #150	@ 0x96
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	2300      	movs	r3, #0
 80034b6:	4291      	cmp	r1, r2
 80034b8:	415b      	adcs	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	001a      	movs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	809a      	strh	r2, [r3, #4]
	adc_val->vbat 			= adc_buf[3];
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	88da      	ldrh	r2, [r3, #6]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	821a      	strh	r2, [r3, #16]
	adc_val->ia				= adc_buf[4];
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	891a      	ldrh	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	811a      	strh	r2, [r3, #8]
	adc_val->ib				= adc_buf[5];
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	895a      	ldrh	r2, [r3, #10]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	815a      	strh	r2, [r3, #10]
	adc_val->isum			= adc_buf[6];
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	899a      	ldrh	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	819a      	strh	r2, [r3, #12]
	adc_val->isum_filtered 	= adc_buf[7];
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	89da      	ldrh	r2, [r3, #14]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	81da      	strh	r2, [r3, #14]
	adc_val->bemf_mid		= adc_buf[8];
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	8a1a      	ldrh	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	80da      	strh	r2, [r3, #6]
	adc_val->vref_data 		= adc_buf[9];
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	8a5a      	ldrh	r2, [r3, #18]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	825a      	strh	r2, [r3, #18]

	// zero_acrross_flag <<= adc_val_bemf_pa if(zero_acrross_flag==0xff) ,

	adc_val->bemf_last = adc_val->bemf_now;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7d1a      	ldrb	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	755a      	strb	r2, [r3, #21]
	adc_val->bemf_now  = adc_val->bemf_pa * 4 + adc_val->bemf_pb * 2 + adc_val->bemf_pc * 1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	8852      	ldrh	r2, [r2, #2]
 800350c:	189b      	adds	r3, r3, r2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	18db      	adds	r3, r3, r3
 8003512:	b2da      	uxtb	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	889b      	ldrh	r3, [r3, #4]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	18d3      	adds	r3, r2, r3
 800351c:	b2da      	uxtb	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	751a      	strb	r2, [r3, #20]

	return *adc_val;
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0010      	movs	r0, r2
 8003528:	0019      	movs	r1, r3
 800352a:	231e      	movs	r3, #30
 800352c:	001a      	movs	r2, r3
 800352e:	f007 ffb5 	bl	800b49c <memcpy>
}
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <MX_DMA_Init+0x48>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <MX_DMA_Init+0x48>)
 8003548:	2101      	movs	r1, #1
 800354a:	430a      	orrs	r2, r1
 800354c:	615a      	str	r2, [r3, #20]
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <MX_DMA_Init+0x48>)
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	2009      	movs	r0, #9
 8003560:	f001 fe4e 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003564:	2009      	movs	r0, #9
 8003566:	f001 fe60 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	200a      	movs	r0, #10
 8003570:	f001 fe46 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003574:	200a      	movs	r0, #10
 8003576:	f001 fe58 	bl	800522a <HAL_NVIC_EnableIRQ>

}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	40021000 	.word	0x40021000

08003588 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b08b      	sub	sp, #44	@ 0x2c
 800358c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358e:	2414      	movs	r4, #20
 8003590:	193b      	adds	r3, r7, r4
 8003592:	0018      	movs	r0, r3
 8003594:	2314      	movs	r3, #20
 8003596:	001a      	movs	r2, r3
 8003598:	2100      	movs	r1, #0
 800359a:	f007 fedb 	bl	800b354 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800359e:	4bb9      	ldr	r3, [pc, #740]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	4bb8      	ldr	r3, [pc, #736]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035a4:	2180      	movs	r1, #128	@ 0x80
 80035a6:	0309      	lsls	r1, r1, #12
 80035a8:	430a      	orrs	r2, r1
 80035aa:	615a      	str	r2, [r3, #20]
 80035ac:	4bb5      	ldr	r3, [pc, #724]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	2380      	movs	r3, #128	@ 0x80
 80035b2:	031b      	lsls	r3, r3, #12
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ba:	4bb2      	ldr	r3, [pc, #712]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	4bb1      	ldr	r3, [pc, #708]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035c0:	2180      	movs	r1, #128	@ 0x80
 80035c2:	03c9      	lsls	r1, r1, #15
 80035c4:	430a      	orrs	r2, r1
 80035c6:	615a      	str	r2, [r3, #20]
 80035c8:	4bae      	ldr	r3, [pc, #696]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	03db      	lsls	r3, r3, #15
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	4bab      	ldr	r3, [pc, #684]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	4baa      	ldr	r3, [pc, #680]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	0289      	lsls	r1, r1, #10
 80035e0:	430a      	orrs	r2, r1
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	029b      	lsls	r3, r3, #10
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	4ba4      	ldr	r3, [pc, #656]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	4ba3      	ldr	r3, [pc, #652]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 80035f8:	2180      	movs	r1, #128	@ 0x80
 80035fa:	02c9      	lsls	r1, r1, #11
 80035fc:	430a      	orrs	r2, r1
 80035fe:	615a      	str	r2, [r3, #20]
 8003600:	4ba0      	ldr	r3, [pc, #640]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	02db      	lsls	r3, r3, #11
 8003608:	4013      	ands	r3, r2
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800360e:	4b9d      	ldr	r3, [pc, #628]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	4b9c      	ldr	r3, [pc, #624]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 8003614:	2180      	movs	r1, #128	@ 0x80
 8003616:	0349      	lsls	r1, r1, #13
 8003618:	430a      	orrs	r2, r1
 800361a:	615a      	str	r2, [r3, #20]
 800361c:	4b99      	ldr	r3, [pc, #612]	@ (8003884 <MX_GPIO_Init+0x2fc>)
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	035b      	lsls	r3, r3, #13
 8003624:	4013      	ands	r3, r2
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTWakeUp_GPIO_Port, BTWakeUp_Pin, GPIO_PIN_SET);
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	4896      	ldr	r0, [pc, #600]	@ (8003888 <MX_GPIO_Init+0x300>)
 8003630:	2201      	movs	r2, #1
 8003632:	0019      	movs	r1, r3
 8003634:	f002 f9b9 	bl	80059aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 8003638:	4994      	ldr	r1, [pc, #592]	@ (800388c <MX_GPIO_Init+0x304>)
 800363a:	4b93      	ldr	r3, [pc, #588]	@ (8003888 <MX_GPIO_Init+0x300>)
 800363c:	2200      	movs	r2, #0
 800363e:	0018      	movs	r0, r3
 8003640:	f002 f9b3 	bl	80059aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8003644:	4b92      	ldr	r3, [pc, #584]	@ (8003890 <MX_GPIO_Init+0x308>)
 8003646:	2200      	movs	r2, #0
 8003648:	2110      	movs	r1, #16
 800364a:	0018      	movs	r0, r3
 800364c:	f002 f9ad 	bl	80059aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8003650:	4990      	ldr	r1, [pc, #576]	@ (8003894 <MX_GPIO_Init+0x30c>)
 8003652:	4b91      	ldr	r3, [pc, #580]	@ (8003898 <MX_GPIO_Init+0x310>)
 8003654:	2200      	movs	r2, #0
 8003656:	0018      	movs	r0, r3
 8003658:	f002 f9a7 	bl	80059aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	0219      	lsls	r1, r3, #8
 8003660:	2390      	movs	r3, #144	@ 0x90
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	2200      	movs	r2, #0
 8003666:	0018      	movs	r0, r3
 8003668:	f002 f99f 	bl	80059aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800366c:	193b      	adds	r3, r7, r4
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	01d2      	lsls	r2, r2, #7
 8003672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003674:	193b      	adds	r3, r7, r4
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	193b      	adds	r3, r7, r4
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003680:	193b      	adds	r3, r7, r4
 8003682:	4a81      	ldr	r2, [pc, #516]	@ (8003888 <MX_GPIO_Init+0x300>)
 8003684:	0019      	movs	r1, r3
 8003686:	0010      	movs	r0, r2
 8003688:	f002 f802 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTWakeUp_Pin;
 800368c:	0021      	movs	r1, r4
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2280      	movs	r2, #128	@ 0x80
 8003692:	0212      	lsls	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003696:	000c      	movs	r4, r1
 8003698:	193b      	adds	r3, r7, r4
 800369a:	2201      	movs	r2, #1
 800369c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	2201      	movs	r2, #1
 80036a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BTWakeUp_GPIO_Port, &GPIO_InitStruct);
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	4a76      	ldr	r2, [pc, #472]	@ (8003888 <MX_GPIO_Init+0x300>)
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f001 ffed 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	2243      	movs	r2, #67	@ 0x43
 80036ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	2203      	movs	r2, #3
 80036c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	4a71      	ldr	r2, [pc, #452]	@ (8003890 <MX_GPIO_Init+0x308>)
 80036cc:	0019      	movs	r1, r3
 80036ce:	0010      	movs	r0, r2
 80036d0:	f001 ffde 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	2201      	movs	r2, #1
 80036de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	2202      	movs	r2, #2
 80036e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	4a66      	ldr	r2, [pc, #408]	@ (8003888 <MX_GPIO_Init+0x300>)
 80036f0:	0019      	movs	r1, r3
 80036f2:	0010      	movs	r0, r2
 80036f4:	f001 ffcc 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	220e      	movs	r2, #14
 80036fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2203      	movs	r2, #3
 8003702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370a:	193b      	adds	r3, r7, r4
 800370c:	4a5e      	ldr	r2, [pc, #376]	@ (8003888 <MX_GPIO_Init+0x300>)
 800370e:	0019      	movs	r1, r3
 8003710:	0010      	movs	r0, r2
 8003712:	f001 ffbd 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2210      	movs	r2, #16
 800371a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2201      	movs	r2, #1
 8003720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	193b      	adds	r3, r7, r4
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	193b      	adds	r3, r7, r4
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800372e:	193b      	adds	r3, r7, r4
 8003730:	4a57      	ldr	r2, [pc, #348]	@ (8003890 <MX_GPIO_Init+0x308>)
 8003732:	0019      	movs	r1, r3
 8003734:	0010      	movs	r0, r2
 8003736:	f001 ffab 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800373a:	193b      	adds	r3, r7, r4
 800373c:	2220      	movs	r2, #32
 800373e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003740:	193b      	adds	r3, r7, r4
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	193b      	adds	r3, r7, r4
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800374c:	193b      	adds	r3, r7, r4
 800374e:	4a50      	ldr	r2, [pc, #320]	@ (8003890 <MX_GPIO_Init+0x308>)
 8003750:	0019      	movs	r1, r3
 8003752:	0010      	movs	r0, r2
 8003754:	f001 ff9c 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003758:	0021      	movs	r1, r4
 800375a:	187b      	adds	r3, r7, r1
 800375c:	22e1      	movs	r2, #225	@ 0xe1
 800375e:	0152      	lsls	r2, r2, #5
 8003760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003762:	000c      	movs	r4, r1
 8003764:	193b      	adds	r3, r7, r4
 8003766:	2201      	movs	r2, #1
 8003768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	193b      	adds	r3, r7, r4
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	193b      	adds	r3, r7, r4
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003776:	193b      	adds	r3, r7, r4
 8003778:	4a43      	ldr	r2, [pc, #268]	@ (8003888 <MX_GPIO_Init+0x300>)
 800377a:	0019      	movs	r1, r3
 800377c:	0010      	movs	r0, r2
 800377e:	f001 ff87 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8003782:	193b      	adds	r3, r7, r4
 8003784:	4a43      	ldr	r2, [pc, #268]	@ (8003894 <MX_GPIO_Init+0x30c>)
 8003786:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2201      	movs	r2, #1
 800378c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	193b      	adds	r3, r7, r4
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379a:	193b      	adds	r3, r7, r4
 800379c:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <MX_GPIO_Init+0x310>)
 800379e:	0019      	movs	r1, r3
 80037a0:	0010      	movs	r0, r2
 80037a2:	f001 ff75 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	22c0      	movs	r2, #192	@ 0xc0
 80037aa:	0152      	lsls	r2, r2, #5
 80037ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	2203      	movs	r2, #3
 80037b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	193a      	adds	r2, r7, r4
 80037bc:	2390      	movs	r3, #144	@ 0x90
 80037be:	05db      	lsls	r3, r3, #23
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f001 ff64 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037c8:	0021      	movs	r1, r4
 80037ca:	187b      	adds	r3, r7, r1
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	2288      	movs	r2, #136	@ 0x88
 80037d4:	0352      	lsls	r2, r2, #13
 80037d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037de:	000c      	movs	r4, r1
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003890 <MX_GPIO_Init+0x308>)
 80037e4:	0019      	movs	r1, r3
 80037e6:	0010      	movs	r0, r2
 80037e8:	f001 ff52 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037ec:	0021      	movs	r1, r4
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	2280      	movs	r2, #128	@ 0x80
 80037f2:	0212      	lsls	r2, r2, #8
 80037f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f6:	000c      	movs	r4, r1
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	2201      	movs	r2, #1
 80037fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	193b      	adds	r3, r7, r4
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	193a      	adds	r2, r7, r4
 800380c:	2390      	movs	r3, #144	@ 0x90
 800380e:	05db      	lsls	r3, r3, #23
 8003810:	0011      	movs	r1, r2
 8003812:	0018      	movs	r0, r3
 8003814:	f001 ff3c 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003818:	0021      	movs	r1, r4
 800381a:	187b      	adds	r3, r7, r1
 800381c:	2204      	movs	r2, #4
 800381e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003820:	187b      	adds	r3, r7, r1
 8003822:	2288      	movs	r2, #136	@ 0x88
 8003824:	0352      	lsls	r2, r2, #13
 8003826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800382e:	000c      	movs	r4, r1
 8003830:	187b      	adds	r3, r7, r1
 8003832:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <MX_GPIO_Init+0x314>)
 8003834:	0019      	movs	r1, r3
 8003836:	0010      	movs	r0, r2
 8003838:	f001 ff2a 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800383c:	0021      	movs	r1, r4
 800383e:	187b      	adds	r3, r7, r1
 8003840:	22c0      	movs	r2, #192	@ 0xc0
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2212      	movs	r2, #18
 800384a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2203      	movs	r2, #3
 8003856:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2201      	movs	r2, #1
 800385c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	187b      	adds	r3, r7, r1
 8003860:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <MX_GPIO_Init+0x310>)
 8003862:	0019      	movs	r1, r3
 8003864:	0010      	movs	r0, r2
 8003866:	f001 ff13 	bl	8005690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	2007      	movs	r0, #7
 8003870:	f001 fcc6 	bl	8005200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003874:	2007      	movs	r0, #7
 8003876:	f001 fcd8 	bl	800522a <HAL_NVIC_EnableIRQ>

}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b00b      	add	sp, #44	@ 0x2c
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	40021000 	.word	0x40021000
 8003888:	48000800 	.word	0x48000800
 800388c:	00001c21 	.word	0x00001c21
 8003890:	48001400 	.word	0x48001400
 8003894:	0000fc04 	.word	0x0000fc04
 8003898:	48000400 	.word	0x48000400
 800389c:	48000c00 	.word	0x48000c00

080038a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a6:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <HAL_MspInit+0x44>)
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <HAL_MspInit+0x44>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
 80038b2:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <HAL_MspInit+0x44>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2201      	movs	r2, #1
 80038b8:	4013      	ands	r3, r2
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <HAL_MspInit+0x44>)
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_MspInit+0x44>)
 80038c4:	2180      	movs	r1, #128	@ 0x80
 80038c6:	0549      	lsls	r1, r1, #21
 80038c8:	430a      	orrs	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_MspInit+0x44>)
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	055b      	lsls	r3, r3, #21
 80038d4:	4013      	ands	r3, r2
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	40021000 	.word	0x40021000

080038e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038ec:	46c0      	nop			@ (mov r8, r8)
 80038ee:	e7fd      	b.n	80038ec <NMI_Handler+0x4>

080038f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	e7fd      	b.n	80038f4 <HardFault_Handler+0x4>

080038f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003910:	f000 ffde 	bl	80048d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800391e:	2080      	movs	r0, #128	@ 0x80
 8003920:	f002 f860 	bl	80059e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <DMA1_Channel1_IRQHandler+0x14>)
 8003932:	0018      	movs	r0, r3
 8003934:	f001 fdc1 	bl	80054ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	200002c0 	.word	0x200002c0

08003944 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <DMA1_Channel2_3_IRQHandler+0x14>)
 800394a:	0018      	movs	r0, r3
 800394c:	f001 fdb5 	bl	80054ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	20000654 	.word	0x20000654

0800395c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003960:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <TIM3_IRQHandler+0x14>)
 8003962:	0018      	movs	r0, r3
 8003964:	f003 f954 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	20000360 	.word	0x20000360

08003974 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <TIM6_IRQHandler+0x14>)
 800397a:	0018      	movs	r0, r3
 800397c:	f003 f948 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	200003a8 	.word	0x200003a8

0800398c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <TIM14_IRQHandler+0x14>)
 8003992:	0018      	movs	r0, r3
 8003994:	f003 f93c 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	200003f0 	.word	0x200003f0

080039a4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80039a8:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <TIM15_IRQHandler+0x14>)
 80039aa:	0018      	movs	r0, r3
 80039ac:	f003 f930 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	20000438 	.word	0x20000438

080039bc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <TIM16_IRQHandler+0x14>)
 80039c2:	0018      	movs	r0, r3
 80039c4:	f003 f924 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	20000480 	.word	0x20000480

080039d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <USART1_IRQHandler+0x14>)
 80039da:	0018      	movs	r0, r3
 80039dc:	f004 fb40 	bl	8008060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	200005cc 	.word	0x200005cc

080039ec <Get_24bit_Weight>:
 *      Author: kzhou
 */
#include "sw_spi.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	0002      	movs	r2, r0
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	701a      	strb	r2, [r3, #0]
	unsigned int weight=0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
	SW_SPI_PWR_ON; //Pull down clk
 80039fc:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	2110      	movs	r1, #16
 8003a02:	0018      	movs	r0, r3
 8003a04:	f001 ffd1 	bl	80059aa <HAL_GPIO_WritePin>

	while(SW_SPI_DAT_RDY)
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f001 ffae 	bl	8005970 <HAL_GPIO_ReadPin>
 8003a14:	1e03      	subs	r3, r0, #0
 8003a16:	d1f8      	bne.n	8003a0a <Get_24bit_Weight+0x1e>
//		SW_SPI_CLK_L;
//		printf("Un-ready\r\n");

	}

	for(char i = 24; i!=0; i--)
 8003a18:	230b      	movs	r3, #11
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2218      	movs	r2, #24
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e021      	b.n	8003a66 <Get_24bit_Weight+0x7a>
	{
		SW_SPI_CLK_H;
 8003a22:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	2110      	movs	r1, #16
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f001 ffbe 	bl	80059aa <HAL_GPIO_WritePin>
		weight = weight<<1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
		SW_SPI_CLK_L;
 8003a34:	4b19      	ldr	r3, [pc, #100]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	2110      	movs	r1, #16
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f001 ffb5 	bl	80059aa <HAL_GPIO_WritePin>
		if(SW_SPI_DAT_RDY)
 8003a40:	4b16      	ldr	r3, [pc, #88]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 8003a42:	2120      	movs	r1, #32
 8003a44:	0018      	movs	r0, r3
 8003a46:	f001 ff93 	bl	8005970 <HAL_GPIO_ReadPin>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d002      	beq.n	8003a54 <Get_24bit_Weight+0x68>
		{
		 weight+=1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
		}
		delay_us(1);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f000 fd83 	bl	8004560 <delay_us>
	for(char i = 24; i!=0; i--)
 8003a5a:	210b      	movs	r1, #11
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	3a01      	subs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	230b      	movs	r3, #11
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1d8      	bne.n	8003a22 <Get_24bit_Weight+0x36>
	}
	SW_SPI_CLK_H;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	2110      	movs	r1, #16
 8003a76:	0018      	movs	r0, r3
 8003a78:	f001 ff97 	bl	80059aa <HAL_GPIO_WritePin>
	weight = weight^0x800000;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2280      	movs	r2, #128	@ 0x80
 8003a80:	0412      	lsls	r2, r2, #16
 8003a82:	4053      	eors	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
	SW_SPI_CLK_L;
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <Get_24bit_Weight+0xb0>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f001 ff8c 	bl	80059aa <HAL_GPIO_WritePin>

	//Preserved for channel selection

	return weight;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b004      	add	sp, #16
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	48001400 	.word	0x48001400

08003aa0 <Get_weight>:

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	if(weight_par->calibration_flag)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7b1b      	ldrb	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d019      	beq.n	8003ae4 <Get_weight+0x44>
	{
		weight_par->gross_weight = Get_24bit_Weight(CHA_128);
 8003ab0:	2019      	movs	r0, #25
 8003ab2:	f7ff ff9b 	bl	80039ec <Get_24bit_Weight>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	001a      	movs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	605a      	str	r2, [r3, #4]
		if(weight_par->gross_weight >= weight_par->calibrated_value)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	db0c      	blt.n	8003ae4 <Get_weight+0x44>
			weight_par->gram = ((weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2137      	movs	r1, #55	@ 0x37
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7fc fbc6 	bl	8000268 <__divsi3>
 8003adc:	0003      	movs	r3, r0
 8003ade:	001a      	movs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]
	}
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HX711_Calibration>:

void HX711_Calibration(HX711_Structure* weight_par)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	  /*******Get gross weight**************/
	for(char i=0;i<5;i++)
 8003af4:	230f      	movs	r3, #15
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e020      	b.n	8003b40 <HX711_Calibration+0x54>
	{
		SW_SPI_PWR_OFF;
 8003afe:	4b37      	ldr	r3, [pc, #220]	@ (8003bdc <HX711_Calibration+0xf0>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	2110      	movs	r1, #16
 8003b04:	0018      	movs	r0, r3
 8003b06:	f001 ff50 	bl	80059aa <HAL_GPIO_WritePin>
		delay_us(2000);
 8003b0a:	23fa      	movs	r3, #250	@ 0xfa
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 fd26 	bl	8004560 <delay_us>
		SW_SPI_PWR_ON;
 8003b14:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HX711_Calibration+0xf0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	2110      	movs	r1, #16
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f001 ff45 	bl	80059aa <HAL_GPIO_WritePin>
		weight_par->calibrated_value+= Get_24bit_Weight(CHA_128);
 8003b20:	2019      	movs	r0, #25
 8003b22:	f7ff ff63 	bl	80039ec <Get_24bit_Weight>
 8003b26:	0002      	movs	r2, r0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	001a      	movs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]
	for(char i=0;i<5;i++)
 8003b34:	210f      	movs	r1, #15
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	3201      	adds	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d9d9      	bls.n	8003afe <HX711_Calibration+0x12>
	}
	weight_par->calibrated_value /=5;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2105      	movs	r1, #5
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fc fb89 	bl	8000268 <__divsi3>
 8003b56:	0003      	movs	r3, r0
 8003b58:	001a      	movs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]



	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003b5e:	e025      	b.n	8003bac <HX711_Calibration+0xc0>
	  {
		  printf("Sensor initial error, re-calibrating\r\n");
 8003b60:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HX711_Calibration+0xf4>)
 8003b62:	0018      	movs	r0, r3
 8003b64:	f007 fab6 	bl	800b0d4 <puts>
		  SW_SPI_PWR_OFF;
 8003b68:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HX711_Calibration+0xf0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2110      	movs	r1, #16
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f001 ff1b 	bl	80059aa <HAL_GPIO_WritePin>
		  delay_us(200);
 8003b74:	20c8      	movs	r0, #200	@ 0xc8
 8003b76:	f000 fcf3 	bl	8004560 <delay_us>
		  SW_SPI_PWR_ON;
 8003b7a:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <HX711_Calibration+0xf0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2110      	movs	r1, #16
 8003b80:	0018      	movs	r0, r3
 8003b82:	f001 ff12 	bl	80059aa <HAL_GPIO_WritePin>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003b86:	2019      	movs	r0, #25
 8003b88:	f7ff ff30 	bl	80039ec <Get_24bit_Weight>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	001a      	movs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
		  delay_us(2000);
 8003b94:	23fa      	movs	r3, #250	@ 0xfa
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 fce1 	bl	8004560 <delay_us>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003b9e:	2019      	movs	r0, #25
 8003ba0:	f7ff ff24 	bl	80039ec <Get_24bit_Weight>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]
	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8003be4 <HX711_Calibration+0xf8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	ddd4      	ble.n	8003b60 <HX711_Calibration+0x74>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	@ (8003be8 <HX711_Calibration+0xfc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	dccf      	bgt.n	8003b60 <HX711_Calibration+0x74>
	  }
	  printf("calibration ok weight:%d\r\n", weight_par->calibrated_value);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HX711_Calibration+0x100>)
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f007 fa1d 	bl	800b008 <iprintf>
	  weight_par->calibration_flag = 1; //Calibration done
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	731a      	strb	r2, [r3, #12]

}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	48001400 	.word	0x48001400
 8003be0:	0800e810 	.word	0x0800e810
 8003be4:	007a11ff 	.word	0x007a11ff
 8003be8:	0084c060 	.word	0x0084c060
 8003bec:	0800e838 	.word	0x0800e838

08003bf0 <Incremental_PID>:
// e(k) the value difference of actual and setting e(k-1) the last time difference
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]

char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr, PID_ParameterStruct* PID_Parameters)
{
 8003bf0:	b5b0      	push	{r4, r5, r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	1c0a      	adds	r2, r1, #0
 8003c00:	801a      	strh	r2, [r3, #0]
	static signed int   Bias=0, Last_bias=0, Last1_bias = 0;
	static int PWM = 0;
	Bias = weight_par->gramAvgval> PULL_FORCE_THR? weight_par->gramAvgval - PULL_FORCE_THR : 0;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	22fa      	movs	r2, #250	@ 0xfa
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	da01      	bge.n	8003c12 <Incremental_PID+0x22>
 8003c0e:	23fa      	movs	r3, #250	@ 0xfa
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4a29      	ldr	r2, [pc, #164]	@ (8003cb8 <Incremental_PID+0xc8>)
 8003c14:	189a      	adds	r2, r3, r2
 8003c16:	4b29      	ldr	r3, [pc, #164]	@ (8003cbc <Incremental_PID+0xcc>)
 8003c18:	601a      	str	r2, [r3, #0]
	//sum_integral +=Bias*Ki;
	PWM = PID_Parameters->Kp*(Bias-Last_bias)+PID_Parameters->Ki*Bias + PID_Parameters->Kd*(Bias - Last_bias);//(Bias-2*Last_bias+Last1_bias);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681c      	ldr	r4, [r3, #0]
 8003c1e:	4b27      	ldr	r3, [pc, #156]	@ (8003cbc <Incremental_PID+0xcc>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <Incremental_PID+0xd0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7fc ff9d 	bl	8000b68 <__aeabi_i2f>
 8003c2e:	1c03      	adds	r3, r0, #0
 8003c30:	1c19      	adds	r1, r3, #0
 8003c32:	1c20      	adds	r0, r4, #0
 8003c34:	f7fc fe3a 	bl	80008ac <__aeabi_fmul>
 8003c38:	1c03      	adds	r3, r0, #0
 8003c3a:	1c1d      	adds	r5, r3, #0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685c      	ldr	r4, [r3, #4]
 8003c40:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <Incremental_PID+0xcc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fc ff8f 	bl	8000b68 <__aeabi_i2f>
 8003c4a:	1c03      	adds	r3, r0, #0
 8003c4c:	1c19      	adds	r1, r3, #0
 8003c4e:	1c20      	adds	r0, r4, #0
 8003c50:	f7fc fe2c 	bl	80008ac <__aeabi_fmul>
 8003c54:	1c03      	adds	r3, r0, #0
 8003c56:	1c19      	adds	r1, r3, #0
 8003c58:	1c28      	adds	r0, r5, #0
 8003c5a:	f7fc fc9d 	bl	8000598 <__aeabi_fadd>
 8003c5e:	1c03      	adds	r3, r0, #0
 8003c60:	1c1d      	adds	r5, r3, #0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689c      	ldr	r4, [r3, #8]
 8003c66:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <Incremental_PID+0xcc>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b15      	ldr	r3, [pc, #84]	@ (8003cc0 <Incremental_PID+0xd0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7fc ff79 	bl	8000b68 <__aeabi_i2f>
 8003c76:	1c03      	adds	r3, r0, #0
 8003c78:	1c19      	adds	r1, r3, #0
 8003c7a:	1c20      	adds	r0, r4, #0
 8003c7c:	f7fc fe16 	bl	80008ac <__aeabi_fmul>
 8003c80:	1c03      	adds	r3, r0, #0
 8003c82:	1c19      	adds	r1, r3, #0
 8003c84:	1c28      	adds	r0, r5, #0
 8003c86:	f7fc fc87 	bl	8000598 <__aeabi_fadd>
 8003c8a:	1c03      	adds	r3, r0, #0
 8003c8c:	1c18      	adds	r0, r3, #0
 8003c8e:	f7fc ff4b 	bl	8000b28 <__aeabi_f2iz>
 8003c92:	0002      	movs	r2, r0
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <Incremental_PID+0xd4>)
 8003c96:	601a      	str	r2, [r3, #0]

	Last1_bias = Last_bias;
 8003c98:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <Incremental_PID+0xd0>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <Incremental_PID+0xd8>)
 8003c9e:	601a      	str	r2, [r3, #0]
	Last_bias = Bias;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <Incremental_PID+0xcc>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <Incremental_PID+0xd0>)
 8003ca6:	601a      	str	r2, [r3, #0]
	return PWM;//Bit operation can lead to negtive value
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <Incremental_PID+0xd4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	fffffc18 	.word	0xfffffc18
 8003cbc:	20000304 	.word	0x20000304
 8003cc0:	20000308 	.word	0x20000308
 8003cc4:	2000030c 	.word	0x2000030c
 8003cc8:	20000310 	.word	0x20000310

08003ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  return 1;
 8003cd0:	2301      	movs	r3, #1
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_kill>:

int _kill(int pid, int sig)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ce2:	f007 fba3 	bl	800b42c <__errno>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	2216      	movs	r2, #22
 8003cea:	601a      	str	r2, [r3, #0]
  return -1;
 8003cec:	2301      	movs	r3, #1
 8003cee:	425b      	negs	r3, r3
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_exit>:

void _exit (int status)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d00:	2301      	movs	r3, #1
 8003d02:	425a      	negs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	0011      	movs	r1, r2
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff ffe5 	bl	8003cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	e7fd      	b.n	8003d0e <_exit+0x16>

08003d12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e00a      	b.n	8003d3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d24:	e000      	b.n	8003d28 <_read+0x16>
 8003d26:	bf00      	nop
 8003d28:	0001      	movs	r1, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	60ba      	str	r2, [r7, #8]
 8003d30:	b2ca      	uxtb	r2, r1
 8003d32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	3301      	adds	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	dbf0      	blt.n	8003d24 <_read+0x12>
  }

  return len;
 8003d42:	687b      	ldr	r3, [r7, #4]
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e009      	b.n	8003d72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	60ba      	str	r2, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7fe ff94 	bl	8002c94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	dbf1      	blt.n	8003d5e <_write+0x12>
  }
  return len;
 8003d7a:	687b      	ldr	r3, [r7, #4]
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b006      	add	sp, #24
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	425b      	negs	r3, r3
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	0192      	lsls	r2, r2, #6
 8003da8:	605a      	str	r2, [r3, #4]
  return 0;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_isatty>:

int _isatty(int file)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dbc:	2301      	movs	r3, #1
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003de4:	4a14      	ldr	r2, [pc, #80]	@ (8003e38 <_sbrk+0x5c>)
 8003de6:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <_sbrk+0x60>)
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003df0:	4b13      	ldr	r3, [pc, #76]	@ (8003e40 <_sbrk+0x64>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <_sbrk+0x64>)
 8003dfa:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <_sbrk+0x68>)
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <_sbrk+0x64>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d207      	bcs.n	8003e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e0c:	f007 fb0e 	bl	800b42c <__errno>
 8003e10:	0003      	movs	r3, r0
 8003e12:	220c      	movs	r2, #12
 8003e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	425b      	negs	r3, r3
 8003e1a:	e009      	b.n	8003e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <_sbrk+0x64>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e22:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <_sbrk+0x64>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	18d2      	adds	r2, r2, r3
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <_sbrk+0x64>)
 8003e2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b006      	add	sp, #24
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20002000 	.word	0x20002000
 8003e3c:	00000400 	.word	0x00000400
 8003e40:	20000314 	.word	0x20000314
 8003e44:	200007f0 	.word	0x200007f0

08003e48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003e4c:	46c0      	nop			@ (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b09a      	sub	sp, #104	@ 0x68
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5a:	2358      	movs	r3, #88	@ 0x58
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	0018      	movs	r0, r3
 8003e60:	2310      	movs	r3, #16
 8003e62:	001a      	movs	r2, r3
 8003e64:	2100      	movs	r1, #0
 8003e66:	f007 fa75 	bl	800b354 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003e6a:	2344      	movs	r3, #68	@ 0x44
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	0018      	movs	r0, r3
 8003e70:	2314      	movs	r3, #20
 8003e72:	001a      	movs	r2, r3
 8003e74:	2100      	movs	r1, #0
 8003e76:	f007 fa6d 	bl	800b354 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e7a:	233c      	movs	r3, #60	@ 0x3c
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	0018      	movs	r0, r3
 8003e80:	2308      	movs	r3, #8
 8003e82:	001a      	movs	r2, r3
 8003e84:	2100      	movs	r1, #0
 8003e86:	f007 fa65 	bl	800b354 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	0018      	movs	r0, r3
 8003e90:	231c      	movs	r3, #28
 8003e92:	001a      	movs	r2, r3
 8003e94:	2100      	movs	r1, #0
 8003e96:	f007 fa5d 	bl	800b354 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e9a:	003b      	movs	r3, r7
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	001a      	movs	r2, r3
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f007 fa56 	bl	800b354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ea8:	4b6d      	ldr	r3, [pc, #436]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8004064 <MX_TIM1_Init+0x210>)
 8003eac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8003eae:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003eb0:	22e0      	movs	r2, #224	@ 0xe0
 8003eb2:	32ff      	adds	r2, #255	@ 0xff
 8003eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003ebc:	4b68      	ldr	r3, [pc, #416]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003ebe:	2263      	movs	r2, #99	@ 0x63
 8003ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec2:	4b67      	ldr	r3, [pc, #412]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ec8:	4b65      	ldr	r3, [pc, #404]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ece:	4b64      	ldr	r3, [pc, #400]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ed4:	4b62      	ldr	r3, [pc, #392]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f002 fad6 	bl	8006488 <HAL_TIM_Base_Init>
 8003edc:	1e03      	subs	r3, r0, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003ee0:	f7fe feec 	bl	8002cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ee4:	2158      	movs	r1, #88	@ 0x58
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	2280      	movs	r2, #128	@ 0x80
 8003eea:	0152      	lsls	r2, r2, #5
 8003eec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eee:	187a      	adds	r2, r7, r1
 8003ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003ef2:	0011      	movs	r1, r2
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f003 f897 	bl	8007028 <HAL_TIM_ConfigClockSource>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8003efe:	f7fe fedd 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f02:	4b57      	ldr	r3, [pc, #348]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003f04:	0018      	movs	r0, r3
 8003f06:	f002 fcfd 	bl	8006904 <HAL_TIM_PWM_Init>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003f0e:	f7fe fed5 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f002 fbeb 	bl	80066f0 <HAL_TIM_OC_Init>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8003f1e:	f7fe fecd 	bl	8002cbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003f22:	2144      	movs	r1, #68	@ 0x44
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003f30:	187a      	adds	r2, r7, r1
 8003f32:	4b4b      	ldr	r3, [pc, #300]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f003 f94a 	bl	80071d0 <HAL_TIM_SlaveConfigSynchro>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003f40:	f7fe febc 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003f44:	213c      	movs	r1, #60	@ 0x3c
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2270      	movs	r2, #112	@ 0x70
 8003f4a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	2200      	movs	r2, #0
 8003f50:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f52:	187a      	adds	r2, r7, r1
 8003f54:	4b42      	ldr	r3, [pc, #264]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f003 fd6f 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8003f5e:	1e03      	subs	r3, r0, #0
 8003f60:	d001      	beq.n	8003f66 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8003f62:	f7fe feab 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f66:	2120      	movs	r1, #32
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2260      	movs	r2, #96	@ 0x60
 8003f6c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	2200      	movs	r2, #0
 8003f8a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f92:	1879      	adds	r1, r7, r1
 8003f94:	4b32      	ldr	r3, [pc, #200]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f002 ff7f 	bl	8006e9c <HAL_TIM_PWM_ConfigChannel>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8003fa2:	f7fe fe8b 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	18f9      	adds	r1, r7, r3
 8003faa:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003fac:	2204      	movs	r2, #4
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f002 ff74 	bl	8006e9c <HAL_TIM_PWM_ConfigChannel>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8003fb8:	f7fe fe80 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	18f9      	adds	r1, r7, r3
 8003fc0:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f002 ff69 	bl	8006e9c <HAL_TIM_PWM_ConfigChannel>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8003fce:	f7fe fe75 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2230      	movs	r2, #48	@ 0x30
 8003fd8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2232      	movs	r2, #50	@ 0x32
 8003fde:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fe0:	1879      	adds	r1, r7, r1
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8003fe4:	220c      	movs	r2, #12
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f002 ff00 	bl	8006dec <HAL_TIM_OC_ConfigChannel>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8003ff0:	f7fe fe64 	bl	8002cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ff4:	003b      	movs	r3, r7
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ffa:	003b      	movs	r3, r7
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004000:	003b      	movs	r3, r7
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004006:	003b      	movs	r3, r7
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800400c:	003b      	movs	r3, r7
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004012:	003b      	movs	r3, r7
 8004014:	2280      	movs	r2, #128	@ 0x80
 8004016:	0192      	lsls	r2, r2, #6
 8004018:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800401a:	003b      	movs	r3, r7
 800401c:	2200      	movs	r2, #0
 800401e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004020:	003a      	movs	r2, r7
 8004022:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f003 fd60 	bl	8007aec <HAL_TIMEx_ConfigBreakDeadTime>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d001      	beq.n	8004034 <MX_TIM1_Init+0x1e0>
  {
    Error_Handler();
 8004030:	f7fe fe44 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 8004034:	003b      	movs	r3, r7
 8004036:	22f4      	movs	r2, #244	@ 0xf4
 8004038:	32ff      	adds	r2, #255	@ 0xff
 800403a:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800403c:	003a      	movs	r2, r7
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f003 fd52 	bl	8007aec <HAL_TIMEx_ConfigBreakDeadTime>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM1_Init+0x1fc>
  {
    Error_Handler();
 800404c:	f7fe fe36 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004050:	4b03      	ldr	r3, [pc, #12]	@ (8004060 <MX_TIM1_Init+0x20c>)
 8004052:	0018      	movs	r0, r3
 8004054:	f000 fa44 	bl	80044e0 <HAL_TIM_MspPostInit>

}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b01a      	add	sp, #104	@ 0x68
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000318 	.word	0x20000318
 8004064:	40012c00 	.word	0x40012c00

08004068 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800406e:	2308      	movs	r3, #8
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	0018      	movs	r0, r3
 8004074:	2310      	movs	r3, #16
 8004076:	001a      	movs	r2, r3
 8004078:	2100      	movs	r1, #0
 800407a:	f007 f96b 	bl	800b354 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800407e:	003b      	movs	r3, r7
 8004080:	0018      	movs	r0, r3
 8004082:	2308      	movs	r3, #8
 8004084:	001a      	movs	r2, r3
 8004086:	2100      	movs	r1, #0
 8004088:	f007 f964 	bl	800b354 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800408c:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <MX_TIM3_Init+0xa0>)
 800408e:	4a1f      	ldr	r2, [pc, #124]	@ (800410c <MX_TIM3_Init+0xa4>)
 8004090:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8004092:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <MX_TIM3_Init+0xa0>)
 8004094:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <MX_TIM3_Init+0xa8>)
 8004096:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004098:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <MX_TIM3_Init+0xa0>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 800409e:	4b1a      	ldr	r3, [pc, #104]	@ (8004108 <MX_TIM3_Init+0xa0>)
 80040a0:	2213      	movs	r2, #19
 80040a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a4:	4b18      	ldr	r3, [pc, #96]	@ (8004108 <MX_TIM3_Init+0xa0>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040aa:	4b17      	ldr	r3, [pc, #92]	@ (8004108 <MX_TIM3_Init+0xa0>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040b0:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <MX_TIM3_Init+0xa0>)
 80040b2:	0018      	movs	r0, r3
 80040b4:	f002 f9e8 	bl	8006488 <HAL_TIM_Base_Init>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80040bc:	f7fe fdfe 	bl	8002cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c0:	2108      	movs	r1, #8
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	2280      	movs	r2, #128	@ 0x80
 80040c6:	0152      	lsls	r2, r2, #5
 80040c8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040ca:	187a      	adds	r2, r7, r1
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <MX_TIM3_Init+0xa0>)
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f002 ffa9 	bl	8007028 <HAL_TIM_ConfigClockSource>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80040da:	f7fe fdef 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040de:	003b      	movs	r3, r7
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e4:	003b      	movs	r3, r7
 80040e6:	2200      	movs	r2, #0
 80040e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040ea:	003a      	movs	r2, r7
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <MX_TIM3_Init+0xa0>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f003 fca3 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d001      	beq.n	80040fe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80040fa:	f7fe fddf 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	b006      	add	sp, #24
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	20000360 	.word	0x20000360
 800410c:	40000400 	.word	0x40000400
 8004110:	0000bb7f 	.word	0x0000bb7f

08004114 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <MX_TIM6_Init+0x38>)
 800411a:	4a0d      	ldr	r2, [pc, #52]	@ (8004150 <MX_TIM6_Init+0x3c>)
 800411c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <MX_TIM6_Init+0x38>)
 8004120:	4a0c      	ldr	r2, [pc, #48]	@ (8004154 <MX_TIM6_Init+0x40>)
 8004122:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <MX_TIM6_Init+0x38>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50;
 800412a:	4b08      	ldr	r3, [pc, #32]	@ (800414c <MX_TIM6_Init+0x38>)
 800412c:	2232      	movs	r2, #50	@ 0x32
 800412e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <MX_TIM6_Init+0x38>)
 8004132:	2280      	movs	r2, #128	@ 0x80
 8004134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <MX_TIM6_Init+0x38>)
 8004138:	0018      	movs	r0, r3
 800413a:	f002 f9a5 	bl	8006488 <HAL_TIM_Base_Init>
 800413e:	1e03      	subs	r3, r0, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8004142:	f7fe fdbb 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	200003a8 	.word	0x200003a8
 8004150:	40001000 	.word	0x40001000
 8004154:	0000bb7f 	.word	0x0000bb7f

08004158 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	0018      	movs	r0, r3
 8004162:	231c      	movs	r3, #28
 8004164:	001a      	movs	r2, r3
 8004166:	2100      	movs	r1, #0
 8004168:	f007 f8f4 	bl	800b354 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800416c:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 800416e:	4a1e      	ldr	r2, [pc, #120]	@ (80041e8 <MX_TIM14_Init+0x90>)
 8004170:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 8004172:	4b1c      	ldr	r3, [pc, #112]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 8004174:	4a1d      	ldr	r2, [pc, #116]	@ (80041ec <MX_TIM14_Init+0x94>)
 8004176:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004178:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 8004180:	2263      	movs	r2, #99	@ 0x63
 8004182:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004184:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 8004186:	2200      	movs	r2, #0
 8004188:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800418a:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 800418c:	2280      	movs	r2, #128	@ 0x80
 800418e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004190:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 8004192:	0018      	movs	r0, r3
 8004194:	f002 f978 	bl	8006488 <HAL_TIM_Base_Init>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800419c:	f7fe fd8e 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f002 faa4 	bl	80066f0 <HAL_TIM_OC_Init>
 80041a8:	1e03      	subs	r3, r0, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80041ac:	f7fe fd86 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2200      	movs	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	2200      	movs	r2, #0
 80041c6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c8:	1d39      	adds	r1, r7, #4
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <MX_TIM14_Init+0x8c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	0018      	movs	r0, r3
 80041d0:	f002 fe0c 	bl	8006dec <HAL_TIM_OC_ConfigChannel>
 80041d4:	1e03      	subs	r3, r0, #0
 80041d6:	d001      	beq.n	80041dc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80041d8:	f7fe fd70 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b008      	add	sp, #32
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200003f0 	.word	0x200003f0
 80041e8:	40002000 	.word	0x40002000
 80041ec:	000012bf 	.word	0x000012bf

080041f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041f6:	2308      	movs	r3, #8
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	0018      	movs	r0, r3
 80041fc:	2310      	movs	r3, #16
 80041fe:	001a      	movs	r2, r3
 8004200:	2100      	movs	r1, #0
 8004202:	f007 f8a7 	bl	800b354 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004206:	003b      	movs	r3, r7
 8004208:	0018      	movs	r0, r3
 800420a:	2308      	movs	r3, #8
 800420c:	001a      	movs	r2, r3
 800420e:	2100      	movs	r1, #0
 8004210:	f007 f8a0 	bl	800b354 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004214:	4b1f      	ldr	r3, [pc, #124]	@ (8004294 <MX_TIM15_Init+0xa4>)
 8004216:	4a20      	ldr	r2, [pc, #128]	@ (8004298 <MX_TIM15_Init+0xa8>)
 8004218:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 800421a:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <MX_TIM15_Init+0xa4>)
 800421c:	222f      	movs	r2, #47	@ 0x2f
 800421e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004220:	4b1c      	ldr	r3, [pc, #112]	@ (8004294 <MX_TIM15_Init+0xa4>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535-1;
 8004226:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <MX_TIM15_Init+0xa4>)
 8004228:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <MX_TIM15_Init+0xac>)
 800422a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <MX_TIM15_Init+0xa4>)
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004232:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <MX_TIM15_Init+0xa4>)
 8004234:	2200      	movs	r2, #0
 8004236:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004238:	4b16      	ldr	r3, [pc, #88]	@ (8004294 <MX_TIM15_Init+0xa4>)
 800423a:	2280      	movs	r2, #128	@ 0x80
 800423c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <MX_TIM15_Init+0xa4>)
 8004240:	0018      	movs	r0, r3
 8004242:	f002 f921 	bl	8006488 <HAL_TIM_Base_Init>
 8004246:	1e03      	subs	r3, r0, #0
 8004248:	d001      	beq.n	800424e <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800424a:	f7fe fd37 	bl	8002cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424e:	2108      	movs	r1, #8
 8004250:	187b      	adds	r3, r7, r1
 8004252:	2280      	movs	r2, #128	@ 0x80
 8004254:	0152      	lsls	r2, r2, #5
 8004256:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004258:	187a      	adds	r2, r7, r1
 800425a:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <MX_TIM15_Init+0xa4>)
 800425c:	0011      	movs	r1, r2
 800425e:	0018      	movs	r0, r3
 8004260:	f002 fee2 	bl	8007028 <HAL_TIM_ConfigClockSource>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d001      	beq.n	800426c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004268:	f7fe fd28 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800426c:	003b      	movs	r3, r7
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004272:	003b      	movs	r3, r7
 8004274:	2200      	movs	r2, #0
 8004276:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004278:	003a      	movs	r2, r7
 800427a:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <MX_TIM15_Init+0xa4>)
 800427c:	0011      	movs	r1, r2
 800427e:	0018      	movs	r0, r3
 8004280:	f003 fbdc 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8004284:	1e03      	subs	r3, r0, #0
 8004286:	d001      	beq.n	800428c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8004288:	f7fe fd18 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800428c:	46c0      	nop			@ (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b006      	add	sp, #24
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000438 	.word	0x20000438
 8004298:	40014000 	.word	0x40014000
 800429c:	0000fffe 	.word	0x0000fffe

080042a0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042a6:	4a10      	ldr	r2, [pc, #64]	@ (80042e8 <MX_TIM16_Init+0x48>)
 80042a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042ac:	222f      	movs	r2, #47	@ 0x2f
 80042ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042b8:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <MX_TIM16_Init+0x4c>)
 80042ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <MX_TIM16_Init+0x44>)
 80042d0:	0018      	movs	r0, r3
 80042d2:	f002 f8d9 	bl	8006488 <HAL_TIM_Base_Init>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d001      	beq.n	80042de <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80042da:	f7fe fcef 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000480 	.word	0x20000480
 80042e8:	40014400 	.word	0x40014400
 80042ec:	0000fffe 	.word	0x0000fffe

080042f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b08f      	sub	sp, #60	@ 0x3c
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f8:	2324      	movs	r3, #36	@ 0x24
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	0018      	movs	r0, r3
 80042fe:	2314      	movs	r3, #20
 8004300:	001a      	movs	r2, r3
 8004302:	2100      	movs	r1, #0
 8004304:	f007 f826 	bl	800b354 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6c      	ldr	r2, [pc, #432]	@ (80044c0 <HAL_TIM_Base_MspInit+0x1d0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004312:	4b6c      	ldr	r3, [pc, #432]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	4b6b      	ldr	r3, [pc, #428]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004318:	2180      	movs	r1, #128	@ 0x80
 800431a:	0109      	lsls	r1, r1, #4
 800431c:	430a      	orrs	r2, r1
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	4b68      	ldr	r3, [pc, #416]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	2380      	movs	r3, #128	@ 0x80
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4013      	ands	r3, r2
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800432e:	e0c3      	b.n	80044b8 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a64      	ldr	r2, [pc, #400]	@ (80044c8 <HAL_TIM_Base_MspInit+0x1d8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d151      	bne.n	80043de <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800433a:	4b62      	ldr	r3, [pc, #392]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004340:	2102      	movs	r1, #2
 8004342:	430a      	orrs	r2, r1
 8004344:	61da      	str	r2, [r3, #28]
 8004346:	4b5f      	ldr	r3, [pc, #380]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2202      	movs	r2, #2
 800434c:	4013      	ands	r3, r2
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004352:	4b5c      	ldr	r3, [pc, #368]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	4b5b      	ldr	r3, [pc, #364]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004358:	2180      	movs	r1, #128	@ 0x80
 800435a:	0309      	lsls	r1, r1, #12
 800435c:	430a      	orrs	r2, r1
 800435e:	615a      	str	r2, [r3, #20]
 8004360:	4b58      	ldr	r3, [pc, #352]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	031b      	lsls	r3, r3, #12
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800436e:	2124      	movs	r1, #36	@ 0x24
 8004370:	187b      	adds	r3, r7, r1
 8004372:	22b0      	movs	r2, #176	@ 0xb0
 8004374:	0092      	lsls	r2, r2, #2
 8004376:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	000c      	movs	r4, r1
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2202      	movs	r2, #2
 800437e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	193b      	adds	r3, r7, r4
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004386:	193b      	adds	r3, r7, r4
 8004388:	2200      	movs	r2, #0
 800438a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800438c:	193b      	adds	r3, r7, r4
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004392:	193b      	adds	r3, r7, r4
 8004394:	4a4d      	ldr	r2, [pc, #308]	@ (80044cc <HAL_TIM_Base_MspInit+0x1dc>)
 8004396:	0019      	movs	r1, r3
 8004398:	0010      	movs	r0, r2
 800439a:	f001 f979 	bl	8005690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800439e:	0021      	movs	r1, r4
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	2280      	movs	r2, #128	@ 0x80
 80043a4:	0052      	lsls	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	2202      	movs	r2, #2
 80043ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	187b      	adds	r3, r7, r1
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	4a42      	ldr	r2, [pc, #264]	@ (80044cc <HAL_TIM_Base_MspInit+0x1dc>)
 80043c4:	0019      	movs	r1, r3
 80043c6:	0010      	movs	r0, r2
 80043c8:	f001 f962 	bl	8005690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2102      	movs	r1, #2
 80043d0:	2010      	movs	r0, #16
 80043d2:	f000 ff15 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043d6:	2010      	movs	r0, #16
 80043d8:	f000 ff27 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 80043dc:	e06c      	b.n	80044b8 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM6)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3b      	ldr	r2, [pc, #236]	@ (80044d0 <HAL_TIM_Base_MspInit+0x1e0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d114      	bne.n	8004412 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043e8:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	4b35      	ldr	r3, [pc, #212]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 80043ee:	2110      	movs	r1, #16
 80043f0:	430a      	orrs	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]
 80043f4:	4b33      	ldr	r3, [pc, #204]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2210      	movs	r2, #16
 80043fa:	4013      	ands	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8004400:	2200      	movs	r2, #0
 8004402:	2101      	movs	r1, #1
 8004404:	2011      	movs	r0, #17
 8004406:	f000 fefb 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800440a:	2011      	movs	r0, #17
 800440c:	f000 ff0d 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 8004410:	e052      	b.n	80044b8 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM14)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2f      	ldr	r2, [pc, #188]	@ (80044d4 <HAL_TIM_Base_MspInit+0x1e4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d116      	bne.n	800444a <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800441c:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	4b28      	ldr	r3, [pc, #160]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	0049      	lsls	r1, r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	61da      	str	r2, [r3, #28]
 800442a:	4b26      	ldr	r3, [pc, #152]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8004438:	2200      	movs	r2, #0
 800443a:	2101      	movs	r1, #1
 800443c:	2013      	movs	r0, #19
 800443e:	f000 fedf 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004442:	2013      	movs	r0, #19
 8004444:	f000 fef1 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 8004448:	e036      	b.n	80044b8 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM15)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <HAL_TIM_Base_MspInit+0x1e8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d116      	bne.n	8004482 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004454:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 800445a:	2180      	movs	r1, #128	@ 0x80
 800445c:	0249      	lsls	r1, r1, #9
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
 8004462:	4b18      	ldr	r3, [pc, #96]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	025b      	lsls	r3, r3, #9
 800446a:	4013      	ands	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004470:	2200      	movs	r2, #0
 8004472:	2100      	movs	r1, #0
 8004474:	2014      	movs	r0, #20
 8004476:	f000 fec3 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800447a:	2014      	movs	r0, #20
 800447c:	f000 fed5 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 8004480:	e01a      	b.n	80044b8 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM16)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a15      	ldr	r2, [pc, #84]	@ (80044dc <HAL_TIM_Base_MspInit+0x1ec>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d115      	bne.n	80044b8 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800448c:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004492:	2180      	movs	r1, #128	@ 0x80
 8004494:	0289      	lsls	r1, r1, #10
 8004496:	430a      	orrs	r2, r1
 8004498:	619a      	str	r2, [r3, #24]
 800449a:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <HAL_TIM_Base_MspInit+0x1d4>)
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	029b      	lsls	r3, r3, #10
 80044a2:	4013      	ands	r3, r2
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	2015      	movs	r0, #21
 80044ae:	f000 fea7 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80044b2:	2015      	movs	r0, #21
 80044b4:	f000 feb9 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 80044b8:	46c0      	nop			@ (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b00f      	add	sp, #60	@ 0x3c
 80044be:	bd90      	pop	{r4, r7, pc}
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40000400 	.word	0x40000400
 80044cc:	48000800 	.word	0x48000800
 80044d0:	40001000 	.word	0x40001000
 80044d4:	40002000 	.word	0x40002000
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40014400 	.word	0x40014400

080044e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b089      	sub	sp, #36	@ 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e8:	240c      	movs	r4, #12
 80044ea:	193b      	adds	r3, r7, r4
 80044ec:	0018      	movs	r0, r3
 80044ee:	2314      	movs	r3, #20
 80044f0:	001a      	movs	r2, r3
 80044f2:	2100      	movs	r1, #0
 80044f4:	f006 ff2e 	bl	800b354 <memset>
  if(timHandle->Instance==TIM1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <HAL_TIM_MspPostInit+0x78>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d125      	bne.n	800454e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	4b16      	ldr	r3, [pc, #88]	@ (800455c <HAL_TIM_MspPostInit+0x7c>)
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_TIM_MspPostInit+0x7c>)
 8004508:	2180      	movs	r1, #128	@ 0x80
 800450a:	0289      	lsls	r1, r1, #10
 800450c:	430a      	orrs	r2, r1
 800450e:	615a      	str	r2, [r3, #20]
 8004510:	4b12      	ldr	r3, [pc, #72]	@ (800455c <HAL_TIM_MspPostInit+0x7c>)
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	4013      	ands	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800451e:	193b      	adds	r3, r7, r4
 8004520:	22e0      	movs	r2, #224	@ 0xe0
 8004522:	00d2      	lsls	r2, r2, #3
 8004524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	0021      	movs	r1, r4
 8004528:	187b      	adds	r3, r7, r1
 800452a:	2202      	movs	r2, #2
 800452c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	187b      	adds	r3, r7, r1
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	187b      	adds	r3, r7, r1
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800453a:	187b      	adds	r3, r7, r1
 800453c:	2202      	movs	r2, #2
 800453e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004540:	187a      	adds	r2, r7, r1
 8004542:	2390      	movs	r3, #144	@ 0x90
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	0011      	movs	r1, r2
 8004548:	0018      	movs	r0, r3
 800454a:	f001 f8a1 	bl	8005690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b009      	add	sp, #36	@ 0x24
 8004554:	bd90      	pop	{r4, r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40021000 	.word	0x40021000

08004560 <delay_us>:

/* USER CODE BEGIN 1 */


void delay_us(uint16_t us)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	0002      	movs	r2, r0
 8004568:	1dbb      	adds	r3, r7, #6
 800456a:	801a      	strh	r2, [r3, #0]
	us = 0xffff - us-10;
 800456c:	1dbb      	adds	r3, r7, #6
 800456e:	1dba      	adds	r2, r7, #6
 8004570:	8812      	ldrh	r2, [r2, #0]
 8004572:	210b      	movs	r1, #11
 8004574:	4249      	negs	r1, r1
 8004576:	1a8a      	subs	r2, r1, r2
 8004578:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, us);//the auto reload is set to 65535
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <delay_us+0x54>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	1dba      	adds	r2, r7, #6
 8004580:	8812      	ldrh	r2, [r2, #0]
 8004582:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim15);
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <delay_us+0x54>)
 8004586:	0018      	movs	r0, r3
 8004588:	f001 ffce 	bl	8006528 <HAL_TIM_Base_Start>
	while(us<0xffff-10)
 800458c:	e004      	b.n	8004598 <delay_us+0x38>
	{
		us = __HAL_TIM_GET_COUNTER(&htim15);
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <delay_us+0x54>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	801a      	strh	r2, [r3, #0]
	while(us<0xffff-10)
 8004598:	1dbb      	adds	r3, r7, #6
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	4a06      	ldr	r2, [pc, #24]	@ (80045b8 <delay_us+0x58>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d9f5      	bls.n	800458e <delay_us+0x2e>
	}
	HAL_TIM_Base_Stop(&htim15);
 80045a2:	4b04      	ldr	r3, [pc, #16]	@ (80045b4 <delay_us+0x54>)
 80045a4:	0018      	movs	r0, r3
 80045a6:	f002 f803 	bl	80065b0 <HAL_TIM_Base_Stop>
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	20000438 	.word	0x20000438
 80045b8:	0000fff4 	.word	0x0000fff4

080045bc <delay_ms>:

void delay_ms(uint32_t delay)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	uint32_t tick_start;
	tick_start = HAL_GetTick();
 80045c4:	f000 f996 	bl	80048f4 <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick()-tick_start)<delay)
 80045cc:	e000      	b.n	80045d0 <delay_ms+0x14>
		__NOP();
 80045ce:	46c0      	nop			@ (mov r8, r8)
	while((HAL_GetTick()-tick_start)<delay)
 80045d0:	f000 f990 	bl	80048f4 <HAL_GetTick>
 80045d4:	0002      	movs	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d8f6      	bhi.n	80045ce <delay_ms+0x12>
}
 80045e0:	46c0      	nop			@ (mov r8, r8)
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b004      	add	sp, #16
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045f0:	4b16      	ldr	r3, [pc, #88]	@ (800464c <MX_USART1_UART_Init+0x60>)
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <MX_USART1_UART_Init+0x64>)
 80045f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045f6:	4b15      	ldr	r3, [pc, #84]	@ (800464c <MX_USART1_UART_Init+0x60>)
 80045f8:	22e1      	movs	r2, #225	@ 0xe1
 80045fa:	0252      	lsls	r2, r2, #9
 80045fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045fe:	4b13      	ldr	r3, [pc, #76]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004604:	4b11      	ldr	r3, [pc, #68]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004606:	2200      	movs	r2, #0
 8004608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800460a:	4b10      	ldr	r3, [pc, #64]	@ (800464c <MX_USART1_UART_Init+0x60>)
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004610:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004612:	220c      	movs	r2, #12
 8004614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004618:	2200      	movs	r2, #0
 800461a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <MX_USART1_UART_Init+0x60>)
 800461e:	2200      	movs	r2, #0
 8004620:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004622:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004624:	2200      	movs	r2, #0
 8004626:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004628:	4b08      	ldr	r3, [pc, #32]	@ (800464c <MX_USART1_UART_Init+0x60>)
 800462a:	2208      	movs	r2, #8
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800462e:	4b07      	ldr	r3, [pc, #28]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004630:	2280      	movs	r2, #128	@ 0x80
 8004632:	0212      	lsls	r2, r2, #8
 8004634:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004636:	4b05      	ldr	r3, [pc, #20]	@ (800464c <MX_USART1_UART_Init+0x60>)
 8004638:	0018      	movs	r0, r3
 800463a:	f003 fac5 	bl	8007bc8 <HAL_UART_Init>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d001      	beq.n	8004646 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004642:	f7fe fb3b 	bl	8002cbc <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END USART1_Init 2 */

}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200005cc 	.word	0x200005cc
 8004650:	40013800 	.word	0x40013800

08004654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b08b      	sub	sp, #44	@ 0x2c
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	2414      	movs	r4, #20
 800465e:	193b      	adds	r3, r7, r4
 8004660:	0018      	movs	r0, r3
 8004662:	2314      	movs	r3, #20
 8004664:	001a      	movs	r2, r3
 8004666:	2100      	movs	r1, #0
 8004668:	f006 fe74 	bl	800b354 <memset>
  if(uartHandle->Instance==USART1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a33      	ldr	r2, [pc, #204]	@ (8004740 <HAL_UART_MspInit+0xec>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d15f      	bne.n	8004736 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004676:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <HAL_UART_MspInit+0xf0>)
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	4b32      	ldr	r3, [pc, #200]	@ (8004744 <HAL_UART_MspInit+0xf0>)
 800467c:	2180      	movs	r1, #128	@ 0x80
 800467e:	01c9      	lsls	r1, r1, #7
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]
 8004684:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <HAL_UART_MspInit+0xf0>)
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	2380      	movs	r3, #128	@ 0x80
 800468a:	01db      	lsls	r3, r3, #7
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	4b2c      	ldr	r3, [pc, #176]	@ (8004744 <HAL_UART_MspInit+0xf0>)
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	4b2b      	ldr	r3, [pc, #172]	@ (8004744 <HAL_UART_MspInit+0xf0>)
 8004698:	2180      	movs	r1, #128	@ 0x80
 800469a:	02c9      	lsls	r1, r1, #11
 800469c:	430a      	orrs	r2, r1
 800469e:	615a      	str	r2, [r3, #20]
 80046a0:	4b28      	ldr	r3, [pc, #160]	@ (8004744 <HAL_UART_MspInit+0xf0>)
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	2380      	movs	r3, #128	@ 0x80
 80046a6:	02db      	lsls	r3, r3, #11
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046ae:	0021      	movs	r1, r4
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	22c0      	movs	r2, #192	@ 0xc0
 80046b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2202      	movs	r2, #2
 80046ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	2203      	movs	r2, #3
 80046c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	2200      	movs	r2, #0
 80046cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <HAL_UART_MspInit+0xf4>)
 80046d2:	0019      	movs	r1, r3
 80046d4:	0010      	movs	r0, r2
 80046d6:	f000 ffdb 	bl	8005690 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80046da:	4b1c      	ldr	r3, [pc, #112]	@ (800474c <HAL_UART_MspInit+0xf8>)
 80046dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_UART_MspInit+0xfc>)
 80046de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	@ (800474c <HAL_UART_MspInit+0xf8>)
 80046e2:	2210      	movs	r2, #16
 80046e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046e6:	4b19      	ldr	r3, [pc, #100]	@ (800474c <HAL_UART_MspInit+0xf8>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046ec:	4b17      	ldr	r3, [pc, #92]	@ (800474c <HAL_UART_MspInit+0xf8>)
 80046ee:	2280      	movs	r2, #128	@ 0x80
 80046f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046f2:	4b16      	ldr	r3, [pc, #88]	@ (800474c <HAL_UART_MspInit+0xf8>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046f8:	4b14      	ldr	r3, [pc, #80]	@ (800474c <HAL_UART_MspInit+0xf8>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80046fe:	4b13      	ldr	r3, [pc, #76]	@ (800474c <HAL_UART_MspInit+0xf8>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004704:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_UART_MspInit+0xf8>)
 8004706:	2200      	movs	r2, #0
 8004708:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <HAL_UART_MspInit+0xf8>)
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fda9 	bl	8005264 <HAL_DMA_Init>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004716:	f7fe fad1 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a0b      	ldr	r2, [pc, #44]	@ (800474c <HAL_UART_MspInit+0xf8>)
 800471e:	671a      	str	r2, [r3, #112]	@ 0x70
 8004720:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <HAL_UART_MspInit+0xf8>)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2100      	movs	r1, #0
 800472a:	201b      	movs	r0, #27
 800472c:	f000 fd68 	bl	8005200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004730:	201b      	movs	r0, #27
 8004732:	f000 fd7a 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b00b      	add	sp, #44	@ 0x2c
 800473c:	bd90      	pop	{r4, r7, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	40013800 	.word	0x40013800
 8004744:	40021000 	.word	0x40021000
 8004748:	48000400 	.word	0x48000400
 800474c:	20000654 	.word	0x20000654
 8004750:	4002001c 	.word	0x4002001c

08004754 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	0002      	movs	r2, r0
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d110      	bne.n	800478a <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 8004768:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <BT_PWM_handle+0x90>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b25b      	sxtb	r3, r3
 800476e:	2b08      	cmp	r3, #8
 8004770:	dc07      	bgt.n	8004782 <BT_PWM_handle+0x2e>
 8004772:	4b1c      	ldr	r3, [pc, #112]	@ (80047e4 <BT_PWM_handle+0x90>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b25b      	sxtb	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3301      	adds	r3, #1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	b25a      	sxtb	r2, r3
 8004780:	e000      	b.n	8004784 <BT_PWM_handle+0x30>
 8004782:	220a      	movs	r2, #10
 8004784:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <BT_PWM_handle+0x90>)
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e00f      	b.n	80047aa <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 800478a:	4b16      	ldr	r3, [pc, #88]	@ (80047e4 <BT_PWM_handle+0x90>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b25b      	sxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	dd07      	ble.n	80047a4 <BT_PWM_handle+0x50>
 8004794:	4b13      	ldr	r3, [pc, #76]	@ (80047e4 <BT_PWM_handle+0x90>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b25b      	sxtb	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	b25a      	sxtb	r2, r3
 80047a2:	e000      	b.n	80047a6 <BT_PWM_handle+0x52>
 80047a4:	2200      	movs	r2, #0
 80047a6:	4b0f      	ldr	r3, [pc, #60]	@ (80047e4 <BT_PWM_handle+0x90>)
 80047a8:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 80047aa:	4b0e      	ldr	r3, [pc, #56]	@ (80047e4 <BT_PWM_handle+0x90>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	569a      	ldrsb	r2, [r3, r2]
 80047b0:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <BT_PWM_handle+0x94>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <BT_PWM_handle+0x90>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	569a      	ldrsb	r2, [r3, r2]
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <BT_PWM_handle+0x94>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 80047c2:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <BT_PWM_handle+0x90>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	569a      	ldrsb	r2, [r3, r2]
 80047c8:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <BT_PWM_handle+0x94>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 80047ce:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <BT_PWM_handle+0x90>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	569a      	ldrsb	r2, [r3, r2]
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <BT_PWM_handle+0x94>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	20000698 	.word	0x20000698
 80047e8:	20000360 	.word	0x20000360

080047ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047ec:	480d      	ldr	r0, [pc, #52]	@ (8004824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80047f0:	f7ff fb2a 	bl	8003e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047f4:	480c      	ldr	r0, [pc, #48]	@ (8004828 <LoopForever+0x6>)
  ldr r1, =_edata
 80047f6:	490d      	ldr	r1, [pc, #52]	@ (800482c <LoopForever+0xa>)
  ldr r2, =_sidata
 80047f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004830 <LoopForever+0xe>)
  movs r3, #0
 80047fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047fc:	e002      	b.n	8004804 <LoopCopyDataInit>

080047fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004802:	3304      	adds	r3, #4

08004804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004808:	d3f9      	bcc.n	80047fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800480c:	4c0a      	ldr	r4, [pc, #40]	@ (8004838 <LoopForever+0x16>)
  movs r3, #0
 800480e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004810:	e001      	b.n	8004816 <LoopFillZerobss>

08004812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004814:	3204      	adds	r2, #4

08004816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004818:	d3fb      	bcc.n	8004812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800481a:	f006 fe0d 	bl	800b438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800481e:	f7fe f94d 	bl	8002abc <main>

08004822 <LoopForever>:

LoopForever:
    b LoopForever
 8004822:	e7fe      	b.n	8004822 <LoopForever>
  ldr   r0, =_estack
 8004824:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800482c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8004830:	0800ed2c 	.word	0x0800ed2c
  ldr r2, =_sbss
 8004834:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8004838:	200007ec 	.word	0x200007ec

0800483c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800483c:	e7fe      	b.n	800483c <ADC1_IRQHandler>
	...

08004840 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004844:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <HAL_Init+0x24>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <HAL_Init+0x24>)
 800484a:	2110      	movs	r1, #16
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004850:	2003      	movs	r0, #3
 8004852:	f000 f809 	bl	8004868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004856:	f7ff f823 	bl	80038a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	40022000 	.word	0x40022000

08004868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004870:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <HAL_InitTick+0x5c>)
 8004872:	681c      	ldr	r4, [r3, #0]
 8004874:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <HAL_InitTick+0x60>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	0019      	movs	r1, r3
 800487a:	23fa      	movs	r3, #250	@ 0xfa
 800487c:	0098      	lsls	r0, r3, #2
 800487e:	f7fb fc69 	bl	8000154 <__udivsi3>
 8004882:	0003      	movs	r3, r0
 8004884:	0019      	movs	r1, r3
 8004886:	0020      	movs	r0, r4
 8004888:	f7fb fc64 	bl	8000154 <__udivsi3>
 800488c:	0003      	movs	r3, r0
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fcdb 	bl	800524a <HAL_SYSTICK_Config>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d001      	beq.n	800489c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e00f      	b.n	80048bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d80b      	bhi.n	80048ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	2301      	movs	r3, #1
 80048a6:	425b      	negs	r3, r3
 80048a8:	2200      	movs	r2, #0
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 fca8 	bl	8005200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048b0:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_InitTick+0x64>)
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b003      	add	sp, #12
 80048c2:	bd90      	pop	{r4, r7, pc}
 80048c4:	20000040 	.word	0x20000040
 80048c8:	20000048 	.word	0x20000048
 80048cc:	20000044 	.word	0x20000044

080048d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_IncTick+0x1c>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	001a      	movs	r2, r3
 80048da:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <HAL_IncTick+0x20>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	18d2      	adds	r2, r2, r3
 80048e0:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <HAL_IncTick+0x20>)
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	20000048 	.word	0x20000048
 80048f0:	2000069c 	.word	0x2000069c

080048f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  return uwTick;
 80048f8:	4b02      	ldr	r3, [pc, #8]	@ (8004904 <HAL_GetTick+0x10>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	2000069c 	.word	0x2000069c

08004908 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004910:	230f      	movs	r3, #15
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e125      	b.n	8004b72 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2234      	movs	r2, #52	@ 0x34
 8004938:	2100      	movs	r1, #0
 800493a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0018      	movs	r0, r3
 8004940:	f7fe fd06 	bl	8003350 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	2210      	movs	r2, #16
 800494a:	4013      	ands	r3, r2
 800494c:	d000      	beq.n	8004950 <HAL_ADC_Init+0x48>
 800494e:	e103      	b.n	8004b58 <HAL_ADC_Init+0x250>
 8004950:	230f      	movs	r3, #15
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d000      	beq.n	800495c <HAL_ADC_Init+0x54>
 800495a:	e0fd      	b.n	8004b58 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2204      	movs	r2, #4
 8004964:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004966:	d000      	beq.n	800496a <HAL_ADC_Init+0x62>
 8004968:	e0f6      	b.n	8004b58 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	4a83      	ldr	r2, [pc, #524]	@ (8004b7c <HAL_ADC_Init+0x274>)
 8004970:	4013      	ands	r3, r2
 8004972:	2202      	movs	r2, #2
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2203      	movs	r2, #3
 8004982:	4013      	ands	r3, r2
 8004984:	2b01      	cmp	r3, #1
 8004986:	d112      	bne.n	80049ae <HAL_ADC_Init+0xa6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	4013      	ands	r3, r2
 8004992:	2b01      	cmp	r3, #1
 8004994:	d009      	beq.n	80049aa <HAL_ADC_Init+0xa2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	401a      	ands	r2, r3
 80049a2:	2380      	movs	r3, #128	@ 0x80
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_Init+0xa6>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_ADC_Init+0xa8>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2218      	movs	r2, #24
 80049bc:	4393      	bics	r3, r2
 80049be:	0019      	movs	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	0899      	lsrs	r1, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4964      	ldr	r1, [pc, #400]	@ (8004b80 <HAL_ADC_Init+0x278>)
 80049ee:	400a      	ands	r2, r1
 80049f0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7e1b      	ldrb	r3, [r3, #24]
 80049f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7e9b      	ldrb	r3, [r3, #26]
 8004a04:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a06:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d002      	beq.n	8004a16 <HAL_ADC_Init+0x10e>
 8004a10:	2380      	movs	r3, #128	@ 0x80
 8004a12:	015b      	lsls	r3, r3, #5
 8004a14:	e000      	b.n	8004a18 <HAL_ADC_Init+0x110>
 8004a16:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a18:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a1e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d101      	bne.n	8004a2c <HAL_ADC_Init+0x124>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	e000      	b.n	8004a2e <HAL_ADC_Init+0x126>
 8004a2c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004a2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2124      	movs	r1, #36	@ 0x24
 8004a34:	5c5b      	ldrb	r3, [r3, r1]
 8004a36:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004a38:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	7edb      	ldrb	r3, [r3, #27]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d115      	bne.n	8004a74 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7e9b      	ldrb	r3, [r3, #26]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2280      	movs	r2, #128	@ 0x80
 8004a54:	0252      	lsls	r2, r2, #9
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	e00b      	b.n	8004a74 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a60:	2220      	movs	r2, #32
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	23c2      	movs	r3, #194	@ 0xc2
 8004a7a:	33ff      	adds	r3, #255	@ 0xff
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d007      	beq.n	8004a90 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68d9      	ldr	r1, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	055b      	lsls	r3, r3, #21
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d017      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d013      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d00f      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d00b      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d007      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d003      	beq.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	2b07      	cmp	r3, #7
 8004ae2:	d112      	bne.n	8004b0a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2107      	movs	r1, #7
 8004af0:	438a      	bics	r2, r1
 8004af2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6959      	ldr	r1, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	2207      	movs	r2, #7
 8004b00:	401a      	ands	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <HAL_ADC_Init+0x27c>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10b      	bne.n	8004b32 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	2203      	movs	r2, #3
 8004b26:	4393      	bics	r3, r2
 8004b28:	2201      	movs	r2, #1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b30:	e01c      	b.n	8004b6c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	2212      	movs	r2, #18
 8004b38:	4393      	bics	r3, r2
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	2201      	movs	r2, #1
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004b4e:	230f      	movs	r3, #15
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b56:	e009      	b.n	8004b6c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004b64:	230f      	movs	r3, #15
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	781b      	ldrb	r3, [r3, #0]
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b004      	add	sp, #16
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	fffffefd 	.word	0xfffffefd
 8004b80:	fffe0219 	.word	0xfffe0219
 8004b84:	833fffe7 	.word	0x833fffe7

08004b88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b94:	2317      	movs	r3, #23
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d15e      	bne.n	8004c66 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2234      	movs	r2, #52	@ 0x34
 8004bac:	5c9b      	ldrb	r3, [r3, r2]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_Start_DMA+0x2e>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e05e      	b.n	8004c74 <HAL_ADC_Start_DMA+0xec>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2234      	movs	r2, #52	@ 0x34
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	7e5b      	ldrb	r3, [r3, #25]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d007      	beq.n	8004bd6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004bc6:	2317      	movs	r3, #23
 8004bc8:	18fc      	adds	r4, r7, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f963 	bl	8004e98 <ADC_Enable>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004bd6:	2317      	movs	r3, #23
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d146      	bne.n	8004c6e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	4a25      	ldr	r2, [pc, #148]	@ (8004c7c <HAL_ADC_Start_DMA+0xf4>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	2280      	movs	r2, #128	@ 0x80
 8004bea:	0052      	lsls	r2, r2, #1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2234      	movs	r2, #52	@ 0x34
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c04:	4a1e      	ldr	r2, [pc, #120]	@ (8004c80 <HAL_ADC_Start_DMA+0xf8>)
 8004c06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c84 <HAL_ADC_Start_DMA+0xfc>)
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	4a1c      	ldr	r2, [pc, #112]	@ (8004c88 <HAL_ADC_Start_DMA+0x100>)
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	221c      	movs	r2, #28
 8004c1e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2110      	movs	r1, #16
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3340      	adds	r3, #64	@ 0x40
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f000 fb50 	bl	80052f4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2104      	movs	r1, #4
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	e003      	b.n	8004c6e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c66:	2317      	movs	r3, #23
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004c6e:	2317      	movs	r3, #23
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	781b      	ldrb	r3, [r3, #0]
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b007      	add	sp, #28
 8004c7a:	bd90      	pop	{r4, r7, pc}
 8004c7c:	fffff0fe 	.word	0xfffff0fe
 8004c80:	08004fa1 	.word	0x08004fa1
 8004c84:	08005055 	.word	0x08005055
 8004c88:	08005073 	.word	0x08005073

08004c8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb6:	230f      	movs	r3, #15
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	055b      	lsls	r3, r3, #21
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d011      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x46>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x46>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x46>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d005      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x46>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d001      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x46>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2234      	movs	r2, #52	@ 0x34
 8004cf6:	5c9b      	ldrb	r3, [r3, r2]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x54>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0bb      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x1cc>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2234      	movs	r2, #52	@ 0x34
 8004d04:	2101      	movs	r1, #1
 8004d06:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	4013      	ands	r3, r2
 8004d12:	d000      	beq.n	8004d16 <HAL_ADC_ConfigChannel+0x6a>
 8004d14:	e09f      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4a59      	ldr	r2, [pc, #356]	@ (8004e80 <HAL_ADC_ConfigChannel+0x1d4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x76>
 8004d20:	e077      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	055b      	lsls	r3, r3, #21
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d037      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d033      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d02f      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d02b      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d027      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	2b05      	cmp	r3, #5
 8004d6a:	d023      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d01f      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	2b07      	cmp	r3, #7
 8004d7a:	d01b      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	2107      	movs	r1, #7
 8004d88:	400b      	ands	r3, r1
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d012      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2107      	movs	r1, #7
 8004d9a:	438a      	bics	r2, r1
 8004d9c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6959      	ldr	r1, [r3, #20]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2207      	movs	r2, #7
 8004daa:	401a      	ands	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d003      	beq.n	8004dc4 <HAL_ADC_ConfigChannel+0x118>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b11      	cmp	r3, #17
 8004dc2:	d152      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8004e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8004dc6:	6819      	ldr	r1, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d102      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x12a>
 8004dd0:	2380      	movs	r3, #128	@ 0x80
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	e001      	b.n	8004dda <HAL_ADC_ConfigChannel+0x12e>
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	03db      	lsls	r3, r3, #15
 8004dda:	4a2a      	ldr	r2, [pc, #168]	@ (8004e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d140      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004de8:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <HAL_ADC_ConfigChannel+0x1dc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4927      	ldr	r1, [pc, #156]	@ (8004e8c <HAL_ADC_ConfigChannel+0x1e0>)
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fb f9b0 	bl	8000154 <__udivsi3>
 8004df4:	0003      	movs	r3, r0
 8004df6:	001a      	movs	r2, r3
 8004df8:	0013      	movs	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	189b      	adds	r3, r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e02:	e002      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f9      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x158>
 8004e10:	e02b      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4099      	lsls	r1, r3
 8004e20:	000b      	movs	r3, r1
 8004e22:	43d9      	mvns	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	400a      	ands	r2, r1
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d003      	beq.n	8004e3c <HAL_ADC_ConfigChannel+0x190>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b11      	cmp	r3, #17
 8004e3a:	d116      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d101      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x1a0>
 8004e48:	4a11      	ldr	r2, [pc, #68]	@ (8004e90 <HAL_ADC_ConfigChannel+0x1e4>)
 8004e4a:	e000      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x1a2>
 8004e4c:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <HAL_ADC_ConfigChannel+0x1e8>)
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e009      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004e62:	230f      	movs	r3, #15
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2234      	movs	r2, #52	@ 0x34
 8004e6e:	2100      	movs	r1, #0
 8004e70:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004e72:	230f      	movs	r3, #15
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	781b      	ldrb	r3, [r3, #0]
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b004      	add	sp, #16
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	00001001 	.word	0x00001001
 8004e84:	40012708 	.word	0x40012708
 8004e88:	20000040 	.word	0x20000040
 8004e8c:	000f4240 	.word	0x000f4240
 8004e90:	ff7fffff 	.word	0xff7fffff
 8004e94:	ffbfffff 	.word	0xffbfffff

08004e98 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d112      	bne.n	8004edc <ADC_Enable+0x44>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d009      	beq.n	8004ed8 <ADC_Enable+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	401a      	ands	r2, r3
 8004ed0:	2380      	movs	r3, #128	@ 0x80
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d101      	bne.n	8004edc <ADC_Enable+0x44>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <ADC_Enable+0x46>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d152      	bne.n	8004f88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f94 <ADC_Enable+0xfc>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	d00d      	beq.n	8004f0a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	2201      	movs	r2, #1
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e03f      	b.n	8004f8a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <ADC_Enable+0x100>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	491f      	ldr	r1, [pc, #124]	@ (8004f9c <ADC_Enable+0x104>)
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fb f917 	bl	8000154 <__udivsi3>
 8004f26:	0003      	movs	r3, r0
 8004f28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f2a:	e002      	b.n	8004f32 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f9      	bne.n	8004f2c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f38:	f7ff fcdc 	bl	80048f4 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f40:	e01b      	b.n	8004f7a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f42:	f7ff fcd7 	bl	80048f4 <HAL_GetTick>
 8004f46:	0002      	movs	r2, r0
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d914      	bls.n	8004f7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2201      	movs	r2, #1
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d00d      	beq.n	8004f7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	2210      	movs	r2, #16
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	2201      	movs	r2, #1
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e007      	b.n	8004f8a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2201      	movs	r2, #1
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d1dc      	bne.n	8004f42 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b004      	add	sp, #16
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	80000017 	.word	0x80000017
 8004f98:	20000040 	.word	0x20000040
 8004f9c:	000f4240 	.word	0x000f4240

08004fa0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb2:	2250      	movs	r2, #80	@ 0x50
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d140      	bne.n	800503a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	2280      	movs	r2, #128	@ 0x80
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	23c0      	movs	r3, #192	@ 0xc0
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d12d      	bne.n	8005030 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d129      	bne.n	8005030 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d122      	bne.n	8005030 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d110      	bne.n	8005018 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	210c      	movs	r1, #12
 8005002:	438a      	bics	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <ADC_DMAConvCplt+0xb0>)
 800500c:	4013      	ands	r3, r2
 800500e:	2201      	movs	r2, #1
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	639a      	str	r2, [r3, #56]	@ 0x38
 8005016:	e00b      	b.n	8005030 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	2220      	movs	r2, #32
 800501e:	431a      	orrs	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005028:	2201      	movs	r2, #1
 800502a:	431a      	orrs	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	0018      	movs	r0, r3
 8005034:	f7fe f8aa 	bl	800318c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8005038:	e005      	b.n	8005046 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	0010      	movs	r0, r2
 8005044:	4798      	blx	r3
}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b004      	add	sp, #16
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	fffffefe 	.word	0xfffffefe

08005054 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff fe11 	bl	8004c8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	46bd      	mov	sp, r7
 800506e:	b004      	add	sp, #16
 8005070:	bd80      	pop	{r7, pc}

08005072 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	2240      	movs	r2, #64	@ 0x40
 8005086:	431a      	orrs	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005090:	2204      	movs	r2, #4
 8005092:	431a      	orrs	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff fdfe 	bl	8004c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b004      	add	sp, #16
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	0002      	movs	r2, r0
 80050b0:	1dfb      	adds	r3, r7, #7
 80050b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ba:	d809      	bhi.n	80050d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050bc:	1dfb      	adds	r3, r7, #7
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	001a      	movs	r2, r3
 80050c2:	231f      	movs	r3, #31
 80050c4:	401a      	ands	r2, r3
 80050c6:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <__NVIC_EnableIRQ+0x30>)
 80050c8:	2101      	movs	r1, #1
 80050ca:	4091      	lsls	r1, r2
 80050cc:	000a      	movs	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
  }
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	e000e100 	.word	0xe000e100

080050dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	0002      	movs	r2, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	1dfb      	adds	r3, r7, #7
 80050e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80050f0:	d828      	bhi.n	8005144 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050f2:	4a2f      	ldr	r2, [pc, #188]	@ (80051b0 <__NVIC_SetPriority+0xd4>)
 80050f4:	1dfb      	adds	r3, r7, #7
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	33c0      	adds	r3, #192	@ 0xc0
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	589b      	ldr	r3, [r3, r2]
 8005102:	1dfa      	adds	r2, r7, #7
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	0011      	movs	r1, r2
 8005108:	2203      	movs	r2, #3
 800510a:	400a      	ands	r2, r1
 800510c:	00d2      	lsls	r2, r2, #3
 800510e:	21ff      	movs	r1, #255	@ 0xff
 8005110:	4091      	lsls	r1, r2
 8005112:	000a      	movs	r2, r1
 8005114:	43d2      	mvns	r2, r2
 8005116:	401a      	ands	r2, r3
 8005118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	401a      	ands	r2, r3
 8005122:	1dfb      	adds	r3, r7, #7
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	0018      	movs	r0, r3
 8005128:	2303      	movs	r3, #3
 800512a:	4003      	ands	r3, r0
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005130:	481f      	ldr	r0, [pc, #124]	@ (80051b0 <__NVIC_SetPriority+0xd4>)
 8005132:	1dfb      	adds	r3, r7, #7
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b25b      	sxtb	r3, r3
 8005138:	089b      	lsrs	r3, r3, #2
 800513a:	430a      	orrs	r2, r1
 800513c:	33c0      	adds	r3, #192	@ 0xc0
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005142:	e031      	b.n	80051a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005144:	4a1b      	ldr	r2, [pc, #108]	@ (80051b4 <__NVIC_SetPriority+0xd8>)
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	0019      	movs	r1, r3
 800514c:	230f      	movs	r3, #15
 800514e:	400b      	ands	r3, r1
 8005150:	3b08      	subs	r3, #8
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	3306      	adds	r3, #6
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	3304      	adds	r3, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1dfa      	adds	r2, r7, #7
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	0011      	movs	r1, r2
 8005164:	2203      	movs	r2, #3
 8005166:	400a      	ands	r2, r1
 8005168:	00d2      	lsls	r2, r2, #3
 800516a:	21ff      	movs	r1, #255	@ 0xff
 800516c:	4091      	lsls	r1, r2
 800516e:	000a      	movs	r2, r1
 8005170:	43d2      	mvns	r2, r2
 8005172:	401a      	ands	r2, r3
 8005174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	401a      	ands	r2, r3
 800517e:	1dfb      	adds	r3, r7, #7
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	0018      	movs	r0, r3
 8005184:	2303      	movs	r3, #3
 8005186:	4003      	ands	r3, r0
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800518c:	4809      	ldr	r0, [pc, #36]	@ (80051b4 <__NVIC_SetPriority+0xd8>)
 800518e:	1dfb      	adds	r3, r7, #7
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	001c      	movs	r4, r3
 8005194:	230f      	movs	r3, #15
 8005196:	4023      	ands	r3, r4
 8005198:	3b08      	subs	r3, #8
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	430a      	orrs	r2, r1
 800519e:	3306      	adds	r3, #6
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	18c3      	adds	r3, r0, r3
 80051a4:	3304      	adds	r3, #4
 80051a6:	601a      	str	r2, [r3, #0]
}
 80051a8:	46c0      	nop			@ (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b003      	add	sp, #12
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	e000e100 	.word	0xe000e100
 80051b4:	e000ed00 	.word	0xe000ed00

080051b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	2380      	movs	r3, #128	@ 0x80
 80051c6:	045b      	lsls	r3, r3, #17
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d301      	bcc.n	80051d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051cc:	2301      	movs	r3, #1
 80051ce:	e010      	b.n	80051f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051d0:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <SysTick_Config+0x44>)
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	3a01      	subs	r2, #1
 80051d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051d8:	2301      	movs	r3, #1
 80051da:	425b      	negs	r3, r3
 80051dc:	2103      	movs	r1, #3
 80051de:	0018      	movs	r0, r3
 80051e0:	f7ff ff7c 	bl	80050dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e4:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <SysTick_Config+0x44>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ea:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <SysTick_Config+0x44>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b002      	add	sp, #8
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	e000e010 	.word	0xe000e010

08005200 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	210f      	movs	r1, #15
 800520c:	187b      	adds	r3, r7, r1
 800520e:	1c02      	adds	r2, r0, #0
 8005210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	187b      	adds	r3, r7, r1
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	b25b      	sxtb	r3, r3
 800521a:	0011      	movs	r1, r2
 800521c:	0018      	movs	r0, r3
 800521e:	f7ff ff5d 	bl	80050dc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	0002      	movs	r2, r0
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b25b      	sxtb	r3, r3
 800523c:	0018      	movs	r0, r3
 800523e:	f7ff ff33 	bl	80050a8 <__NVIC_EnableIRQ>
}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b002      	add	sp, #8
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0018      	movs	r0, r3
 8005256:	f7ff ffaf 	bl	80051b8 <SysTick_Config>
 800525a:	0003      	movs	r3, r0
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b002      	add	sp, #8
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e036      	b.n	80052e8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2221      	movs	r2, #33	@ 0x21
 800527e:	2102      	movs	r1, #2
 8005280:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a18      	ldr	r2, [pc, #96]	@ (80052f0 <HAL_DMA_Init+0x8c>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800529a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	0018      	movs	r0, r3
 80052cc:	f000 f9c4 	bl	8005658 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2221      	movs	r2, #33	@ 0x21
 80052da:	2101      	movs	r1, #1
 80052dc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	2100      	movs	r1, #0
 80052e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b004      	add	sp, #16
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	ffffc00f 	.word	0xffffc00f

080052f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2317      	movs	r3, #23
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	5c9b      	ldrb	r3, [r3, r2]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_DMA_Start_IT+0x24>
 8005314:	2302      	movs	r3, #2
 8005316:	e04f      	b.n	80053b8 <HAL_DMA_Start_IT+0xc4>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	2101      	movs	r1, #1
 800531e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2221      	movs	r2, #33	@ 0x21
 8005324:	5c9b      	ldrb	r3, [r3, r2]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d13a      	bne.n	80053a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2221      	movs	r2, #33	@ 0x21
 8005330:	2102      	movs	r1, #2
 8005332:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2101      	movs	r1, #1
 8005346:	438a      	bics	r2, r1
 8005348:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f954 	bl	80055fe <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	210e      	movs	r1, #14
 800536a:	430a      	orrs	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e00f      	b.n	8005390 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	210a      	movs	r1, #10
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2104      	movs	r1, #4
 800538c:	438a      	bics	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2101      	movs	r1, #1
 800539c:	430a      	orrs	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e007      	b.n	80053b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	2100      	movs	r1, #0
 80053a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80053aa:	2317      	movs	r3, #23
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	2202      	movs	r2, #2
 80053b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80053b2:	2317      	movs	r3, #23
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	781b      	ldrb	r3, [r3, #0]
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b006      	add	sp, #24
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2221      	movs	r2, #33	@ 0x21
 80053cc:	5c9b      	ldrb	r3, [r3, r2]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d008      	beq.n	80053e6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2204      	movs	r2, #4
 80053d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	2100      	movs	r1, #0
 80053e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e020      	b.n	8005428 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	210e      	movs	r1, #14
 80053f2:	438a      	bics	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2101      	movs	r1, #1
 8005402:	438a      	bics	r2, r1
 8005404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	2101      	movs	r1, #1
 8005410:	4091      	lsls	r1, r2
 8005412:	000a      	movs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2221      	movs	r2, #33	@ 0x21
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b002      	add	sp, #8
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	210f      	movs	r1, #15
 800543a:	187b      	adds	r3, r7, r1
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2221      	movs	r2, #33	@ 0x21
 8005444:	5c9b      	ldrb	r3, [r3, r2]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d006      	beq.n	800545a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2204      	movs	r2, #4
 8005450:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8005452:	187b      	adds	r3, r7, r1
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e028      	b.n	80054ac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	210e      	movs	r1, #14
 8005466:	438a      	bics	r2, r1
 8005468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2101      	movs	r1, #1
 8005476:	438a      	bics	r2, r1
 8005478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005482:	2101      	movs	r1, #1
 8005484:	4091      	lsls	r1, r2
 8005486:	000a      	movs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2221      	movs	r2, #33	@ 0x21
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	2100      	movs	r1, #0
 8005498:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	0010      	movs	r0, r2
 80054aa:	4798      	blx	r3
    }
  }
  return status;
 80054ac:	230f      	movs	r3, #15
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	781b      	ldrb	r3, [r3, #0]
}
 80054b2:	0018      	movs	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b004      	add	sp, #16
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	2204      	movs	r2, #4
 80054d8:	409a      	lsls	r2, r3
 80054da:	0013      	movs	r3, r2
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4013      	ands	r3, r2
 80054e0:	d024      	beq.n	800552c <HAL_DMA_IRQHandler+0x72>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2204      	movs	r2, #4
 80054e6:	4013      	ands	r3, r2
 80054e8:	d020      	beq.n	800552c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2220      	movs	r2, #32
 80054f2:	4013      	ands	r3, r2
 80054f4:	d107      	bne.n	8005506 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2104      	movs	r1, #4
 8005502:	438a      	bics	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550e:	2104      	movs	r1, #4
 8005510:	4091      	lsls	r1, r2
 8005512:	000a      	movs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d100      	bne.n	8005520 <HAL_DMA_IRQHandler+0x66>
 800551e:	e06a      	b.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	0010      	movs	r0, r2
 8005528:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800552a:	e064      	b.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	2202      	movs	r2, #2
 8005532:	409a      	lsls	r2, r3
 8005534:	0013      	movs	r3, r2
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4013      	ands	r3, r2
 800553a:	d02b      	beq.n	8005594 <HAL_DMA_IRQHandler+0xda>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2202      	movs	r2, #2
 8005540:	4013      	ands	r3, r2
 8005542:	d027      	beq.n	8005594 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2220      	movs	r2, #32
 800554c:	4013      	ands	r3, r2
 800554e:	d10b      	bne.n	8005568 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	210a      	movs	r1, #10
 800555c:	438a      	bics	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2221      	movs	r2, #33	@ 0x21
 8005564:	2101      	movs	r1, #1
 8005566:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	2102      	movs	r1, #2
 8005572:	4091      	lsls	r1, r2
 8005574:	000a      	movs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	2100      	movs	r1, #0
 800557e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d036      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	0010      	movs	r0, r2
 8005590:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005592:	e030      	b.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005598:	2208      	movs	r2, #8
 800559a:	409a      	lsls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4013      	ands	r3, r2
 80055a2:	d028      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2208      	movs	r2, #8
 80055a8:	4013      	ands	r3, r2
 80055aa:	d024      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	210e      	movs	r1, #14
 80055b8:	438a      	bics	r2, r1
 80055ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	2101      	movs	r1, #1
 80055c6:	4091      	lsls	r1, r2
 80055c8:	000a      	movs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2221      	movs	r2, #33	@ 0x21
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	2100      	movs	r1, #0
 80055e0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	0010      	movs	r0, r2
 80055f2:	4798      	blx	r3
    }
  }
}
 80055f4:	e7ff      	b.n	80055f6 <HAL_DMA_IRQHandler+0x13c>
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b004      	add	sp, #16
 80055fc:	bd80      	pop	{r7, pc}

080055fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	2101      	movs	r1, #1
 8005616:	4091      	lsls	r1, r2
 8005618:	000a      	movs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b10      	cmp	r3, #16
 800562a:	d108      	bne.n	800563e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800563c:	e007      	b.n	800564e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	60da      	str	r2, [r3, #12]
}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a08      	ldr	r2, [pc, #32]	@ (8005688 <DMA_CalcBaseAndBitshift+0x30>)
 8005666:	4694      	mov	ip, r2
 8005668:	4463      	add	r3, ip
 800566a:	2114      	movs	r1, #20
 800566c:	0018      	movs	r0, r3
 800566e:	f7fa fd71 	bl	8000154 <__udivsi3>
 8005672:	0003      	movs	r3, r0
 8005674:	009a      	lsls	r2, r3, #2
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a03      	ldr	r2, [pc, #12]	@ (800568c <DMA_CalcBaseAndBitshift+0x34>)
 800567e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8005680:	46c0      	nop			@ (mov r8, r8)
 8005682:	46bd      	mov	sp, r7
 8005684:	b002      	add	sp, #8
 8005686:	bd80      	pop	{r7, pc}
 8005688:	bffdfff8 	.word	0xbffdfff8
 800568c:	40020000 	.word	0x40020000

08005690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800569e:	e14f      	b.n	8005940 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2101      	movs	r1, #1
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4091      	lsls	r1, r2
 80056aa:	000a      	movs	r2, r1
 80056ac:	4013      	ands	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d100      	bne.n	80056b8 <HAL_GPIO_Init+0x28>
 80056b6:	e140      	b.n	800593a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2203      	movs	r2, #3
 80056be:	4013      	ands	r3, r2
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d005      	beq.n	80056d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2203      	movs	r2, #3
 80056ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d130      	bne.n	8005732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	2203      	movs	r2, #3
 80056dc:	409a      	lsls	r2, r3
 80056de:	0013      	movs	r3, r2
 80056e0:	43da      	mvns	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4013      	ands	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	409a      	lsls	r2, r3
 80056f2:	0013      	movs	r3, r2
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005706:	2201      	movs	r2, #1
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	409a      	lsls	r2, r3
 800570c:	0013      	movs	r3, r2
 800570e:	43da      	mvns	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	2201      	movs	r2, #1
 800571e:	401a      	ands	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	409a      	lsls	r2, r3
 8005724:	0013      	movs	r3, r2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2203      	movs	r2, #3
 8005738:	4013      	ands	r3, r2
 800573a:	2b03      	cmp	r3, #3
 800573c:	d017      	beq.n	800576e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	2203      	movs	r2, #3
 800574a:	409a      	lsls	r2, r3
 800574c:	0013      	movs	r3, r2
 800574e:	43da      	mvns	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	409a      	lsls	r2, r3
 8005760:	0013      	movs	r3, r2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2203      	movs	r2, #3
 8005774:	4013      	ands	r3, r2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d123      	bne.n	80057c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	08da      	lsrs	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3208      	adds	r2, #8
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	58d3      	ldr	r3, [r2, r3]
 8005786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2207      	movs	r2, #7
 800578c:	4013      	ands	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	220f      	movs	r2, #15
 8005792:	409a      	lsls	r2, r3
 8005794:	0013      	movs	r3, r2
 8005796:	43da      	mvns	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2107      	movs	r1, #7
 80057a6:	400b      	ands	r3, r1
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	409a      	lsls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	08da      	lsrs	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3208      	adds	r2, #8
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	6939      	ldr	r1, [r7, #16]
 80057c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	409a      	lsls	r2, r3
 80057d0:	0013      	movs	r3, r2
 80057d2:	43da      	mvns	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4013      	ands	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2203      	movs	r2, #3
 80057e0:	401a      	ands	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	409a      	lsls	r2, r3
 80057e8:	0013      	movs	r3, r2
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	23c0      	movs	r3, #192	@ 0xc0
 80057fc:	029b      	lsls	r3, r3, #10
 80057fe:	4013      	ands	r3, r2
 8005800:	d100      	bne.n	8005804 <HAL_GPIO_Init+0x174>
 8005802:	e09a      	b.n	800593a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005804:	4b54      	ldr	r3, [pc, #336]	@ (8005958 <HAL_GPIO_Init+0x2c8>)
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <HAL_GPIO_Init+0x2c8>)
 800580a:	2101      	movs	r1, #1
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
 8005810:	4b51      	ldr	r3, [pc, #324]	@ (8005958 <HAL_GPIO_Init+0x2c8>)
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2201      	movs	r2, #1
 8005816:	4013      	ands	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800581c:	4a4f      	ldr	r2, [pc, #316]	@ (800595c <HAL_GPIO_Init+0x2cc>)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	3302      	adds	r3, #2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	589b      	ldr	r3, [r3, r2]
 8005828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2203      	movs	r2, #3
 800582e:	4013      	ands	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	220f      	movs	r2, #15
 8005834:	409a      	lsls	r2, r3
 8005836:	0013      	movs	r3, r2
 8005838:	43da      	mvns	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4013      	ands	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	2390      	movs	r3, #144	@ 0x90
 8005844:	05db      	lsls	r3, r3, #23
 8005846:	429a      	cmp	r2, r3
 8005848:	d013      	beq.n	8005872 <HAL_GPIO_Init+0x1e2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a44      	ldr	r2, [pc, #272]	@ (8005960 <HAL_GPIO_Init+0x2d0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00d      	beq.n	800586e <HAL_GPIO_Init+0x1de>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a43      	ldr	r2, [pc, #268]	@ (8005964 <HAL_GPIO_Init+0x2d4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x1da>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a42      	ldr	r2, [pc, #264]	@ (8005968 <HAL_GPIO_Init+0x2d8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d101      	bne.n	8005866 <HAL_GPIO_Init+0x1d6>
 8005862:	2303      	movs	r3, #3
 8005864:	e006      	b.n	8005874 <HAL_GPIO_Init+0x1e4>
 8005866:	2305      	movs	r3, #5
 8005868:	e004      	b.n	8005874 <HAL_GPIO_Init+0x1e4>
 800586a:	2302      	movs	r3, #2
 800586c:	e002      	b.n	8005874 <HAL_GPIO_Init+0x1e4>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_GPIO_Init+0x1e4>
 8005872:	2300      	movs	r3, #0
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	2103      	movs	r1, #3
 8005878:	400a      	ands	r2, r1
 800587a:	0092      	lsls	r2, r2, #2
 800587c:	4093      	lsls	r3, r2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005884:	4935      	ldr	r1, [pc, #212]	@ (800595c <HAL_GPIO_Init+0x2cc>)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	3302      	adds	r3, #2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005892:	4b36      	ldr	r3, [pc, #216]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43da      	mvns	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	035b      	lsls	r3, r3, #13
 80058aa:	4013      	ands	r3, r2
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80058b6:	4b2d      	ldr	r3, [pc, #180]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80058bc:	4b2b      	ldr	r3, [pc, #172]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	2380      	movs	r3, #128	@ 0x80
 80058d2:	039b      	lsls	r3, r3, #14
 80058d4:	4013      	ands	r3, r2
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80058e0:	4b22      	ldr	r3, [pc, #136]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80058e6:	4b21      	ldr	r3, [pc, #132]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	43da      	mvns	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4013      	ands	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	2380      	movs	r3, #128	@ 0x80
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	4013      	ands	r3, r2
 8005900:	d003      	beq.n	800590a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800590a:	4b18      	ldr	r3, [pc, #96]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005910:	4b16      	ldr	r3, [pc, #88]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	43da      	mvns	r2, r3
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	025b      	lsls	r3, r3, #9
 8005928:	4013      	ands	r3, r2
 800592a:	d003      	beq.n	8005934 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005934:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <HAL_GPIO_Init+0x2dc>)
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3301      	adds	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	40da      	lsrs	r2, r3
 8005948:	1e13      	subs	r3, r2, #0
 800594a:	d000      	beq.n	800594e <HAL_GPIO_Init+0x2be>
 800594c:	e6a8      	b.n	80056a0 <HAL_GPIO_Init+0x10>
  } 
}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	46c0      	nop			@ (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b006      	add	sp, #24
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40021000 	.word	0x40021000
 800595c:	40010000 	.word	0x40010000
 8005960:	48000400 	.word	0x48000400
 8005964:	48000800 	.word	0x48000800
 8005968:	48000c00 	.word	0x48000c00
 800596c:	40010400 	.word	0x40010400

08005970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	000a      	movs	r2, r1
 800597a:	1cbb      	adds	r3, r7, #2
 800597c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	1cba      	adds	r2, r7, #2
 8005984:	8812      	ldrh	r2, [r2, #0]
 8005986:	4013      	ands	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800598a:	230f      	movs	r3, #15
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e003      	b.n	800599c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005994:	230f      	movs	r3, #15
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800599c:	230f      	movs	r3, #15
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	781b      	ldrb	r3, [r3, #0]
  }
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	0008      	movs	r0, r1
 80059b4:	0011      	movs	r1, r2
 80059b6:	1cbb      	adds	r3, r7, #2
 80059b8:	1c02      	adds	r2, r0, #0
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	1c7b      	adds	r3, r7, #1
 80059be:	1c0a      	adds	r2, r1, #0
 80059c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059c2:	1c7b      	adds	r3, r7, #1
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059ca:	1cbb      	adds	r3, r7, #2
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059d2:	e003      	b.n	80059dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059d4:	1cbb      	adds	r3, r7, #2
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	0002      	movs	r2, r0
 80059ec:	1dbb      	adds	r3, r7, #6
 80059ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059f0:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	1dba      	adds	r2, r7, #6
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	d008      	beq.n	8005a0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80059fe:	1dba      	adds	r2, r7, #6
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a04:	1dbb      	adds	r3, r7, #6
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 f807 	bl	8005a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b002      	add	sp, #8
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	40010400 	.word	0x40010400

08005a1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	0002      	movs	r2, r0
 8005a24:	1dbb      	adds	r3, r7, #6
 8005a26:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005a28:	46c0      	nop			@ (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b002      	add	sp, #8
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e301      	b.n	8006046 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2201      	movs	r2, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d100      	bne.n	8005a4e <HAL_RCC_OscConfig+0x1e>
 8005a4c:	e08d      	b.n	8005b6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a4e:	4bc3      	ldr	r3, [pc, #780]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	220c      	movs	r2, #12
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d00e      	beq.n	8005a78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a5a:	4bc0      	ldr	r3, [pc, #768]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	220c      	movs	r2, #12
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d116      	bne.n	8005a94 <HAL_RCC_OscConfig+0x64>
 8005a66:	4bbd      	ldr	r3, [pc, #756]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	2380      	movs	r3, #128	@ 0x80
 8005a6c:	025b      	lsls	r3, r3, #9
 8005a6e:	401a      	ands	r2, r3
 8005a70:	2380      	movs	r3, #128	@ 0x80
 8005a72:	025b      	lsls	r3, r3, #9
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d10d      	bne.n	8005a94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a78:	4bb8      	ldr	r3, [pc, #736]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	029b      	lsls	r3, r3, #10
 8005a80:	4013      	ands	r3, r2
 8005a82:	d100      	bne.n	8005a86 <HAL_RCC_OscConfig+0x56>
 8005a84:	e070      	b.n	8005b68 <HAL_RCC_OscConfig+0x138>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d000      	beq.n	8005a90 <HAL_RCC_OscConfig+0x60>
 8005a8e:	e06b      	b.n	8005b68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e2d8      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d107      	bne.n	8005aac <HAL_RCC_OscConfig+0x7c>
 8005a9c:	4baf      	ldr	r3, [pc, #700]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4bae      	ldr	r3, [pc, #696]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005aa2:	2180      	movs	r1, #128	@ 0x80
 8005aa4:	0249      	lsls	r1, r1, #9
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e02f      	b.n	8005b0c <HAL_RCC_OscConfig+0xdc>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCC_OscConfig+0x9e>
 8005ab4:	4ba9      	ldr	r3, [pc, #676]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4ba8      	ldr	r3, [pc, #672]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005aba:	49a9      	ldr	r1, [pc, #676]	@ (8005d60 <HAL_RCC_OscConfig+0x330>)
 8005abc:	400a      	ands	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	4ba6      	ldr	r3, [pc, #664]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4ba5      	ldr	r3, [pc, #660]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ac6:	49a7      	ldr	r1, [pc, #668]	@ (8005d64 <HAL_RCC_OscConfig+0x334>)
 8005ac8:	400a      	ands	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e01e      	b.n	8005b0c <HAL_RCC_OscConfig+0xdc>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d10e      	bne.n	8005af4 <HAL_RCC_OscConfig+0xc4>
 8005ad6:	4ba1      	ldr	r3, [pc, #644]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4ba0      	ldr	r3, [pc, #640]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005adc:	2180      	movs	r1, #128	@ 0x80
 8005ade:	02c9      	lsls	r1, r1, #11
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	4b9c      	ldr	r3, [pc, #624]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005aea:	2180      	movs	r1, #128	@ 0x80
 8005aec:	0249      	lsls	r1, r1, #9
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e00b      	b.n	8005b0c <HAL_RCC_OscConfig+0xdc>
 8005af4:	4b99      	ldr	r3, [pc, #612]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b98      	ldr	r3, [pc, #608]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005afa:	4999      	ldr	r1, [pc, #612]	@ (8005d60 <HAL_RCC_OscConfig+0x330>)
 8005afc:	400a      	ands	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	4b96      	ldr	r3, [pc, #600]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b95      	ldr	r3, [pc, #596]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b06:	4997      	ldr	r1, [pc, #604]	@ (8005d64 <HAL_RCC_OscConfig+0x334>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d014      	beq.n	8005b3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fe feee 	bl	80048f4 <HAL_GetTick>
 8005b18:	0003      	movs	r3, r0
 8005b1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b1e:	f7fe fee9 	bl	80048f4 <HAL_GetTick>
 8005b22:	0002      	movs	r2, r0
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b64      	cmp	r3, #100	@ 0x64
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e28a      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b30:	4b8a      	ldr	r3, [pc, #552]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	2380      	movs	r3, #128	@ 0x80
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d0f0      	beq.n	8005b1e <HAL_RCC_OscConfig+0xee>
 8005b3c:	e015      	b.n	8005b6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3e:	f7fe fed9 	bl	80048f4 <HAL_GetTick>
 8005b42:	0003      	movs	r3, r0
 8005b44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b48:	f7fe fed4 	bl	80048f4 <HAL_GetTick>
 8005b4c:	0002      	movs	r2, r0
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	@ 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e275      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5a:	4b80      	ldr	r3, [pc, #512]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	2380      	movs	r3, #128	@ 0x80
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	4013      	ands	r3, r2
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x118>
 8005b66:	e000      	b.n	8005b6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b68:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4013      	ands	r3, r2
 8005b72:	d100      	bne.n	8005b76 <HAL_RCC_OscConfig+0x146>
 8005b74:	e069      	b.n	8005c4a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005b76:	4b79      	ldr	r3, [pc, #484]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	220c      	movs	r2, #12
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b80:	4b76      	ldr	r3, [pc, #472]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	220c      	movs	r2, #12
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d11c      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x196>
 8005b8c:	4b73      	ldr	r3, [pc, #460]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	025b      	lsls	r3, r3, #9
 8005b94:	4013      	ands	r3, r2
 8005b96:	d116      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b98:	4b70      	ldr	r3, [pc, #448]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d005      	beq.n	8005bae <HAL_RCC_OscConfig+0x17e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d001      	beq.n	8005bae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e24b      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bae:	4b6b      	ldr	r3, [pc, #428]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	22f8      	movs	r2, #248	@ 0xf8
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	00da      	lsls	r2, r3, #3
 8005bbe:	4b67      	ldr	r3, [pc, #412]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc4:	e041      	b.n	8005c4a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d024      	beq.n	8005c18 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bce:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b62      	ldr	r3, [pc, #392]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7fe fe8b 	bl	80048f4 <HAL_GetTick>
 8005bde:	0003      	movs	r3, r0
 8005be0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be4:	f7fe fe86 	bl	80048f4 <HAL_GetTick>
 8005be8:	0002      	movs	r2, r0
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e227      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf6:	4b59      	ldr	r3, [pc, #356]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d0f1      	beq.n	8005be4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c00:	4b56      	ldr	r3, [pc, #344]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	22f8      	movs	r2, #248	@ 0xf8
 8005c06:	4393      	bics	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00da      	lsls	r2, r3, #3
 8005c10:	4b52      	ldr	r3, [pc, #328]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e018      	b.n	8005c4a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c18:	4b50      	ldr	r3, [pc, #320]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c1e:	2101      	movs	r1, #1
 8005c20:	438a      	bics	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fe fe66 	bl	80048f4 <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c2e:	f7fe fe61 	bl	80048f4 <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e202      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c40:	4b46      	ldr	r3, [pc, #280]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2202      	movs	r2, #2
 8005c46:	4013      	ands	r3, r2
 8005c48:	d1f1      	bne.n	8005c2e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2208      	movs	r2, #8
 8005c50:	4013      	ands	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d019      	beq.n	8005c90 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c60:	4b3e      	ldr	r3, [pc, #248]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c62:	2101      	movs	r1, #1
 8005c64:	430a      	orrs	r2, r1
 8005c66:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c68:	f7fe fe44 	bl	80048f4 <HAL_GetTick>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c72:	f7fe fe3f 	bl	80048f4 <HAL_GetTick>
 8005c76:	0002      	movs	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e1e0      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c84:	4b35      	ldr	r3, [pc, #212]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d0f1      	beq.n	8005c72 <HAL_RCC_OscConfig+0x242>
 8005c8e:	e018      	b.n	8005cc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c90:	4b32      	ldr	r3, [pc, #200]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c94:	4b31      	ldr	r3, [pc, #196]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005c96:	2101      	movs	r1, #1
 8005c98:	438a      	bics	r2, r1
 8005c9a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9c:	f7fe fe2a 	bl	80048f4 <HAL_GetTick>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca6:	f7fe fe25 	bl	80048f4 <HAL_GetTick>
 8005caa:	0002      	movs	r2, r0
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e1c6      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb8:	4b28      	ldr	r3, [pc, #160]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d1f1      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d100      	bne.n	8005cce <HAL_RCC_OscConfig+0x29e>
 8005ccc:	e0b4      	b.n	8005e38 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cce:	201f      	movs	r0, #31
 8005cd0:	183b      	adds	r3, r7, r0
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd6:	4b21      	ldr	r3, [pc, #132]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	2380      	movs	r3, #128	@ 0x80
 8005cdc:	055b      	lsls	r3, r3, #21
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d110      	bne.n	8005d04 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005ce8:	2180      	movs	r1, #128	@ 0x80
 8005cea:	0549      	lsls	r1, r1, #21
 8005cec:	430a      	orrs	r2, r1
 8005cee:	61da      	str	r2, [r3, #28]
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	055b      	lsls	r3, r3, #21
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005cfe:	183b      	adds	r3, r7, r0
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <HAL_RCC_OscConfig+0x338>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d11a      	bne.n	8005d46 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d10:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <HAL_RCC_OscConfig+0x338>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <HAL_RCC_OscConfig+0x338>)
 8005d16:	2180      	movs	r1, #128	@ 0x80
 8005d18:	0049      	lsls	r1, r1, #1
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d1e:	f7fe fde9 	bl	80048f4 <HAL_GetTick>
 8005d22:	0003      	movs	r3, r0
 8005d24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d28:	f7fe fde4 	bl	80048f4 <HAL_GetTick>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	@ 0x64
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e185      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <HAL_RCC_OscConfig+0x338>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	2380      	movs	r3, #128	@ 0x80
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4013      	ands	r3, r2
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10e      	bne.n	8005d6c <HAL_RCC_OscConfig+0x33c>
 8005d4e:	4b03      	ldr	r3, [pc, #12]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	4b02      	ldr	r3, [pc, #8]	@ (8005d5c <HAL_RCC_OscConfig+0x32c>)
 8005d54:	2101      	movs	r1, #1
 8005d56:	430a      	orrs	r2, r1
 8005d58:	621a      	str	r2, [r3, #32]
 8005d5a:	e035      	b.n	8005dc8 <HAL_RCC_OscConfig+0x398>
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	fffeffff 	.word	0xfffeffff
 8005d64:	fffbffff 	.word	0xfffbffff
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10c      	bne.n	8005d8e <HAL_RCC_OscConfig+0x35e>
 8005d74:	4bb6      	ldr	r3, [pc, #728]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	4bb5      	ldr	r3, [pc, #724]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	438a      	bics	r2, r1
 8005d7e:	621a      	str	r2, [r3, #32]
 8005d80:	4bb3      	ldr	r3, [pc, #716]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	4bb2      	ldr	r3, [pc, #712]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005d86:	2104      	movs	r1, #4
 8005d88:	438a      	bics	r2, r1
 8005d8a:	621a      	str	r2, [r3, #32]
 8005d8c:	e01c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x398>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x380>
 8005d96:	4bae      	ldr	r3, [pc, #696]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	4bad      	ldr	r3, [pc, #692]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	621a      	str	r2, [r3, #32]
 8005da2:	4bab      	ldr	r3, [pc, #684]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	4baa      	ldr	r3, [pc, #680]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005da8:	2101      	movs	r1, #1
 8005daa:	430a      	orrs	r2, r1
 8005dac:	621a      	str	r2, [r3, #32]
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCC_OscConfig+0x398>
 8005db0:	4ba7      	ldr	r3, [pc, #668]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	4ba6      	ldr	r3, [pc, #664]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005db6:	2101      	movs	r1, #1
 8005db8:	438a      	bics	r2, r1
 8005dba:	621a      	str	r2, [r3, #32]
 8005dbc:	4ba4      	ldr	r3, [pc, #656]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	4ba3      	ldr	r3, [pc, #652]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005dc2:	2104      	movs	r1, #4
 8005dc4:	438a      	bics	r2, r1
 8005dc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d014      	beq.n	8005dfa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd0:	f7fe fd90 	bl	80048f4 <HAL_GetTick>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	e009      	b.n	8005dee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fe fd8b 	bl	80048f4 <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	4a9b      	ldr	r2, [pc, #620]	@ (8006054 <HAL_RCC_OscConfig+0x624>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e12b      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dee:	4b98      	ldr	r3, [pc, #608]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	2202      	movs	r2, #2
 8005df4:	4013      	ands	r3, r2
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x3aa>
 8005df8:	e013      	b.n	8005e22 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfa:	f7fe fd7b 	bl	80048f4 <HAL_GetTick>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e02:	e009      	b.n	8005e18 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fe fd76 	bl	80048f4 <HAL_GetTick>
 8005e08:	0002      	movs	r2, r0
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	4a91      	ldr	r2, [pc, #580]	@ (8006054 <HAL_RCC_OscConfig+0x624>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e116      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e18:	4b8d      	ldr	r3, [pc, #564]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e22:	231f      	movs	r3, #31
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b88      	ldr	r3, [pc, #544]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	4b87      	ldr	r3, [pc, #540]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e32:	4989      	ldr	r1, [pc, #548]	@ (8006058 <HAL_RCC_OscConfig+0x628>)
 8005e34:	400a      	ands	r2, r1
 8005e36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d063      	beq.n	8005f0a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d12a      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005e4a:	4b81      	ldr	r3, [pc, #516]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e4e:	4b80      	ldr	r3, [pc, #512]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e50:	2104      	movs	r1, #4
 8005e52:	430a      	orrs	r2, r1
 8005e54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005e56:	4b7e      	ldr	r3, [pc, #504]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e62:	f7fe fd47 	bl	80048f4 <HAL_GetTick>
 8005e66:	0003      	movs	r3, r0
 8005e68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005e6c:	f7fe fd42 	bl	80048f4 <HAL_GetTick>
 8005e70:	0002      	movs	r2, r0
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e0e3      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005e7e:	4b74      	ldr	r3, [pc, #464]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e82:	2202      	movs	r2, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	d0f1      	beq.n	8005e6c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005e88:	4b71      	ldr	r3, [pc, #452]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8c:	22f8      	movs	r2, #248	@ 0xf8
 8005e8e:	4393      	bics	r3, r2
 8005e90:	0019      	movs	r1, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	00da      	lsls	r2, r3, #3
 8005e98:	4b6d      	ldr	r3, [pc, #436]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e9e:	e034      	b.n	8005f0a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	3305      	adds	r3, #5
 8005ea6:	d111      	bne.n	8005ecc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005ea8:	4b69      	ldr	r3, [pc, #420]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eac:	4b68      	ldr	r3, [pc, #416]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005eae:	2104      	movs	r1, #4
 8005eb0:	438a      	bics	r2, r1
 8005eb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005eb4:	4b66      	ldr	r3, [pc, #408]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb8:	22f8      	movs	r2, #248	@ 0xf8
 8005eba:	4393      	bics	r3, r2
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	00da      	lsls	r2, r3, #3
 8005ec4:	4b62      	ldr	r3, [pc, #392]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005eca:	e01e      	b.n	8005f0a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005ecc:	4b60      	ldr	r3, [pc, #384]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005ed8:	4b5d      	ldr	r3, [pc, #372]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005edc:	4b5c      	ldr	r3, [pc, #368]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005ede:	2101      	movs	r1, #1
 8005ee0:	438a      	bics	r2, r1
 8005ee2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee4:	f7fe fd06 	bl	80048f4 <HAL_GetTick>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005eee:	f7fe fd01 	bl	80048f4 <HAL_GetTick>
 8005ef2:	0002      	movs	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e0a2      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f00:	4b53      	ldr	r3, [pc, #332]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f04:	2202      	movs	r2, #2
 8005f06:	4013      	ands	r3, r2
 8005f08:	d1f1      	bne.n	8005eee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d100      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4e4>
 8005f12:	e097      	b.n	8006044 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f14:	4b4e      	ldr	r3, [pc, #312]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	220c      	movs	r2, #12
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d100      	bne.n	8005f22 <HAL_RCC_OscConfig+0x4f2>
 8005f20:	e06b      	b.n	8005ffa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d14c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2a:	4b49      	ldr	r3, [pc, #292]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b48      	ldr	r3, [pc, #288]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f30:	494a      	ldr	r1, [pc, #296]	@ (800605c <HAL_RCC_OscConfig+0x62c>)
 8005f32:	400a      	ands	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fe fcdd 	bl	80048f4 <HAL_GetTick>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f40:	f7fe fcd8 	bl	80048f4 <HAL_GetTick>
 8005f44:	0002      	movs	r2, r0
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e079      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f52:	4b3f      	ldr	r3, [pc, #252]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2380      	movs	r3, #128	@ 0x80
 8005f58:	049b      	lsls	r3, r3, #18
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	220f      	movs	r2, #15
 8005f64:	4393      	bics	r3, r2
 8005f66:	0019      	movs	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6c:	4b38      	ldr	r3, [pc, #224]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f72:	4b37      	ldr	r3, [pc, #220]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4a3a      	ldr	r2, [pc, #232]	@ (8006060 <HAL_RCC_OscConfig+0x630>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	431a      	orrs	r2, r3
 8005f86:	4b32      	ldr	r3, [pc, #200]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f8c:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b2f      	ldr	r3, [pc, #188]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005f92:	2180      	movs	r1, #128	@ 0x80
 8005f94:	0449      	lsls	r1, r1, #17
 8005f96:	430a      	orrs	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9a:	f7fe fcab 	bl	80048f4 <HAL_GetTick>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa4:	f7fe fca6 	bl	80048f4 <HAL_GetTick>
 8005fa8:	0002      	movs	r2, r0
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e047      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fb6:	4b26      	ldr	r3, [pc, #152]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	2380      	movs	r3, #128	@ 0x80
 8005fbc:	049b      	lsls	r3, r3, #18
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x574>
 8005fc2:	e03f      	b.n	8006044 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc4:	4b22      	ldr	r3, [pc, #136]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b21      	ldr	r3, [pc, #132]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005fca:	4924      	ldr	r1, [pc, #144]	@ (800605c <HAL_RCC_OscConfig+0x62c>)
 8005fcc:	400a      	ands	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fe fc90 	bl	80048f4 <HAL_GetTick>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fda:	f7fe fc8b 	bl	80048f4 <HAL_GetTick>
 8005fde:	0002      	movs	r2, r0
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e02c      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fec:	4b18      	ldr	r3, [pc, #96]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	2380      	movs	r3, #128	@ 0x80
 8005ff2:	049b      	lsls	r3, r3, #18
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d1f0      	bne.n	8005fda <HAL_RCC_OscConfig+0x5aa>
 8005ff8:	e024      	b.n	8006044 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e01f      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006006:	4b12      	ldr	r3, [pc, #72]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800600c:	4b10      	ldr	r3, [pc, #64]	@ (8006050 <HAL_RCC_OscConfig+0x620>)
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	2380      	movs	r3, #128	@ 0x80
 8006016:	025b      	lsls	r3, r3, #9
 8006018:	401a      	ands	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	429a      	cmp	r2, r3
 8006020:	d10e      	bne.n	8006040 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	220f      	movs	r2, #15
 8006026:	401a      	ands	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d107      	bne.n	8006040 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	23f0      	movs	r3, #240	@ 0xf0
 8006034:	039b      	lsls	r3, r3, #14
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	0018      	movs	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	b008      	add	sp, #32
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	40021000 	.word	0x40021000
 8006054:	00001388 	.word	0x00001388
 8006058:	efffffff 	.word	0xefffffff
 800605c:	feffffff 	.word	0xfeffffff
 8006060:	ffc2ffff 	.word	0xffc2ffff

08006064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0b3      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006078:	4b5b      	ldr	r3, [pc, #364]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2201      	movs	r2, #1
 800607e:	4013      	ands	r3, r2
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d911      	bls.n	80060aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b58      	ldr	r3, [pc, #352]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	4393      	bics	r3, r2
 800608e:	0019      	movs	r1, r3
 8006090:	4b55      	ldr	r3, [pc, #340]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006098:	4b53      	ldr	r3, [pc, #332]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2201      	movs	r2, #1
 800609e:	4013      	ands	r3, r2
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d001      	beq.n	80060aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e09a      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2202      	movs	r2, #2
 80060b0:	4013      	ands	r3, r2
 80060b2:	d015      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2204      	movs	r2, #4
 80060ba:	4013      	ands	r3, r2
 80060bc:	d006      	beq.n	80060cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80060be:	4b4b      	ldr	r3, [pc, #300]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	4b4a      	ldr	r3, [pc, #296]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80060c4:	21e0      	movs	r1, #224	@ 0xe0
 80060c6:	00c9      	lsls	r1, r1, #3
 80060c8:	430a      	orrs	r2, r1
 80060ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060cc:	4b47      	ldr	r3, [pc, #284]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	22f0      	movs	r2, #240	@ 0xf0
 80060d2:	4393      	bics	r3, r2
 80060d4:	0019      	movs	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	4b44      	ldr	r3, [pc, #272]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4013      	ands	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d107      	bne.n	8006102 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	2380      	movs	r3, #128	@ 0x80
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	4013      	ands	r3, r2
 80060fc:	d114      	bne.n	8006128 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06e      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d107      	bne.n	800611a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800610a:	4b38      	ldr	r3, [pc, #224]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	2380      	movs	r3, #128	@ 0x80
 8006110:	049b      	lsls	r3, r3, #18
 8006112:	4013      	ands	r3, r2
 8006114:	d108      	bne.n	8006128 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e062      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611a:	4b34      	ldr	r3, [pc, #208]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2202      	movs	r2, #2
 8006120:	4013      	ands	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e05b      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006128:	4b30      	ldr	r3, [pc, #192]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2203      	movs	r2, #3
 800612e:	4393      	bics	r3, r2
 8006130:	0019      	movs	r1, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4b2d      	ldr	r3, [pc, #180]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800613c:	f7fe fbda 	bl	80048f4 <HAL_GetTick>
 8006140:	0003      	movs	r3, r0
 8006142:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006144:	e009      	b.n	800615a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006146:	f7fe fbd5 	bl	80048f4 <HAL_GetTick>
 800614a:	0002      	movs	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	4a27      	ldr	r2, [pc, #156]	@ (80061f0 <HAL_RCC_ClockConfig+0x18c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d901      	bls.n	800615a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e042      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615a:	4b24      	ldr	r3, [pc, #144]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	220c      	movs	r2, #12
 8006160:	401a      	ands	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	429a      	cmp	r2, r3
 800616a:	d1ec      	bne.n	8006146 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800616c:	4b1e      	ldr	r3, [pc, #120]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	4013      	ands	r3, r2
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d211      	bcs.n	800619e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617a:	4b1b      	ldr	r3, [pc, #108]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2201      	movs	r2, #1
 8006180:	4393      	bics	r3, r2
 8006182:	0019      	movs	r1, r3
 8006184:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800618c:	4b16      	ldr	r3, [pc, #88]	@ (80061e8 <HAL_RCC_ClockConfig+0x184>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2201      	movs	r2, #1
 8006192:	4013      	ands	r3, r2
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d001      	beq.n	800619e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e020      	b.n	80061e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2204      	movs	r2, #4
 80061a4:	4013      	ands	r3, r2
 80061a6:	d009      	beq.n	80061bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80061a8:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4a11      	ldr	r2, [pc, #68]	@ (80061f4 <HAL_RCC_ClockConfig+0x190>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	0019      	movs	r1, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80061bc:	f000 f820 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80061c0:	0001      	movs	r1, r0
 80061c2:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <HAL_RCC_ClockConfig+0x188>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	091b      	lsrs	r3, r3, #4
 80061c8:	220f      	movs	r2, #15
 80061ca:	4013      	ands	r3, r2
 80061cc:	4a0a      	ldr	r2, [pc, #40]	@ (80061f8 <HAL_RCC_ClockConfig+0x194>)
 80061ce:	5cd3      	ldrb	r3, [r2, r3]
 80061d0:	000a      	movs	r2, r1
 80061d2:	40da      	lsrs	r2, r3
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_ClockConfig+0x198>)
 80061d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80061d8:	2003      	movs	r0, #3
 80061da:	f7fe fb45 	bl	8004868 <HAL_InitTick>
  
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b004      	add	sp, #16
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40022000 	.word	0x40022000
 80061ec:	40021000 	.word	0x40021000
 80061f0:	00001388 	.word	0x00001388
 80061f4:	fffff8ff 	.word	0xfffff8ff
 80061f8:	0800e8a0 	.word	0x0800e8a0
 80061fc:	20000040 	.word	0x20000040

08006200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800621a:	4b20      	ldr	r3, [pc, #128]	@ (800629c <HAL_RCC_GetSysClockFreq+0x9c>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	220c      	movs	r2, #12
 8006224:	4013      	ands	r3, r2
 8006226:	2b04      	cmp	r3, #4
 8006228:	d002      	beq.n	8006230 <HAL_RCC_GetSysClockFreq+0x30>
 800622a:	2b08      	cmp	r3, #8
 800622c:	d003      	beq.n	8006236 <HAL_RCC_GetSysClockFreq+0x36>
 800622e:	e02c      	b.n	800628a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006230:	4b1b      	ldr	r3, [pc, #108]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006232:	613b      	str	r3, [r7, #16]
      break;
 8006234:	e02c      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	0c9b      	lsrs	r3, r3, #18
 800623a:	220f      	movs	r2, #15
 800623c:	4013      	ands	r3, r2
 800623e:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006240:	5cd3      	ldrb	r3, [r2, r3]
 8006242:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006244:	4b15      	ldr	r3, [pc, #84]	@ (800629c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	220f      	movs	r2, #15
 800624a:	4013      	ands	r3, r2
 800624c:	4a16      	ldr	r2, [pc, #88]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	025b      	lsls	r3, r3, #9
 8006258:	4013      	ands	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4810      	ldr	r0, [pc, #64]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006260:	f7f9 ff78 	bl	8000154 <__udivsi3>
 8006264:	0003      	movs	r3, r0
 8006266:	001a      	movs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4353      	muls	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e009      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	000a      	movs	r2, r1
 8006274:	0152      	lsls	r2, r2, #5
 8006276:	1a52      	subs	r2, r2, r1
 8006278:	0193      	lsls	r3, r2, #6
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	185b      	adds	r3, r3, r1
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	613b      	str	r3, [r7, #16]
      break;
 8006288:	e002      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800628a:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800628c:	613b      	str	r3, [r7, #16]
      break;
 800628e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006290:	693b      	ldr	r3, [r7, #16]
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b006      	add	sp, #24
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	40021000 	.word	0x40021000
 80062a0:	007a1200 	.word	0x007a1200
 80062a4:	0800e8b8 	.word	0x0800e8b8
 80062a8:	0800e8c8 	.word	0x0800e8c8

080062ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b0:	4b02      	ldr	r3, [pc, #8]	@ (80062bc <HAL_RCC_GetHCLKFreq+0x10>)
 80062b2:	681b      	ldr	r3, [r3, #0]
}
 80062b4:	0018      	movs	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	20000040 	.word	0x20000040

080062c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80062c4:	f7ff fff2 	bl	80062ac <HAL_RCC_GetHCLKFreq>
 80062c8:	0001      	movs	r1, r0
 80062ca:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	2207      	movs	r2, #7
 80062d2:	4013      	ands	r3, r2
 80062d4:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062d6:	5cd3      	ldrb	r3, [r2, r3]
 80062d8:	40d9      	lsrs	r1, r3
 80062da:	000b      	movs	r3, r1
}    
 80062dc:	0018      	movs	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			@ (mov r8, r8)
 80062e4:	40021000 	.word	0x40021000
 80062e8:	0800e8b0 	.word	0x0800e8b0

080062ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	025b      	lsls	r3, r3, #9
 8006304:	4013      	ands	r3, r2
 8006306:	d100      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006308:	e08e      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800630a:	2017      	movs	r0, #23
 800630c:	183b      	adds	r3, r7, r0
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006312:	4b57      	ldr	r3, [pc, #348]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	2380      	movs	r3, #128	@ 0x80
 8006318:	055b      	lsls	r3, r3, #21
 800631a:	4013      	ands	r3, r2
 800631c:	d110      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800631e:	4b54      	ldr	r3, [pc, #336]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006320:	69da      	ldr	r2, [r3, #28]
 8006322:	4b53      	ldr	r3, [pc, #332]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006324:	2180      	movs	r1, #128	@ 0x80
 8006326:	0549      	lsls	r1, r1, #21
 8006328:	430a      	orrs	r2, r1
 800632a:	61da      	str	r2, [r3, #28]
 800632c:	4b50      	ldr	r3, [pc, #320]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	055b      	lsls	r3, r3, #21
 8006334:	4013      	ands	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800633a:	183b      	adds	r3, r7, r0
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006340:	4b4c      	ldr	r3, [pc, #304]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4013      	ands	r3, r2
 800634a:	d11a      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800634c:	4b49      	ldr	r3, [pc, #292]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4b48      	ldr	r3, [pc, #288]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006352:	2180      	movs	r1, #128	@ 0x80
 8006354:	0049      	lsls	r1, r1, #1
 8006356:	430a      	orrs	r2, r1
 8006358:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800635a:	f7fe facb 	bl	80048f4 <HAL_GetTick>
 800635e:	0003      	movs	r3, r0
 8006360:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006362:	e008      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006364:	f7fe fac6 	bl	80048f4 <HAL_GetTick>
 8006368:	0002      	movs	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	@ 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e077      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006376:	4b3f      	ldr	r3, [pc, #252]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	2380      	movs	r3, #128	@ 0x80
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4013      	ands	r3, r2
 8006380:	d0f0      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006382:	4b3b      	ldr	r3, [pc, #236]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	23c0      	movs	r3, #192	@ 0xc0
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4013      	ands	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d034      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	23c0      	movs	r3, #192	@ 0xc0
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4013      	ands	r3, r2
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d02c      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063a4:	4b32      	ldr	r3, [pc, #200]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	4a33      	ldr	r2, [pc, #204]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063ae:	4b30      	ldr	r3, [pc, #192]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063b0:	6a1a      	ldr	r2, [r3, #32]
 80063b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063b4:	2180      	movs	r1, #128	@ 0x80
 80063b6:	0249      	lsls	r1, r1, #9
 80063b8:	430a      	orrs	r2, r1
 80063ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063be:	6a1a      	ldr	r2, [r3, #32]
 80063c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063c2:	492e      	ldr	r1, [pc, #184]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80063c4:	400a      	ands	r2, r1
 80063c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80063c8:	4b29      	ldr	r3, [pc, #164]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	4013      	ands	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d6:	f7fe fa8d 	bl	80048f4 <HAL_GetTick>
 80063da:	0003      	movs	r3, r0
 80063dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063de:	e009      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e0:	f7fe fa88 	bl	80048f4 <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	4a25      	ldr	r2, [pc, #148]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e038      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	2202      	movs	r2, #2
 80063fa:	4013      	ands	r3, r2
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	4a1d      	ldr	r2, [pc, #116]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006404:	4013      	ands	r3, r2
 8006406:	0019      	movs	r1, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800640e:	430a      	orrs	r2, r1
 8006410:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006412:	2317      	movs	r3, #23
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d105      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800641c:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006422:	4918      	ldr	r1, [pc, #96]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006424:	400a      	ands	r2, r1
 8006426:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2201      	movs	r2, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006436:	2203      	movs	r2, #3
 8006438:	4393      	bics	r3, r2
 800643a:	0019      	movs	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006442:	430a      	orrs	r2, r1
 8006444:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2220      	movs	r2, #32
 800644c:	4013      	ands	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006450:	4b07      	ldr	r3, [pc, #28]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	2210      	movs	r2, #16
 8006456:	4393      	bics	r3, r2
 8006458:	0019      	movs	r1, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	4b04      	ldr	r3, [pc, #16]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006460:	430a      	orrs	r2, r1
 8006462:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	0018      	movs	r0, r3
 8006468:	46bd      	mov	sp, r7
 800646a:	b006      	add	sp, #24
 800646c:	bd80      	pop	{r7, pc}
 800646e:	46c0      	nop			@ (mov r8, r8)
 8006470:	40021000 	.word	0x40021000
 8006474:	40007000 	.word	0x40007000
 8006478:	fffffcff 	.word	0xfffffcff
 800647c:	fffeffff 	.word	0xfffeffff
 8006480:	00001388 	.word	0x00001388
 8006484:	efffffff 	.word	0xefffffff

08006488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e042      	b.n	8006520 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	223d      	movs	r2, #61	@ 0x3d
 800649e:	5c9b      	ldrb	r3, [r3, r2]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	223c      	movs	r2, #60	@ 0x3c
 80064aa:	2100      	movs	r1, #0
 80064ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fd ff1d 	bl	80042f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	223d      	movs	r2, #61	@ 0x3d
 80064ba:	2102      	movs	r1, #2
 80064bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	0019      	movs	r1, r3
 80064c8:	0010      	movs	r0, r2
 80064ca:	f000 fee7 	bl	800729c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2246      	movs	r2, #70	@ 0x46
 80064d2:	2101      	movs	r1, #1
 80064d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	223e      	movs	r2, #62	@ 0x3e
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	223f      	movs	r2, #63	@ 0x3f
 80064e2:	2101      	movs	r1, #1
 80064e4:	5499      	strb	r1, [r3, r2]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2240      	movs	r2, #64	@ 0x40
 80064ea:	2101      	movs	r1, #1
 80064ec:	5499      	strb	r1, [r3, r2]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2241      	movs	r2, #65	@ 0x41
 80064f2:	2101      	movs	r1, #1
 80064f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2242      	movs	r2, #66	@ 0x42
 80064fa:	2101      	movs	r1, #1
 80064fc:	5499      	strb	r1, [r3, r2]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2243      	movs	r2, #67	@ 0x43
 8006502:	2101      	movs	r1, #1
 8006504:	5499      	strb	r1, [r3, r2]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2244      	movs	r2, #68	@ 0x44
 800650a:	2101      	movs	r1, #1
 800650c:	5499      	strb	r1, [r3, r2]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2245      	movs	r2, #69	@ 0x45
 8006512:	2101      	movs	r1, #1
 8006514:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	223d      	movs	r2, #61	@ 0x3d
 800651a:	2101      	movs	r1, #1
 800651c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b002      	add	sp, #8
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	223d      	movs	r2, #61	@ 0x3d
 8006534:	5c9b      	ldrb	r3, [r3, r2]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e02d      	b.n	800659c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	223d      	movs	r2, #61	@ 0x3d
 8006544:	2102      	movs	r1, #2
 8006546:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <HAL_TIM_Base_Start+0x7c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_TIM_Base_Start+0x3e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	@ (80065a8 <HAL_TIM_Base_Start+0x80>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_TIM_Base_Start+0x3e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a12      	ldr	r2, [pc, #72]	@ (80065ac <HAL_TIM_Base_Start+0x84>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d111      	bne.n	800658a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2207      	movs	r2, #7
 800656e:	4013      	ands	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b06      	cmp	r3, #6
 8006576:	d010      	beq.n	800659a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2101      	movs	r1, #1
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006588:	e007      	b.n	800659a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2101      	movs	r1, #1
 8006596:	430a      	orrs	r2, r1
 8006598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b004      	add	sp, #16
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40014000 	.word	0x40014000

080065b0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	4a0d      	ldr	r2, [pc, #52]	@ (80065f4 <HAL_TIM_Base_Stop+0x44>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	d10d      	bne.n	80065e0 <HAL_TIM_Base_Stop+0x30>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	4a0b      	ldr	r2, [pc, #44]	@ (80065f8 <HAL_TIM_Base_Stop+0x48>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_Base_Stop+0x30>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2101      	movs	r1, #1
 80065dc:	438a      	bics	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	223d      	movs	r2, #61	@ 0x3d
 80065e4:	2101      	movs	r1, #1
 80065e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b002      	add	sp, #8
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	00001111 	.word	0x00001111
 80065f8:	00000444 	.word	0x00000444

080065fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	223d      	movs	r2, #61	@ 0x3d
 8006608:	5c9b      	ldrb	r3, [r3, r2]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d001      	beq.n	8006614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e035      	b.n	8006680 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	223d      	movs	r2, #61	@ 0x3d
 8006618:	2102      	movs	r1, #2
 800661a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2101      	movs	r1, #1
 8006628:	430a      	orrs	r2, r1
 800662a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <HAL_TIM_Base_Start_IT+0x8c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d009      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x4e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a14      	ldr	r2, [pc, #80]	@ (800668c <HAL_TIM_Base_Start_IT+0x90>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d004      	beq.n	800664a <HAL_TIM_Base_Start_IT+0x4e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a12      	ldr	r2, [pc, #72]	@ (8006690 <HAL_TIM_Base_Start_IT+0x94>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2207      	movs	r2, #7
 8006652:	4013      	ands	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b06      	cmp	r3, #6
 800665a:	d010      	beq.n	800667e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2101      	movs	r1, #1
 8006668:	430a      	orrs	r2, r1
 800666a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666c:	e007      	b.n	800667e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2101      	movs	r1, #1
 800667a:	430a      	orrs	r2, r1
 800667c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	0018      	movs	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	b004      	add	sp, #16
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40012c00 	.word	0x40012c00
 800668c:	40000400 	.word	0x40000400
 8006690:	40014000 	.word	0x40014000

08006694 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2101      	movs	r1, #1
 80066a8:	438a      	bics	r2, r1
 80066aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	4a0d      	ldr	r2, [pc, #52]	@ (80066e8 <HAL_TIM_Base_Stop_IT+0x54>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	d10d      	bne.n	80066d4 <HAL_TIM_Base_Stop_IT+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	4a0b      	ldr	r2, [pc, #44]	@ (80066ec <HAL_TIM_Base_Stop_IT+0x58>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	d107      	bne.n	80066d4 <HAL_TIM_Base_Stop_IT+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2101      	movs	r1, #1
 80066d0:	438a      	bics	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	223d      	movs	r2, #61	@ 0x3d
 80066d8:	2101      	movs	r1, #1
 80066da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	0018      	movs	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b002      	add	sp, #8
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	00001111 	.word	0x00001111
 80066ec:	00000444 	.word	0x00000444

080066f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e042      	b.n	8006788 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	223d      	movs	r2, #61	@ 0x3d
 8006706:	5c9b      	ldrb	r3, [r3, r2]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d107      	bne.n	800671e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	223c      	movs	r2, #60	@ 0x3c
 8006712:	2100      	movs	r1, #0
 8006714:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	0018      	movs	r0, r3
 800671a:	f000 f839 	bl	8006790 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	223d      	movs	r2, #61	@ 0x3d
 8006722:	2102      	movs	r1, #2
 8006724:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	0019      	movs	r1, r3
 8006730:	0010      	movs	r0, r2
 8006732:	f000 fdb3 	bl	800729c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2246      	movs	r2, #70	@ 0x46
 800673a:	2101      	movs	r1, #1
 800673c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	223e      	movs	r2, #62	@ 0x3e
 8006742:	2101      	movs	r1, #1
 8006744:	5499      	strb	r1, [r3, r2]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	223f      	movs	r2, #63	@ 0x3f
 800674a:	2101      	movs	r1, #1
 800674c:	5499      	strb	r1, [r3, r2]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2240      	movs	r2, #64	@ 0x40
 8006752:	2101      	movs	r1, #1
 8006754:	5499      	strb	r1, [r3, r2]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2241      	movs	r2, #65	@ 0x41
 800675a:	2101      	movs	r1, #1
 800675c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2242      	movs	r2, #66	@ 0x42
 8006762:	2101      	movs	r1, #1
 8006764:	5499      	strb	r1, [r3, r2]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2243      	movs	r2, #67	@ 0x43
 800676a:	2101      	movs	r1, #1
 800676c:	5499      	strb	r1, [r3, r2]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2244      	movs	r2, #68	@ 0x44
 8006772:	2101      	movs	r1, #1
 8006774:	5499      	strb	r1, [r3, r2]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2245      	movs	r2, #69	@ 0x45
 800677a:	2101      	movs	r1, #1
 800677c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	223d      	movs	r2, #61	@ 0x3d
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	0018      	movs	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	b002      	add	sp, #8
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006798:	46c0      	nop			@ (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b002      	add	sp, #8
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d108      	bne.n	80067c2 <HAL_TIM_OC_Start+0x22>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	223e      	movs	r2, #62	@ 0x3e
 80067b4:	5c9b      	ldrb	r3, [r3, r2]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	1e5a      	subs	r2, r3, #1
 80067bc:	4193      	sbcs	r3, r2
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e01f      	b.n	8006802 <HAL_TIM_OC_Start+0x62>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d108      	bne.n	80067da <HAL_TIM_OC_Start+0x3a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	223f      	movs	r2, #63	@ 0x3f
 80067cc:	5c9b      	ldrb	r3, [r3, r2]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	1e5a      	subs	r2, r3, #1
 80067d4:	4193      	sbcs	r3, r2
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e013      	b.n	8006802 <HAL_TIM_OC_Start+0x62>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d108      	bne.n	80067f2 <HAL_TIM_OC_Start+0x52>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2240      	movs	r2, #64	@ 0x40
 80067e4:	5c9b      	ldrb	r3, [r3, r2]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	1e5a      	subs	r2, r3, #1
 80067ec:	4193      	sbcs	r3, r2
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e007      	b.n	8006802 <HAL_TIM_OC_Start+0x62>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2241      	movs	r2, #65	@ 0x41
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	1e5a      	subs	r2, r3, #1
 80067fe:	4193      	sbcs	r3, r2
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e06e      	b.n	80068e8 <HAL_TIM_OC_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <HAL_TIM_OC_Start+0x7a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	223e      	movs	r2, #62	@ 0x3e
 8006814:	2102      	movs	r1, #2
 8006816:	5499      	strb	r1, [r3, r2]
 8006818:	e013      	b.n	8006842 <HAL_TIM_OC_Start+0xa2>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b04      	cmp	r3, #4
 800681e:	d104      	bne.n	800682a <HAL_TIM_OC_Start+0x8a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	223f      	movs	r2, #63	@ 0x3f
 8006824:	2102      	movs	r1, #2
 8006826:	5499      	strb	r1, [r3, r2]
 8006828:	e00b      	b.n	8006842 <HAL_TIM_OC_Start+0xa2>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d104      	bne.n	800683a <HAL_TIM_OC_Start+0x9a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2240      	movs	r2, #64	@ 0x40
 8006834:	2102      	movs	r1, #2
 8006836:	5499      	strb	r1, [r3, r2]
 8006838:	e003      	b.n	8006842 <HAL_TIM_OC_Start+0xa2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2241      	movs	r2, #65	@ 0x41
 800683e:	2102      	movs	r1, #2
 8006840:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	0018      	movs	r0, r3
 800684c:	f001 f8d2 	bl	80079f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <HAL_TIM_OC_Start+0x150>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00e      	beq.n	8006878 <HAL_TIM_OC_Start+0xd8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a25      	ldr	r2, [pc, #148]	@ (80068f4 <HAL_TIM_OC_Start+0x154>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d009      	beq.n	8006878 <HAL_TIM_OC_Start+0xd8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a23      	ldr	r2, [pc, #140]	@ (80068f8 <HAL_TIM_OC_Start+0x158>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d004      	beq.n	8006878 <HAL_TIM_OC_Start+0xd8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a22      	ldr	r2, [pc, #136]	@ (80068fc <HAL_TIM_OC_Start+0x15c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d101      	bne.n	800687c <HAL_TIM_OC_Start+0xdc>
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <HAL_TIM_OC_Start+0xde>
 800687c:	2300      	movs	r3, #0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2180      	movs	r1, #128	@ 0x80
 800688e:	0209      	lsls	r1, r1, #8
 8006890:	430a      	orrs	r2, r1
 8006892:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <HAL_TIM_OC_Start+0x150>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_TIM_OC_Start+0x112>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <HAL_TIM_OC_Start+0x160>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIM_OC_Start+0x112>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <HAL_TIM_OC_Start+0x154>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <HAL_TIM_OC_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2207      	movs	r2, #7
 80068ba:	4013      	ands	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b06      	cmp	r3, #6
 80068c2:	d010      	beq.n	80068e6 <HAL_TIM_OC_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2101      	movs	r1, #1
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d4:	e007      	b.n	80068e6 <HAL_TIM_OC_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2101      	movs	r1, #1
 80068e2:	430a      	orrs	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	0018      	movs	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b004      	add	sp, #16
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40014400 	.word	0x40014400
 80068fc:	40014800 	.word	0x40014800
 8006900:	40000400 	.word	0x40000400

08006904 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e042      	b.n	800699c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	223d      	movs	r2, #61	@ 0x3d
 800691a:	5c9b      	ldrb	r3, [r3, r2]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d107      	bne.n	8006932 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	223c      	movs	r2, #60	@ 0x3c
 8006926:	2100      	movs	r1, #0
 8006928:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0018      	movs	r0, r3
 800692e:	f000 f839 	bl	80069a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	223d      	movs	r2, #61	@ 0x3d
 8006936:	2102      	movs	r1, #2
 8006938:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3304      	adds	r3, #4
 8006942:	0019      	movs	r1, r3
 8006944:	0010      	movs	r0, r2
 8006946:	f000 fca9 	bl	800729c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2246      	movs	r2, #70	@ 0x46
 800694e:	2101      	movs	r1, #1
 8006950:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	223e      	movs	r2, #62	@ 0x3e
 8006956:	2101      	movs	r1, #1
 8006958:	5499      	strb	r1, [r3, r2]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	223f      	movs	r2, #63	@ 0x3f
 800695e:	2101      	movs	r1, #1
 8006960:	5499      	strb	r1, [r3, r2]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2240      	movs	r2, #64	@ 0x40
 8006966:	2101      	movs	r1, #1
 8006968:	5499      	strb	r1, [r3, r2]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2241      	movs	r2, #65	@ 0x41
 800696e:	2101      	movs	r1, #1
 8006970:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2242      	movs	r2, #66	@ 0x42
 8006976:	2101      	movs	r1, #1
 8006978:	5499      	strb	r1, [r3, r2]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2243      	movs	r2, #67	@ 0x43
 800697e:	2101      	movs	r1, #1
 8006980:	5499      	strb	r1, [r3, r2]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2244      	movs	r2, #68	@ 0x44
 8006986:	2101      	movs	r1, #1
 8006988:	5499      	strb	r1, [r3, r2]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2245      	movs	r2, #69	@ 0x45
 800698e:	2101      	movs	r1, #1
 8006990:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	223d      	movs	r2, #61	@ 0x3d
 8006996:	2101      	movs	r1, #1
 8006998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	0018      	movs	r0, r3
 800699e:	46bd      	mov	sp, r7
 80069a0:	b002      	add	sp, #8
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069ac:	46c0      	nop			@ (mov r8, r8)
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b002      	add	sp, #8
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <HAL_TIM_PWM_Start+0x22>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	223e      	movs	r2, #62	@ 0x3e
 80069c8:	5c9b      	ldrb	r3, [r3, r2]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	4193      	sbcs	r3, r2
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	e01f      	b.n	8006a16 <HAL_TIM_PWM_Start+0x62>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d108      	bne.n	80069ee <HAL_TIM_PWM_Start+0x3a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	223f      	movs	r2, #63	@ 0x3f
 80069e0:	5c9b      	ldrb	r3, [r3, r2]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	1e5a      	subs	r2, r3, #1
 80069e8:	4193      	sbcs	r3, r2
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e013      	b.n	8006a16 <HAL_TIM_PWM_Start+0x62>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d108      	bne.n	8006a06 <HAL_TIM_PWM_Start+0x52>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2240      	movs	r2, #64	@ 0x40
 80069f8:	5c9b      	ldrb	r3, [r3, r2]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	1e5a      	subs	r2, r3, #1
 8006a00:	4193      	sbcs	r3, r2
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	e007      	b.n	8006a16 <HAL_TIM_PWM_Start+0x62>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2241      	movs	r2, #65	@ 0x41
 8006a0a:	5c9b      	ldrb	r3, [r3, r2]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	1e5a      	subs	r2, r3, #1
 8006a12:	4193      	sbcs	r3, r2
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e06e      	b.n	8006afc <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0x7a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	223e      	movs	r2, #62	@ 0x3e
 8006a28:	2102      	movs	r1, #2
 8006a2a:	5499      	strb	r1, [r3, r2]
 8006a2c:	e013      	b.n	8006a56 <HAL_TIM_PWM_Start+0xa2>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0x8a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	223f      	movs	r2, #63	@ 0x3f
 8006a38:	2102      	movs	r1, #2
 8006a3a:	5499      	strb	r1, [r3, r2]
 8006a3c:	e00b      	b.n	8006a56 <HAL_TIM_PWM_Start+0xa2>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0x9a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2240      	movs	r2, #64	@ 0x40
 8006a48:	2102      	movs	r1, #2
 8006a4a:	5499      	strb	r1, [r3, r2]
 8006a4c:	e003      	b.n	8006a56 <HAL_TIM_PWM_Start+0xa2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2241      	movs	r2, #65	@ 0x41
 8006a52:	2102      	movs	r1, #2
 8006a54:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 ffc8 	bl	80079f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a26      	ldr	r2, [pc, #152]	@ (8006b04 <HAL_TIM_PWM_Start+0x150>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00e      	beq.n	8006a8c <HAL_TIM_PWM_Start+0xd8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a25      	ldr	r2, [pc, #148]	@ (8006b08 <HAL_TIM_PWM_Start+0x154>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d009      	beq.n	8006a8c <HAL_TIM_PWM_Start+0xd8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a23      	ldr	r2, [pc, #140]	@ (8006b0c <HAL_TIM_PWM_Start+0x158>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <HAL_TIM_PWM_Start+0xd8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a22      	ldr	r2, [pc, #136]	@ (8006b10 <HAL_TIM_PWM_Start+0x15c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d101      	bne.n	8006a90 <HAL_TIM_PWM_Start+0xdc>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_TIM_PWM_Start+0xde>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2180      	movs	r1, #128	@ 0x80
 8006aa2:	0209      	lsls	r1, r1, #8
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <HAL_TIM_PWM_Start+0x150>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x112>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <HAL_TIM_PWM_Start+0x160>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x112>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a11      	ldr	r2, [pc, #68]	@ (8006b08 <HAL_TIM_PWM_Start+0x154>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d111      	bne.n	8006aea <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2207      	movs	r2, #7
 8006ace:	4013      	ands	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d010      	beq.n	8006afa <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	e007      	b.n	8006afa <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2101      	movs	r1, #1
 8006af6:	430a      	orrs	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	0018      	movs	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b004      	add	sp, #16
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800
 8006b14:	40000400 	.word	0x40000400

08006b18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f000 ff62 	bl	80079f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2f      	ldr	r2, [pc, #188]	@ (8006bf4 <HAL_TIM_PWM_Stop+0xdc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00e      	beq.n	8006b58 <HAL_TIM_PWM_Stop+0x40>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf8 <HAL_TIM_PWM_Stop+0xe0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d009      	beq.n	8006b58 <HAL_TIM_PWM_Stop+0x40>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	@ (8006bfc <HAL_TIM_PWM_Stop+0xe4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIM_PWM_Stop+0x40>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a2b      	ldr	r2, [pc, #172]	@ (8006c00 <HAL_TIM_PWM_Stop+0xe8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d101      	bne.n	8006b5c <HAL_TIM_PWM_Stop+0x44>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_TIM_PWM_Stop+0x46>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d013      	beq.n	8006b8a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	4a26      	ldr	r2, [pc, #152]	@ (8006c04 <HAL_TIM_PWM_Stop+0xec>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d10d      	bne.n	8006b8a <HAL_TIM_PWM_Stop+0x72>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	4a24      	ldr	r2, [pc, #144]	@ (8006c08 <HAL_TIM_PWM_Stop+0xf0>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	d107      	bne.n	8006b8a <HAL_TIM_PWM_Stop+0x72>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4921      	ldr	r1, [pc, #132]	@ (8006c0c <HAL_TIM_PWM_Stop+0xf4>)
 8006b86:	400a      	ands	r2, r1
 8006b88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	4a1c      	ldr	r2, [pc, #112]	@ (8006c04 <HAL_TIM_PWM_Stop+0xec>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	d10d      	bne.n	8006bb2 <HAL_TIM_PWM_Stop+0x9a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c08 <HAL_TIM_PWM_Stop+0xf0>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d107      	bne.n	8006bb2 <HAL_TIM_PWM_Stop+0x9a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2101      	movs	r1, #1
 8006bae:	438a      	bics	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Stop+0xaa>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	223e      	movs	r2, #62	@ 0x3e
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	5499      	strb	r1, [r3, r2]
 8006bc0:	e013      	b.n	8006bea <HAL_TIM_PWM_Stop+0xd2>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Stop+0xba>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	223f      	movs	r2, #63	@ 0x3f
 8006bcc:	2101      	movs	r1, #1
 8006bce:	5499      	strb	r1, [r3, r2]
 8006bd0:	e00b      	b.n	8006bea <HAL_TIM_PWM_Stop+0xd2>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_PWM_Stop+0xca>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2240      	movs	r2, #64	@ 0x40
 8006bdc:	2101      	movs	r1, #1
 8006bde:	5499      	strb	r1, [r3, r2]
 8006be0:	e003      	b.n	8006bea <HAL_TIM_PWM_Stop+0xd2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2241      	movs	r2, #65	@ 0x41
 8006be6:	2101      	movs	r1, #1
 8006be8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	0018      	movs	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400
 8006c00:	40014800 	.word	0x40014800
 8006c04:	00001111 	.word	0x00001111
 8006c08:	00000444 	.word	0x00000444
 8006c0c:	ffff7fff 	.word	0xffff7fff

08006c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d021      	beq.n	8006c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2202      	movs	r2, #2
 8006c34:	4013      	ands	r3, r2
 8006c36:	d01d      	beq.n	8006c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4252      	negs	r2, r2
 8006c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2203      	movs	r2, #3
 8006c50:	4013      	ands	r3, r2
 8006c52:	d004      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	0018      	movs	r0, r3
 8006c58:	f000 fb08 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006c5c:	e007      	b.n	8006c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fafb 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 fb07 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2204      	movs	r2, #4
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	4013      	ands	r3, r2
 8006c82:	d01e      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2205      	movs	r2, #5
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	23c0      	movs	r3, #192	@ 0xc0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d004      	beq.n	8006cac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f000 fae1 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006caa:	e007      	b.n	8006cbc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f000 fad4 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 fae0 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d021      	beq.n	8006d0e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d01d      	beq.n	8006d0e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2209      	movs	r2, #9
 8006cd8:	4252      	negs	r2, r2
 8006cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2203      	movs	r2, #3
 8006cea:	4013      	ands	r3, r2
 8006cec:	d004      	beq.n	8006cf8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f000 fabb 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006cf6:	e007      	b.n	8006d08 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f000 faae 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 faba 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2210      	movs	r2, #16
 8006d12:	4013      	ands	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2210      	movs	r2, #16
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	d01e      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2211      	movs	r2, #17
 8006d24:	4252      	negs	r2, r2
 8006d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	23c0      	movs	r3, #192	@ 0xc0
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f000 fa94 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006d44:	e007      	b.n	8006d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f000 fa87 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f000 fa93 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4013      	ands	r3, r2
 8006d62:	d00c      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d008      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2202      	movs	r2, #2
 8006d72:	4252      	negs	r2, r2
 8006d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fb ffa5 	bl	8002cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2280      	movs	r2, #128	@ 0x80
 8006d82:	4013      	ands	r3, r2
 8006d84:	d00c      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2280      	movs	r2, #128	@ 0x80
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d008      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2281      	movs	r2, #129	@ 0x81
 8006d94:	4252      	negs	r2, r2
 8006d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 ff0c 	bl	8007bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2240      	movs	r2, #64	@ 0x40
 8006da4:	4013      	ands	r3, r2
 8006da6:	d00c      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2240      	movs	r2, #64	@ 0x40
 8006dac:	4013      	ands	r3, r2
 8006dae:	d008      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2241      	movs	r2, #65	@ 0x41
 8006db6:	4252      	negs	r2, r2
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f000 fa65 	bl	800728c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d00c      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d008      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2221      	movs	r2, #33	@ 0x21
 8006dd8:	4252      	negs	r2, r2
 8006dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0018      	movs	r0, r3
 8006de0:	f000 fee2 	bl	8007ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006de4:	46c0      	nop			@ (mov r8, r8)
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b004      	add	sp, #16
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df8:	2317      	movs	r3, #23
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	223c      	movs	r2, #60	@ 0x3c
 8006e04:	5c9b      	ldrb	r3, [r3, r2]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_TIM_OC_ConfigChannel+0x22>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e042      	b.n	8006e94 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	223c      	movs	r2, #60	@ 0x3c
 8006e12:	2101      	movs	r1, #1
 8006e14:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	d027      	beq.n	8006e6c <HAL_TIM_OC_ConfigChannel+0x80>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d82c      	bhi.n	8006e7c <HAL_TIM_OC_ConfigChannel+0x90>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d019      	beq.n	8006e5c <HAL_TIM_OC_ConfigChannel+0x70>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d826      	bhi.n	8006e7c <HAL_TIM_OC_ConfigChannel+0x90>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_TIM_OC_ConfigChannel+0x50>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d008      	beq.n	8006e4c <HAL_TIM_OC_ConfigChannel+0x60>
 8006e3a:	e01f      	b.n	8006e7c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	0011      	movs	r1, r2
 8006e44:	0018      	movs	r0, r3
 8006e46:	f000 faad 	bl	80073a4 <TIM_OC1_SetConfig>
      break;
 8006e4a:	e01c      	b.n	8006e86 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f000 fb2d 	bl	80074b4 <TIM_OC2_SetConfig>
      break;
 8006e5a:	e014      	b.n	8006e86 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	0011      	movs	r1, r2
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 fba9 	bl	80075bc <TIM_OC3_SetConfig>
      break;
 8006e6a:	e00c      	b.n	8006e86 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	0011      	movs	r1, r2
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 fc27 	bl	80076c8 <TIM_OC4_SetConfig>
      break;
 8006e7a:	e004      	b.n	8006e86 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006e7c:	2317      	movs	r3, #23
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2201      	movs	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
      break;
 8006e84:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	223c      	movs	r2, #60	@ 0x3c
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	5499      	strb	r1, [r3, r2]

  return status;
 8006e8e:	2317      	movs	r3, #23
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	781b      	ldrb	r3, [r3, #0]
}
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b006      	add	sp, #24
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea8:	2317      	movs	r3, #23
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	223c      	movs	r2, #60	@ 0x3c
 8006eb4:	5c9b      	ldrb	r3, [r3, r2]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_ConfigChannel+0x22>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0ad      	b.n	800701a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	223c      	movs	r2, #60	@ 0x3c
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d100      	bne.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x32>
 8006ecc:	e076      	b.n	8006fbc <HAL_TIM_PWM_ConfigChannel+0x120>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d900      	bls.n	8006ed6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006ed4:	e095      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d04e      	beq.n	8006f7a <HAL_TIM_PWM_ConfigChannel+0xde>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d900      	bls.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006ee2:	e08e      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d021      	beq.n	8006f34 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006ef0:	e087      	b.n	8007002 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0011      	movs	r1, r2
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 fa52 	bl	80073a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2108      	movs	r1, #8
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2104      	movs	r1, #4
 8006f1c:	438a      	bics	r2, r1
 8006f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6999      	ldr	r1, [r3, #24]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	619a      	str	r2, [r3, #24]
      break;
 8006f32:	e06b      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	0011      	movs	r1, r2
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 fab9 	bl	80074b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2180      	movs	r1, #128	@ 0x80
 8006f4e:	0109      	lsls	r1, r1, #4
 8006f50:	430a      	orrs	r2, r1
 8006f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4931      	ldr	r1, [pc, #196]	@ (8007024 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006f60:	400a      	ands	r2, r1
 8006f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6999      	ldr	r1, [r3, #24]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	619a      	str	r2, [r3, #24]
      break;
 8006f78:	e048      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	0011      	movs	r1, r2
 8006f82:	0018      	movs	r0, r3
 8006f84:	f000 fb1a 	bl	80075bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69da      	ldr	r2, [r3, #28]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2108      	movs	r1, #8
 8006f94:	430a      	orrs	r2, r1
 8006f96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69da      	ldr	r2, [r3, #28]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2104      	movs	r1, #4
 8006fa4:	438a      	bics	r2, r1
 8006fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69d9      	ldr	r1, [r3, #28]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	691a      	ldr	r2, [r3, #16]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	61da      	str	r2, [r3, #28]
      break;
 8006fba:	e027      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	0011      	movs	r1, r2
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f000 fb7f 	bl	80076c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2180      	movs	r1, #128	@ 0x80
 8006fd6:	0109      	lsls	r1, r1, #4
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	490f      	ldr	r1, [pc, #60]	@ (8007024 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006fe8:	400a      	ands	r2, r1
 8006fea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69d9      	ldr	r1, [r3, #28]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	021a      	lsls	r2, r3, #8
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	61da      	str	r2, [r3, #28]
      break;
 8007000:	e004      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007002:	2317      	movs	r3, #23
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
      break;
 800700a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	223c      	movs	r2, #60	@ 0x3c
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]

  return status;
 8007014:	2317      	movs	r3, #23
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	781b      	ldrb	r3, [r3, #0]
}
 800701a:	0018      	movs	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	b006      	add	sp, #24
 8007020:	bd80      	pop	{r7, pc}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	fffffbff 	.word	0xfffffbff

08007028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007032:	230f      	movs	r3, #15
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	223c      	movs	r2, #60	@ 0x3c
 800703e:	5c9b      	ldrb	r3, [r3, r2]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_TIM_ConfigClockSource+0x20>
 8007044:	2302      	movs	r3, #2
 8007046:	e0bc      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x19a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	223c      	movs	r2, #60	@ 0x3c
 800704c:	2101      	movs	r1, #1
 800704e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	223d      	movs	r2, #61	@ 0x3d
 8007054:	2102      	movs	r1, #2
 8007056:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2277      	movs	r2, #119	@ 0x77
 8007064:	4393      	bics	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4a58      	ldr	r2, [pc, #352]	@ (80071cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800706c:	4013      	ands	r3, r2
 800706e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2280      	movs	r2, #128	@ 0x80
 800707e:	0192      	lsls	r2, r2, #6
 8007080:	4293      	cmp	r3, r2
 8007082:	d040      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0xde>
 8007084:	2280      	movs	r2, #128	@ 0x80
 8007086:	0192      	lsls	r2, r2, #6
 8007088:	4293      	cmp	r3, r2
 800708a:	d900      	bls.n	800708e <HAL_TIM_ConfigClockSource+0x66>
 800708c:	e088      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 800708e:	2280      	movs	r2, #128	@ 0x80
 8007090:	0152      	lsls	r2, r2, #5
 8007092:	4293      	cmp	r3, r2
 8007094:	d100      	bne.n	8007098 <HAL_TIM_ConfigClockSource+0x70>
 8007096:	e088      	b.n	80071aa <HAL_TIM_ConfigClockSource+0x182>
 8007098:	2280      	movs	r2, #128	@ 0x80
 800709a:	0152      	lsls	r2, r2, #5
 800709c:	4293      	cmp	r3, r2
 800709e:	d900      	bls.n	80070a2 <HAL_TIM_ConfigClockSource+0x7a>
 80070a0:	e07e      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070a2:	2b70      	cmp	r3, #112	@ 0x70
 80070a4:	d018      	beq.n	80070d8 <HAL_TIM_ConfigClockSource+0xb0>
 80070a6:	d900      	bls.n	80070aa <HAL_TIM_ConfigClockSource+0x82>
 80070a8:	e07a      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070aa:	2b60      	cmp	r3, #96	@ 0x60
 80070ac:	d04f      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x126>
 80070ae:	d900      	bls.n	80070b2 <HAL_TIM_ConfigClockSource+0x8a>
 80070b0:	e076      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070b2:	2b50      	cmp	r3, #80	@ 0x50
 80070b4:	d03b      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x106>
 80070b6:	d900      	bls.n	80070ba <HAL_TIM_ConfigClockSource+0x92>
 80070b8:	e072      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070ba:	2b40      	cmp	r3, #64	@ 0x40
 80070bc:	d057      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x146>
 80070be:	d900      	bls.n	80070c2 <HAL_TIM_ConfigClockSource+0x9a>
 80070c0:	e06e      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070c2:	2b30      	cmp	r3, #48	@ 0x30
 80070c4:	d063      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x166>
 80070c6:	d86b      	bhi.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d060      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x166>
 80070cc:	d868      	bhi.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d05d      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x166>
 80070d2:	2b10      	cmp	r3, #16
 80070d4:	d05b      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x166>
 80070d6:	e063      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070e8:	f000 fc64 	bl	80079b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2277      	movs	r2, #119	@ 0x77
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]
      break;
 8007104:	e052      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007116:	f000 fc4d 	bl	80079b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2180      	movs	r1, #128	@ 0x80
 8007126:	01c9      	lsls	r1, r1, #7
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
      break;
 800712c:	e03e      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800713a:	001a      	movs	r2, r3
 800713c:	f000 fbc0 	bl	80078c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2150      	movs	r1, #80	@ 0x50
 8007146:	0018      	movs	r0, r3
 8007148:	f000 fc1a 	bl	8007980 <TIM_ITRx_SetConfig>
      break;
 800714c:	e02e      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800715a:	001a      	movs	r2, r3
 800715c:	f000 fbde 	bl	800791c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2160      	movs	r1, #96	@ 0x60
 8007166:	0018      	movs	r0, r3
 8007168:	f000 fc0a 	bl	8007980 <TIM_ITRx_SetConfig>
      break;
 800716c:	e01e      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800717a:	001a      	movs	r2, r3
 800717c:	f000 fba0 	bl	80078c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2140      	movs	r1, #64	@ 0x40
 8007186:	0018      	movs	r0, r3
 8007188:	f000 fbfa 	bl	8007980 <TIM_ITRx_SetConfig>
      break;
 800718c:	e00e      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	0019      	movs	r1, r3
 8007198:	0010      	movs	r0, r2
 800719a:	f000 fbf1 	bl	8007980 <TIM_ITRx_SetConfig>
      break;
 800719e:	e005      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80071a0:	230f      	movs	r3, #15
 80071a2:	18fb      	adds	r3, r7, r3
 80071a4:	2201      	movs	r2, #1
 80071a6:	701a      	strb	r2, [r3, #0]
      break;
 80071a8:	e000      	b.n	80071ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80071aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	223d      	movs	r2, #61	@ 0x3d
 80071b0:	2101      	movs	r1, #1
 80071b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	223c      	movs	r2, #60	@ 0x3c
 80071b8:	2100      	movs	r1, #0
 80071ba:	5499      	strb	r1, [r3, r2]

  return status;
 80071bc:	230f      	movs	r3, #15
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b004      	add	sp, #16
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	ffff00ff 	.word	0xffff00ff

080071d0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	223c      	movs	r2, #60	@ 0x3c
 80071de:	5c9b      	ldrb	r3, [r3, r2]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e032      	b.n	800724e <HAL_TIM_SlaveConfigSynchro+0x7e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	223c      	movs	r2, #60	@ 0x3c
 80071ec:	2101      	movs	r1, #1
 80071ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	223d      	movs	r2, #61	@ 0x3d
 80071f4:	2102      	movs	r1, #2
 80071f6:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	0011      	movs	r1, r2
 80071fe:	0018      	movs	r0, r3
 8007200:	f000 facc 	bl	800779c <TIM_SlaveTimer_SetConfig>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d009      	beq.n	800721c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	223d      	movs	r2, #61	@ 0x3d
 800720c:	2101      	movs	r1, #1
 800720e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	223c      	movs	r2, #60	@ 0x3c
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e018      	b.n	800724e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2140      	movs	r1, #64	@ 0x40
 8007228:	438a      	bics	r2, r1
 800722a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4908      	ldr	r1, [pc, #32]	@ (8007258 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8007238:	400a      	ands	r2, r1
 800723a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	223d      	movs	r2, #61	@ 0x3d
 8007240:	2101      	movs	r1, #1
 8007242:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	223c      	movs	r2, #60	@ 0x3c
 8007248:	2100      	movs	r1, #0
 800724a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	ffffbfff 	.word	0xffffbfff

0800725c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007264:	46c0      	nop			@ (mov r8, r8)
 8007266:	46bd      	mov	sp, r7
 8007268:	b002      	add	sp, #8
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007274:	46c0      	nop			@ (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	b002      	add	sp, #8
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007284:	46c0      	nop			@ (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	b002      	add	sp, #8
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007294:	46c0      	nop			@ (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	b002      	add	sp, #8
 800729a:	bd80      	pop	{r7, pc}

0800729c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a36      	ldr	r2, [pc, #216]	@ (8007388 <TIM_Base_SetConfig+0xec>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d003      	beq.n	80072bc <TIM_Base_SetConfig+0x20>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a35      	ldr	r2, [pc, #212]	@ (800738c <TIM_Base_SetConfig+0xf0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d108      	bne.n	80072ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2270      	movs	r2, #112	@ 0x70
 80072c0:	4393      	bics	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <TIM_Base_SetConfig+0xec>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <TIM_Base_SetConfig+0xf0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00f      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007390 <TIM_Base_SetConfig+0xf4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00b      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007394 <TIM_Base_SetConfig+0xf8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d007      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a29      	ldr	r2, [pc, #164]	@ (8007398 <TIM_Base_SetConfig+0xfc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d003      	beq.n	80072fe <TIM_Base_SetConfig+0x62>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a28      	ldr	r2, [pc, #160]	@ (800739c <TIM_Base_SetConfig+0x100>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d108      	bne.n	8007310 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a27      	ldr	r2, [pc, #156]	@ (80073a0 <TIM_Base_SetConfig+0x104>)
 8007302:	4013      	ands	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2280      	movs	r2, #128	@ 0x80
 8007314:	4393      	bics	r3, r2
 8007316:	001a      	movs	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a13      	ldr	r2, [pc, #76]	@ (8007388 <TIM_Base_SetConfig+0xec>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00b      	beq.n	8007356 <TIM_Base_SetConfig+0xba>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a14      	ldr	r2, [pc, #80]	@ (8007394 <TIM_Base_SetConfig+0xf8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <TIM_Base_SetConfig+0xba>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a13      	ldr	r2, [pc, #76]	@ (8007398 <TIM_Base_SetConfig+0xfc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_Base_SetConfig+0xba>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a12      	ldr	r2, [pc, #72]	@ (800739c <TIM_Base_SetConfig+0x100>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d103      	bne.n	800735e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2201      	movs	r2, #1
 800736a:	4013      	ands	r3, r2
 800736c:	2b01      	cmp	r3, #1
 800736e:	d106      	bne.n	800737e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2201      	movs	r2, #1
 8007376:	4393      	bics	r3, r2
 8007378:	001a      	movs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	611a      	str	r2, [r3, #16]
  }
}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	b004      	add	sp, #16
 8007384:	bd80      	pop	{r7, pc}
 8007386:	46c0      	nop			@ (mov r8, r8)
 8007388:	40012c00 	.word	0x40012c00
 800738c:	40000400 	.word	0x40000400
 8007390:	40002000 	.word	0x40002000
 8007394:	40014000 	.word	0x40014000
 8007398:	40014400 	.word	0x40014400
 800739c:	40014800 	.word	0x40014800
 80073a0:	fffffcff 	.word	0xfffffcff

080073a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	2201      	movs	r2, #1
 80073ba:	4393      	bics	r3, r2
 80073bc:	001a      	movs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2270      	movs	r2, #112	@ 0x70
 80073d2:	4393      	bics	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2203      	movs	r2, #3
 80073da:	4393      	bics	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2202      	movs	r2, #2
 80073ec:	4393      	bics	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a27      	ldr	r2, [pc, #156]	@ (800749c <TIM_OC1_SetConfig+0xf8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00b      	beq.n	800741a <TIM_OC1_SetConfig+0x76>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a26      	ldr	r2, [pc, #152]	@ (80074a0 <TIM_OC1_SetConfig+0xfc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d007      	beq.n	800741a <TIM_OC1_SetConfig+0x76>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a25      	ldr	r2, [pc, #148]	@ (80074a4 <TIM_OC1_SetConfig+0x100>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_OC1_SetConfig+0x76>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a24      	ldr	r2, [pc, #144]	@ (80074a8 <TIM_OC1_SetConfig+0x104>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d10c      	bne.n	8007434 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2208      	movs	r2, #8
 800741e:	4393      	bics	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2204      	movs	r2, #4
 8007430:	4393      	bics	r3, r2
 8007432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a19      	ldr	r2, [pc, #100]	@ (800749c <TIM_OC1_SetConfig+0xf8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00b      	beq.n	8007454 <TIM_OC1_SetConfig+0xb0>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <TIM_OC1_SetConfig+0xfc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <TIM_OC1_SetConfig+0xb0>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a17      	ldr	r2, [pc, #92]	@ (80074a4 <TIM_OC1_SetConfig+0x100>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_OC1_SetConfig+0xb0>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <TIM_OC1_SetConfig+0x104>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d111      	bne.n	8007478 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4a15      	ldr	r2, [pc, #84]	@ (80074ac <TIM_OC1_SetConfig+0x108>)
 8007458:	4013      	ands	r3, r2
 800745a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	4a14      	ldr	r2, [pc, #80]	@ (80074b0 <TIM_OC1_SetConfig+0x10c>)
 8007460:	4013      	ands	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	46c0      	nop			@ (mov r8, r8)
 8007494:	46bd      	mov	sp, r7
 8007496:	b006      	add	sp, #24
 8007498:	bd80      	pop	{r7, pc}
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800
 80074ac:	fffffeff 	.word	0xfffffeff
 80074b0:	fffffdff 	.word	0xfffffdff

080074b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	2210      	movs	r2, #16
 80074ca:	4393      	bics	r3, r2
 80074cc:	001a      	movs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a2e      	ldr	r2, [pc, #184]	@ (800759c <TIM_OC2_SetConfig+0xe8>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a2d      	ldr	r2, [pc, #180]	@ (80075a0 <TIM_OC2_SetConfig+0xec>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2220      	movs	r2, #32
 80074fe:	4393      	bics	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a24      	ldr	r2, [pc, #144]	@ (80075a4 <TIM_OC2_SetConfig+0xf0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d10d      	bne.n	8007532 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2280      	movs	r2, #128	@ 0x80
 800751a:	4393      	bics	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2240      	movs	r2, #64	@ 0x40
 800752e:	4393      	bics	r3, r2
 8007530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1b      	ldr	r2, [pc, #108]	@ (80075a4 <TIM_OC2_SetConfig+0xf0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <TIM_OC2_SetConfig+0x9e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1a      	ldr	r2, [pc, #104]	@ (80075a8 <TIM_OC2_SetConfig+0xf4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <TIM_OC2_SetConfig+0x9e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <TIM_OC2_SetConfig+0xf8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC2_SetConfig+0x9e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <TIM_OC2_SetConfig+0xfc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4a17      	ldr	r2, [pc, #92]	@ (80075b4 <TIM_OC2_SetConfig+0x100>)
 8007556:	4013      	ands	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4a16      	ldr	r2, [pc, #88]	@ (80075b8 <TIM_OC2_SetConfig+0x104>)
 800755e:	4013      	ands	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	46c0      	nop			@ (mov r8, r8)
 8007596:	46bd      	mov	sp, r7
 8007598:	b006      	add	sp, #24
 800759a:	bd80      	pop	{r7, pc}
 800759c:	ffff8fff 	.word	0xffff8fff
 80075a0:	fffffcff 	.word	0xfffffcff
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800
 80075b4:	fffffbff 	.word	0xfffffbff
 80075b8:	fffff7ff 	.word	0xfffff7ff

080075bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	4a33      	ldr	r2, [pc, #204]	@ (80076a0 <TIM_OC3_SetConfig+0xe4>)
 80075d2:	401a      	ands	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2270      	movs	r2, #112	@ 0x70
 80075e8:	4393      	bics	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2203      	movs	r2, #3
 80075f0:	4393      	bics	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	4a28      	ldr	r2, [pc, #160]	@ (80076a4 <TIM_OC3_SetConfig+0xe8>)
 8007602:	4013      	ands	r3, r2
 8007604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <TIM_OC3_SetConfig+0xec>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10d      	bne.n	8007636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4a23      	ldr	r2, [pc, #140]	@ (80076ac <TIM_OC3_SetConfig+0xf0>)
 800761e:	4013      	ands	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <TIM_OC3_SetConfig+0xf4>)
 8007632:	4013      	ands	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <TIM_OC3_SetConfig+0xec>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00b      	beq.n	8007656 <TIM_OC3_SetConfig+0x9a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1c      	ldr	r2, [pc, #112]	@ (80076b4 <TIM_OC3_SetConfig+0xf8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d007      	beq.n	8007656 <TIM_OC3_SetConfig+0x9a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1b      	ldr	r2, [pc, #108]	@ (80076b8 <TIM_OC3_SetConfig+0xfc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d003      	beq.n	8007656 <TIM_OC3_SetConfig+0x9a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1a      	ldr	r2, [pc, #104]	@ (80076bc <TIM_OC3_SetConfig+0x100>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d113      	bne.n	800767e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4a19      	ldr	r2, [pc, #100]	@ (80076c0 <TIM_OC3_SetConfig+0x104>)
 800765a:	4013      	ands	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4a18      	ldr	r2, [pc, #96]	@ (80076c4 <TIM_OC3_SetConfig+0x108>)
 8007662:	4013      	ands	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	46c0      	nop			@ (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	b006      	add	sp, #24
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	fffffeff 	.word	0xfffffeff
 80076a4:	fffffdff 	.word	0xfffffdff
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	fffff7ff 	.word	0xfffff7ff
 80076b0:	fffffbff 	.word	0xfffffbff
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800
 80076c0:	ffffefff 	.word	0xffffefff
 80076c4:	ffffdfff 	.word	0xffffdfff

080076c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	4a26      	ldr	r2, [pc, #152]	@ (8007778 <TIM_OC4_SetConfig+0xb0>)
 80076de:	401a      	ands	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a22      	ldr	r2, [pc, #136]	@ (800777c <TIM_OC4_SetConfig+0xb4>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4a21      	ldr	r2, [pc, #132]	@ (8007780 <TIM_OC4_SetConfig+0xb8>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4a1d      	ldr	r2, [pc, #116]	@ (8007784 <TIM_OC4_SetConfig+0xbc>)
 8007710:	4013      	ands	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a19      	ldr	r2, [pc, #100]	@ (8007788 <TIM_OC4_SetConfig+0xc0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_OC4_SetConfig+0x78>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a18      	ldr	r2, [pc, #96]	@ (800778c <TIM_OC4_SetConfig+0xc4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC4_SetConfig+0x78>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <TIM_OC4_SetConfig+0xc8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC4_SetConfig+0x78>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	@ (8007794 <TIM_OC4_SetConfig+0xcc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d109      	bne.n	8007754 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <TIM_OC4_SetConfig+0xd0>)
 8007744:	4013      	ands	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	46c0      	nop			@ (mov r8, r8)
 8007770:	46bd      	mov	sp, r7
 8007772:	b006      	add	sp, #24
 8007774:	bd80      	pop	{r7, pc}
 8007776:	46c0      	nop			@ (mov r8, r8)
 8007778:	ffffefff 	.word	0xffffefff
 800777c:	ffff8fff 	.word	0xffff8fff
 8007780:	fffffcff 	.word	0xfffffcff
 8007784:	ffffdfff 	.word	0xffffdfff
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40014000 	.word	0x40014000
 8007790:	40014400 	.word	0x40014400
 8007794:	40014800 	.word	0x40014800
 8007798:	ffffbfff 	.word	0xffffbfff

0800779c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077a6:	2317      	movs	r3, #23
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2270      	movs	r2, #112	@ 0x70
 80077ba:	4393      	bics	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2207      	movs	r2, #7
 80077cc:	4393      	bics	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b70      	cmp	r3, #112	@ 0x70
 80077e8:	d015      	beq.n	8007816 <TIM_SlaveTimer_SetConfig+0x7a>
 80077ea:	d900      	bls.n	80077ee <TIM_SlaveTimer_SetConfig+0x52>
 80077ec:	e05b      	b.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
 80077ee:	2b60      	cmp	r3, #96	@ 0x60
 80077f0:	d04f      	beq.n	8007892 <TIM_SlaveTimer_SetConfig+0xf6>
 80077f2:	d858      	bhi.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
 80077f4:	2b50      	cmp	r3, #80	@ 0x50
 80077f6:	d042      	beq.n	800787e <TIM_SlaveTimer_SetConfig+0xe2>
 80077f8:	d855      	bhi.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
 80077fa:	2b40      	cmp	r3, #64	@ 0x40
 80077fc:	d016      	beq.n	800782c <TIM_SlaveTimer_SetConfig+0x90>
 80077fe:	d852      	bhi.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
 8007800:	2b30      	cmp	r3, #48	@ 0x30
 8007802:	d055      	beq.n	80078b0 <TIM_SlaveTimer_SetConfig+0x114>
 8007804:	d84f      	bhi.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
 8007806:	2b20      	cmp	r3, #32
 8007808:	d052      	beq.n	80078b0 <TIM_SlaveTimer_SetConfig+0x114>
 800780a:	d84c      	bhi.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d04f      	beq.n	80078b0 <TIM_SlaveTimer_SetConfig+0x114>
 8007810:	2b10      	cmp	r3, #16
 8007812:	d04d      	beq.n	80078b0 <TIM_SlaveTimer_SetConfig+0x114>
 8007814:	e047      	b.n	80078a6 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007826:	f000 f8c5 	bl	80079b4 <TIM_ETR_SetConfig>
      break;
 800782a:	e042      	b.n	80078b2 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b05      	cmp	r3, #5
 8007832:	d101      	bne.n	8007838 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e03f      	b.n	80078b8 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2101      	movs	r1, #1
 800784c:	438a      	bics	r2, r1
 800784e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	22f0      	movs	r2, #240	@ 0xf0
 800785c:	4393      	bics	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4313      	orrs	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	621a      	str	r2, [r3, #32]
      break;
 800787c:	e019      	b.n	80078b2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800788a:	001a      	movs	r2, r3
 800788c:	f000 f818 	bl	80078c0 <TIM_TI1_ConfigInputStage>
      break;
 8007890:	e00f      	b.n	80078b2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800789e:	001a      	movs	r2, r3
 80078a0:	f000 f83c 	bl	800791c <TIM_TI2_ConfigInputStage>
      break;
 80078a4:	e005      	b.n	80078b2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80078a6:	2317      	movs	r3, #23
 80078a8:	18fb      	adds	r3, r7, r3
 80078aa:	2201      	movs	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
      break;
 80078ae:	e000      	b.n	80078b2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80078b0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80078b2:	2317      	movs	r3, #23
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	781b      	ldrb	r3, [r3, #0]
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b006      	add	sp, #24
 80078be:	bd80      	pop	{r7, pc}

080078c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	2201      	movs	r2, #1
 80078d8:	4393      	bics	r3, r2
 80078da:	001a      	movs	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	22f0      	movs	r2, #240	@ 0xf0
 80078ea:	4393      	bics	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	220a      	movs	r2, #10
 80078fc:	4393      	bics	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	46c0      	nop			@ (mov r8, r8)
 8007916:	46bd      	mov	sp, r7
 8007918:	b006      	add	sp, #24
 800791a:	bd80      	pop	{r7, pc}

0800791c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	2210      	movs	r2, #16
 8007934:	4393      	bics	r3, r2
 8007936:	001a      	movs	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4a0d      	ldr	r2, [pc, #52]	@ (800797c <TIM_TI2_ConfigInputStage+0x60>)
 8007946:	4013      	ands	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	031b      	lsls	r3, r3, #12
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	22a0      	movs	r2, #160	@ 0xa0
 8007958:	4393      	bics	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	4313      	orrs	r3, r2
 8007964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	46c0      	nop			@ (mov r8, r8)
 8007974:	46bd      	mov	sp, r7
 8007976:	b006      	add	sp, #24
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	ffff0fff 	.word	0xffff0fff

08007980 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2270      	movs	r2, #112	@ 0x70
 8007994:	4393      	bics	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	2207      	movs	r2, #7
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	609a      	str	r2, [r3, #8]
}
 80079aa:	46c0      	nop			@ (mov r8, r8)
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b004      	add	sp, #16
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4a09      	ldr	r2, [pc, #36]	@ (80079f0 <TIM_ETR_SetConfig+0x3c>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	021a      	lsls	r2, r3, #8
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4313      	orrs	r3, r2
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	46c0      	nop			@ (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b006      	add	sp, #24
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	ffff00ff 	.word	0xffff00ff

080079f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	221f      	movs	r2, #31
 8007a04:	4013      	ands	r3, r2
 8007a06:	2201      	movs	r2, #1
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	43d2      	mvns	r2, r2
 8007a16:	401a      	ands	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1a      	ldr	r2, [r3, #32]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	211f      	movs	r1, #31
 8007a24:	400b      	ands	r3, r1
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4099      	lsls	r1, r3
 8007a2a:	000b      	movs	r3, r1
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b006      	add	sp, #24
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	223c      	movs	r2, #60	@ 0x3c
 8007a4a:	5c9b      	ldrb	r3, [r3, r2]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e041      	b.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	223c      	movs	r2, #60	@ 0x3c
 8007a58:	2101      	movs	r1, #1
 8007a5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	223d      	movs	r2, #61	@ 0x3d
 8007a60:	2102      	movs	r1, #2
 8007a62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2270      	movs	r2, #112	@ 0x70
 8007a78:	4393      	bics	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a13      	ldr	r2, [pc, #76]	@ (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a11      	ldr	r2, [pc, #68]	@ (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a10      	ldr	r2, [pc, #64]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2280      	movs	r2, #128	@ 0x80
 8007ab0:	4393      	bics	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	223d      	movs	r2, #61	@ 0x3d
 8007aca:	2101      	movs	r1, #1
 8007acc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	223c      	movs	r2, #60	@ 0x3c
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	0018      	movs	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b004      	add	sp, #16
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40012c00 	.word	0x40012c00
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40014000 	.word	0x40014000

08007aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	223c      	movs	r2, #60	@ 0x3c
 8007afe:	5c9b      	ldrb	r3, [r3, r2]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e03e      	b.n	8007b86 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	223c      	movs	r2, #60	@ 0x3c
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	22ff      	movs	r2, #255	@ 0xff
 8007b14:	4393      	bics	r3, r2
 8007b16:	001a      	movs	r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a1b      	ldr	r2, [pc, #108]	@ (8007b90 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007b24:	401a      	ands	r2, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4a18      	ldr	r2, [pc, #96]	@ (8007b94 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007b32:	401a      	ands	r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4a16      	ldr	r2, [pc, #88]	@ (8007b98 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007b40:	401a      	ands	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4a13      	ldr	r2, [pc, #76]	@ (8007b9c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007b4e:	401a      	ands	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a11      	ldr	r2, [pc, #68]	@ (8007ba0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007b5c:	401a      	ands	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4a0e      	ldr	r2, [pc, #56]	@ (8007ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	223c      	movs	r2, #60	@ 0x3c
 8007b80:	2100      	movs	r1, #0
 8007b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	0018      	movs	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b004      	add	sp, #16
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	46c0      	nop			@ (mov r8, r8)
 8007b90:	fffffcff 	.word	0xfffffcff
 8007b94:	fffffbff 	.word	0xfffffbff
 8007b98:	fffff7ff 	.word	0xfffff7ff
 8007b9c:	ffffefff 	.word	0xffffefff
 8007ba0:	ffffdfff 	.word	0xffffdfff
 8007ba4:	ffffbfff 	.word	0xffffbfff

08007ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bb0:	46c0      	nop			@ (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b002      	add	sp, #8
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bc0:	46c0      	nop			@ (mov r8, r8)
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	b002      	add	sp, #8
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e044      	b.n	8007c64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2278      	movs	r2, #120	@ 0x78
 8007be6:	2100      	movs	r1, #0
 8007be8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	0018      	movs	r0, r3
 8007bee:	f7fc fd31 	bl	8004654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2224      	movs	r2, #36	@ 0x24
 8007bf6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2101      	movs	r1, #1
 8007c04:	438a      	bics	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	0018      	movs	r0, r3
 8007c14:	f000 fe48 	bl	80088a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f000 fd04 	bl	8008628 <UART_SetConfig>
 8007c20:	0003      	movs	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e01c      	b.n	8007c64 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	490d      	ldr	r1, [pc, #52]	@ (8007c6c <HAL_UART_Init+0xa4>)
 8007c36:	400a      	ands	r2, r1
 8007c38:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2108      	movs	r1, #8
 8007c46:	438a      	bics	r2, r1
 8007c48:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2101      	movs	r1, #1
 8007c56:	430a      	orrs	r2, r1
 8007c58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 fed7 	bl	8008a10 <UART_CheckIdleState>
 8007c62:	0003      	movs	r3, r0
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b002      	add	sp, #8
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	fffff7ff 	.word	0xfffff7ff

08007c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	@ 0x28
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	1dbb      	adds	r3, r7, #6
 8007c7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d000      	beq.n	8007c8a <HAL_UART_Transmit+0x1a>
 8007c88:	e08c      	b.n	8007da4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_UART_Transmit+0x28>
 8007c90:	1dbb      	adds	r3, r7, #6
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e084      	b.n	8007da6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	015b      	lsls	r3, r3, #5
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d109      	bne.n	8007cbc <HAL_UART_Transmit+0x4c>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d105      	bne.n	8007cbc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d001      	beq.n	8007cbc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e074      	b.n	8007da6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2284      	movs	r2, #132	@ 0x84
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2221      	movs	r2, #33	@ 0x21
 8007cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cca:	f7fc fe13 	bl	80048f4 <HAL_GetTick>
 8007cce:	0003      	movs	r3, r0
 8007cd0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1dba      	adds	r2, r7, #6
 8007cd6:	2150      	movs	r1, #80	@ 0x50
 8007cd8:	8812      	ldrh	r2, [r2, #0]
 8007cda:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	1dba      	adds	r2, r7, #6
 8007ce0:	2152      	movs	r1, #82	@ 0x52
 8007ce2:	8812      	ldrh	r2, [r2, #0]
 8007ce4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	2380      	movs	r3, #128	@ 0x80
 8007cec:	015b      	lsls	r3, r3, #5
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d108      	bne.n	8007d04 <HAL_UART_Transmit+0x94>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	e003      	b.n	8007d0c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d0c:	e02f      	b.n	8007d6e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	0013      	movs	r3, r2
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2180      	movs	r1, #128	@ 0x80
 8007d1c:	f000 ff20 	bl	8008b60 <UART_WaitOnFlagUntilTimeout>
 8007d20:	1e03      	subs	r3, r0, #0
 8007d22:	d004      	beq.n	8007d2e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e03b      	b.n	8007da6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	881a      	ldrh	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	05d2      	lsls	r2, r2, #23
 8007d3e:	0dd2      	lsrs	r2, r2, #23
 8007d40:	b292      	uxth	r2, r2
 8007d42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	3302      	adds	r3, #2
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	e007      	b.n	8007d5c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2252      	movs	r2, #82	@ 0x52
 8007d60:	5a9b      	ldrh	r3, [r3, r2]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b299      	uxth	r1, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2252      	movs	r2, #82	@ 0x52
 8007d6c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2252      	movs	r2, #82	@ 0x52
 8007d72:	5a9b      	ldrh	r3, [r3, r2]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1c9      	bne.n	8007d0e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	0013      	movs	r3, r2
 8007d84:	2200      	movs	r2, #0
 8007d86:	2140      	movs	r1, #64	@ 0x40
 8007d88:	f000 feea 	bl	8008b60 <UART_WaitOnFlagUntilTimeout>
 8007d8c:	1e03      	subs	r3, r0, #0
 8007d8e:	d004      	beq.n	8007d9a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e005      	b.n	8007da6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	0018      	movs	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b008      	add	sp, #32
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	1dbb      	adds	r3, r7, #6
 8007dbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d15b      	bne.n	8007e7e <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_UART_Transmit_IT+0x24>
 8007dcc:	1dbb      	adds	r3, r7, #6
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e053      	b.n	8007e80 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	2380      	movs	r3, #128	@ 0x80
 8007dde:	015b      	lsls	r3, r3, #5
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d109      	bne.n	8007df8 <HAL_UART_Transmit_IT+0x48>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d105      	bne.n	8007df8 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2201      	movs	r2, #1
 8007df0:	4013      	ands	r3, r2
 8007df2:	d001      	beq.n	8007df8 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e043      	b.n	8007e80 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1dba      	adds	r2, r7, #6
 8007e02:	2150      	movs	r1, #80	@ 0x50
 8007e04:	8812      	ldrh	r2, [r2, #0]
 8007e06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	1dba      	adds	r2, r7, #6
 8007e0c:	2152      	movs	r1, #82	@ 0x52
 8007e0e:	8812      	ldrh	r2, [r2, #0]
 8007e10:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2284      	movs	r2, #132	@ 0x84
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2221      	movs	r2, #33	@ 0x21
 8007e24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	2380      	movs	r3, #128	@ 0x80
 8007e2c:	015b      	lsls	r3, r3, #5
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d107      	bne.n	8007e42 <HAL_UART_Transmit_IT+0x92>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a12      	ldr	r2, [pc, #72]	@ (8007e88 <HAL_UART_Transmit_IT+0xd8>)
 8007e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007e40:	e002      	b.n	8007e48 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a11      	ldr	r2, [pc, #68]	@ (8007e8c <HAL_UART_Transmit_IT+0xdc>)
 8007e46:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e48:	f3ef 8310 	mrs	r3, PRIMASK
 8007e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	2301      	movs	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f383 8810 	msr	PRIMASK, r3
}
 8007e5c:	46c0      	nop			@ (mov r8, r8)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2180      	movs	r1, #128	@ 0x80
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f383 8810 	msr	PRIMASK, r3
}
 8007e78:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8007e7e:	2302      	movs	r3, #2
  }
}
 8007e80:	0018      	movs	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b008      	add	sp, #32
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	080090d3 	.word	0x080090d3
 8007e8c:	08009021 	.word	0x08009021

08007e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	1dbb      	adds	r3, r7, #6
 8007e9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2280      	movs	r2, #128	@ 0x80
 8007ea2:	589b      	ldr	r3, [r3, r2]
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d145      	bne.n	8007f34 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_UART_Receive_IT+0x26>
 8007eae:	1dbb      	adds	r3, r7, #6
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e03d      	b.n	8007f36 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	2380      	movs	r3, #128	@ 0x80
 8007ec0:	015b      	lsls	r3, r3, #5
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d109      	bne.n	8007eda <HAL_UART_Receive_IT+0x4a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d001      	beq.n	8007eda <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e02d      	b.n	8007f36 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	2380      	movs	r3, #128	@ 0x80
 8007ee8:	041b      	lsls	r3, r3, #16
 8007eea:	4013      	ands	r3, r2
 8007eec:	d019      	beq.n	8007f22 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eee:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ef4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	2301      	movs	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f383 8810 	msr	PRIMASK, r3
}
 8007f02:	46c0      	nop			@ (mov r8, r8)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2180      	movs	r1, #128	@ 0x80
 8007f10:	04c9      	lsls	r1, r1, #19
 8007f12:	430a      	orrs	r2, r1
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	f383 8810 	msr	PRIMASK, r3
}
 8007f20:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f22:	1dbb      	adds	r3, r7, #6
 8007f24:	881a      	ldrh	r2, [r3, #0]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f000 fe88 	bl	8008c40 <UART_Start_Receive_IT>
 8007f30:	0003      	movs	r3, r0
 8007f32:	e000      	b.n	8007f36 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b008      	add	sp, #32
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	1dbb      	adds	r3, r7, #6
 8007f4c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d000      	beq.n	8007f58 <HAL_UART_Transmit_DMA+0x18>
 8007f56:	e077      	b.n	8008048 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_UART_Transmit_DMA+0x26>
 8007f5e:	1dbb      	adds	r3, r7, #6
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e06f      	b.n	800804a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	2380      	movs	r3, #128	@ 0x80
 8007f70:	015b      	lsls	r3, r3, #5
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d109      	bne.n	8007f8a <HAL_UART_Transmit_DMA+0x4a>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2201      	movs	r2, #1
 8007f82:	4013      	ands	r3, r2
 8007f84:	d001      	beq.n	8007f8a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e05f      	b.n	800804a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	1dba      	adds	r2, r7, #6
 8007f94:	2150      	movs	r1, #80	@ 0x50
 8007f96:	8812      	ldrh	r2, [r2, #0]
 8007f98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1dba      	adds	r2, r7, #6
 8007f9e:	2152      	movs	r1, #82	@ 0x52
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2284      	movs	r2, #132	@ 0x84
 8007fa8:	2100      	movs	r1, #0
 8007faa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2221      	movs	r2, #33	@ 0x21
 8007fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d027      	beq.n	800800a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbe:	4a25      	ldr	r2, [pc, #148]	@ (8008054 <HAL_UART_Transmit_DMA+0x114>)
 8007fc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc6:	4a24      	ldr	r2, [pc, #144]	@ (8008058 <HAL_UART_Transmit_DMA+0x118>)
 8007fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fce:	4a23      	ldr	r2, [pc, #140]	@ (800805c <HAL_UART_Transmit_DMA+0x11c>)
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3328      	adds	r3, #40	@ 0x28
 8007fea:	001a      	movs	r2, r3
 8007fec:	1dbb      	adds	r3, r7, #6
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	f7fd f980 	bl	80052f4 <HAL_DMA_Start_IT>
 8007ff4:	1e03      	subs	r3, r0, #0
 8007ff6:	d008      	beq.n	800800a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2284      	movs	r2, #132	@ 0x84
 8007ffc:	2110      	movs	r1, #16
 8007ffe:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e01f      	b.n	800804a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2240      	movs	r2, #64	@ 0x40
 8008010:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008012:	f3ef 8310 	mrs	r3, PRIMASK
 8008016:	613b      	str	r3, [r7, #16]
  return(result);
 8008018:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	2301      	movs	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f383 8810 	msr	PRIMASK, r3
}
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2180      	movs	r1, #128	@ 0x80
 8008034:	430a      	orrs	r2, r1
 8008036:	609a      	str	r2, [r3, #8]
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f383 8810 	msr	PRIMASK, r3
}
 8008042:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	0018      	movs	r0, r3
 800804c:	46bd      	mov	sp, r7
 800804e:	b008      	add	sp, #32
 8008050:	bd80      	pop	{r7, pc}
 8008052:	46c0      	nop			@ (mov r8, r8)
 8008054:	08008ebd 	.word	0x08008ebd
 8008058:	08008f51 	.word	0x08008f51
 800805c:	08008f6f 	.word	0x08008f6f

08008060 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b0ab      	sub	sp, #172	@ 0xac
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	22a4      	movs	r2, #164	@ 0xa4
 8008070:	18b9      	adds	r1, r7, r2
 8008072:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	20a0      	movs	r0, #160	@ 0xa0
 800807c:	1839      	adds	r1, r7, r0
 800807e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	219c      	movs	r1, #156	@ 0x9c
 8008088:	1879      	adds	r1, r7, r1
 800808a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800808c:	0011      	movs	r1, r2
 800808e:	18bb      	adds	r3, r7, r2
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a99      	ldr	r2, [pc, #612]	@ (80082f8 <HAL_UART_IRQHandler+0x298>)
 8008094:	4013      	ands	r3, r2
 8008096:	2298      	movs	r2, #152	@ 0x98
 8008098:	18bc      	adds	r4, r7, r2
 800809a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800809c:	18bb      	adds	r3, r7, r2
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d114      	bne.n	80080ce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80080a4:	187b      	adds	r3, r7, r1
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2220      	movs	r2, #32
 80080aa:	4013      	ands	r3, r2
 80080ac:	d00f      	beq.n	80080ce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080ae:	183b      	adds	r3, r7, r0
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2220      	movs	r2, #32
 80080b4:	4013      	ands	r3, r2
 80080b6:	d00a      	beq.n	80080ce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d100      	bne.n	80080c2 <HAL_UART_IRQHandler+0x62>
 80080c0:	e286      	b.n	80085d0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	0010      	movs	r0, r2
 80080ca:	4798      	blx	r3
      }
      return;
 80080cc:	e280      	b.n	80085d0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080ce:	2398      	movs	r3, #152	@ 0x98
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d100      	bne.n	80080da <HAL_UART_IRQHandler+0x7a>
 80080d8:	e114      	b.n	8008304 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80080da:	239c      	movs	r3, #156	@ 0x9c
 80080dc:	18fb      	adds	r3, r7, r3
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2201      	movs	r2, #1
 80080e2:	4013      	ands	r3, r2
 80080e4:	d106      	bne.n	80080f4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80080e6:	23a0      	movs	r3, #160	@ 0xa0
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a83      	ldr	r2, [pc, #524]	@ (80082fc <HAL_UART_IRQHandler+0x29c>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	d100      	bne.n	80080f4 <HAL_UART_IRQHandler+0x94>
 80080f2:	e107      	b.n	8008304 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080f4:	23a4      	movs	r3, #164	@ 0xa4
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2201      	movs	r2, #1
 80080fc:	4013      	ands	r3, r2
 80080fe:	d012      	beq.n	8008126 <HAL_UART_IRQHandler+0xc6>
 8008100:	23a0      	movs	r3, #160	@ 0xa0
 8008102:	18fb      	adds	r3, r7, r3
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	2380      	movs	r3, #128	@ 0x80
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4013      	ands	r3, r2
 800810c:	d00b      	beq.n	8008126 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2201      	movs	r2, #1
 8008114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2284      	movs	r2, #132	@ 0x84
 800811a:	589b      	ldr	r3, [r3, r2]
 800811c:	2201      	movs	r2, #1
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2184      	movs	r1, #132	@ 0x84
 8008124:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008126:	23a4      	movs	r3, #164	@ 0xa4
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2202      	movs	r2, #2
 800812e:	4013      	ands	r3, r2
 8008130:	d011      	beq.n	8008156 <HAL_UART_IRQHandler+0xf6>
 8008132:	239c      	movs	r3, #156	@ 0x9c
 8008134:	18fb      	adds	r3, r7, r3
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	4013      	ands	r3, r2
 800813c:	d00b      	beq.n	8008156 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2202      	movs	r2, #2
 8008144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2284      	movs	r2, #132	@ 0x84
 800814a:	589b      	ldr	r3, [r3, r2]
 800814c:	2204      	movs	r2, #4
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2184      	movs	r1, #132	@ 0x84
 8008154:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008156:	23a4      	movs	r3, #164	@ 0xa4
 8008158:	18fb      	adds	r3, r7, r3
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2204      	movs	r2, #4
 800815e:	4013      	ands	r3, r2
 8008160:	d011      	beq.n	8008186 <HAL_UART_IRQHandler+0x126>
 8008162:	239c      	movs	r3, #156	@ 0x9c
 8008164:	18fb      	adds	r3, r7, r3
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	4013      	ands	r3, r2
 800816c:	d00b      	beq.n	8008186 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2204      	movs	r2, #4
 8008174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2284      	movs	r2, #132	@ 0x84
 800817a:	589b      	ldr	r3, [r3, r2]
 800817c:	2202      	movs	r2, #2
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2184      	movs	r1, #132	@ 0x84
 8008184:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008186:	23a4      	movs	r3, #164	@ 0xa4
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2208      	movs	r2, #8
 800818e:	4013      	ands	r3, r2
 8008190:	d017      	beq.n	80081c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008192:	23a0      	movs	r3, #160	@ 0xa0
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2220      	movs	r2, #32
 800819a:	4013      	ands	r3, r2
 800819c:	d105      	bne.n	80081aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800819e:	239c      	movs	r3, #156	@ 0x9c
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081a8:	d00b      	beq.n	80081c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2208      	movs	r2, #8
 80081b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2284      	movs	r2, #132	@ 0x84
 80081b6:	589b      	ldr	r3, [r3, r2]
 80081b8:	2208      	movs	r2, #8
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2184      	movs	r1, #132	@ 0x84
 80081c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081c2:	23a4      	movs	r3, #164	@ 0xa4
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	2380      	movs	r3, #128	@ 0x80
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	4013      	ands	r3, r2
 80081ce:	d013      	beq.n	80081f8 <HAL_UART_IRQHandler+0x198>
 80081d0:	23a0      	movs	r3, #160	@ 0xa0
 80081d2:	18fb      	adds	r3, r7, r3
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	2380      	movs	r3, #128	@ 0x80
 80081d8:	04db      	lsls	r3, r3, #19
 80081da:	4013      	ands	r3, r2
 80081dc:	d00c      	beq.n	80081f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2280      	movs	r2, #128	@ 0x80
 80081e4:	0112      	lsls	r2, r2, #4
 80081e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2284      	movs	r2, #132	@ 0x84
 80081ec:	589b      	ldr	r3, [r3, r2]
 80081ee:	2220      	movs	r2, #32
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2184      	movs	r1, #132	@ 0x84
 80081f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2284      	movs	r2, #132	@ 0x84
 80081fc:	589b      	ldr	r3, [r3, r2]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d100      	bne.n	8008204 <HAL_UART_IRQHandler+0x1a4>
 8008202:	e1e7      	b.n	80085d4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008204:	23a4      	movs	r3, #164	@ 0xa4
 8008206:	18fb      	adds	r3, r7, r3
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2220      	movs	r2, #32
 800820c:	4013      	ands	r3, r2
 800820e:	d00e      	beq.n	800822e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008210:	23a0      	movs	r3, #160	@ 0xa0
 8008212:	18fb      	adds	r3, r7, r3
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2220      	movs	r2, #32
 8008218:	4013      	ands	r3, r2
 800821a:	d008      	beq.n	800822e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	0010      	movs	r0, r2
 800822c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2284      	movs	r2, #132	@ 0x84
 8008232:	589b      	ldr	r3, [r3, r2]
 8008234:	2194      	movs	r1, #148	@ 0x94
 8008236:	187a      	adds	r2, r7, r1
 8008238:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2240      	movs	r2, #64	@ 0x40
 8008242:	4013      	ands	r3, r2
 8008244:	2b40      	cmp	r3, #64	@ 0x40
 8008246:	d004      	beq.n	8008252 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008248:	187b      	adds	r3, r7, r1
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2228      	movs	r2, #40	@ 0x28
 800824e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008250:	d047      	beq.n	80082e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	0018      	movs	r0, r3
 8008256:	f000 fdcd 	bl	8008df4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2240      	movs	r2, #64	@ 0x40
 8008262:	4013      	ands	r3, r2
 8008264:	2b40      	cmp	r3, #64	@ 0x40
 8008266:	d137      	bne.n	80082d8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008268:	f3ef 8310 	mrs	r3, PRIMASK
 800826c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800826e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008270:	2090      	movs	r0, #144	@ 0x90
 8008272:	183a      	adds	r2, r7, r0
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	2301      	movs	r3, #1
 8008278:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800827c:	f383 8810 	msr	PRIMASK, r3
}
 8008280:	46c0      	nop			@ (mov r8, r8)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2140      	movs	r1, #64	@ 0x40
 800828e:	438a      	bics	r2, r1
 8008290:	609a      	str	r2, [r3, #8]
 8008292:	183b      	adds	r3, r7, r0
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800829a:	f383 8810 	msr	PRIMASK, r3
}
 800829e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d012      	beq.n	80082ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ac:	4a14      	ldr	r2, [pc, #80]	@ (8008300 <HAL_UART_IRQHandler+0x2a0>)
 80082ae:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b4:	0018      	movs	r0, r3
 80082b6:	f7fd f8bb 	bl	8005430 <HAL_DMA_Abort_IT>
 80082ba:	1e03      	subs	r3, r0, #0
 80082bc:	d01a      	beq.n	80082f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082c8:	0018      	movs	r0, r3
 80082ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082cc:	e012      	b.n	80082f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 f995 	bl	8008600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	e00d      	b.n	80082f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	0018      	movs	r0, r3
 80082dc:	f000 f990 	bl	8008600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e0:	e008      	b.n	80082f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 f98b 	bl	8008600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2284      	movs	r2, #132	@ 0x84
 80082ee:	2100      	movs	r1, #0
 80082f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80082f2:	e16f      	b.n	80085d4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	46c0      	nop			@ (mov r8, r8)
    return;
 80082f6:	e16d      	b.n	80085d4 <HAL_UART_IRQHandler+0x574>
 80082f8:	0000080f 	.word	0x0000080f
 80082fc:	04000120 	.word	0x04000120
 8008300:	08008ff3 	.word	0x08008ff3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008308:	2b01      	cmp	r3, #1
 800830a:	d000      	beq.n	800830e <HAL_UART_IRQHandler+0x2ae>
 800830c:	e139      	b.n	8008582 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800830e:	23a4      	movs	r3, #164	@ 0xa4
 8008310:	18fb      	adds	r3, r7, r3
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2210      	movs	r2, #16
 8008316:	4013      	ands	r3, r2
 8008318:	d100      	bne.n	800831c <HAL_UART_IRQHandler+0x2bc>
 800831a:	e132      	b.n	8008582 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800831c:	23a0      	movs	r3, #160	@ 0xa0
 800831e:	18fb      	adds	r3, r7, r3
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2210      	movs	r2, #16
 8008324:	4013      	ands	r3, r2
 8008326:	d100      	bne.n	800832a <HAL_UART_IRQHandler+0x2ca>
 8008328:	e12b      	b.n	8008582 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2210      	movs	r2, #16
 8008330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2240      	movs	r2, #64	@ 0x40
 800833a:	4013      	ands	r3, r2
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	d000      	beq.n	8008342 <HAL_UART_IRQHandler+0x2e2>
 8008340:	e09f      	b.n	8008482 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	217e      	movs	r1, #126	@ 0x7e
 800834c:	187b      	adds	r3, r7, r1
 800834e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008350:	187b      	adds	r3, r7, r1
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d100      	bne.n	800835a <HAL_UART_IRQHandler+0x2fa>
 8008358:	e13e      	b.n	80085d8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2258      	movs	r2, #88	@ 0x58
 800835e:	5a9b      	ldrh	r3, [r3, r2]
 8008360:	187a      	adds	r2, r7, r1
 8008362:	8812      	ldrh	r2, [r2, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d300      	bcc.n	800836a <HAL_UART_IRQHandler+0x30a>
 8008368:	e136      	b.n	80085d8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	187a      	adds	r2, r7, r1
 800836e:	215a      	movs	r1, #90	@ 0x5a
 8008370:	8812      	ldrh	r2, [r2, #0]
 8008372:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	2b20      	cmp	r3, #32
 800837c:	d06f      	beq.n	800845e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837e:	f3ef 8310 	mrs	r3, PRIMASK
 8008382:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008386:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008388:	2301      	movs	r3, #1
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	f383 8810 	msr	PRIMASK, r3
}
 8008392:	46c0      	nop			@ (mov r8, r8)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4992      	ldr	r1, [pc, #584]	@ (80085e8 <HAL_UART_IRQHandler+0x588>)
 80083a0:	400a      	ands	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083aa:	f383 8810 	msr	PRIMASK, r3
}
 80083ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b0:	f3ef 8310 	mrs	r3, PRIMASK
 80083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80083b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80083ba:	2301      	movs	r3, #1
 80083bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c0:	f383 8810 	msr	PRIMASK, r3
}
 80083c4:	46c0      	nop			@ (mov r8, r8)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2101      	movs	r1, #1
 80083d2:	438a      	bics	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]
 80083d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083dc:	f383 8810 	msr	PRIMASK, r3
}
 80083e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e2:	f3ef 8310 	mrs	r3, PRIMASK
 80083e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80083e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80083ec:	2301      	movs	r3, #1
 80083ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2140      	movs	r1, #64	@ 0x40
 8008404:	438a      	bics	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800840a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800840e:	f383 8810 	msr	PRIMASK, r3
}
 8008412:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2280      	movs	r2, #128	@ 0x80
 8008418:	2120      	movs	r1, #32
 800841a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008422:	f3ef 8310 	mrs	r3, PRIMASK
 8008426:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800842c:	2301      	movs	r3, #1
 800842e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008432:	f383 8810 	msr	PRIMASK, r3
}
 8008436:	46c0      	nop			@ (mov r8, r8)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2110      	movs	r1, #16
 8008444:	438a      	bics	r2, r1
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800844a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800844c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800844e:	f383 8810 	msr	PRIMASK, r3
}
 8008452:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008458:	0018      	movs	r0, r3
 800845a:	f7fc ffb1 	bl	80053c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2202      	movs	r2, #2
 8008462:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2258      	movs	r2, #88	@ 0x58
 8008468:	5a9a      	ldrh	r2, [r3, r2]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	215a      	movs	r1, #90	@ 0x5a
 800846e:	5a5b      	ldrh	r3, [r3, r1]
 8008470:	b29b      	uxth	r3, r3
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0011      	movs	r1, r2
 800847a:	0018      	movs	r0, r3
 800847c:	f000 f8c8 	bl	8008610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008480:	e0aa      	b.n	80085d8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2258      	movs	r2, #88	@ 0x58
 8008486:	5a99      	ldrh	r1, [r3, r2]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	225a      	movs	r2, #90	@ 0x5a
 800848c:	5a9b      	ldrh	r3, [r3, r2]
 800848e:	b29a      	uxth	r2, r3
 8008490:	208e      	movs	r0, #142	@ 0x8e
 8008492:	183b      	adds	r3, r7, r0
 8008494:	1a8a      	subs	r2, r1, r2
 8008496:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	225a      	movs	r2, #90	@ 0x5a
 800849c:	5a9b      	ldrh	r3, [r3, r2]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d100      	bne.n	80084a6 <HAL_UART_IRQHandler+0x446>
 80084a4:	e09a      	b.n	80085dc <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80084a6:	183b      	adds	r3, r7, r0
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d100      	bne.n	80084b0 <HAL_UART_IRQHandler+0x450>
 80084ae:	e095      	b.n	80085dc <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b0:	f3ef 8310 	mrs	r3, PRIMASK
 80084b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80084b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084b8:	2488      	movs	r4, #136	@ 0x88
 80084ba:	193a      	adds	r2, r7, r4
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	2301      	movs	r3, #1
 80084c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f383 8810 	msr	PRIMASK, r3
}
 80084c8:	46c0      	nop			@ (mov r8, r8)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4945      	ldr	r1, [pc, #276]	@ (80085ec <HAL_UART_IRQHandler+0x58c>)
 80084d6:	400a      	ands	r2, r1
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	193b      	adds	r3, r7, r4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f383 8810 	msr	PRIMASK, r3
}
 80084e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084e8:	f3ef 8310 	mrs	r3, PRIMASK
 80084ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80084ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f0:	2484      	movs	r4, #132	@ 0x84
 80084f2:	193a      	adds	r2, r7, r4
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	2301      	movs	r3, #1
 80084f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f383 8810 	msr	PRIMASK, r3
}
 8008500:	46c0      	nop			@ (mov r8, r8)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2101      	movs	r1, #1
 800850e:	438a      	bics	r2, r1
 8008510:	609a      	str	r2, [r3, #8]
 8008512:	193b      	adds	r3, r7, r4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f383 8810 	msr	PRIMASK, r3
}
 800851e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2280      	movs	r2, #128	@ 0x80
 8008524:	2120      	movs	r1, #32
 8008526:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008534:	f3ef 8310 	mrs	r3, PRIMASK
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800853c:	2480      	movs	r4, #128	@ 0x80
 800853e:	193a      	adds	r2, r7, r4
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	2301      	movs	r3, #1
 8008544:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008548:	f383 8810 	msr	PRIMASK, r3
}
 800854c:	46c0      	nop			@ (mov r8, r8)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2110      	movs	r1, #16
 800855a:	438a      	bics	r2, r1
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	193b      	adds	r3, r7, r4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008566:	f383 8810 	msr	PRIMASK, r3
}
 800856a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008572:	183b      	adds	r3, r7, r0
 8008574:	881a      	ldrh	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	0011      	movs	r1, r2
 800857a:	0018      	movs	r0, r3
 800857c:	f000 f848 	bl	8008610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008580:	e02c      	b.n	80085dc <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008582:	23a4      	movs	r3, #164	@ 0xa4
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2280      	movs	r2, #128	@ 0x80
 800858a:	4013      	ands	r3, r2
 800858c:	d00f      	beq.n	80085ae <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800858e:	23a0      	movs	r3, #160	@ 0xa0
 8008590:	18fb      	adds	r3, r7, r3
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2280      	movs	r2, #128	@ 0x80
 8008596:	4013      	ands	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01e      	beq.n	80085e0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	0010      	movs	r0, r2
 80085aa:	4798      	blx	r3
    }
    return;
 80085ac:	e018      	b.n	80085e0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ae:	23a4      	movs	r3, #164	@ 0xa4
 80085b0:	18fb      	adds	r3, r7, r3
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2240      	movs	r2, #64	@ 0x40
 80085b6:	4013      	ands	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_UART_IRQHandler+0x582>
 80085ba:	23a0      	movs	r3, #160	@ 0xa0
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2240      	movs	r2, #64	@ 0x40
 80085c2:	4013      	ands	r3, r2
 80085c4:	d00d      	beq.n	80085e2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 fde0 	bl	800918e <UART_EndTransmit_IT>
    return;
 80085ce:	e008      	b.n	80085e2 <HAL_UART_IRQHandler+0x582>
      return;
 80085d0:	46c0      	nop			@ (mov r8, r8)
 80085d2:	e006      	b.n	80085e2 <HAL_UART_IRQHandler+0x582>
    return;
 80085d4:	46c0      	nop			@ (mov r8, r8)
 80085d6:	e004      	b.n	80085e2 <HAL_UART_IRQHandler+0x582>
      return;
 80085d8:	46c0      	nop			@ (mov r8, r8)
 80085da:	e002      	b.n	80085e2 <HAL_UART_IRQHandler+0x582>
      return;
 80085dc:	46c0      	nop			@ (mov r8, r8)
 80085de:	e000      	b.n	80085e2 <HAL_UART_IRQHandler+0x582>
    return;
 80085e0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b02b      	add	sp, #172	@ 0xac
 80085e6:	bd90      	pop	{r4, r7, pc}
 80085e8:	fffffeff 	.word	0xfffffeff
 80085ec:	fffffedf 	.word	0xfffffedf

080085f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80085f8:	46c0      	nop			@ (mov r8, r8)
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b002      	add	sp, #8
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008608:	46c0      	nop			@ (mov r8, r8)
 800860a:	46bd      	mov	sp, r7
 800860c:	b002      	add	sp, #8
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	000a      	movs	r2, r1
 800861a:	1cbb      	adds	r3, r7, #2
 800861c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	46bd      	mov	sp, r7
 8008622:	b002      	add	sp, #8
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008630:	231e      	movs	r3, #30
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	431a      	orrs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a8d      	ldr	r2, [pc, #564]	@ (800888c <UART_SetConfig+0x264>)
 8008658:	4013      	ands	r3, r2
 800865a:	0019      	movs	r1, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	430a      	orrs	r2, r1
 8008664:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4a88      	ldr	r2, [pc, #544]	@ (8008890 <UART_SetConfig+0x268>)
 800866e:	4013      	ands	r3, r2
 8008670:	0019      	movs	r1, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	4a7f      	ldr	r2, [pc, #508]	@ (8008894 <UART_SetConfig+0x26c>)
 8008696:	4013      	ands	r3, r2
 8008698:	0019      	movs	r1, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a7b      	ldr	r2, [pc, #492]	@ (8008898 <UART_SetConfig+0x270>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d127      	bne.n	80086fe <UART_SetConfig+0xd6>
 80086ae:	4b7b      	ldr	r3, [pc, #492]	@ (800889c <UART_SetConfig+0x274>)
 80086b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b2:	2203      	movs	r2, #3
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d00d      	beq.n	80086d6 <UART_SetConfig+0xae>
 80086ba:	d81b      	bhi.n	80086f4 <UART_SetConfig+0xcc>
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d014      	beq.n	80086ea <UART_SetConfig+0xc2>
 80086c0:	d818      	bhi.n	80086f4 <UART_SetConfig+0xcc>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <UART_SetConfig+0xa4>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d00a      	beq.n	80086e0 <UART_SetConfig+0xb8>
 80086ca:	e013      	b.n	80086f4 <UART_SetConfig+0xcc>
 80086cc:	231f      	movs	r3, #31
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e021      	b.n	800871a <UART_SetConfig+0xf2>
 80086d6:	231f      	movs	r3, #31
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	2202      	movs	r2, #2
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e01c      	b.n	800871a <UART_SetConfig+0xf2>
 80086e0:	231f      	movs	r3, #31
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	2204      	movs	r2, #4
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e017      	b.n	800871a <UART_SetConfig+0xf2>
 80086ea:	231f      	movs	r3, #31
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	2208      	movs	r2, #8
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e012      	b.n	800871a <UART_SetConfig+0xf2>
 80086f4:	231f      	movs	r3, #31
 80086f6:	18fb      	adds	r3, r7, r3
 80086f8:	2210      	movs	r2, #16
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e00d      	b.n	800871a <UART_SetConfig+0xf2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a67      	ldr	r2, [pc, #412]	@ (80088a0 <UART_SetConfig+0x278>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d104      	bne.n	8008712 <UART_SetConfig+0xea>
 8008708:	231f      	movs	r3, #31
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	2200      	movs	r2, #0
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	e003      	b.n	800871a <UART_SetConfig+0xf2>
 8008712:	231f      	movs	r3, #31
 8008714:	18fb      	adds	r3, r7, r3
 8008716:	2210      	movs	r2, #16
 8008718:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69da      	ldr	r2, [r3, #28]
 800871e:	2380      	movs	r3, #128	@ 0x80
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	429a      	cmp	r2, r3
 8008724:	d15c      	bne.n	80087e0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8008726:	231f      	movs	r3, #31
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b08      	cmp	r3, #8
 800872e:	d015      	beq.n	800875c <UART_SetConfig+0x134>
 8008730:	dc18      	bgt.n	8008764 <UART_SetConfig+0x13c>
 8008732:	2b04      	cmp	r3, #4
 8008734:	d00d      	beq.n	8008752 <UART_SetConfig+0x12a>
 8008736:	dc15      	bgt.n	8008764 <UART_SetConfig+0x13c>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <UART_SetConfig+0x11a>
 800873c:	2b02      	cmp	r3, #2
 800873e:	d005      	beq.n	800874c <UART_SetConfig+0x124>
 8008740:	e010      	b.n	8008764 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008742:	f7fd fdbd 	bl	80062c0 <HAL_RCC_GetPCLK1Freq>
 8008746:	0003      	movs	r3, r0
 8008748:	61bb      	str	r3, [r7, #24]
        break;
 800874a:	e012      	b.n	8008772 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800874c:	4b55      	ldr	r3, [pc, #340]	@ (80088a4 <UART_SetConfig+0x27c>)
 800874e:	61bb      	str	r3, [r7, #24]
        break;
 8008750:	e00f      	b.n	8008772 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008752:	f7fd fd55 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8008756:	0003      	movs	r3, r0
 8008758:	61bb      	str	r3, [r7, #24]
        break;
 800875a:	e00a      	b.n	8008772 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875c:	2380      	movs	r3, #128	@ 0x80
 800875e:	021b      	lsls	r3, r3, #8
 8008760:	61bb      	str	r3, [r7, #24]
        break;
 8008762:	e006      	b.n	8008772 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008768:	231e      	movs	r3, #30
 800876a:	18fb      	adds	r3, r7, r3
 800876c:	2201      	movs	r2, #1
 800876e:	701a      	strb	r2, [r3, #0]
        break;
 8008770:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d100      	bne.n	800877a <UART_SetConfig+0x152>
 8008778:	e07a      	b.n	8008870 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	005a      	lsls	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	18d2      	adds	r2, r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	0019      	movs	r1, r3
 800878c:	0010      	movs	r0, r2
 800878e:	f7f7 fce1 	bl	8000154 <__udivsi3>
 8008792:	0003      	movs	r3, r0
 8008794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b0f      	cmp	r3, #15
 800879a:	d91c      	bls.n	80087d6 <UART_SetConfig+0x1ae>
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	2380      	movs	r3, #128	@ 0x80
 80087a0:	025b      	lsls	r3, r3, #9
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d217      	bcs.n	80087d6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	200e      	movs	r0, #14
 80087ac:	183b      	adds	r3, r7, r0
 80087ae:	210f      	movs	r1, #15
 80087b0:	438a      	bics	r2, r1
 80087b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	2207      	movs	r2, #7
 80087bc:	4013      	ands	r3, r2
 80087be:	b299      	uxth	r1, r3
 80087c0:	183b      	adds	r3, r7, r0
 80087c2:	183a      	adds	r2, r7, r0
 80087c4:	8812      	ldrh	r2, [r2, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	183a      	adds	r2, r7, r0
 80087d0:	8812      	ldrh	r2, [r2, #0]
 80087d2:	60da      	str	r2, [r3, #12]
 80087d4:	e04c      	b.n	8008870 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80087d6:	231e      	movs	r3, #30
 80087d8:	18fb      	adds	r3, r7, r3
 80087da:	2201      	movs	r2, #1
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	e047      	b.n	8008870 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087e0:	231f      	movs	r3, #31
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d015      	beq.n	8008816 <UART_SetConfig+0x1ee>
 80087ea:	dc18      	bgt.n	800881e <UART_SetConfig+0x1f6>
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d00d      	beq.n	800880c <UART_SetConfig+0x1e4>
 80087f0:	dc15      	bgt.n	800881e <UART_SetConfig+0x1f6>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <UART_SetConfig+0x1d4>
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d005      	beq.n	8008806 <UART_SetConfig+0x1de>
 80087fa:	e010      	b.n	800881e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087fc:	f7fd fd60 	bl	80062c0 <HAL_RCC_GetPCLK1Freq>
 8008800:	0003      	movs	r3, r0
 8008802:	61bb      	str	r3, [r7, #24]
        break;
 8008804:	e012      	b.n	800882c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008806:	4b27      	ldr	r3, [pc, #156]	@ (80088a4 <UART_SetConfig+0x27c>)
 8008808:	61bb      	str	r3, [r7, #24]
        break;
 800880a:	e00f      	b.n	800882c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880c:	f7fd fcf8 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8008810:	0003      	movs	r3, r0
 8008812:	61bb      	str	r3, [r7, #24]
        break;
 8008814:	e00a      	b.n	800882c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008816:	2380      	movs	r3, #128	@ 0x80
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	61bb      	str	r3, [r7, #24]
        break;
 800881c:	e006      	b.n	800882c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008822:	231e      	movs	r3, #30
 8008824:	18fb      	adds	r3, r7, r3
 8008826:	2201      	movs	r2, #1
 8008828:	701a      	strb	r2, [r3, #0]
        break;
 800882a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01e      	beq.n	8008870 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	085a      	lsrs	r2, r3, #1
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	18d2      	adds	r2, r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	0019      	movs	r1, r3
 8008842:	0010      	movs	r0, r2
 8008844:	f7f7 fc86 	bl	8000154 <__udivsi3>
 8008848:	0003      	movs	r3, r0
 800884a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2b0f      	cmp	r3, #15
 8008850:	d90a      	bls.n	8008868 <UART_SetConfig+0x240>
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	2380      	movs	r3, #128	@ 0x80
 8008856:	025b      	lsls	r3, r3, #9
 8008858:	429a      	cmp	r2, r3
 800885a:	d205      	bcs.n	8008868 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	b29a      	uxth	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60da      	str	r2, [r3, #12]
 8008866:	e003      	b.n	8008870 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008868:	231e      	movs	r3, #30
 800886a:	18fb      	adds	r3, r7, r3
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800887c:	231e      	movs	r3, #30
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	781b      	ldrb	r3, [r3, #0]
}
 8008882:	0018      	movs	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	b008      	add	sp, #32
 8008888:	bd80      	pop	{r7, pc}
 800888a:	46c0      	nop			@ (mov r8, r8)
 800888c:	ffff69f3 	.word	0xffff69f3
 8008890:	ffffcfff 	.word	0xffffcfff
 8008894:	fffff4ff 	.word	0xfffff4ff
 8008898:	40013800 	.word	0x40013800
 800889c:	40021000 	.word	0x40021000
 80088a0:	40004400 	.word	0x40004400
 80088a4:	007a1200 	.word	0x007a1200

080088a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	2208      	movs	r2, #8
 80088b6:	4013      	ands	r3, r2
 80088b8:	d00b      	beq.n	80088d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4a4a      	ldr	r2, [pc, #296]	@ (80089ec <UART_AdvFeatureConfig+0x144>)
 80088c2:	4013      	ands	r3, r2
 80088c4:	0019      	movs	r1, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	2201      	movs	r2, #1
 80088d8:	4013      	ands	r3, r2
 80088da:	d00b      	beq.n	80088f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4a43      	ldr	r2, [pc, #268]	@ (80089f0 <UART_AdvFeatureConfig+0x148>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	0019      	movs	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	2202      	movs	r2, #2
 80088fa:	4013      	ands	r3, r2
 80088fc:	d00b      	beq.n	8008916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	4a3b      	ldr	r2, [pc, #236]	@ (80089f4 <UART_AdvFeatureConfig+0x14c>)
 8008906:	4013      	ands	r3, r2
 8008908:	0019      	movs	r1, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	2204      	movs	r2, #4
 800891c:	4013      	ands	r3, r2
 800891e:	d00b      	beq.n	8008938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4a34      	ldr	r2, [pc, #208]	@ (80089f8 <UART_AdvFeatureConfig+0x150>)
 8008928:	4013      	ands	r3, r2
 800892a:	0019      	movs	r1, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893c:	2210      	movs	r2, #16
 800893e:	4013      	ands	r3, r2
 8008940:	d00b      	beq.n	800895a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	4a2c      	ldr	r2, [pc, #176]	@ (80089fc <UART_AdvFeatureConfig+0x154>)
 800894a:	4013      	ands	r3, r2
 800894c:	0019      	movs	r1, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895e:	2220      	movs	r2, #32
 8008960:	4013      	ands	r3, r2
 8008962:	d00b      	beq.n	800897c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	4a25      	ldr	r2, [pc, #148]	@ (8008a00 <UART_AdvFeatureConfig+0x158>)
 800896c:	4013      	ands	r3, r2
 800896e:	0019      	movs	r1, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	2240      	movs	r2, #64	@ 0x40
 8008982:	4013      	ands	r3, r2
 8008984:	d01d      	beq.n	80089c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a04 <UART_AdvFeatureConfig+0x15c>)
 800898e:	4013      	ands	r3, r2
 8008990:	0019      	movs	r1, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089a2:	2380      	movs	r3, #128	@ 0x80
 80089a4:	035b      	lsls	r3, r3, #13
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d10b      	bne.n	80089c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	4a15      	ldr	r2, [pc, #84]	@ (8008a08 <UART_AdvFeatureConfig+0x160>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	0019      	movs	r1, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c6:	2280      	movs	r2, #128	@ 0x80
 80089c8:	4013      	ands	r3, r2
 80089ca:	d00b      	beq.n	80089e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4a0e      	ldr	r2, [pc, #56]	@ (8008a0c <UART_AdvFeatureConfig+0x164>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	0019      	movs	r1, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	605a      	str	r2, [r3, #4]
  }
}
 80089e4:	46c0      	nop			@ (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b002      	add	sp, #8
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	ffff7fff 	.word	0xffff7fff
 80089f0:	fffdffff 	.word	0xfffdffff
 80089f4:	fffeffff 	.word	0xfffeffff
 80089f8:	fffbffff 	.word	0xfffbffff
 80089fc:	ffffefff 	.word	0xffffefff
 8008a00:	ffffdfff 	.word	0xffffdfff
 8008a04:	ffefffff 	.word	0xffefffff
 8008a08:	ff9fffff 	.word	0xff9fffff
 8008a0c:	fff7ffff 	.word	0xfff7ffff

08008a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b092      	sub	sp, #72	@ 0x48
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2284      	movs	r2, #132	@ 0x84
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a20:	f7fb ff68 	bl	80048f4 <HAL_GetTick>
 8008a24:	0003      	movs	r3, r0
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2208      	movs	r2, #8
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d12c      	bne.n	8008a90 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a38:	2280      	movs	r2, #128	@ 0x80
 8008a3a:	0391      	lsls	r1, r2, #14
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4a46      	ldr	r2, [pc, #280]	@ (8008b58 <UART_CheckIdleState+0x148>)
 8008a40:	9200      	str	r2, [sp, #0]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f000 f88c 	bl	8008b60 <UART_WaitOnFlagUntilTimeout>
 8008a48:	1e03      	subs	r3, r0, #0
 8008a4a:	d021      	beq.n	8008a90 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a56:	2301      	movs	r3, #1
 8008a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5c:	f383 8810 	msr	PRIMASK, r3
}
 8008a60:	46c0      	nop			@ (mov r8, r8)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2180      	movs	r1, #128	@ 0x80
 8008a6e:	438a      	bics	r2, r1
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	f383 8810 	msr	PRIMASK, r3
}
 8008a7c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2278      	movs	r2, #120	@ 0x78
 8008a88:	2100      	movs	r1, #0
 8008a8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e05f      	b.n	8008b50 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2204      	movs	r2, #4
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d146      	bne.n	8008b2c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa0:	2280      	movs	r2, #128	@ 0x80
 8008aa2:	03d1      	lsls	r1, r2, #15
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b58 <UART_CheckIdleState+0x148>)
 8008aa8:	9200      	str	r2, [sp, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f000 f858 	bl	8008b60 <UART_WaitOnFlagUntilTimeout>
 8008ab0:	1e03      	subs	r3, r0, #0
 8008ab2:	d03b      	beq.n	8008b2c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abe:	2301      	movs	r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f383 8810 	msr	PRIMASK, r3
}
 8008ac8:	46c0      	nop			@ (mov r8, r8)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4921      	ldr	r1, [pc, #132]	@ (8008b5c <UART_CheckIdleState+0x14c>)
 8008ad6:	400a      	ands	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f383 8810 	msr	PRIMASK, r3
}
 8008ae4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aea:	61bb      	str	r3, [r7, #24]
  return(result);
 8008aec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8008af0:	2301      	movs	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f383 8810 	msr	PRIMASK, r3
}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2101      	movs	r1, #1
 8008b08:	438a      	bics	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	f383 8810 	msr	PRIMASK, r3
}
 8008b16:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2280      	movs	r2, #128	@ 0x80
 8008b1c:	2120      	movs	r1, #32
 8008b1e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2278      	movs	r2, #120	@ 0x78
 8008b24:	2100      	movs	r1, #0
 8008b26:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e011      	b.n	8008b50 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2280      	movs	r2, #128	@ 0x80
 8008b36:	2120      	movs	r1, #32
 8008b38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2278      	movs	r2, #120	@ 0x78
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	0018      	movs	r0, r3
 8008b52:	46bd      	mov	sp, r7
 8008b54:	b010      	add	sp, #64	@ 0x40
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	01ffffff 	.word	0x01ffffff
 8008b5c:	fffffedf 	.word	0xfffffedf

08008b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	1dfb      	adds	r3, r7, #7
 8008b6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b70:	e051      	b.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	3301      	adds	r3, #1
 8008b76:	d04e      	beq.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b78:	f7fb febc 	bl	80048f4 <HAL_GetTick>
 8008b7c:	0002      	movs	r2, r0
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e051      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2204      	movs	r2, #4
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	d03b      	beq.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b80      	cmp	r3, #128	@ 0x80
 8008ba2:	d038      	beq.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b40      	cmp	r3, #64	@ 0x40
 8008ba8:	d035      	beq.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d111      	bne.n	8008bdc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f000 f916 	bl	8008df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2284      	movs	r2, #132	@ 0x84
 8008bcc:	2108      	movs	r1, #8
 8008bce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2278      	movs	r2, #120	@ 0x78
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e02c      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	69da      	ldr	r2, [r3, #28]
 8008be2:	2380      	movs	r3, #128	@ 0x80
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	401a      	ands	r2, r3
 8008be8:	2380      	movs	r3, #128	@ 0x80
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d112      	bne.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2280      	movs	r2, #128	@ 0x80
 8008bf6:	0112      	lsls	r2, r2, #4
 8008bf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f000 f8f9 	bl	8008df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2284      	movs	r2, #132	@ 0x84
 8008c06:	2120      	movs	r1, #32
 8008c08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2278      	movs	r2, #120	@ 0x78
 8008c0e:	2100      	movs	r1, #0
 8008c10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e00f      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	425a      	negs	r2, r3
 8008c26:	4153      	adcs	r3, r2
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	001a      	movs	r2, r3
 8008c2c:	1dfb      	adds	r3, r7, #7
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d09e      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	0018      	movs	r0, r3
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	b004      	add	sp, #16
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b090      	sub	sp, #64	@ 0x40
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	1dbb      	adds	r3, r7, #6
 8008c4c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1dba      	adds	r2, r7, #6
 8008c58:	2158      	movs	r1, #88	@ 0x58
 8008c5a:	8812      	ldrh	r2, [r2, #0]
 8008c5c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	1dba      	adds	r2, r7, #6
 8008c62:	215a      	movs	r1, #90	@ 0x5a
 8008c64:	8812      	ldrh	r2, [r2, #0]
 8008c66:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689a      	ldr	r2, [r3, #8]
 8008c72:	2380      	movs	r3, #128	@ 0x80
 8008c74:	015b      	lsls	r3, r3, #5
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d10d      	bne.n	8008c96 <UART_Start_Receive_IT+0x56>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d104      	bne.n	8008c8c <UART_Start_Receive_IT+0x4c>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	225c      	movs	r2, #92	@ 0x5c
 8008c86:	4946      	ldr	r1, [pc, #280]	@ (8008da0 <UART_Start_Receive_IT+0x160>)
 8008c88:	5299      	strh	r1, [r3, r2]
 8008c8a:	e01a      	b.n	8008cc2 <UART_Start_Receive_IT+0x82>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	225c      	movs	r2, #92	@ 0x5c
 8008c90:	21ff      	movs	r1, #255	@ 0xff
 8008c92:	5299      	strh	r1, [r3, r2]
 8008c94:	e015      	b.n	8008cc2 <UART_Start_Receive_IT+0x82>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10d      	bne.n	8008cba <UART_Start_Receive_IT+0x7a>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <UART_Start_Receive_IT+0x70>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	225c      	movs	r2, #92	@ 0x5c
 8008caa:	21ff      	movs	r1, #255	@ 0xff
 8008cac:	5299      	strh	r1, [r3, r2]
 8008cae:	e008      	b.n	8008cc2 <UART_Start_Receive_IT+0x82>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	225c      	movs	r2, #92	@ 0x5c
 8008cb4:	217f      	movs	r1, #127	@ 0x7f
 8008cb6:	5299      	strh	r1, [r3, r2]
 8008cb8:	e003      	b.n	8008cc2 <UART_Start_Receive_IT+0x82>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	225c      	movs	r2, #92	@ 0x5c
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2284      	movs	r2, #132	@ 0x84
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2280      	movs	r2, #128	@ 0x80
 8008cce:	2122      	movs	r1, #34	@ 0x22
 8008cd0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cdc:	2301      	movs	r3, #1
 8008cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce2:	f383 8810 	msr	PRIMASK, r3
}
 8008ce6:	46c0      	nop			@ (mov r8, r8)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	f383 8810 	msr	PRIMASK, r3
}
 8008d02:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	2380      	movs	r3, #128	@ 0x80
 8008d0a:	015b      	lsls	r3, r3, #5
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d107      	bne.n	8008d20 <UART_Start_Receive_IT+0xe0>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4a22      	ldr	r2, [pc, #136]	@ (8008da4 <UART_Start_Receive_IT+0x164>)
 8008d1c:	669a      	str	r2, [r3, #104]	@ 0x68
 8008d1e:	e002      	b.n	8008d26 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a21      	ldr	r2, [pc, #132]	@ (8008da8 <UART_Start_Receive_IT+0x168>)
 8008d24:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d019      	beq.n	8008d62 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d32:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d34:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d38:	2301      	movs	r3, #1
 8008d3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	f383 8810 	msr	PRIMASK, r3
}
 8008d42:	46c0      	nop			@ (mov r8, r8)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2190      	movs	r1, #144	@ 0x90
 8008d50:	0049      	lsls	r1, r1, #1
 8008d52:	430a      	orrs	r2, r1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	f383 8810 	msr	PRIMASK, r3
}
 8008d60:	e018      	b.n	8008d94 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d62:	f3ef 8310 	mrs	r3, PRIMASK
 8008d66:	613b      	str	r3, [r7, #16]
  return(result);
 8008d68:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f383 8810 	msr	PRIMASK, r3
}
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2120      	movs	r1, #32
 8008d84:	430a      	orrs	r2, r1
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	f383 8810 	msr	PRIMASK, r3
}
 8008d92:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b010      	add	sp, #64	@ 0x40
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	000001ff 	.word	0x000001ff
 8008da4:	0800939d 	.word	0x0800939d
 8008da8:	080091e5 	.word	0x080091e5

08008dac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db4:	f3ef 8310 	mrs	r3, PRIMASK
 8008db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dba:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f383 8810 	msr	PRIMASK, r3
}
 8008dc8:	46c0      	nop			@ (mov r8, r8)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	21c0      	movs	r1, #192	@ 0xc0
 8008dd6:	438a      	bics	r2, r1
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f383 8810 	msr	PRIMASK, r3
}
 8008de4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008dec:	46c0      	nop			@ (mov r8, r8)
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b006      	add	sp, #24
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08e      	sub	sp, #56	@ 0x38
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008e00:	617b      	str	r3, [r7, #20]
  return(result);
 8008e02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e06:	2301      	movs	r3, #1
 8008e08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f383 8810 	msr	PRIMASK, r3
}
 8008e10:	46c0      	nop			@ (mov r8, r8)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4926      	ldr	r1, [pc, #152]	@ (8008eb8 <UART_EndRxTransfer+0xc4>)
 8008e1e:	400a      	ands	r2, r1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	f383 8810 	msr	PRIMASK, r3
}
 8008e2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e32:	623b      	str	r3, [r7, #32]
  return(result);
 8008e34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e38:	2301      	movs	r3, #1
 8008e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3e:	f383 8810 	msr	PRIMASK, r3
}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2101      	movs	r1, #1
 8008e50:	438a      	bics	r2, r1
 8008e52:	609a      	str	r2, [r3, #8]
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5a:	f383 8810 	msr	PRIMASK, r3
}
 8008e5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d118      	bne.n	8008e9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e68:	f3ef 8310 	mrs	r3, PRIMASK
 8008e6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e72:	2301      	movs	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f383 8810 	msr	PRIMASK, r3
}
 8008e7c:	46c0      	nop			@ (mov r8, r8)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2110      	movs	r1, #16
 8008e8a:	438a      	bics	r2, r1
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f383 8810 	msr	PRIMASK, r3
}
 8008e98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2280      	movs	r2, #128	@ 0x80
 8008e9e:	2120      	movs	r1, #32
 8008ea0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008eae:	46c0      	nop			@ (mov r8, r8)
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	b00e      	add	sp, #56	@ 0x38
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	46c0      	nop			@ (mov r8, r8)
 8008eb8:	fffffedf 	.word	0xfffffedf

08008ebc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08c      	sub	sp, #48	@ 0x30
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d035      	beq.n	8008f3e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	2252      	movs	r2, #82	@ 0x52
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eda:	f3ef 8310 	mrs	r3, PRIMASK
 8008ede:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ee0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f383 8810 	msr	PRIMASK, r3
}
 8008eee:	46c0      	nop			@ (mov r8, r8)
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2180      	movs	r1, #128	@ 0x80
 8008efc:	438a      	bics	r2, r1
 8008efe:	609a      	str	r2, [r3, #8]
 8008f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f383 8810 	msr	PRIMASK, r3
}
 8008f0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f10:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f12:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f16:	2301      	movs	r3, #1
 8008f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	46c0      	nop			@ (mov r8, r8)
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2140      	movs	r1, #64	@ 0x40
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	f383 8810 	msr	PRIMASK, r3
}
 8008f3c:	e004      	b.n	8008f48 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8008f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f40:	0018      	movs	r0, r3
 8008f42:	f7fa f911 	bl	8003168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	46c0      	nop			@ (mov r8, r8)
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	b00c      	add	sp, #48	@ 0x30
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	0018      	movs	r0, r3
 8008f62:	f7ff fb45 	bl	80085f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f66:	46c0      	nop			@ (mov r8, r8)
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	b004      	add	sp, #16
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2280      	movs	r2, #128	@ 0x80
 8008f86:	589b      	ldr	r3, [r3, r2]
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2280      	movs	r2, #128	@ 0x80
 8008f92:	4013      	ands	r3, r2
 8008f94:	2b80      	cmp	r3, #128	@ 0x80
 8008f96:	d10a      	bne.n	8008fae <UART_DMAError+0x40>
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b21      	cmp	r3, #33	@ 0x21
 8008f9c:	d107      	bne.n	8008fae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2252      	movs	r2, #82	@ 0x52
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f7ff feff 	bl	8008dac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	2240      	movs	r2, #64	@ 0x40
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b40      	cmp	r3, #64	@ 0x40
 8008fba:	d10a      	bne.n	8008fd2 <UART_DMAError+0x64>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b22      	cmp	r3, #34	@ 0x22
 8008fc0:	d107      	bne.n	8008fd2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	225a      	movs	r2, #90	@ 0x5a
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7ff ff11 	bl	8008df4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2284      	movs	r2, #132	@ 0x84
 8008fd6:	589b      	ldr	r3, [r3, r2]
 8008fd8:	2210      	movs	r2, #16
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2184      	movs	r1, #132	@ 0x84
 8008fe0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7ff fb0b 	bl	8008600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b006      	add	sp, #24
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	225a      	movs	r2, #90	@ 0x5a
 8009004:	2100      	movs	r1, #0
 8009006:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2252      	movs	r2, #82	@ 0x52
 800900c:	2100      	movs	r1, #0
 800900e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	0018      	movs	r0, r3
 8009014:	f7ff faf4 	bl	8008600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009018:	46c0      	nop			@ (mov r8, r8)
 800901a:	46bd      	mov	sp, r7
 800901c:	b004      	add	sp, #16
 800901e:	bd80      	pop	{r7, pc}

08009020 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	@ 0x28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800902c:	2b21      	cmp	r3, #33	@ 0x21
 800902e:	d14c      	bne.n	80090ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2252      	movs	r2, #82	@ 0x52
 8009034:	5a9b      	ldrh	r3, [r3, r2]
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d132      	bne.n	80090a2 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800903c:	f3ef 8310 	mrs	r3, PRIMASK
 8009040:	60bb      	str	r3, [r7, #8]
  return(result);
 8009042:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
 8009046:	2301      	movs	r3, #1
 8009048:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f383 8810 	msr	PRIMASK, r3
}
 8009050:	46c0      	nop			@ (mov r8, r8)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2180      	movs	r1, #128	@ 0x80
 800905e:	438a      	bics	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f383 8810 	msr	PRIMASK, r3
}
 800906c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906e:	f3ef 8310 	mrs	r3, PRIMASK
 8009072:	617b      	str	r3, [r7, #20]
  return(result);
 8009074:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009076:	623b      	str	r3, [r7, #32]
 8009078:	2301      	movs	r3, #1
 800907a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	f383 8810 	msr	PRIMASK, r3
}
 8009082:	46c0      	nop			@ (mov r8, r8)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2140      	movs	r1, #64	@ 0x40
 8009090:	430a      	orrs	r2, r1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f383 8810 	msr	PRIMASK, r3
}
 800909e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80090a0:	e013      	b.n	80090ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2252      	movs	r2, #82	@ 0x52
 80090bc:	5a9b      	ldrh	r3, [r3, r2]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b299      	uxth	r1, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2252      	movs	r2, #82	@ 0x52
 80090c8:	5299      	strh	r1, [r3, r2]
}
 80090ca:	46c0      	nop			@ (mov r8, r8)
 80090cc:	46bd      	mov	sp, r7
 80090ce:	b00a      	add	sp, #40	@ 0x28
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b08c      	sub	sp, #48	@ 0x30
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090de:	2b21      	cmp	r3, #33	@ 0x21
 80090e0:	d151      	bne.n	8009186 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2252      	movs	r2, #82	@ 0x52
 80090e6:	5a9b      	ldrh	r3, [r3, r2]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d132      	bne.n	8009154 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ee:	f3ef 8310 	mrs	r3, PRIMASK
 80090f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80090f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090f8:	2301      	movs	r3, #1
 80090fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f383 8810 	msr	PRIMASK, r3
}
 8009102:	46c0      	nop			@ (mov r8, r8)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2180      	movs	r1, #128	@ 0x80
 8009110:	438a      	bics	r2, r1
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f383 8810 	msr	PRIMASK, r3
}
 800911e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009120:	f3ef 8310 	mrs	r3, PRIMASK
 8009124:	61bb      	str	r3, [r7, #24]
  return(result);
 8009126:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
 800912a:	2301      	movs	r3, #1
 800912c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f383 8810 	msr	PRIMASK, r3
}
 8009134:	46c0      	nop			@ (mov r8, r8)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2140      	movs	r1, #64	@ 0x40
 8009142:	430a      	orrs	r2, r1
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f383 8810 	msr	PRIMASK, r3
}
 8009150:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009152:	e018      	b.n	8009186 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800915a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915c:	881a      	ldrh	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	05d2      	lsls	r2, r2, #23
 8009164:	0dd2      	lsrs	r2, r2, #23
 8009166:	b292      	uxth	r2, r2
 8009168:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800916e:	1c9a      	adds	r2, r3, #2
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2252      	movs	r2, #82	@ 0x52
 8009178:	5a9b      	ldrh	r3, [r3, r2]
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b299      	uxth	r1, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2252      	movs	r2, #82	@ 0x52
 8009184:	5299      	strh	r1, [r3, r2]
}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	46bd      	mov	sp, r7
 800918a:	b00c      	add	sp, #48	@ 0x30
 800918c:	bd80      	pop	{r7, pc}

0800918e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b086      	sub	sp, #24
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009196:	f3ef 8310 	mrs	r3, PRIMASK
 800919a:	60bb      	str	r3, [r7, #8]
  return(result);
 800919c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	2301      	movs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f383 8810 	msr	PRIMASK, r3
}
 80091aa:	46c0      	nop			@ (mov r8, r8)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2140      	movs	r1, #64	@ 0x40
 80091b8:	438a      	bics	r2, r1
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f383 8810 	msr	PRIMASK, r3
}
 80091c6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7f9 ffc6 	bl	8003168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091dc:	46c0      	nop			@ (mov r8, r8)
 80091de:	46bd      	mov	sp, r7
 80091e0:	b006      	add	sp, #24
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b094      	sub	sp, #80	@ 0x50
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091ec:	204e      	movs	r0, #78	@ 0x4e
 80091ee:	183b      	adds	r3, r7, r0
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	215c      	movs	r1, #92	@ 0x5c
 80091f4:	5a52      	ldrh	r2, [r2, r1]
 80091f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2280      	movs	r2, #128	@ 0x80
 80091fc:	589b      	ldr	r3, [r3, r2]
 80091fe:	2b22      	cmp	r3, #34	@ 0x22
 8009200:	d000      	beq.n	8009204 <UART_RxISR_8BIT+0x20>
 8009202:	e0ba      	b.n	800937a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	214c      	movs	r1, #76	@ 0x4c
 800920a:	187b      	adds	r3, r7, r1
 800920c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800920e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009210:	187b      	adds	r3, r7, r1
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b2da      	uxtb	r2, r3
 8009216:	183b      	adds	r3, r7, r0
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b2d9      	uxtb	r1, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009220:	400a      	ands	r2, r1
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	225a      	movs	r2, #90	@ 0x5a
 8009234:	5a9b      	ldrh	r3, [r3, r2]
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b299      	uxth	r1, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	225a      	movs	r2, #90	@ 0x5a
 8009240:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	225a      	movs	r2, #90	@ 0x5a
 8009246:	5a9b      	ldrh	r3, [r3, r2]
 8009248:	b29b      	uxth	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d000      	beq.n	8009250 <UART_RxISR_8BIT+0x6c>
 800924e:	e09c      	b.n	800938a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009250:	f3ef 8310 	mrs	r3, PRIMASK
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009258:	64bb      	str	r3, [r7, #72]	@ 0x48
 800925a:	2301      	movs	r3, #1
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	f383 8810 	msr	PRIMASK, r3
}
 8009264:	46c0      	nop			@ (mov r8, r8)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4948      	ldr	r1, [pc, #288]	@ (8009394 <UART_RxISR_8BIT+0x1b0>)
 8009272:	400a      	ands	r2, r1
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	f383 8810 	msr	PRIMASK, r3
}
 8009280:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928a:	647b      	str	r3, [r7, #68]	@ 0x44
 800928c:	2301      	movs	r3, #1
 800928e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009292:	f383 8810 	msr	PRIMASK, r3
}
 8009296:	46c0      	nop			@ (mov r8, r8)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2101      	movs	r1, #1
 80092a4:	438a      	bics	r2, r1
 80092a6:	609a      	str	r2, [r3, #8]
 80092a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ae:	f383 8810 	msr	PRIMASK, r3
}
 80092b2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2280      	movs	r2, #128	@ 0x80
 80092b8:	2120      	movs	r1, #32
 80092ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	2380      	movs	r3, #128	@ 0x80
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	4013      	ands	r3, r2
 80092d4:	d018      	beq.n	8009308 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d6:	f3ef 8310 	mrs	r3, PRIMASK
 80092da:	61bb      	str	r3, [r7, #24]
  return(result);
 80092dc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092de:	643b      	str	r3, [r7, #64]	@ 0x40
 80092e0:	2301      	movs	r3, #1
 80092e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f383 8810 	msr	PRIMASK, r3
}
 80092ea:	46c0      	nop			@ (mov r8, r8)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4928      	ldr	r1, [pc, #160]	@ (8009398 <UART_RxISR_8BIT+0x1b4>)
 80092f8:	400a      	ands	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	f383 8810 	msr	PRIMASK, r3
}
 8009306:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800930c:	2b01      	cmp	r3, #1
 800930e:	d12f      	bne.n	8009370 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009316:	f3ef 8310 	mrs	r3, PRIMASK
 800931a:	60fb      	str	r3, [r7, #12]
  return(result);
 800931c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009320:	2301      	movs	r3, #1
 8009322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f383 8810 	msr	PRIMASK, r3
}
 800932a:	46c0      	nop			@ (mov r8, r8)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2110      	movs	r1, #16
 8009338:	438a      	bics	r2, r1
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f383 8810 	msr	PRIMASK, r3
}
 8009346:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	2210      	movs	r2, #16
 8009350:	4013      	ands	r3, r2
 8009352:	2b10      	cmp	r3, #16
 8009354:	d103      	bne.n	800935e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2210      	movs	r2, #16
 800935c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2258      	movs	r2, #88	@ 0x58
 8009362:	5a9a      	ldrh	r2, [r3, r2]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0011      	movs	r1, r2
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff f951 	bl	8008610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800936e:	e00c      	b.n	800938a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	0018      	movs	r0, r3
 8009374:	f7f9 fdb8 	bl	8002ee8 <HAL_UART_RxCpltCallback>
}
 8009378:	e007      	b.n	800938a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	699a      	ldr	r2, [r3, #24]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2108      	movs	r1, #8
 8009386:	430a      	orrs	r2, r1
 8009388:	619a      	str	r2, [r3, #24]
}
 800938a:	46c0      	nop			@ (mov r8, r8)
 800938c:	46bd      	mov	sp, r7
 800938e:	b014      	add	sp, #80	@ 0x50
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			@ (mov r8, r8)
 8009394:	fffffedf 	.word	0xfffffedf
 8009398:	fbffffff 	.word	0xfbffffff

0800939c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b094      	sub	sp, #80	@ 0x50
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093a4:	204e      	movs	r0, #78	@ 0x4e
 80093a6:	183b      	adds	r3, r7, r0
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	215c      	movs	r1, #92	@ 0x5c
 80093ac:	5a52      	ldrh	r2, [r2, r1]
 80093ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2280      	movs	r2, #128	@ 0x80
 80093b4:	589b      	ldr	r3, [r3, r2]
 80093b6:	2b22      	cmp	r3, #34	@ 0x22
 80093b8:	d000      	beq.n	80093bc <UART_RxISR_16BIT+0x20>
 80093ba:	e0ba      	b.n	8009532 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	214c      	movs	r1, #76	@ 0x4c
 80093c2:	187b      	adds	r3, r7, r1
 80093c4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80093c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80093ce:	187b      	adds	r3, r7, r1
 80093d0:	183a      	adds	r2, r7, r0
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	8812      	ldrh	r2, [r2, #0]
 80093d6:	4013      	ands	r3, r2
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e2:	1c9a      	adds	r2, r3, #2
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	225a      	movs	r2, #90	@ 0x5a
 80093ec:	5a9b      	ldrh	r3, [r3, r2]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b299      	uxth	r1, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	225a      	movs	r2, #90	@ 0x5a
 80093f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	225a      	movs	r2, #90	@ 0x5a
 80093fe:	5a9b      	ldrh	r3, [r3, r2]
 8009400:	b29b      	uxth	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d000      	beq.n	8009408 <UART_RxISR_16BIT+0x6c>
 8009406:	e09c      	b.n	8009542 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009408:	f3ef 8310 	mrs	r3, PRIMASK
 800940c:	623b      	str	r3, [r7, #32]
  return(result);
 800940e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009410:	647b      	str	r3, [r7, #68]	@ 0x44
 8009412:	2301      	movs	r3, #1
 8009414:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	f383 8810 	msr	PRIMASK, r3
}
 800941c:	46c0      	nop			@ (mov r8, r8)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4948      	ldr	r1, [pc, #288]	@ (800954c <UART_RxISR_16BIT+0x1b0>)
 800942a:	400a      	ands	r2, r1
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009430:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	f383 8810 	msr	PRIMASK, r3
}
 8009438:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800943a:	f3ef 8310 	mrs	r3, PRIMASK
 800943e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	643b      	str	r3, [r7, #64]	@ 0x40
 8009444:	2301      	movs	r3, #1
 8009446:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944a:	f383 8810 	msr	PRIMASK, r3
}
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2101      	movs	r1, #1
 800945c:	438a      	bics	r2, r1
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009462:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009466:	f383 8810 	msr	PRIMASK, r3
}
 800946a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2280      	movs	r2, #128	@ 0x80
 8009470:	2120      	movs	r1, #32
 8009472:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	2380      	movs	r3, #128	@ 0x80
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	4013      	ands	r3, r2
 800948c:	d018      	beq.n	80094c0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800948e:	f3ef 8310 	mrs	r3, PRIMASK
 8009492:	617b      	str	r3, [r7, #20]
  return(result);
 8009494:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009498:	2301      	movs	r3, #1
 800949a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	f383 8810 	msr	PRIMASK, r3
}
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4928      	ldr	r1, [pc, #160]	@ (8009550 <UART_RxISR_16BIT+0x1b4>)
 80094b0:	400a      	ands	r2, r1
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f383 8810 	msr	PRIMASK, r3
}
 80094be:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d12f      	bne.n	8009528 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ce:	f3ef 8310 	mrs	r3, PRIMASK
 80094d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80094d4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094d8:	2301      	movs	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f383 8810 	msr	PRIMASK, r3
}
 80094e2:	46c0      	nop			@ (mov r8, r8)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2110      	movs	r1, #16
 80094f0:	438a      	bics	r2, r1
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f383 8810 	msr	PRIMASK, r3
}
 80094fe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	2210      	movs	r2, #16
 8009508:	4013      	ands	r3, r2
 800950a:	2b10      	cmp	r3, #16
 800950c:	d103      	bne.n	8009516 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2210      	movs	r2, #16
 8009514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2258      	movs	r2, #88	@ 0x58
 800951a:	5a9a      	ldrh	r2, [r3, r2]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	0011      	movs	r1, r2
 8009520:	0018      	movs	r0, r3
 8009522:	f7ff f875 	bl	8008610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009526:	e00c      	b.n	8009542 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	0018      	movs	r0, r3
 800952c:	f7f9 fcdc 	bl	8002ee8 <HAL_UART_RxCpltCallback>
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2108      	movs	r1, #8
 800953e:	430a      	orrs	r2, r1
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b014      	add	sp, #80	@ 0x50
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	fffffedf 	.word	0xfffffedf
 8009550:	fbffffff 	.word	0xfbffffff

08009554 <atof>:
 8009554:	b510      	push	{r4, lr}
 8009556:	2100      	movs	r1, #0
 8009558:	f000 fe14 	bl	800a184 <strtod>
 800955c:	bd10      	pop	{r4, pc}
	...

08009560 <sulp>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	0016      	movs	r6, r2
 8009564:	000d      	movs	r5, r1
 8009566:	f003 fe31 	bl	800d1cc <__ulp>
 800956a:	2e00      	cmp	r6, #0
 800956c:	d00d      	beq.n	800958a <sulp+0x2a>
 800956e:	236b      	movs	r3, #107	@ 0x6b
 8009570:	006a      	lsls	r2, r5, #1
 8009572:	0d52      	lsrs	r2, r2, #21
 8009574:	1a9b      	subs	r3, r3, r2
 8009576:	2b00      	cmp	r3, #0
 8009578:	dd07      	ble.n	800958a <sulp+0x2a>
 800957a:	2400      	movs	r4, #0
 800957c:	4a03      	ldr	r2, [pc, #12]	@ (800958c <sulp+0x2c>)
 800957e:	051b      	lsls	r3, r3, #20
 8009580:	189d      	adds	r5, r3, r2
 8009582:	002b      	movs	r3, r5
 8009584:	0022      	movs	r2, r4
 8009586:	f7f8 fae3 	bl	8001b50 <__aeabi_dmul>
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	3ff00000 	.word	0x3ff00000

08009590 <_strtod_l>:
 8009590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009592:	b0a3      	sub	sp, #140	@ 0x8c
 8009594:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009596:	2200      	movs	r2, #0
 8009598:	2600      	movs	r6, #0
 800959a:	2700      	movs	r7, #0
 800959c:	9005      	str	r0, [sp, #20]
 800959e:	9109      	str	r1, [sp, #36]	@ 0x24
 80095a0:	921e      	str	r2, [sp, #120]	@ 0x78
 80095a2:	911d      	str	r1, [sp, #116]	@ 0x74
 80095a4:	780a      	ldrb	r2, [r1, #0]
 80095a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80095a8:	d053      	beq.n	8009652 <_strtod_l+0xc2>
 80095aa:	d83f      	bhi.n	800962c <_strtod_l+0x9c>
 80095ac:	2a0d      	cmp	r2, #13
 80095ae:	d839      	bhi.n	8009624 <_strtod_l+0x94>
 80095b0:	2a08      	cmp	r2, #8
 80095b2:	d839      	bhi.n	8009628 <_strtod_l+0x98>
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	d042      	beq.n	800963e <_strtod_l+0xae>
 80095b8:	2200      	movs	r2, #0
 80095ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80095bc:	2100      	movs	r1, #0
 80095be:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80095c0:	910c      	str	r1, [sp, #48]	@ 0x30
 80095c2:	782a      	ldrb	r2, [r5, #0]
 80095c4:	2a30      	cmp	r2, #48	@ 0x30
 80095c6:	d000      	beq.n	80095ca <_strtod_l+0x3a>
 80095c8:	e083      	b.n	80096d2 <_strtod_l+0x142>
 80095ca:	786a      	ldrb	r2, [r5, #1]
 80095cc:	3120      	adds	r1, #32
 80095ce:	438a      	bics	r2, r1
 80095d0:	2a58      	cmp	r2, #88	@ 0x58
 80095d2:	d000      	beq.n	80095d6 <_strtod_l+0x46>
 80095d4:	e073      	b.n	80096be <_strtod_l+0x12e>
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095da:	4a95      	ldr	r2, [pc, #596]	@ (8009830 <_strtod_l+0x2a0>)
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	ab1e      	add	r3, sp, #120	@ 0x78
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80095e6:	a91d      	add	r1, sp, #116	@ 0x74
 80095e8:	f002 fea0 	bl	800c32c <__gethex>
 80095ec:	230f      	movs	r3, #15
 80095ee:	0002      	movs	r2, r0
 80095f0:	401a      	ands	r2, r3
 80095f2:	0004      	movs	r4, r0
 80095f4:	9206      	str	r2, [sp, #24]
 80095f6:	4218      	tst	r0, r3
 80095f8:	d005      	beq.n	8009606 <_strtod_l+0x76>
 80095fa:	2a06      	cmp	r2, #6
 80095fc:	d12b      	bne.n	8009656 <_strtod_l+0xc6>
 80095fe:	2300      	movs	r3, #0
 8009600:	3501      	adds	r5, #1
 8009602:	951d      	str	r5, [sp, #116]	@ 0x74
 8009604:	9312      	str	r3, [sp, #72]	@ 0x48
 8009606:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <_strtod_l+0x82>
 800960c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800960e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009614:	2b00      	cmp	r3, #0
 8009616:	d019      	beq.n	800964c <_strtod_l+0xbc>
 8009618:	2380      	movs	r3, #128	@ 0x80
 800961a:	0030      	movs	r0, r6
 800961c:	061b      	lsls	r3, r3, #24
 800961e:	18f9      	adds	r1, r7, r3
 8009620:	b023      	add	sp, #140	@ 0x8c
 8009622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009624:	2a20      	cmp	r2, #32
 8009626:	d1c7      	bne.n	80095b8 <_strtod_l+0x28>
 8009628:	3101      	adds	r1, #1
 800962a:	e7ba      	b.n	80095a2 <_strtod_l+0x12>
 800962c:	2a2d      	cmp	r2, #45	@ 0x2d
 800962e:	d1c3      	bne.n	80095b8 <_strtod_l+0x28>
 8009630:	3a2c      	subs	r2, #44	@ 0x2c
 8009632:	9212      	str	r2, [sp, #72]	@ 0x48
 8009634:	1c4a      	adds	r2, r1, #1
 8009636:	921d      	str	r2, [sp, #116]	@ 0x74
 8009638:	784a      	ldrb	r2, [r1, #1]
 800963a:	2a00      	cmp	r2, #0
 800963c:	d1be      	bne.n	80095bc <_strtod_l+0x2c>
 800963e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009640:	931d      	str	r3, [sp, #116]	@ 0x74
 8009642:	2300      	movs	r3, #0
 8009644:	9312      	str	r3, [sp, #72]	@ 0x48
 8009646:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1df      	bne.n	800960c <_strtod_l+0x7c>
 800964c:	0030      	movs	r0, r6
 800964e:	0039      	movs	r1, r7
 8009650:	e7e6      	b.n	8009620 <_strtod_l+0x90>
 8009652:	2200      	movs	r2, #0
 8009654:	e7ed      	b.n	8009632 <_strtod_l+0xa2>
 8009656:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009658:	2a00      	cmp	r2, #0
 800965a:	d007      	beq.n	800966c <_strtod_l+0xdc>
 800965c:	2135      	movs	r1, #53	@ 0x35
 800965e:	a820      	add	r0, sp, #128	@ 0x80
 8009660:	f003 feaa 	bl	800d3b8 <__copybits>
 8009664:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009666:	9805      	ldr	r0, [sp, #20]
 8009668:	f003 fa64 	bl	800cb34 <_Bfree>
 800966c:	9806      	ldr	r0, [sp, #24]
 800966e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009670:	3801      	subs	r0, #1
 8009672:	2804      	cmp	r0, #4
 8009674:	d806      	bhi.n	8009684 <_strtod_l+0xf4>
 8009676:	f7f6 fd59 	bl	800012c <__gnu_thumb1_case_uqi>
 800967a:	0312      	.short	0x0312
 800967c:	1e1c      	.short	0x1e1c
 800967e:	12          	.byte	0x12
 800967f:	00          	.byte	0x00
 8009680:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009682:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009684:	05e4      	lsls	r4, r4, #23
 8009686:	d502      	bpl.n	800968e <_strtod_l+0xfe>
 8009688:	2380      	movs	r3, #128	@ 0x80
 800968a:	061b      	lsls	r3, r3, #24
 800968c:	431f      	orrs	r7, r3
 800968e:	4b69      	ldr	r3, [pc, #420]	@ (8009834 <_strtod_l+0x2a4>)
 8009690:	423b      	tst	r3, r7
 8009692:	d1b8      	bne.n	8009606 <_strtod_l+0x76>
 8009694:	f001 feca 	bl	800b42c <__errno>
 8009698:	2322      	movs	r3, #34	@ 0x22
 800969a:	6003      	str	r3, [r0, #0]
 800969c:	e7b3      	b.n	8009606 <_strtod_l+0x76>
 800969e:	4966      	ldr	r1, [pc, #408]	@ (8009838 <_strtod_l+0x2a8>)
 80096a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80096a2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80096a4:	400a      	ands	r2, r1
 80096a6:	4965      	ldr	r1, [pc, #404]	@ (800983c <_strtod_l+0x2ac>)
 80096a8:	185b      	adds	r3, r3, r1
 80096aa:	051b      	lsls	r3, r3, #20
 80096ac:	431a      	orrs	r2, r3
 80096ae:	0017      	movs	r7, r2
 80096b0:	e7e8      	b.n	8009684 <_strtod_l+0xf4>
 80096b2:	4f60      	ldr	r7, [pc, #384]	@ (8009834 <_strtod_l+0x2a4>)
 80096b4:	e7e6      	b.n	8009684 <_strtod_l+0xf4>
 80096b6:	2601      	movs	r6, #1
 80096b8:	4f61      	ldr	r7, [pc, #388]	@ (8009840 <_strtod_l+0x2b0>)
 80096ba:	4276      	negs	r6, r6
 80096bc:	e7e2      	b.n	8009684 <_strtod_l+0xf4>
 80096be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	921d      	str	r2, [sp, #116]	@ 0x74
 80096c4:	785b      	ldrb	r3, [r3, #1]
 80096c6:	2b30      	cmp	r3, #48	@ 0x30
 80096c8:	d0f9      	beq.n	80096be <_strtod_l+0x12e>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d09b      	beq.n	8009606 <_strtod_l+0x76>
 80096ce:	2301      	movs	r3, #1
 80096d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80096d2:	2500      	movs	r5, #0
 80096d4:	220a      	movs	r2, #10
 80096d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096d8:	950d      	str	r5, [sp, #52]	@ 0x34
 80096da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096dc:	9508      	str	r5, [sp, #32]
 80096de:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80096e0:	7804      	ldrb	r4, [r0, #0]
 80096e2:	0023      	movs	r3, r4
 80096e4:	3b30      	subs	r3, #48	@ 0x30
 80096e6:	b2d9      	uxtb	r1, r3
 80096e8:	2909      	cmp	r1, #9
 80096ea:	d927      	bls.n	800973c <_strtod_l+0x1ac>
 80096ec:	2201      	movs	r2, #1
 80096ee:	4955      	ldr	r1, [pc, #340]	@ (8009844 <_strtod_l+0x2b4>)
 80096f0:	f001 fe38 	bl	800b364 <strncmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d031      	beq.n	800975c <_strtod_l+0x1cc>
 80096f8:	2000      	movs	r0, #0
 80096fa:	0023      	movs	r3, r4
 80096fc:	4684      	mov	ip, r0
 80096fe:	9a08      	ldr	r2, [sp, #32]
 8009700:	900e      	str	r0, [sp, #56]	@ 0x38
 8009702:	9206      	str	r2, [sp, #24]
 8009704:	2220      	movs	r2, #32
 8009706:	0019      	movs	r1, r3
 8009708:	4391      	bics	r1, r2
 800970a:	000a      	movs	r2, r1
 800970c:	2100      	movs	r1, #0
 800970e:	9107      	str	r1, [sp, #28]
 8009710:	2a45      	cmp	r2, #69	@ 0x45
 8009712:	d000      	beq.n	8009716 <_strtod_l+0x186>
 8009714:	e0c0      	b.n	8009898 <_strtod_l+0x308>
 8009716:	9b06      	ldr	r3, [sp, #24]
 8009718:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800971a:	4303      	orrs	r3, r0
 800971c:	4313      	orrs	r3, r2
 800971e:	428b      	cmp	r3, r1
 8009720:	d08d      	beq.n	800963e <_strtod_l+0xae>
 8009722:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009724:	9309      	str	r3, [sp, #36]	@ 0x24
 8009726:	3301      	adds	r3, #1
 8009728:	931d      	str	r3, [sp, #116]	@ 0x74
 800972a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972c:	785b      	ldrb	r3, [r3, #1]
 800972e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009730:	d070      	beq.n	8009814 <_strtod_l+0x284>
 8009732:	000c      	movs	r4, r1
 8009734:	2b2d      	cmp	r3, #45	@ 0x2d
 8009736:	d173      	bne.n	8009820 <_strtod_l+0x290>
 8009738:	2401      	movs	r4, #1
 800973a:	e06c      	b.n	8009816 <_strtod_l+0x286>
 800973c:	9908      	ldr	r1, [sp, #32]
 800973e:	2908      	cmp	r1, #8
 8009740:	dc09      	bgt.n	8009756 <_strtod_l+0x1c6>
 8009742:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009744:	4351      	muls	r1, r2
 8009746:	185b      	adds	r3, r3, r1
 8009748:	930d      	str	r3, [sp, #52]	@ 0x34
 800974a:	9b08      	ldr	r3, [sp, #32]
 800974c:	3001      	adds	r0, #1
 800974e:	3301      	adds	r3, #1
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	901d      	str	r0, [sp, #116]	@ 0x74
 8009754:	e7c3      	b.n	80096de <_strtod_l+0x14e>
 8009756:	4355      	muls	r5, r2
 8009758:	195d      	adds	r5, r3, r5
 800975a:	e7f6      	b.n	800974a <_strtod_l+0x1ba>
 800975c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	921d      	str	r2, [sp, #116]	@ 0x74
 8009762:	9a08      	ldr	r2, [sp, #32]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2a00      	cmp	r2, #0
 8009768:	d03a      	beq.n	80097e0 <_strtod_l+0x250>
 800976a:	900e      	str	r0, [sp, #56]	@ 0x38
 800976c:	9206      	str	r2, [sp, #24]
 800976e:	001a      	movs	r2, r3
 8009770:	3a30      	subs	r2, #48	@ 0x30
 8009772:	2a09      	cmp	r2, #9
 8009774:	d912      	bls.n	800979c <_strtod_l+0x20c>
 8009776:	2201      	movs	r2, #1
 8009778:	4694      	mov	ip, r2
 800977a:	e7c3      	b.n	8009704 <_strtod_l+0x174>
 800977c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800977e:	3001      	adds	r0, #1
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	921d      	str	r2, [sp, #116]	@ 0x74
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b30      	cmp	r3, #48	@ 0x30
 8009788:	d0f8      	beq.n	800977c <_strtod_l+0x1ec>
 800978a:	001a      	movs	r2, r3
 800978c:	3a31      	subs	r2, #49	@ 0x31
 800978e:	2a08      	cmp	r2, #8
 8009790:	d83b      	bhi.n	800980a <_strtod_l+0x27a>
 8009792:	900e      	str	r0, [sp, #56]	@ 0x38
 8009794:	2000      	movs	r0, #0
 8009796:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009798:	9006      	str	r0, [sp, #24]
 800979a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800979c:	001a      	movs	r2, r3
 800979e:	1c41      	adds	r1, r0, #1
 80097a0:	3a30      	subs	r2, #48	@ 0x30
 80097a2:	2b30      	cmp	r3, #48	@ 0x30
 80097a4:	d016      	beq.n	80097d4 <_strtod_l+0x244>
 80097a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097a8:	185b      	adds	r3, r3, r1
 80097aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	210a      	movs	r1, #10
 80097b0:	469c      	mov	ip, r3
 80097b2:	4484      	add	ip, r0
 80097b4:	459c      	cmp	ip, r3
 80097b6:	d115      	bne.n	80097e4 <_strtod_l+0x254>
 80097b8:	9906      	ldr	r1, [sp, #24]
 80097ba:	9b06      	ldr	r3, [sp, #24]
 80097bc:	3101      	adds	r1, #1
 80097be:	1809      	adds	r1, r1, r0
 80097c0:	181b      	adds	r3, r3, r0
 80097c2:	9106      	str	r1, [sp, #24]
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	dc19      	bgt.n	80097fc <_strtod_l+0x26c>
 80097c8:	230a      	movs	r3, #10
 80097ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80097cc:	434b      	muls	r3, r1
 80097ce:	2100      	movs	r1, #0
 80097d0:	18d3      	adds	r3, r2, r3
 80097d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80097d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097d6:	0008      	movs	r0, r1
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	921d      	str	r2, [sp, #116]	@ 0x74
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	e7c6      	b.n	800976e <_strtod_l+0x1de>
 80097e0:	9808      	ldr	r0, [sp, #32]
 80097e2:	e7d0      	b.n	8009786 <_strtod_l+0x1f6>
 80097e4:	1c5c      	adds	r4, r3, #1
 80097e6:	2b08      	cmp	r3, #8
 80097e8:	dc04      	bgt.n	80097f4 <_strtod_l+0x264>
 80097ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097ec:	434b      	muls	r3, r1
 80097ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80097f0:	0023      	movs	r3, r4
 80097f2:	e7df      	b.n	80097b4 <_strtod_l+0x224>
 80097f4:	2c10      	cmp	r4, #16
 80097f6:	dcfb      	bgt.n	80097f0 <_strtod_l+0x260>
 80097f8:	434d      	muls	r5, r1
 80097fa:	e7f9      	b.n	80097f0 <_strtod_l+0x260>
 80097fc:	2100      	movs	r1, #0
 80097fe:	2b0f      	cmp	r3, #15
 8009800:	dce8      	bgt.n	80097d4 <_strtod_l+0x244>
 8009802:	230a      	movs	r3, #10
 8009804:	435d      	muls	r5, r3
 8009806:	1955      	adds	r5, r2, r5
 8009808:	e7e4      	b.n	80097d4 <_strtod_l+0x244>
 800980a:	2200      	movs	r2, #0
 800980c:	920e      	str	r2, [sp, #56]	@ 0x38
 800980e:	9206      	str	r2, [sp, #24]
 8009810:	3201      	adds	r2, #1
 8009812:	e7b1      	b.n	8009778 <_strtod_l+0x1e8>
 8009814:	2400      	movs	r4, #0
 8009816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009818:	3302      	adds	r3, #2
 800981a:	931d      	str	r3, [sp, #116]	@ 0x74
 800981c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981e:	789b      	ldrb	r3, [r3, #2]
 8009820:	001a      	movs	r2, r3
 8009822:	3a30      	subs	r2, #48	@ 0x30
 8009824:	2a09      	cmp	r2, #9
 8009826:	d913      	bls.n	8009850 <_strtod_l+0x2c0>
 8009828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800982a:	921d      	str	r2, [sp, #116]	@ 0x74
 800982c:	2200      	movs	r2, #0
 800982e:	e032      	b.n	8009896 <_strtod_l+0x306>
 8009830:	0800e8f0 	.word	0x0800e8f0
 8009834:	7ff00000 	.word	0x7ff00000
 8009838:	ffefffff 	.word	0xffefffff
 800983c:	00000433 	.word	0x00000433
 8009840:	7fffffff 	.word	0x7fffffff
 8009844:	0800e8d8 	.word	0x0800e8d8
 8009848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	921d      	str	r2, [sp, #116]	@ 0x74
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b30      	cmp	r3, #48	@ 0x30
 8009852:	d0f9      	beq.n	8009848 <_strtod_l+0x2b8>
 8009854:	2200      	movs	r2, #0
 8009856:	9207      	str	r2, [sp, #28]
 8009858:	001a      	movs	r2, r3
 800985a:	3a31      	subs	r2, #49	@ 0x31
 800985c:	2a08      	cmp	r2, #8
 800985e:	d81b      	bhi.n	8009898 <_strtod_l+0x308>
 8009860:	3b30      	subs	r3, #48	@ 0x30
 8009862:	9310      	str	r3, [sp, #64]	@ 0x40
 8009864:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009866:	9307      	str	r3, [sp, #28]
 8009868:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800986a:	1c59      	adds	r1, r3, #1
 800986c:	911d      	str	r1, [sp, #116]	@ 0x74
 800986e:	785b      	ldrb	r3, [r3, #1]
 8009870:	001a      	movs	r2, r3
 8009872:	3a30      	subs	r2, #48	@ 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d93a      	bls.n	80098ee <_strtod_l+0x35e>
 8009878:	9a07      	ldr	r2, [sp, #28]
 800987a:	1a8a      	subs	r2, r1, r2
 800987c:	49b4      	ldr	r1, [pc, #720]	@ (8009b50 <_strtod_l+0x5c0>)
 800987e:	9107      	str	r1, [sp, #28]
 8009880:	2a08      	cmp	r2, #8
 8009882:	dc04      	bgt.n	800988e <_strtod_l+0x2fe>
 8009884:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009886:	9207      	str	r2, [sp, #28]
 8009888:	428a      	cmp	r2, r1
 800988a:	dd00      	ble.n	800988e <_strtod_l+0x2fe>
 800988c:	9107      	str	r1, [sp, #28]
 800988e:	2c00      	cmp	r4, #0
 8009890:	d002      	beq.n	8009898 <_strtod_l+0x308>
 8009892:	9a07      	ldr	r2, [sp, #28]
 8009894:	4252      	negs	r2, r2
 8009896:	9207      	str	r2, [sp, #28]
 8009898:	9a06      	ldr	r2, [sp, #24]
 800989a:	2a00      	cmp	r2, #0
 800989c:	d14d      	bne.n	800993a <_strtod_l+0x3aa>
 800989e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098a0:	4310      	orrs	r0, r2
 80098a2:	d000      	beq.n	80098a6 <_strtod_l+0x316>
 80098a4:	e6af      	b.n	8009606 <_strtod_l+0x76>
 80098a6:	4662      	mov	r2, ip
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	d000      	beq.n	80098ae <_strtod_l+0x31e>
 80098ac:	e6c7      	b.n	800963e <_strtod_l+0xae>
 80098ae:	2b69      	cmp	r3, #105	@ 0x69
 80098b0:	d027      	beq.n	8009902 <_strtod_l+0x372>
 80098b2:	dc23      	bgt.n	80098fc <_strtod_l+0x36c>
 80098b4:	2b49      	cmp	r3, #73	@ 0x49
 80098b6:	d024      	beq.n	8009902 <_strtod_l+0x372>
 80098b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80098ba:	d000      	beq.n	80098be <_strtod_l+0x32e>
 80098bc:	e6bf      	b.n	800963e <_strtod_l+0xae>
 80098be:	49a5      	ldr	r1, [pc, #660]	@ (8009b54 <_strtod_l+0x5c4>)
 80098c0:	a81d      	add	r0, sp, #116	@ 0x74
 80098c2:	f002 ff69 	bl	800c798 <__match>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d100      	bne.n	80098cc <_strtod_l+0x33c>
 80098ca:	e6b8      	b.n	800963e <_strtod_l+0xae>
 80098cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b28      	cmp	r3, #40	@ 0x28
 80098d2:	d12c      	bne.n	800992e <_strtod_l+0x39e>
 80098d4:	49a0      	ldr	r1, [pc, #640]	@ (8009b58 <_strtod_l+0x5c8>)
 80098d6:	aa20      	add	r2, sp, #128	@ 0x80
 80098d8:	a81d      	add	r0, sp, #116	@ 0x74
 80098da:	f002 ff71 	bl	800c7c0 <__hexnan>
 80098de:	2805      	cmp	r0, #5
 80098e0:	d125      	bne.n	800992e <_strtod_l+0x39e>
 80098e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098e4:	4a9d      	ldr	r2, [pc, #628]	@ (8009b5c <_strtod_l+0x5cc>)
 80098e6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80098e8:	431a      	orrs	r2, r3
 80098ea:	0017      	movs	r7, r2
 80098ec:	e68b      	b.n	8009606 <_strtod_l+0x76>
 80098ee:	220a      	movs	r2, #10
 80098f0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80098f2:	434a      	muls	r2, r1
 80098f4:	18d2      	adds	r2, r2, r3
 80098f6:	3a30      	subs	r2, #48	@ 0x30
 80098f8:	9210      	str	r2, [sp, #64]	@ 0x40
 80098fa:	e7b5      	b.n	8009868 <_strtod_l+0x2d8>
 80098fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80098fe:	d0de      	beq.n	80098be <_strtod_l+0x32e>
 8009900:	e69d      	b.n	800963e <_strtod_l+0xae>
 8009902:	4997      	ldr	r1, [pc, #604]	@ (8009b60 <_strtod_l+0x5d0>)
 8009904:	a81d      	add	r0, sp, #116	@ 0x74
 8009906:	f002 ff47 	bl	800c798 <__match>
 800990a:	2800      	cmp	r0, #0
 800990c:	d100      	bne.n	8009910 <_strtod_l+0x380>
 800990e:	e696      	b.n	800963e <_strtod_l+0xae>
 8009910:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009912:	4994      	ldr	r1, [pc, #592]	@ (8009b64 <_strtod_l+0x5d4>)
 8009914:	3b01      	subs	r3, #1
 8009916:	a81d      	add	r0, sp, #116	@ 0x74
 8009918:	931d      	str	r3, [sp, #116]	@ 0x74
 800991a:	f002 ff3d 	bl	800c798 <__match>
 800991e:	2800      	cmp	r0, #0
 8009920:	d102      	bne.n	8009928 <_strtod_l+0x398>
 8009922:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009924:	3301      	adds	r3, #1
 8009926:	931d      	str	r3, [sp, #116]	@ 0x74
 8009928:	2600      	movs	r6, #0
 800992a:	4f8c      	ldr	r7, [pc, #560]	@ (8009b5c <_strtod_l+0x5cc>)
 800992c:	e66b      	b.n	8009606 <_strtod_l+0x76>
 800992e:	488e      	ldr	r0, [pc, #568]	@ (8009b68 <_strtod_l+0x5d8>)
 8009930:	f001 fdbe 	bl	800b4b0 <nan>
 8009934:	0006      	movs	r6, r0
 8009936:	000f      	movs	r7, r1
 8009938:	e665      	b.n	8009606 <_strtod_l+0x76>
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800993e:	1a9b      	subs	r3, r3, r2
 8009940:	930c      	str	r3, [sp, #48]	@ 0x30
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <_strtod_l+0x3bc>
 8009948:	9b06      	ldr	r3, [sp, #24]
 800994a:	9308      	str	r3, [sp, #32]
 800994c:	9c06      	ldr	r4, [sp, #24]
 800994e:	2c10      	cmp	r4, #16
 8009950:	dd00      	ble.n	8009954 <_strtod_l+0x3c4>
 8009952:	2410      	movs	r4, #16
 8009954:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009956:	f7f8 ffeb 	bl	8002930 <__aeabi_ui2d>
 800995a:	9b06      	ldr	r3, [sp, #24]
 800995c:	0006      	movs	r6, r0
 800995e:	000f      	movs	r7, r1
 8009960:	2b09      	cmp	r3, #9
 8009962:	dc13      	bgt.n	800998c <_strtod_l+0x3fc>
 8009964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009966:	2b00      	cmp	r3, #0
 8009968:	d100      	bne.n	800996c <_strtod_l+0x3dc>
 800996a:	e64c      	b.n	8009606 <_strtod_l+0x76>
 800996c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800996e:	2b00      	cmp	r3, #0
 8009970:	dc00      	bgt.n	8009974 <_strtod_l+0x3e4>
 8009972:	e07e      	b.n	8009a72 <_strtod_l+0x4e2>
 8009974:	2b16      	cmp	r3, #22
 8009976:	dc63      	bgt.n	8009a40 <_strtod_l+0x4b0>
 8009978:	497c      	ldr	r1, [pc, #496]	@ (8009b6c <_strtod_l+0x5dc>)
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	18c9      	adds	r1, r1, r3
 800997e:	0032      	movs	r2, r6
 8009980:	6808      	ldr	r0, [r1, #0]
 8009982:	6849      	ldr	r1, [r1, #4]
 8009984:	003b      	movs	r3, r7
 8009986:	f7f8 f8e3 	bl	8001b50 <__aeabi_dmul>
 800998a:	e7d3      	b.n	8009934 <_strtod_l+0x3a4>
 800998c:	0022      	movs	r2, r4
 800998e:	4b77      	ldr	r3, [pc, #476]	@ (8009b6c <_strtod_l+0x5dc>)
 8009990:	3a09      	subs	r2, #9
 8009992:	00d2      	lsls	r2, r2, #3
 8009994:	189b      	adds	r3, r3, r2
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f7f8 f8d9 	bl	8001b50 <__aeabi_dmul>
 800999e:	0006      	movs	r6, r0
 80099a0:	0028      	movs	r0, r5
 80099a2:	000f      	movs	r7, r1
 80099a4:	f7f8 ffc4 	bl	8002930 <__aeabi_ui2d>
 80099a8:	000b      	movs	r3, r1
 80099aa:	0002      	movs	r2, r0
 80099ac:	0039      	movs	r1, r7
 80099ae:	0030      	movs	r0, r6
 80099b0:	f7f7 f926 	bl	8000c00 <__aeabi_dadd>
 80099b4:	9b06      	ldr	r3, [sp, #24]
 80099b6:	0006      	movs	r6, r0
 80099b8:	000f      	movs	r7, r1
 80099ba:	2b0f      	cmp	r3, #15
 80099bc:	ddd2      	ble.n	8009964 <_strtod_l+0x3d4>
 80099be:	9b06      	ldr	r3, [sp, #24]
 80099c0:	1b1c      	subs	r4, r3, r4
 80099c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099c4:	18e4      	adds	r4, r4, r3
 80099c6:	2c00      	cmp	r4, #0
 80099c8:	dc00      	bgt.n	80099cc <_strtod_l+0x43c>
 80099ca:	e09b      	b.n	8009b04 <_strtod_l+0x574>
 80099cc:	220f      	movs	r2, #15
 80099ce:	0023      	movs	r3, r4
 80099d0:	4013      	ands	r3, r2
 80099d2:	4214      	tst	r4, r2
 80099d4:	d00a      	beq.n	80099ec <_strtod_l+0x45c>
 80099d6:	4965      	ldr	r1, [pc, #404]	@ (8009b6c <_strtod_l+0x5dc>)
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	18c9      	adds	r1, r1, r3
 80099dc:	0032      	movs	r2, r6
 80099de:	6808      	ldr	r0, [r1, #0]
 80099e0:	6849      	ldr	r1, [r1, #4]
 80099e2:	003b      	movs	r3, r7
 80099e4:	f7f8 f8b4 	bl	8001b50 <__aeabi_dmul>
 80099e8:	0006      	movs	r6, r0
 80099ea:	000f      	movs	r7, r1
 80099ec:	230f      	movs	r3, #15
 80099ee:	439c      	bics	r4, r3
 80099f0:	d073      	beq.n	8009ada <_strtod_l+0x54a>
 80099f2:	3326      	adds	r3, #38	@ 0x26
 80099f4:	33ff      	adds	r3, #255	@ 0xff
 80099f6:	429c      	cmp	r4, r3
 80099f8:	dd4b      	ble.n	8009a92 <_strtod_l+0x502>
 80099fa:	2300      	movs	r3, #0
 80099fc:	9306      	str	r3, [sp, #24]
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a02:	9308      	str	r3, [sp, #32]
 8009a04:	2322      	movs	r3, #34	@ 0x22
 8009a06:	2600      	movs	r6, #0
 8009a08:	9a05      	ldr	r2, [sp, #20]
 8009a0a:	4f54      	ldr	r7, [pc, #336]	@ (8009b5c <_strtod_l+0x5cc>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a10:	42b3      	cmp	r3, r6
 8009a12:	d100      	bne.n	8009a16 <_strtod_l+0x486>
 8009a14:	e5f7      	b.n	8009606 <_strtod_l+0x76>
 8009a16:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009a18:	9805      	ldr	r0, [sp, #20]
 8009a1a:	f003 f88b 	bl	800cb34 <_Bfree>
 8009a1e:	9908      	ldr	r1, [sp, #32]
 8009a20:	9805      	ldr	r0, [sp, #20]
 8009a22:	f003 f887 	bl	800cb34 <_Bfree>
 8009a26:	9907      	ldr	r1, [sp, #28]
 8009a28:	9805      	ldr	r0, [sp, #20]
 8009a2a:	f003 f883 	bl	800cb34 <_Bfree>
 8009a2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009a30:	9805      	ldr	r0, [sp, #20]
 8009a32:	f003 f87f 	bl	800cb34 <_Bfree>
 8009a36:	9906      	ldr	r1, [sp, #24]
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	f003 f87b 	bl	800cb34 <_Bfree>
 8009a3e:	e5e2      	b.n	8009606 <_strtod_l+0x76>
 8009a40:	2325      	movs	r3, #37	@ 0x25
 8009a42:	9a06      	ldr	r2, [sp, #24]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	dbb8      	blt.n	80099be <_strtod_l+0x42e>
 8009a4c:	240f      	movs	r4, #15
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	4d46      	ldr	r5, [pc, #280]	@ (8009b6c <_strtod_l+0x5dc>)
 8009a52:	1ae4      	subs	r4, r4, r3
 8009a54:	00e1      	lsls	r1, r4, #3
 8009a56:	1869      	adds	r1, r5, r1
 8009a58:	0032      	movs	r2, r6
 8009a5a:	6808      	ldr	r0, [r1, #0]
 8009a5c:	6849      	ldr	r1, [r1, #4]
 8009a5e:	003b      	movs	r3, r7
 8009a60:	f7f8 f876 	bl	8001b50 <__aeabi_dmul>
 8009a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a66:	1b1c      	subs	r4, r3, r4
 8009a68:	00e4      	lsls	r4, r4, #3
 8009a6a:	192d      	adds	r5, r5, r4
 8009a6c:	682a      	ldr	r2, [r5, #0]
 8009a6e:	686b      	ldr	r3, [r5, #4]
 8009a70:	e789      	b.n	8009986 <_strtod_l+0x3f6>
 8009a72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a74:	3316      	adds	r3, #22
 8009a76:	dba2      	blt.n	80099be <_strtod_l+0x42e>
 8009a78:	9907      	ldr	r1, [sp, #28]
 8009a7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8009b6c <_strtod_l+0x5dc>)
 8009a7e:	1a52      	subs	r2, r2, r1
 8009a80:	00d2      	lsls	r2, r2, #3
 8009a82:	189b      	adds	r3, r3, r2
 8009a84:	0030      	movs	r0, r6
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	0039      	movs	r1, r7
 8009a8c:	f7f7 fc1c 	bl	80012c8 <__aeabi_ddiv>
 8009a90:	e750      	b.n	8009934 <_strtod_l+0x3a4>
 8009a92:	2300      	movs	r3, #0
 8009a94:	0030      	movs	r0, r6
 8009a96:	0039      	movs	r1, r7
 8009a98:	4d35      	ldr	r5, [pc, #212]	@ (8009b70 <_strtod_l+0x5e0>)
 8009a9a:	1124      	asrs	r4, r4, #4
 8009a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9e:	2c01      	cmp	r4, #1
 8009aa0:	dc1e      	bgt.n	8009ae0 <_strtod_l+0x550>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <_strtod_l+0x51a>
 8009aa6:	0006      	movs	r6, r0
 8009aa8:	000f      	movs	r7, r1
 8009aaa:	4b32      	ldr	r3, [pc, #200]	@ (8009b74 <_strtod_l+0x5e4>)
 8009aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aae:	18ff      	adds	r7, r7, r3
 8009ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8009b70 <_strtod_l+0x5e0>)
 8009ab2:	00d5      	lsls	r5, r2, #3
 8009ab4:	195d      	adds	r5, r3, r5
 8009ab6:	0032      	movs	r2, r6
 8009ab8:	6828      	ldr	r0, [r5, #0]
 8009aba:	6869      	ldr	r1, [r5, #4]
 8009abc:	003b      	movs	r3, r7
 8009abe:	f7f8 f847 	bl	8001b50 <__aeabi_dmul>
 8009ac2:	4b26      	ldr	r3, [pc, #152]	@ (8009b5c <_strtod_l+0x5cc>)
 8009ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8009b78 <_strtod_l+0x5e8>)
 8009ac6:	0006      	movs	r6, r0
 8009ac8:	400b      	ands	r3, r1
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d895      	bhi.n	80099fa <_strtod_l+0x46a>
 8009ace:	4a2b      	ldr	r2, [pc, #172]	@ (8009b7c <_strtod_l+0x5ec>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d913      	bls.n	8009afc <_strtod_l+0x56c>
 8009ad4:	2601      	movs	r6, #1
 8009ad6:	4f2a      	ldr	r7, [pc, #168]	@ (8009b80 <_strtod_l+0x5f0>)
 8009ad8:	4276      	negs	r6, r6
 8009ada:	2300      	movs	r3, #0
 8009adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ade:	e086      	b.n	8009bee <_strtod_l+0x65e>
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	4214      	tst	r4, r2
 8009ae4:	d004      	beq.n	8009af0 <_strtod_l+0x560>
 8009ae6:	682a      	ldr	r2, [r5, #0]
 8009ae8:	686b      	ldr	r3, [r5, #4]
 8009aea:	f7f8 f831 	bl	8001b50 <__aeabi_dmul>
 8009aee:	2301      	movs	r3, #1
 8009af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009af2:	1064      	asrs	r4, r4, #1
 8009af4:	3201      	adds	r2, #1
 8009af6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009af8:	3508      	adds	r5, #8
 8009afa:	e7d0      	b.n	8009a9e <_strtod_l+0x50e>
 8009afc:	23d4      	movs	r3, #212	@ 0xd4
 8009afe:	049b      	lsls	r3, r3, #18
 8009b00:	18cf      	adds	r7, r1, r3
 8009b02:	e7ea      	b.n	8009ada <_strtod_l+0x54a>
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	d0e8      	beq.n	8009ada <_strtod_l+0x54a>
 8009b08:	4264      	negs	r4, r4
 8009b0a:	230f      	movs	r3, #15
 8009b0c:	0022      	movs	r2, r4
 8009b0e:	401a      	ands	r2, r3
 8009b10:	421c      	tst	r4, r3
 8009b12:	d00a      	beq.n	8009b2a <_strtod_l+0x59a>
 8009b14:	4b15      	ldr	r3, [pc, #84]	@ (8009b6c <_strtod_l+0x5dc>)
 8009b16:	00d2      	lsls	r2, r2, #3
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	0030      	movs	r0, r6
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	0039      	movs	r1, r7
 8009b22:	f7f7 fbd1 	bl	80012c8 <__aeabi_ddiv>
 8009b26:	0006      	movs	r6, r0
 8009b28:	000f      	movs	r7, r1
 8009b2a:	1124      	asrs	r4, r4, #4
 8009b2c:	d0d5      	beq.n	8009ada <_strtod_l+0x54a>
 8009b2e:	2c1f      	cmp	r4, #31
 8009b30:	dd28      	ble.n	8009b84 <_strtod_l+0x5f4>
 8009b32:	2300      	movs	r3, #0
 8009b34:	9306      	str	r3, [sp, #24]
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b3a:	9308      	str	r3, [sp, #32]
 8009b3c:	2322      	movs	r3, #34	@ 0x22
 8009b3e:	9a05      	ldr	r2, [sp, #20]
 8009b40:	2600      	movs	r6, #0
 8009b42:	6013      	str	r3, [r2, #0]
 8009b44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b46:	2700      	movs	r7, #0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d000      	beq.n	8009b4e <_strtod_l+0x5be>
 8009b4c:	e763      	b.n	8009a16 <_strtod_l+0x486>
 8009b4e:	e55a      	b.n	8009606 <_strtod_l+0x76>
 8009b50:	00004e1f 	.word	0x00004e1f
 8009b54:	0800e93d 	.word	0x0800e93d
 8009b58:	0800e8dc 	.word	0x0800e8dc
 8009b5c:	7ff00000 	.word	0x7ff00000
 8009b60:	0800e935 	.word	0x0800e935
 8009b64:	0800e972 	.word	0x0800e972
 8009b68:	0800ed20 	.word	0x0800ed20
 8009b6c:	0800eaf0 	.word	0x0800eaf0
 8009b70:	0800eac8 	.word	0x0800eac8
 8009b74:	fcb00000 	.word	0xfcb00000
 8009b78:	7ca00000 	.word	0x7ca00000
 8009b7c:	7c900000 	.word	0x7c900000
 8009b80:	7fefffff 	.word	0x7fefffff
 8009b84:	2310      	movs	r3, #16
 8009b86:	0022      	movs	r2, r4
 8009b88:	401a      	ands	r2, r3
 8009b8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b8c:	421c      	tst	r4, r3
 8009b8e:	d001      	beq.n	8009b94 <_strtod_l+0x604>
 8009b90:	335a      	adds	r3, #90	@ 0x5a
 8009b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b94:	0030      	movs	r0, r6
 8009b96:	0039      	movs	r1, r7
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4dbf      	ldr	r5, [pc, #764]	@ (8009e98 <_strtod_l+0x908>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	4214      	tst	r4, r2
 8009ba0:	d004      	beq.n	8009bac <_strtod_l+0x61c>
 8009ba2:	682a      	ldr	r2, [r5, #0]
 8009ba4:	686b      	ldr	r3, [r5, #4]
 8009ba6:	f7f7 ffd3 	bl	8001b50 <__aeabi_dmul>
 8009baa:	2301      	movs	r3, #1
 8009bac:	1064      	asrs	r4, r4, #1
 8009bae:	3508      	adds	r5, #8
 8009bb0:	2c00      	cmp	r4, #0
 8009bb2:	d1f3      	bne.n	8009b9c <_strtod_l+0x60c>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <_strtod_l+0x62c>
 8009bb8:	0006      	movs	r6, r0
 8009bba:	000f      	movs	r7, r1
 8009bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00d      	beq.n	8009bde <_strtod_l+0x64e>
 8009bc2:	236b      	movs	r3, #107	@ 0x6b
 8009bc4:	007a      	lsls	r2, r7, #1
 8009bc6:	0d52      	lsrs	r2, r2, #21
 8009bc8:	0039      	movs	r1, r7
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dd06      	ble.n	8009bde <_strtod_l+0x64e>
 8009bd0:	2b1f      	cmp	r3, #31
 8009bd2:	dd5a      	ble.n	8009c8a <_strtod_l+0x6fa>
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	2b34      	cmp	r3, #52	@ 0x34
 8009bd8:	dd50      	ble.n	8009c7c <_strtod_l+0x6ec>
 8009bda:	27dc      	movs	r7, #220	@ 0xdc
 8009bdc:	04bf      	lsls	r7, r7, #18
 8009bde:	2200      	movs	r2, #0
 8009be0:	2300      	movs	r3, #0
 8009be2:	0030      	movs	r0, r6
 8009be4:	0039      	movs	r1, r7
 8009be6:	f7f6 fc3b 	bl	8000460 <__aeabi_dcmpeq>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1a1      	bne.n	8009b32 <_strtod_l+0x5a2>
 8009bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bf0:	9a08      	ldr	r2, [sp, #32]
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009bf6:	9b06      	ldr	r3, [sp, #24]
 8009bf8:	9805      	ldr	r0, [sp, #20]
 8009bfa:	f003 f803 	bl	800cc04 <__s2b>
 8009bfe:	900d      	str	r0, [sp, #52]	@ 0x34
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d100      	bne.n	8009c06 <_strtod_l+0x676>
 8009c04:	e6f9      	b.n	80099fa <_strtod_l+0x46a>
 8009c06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c08:	9907      	ldr	r1, [sp, #28]
 8009c0a:	17da      	asrs	r2, r3, #31
 8009c0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0e:	1a5b      	subs	r3, r3, r1
 8009c10:	401a      	ands	r2, r3
 8009c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c14:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009c16:	43db      	mvns	r3, r3
 8009c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c1a:	17db      	asrs	r3, r3, #31
 8009c1c:	401a      	ands	r2, r3
 8009c1e:	2300      	movs	r3, #0
 8009c20:	921a      	str	r2, [sp, #104]	@ 0x68
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	9307      	str	r3, [sp, #28]
 8009c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c28:	9805      	ldr	r0, [sp, #20]
 8009c2a:	6859      	ldr	r1, [r3, #4]
 8009c2c:	f002 ff3e 	bl	800caac <_Balloc>
 8009c30:	9008      	str	r0, [sp, #32]
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d100      	bne.n	8009c38 <_strtod_l+0x6a8>
 8009c36:	e6e5      	b.n	8009a04 <_strtod_l+0x474>
 8009c38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c3a:	300c      	adds	r0, #12
 8009c3c:	0019      	movs	r1, r3
 8009c3e:	691a      	ldr	r2, [r3, #16]
 8009c40:	310c      	adds	r1, #12
 8009c42:	3202      	adds	r2, #2
 8009c44:	0092      	lsls	r2, r2, #2
 8009c46:	f001 fc29 	bl	800b49c <memcpy>
 8009c4a:	ab20      	add	r3, sp, #128	@ 0x80
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	0032      	movs	r2, r6
 8009c54:	003b      	movs	r3, r7
 8009c56:	9805      	ldr	r0, [sp, #20]
 8009c58:	9610      	str	r6, [sp, #64]	@ 0x40
 8009c5a:	9711      	str	r7, [sp, #68]	@ 0x44
 8009c5c:	f003 fb22 	bl	800d2a4 <__d2b>
 8009c60:	901e      	str	r0, [sp, #120]	@ 0x78
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d100      	bne.n	8009c68 <_strtod_l+0x6d8>
 8009c66:	e6cd      	b.n	8009a04 <_strtod_l+0x474>
 8009c68:	2101      	movs	r1, #1
 8009c6a:	9805      	ldr	r0, [sp, #20]
 8009c6c:	f003 f866 	bl	800cd3c <__i2b>
 8009c70:	9007      	str	r0, [sp, #28]
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d10e      	bne.n	8009c94 <_strtod_l+0x704>
 8009c76:	2300      	movs	r3, #0
 8009c78:	9307      	str	r3, [sp, #28]
 8009c7a:	e6c3      	b.n	8009a04 <_strtod_l+0x474>
 8009c7c:	234b      	movs	r3, #75	@ 0x4b
 8009c7e:	1a9a      	subs	r2, r3, r2
 8009c80:	3b4c      	subs	r3, #76	@ 0x4c
 8009c82:	4093      	lsls	r3, r2
 8009c84:	4019      	ands	r1, r3
 8009c86:	000f      	movs	r7, r1
 8009c88:	e7a9      	b.n	8009bde <_strtod_l+0x64e>
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	4252      	negs	r2, r2
 8009c8e:	409a      	lsls	r2, r3
 8009c90:	4016      	ands	r6, r2
 8009c92:	e7a4      	b.n	8009bde <_strtod_l+0x64e>
 8009c94:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009c96:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c98:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8009c9a:	1ad4      	subs	r4, r2, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	db01      	blt.n	8009ca4 <_strtod_l+0x714>
 8009ca0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009ca2:	195d      	adds	r5, r3, r5
 8009ca4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ca6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ca8:	1a5b      	subs	r3, r3, r1
 8009caa:	2136      	movs	r1, #54	@ 0x36
 8009cac:	189b      	adds	r3, r3, r2
 8009cae:	1a8a      	subs	r2, r1, r2
 8009cb0:	497a      	ldr	r1, [pc, #488]	@ (8009e9c <_strtod_l+0x90c>)
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	468c      	mov	ip, r1
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	9116      	str	r1, [sp, #88]	@ 0x58
 8009cbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cbe:	4563      	cmp	r3, ip
 8009cc0:	da06      	bge.n	8009cd0 <_strtod_l+0x740>
 8009cc2:	4661      	mov	r1, ip
 8009cc4:	1ac9      	subs	r1, r1, r3
 8009cc6:	1a52      	subs	r2, r2, r1
 8009cc8:	291f      	cmp	r1, #31
 8009cca:	dc3f      	bgt.n	8009d4c <_strtod_l+0x7bc>
 8009ccc:	4088      	lsls	r0, r1
 8009cce:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cd0:	18ab      	adds	r3, r5, r2
 8009cd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cd4:	18a4      	adds	r4, r4, r2
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cda:	191c      	adds	r4, r3, r4
 8009cdc:	002b      	movs	r3, r5
 8009cde:	4295      	cmp	r5, r2
 8009ce0:	dd00      	ble.n	8009ce4 <_strtod_l+0x754>
 8009ce2:	0013      	movs	r3, r2
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	dd00      	ble.n	8009cea <_strtod_l+0x75a>
 8009ce8:	0023      	movs	r3, r4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dd04      	ble.n	8009cf8 <_strtod_l+0x768>
 8009cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf0:	1ae4      	subs	r4, r4, r3
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cf6:	1aed      	subs	r5, r5, r3
 8009cf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dd16      	ble.n	8009d2c <_strtod_l+0x79c>
 8009cfe:	001a      	movs	r2, r3
 8009d00:	9907      	ldr	r1, [sp, #28]
 8009d02:	9805      	ldr	r0, [sp, #20]
 8009d04:	f003 f8e4 	bl	800ced0 <__pow5mult>
 8009d08:	9007      	str	r0, [sp, #28]
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0b3      	beq.n	8009c76 <_strtod_l+0x6e6>
 8009d0e:	0001      	movs	r1, r0
 8009d10:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009d12:	9805      	ldr	r0, [sp, #20]
 8009d14:	f003 f82a 	bl	800cd6c <__multiply>
 8009d18:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d100      	bne.n	8009d20 <_strtod_l+0x790>
 8009d1e:	e671      	b.n	8009a04 <_strtod_l+0x474>
 8009d20:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009d22:	9805      	ldr	r0, [sp, #20]
 8009d24:	f002 ff06 	bl	800cb34 <_Bfree>
 8009d28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d2a:	931e      	str	r3, [sp, #120]	@ 0x78
 8009d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dc12      	bgt.n	8009d58 <_strtod_l+0x7c8>
 8009d32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dd18      	ble.n	8009d6a <_strtod_l+0x7da>
 8009d38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d3a:	9908      	ldr	r1, [sp, #32]
 8009d3c:	9805      	ldr	r0, [sp, #20]
 8009d3e:	f003 f8c7 	bl	800ced0 <__pow5mult>
 8009d42:	9008      	str	r0, [sp, #32]
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d110      	bne.n	8009d6a <_strtod_l+0x7da>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e65a      	b.n	8009a02 <_strtod_l+0x472>
 8009d4c:	4954      	ldr	r1, [pc, #336]	@ (8009ea0 <_strtod_l+0x910>)
 8009d4e:	1acb      	subs	r3, r1, r3
 8009d50:	0001      	movs	r1, r0
 8009d52:	4099      	lsls	r1, r3
 8009d54:	9116      	str	r1, [sp, #88]	@ 0x58
 8009d56:	e7ba      	b.n	8009cce <_strtod_l+0x73e>
 8009d58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d5a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	f003 f913 	bl	800cf88 <__lshift>
 8009d62:	901e      	str	r0, [sp, #120]	@ 0x78
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1e4      	bne.n	8009d32 <_strtod_l+0x7a2>
 8009d68:	e64c      	b.n	8009a04 <_strtod_l+0x474>
 8009d6a:	2c00      	cmp	r4, #0
 8009d6c:	dd07      	ble.n	8009d7e <_strtod_l+0x7ee>
 8009d6e:	0022      	movs	r2, r4
 8009d70:	9908      	ldr	r1, [sp, #32]
 8009d72:	9805      	ldr	r0, [sp, #20]
 8009d74:	f003 f908 	bl	800cf88 <__lshift>
 8009d78:	9008      	str	r0, [sp, #32]
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d0e4      	beq.n	8009d48 <_strtod_l+0x7b8>
 8009d7e:	2d00      	cmp	r5, #0
 8009d80:	dd08      	ble.n	8009d94 <_strtod_l+0x804>
 8009d82:	002a      	movs	r2, r5
 8009d84:	9907      	ldr	r1, [sp, #28]
 8009d86:	9805      	ldr	r0, [sp, #20]
 8009d88:	f003 f8fe 	bl	800cf88 <__lshift>
 8009d8c:	9007      	str	r0, [sp, #28]
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d100      	bne.n	8009d94 <_strtod_l+0x804>
 8009d92:	e637      	b.n	8009a04 <_strtod_l+0x474>
 8009d94:	9a08      	ldr	r2, [sp, #32]
 8009d96:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009d98:	9805      	ldr	r0, [sp, #20]
 8009d9a:	f003 f97d 	bl	800d098 <__mdiff>
 8009d9e:	9006      	str	r0, [sp, #24]
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d100      	bne.n	8009da6 <_strtod_l+0x816>
 8009da4:	e62e      	b.n	8009a04 <_strtod_l+0x474>
 8009da6:	68c3      	ldr	r3, [r0, #12]
 8009da8:	9907      	ldr	r1, [sp, #28]
 8009daa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dac:	2300      	movs	r3, #0
 8009dae:	60c3      	str	r3, [r0, #12]
 8009db0:	f003 f956 	bl	800d060 <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	da3b      	bge.n	8009e30 <_strtod_l+0x8a0>
 8009db8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dba:	4333      	orrs	r3, r6
 8009dbc:	d167      	bne.n	8009e8e <_strtod_l+0x8fe>
 8009dbe:	033b      	lsls	r3, r7, #12
 8009dc0:	d165      	bne.n	8009e8e <_strtod_l+0x8fe>
 8009dc2:	22d6      	movs	r2, #214	@ 0xd6
 8009dc4:	4b37      	ldr	r3, [pc, #220]	@ (8009ea4 <_strtod_l+0x914>)
 8009dc6:	04d2      	lsls	r2, r2, #19
 8009dc8:	403b      	ands	r3, r7
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d95f      	bls.n	8009e8e <_strtod_l+0x8fe>
 8009dce:	9b06      	ldr	r3, [sp, #24]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d103      	bne.n	8009dde <_strtod_l+0x84e>
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	dd57      	ble.n	8009e8e <_strtod_l+0x8fe>
 8009dde:	9906      	ldr	r1, [sp, #24]
 8009de0:	2201      	movs	r2, #1
 8009de2:	9805      	ldr	r0, [sp, #20]
 8009de4:	f003 f8d0 	bl	800cf88 <__lshift>
 8009de8:	9907      	ldr	r1, [sp, #28]
 8009dea:	9006      	str	r0, [sp, #24]
 8009dec:	f003 f938 	bl	800d060 <__mcmp>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	dd4c      	ble.n	8009e8e <_strtod_l+0x8fe>
 8009df4:	4b2b      	ldr	r3, [pc, #172]	@ (8009ea4 <_strtod_l+0x914>)
 8009df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df8:	403b      	ands	r3, r7
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d074      	beq.n	8009ee8 <_strtod_l+0x958>
 8009dfe:	22d6      	movs	r2, #214	@ 0xd6
 8009e00:	04d2      	lsls	r2, r2, #19
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d870      	bhi.n	8009ee8 <_strtod_l+0x958>
 8009e06:	22dc      	movs	r2, #220	@ 0xdc
 8009e08:	0492      	lsls	r2, r2, #18
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d800      	bhi.n	8009e10 <_strtod_l+0x880>
 8009e0e:	e695      	b.n	8009b3c <_strtod_l+0x5ac>
 8009e10:	0030      	movs	r0, r6
 8009e12:	0039      	movs	r1, r7
 8009e14:	4b24      	ldr	r3, [pc, #144]	@ (8009ea8 <_strtod_l+0x918>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	f7f7 fe9a 	bl	8001b50 <__aeabi_dmul>
 8009e1c:	4b21      	ldr	r3, [pc, #132]	@ (8009ea4 <_strtod_l+0x914>)
 8009e1e:	0006      	movs	r6, r0
 8009e20:	000f      	movs	r7, r1
 8009e22:	420b      	tst	r3, r1
 8009e24:	d000      	beq.n	8009e28 <_strtod_l+0x898>
 8009e26:	e5f6      	b.n	8009a16 <_strtod_l+0x486>
 8009e28:	2322      	movs	r3, #34	@ 0x22
 8009e2a:	9a05      	ldr	r2, [sp, #20]
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	e5f2      	b.n	8009a16 <_strtod_l+0x486>
 8009e30:	970e      	str	r7, [sp, #56]	@ 0x38
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d175      	bne.n	8009f22 <_strtod_l+0x992>
 8009e36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e38:	033b      	lsls	r3, r7, #12
 8009e3a:	0b1b      	lsrs	r3, r3, #12
 8009e3c:	2a00      	cmp	r2, #0
 8009e3e:	d039      	beq.n	8009eb4 <_strtod_l+0x924>
 8009e40:	4a1a      	ldr	r2, [pc, #104]	@ (8009eac <_strtod_l+0x91c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d138      	bne.n	8009eb8 <_strtod_l+0x928>
 8009e46:	2101      	movs	r1, #1
 8009e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4a:	4249      	negs	r1, r1
 8009e4c:	0032      	movs	r2, r6
 8009e4e:	0008      	movs	r0, r1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <_strtod_l+0x8dc>
 8009e54:	24d4      	movs	r4, #212	@ 0xd4
 8009e56:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <_strtod_l+0x914>)
 8009e58:	0008      	movs	r0, r1
 8009e5a:	403b      	ands	r3, r7
 8009e5c:	04e4      	lsls	r4, r4, #19
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	d804      	bhi.n	8009e6c <_strtod_l+0x8dc>
 8009e62:	306c      	adds	r0, #108	@ 0x6c
 8009e64:	0d1b      	lsrs	r3, r3, #20
 8009e66:	1ac3      	subs	r3, r0, r3
 8009e68:	4099      	lsls	r1, r3
 8009e6a:	0008      	movs	r0, r1
 8009e6c:	4282      	cmp	r2, r0
 8009e6e:	d123      	bne.n	8009eb8 <_strtod_l+0x928>
 8009e70:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb0 <_strtod_l+0x920>)
 8009e72:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e74:	4299      	cmp	r1, r3
 8009e76:	d102      	bne.n	8009e7e <_strtod_l+0x8ee>
 8009e78:	3201      	adds	r2, #1
 8009e7a:	d100      	bne.n	8009e7e <_strtod_l+0x8ee>
 8009e7c:	e5c2      	b.n	8009a04 <_strtod_l+0x474>
 8009e7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ea4 <_strtod_l+0x914>)
 8009e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e82:	2600      	movs	r6, #0
 8009e84:	401a      	ands	r2, r3
 8009e86:	0013      	movs	r3, r2
 8009e88:	2280      	movs	r2, #128	@ 0x80
 8009e8a:	0352      	lsls	r2, r2, #13
 8009e8c:	189f      	adds	r7, r3, r2
 8009e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1bd      	bne.n	8009e10 <_strtod_l+0x880>
 8009e94:	e5bf      	b.n	8009a16 <_strtod_l+0x486>
 8009e96:	46c0      	nop			@ (mov r8, r8)
 8009e98:	0800e908 	.word	0x0800e908
 8009e9c:	fffffc02 	.word	0xfffffc02
 8009ea0:	fffffbe2 	.word	0xfffffbe2
 8009ea4:	7ff00000 	.word	0x7ff00000
 8009ea8:	39500000 	.word	0x39500000
 8009eac:	000fffff 	.word	0x000fffff
 8009eb0:	7fefffff 	.word	0x7fefffff
 8009eb4:	4333      	orrs	r3, r6
 8009eb6:	d09d      	beq.n	8009df4 <_strtod_l+0x864>
 8009eb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01c      	beq.n	8009ef8 <_strtod_l+0x968>
 8009ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ec0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009ec2:	4213      	tst	r3, r2
 8009ec4:	d0e3      	beq.n	8009e8e <_strtod_l+0x8fe>
 8009ec6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ec8:	0030      	movs	r0, r6
 8009eca:	0039      	movs	r1, r7
 8009ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d016      	beq.n	8009f00 <_strtod_l+0x970>
 8009ed2:	f7ff fb45 	bl	8009560 <sulp>
 8009ed6:	0002      	movs	r2, r0
 8009ed8:	000b      	movs	r3, r1
 8009eda:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009edc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009ede:	f7f6 fe8f 	bl	8000c00 <__aeabi_dadd>
 8009ee2:	0006      	movs	r6, r0
 8009ee4:	000f      	movs	r7, r1
 8009ee6:	e7d2      	b.n	8009e8e <_strtod_l+0x8fe>
 8009ee8:	2601      	movs	r6, #1
 8009eea:	4a92      	ldr	r2, [pc, #584]	@ (800a134 <_strtod_l+0xba4>)
 8009eec:	4276      	negs	r6, r6
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	4a91      	ldr	r2, [pc, #580]	@ (800a138 <_strtod_l+0xba8>)
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	0017      	movs	r7, r2
 8009ef6:	e7ca      	b.n	8009e8e <_strtod_l+0x8fe>
 8009ef8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009efa:	4233      	tst	r3, r6
 8009efc:	d0c7      	beq.n	8009e8e <_strtod_l+0x8fe>
 8009efe:	e7e2      	b.n	8009ec6 <_strtod_l+0x936>
 8009f00:	f7ff fb2e 	bl	8009560 <sulp>
 8009f04:	0002      	movs	r2, r0
 8009f06:	000b      	movs	r3, r1
 8009f08:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009f0a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009f0c:	f7f8 f8e8 	bl	80020e0 <__aeabi_dsub>
 8009f10:	2200      	movs	r2, #0
 8009f12:	2300      	movs	r3, #0
 8009f14:	0006      	movs	r6, r0
 8009f16:	000f      	movs	r7, r1
 8009f18:	f7f6 faa2 	bl	8000460 <__aeabi_dcmpeq>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d0b6      	beq.n	8009e8e <_strtod_l+0x8fe>
 8009f20:	e60c      	b.n	8009b3c <_strtod_l+0x5ac>
 8009f22:	9907      	ldr	r1, [sp, #28]
 8009f24:	9806      	ldr	r0, [sp, #24]
 8009f26:	f003 fa1d 	bl	800d364 <__ratio>
 8009f2a:	2380      	movs	r3, #128	@ 0x80
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	05db      	lsls	r3, r3, #23
 8009f30:	0004      	movs	r4, r0
 8009f32:	000d      	movs	r5, r1
 8009f34:	f7f6 faa4 	bl	8000480 <__aeabi_dcmple>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d06c      	beq.n	800a016 <_strtod_l+0xa86>
 8009f3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d177      	bne.n	800a032 <_strtod_l+0xaa2>
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d157      	bne.n	8009ff6 <_strtod_l+0xa66>
 8009f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f48:	031b      	lsls	r3, r3, #12
 8009f4a:	d15a      	bne.n	800a002 <_strtod_l+0xa72>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	0020      	movs	r0, r4
 8009f50:	0029      	movs	r1, r5
 8009f52:	4b7a      	ldr	r3, [pc, #488]	@ (800a13c <_strtod_l+0xbac>)
 8009f54:	f7f6 fa8a 	bl	800046c <__aeabi_dcmplt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d159      	bne.n	800a010 <_strtod_l+0xa80>
 8009f5c:	0020      	movs	r0, r4
 8009f5e:	0029      	movs	r1, r5
 8009f60:	2200      	movs	r2, #0
 8009f62:	4b77      	ldr	r3, [pc, #476]	@ (800a140 <_strtod_l+0xbb0>)
 8009f64:	f7f7 fdf4 	bl	8001b50 <__aeabi_dmul>
 8009f68:	0004      	movs	r4, r0
 8009f6a:	000d      	movs	r5, r1
 8009f6c:	2380      	movs	r3, #128	@ 0x80
 8009f6e:	061b      	lsls	r3, r3, #24
 8009f70:	18eb      	adds	r3, r5, r3
 8009f72:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f7a:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f7e:	4a71      	ldr	r2, [pc, #452]	@ (800a144 <_strtod_l+0xbb4>)
 8009f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f82:	4013      	ands	r3, r2
 8009f84:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f88:	4b6f      	ldr	r3, [pc, #444]	@ (800a148 <_strtod_l+0xbb8>)
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d000      	beq.n	8009f90 <_strtod_l+0xa00>
 8009f8e:	e087      	b.n	800a0a0 <_strtod_l+0xb10>
 8009f90:	4a6e      	ldr	r2, [pc, #440]	@ (800a14c <_strtod_l+0xbbc>)
 8009f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f94:	4694      	mov	ip, r2
 8009f96:	4463      	add	r3, ip
 8009f98:	001f      	movs	r7, r3
 8009f9a:	0030      	movs	r0, r6
 8009f9c:	0019      	movs	r1, r3
 8009f9e:	f003 f915 	bl	800d1cc <__ulp>
 8009fa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fa6:	f7f7 fdd3 	bl	8001b50 <__aeabi_dmul>
 8009faa:	0032      	movs	r2, r6
 8009fac:	003b      	movs	r3, r7
 8009fae:	f7f6 fe27 	bl	8000c00 <__aeabi_dadd>
 8009fb2:	4a64      	ldr	r2, [pc, #400]	@ (800a144 <_strtod_l+0xbb4>)
 8009fb4:	4b66      	ldr	r3, [pc, #408]	@ (800a150 <_strtod_l+0xbc0>)
 8009fb6:	0006      	movs	r6, r0
 8009fb8:	400a      	ands	r2, r1
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d940      	bls.n	800a040 <_strtod_l+0xab0>
 8009fbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fc0:	4a64      	ldr	r2, [pc, #400]	@ (800a154 <_strtod_l+0xbc4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d103      	bne.n	8009fce <_strtod_l+0xa3e>
 8009fc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009fc8:	3301      	adds	r3, #1
 8009fca:	d100      	bne.n	8009fce <_strtod_l+0xa3e>
 8009fcc:	e51a      	b.n	8009a04 <_strtod_l+0x474>
 8009fce:	2601      	movs	r6, #1
 8009fd0:	4f60      	ldr	r7, [pc, #384]	@ (800a154 <_strtod_l+0xbc4>)
 8009fd2:	4276      	negs	r6, r6
 8009fd4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009fd6:	9805      	ldr	r0, [sp, #20]
 8009fd8:	f002 fdac 	bl	800cb34 <_Bfree>
 8009fdc:	9908      	ldr	r1, [sp, #32]
 8009fde:	9805      	ldr	r0, [sp, #20]
 8009fe0:	f002 fda8 	bl	800cb34 <_Bfree>
 8009fe4:	9907      	ldr	r1, [sp, #28]
 8009fe6:	9805      	ldr	r0, [sp, #20]
 8009fe8:	f002 fda4 	bl	800cb34 <_Bfree>
 8009fec:	9906      	ldr	r1, [sp, #24]
 8009fee:	9805      	ldr	r0, [sp, #20]
 8009ff0:	f002 fda0 	bl	800cb34 <_Bfree>
 8009ff4:	e617      	b.n	8009c26 <_strtod_l+0x696>
 8009ff6:	2e01      	cmp	r6, #1
 8009ff8:	d103      	bne.n	800a002 <_strtod_l+0xa72>
 8009ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d100      	bne.n	800a002 <_strtod_l+0xa72>
 800a000:	e59c      	b.n	8009b3c <_strtod_l+0x5ac>
 800a002:	2300      	movs	r3, #0
 800a004:	4c54      	ldr	r4, [pc, #336]	@ (800a158 <_strtod_l+0xbc8>)
 800a006:	4d4d      	ldr	r5, [pc, #308]	@ (800a13c <_strtod_l+0xbac>)
 800a008:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a00c:	2400      	movs	r4, #0
 800a00e:	e7b2      	b.n	8009f76 <_strtod_l+0x9e6>
 800a010:	2400      	movs	r4, #0
 800a012:	4d4b      	ldr	r5, [pc, #300]	@ (800a140 <_strtod_l+0xbb0>)
 800a014:	e7aa      	b.n	8009f6c <_strtod_l+0x9dc>
 800a016:	0020      	movs	r0, r4
 800a018:	0029      	movs	r1, r5
 800a01a:	4b49      	ldr	r3, [pc, #292]	@ (800a140 <_strtod_l+0xbb0>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	f7f7 fd97 	bl	8001b50 <__aeabi_dmul>
 800a022:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a024:	0004      	movs	r4, r0
 800a026:	000d      	movs	r5, r1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d09f      	beq.n	8009f6c <_strtod_l+0x9dc>
 800a02c:	940a      	str	r4, [sp, #40]	@ 0x28
 800a02e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a030:	e7a1      	b.n	8009f76 <_strtod_l+0x9e6>
 800a032:	2300      	movs	r3, #0
 800a034:	4c41      	ldr	r4, [pc, #260]	@ (800a13c <_strtod_l+0xbac>)
 800a036:	0025      	movs	r5, r4
 800a038:	930a      	str	r3, [sp, #40]	@ 0x28
 800a03a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a03c:	001c      	movs	r4, r3
 800a03e:	e79a      	b.n	8009f76 <_strtod_l+0x9e6>
 800a040:	23d4      	movs	r3, #212	@ 0xd4
 800a042:	049b      	lsls	r3, r3, #18
 800a044:	18cf      	adds	r7, r1, r3
 800a046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a048:	9710      	str	r7, [sp, #64]	@ 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1c2      	bne.n	8009fd4 <_strtod_l+0xa44>
 800a04e:	4b3d      	ldr	r3, [pc, #244]	@ (800a144 <_strtod_l+0xbb4>)
 800a050:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a052:	403b      	ands	r3, r7
 800a054:	429a      	cmp	r2, r3
 800a056:	d1bd      	bne.n	8009fd4 <_strtod_l+0xa44>
 800a058:	0020      	movs	r0, r4
 800a05a:	0029      	movs	r1, r5
 800a05c:	f7f6 fa4c 	bl	80004f8 <__aeabi_d2lz>
 800a060:	f7f6 fa84 	bl	800056c <__aeabi_l2d>
 800a064:	0002      	movs	r2, r0
 800a066:	000b      	movs	r3, r1
 800a068:	0020      	movs	r0, r4
 800a06a:	0029      	movs	r1, r5
 800a06c:	f7f8 f838 	bl	80020e0 <__aeabi_dsub>
 800a070:	033c      	lsls	r4, r7, #12
 800a072:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a074:	0b24      	lsrs	r4, r4, #12
 800a076:	4334      	orrs	r4, r6
 800a078:	900e      	str	r0, [sp, #56]	@ 0x38
 800a07a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a07c:	4a37      	ldr	r2, [pc, #220]	@ (800a15c <_strtod_l+0xbcc>)
 800a07e:	431c      	orrs	r4, r3
 800a080:	d052      	beq.n	800a128 <_strtod_l+0xb98>
 800a082:	4b37      	ldr	r3, [pc, #220]	@ (800a160 <_strtod_l+0xbd0>)
 800a084:	f7f6 f9f2 	bl	800046c <__aeabi_dcmplt>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d000      	beq.n	800a08e <_strtod_l+0xafe>
 800a08c:	e4c3      	b.n	8009a16 <_strtod_l+0x486>
 800a08e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a090:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a092:	4a34      	ldr	r2, [pc, #208]	@ (800a164 <_strtod_l+0xbd4>)
 800a094:	4b2a      	ldr	r3, [pc, #168]	@ (800a140 <_strtod_l+0xbb0>)
 800a096:	f7f6 f9fd 	bl	8000494 <__aeabi_dcmpgt>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d09a      	beq.n	8009fd4 <_strtod_l+0xa44>
 800a09e:	e4ba      	b.n	8009a16 <_strtod_l+0x486>
 800a0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d02a      	beq.n	800a0fc <_strtod_l+0xb6c>
 800a0a6:	23d4      	movs	r3, #212	@ 0xd4
 800a0a8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a0aa:	04db      	lsls	r3, r3, #19
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d825      	bhi.n	800a0fc <_strtod_l+0xb6c>
 800a0b0:	0020      	movs	r0, r4
 800a0b2:	0029      	movs	r1, r5
 800a0b4:	4a2c      	ldr	r2, [pc, #176]	@ (800a168 <_strtod_l+0xbd8>)
 800a0b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a16c <_strtod_l+0xbdc>)
 800a0b8:	f7f6 f9e2 	bl	8000480 <__aeabi_dcmple>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d016      	beq.n	800a0ee <_strtod_l+0xb5e>
 800a0c0:	0020      	movs	r0, r4
 800a0c2:	0029      	movs	r1, r5
 800a0c4:	f7f6 f9fa 	bl	80004bc <__aeabi_d2uiz>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d100      	bne.n	800a0ce <_strtod_l+0xb3e>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f7f8 fc2f 	bl	8002930 <__aeabi_ui2d>
 800a0d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a0d4:	0004      	movs	r4, r0
 800a0d6:	000d      	movs	r5, r1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d122      	bne.n	800a122 <_strtod_l+0xb92>
 800a0dc:	2380      	movs	r3, #128	@ 0x80
 800a0de:	061b      	lsls	r3, r3, #24
 800a0e0:	18cb      	adds	r3, r1, r3
 800a0e2:	9018      	str	r0, [sp, #96]	@ 0x60
 800a0e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0ea:	9214      	str	r2, [sp, #80]	@ 0x50
 800a0ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0ee:	22d6      	movs	r2, #214	@ 0xd6
 800a0f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0f2:	04d2      	lsls	r2, r2, #19
 800a0f4:	189b      	adds	r3, r3, r2
 800a0f6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a0fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a100:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a102:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a104:	f003 f862 	bl	800d1cc <__ulp>
 800a108:	0002      	movs	r2, r0
 800a10a:	000b      	movs	r3, r1
 800a10c:	0030      	movs	r0, r6
 800a10e:	0039      	movs	r1, r7
 800a110:	f7f7 fd1e 	bl	8001b50 <__aeabi_dmul>
 800a114:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a116:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a118:	f7f6 fd72 	bl	8000c00 <__aeabi_dadd>
 800a11c:	0006      	movs	r6, r0
 800a11e:	000f      	movs	r7, r1
 800a120:	e791      	b.n	800a046 <_strtod_l+0xab6>
 800a122:	9418      	str	r4, [sp, #96]	@ 0x60
 800a124:	9519      	str	r5, [sp, #100]	@ 0x64
 800a126:	e7de      	b.n	800a0e6 <_strtod_l+0xb56>
 800a128:	4b11      	ldr	r3, [pc, #68]	@ (800a170 <_strtod_l+0xbe0>)
 800a12a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a12c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a12e:	f7f6 f99d 	bl	800046c <__aeabi_dcmplt>
 800a132:	e7b2      	b.n	800a09a <_strtod_l+0xb0a>
 800a134:	fff00000 	.word	0xfff00000
 800a138:	000fffff 	.word	0x000fffff
 800a13c:	3ff00000 	.word	0x3ff00000
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	7ff00000 	.word	0x7ff00000
 800a148:	7fe00000 	.word	0x7fe00000
 800a14c:	fcb00000 	.word	0xfcb00000
 800a150:	7c9fffff 	.word	0x7c9fffff
 800a154:	7fefffff 	.word	0x7fefffff
 800a158:	bff00000 	.word	0xbff00000
 800a15c:	94a03595 	.word	0x94a03595
 800a160:	3fdfffff 	.word	0x3fdfffff
 800a164:	35afe535 	.word	0x35afe535
 800a168:	ffc00000 	.word	0xffc00000
 800a16c:	41dfffff 	.word	0x41dfffff
 800a170:	3fcfffff 	.word	0x3fcfffff

0800a174 <_strtod_r>:
 800a174:	b510      	push	{r4, lr}
 800a176:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <_strtod_r+0xc>)
 800a178:	f7ff fa0a 	bl	8009590 <_strtod_l>
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	46c0      	nop			@ (mov r8, r8)
 800a180:	20000058 	.word	0x20000058

0800a184 <strtod>:
 800a184:	b510      	push	{r4, lr}
 800a186:	4c04      	ldr	r4, [pc, #16]	@ (800a198 <strtod+0x14>)
 800a188:	000a      	movs	r2, r1
 800a18a:	0001      	movs	r1, r0
 800a18c:	4b03      	ldr	r3, [pc, #12]	@ (800a19c <strtod+0x18>)
 800a18e:	6820      	ldr	r0, [r4, #0]
 800a190:	f7ff f9fe 	bl	8009590 <_strtod_l>
 800a194:	bd10      	pop	{r4, pc}
 800a196:	46c0      	nop			@ (mov r8, r8)
 800a198:	200001c4 	.word	0x200001c4
 800a19c:	20000058 	.word	0x20000058

0800a1a0 <__cvt>:
 800a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a2:	001f      	movs	r7, r3
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	0016      	movs	r6, r2
 800a1a8:	b08b      	sub	sp, #44	@ 0x2c
 800a1aa:	429f      	cmp	r7, r3
 800a1ac:	da04      	bge.n	800a1b8 <__cvt+0x18>
 800a1ae:	2180      	movs	r1, #128	@ 0x80
 800a1b0:	0609      	lsls	r1, r1, #24
 800a1b2:	187b      	adds	r3, r7, r1
 800a1b4:	001f      	movs	r7, r3
 800a1b6:	232d      	movs	r3, #45	@ 0x2d
 800a1b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a1ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a1bc:	7013      	strb	r3, [r2, #0]
 800a1be:	2320      	movs	r3, #32
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	439d      	bics	r5, r3
 800a1c4:	2d46      	cmp	r5, #70	@ 0x46
 800a1c6:	d007      	beq.n	800a1d8 <__cvt+0x38>
 800a1c8:	002b      	movs	r3, r5
 800a1ca:	3b45      	subs	r3, #69	@ 0x45
 800a1cc:	4259      	negs	r1, r3
 800a1ce:	414b      	adcs	r3, r1
 800a1d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a1d2:	3a01      	subs	r2, #1
 800a1d4:	18cb      	adds	r3, r1, r3
 800a1d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1d8:	ab09      	add	r3, sp, #36	@ 0x24
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	ab08      	add	r3, sp, #32
 800a1de:	9303      	str	r3, [sp, #12]
 800a1e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1e2:	9200      	str	r2, [sp, #0]
 800a1e4:	9302      	str	r3, [sp, #8]
 800a1e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1e8:	0032      	movs	r2, r6
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	003b      	movs	r3, r7
 800a1ee:	f001 f9f7 	bl	800b5e0 <_dtoa_r>
 800a1f2:	0004      	movs	r4, r0
 800a1f4:	2d47      	cmp	r5, #71	@ 0x47
 800a1f6:	d11b      	bne.n	800a230 <__cvt+0x90>
 800a1f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a1fa:	07db      	lsls	r3, r3, #31
 800a1fc:	d511      	bpl.n	800a222 <__cvt+0x82>
 800a1fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a200:	18c3      	adds	r3, r0, r3
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	2200      	movs	r2, #0
 800a206:	2300      	movs	r3, #0
 800a208:	0030      	movs	r0, r6
 800a20a:	0039      	movs	r1, r7
 800a20c:	f7f6 f928 	bl	8000460 <__aeabi_dcmpeq>
 800a210:	2800      	cmp	r0, #0
 800a212:	d001      	beq.n	800a218 <__cvt+0x78>
 800a214:	9b07      	ldr	r3, [sp, #28]
 800a216:	9309      	str	r3, [sp, #36]	@ 0x24
 800a218:	2230      	movs	r2, #48	@ 0x30
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	9907      	ldr	r1, [sp, #28]
 800a21e:	428b      	cmp	r3, r1
 800a220:	d320      	bcc.n	800a264 <__cvt+0xc4>
 800a222:	0020      	movs	r0, r4
 800a224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a226:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a228:	1b1b      	subs	r3, r3, r4
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	b00b      	add	sp, #44	@ 0x2c
 800a22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a230:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a232:	18c3      	adds	r3, r0, r3
 800a234:	9307      	str	r3, [sp, #28]
 800a236:	2d46      	cmp	r5, #70	@ 0x46
 800a238:	d1e4      	bne.n	800a204 <__cvt+0x64>
 800a23a:	7803      	ldrb	r3, [r0, #0]
 800a23c:	2b30      	cmp	r3, #48	@ 0x30
 800a23e:	d10c      	bne.n	800a25a <__cvt+0xba>
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	0030      	movs	r0, r6
 800a246:	0039      	movs	r1, r7
 800a248:	f7f6 f90a 	bl	8000460 <__aeabi_dcmpeq>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d104      	bne.n	800a25a <__cvt+0xba>
 800a250:	2301      	movs	r3, #1
 800a252:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a25c:	9a07      	ldr	r2, [sp, #28]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	18d3      	adds	r3, r2, r3
 800a262:	e7ce      	b.n	800a202 <__cvt+0x62>
 800a264:	1c59      	adds	r1, r3, #1
 800a266:	9109      	str	r1, [sp, #36]	@ 0x24
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	e7d6      	b.n	800a21a <__cvt+0x7a>

0800a26c <__exponent>:
 800a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26e:	232b      	movs	r3, #43	@ 0x2b
 800a270:	0005      	movs	r5, r0
 800a272:	000c      	movs	r4, r1
 800a274:	b085      	sub	sp, #20
 800a276:	7002      	strb	r2, [r0, #0]
 800a278:	2900      	cmp	r1, #0
 800a27a:	da01      	bge.n	800a280 <__exponent+0x14>
 800a27c:	424c      	negs	r4, r1
 800a27e:	3302      	adds	r3, #2
 800a280:	706b      	strb	r3, [r5, #1]
 800a282:	2c09      	cmp	r4, #9
 800a284:	dd2c      	ble.n	800a2e0 <__exponent+0x74>
 800a286:	ab02      	add	r3, sp, #8
 800a288:	1dde      	adds	r6, r3, #7
 800a28a:	0020      	movs	r0, r4
 800a28c:	210a      	movs	r1, #10
 800a28e:	f7f6 f8d1 	bl	8000434 <__aeabi_idivmod>
 800a292:	0037      	movs	r7, r6
 800a294:	3130      	adds	r1, #48	@ 0x30
 800a296:	3e01      	subs	r6, #1
 800a298:	0020      	movs	r0, r4
 800a29a:	7031      	strb	r1, [r6, #0]
 800a29c:	210a      	movs	r1, #10
 800a29e:	9401      	str	r4, [sp, #4]
 800a2a0:	f7f5 ffe2 	bl	8000268 <__divsi3>
 800a2a4:	9b01      	ldr	r3, [sp, #4]
 800a2a6:	0004      	movs	r4, r0
 800a2a8:	2b63      	cmp	r3, #99	@ 0x63
 800a2aa:	dcee      	bgt.n	800a28a <__exponent+0x1e>
 800a2ac:	1eba      	subs	r2, r7, #2
 800a2ae:	1ca8      	adds	r0, r5, #2
 800a2b0:	0001      	movs	r1, r0
 800a2b2:	0013      	movs	r3, r2
 800a2b4:	3430      	adds	r4, #48	@ 0x30
 800a2b6:	7014      	strb	r4, [r2, #0]
 800a2b8:	ac02      	add	r4, sp, #8
 800a2ba:	3407      	adds	r4, #7
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d80a      	bhi.n	800a2d6 <__exponent+0x6a>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	42a2      	cmp	r2, r4
 800a2c4:	d803      	bhi.n	800a2ce <__exponent+0x62>
 800a2c6:	3309      	adds	r3, #9
 800a2c8:	aa02      	add	r2, sp, #8
 800a2ca:	189b      	adds	r3, r3, r2
 800a2cc:	1bdb      	subs	r3, r3, r7
 800a2ce:	18c0      	adds	r0, r0, r3
 800a2d0:	1b40      	subs	r0, r0, r5
 800a2d2:	b005      	add	sp, #20
 800a2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d6:	781c      	ldrb	r4, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	700c      	strb	r4, [r1, #0]
 800a2dc:	3101      	adds	r1, #1
 800a2de:	e7eb      	b.n	800a2b8 <__exponent+0x4c>
 800a2e0:	2330      	movs	r3, #48	@ 0x30
 800a2e2:	18e4      	adds	r4, r4, r3
 800a2e4:	70ab      	strb	r3, [r5, #2]
 800a2e6:	1d28      	adds	r0, r5, #4
 800a2e8:	70ec      	strb	r4, [r5, #3]
 800a2ea:	e7f1      	b.n	800a2d0 <__exponent+0x64>

0800a2ec <_printf_float>:
 800a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ee:	b097      	sub	sp, #92	@ 0x5c
 800a2f0:	000d      	movs	r5, r1
 800a2f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2f4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a2fa:	f001 f845 	bl	800b388 <_localeconv_r>
 800a2fe:	6803      	ldr	r3, [r0, #0]
 800a300:	0018      	movs	r0, r3
 800a302:	930d      	str	r3, [sp, #52]	@ 0x34
 800a304:	f7f5 ff0a 	bl	800011c <strlen>
 800a308:	2300      	movs	r3, #0
 800a30a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a30c:	9314      	str	r3, [sp, #80]	@ 0x50
 800a30e:	7e2b      	ldrb	r3, [r5, #24]
 800a310:	2207      	movs	r2, #7
 800a312:	930c      	str	r3, [sp, #48]	@ 0x30
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	930e      	str	r3, [sp, #56]	@ 0x38
 800a318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	05c9      	lsls	r1, r1, #23
 800a31e:	d545      	bpl.n	800a3ac <_printf_float+0xc0>
 800a320:	189b      	adds	r3, r3, r2
 800a322:	4393      	bics	r3, r2
 800a324:	001a      	movs	r2, r3
 800a326:	3208      	adds	r2, #8
 800a328:	6022      	str	r2, [r4, #0]
 800a32a:	2201      	movs	r2, #1
 800a32c:	681e      	ldr	r6, [r3, #0]
 800a32e:	685f      	ldr	r7, [r3, #4]
 800a330:	007b      	lsls	r3, r7, #1
 800a332:	085b      	lsrs	r3, r3, #1
 800a334:	9311      	str	r3, [sp, #68]	@ 0x44
 800a336:	9610      	str	r6, [sp, #64]	@ 0x40
 800a338:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a33a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a33c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a33e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a340:	4ba7      	ldr	r3, [pc, #668]	@ (800a5e0 <_printf_float+0x2f4>)
 800a342:	4252      	negs	r2, r2
 800a344:	f7f8 fa68 	bl	8002818 <__aeabi_dcmpun>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d131      	bne.n	800a3b0 <_printf_float+0xc4>
 800a34c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a34e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a350:	2201      	movs	r2, #1
 800a352:	4ba3      	ldr	r3, [pc, #652]	@ (800a5e0 <_printf_float+0x2f4>)
 800a354:	4252      	negs	r2, r2
 800a356:	f7f6 f893 	bl	8000480 <__aeabi_dcmple>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d128      	bne.n	800a3b0 <_printf_float+0xc4>
 800a35e:	2200      	movs	r2, #0
 800a360:	2300      	movs	r3, #0
 800a362:	0030      	movs	r0, r6
 800a364:	0039      	movs	r1, r7
 800a366:	f7f6 f881 	bl	800046c <__aeabi_dcmplt>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d003      	beq.n	800a376 <_printf_float+0x8a>
 800a36e:	002b      	movs	r3, r5
 800a370:	222d      	movs	r2, #45	@ 0x2d
 800a372:	3343      	adds	r3, #67	@ 0x43
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a378:	4f9a      	ldr	r7, [pc, #616]	@ (800a5e4 <_printf_float+0x2f8>)
 800a37a:	2b47      	cmp	r3, #71	@ 0x47
 800a37c:	d900      	bls.n	800a380 <_printf_float+0x94>
 800a37e:	4f9a      	ldr	r7, [pc, #616]	@ (800a5e8 <_printf_float+0x2fc>)
 800a380:	2303      	movs	r3, #3
 800a382:	2400      	movs	r4, #0
 800a384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a386:	612b      	str	r3, [r5, #16]
 800a388:	3301      	adds	r3, #1
 800a38a:	439a      	bics	r2, r3
 800a38c:	602a      	str	r2, [r5, #0]
 800a38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a390:	0029      	movs	r1, r5
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a398:	aa15      	add	r2, sp, #84	@ 0x54
 800a39a:	f000 f9e5 	bl	800a768 <_printf_common>
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d000      	beq.n	800a3a4 <_printf_float+0xb8>
 800a3a2:	e09f      	b.n	800a4e4 <_printf_float+0x1f8>
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	4240      	negs	r0, r0
 800a3a8:	b017      	add	sp, #92	@ 0x5c
 800a3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ac:	3307      	adds	r3, #7
 800a3ae:	e7b8      	b.n	800a322 <_printf_float+0x36>
 800a3b0:	0032      	movs	r2, r6
 800a3b2:	003b      	movs	r3, r7
 800a3b4:	0030      	movs	r0, r6
 800a3b6:	0039      	movs	r1, r7
 800a3b8:	f7f8 fa2e 	bl	8002818 <__aeabi_dcmpun>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d00b      	beq.n	800a3d8 <_printf_float+0xec>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	da03      	bge.n	800a3cc <_printf_float+0xe0>
 800a3c4:	002b      	movs	r3, r5
 800a3c6:	222d      	movs	r2, #45	@ 0x2d
 800a3c8:	3343      	adds	r3, #67	@ 0x43
 800a3ca:	701a      	strb	r2, [r3, #0]
 800a3cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ce:	4f87      	ldr	r7, [pc, #540]	@ (800a5ec <_printf_float+0x300>)
 800a3d0:	2b47      	cmp	r3, #71	@ 0x47
 800a3d2:	d9d5      	bls.n	800a380 <_printf_float+0x94>
 800a3d4:	4f86      	ldr	r7, [pc, #536]	@ (800a5f0 <_printf_float+0x304>)
 800a3d6:	e7d3      	b.n	800a380 <_printf_float+0x94>
 800a3d8:	2220      	movs	r2, #32
 800a3da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a3dc:	686b      	ldr	r3, [r5, #4]
 800a3de:	4394      	bics	r4, r2
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	d146      	bne.n	800a472 <_printf_float+0x186>
 800a3e4:	3307      	adds	r3, #7
 800a3e6:	606b      	str	r3, [r5, #4]
 800a3e8:	2380      	movs	r3, #128	@ 0x80
 800a3ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	9206      	str	r2, [sp, #24]
 800a3f6:	aa14      	add	r2, sp, #80	@ 0x50
 800a3f8:	9205      	str	r2, [sp, #20]
 800a3fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a3fc:	a90a      	add	r1, sp, #40	@ 0x28
 800a3fe:	9204      	str	r2, [sp, #16]
 800a400:	aa13      	add	r2, sp, #76	@ 0x4c
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	2223      	movs	r2, #35	@ 0x23
 800a406:	1852      	adds	r2, r2, r1
 800a408:	9202      	str	r2, [sp, #8]
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	686b      	ldr	r3, [r5, #4]
 800a40e:	0032      	movs	r2, r6
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a414:	003b      	movs	r3, r7
 800a416:	f7ff fec3 	bl	800a1a0 <__cvt>
 800a41a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a41c:	0007      	movs	r7, r0
 800a41e:	2c47      	cmp	r4, #71	@ 0x47
 800a420:	d12d      	bne.n	800a47e <_printf_float+0x192>
 800a422:	1cd3      	adds	r3, r2, #3
 800a424:	db02      	blt.n	800a42c <_printf_float+0x140>
 800a426:	686b      	ldr	r3, [r5, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	dd48      	ble.n	800a4be <_printf_float+0x1d2>
 800a42c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a42e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a430:	3b02      	subs	r3, #2
 800a432:	b2db      	uxtb	r3, r3
 800a434:	930c      	str	r3, [sp, #48]	@ 0x30
 800a436:	0028      	movs	r0, r5
 800a438:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a43a:	3901      	subs	r1, #1
 800a43c:	3050      	adds	r0, #80	@ 0x50
 800a43e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a440:	f7ff ff14 	bl	800a26c <__exponent>
 800a444:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a446:	0004      	movs	r4, r0
 800a448:	1813      	adds	r3, r2, r0
 800a44a:	612b      	str	r3, [r5, #16]
 800a44c:	2a01      	cmp	r2, #1
 800a44e:	dc02      	bgt.n	800a456 <_printf_float+0x16a>
 800a450:	682a      	ldr	r2, [r5, #0]
 800a452:	07d2      	lsls	r2, r2, #31
 800a454:	d501      	bpl.n	800a45a <_printf_float+0x16e>
 800a456:	3301      	adds	r3, #1
 800a458:	612b      	str	r3, [r5, #16]
 800a45a:	2323      	movs	r3, #35	@ 0x23
 800a45c:	aa0a      	add	r2, sp, #40	@ 0x28
 800a45e:	189b      	adds	r3, r3, r2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d100      	bne.n	800a468 <_printf_float+0x17c>
 800a466:	e792      	b.n	800a38e <_printf_float+0xa2>
 800a468:	002b      	movs	r3, r5
 800a46a:	222d      	movs	r2, #45	@ 0x2d
 800a46c:	3343      	adds	r3, #67	@ 0x43
 800a46e:	701a      	strb	r2, [r3, #0]
 800a470:	e78d      	b.n	800a38e <_printf_float+0xa2>
 800a472:	2c47      	cmp	r4, #71	@ 0x47
 800a474:	d1b8      	bne.n	800a3e8 <_printf_float+0xfc>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1b6      	bne.n	800a3e8 <_printf_float+0xfc>
 800a47a:	3301      	adds	r3, #1
 800a47c:	e7b3      	b.n	800a3e6 <_printf_float+0xfa>
 800a47e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a480:	0011      	movs	r1, r2
 800a482:	2b65      	cmp	r3, #101	@ 0x65
 800a484:	d9d7      	bls.n	800a436 <_printf_float+0x14a>
 800a486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a488:	2b66      	cmp	r3, #102	@ 0x66
 800a48a:	d11a      	bne.n	800a4c2 <_printf_float+0x1d6>
 800a48c:	686b      	ldr	r3, [r5, #4]
 800a48e:	2a00      	cmp	r2, #0
 800a490:	dd09      	ble.n	800a4a6 <_printf_float+0x1ba>
 800a492:	612a      	str	r2, [r5, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d102      	bne.n	800a49e <_printf_float+0x1b2>
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	07c9      	lsls	r1, r1, #31
 800a49c:	d50b      	bpl.n	800a4b6 <_printf_float+0x1ca>
 800a49e:	3301      	adds	r3, #1
 800a4a0:	189b      	adds	r3, r3, r2
 800a4a2:	612b      	str	r3, [r5, #16]
 800a4a4:	e007      	b.n	800a4b6 <_printf_float+0x1ca>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <_printf_float+0x1c6>
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	6829      	ldr	r1, [r5, #0]
 800a4ae:	4211      	tst	r1, r2
 800a4b0:	d000      	beq.n	800a4b4 <_printf_float+0x1c8>
 800a4b2:	1c9a      	adds	r2, r3, #2
 800a4b4:	612a      	str	r2, [r5, #16]
 800a4b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4b8:	2400      	movs	r4, #0
 800a4ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a4bc:	e7cd      	b.n	800a45a <_printf_float+0x16e>
 800a4be:	2367      	movs	r3, #103	@ 0x67
 800a4c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a4c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	db06      	blt.n	800a4d8 <_printf_float+0x1ec>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	6129      	str	r1, [r5, #16]
 800a4ce:	07db      	lsls	r3, r3, #31
 800a4d0:	d5f1      	bpl.n	800a4b6 <_printf_float+0x1ca>
 800a4d2:	3101      	adds	r1, #1
 800a4d4:	6129      	str	r1, [r5, #16]
 800a4d6:	e7ee      	b.n	800a4b6 <_printf_float+0x1ca>
 800a4d8:	2201      	movs	r2, #1
 800a4da:	2900      	cmp	r1, #0
 800a4dc:	dce0      	bgt.n	800a4a0 <_printf_float+0x1b4>
 800a4de:	1892      	adds	r2, r2, r2
 800a4e0:	1a52      	subs	r2, r2, r1
 800a4e2:	e7dd      	b.n	800a4a0 <_printf_float+0x1b4>
 800a4e4:	682a      	ldr	r2, [r5, #0]
 800a4e6:	0553      	lsls	r3, r2, #21
 800a4e8:	d408      	bmi.n	800a4fc <_printf_float+0x210>
 800a4ea:	692b      	ldr	r3, [r5, #16]
 800a4ec:	003a      	movs	r2, r7
 800a4ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a4f4:	47a0      	blx	r4
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d129      	bne.n	800a54e <_printf_float+0x262>
 800a4fa:	e753      	b.n	800a3a4 <_printf_float+0xb8>
 800a4fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4fe:	2b65      	cmp	r3, #101	@ 0x65
 800a500:	d800      	bhi.n	800a504 <_printf_float+0x218>
 800a502:	e0da      	b.n	800a6ba <_printf_float+0x3ce>
 800a504:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a506:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a508:	2200      	movs	r2, #0
 800a50a:	2300      	movs	r3, #0
 800a50c:	f7f5 ffa8 	bl	8000460 <__aeabi_dcmpeq>
 800a510:	2800      	cmp	r0, #0
 800a512:	d033      	beq.n	800a57c <_printf_float+0x290>
 800a514:	2301      	movs	r3, #1
 800a516:	4a37      	ldr	r2, [pc, #220]	@ (800a5f4 <_printf_float+0x308>)
 800a518:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a51c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a51e:	47a0      	blx	r4
 800a520:	3001      	adds	r0, #1
 800a522:	d100      	bne.n	800a526 <_printf_float+0x23a>
 800a524:	e73e      	b.n	800a3a4 <_printf_float+0xb8>
 800a526:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a528:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a52a:	42b3      	cmp	r3, r6
 800a52c:	db02      	blt.n	800a534 <_printf_float+0x248>
 800a52e:	682b      	ldr	r3, [r5, #0]
 800a530:	07db      	lsls	r3, r3, #31
 800a532:	d50c      	bpl.n	800a54e <_printf_float+0x262>
 800a534:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a536:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a538:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a53a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a53c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a53e:	47a0      	blx	r4
 800a540:	2400      	movs	r4, #0
 800a542:	3001      	adds	r0, #1
 800a544:	d100      	bne.n	800a548 <_printf_float+0x25c>
 800a546:	e72d      	b.n	800a3a4 <_printf_float+0xb8>
 800a548:	1e73      	subs	r3, r6, #1
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	dc0a      	bgt.n	800a564 <_printf_float+0x278>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	079b      	lsls	r3, r3, #30
 800a552:	d500      	bpl.n	800a556 <_printf_float+0x26a>
 800a554:	e105      	b.n	800a762 <_printf_float+0x476>
 800a556:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a558:	68e8      	ldr	r0, [r5, #12]
 800a55a:	4298      	cmp	r0, r3
 800a55c:	db00      	blt.n	800a560 <_printf_float+0x274>
 800a55e:	e723      	b.n	800a3a8 <_printf_float+0xbc>
 800a560:	0018      	movs	r0, r3
 800a562:	e721      	b.n	800a3a8 <_printf_float+0xbc>
 800a564:	002a      	movs	r2, r5
 800a566:	2301      	movs	r3, #1
 800a568:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a56a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a56c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a56e:	321a      	adds	r2, #26
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	d100      	bne.n	800a578 <_printf_float+0x28c>
 800a576:	e715      	b.n	800a3a4 <_printf_float+0xb8>
 800a578:	3401      	adds	r4, #1
 800a57a:	e7e5      	b.n	800a548 <_printf_float+0x25c>
 800a57c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	dc3a      	bgt.n	800a5f8 <_printf_float+0x30c>
 800a582:	2301      	movs	r3, #1
 800a584:	4a1b      	ldr	r2, [pc, #108]	@ (800a5f4 <_printf_float+0x308>)
 800a586:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a588:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a58a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a58c:	47a0      	blx	r4
 800a58e:	3001      	adds	r0, #1
 800a590:	d100      	bne.n	800a594 <_printf_float+0x2a8>
 800a592:	e707      	b.n	800a3a4 <_printf_float+0xb8>
 800a594:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a596:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a598:	4333      	orrs	r3, r6
 800a59a:	d102      	bne.n	800a5a2 <_printf_float+0x2b6>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	07db      	lsls	r3, r3, #31
 800a5a0:	d5d5      	bpl.n	800a54e <_printf_float+0x262>
 800a5a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a5ac:	47a0      	blx	r4
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d100      	bne.n	800a5b6 <_printf_float+0x2ca>
 800a5b4:	e6f6      	b.n	800a3a4 <_printf_float+0xb8>
 800a5b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a5bc:	425b      	negs	r3, r3
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	dc01      	bgt.n	800a5c6 <_printf_float+0x2da>
 800a5c2:	0033      	movs	r3, r6
 800a5c4:	e792      	b.n	800a4ec <_printf_float+0x200>
 800a5c6:	002a      	movs	r2, r5
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a5d0:	321a      	adds	r2, #26
 800a5d2:	47a0      	blx	r4
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d100      	bne.n	800a5da <_printf_float+0x2ee>
 800a5d8:	e6e4      	b.n	800a3a4 <_printf_float+0xb8>
 800a5da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5dc:	3301      	adds	r3, #1
 800a5de:	e7ea      	b.n	800a5b6 <_printf_float+0x2ca>
 800a5e0:	7fefffff 	.word	0x7fefffff
 800a5e4:	0800e930 	.word	0x0800e930
 800a5e8:	0800e934 	.word	0x0800e934
 800a5ec:	0800e938 	.word	0x0800e938
 800a5f0:	0800e93c 	.word	0x0800e93c
 800a5f4:	0800ece0 	.word	0x0800ece0
 800a5f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a5fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5fe:	429e      	cmp	r6, r3
 800a600:	dd00      	ble.n	800a604 <_printf_float+0x318>
 800a602:	001e      	movs	r6, r3
 800a604:	2e00      	cmp	r6, #0
 800a606:	dc31      	bgt.n	800a66c <_printf_float+0x380>
 800a608:	43f3      	mvns	r3, r6
 800a60a:	2400      	movs	r4, #0
 800a60c:	17db      	asrs	r3, r3, #31
 800a60e:	4033      	ands	r3, r6
 800a610:	930e      	str	r3, [sp, #56]	@ 0x38
 800a612:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a616:	1af3      	subs	r3, r6, r3
 800a618:	42a3      	cmp	r3, r4
 800a61a:	dc30      	bgt.n	800a67e <_printf_float+0x392>
 800a61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a61e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a620:	429a      	cmp	r2, r3
 800a622:	dc38      	bgt.n	800a696 <_printf_float+0x3aa>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	07db      	lsls	r3, r3, #31
 800a628:	d435      	bmi.n	800a696 <_printf_float+0x3aa>
 800a62a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a62c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a62e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	1b14      	subs	r4, r2, r4
 800a634:	429c      	cmp	r4, r3
 800a636:	dd00      	ble.n	800a63a <_printf_float+0x34e>
 800a638:	001c      	movs	r4, r3
 800a63a:	2c00      	cmp	r4, #0
 800a63c:	dc34      	bgt.n	800a6a8 <_printf_float+0x3bc>
 800a63e:	43e3      	mvns	r3, r4
 800a640:	2600      	movs	r6, #0
 800a642:	17db      	asrs	r3, r3, #31
 800a644:	401c      	ands	r4, r3
 800a646:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	1b1b      	subs	r3, r3, r4
 800a64e:	42b3      	cmp	r3, r6
 800a650:	dc00      	bgt.n	800a654 <_printf_float+0x368>
 800a652:	e77c      	b.n	800a54e <_printf_float+0x262>
 800a654:	002a      	movs	r2, r5
 800a656:	2301      	movs	r3, #1
 800a658:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a65a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a65c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a65e:	321a      	adds	r2, #26
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	d100      	bne.n	800a668 <_printf_float+0x37c>
 800a666:	e69d      	b.n	800a3a4 <_printf_float+0xb8>
 800a668:	3601      	adds	r6, #1
 800a66a:	e7ec      	b.n	800a646 <_printf_float+0x35a>
 800a66c:	0033      	movs	r3, r6
 800a66e:	003a      	movs	r2, r7
 800a670:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a674:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a676:	47a0      	blx	r4
 800a678:	3001      	adds	r0, #1
 800a67a:	d1c5      	bne.n	800a608 <_printf_float+0x31c>
 800a67c:	e692      	b.n	800a3a4 <_printf_float+0xb8>
 800a67e:	002a      	movs	r2, r5
 800a680:	2301      	movs	r3, #1
 800a682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a684:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a686:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a688:	321a      	adds	r2, #26
 800a68a:	47b0      	blx	r6
 800a68c:	3001      	adds	r0, #1
 800a68e:	d100      	bne.n	800a692 <_printf_float+0x3a6>
 800a690:	e688      	b.n	800a3a4 <_printf_float+0xb8>
 800a692:	3401      	adds	r4, #1
 800a694:	e7bd      	b.n	800a612 <_printf_float+0x326>
 800a696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a698:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a69a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a69c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a69e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a6a0:	47a0      	blx	r4
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	d1c1      	bne.n	800a62a <_printf_float+0x33e>
 800a6a6:	e67d      	b.n	800a3a4 <_printf_float+0xb8>
 800a6a8:	19ba      	adds	r2, r7, r6
 800a6aa:	0023      	movs	r3, r4
 800a6ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a6b2:	47b0      	blx	r6
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d1c2      	bne.n	800a63e <_printf_float+0x352>
 800a6b8:	e674      	b.n	800a3a4 <_printf_float+0xb8>
 800a6ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	dc02      	bgt.n	800a6c8 <_printf_float+0x3dc>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	421a      	tst	r2, r3
 800a6c6:	d039      	beq.n	800a73c <_printf_float+0x450>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	003a      	movs	r2, r7
 800a6cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a6d2:	47b0      	blx	r6
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d100      	bne.n	800a6da <_printf_float+0x3ee>
 800a6d8:	e664      	b.n	800a3a4 <_printf_float+0xb8>
 800a6da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6e2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a6e4:	47b0      	blx	r6
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d100      	bne.n	800a6ec <_printf_float+0x400>
 800a6ea:	e65b      	b.n	800a3a4 <_printf_float+0xb8>
 800a6ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a6ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f7f5 feb1 	bl	8000460 <__aeabi_dcmpeq>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d11a      	bne.n	800a738 <_printf_float+0x44c>
 800a702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a704:	1c7a      	adds	r2, r7, #1
 800a706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a708:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a70a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a70c:	47b0      	blx	r6
 800a70e:	3001      	adds	r0, #1
 800a710:	d10e      	bne.n	800a730 <_printf_float+0x444>
 800a712:	e647      	b.n	800a3a4 <_printf_float+0xb8>
 800a714:	002a      	movs	r2, r5
 800a716:	2301      	movs	r3, #1
 800a718:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a71c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a71e:	321a      	adds	r2, #26
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	d100      	bne.n	800a728 <_printf_float+0x43c>
 800a726:	e63d      	b.n	800a3a4 <_printf_float+0xb8>
 800a728:	3601      	adds	r6, #1
 800a72a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a72c:	429e      	cmp	r6, r3
 800a72e:	dbf1      	blt.n	800a714 <_printf_float+0x428>
 800a730:	002a      	movs	r2, r5
 800a732:	0023      	movs	r3, r4
 800a734:	3250      	adds	r2, #80	@ 0x50
 800a736:	e6da      	b.n	800a4ee <_printf_float+0x202>
 800a738:	2600      	movs	r6, #0
 800a73a:	e7f6      	b.n	800a72a <_printf_float+0x43e>
 800a73c:	003a      	movs	r2, r7
 800a73e:	e7e2      	b.n	800a706 <_printf_float+0x41a>
 800a740:	002a      	movs	r2, r5
 800a742:	2301      	movs	r3, #1
 800a744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a748:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a74a:	3219      	adds	r2, #25
 800a74c:	47b0      	blx	r6
 800a74e:	3001      	adds	r0, #1
 800a750:	d100      	bne.n	800a754 <_printf_float+0x468>
 800a752:	e627      	b.n	800a3a4 <_printf_float+0xb8>
 800a754:	3401      	adds	r4, #1
 800a756:	68eb      	ldr	r3, [r5, #12]
 800a758:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	dcef      	bgt.n	800a740 <_printf_float+0x454>
 800a760:	e6f9      	b.n	800a556 <_printf_float+0x26a>
 800a762:	2400      	movs	r4, #0
 800a764:	e7f7      	b.n	800a756 <_printf_float+0x46a>
 800a766:	46c0      	nop			@ (mov r8, r8)

0800a768 <_printf_common>:
 800a768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a76a:	0016      	movs	r6, r2
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	688a      	ldr	r2, [r1, #8]
 800a770:	690b      	ldr	r3, [r1, #16]
 800a772:	000c      	movs	r4, r1
 800a774:	9000      	str	r0, [sp, #0]
 800a776:	4293      	cmp	r3, r2
 800a778:	da00      	bge.n	800a77c <_printf_common+0x14>
 800a77a:	0013      	movs	r3, r2
 800a77c:	0022      	movs	r2, r4
 800a77e:	6033      	str	r3, [r6, #0]
 800a780:	3243      	adds	r2, #67	@ 0x43
 800a782:	7812      	ldrb	r2, [r2, #0]
 800a784:	2a00      	cmp	r2, #0
 800a786:	d001      	beq.n	800a78c <_printf_common+0x24>
 800a788:	3301      	adds	r3, #1
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	069b      	lsls	r3, r3, #26
 800a790:	d502      	bpl.n	800a798 <_printf_common+0x30>
 800a792:	6833      	ldr	r3, [r6, #0]
 800a794:	3302      	adds	r3, #2
 800a796:	6033      	str	r3, [r6, #0]
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	2306      	movs	r3, #6
 800a79c:	0015      	movs	r5, r2
 800a79e:	401d      	ands	r5, r3
 800a7a0:	421a      	tst	r2, r3
 800a7a2:	d027      	beq.n	800a7f4 <_printf_common+0x8c>
 800a7a4:	0023      	movs	r3, r4
 800a7a6:	3343      	adds	r3, #67	@ 0x43
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	1e5a      	subs	r2, r3, #1
 800a7ac:	4193      	sbcs	r3, r2
 800a7ae:	6822      	ldr	r2, [r4, #0]
 800a7b0:	0692      	lsls	r2, r2, #26
 800a7b2:	d430      	bmi.n	800a816 <_printf_common+0xae>
 800a7b4:	0022      	movs	r2, r4
 800a7b6:	9901      	ldr	r1, [sp, #4]
 800a7b8:	9800      	ldr	r0, [sp, #0]
 800a7ba:	9d08      	ldr	r5, [sp, #32]
 800a7bc:	3243      	adds	r2, #67	@ 0x43
 800a7be:	47a8      	blx	r5
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d025      	beq.n	800a810 <_printf_common+0xa8>
 800a7c4:	2206      	movs	r2, #6
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	2500      	movs	r5, #0
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	d105      	bne.n	800a7dc <_printf_common+0x74>
 800a7d0:	6833      	ldr	r3, [r6, #0]
 800a7d2:	68e5      	ldr	r5, [r4, #12]
 800a7d4:	1aed      	subs	r5, r5, r3
 800a7d6:	43eb      	mvns	r3, r5
 800a7d8:	17db      	asrs	r3, r3, #31
 800a7da:	401d      	ands	r5, r3
 800a7dc:	68a3      	ldr	r3, [r4, #8]
 800a7de:	6922      	ldr	r2, [r4, #16]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	dd01      	ble.n	800a7e8 <_printf_common+0x80>
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	18ed      	adds	r5, r5, r3
 800a7e8:	2600      	movs	r6, #0
 800a7ea:	42b5      	cmp	r5, r6
 800a7ec:	d120      	bne.n	800a830 <_printf_common+0xc8>
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	e010      	b.n	800a814 <_printf_common+0xac>
 800a7f2:	3501      	adds	r5, #1
 800a7f4:	68e3      	ldr	r3, [r4, #12]
 800a7f6:	6832      	ldr	r2, [r6, #0]
 800a7f8:	1a9b      	subs	r3, r3, r2
 800a7fa:	42ab      	cmp	r3, r5
 800a7fc:	ddd2      	ble.n	800a7a4 <_printf_common+0x3c>
 800a7fe:	0022      	movs	r2, r4
 800a800:	2301      	movs	r3, #1
 800a802:	9901      	ldr	r1, [sp, #4]
 800a804:	9800      	ldr	r0, [sp, #0]
 800a806:	9f08      	ldr	r7, [sp, #32]
 800a808:	3219      	adds	r2, #25
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	d1f0      	bne.n	800a7f2 <_printf_common+0x8a>
 800a810:	2001      	movs	r0, #1
 800a812:	4240      	negs	r0, r0
 800a814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a816:	2030      	movs	r0, #48	@ 0x30
 800a818:	18e1      	adds	r1, r4, r3
 800a81a:	3143      	adds	r1, #67	@ 0x43
 800a81c:	7008      	strb	r0, [r1, #0]
 800a81e:	0021      	movs	r1, r4
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	3145      	adds	r1, #69	@ 0x45
 800a824:	7809      	ldrb	r1, [r1, #0]
 800a826:	18a2      	adds	r2, r4, r2
 800a828:	3243      	adds	r2, #67	@ 0x43
 800a82a:	3302      	adds	r3, #2
 800a82c:	7011      	strb	r1, [r2, #0]
 800a82e:	e7c1      	b.n	800a7b4 <_printf_common+0x4c>
 800a830:	0022      	movs	r2, r4
 800a832:	2301      	movs	r3, #1
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	9800      	ldr	r0, [sp, #0]
 800a838:	9f08      	ldr	r7, [sp, #32]
 800a83a:	321a      	adds	r2, #26
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	d0e6      	beq.n	800a810 <_printf_common+0xa8>
 800a842:	3601      	adds	r6, #1
 800a844:	e7d1      	b.n	800a7ea <_printf_common+0x82>
	...

0800a848 <_printf_i>:
 800a848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a84a:	b08b      	sub	sp, #44	@ 0x2c
 800a84c:	9206      	str	r2, [sp, #24]
 800a84e:	000a      	movs	r2, r1
 800a850:	3243      	adds	r2, #67	@ 0x43
 800a852:	9307      	str	r3, [sp, #28]
 800a854:	9005      	str	r0, [sp, #20]
 800a856:	9203      	str	r2, [sp, #12]
 800a858:	7e0a      	ldrb	r2, [r1, #24]
 800a85a:	000c      	movs	r4, r1
 800a85c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a85e:	2a78      	cmp	r2, #120	@ 0x78
 800a860:	d809      	bhi.n	800a876 <_printf_i+0x2e>
 800a862:	2a62      	cmp	r2, #98	@ 0x62
 800a864:	d80b      	bhi.n	800a87e <_printf_i+0x36>
 800a866:	2a00      	cmp	r2, #0
 800a868:	d100      	bne.n	800a86c <_printf_i+0x24>
 800a86a:	e0bc      	b.n	800a9e6 <_printf_i+0x19e>
 800a86c:	497b      	ldr	r1, [pc, #492]	@ (800aa5c <_printf_i+0x214>)
 800a86e:	9104      	str	r1, [sp, #16]
 800a870:	2a58      	cmp	r2, #88	@ 0x58
 800a872:	d100      	bne.n	800a876 <_printf_i+0x2e>
 800a874:	e090      	b.n	800a998 <_printf_i+0x150>
 800a876:	0025      	movs	r5, r4
 800a878:	3542      	adds	r5, #66	@ 0x42
 800a87a:	702a      	strb	r2, [r5, #0]
 800a87c:	e022      	b.n	800a8c4 <_printf_i+0x7c>
 800a87e:	0010      	movs	r0, r2
 800a880:	3863      	subs	r0, #99	@ 0x63
 800a882:	2815      	cmp	r0, #21
 800a884:	d8f7      	bhi.n	800a876 <_printf_i+0x2e>
 800a886:	f7f5 fc5b 	bl	8000140 <__gnu_thumb1_case_shi>
 800a88a:	0016      	.short	0x0016
 800a88c:	fff6001f 	.word	0xfff6001f
 800a890:	fff6fff6 	.word	0xfff6fff6
 800a894:	001ffff6 	.word	0x001ffff6
 800a898:	fff6fff6 	.word	0xfff6fff6
 800a89c:	fff6fff6 	.word	0xfff6fff6
 800a8a0:	003600a1 	.word	0x003600a1
 800a8a4:	fff60080 	.word	0xfff60080
 800a8a8:	00b2fff6 	.word	0x00b2fff6
 800a8ac:	0036fff6 	.word	0x0036fff6
 800a8b0:	fff6fff6 	.word	0xfff6fff6
 800a8b4:	0084      	.short	0x0084
 800a8b6:	0025      	movs	r5, r4
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	3542      	adds	r5, #66	@ 0x42
 800a8bc:	1d11      	adds	r1, r2, #4
 800a8be:	6019      	str	r1, [r3, #0]
 800a8c0:	6813      	ldr	r3, [r2, #0]
 800a8c2:	702b      	strb	r3, [r5, #0]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e0a0      	b.n	800aa0a <_printf_i+0x1c2>
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	6809      	ldr	r1, [r1, #0]
 800a8cc:	1d02      	adds	r2, r0, #4
 800a8ce:	060d      	lsls	r5, r1, #24
 800a8d0:	d50b      	bpl.n	800a8ea <_printf_i+0xa2>
 800a8d2:	6806      	ldr	r6, [r0, #0]
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	2e00      	cmp	r6, #0
 800a8d8:	da03      	bge.n	800a8e2 <_printf_i+0x9a>
 800a8da:	232d      	movs	r3, #45	@ 0x2d
 800a8dc:	9a03      	ldr	r2, [sp, #12]
 800a8de:	4276      	negs	r6, r6
 800a8e0:	7013      	strb	r3, [r2, #0]
 800a8e2:	4b5e      	ldr	r3, [pc, #376]	@ (800aa5c <_printf_i+0x214>)
 800a8e4:	270a      	movs	r7, #10
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	e018      	b.n	800a91c <_printf_i+0xd4>
 800a8ea:	6806      	ldr	r6, [r0, #0]
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	0649      	lsls	r1, r1, #25
 800a8f0:	d5f1      	bpl.n	800a8d6 <_printf_i+0x8e>
 800a8f2:	b236      	sxth	r6, r6
 800a8f4:	e7ef      	b.n	800a8d6 <_printf_i+0x8e>
 800a8f6:	6808      	ldr	r0, [r1, #0]
 800a8f8:	6819      	ldr	r1, [r3, #0]
 800a8fa:	c940      	ldmia	r1!, {r6}
 800a8fc:	0605      	lsls	r5, r0, #24
 800a8fe:	d402      	bmi.n	800a906 <_printf_i+0xbe>
 800a900:	0640      	lsls	r0, r0, #25
 800a902:	d500      	bpl.n	800a906 <_printf_i+0xbe>
 800a904:	b2b6      	uxth	r6, r6
 800a906:	6019      	str	r1, [r3, #0]
 800a908:	4b54      	ldr	r3, [pc, #336]	@ (800aa5c <_printf_i+0x214>)
 800a90a:	270a      	movs	r7, #10
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	2a6f      	cmp	r2, #111	@ 0x6f
 800a910:	d100      	bne.n	800a914 <_printf_i+0xcc>
 800a912:	3f02      	subs	r7, #2
 800a914:	0023      	movs	r3, r4
 800a916:	2200      	movs	r2, #0
 800a918:	3343      	adds	r3, #67	@ 0x43
 800a91a:	701a      	strb	r2, [r3, #0]
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	60a3      	str	r3, [r4, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	db03      	blt.n	800a92c <_printf_i+0xe4>
 800a924:	2104      	movs	r1, #4
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	438a      	bics	r2, r1
 800a92a:	6022      	str	r2, [r4, #0]
 800a92c:	2e00      	cmp	r6, #0
 800a92e:	d102      	bne.n	800a936 <_printf_i+0xee>
 800a930:	9d03      	ldr	r5, [sp, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00c      	beq.n	800a950 <_printf_i+0x108>
 800a936:	9d03      	ldr	r5, [sp, #12]
 800a938:	0030      	movs	r0, r6
 800a93a:	0039      	movs	r1, r7
 800a93c:	f7f5 fc90 	bl	8000260 <__aeabi_uidivmod>
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	3d01      	subs	r5, #1
 800a944:	5c5b      	ldrb	r3, [r3, r1]
 800a946:	702b      	strb	r3, [r5, #0]
 800a948:	0033      	movs	r3, r6
 800a94a:	0006      	movs	r6, r0
 800a94c:	429f      	cmp	r7, r3
 800a94e:	d9f3      	bls.n	800a938 <_printf_i+0xf0>
 800a950:	2f08      	cmp	r7, #8
 800a952:	d109      	bne.n	800a968 <_printf_i+0x120>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	07db      	lsls	r3, r3, #31
 800a958:	d506      	bpl.n	800a968 <_printf_i+0x120>
 800a95a:	6862      	ldr	r2, [r4, #4]
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	429a      	cmp	r2, r3
 800a960:	dc02      	bgt.n	800a968 <_printf_i+0x120>
 800a962:	2330      	movs	r3, #48	@ 0x30
 800a964:	3d01      	subs	r5, #1
 800a966:	702b      	strb	r3, [r5, #0]
 800a968:	9b03      	ldr	r3, [sp, #12]
 800a96a:	1b5b      	subs	r3, r3, r5
 800a96c:	6123      	str	r3, [r4, #16]
 800a96e:	9b07      	ldr	r3, [sp, #28]
 800a970:	0021      	movs	r1, r4
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	9805      	ldr	r0, [sp, #20]
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	aa09      	add	r2, sp, #36	@ 0x24
 800a97a:	f7ff fef5 	bl	800a768 <_printf_common>
 800a97e:	3001      	adds	r0, #1
 800a980:	d148      	bne.n	800aa14 <_printf_i+0x1cc>
 800a982:	2001      	movs	r0, #1
 800a984:	4240      	negs	r0, r0
 800a986:	b00b      	add	sp, #44	@ 0x2c
 800a988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98a:	2220      	movs	r2, #32
 800a98c:	6809      	ldr	r1, [r1, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	2278      	movs	r2, #120	@ 0x78
 800a994:	4932      	ldr	r1, [pc, #200]	@ (800aa60 <_printf_i+0x218>)
 800a996:	9104      	str	r1, [sp, #16]
 800a998:	0021      	movs	r1, r4
 800a99a:	3145      	adds	r1, #69	@ 0x45
 800a99c:	700a      	strb	r2, [r1, #0]
 800a99e:	6819      	ldr	r1, [r3, #0]
 800a9a0:	6822      	ldr	r2, [r4, #0]
 800a9a2:	c940      	ldmia	r1!, {r6}
 800a9a4:	0610      	lsls	r0, r2, #24
 800a9a6:	d402      	bmi.n	800a9ae <_printf_i+0x166>
 800a9a8:	0650      	lsls	r0, r2, #25
 800a9aa:	d500      	bpl.n	800a9ae <_printf_i+0x166>
 800a9ac:	b2b6      	uxth	r6, r6
 800a9ae:	6019      	str	r1, [r3, #0]
 800a9b0:	07d3      	lsls	r3, r2, #31
 800a9b2:	d502      	bpl.n	800a9ba <_printf_i+0x172>
 800a9b4:	2320      	movs	r3, #32
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	d001      	beq.n	800a9c2 <_printf_i+0x17a>
 800a9be:	2710      	movs	r7, #16
 800a9c0:	e7a8      	b.n	800a914 <_printf_i+0xcc>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	4393      	bics	r3, r2
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	e7f8      	b.n	800a9be <_printf_i+0x176>
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	680d      	ldr	r5, [r1, #0]
 800a9d0:	1d10      	adds	r0, r2, #4
 800a9d2:	6949      	ldr	r1, [r1, #20]
 800a9d4:	6018      	str	r0, [r3, #0]
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	062e      	lsls	r6, r5, #24
 800a9da:	d501      	bpl.n	800a9e0 <_printf_i+0x198>
 800a9dc:	6019      	str	r1, [r3, #0]
 800a9de:	e002      	b.n	800a9e6 <_printf_i+0x19e>
 800a9e0:	066d      	lsls	r5, r5, #25
 800a9e2:	d5fb      	bpl.n	800a9dc <_printf_i+0x194>
 800a9e4:	8019      	strh	r1, [r3, #0]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9d03      	ldr	r5, [sp, #12]
 800a9ea:	6123      	str	r3, [r4, #16]
 800a9ec:	e7bf      	b.n	800a96e <_printf_i+0x126>
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	1d11      	adds	r1, r2, #4
 800a9f2:	6019      	str	r1, [r3, #0]
 800a9f4:	6815      	ldr	r5, [r2, #0]
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	0028      	movs	r0, r5
 800a9fa:	6862      	ldr	r2, [r4, #4]
 800a9fc:	f000 fd43 	bl	800b486 <memchr>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d001      	beq.n	800aa08 <_printf_i+0x1c0>
 800aa04:	1b40      	subs	r0, r0, r5
 800aa06:	6060      	str	r0, [r4, #4]
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	6123      	str	r3, [r4, #16]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9a03      	ldr	r2, [sp, #12]
 800aa10:	7013      	strb	r3, [r2, #0]
 800aa12:	e7ac      	b.n	800a96e <_printf_i+0x126>
 800aa14:	002a      	movs	r2, r5
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	9906      	ldr	r1, [sp, #24]
 800aa1a:	9805      	ldr	r0, [sp, #20]
 800aa1c:	9d07      	ldr	r5, [sp, #28]
 800aa1e:	47a8      	blx	r5
 800aa20:	3001      	adds	r0, #1
 800aa22:	d0ae      	beq.n	800a982 <_printf_i+0x13a>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	079b      	lsls	r3, r3, #30
 800aa28:	d415      	bmi.n	800aa56 <_printf_i+0x20e>
 800aa2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2c:	68e0      	ldr	r0, [r4, #12]
 800aa2e:	4298      	cmp	r0, r3
 800aa30:	daa9      	bge.n	800a986 <_printf_i+0x13e>
 800aa32:	0018      	movs	r0, r3
 800aa34:	e7a7      	b.n	800a986 <_printf_i+0x13e>
 800aa36:	0022      	movs	r2, r4
 800aa38:	2301      	movs	r3, #1
 800aa3a:	9906      	ldr	r1, [sp, #24]
 800aa3c:	9805      	ldr	r0, [sp, #20]
 800aa3e:	9e07      	ldr	r6, [sp, #28]
 800aa40:	3219      	adds	r2, #25
 800aa42:	47b0      	blx	r6
 800aa44:	3001      	adds	r0, #1
 800aa46:	d09c      	beq.n	800a982 <_printf_i+0x13a>
 800aa48:	3501      	adds	r5, #1
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	dcf0      	bgt.n	800aa36 <_printf_i+0x1ee>
 800aa54:	e7e9      	b.n	800aa2a <_printf_i+0x1e2>
 800aa56:	2500      	movs	r5, #0
 800aa58:	e7f7      	b.n	800aa4a <_printf_i+0x202>
 800aa5a:	46c0      	nop			@ (mov r8, r8)
 800aa5c:	0800e940 	.word	0x0800e940
 800aa60:	0800e951 	.word	0x0800e951

0800aa64 <_scanf_float>:
 800aa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa66:	b08b      	sub	sp, #44	@ 0x2c
 800aa68:	0016      	movs	r6, r2
 800aa6a:	9003      	str	r0, [sp, #12]
 800aa6c:	22ae      	movs	r2, #174	@ 0xae
 800aa6e:	2000      	movs	r0, #0
 800aa70:	9307      	str	r3, [sp, #28]
 800aa72:	688b      	ldr	r3, [r1, #8]
 800aa74:	000c      	movs	r4, r1
 800aa76:	1e59      	subs	r1, r3, #1
 800aa78:	0052      	lsls	r2, r2, #1
 800aa7a:	9006      	str	r0, [sp, #24]
 800aa7c:	4291      	cmp	r1, r2
 800aa7e:	d905      	bls.n	800aa8c <_scanf_float+0x28>
 800aa80:	3b5e      	subs	r3, #94	@ 0x5e
 800aa82:	3bff      	subs	r3, #255	@ 0xff
 800aa84:	9306      	str	r3, [sp, #24]
 800aa86:	235e      	movs	r3, #94	@ 0x5e
 800aa88:	33ff      	adds	r3, #255	@ 0xff
 800aa8a:	60a3      	str	r3, [r4, #8]
 800aa8c:	23f0      	movs	r3, #240	@ 0xf0
 800aa8e:	6822      	ldr	r2, [r4, #0]
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	4313      	orrs	r3, r2
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	0023      	movs	r3, r4
 800aa98:	2500      	movs	r5, #0
 800aa9a:	331c      	adds	r3, #28
 800aa9c:	001f      	movs	r7, r3
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	9502      	str	r5, [sp, #8]
 800aaa2:	9509      	str	r5, [sp, #36]	@ 0x24
 800aaa4:	9508      	str	r5, [sp, #32]
 800aaa6:	9501      	str	r5, [sp, #4]
 800aaa8:	9505      	str	r5, [sp, #20]
 800aaaa:	68a2      	ldr	r2, [r4, #8]
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	d00a      	beq.n	800aac6 <_scanf_float+0x62>
 800aab0:	6833      	ldr	r3, [r6, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b4e      	cmp	r3, #78	@ 0x4e
 800aab6:	d844      	bhi.n	800ab42 <_scanf_float+0xde>
 800aab8:	0018      	movs	r0, r3
 800aaba:	2b40      	cmp	r3, #64	@ 0x40
 800aabc:	d82c      	bhi.n	800ab18 <_scanf_float+0xb4>
 800aabe:	382b      	subs	r0, #43	@ 0x2b
 800aac0:	b2c1      	uxtb	r1, r0
 800aac2:	290e      	cmp	r1, #14
 800aac4:	d92a      	bls.n	800ab1c <_scanf_float+0xb8>
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <_scanf_float+0x70>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	4aa6      	ldr	r2, [pc, #664]	@ (800ad68 <_scanf_float+0x304>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	9b02      	ldr	r3, [sp, #8]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d900      	bls.n	800aade <_scanf_float+0x7a>
 800aadc:	e0fe      	b.n	800acdc <_scanf_float+0x278>
 800aade:	25be      	movs	r5, #190	@ 0xbe
 800aae0:	006d      	lsls	r5, r5, #1
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	429f      	cmp	r7, r3
 800aae6:	d900      	bls.n	800aaea <_scanf_float+0x86>
 800aae8:	e0ee      	b.n	800acc8 <_scanf_float+0x264>
 800aaea:	2001      	movs	r0, #1
 800aaec:	b00b      	add	sp, #44	@ 0x2c
 800aaee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	3861      	subs	r0, #97	@ 0x61
 800aaf4:	280d      	cmp	r0, #13
 800aaf6:	d8e6      	bhi.n	800aac6 <_scanf_float+0x62>
 800aaf8:	f7f5 fb22 	bl	8000140 <__gnu_thumb1_case_shi>
 800aafc:	ffe50089 	.word	0xffe50089
 800ab00:	ffe5ffe5 	.word	0xffe5ffe5
 800ab04:	00a700bb 	.word	0x00a700bb
 800ab08:	ffe5ffe5 	.word	0xffe5ffe5
 800ab0c:	ffe5008f 	.word	0xffe5008f
 800ab10:	ffe5ffe5 	.word	0xffe5ffe5
 800ab14:	006bffe5 	.word	0x006bffe5
 800ab18:	3841      	subs	r0, #65	@ 0x41
 800ab1a:	e7eb      	b.n	800aaf4 <_scanf_float+0x90>
 800ab1c:	280e      	cmp	r0, #14
 800ab1e:	d8d2      	bhi.n	800aac6 <_scanf_float+0x62>
 800ab20:	f7f5 fb0e 	bl	8000140 <__gnu_thumb1_case_shi>
 800ab24:	ffd1004f 	.word	0xffd1004f
 800ab28:	009d004f 	.word	0x009d004f
 800ab2c:	0021ffd1 	.word	0x0021ffd1
 800ab30:	00410041 	.word	0x00410041
 800ab34:	00410041 	.word	0x00410041
 800ab38:	00410041 	.word	0x00410041
 800ab3c:	00410041 	.word	0x00410041
 800ab40:	0041      	.short	0x0041
 800ab42:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab44:	d80a      	bhi.n	800ab5c <_scanf_float+0xf8>
 800ab46:	2b60      	cmp	r3, #96	@ 0x60
 800ab48:	d8d2      	bhi.n	800aaf0 <_scanf_float+0x8c>
 800ab4a:	2b54      	cmp	r3, #84	@ 0x54
 800ab4c:	d100      	bne.n	800ab50 <_scanf_float+0xec>
 800ab4e:	e081      	b.n	800ac54 <_scanf_float+0x1f0>
 800ab50:	2b59      	cmp	r3, #89	@ 0x59
 800ab52:	d1b8      	bne.n	800aac6 <_scanf_float+0x62>
 800ab54:	2d07      	cmp	r5, #7
 800ab56:	d1b6      	bne.n	800aac6 <_scanf_float+0x62>
 800ab58:	2508      	movs	r5, #8
 800ab5a:	e02f      	b.n	800abbc <_scanf_float+0x158>
 800ab5c:	2b74      	cmp	r3, #116	@ 0x74
 800ab5e:	d079      	beq.n	800ac54 <_scanf_float+0x1f0>
 800ab60:	2b79      	cmp	r3, #121	@ 0x79
 800ab62:	d0f7      	beq.n	800ab54 <_scanf_float+0xf0>
 800ab64:	e7af      	b.n	800aac6 <_scanf_float+0x62>
 800ab66:	6821      	ldr	r1, [r4, #0]
 800ab68:	05c8      	lsls	r0, r1, #23
 800ab6a:	d51c      	bpl.n	800aba6 <_scanf_float+0x142>
 800ab6c:	2380      	movs	r3, #128	@ 0x80
 800ab6e:	4399      	bics	r1, r3
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	6021      	str	r1, [r4, #0]
 800ab74:	3301      	adds	r3, #1
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	9b06      	ldr	r3, [sp, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <_scanf_float+0x122>
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	3201      	adds	r2, #1
 800ab82:	9306      	str	r3, [sp, #24]
 800ab84:	60a2      	str	r2, [r4, #8]
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	60a3      	str	r3, [r4, #8]
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	6873      	ldr	r3, [r6, #4]
 800ab94:	3b01      	subs	r3, #1
 800ab96:	6073      	str	r3, [r6, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dc00      	bgt.n	800ab9e <_scanf_float+0x13a>
 800ab9c:	e08a      	b.n	800acb4 <_scanf_float+0x250>
 800ab9e:	6833      	ldr	r3, [r6, #0]
 800aba0:	3301      	adds	r3, #1
 800aba2:	6033      	str	r3, [r6, #0]
 800aba4:	e781      	b.n	800aaaa <_scanf_float+0x46>
 800aba6:	9a02      	ldr	r2, [sp, #8]
 800aba8:	1951      	adds	r1, r2, r5
 800abaa:	2900      	cmp	r1, #0
 800abac:	d000      	beq.n	800abb0 <_scanf_float+0x14c>
 800abae:	e78a      	b.n	800aac6 <_scanf_float+0x62>
 800abb0:	000d      	movs	r5, r1
 800abb2:	6822      	ldr	r2, [r4, #0]
 800abb4:	486d      	ldr	r0, [pc, #436]	@ (800ad6c <_scanf_float+0x308>)
 800abb6:	9102      	str	r1, [sp, #8]
 800abb8:	4002      	ands	r2, r0
 800abba:	6022      	str	r2, [r4, #0]
 800abbc:	703b      	strb	r3, [r7, #0]
 800abbe:	3701      	adds	r7, #1
 800abc0:	e7e1      	b.n	800ab86 <_scanf_float+0x122>
 800abc2:	2180      	movs	r1, #128	@ 0x80
 800abc4:	6822      	ldr	r2, [r4, #0]
 800abc6:	420a      	tst	r2, r1
 800abc8:	d100      	bne.n	800abcc <_scanf_float+0x168>
 800abca:	e77c      	b.n	800aac6 <_scanf_float+0x62>
 800abcc:	438a      	bics	r2, r1
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	e7f4      	b.n	800abbc <_scanf_float+0x158>
 800abd2:	9a02      	ldr	r2, [sp, #8]
 800abd4:	2a00      	cmp	r2, #0
 800abd6:	d10f      	bne.n	800abf8 <_scanf_float+0x194>
 800abd8:	9a01      	ldr	r2, [sp, #4]
 800abda:	2a00      	cmp	r2, #0
 800abdc:	d10f      	bne.n	800abfe <_scanf_float+0x19a>
 800abde:	6822      	ldr	r2, [r4, #0]
 800abe0:	21e0      	movs	r1, #224	@ 0xe0
 800abe2:	0010      	movs	r0, r2
 800abe4:	00c9      	lsls	r1, r1, #3
 800abe6:	4008      	ands	r0, r1
 800abe8:	4288      	cmp	r0, r1
 800abea:	d108      	bne.n	800abfe <_scanf_float+0x19a>
 800abec:	4960      	ldr	r1, [pc, #384]	@ (800ad70 <_scanf_float+0x30c>)
 800abee:	400a      	ands	r2, r1
 800abf0:	6022      	str	r2, [r4, #0]
 800abf2:	2201      	movs	r2, #1
 800abf4:	9202      	str	r2, [sp, #8]
 800abf6:	e7e1      	b.n	800abbc <_scanf_float+0x158>
 800abf8:	9a02      	ldr	r2, [sp, #8]
 800abfa:	2a02      	cmp	r2, #2
 800abfc:	d058      	beq.n	800acb0 <_scanf_float+0x24c>
 800abfe:	2d01      	cmp	r5, #1
 800ac00:	d002      	beq.n	800ac08 <_scanf_float+0x1a4>
 800ac02:	2d04      	cmp	r5, #4
 800ac04:	d000      	beq.n	800ac08 <_scanf_float+0x1a4>
 800ac06:	e75e      	b.n	800aac6 <_scanf_float+0x62>
 800ac08:	3501      	adds	r5, #1
 800ac0a:	b2ed      	uxtb	r5, r5
 800ac0c:	e7d6      	b.n	800abbc <_scanf_float+0x158>
 800ac0e:	9a02      	ldr	r2, [sp, #8]
 800ac10:	2a01      	cmp	r2, #1
 800ac12:	d000      	beq.n	800ac16 <_scanf_float+0x1b2>
 800ac14:	e757      	b.n	800aac6 <_scanf_float+0x62>
 800ac16:	2202      	movs	r2, #2
 800ac18:	e7ec      	b.n	800abf4 <_scanf_float+0x190>
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	d110      	bne.n	800ac40 <_scanf_float+0x1dc>
 800ac1e:	9a01      	ldr	r2, [sp, #4]
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	d000      	beq.n	800ac26 <_scanf_float+0x1c2>
 800ac24:	e752      	b.n	800aacc <_scanf_float+0x68>
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	21e0      	movs	r1, #224	@ 0xe0
 800ac2a:	0010      	movs	r0, r2
 800ac2c:	00c9      	lsls	r1, r1, #3
 800ac2e:	4008      	ands	r0, r1
 800ac30:	4288      	cmp	r0, r1
 800ac32:	d000      	beq.n	800ac36 <_scanf_float+0x1d2>
 800ac34:	e11d      	b.n	800ae72 <_scanf_float+0x40e>
 800ac36:	494e      	ldr	r1, [pc, #312]	@ (800ad70 <_scanf_float+0x30c>)
 800ac38:	3501      	adds	r5, #1
 800ac3a:	400a      	ands	r2, r1
 800ac3c:	6022      	str	r2, [r4, #0]
 800ac3e:	e7bd      	b.n	800abbc <_scanf_float+0x158>
 800ac40:	21fd      	movs	r1, #253	@ 0xfd
 800ac42:	1eea      	subs	r2, r5, #3
 800ac44:	420a      	tst	r2, r1
 800ac46:	d0df      	beq.n	800ac08 <_scanf_float+0x1a4>
 800ac48:	e73d      	b.n	800aac6 <_scanf_float+0x62>
 800ac4a:	2d02      	cmp	r5, #2
 800ac4c:	d000      	beq.n	800ac50 <_scanf_float+0x1ec>
 800ac4e:	e73a      	b.n	800aac6 <_scanf_float+0x62>
 800ac50:	2503      	movs	r5, #3
 800ac52:	e7b3      	b.n	800abbc <_scanf_float+0x158>
 800ac54:	2d06      	cmp	r5, #6
 800ac56:	d000      	beq.n	800ac5a <_scanf_float+0x1f6>
 800ac58:	e735      	b.n	800aac6 <_scanf_float+0x62>
 800ac5a:	2507      	movs	r5, #7
 800ac5c:	e7ae      	b.n	800abbc <_scanf_float+0x158>
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	0591      	lsls	r1, r2, #22
 800ac62:	d400      	bmi.n	800ac66 <_scanf_float+0x202>
 800ac64:	e72f      	b.n	800aac6 <_scanf_float+0x62>
 800ac66:	4943      	ldr	r1, [pc, #268]	@ (800ad74 <_scanf_float+0x310>)
 800ac68:	400a      	ands	r2, r1
 800ac6a:	6022      	str	r2, [r4, #0]
 800ac6c:	9a01      	ldr	r2, [sp, #4]
 800ac6e:	9205      	str	r2, [sp, #20]
 800ac70:	e7a4      	b.n	800abbc <_scanf_float+0x158>
 800ac72:	21a0      	movs	r1, #160	@ 0xa0
 800ac74:	2080      	movs	r0, #128	@ 0x80
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	00c9      	lsls	r1, r1, #3
 800ac7a:	4011      	ands	r1, r2
 800ac7c:	00c0      	lsls	r0, r0, #3
 800ac7e:	4281      	cmp	r1, r0
 800ac80:	d006      	beq.n	800ac90 <_scanf_float+0x22c>
 800ac82:	4202      	tst	r2, r0
 800ac84:	d100      	bne.n	800ac88 <_scanf_float+0x224>
 800ac86:	e71e      	b.n	800aac6 <_scanf_float+0x62>
 800ac88:	9901      	ldr	r1, [sp, #4]
 800ac8a:	2900      	cmp	r1, #0
 800ac8c:	d100      	bne.n	800ac90 <_scanf_float+0x22c>
 800ac8e:	e0f0      	b.n	800ae72 <_scanf_float+0x40e>
 800ac90:	0591      	lsls	r1, r2, #22
 800ac92:	d404      	bmi.n	800ac9e <_scanf_float+0x23a>
 800ac94:	9901      	ldr	r1, [sp, #4]
 800ac96:	9805      	ldr	r0, [sp, #20]
 800ac98:	9709      	str	r7, [sp, #36]	@ 0x24
 800ac9a:	1a09      	subs	r1, r1, r0
 800ac9c:	9108      	str	r1, [sp, #32]
 800ac9e:	4934      	ldr	r1, [pc, #208]	@ (800ad70 <_scanf_float+0x30c>)
 800aca0:	400a      	ands	r2, r1
 800aca2:	21c0      	movs	r1, #192	@ 0xc0
 800aca4:	0049      	lsls	r1, r1, #1
 800aca6:	430a      	orrs	r2, r1
 800aca8:	6022      	str	r2, [r4, #0]
 800acaa:	2200      	movs	r2, #0
 800acac:	9201      	str	r2, [sp, #4]
 800acae:	e785      	b.n	800abbc <_scanf_float+0x158>
 800acb0:	2203      	movs	r2, #3
 800acb2:	e79f      	b.n	800abf4 <_scanf_float+0x190>
 800acb4:	23c0      	movs	r3, #192	@ 0xc0
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	0031      	movs	r1, r6
 800acba:	58e3      	ldr	r3, [r4, r3]
 800acbc:	9803      	ldr	r0, [sp, #12]
 800acbe:	4798      	blx	r3
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d100      	bne.n	800acc6 <_scanf_float+0x262>
 800acc4:	e6f1      	b.n	800aaaa <_scanf_float+0x46>
 800acc6:	e6fe      	b.n	800aac6 <_scanf_float+0x62>
 800acc8:	3f01      	subs	r7, #1
 800acca:	5963      	ldr	r3, [r4, r5]
 800accc:	0032      	movs	r2, r6
 800acce:	7839      	ldrb	r1, [r7, #0]
 800acd0:	9803      	ldr	r0, [sp, #12]
 800acd2:	4798      	blx	r3
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	6123      	str	r3, [r4, #16]
 800acda:	e702      	b.n	800aae2 <_scanf_float+0x7e>
 800acdc:	1e6b      	subs	r3, r5, #1
 800acde:	2b06      	cmp	r3, #6
 800ace0:	d80e      	bhi.n	800ad00 <_scanf_float+0x29c>
 800ace2:	9702      	str	r7, [sp, #8]
 800ace4:	2d02      	cmp	r5, #2
 800ace6:	d920      	bls.n	800ad2a <_scanf_float+0x2c6>
 800ace8:	1beb      	subs	r3, r5, r7
 800acea:	b2db      	uxtb	r3, r3
 800acec:	9306      	str	r3, [sp, #24]
 800acee:	9b02      	ldr	r3, [sp, #8]
 800acf0:	9a06      	ldr	r2, [sp, #24]
 800acf2:	189b      	adds	r3, r3, r2
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d127      	bne.n	800ad4a <_scanf_float+0x2e6>
 800acfa:	3d03      	subs	r5, #3
 800acfc:	b2ed      	uxtb	r5, r5
 800acfe:	1b7f      	subs	r7, r7, r5
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	05da      	lsls	r2, r3, #23
 800ad04:	d553      	bpl.n	800adae <_scanf_float+0x34a>
 800ad06:	055b      	lsls	r3, r3, #21
 800ad08:	d536      	bpl.n	800ad78 <_scanf_float+0x314>
 800ad0a:	25be      	movs	r5, #190	@ 0xbe
 800ad0c:	006d      	lsls	r5, r5, #1
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	429f      	cmp	r7, r3
 800ad12:	d800      	bhi.n	800ad16 <_scanf_float+0x2b2>
 800ad14:	e6e9      	b.n	800aaea <_scanf_float+0x86>
 800ad16:	3f01      	subs	r7, #1
 800ad18:	5963      	ldr	r3, [r4, r5]
 800ad1a:	0032      	movs	r2, r6
 800ad1c:	7839      	ldrb	r1, [r7, #0]
 800ad1e:	9803      	ldr	r0, [sp, #12]
 800ad20:	4798      	blx	r3
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	e7f1      	b.n	800ad0e <_scanf_float+0x2aa>
 800ad2a:	25be      	movs	r5, #190	@ 0xbe
 800ad2c:	006d      	lsls	r5, r5, #1
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	429f      	cmp	r7, r3
 800ad32:	d800      	bhi.n	800ad36 <_scanf_float+0x2d2>
 800ad34:	e6d9      	b.n	800aaea <_scanf_float+0x86>
 800ad36:	3f01      	subs	r7, #1
 800ad38:	5963      	ldr	r3, [r4, r5]
 800ad3a:	0032      	movs	r2, r6
 800ad3c:	7839      	ldrb	r1, [r7, #0]
 800ad3e:	9803      	ldr	r0, [sp, #12]
 800ad40:	4798      	blx	r3
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	6123      	str	r3, [r4, #16]
 800ad48:	e7f1      	b.n	800ad2e <_scanf_float+0x2ca>
 800ad4a:	9b02      	ldr	r3, [sp, #8]
 800ad4c:	0032      	movs	r2, r6
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	7819      	ldrb	r1, [r3, #0]
 800ad52:	9302      	str	r3, [sp, #8]
 800ad54:	23be      	movs	r3, #190	@ 0xbe
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	58e3      	ldr	r3, [r4, r3]
 800ad5a:	9803      	ldr	r0, [sp, #12]
 800ad5c:	4798      	blx	r3
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	e7c3      	b.n	800acee <_scanf_float+0x28a>
 800ad66:	46c0      	nop			@ (mov r8, r8)
 800ad68:	fffffeff 	.word	0xfffffeff
 800ad6c:	fffffe7f 	.word	0xfffffe7f
 800ad70:	fffff87f 	.word	0xfffff87f
 800ad74:	fffffd7f 	.word	0xfffffd7f
 800ad78:	6923      	ldr	r3, [r4, #16]
 800ad7a:	1e7d      	subs	r5, r7, #1
 800ad7c:	7829      	ldrb	r1, [r5, #0]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	2965      	cmp	r1, #101	@ 0x65
 800ad84:	d00c      	beq.n	800ada0 <_scanf_float+0x33c>
 800ad86:	2945      	cmp	r1, #69	@ 0x45
 800ad88:	d00a      	beq.n	800ada0 <_scanf_float+0x33c>
 800ad8a:	23be      	movs	r3, #190	@ 0xbe
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	58e3      	ldr	r3, [r4, r3]
 800ad90:	0032      	movs	r2, r6
 800ad92:	9803      	ldr	r0, [sp, #12]
 800ad94:	4798      	blx	r3
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	1ebd      	subs	r5, r7, #2
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	7829      	ldrb	r1, [r5, #0]
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	23be      	movs	r3, #190	@ 0xbe
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	0032      	movs	r2, r6
 800ada6:	58e3      	ldr	r3, [r4, r3]
 800ada8:	9803      	ldr	r0, [sp, #12]
 800adaa:	4798      	blx	r3
 800adac:	002f      	movs	r7, r5
 800adae:	6821      	ldr	r1, [r4, #0]
 800adb0:	2310      	movs	r3, #16
 800adb2:	000a      	movs	r2, r1
 800adb4:	401a      	ands	r2, r3
 800adb6:	4219      	tst	r1, r3
 800adb8:	d001      	beq.n	800adbe <_scanf_float+0x35a>
 800adba:	2000      	movs	r0, #0
 800adbc:	e696      	b.n	800aaec <_scanf_float+0x88>
 800adbe:	21c0      	movs	r1, #192	@ 0xc0
 800adc0:	703a      	strb	r2, [r7, #0]
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	00c9      	lsls	r1, r1, #3
 800adc6:	400b      	ands	r3, r1
 800adc8:	2180      	movs	r1, #128	@ 0x80
 800adca:	00c9      	lsls	r1, r1, #3
 800adcc:	428b      	cmp	r3, r1
 800adce:	d11c      	bne.n	800ae0a <_scanf_float+0x3a6>
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	9a01      	ldr	r2, [sp, #4]
 800add4:	9905      	ldr	r1, [sp, #20]
 800add6:	1a9a      	subs	r2, r3, r2
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	428b      	cmp	r3, r1
 800addc:	d121      	bne.n	800ae22 <_scanf_float+0x3be>
 800adde:	2200      	movs	r2, #0
 800ade0:	9904      	ldr	r1, [sp, #16]
 800ade2:	9803      	ldr	r0, [sp, #12]
 800ade4:	f7ff f9c6 	bl	800a174 <_strtod_r>
 800ade8:	9b07      	ldr	r3, [sp, #28]
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	0006      	movs	r6, r0
 800adee:	000f      	movs	r7, r1
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	0791      	lsls	r1, r2, #30
 800adf4:	d522      	bpl.n	800ae3c <_scanf_float+0x3d8>
 800adf6:	9907      	ldr	r1, [sp, #28]
 800adf8:	1d1a      	adds	r2, r3, #4
 800adfa:	600a      	str	r2, [r1, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	601e      	str	r6, [r3, #0]
 800ae00:	605f      	str	r7, [r3, #4]
 800ae02:	68e3      	ldr	r3, [r4, #12]
 800ae04:	3301      	adds	r3, #1
 800ae06:	60e3      	str	r3, [r4, #12]
 800ae08:	e7d7      	b.n	800adba <_scanf_float+0x356>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0e6      	beq.n	800adde <_scanf_float+0x37a>
 800ae10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae12:	9803      	ldr	r0, [sp, #12]
 800ae14:	1c59      	adds	r1, r3, #1
 800ae16:	230a      	movs	r3, #10
 800ae18:	f002 fb9c 	bl	800d554 <_strtol_r>
 800ae1c:	9b08      	ldr	r3, [sp, #32]
 800ae1e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800ae20:	1ac2      	subs	r2, r0, r3
 800ae22:	0023      	movs	r3, r4
 800ae24:	3370      	adds	r3, #112	@ 0x70
 800ae26:	33ff      	adds	r3, #255	@ 0xff
 800ae28:	429f      	cmp	r7, r3
 800ae2a:	d302      	bcc.n	800ae32 <_scanf_float+0x3ce>
 800ae2c:	0027      	movs	r7, r4
 800ae2e:	376f      	adds	r7, #111	@ 0x6f
 800ae30:	37ff      	adds	r7, #255	@ 0xff
 800ae32:	0038      	movs	r0, r7
 800ae34:	4910      	ldr	r1, [pc, #64]	@ (800ae78 <_scanf_float+0x414>)
 800ae36:	f000 f957 	bl	800b0e8 <siprintf>
 800ae3a:	e7d0      	b.n	800adde <_scanf_float+0x37a>
 800ae3c:	1d19      	adds	r1, r3, #4
 800ae3e:	0752      	lsls	r2, r2, #29
 800ae40:	d502      	bpl.n	800ae48 <_scanf_float+0x3e4>
 800ae42:	9a07      	ldr	r2, [sp, #28]
 800ae44:	6011      	str	r1, [r2, #0]
 800ae46:	e7d9      	b.n	800adfc <_scanf_float+0x398>
 800ae48:	9a07      	ldr	r2, [sp, #28]
 800ae4a:	0030      	movs	r0, r6
 800ae4c:	6011      	str	r1, [r2, #0]
 800ae4e:	681d      	ldr	r5, [r3, #0]
 800ae50:	0032      	movs	r2, r6
 800ae52:	003b      	movs	r3, r7
 800ae54:	0039      	movs	r1, r7
 800ae56:	f7f7 fcdf 	bl	8002818 <__aeabi_dcmpun>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d004      	beq.n	800ae68 <_scanf_float+0x404>
 800ae5e:	4807      	ldr	r0, [pc, #28]	@ (800ae7c <_scanf_float+0x418>)
 800ae60:	f000 fb2c 	bl	800b4bc <nanf>
 800ae64:	6028      	str	r0, [r5, #0]
 800ae66:	e7cc      	b.n	800ae02 <_scanf_float+0x39e>
 800ae68:	0030      	movs	r0, r6
 800ae6a:	0039      	movs	r1, r7
 800ae6c:	f7f7 fd84 	bl	8002978 <__aeabi_d2f>
 800ae70:	e7f8      	b.n	800ae64 <_scanf_float+0x400>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	e62d      	b.n	800aad4 <_scanf_float+0x70>
 800ae78:	0800e962 	.word	0x0800e962
 800ae7c:	0800ed20 	.word	0x0800ed20

0800ae80 <std>:
 800ae80:	2300      	movs	r3, #0
 800ae82:	b510      	push	{r4, lr}
 800ae84:	0004      	movs	r4, r0
 800ae86:	6003      	str	r3, [r0, #0]
 800ae88:	6043      	str	r3, [r0, #4]
 800ae8a:	6083      	str	r3, [r0, #8]
 800ae8c:	8181      	strh	r1, [r0, #12]
 800ae8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae90:	81c2      	strh	r2, [r0, #14]
 800ae92:	6103      	str	r3, [r0, #16]
 800ae94:	6143      	str	r3, [r0, #20]
 800ae96:	6183      	str	r3, [r0, #24]
 800ae98:	0019      	movs	r1, r3
 800ae9a:	2208      	movs	r2, #8
 800ae9c:	305c      	adds	r0, #92	@ 0x5c
 800ae9e:	f000 fa59 	bl	800b354 <memset>
 800aea2:	4b0b      	ldr	r3, [pc, #44]	@ (800aed0 <std+0x50>)
 800aea4:	6224      	str	r4, [r4, #32]
 800aea6:	6263      	str	r3, [r4, #36]	@ 0x24
 800aea8:	4b0a      	ldr	r3, [pc, #40]	@ (800aed4 <std+0x54>)
 800aeaa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeac:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <std+0x58>)
 800aeae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <std+0x5c>)
 800aeb2:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	@ (800aee0 <std+0x60>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d005      	beq.n	800aec6 <std+0x46>
 800aeba:	4b0a      	ldr	r3, [pc, #40]	@ (800aee4 <std+0x64>)
 800aebc:	429c      	cmp	r4, r3
 800aebe:	d002      	beq.n	800aec6 <std+0x46>
 800aec0:	4b09      	ldr	r3, [pc, #36]	@ (800aee8 <std+0x68>)
 800aec2:	429c      	cmp	r4, r3
 800aec4:	d103      	bne.n	800aece <std+0x4e>
 800aec6:	0020      	movs	r0, r4
 800aec8:	3058      	adds	r0, #88	@ 0x58
 800aeca:	f000 fad9 	bl	800b480 <__retarget_lock_init_recursive>
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	0800b179 	.word	0x0800b179
 800aed4:	0800b1a5 	.word	0x0800b1a5
 800aed8:	0800b1dd 	.word	0x0800b1dd
 800aedc:	0800b209 	.word	0x0800b209
 800aee0:	200006a0 	.word	0x200006a0
 800aee4:	20000708 	.word	0x20000708
 800aee8:	20000770 	.word	0x20000770

0800aeec <stdio_exit_handler>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4a03      	ldr	r2, [pc, #12]	@ (800aefc <stdio_exit_handler+0x10>)
 800aef0:	4903      	ldr	r1, [pc, #12]	@ (800af00 <stdio_exit_handler+0x14>)
 800aef2:	4804      	ldr	r0, [pc, #16]	@ (800af04 <stdio_exit_handler+0x18>)
 800aef4:	f000 f86c 	bl	800afd0 <_fwalk_sglue>
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	46c0      	nop			@ (mov r8, r8)
 800aefc:	2000004c 	.word	0x2000004c
 800af00:	0800e205 	.word	0x0800e205
 800af04:	200001c8 	.word	0x200001c8

0800af08 <cleanup_stdio>:
 800af08:	6841      	ldr	r1, [r0, #4]
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <cleanup_stdio+0x30>)
 800af0c:	b510      	push	{r4, lr}
 800af0e:	0004      	movs	r4, r0
 800af10:	4299      	cmp	r1, r3
 800af12:	d001      	beq.n	800af18 <cleanup_stdio+0x10>
 800af14:	f003 f976 	bl	800e204 <_fflush_r>
 800af18:	68a1      	ldr	r1, [r4, #8]
 800af1a:	4b08      	ldr	r3, [pc, #32]	@ (800af3c <cleanup_stdio+0x34>)
 800af1c:	4299      	cmp	r1, r3
 800af1e:	d002      	beq.n	800af26 <cleanup_stdio+0x1e>
 800af20:	0020      	movs	r0, r4
 800af22:	f003 f96f 	bl	800e204 <_fflush_r>
 800af26:	68e1      	ldr	r1, [r4, #12]
 800af28:	4b05      	ldr	r3, [pc, #20]	@ (800af40 <cleanup_stdio+0x38>)
 800af2a:	4299      	cmp	r1, r3
 800af2c:	d002      	beq.n	800af34 <cleanup_stdio+0x2c>
 800af2e:	0020      	movs	r0, r4
 800af30:	f003 f968 	bl	800e204 <_fflush_r>
 800af34:	bd10      	pop	{r4, pc}
 800af36:	46c0      	nop			@ (mov r8, r8)
 800af38:	200006a0 	.word	0x200006a0
 800af3c:	20000708 	.word	0x20000708
 800af40:	20000770 	.word	0x20000770

0800af44 <global_stdio_init.part.0>:
 800af44:	b510      	push	{r4, lr}
 800af46:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <global_stdio_init.part.0+0x28>)
 800af48:	4a09      	ldr	r2, [pc, #36]	@ (800af70 <global_stdio_init.part.0+0x2c>)
 800af4a:	2104      	movs	r1, #4
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	4809      	ldr	r0, [pc, #36]	@ (800af74 <global_stdio_init.part.0+0x30>)
 800af50:	2200      	movs	r2, #0
 800af52:	f7ff ff95 	bl	800ae80 <std>
 800af56:	2201      	movs	r2, #1
 800af58:	2109      	movs	r1, #9
 800af5a:	4807      	ldr	r0, [pc, #28]	@ (800af78 <global_stdio_init.part.0+0x34>)
 800af5c:	f7ff ff90 	bl	800ae80 <std>
 800af60:	2202      	movs	r2, #2
 800af62:	2112      	movs	r1, #18
 800af64:	4805      	ldr	r0, [pc, #20]	@ (800af7c <global_stdio_init.part.0+0x38>)
 800af66:	f7ff ff8b 	bl	800ae80 <std>
 800af6a:	bd10      	pop	{r4, pc}
 800af6c:	200007d8 	.word	0x200007d8
 800af70:	0800aeed 	.word	0x0800aeed
 800af74:	200006a0 	.word	0x200006a0
 800af78:	20000708 	.word	0x20000708
 800af7c:	20000770 	.word	0x20000770

0800af80 <__sfp_lock_acquire>:
 800af80:	b510      	push	{r4, lr}
 800af82:	4802      	ldr	r0, [pc, #8]	@ (800af8c <__sfp_lock_acquire+0xc>)
 800af84:	f000 fa7d 	bl	800b482 <__retarget_lock_acquire_recursive>
 800af88:	bd10      	pop	{r4, pc}
 800af8a:	46c0      	nop			@ (mov r8, r8)
 800af8c:	200007e1 	.word	0x200007e1

0800af90 <__sfp_lock_release>:
 800af90:	b510      	push	{r4, lr}
 800af92:	4802      	ldr	r0, [pc, #8]	@ (800af9c <__sfp_lock_release+0xc>)
 800af94:	f000 fa76 	bl	800b484 <__retarget_lock_release_recursive>
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	46c0      	nop			@ (mov r8, r8)
 800af9c:	200007e1 	.word	0x200007e1

0800afa0 <__sinit>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	0004      	movs	r4, r0
 800afa4:	f7ff ffec 	bl	800af80 <__sfp_lock_acquire>
 800afa8:	6a23      	ldr	r3, [r4, #32]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <__sinit+0x14>
 800afae:	f7ff ffef 	bl	800af90 <__sfp_lock_release>
 800afb2:	bd10      	pop	{r4, pc}
 800afb4:	4b04      	ldr	r3, [pc, #16]	@ (800afc8 <__sinit+0x28>)
 800afb6:	6223      	str	r3, [r4, #32]
 800afb8:	4b04      	ldr	r3, [pc, #16]	@ (800afcc <__sinit+0x2c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f6      	bne.n	800afae <__sinit+0xe>
 800afc0:	f7ff ffc0 	bl	800af44 <global_stdio_init.part.0>
 800afc4:	e7f3      	b.n	800afae <__sinit+0xe>
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	0800af09 	.word	0x0800af09
 800afcc:	200007d8 	.word	0x200007d8

0800afd0 <_fwalk_sglue>:
 800afd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afd2:	0014      	movs	r4, r2
 800afd4:	2600      	movs	r6, #0
 800afd6:	9000      	str	r0, [sp, #0]
 800afd8:	9101      	str	r1, [sp, #4]
 800afda:	68a5      	ldr	r5, [r4, #8]
 800afdc:	6867      	ldr	r7, [r4, #4]
 800afde:	3f01      	subs	r7, #1
 800afe0:	d504      	bpl.n	800afec <_fwalk_sglue+0x1c>
 800afe2:	6824      	ldr	r4, [r4, #0]
 800afe4:	2c00      	cmp	r4, #0
 800afe6:	d1f8      	bne.n	800afda <_fwalk_sglue+0xa>
 800afe8:	0030      	movs	r0, r6
 800afea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afec:	89ab      	ldrh	r3, [r5, #12]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d908      	bls.n	800b004 <_fwalk_sglue+0x34>
 800aff2:	220e      	movs	r2, #14
 800aff4:	5eab      	ldrsh	r3, [r5, r2]
 800aff6:	3301      	adds	r3, #1
 800aff8:	d004      	beq.n	800b004 <_fwalk_sglue+0x34>
 800affa:	0029      	movs	r1, r5
 800affc:	9800      	ldr	r0, [sp, #0]
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	4798      	blx	r3
 800b002:	4306      	orrs	r6, r0
 800b004:	3568      	adds	r5, #104	@ 0x68
 800b006:	e7ea      	b.n	800afde <_fwalk_sglue+0xe>

0800b008 <iprintf>:
 800b008:	b40f      	push	{r0, r1, r2, r3}
 800b00a:	b507      	push	{r0, r1, r2, lr}
 800b00c:	4905      	ldr	r1, [pc, #20]	@ (800b024 <iprintf+0x1c>)
 800b00e:	ab04      	add	r3, sp, #16
 800b010:	6808      	ldr	r0, [r1, #0]
 800b012:	cb04      	ldmia	r3!, {r2}
 800b014:	6881      	ldr	r1, [r0, #8]
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	f002 fdf2 	bl	800dc00 <_vfiprintf_r>
 800b01c:	b003      	add	sp, #12
 800b01e:	bc08      	pop	{r3}
 800b020:	b004      	add	sp, #16
 800b022:	4718      	bx	r3
 800b024:	200001c4 	.word	0x200001c4

0800b028 <_puts_r>:
 800b028:	6a03      	ldr	r3, [r0, #32]
 800b02a:	b570      	push	{r4, r5, r6, lr}
 800b02c:	0005      	movs	r5, r0
 800b02e:	000e      	movs	r6, r1
 800b030:	6884      	ldr	r4, [r0, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <_puts_r+0x12>
 800b036:	f7ff ffb3 	bl	800afa0 <__sinit>
 800b03a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b03c:	07db      	lsls	r3, r3, #31
 800b03e:	d405      	bmi.n	800b04c <_puts_r+0x24>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	059b      	lsls	r3, r3, #22
 800b044:	d402      	bmi.n	800b04c <_puts_r+0x24>
 800b046:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b048:	f000 fa1b 	bl	800b482 <__retarget_lock_acquire_recursive>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	071b      	lsls	r3, r3, #28
 800b050:	d502      	bpl.n	800b058 <_puts_r+0x30>
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d11f      	bne.n	800b098 <_puts_r+0x70>
 800b058:	0021      	movs	r1, r4
 800b05a:	0028      	movs	r0, r5
 800b05c:	f000 f91c 	bl	800b298 <__swsetup_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	d019      	beq.n	800b098 <_puts_r+0x70>
 800b064:	2501      	movs	r5, #1
 800b066:	426d      	negs	r5, r5
 800b068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b06a:	07db      	lsls	r3, r3, #31
 800b06c:	d405      	bmi.n	800b07a <_puts_r+0x52>
 800b06e:	89a3      	ldrh	r3, [r4, #12]
 800b070:	059b      	lsls	r3, r3, #22
 800b072:	d402      	bmi.n	800b07a <_puts_r+0x52>
 800b074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b076:	f000 fa05 	bl	800b484 <__retarget_lock_release_recursive>
 800b07a:	0028      	movs	r0, r5
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
 800b07e:	3601      	adds	r6, #1
 800b080:	60a3      	str	r3, [r4, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	da04      	bge.n	800b090 <_puts_r+0x68>
 800b086:	69a2      	ldr	r2, [r4, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	dc16      	bgt.n	800b0ba <_puts_r+0x92>
 800b08c:	290a      	cmp	r1, #10
 800b08e:	d014      	beq.n	800b0ba <_puts_r+0x92>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	6022      	str	r2, [r4, #0]
 800b096:	7019      	strb	r1, [r3, #0]
 800b098:	68a3      	ldr	r3, [r4, #8]
 800b09a:	7831      	ldrb	r1, [r6, #0]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	2900      	cmp	r1, #0
 800b0a0:	d1ed      	bne.n	800b07e <_puts_r+0x56>
 800b0a2:	60a3      	str	r3, [r4, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da0f      	bge.n	800b0c8 <_puts_r+0xa0>
 800b0a8:	0022      	movs	r2, r4
 800b0aa:	0028      	movs	r0, r5
 800b0ac:	310a      	adds	r1, #10
 800b0ae:	f000 f8b1 	bl	800b214 <__swbuf_r>
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d0d6      	beq.n	800b064 <_puts_r+0x3c>
 800b0b6:	250a      	movs	r5, #10
 800b0b8:	e7d6      	b.n	800b068 <_puts_r+0x40>
 800b0ba:	0022      	movs	r2, r4
 800b0bc:	0028      	movs	r0, r5
 800b0be:	f000 f8a9 	bl	800b214 <__swbuf_r>
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d1e8      	bne.n	800b098 <_puts_r+0x70>
 800b0c6:	e7cd      	b.n	800b064 <_puts_r+0x3c>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	220a      	movs	r2, #10
 800b0d0:	701a      	strb	r2, [r3, #0]
 800b0d2:	e7f0      	b.n	800b0b6 <_puts_r+0x8e>

0800b0d4 <puts>:
 800b0d4:	b510      	push	{r4, lr}
 800b0d6:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <puts+0x10>)
 800b0d8:	0001      	movs	r1, r0
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	f7ff ffa4 	bl	800b028 <_puts_r>
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	46c0      	nop			@ (mov r8, r8)
 800b0e4:	200001c4 	.word	0x200001c4

0800b0e8 <siprintf>:
 800b0e8:	b40e      	push	{r1, r2, r3}
 800b0ea:	b500      	push	{lr}
 800b0ec:	490b      	ldr	r1, [pc, #44]	@ (800b11c <siprintf+0x34>)
 800b0ee:	b09c      	sub	sp, #112	@ 0x70
 800b0f0:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0f2:	9002      	str	r0, [sp, #8]
 800b0f4:	9006      	str	r0, [sp, #24]
 800b0f6:	9107      	str	r1, [sp, #28]
 800b0f8:	9104      	str	r1, [sp, #16]
 800b0fa:	4809      	ldr	r0, [pc, #36]	@ (800b120 <siprintf+0x38>)
 800b0fc:	4909      	ldr	r1, [pc, #36]	@ (800b124 <siprintf+0x3c>)
 800b0fe:	cb04      	ldmia	r3!, {r2}
 800b100:	9105      	str	r1, [sp, #20]
 800b102:	6800      	ldr	r0, [r0, #0]
 800b104:	a902      	add	r1, sp, #8
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	f002 fa96 	bl	800d638 <_svfiprintf_r>
 800b10c:	2200      	movs	r2, #0
 800b10e:	9b02      	ldr	r3, [sp, #8]
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	b01c      	add	sp, #112	@ 0x70
 800b114:	bc08      	pop	{r3}
 800b116:	b003      	add	sp, #12
 800b118:	4718      	bx	r3
 800b11a:	46c0      	nop			@ (mov r8, r8)
 800b11c:	7fffffff 	.word	0x7fffffff
 800b120:	200001c4 	.word	0x200001c4
 800b124:	ffff0208 	.word	0xffff0208

0800b128 <siscanf>:
 800b128:	b40e      	push	{r1, r2, r3}
 800b12a:	b530      	push	{r4, r5, lr}
 800b12c:	2381      	movs	r3, #129	@ 0x81
 800b12e:	b09c      	sub	sp, #112	@ 0x70
 800b130:	466a      	mov	r2, sp
 800b132:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	cc20      	ldmia	r4!, {r5}
 800b138:	8293      	strh	r3, [r2, #20]
 800b13a:	9002      	str	r0, [sp, #8]
 800b13c:	9006      	str	r0, [sp, #24]
 800b13e:	f7f4 ffed 	bl	800011c <strlen>
 800b142:	4b0b      	ldr	r3, [pc, #44]	@ (800b170 <siscanf+0x48>)
 800b144:	466a      	mov	r2, sp
 800b146:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b148:	2300      	movs	r3, #0
 800b14a:	9003      	str	r0, [sp, #12]
 800b14c:	9007      	str	r0, [sp, #28]
 800b14e:	4809      	ldr	r0, [pc, #36]	@ (800b174 <siscanf+0x4c>)
 800b150:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b152:	9314      	str	r3, [sp, #80]	@ 0x50
 800b154:	3b01      	subs	r3, #1
 800b156:	82d3      	strh	r3, [r2, #22]
 800b158:	a902      	add	r1, sp, #8
 800b15a:	0023      	movs	r3, r4
 800b15c:	002a      	movs	r2, r5
 800b15e:	6800      	ldr	r0, [r0, #0]
 800b160:	9401      	str	r4, [sp, #4]
 800b162:	f002 fbc3 	bl	800d8ec <__ssvfiscanf_r>
 800b166:	b01c      	add	sp, #112	@ 0x70
 800b168:	bc30      	pop	{r4, r5}
 800b16a:	bc08      	pop	{r3}
 800b16c:	b003      	add	sp, #12
 800b16e:	4718      	bx	r3
 800b170:	0800b1a1 	.word	0x0800b1a1
 800b174:	200001c4 	.word	0x200001c4

0800b178 <__sread>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	000c      	movs	r4, r1
 800b17c:	250e      	movs	r5, #14
 800b17e:	5f49      	ldrsh	r1, [r1, r5]
 800b180:	f000 f92c 	bl	800b3dc <_read_r>
 800b184:	2800      	cmp	r0, #0
 800b186:	db03      	blt.n	800b190 <__sread+0x18>
 800b188:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b18a:	181b      	adds	r3, r3, r0
 800b18c:	6563      	str	r3, [r4, #84]	@ 0x54
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	4a02      	ldr	r2, [pc, #8]	@ (800b19c <__sread+0x24>)
 800b194:	4013      	ands	r3, r2
 800b196:	81a3      	strh	r3, [r4, #12]
 800b198:	e7f9      	b.n	800b18e <__sread+0x16>
 800b19a:	46c0      	nop			@ (mov r8, r8)
 800b19c:	ffffefff 	.word	0xffffefff

0800b1a0 <__seofread>:
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	4770      	bx	lr

0800b1a4 <__swrite>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	001f      	movs	r7, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	0005      	movs	r5, r0
 800b1ac:	000c      	movs	r4, r1
 800b1ae:	0016      	movs	r6, r2
 800b1b0:	05db      	lsls	r3, r3, #23
 800b1b2:	d505      	bpl.n	800b1c0 <__swrite+0x1c>
 800b1b4:	230e      	movs	r3, #14
 800b1b6:	5ec9      	ldrsh	r1, [r1, r3]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	f000 f8fa 	bl	800b3b4 <_lseek_r>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	4a05      	ldr	r2, [pc, #20]	@ (800b1d8 <__swrite+0x34>)
 800b1c4:	0028      	movs	r0, r5
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	0032      	movs	r2, r6
 800b1cc:	230e      	movs	r3, #14
 800b1ce:	5ee1      	ldrsh	r1, [r4, r3]
 800b1d0:	003b      	movs	r3, r7
 800b1d2:	f000 f917 	bl	800b404 <_write_r>
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	ffffefff 	.word	0xffffefff

0800b1dc <__sseek>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	000c      	movs	r4, r1
 800b1e0:	250e      	movs	r5, #14
 800b1e2:	5f49      	ldrsh	r1, [r1, r5]
 800b1e4:	f000 f8e6 	bl	800b3b4 <_lseek_r>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	1c42      	adds	r2, r0, #1
 800b1ec:	d103      	bne.n	800b1f6 <__sseek+0x1a>
 800b1ee:	4a05      	ldr	r2, [pc, #20]	@ (800b204 <__sseek+0x28>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	bd70      	pop	{r4, r5, r6, pc}
 800b1f6:	2280      	movs	r2, #128	@ 0x80
 800b1f8:	0152      	lsls	r2, r2, #5
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b200:	e7f8      	b.n	800b1f4 <__sseek+0x18>
 800b202:	46c0      	nop			@ (mov r8, r8)
 800b204:	ffffefff 	.word	0xffffefff

0800b208 <__sclose>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	230e      	movs	r3, #14
 800b20c:	5ec9      	ldrsh	r1, [r1, r3]
 800b20e:	f000 f8bf 	bl	800b390 <_close_r>
 800b212:	bd10      	pop	{r4, pc}

0800b214 <__swbuf_r>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	0006      	movs	r6, r0
 800b218:	000d      	movs	r5, r1
 800b21a:	0014      	movs	r4, r2
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d004      	beq.n	800b22a <__swbuf_r+0x16>
 800b220:	6a03      	ldr	r3, [r0, #32]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <__swbuf_r+0x16>
 800b226:	f7ff febb 	bl	800afa0 <__sinit>
 800b22a:	69a3      	ldr	r3, [r4, #24]
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	071b      	lsls	r3, r3, #28
 800b232:	d502      	bpl.n	800b23a <__swbuf_r+0x26>
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <__swbuf_r+0x3a>
 800b23a:	0021      	movs	r1, r4
 800b23c:	0030      	movs	r0, r6
 800b23e:	f000 f82b 	bl	800b298 <__swsetup_r>
 800b242:	2800      	cmp	r0, #0
 800b244:	d003      	beq.n	800b24e <__swbuf_r+0x3a>
 800b246:	2501      	movs	r5, #1
 800b248:	426d      	negs	r5, r5
 800b24a:	0028      	movs	r0, r5
 800b24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	6820      	ldr	r0, [r4, #0]
 800b252:	b2ef      	uxtb	r7, r5
 800b254:	1ac0      	subs	r0, r0, r3
 800b256:	6963      	ldr	r3, [r4, #20]
 800b258:	b2ed      	uxtb	r5, r5
 800b25a:	4283      	cmp	r3, r0
 800b25c:	dc05      	bgt.n	800b26a <__swbuf_r+0x56>
 800b25e:	0021      	movs	r1, r4
 800b260:	0030      	movs	r0, r6
 800b262:	f002 ffcf 	bl	800e204 <_fflush_r>
 800b266:	2800      	cmp	r0, #0
 800b268:	d1ed      	bne.n	800b246 <__swbuf_r+0x32>
 800b26a:	68a3      	ldr	r3, [r4, #8]
 800b26c:	3001      	adds	r0, #1
 800b26e:	3b01      	subs	r3, #1
 800b270:	60a3      	str	r3, [r4, #8]
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	6022      	str	r2, [r4, #0]
 800b278:	701f      	strb	r7, [r3, #0]
 800b27a:	6963      	ldr	r3, [r4, #20]
 800b27c:	4283      	cmp	r3, r0
 800b27e:	d004      	beq.n	800b28a <__swbuf_r+0x76>
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	07db      	lsls	r3, r3, #31
 800b284:	d5e1      	bpl.n	800b24a <__swbuf_r+0x36>
 800b286:	2d0a      	cmp	r5, #10
 800b288:	d1df      	bne.n	800b24a <__swbuf_r+0x36>
 800b28a:	0021      	movs	r1, r4
 800b28c:	0030      	movs	r0, r6
 800b28e:	f002 ffb9 	bl	800e204 <_fflush_r>
 800b292:	2800      	cmp	r0, #0
 800b294:	d0d9      	beq.n	800b24a <__swbuf_r+0x36>
 800b296:	e7d6      	b.n	800b246 <__swbuf_r+0x32>

0800b298 <__swsetup_r>:
 800b298:	4b2d      	ldr	r3, [pc, #180]	@ (800b350 <__swsetup_r+0xb8>)
 800b29a:	b570      	push	{r4, r5, r6, lr}
 800b29c:	0005      	movs	r5, r0
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	000c      	movs	r4, r1
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d004      	beq.n	800b2b0 <__swsetup_r+0x18>
 800b2a6:	6a03      	ldr	r3, [r0, #32]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <__swsetup_r+0x18>
 800b2ac:	f7ff fe78 	bl	800afa0 <__sinit>
 800b2b0:	230c      	movs	r3, #12
 800b2b2:	5ee2      	ldrsh	r2, [r4, r3]
 800b2b4:	0713      	lsls	r3, r2, #28
 800b2b6:	d423      	bmi.n	800b300 <__swsetup_r+0x68>
 800b2b8:	06d3      	lsls	r3, r2, #27
 800b2ba:	d407      	bmi.n	800b2cc <__swsetup_r+0x34>
 800b2bc:	2309      	movs	r3, #9
 800b2be:	602b      	str	r3, [r5, #0]
 800b2c0:	2340      	movs	r3, #64	@ 0x40
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	4240      	negs	r0, r0
 800b2ca:	e03a      	b.n	800b342 <__swsetup_r+0xaa>
 800b2cc:	0752      	lsls	r2, r2, #29
 800b2ce:	d513      	bpl.n	800b2f8 <__swsetup_r+0x60>
 800b2d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	d008      	beq.n	800b2e8 <__swsetup_r+0x50>
 800b2d6:	0023      	movs	r3, r4
 800b2d8:	3344      	adds	r3, #68	@ 0x44
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	d002      	beq.n	800b2e4 <__swsetup_r+0x4c>
 800b2de:	0028      	movs	r0, r5
 800b2e0:	f000 ff72 	bl	800c1c8 <_free_r>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2e8:	2224      	movs	r2, #36	@ 0x24
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	4393      	bics	r3, r2
 800b2ee:	81a3      	strh	r3, [r4, #12]
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	6063      	str	r3, [r4, #4]
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	2308      	movs	r3, #8
 800b2fa:	89a2      	ldrh	r2, [r4, #12]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	6923      	ldr	r3, [r4, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10b      	bne.n	800b31e <__swsetup_r+0x86>
 800b306:	21a0      	movs	r1, #160	@ 0xa0
 800b308:	2280      	movs	r2, #128	@ 0x80
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	0089      	lsls	r1, r1, #2
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	400b      	ands	r3, r1
 800b312:	4293      	cmp	r3, r2
 800b314:	d003      	beq.n	800b31e <__swsetup_r+0x86>
 800b316:	0021      	movs	r1, r4
 800b318:	0028      	movs	r0, r5
 800b31a:	f002 ffc9 	bl	800e2b0 <__smakebuf_r>
 800b31e:	230c      	movs	r3, #12
 800b320:	5ee2      	ldrsh	r2, [r4, r3]
 800b322:	2101      	movs	r1, #1
 800b324:	0013      	movs	r3, r2
 800b326:	400b      	ands	r3, r1
 800b328:	420a      	tst	r2, r1
 800b32a:	d00b      	beq.n	800b344 <__swsetup_r+0xac>
 800b32c:	2300      	movs	r3, #0
 800b32e:	60a3      	str	r3, [r4, #8]
 800b330:	6963      	ldr	r3, [r4, #20]
 800b332:	425b      	negs	r3, r3
 800b334:	61a3      	str	r3, [r4, #24]
 800b336:	2000      	movs	r0, #0
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	4283      	cmp	r3, r0
 800b33c:	d101      	bne.n	800b342 <__swsetup_r+0xaa>
 800b33e:	0613      	lsls	r3, r2, #24
 800b340:	d4be      	bmi.n	800b2c0 <__swsetup_r+0x28>
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	0791      	lsls	r1, r2, #30
 800b346:	d400      	bmi.n	800b34a <__swsetup_r+0xb2>
 800b348:	6963      	ldr	r3, [r4, #20]
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	e7f3      	b.n	800b336 <__swsetup_r+0x9e>
 800b34e:	46c0      	nop			@ (mov r8, r8)
 800b350:	200001c4 	.word	0x200001c4

0800b354 <memset>:
 800b354:	0003      	movs	r3, r0
 800b356:	1882      	adds	r2, r0, r2
 800b358:	4293      	cmp	r3, r2
 800b35a:	d100      	bne.n	800b35e <memset+0xa>
 800b35c:	4770      	bx	lr
 800b35e:	7019      	strb	r1, [r3, #0]
 800b360:	3301      	adds	r3, #1
 800b362:	e7f9      	b.n	800b358 <memset+0x4>

0800b364 <strncmp>:
 800b364:	b530      	push	{r4, r5, lr}
 800b366:	0005      	movs	r5, r0
 800b368:	1e10      	subs	r0, r2, #0
 800b36a:	d00b      	beq.n	800b384 <strncmp+0x20>
 800b36c:	2400      	movs	r4, #0
 800b36e:	3a01      	subs	r2, #1
 800b370:	5d2b      	ldrb	r3, [r5, r4]
 800b372:	5d08      	ldrb	r0, [r1, r4]
 800b374:	4283      	cmp	r3, r0
 800b376:	d104      	bne.n	800b382 <strncmp+0x1e>
 800b378:	42a2      	cmp	r2, r4
 800b37a:	d002      	beq.n	800b382 <strncmp+0x1e>
 800b37c:	3401      	adds	r4, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1f6      	bne.n	800b370 <strncmp+0xc>
 800b382:	1a18      	subs	r0, r3, r0
 800b384:	bd30      	pop	{r4, r5, pc}
	...

0800b388 <_localeconv_r>:
 800b388:	4800      	ldr	r0, [pc, #0]	@ (800b38c <_localeconv_r+0x4>)
 800b38a:	4770      	bx	lr
 800b38c:	20000148 	.word	0x20000148

0800b390 <_close_r>:
 800b390:	2300      	movs	r3, #0
 800b392:	b570      	push	{r4, r5, r6, lr}
 800b394:	4d06      	ldr	r5, [pc, #24]	@ (800b3b0 <_close_r+0x20>)
 800b396:	0004      	movs	r4, r0
 800b398:	0008      	movs	r0, r1
 800b39a:	602b      	str	r3, [r5, #0]
 800b39c:	f7f8 fcf2 	bl	8003d84 <_close>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d103      	bne.n	800b3ac <_close_r+0x1c>
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d000      	beq.n	800b3ac <_close_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	46c0      	nop			@ (mov r8, r8)
 800b3b0:	200007dc 	.word	0x200007dc

0800b3b4 <_lseek_r>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	0004      	movs	r4, r0
 800b3b8:	0008      	movs	r0, r1
 800b3ba:	0011      	movs	r1, r2
 800b3bc:	001a      	movs	r2, r3
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4d05      	ldr	r5, [pc, #20]	@ (800b3d8 <_lseek_r+0x24>)
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	f7f8 fcff 	bl	8003dc6 <_lseek>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d103      	bne.n	800b3d4 <_lseek_r+0x20>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d000      	beq.n	800b3d4 <_lseek_r+0x20>
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	bd70      	pop	{r4, r5, r6, pc}
 800b3d6:	46c0      	nop			@ (mov r8, r8)
 800b3d8:	200007dc 	.word	0x200007dc

0800b3dc <_read_r>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	0004      	movs	r4, r0
 800b3e0:	0008      	movs	r0, r1
 800b3e2:	0011      	movs	r1, r2
 800b3e4:	001a      	movs	r2, r3
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4d05      	ldr	r5, [pc, #20]	@ (800b400 <_read_r+0x24>)
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f7f8 fc91 	bl	8003d12 <_read>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d103      	bne.n	800b3fc <_read_r+0x20>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d000      	beq.n	800b3fc <_read_r+0x20>
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	46c0      	nop			@ (mov r8, r8)
 800b400:	200007dc 	.word	0x200007dc

0800b404 <_write_r>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	0004      	movs	r4, r0
 800b408:	0008      	movs	r0, r1
 800b40a:	0011      	movs	r1, r2
 800b40c:	001a      	movs	r2, r3
 800b40e:	2300      	movs	r3, #0
 800b410:	4d05      	ldr	r5, [pc, #20]	@ (800b428 <_write_r+0x24>)
 800b412:	602b      	str	r3, [r5, #0]
 800b414:	f7f8 fc9a 	bl	8003d4c <_write>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d103      	bne.n	800b424 <_write_r+0x20>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d000      	beq.n	800b424 <_write_r+0x20>
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	bd70      	pop	{r4, r5, r6, pc}
 800b426:	46c0      	nop			@ (mov r8, r8)
 800b428:	200007dc 	.word	0x200007dc

0800b42c <__errno>:
 800b42c:	4b01      	ldr	r3, [pc, #4]	@ (800b434 <__errno+0x8>)
 800b42e:	6818      	ldr	r0, [r3, #0]
 800b430:	4770      	bx	lr
 800b432:	46c0      	nop			@ (mov r8, r8)
 800b434:	200001c4 	.word	0x200001c4

0800b438 <__libc_init_array>:
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	2600      	movs	r6, #0
 800b43c:	4c0c      	ldr	r4, [pc, #48]	@ (800b470 <__libc_init_array+0x38>)
 800b43e:	4d0d      	ldr	r5, [pc, #52]	@ (800b474 <__libc_init_array+0x3c>)
 800b440:	1b64      	subs	r4, r4, r5
 800b442:	10a4      	asrs	r4, r4, #2
 800b444:	42a6      	cmp	r6, r4
 800b446:	d109      	bne.n	800b45c <__libc_init_array+0x24>
 800b448:	2600      	movs	r6, #0
 800b44a:	f003 f99b 	bl	800e784 <_init>
 800b44e:	4c0a      	ldr	r4, [pc, #40]	@ (800b478 <__libc_init_array+0x40>)
 800b450:	4d0a      	ldr	r5, [pc, #40]	@ (800b47c <__libc_init_array+0x44>)
 800b452:	1b64      	subs	r4, r4, r5
 800b454:	10a4      	asrs	r4, r4, #2
 800b456:	42a6      	cmp	r6, r4
 800b458:	d105      	bne.n	800b466 <__libc_init_array+0x2e>
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
 800b45c:	00b3      	lsls	r3, r6, #2
 800b45e:	58eb      	ldr	r3, [r5, r3]
 800b460:	4798      	blx	r3
 800b462:	3601      	adds	r6, #1
 800b464:	e7ee      	b.n	800b444 <__libc_init_array+0xc>
 800b466:	00b3      	lsls	r3, r6, #2
 800b468:	58eb      	ldr	r3, [r5, r3]
 800b46a:	4798      	blx	r3
 800b46c:	3601      	adds	r6, #1
 800b46e:	e7f2      	b.n	800b456 <__libc_init_array+0x1e>
 800b470:	0800ed24 	.word	0x0800ed24
 800b474:	0800ed24 	.word	0x0800ed24
 800b478:	0800ed28 	.word	0x0800ed28
 800b47c:	0800ed24 	.word	0x0800ed24

0800b480 <__retarget_lock_init_recursive>:
 800b480:	4770      	bx	lr

0800b482 <__retarget_lock_acquire_recursive>:
 800b482:	4770      	bx	lr

0800b484 <__retarget_lock_release_recursive>:
 800b484:	4770      	bx	lr

0800b486 <memchr>:
 800b486:	b2c9      	uxtb	r1, r1
 800b488:	1882      	adds	r2, r0, r2
 800b48a:	4290      	cmp	r0, r2
 800b48c:	d101      	bne.n	800b492 <memchr+0xc>
 800b48e:	2000      	movs	r0, #0
 800b490:	4770      	bx	lr
 800b492:	7803      	ldrb	r3, [r0, #0]
 800b494:	428b      	cmp	r3, r1
 800b496:	d0fb      	beq.n	800b490 <memchr+0xa>
 800b498:	3001      	adds	r0, #1
 800b49a:	e7f6      	b.n	800b48a <memchr+0x4>

0800b49c <memcpy>:
 800b49c:	2300      	movs	r3, #0
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d100      	bne.n	800b4a6 <memcpy+0xa>
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	5ccc      	ldrb	r4, [r1, r3]
 800b4a8:	54c4      	strb	r4, [r0, r3]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	e7f8      	b.n	800b4a0 <memcpy+0x4>
	...

0800b4b0 <nan>:
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	4901      	ldr	r1, [pc, #4]	@ (800b4b8 <nan+0x8>)
 800b4b4:	4770      	bx	lr
 800b4b6:	46c0      	nop			@ (mov r8, r8)
 800b4b8:	7ff80000 	.word	0x7ff80000

0800b4bc <nanf>:
 800b4bc:	4800      	ldr	r0, [pc, #0]	@ (800b4c0 <nanf+0x4>)
 800b4be:	4770      	bx	lr
 800b4c0:	7fc00000 	.word	0x7fc00000

0800b4c4 <quorem>:
 800b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c6:	6902      	ldr	r2, [r0, #16]
 800b4c8:	690f      	ldr	r7, [r1, #16]
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	0006      	movs	r6, r0
 800b4ce:	000b      	movs	r3, r1
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	9102      	str	r1, [sp, #8]
 800b4d4:	42ba      	cmp	r2, r7
 800b4d6:	db6d      	blt.n	800b5b4 <quorem+0xf0>
 800b4d8:	3f01      	subs	r7, #1
 800b4da:	00bc      	lsls	r4, r7, #2
 800b4dc:	3314      	adds	r3, #20
 800b4de:	9305      	str	r3, [sp, #20]
 800b4e0:	191b      	adds	r3, r3, r4
 800b4e2:	9303      	str	r3, [sp, #12]
 800b4e4:	0033      	movs	r3, r6
 800b4e6:	3314      	adds	r3, #20
 800b4e8:	191c      	adds	r4, r3, r4
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	9804      	ldr	r0, [sp, #16]
 800b4f4:	681d      	ldr	r5, [r3, #0]
 800b4f6:	3501      	adds	r5, #1
 800b4f8:	0029      	movs	r1, r5
 800b4fa:	f7f4 fe2b 	bl	8000154 <__udivsi3>
 800b4fe:	9b04      	ldr	r3, [sp, #16]
 800b500:	9000      	str	r0, [sp, #0]
 800b502:	42ab      	cmp	r3, r5
 800b504:	d32b      	bcc.n	800b55e <quorem+0x9a>
 800b506:	9b05      	ldr	r3, [sp, #20]
 800b508:	9d01      	ldr	r5, [sp, #4]
 800b50a:	469c      	mov	ip, r3
 800b50c:	2300      	movs	r3, #0
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	9304      	str	r3, [sp, #16]
 800b512:	4662      	mov	r2, ip
 800b514:	ca08      	ldmia	r2!, {r3}
 800b516:	6828      	ldr	r0, [r5, #0]
 800b518:	4694      	mov	ip, r2
 800b51a:	9a00      	ldr	r2, [sp, #0]
 800b51c:	b299      	uxth	r1, r3
 800b51e:	4351      	muls	r1, r2
 800b520:	9a05      	ldr	r2, [sp, #20]
 800b522:	0c1b      	lsrs	r3, r3, #16
 800b524:	1889      	adds	r1, r1, r2
 800b526:	9a00      	ldr	r2, [sp, #0]
 800b528:	4353      	muls	r3, r2
 800b52a:	0c0a      	lsrs	r2, r1, #16
 800b52c:	189b      	adds	r3, r3, r2
 800b52e:	0c1a      	lsrs	r2, r3, #16
 800b530:	b289      	uxth	r1, r1
 800b532:	9205      	str	r2, [sp, #20]
 800b534:	b282      	uxth	r2, r0
 800b536:	1a52      	subs	r2, r2, r1
 800b538:	9904      	ldr	r1, [sp, #16]
 800b53a:	0c00      	lsrs	r0, r0, #16
 800b53c:	1852      	adds	r2, r2, r1
 800b53e:	b29b      	uxth	r3, r3
 800b540:	1411      	asrs	r1, r2, #16
 800b542:	1ac3      	subs	r3, r0, r3
 800b544:	185b      	adds	r3, r3, r1
 800b546:	1419      	asrs	r1, r3, #16
 800b548:	b292      	uxth	r2, r2
 800b54a:	041b      	lsls	r3, r3, #16
 800b54c:	431a      	orrs	r2, r3
 800b54e:	9b03      	ldr	r3, [sp, #12]
 800b550:	9104      	str	r1, [sp, #16]
 800b552:	c504      	stmia	r5!, {r2}
 800b554:	4563      	cmp	r3, ip
 800b556:	d2dc      	bcs.n	800b512 <quorem+0x4e>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d030      	beq.n	800b5c0 <quorem+0xfc>
 800b55e:	0030      	movs	r0, r6
 800b560:	9902      	ldr	r1, [sp, #8]
 800b562:	f001 fd7d 	bl	800d060 <__mcmp>
 800b566:	2800      	cmp	r0, #0
 800b568:	db23      	blt.n	800b5b2 <quorem+0xee>
 800b56a:	0034      	movs	r4, r6
 800b56c:	2500      	movs	r5, #0
 800b56e:	9902      	ldr	r1, [sp, #8]
 800b570:	3414      	adds	r4, #20
 800b572:	3114      	adds	r1, #20
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	c901      	ldmia	r1!, {r0}
 800b578:	9302      	str	r3, [sp, #8]
 800b57a:	466b      	mov	r3, sp
 800b57c:	891b      	ldrh	r3, [r3, #8]
 800b57e:	b282      	uxth	r2, r0
 800b580:	1a9a      	subs	r2, r3, r2
 800b582:	9b02      	ldr	r3, [sp, #8]
 800b584:	1952      	adds	r2, r2, r5
 800b586:	0c00      	lsrs	r0, r0, #16
 800b588:	0c1b      	lsrs	r3, r3, #16
 800b58a:	1a1b      	subs	r3, r3, r0
 800b58c:	1410      	asrs	r0, r2, #16
 800b58e:	181b      	adds	r3, r3, r0
 800b590:	141d      	asrs	r5, r3, #16
 800b592:	b292      	uxth	r2, r2
 800b594:	041b      	lsls	r3, r3, #16
 800b596:	431a      	orrs	r2, r3
 800b598:	9b03      	ldr	r3, [sp, #12]
 800b59a:	c404      	stmia	r4!, {r2}
 800b59c:	428b      	cmp	r3, r1
 800b59e:	d2e9      	bcs.n	800b574 <quorem+0xb0>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	00bb      	lsls	r3, r7, #2
 800b5a4:	18d3      	adds	r3, r2, r3
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d013      	beq.n	800b5d4 <quorem+0x110>
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	9800      	ldr	r0, [sp, #0]
 800b5b4:	b007      	add	sp, #28
 800b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d104      	bne.n	800b5c8 <quorem+0x104>
 800b5be:	3f01      	subs	r7, #1
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	3c04      	subs	r4, #4
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	d3f7      	bcc.n	800b5b8 <quorem+0xf4>
 800b5c8:	6137      	str	r7, [r6, #16]
 800b5ca:	e7c8      	b.n	800b55e <quorem+0x9a>
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	d104      	bne.n	800b5dc <quorem+0x118>
 800b5d2:	3f01      	subs	r7, #1
 800b5d4:	9a01      	ldr	r2, [sp, #4]
 800b5d6:	3b04      	subs	r3, #4
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d3f7      	bcc.n	800b5cc <quorem+0x108>
 800b5dc:	6137      	str	r7, [r6, #16]
 800b5de:	e7e5      	b.n	800b5ac <quorem+0xe8>

0800b5e0 <_dtoa_r>:
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	0014      	movs	r4, r2
 800b5e4:	001d      	movs	r5, r3
 800b5e6:	69c6      	ldr	r6, [r0, #28]
 800b5e8:	b09d      	sub	sp, #116	@ 0x74
 800b5ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800b5ec:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b5ee:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b5f0:	9003      	str	r0, [sp, #12]
 800b5f2:	2e00      	cmp	r6, #0
 800b5f4:	d10f      	bne.n	800b616 <_dtoa_r+0x36>
 800b5f6:	2010      	movs	r0, #16
 800b5f8:	f001 f98a 	bl	800c910 <malloc>
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	1e02      	subs	r2, r0, #0
 800b600:	61d8      	str	r0, [r3, #28]
 800b602:	d104      	bne.n	800b60e <_dtoa_r+0x2e>
 800b604:	21ef      	movs	r1, #239	@ 0xef
 800b606:	4bc7      	ldr	r3, [pc, #796]	@ (800b924 <_dtoa_r+0x344>)
 800b608:	48c7      	ldr	r0, [pc, #796]	@ (800b928 <_dtoa_r+0x348>)
 800b60a:	f002 ff53 	bl	800e4b4 <__assert_func>
 800b60e:	6046      	str	r6, [r0, #4]
 800b610:	6086      	str	r6, [r0, #8]
 800b612:	6006      	str	r6, [r0, #0]
 800b614:	60c6      	str	r6, [r0, #12]
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	6819      	ldr	r1, [r3, #0]
 800b61c:	2900      	cmp	r1, #0
 800b61e:	d00b      	beq.n	800b638 <_dtoa_r+0x58>
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	2301      	movs	r3, #1
 800b624:	4093      	lsls	r3, r2
 800b626:	604a      	str	r2, [r1, #4]
 800b628:	608b      	str	r3, [r1, #8]
 800b62a:	9803      	ldr	r0, [sp, #12]
 800b62c:	f001 fa82 	bl	800cb34 <_Bfree>
 800b630:	2200      	movs	r2, #0
 800b632:	9b03      	ldr	r3, [sp, #12]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	2d00      	cmp	r5, #0
 800b63a:	da1e      	bge.n	800b67a <_dtoa_r+0x9a>
 800b63c:	2301      	movs	r3, #1
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	006b      	lsls	r3, r5, #1
 800b642:	085b      	lsrs	r3, r3, #1
 800b644:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b646:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b648:	4bb8      	ldr	r3, [pc, #736]	@ (800b92c <_dtoa_r+0x34c>)
 800b64a:	4ab8      	ldr	r2, [pc, #736]	@ (800b92c <_dtoa_r+0x34c>)
 800b64c:	403b      	ands	r3, r7
 800b64e:	4293      	cmp	r3, r2
 800b650:	d116      	bne.n	800b680 <_dtoa_r+0xa0>
 800b652:	4bb7      	ldr	r3, [pc, #732]	@ (800b930 <_dtoa_r+0x350>)
 800b654:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	033b      	lsls	r3, r7, #12
 800b65a:	0b1b      	lsrs	r3, r3, #12
 800b65c:	4323      	orrs	r3, r4
 800b65e:	d101      	bne.n	800b664 <_dtoa_r+0x84>
 800b660:	f000 fd83 	bl	800c16a <_dtoa_r+0xb8a>
 800b664:	4bb3      	ldr	r3, [pc, #716]	@ (800b934 <_dtoa_r+0x354>)
 800b666:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b668:	9308      	str	r3, [sp, #32]
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	d002      	beq.n	800b674 <_dtoa_r+0x94>
 800b66e:	4bb2      	ldr	r3, [pc, #712]	@ (800b938 <_dtoa_r+0x358>)
 800b670:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	9808      	ldr	r0, [sp, #32]
 800b676:	b01d      	add	sp, #116	@ 0x74
 800b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b67a:	2300      	movs	r3, #0
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	e7e2      	b.n	800b646 <_dtoa_r+0x66>
 800b680:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b684:	9212      	str	r2, [sp, #72]	@ 0x48
 800b686:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b688:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b68a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	f7f4 fee6 	bl	8000460 <__aeabi_dcmpeq>
 800b694:	1e06      	subs	r6, r0, #0
 800b696:	d00b      	beq.n	800b6b0 <_dtoa_r+0xd0>
 800b698:	2301      	movs	r3, #1
 800b69a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <_dtoa_r+0xca>
 800b6a4:	4ba5      	ldr	r3, [pc, #660]	@ (800b93c <_dtoa_r+0x35c>)
 800b6a6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	4ba5      	ldr	r3, [pc, #660]	@ (800b940 <_dtoa_r+0x360>)
 800b6ac:	9308      	str	r3, [sp, #32]
 800b6ae:	e7e1      	b.n	800b674 <_dtoa_r+0x94>
 800b6b0:	ab1a      	add	r3, sp, #104	@ 0x68
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	9803      	ldr	r0, [sp, #12]
 800b6ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b6bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6be:	f001 fdf1 	bl	800d2a4 <__d2b>
 800b6c2:	007a      	lsls	r2, r7, #1
 800b6c4:	9005      	str	r0, [sp, #20]
 800b6c6:	0d52      	lsrs	r2, r2, #21
 800b6c8:	d100      	bne.n	800b6cc <_dtoa_r+0xec>
 800b6ca:	e07b      	b.n	800b7c4 <_dtoa_r+0x1e4>
 800b6cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6ce:	9618      	str	r6, [sp, #96]	@ 0x60
 800b6d0:	0319      	lsls	r1, r3, #12
 800b6d2:	4b9c      	ldr	r3, [pc, #624]	@ (800b944 <_dtoa_r+0x364>)
 800b6d4:	0b09      	lsrs	r1, r1, #12
 800b6d6:	430b      	orrs	r3, r1
 800b6d8:	499b      	ldr	r1, [pc, #620]	@ (800b948 <_dtoa_r+0x368>)
 800b6da:	1857      	adds	r7, r2, r1
 800b6dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b6de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b6e0:	0019      	movs	r1, r3
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4b99      	ldr	r3, [pc, #612]	@ (800b94c <_dtoa_r+0x36c>)
 800b6e6:	f7f6 fcfb 	bl	80020e0 <__aeabi_dsub>
 800b6ea:	4a99      	ldr	r2, [pc, #612]	@ (800b950 <_dtoa_r+0x370>)
 800b6ec:	4b99      	ldr	r3, [pc, #612]	@ (800b954 <_dtoa_r+0x374>)
 800b6ee:	f7f6 fa2f 	bl	8001b50 <__aeabi_dmul>
 800b6f2:	4a99      	ldr	r2, [pc, #612]	@ (800b958 <_dtoa_r+0x378>)
 800b6f4:	4b99      	ldr	r3, [pc, #612]	@ (800b95c <_dtoa_r+0x37c>)
 800b6f6:	f7f5 fa83 	bl	8000c00 <__aeabi_dadd>
 800b6fa:	0004      	movs	r4, r0
 800b6fc:	0038      	movs	r0, r7
 800b6fe:	000d      	movs	r5, r1
 800b700:	f7f7 f8e8 	bl	80028d4 <__aeabi_i2d>
 800b704:	4a96      	ldr	r2, [pc, #600]	@ (800b960 <_dtoa_r+0x380>)
 800b706:	4b97      	ldr	r3, [pc, #604]	@ (800b964 <_dtoa_r+0x384>)
 800b708:	f7f6 fa22 	bl	8001b50 <__aeabi_dmul>
 800b70c:	0002      	movs	r2, r0
 800b70e:	000b      	movs	r3, r1
 800b710:	0020      	movs	r0, r4
 800b712:	0029      	movs	r1, r5
 800b714:	f7f5 fa74 	bl	8000c00 <__aeabi_dadd>
 800b718:	0004      	movs	r4, r0
 800b71a:	000d      	movs	r5, r1
 800b71c:	f7f7 f89e 	bl	800285c <__aeabi_d2iz>
 800b720:	2200      	movs	r2, #0
 800b722:	9004      	str	r0, [sp, #16]
 800b724:	2300      	movs	r3, #0
 800b726:	0020      	movs	r0, r4
 800b728:	0029      	movs	r1, r5
 800b72a:	f7f4 fe9f 	bl	800046c <__aeabi_dcmplt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d00b      	beq.n	800b74a <_dtoa_r+0x16a>
 800b732:	9804      	ldr	r0, [sp, #16]
 800b734:	f7f7 f8ce 	bl	80028d4 <__aeabi_i2d>
 800b738:	002b      	movs	r3, r5
 800b73a:	0022      	movs	r2, r4
 800b73c:	f7f4 fe90 	bl	8000460 <__aeabi_dcmpeq>
 800b740:	4243      	negs	r3, r0
 800b742:	4158      	adcs	r0, r3
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	1a1b      	subs	r3, r3, r0
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	2301      	movs	r3, #1
 800b74c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	2b16      	cmp	r3, #22
 800b752:	d810      	bhi.n	800b776 <_dtoa_r+0x196>
 800b754:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b756:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b758:	9a04      	ldr	r2, [sp, #16]
 800b75a:	4b83      	ldr	r3, [pc, #524]	@ (800b968 <_dtoa_r+0x388>)
 800b75c:	00d2      	lsls	r2, r2, #3
 800b75e:	189b      	adds	r3, r3, r2
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	f7f4 fe82 	bl	800046c <__aeabi_dcmplt>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d047      	beq.n	800b7fc <_dtoa_r+0x21c>
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	3b01      	subs	r3, #1
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	2300      	movs	r3, #0
 800b774:	9315      	str	r3, [sp, #84]	@ 0x54
 800b776:	2200      	movs	r2, #0
 800b778:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b77a:	9206      	str	r2, [sp, #24]
 800b77c:	1bdb      	subs	r3, r3, r7
 800b77e:	1e5a      	subs	r2, r3, #1
 800b780:	d53e      	bpl.n	800b800 <_dtoa_r+0x220>
 800b782:	2201      	movs	r2, #1
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	9306      	str	r3, [sp, #24]
 800b788:	2300      	movs	r3, #0
 800b78a:	930d      	str	r3, [sp, #52]	@ 0x34
 800b78c:	9b04      	ldr	r3, [sp, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	db38      	blt.n	800b804 <_dtoa_r+0x224>
 800b792:	9a04      	ldr	r2, [sp, #16]
 800b794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b796:	4694      	mov	ip, r2
 800b798:	4463      	add	r3, ip
 800b79a:	930d      	str	r3, [sp, #52]	@ 0x34
 800b79c:	2300      	movs	r3, #0
 800b79e:	9214      	str	r2, [sp, #80]	@ 0x50
 800b7a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b7a4:	2401      	movs	r4, #1
 800b7a6:	2b09      	cmp	r3, #9
 800b7a8:	d867      	bhi.n	800b87a <_dtoa_r+0x29a>
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	dd02      	ble.n	800b7b4 <_dtoa_r+0x1d4>
 800b7ae:	2400      	movs	r4, #0
 800b7b0:	3b04      	subs	r3, #4
 800b7b2:	9322      	str	r3, [sp, #136]	@ 0x88
 800b7b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b7b6:	1e98      	subs	r0, r3, #2
 800b7b8:	2803      	cmp	r0, #3
 800b7ba:	d867      	bhi.n	800b88c <_dtoa_r+0x2ac>
 800b7bc:	f7f4 fcb6 	bl	800012c <__gnu_thumb1_case_uqi>
 800b7c0:	5b383a2b 	.word	0x5b383a2b
 800b7c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b7c6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b7c8:	18f6      	adds	r6, r6, r3
 800b7ca:	4b68      	ldr	r3, [pc, #416]	@ (800b96c <_dtoa_r+0x38c>)
 800b7cc:	18f2      	adds	r2, r6, r3
 800b7ce:	2a20      	cmp	r2, #32
 800b7d0:	dd0f      	ble.n	800b7f2 <_dtoa_r+0x212>
 800b7d2:	2340      	movs	r3, #64	@ 0x40
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	409f      	lsls	r7, r3
 800b7d8:	4b65      	ldr	r3, [pc, #404]	@ (800b970 <_dtoa_r+0x390>)
 800b7da:	0038      	movs	r0, r7
 800b7dc:	18f3      	adds	r3, r6, r3
 800b7de:	40dc      	lsrs	r4, r3
 800b7e0:	4320      	orrs	r0, r4
 800b7e2:	f7f7 f8a5 	bl	8002930 <__aeabi_ui2d>
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	4b62      	ldr	r3, [pc, #392]	@ (800b974 <_dtoa_r+0x394>)
 800b7ea:	1e77      	subs	r7, r6, #1
 800b7ec:	18cb      	adds	r3, r1, r3
 800b7ee:	9218      	str	r2, [sp, #96]	@ 0x60
 800b7f0:	e776      	b.n	800b6e0 <_dtoa_r+0x100>
 800b7f2:	2320      	movs	r3, #32
 800b7f4:	0020      	movs	r0, r4
 800b7f6:	1a9b      	subs	r3, r3, r2
 800b7f8:	4098      	lsls	r0, r3
 800b7fa:	e7f2      	b.n	800b7e2 <_dtoa_r+0x202>
 800b7fc:	9015      	str	r0, [sp, #84]	@ 0x54
 800b7fe:	e7ba      	b.n	800b776 <_dtoa_r+0x196>
 800b800:	920d      	str	r2, [sp, #52]	@ 0x34
 800b802:	e7c3      	b.n	800b78c <_dtoa_r+0x1ac>
 800b804:	9b06      	ldr	r3, [sp, #24]
 800b806:	9a04      	ldr	r2, [sp, #16]
 800b808:	1a9b      	subs	r3, r3, r2
 800b80a:	9306      	str	r3, [sp, #24]
 800b80c:	4253      	negs	r3, r2
 800b80e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b810:	2300      	movs	r3, #0
 800b812:	9314      	str	r3, [sp, #80]	@ 0x50
 800b814:	e7c5      	b.n	800b7a2 <_dtoa_r+0x1c2>
 800b816:	2300      	movs	r3, #0
 800b818:	9310      	str	r3, [sp, #64]	@ 0x40
 800b81a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b81c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	dc13      	bgt.n	800b84c <_dtoa_r+0x26c>
 800b824:	2301      	movs	r3, #1
 800b826:	001a      	movs	r2, r3
 800b828:	930e      	str	r3, [sp, #56]	@ 0x38
 800b82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b82c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b82e:	e00d      	b.n	800b84c <_dtoa_r+0x26c>
 800b830:	2301      	movs	r3, #1
 800b832:	e7f1      	b.n	800b818 <_dtoa_r+0x238>
 800b834:	2300      	movs	r3, #0
 800b836:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b838:	9310      	str	r3, [sp, #64]	@ 0x40
 800b83a:	4694      	mov	ip, r2
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	4463      	add	r3, ip
 800b840:	930e      	str	r3, [sp, #56]	@ 0x38
 800b842:	3301      	adds	r3, #1
 800b844:	9309      	str	r3, [sp, #36]	@ 0x24
 800b846:	2b00      	cmp	r3, #0
 800b848:	dc00      	bgt.n	800b84c <_dtoa_r+0x26c>
 800b84a:	2301      	movs	r3, #1
 800b84c:	9a03      	ldr	r2, [sp, #12]
 800b84e:	2100      	movs	r1, #0
 800b850:	69d0      	ldr	r0, [r2, #28]
 800b852:	2204      	movs	r2, #4
 800b854:	0015      	movs	r5, r2
 800b856:	3514      	adds	r5, #20
 800b858:	429d      	cmp	r5, r3
 800b85a:	d91b      	bls.n	800b894 <_dtoa_r+0x2b4>
 800b85c:	6041      	str	r1, [r0, #4]
 800b85e:	9803      	ldr	r0, [sp, #12]
 800b860:	f001 f924 	bl	800caac <_Balloc>
 800b864:	9008      	str	r0, [sp, #32]
 800b866:	2800      	cmp	r0, #0
 800b868:	d117      	bne.n	800b89a <_dtoa_r+0x2ba>
 800b86a:	21b0      	movs	r1, #176	@ 0xb0
 800b86c:	4b42      	ldr	r3, [pc, #264]	@ (800b978 <_dtoa_r+0x398>)
 800b86e:	482e      	ldr	r0, [pc, #184]	@ (800b928 <_dtoa_r+0x348>)
 800b870:	9a08      	ldr	r2, [sp, #32]
 800b872:	31ff      	adds	r1, #255	@ 0xff
 800b874:	e6c9      	b.n	800b60a <_dtoa_r+0x2a>
 800b876:	2301      	movs	r3, #1
 800b878:	e7dd      	b.n	800b836 <_dtoa_r+0x256>
 800b87a:	2300      	movs	r3, #0
 800b87c:	9410      	str	r4, [sp, #64]	@ 0x40
 800b87e:	9322      	str	r3, [sp, #136]	@ 0x88
 800b880:	3b01      	subs	r3, #1
 800b882:	930e      	str	r3, [sp, #56]	@ 0x38
 800b884:	9309      	str	r3, [sp, #36]	@ 0x24
 800b886:	2200      	movs	r2, #0
 800b888:	3313      	adds	r3, #19
 800b88a:	e7cf      	b.n	800b82c <_dtoa_r+0x24c>
 800b88c:	2301      	movs	r3, #1
 800b88e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b890:	3b02      	subs	r3, #2
 800b892:	e7f6      	b.n	800b882 <_dtoa_r+0x2a2>
 800b894:	3101      	adds	r1, #1
 800b896:	0052      	lsls	r2, r2, #1
 800b898:	e7dc      	b.n	800b854 <_dtoa_r+0x274>
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	9a08      	ldr	r2, [sp, #32]
 800b89e:	69db      	ldr	r3, [r3, #28]
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a4:	2b0e      	cmp	r3, #14
 800b8a6:	d900      	bls.n	800b8aa <_dtoa_r+0x2ca>
 800b8a8:	e0d9      	b.n	800ba5e <_dtoa_r+0x47e>
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	d100      	bne.n	800b8b0 <_dtoa_r+0x2d0>
 800b8ae:	e0d6      	b.n	800ba5e <_dtoa_r+0x47e>
 800b8b0:	9b04      	ldr	r3, [sp, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	dd64      	ble.n	800b980 <_dtoa_r+0x3a0>
 800b8b6:	210f      	movs	r1, #15
 800b8b8:	9a04      	ldr	r2, [sp, #16]
 800b8ba:	4b2b      	ldr	r3, [pc, #172]	@ (800b968 <_dtoa_r+0x388>)
 800b8bc:	400a      	ands	r2, r1
 800b8be:	00d2      	lsls	r2, r2, #3
 800b8c0:	189b      	adds	r3, r3, r2
 800b8c2:	681e      	ldr	r6, [r3, #0]
 800b8c4:	685f      	ldr	r7, [r3, #4]
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	2402      	movs	r4, #2
 800b8ca:	111d      	asrs	r5, r3, #4
 800b8cc:	05db      	lsls	r3, r3, #23
 800b8ce:	d50a      	bpl.n	800b8e6 <_dtoa_r+0x306>
 800b8d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b97c <_dtoa_r+0x39c>)
 800b8d2:	400d      	ands	r5, r1
 800b8d4:	6a1a      	ldr	r2, [r3, #32]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b8da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b8dc:	f7f5 fcf4 	bl	80012c8 <__aeabi_ddiv>
 800b8e0:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8e4:	3401      	adds	r4, #1
 800b8e6:	4b25      	ldr	r3, [pc, #148]	@ (800b97c <_dtoa_r+0x39c>)
 800b8e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8ea:	2d00      	cmp	r5, #0
 800b8ec:	d108      	bne.n	800b900 <_dtoa_r+0x320>
 800b8ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8f2:	0032      	movs	r2, r6
 800b8f4:	003b      	movs	r3, r7
 800b8f6:	f7f5 fce7 	bl	80012c8 <__aeabi_ddiv>
 800b8fa:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8fe:	e05a      	b.n	800b9b6 <_dtoa_r+0x3d6>
 800b900:	2301      	movs	r3, #1
 800b902:	421d      	tst	r5, r3
 800b904:	d009      	beq.n	800b91a <_dtoa_r+0x33a>
 800b906:	18e4      	adds	r4, r4, r3
 800b908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b90a:	0030      	movs	r0, r6
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	0039      	movs	r1, r7
 800b912:	f7f6 f91d 	bl	8001b50 <__aeabi_dmul>
 800b916:	0006      	movs	r6, r0
 800b918:	000f      	movs	r7, r1
 800b91a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b91c:	106d      	asrs	r5, r5, #1
 800b91e:	3308      	adds	r3, #8
 800b920:	e7e2      	b.n	800b8e8 <_dtoa_r+0x308>
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	0800e97c 	.word	0x0800e97c
 800b928:	0800e993 	.word	0x0800e993
 800b92c:	7ff00000 	.word	0x7ff00000
 800b930:	0000270f 	.word	0x0000270f
 800b934:	0800e978 	.word	0x0800e978
 800b938:	0800e97b 	.word	0x0800e97b
 800b93c:	0800ece1 	.word	0x0800ece1
 800b940:	0800ece0 	.word	0x0800ece0
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	fffffc01 	.word	0xfffffc01
 800b94c:	3ff80000 	.word	0x3ff80000
 800b950:	636f4361 	.word	0x636f4361
 800b954:	3fd287a7 	.word	0x3fd287a7
 800b958:	8b60c8b3 	.word	0x8b60c8b3
 800b95c:	3fc68a28 	.word	0x3fc68a28
 800b960:	509f79fb 	.word	0x509f79fb
 800b964:	3fd34413 	.word	0x3fd34413
 800b968:	0800eaf0 	.word	0x0800eaf0
 800b96c:	00000432 	.word	0x00000432
 800b970:	00000412 	.word	0x00000412
 800b974:	fe100000 	.word	0xfe100000
 800b978:	0800e9eb 	.word	0x0800e9eb
 800b97c:	0800eac8 	.word	0x0800eac8
 800b980:	9b04      	ldr	r3, [sp, #16]
 800b982:	2402      	movs	r4, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d016      	beq.n	800b9b6 <_dtoa_r+0x3d6>
 800b988:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b98a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b98c:	220f      	movs	r2, #15
 800b98e:	425d      	negs	r5, r3
 800b990:	402a      	ands	r2, r5
 800b992:	4bd7      	ldr	r3, [pc, #860]	@ (800bcf0 <_dtoa_r+0x710>)
 800b994:	00d2      	lsls	r2, r2, #3
 800b996:	189b      	adds	r3, r3, r2
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f7f6 f8d8 	bl	8001b50 <__aeabi_dmul>
 800b9a0:	2701      	movs	r7, #1
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9a8:	4ed2      	ldr	r6, [pc, #840]	@ (800bcf4 <_dtoa_r+0x714>)
 800b9aa:	112d      	asrs	r5, r5, #4
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	d000      	beq.n	800b9b2 <_dtoa_r+0x3d2>
 800b9b0:	e0ba      	b.n	800bb28 <_dtoa_r+0x548>
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1a1      	bne.n	800b8fa <_dtoa_r+0x31a>
 800b9b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b9b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b9ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d100      	bne.n	800b9c2 <_dtoa_r+0x3e2>
 800b9c0:	e0bd      	b.n	800bb3e <_dtoa_r+0x55e>
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	0030      	movs	r0, r6
 800b9c6:	0039      	movs	r1, r7
 800b9c8:	4bcb      	ldr	r3, [pc, #812]	@ (800bcf8 <_dtoa_r+0x718>)
 800b9ca:	f7f4 fd4f 	bl	800046c <__aeabi_dcmplt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d100      	bne.n	800b9d4 <_dtoa_r+0x3f4>
 800b9d2:	e0b4      	b.n	800bb3e <_dtoa_r+0x55e>
 800b9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d100      	bne.n	800b9dc <_dtoa_r+0x3fc>
 800b9da:	e0b0      	b.n	800bb3e <_dtoa_r+0x55e>
 800b9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	dd39      	ble.n	800ba56 <_dtoa_r+0x476>
 800b9e2:	9b04      	ldr	r3, [sp, #16]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9ea:	0030      	movs	r0, r6
 800b9ec:	4bc3      	ldr	r3, [pc, #780]	@ (800bcfc <_dtoa_r+0x71c>)
 800b9ee:	0039      	movs	r1, r7
 800b9f0:	f7f6 f8ae 	bl	8001b50 <__aeabi_dmul>
 800b9f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9fa:	3401      	adds	r4, #1
 800b9fc:	0020      	movs	r0, r4
 800b9fe:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba00:	f7f6 ff68 	bl	80028d4 <__aeabi_i2d>
 800ba04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba08:	f7f6 f8a2 	bl	8001b50 <__aeabi_dmul>
 800ba0c:	4bbc      	ldr	r3, [pc, #752]	@ (800bd00 <_dtoa_r+0x720>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f7f5 f8f6 	bl	8000c00 <__aeabi_dadd>
 800ba14:	4bbb      	ldr	r3, [pc, #748]	@ (800bd04 <_dtoa_r+0x724>)
 800ba16:	0006      	movs	r6, r0
 800ba18:	18cf      	adds	r7, r1, r3
 800ba1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d000      	beq.n	800ba22 <_dtoa_r+0x442>
 800ba20:	e091      	b.n	800bb46 <_dtoa_r+0x566>
 800ba22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba26:	2200      	movs	r2, #0
 800ba28:	4bb7      	ldr	r3, [pc, #732]	@ (800bd08 <_dtoa_r+0x728>)
 800ba2a:	f7f6 fb59 	bl	80020e0 <__aeabi_dsub>
 800ba2e:	0032      	movs	r2, r6
 800ba30:	003b      	movs	r3, r7
 800ba32:	0004      	movs	r4, r0
 800ba34:	000d      	movs	r5, r1
 800ba36:	f7f4 fd2d 	bl	8000494 <__aeabi_dcmpgt>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d000      	beq.n	800ba40 <_dtoa_r+0x460>
 800ba3e:	e29d      	b.n	800bf7c <_dtoa_r+0x99c>
 800ba40:	2180      	movs	r1, #128	@ 0x80
 800ba42:	0609      	lsls	r1, r1, #24
 800ba44:	187b      	adds	r3, r7, r1
 800ba46:	0032      	movs	r2, r6
 800ba48:	0020      	movs	r0, r4
 800ba4a:	0029      	movs	r1, r5
 800ba4c:	f7f4 fd0e 	bl	800046c <__aeabi_dcmplt>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d000      	beq.n	800ba56 <_dtoa_r+0x476>
 800ba54:	e130      	b.n	800bcb8 <_dtoa_r+0x6d8>
 800ba56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ba5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	da00      	bge.n	800ba66 <_dtoa_r+0x486>
 800ba64:	e177      	b.n	800bd56 <_dtoa_r+0x776>
 800ba66:	9a04      	ldr	r2, [sp, #16]
 800ba68:	2a0e      	cmp	r2, #14
 800ba6a:	dd00      	ble.n	800ba6e <_dtoa_r+0x48e>
 800ba6c:	e173      	b.n	800bd56 <_dtoa_r+0x776>
 800ba6e:	4ba0      	ldr	r3, [pc, #640]	@ (800bcf0 <_dtoa_r+0x710>)
 800ba70:	00d2      	lsls	r2, r2, #3
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	685c      	ldr	r4, [r3, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	9306      	str	r3, [sp, #24]
 800ba7a:	9407      	str	r4, [sp, #28]
 800ba7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	da03      	bge.n	800ba8a <_dtoa_r+0x4aa>
 800ba82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dc00      	bgt.n	800ba8a <_dtoa_r+0x4aa>
 800ba88:	e106      	b.n	800bc98 <_dtoa_r+0x6b8>
 800ba8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ba8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba90:	9d08      	ldr	r5, [sp, #32]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	195b      	adds	r3, r3, r5
 800ba96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba98:	9a06      	ldr	r2, [sp, #24]
 800ba9a:	9b07      	ldr	r3, [sp, #28]
 800ba9c:	0030      	movs	r0, r6
 800ba9e:	0039      	movs	r1, r7
 800baa0:	f7f5 fc12 	bl	80012c8 <__aeabi_ddiv>
 800baa4:	f7f6 feda 	bl	800285c <__aeabi_d2iz>
 800baa8:	9009      	str	r0, [sp, #36]	@ 0x24
 800baaa:	f7f6 ff13 	bl	80028d4 <__aeabi_i2d>
 800baae:	9a06      	ldr	r2, [sp, #24]
 800bab0:	9b07      	ldr	r3, [sp, #28]
 800bab2:	f7f6 f84d 	bl	8001b50 <__aeabi_dmul>
 800bab6:	0002      	movs	r2, r0
 800bab8:	000b      	movs	r3, r1
 800baba:	0030      	movs	r0, r6
 800babc:	0039      	movs	r1, r7
 800babe:	f7f6 fb0f 	bl	80020e0 <__aeabi_dsub>
 800bac2:	002b      	movs	r3, r5
 800bac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bac6:	3501      	adds	r5, #1
 800bac8:	3230      	adds	r2, #48	@ 0x30
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bace:	002c      	movs	r4, r5
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d000      	beq.n	800bad6 <_dtoa_r+0x4f6>
 800bad4:	e131      	b.n	800bd3a <_dtoa_r+0x75a>
 800bad6:	0002      	movs	r2, r0
 800bad8:	000b      	movs	r3, r1
 800bada:	f7f5 f891 	bl	8000c00 <__aeabi_dadd>
 800bade:	9a06      	ldr	r2, [sp, #24]
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	0006      	movs	r6, r0
 800bae4:	000f      	movs	r7, r1
 800bae6:	f7f4 fcd5 	bl	8000494 <__aeabi_dcmpgt>
 800baea:	2800      	cmp	r0, #0
 800baec:	d000      	beq.n	800baf0 <_dtoa_r+0x510>
 800baee:	e10f      	b.n	800bd10 <_dtoa_r+0x730>
 800baf0:	9a06      	ldr	r2, [sp, #24]
 800baf2:	9b07      	ldr	r3, [sp, #28]
 800baf4:	0030      	movs	r0, r6
 800baf6:	0039      	movs	r1, r7
 800baf8:	f7f4 fcb2 	bl	8000460 <__aeabi_dcmpeq>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d003      	beq.n	800bb08 <_dtoa_r+0x528>
 800bb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb02:	07dd      	lsls	r5, r3, #31
 800bb04:	d500      	bpl.n	800bb08 <_dtoa_r+0x528>
 800bb06:	e103      	b.n	800bd10 <_dtoa_r+0x730>
 800bb08:	9905      	ldr	r1, [sp, #20]
 800bb0a:	9803      	ldr	r0, [sp, #12]
 800bb0c:	f001 f812 	bl	800cb34 <_Bfree>
 800bb10:	2300      	movs	r3, #0
 800bb12:	7023      	strb	r3, [r4, #0]
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bb18:	3301      	adds	r3, #1
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d100      	bne.n	800bb24 <_dtoa_r+0x544>
 800bb22:	e5a7      	b.n	800b674 <_dtoa_r+0x94>
 800bb24:	601c      	str	r4, [r3, #0]
 800bb26:	e5a5      	b.n	800b674 <_dtoa_r+0x94>
 800bb28:	423d      	tst	r5, r7
 800bb2a:	d005      	beq.n	800bb38 <_dtoa_r+0x558>
 800bb2c:	6832      	ldr	r2, [r6, #0]
 800bb2e:	6873      	ldr	r3, [r6, #4]
 800bb30:	f7f6 f80e 	bl	8001b50 <__aeabi_dmul>
 800bb34:	003b      	movs	r3, r7
 800bb36:	3401      	adds	r4, #1
 800bb38:	106d      	asrs	r5, r5, #1
 800bb3a:	3608      	adds	r6, #8
 800bb3c:	e736      	b.n	800b9ac <_dtoa_r+0x3cc>
 800bb3e:	9b04      	ldr	r3, [sp, #16]
 800bb40:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb44:	e75a      	b.n	800b9fc <_dtoa_r+0x41c>
 800bb46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb48:	4b69      	ldr	r3, [pc, #420]	@ (800bcf0 <_dtoa_r+0x710>)
 800bb4a:	3a01      	subs	r2, #1
 800bb4c:	00d2      	lsls	r2, r2, #3
 800bb4e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bb50:	189b      	adds	r3, r3, r2
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	2900      	cmp	r1, #0
 800bb58:	d04c      	beq.n	800bbf4 <_dtoa_r+0x614>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	496b      	ldr	r1, [pc, #428]	@ (800bd0c <_dtoa_r+0x72c>)
 800bb5e:	f7f5 fbb3 	bl	80012c8 <__aeabi_ddiv>
 800bb62:	0032      	movs	r2, r6
 800bb64:	003b      	movs	r3, r7
 800bb66:	f7f6 fabb 	bl	80020e0 <__aeabi_dsub>
 800bb6a:	9a08      	ldr	r2, [sp, #32]
 800bb6c:	0006      	movs	r6, r0
 800bb6e:	4694      	mov	ip, r2
 800bb70:	000f      	movs	r7, r1
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb78:	4463      	add	r3, ip
 800bb7a:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb80:	f7f6 fe6c 	bl	800285c <__aeabi_d2iz>
 800bb84:	0005      	movs	r5, r0
 800bb86:	f7f6 fea5 	bl	80028d4 <__aeabi_i2d>
 800bb8a:	0002      	movs	r2, r0
 800bb8c:	000b      	movs	r3, r1
 800bb8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb92:	f7f6 faa5 	bl	80020e0 <__aeabi_dsub>
 800bb96:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb98:	3530      	adds	r5, #48	@ 0x30
 800bb9a:	1c5c      	adds	r4, r3, #1
 800bb9c:	701d      	strb	r5, [r3, #0]
 800bb9e:	0032      	movs	r2, r6
 800bba0:	003b      	movs	r3, r7
 800bba2:	900a      	str	r0, [sp, #40]	@ 0x28
 800bba4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bba6:	f7f4 fc61 	bl	800046c <__aeabi_dcmplt>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d16a      	bne.n	800bc84 <_dtoa_r+0x6a4>
 800bbae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	4950      	ldr	r1, [pc, #320]	@ (800bcf8 <_dtoa_r+0x718>)
 800bbb6:	f7f6 fa93 	bl	80020e0 <__aeabi_dsub>
 800bbba:	0032      	movs	r2, r6
 800bbbc:	003b      	movs	r3, r7
 800bbbe:	f7f4 fc55 	bl	800046c <__aeabi_dcmplt>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d000      	beq.n	800bbc8 <_dtoa_r+0x5e8>
 800bbc6:	e0a5      	b.n	800bd14 <_dtoa_r+0x734>
 800bbc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	d100      	bne.n	800bbd0 <_dtoa_r+0x5f0>
 800bbce:	e742      	b.n	800ba56 <_dtoa_r+0x476>
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	0030      	movs	r0, r6
 800bbd4:	0039      	movs	r1, r7
 800bbd6:	4b49      	ldr	r3, [pc, #292]	@ (800bcfc <_dtoa_r+0x71c>)
 800bbd8:	f7f5 ffba 	bl	8001b50 <__aeabi_dmul>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	0006      	movs	r6, r0
 800bbe0:	000f      	movs	r7, r1
 800bbe2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbe6:	4b45      	ldr	r3, [pc, #276]	@ (800bcfc <_dtoa_r+0x71c>)
 800bbe8:	f7f5 ffb2 	bl	8001b50 <__aeabi_dmul>
 800bbec:	9416      	str	r4, [sp, #88]	@ 0x58
 800bbee:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbf2:	e7c3      	b.n	800bb7c <_dtoa_r+0x59c>
 800bbf4:	0030      	movs	r0, r6
 800bbf6:	0039      	movs	r1, r7
 800bbf8:	f7f5 ffaa 	bl	8001b50 <__aeabi_dmul>
 800bbfc:	9d08      	ldr	r5, [sp, #32]
 800bbfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bc00:	002b      	movs	r3, r5
 800bc02:	4694      	mov	ip, r2
 800bc04:	9016      	str	r0, [sp, #88]	@ 0x58
 800bc06:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bc08:	4463      	add	r3, ip
 800bc0a:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc0e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc10:	f7f6 fe24 	bl	800285c <__aeabi_d2iz>
 800bc14:	0004      	movs	r4, r0
 800bc16:	f7f6 fe5d 	bl	80028d4 <__aeabi_i2d>
 800bc1a:	000b      	movs	r3, r1
 800bc1c:	0002      	movs	r2, r0
 800bc1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc22:	f7f6 fa5d 	bl	80020e0 <__aeabi_dsub>
 800bc26:	3430      	adds	r4, #48	@ 0x30
 800bc28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc2a:	702c      	strb	r4, [r5, #0]
 800bc2c:	3501      	adds	r5, #1
 800bc2e:	0006      	movs	r6, r0
 800bc30:	000f      	movs	r7, r1
 800bc32:	42ab      	cmp	r3, r5
 800bc34:	d129      	bne.n	800bc8a <_dtoa_r+0x6aa>
 800bc36:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bc38:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bc3a:	9b08      	ldr	r3, [sp, #32]
 800bc3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800bc3e:	469c      	mov	ip, r3
 800bc40:	2200      	movs	r2, #0
 800bc42:	4b32      	ldr	r3, [pc, #200]	@ (800bd0c <_dtoa_r+0x72c>)
 800bc44:	4464      	add	r4, ip
 800bc46:	f7f4 ffdb 	bl	8000c00 <__aeabi_dadd>
 800bc4a:	0002      	movs	r2, r0
 800bc4c:	000b      	movs	r3, r1
 800bc4e:	0030      	movs	r0, r6
 800bc50:	0039      	movs	r1, r7
 800bc52:	f7f4 fc1f 	bl	8000494 <__aeabi_dcmpgt>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d15c      	bne.n	800bd14 <_dtoa_r+0x734>
 800bc5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc5e:	2000      	movs	r0, #0
 800bc60:	492a      	ldr	r1, [pc, #168]	@ (800bd0c <_dtoa_r+0x72c>)
 800bc62:	f7f6 fa3d 	bl	80020e0 <__aeabi_dsub>
 800bc66:	0002      	movs	r2, r0
 800bc68:	000b      	movs	r3, r1
 800bc6a:	0030      	movs	r0, r6
 800bc6c:	0039      	movs	r1, r7
 800bc6e:	f7f4 fbfd 	bl	800046c <__aeabi_dcmplt>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d100      	bne.n	800bc78 <_dtoa_r+0x698>
 800bc76:	e6ee      	b.n	800ba56 <_dtoa_r+0x476>
 800bc78:	0023      	movs	r3, r4
 800bc7a:	3c01      	subs	r4, #1
 800bc7c:	7822      	ldrb	r2, [r4, #0]
 800bc7e:	2a30      	cmp	r2, #48	@ 0x30
 800bc80:	d0fa      	beq.n	800bc78 <_dtoa_r+0x698>
 800bc82:	001c      	movs	r4, r3
 800bc84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	e73e      	b.n	800bb08 <_dtoa_r+0x528>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4b1b      	ldr	r3, [pc, #108]	@ (800bcfc <_dtoa_r+0x71c>)
 800bc8e:	f7f5 ff5f 	bl	8001b50 <__aeabi_dmul>
 800bc92:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc94:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc96:	e7b9      	b.n	800bc0c <_dtoa_r+0x62c>
 800bc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10c      	bne.n	800bcb8 <_dtoa_r+0x6d8>
 800bc9e:	9806      	ldr	r0, [sp, #24]
 800bca0:	9907      	ldr	r1, [sp, #28]
 800bca2:	2200      	movs	r2, #0
 800bca4:	4b18      	ldr	r3, [pc, #96]	@ (800bd08 <_dtoa_r+0x728>)
 800bca6:	f7f5 ff53 	bl	8001b50 <__aeabi_dmul>
 800bcaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcae:	f7f4 fbfb 	bl	80004a8 <__aeabi_dcmpge>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d100      	bne.n	800bcb8 <_dtoa_r+0x6d8>
 800bcb6:	e164      	b.n	800bf82 <_dtoa_r+0x9a2>
 800bcb8:	2600      	movs	r6, #0
 800bcba:	0037      	movs	r7, r6
 800bcbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcbe:	9c08      	ldr	r4, [sp, #32]
 800bcc0:	43db      	mvns	r3, r3
 800bcc2:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9304      	str	r3, [sp, #16]
 800bcc8:	0031      	movs	r1, r6
 800bcca:	9803      	ldr	r0, [sp, #12]
 800bccc:	f000 ff32 	bl	800cb34 <_Bfree>
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	d0d7      	beq.n	800bc84 <_dtoa_r+0x6a4>
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <_dtoa_r+0x706>
 800bcda:	42bb      	cmp	r3, r7
 800bcdc:	d003      	beq.n	800bce6 <_dtoa_r+0x706>
 800bcde:	0019      	movs	r1, r3
 800bce0:	9803      	ldr	r0, [sp, #12]
 800bce2:	f000 ff27 	bl	800cb34 <_Bfree>
 800bce6:	0039      	movs	r1, r7
 800bce8:	9803      	ldr	r0, [sp, #12]
 800bcea:	f000 ff23 	bl	800cb34 <_Bfree>
 800bcee:	e7c9      	b.n	800bc84 <_dtoa_r+0x6a4>
 800bcf0:	0800eaf0 	.word	0x0800eaf0
 800bcf4:	0800eac8 	.word	0x0800eac8
 800bcf8:	3ff00000 	.word	0x3ff00000
 800bcfc:	40240000 	.word	0x40240000
 800bd00:	401c0000 	.word	0x401c0000
 800bd04:	fcc00000 	.word	0xfcc00000
 800bd08:	40140000 	.word	0x40140000
 800bd0c:	3fe00000 	.word	0x3fe00000
 800bd10:	9b04      	ldr	r3, [sp, #16]
 800bd12:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd14:	0023      	movs	r3, r4
 800bd16:	001c      	movs	r4, r3
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	781a      	ldrb	r2, [r3, #0]
 800bd1c:	2a39      	cmp	r2, #57	@ 0x39
 800bd1e:	d108      	bne.n	800bd32 <_dtoa_r+0x752>
 800bd20:	9a08      	ldr	r2, [sp, #32]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d1f7      	bne.n	800bd16 <_dtoa_r+0x736>
 800bd26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd28:	9908      	ldr	r1, [sp, #32]
 800bd2a:	3201      	adds	r2, #1
 800bd2c:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd2e:	2230      	movs	r2, #48	@ 0x30
 800bd30:	700a      	strb	r2, [r1, #0]
 800bd32:	781a      	ldrb	r2, [r3, #0]
 800bd34:	3201      	adds	r2, #1
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	e7a4      	b.n	800bc84 <_dtoa_r+0x6a4>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4bc6      	ldr	r3, [pc, #792]	@ (800c058 <_dtoa_r+0xa78>)
 800bd3e:	f7f5 ff07 	bl	8001b50 <__aeabi_dmul>
 800bd42:	2200      	movs	r2, #0
 800bd44:	2300      	movs	r3, #0
 800bd46:	0006      	movs	r6, r0
 800bd48:	000f      	movs	r7, r1
 800bd4a:	f7f4 fb89 	bl	8000460 <__aeabi_dcmpeq>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d100      	bne.n	800bd54 <_dtoa_r+0x774>
 800bd52:	e6a1      	b.n	800ba98 <_dtoa_r+0x4b8>
 800bd54:	e6d8      	b.n	800bb08 <_dtoa_r+0x528>
 800bd56:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800bd58:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bd5a:	9c06      	ldr	r4, [sp, #24]
 800bd5c:	2f00      	cmp	r7, #0
 800bd5e:	d014      	beq.n	800bd8a <_dtoa_r+0x7aa>
 800bd60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd62:	2a01      	cmp	r2, #1
 800bd64:	dd00      	ble.n	800bd68 <_dtoa_r+0x788>
 800bd66:	e0c8      	b.n	800befa <_dtoa_r+0x91a>
 800bd68:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	d100      	bne.n	800bd70 <_dtoa_r+0x790>
 800bd6e:	e0be      	b.n	800beee <_dtoa_r+0x90e>
 800bd70:	4aba      	ldr	r2, [pc, #744]	@ (800c05c <_dtoa_r+0xa7c>)
 800bd72:	189b      	adds	r3, r3, r2
 800bd74:	9a06      	ldr	r2, [sp, #24]
 800bd76:	2101      	movs	r1, #1
 800bd78:	18d2      	adds	r2, r2, r3
 800bd7a:	9206      	str	r2, [sp, #24]
 800bd7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd7e:	9803      	ldr	r0, [sp, #12]
 800bd80:	18d3      	adds	r3, r2, r3
 800bd82:	930d      	str	r3, [sp, #52]	@ 0x34
 800bd84:	f000 ffda 	bl	800cd3c <__i2b>
 800bd88:	0007      	movs	r7, r0
 800bd8a:	2c00      	cmp	r4, #0
 800bd8c:	d00e      	beq.n	800bdac <_dtoa_r+0x7cc>
 800bd8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dd0b      	ble.n	800bdac <_dtoa_r+0x7cc>
 800bd94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd96:	0023      	movs	r3, r4
 800bd98:	4294      	cmp	r4, r2
 800bd9a:	dd00      	ble.n	800bd9e <_dtoa_r+0x7be>
 800bd9c:	0013      	movs	r3, r2
 800bd9e:	9a06      	ldr	r2, [sp, #24]
 800bda0:	1ae4      	subs	r4, r4, r3
 800bda2:	1ad2      	subs	r2, r2, r3
 800bda4:	9206      	str	r2, [sp, #24]
 800bda6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	930d      	str	r3, [sp, #52]	@ 0x34
 800bdac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01f      	beq.n	800bdf2 <_dtoa_r+0x812>
 800bdb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d100      	bne.n	800bdba <_dtoa_r+0x7da>
 800bdb8:	e0b5      	b.n	800bf26 <_dtoa_r+0x946>
 800bdba:	2d00      	cmp	r5, #0
 800bdbc:	d010      	beq.n	800bde0 <_dtoa_r+0x800>
 800bdbe:	0039      	movs	r1, r7
 800bdc0:	002a      	movs	r2, r5
 800bdc2:	9803      	ldr	r0, [sp, #12]
 800bdc4:	f001 f884 	bl	800ced0 <__pow5mult>
 800bdc8:	9a05      	ldr	r2, [sp, #20]
 800bdca:	0001      	movs	r1, r0
 800bdcc:	0007      	movs	r7, r0
 800bdce:	9803      	ldr	r0, [sp, #12]
 800bdd0:	f000 ffcc 	bl	800cd6c <__multiply>
 800bdd4:	0006      	movs	r6, r0
 800bdd6:	9905      	ldr	r1, [sp, #20]
 800bdd8:	9803      	ldr	r0, [sp, #12]
 800bdda:	f000 feab 	bl	800cb34 <_Bfree>
 800bdde:	9605      	str	r6, [sp, #20]
 800bde0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bde2:	1b5a      	subs	r2, r3, r5
 800bde4:	42ab      	cmp	r3, r5
 800bde6:	d004      	beq.n	800bdf2 <_dtoa_r+0x812>
 800bde8:	9905      	ldr	r1, [sp, #20]
 800bdea:	9803      	ldr	r0, [sp, #12]
 800bdec:	f001 f870 	bl	800ced0 <__pow5mult>
 800bdf0:	9005      	str	r0, [sp, #20]
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	9803      	ldr	r0, [sp, #12]
 800bdf6:	f000 ffa1 	bl	800cd3c <__i2b>
 800bdfa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdfc:	0006      	movs	r6, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d100      	bne.n	800be04 <_dtoa_r+0x824>
 800be02:	e1bc      	b.n	800c17e <_dtoa_r+0xb9e>
 800be04:	001a      	movs	r2, r3
 800be06:	0001      	movs	r1, r0
 800be08:	9803      	ldr	r0, [sp, #12]
 800be0a:	f001 f861 	bl	800ced0 <__pow5mult>
 800be0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800be10:	0006      	movs	r6, r0
 800be12:	2500      	movs	r5, #0
 800be14:	2b01      	cmp	r3, #1
 800be16:	dc16      	bgt.n	800be46 <_dtoa_r+0x866>
 800be18:	2500      	movs	r5, #0
 800be1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be1c:	42ab      	cmp	r3, r5
 800be1e:	d10e      	bne.n	800be3e <_dtoa_r+0x85e>
 800be20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be22:	031b      	lsls	r3, r3, #12
 800be24:	42ab      	cmp	r3, r5
 800be26:	d10a      	bne.n	800be3e <_dtoa_r+0x85e>
 800be28:	4b8d      	ldr	r3, [pc, #564]	@ (800c060 <_dtoa_r+0xa80>)
 800be2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be2c:	4213      	tst	r3, r2
 800be2e:	d006      	beq.n	800be3e <_dtoa_r+0x85e>
 800be30:	9b06      	ldr	r3, [sp, #24]
 800be32:	3501      	adds	r5, #1
 800be34:	3301      	adds	r3, #1
 800be36:	9306      	str	r3, [sp, #24]
 800be38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be3a:	3301      	adds	r3, #1
 800be3c:	930d      	str	r3, [sp, #52]	@ 0x34
 800be3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be40:	2001      	movs	r0, #1
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <_dtoa_r+0x878>
 800be46:	6933      	ldr	r3, [r6, #16]
 800be48:	3303      	adds	r3, #3
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	18f3      	adds	r3, r6, r3
 800be4e:	6858      	ldr	r0, [r3, #4]
 800be50:	f000 ff24 	bl	800cc9c <__hi0bits>
 800be54:	2320      	movs	r3, #32
 800be56:	1a18      	subs	r0, r3, r0
 800be58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be5a:	1818      	adds	r0, r3, r0
 800be5c:	0002      	movs	r2, r0
 800be5e:	231f      	movs	r3, #31
 800be60:	401a      	ands	r2, r3
 800be62:	4218      	tst	r0, r3
 800be64:	d065      	beq.n	800bf32 <_dtoa_r+0x952>
 800be66:	3301      	adds	r3, #1
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	dd5d      	ble.n	800bf2a <_dtoa_r+0x94a>
 800be6e:	231c      	movs	r3, #28
 800be70:	1a9b      	subs	r3, r3, r2
 800be72:	9a06      	ldr	r2, [sp, #24]
 800be74:	18e4      	adds	r4, r4, r3
 800be76:	18d2      	adds	r2, r2, r3
 800be78:	9206      	str	r2, [sp, #24]
 800be7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be7c:	18d3      	adds	r3, r2, r3
 800be7e:	930d      	str	r3, [sp, #52]	@ 0x34
 800be80:	9b06      	ldr	r3, [sp, #24]
 800be82:	2b00      	cmp	r3, #0
 800be84:	dd05      	ble.n	800be92 <_dtoa_r+0x8b2>
 800be86:	001a      	movs	r2, r3
 800be88:	9905      	ldr	r1, [sp, #20]
 800be8a:	9803      	ldr	r0, [sp, #12]
 800be8c:	f001 f87c 	bl	800cf88 <__lshift>
 800be90:	9005      	str	r0, [sp, #20]
 800be92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd05      	ble.n	800bea4 <_dtoa_r+0x8c4>
 800be98:	0031      	movs	r1, r6
 800be9a:	001a      	movs	r2, r3
 800be9c:	9803      	ldr	r0, [sp, #12]
 800be9e:	f001 f873 	bl	800cf88 <__lshift>
 800bea2:	0006      	movs	r6, r0
 800bea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d045      	beq.n	800bf36 <_dtoa_r+0x956>
 800beaa:	0031      	movs	r1, r6
 800beac:	9805      	ldr	r0, [sp, #20]
 800beae:	f001 f8d7 	bl	800d060 <__mcmp>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	da3f      	bge.n	800bf36 <_dtoa_r+0x956>
 800beb6:	9b04      	ldr	r3, [sp, #16]
 800beb8:	220a      	movs	r2, #10
 800beba:	3b01      	subs	r3, #1
 800bebc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bebe:	9905      	ldr	r1, [sp, #20]
 800bec0:	2300      	movs	r3, #0
 800bec2:	9803      	ldr	r0, [sp, #12]
 800bec4:	f000 fe5a 	bl	800cb7c <__multadd>
 800bec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800beca:	9005      	str	r0, [sp, #20]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d100      	bne.n	800bed2 <_dtoa_r+0x8f2>
 800bed0:	e15c      	b.n	800c18c <_dtoa_r+0xbac>
 800bed2:	2300      	movs	r3, #0
 800bed4:	0039      	movs	r1, r7
 800bed6:	220a      	movs	r2, #10
 800bed8:	9803      	ldr	r0, [sp, #12]
 800beda:	f000 fe4f 	bl	800cb7c <__multadd>
 800bede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee0:	0007      	movs	r7, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dc55      	bgt.n	800bf92 <_dtoa_r+0x9b2>
 800bee6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bee8:	2b02      	cmp	r3, #2
 800beea:	dc2d      	bgt.n	800bf48 <_dtoa_r+0x968>
 800beec:	e051      	b.n	800bf92 <_dtoa_r+0x9b2>
 800beee:	2336      	movs	r3, #54	@ 0x36
 800bef0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bef2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bef4:	9c06      	ldr	r4, [sp, #24]
 800bef6:	1a9b      	subs	r3, r3, r2
 800bef8:	e73c      	b.n	800bd74 <_dtoa_r+0x794>
 800befa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800befc:	1e5d      	subs	r5, r3, #1
 800befe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf00:	42ab      	cmp	r3, r5
 800bf02:	db08      	blt.n	800bf16 <_dtoa_r+0x936>
 800bf04:	1b5d      	subs	r5, r3, r5
 800bf06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf08:	9c06      	ldr	r4, [sp, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	db00      	blt.n	800bf10 <_dtoa_r+0x930>
 800bf0e:	e731      	b.n	800bd74 <_dtoa_r+0x794>
 800bf10:	1ae4      	subs	r4, r4, r3
 800bf12:	2300      	movs	r3, #0
 800bf14:	e72e      	b.n	800bd74 <_dtoa_r+0x794>
 800bf16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf18:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf1a:	1aeb      	subs	r3, r5, r3
 800bf1c:	18d3      	adds	r3, r2, r3
 800bf1e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bf20:	9314      	str	r3, [sp, #80]	@ 0x50
 800bf22:	2500      	movs	r5, #0
 800bf24:	e7ef      	b.n	800bf06 <_dtoa_r+0x926>
 800bf26:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf28:	e75e      	b.n	800bde8 <_dtoa_r+0x808>
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	d0a8      	beq.n	800be80 <_dtoa_r+0x8a0>
 800bf2e:	331c      	adds	r3, #28
 800bf30:	e79f      	b.n	800be72 <_dtoa_r+0x892>
 800bf32:	0013      	movs	r3, r2
 800bf34:	e7fb      	b.n	800bf2e <_dtoa_r+0x94e>
 800bf36:	9b04      	ldr	r3, [sp, #16]
 800bf38:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3c:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dc23      	bgt.n	800bf8a <_dtoa_r+0x9aa>
 800bf42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	dd20      	ble.n	800bf8a <_dtoa_r+0x9aa>
 800bf48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d000      	beq.n	800bf50 <_dtoa_r+0x970>
 800bf4e:	e6b5      	b.n	800bcbc <_dtoa_r+0x6dc>
 800bf50:	0031      	movs	r1, r6
 800bf52:	2205      	movs	r2, #5
 800bf54:	9803      	ldr	r0, [sp, #12]
 800bf56:	f000 fe11 	bl	800cb7c <__multadd>
 800bf5a:	0006      	movs	r6, r0
 800bf5c:	0001      	movs	r1, r0
 800bf5e:	9805      	ldr	r0, [sp, #20]
 800bf60:	f001 f87e 	bl	800d060 <__mcmp>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	dc00      	bgt.n	800bf6a <_dtoa_r+0x98a>
 800bf68:	e6a8      	b.n	800bcbc <_dtoa_r+0x6dc>
 800bf6a:	9b08      	ldr	r3, [sp, #32]
 800bf6c:	9a08      	ldr	r2, [sp, #32]
 800bf6e:	1c5c      	adds	r4, r3, #1
 800bf70:	2331      	movs	r3, #49	@ 0x31
 800bf72:	7013      	strb	r3, [r2, #0]
 800bf74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf76:	3301      	adds	r3, #1
 800bf78:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf7a:	e6a3      	b.n	800bcc4 <_dtoa_r+0x6e4>
 800bf7c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bf7e:	0037      	movs	r7, r6
 800bf80:	e7f3      	b.n	800bf6a <_dtoa_r+0x98a>
 800bf82:	9b04      	ldr	r3, [sp, #16]
 800bf84:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bf86:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf88:	e7f9      	b.n	800bf7e <_dtoa_r+0x99e>
 800bf8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d100      	bne.n	800bf92 <_dtoa_r+0x9b2>
 800bf90:	e100      	b.n	800c194 <_dtoa_r+0xbb4>
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	dd05      	ble.n	800bfa2 <_dtoa_r+0x9c2>
 800bf96:	0039      	movs	r1, r7
 800bf98:	0022      	movs	r2, r4
 800bf9a:	9803      	ldr	r0, [sp, #12]
 800bf9c:	f000 fff4 	bl	800cf88 <__lshift>
 800bfa0:	0007      	movs	r7, r0
 800bfa2:	0038      	movs	r0, r7
 800bfa4:	2d00      	cmp	r5, #0
 800bfa6:	d018      	beq.n	800bfda <_dtoa_r+0x9fa>
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	9803      	ldr	r0, [sp, #12]
 800bfac:	f000 fd7e 	bl	800caac <_Balloc>
 800bfb0:	1e04      	subs	r4, r0, #0
 800bfb2:	d105      	bne.n	800bfc0 <_dtoa_r+0x9e0>
 800bfb4:	0022      	movs	r2, r4
 800bfb6:	4b2b      	ldr	r3, [pc, #172]	@ (800c064 <_dtoa_r+0xa84>)
 800bfb8:	482b      	ldr	r0, [pc, #172]	@ (800c068 <_dtoa_r+0xa88>)
 800bfba:	492c      	ldr	r1, [pc, #176]	@ (800c06c <_dtoa_r+0xa8c>)
 800bfbc:	f7ff fb25 	bl	800b60a <_dtoa_r+0x2a>
 800bfc0:	0039      	movs	r1, r7
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	310c      	adds	r1, #12
 800bfc6:	3202      	adds	r2, #2
 800bfc8:	0092      	lsls	r2, r2, #2
 800bfca:	300c      	adds	r0, #12
 800bfcc:	f7ff fa66 	bl	800b49c <memcpy>
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	0021      	movs	r1, r4
 800bfd4:	9803      	ldr	r0, [sp, #12]
 800bfd6:	f000 ffd7 	bl	800cf88 <__lshift>
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfde:	9306      	str	r3, [sp, #24]
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	189b      	adds	r3, r3, r2
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	9704      	str	r7, [sp, #16]
 800bfe8:	0007      	movs	r7, r0
 800bfea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfee:	4013      	ands	r3, r2
 800bff0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bff2:	0031      	movs	r1, r6
 800bff4:	9805      	ldr	r0, [sp, #20]
 800bff6:	f7ff fa65 	bl	800b4c4 <quorem>
 800bffa:	9904      	ldr	r1, [sp, #16]
 800bffc:	0005      	movs	r5, r0
 800bffe:	900a      	str	r0, [sp, #40]	@ 0x28
 800c000:	9805      	ldr	r0, [sp, #20]
 800c002:	f001 f82d 	bl	800d060 <__mcmp>
 800c006:	003a      	movs	r2, r7
 800c008:	900d      	str	r0, [sp, #52]	@ 0x34
 800c00a:	0031      	movs	r1, r6
 800c00c:	9803      	ldr	r0, [sp, #12]
 800c00e:	f001 f843 	bl	800d098 <__mdiff>
 800c012:	2201      	movs	r2, #1
 800c014:	68c3      	ldr	r3, [r0, #12]
 800c016:	0004      	movs	r4, r0
 800c018:	3530      	adds	r5, #48	@ 0x30
 800c01a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d104      	bne.n	800c02a <_dtoa_r+0xa4a>
 800c020:	0001      	movs	r1, r0
 800c022:	9805      	ldr	r0, [sp, #20]
 800c024:	f001 f81c 	bl	800d060 <__mcmp>
 800c028:	9009      	str	r0, [sp, #36]	@ 0x24
 800c02a:	0021      	movs	r1, r4
 800c02c:	9803      	ldr	r0, [sp, #12]
 800c02e:	f000 fd81 	bl	800cb34 <_Bfree>
 800c032:	9b06      	ldr	r3, [sp, #24]
 800c034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c036:	1c5c      	adds	r4, r3, #1
 800c038:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c03a:	4313      	orrs	r3, r2
 800c03c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c03e:	4313      	orrs	r3, r2
 800c040:	d116      	bne.n	800c070 <_dtoa_r+0xa90>
 800c042:	2d39      	cmp	r5, #57	@ 0x39
 800c044:	d02f      	beq.n	800c0a6 <_dtoa_r+0xac6>
 800c046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dd01      	ble.n	800c050 <_dtoa_r+0xa70>
 800c04c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c04e:	3531      	adds	r5, #49	@ 0x31
 800c050:	9b06      	ldr	r3, [sp, #24]
 800c052:	701d      	strb	r5, [r3, #0]
 800c054:	e638      	b.n	800bcc8 <_dtoa_r+0x6e8>
 800c056:	46c0      	nop			@ (mov r8, r8)
 800c058:	40240000 	.word	0x40240000
 800c05c:	00000433 	.word	0x00000433
 800c060:	7ff00000 	.word	0x7ff00000
 800c064:	0800e9eb 	.word	0x0800e9eb
 800c068:	0800e993 	.word	0x0800e993
 800c06c:	000002ef 	.word	0x000002ef
 800c070:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c072:	2b00      	cmp	r3, #0
 800c074:	db04      	blt.n	800c080 <_dtoa_r+0xaa0>
 800c076:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c078:	4313      	orrs	r3, r2
 800c07a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c07c:	4313      	orrs	r3, r2
 800c07e:	d11e      	bne.n	800c0be <_dtoa_r+0xade>
 800c080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c082:	2b00      	cmp	r3, #0
 800c084:	dde4      	ble.n	800c050 <_dtoa_r+0xa70>
 800c086:	9905      	ldr	r1, [sp, #20]
 800c088:	2201      	movs	r2, #1
 800c08a:	9803      	ldr	r0, [sp, #12]
 800c08c:	f000 ff7c 	bl	800cf88 <__lshift>
 800c090:	0031      	movs	r1, r6
 800c092:	9005      	str	r0, [sp, #20]
 800c094:	f000 ffe4 	bl	800d060 <__mcmp>
 800c098:	2800      	cmp	r0, #0
 800c09a:	dc02      	bgt.n	800c0a2 <_dtoa_r+0xac2>
 800c09c:	d1d8      	bne.n	800c050 <_dtoa_r+0xa70>
 800c09e:	07eb      	lsls	r3, r5, #31
 800c0a0:	d5d6      	bpl.n	800c050 <_dtoa_r+0xa70>
 800c0a2:	2d39      	cmp	r5, #57	@ 0x39
 800c0a4:	d1d2      	bne.n	800c04c <_dtoa_r+0xa6c>
 800c0a6:	2339      	movs	r3, #57	@ 0x39
 800c0a8:	9a06      	ldr	r2, [sp, #24]
 800c0aa:	7013      	strb	r3, [r2, #0]
 800c0ac:	0023      	movs	r3, r4
 800c0ae:	001c      	movs	r4, r3
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	2a39      	cmp	r2, #57	@ 0x39
 800c0b6:	d04f      	beq.n	800c158 <_dtoa_r+0xb78>
 800c0b8:	3201      	adds	r2, #1
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	e604      	b.n	800bcc8 <_dtoa_r+0x6e8>
 800c0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dd03      	ble.n	800c0cc <_dtoa_r+0xaec>
 800c0c4:	2d39      	cmp	r5, #57	@ 0x39
 800c0c6:	d0ee      	beq.n	800c0a6 <_dtoa_r+0xac6>
 800c0c8:	3501      	adds	r5, #1
 800c0ca:	e7c1      	b.n	800c050 <_dtoa_r+0xa70>
 800c0cc:	9b06      	ldr	r3, [sp, #24]
 800c0ce:	9a06      	ldr	r2, [sp, #24]
 800c0d0:	701d      	strb	r5, [r3, #0]
 800c0d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d02a      	beq.n	800c12e <_dtoa_r+0xb4e>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	220a      	movs	r2, #10
 800c0dc:	9905      	ldr	r1, [sp, #20]
 800c0de:	9803      	ldr	r0, [sp, #12]
 800c0e0:	f000 fd4c 	bl	800cb7c <__multadd>
 800c0e4:	9b04      	ldr	r3, [sp, #16]
 800c0e6:	9005      	str	r0, [sp, #20]
 800c0e8:	42bb      	cmp	r3, r7
 800c0ea:	d109      	bne.n	800c100 <_dtoa_r+0xb20>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	220a      	movs	r2, #10
 800c0f0:	9904      	ldr	r1, [sp, #16]
 800c0f2:	9803      	ldr	r0, [sp, #12]
 800c0f4:	f000 fd42 	bl	800cb7c <__multadd>
 800c0f8:	9004      	str	r0, [sp, #16]
 800c0fa:	0007      	movs	r7, r0
 800c0fc:	9406      	str	r4, [sp, #24]
 800c0fe:	e778      	b.n	800bff2 <_dtoa_r+0xa12>
 800c100:	9904      	ldr	r1, [sp, #16]
 800c102:	2300      	movs	r3, #0
 800c104:	220a      	movs	r2, #10
 800c106:	9803      	ldr	r0, [sp, #12]
 800c108:	f000 fd38 	bl	800cb7c <__multadd>
 800c10c:	2300      	movs	r3, #0
 800c10e:	9004      	str	r0, [sp, #16]
 800c110:	220a      	movs	r2, #10
 800c112:	0039      	movs	r1, r7
 800c114:	9803      	ldr	r0, [sp, #12]
 800c116:	f000 fd31 	bl	800cb7c <__multadd>
 800c11a:	e7ee      	b.n	800c0fa <_dtoa_r+0xb1a>
 800c11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c11e:	2401      	movs	r4, #1
 800c120:	2b00      	cmp	r3, #0
 800c122:	dd00      	ble.n	800c126 <_dtoa_r+0xb46>
 800c124:	001c      	movs	r4, r3
 800c126:	9b08      	ldr	r3, [sp, #32]
 800c128:	191c      	adds	r4, r3, r4
 800c12a:	2300      	movs	r3, #0
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	9905      	ldr	r1, [sp, #20]
 800c130:	2201      	movs	r2, #1
 800c132:	9803      	ldr	r0, [sp, #12]
 800c134:	f000 ff28 	bl	800cf88 <__lshift>
 800c138:	0031      	movs	r1, r6
 800c13a:	9005      	str	r0, [sp, #20]
 800c13c:	f000 ff90 	bl	800d060 <__mcmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	dcb3      	bgt.n	800c0ac <_dtoa_r+0xacc>
 800c144:	d101      	bne.n	800c14a <_dtoa_r+0xb6a>
 800c146:	07ed      	lsls	r5, r5, #31
 800c148:	d4b0      	bmi.n	800c0ac <_dtoa_r+0xacc>
 800c14a:	0023      	movs	r3, r4
 800c14c:	001c      	movs	r4, r3
 800c14e:	3b01      	subs	r3, #1
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	2a30      	cmp	r2, #48	@ 0x30
 800c154:	d0fa      	beq.n	800c14c <_dtoa_r+0xb6c>
 800c156:	e5b7      	b.n	800bcc8 <_dtoa_r+0x6e8>
 800c158:	9a08      	ldr	r2, [sp, #32]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d1a7      	bne.n	800c0ae <_dtoa_r+0xace>
 800c15e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c160:	3301      	adds	r3, #1
 800c162:	930c      	str	r3, [sp, #48]	@ 0x30
 800c164:	2331      	movs	r3, #49	@ 0x31
 800c166:	7013      	strb	r3, [r2, #0]
 800c168:	e5ae      	b.n	800bcc8 <_dtoa_r+0x6e8>
 800c16a:	4b15      	ldr	r3, [pc, #84]	@ (800c1c0 <_dtoa_r+0xbe0>)
 800c16c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c16e:	9308      	str	r3, [sp, #32]
 800c170:	4b14      	ldr	r3, [pc, #80]	@ (800c1c4 <_dtoa_r+0xbe4>)
 800c172:	2a00      	cmp	r2, #0
 800c174:	d001      	beq.n	800c17a <_dtoa_r+0xb9a>
 800c176:	f7ff fa7b 	bl	800b670 <_dtoa_r+0x90>
 800c17a:	f7ff fa7b 	bl	800b674 <_dtoa_r+0x94>
 800c17e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c180:	2b01      	cmp	r3, #1
 800c182:	dc00      	bgt.n	800c186 <_dtoa_r+0xba6>
 800c184:	e648      	b.n	800be18 <_dtoa_r+0x838>
 800c186:	2001      	movs	r0, #1
 800c188:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c18a:	e665      	b.n	800be58 <_dtoa_r+0x878>
 800c18c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c18e:	2b00      	cmp	r3, #0
 800c190:	dc00      	bgt.n	800c194 <_dtoa_r+0xbb4>
 800c192:	e6d6      	b.n	800bf42 <_dtoa_r+0x962>
 800c194:	2400      	movs	r4, #0
 800c196:	0031      	movs	r1, r6
 800c198:	9805      	ldr	r0, [sp, #20]
 800c19a:	f7ff f993 	bl	800b4c4 <quorem>
 800c19e:	9b08      	ldr	r3, [sp, #32]
 800c1a0:	3030      	adds	r0, #48	@ 0x30
 800c1a2:	5518      	strb	r0, [r3, r4]
 800c1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a6:	3401      	adds	r4, #1
 800c1a8:	0005      	movs	r5, r0
 800c1aa:	429c      	cmp	r4, r3
 800c1ac:	dab6      	bge.n	800c11c <_dtoa_r+0xb3c>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	9905      	ldr	r1, [sp, #20]
 800c1b4:	9803      	ldr	r0, [sp, #12]
 800c1b6:	f000 fce1 	bl	800cb7c <__multadd>
 800c1ba:	9005      	str	r0, [sp, #20]
 800c1bc:	e7eb      	b.n	800c196 <_dtoa_r+0xbb6>
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	0800e96f 	.word	0x0800e96f
 800c1c4:	0800e977 	.word	0x0800e977

0800c1c8 <_free_r>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	0005      	movs	r5, r0
 800c1cc:	1e0c      	subs	r4, r1, #0
 800c1ce:	d010      	beq.n	800c1f2 <_free_r+0x2a>
 800c1d0:	3c04      	subs	r4, #4
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da00      	bge.n	800c1da <_free_r+0x12>
 800c1d8:	18e4      	adds	r4, r4, r3
 800c1da:	0028      	movs	r0, r5
 800c1dc:	f000 fc56 	bl	800ca8c <__malloc_lock>
 800c1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c258 <_free_r+0x90>)
 800c1e2:	6813      	ldr	r3, [r2, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d105      	bne.n	800c1f4 <_free_r+0x2c>
 800c1e8:	6063      	str	r3, [r4, #4]
 800c1ea:	6014      	str	r4, [r2, #0]
 800c1ec:	0028      	movs	r0, r5
 800c1ee:	f000 fc55 	bl	800ca9c <__malloc_unlock>
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}
 800c1f4:	42a3      	cmp	r3, r4
 800c1f6:	d908      	bls.n	800c20a <_free_r+0x42>
 800c1f8:	6820      	ldr	r0, [r4, #0]
 800c1fa:	1821      	adds	r1, r4, r0
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	d1f3      	bne.n	800c1e8 <_free_r+0x20>
 800c200:	6819      	ldr	r1, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	1809      	adds	r1, r1, r0
 800c206:	6021      	str	r1, [r4, #0]
 800c208:	e7ee      	b.n	800c1e8 <_free_r+0x20>
 800c20a:	001a      	movs	r2, r3
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <_free_r+0x4e>
 800c212:	42a3      	cmp	r3, r4
 800c214:	d9f9      	bls.n	800c20a <_free_r+0x42>
 800c216:	6811      	ldr	r1, [r2, #0]
 800c218:	1850      	adds	r0, r2, r1
 800c21a:	42a0      	cmp	r0, r4
 800c21c:	d10b      	bne.n	800c236 <_free_r+0x6e>
 800c21e:	6820      	ldr	r0, [r4, #0]
 800c220:	1809      	adds	r1, r1, r0
 800c222:	1850      	adds	r0, r2, r1
 800c224:	6011      	str	r1, [r2, #0]
 800c226:	4283      	cmp	r3, r0
 800c228:	d1e0      	bne.n	800c1ec <_free_r+0x24>
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	1841      	adds	r1, r0, r1
 800c230:	6011      	str	r1, [r2, #0]
 800c232:	6053      	str	r3, [r2, #4]
 800c234:	e7da      	b.n	800c1ec <_free_r+0x24>
 800c236:	42a0      	cmp	r0, r4
 800c238:	d902      	bls.n	800c240 <_free_r+0x78>
 800c23a:	230c      	movs	r3, #12
 800c23c:	602b      	str	r3, [r5, #0]
 800c23e:	e7d5      	b.n	800c1ec <_free_r+0x24>
 800c240:	6820      	ldr	r0, [r4, #0]
 800c242:	1821      	adds	r1, r4, r0
 800c244:	428b      	cmp	r3, r1
 800c246:	d103      	bne.n	800c250 <_free_r+0x88>
 800c248:	6819      	ldr	r1, [r3, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	1809      	adds	r1, r1, r0
 800c24e:	6021      	str	r1, [r4, #0]
 800c250:	6063      	str	r3, [r4, #4]
 800c252:	6054      	str	r4, [r2, #4]
 800c254:	e7ca      	b.n	800c1ec <_free_r+0x24>
 800c256:	46c0      	nop			@ (mov r8, r8)
 800c258:	200007e8 	.word	0x200007e8

0800c25c <rshift>:
 800c25c:	0002      	movs	r2, r0
 800c25e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c260:	6904      	ldr	r4, [r0, #16]
 800c262:	b085      	sub	sp, #20
 800c264:	3214      	adds	r2, #20
 800c266:	114b      	asrs	r3, r1, #5
 800c268:	0016      	movs	r6, r2
 800c26a:	9302      	str	r3, [sp, #8]
 800c26c:	429c      	cmp	r4, r3
 800c26e:	dd31      	ble.n	800c2d4 <rshift+0x78>
 800c270:	261f      	movs	r6, #31
 800c272:	000f      	movs	r7, r1
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	00a5      	lsls	r5, r4, #2
 800c278:	18d3      	adds	r3, r2, r3
 800c27a:	4037      	ands	r7, r6
 800c27c:	1955      	adds	r5, r2, r5
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	9701      	str	r7, [sp, #4]
 800c282:	4231      	tst	r1, r6
 800c284:	d10d      	bne.n	800c2a2 <rshift+0x46>
 800c286:	0016      	movs	r6, r2
 800c288:	0019      	movs	r1, r3
 800c28a:	428d      	cmp	r5, r1
 800c28c:	d836      	bhi.n	800c2fc <rshift+0xa0>
 800c28e:	9b00      	ldr	r3, [sp, #0]
 800c290:	2600      	movs	r6, #0
 800c292:	3b03      	subs	r3, #3
 800c294:	429d      	cmp	r5, r3
 800c296:	d302      	bcc.n	800c29e <rshift+0x42>
 800c298:	9b02      	ldr	r3, [sp, #8]
 800c29a:	1ae4      	subs	r4, r4, r3
 800c29c:	00a6      	lsls	r6, r4, #2
 800c29e:	1996      	adds	r6, r2, r6
 800c2a0:	e018      	b.n	800c2d4 <rshift+0x78>
 800c2a2:	2120      	movs	r1, #32
 800c2a4:	9e01      	ldr	r6, [sp, #4]
 800c2a6:	9f01      	ldr	r7, [sp, #4]
 800c2a8:	1b89      	subs	r1, r1, r6
 800c2aa:	9e00      	ldr	r6, [sp, #0]
 800c2ac:	9103      	str	r1, [sp, #12]
 800c2ae:	ce02      	ldmia	r6!, {r1}
 800c2b0:	4694      	mov	ip, r2
 800c2b2:	40f9      	lsrs	r1, r7
 800c2b4:	42b5      	cmp	r5, r6
 800c2b6:	d816      	bhi.n	800c2e6 <rshift+0x8a>
 800c2b8:	9b00      	ldr	r3, [sp, #0]
 800c2ba:	2600      	movs	r6, #0
 800c2bc:	3301      	adds	r3, #1
 800c2be:	429d      	cmp	r5, r3
 800c2c0:	d303      	bcc.n	800c2ca <rshift+0x6e>
 800c2c2:	9b02      	ldr	r3, [sp, #8]
 800c2c4:	1ae4      	subs	r4, r4, r3
 800c2c6:	00a6      	lsls	r6, r4, #2
 800c2c8:	3e04      	subs	r6, #4
 800c2ca:	1996      	adds	r6, r2, r6
 800c2cc:	6031      	str	r1, [r6, #0]
 800c2ce:	2900      	cmp	r1, #0
 800c2d0:	d000      	beq.n	800c2d4 <rshift+0x78>
 800c2d2:	3604      	adds	r6, #4
 800c2d4:	1ab1      	subs	r1, r6, r2
 800c2d6:	1089      	asrs	r1, r1, #2
 800c2d8:	6101      	str	r1, [r0, #16]
 800c2da:	4296      	cmp	r6, r2
 800c2dc:	d101      	bne.n	800c2e2 <rshift+0x86>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6143      	str	r3, [r0, #20]
 800c2e2:	b005      	add	sp, #20
 800c2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e6:	6837      	ldr	r7, [r6, #0]
 800c2e8:	9b03      	ldr	r3, [sp, #12]
 800c2ea:	409f      	lsls	r7, r3
 800c2ec:	430f      	orrs	r7, r1
 800c2ee:	4661      	mov	r1, ip
 800c2f0:	c180      	stmia	r1!, {r7}
 800c2f2:	468c      	mov	ip, r1
 800c2f4:	9b01      	ldr	r3, [sp, #4]
 800c2f6:	ce02      	ldmia	r6!, {r1}
 800c2f8:	40d9      	lsrs	r1, r3
 800c2fa:	e7db      	b.n	800c2b4 <rshift+0x58>
 800c2fc:	c980      	ldmia	r1!, {r7}
 800c2fe:	c680      	stmia	r6!, {r7}
 800c300:	e7c3      	b.n	800c28a <rshift+0x2e>

0800c302 <__hexdig_fun>:
 800c302:	0002      	movs	r2, r0
 800c304:	3a30      	subs	r2, #48	@ 0x30
 800c306:	0003      	movs	r3, r0
 800c308:	2a09      	cmp	r2, #9
 800c30a:	d802      	bhi.n	800c312 <__hexdig_fun+0x10>
 800c30c:	3b20      	subs	r3, #32
 800c30e:	b2d8      	uxtb	r0, r3
 800c310:	4770      	bx	lr
 800c312:	0002      	movs	r2, r0
 800c314:	3a61      	subs	r2, #97	@ 0x61
 800c316:	2a05      	cmp	r2, #5
 800c318:	d801      	bhi.n	800c31e <__hexdig_fun+0x1c>
 800c31a:	3b47      	subs	r3, #71	@ 0x47
 800c31c:	e7f7      	b.n	800c30e <__hexdig_fun+0xc>
 800c31e:	001a      	movs	r2, r3
 800c320:	3a41      	subs	r2, #65	@ 0x41
 800c322:	2000      	movs	r0, #0
 800c324:	2a05      	cmp	r2, #5
 800c326:	d8f3      	bhi.n	800c310 <__hexdig_fun+0xe>
 800c328:	3b27      	subs	r3, #39	@ 0x27
 800c32a:	e7f0      	b.n	800c30e <__hexdig_fun+0xc>

0800c32c <__gethex>:
 800c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32e:	b089      	sub	sp, #36	@ 0x24
 800c330:	9307      	str	r3, [sp, #28]
 800c332:	680b      	ldr	r3, [r1, #0]
 800c334:	9201      	str	r2, [sp, #4]
 800c336:	9003      	str	r0, [sp, #12]
 800c338:	9106      	str	r1, [sp, #24]
 800c33a:	1c9a      	adds	r2, r3, #2
 800c33c:	0011      	movs	r1, r2
 800c33e:	3201      	adds	r2, #1
 800c340:	1e50      	subs	r0, r2, #1
 800c342:	7800      	ldrb	r0, [r0, #0]
 800c344:	2830      	cmp	r0, #48	@ 0x30
 800c346:	d0f9      	beq.n	800c33c <__gethex+0x10>
 800c348:	1acb      	subs	r3, r1, r3
 800c34a:	3b02      	subs	r3, #2
 800c34c:	9305      	str	r3, [sp, #20]
 800c34e:	9100      	str	r1, [sp, #0]
 800c350:	f7ff ffd7 	bl	800c302 <__hexdig_fun>
 800c354:	2300      	movs	r3, #0
 800c356:	001d      	movs	r5, r3
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	4298      	cmp	r0, r3
 800c35c:	d11e      	bne.n	800c39c <__gethex+0x70>
 800c35e:	2201      	movs	r2, #1
 800c360:	49a6      	ldr	r1, [pc, #664]	@ (800c5fc <__gethex+0x2d0>)
 800c362:	9800      	ldr	r0, [sp, #0]
 800c364:	f7fe fffe 	bl	800b364 <strncmp>
 800c368:	0007      	movs	r7, r0
 800c36a:	42a8      	cmp	r0, r5
 800c36c:	d000      	beq.n	800c370 <__gethex+0x44>
 800c36e:	e06a      	b.n	800c446 <__gethex+0x11a>
 800c370:	9b00      	ldr	r3, [sp, #0]
 800c372:	7858      	ldrb	r0, [r3, #1]
 800c374:	1c5c      	adds	r4, r3, #1
 800c376:	f7ff ffc4 	bl	800c302 <__hexdig_fun>
 800c37a:	2301      	movs	r3, #1
 800c37c:	9302      	str	r3, [sp, #8]
 800c37e:	42a8      	cmp	r0, r5
 800c380:	d02f      	beq.n	800c3e2 <__gethex+0xb6>
 800c382:	9400      	str	r4, [sp, #0]
 800c384:	9b00      	ldr	r3, [sp, #0]
 800c386:	7818      	ldrb	r0, [r3, #0]
 800c388:	2830      	cmp	r0, #48	@ 0x30
 800c38a:	d009      	beq.n	800c3a0 <__gethex+0x74>
 800c38c:	f7ff ffb9 	bl	800c302 <__hexdig_fun>
 800c390:	4242      	negs	r2, r0
 800c392:	4142      	adcs	r2, r0
 800c394:	2301      	movs	r3, #1
 800c396:	0025      	movs	r5, r4
 800c398:	9202      	str	r2, [sp, #8]
 800c39a:	9305      	str	r3, [sp, #20]
 800c39c:	9c00      	ldr	r4, [sp, #0]
 800c39e:	e004      	b.n	800c3aa <__gethex+0x7e>
 800c3a0:	9b00      	ldr	r3, [sp, #0]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	e7ed      	b.n	800c384 <__gethex+0x58>
 800c3a8:	3401      	adds	r4, #1
 800c3aa:	7820      	ldrb	r0, [r4, #0]
 800c3ac:	f7ff ffa9 	bl	800c302 <__hexdig_fun>
 800c3b0:	1e07      	subs	r7, r0, #0
 800c3b2:	d1f9      	bne.n	800c3a8 <__gethex+0x7c>
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	0020      	movs	r0, r4
 800c3b8:	4990      	ldr	r1, [pc, #576]	@ (800c5fc <__gethex+0x2d0>)
 800c3ba:	f7fe ffd3 	bl	800b364 <strncmp>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d10d      	bne.n	800c3de <__gethex+0xb2>
 800c3c2:	2d00      	cmp	r5, #0
 800c3c4:	d106      	bne.n	800c3d4 <__gethex+0xa8>
 800c3c6:	3401      	adds	r4, #1
 800c3c8:	0025      	movs	r5, r4
 800c3ca:	7820      	ldrb	r0, [r4, #0]
 800c3cc:	f7ff ff99 	bl	800c302 <__hexdig_fun>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d102      	bne.n	800c3da <__gethex+0xae>
 800c3d4:	1b2d      	subs	r5, r5, r4
 800c3d6:	00af      	lsls	r7, r5, #2
 800c3d8:	e003      	b.n	800c3e2 <__gethex+0xb6>
 800c3da:	3401      	adds	r4, #1
 800c3dc:	e7f5      	b.n	800c3ca <__gethex+0x9e>
 800c3de:	2d00      	cmp	r5, #0
 800c3e0:	d1f8      	bne.n	800c3d4 <__gethex+0xa8>
 800c3e2:	2220      	movs	r2, #32
 800c3e4:	7823      	ldrb	r3, [r4, #0]
 800c3e6:	0026      	movs	r6, r4
 800c3e8:	4393      	bics	r3, r2
 800c3ea:	2b50      	cmp	r3, #80	@ 0x50
 800c3ec:	d11d      	bne.n	800c42a <__gethex+0xfe>
 800c3ee:	7863      	ldrb	r3, [r4, #1]
 800c3f0:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3f2:	d02d      	beq.n	800c450 <__gethex+0x124>
 800c3f4:	2b2d      	cmp	r3, #45	@ 0x2d
 800c3f6:	d02f      	beq.n	800c458 <__gethex+0x12c>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	1c66      	adds	r6, r4, #1
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	7830      	ldrb	r0, [r6, #0]
 800c400:	f7ff ff7f 	bl	800c302 <__hexdig_fun>
 800c404:	1e43      	subs	r3, r0, #1
 800c406:	b2db      	uxtb	r3, r3
 800c408:	0005      	movs	r5, r0
 800c40a:	2b18      	cmp	r3, #24
 800c40c:	d82a      	bhi.n	800c464 <__gethex+0x138>
 800c40e:	7870      	ldrb	r0, [r6, #1]
 800c410:	f7ff ff77 	bl	800c302 <__hexdig_fun>
 800c414:	1e43      	subs	r3, r0, #1
 800c416:	b2db      	uxtb	r3, r3
 800c418:	3601      	adds	r6, #1
 800c41a:	3d10      	subs	r5, #16
 800c41c:	2b18      	cmp	r3, #24
 800c41e:	d91d      	bls.n	800c45c <__gethex+0x130>
 800c420:	9b04      	ldr	r3, [sp, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d000      	beq.n	800c428 <__gethex+0xfc>
 800c426:	426d      	negs	r5, r5
 800c428:	197f      	adds	r7, r7, r5
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	601e      	str	r6, [r3, #0]
 800c42e:	9b02      	ldr	r3, [sp, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d019      	beq.n	800c468 <__gethex+0x13c>
 800c434:	9b05      	ldr	r3, [sp, #20]
 800c436:	2606      	movs	r6, #6
 800c438:	425a      	negs	r2, r3
 800c43a:	4153      	adcs	r3, r2
 800c43c:	425b      	negs	r3, r3
 800c43e:	401e      	ands	r6, r3
 800c440:	0030      	movs	r0, r6
 800c442:	b009      	add	sp, #36	@ 0x24
 800c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c446:	2301      	movs	r3, #1
 800c448:	2700      	movs	r7, #0
 800c44a:	9c00      	ldr	r4, [sp, #0]
 800c44c:	9302      	str	r3, [sp, #8]
 800c44e:	e7c8      	b.n	800c3e2 <__gethex+0xb6>
 800c450:	2300      	movs	r3, #0
 800c452:	9304      	str	r3, [sp, #16]
 800c454:	1ca6      	adds	r6, r4, #2
 800c456:	e7d2      	b.n	800c3fe <__gethex+0xd2>
 800c458:	2301      	movs	r3, #1
 800c45a:	e7fa      	b.n	800c452 <__gethex+0x126>
 800c45c:	230a      	movs	r3, #10
 800c45e:	435d      	muls	r5, r3
 800c460:	182d      	adds	r5, r5, r0
 800c462:	e7d4      	b.n	800c40e <__gethex+0xe2>
 800c464:	0026      	movs	r6, r4
 800c466:	e7e0      	b.n	800c42a <__gethex+0xfe>
 800c468:	9b00      	ldr	r3, [sp, #0]
 800c46a:	9902      	ldr	r1, [sp, #8]
 800c46c:	1ae3      	subs	r3, r4, r3
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b07      	cmp	r3, #7
 800c472:	dc0a      	bgt.n	800c48a <__gethex+0x15e>
 800c474:	9803      	ldr	r0, [sp, #12]
 800c476:	f000 fb19 	bl	800caac <_Balloc>
 800c47a:	1e05      	subs	r5, r0, #0
 800c47c:	d108      	bne.n	800c490 <__gethex+0x164>
 800c47e:	002a      	movs	r2, r5
 800c480:	21e4      	movs	r1, #228	@ 0xe4
 800c482:	4b5f      	ldr	r3, [pc, #380]	@ (800c600 <__gethex+0x2d4>)
 800c484:	485f      	ldr	r0, [pc, #380]	@ (800c604 <__gethex+0x2d8>)
 800c486:	f002 f815 	bl	800e4b4 <__assert_func>
 800c48a:	3101      	adds	r1, #1
 800c48c:	105b      	asrs	r3, r3, #1
 800c48e:	e7ef      	b.n	800c470 <__gethex+0x144>
 800c490:	0003      	movs	r3, r0
 800c492:	3314      	adds	r3, #20
 800c494:	9302      	str	r3, [sp, #8]
 800c496:	9305      	str	r3, [sp, #20]
 800c498:	2300      	movs	r3, #0
 800c49a:	001e      	movs	r6, r3
 800c49c:	9304      	str	r3, [sp, #16]
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	d338      	bcc.n	800c516 <__gethex+0x1ea>
 800c4a4:	9c05      	ldr	r4, [sp, #20]
 800c4a6:	9b02      	ldr	r3, [sp, #8]
 800c4a8:	c440      	stmia	r4!, {r6}
 800c4aa:	1ae4      	subs	r4, r4, r3
 800c4ac:	10a4      	asrs	r4, r4, #2
 800c4ae:	0030      	movs	r0, r6
 800c4b0:	612c      	str	r4, [r5, #16]
 800c4b2:	f000 fbf3 	bl	800cc9c <__hi0bits>
 800c4b6:	9b01      	ldr	r3, [sp, #4]
 800c4b8:	0164      	lsls	r4, r4, #5
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	1a26      	subs	r6, r4, r0
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	429e      	cmp	r6, r3
 800c4c2:	dd52      	ble.n	800c56a <__gethex+0x23e>
 800c4c4:	1af6      	subs	r6, r6, r3
 800c4c6:	0031      	movs	r1, r6
 800c4c8:	0028      	movs	r0, r5
 800c4ca:	f000 ff96 	bl	800d3fa <__any_on>
 800c4ce:	1e04      	subs	r4, r0, #0
 800c4d0:	d00f      	beq.n	800c4f2 <__gethex+0x1c6>
 800c4d2:	2401      	movs	r4, #1
 800c4d4:	231f      	movs	r3, #31
 800c4d6:	0020      	movs	r0, r4
 800c4d8:	1e72      	subs	r2, r6, #1
 800c4da:	4013      	ands	r3, r2
 800c4dc:	4098      	lsls	r0, r3
 800c4de:	0003      	movs	r3, r0
 800c4e0:	1151      	asrs	r1, r2, #5
 800c4e2:	9802      	ldr	r0, [sp, #8]
 800c4e4:	0089      	lsls	r1, r1, #2
 800c4e6:	5809      	ldr	r1, [r1, r0]
 800c4e8:	4219      	tst	r1, r3
 800c4ea:	d002      	beq.n	800c4f2 <__gethex+0x1c6>
 800c4ec:	42a2      	cmp	r2, r4
 800c4ee:	dc34      	bgt.n	800c55a <__gethex+0x22e>
 800c4f0:	2402      	movs	r4, #2
 800c4f2:	0031      	movs	r1, r6
 800c4f4:	0028      	movs	r0, r5
 800c4f6:	f7ff feb1 	bl	800c25c <rshift>
 800c4fa:	19bf      	adds	r7, r7, r6
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	42bb      	cmp	r3, r7
 800c502:	da42      	bge.n	800c58a <__gethex+0x25e>
 800c504:	0029      	movs	r1, r5
 800c506:	9803      	ldr	r0, [sp, #12]
 800c508:	f000 fb14 	bl	800cb34 <_Bfree>
 800c50c:	2300      	movs	r3, #0
 800c50e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c510:	26a3      	movs	r6, #163	@ 0xa3
 800c512:	6013      	str	r3, [r2, #0]
 800c514:	e794      	b.n	800c440 <__gethex+0x114>
 800c516:	3c01      	subs	r4, #1
 800c518:	7823      	ldrb	r3, [r4, #0]
 800c51a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c51c:	d012      	beq.n	800c544 <__gethex+0x218>
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	2b20      	cmp	r3, #32
 800c522:	d104      	bne.n	800c52e <__gethex+0x202>
 800c524:	9b05      	ldr	r3, [sp, #20]
 800c526:	c340      	stmia	r3!, {r6}
 800c528:	2600      	movs	r6, #0
 800c52a:	9305      	str	r3, [sp, #20]
 800c52c:	9604      	str	r6, [sp, #16]
 800c52e:	7820      	ldrb	r0, [r4, #0]
 800c530:	f7ff fee7 	bl	800c302 <__hexdig_fun>
 800c534:	230f      	movs	r3, #15
 800c536:	4018      	ands	r0, r3
 800c538:	9b04      	ldr	r3, [sp, #16]
 800c53a:	4098      	lsls	r0, r3
 800c53c:	3304      	adds	r3, #4
 800c53e:	4306      	orrs	r6, r0
 800c540:	9304      	str	r3, [sp, #16]
 800c542:	e7ac      	b.n	800c49e <__gethex+0x172>
 800c544:	9b00      	ldr	r3, [sp, #0]
 800c546:	42a3      	cmp	r3, r4
 800c548:	d8e9      	bhi.n	800c51e <__gethex+0x1f2>
 800c54a:	2201      	movs	r2, #1
 800c54c:	0020      	movs	r0, r4
 800c54e:	492b      	ldr	r1, [pc, #172]	@ (800c5fc <__gethex+0x2d0>)
 800c550:	f7fe ff08 	bl	800b364 <strncmp>
 800c554:	2800      	cmp	r0, #0
 800c556:	d1e2      	bne.n	800c51e <__gethex+0x1f2>
 800c558:	e7a1      	b.n	800c49e <__gethex+0x172>
 800c55a:	0028      	movs	r0, r5
 800c55c:	1eb1      	subs	r1, r6, #2
 800c55e:	f000 ff4c 	bl	800d3fa <__any_on>
 800c562:	2800      	cmp	r0, #0
 800c564:	d0c4      	beq.n	800c4f0 <__gethex+0x1c4>
 800c566:	2403      	movs	r4, #3
 800c568:	e7c3      	b.n	800c4f2 <__gethex+0x1c6>
 800c56a:	9b00      	ldr	r3, [sp, #0]
 800c56c:	2400      	movs	r4, #0
 800c56e:	429e      	cmp	r6, r3
 800c570:	dac4      	bge.n	800c4fc <__gethex+0x1d0>
 800c572:	1b9e      	subs	r6, r3, r6
 800c574:	0029      	movs	r1, r5
 800c576:	0032      	movs	r2, r6
 800c578:	9803      	ldr	r0, [sp, #12]
 800c57a:	f000 fd05 	bl	800cf88 <__lshift>
 800c57e:	0003      	movs	r3, r0
 800c580:	3314      	adds	r3, #20
 800c582:	0005      	movs	r5, r0
 800c584:	1bbf      	subs	r7, r7, r6
 800c586:	9302      	str	r3, [sp, #8]
 800c588:	e7b8      	b.n	800c4fc <__gethex+0x1d0>
 800c58a:	9b01      	ldr	r3, [sp, #4]
 800c58c:	685e      	ldr	r6, [r3, #4]
 800c58e:	42be      	cmp	r6, r7
 800c590:	dd6f      	ble.n	800c672 <__gethex+0x346>
 800c592:	9b00      	ldr	r3, [sp, #0]
 800c594:	1bf6      	subs	r6, r6, r7
 800c596:	42b3      	cmp	r3, r6
 800c598:	dc36      	bgt.n	800c608 <__gethex+0x2dc>
 800c59a:	9b01      	ldr	r3, [sp, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d024      	beq.n	800c5ec <__gethex+0x2c0>
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d026      	beq.n	800c5f4 <__gethex+0x2c8>
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d117      	bne.n	800c5da <__gethex+0x2ae>
 800c5aa:	9b00      	ldr	r3, [sp, #0]
 800c5ac:	42b3      	cmp	r3, r6
 800c5ae:	d114      	bne.n	800c5da <__gethex+0x2ae>
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d10b      	bne.n	800c5cc <__gethex+0x2a0>
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	9a07      	ldr	r2, [sp, #28]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	2662      	movs	r6, #98	@ 0x62
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	9a02      	ldr	r2, [sp, #8]
 800c5c2:	612b      	str	r3, [r5, #16]
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5c8:	601d      	str	r5, [r3, #0]
 800c5ca:	e739      	b.n	800c440 <__gethex+0x114>
 800c5cc:	9900      	ldr	r1, [sp, #0]
 800c5ce:	0028      	movs	r0, r5
 800c5d0:	3901      	subs	r1, #1
 800c5d2:	f000 ff12 	bl	800d3fa <__any_on>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d1ec      	bne.n	800c5b4 <__gethex+0x288>
 800c5da:	0029      	movs	r1, r5
 800c5dc:	9803      	ldr	r0, [sp, #12]
 800c5de:	f000 faa9 	bl	800cb34 <_Bfree>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5e6:	2650      	movs	r6, #80	@ 0x50
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	e729      	b.n	800c440 <__gethex+0x114>
 800c5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f3      	bne.n	800c5da <__gethex+0x2ae>
 800c5f2:	e7df      	b.n	800c5b4 <__gethex+0x288>
 800c5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1dc      	bne.n	800c5b4 <__gethex+0x288>
 800c5fa:	e7ee      	b.n	800c5da <__gethex+0x2ae>
 800c5fc:	0800e8d8 	.word	0x0800e8d8
 800c600:	0800e9eb 	.word	0x0800e9eb
 800c604:	0800e9fc 	.word	0x0800e9fc
 800c608:	1e77      	subs	r7, r6, #1
 800c60a:	2c00      	cmp	r4, #0
 800c60c:	d12f      	bne.n	800c66e <__gethex+0x342>
 800c60e:	2f00      	cmp	r7, #0
 800c610:	d004      	beq.n	800c61c <__gethex+0x2f0>
 800c612:	0039      	movs	r1, r7
 800c614:	0028      	movs	r0, r5
 800c616:	f000 fef0 	bl	800d3fa <__any_on>
 800c61a:	0004      	movs	r4, r0
 800c61c:	231f      	movs	r3, #31
 800c61e:	117a      	asrs	r2, r7, #5
 800c620:	401f      	ands	r7, r3
 800c622:	3b1e      	subs	r3, #30
 800c624:	40bb      	lsls	r3, r7
 800c626:	9902      	ldr	r1, [sp, #8]
 800c628:	0092      	lsls	r2, r2, #2
 800c62a:	5852      	ldr	r2, [r2, r1]
 800c62c:	421a      	tst	r2, r3
 800c62e:	d001      	beq.n	800c634 <__gethex+0x308>
 800c630:	2302      	movs	r3, #2
 800c632:	431c      	orrs	r4, r3
 800c634:	9b00      	ldr	r3, [sp, #0]
 800c636:	0031      	movs	r1, r6
 800c638:	1b9b      	subs	r3, r3, r6
 800c63a:	2602      	movs	r6, #2
 800c63c:	0028      	movs	r0, r5
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	f7ff fe0c 	bl	800c25c <rshift>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	685f      	ldr	r7, [r3, #4]
 800c648:	2c00      	cmp	r4, #0
 800c64a:	d03f      	beq.n	800c6cc <__gethex+0x3a0>
 800c64c:	9b01      	ldr	r3, [sp, #4]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	2b02      	cmp	r3, #2
 800c652:	d010      	beq.n	800c676 <__gethex+0x34a>
 800c654:	2b03      	cmp	r3, #3
 800c656:	d012      	beq.n	800c67e <__gethex+0x352>
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d106      	bne.n	800c66a <__gethex+0x33e>
 800c65c:	07a2      	lsls	r2, r4, #30
 800c65e:	d504      	bpl.n	800c66a <__gethex+0x33e>
 800c660:	9a02      	ldr	r2, [sp, #8]
 800c662:	6812      	ldr	r2, [r2, #0]
 800c664:	4314      	orrs	r4, r2
 800c666:	421c      	tst	r4, r3
 800c668:	d10c      	bne.n	800c684 <__gethex+0x358>
 800c66a:	2310      	movs	r3, #16
 800c66c:	e02d      	b.n	800c6ca <__gethex+0x39e>
 800c66e:	2401      	movs	r4, #1
 800c670:	e7d4      	b.n	800c61c <__gethex+0x2f0>
 800c672:	2601      	movs	r6, #1
 800c674:	e7e8      	b.n	800c648 <__gethex+0x31c>
 800c676:	2301      	movs	r3, #1
 800c678:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c67a:	1a9b      	subs	r3, r3, r2
 800c67c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c67e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0f2      	beq.n	800c66a <__gethex+0x33e>
 800c684:	692b      	ldr	r3, [r5, #16]
 800c686:	2000      	movs	r0, #0
 800c688:	9302      	str	r3, [sp, #8]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	002b      	movs	r3, r5
 800c690:	9a04      	ldr	r2, [sp, #16]
 800c692:	3314      	adds	r3, #20
 800c694:	1899      	adds	r1, r3, r2
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	1c54      	adds	r4, r2, #1
 800c69a:	d01c      	beq.n	800c6d6 <__gethex+0x3aa>
 800c69c:	3201      	adds	r2, #1
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	002b      	movs	r3, r5
 800c6a2:	3314      	adds	r3, #20
 800c6a4:	2e02      	cmp	r6, #2
 800c6a6:	d13f      	bne.n	800c728 <__gethex+0x3fc>
 800c6a8:	9a01      	ldr	r2, [sp, #4]
 800c6aa:	9900      	ldr	r1, [sp, #0]
 800c6ac:	6812      	ldr	r2, [r2, #0]
 800c6ae:	3a01      	subs	r2, #1
 800c6b0:	428a      	cmp	r2, r1
 800c6b2:	d109      	bne.n	800c6c8 <__gethex+0x39c>
 800c6b4:	000a      	movs	r2, r1
 800c6b6:	201f      	movs	r0, #31
 800c6b8:	4010      	ands	r0, r2
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	4082      	lsls	r2, r0
 800c6be:	1149      	asrs	r1, r1, #5
 800c6c0:	0089      	lsls	r1, r1, #2
 800c6c2:	58cb      	ldr	r3, [r1, r3]
 800c6c4:	4213      	tst	r3, r2
 800c6c6:	d13d      	bne.n	800c744 <__gethex+0x418>
 800c6c8:	2320      	movs	r3, #32
 800c6ca:	431e      	orrs	r6, r3
 800c6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6ce:	601d      	str	r5, [r3, #0]
 800c6d0:	9b07      	ldr	r3, [sp, #28]
 800c6d2:	601f      	str	r7, [r3, #0]
 800c6d4:	e6b4      	b.n	800c440 <__gethex+0x114>
 800c6d6:	c301      	stmia	r3!, {r0}
 800c6d8:	4299      	cmp	r1, r3
 800c6da:	d8dc      	bhi.n	800c696 <__gethex+0x36a>
 800c6dc:	68ab      	ldr	r3, [r5, #8]
 800c6de:	9a02      	ldr	r2, [sp, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	db18      	blt.n	800c716 <__gethex+0x3ea>
 800c6e4:	6869      	ldr	r1, [r5, #4]
 800c6e6:	9803      	ldr	r0, [sp, #12]
 800c6e8:	3101      	adds	r1, #1
 800c6ea:	f000 f9df 	bl	800caac <_Balloc>
 800c6ee:	1e04      	subs	r4, r0, #0
 800c6f0:	d104      	bne.n	800c6fc <__gethex+0x3d0>
 800c6f2:	0022      	movs	r2, r4
 800c6f4:	2184      	movs	r1, #132	@ 0x84
 800c6f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c76c <__gethex+0x440>)
 800c6f8:	481d      	ldr	r0, [pc, #116]	@ (800c770 <__gethex+0x444>)
 800c6fa:	e6c4      	b.n	800c486 <__gethex+0x15a>
 800c6fc:	0029      	movs	r1, r5
 800c6fe:	692a      	ldr	r2, [r5, #16]
 800c700:	310c      	adds	r1, #12
 800c702:	3202      	adds	r2, #2
 800c704:	0092      	lsls	r2, r2, #2
 800c706:	300c      	adds	r0, #12
 800c708:	f7fe fec8 	bl	800b49c <memcpy>
 800c70c:	0029      	movs	r1, r5
 800c70e:	9803      	ldr	r0, [sp, #12]
 800c710:	f000 fa10 	bl	800cb34 <_Bfree>
 800c714:	0025      	movs	r5, r4
 800c716:	692b      	ldr	r3, [r5, #16]
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	612a      	str	r2, [r5, #16]
 800c71c:	2201      	movs	r2, #1
 800c71e:	3304      	adds	r3, #4
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	18eb      	adds	r3, r5, r3
 800c724:	605a      	str	r2, [r3, #4]
 800c726:	e7bb      	b.n	800c6a0 <__gethex+0x374>
 800c728:	692a      	ldr	r2, [r5, #16]
 800c72a:	9902      	ldr	r1, [sp, #8]
 800c72c:	428a      	cmp	r2, r1
 800c72e:	dd0b      	ble.n	800c748 <__gethex+0x41c>
 800c730:	2101      	movs	r1, #1
 800c732:	0028      	movs	r0, r5
 800c734:	f7ff fd92 	bl	800c25c <rshift>
 800c738:	9b01      	ldr	r3, [sp, #4]
 800c73a:	3701      	adds	r7, #1
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	42bb      	cmp	r3, r7
 800c740:	da00      	bge.n	800c744 <__gethex+0x418>
 800c742:	e6df      	b.n	800c504 <__gethex+0x1d8>
 800c744:	2601      	movs	r6, #1
 800c746:	e7bf      	b.n	800c6c8 <__gethex+0x39c>
 800c748:	221f      	movs	r2, #31
 800c74a:	9c00      	ldr	r4, [sp, #0]
 800c74c:	9900      	ldr	r1, [sp, #0]
 800c74e:	4014      	ands	r4, r2
 800c750:	4211      	tst	r1, r2
 800c752:	d0f7      	beq.n	800c744 <__gethex+0x418>
 800c754:	9a04      	ldr	r2, [sp, #16]
 800c756:	189b      	adds	r3, r3, r2
 800c758:	3b04      	subs	r3, #4
 800c75a:	6818      	ldr	r0, [r3, #0]
 800c75c:	f000 fa9e 	bl	800cc9c <__hi0bits>
 800c760:	2320      	movs	r3, #32
 800c762:	1b1b      	subs	r3, r3, r4
 800c764:	4298      	cmp	r0, r3
 800c766:	dbe3      	blt.n	800c730 <__gethex+0x404>
 800c768:	e7ec      	b.n	800c744 <__gethex+0x418>
 800c76a:	46c0      	nop			@ (mov r8, r8)
 800c76c:	0800e9eb 	.word	0x0800e9eb
 800c770:	0800e9fc 	.word	0x0800e9fc

0800c774 <L_shift>:
 800c774:	2308      	movs	r3, #8
 800c776:	b570      	push	{r4, r5, r6, lr}
 800c778:	2520      	movs	r5, #32
 800c77a:	1a9a      	subs	r2, r3, r2
 800c77c:	0092      	lsls	r2, r2, #2
 800c77e:	1aad      	subs	r5, r5, r2
 800c780:	6843      	ldr	r3, [r0, #4]
 800c782:	6804      	ldr	r4, [r0, #0]
 800c784:	001e      	movs	r6, r3
 800c786:	40ae      	lsls	r6, r5
 800c788:	40d3      	lsrs	r3, r2
 800c78a:	4334      	orrs	r4, r6
 800c78c:	6004      	str	r4, [r0, #0]
 800c78e:	6043      	str	r3, [r0, #4]
 800c790:	3004      	adds	r0, #4
 800c792:	4288      	cmp	r0, r1
 800c794:	d3f4      	bcc.n	800c780 <L_shift+0xc>
 800c796:	bd70      	pop	{r4, r5, r6, pc}

0800c798 <__match>:
 800c798:	b530      	push	{r4, r5, lr}
 800c79a:	6803      	ldr	r3, [r0, #0]
 800c79c:	780c      	ldrb	r4, [r1, #0]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	2c00      	cmp	r4, #0
 800c7a2:	d102      	bne.n	800c7aa <__match+0x12>
 800c7a4:	6003      	str	r3, [r0, #0]
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	bd30      	pop	{r4, r5, pc}
 800c7aa:	781a      	ldrb	r2, [r3, #0]
 800c7ac:	0015      	movs	r5, r2
 800c7ae:	3d41      	subs	r5, #65	@ 0x41
 800c7b0:	2d19      	cmp	r5, #25
 800c7b2:	d800      	bhi.n	800c7b6 <__match+0x1e>
 800c7b4:	3220      	adds	r2, #32
 800c7b6:	3101      	adds	r1, #1
 800c7b8:	42a2      	cmp	r2, r4
 800c7ba:	d0ef      	beq.n	800c79c <__match+0x4>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e7f3      	b.n	800c7a8 <__match+0x10>

0800c7c0 <__hexnan>:
 800c7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7c2:	680b      	ldr	r3, [r1, #0]
 800c7c4:	b08b      	sub	sp, #44	@ 0x2c
 800c7c6:	9201      	str	r2, [sp, #4]
 800c7c8:	9901      	ldr	r1, [sp, #4]
 800c7ca:	115a      	asrs	r2, r3, #5
 800c7cc:	0092      	lsls	r2, r2, #2
 800c7ce:	188a      	adds	r2, r1, r2
 800c7d0:	9202      	str	r2, [sp, #8]
 800c7d2:	0019      	movs	r1, r3
 800c7d4:	221f      	movs	r2, #31
 800c7d6:	4011      	ands	r1, r2
 800c7d8:	9008      	str	r0, [sp, #32]
 800c7da:	9106      	str	r1, [sp, #24]
 800c7dc:	4213      	tst	r3, r2
 800c7de:	d002      	beq.n	800c7e6 <__hexnan+0x26>
 800c7e0:	9b02      	ldr	r3, [sp, #8]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	9b02      	ldr	r3, [sp, #8]
 800c7e8:	2500      	movs	r5, #0
 800c7ea:	1f1f      	subs	r7, r3, #4
 800c7ec:	003e      	movs	r6, r7
 800c7ee:	003c      	movs	r4, r7
 800c7f0:	9b08      	ldr	r3, [sp, #32]
 800c7f2:	603d      	str	r5, [r7, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	9507      	str	r5, [sp, #28]
 800c7f8:	9305      	str	r3, [sp, #20]
 800c7fa:	9503      	str	r5, [sp, #12]
 800c7fc:	9b05      	ldr	r3, [sp, #20]
 800c7fe:	3301      	adds	r3, #1
 800c800:	9309      	str	r3, [sp, #36]	@ 0x24
 800c802:	9b05      	ldr	r3, [sp, #20]
 800c804:	785b      	ldrb	r3, [r3, #1]
 800c806:	9304      	str	r3, [sp, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d028      	beq.n	800c85e <__hexnan+0x9e>
 800c80c:	9804      	ldr	r0, [sp, #16]
 800c80e:	f7ff fd78 	bl	800c302 <__hexdig_fun>
 800c812:	2800      	cmp	r0, #0
 800c814:	d155      	bne.n	800c8c2 <__hexnan+0x102>
 800c816:	9b04      	ldr	r3, [sp, #16]
 800c818:	2b20      	cmp	r3, #32
 800c81a:	d819      	bhi.n	800c850 <__hexnan+0x90>
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	9a07      	ldr	r2, [sp, #28]
 800c820:	4293      	cmp	r3, r2
 800c822:	dd12      	ble.n	800c84a <__hexnan+0x8a>
 800c824:	42b4      	cmp	r4, r6
 800c826:	d206      	bcs.n	800c836 <__hexnan+0x76>
 800c828:	2d07      	cmp	r5, #7
 800c82a:	dc04      	bgt.n	800c836 <__hexnan+0x76>
 800c82c:	002a      	movs	r2, r5
 800c82e:	0031      	movs	r1, r6
 800c830:	0020      	movs	r0, r4
 800c832:	f7ff ff9f 	bl	800c774 <L_shift>
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	2508      	movs	r5, #8
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d905      	bls.n	800c84a <__hexnan+0x8a>
 800c83e:	1f26      	subs	r6, r4, #4
 800c840:	2500      	movs	r5, #0
 800c842:	0034      	movs	r4, r6
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	6035      	str	r5, [r6, #0]
 800c848:	9307      	str	r3, [sp, #28]
 800c84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84c:	9305      	str	r3, [sp, #20]
 800c84e:	e7d5      	b.n	800c7fc <__hexnan+0x3c>
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	2b29      	cmp	r3, #41	@ 0x29
 800c854:	d15a      	bne.n	800c90c <__hexnan+0x14c>
 800c856:	9b05      	ldr	r3, [sp, #20]
 800c858:	9a08      	ldr	r2, [sp, #32]
 800c85a:	3302      	adds	r3, #2
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d053      	beq.n	800c90c <__hexnan+0x14c>
 800c864:	42b4      	cmp	r4, r6
 800c866:	d206      	bcs.n	800c876 <__hexnan+0xb6>
 800c868:	2d07      	cmp	r5, #7
 800c86a:	dc04      	bgt.n	800c876 <__hexnan+0xb6>
 800c86c:	002a      	movs	r2, r5
 800c86e:	0031      	movs	r1, r6
 800c870:	0020      	movs	r0, r4
 800c872:	f7ff ff7f 	bl	800c774 <L_shift>
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	429c      	cmp	r4, r3
 800c87a:	d936      	bls.n	800c8ea <__hexnan+0x12a>
 800c87c:	001a      	movs	r2, r3
 800c87e:	0023      	movs	r3, r4
 800c880:	cb02      	ldmia	r3!, {r1}
 800c882:	c202      	stmia	r2!, {r1}
 800c884:	429f      	cmp	r7, r3
 800c886:	d2fb      	bcs.n	800c880 <__hexnan+0xc0>
 800c888:	9b02      	ldr	r3, [sp, #8]
 800c88a:	1c61      	adds	r1, r4, #1
 800c88c:	1eda      	subs	r2, r3, #3
 800c88e:	2304      	movs	r3, #4
 800c890:	4291      	cmp	r1, r2
 800c892:	d805      	bhi.n	800c8a0 <__hexnan+0xe0>
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	3b04      	subs	r3, #4
 800c898:	1b1b      	subs	r3, r3, r4
 800c89a:	089b      	lsrs	r3, r3, #2
 800c89c:	3301      	adds	r3, #1
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	9a01      	ldr	r2, [sp, #4]
 800c8a2:	18d3      	adds	r3, r2, r3
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	c304      	stmia	r3!, {r2}
 800c8a8:	429f      	cmp	r7, r3
 800c8aa:	d2fc      	bcs.n	800c8a6 <__hexnan+0xe6>
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d104      	bne.n	800c8bc <__hexnan+0xfc>
 800c8b2:	9b01      	ldr	r3, [sp, #4]
 800c8b4:	429f      	cmp	r7, r3
 800c8b6:	d127      	bne.n	800c908 <__hexnan+0x148>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	603b      	str	r3, [r7, #0]
 800c8bc:	2005      	movs	r0, #5
 800c8be:	b00b      	add	sp, #44	@ 0x2c
 800c8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	2d08      	cmp	r5, #8
 800c8cc:	dd06      	ble.n	800c8dc <__hexnan+0x11c>
 800c8ce:	9b01      	ldr	r3, [sp, #4]
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	d9ba      	bls.n	800c84a <__hexnan+0x8a>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	2501      	movs	r5, #1
 800c8d8:	3c04      	subs	r4, #4
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	220f      	movs	r2, #15
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	4010      	ands	r0, r2
 800c8e2:	011b      	lsls	r3, r3, #4
 800c8e4:	4303      	orrs	r3, r0
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	e7af      	b.n	800c84a <__hexnan+0x8a>
 800c8ea:	9b06      	ldr	r3, [sp, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d0dd      	beq.n	800c8ac <__hexnan+0xec>
 800c8f0:	2320      	movs	r3, #32
 800c8f2:	9a06      	ldr	r2, [sp, #24]
 800c8f4:	9902      	ldr	r1, [sp, #8]
 800c8f6:	1a9b      	subs	r3, r3, r2
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	4252      	negs	r2, r2
 800c8fc:	40da      	lsrs	r2, r3
 800c8fe:	3904      	subs	r1, #4
 800c900:	680b      	ldr	r3, [r1, #0]
 800c902:	4013      	ands	r3, r2
 800c904:	600b      	str	r3, [r1, #0]
 800c906:	e7d1      	b.n	800c8ac <__hexnan+0xec>
 800c908:	3f04      	subs	r7, #4
 800c90a:	e7cf      	b.n	800c8ac <__hexnan+0xec>
 800c90c:	2004      	movs	r0, #4
 800c90e:	e7d6      	b.n	800c8be <__hexnan+0xfe>

0800c910 <malloc>:
 800c910:	b510      	push	{r4, lr}
 800c912:	4b03      	ldr	r3, [pc, #12]	@ (800c920 <malloc+0x10>)
 800c914:	0001      	movs	r1, r0
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	f000 f826 	bl	800c968 <_malloc_r>
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	46c0      	nop			@ (mov r8, r8)
 800c920:	200001c4 	.word	0x200001c4

0800c924 <sbrk_aligned>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	4e0f      	ldr	r6, [pc, #60]	@ (800c964 <sbrk_aligned+0x40>)
 800c928:	000d      	movs	r5, r1
 800c92a:	6831      	ldr	r1, [r6, #0]
 800c92c:	0004      	movs	r4, r0
 800c92e:	2900      	cmp	r1, #0
 800c930:	d102      	bne.n	800c938 <sbrk_aligned+0x14>
 800c932:	f001 fdad 	bl	800e490 <_sbrk_r>
 800c936:	6030      	str	r0, [r6, #0]
 800c938:	0029      	movs	r1, r5
 800c93a:	0020      	movs	r0, r4
 800c93c:	f001 fda8 	bl	800e490 <_sbrk_r>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d103      	bne.n	800c94c <sbrk_aligned+0x28>
 800c944:	2501      	movs	r5, #1
 800c946:	426d      	negs	r5, r5
 800c948:	0028      	movs	r0, r5
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	2303      	movs	r3, #3
 800c94e:	1cc5      	adds	r5, r0, #3
 800c950:	439d      	bics	r5, r3
 800c952:	42a8      	cmp	r0, r5
 800c954:	d0f8      	beq.n	800c948 <sbrk_aligned+0x24>
 800c956:	1a29      	subs	r1, r5, r0
 800c958:	0020      	movs	r0, r4
 800c95a:	f001 fd99 	bl	800e490 <_sbrk_r>
 800c95e:	3001      	adds	r0, #1
 800c960:	d1f2      	bne.n	800c948 <sbrk_aligned+0x24>
 800c962:	e7ef      	b.n	800c944 <sbrk_aligned+0x20>
 800c964:	200007e4 	.word	0x200007e4

0800c968 <_malloc_r>:
 800c968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c96a:	2203      	movs	r2, #3
 800c96c:	1ccb      	adds	r3, r1, #3
 800c96e:	4393      	bics	r3, r2
 800c970:	3308      	adds	r3, #8
 800c972:	0005      	movs	r5, r0
 800c974:	001f      	movs	r7, r3
 800c976:	2b0c      	cmp	r3, #12
 800c978:	d234      	bcs.n	800c9e4 <_malloc_r+0x7c>
 800c97a:	270c      	movs	r7, #12
 800c97c:	42b9      	cmp	r1, r7
 800c97e:	d833      	bhi.n	800c9e8 <_malloc_r+0x80>
 800c980:	0028      	movs	r0, r5
 800c982:	f000 f883 	bl	800ca8c <__malloc_lock>
 800c986:	4e37      	ldr	r6, [pc, #220]	@ (800ca64 <_malloc_r+0xfc>)
 800c988:	6833      	ldr	r3, [r6, #0]
 800c98a:	001c      	movs	r4, r3
 800c98c:	2c00      	cmp	r4, #0
 800c98e:	d12f      	bne.n	800c9f0 <_malloc_r+0x88>
 800c990:	0039      	movs	r1, r7
 800c992:	0028      	movs	r0, r5
 800c994:	f7ff ffc6 	bl	800c924 <sbrk_aligned>
 800c998:	0004      	movs	r4, r0
 800c99a:	1c43      	adds	r3, r0, #1
 800c99c:	d15f      	bne.n	800ca5e <_malloc_r+0xf6>
 800c99e:	6834      	ldr	r4, [r6, #0]
 800c9a0:	9400      	str	r4, [sp, #0]
 800c9a2:	9b00      	ldr	r3, [sp, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d14a      	bne.n	800ca3e <_malloc_r+0xd6>
 800c9a8:	2c00      	cmp	r4, #0
 800c9aa:	d052      	beq.n	800ca52 <_malloc_r+0xea>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	0028      	movs	r0, r5
 800c9b0:	18e3      	adds	r3, r4, r3
 800c9b2:	9900      	ldr	r1, [sp, #0]
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	f001 fd6b 	bl	800e490 <_sbrk_r>
 800c9ba:	9b01      	ldr	r3, [sp, #4]
 800c9bc:	4283      	cmp	r3, r0
 800c9be:	d148      	bne.n	800ca52 <_malloc_r+0xea>
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	0028      	movs	r0, r5
 800c9c4:	1aff      	subs	r7, r7, r3
 800c9c6:	0039      	movs	r1, r7
 800c9c8:	f7ff ffac 	bl	800c924 <sbrk_aligned>
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d040      	beq.n	800ca52 <_malloc_r+0xea>
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	19db      	adds	r3, r3, r7
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	6833      	ldr	r3, [r6, #0]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	2a00      	cmp	r2, #0
 800c9dc:	d133      	bne.n	800ca46 <_malloc_r+0xde>
 800c9de:	9b00      	ldr	r3, [sp, #0]
 800c9e0:	6033      	str	r3, [r6, #0]
 800c9e2:	e019      	b.n	800ca18 <_malloc_r+0xb0>
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dac9      	bge.n	800c97c <_malloc_r+0x14>
 800c9e8:	230c      	movs	r3, #12
 800c9ea:	602b      	str	r3, [r5, #0]
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9f0:	6821      	ldr	r1, [r4, #0]
 800c9f2:	1bc9      	subs	r1, r1, r7
 800c9f4:	d420      	bmi.n	800ca38 <_malloc_r+0xd0>
 800c9f6:	290b      	cmp	r1, #11
 800c9f8:	d90a      	bls.n	800ca10 <_malloc_r+0xa8>
 800c9fa:	19e2      	adds	r2, r4, r7
 800c9fc:	6027      	str	r7, [r4, #0]
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	d104      	bne.n	800ca0c <_malloc_r+0xa4>
 800ca02:	6032      	str	r2, [r6, #0]
 800ca04:	6863      	ldr	r3, [r4, #4]
 800ca06:	6011      	str	r1, [r2, #0]
 800ca08:	6053      	str	r3, [r2, #4]
 800ca0a:	e005      	b.n	800ca18 <_malloc_r+0xb0>
 800ca0c:	605a      	str	r2, [r3, #4]
 800ca0e:	e7f9      	b.n	800ca04 <_malloc_r+0x9c>
 800ca10:	6862      	ldr	r2, [r4, #4]
 800ca12:	42a3      	cmp	r3, r4
 800ca14:	d10e      	bne.n	800ca34 <_malloc_r+0xcc>
 800ca16:	6032      	str	r2, [r6, #0]
 800ca18:	0028      	movs	r0, r5
 800ca1a:	f000 f83f 	bl	800ca9c <__malloc_unlock>
 800ca1e:	0020      	movs	r0, r4
 800ca20:	2207      	movs	r2, #7
 800ca22:	300b      	adds	r0, #11
 800ca24:	1d23      	adds	r3, r4, #4
 800ca26:	4390      	bics	r0, r2
 800ca28:	1ac2      	subs	r2, r0, r3
 800ca2a:	4298      	cmp	r0, r3
 800ca2c:	d0df      	beq.n	800c9ee <_malloc_r+0x86>
 800ca2e:	1a1b      	subs	r3, r3, r0
 800ca30:	50a3      	str	r3, [r4, r2]
 800ca32:	e7dc      	b.n	800c9ee <_malloc_r+0x86>
 800ca34:	605a      	str	r2, [r3, #4]
 800ca36:	e7ef      	b.n	800ca18 <_malloc_r+0xb0>
 800ca38:	0023      	movs	r3, r4
 800ca3a:	6864      	ldr	r4, [r4, #4]
 800ca3c:	e7a6      	b.n	800c98c <_malloc_r+0x24>
 800ca3e:	9c00      	ldr	r4, [sp, #0]
 800ca40:	6863      	ldr	r3, [r4, #4]
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	e7ad      	b.n	800c9a2 <_malloc_r+0x3a>
 800ca46:	001a      	movs	r2, r3
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	42a3      	cmp	r3, r4
 800ca4c:	d1fb      	bne.n	800ca46 <_malloc_r+0xde>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e7da      	b.n	800ca08 <_malloc_r+0xa0>
 800ca52:	230c      	movs	r3, #12
 800ca54:	0028      	movs	r0, r5
 800ca56:	602b      	str	r3, [r5, #0]
 800ca58:	f000 f820 	bl	800ca9c <__malloc_unlock>
 800ca5c:	e7c6      	b.n	800c9ec <_malloc_r+0x84>
 800ca5e:	6007      	str	r7, [r0, #0]
 800ca60:	e7da      	b.n	800ca18 <_malloc_r+0xb0>
 800ca62:	46c0      	nop			@ (mov r8, r8)
 800ca64:	200007e8 	.word	0x200007e8

0800ca68 <__ascii_mbtowc>:
 800ca68:	b082      	sub	sp, #8
 800ca6a:	2900      	cmp	r1, #0
 800ca6c:	d100      	bne.n	800ca70 <__ascii_mbtowc+0x8>
 800ca6e:	a901      	add	r1, sp, #4
 800ca70:	1e10      	subs	r0, r2, #0
 800ca72:	d006      	beq.n	800ca82 <__ascii_mbtowc+0x1a>
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d006      	beq.n	800ca86 <__ascii_mbtowc+0x1e>
 800ca78:	7813      	ldrb	r3, [r2, #0]
 800ca7a:	600b      	str	r3, [r1, #0]
 800ca7c:	7810      	ldrb	r0, [r2, #0]
 800ca7e:	1e43      	subs	r3, r0, #1
 800ca80:	4198      	sbcs	r0, r3
 800ca82:	b002      	add	sp, #8
 800ca84:	4770      	bx	lr
 800ca86:	2002      	movs	r0, #2
 800ca88:	4240      	negs	r0, r0
 800ca8a:	e7fa      	b.n	800ca82 <__ascii_mbtowc+0x1a>

0800ca8c <__malloc_lock>:
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	4802      	ldr	r0, [pc, #8]	@ (800ca98 <__malloc_lock+0xc>)
 800ca90:	f7fe fcf7 	bl	800b482 <__retarget_lock_acquire_recursive>
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	46c0      	nop			@ (mov r8, r8)
 800ca98:	200007e0 	.word	0x200007e0

0800ca9c <__malloc_unlock>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4802      	ldr	r0, [pc, #8]	@ (800caa8 <__malloc_unlock+0xc>)
 800caa0:	f7fe fcf0 	bl	800b484 <__retarget_lock_release_recursive>
 800caa4:	bd10      	pop	{r4, pc}
 800caa6:	46c0      	nop			@ (mov r8, r8)
 800caa8:	200007e0 	.word	0x200007e0

0800caac <_Balloc>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	69c5      	ldr	r5, [r0, #28]
 800cab0:	0006      	movs	r6, r0
 800cab2:	000c      	movs	r4, r1
 800cab4:	2d00      	cmp	r5, #0
 800cab6:	d10e      	bne.n	800cad6 <_Balloc+0x2a>
 800cab8:	2010      	movs	r0, #16
 800caba:	f7ff ff29 	bl	800c910 <malloc>
 800cabe:	1e02      	subs	r2, r0, #0
 800cac0:	61f0      	str	r0, [r6, #28]
 800cac2:	d104      	bne.n	800cace <_Balloc+0x22>
 800cac4:	216b      	movs	r1, #107	@ 0x6b
 800cac6:	4b19      	ldr	r3, [pc, #100]	@ (800cb2c <_Balloc+0x80>)
 800cac8:	4819      	ldr	r0, [pc, #100]	@ (800cb30 <_Balloc+0x84>)
 800caca:	f001 fcf3 	bl	800e4b4 <__assert_func>
 800cace:	6045      	str	r5, [r0, #4]
 800cad0:	6085      	str	r5, [r0, #8]
 800cad2:	6005      	str	r5, [r0, #0]
 800cad4:	60c5      	str	r5, [r0, #12]
 800cad6:	69f5      	ldr	r5, [r6, #28]
 800cad8:	68eb      	ldr	r3, [r5, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d013      	beq.n	800cb06 <_Balloc+0x5a>
 800cade:	69f3      	ldr	r3, [r6, #28]
 800cae0:	00a2      	lsls	r2, r4, #2
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	189b      	adds	r3, r3, r2
 800cae6:	6818      	ldr	r0, [r3, #0]
 800cae8:	2800      	cmp	r0, #0
 800caea:	d118      	bne.n	800cb1e <_Balloc+0x72>
 800caec:	2101      	movs	r1, #1
 800caee:	000d      	movs	r5, r1
 800caf0:	40a5      	lsls	r5, r4
 800caf2:	1d6a      	adds	r2, r5, #5
 800caf4:	0030      	movs	r0, r6
 800caf6:	0092      	lsls	r2, r2, #2
 800caf8:	f001 fcfa 	bl	800e4f0 <_calloc_r>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d00c      	beq.n	800cb1a <_Balloc+0x6e>
 800cb00:	6044      	str	r4, [r0, #4]
 800cb02:	6085      	str	r5, [r0, #8]
 800cb04:	e00d      	b.n	800cb22 <_Balloc+0x76>
 800cb06:	2221      	movs	r2, #33	@ 0x21
 800cb08:	2104      	movs	r1, #4
 800cb0a:	0030      	movs	r0, r6
 800cb0c:	f001 fcf0 	bl	800e4f0 <_calloc_r>
 800cb10:	69f3      	ldr	r3, [r6, #28]
 800cb12:	60e8      	str	r0, [r5, #12]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1e1      	bne.n	800cade <_Balloc+0x32>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	6802      	ldr	r2, [r0, #0]
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	2300      	movs	r3, #0
 800cb24:	6103      	str	r3, [r0, #16]
 800cb26:	60c3      	str	r3, [r0, #12]
 800cb28:	e7f8      	b.n	800cb1c <_Balloc+0x70>
 800cb2a:	46c0      	nop			@ (mov r8, r8)
 800cb2c:	0800e97c 	.word	0x0800e97c
 800cb30:	0800ea5c 	.word	0x0800ea5c

0800cb34 <_Bfree>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	69c6      	ldr	r6, [r0, #28]
 800cb38:	0005      	movs	r5, r0
 800cb3a:	000c      	movs	r4, r1
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	d10e      	bne.n	800cb5e <_Bfree+0x2a>
 800cb40:	2010      	movs	r0, #16
 800cb42:	f7ff fee5 	bl	800c910 <malloc>
 800cb46:	1e02      	subs	r2, r0, #0
 800cb48:	61e8      	str	r0, [r5, #28]
 800cb4a:	d104      	bne.n	800cb56 <_Bfree+0x22>
 800cb4c:	218f      	movs	r1, #143	@ 0x8f
 800cb4e:	4b09      	ldr	r3, [pc, #36]	@ (800cb74 <_Bfree+0x40>)
 800cb50:	4809      	ldr	r0, [pc, #36]	@ (800cb78 <_Bfree+0x44>)
 800cb52:	f001 fcaf 	bl	800e4b4 <__assert_func>
 800cb56:	6046      	str	r6, [r0, #4]
 800cb58:	6086      	str	r6, [r0, #8]
 800cb5a:	6006      	str	r6, [r0, #0]
 800cb5c:	60c6      	str	r6, [r0, #12]
 800cb5e:	2c00      	cmp	r4, #0
 800cb60:	d007      	beq.n	800cb72 <_Bfree+0x3e>
 800cb62:	69eb      	ldr	r3, [r5, #28]
 800cb64:	6862      	ldr	r2, [r4, #4]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	0092      	lsls	r2, r2, #2
 800cb6a:	189b      	adds	r3, r3, r2
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	6022      	str	r2, [r4, #0]
 800cb70:	601c      	str	r4, [r3, #0]
 800cb72:	bd70      	pop	{r4, r5, r6, pc}
 800cb74:	0800e97c 	.word	0x0800e97c
 800cb78:	0800ea5c 	.word	0x0800ea5c

0800cb7c <__multadd>:
 800cb7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb7e:	000f      	movs	r7, r1
 800cb80:	9001      	str	r0, [sp, #4]
 800cb82:	000c      	movs	r4, r1
 800cb84:	001e      	movs	r6, r3
 800cb86:	2000      	movs	r0, #0
 800cb88:	690d      	ldr	r5, [r1, #16]
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	3001      	adds	r0, #1
 800cb90:	b299      	uxth	r1, r3
 800cb92:	4351      	muls	r1, r2
 800cb94:	0c1b      	lsrs	r3, r3, #16
 800cb96:	4353      	muls	r3, r2
 800cb98:	1989      	adds	r1, r1, r6
 800cb9a:	0c0e      	lsrs	r6, r1, #16
 800cb9c:	199b      	adds	r3, r3, r6
 800cb9e:	0c1e      	lsrs	r6, r3, #16
 800cba0:	b289      	uxth	r1, r1
 800cba2:	041b      	lsls	r3, r3, #16
 800cba4:	185b      	adds	r3, r3, r1
 800cba6:	c708      	stmia	r7!, {r3}
 800cba8:	4285      	cmp	r5, r0
 800cbaa:	dcef      	bgt.n	800cb8c <__multadd+0x10>
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	d022      	beq.n	800cbf6 <__multadd+0x7a>
 800cbb0:	68a3      	ldr	r3, [r4, #8]
 800cbb2:	42ab      	cmp	r3, r5
 800cbb4:	dc19      	bgt.n	800cbea <__multadd+0x6e>
 800cbb6:	6861      	ldr	r1, [r4, #4]
 800cbb8:	9801      	ldr	r0, [sp, #4]
 800cbba:	3101      	adds	r1, #1
 800cbbc:	f7ff ff76 	bl	800caac <_Balloc>
 800cbc0:	1e07      	subs	r7, r0, #0
 800cbc2:	d105      	bne.n	800cbd0 <__multadd+0x54>
 800cbc4:	003a      	movs	r2, r7
 800cbc6:	21ba      	movs	r1, #186	@ 0xba
 800cbc8:	4b0c      	ldr	r3, [pc, #48]	@ (800cbfc <__multadd+0x80>)
 800cbca:	480d      	ldr	r0, [pc, #52]	@ (800cc00 <__multadd+0x84>)
 800cbcc:	f001 fc72 	bl	800e4b4 <__assert_func>
 800cbd0:	0021      	movs	r1, r4
 800cbd2:	6922      	ldr	r2, [r4, #16]
 800cbd4:	310c      	adds	r1, #12
 800cbd6:	3202      	adds	r2, #2
 800cbd8:	0092      	lsls	r2, r2, #2
 800cbda:	300c      	adds	r0, #12
 800cbdc:	f7fe fc5e 	bl	800b49c <memcpy>
 800cbe0:	0021      	movs	r1, r4
 800cbe2:	9801      	ldr	r0, [sp, #4]
 800cbe4:	f7ff ffa6 	bl	800cb34 <_Bfree>
 800cbe8:	003c      	movs	r4, r7
 800cbea:	1d2b      	adds	r3, r5, #4
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	18e3      	adds	r3, r4, r3
 800cbf0:	3501      	adds	r5, #1
 800cbf2:	605e      	str	r6, [r3, #4]
 800cbf4:	6125      	str	r5, [r4, #16]
 800cbf6:	0020      	movs	r0, r4
 800cbf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbfa:	46c0      	nop			@ (mov r8, r8)
 800cbfc:	0800e9eb 	.word	0x0800e9eb
 800cc00:	0800ea5c 	.word	0x0800ea5c

0800cc04 <__s2b>:
 800cc04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc06:	0007      	movs	r7, r0
 800cc08:	0018      	movs	r0, r3
 800cc0a:	000c      	movs	r4, r1
 800cc0c:	3008      	adds	r0, #8
 800cc0e:	2109      	movs	r1, #9
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	0015      	movs	r5, r2
 800cc14:	f7f3 fb28 	bl	8000268 <__divsi3>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	4283      	cmp	r3, r0
 800cc1e:	db0a      	blt.n	800cc36 <__s2b+0x32>
 800cc20:	0038      	movs	r0, r7
 800cc22:	f7ff ff43 	bl	800caac <_Balloc>
 800cc26:	1e01      	subs	r1, r0, #0
 800cc28:	d108      	bne.n	800cc3c <__s2b+0x38>
 800cc2a:	000a      	movs	r2, r1
 800cc2c:	4b19      	ldr	r3, [pc, #100]	@ (800cc94 <__s2b+0x90>)
 800cc2e:	481a      	ldr	r0, [pc, #104]	@ (800cc98 <__s2b+0x94>)
 800cc30:	31d3      	adds	r1, #211	@ 0xd3
 800cc32:	f001 fc3f 	bl	800e4b4 <__assert_func>
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	3101      	adds	r1, #1
 800cc3a:	e7ef      	b.n	800cc1c <__s2b+0x18>
 800cc3c:	9b08      	ldr	r3, [sp, #32]
 800cc3e:	6143      	str	r3, [r0, #20]
 800cc40:	2301      	movs	r3, #1
 800cc42:	6103      	str	r3, [r0, #16]
 800cc44:	2d09      	cmp	r5, #9
 800cc46:	dd18      	ble.n	800cc7a <__s2b+0x76>
 800cc48:	0023      	movs	r3, r4
 800cc4a:	3309      	adds	r3, #9
 800cc4c:	001e      	movs	r6, r3
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	1964      	adds	r4, r4, r5
 800cc52:	7833      	ldrb	r3, [r6, #0]
 800cc54:	220a      	movs	r2, #10
 800cc56:	0038      	movs	r0, r7
 800cc58:	3b30      	subs	r3, #48	@ 0x30
 800cc5a:	f7ff ff8f 	bl	800cb7c <__multadd>
 800cc5e:	3601      	adds	r6, #1
 800cc60:	0001      	movs	r1, r0
 800cc62:	42a6      	cmp	r6, r4
 800cc64:	d1f5      	bne.n	800cc52 <__s2b+0x4e>
 800cc66:	002c      	movs	r4, r5
 800cc68:	9b00      	ldr	r3, [sp, #0]
 800cc6a:	3c08      	subs	r4, #8
 800cc6c:	191c      	adds	r4, r3, r4
 800cc6e:	002e      	movs	r6, r5
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	429e      	cmp	r6, r3
 800cc74:	db04      	blt.n	800cc80 <__s2b+0x7c>
 800cc76:	0008      	movs	r0, r1
 800cc78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc7a:	2509      	movs	r5, #9
 800cc7c:	340a      	adds	r4, #10
 800cc7e:	e7f6      	b.n	800cc6e <__s2b+0x6a>
 800cc80:	1b63      	subs	r3, r4, r5
 800cc82:	5d9b      	ldrb	r3, [r3, r6]
 800cc84:	220a      	movs	r2, #10
 800cc86:	0038      	movs	r0, r7
 800cc88:	3b30      	subs	r3, #48	@ 0x30
 800cc8a:	f7ff ff77 	bl	800cb7c <__multadd>
 800cc8e:	3601      	adds	r6, #1
 800cc90:	0001      	movs	r1, r0
 800cc92:	e7ed      	b.n	800cc70 <__s2b+0x6c>
 800cc94:	0800e9eb 	.word	0x0800e9eb
 800cc98:	0800ea5c 	.word	0x0800ea5c

0800cc9c <__hi0bits>:
 800cc9c:	2280      	movs	r2, #128	@ 0x80
 800cc9e:	0003      	movs	r3, r0
 800cca0:	0252      	lsls	r2, r2, #9
 800cca2:	2000      	movs	r0, #0
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d201      	bcs.n	800ccac <__hi0bits+0x10>
 800cca8:	041b      	lsls	r3, r3, #16
 800ccaa:	3010      	adds	r0, #16
 800ccac:	2280      	movs	r2, #128	@ 0x80
 800ccae:	0452      	lsls	r2, r2, #17
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d201      	bcs.n	800ccb8 <__hi0bits+0x1c>
 800ccb4:	3008      	adds	r0, #8
 800ccb6:	021b      	lsls	r3, r3, #8
 800ccb8:	2280      	movs	r2, #128	@ 0x80
 800ccba:	0552      	lsls	r2, r2, #21
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d201      	bcs.n	800ccc4 <__hi0bits+0x28>
 800ccc0:	3004      	adds	r0, #4
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	2280      	movs	r2, #128	@ 0x80
 800ccc6:	05d2      	lsls	r2, r2, #23
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d201      	bcs.n	800ccd0 <__hi0bits+0x34>
 800cccc:	3002      	adds	r0, #2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	db03      	blt.n	800ccdc <__hi0bits+0x40>
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	4213      	tst	r3, r2
 800ccd8:	d100      	bne.n	800ccdc <__hi0bits+0x40>
 800ccda:	2020      	movs	r0, #32
 800ccdc:	4770      	bx	lr

0800ccde <__lo0bits>:
 800ccde:	6803      	ldr	r3, [r0, #0]
 800cce0:	0001      	movs	r1, r0
 800cce2:	2207      	movs	r2, #7
 800cce4:	0018      	movs	r0, r3
 800cce6:	4010      	ands	r0, r2
 800cce8:	4213      	tst	r3, r2
 800ccea:	d00d      	beq.n	800cd08 <__lo0bits+0x2a>
 800ccec:	3a06      	subs	r2, #6
 800ccee:	2000      	movs	r0, #0
 800ccf0:	4213      	tst	r3, r2
 800ccf2:	d105      	bne.n	800cd00 <__lo0bits+0x22>
 800ccf4:	3002      	adds	r0, #2
 800ccf6:	4203      	tst	r3, r0
 800ccf8:	d003      	beq.n	800cd02 <__lo0bits+0x24>
 800ccfa:	40d3      	lsrs	r3, r2
 800ccfc:	0010      	movs	r0, r2
 800ccfe:	600b      	str	r3, [r1, #0]
 800cd00:	4770      	bx	lr
 800cd02:	089b      	lsrs	r3, r3, #2
 800cd04:	600b      	str	r3, [r1, #0]
 800cd06:	e7fb      	b.n	800cd00 <__lo0bits+0x22>
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	d101      	bne.n	800cd12 <__lo0bits+0x34>
 800cd0e:	2010      	movs	r0, #16
 800cd10:	0c1b      	lsrs	r3, r3, #16
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	d101      	bne.n	800cd1c <__lo0bits+0x3e>
 800cd18:	3008      	adds	r0, #8
 800cd1a:	0a1b      	lsrs	r3, r3, #8
 800cd1c:	071a      	lsls	r2, r3, #28
 800cd1e:	d101      	bne.n	800cd24 <__lo0bits+0x46>
 800cd20:	3004      	adds	r0, #4
 800cd22:	091b      	lsrs	r3, r3, #4
 800cd24:	079a      	lsls	r2, r3, #30
 800cd26:	d101      	bne.n	800cd2c <__lo0bits+0x4e>
 800cd28:	3002      	adds	r0, #2
 800cd2a:	089b      	lsrs	r3, r3, #2
 800cd2c:	07da      	lsls	r2, r3, #31
 800cd2e:	d4e9      	bmi.n	800cd04 <__lo0bits+0x26>
 800cd30:	3001      	adds	r0, #1
 800cd32:	085b      	lsrs	r3, r3, #1
 800cd34:	d1e6      	bne.n	800cd04 <__lo0bits+0x26>
 800cd36:	2020      	movs	r0, #32
 800cd38:	e7e2      	b.n	800cd00 <__lo0bits+0x22>
	...

0800cd3c <__i2b>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	000c      	movs	r4, r1
 800cd40:	2101      	movs	r1, #1
 800cd42:	f7ff feb3 	bl	800caac <_Balloc>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d107      	bne.n	800cd5a <__i2b+0x1e>
 800cd4a:	2146      	movs	r1, #70	@ 0x46
 800cd4c:	4c05      	ldr	r4, [pc, #20]	@ (800cd64 <__i2b+0x28>)
 800cd4e:	0002      	movs	r2, r0
 800cd50:	4b05      	ldr	r3, [pc, #20]	@ (800cd68 <__i2b+0x2c>)
 800cd52:	0020      	movs	r0, r4
 800cd54:	31ff      	adds	r1, #255	@ 0xff
 800cd56:	f001 fbad 	bl	800e4b4 <__assert_func>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	6144      	str	r4, [r0, #20]
 800cd5e:	6103      	str	r3, [r0, #16]
 800cd60:	bd10      	pop	{r4, pc}
 800cd62:	46c0      	nop			@ (mov r8, r8)
 800cd64:	0800ea5c 	.word	0x0800ea5c
 800cd68:	0800e9eb 	.word	0x0800e9eb

0800cd6c <__multiply>:
 800cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6e:	0014      	movs	r4, r2
 800cd70:	690a      	ldr	r2, [r1, #16]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	000d      	movs	r5, r1
 800cd76:	b08b      	sub	sp, #44	@ 0x2c
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	db02      	blt.n	800cd82 <__multiply+0x16>
 800cd7c:	0023      	movs	r3, r4
 800cd7e:	000c      	movs	r4, r1
 800cd80:	001d      	movs	r5, r3
 800cd82:	6927      	ldr	r7, [r4, #16]
 800cd84:	692e      	ldr	r6, [r5, #16]
 800cd86:	6861      	ldr	r1, [r4, #4]
 800cd88:	19bb      	adds	r3, r7, r6
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	68a3      	ldr	r3, [r4, #8]
 800cd8e:	19ba      	adds	r2, r7, r6
 800cd90:	4293      	cmp	r3, r2
 800cd92:	da00      	bge.n	800cd96 <__multiply+0x2a>
 800cd94:	3101      	adds	r1, #1
 800cd96:	f7ff fe89 	bl	800caac <_Balloc>
 800cd9a:	9002      	str	r0, [sp, #8]
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d106      	bne.n	800cdae <__multiply+0x42>
 800cda0:	21b1      	movs	r1, #177	@ 0xb1
 800cda2:	4b49      	ldr	r3, [pc, #292]	@ (800cec8 <__multiply+0x15c>)
 800cda4:	4849      	ldr	r0, [pc, #292]	@ (800cecc <__multiply+0x160>)
 800cda6:	9a02      	ldr	r2, [sp, #8]
 800cda8:	0049      	lsls	r1, r1, #1
 800cdaa:	f001 fb83 	bl	800e4b4 <__assert_func>
 800cdae:	9b02      	ldr	r3, [sp, #8]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	3314      	adds	r3, #20
 800cdb4:	469c      	mov	ip, r3
 800cdb6:	19bb      	adds	r3, r7, r6
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4463      	add	r3, ip
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	4663      	mov	r3, ip
 800cdc0:	9904      	ldr	r1, [sp, #16]
 800cdc2:	428b      	cmp	r3, r1
 800cdc4:	d32a      	bcc.n	800ce1c <__multiply+0xb0>
 800cdc6:	0023      	movs	r3, r4
 800cdc8:	00bf      	lsls	r7, r7, #2
 800cdca:	3314      	adds	r3, #20
 800cdcc:	3514      	adds	r5, #20
 800cdce:	9308      	str	r3, [sp, #32]
 800cdd0:	00b6      	lsls	r6, r6, #2
 800cdd2:	19db      	adds	r3, r3, r7
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	19ab      	adds	r3, r5, r6
 800cdd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdda:	2304      	movs	r3, #4
 800cddc:	9306      	str	r3, [sp, #24]
 800cdde:	0023      	movs	r3, r4
 800cde0:	9a05      	ldr	r2, [sp, #20]
 800cde2:	3315      	adds	r3, #21
 800cde4:	9501      	str	r5, [sp, #4]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d305      	bcc.n	800cdf6 <__multiply+0x8a>
 800cdea:	1b13      	subs	r3, r2, r4
 800cdec:	3b15      	subs	r3, #21
 800cdee:	089b      	lsrs	r3, r3, #2
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	9306      	str	r3, [sp, #24]
 800cdf6:	9b01      	ldr	r3, [sp, #4]
 800cdf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d310      	bcc.n	800ce20 <__multiply+0xb4>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dd05      	ble.n	800ce10 <__multiply+0xa4>
 800ce04:	9b04      	ldr	r3, [sp, #16]
 800ce06:	3b04      	subs	r3, #4
 800ce08:	9304      	str	r3, [sp, #16]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d056      	beq.n	800cebe <__multiply+0x152>
 800ce10:	9b02      	ldr	r3, [sp, #8]
 800ce12:	9a03      	ldr	r2, [sp, #12]
 800ce14:	0018      	movs	r0, r3
 800ce16:	611a      	str	r2, [r3, #16]
 800ce18:	b00b      	add	sp, #44	@ 0x2c
 800ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1c:	c304      	stmia	r3!, {r2}
 800ce1e:	e7cf      	b.n	800cdc0 <__multiply+0x54>
 800ce20:	9b01      	ldr	r3, [sp, #4]
 800ce22:	6818      	ldr	r0, [r3, #0]
 800ce24:	b280      	uxth	r0, r0
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d01e      	beq.n	800ce68 <__multiply+0xfc>
 800ce2a:	4667      	mov	r7, ip
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	9e08      	ldr	r6, [sp, #32]
 800ce30:	ce02      	ldmia	r6!, {r1}
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	9307      	str	r3, [sp, #28]
 800ce36:	b28b      	uxth	r3, r1
 800ce38:	4343      	muls	r3, r0
 800ce3a:	001a      	movs	r2, r3
 800ce3c:	466b      	mov	r3, sp
 800ce3e:	0c09      	lsrs	r1, r1, #16
 800ce40:	8b9b      	ldrh	r3, [r3, #28]
 800ce42:	4341      	muls	r1, r0
 800ce44:	18d3      	adds	r3, r2, r3
 800ce46:	9a07      	ldr	r2, [sp, #28]
 800ce48:	195b      	adds	r3, r3, r5
 800ce4a:	0c12      	lsrs	r2, r2, #16
 800ce4c:	1889      	adds	r1, r1, r2
 800ce4e:	0c1a      	lsrs	r2, r3, #16
 800ce50:	188a      	adds	r2, r1, r2
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	0c15      	lsrs	r5, r2, #16
 800ce56:	0412      	lsls	r2, r2, #16
 800ce58:	431a      	orrs	r2, r3
 800ce5a:	9b05      	ldr	r3, [sp, #20]
 800ce5c:	c704      	stmia	r7!, {r2}
 800ce5e:	42b3      	cmp	r3, r6
 800ce60:	d8e6      	bhi.n	800ce30 <__multiply+0xc4>
 800ce62:	4663      	mov	r3, ip
 800ce64:	9a06      	ldr	r2, [sp, #24]
 800ce66:	509d      	str	r5, [r3, r2]
 800ce68:	9b01      	ldr	r3, [sp, #4]
 800ce6a:	6818      	ldr	r0, [r3, #0]
 800ce6c:	0c00      	lsrs	r0, r0, #16
 800ce6e:	d020      	beq.n	800ceb2 <__multiply+0x146>
 800ce70:	4663      	mov	r3, ip
 800ce72:	0025      	movs	r5, r4
 800ce74:	4661      	mov	r1, ip
 800ce76:	2700      	movs	r7, #0
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3514      	adds	r5, #20
 800ce7c:	682a      	ldr	r2, [r5, #0]
 800ce7e:	680e      	ldr	r6, [r1, #0]
 800ce80:	b292      	uxth	r2, r2
 800ce82:	4342      	muls	r2, r0
 800ce84:	0c36      	lsrs	r6, r6, #16
 800ce86:	1992      	adds	r2, r2, r6
 800ce88:	19d2      	adds	r2, r2, r7
 800ce8a:	0416      	lsls	r6, r2, #16
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	431e      	orrs	r6, r3
 800ce90:	600e      	str	r6, [r1, #0]
 800ce92:	cd40      	ldmia	r5!, {r6}
 800ce94:	684b      	ldr	r3, [r1, #4]
 800ce96:	0c36      	lsrs	r6, r6, #16
 800ce98:	4346      	muls	r6, r0
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	0c12      	lsrs	r2, r2, #16
 800ce9e:	18f3      	adds	r3, r6, r3
 800cea0:	189b      	adds	r3, r3, r2
 800cea2:	9a05      	ldr	r2, [sp, #20]
 800cea4:	0c1f      	lsrs	r7, r3, #16
 800cea6:	3104      	adds	r1, #4
 800cea8:	42aa      	cmp	r2, r5
 800ceaa:	d8e7      	bhi.n	800ce7c <__multiply+0x110>
 800ceac:	4662      	mov	r2, ip
 800ceae:	9906      	ldr	r1, [sp, #24]
 800ceb0:	5053      	str	r3, [r2, r1]
 800ceb2:	9b01      	ldr	r3, [sp, #4]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	2304      	movs	r3, #4
 800ceba:	449c      	add	ip, r3
 800cebc:	e79b      	b.n	800cdf6 <__multiply+0x8a>
 800cebe:	9b03      	ldr	r3, [sp, #12]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	9303      	str	r3, [sp, #12]
 800cec4:	e79b      	b.n	800cdfe <__multiply+0x92>
 800cec6:	46c0      	nop			@ (mov r8, r8)
 800cec8:	0800e9eb 	.word	0x0800e9eb
 800cecc:	0800ea5c 	.word	0x0800ea5c

0800ced0 <__pow5mult>:
 800ced0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ced2:	2303      	movs	r3, #3
 800ced4:	0015      	movs	r5, r2
 800ced6:	0007      	movs	r7, r0
 800ced8:	000e      	movs	r6, r1
 800ceda:	401a      	ands	r2, r3
 800cedc:	421d      	tst	r5, r3
 800cede:	d008      	beq.n	800cef2 <__pow5mult+0x22>
 800cee0:	4925      	ldr	r1, [pc, #148]	@ (800cf78 <__pow5mult+0xa8>)
 800cee2:	3a01      	subs	r2, #1
 800cee4:	0092      	lsls	r2, r2, #2
 800cee6:	5852      	ldr	r2, [r2, r1]
 800cee8:	2300      	movs	r3, #0
 800ceea:	0031      	movs	r1, r6
 800ceec:	f7ff fe46 	bl	800cb7c <__multadd>
 800cef0:	0006      	movs	r6, r0
 800cef2:	10ad      	asrs	r5, r5, #2
 800cef4:	d03d      	beq.n	800cf72 <__pow5mult+0xa2>
 800cef6:	69fc      	ldr	r4, [r7, #28]
 800cef8:	2c00      	cmp	r4, #0
 800cefa:	d10f      	bne.n	800cf1c <__pow5mult+0x4c>
 800cefc:	2010      	movs	r0, #16
 800cefe:	f7ff fd07 	bl	800c910 <malloc>
 800cf02:	1e02      	subs	r2, r0, #0
 800cf04:	61f8      	str	r0, [r7, #28]
 800cf06:	d105      	bne.n	800cf14 <__pow5mult+0x44>
 800cf08:	21b4      	movs	r1, #180	@ 0xb4
 800cf0a:	4b1c      	ldr	r3, [pc, #112]	@ (800cf7c <__pow5mult+0xac>)
 800cf0c:	481c      	ldr	r0, [pc, #112]	@ (800cf80 <__pow5mult+0xb0>)
 800cf0e:	31ff      	adds	r1, #255	@ 0xff
 800cf10:	f001 fad0 	bl	800e4b4 <__assert_func>
 800cf14:	6044      	str	r4, [r0, #4]
 800cf16:	6084      	str	r4, [r0, #8]
 800cf18:	6004      	str	r4, [r0, #0]
 800cf1a:	60c4      	str	r4, [r0, #12]
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	689c      	ldr	r4, [r3, #8]
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	2c00      	cmp	r4, #0
 800cf24:	d108      	bne.n	800cf38 <__pow5mult+0x68>
 800cf26:	0038      	movs	r0, r7
 800cf28:	4916      	ldr	r1, [pc, #88]	@ (800cf84 <__pow5mult+0xb4>)
 800cf2a:	f7ff ff07 	bl	800cd3c <__i2b>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	0004      	movs	r4, r0
 800cf32:	6098      	str	r0, [r3, #8]
 800cf34:	2300      	movs	r3, #0
 800cf36:	6003      	str	r3, [r0, #0]
 800cf38:	2301      	movs	r3, #1
 800cf3a:	421d      	tst	r5, r3
 800cf3c:	d00a      	beq.n	800cf54 <__pow5mult+0x84>
 800cf3e:	0031      	movs	r1, r6
 800cf40:	0022      	movs	r2, r4
 800cf42:	0038      	movs	r0, r7
 800cf44:	f7ff ff12 	bl	800cd6c <__multiply>
 800cf48:	0031      	movs	r1, r6
 800cf4a:	9001      	str	r0, [sp, #4]
 800cf4c:	0038      	movs	r0, r7
 800cf4e:	f7ff fdf1 	bl	800cb34 <_Bfree>
 800cf52:	9e01      	ldr	r6, [sp, #4]
 800cf54:	106d      	asrs	r5, r5, #1
 800cf56:	d00c      	beq.n	800cf72 <__pow5mult+0xa2>
 800cf58:	6820      	ldr	r0, [r4, #0]
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d107      	bne.n	800cf6e <__pow5mult+0x9e>
 800cf5e:	0022      	movs	r2, r4
 800cf60:	0021      	movs	r1, r4
 800cf62:	0038      	movs	r0, r7
 800cf64:	f7ff ff02 	bl	800cd6c <__multiply>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	6020      	str	r0, [r4, #0]
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	0004      	movs	r4, r0
 800cf70:	e7e2      	b.n	800cf38 <__pow5mult+0x68>
 800cf72:	0030      	movs	r0, r6
 800cf74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf76:	46c0      	nop			@ (mov r8, r8)
 800cf78:	0800eab8 	.word	0x0800eab8
 800cf7c:	0800e97c 	.word	0x0800e97c
 800cf80:	0800ea5c 	.word	0x0800ea5c
 800cf84:	00000271 	.word	0x00000271

0800cf88 <__lshift>:
 800cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8a:	000c      	movs	r4, r1
 800cf8c:	0016      	movs	r6, r2
 800cf8e:	6923      	ldr	r3, [r4, #16]
 800cf90:	1157      	asrs	r7, r2, #5
 800cf92:	b085      	sub	sp, #20
 800cf94:	18fb      	adds	r3, r7, r3
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	6849      	ldr	r1, [r1, #4]
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	9002      	str	r0, [sp, #8]
 800cfa2:	9a00      	ldr	r2, [sp, #0]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	db10      	blt.n	800cfca <__lshift+0x42>
 800cfa8:	9802      	ldr	r0, [sp, #8]
 800cfaa:	f7ff fd7f 	bl	800caac <_Balloc>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	0001      	movs	r1, r0
 800cfb2:	0005      	movs	r5, r0
 800cfb4:	001a      	movs	r2, r3
 800cfb6:	3114      	adds	r1, #20
 800cfb8:	4298      	cmp	r0, r3
 800cfba:	d10c      	bne.n	800cfd6 <__lshift+0x4e>
 800cfbc:	21ef      	movs	r1, #239	@ 0xef
 800cfbe:	002a      	movs	r2, r5
 800cfc0:	4b25      	ldr	r3, [pc, #148]	@ (800d058 <__lshift+0xd0>)
 800cfc2:	4826      	ldr	r0, [pc, #152]	@ (800d05c <__lshift+0xd4>)
 800cfc4:	0049      	lsls	r1, r1, #1
 800cfc6:	f001 fa75 	bl	800e4b4 <__assert_func>
 800cfca:	3101      	adds	r1, #1
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	e7e8      	b.n	800cfa2 <__lshift+0x1a>
 800cfd0:	0098      	lsls	r0, r3, #2
 800cfd2:	500a      	str	r2, [r1, r0]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	42bb      	cmp	r3, r7
 800cfd8:	dbfa      	blt.n	800cfd0 <__lshift+0x48>
 800cfda:	43fb      	mvns	r3, r7
 800cfdc:	17db      	asrs	r3, r3, #31
 800cfde:	401f      	ands	r7, r3
 800cfe0:	00bf      	lsls	r7, r7, #2
 800cfe2:	0023      	movs	r3, r4
 800cfe4:	201f      	movs	r0, #31
 800cfe6:	19c9      	adds	r1, r1, r7
 800cfe8:	0037      	movs	r7, r6
 800cfea:	6922      	ldr	r2, [r4, #16]
 800cfec:	3314      	adds	r3, #20
 800cfee:	0092      	lsls	r2, r2, #2
 800cff0:	189a      	adds	r2, r3, r2
 800cff2:	4007      	ands	r7, r0
 800cff4:	4206      	tst	r6, r0
 800cff6:	d029      	beq.n	800d04c <__lshift+0xc4>
 800cff8:	3001      	adds	r0, #1
 800cffa:	1bc0      	subs	r0, r0, r7
 800cffc:	9003      	str	r0, [sp, #12]
 800cffe:	468c      	mov	ip, r1
 800d000:	2000      	movs	r0, #0
 800d002:	681e      	ldr	r6, [r3, #0]
 800d004:	40be      	lsls	r6, r7
 800d006:	4306      	orrs	r6, r0
 800d008:	4660      	mov	r0, ip
 800d00a:	c040      	stmia	r0!, {r6}
 800d00c:	4684      	mov	ip, r0
 800d00e:	9e03      	ldr	r6, [sp, #12]
 800d010:	cb01      	ldmia	r3!, {r0}
 800d012:	40f0      	lsrs	r0, r6
 800d014:	429a      	cmp	r2, r3
 800d016:	d8f4      	bhi.n	800d002 <__lshift+0x7a>
 800d018:	0026      	movs	r6, r4
 800d01a:	3615      	adds	r6, #21
 800d01c:	2304      	movs	r3, #4
 800d01e:	42b2      	cmp	r2, r6
 800d020:	d304      	bcc.n	800d02c <__lshift+0xa4>
 800d022:	1b13      	subs	r3, r2, r4
 800d024:	3b15      	subs	r3, #21
 800d026:	089b      	lsrs	r3, r3, #2
 800d028:	3301      	adds	r3, #1
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	50c8      	str	r0, [r1, r3]
 800d02e:	2800      	cmp	r0, #0
 800d030:	d002      	beq.n	800d038 <__lshift+0xb0>
 800d032:	9b01      	ldr	r3, [sp, #4]
 800d034:	3302      	adds	r3, #2
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	9b00      	ldr	r3, [sp, #0]
 800d03a:	9802      	ldr	r0, [sp, #8]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	0021      	movs	r1, r4
 800d040:	612b      	str	r3, [r5, #16]
 800d042:	f7ff fd77 	bl	800cb34 <_Bfree>
 800d046:	0028      	movs	r0, r5
 800d048:	b005      	add	sp, #20
 800d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d04c:	cb01      	ldmia	r3!, {r0}
 800d04e:	c101      	stmia	r1!, {r0}
 800d050:	429a      	cmp	r2, r3
 800d052:	d8fb      	bhi.n	800d04c <__lshift+0xc4>
 800d054:	e7f0      	b.n	800d038 <__lshift+0xb0>
 800d056:	46c0      	nop			@ (mov r8, r8)
 800d058:	0800e9eb 	.word	0x0800e9eb
 800d05c:	0800ea5c 	.word	0x0800ea5c

0800d060 <__mcmp>:
 800d060:	b530      	push	{r4, r5, lr}
 800d062:	690b      	ldr	r3, [r1, #16]
 800d064:	6904      	ldr	r4, [r0, #16]
 800d066:	0002      	movs	r2, r0
 800d068:	1ae0      	subs	r0, r4, r3
 800d06a:	429c      	cmp	r4, r3
 800d06c:	d10f      	bne.n	800d08e <__mcmp+0x2e>
 800d06e:	3214      	adds	r2, #20
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	3114      	adds	r1, #20
 800d074:	0014      	movs	r4, r2
 800d076:	18c9      	adds	r1, r1, r3
 800d078:	18d2      	adds	r2, r2, r3
 800d07a:	3a04      	subs	r2, #4
 800d07c:	3904      	subs	r1, #4
 800d07e:	6815      	ldr	r5, [r2, #0]
 800d080:	680b      	ldr	r3, [r1, #0]
 800d082:	429d      	cmp	r5, r3
 800d084:	d004      	beq.n	800d090 <__mcmp+0x30>
 800d086:	2001      	movs	r0, #1
 800d088:	429d      	cmp	r5, r3
 800d08a:	d200      	bcs.n	800d08e <__mcmp+0x2e>
 800d08c:	3802      	subs	r0, #2
 800d08e:	bd30      	pop	{r4, r5, pc}
 800d090:	4294      	cmp	r4, r2
 800d092:	d3f2      	bcc.n	800d07a <__mcmp+0x1a>
 800d094:	e7fb      	b.n	800d08e <__mcmp+0x2e>
	...

0800d098 <__mdiff>:
 800d098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d09a:	000c      	movs	r4, r1
 800d09c:	b087      	sub	sp, #28
 800d09e:	9000      	str	r0, [sp, #0]
 800d0a0:	0011      	movs	r1, r2
 800d0a2:	0020      	movs	r0, r4
 800d0a4:	0017      	movs	r7, r2
 800d0a6:	f7ff ffdb 	bl	800d060 <__mcmp>
 800d0aa:	1e05      	subs	r5, r0, #0
 800d0ac:	d110      	bne.n	800d0d0 <__mdiff+0x38>
 800d0ae:	0001      	movs	r1, r0
 800d0b0:	9800      	ldr	r0, [sp, #0]
 800d0b2:	f7ff fcfb 	bl	800caac <_Balloc>
 800d0b6:	1e02      	subs	r2, r0, #0
 800d0b8:	d104      	bne.n	800d0c4 <__mdiff+0x2c>
 800d0ba:	4b40      	ldr	r3, [pc, #256]	@ (800d1bc <__mdiff+0x124>)
 800d0bc:	4840      	ldr	r0, [pc, #256]	@ (800d1c0 <__mdiff+0x128>)
 800d0be:	4941      	ldr	r1, [pc, #260]	@ (800d1c4 <__mdiff+0x12c>)
 800d0c0:	f001 f9f8 	bl	800e4b4 <__assert_func>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	6145      	str	r5, [r0, #20]
 800d0c8:	6103      	str	r3, [r0, #16]
 800d0ca:	0010      	movs	r0, r2
 800d0cc:	b007      	add	sp, #28
 800d0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d0:	2600      	movs	r6, #0
 800d0d2:	42b0      	cmp	r0, r6
 800d0d4:	da03      	bge.n	800d0de <__mdiff+0x46>
 800d0d6:	0023      	movs	r3, r4
 800d0d8:	003c      	movs	r4, r7
 800d0da:	001f      	movs	r7, r3
 800d0dc:	3601      	adds	r6, #1
 800d0de:	6861      	ldr	r1, [r4, #4]
 800d0e0:	9800      	ldr	r0, [sp, #0]
 800d0e2:	f7ff fce3 	bl	800caac <_Balloc>
 800d0e6:	1e02      	subs	r2, r0, #0
 800d0e8:	d103      	bne.n	800d0f2 <__mdiff+0x5a>
 800d0ea:	4b34      	ldr	r3, [pc, #208]	@ (800d1bc <__mdiff+0x124>)
 800d0ec:	4834      	ldr	r0, [pc, #208]	@ (800d1c0 <__mdiff+0x128>)
 800d0ee:	4936      	ldr	r1, [pc, #216]	@ (800d1c8 <__mdiff+0x130>)
 800d0f0:	e7e6      	b.n	800d0c0 <__mdiff+0x28>
 800d0f2:	6923      	ldr	r3, [r4, #16]
 800d0f4:	3414      	adds	r4, #20
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	18e3      	adds	r3, r4, r3
 800d0fc:	0021      	movs	r1, r4
 800d0fe:	9401      	str	r4, [sp, #4]
 800d100:	003c      	movs	r4, r7
 800d102:	9302      	str	r3, [sp, #8]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	3414      	adds	r4, #20
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	18e3      	adds	r3, r4, r3
 800d10c:	9303      	str	r3, [sp, #12]
 800d10e:	0003      	movs	r3, r0
 800d110:	60c6      	str	r6, [r0, #12]
 800d112:	468c      	mov	ip, r1
 800d114:	2000      	movs	r0, #0
 800d116:	3314      	adds	r3, #20
 800d118:	9304      	str	r3, [sp, #16]
 800d11a:	9305      	str	r3, [sp, #20]
 800d11c:	4663      	mov	r3, ip
 800d11e:	cb20      	ldmia	r3!, {r5}
 800d120:	b2a9      	uxth	r1, r5
 800d122:	000e      	movs	r6, r1
 800d124:	469c      	mov	ip, r3
 800d126:	cc08      	ldmia	r4!, {r3}
 800d128:	0c2d      	lsrs	r5, r5, #16
 800d12a:	b299      	uxth	r1, r3
 800d12c:	1a71      	subs	r1, r6, r1
 800d12e:	1809      	adds	r1, r1, r0
 800d130:	0c1b      	lsrs	r3, r3, #16
 800d132:	1408      	asrs	r0, r1, #16
 800d134:	1aeb      	subs	r3, r5, r3
 800d136:	181b      	adds	r3, r3, r0
 800d138:	1418      	asrs	r0, r3, #16
 800d13a:	b289      	uxth	r1, r1
 800d13c:	041b      	lsls	r3, r3, #16
 800d13e:	4319      	orrs	r1, r3
 800d140:	9b05      	ldr	r3, [sp, #20]
 800d142:	c302      	stmia	r3!, {r1}
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	42a3      	cmp	r3, r4
 800d14a:	d8e7      	bhi.n	800d11c <__mdiff+0x84>
 800d14c:	0039      	movs	r1, r7
 800d14e:	9c03      	ldr	r4, [sp, #12]
 800d150:	3115      	adds	r1, #21
 800d152:	2304      	movs	r3, #4
 800d154:	428c      	cmp	r4, r1
 800d156:	d304      	bcc.n	800d162 <__mdiff+0xca>
 800d158:	1be3      	subs	r3, r4, r7
 800d15a:	3b15      	subs	r3, #21
 800d15c:	089b      	lsrs	r3, r3, #2
 800d15e:	3301      	adds	r3, #1
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	9901      	ldr	r1, [sp, #4]
 800d164:	18cd      	adds	r5, r1, r3
 800d166:	9904      	ldr	r1, [sp, #16]
 800d168:	002e      	movs	r6, r5
 800d16a:	18cb      	adds	r3, r1, r3
 800d16c:	001f      	movs	r7, r3
 800d16e:	9902      	ldr	r1, [sp, #8]
 800d170:	428e      	cmp	r6, r1
 800d172:	d311      	bcc.n	800d198 <__mdiff+0x100>
 800d174:	9c02      	ldr	r4, [sp, #8]
 800d176:	1ee9      	subs	r1, r5, #3
 800d178:	2000      	movs	r0, #0
 800d17a:	428c      	cmp	r4, r1
 800d17c:	d304      	bcc.n	800d188 <__mdiff+0xf0>
 800d17e:	0021      	movs	r1, r4
 800d180:	3103      	adds	r1, #3
 800d182:	1b49      	subs	r1, r1, r5
 800d184:	0889      	lsrs	r1, r1, #2
 800d186:	0088      	lsls	r0, r1, #2
 800d188:	181b      	adds	r3, r3, r0
 800d18a:	3b04      	subs	r3, #4
 800d18c:	6819      	ldr	r1, [r3, #0]
 800d18e:	2900      	cmp	r1, #0
 800d190:	d010      	beq.n	800d1b4 <__mdiff+0x11c>
 800d192:	9b00      	ldr	r3, [sp, #0]
 800d194:	6113      	str	r3, [r2, #16]
 800d196:	e798      	b.n	800d0ca <__mdiff+0x32>
 800d198:	4684      	mov	ip, r0
 800d19a:	ce02      	ldmia	r6!, {r1}
 800d19c:	b288      	uxth	r0, r1
 800d19e:	4460      	add	r0, ip
 800d1a0:	1400      	asrs	r0, r0, #16
 800d1a2:	0c0c      	lsrs	r4, r1, #16
 800d1a4:	1904      	adds	r4, r0, r4
 800d1a6:	4461      	add	r1, ip
 800d1a8:	1420      	asrs	r0, r4, #16
 800d1aa:	b289      	uxth	r1, r1
 800d1ac:	0424      	lsls	r4, r4, #16
 800d1ae:	4321      	orrs	r1, r4
 800d1b0:	c702      	stmia	r7!, {r1}
 800d1b2:	e7dc      	b.n	800d16e <__mdiff+0xd6>
 800d1b4:	9900      	ldr	r1, [sp, #0]
 800d1b6:	3901      	subs	r1, #1
 800d1b8:	9100      	str	r1, [sp, #0]
 800d1ba:	e7e6      	b.n	800d18a <__mdiff+0xf2>
 800d1bc:	0800e9eb 	.word	0x0800e9eb
 800d1c0:	0800ea5c 	.word	0x0800ea5c
 800d1c4:	00000237 	.word	0x00000237
 800d1c8:	00000245 	.word	0x00000245

0800d1cc <__ulp>:
 800d1cc:	b510      	push	{r4, lr}
 800d1ce:	2400      	movs	r4, #0
 800d1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d204 <__ulp+0x38>)
 800d1d2:	4a0d      	ldr	r2, [pc, #52]	@ (800d208 <__ulp+0x3c>)
 800d1d4:	400b      	ands	r3, r1
 800d1d6:	189b      	adds	r3, r3, r2
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	dc06      	bgt.n	800d1ea <__ulp+0x1e>
 800d1dc:	425b      	negs	r3, r3
 800d1de:	151a      	asrs	r2, r3, #20
 800d1e0:	2a13      	cmp	r2, #19
 800d1e2:	dc05      	bgt.n	800d1f0 <__ulp+0x24>
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	031b      	lsls	r3, r3, #12
 800d1e8:	4113      	asrs	r3, r2
 800d1ea:	0019      	movs	r1, r3
 800d1ec:	0020      	movs	r0, r4
 800d1ee:	bd10      	pop	{r4, pc}
 800d1f0:	3a14      	subs	r2, #20
 800d1f2:	2401      	movs	r4, #1
 800d1f4:	2a1e      	cmp	r2, #30
 800d1f6:	dc02      	bgt.n	800d1fe <__ulp+0x32>
 800d1f8:	2480      	movs	r4, #128	@ 0x80
 800d1fa:	0624      	lsls	r4, r4, #24
 800d1fc:	40d4      	lsrs	r4, r2
 800d1fe:	2300      	movs	r3, #0
 800d200:	e7f3      	b.n	800d1ea <__ulp+0x1e>
 800d202:	46c0      	nop			@ (mov r8, r8)
 800d204:	7ff00000 	.word	0x7ff00000
 800d208:	fcc00000 	.word	0xfcc00000

0800d20c <__b2d>:
 800d20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d20e:	0006      	movs	r6, r0
 800d210:	6903      	ldr	r3, [r0, #16]
 800d212:	3614      	adds	r6, #20
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	18f3      	adds	r3, r6, r3
 800d218:	1f1d      	subs	r5, r3, #4
 800d21a:	682c      	ldr	r4, [r5, #0]
 800d21c:	000f      	movs	r7, r1
 800d21e:	0020      	movs	r0, r4
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	f7ff fd3b 	bl	800cc9c <__hi0bits>
 800d226:	2220      	movs	r2, #32
 800d228:	1a12      	subs	r2, r2, r0
 800d22a:	603a      	str	r2, [r7, #0]
 800d22c:	0003      	movs	r3, r0
 800d22e:	4a1c      	ldr	r2, [pc, #112]	@ (800d2a0 <__b2d+0x94>)
 800d230:	280a      	cmp	r0, #10
 800d232:	dc15      	bgt.n	800d260 <__b2d+0x54>
 800d234:	210b      	movs	r1, #11
 800d236:	0027      	movs	r7, r4
 800d238:	1a09      	subs	r1, r1, r0
 800d23a:	40cf      	lsrs	r7, r1
 800d23c:	433a      	orrs	r2, r7
 800d23e:	468c      	mov	ip, r1
 800d240:	0011      	movs	r1, r2
 800d242:	2200      	movs	r2, #0
 800d244:	42ae      	cmp	r6, r5
 800d246:	d202      	bcs.n	800d24e <__b2d+0x42>
 800d248:	9a01      	ldr	r2, [sp, #4]
 800d24a:	3a08      	subs	r2, #8
 800d24c:	6812      	ldr	r2, [r2, #0]
 800d24e:	3315      	adds	r3, #21
 800d250:	409c      	lsls	r4, r3
 800d252:	4663      	mov	r3, ip
 800d254:	0027      	movs	r7, r4
 800d256:	40da      	lsrs	r2, r3
 800d258:	4317      	orrs	r7, r2
 800d25a:	0038      	movs	r0, r7
 800d25c:	b003      	add	sp, #12
 800d25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d260:	2700      	movs	r7, #0
 800d262:	42ae      	cmp	r6, r5
 800d264:	d202      	bcs.n	800d26c <__b2d+0x60>
 800d266:	9d01      	ldr	r5, [sp, #4]
 800d268:	3d08      	subs	r5, #8
 800d26a:	682f      	ldr	r7, [r5, #0]
 800d26c:	210b      	movs	r1, #11
 800d26e:	4249      	negs	r1, r1
 800d270:	468c      	mov	ip, r1
 800d272:	449c      	add	ip, r3
 800d274:	2b0b      	cmp	r3, #11
 800d276:	d010      	beq.n	800d29a <__b2d+0x8e>
 800d278:	4661      	mov	r1, ip
 800d27a:	2320      	movs	r3, #32
 800d27c:	408c      	lsls	r4, r1
 800d27e:	1a5b      	subs	r3, r3, r1
 800d280:	0039      	movs	r1, r7
 800d282:	40d9      	lsrs	r1, r3
 800d284:	430c      	orrs	r4, r1
 800d286:	4322      	orrs	r2, r4
 800d288:	0011      	movs	r1, r2
 800d28a:	2200      	movs	r2, #0
 800d28c:	42b5      	cmp	r5, r6
 800d28e:	d901      	bls.n	800d294 <__b2d+0x88>
 800d290:	3d04      	subs	r5, #4
 800d292:	682a      	ldr	r2, [r5, #0]
 800d294:	4664      	mov	r4, ip
 800d296:	40a7      	lsls	r7, r4
 800d298:	e7dd      	b.n	800d256 <__b2d+0x4a>
 800d29a:	4322      	orrs	r2, r4
 800d29c:	0011      	movs	r1, r2
 800d29e:	e7dc      	b.n	800d25a <__b2d+0x4e>
 800d2a0:	3ff00000 	.word	0x3ff00000

0800d2a4 <__d2b>:
 800d2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2a6:	2101      	movs	r1, #1
 800d2a8:	0016      	movs	r6, r2
 800d2aa:	001f      	movs	r7, r3
 800d2ac:	f7ff fbfe 	bl	800caac <_Balloc>
 800d2b0:	1e04      	subs	r4, r0, #0
 800d2b2:	d105      	bne.n	800d2c0 <__d2b+0x1c>
 800d2b4:	0022      	movs	r2, r4
 800d2b6:	4b25      	ldr	r3, [pc, #148]	@ (800d34c <__d2b+0xa8>)
 800d2b8:	4825      	ldr	r0, [pc, #148]	@ (800d350 <__d2b+0xac>)
 800d2ba:	4926      	ldr	r1, [pc, #152]	@ (800d354 <__d2b+0xb0>)
 800d2bc:	f001 f8fa 	bl	800e4b4 <__assert_func>
 800d2c0:	033b      	lsls	r3, r7, #12
 800d2c2:	007d      	lsls	r5, r7, #1
 800d2c4:	0b1b      	lsrs	r3, r3, #12
 800d2c6:	0d6d      	lsrs	r5, r5, #21
 800d2c8:	d002      	beq.n	800d2d0 <__d2b+0x2c>
 800d2ca:	2280      	movs	r2, #128	@ 0x80
 800d2cc:	0352      	lsls	r2, r2, #13
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	2e00      	cmp	r6, #0
 800d2d4:	d025      	beq.n	800d322 <__d2b+0x7e>
 800d2d6:	4668      	mov	r0, sp
 800d2d8:	9600      	str	r6, [sp, #0]
 800d2da:	f7ff fd00 	bl	800ccde <__lo0bits>
 800d2de:	9b01      	ldr	r3, [sp, #4]
 800d2e0:	9900      	ldr	r1, [sp, #0]
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d01b      	beq.n	800d31e <__d2b+0x7a>
 800d2e6:	2220      	movs	r2, #32
 800d2e8:	001e      	movs	r6, r3
 800d2ea:	1a12      	subs	r2, r2, r0
 800d2ec:	4096      	lsls	r6, r2
 800d2ee:	0032      	movs	r2, r6
 800d2f0:	40c3      	lsrs	r3, r0
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	6162      	str	r2, [r4, #20]
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	9e01      	ldr	r6, [sp, #4]
 800d2fa:	61a6      	str	r6, [r4, #24]
 800d2fc:	1e73      	subs	r3, r6, #1
 800d2fe:	419e      	sbcs	r6, r3
 800d300:	3601      	adds	r6, #1
 800d302:	6126      	str	r6, [r4, #16]
 800d304:	2d00      	cmp	r5, #0
 800d306:	d014      	beq.n	800d332 <__d2b+0x8e>
 800d308:	2635      	movs	r6, #53	@ 0x35
 800d30a:	4b13      	ldr	r3, [pc, #76]	@ (800d358 <__d2b+0xb4>)
 800d30c:	18ed      	adds	r5, r5, r3
 800d30e:	9b08      	ldr	r3, [sp, #32]
 800d310:	182d      	adds	r5, r5, r0
 800d312:	601d      	str	r5, [r3, #0]
 800d314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d316:	1a36      	subs	r6, r6, r0
 800d318:	601e      	str	r6, [r3, #0]
 800d31a:	0020      	movs	r0, r4
 800d31c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d31e:	6161      	str	r1, [r4, #20]
 800d320:	e7ea      	b.n	800d2f8 <__d2b+0x54>
 800d322:	a801      	add	r0, sp, #4
 800d324:	f7ff fcdb 	bl	800ccde <__lo0bits>
 800d328:	9b01      	ldr	r3, [sp, #4]
 800d32a:	2601      	movs	r6, #1
 800d32c:	6163      	str	r3, [r4, #20]
 800d32e:	3020      	adds	r0, #32
 800d330:	e7e7      	b.n	800d302 <__d2b+0x5e>
 800d332:	4b0a      	ldr	r3, [pc, #40]	@ (800d35c <__d2b+0xb8>)
 800d334:	18c0      	adds	r0, r0, r3
 800d336:	9b08      	ldr	r3, [sp, #32]
 800d338:	6018      	str	r0, [r3, #0]
 800d33a:	4b09      	ldr	r3, [pc, #36]	@ (800d360 <__d2b+0xbc>)
 800d33c:	18f3      	adds	r3, r6, r3
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	18e3      	adds	r3, r4, r3
 800d342:	6958      	ldr	r0, [r3, #20]
 800d344:	f7ff fcaa 	bl	800cc9c <__hi0bits>
 800d348:	0176      	lsls	r6, r6, #5
 800d34a:	e7e3      	b.n	800d314 <__d2b+0x70>
 800d34c:	0800e9eb 	.word	0x0800e9eb
 800d350:	0800ea5c 	.word	0x0800ea5c
 800d354:	0000030f 	.word	0x0000030f
 800d358:	fffffbcd 	.word	0xfffffbcd
 800d35c:	fffffbce 	.word	0xfffffbce
 800d360:	3fffffff 	.word	0x3fffffff

0800d364 <__ratio>:
 800d364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d366:	b087      	sub	sp, #28
 800d368:	000f      	movs	r7, r1
 800d36a:	a904      	add	r1, sp, #16
 800d36c:	0006      	movs	r6, r0
 800d36e:	f7ff ff4d 	bl	800d20c <__b2d>
 800d372:	9000      	str	r0, [sp, #0]
 800d374:	9101      	str	r1, [sp, #4]
 800d376:	9b00      	ldr	r3, [sp, #0]
 800d378:	9c01      	ldr	r4, [sp, #4]
 800d37a:	0038      	movs	r0, r7
 800d37c:	a905      	add	r1, sp, #20
 800d37e:	9302      	str	r3, [sp, #8]
 800d380:	9403      	str	r4, [sp, #12]
 800d382:	f7ff ff43 	bl	800d20c <__b2d>
 800d386:	000d      	movs	r5, r1
 800d388:	0002      	movs	r2, r0
 800d38a:	000b      	movs	r3, r1
 800d38c:	6930      	ldr	r0, [r6, #16]
 800d38e:	6939      	ldr	r1, [r7, #16]
 800d390:	9e04      	ldr	r6, [sp, #16]
 800d392:	1a40      	subs	r0, r0, r1
 800d394:	9905      	ldr	r1, [sp, #20]
 800d396:	0140      	lsls	r0, r0, #5
 800d398:	1a71      	subs	r1, r6, r1
 800d39a:	1841      	adds	r1, r0, r1
 800d39c:	0508      	lsls	r0, r1, #20
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	dd08      	ble.n	800d3b4 <__ratio+0x50>
 800d3a2:	9901      	ldr	r1, [sp, #4]
 800d3a4:	1841      	adds	r1, r0, r1
 800d3a6:	9103      	str	r1, [sp, #12]
 800d3a8:	9802      	ldr	r0, [sp, #8]
 800d3aa:	9903      	ldr	r1, [sp, #12]
 800d3ac:	f7f3 ff8c 	bl	80012c8 <__aeabi_ddiv>
 800d3b0:	b007      	add	sp, #28
 800d3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b4:	1a2b      	subs	r3, r5, r0
 800d3b6:	e7f7      	b.n	800d3a8 <__ratio+0x44>

0800d3b8 <__copybits>:
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	0014      	movs	r4, r2
 800d3bc:	0005      	movs	r5, r0
 800d3be:	3901      	subs	r1, #1
 800d3c0:	6913      	ldr	r3, [r2, #16]
 800d3c2:	1149      	asrs	r1, r1, #5
 800d3c4:	3101      	adds	r1, #1
 800d3c6:	0089      	lsls	r1, r1, #2
 800d3c8:	3414      	adds	r4, #20
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	1841      	adds	r1, r0, r1
 800d3ce:	18e3      	adds	r3, r4, r3
 800d3d0:	42a3      	cmp	r3, r4
 800d3d2:	d80d      	bhi.n	800d3f0 <__copybits+0x38>
 800d3d4:	0014      	movs	r4, r2
 800d3d6:	3411      	adds	r4, #17
 800d3d8:	2500      	movs	r5, #0
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	d803      	bhi.n	800d3e6 <__copybits+0x2e>
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	3b11      	subs	r3, #17
 800d3e2:	089b      	lsrs	r3, r3, #2
 800d3e4:	009d      	lsls	r5, r3, #2
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	1940      	adds	r0, r0, r5
 800d3ea:	4281      	cmp	r1, r0
 800d3ec:	d803      	bhi.n	800d3f6 <__copybits+0x3e>
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	cc40      	ldmia	r4!, {r6}
 800d3f2:	c540      	stmia	r5!, {r6}
 800d3f4:	e7ec      	b.n	800d3d0 <__copybits+0x18>
 800d3f6:	c008      	stmia	r0!, {r3}
 800d3f8:	e7f7      	b.n	800d3ea <__copybits+0x32>

0800d3fa <__any_on>:
 800d3fa:	0002      	movs	r2, r0
 800d3fc:	6900      	ldr	r0, [r0, #16]
 800d3fe:	b510      	push	{r4, lr}
 800d400:	3214      	adds	r2, #20
 800d402:	114b      	asrs	r3, r1, #5
 800d404:	4298      	cmp	r0, r3
 800d406:	db13      	blt.n	800d430 <__any_on+0x36>
 800d408:	dd0c      	ble.n	800d424 <__any_on+0x2a>
 800d40a:	241f      	movs	r4, #31
 800d40c:	0008      	movs	r0, r1
 800d40e:	4020      	ands	r0, r4
 800d410:	4221      	tst	r1, r4
 800d412:	d007      	beq.n	800d424 <__any_on+0x2a>
 800d414:	0099      	lsls	r1, r3, #2
 800d416:	588c      	ldr	r4, [r1, r2]
 800d418:	0021      	movs	r1, r4
 800d41a:	40c1      	lsrs	r1, r0
 800d41c:	4081      	lsls	r1, r0
 800d41e:	2001      	movs	r0, #1
 800d420:	428c      	cmp	r4, r1
 800d422:	d104      	bne.n	800d42e <__any_on+0x34>
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	18d3      	adds	r3, r2, r3
 800d428:	4293      	cmp	r3, r2
 800d42a:	d803      	bhi.n	800d434 <__any_on+0x3a>
 800d42c:	2000      	movs	r0, #0
 800d42e:	bd10      	pop	{r4, pc}
 800d430:	0003      	movs	r3, r0
 800d432:	e7f7      	b.n	800d424 <__any_on+0x2a>
 800d434:	3b04      	subs	r3, #4
 800d436:	6819      	ldr	r1, [r3, #0]
 800d438:	2900      	cmp	r1, #0
 800d43a:	d0f5      	beq.n	800d428 <__any_on+0x2e>
 800d43c:	2001      	movs	r0, #1
 800d43e:	e7f6      	b.n	800d42e <__any_on+0x34>

0800d440 <_strtol_l.constprop.0>:
 800d440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d442:	b085      	sub	sp, #20
 800d444:	0017      	movs	r7, r2
 800d446:	001e      	movs	r6, r3
 800d448:	9003      	str	r0, [sp, #12]
 800d44a:	9101      	str	r1, [sp, #4]
 800d44c:	2b24      	cmp	r3, #36	@ 0x24
 800d44e:	d844      	bhi.n	800d4da <_strtol_l.constprop.0+0x9a>
 800d450:	000c      	movs	r4, r1
 800d452:	2b01      	cmp	r3, #1
 800d454:	d041      	beq.n	800d4da <_strtol_l.constprop.0+0x9a>
 800d456:	4b3d      	ldr	r3, [pc, #244]	@ (800d54c <_strtol_l.constprop.0+0x10c>)
 800d458:	2208      	movs	r2, #8
 800d45a:	469c      	mov	ip, r3
 800d45c:	0023      	movs	r3, r4
 800d45e:	4661      	mov	r1, ip
 800d460:	781d      	ldrb	r5, [r3, #0]
 800d462:	3401      	adds	r4, #1
 800d464:	5d48      	ldrb	r0, [r1, r5]
 800d466:	0001      	movs	r1, r0
 800d468:	4011      	ands	r1, r2
 800d46a:	4210      	tst	r0, r2
 800d46c:	d1f6      	bne.n	800d45c <_strtol_l.constprop.0+0x1c>
 800d46e:	2d2d      	cmp	r5, #45	@ 0x2d
 800d470:	d13a      	bne.n	800d4e8 <_strtol_l.constprop.0+0xa8>
 800d472:	7825      	ldrb	r5, [r4, #0]
 800d474:	1c9c      	adds	r4, r3, #2
 800d476:	2301      	movs	r3, #1
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	2210      	movs	r2, #16
 800d47c:	0033      	movs	r3, r6
 800d47e:	4393      	bics	r3, r2
 800d480:	d109      	bne.n	800d496 <_strtol_l.constprop.0+0x56>
 800d482:	2d30      	cmp	r5, #48	@ 0x30
 800d484:	d136      	bne.n	800d4f4 <_strtol_l.constprop.0+0xb4>
 800d486:	2120      	movs	r1, #32
 800d488:	7823      	ldrb	r3, [r4, #0]
 800d48a:	438b      	bics	r3, r1
 800d48c:	2b58      	cmp	r3, #88	@ 0x58
 800d48e:	d131      	bne.n	800d4f4 <_strtol_l.constprop.0+0xb4>
 800d490:	0016      	movs	r6, r2
 800d492:	7865      	ldrb	r5, [r4, #1]
 800d494:	3402      	adds	r4, #2
 800d496:	4a2e      	ldr	r2, [pc, #184]	@ (800d550 <_strtol_l.constprop.0+0x110>)
 800d498:	9b00      	ldr	r3, [sp, #0]
 800d49a:	4694      	mov	ip, r2
 800d49c:	4463      	add	r3, ip
 800d49e:	0031      	movs	r1, r6
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	9302      	str	r3, [sp, #8]
 800d4a4:	f7f2 fedc 	bl	8000260 <__aeabi_uidivmod>
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	4684      	mov	ip, r0
 800d4ac:	0010      	movs	r0, r2
 800d4ae:	002b      	movs	r3, r5
 800d4b0:	3b30      	subs	r3, #48	@ 0x30
 800d4b2:	2b09      	cmp	r3, #9
 800d4b4:	d825      	bhi.n	800d502 <_strtol_l.constprop.0+0xc2>
 800d4b6:	001d      	movs	r5, r3
 800d4b8:	42ae      	cmp	r6, r5
 800d4ba:	dd31      	ble.n	800d520 <_strtol_l.constprop.0+0xe0>
 800d4bc:	1c53      	adds	r3, r2, #1
 800d4be:	d009      	beq.n	800d4d4 <_strtol_l.constprop.0+0x94>
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	4252      	negs	r2, r2
 800d4c4:	4584      	cmp	ip, r0
 800d4c6:	d305      	bcc.n	800d4d4 <_strtol_l.constprop.0+0x94>
 800d4c8:	d101      	bne.n	800d4ce <_strtol_l.constprop.0+0x8e>
 800d4ca:	42a9      	cmp	r1, r5
 800d4cc:	db25      	blt.n	800d51a <_strtol_l.constprop.0+0xda>
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4370      	muls	r0, r6
 800d4d2:	1828      	adds	r0, r5, r0
 800d4d4:	7825      	ldrb	r5, [r4, #0]
 800d4d6:	3401      	adds	r4, #1
 800d4d8:	e7e9      	b.n	800d4ae <_strtol_l.constprop.0+0x6e>
 800d4da:	f7fd ffa7 	bl	800b42c <__errno>
 800d4de:	2316      	movs	r3, #22
 800d4e0:	6003      	str	r3, [r0, #0]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	b005      	add	sp, #20
 800d4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4e8:	9100      	str	r1, [sp, #0]
 800d4ea:	2d2b      	cmp	r5, #43	@ 0x2b
 800d4ec:	d1c5      	bne.n	800d47a <_strtol_l.constprop.0+0x3a>
 800d4ee:	7825      	ldrb	r5, [r4, #0]
 800d4f0:	1c9c      	adds	r4, r3, #2
 800d4f2:	e7c2      	b.n	800d47a <_strtol_l.constprop.0+0x3a>
 800d4f4:	2e00      	cmp	r6, #0
 800d4f6:	d1ce      	bne.n	800d496 <_strtol_l.constprop.0+0x56>
 800d4f8:	3608      	adds	r6, #8
 800d4fa:	2d30      	cmp	r5, #48	@ 0x30
 800d4fc:	d0cb      	beq.n	800d496 <_strtol_l.constprop.0+0x56>
 800d4fe:	3602      	adds	r6, #2
 800d500:	e7c9      	b.n	800d496 <_strtol_l.constprop.0+0x56>
 800d502:	002b      	movs	r3, r5
 800d504:	3b41      	subs	r3, #65	@ 0x41
 800d506:	2b19      	cmp	r3, #25
 800d508:	d801      	bhi.n	800d50e <_strtol_l.constprop.0+0xce>
 800d50a:	3d37      	subs	r5, #55	@ 0x37
 800d50c:	e7d4      	b.n	800d4b8 <_strtol_l.constprop.0+0x78>
 800d50e:	002b      	movs	r3, r5
 800d510:	3b61      	subs	r3, #97	@ 0x61
 800d512:	2b19      	cmp	r3, #25
 800d514:	d804      	bhi.n	800d520 <_strtol_l.constprop.0+0xe0>
 800d516:	3d57      	subs	r5, #87	@ 0x57
 800d518:	e7ce      	b.n	800d4b8 <_strtol_l.constprop.0+0x78>
 800d51a:	2201      	movs	r2, #1
 800d51c:	4252      	negs	r2, r2
 800d51e:	e7d9      	b.n	800d4d4 <_strtol_l.constprop.0+0x94>
 800d520:	1c53      	adds	r3, r2, #1
 800d522:	d108      	bne.n	800d536 <_strtol_l.constprop.0+0xf6>
 800d524:	2322      	movs	r3, #34	@ 0x22
 800d526:	9a03      	ldr	r2, [sp, #12]
 800d528:	9802      	ldr	r0, [sp, #8]
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	2f00      	cmp	r7, #0
 800d52e:	d0d9      	beq.n	800d4e4 <_strtol_l.constprop.0+0xa4>
 800d530:	1e63      	subs	r3, r4, #1
 800d532:	9301      	str	r3, [sp, #4]
 800d534:	e007      	b.n	800d546 <_strtol_l.constprop.0+0x106>
 800d536:	9b00      	ldr	r3, [sp, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d000      	beq.n	800d53e <_strtol_l.constprop.0+0xfe>
 800d53c:	4240      	negs	r0, r0
 800d53e:	2f00      	cmp	r7, #0
 800d540:	d0d0      	beq.n	800d4e4 <_strtol_l.constprop.0+0xa4>
 800d542:	2a00      	cmp	r2, #0
 800d544:	d1f4      	bne.n	800d530 <_strtol_l.constprop.0+0xf0>
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	603b      	str	r3, [r7, #0]
 800d54a:	e7cb      	b.n	800d4e4 <_strtol_l.constprop.0+0xa4>
 800d54c:	0800ebb9 	.word	0x0800ebb9
 800d550:	7fffffff 	.word	0x7fffffff

0800d554 <_strtol_r>:
 800d554:	b510      	push	{r4, lr}
 800d556:	f7ff ff73 	bl	800d440 <_strtol_l.constprop.0>
 800d55a:	bd10      	pop	{r4, pc}

0800d55c <__ascii_wctomb>:
 800d55c:	0003      	movs	r3, r0
 800d55e:	1e08      	subs	r0, r1, #0
 800d560:	d005      	beq.n	800d56e <__ascii_wctomb+0x12>
 800d562:	2aff      	cmp	r2, #255	@ 0xff
 800d564:	d904      	bls.n	800d570 <__ascii_wctomb+0x14>
 800d566:	228a      	movs	r2, #138	@ 0x8a
 800d568:	2001      	movs	r0, #1
 800d56a:	601a      	str	r2, [r3, #0]
 800d56c:	4240      	negs	r0, r0
 800d56e:	4770      	bx	lr
 800d570:	2001      	movs	r0, #1
 800d572:	700a      	strb	r2, [r1, #0]
 800d574:	e7fb      	b.n	800d56e <__ascii_wctomb+0x12>
	...

0800d578 <__ssputs_r>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	688e      	ldr	r6, [r1, #8]
 800d57c:	b085      	sub	sp, #20
 800d57e:	001f      	movs	r7, r3
 800d580:	000c      	movs	r4, r1
 800d582:	680b      	ldr	r3, [r1, #0]
 800d584:	9002      	str	r0, [sp, #8]
 800d586:	9203      	str	r2, [sp, #12]
 800d588:	42be      	cmp	r6, r7
 800d58a:	d830      	bhi.n	800d5ee <__ssputs_r+0x76>
 800d58c:	210c      	movs	r1, #12
 800d58e:	5e62      	ldrsh	r2, [r4, r1]
 800d590:	2190      	movs	r1, #144	@ 0x90
 800d592:	00c9      	lsls	r1, r1, #3
 800d594:	420a      	tst	r2, r1
 800d596:	d028      	beq.n	800d5ea <__ssputs_r+0x72>
 800d598:	2003      	movs	r0, #3
 800d59a:	6921      	ldr	r1, [r4, #16]
 800d59c:	1a5b      	subs	r3, r3, r1
 800d59e:	9301      	str	r3, [sp, #4]
 800d5a0:	6963      	ldr	r3, [r4, #20]
 800d5a2:	4343      	muls	r3, r0
 800d5a4:	9801      	ldr	r0, [sp, #4]
 800d5a6:	0fdd      	lsrs	r5, r3, #31
 800d5a8:	18ed      	adds	r5, r5, r3
 800d5aa:	1c7b      	adds	r3, r7, #1
 800d5ac:	181b      	adds	r3, r3, r0
 800d5ae:	106d      	asrs	r5, r5, #1
 800d5b0:	42ab      	cmp	r3, r5
 800d5b2:	d900      	bls.n	800d5b6 <__ssputs_r+0x3e>
 800d5b4:	001d      	movs	r5, r3
 800d5b6:	0552      	lsls	r2, r2, #21
 800d5b8:	d528      	bpl.n	800d60c <__ssputs_r+0x94>
 800d5ba:	0029      	movs	r1, r5
 800d5bc:	9802      	ldr	r0, [sp, #8]
 800d5be:	f7ff f9d3 	bl	800c968 <_malloc_r>
 800d5c2:	1e06      	subs	r6, r0, #0
 800d5c4:	d02c      	beq.n	800d620 <__ssputs_r+0xa8>
 800d5c6:	9a01      	ldr	r2, [sp, #4]
 800d5c8:	6921      	ldr	r1, [r4, #16]
 800d5ca:	f7fd ff67 	bl	800b49c <memcpy>
 800d5ce:	89a2      	ldrh	r2, [r4, #12]
 800d5d0:	4b18      	ldr	r3, [pc, #96]	@ (800d634 <__ssputs_r+0xbc>)
 800d5d2:	401a      	ands	r2, r3
 800d5d4:	2380      	movs	r3, #128	@ 0x80
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	9b01      	ldr	r3, [sp, #4]
 800d5dc:	6126      	str	r6, [r4, #16]
 800d5de:	18f6      	adds	r6, r6, r3
 800d5e0:	6026      	str	r6, [r4, #0]
 800d5e2:	003e      	movs	r6, r7
 800d5e4:	6165      	str	r5, [r4, #20]
 800d5e6:	1aed      	subs	r5, r5, r3
 800d5e8:	60a5      	str	r5, [r4, #8]
 800d5ea:	42be      	cmp	r6, r7
 800d5ec:	d900      	bls.n	800d5f0 <__ssputs_r+0x78>
 800d5ee:	003e      	movs	r6, r7
 800d5f0:	0032      	movs	r2, r6
 800d5f2:	9903      	ldr	r1, [sp, #12]
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	f000 ff13 	bl	800e420 <memmove>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	68a3      	ldr	r3, [r4, #8]
 800d5fe:	1b9b      	subs	r3, r3, r6
 800d600:	60a3      	str	r3, [r4, #8]
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	199b      	adds	r3, r3, r6
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	b005      	add	sp, #20
 800d60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d60c:	002a      	movs	r2, r5
 800d60e:	9802      	ldr	r0, [sp, #8]
 800d610:	f000 ff9b 	bl	800e54a <_realloc_r>
 800d614:	1e06      	subs	r6, r0, #0
 800d616:	d1e0      	bne.n	800d5da <__ssputs_r+0x62>
 800d618:	6921      	ldr	r1, [r4, #16]
 800d61a:	9802      	ldr	r0, [sp, #8]
 800d61c:	f7fe fdd4 	bl	800c1c8 <_free_r>
 800d620:	230c      	movs	r3, #12
 800d622:	2001      	movs	r0, #1
 800d624:	9a02      	ldr	r2, [sp, #8]
 800d626:	4240      	negs	r0, r0
 800d628:	6013      	str	r3, [r2, #0]
 800d62a:	89a2      	ldrh	r2, [r4, #12]
 800d62c:	3334      	adds	r3, #52	@ 0x34
 800d62e:	4313      	orrs	r3, r2
 800d630:	81a3      	strh	r3, [r4, #12]
 800d632:	e7e9      	b.n	800d608 <__ssputs_r+0x90>
 800d634:	fffffb7f 	.word	0xfffffb7f

0800d638 <_svfiprintf_r>:
 800d638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d63a:	b0a1      	sub	sp, #132	@ 0x84
 800d63c:	9003      	str	r0, [sp, #12]
 800d63e:	001d      	movs	r5, r3
 800d640:	898b      	ldrh	r3, [r1, #12]
 800d642:	000f      	movs	r7, r1
 800d644:	0016      	movs	r6, r2
 800d646:	061b      	lsls	r3, r3, #24
 800d648:	d511      	bpl.n	800d66e <_svfiprintf_r+0x36>
 800d64a:	690b      	ldr	r3, [r1, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d10e      	bne.n	800d66e <_svfiprintf_r+0x36>
 800d650:	2140      	movs	r1, #64	@ 0x40
 800d652:	f7ff f989 	bl	800c968 <_malloc_r>
 800d656:	6038      	str	r0, [r7, #0]
 800d658:	6138      	str	r0, [r7, #16]
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d105      	bne.n	800d66a <_svfiprintf_r+0x32>
 800d65e:	230c      	movs	r3, #12
 800d660:	9a03      	ldr	r2, [sp, #12]
 800d662:	6013      	str	r3, [r2, #0]
 800d664:	2001      	movs	r0, #1
 800d666:	4240      	negs	r0, r0
 800d668:	e0cf      	b.n	800d80a <_svfiprintf_r+0x1d2>
 800d66a:	2340      	movs	r3, #64	@ 0x40
 800d66c:	617b      	str	r3, [r7, #20]
 800d66e:	2300      	movs	r3, #0
 800d670:	ac08      	add	r4, sp, #32
 800d672:	6163      	str	r3, [r4, #20]
 800d674:	3320      	adds	r3, #32
 800d676:	7663      	strb	r3, [r4, #25]
 800d678:	3310      	adds	r3, #16
 800d67a:	76a3      	strb	r3, [r4, #26]
 800d67c:	9507      	str	r5, [sp, #28]
 800d67e:	0035      	movs	r5, r6
 800d680:	782b      	ldrb	r3, [r5, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <_svfiprintf_r+0x52>
 800d686:	2b25      	cmp	r3, #37	@ 0x25
 800d688:	d148      	bne.n	800d71c <_svfiprintf_r+0xe4>
 800d68a:	1bab      	subs	r3, r5, r6
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	42b5      	cmp	r5, r6
 800d690:	d00b      	beq.n	800d6aa <_svfiprintf_r+0x72>
 800d692:	0032      	movs	r2, r6
 800d694:	0039      	movs	r1, r7
 800d696:	9803      	ldr	r0, [sp, #12]
 800d698:	f7ff ff6e 	bl	800d578 <__ssputs_r>
 800d69c:	3001      	adds	r0, #1
 800d69e:	d100      	bne.n	800d6a2 <_svfiprintf_r+0x6a>
 800d6a0:	e0ae      	b.n	800d800 <_svfiprintf_r+0x1c8>
 800d6a2:	6963      	ldr	r3, [r4, #20]
 800d6a4:	9a05      	ldr	r2, [sp, #20]
 800d6a6:	189b      	adds	r3, r3, r2
 800d6a8:	6163      	str	r3, [r4, #20]
 800d6aa:	782b      	ldrb	r3, [r5, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d100      	bne.n	800d6b2 <_svfiprintf_r+0x7a>
 800d6b0:	e0a6      	b.n	800d800 <_svfiprintf_r+0x1c8>
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	4252      	negs	r2, r2
 800d6b8:	6062      	str	r2, [r4, #4]
 800d6ba:	a904      	add	r1, sp, #16
 800d6bc:	3254      	adds	r2, #84	@ 0x54
 800d6be:	1852      	adds	r2, r2, r1
 800d6c0:	1c6e      	adds	r6, r5, #1
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	60e3      	str	r3, [r4, #12]
 800d6c6:	60a3      	str	r3, [r4, #8]
 800d6c8:	7013      	strb	r3, [r2, #0]
 800d6ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d6cc:	4b54      	ldr	r3, [pc, #336]	@ (800d820 <_svfiprintf_r+0x1e8>)
 800d6ce:	2205      	movs	r2, #5
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	7831      	ldrb	r1, [r6, #0]
 800d6d4:	9305      	str	r3, [sp, #20]
 800d6d6:	f7fd fed6 	bl	800b486 <memchr>
 800d6da:	1c75      	adds	r5, r6, #1
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d11f      	bne.n	800d720 <_svfiprintf_r+0xe8>
 800d6e0:	6822      	ldr	r2, [r4, #0]
 800d6e2:	06d3      	lsls	r3, r2, #27
 800d6e4:	d504      	bpl.n	800d6f0 <_svfiprintf_r+0xb8>
 800d6e6:	2353      	movs	r3, #83	@ 0x53
 800d6e8:	a904      	add	r1, sp, #16
 800d6ea:	185b      	adds	r3, r3, r1
 800d6ec:	2120      	movs	r1, #32
 800d6ee:	7019      	strb	r1, [r3, #0]
 800d6f0:	0713      	lsls	r3, r2, #28
 800d6f2:	d504      	bpl.n	800d6fe <_svfiprintf_r+0xc6>
 800d6f4:	2353      	movs	r3, #83	@ 0x53
 800d6f6:	a904      	add	r1, sp, #16
 800d6f8:	185b      	adds	r3, r3, r1
 800d6fa:	212b      	movs	r1, #43	@ 0x2b
 800d6fc:	7019      	strb	r1, [r3, #0]
 800d6fe:	7833      	ldrb	r3, [r6, #0]
 800d700:	2b2a      	cmp	r3, #42	@ 0x2a
 800d702:	d016      	beq.n	800d732 <_svfiprintf_r+0xfa>
 800d704:	0035      	movs	r5, r6
 800d706:	2100      	movs	r1, #0
 800d708:	200a      	movs	r0, #10
 800d70a:	68e3      	ldr	r3, [r4, #12]
 800d70c:	782a      	ldrb	r2, [r5, #0]
 800d70e:	1c6e      	adds	r6, r5, #1
 800d710:	3a30      	subs	r2, #48	@ 0x30
 800d712:	2a09      	cmp	r2, #9
 800d714:	d950      	bls.n	800d7b8 <_svfiprintf_r+0x180>
 800d716:	2900      	cmp	r1, #0
 800d718:	d111      	bne.n	800d73e <_svfiprintf_r+0x106>
 800d71a:	e017      	b.n	800d74c <_svfiprintf_r+0x114>
 800d71c:	3501      	adds	r5, #1
 800d71e:	e7af      	b.n	800d680 <_svfiprintf_r+0x48>
 800d720:	9b05      	ldr	r3, [sp, #20]
 800d722:	6822      	ldr	r2, [r4, #0]
 800d724:	1ac0      	subs	r0, r0, r3
 800d726:	2301      	movs	r3, #1
 800d728:	4083      	lsls	r3, r0
 800d72a:	4313      	orrs	r3, r2
 800d72c:	002e      	movs	r6, r5
 800d72e:	6023      	str	r3, [r4, #0]
 800d730:	e7cc      	b.n	800d6cc <_svfiprintf_r+0x94>
 800d732:	9b07      	ldr	r3, [sp, #28]
 800d734:	1d19      	adds	r1, r3, #4
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	9107      	str	r1, [sp, #28]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	db01      	blt.n	800d742 <_svfiprintf_r+0x10a>
 800d73e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d740:	e004      	b.n	800d74c <_svfiprintf_r+0x114>
 800d742:	425b      	negs	r3, r3
 800d744:	60e3      	str	r3, [r4, #12]
 800d746:	2302      	movs	r3, #2
 800d748:	4313      	orrs	r3, r2
 800d74a:	6023      	str	r3, [r4, #0]
 800d74c:	782b      	ldrb	r3, [r5, #0]
 800d74e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d750:	d10c      	bne.n	800d76c <_svfiprintf_r+0x134>
 800d752:	786b      	ldrb	r3, [r5, #1]
 800d754:	2b2a      	cmp	r3, #42	@ 0x2a
 800d756:	d134      	bne.n	800d7c2 <_svfiprintf_r+0x18a>
 800d758:	9b07      	ldr	r3, [sp, #28]
 800d75a:	3502      	adds	r5, #2
 800d75c:	1d1a      	adds	r2, r3, #4
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	9207      	str	r2, [sp, #28]
 800d762:	2b00      	cmp	r3, #0
 800d764:	da01      	bge.n	800d76a <_svfiprintf_r+0x132>
 800d766:	2301      	movs	r3, #1
 800d768:	425b      	negs	r3, r3
 800d76a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d76c:	4e2d      	ldr	r6, [pc, #180]	@ (800d824 <_svfiprintf_r+0x1ec>)
 800d76e:	2203      	movs	r2, #3
 800d770:	0030      	movs	r0, r6
 800d772:	7829      	ldrb	r1, [r5, #0]
 800d774:	f7fd fe87 	bl	800b486 <memchr>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d006      	beq.n	800d78a <_svfiprintf_r+0x152>
 800d77c:	2340      	movs	r3, #64	@ 0x40
 800d77e:	1b80      	subs	r0, r0, r6
 800d780:	4083      	lsls	r3, r0
 800d782:	6822      	ldr	r2, [r4, #0]
 800d784:	3501      	adds	r5, #1
 800d786:	4313      	orrs	r3, r2
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	7829      	ldrb	r1, [r5, #0]
 800d78c:	2206      	movs	r2, #6
 800d78e:	4826      	ldr	r0, [pc, #152]	@ (800d828 <_svfiprintf_r+0x1f0>)
 800d790:	1c6e      	adds	r6, r5, #1
 800d792:	7621      	strb	r1, [r4, #24]
 800d794:	f7fd fe77 	bl	800b486 <memchr>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d038      	beq.n	800d80e <_svfiprintf_r+0x1d6>
 800d79c:	4b23      	ldr	r3, [pc, #140]	@ (800d82c <_svfiprintf_r+0x1f4>)
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d122      	bne.n	800d7e8 <_svfiprintf_r+0x1b0>
 800d7a2:	2207      	movs	r2, #7
 800d7a4:	9b07      	ldr	r3, [sp, #28]
 800d7a6:	3307      	adds	r3, #7
 800d7a8:	4393      	bics	r3, r2
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	9307      	str	r3, [sp, #28]
 800d7ae:	6963      	ldr	r3, [r4, #20]
 800d7b0:	9a04      	ldr	r2, [sp, #16]
 800d7b2:	189b      	adds	r3, r3, r2
 800d7b4:	6163      	str	r3, [r4, #20]
 800d7b6:	e762      	b.n	800d67e <_svfiprintf_r+0x46>
 800d7b8:	4343      	muls	r3, r0
 800d7ba:	0035      	movs	r5, r6
 800d7bc:	2101      	movs	r1, #1
 800d7be:	189b      	adds	r3, r3, r2
 800d7c0:	e7a4      	b.n	800d70c <_svfiprintf_r+0xd4>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	200a      	movs	r0, #10
 800d7c6:	0019      	movs	r1, r3
 800d7c8:	3501      	adds	r5, #1
 800d7ca:	6063      	str	r3, [r4, #4]
 800d7cc:	782a      	ldrb	r2, [r5, #0]
 800d7ce:	1c6e      	adds	r6, r5, #1
 800d7d0:	3a30      	subs	r2, #48	@ 0x30
 800d7d2:	2a09      	cmp	r2, #9
 800d7d4:	d903      	bls.n	800d7de <_svfiprintf_r+0x1a6>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0c8      	beq.n	800d76c <_svfiprintf_r+0x134>
 800d7da:	9109      	str	r1, [sp, #36]	@ 0x24
 800d7dc:	e7c6      	b.n	800d76c <_svfiprintf_r+0x134>
 800d7de:	4341      	muls	r1, r0
 800d7e0:	0035      	movs	r5, r6
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	1889      	adds	r1, r1, r2
 800d7e6:	e7f1      	b.n	800d7cc <_svfiprintf_r+0x194>
 800d7e8:	aa07      	add	r2, sp, #28
 800d7ea:	9200      	str	r2, [sp, #0]
 800d7ec:	0021      	movs	r1, r4
 800d7ee:	003a      	movs	r2, r7
 800d7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d830 <_svfiprintf_r+0x1f8>)
 800d7f2:	9803      	ldr	r0, [sp, #12]
 800d7f4:	f7fc fd7a 	bl	800a2ec <_printf_float>
 800d7f8:	9004      	str	r0, [sp, #16]
 800d7fa:	9b04      	ldr	r3, [sp, #16]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	d1d6      	bne.n	800d7ae <_svfiprintf_r+0x176>
 800d800:	89bb      	ldrh	r3, [r7, #12]
 800d802:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d804:	065b      	lsls	r3, r3, #25
 800d806:	d500      	bpl.n	800d80a <_svfiprintf_r+0x1d2>
 800d808:	e72c      	b.n	800d664 <_svfiprintf_r+0x2c>
 800d80a:	b021      	add	sp, #132	@ 0x84
 800d80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d80e:	aa07      	add	r2, sp, #28
 800d810:	9200      	str	r2, [sp, #0]
 800d812:	0021      	movs	r1, r4
 800d814:	003a      	movs	r2, r7
 800d816:	4b06      	ldr	r3, [pc, #24]	@ (800d830 <_svfiprintf_r+0x1f8>)
 800d818:	9803      	ldr	r0, [sp, #12]
 800d81a:	f7fd f815 	bl	800a848 <_printf_i>
 800d81e:	e7eb      	b.n	800d7f8 <_svfiprintf_r+0x1c0>
 800d820:	0800ecb9 	.word	0x0800ecb9
 800d824:	0800ecbf 	.word	0x0800ecbf
 800d828:	0800ecc3 	.word	0x0800ecc3
 800d82c:	0800a2ed 	.word	0x0800a2ed
 800d830:	0800d579 	.word	0x0800d579

0800d834 <_sungetc_r>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	0014      	movs	r4, r2
 800d838:	1c4b      	adds	r3, r1, #1
 800d83a:	d103      	bne.n	800d844 <_sungetc_r+0x10>
 800d83c:	2501      	movs	r5, #1
 800d83e:	426d      	negs	r5, r5
 800d840:	0028      	movs	r0, r5
 800d842:	bd70      	pop	{r4, r5, r6, pc}
 800d844:	8993      	ldrh	r3, [r2, #12]
 800d846:	2220      	movs	r2, #32
 800d848:	4393      	bics	r3, r2
 800d84a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d84c:	81a3      	strh	r3, [r4, #12]
 800d84e:	b2ce      	uxtb	r6, r1
 800d850:	6863      	ldr	r3, [r4, #4]
 800d852:	b2cd      	uxtb	r5, r1
 800d854:	2a00      	cmp	r2, #0
 800d856:	d010      	beq.n	800d87a <_sungetc_r+0x46>
 800d858:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d85a:	429a      	cmp	r2, r3
 800d85c:	dd07      	ble.n	800d86e <_sungetc_r+0x3a>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	6023      	str	r3, [r4, #0]
 800d864:	701e      	strb	r6, [r3, #0]
 800d866:	6863      	ldr	r3, [r4, #4]
 800d868:	3301      	adds	r3, #1
 800d86a:	6063      	str	r3, [r4, #4]
 800d86c:	e7e8      	b.n	800d840 <_sungetc_r+0xc>
 800d86e:	0021      	movs	r1, r4
 800d870:	f000 fd98 	bl	800e3a4 <__submore>
 800d874:	2800      	cmp	r0, #0
 800d876:	d0f2      	beq.n	800d85e <_sungetc_r+0x2a>
 800d878:	e7e0      	b.n	800d83c <_sungetc_r+0x8>
 800d87a:	6921      	ldr	r1, [r4, #16]
 800d87c:	6822      	ldr	r2, [r4, #0]
 800d87e:	2900      	cmp	r1, #0
 800d880:	d007      	beq.n	800d892 <_sungetc_r+0x5e>
 800d882:	4291      	cmp	r1, r2
 800d884:	d205      	bcs.n	800d892 <_sungetc_r+0x5e>
 800d886:	1e51      	subs	r1, r2, #1
 800d888:	7808      	ldrb	r0, [r1, #0]
 800d88a:	42a8      	cmp	r0, r5
 800d88c:	d101      	bne.n	800d892 <_sungetc_r+0x5e>
 800d88e:	6021      	str	r1, [r4, #0]
 800d890:	e7ea      	b.n	800d868 <_sungetc_r+0x34>
 800d892:	6423      	str	r3, [r4, #64]	@ 0x40
 800d894:	0023      	movs	r3, r4
 800d896:	3344      	adds	r3, #68	@ 0x44
 800d898:	6363      	str	r3, [r4, #52]	@ 0x34
 800d89a:	2303      	movs	r3, #3
 800d89c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d89e:	0023      	movs	r3, r4
 800d8a0:	3346      	adds	r3, #70	@ 0x46
 800d8a2:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800d8a4:	701e      	strb	r6, [r3, #0]
 800d8a6:	6023      	str	r3, [r4, #0]
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e7de      	b.n	800d86a <_sungetc_r+0x36>

0800d8ac <__ssrefill_r>:
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	000c      	movs	r4, r1
 800d8b0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d8b2:	2900      	cmp	r1, #0
 800d8b4:	d00e      	beq.n	800d8d4 <__ssrefill_r+0x28>
 800d8b6:	0023      	movs	r3, r4
 800d8b8:	3344      	adds	r3, #68	@ 0x44
 800d8ba:	4299      	cmp	r1, r3
 800d8bc:	d001      	beq.n	800d8c2 <__ssrefill_r+0x16>
 800d8be:	f7fe fc83 	bl	800c1c8 <_free_r>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8c6:	6360      	str	r0, [r4, #52]	@ 0x34
 800d8c8:	6063      	str	r3, [r4, #4]
 800d8ca:	4283      	cmp	r3, r0
 800d8cc:	d002      	beq.n	800d8d4 <__ssrefill_r+0x28>
 800d8ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	bd10      	pop	{r4, pc}
 800d8d4:	6923      	ldr	r3, [r4, #16]
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	6023      	str	r3, [r4, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	89a2      	ldrh	r2, [r4, #12]
 800d8de:	6063      	str	r3, [r4, #4]
 800d8e0:	3320      	adds	r3, #32
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	4240      	negs	r0, r0
 800d8e8:	e7f3      	b.n	800d8d2 <__ssrefill_r+0x26>
	...

0800d8ec <__ssvfiscanf_r>:
 800d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ee:	4caa      	ldr	r4, [pc, #680]	@ (800db98 <__ssvfiscanf_r+0x2ac>)
 800d8f0:	44a5      	add	sp, r4
 800d8f2:	000c      	movs	r4, r1
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	9001      	str	r0, [sp, #4]
 800d8f8:	20be      	movs	r0, #190	@ 0xbe
 800d8fa:	9146      	str	r1, [sp, #280]	@ 0x118
 800d8fc:	9147      	str	r1, [sp, #284]	@ 0x11c
 800d8fe:	a903      	add	r1, sp, #12
 800d900:	9148      	str	r1, [sp, #288]	@ 0x120
 800d902:	49a6      	ldr	r1, [pc, #664]	@ (800db9c <__ssvfiscanf_r+0x2b0>)
 800d904:	0040      	lsls	r0, r0, #1
 800d906:	ad43      	add	r5, sp, #268	@ 0x10c
 800d908:	5029      	str	r1, [r5, r0]
 800d90a:	49a5      	ldr	r1, [pc, #660]	@ (800dba0 <__ssvfiscanf_r+0x2b4>)
 800d90c:	3004      	adds	r0, #4
 800d90e:	ad43      	add	r5, sp, #268	@ 0x10c
 800d910:	5029      	str	r1, [r5, r0]
 800d912:	9302      	str	r3, [sp, #8]
 800d914:	7813      	ldrb	r3, [r2, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d100      	bne.n	800d91c <__ssvfiscanf_r+0x30>
 800d91a:	e13a      	b.n	800db92 <__ssvfiscanf_r+0x2a6>
 800d91c:	2108      	movs	r1, #8
 800d91e:	2708      	movs	r7, #8
 800d920:	4ea0      	ldr	r6, [pc, #640]	@ (800dba4 <__ssvfiscanf_r+0x2b8>)
 800d922:	1c55      	adds	r5, r2, #1
 800d924:	5cf0      	ldrb	r0, [r6, r3]
 800d926:	4001      	ands	r1, r0
 800d928:	4238      	tst	r0, r7
 800d92a:	d01c      	beq.n	800d966 <__ssvfiscanf_r+0x7a>
 800d92c:	6863      	ldr	r3, [r4, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	dd0f      	ble.n	800d952 <__ssvfiscanf_r+0x66>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	781a      	ldrb	r2, [r3, #0]
 800d936:	5cb2      	ldrb	r2, [r6, r2]
 800d938:	423a      	tst	r2, r7
 800d93a:	d101      	bne.n	800d940 <__ssvfiscanf_r+0x54>
 800d93c:	002a      	movs	r2, r5
 800d93e:	e7e9      	b.n	800d914 <__ssvfiscanf_r+0x28>
 800d940:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800d942:	3301      	adds	r3, #1
 800d944:	3201      	adds	r2, #1
 800d946:	9247      	str	r2, [sp, #284]	@ 0x11c
 800d948:	6862      	ldr	r2, [r4, #4]
 800d94a:	6023      	str	r3, [r4, #0]
 800d94c:	3a01      	subs	r2, #1
 800d94e:	6062      	str	r2, [r4, #4]
 800d950:	e7ec      	b.n	800d92c <__ssvfiscanf_r+0x40>
 800d952:	22c0      	movs	r2, #192	@ 0xc0
 800d954:	ab43      	add	r3, sp, #268	@ 0x10c
 800d956:	0052      	lsls	r2, r2, #1
 800d958:	0021      	movs	r1, r4
 800d95a:	589b      	ldr	r3, [r3, r2]
 800d95c:	9801      	ldr	r0, [sp, #4]
 800d95e:	4798      	blx	r3
 800d960:	2800      	cmp	r0, #0
 800d962:	d0e6      	beq.n	800d932 <__ssvfiscanf_r+0x46>
 800d964:	e7ea      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800d966:	001e      	movs	r6, r3
 800d968:	2b25      	cmp	r3, #37	@ 0x25
 800d96a:	d160      	bne.n	800da2e <__ssvfiscanf_r+0x142>
 800d96c:	9145      	str	r1, [sp, #276]	@ 0x114
 800d96e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d970:	7853      	ldrb	r3, [r2, #1]
 800d972:	2b2a      	cmp	r3, #42	@ 0x2a
 800d974:	d102      	bne.n	800d97c <__ssvfiscanf_r+0x90>
 800d976:	3b1a      	subs	r3, #26
 800d978:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d97a:	1c95      	adds	r5, r2, #2
 800d97c:	002e      	movs	r6, r5
 800d97e:	220a      	movs	r2, #10
 800d980:	7831      	ldrb	r1, [r6, #0]
 800d982:	1c75      	adds	r5, r6, #1
 800d984:	000b      	movs	r3, r1
 800d986:	3b30      	subs	r3, #48	@ 0x30
 800d988:	2b09      	cmp	r3, #9
 800d98a:	d91d      	bls.n	800d9c8 <__ssvfiscanf_r+0xdc>
 800d98c:	4f86      	ldr	r7, [pc, #536]	@ (800dba8 <__ssvfiscanf_r+0x2bc>)
 800d98e:	2203      	movs	r2, #3
 800d990:	0038      	movs	r0, r7
 800d992:	f7fd fd78 	bl	800b486 <memchr>
 800d996:	2800      	cmp	r0, #0
 800d998:	d006      	beq.n	800d9a8 <__ssvfiscanf_r+0xbc>
 800d99a:	2301      	movs	r3, #1
 800d99c:	1bc0      	subs	r0, r0, r7
 800d99e:	4083      	lsls	r3, r0
 800d9a0:	002e      	movs	r6, r5
 800d9a2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d9a8:	1c75      	adds	r5, r6, #1
 800d9aa:	7836      	ldrb	r6, [r6, #0]
 800d9ac:	2e78      	cmp	r6, #120	@ 0x78
 800d9ae:	d806      	bhi.n	800d9be <__ssvfiscanf_r+0xd2>
 800d9b0:	2e57      	cmp	r6, #87	@ 0x57
 800d9b2:	d810      	bhi.n	800d9d6 <__ssvfiscanf_r+0xea>
 800d9b4:	2e25      	cmp	r6, #37	@ 0x25
 800d9b6:	d03a      	beq.n	800da2e <__ssvfiscanf_r+0x142>
 800d9b8:	d834      	bhi.n	800da24 <__ssvfiscanf_r+0x138>
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	d055      	beq.n	800da6a <__ssvfiscanf_r+0x17e>
 800d9be:	2303      	movs	r3, #3
 800d9c0:	9349      	str	r3, [sp, #292]	@ 0x124
 800d9c2:	3307      	adds	r3, #7
 800d9c4:	9344      	str	r3, [sp, #272]	@ 0x110
 800d9c6:	e069      	b.n	800da9c <__ssvfiscanf_r+0x1b0>
 800d9c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d9ca:	002e      	movs	r6, r5
 800d9cc:	4353      	muls	r3, r2
 800d9ce:	3b30      	subs	r3, #48	@ 0x30
 800d9d0:	185b      	adds	r3, r3, r1
 800d9d2:	9345      	str	r3, [sp, #276]	@ 0x114
 800d9d4:	e7d4      	b.n	800d980 <__ssvfiscanf_r+0x94>
 800d9d6:	0030      	movs	r0, r6
 800d9d8:	3858      	subs	r0, #88	@ 0x58
 800d9da:	2820      	cmp	r0, #32
 800d9dc:	d8ef      	bhi.n	800d9be <__ssvfiscanf_r+0xd2>
 800d9de:	f7f2 fbaf 	bl	8000140 <__gnu_thumb1_case_shi>
 800d9e2:	004b      	.short	0x004b
 800d9e4:	ffeeffee 	.word	0xffeeffee
 800d9e8:	ffee007d 	.word	0xffee007d
 800d9ec:	ffeeffee 	.word	0xffeeffee
 800d9f0:	ffeeffee 	.word	0xffeeffee
 800d9f4:	ffeeffee 	.word	0xffeeffee
 800d9f8:	007b0088 	.word	0x007b0088
 800d9fc:	00240024 	.word	0x00240024
 800da00:	ffee0024 	.word	0xffee0024
 800da04:	ffee0055 	.word	0xffee0055
 800da08:	ffeeffee 	.word	0xffeeffee
 800da0c:	0090ffee 	.word	0x0090ffee
 800da10:	00470059 	.word	0x00470059
 800da14:	ffeeffee 	.word	0xffeeffee
 800da18:	ffee008e 	.word	0xffee008e
 800da1c:	ffee007b 	.word	0xffee007b
 800da20:	004bffee 	.word	0x004bffee
 800da24:	3e45      	subs	r6, #69	@ 0x45
 800da26:	2e02      	cmp	r6, #2
 800da28:	d8c9      	bhi.n	800d9be <__ssvfiscanf_r+0xd2>
 800da2a:	2305      	movs	r3, #5
 800da2c:	e035      	b.n	800da9a <__ssvfiscanf_r+0x1ae>
 800da2e:	6863      	ldr	r3, [r4, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	dd0d      	ble.n	800da50 <__ssvfiscanf_r+0x164>
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	42b2      	cmp	r2, r6
 800da3a:	d000      	beq.n	800da3e <__ssvfiscanf_r+0x152>
 800da3c:	e0a9      	b.n	800db92 <__ssvfiscanf_r+0x2a6>
 800da3e:	3301      	adds	r3, #1
 800da40:	6862      	ldr	r2, [r4, #4]
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800da46:	3a01      	subs	r2, #1
 800da48:	3301      	adds	r3, #1
 800da4a:	6062      	str	r2, [r4, #4]
 800da4c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800da4e:	e775      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800da50:	23c0      	movs	r3, #192	@ 0xc0
 800da52:	aa43      	add	r2, sp, #268	@ 0x10c
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	0021      	movs	r1, r4
 800da58:	58d3      	ldr	r3, [r2, r3]
 800da5a:	9801      	ldr	r0, [sp, #4]
 800da5c:	4798      	blx	r3
 800da5e:	2800      	cmp	r0, #0
 800da60:	d0e8      	beq.n	800da34 <__ssvfiscanf_r+0x148>
 800da62:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800da64:	2800      	cmp	r0, #0
 800da66:	d000      	beq.n	800da6a <__ssvfiscanf_r+0x17e>
 800da68:	e08b      	b.n	800db82 <__ssvfiscanf_r+0x296>
 800da6a:	2001      	movs	r0, #1
 800da6c:	4240      	negs	r0, r0
 800da6e:	e08c      	b.n	800db8a <__ssvfiscanf_r+0x29e>
 800da70:	2320      	movs	r3, #32
 800da72:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800da74:	4313      	orrs	r3, r2
 800da76:	9343      	str	r3, [sp, #268]	@ 0x10c
 800da78:	2380      	movs	r3, #128	@ 0x80
 800da7a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4313      	orrs	r3, r2
 800da80:	9343      	str	r3, [sp, #268]	@ 0x10c
 800da82:	2310      	movs	r3, #16
 800da84:	9344      	str	r3, [sp, #272]	@ 0x110
 800da86:	2e6e      	cmp	r6, #110	@ 0x6e
 800da88:	d902      	bls.n	800da90 <__ssvfiscanf_r+0x1a4>
 800da8a:	e005      	b.n	800da98 <__ssvfiscanf_r+0x1ac>
 800da8c:	2300      	movs	r3, #0
 800da8e:	9344      	str	r3, [sp, #272]	@ 0x110
 800da90:	2303      	movs	r3, #3
 800da92:	e002      	b.n	800da9a <__ssvfiscanf_r+0x1ae>
 800da94:	2308      	movs	r3, #8
 800da96:	9344      	str	r3, [sp, #272]	@ 0x110
 800da98:	2304      	movs	r3, #4
 800da9a:	9349      	str	r3, [sp, #292]	@ 0x124
 800da9c:	6863      	ldr	r3, [r4, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	dd3e      	ble.n	800db20 <__ssvfiscanf_r+0x234>
 800daa2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800daa4:	065b      	lsls	r3, r3, #25
 800daa6:	d408      	bmi.n	800daba <__ssvfiscanf_r+0x1ce>
 800daa8:	27c0      	movs	r7, #192	@ 0xc0
 800daaa:	2608      	movs	r6, #8
 800daac:	007f      	lsls	r7, r7, #1
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	493c      	ldr	r1, [pc, #240]	@ (800dba4 <__ssvfiscanf_r+0x2b8>)
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	5c8a      	ldrb	r2, [r1, r2]
 800dab6:	4232      	tst	r2, r6
 800dab8:	d13c      	bne.n	800db34 <__ssvfiscanf_r+0x248>
 800daba:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	dc4c      	bgt.n	800db5a <__ssvfiscanf_r+0x26e>
 800dac0:	0022      	movs	r2, r4
 800dac2:	9801      	ldr	r0, [sp, #4]
 800dac4:	ab02      	add	r3, sp, #8
 800dac6:	a943      	add	r1, sp, #268	@ 0x10c
 800dac8:	f000 f9b6 	bl	800de38 <_scanf_chars>
 800dacc:	2801      	cmp	r0, #1
 800dace:	d060      	beq.n	800db92 <__ssvfiscanf_r+0x2a6>
 800dad0:	2802      	cmp	r0, #2
 800dad2:	d000      	beq.n	800dad6 <__ssvfiscanf_r+0x1ea>
 800dad4:	e732      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800dad6:	e7c4      	b.n	800da62 <__ssvfiscanf_r+0x176>
 800dad8:	230a      	movs	r3, #10
 800dada:	e7d3      	b.n	800da84 <__ssvfiscanf_r+0x198>
 800dadc:	0029      	movs	r1, r5
 800dade:	a803      	add	r0, sp, #12
 800dae0:	f000 fc27 	bl	800e332 <__sccl>
 800dae4:	2340      	movs	r3, #64	@ 0x40
 800dae6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800dae8:	0005      	movs	r5, r0
 800daea:	4313      	orrs	r3, r2
 800daec:	9343      	str	r3, [sp, #268]	@ 0x10c
 800daee:	2301      	movs	r3, #1
 800daf0:	e7d3      	b.n	800da9a <__ssvfiscanf_r+0x1ae>
 800daf2:	2340      	movs	r3, #64	@ 0x40
 800daf4:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800daf6:	4313      	orrs	r3, r2
 800daf8:	9343      	str	r3, [sp, #268]	@ 0x10c
 800dafa:	2300      	movs	r3, #0
 800dafc:	e7cd      	b.n	800da9a <__ssvfiscanf_r+0x1ae>
 800dafe:	2302      	movs	r3, #2
 800db00:	e7cb      	b.n	800da9a <__ssvfiscanf_r+0x1ae>
 800db02:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800db04:	06d3      	lsls	r3, r2, #27
 800db06:	d500      	bpl.n	800db0a <__ssvfiscanf_r+0x21e>
 800db08:	e718      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800db0a:	9b02      	ldr	r3, [sp, #8]
 800db0c:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800db0e:	1d18      	adds	r0, r3, #4
 800db10:	9002      	str	r0, [sp, #8]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	07d6      	lsls	r6, r2, #31
 800db16:	d501      	bpl.n	800db1c <__ssvfiscanf_r+0x230>
 800db18:	8019      	strh	r1, [r3, #0]
 800db1a:	e70f      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800db1c:	6019      	str	r1, [r3, #0]
 800db1e:	e70d      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800db20:	23c0      	movs	r3, #192	@ 0xc0
 800db22:	aa43      	add	r2, sp, #268	@ 0x10c
 800db24:	005b      	lsls	r3, r3, #1
 800db26:	0021      	movs	r1, r4
 800db28:	58d3      	ldr	r3, [r2, r3]
 800db2a:	9801      	ldr	r0, [sp, #4]
 800db2c:	4798      	blx	r3
 800db2e:	2800      	cmp	r0, #0
 800db30:	d0b7      	beq.n	800daa2 <__ssvfiscanf_r+0x1b6>
 800db32:	e796      	b.n	800da62 <__ssvfiscanf_r+0x176>
 800db34:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800db36:	3201      	adds	r2, #1
 800db38:	9247      	str	r2, [sp, #284]	@ 0x11c
 800db3a:	6862      	ldr	r2, [r4, #4]
 800db3c:	3a01      	subs	r2, #1
 800db3e:	6062      	str	r2, [r4, #4]
 800db40:	2a00      	cmp	r2, #0
 800db42:	dd02      	ble.n	800db4a <__ssvfiscanf_r+0x25e>
 800db44:	3301      	adds	r3, #1
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	e7b1      	b.n	800daae <__ssvfiscanf_r+0x1c2>
 800db4a:	ab43      	add	r3, sp, #268	@ 0x10c
 800db4c:	0021      	movs	r1, r4
 800db4e:	59db      	ldr	r3, [r3, r7]
 800db50:	9801      	ldr	r0, [sp, #4]
 800db52:	4798      	blx	r3
 800db54:	2800      	cmp	r0, #0
 800db56:	d0aa      	beq.n	800daae <__ssvfiscanf_r+0x1c2>
 800db58:	e783      	b.n	800da62 <__ssvfiscanf_r+0x176>
 800db5a:	2b04      	cmp	r3, #4
 800db5c:	dc06      	bgt.n	800db6c <__ssvfiscanf_r+0x280>
 800db5e:	0022      	movs	r2, r4
 800db60:	9801      	ldr	r0, [sp, #4]
 800db62:	ab02      	add	r3, sp, #8
 800db64:	a943      	add	r1, sp, #268	@ 0x10c
 800db66:	f000 f9c7 	bl	800def8 <_scanf_i>
 800db6a:	e7af      	b.n	800dacc <__ssvfiscanf_r+0x1e0>
 800db6c:	4b0f      	ldr	r3, [pc, #60]	@ (800dbac <__ssvfiscanf_r+0x2c0>)
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d100      	bne.n	800db74 <__ssvfiscanf_r+0x288>
 800db72:	e6e3      	b.n	800d93c <__ssvfiscanf_r+0x50>
 800db74:	0022      	movs	r2, r4
 800db76:	9801      	ldr	r0, [sp, #4]
 800db78:	ab02      	add	r3, sp, #8
 800db7a:	a943      	add	r1, sp, #268	@ 0x10c
 800db7c:	f7fc ff72 	bl	800aa64 <_scanf_float>
 800db80:	e7a4      	b.n	800dacc <__ssvfiscanf_r+0x1e0>
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	065b      	lsls	r3, r3, #25
 800db86:	d500      	bpl.n	800db8a <__ssvfiscanf_r+0x29e>
 800db88:	e76f      	b.n	800da6a <__ssvfiscanf_r+0x17e>
 800db8a:	23a5      	movs	r3, #165	@ 0xa5
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	449d      	add	sp, r3
 800db90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db92:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800db94:	e7f9      	b.n	800db8a <__ssvfiscanf_r+0x29e>
 800db96:	46c0      	nop			@ (mov r8, r8)
 800db98:	fffffd6c 	.word	0xfffffd6c
 800db9c:	0800d835 	.word	0x0800d835
 800dba0:	0800d8ad 	.word	0x0800d8ad
 800dba4:	0800ebb9 	.word	0x0800ebb9
 800dba8:	0800ecbf 	.word	0x0800ecbf
 800dbac:	0800aa65 	.word	0x0800aa65

0800dbb0 <__sfputc_r>:
 800dbb0:	6893      	ldr	r3, [r2, #8]
 800dbb2:	b510      	push	{r4, lr}
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	6093      	str	r3, [r2, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	da04      	bge.n	800dbc6 <__sfputc_r+0x16>
 800dbbc:	6994      	ldr	r4, [r2, #24]
 800dbbe:	42a3      	cmp	r3, r4
 800dbc0:	db07      	blt.n	800dbd2 <__sfputc_r+0x22>
 800dbc2:	290a      	cmp	r1, #10
 800dbc4:	d005      	beq.n	800dbd2 <__sfputc_r+0x22>
 800dbc6:	6813      	ldr	r3, [r2, #0]
 800dbc8:	1c58      	adds	r0, r3, #1
 800dbca:	6010      	str	r0, [r2, #0]
 800dbcc:	7019      	strb	r1, [r3, #0]
 800dbce:	0008      	movs	r0, r1
 800dbd0:	bd10      	pop	{r4, pc}
 800dbd2:	f7fd fb1f 	bl	800b214 <__swbuf_r>
 800dbd6:	0001      	movs	r1, r0
 800dbd8:	e7f9      	b.n	800dbce <__sfputc_r+0x1e>

0800dbda <__sfputs_r>:
 800dbda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbdc:	0006      	movs	r6, r0
 800dbde:	000f      	movs	r7, r1
 800dbe0:	0014      	movs	r4, r2
 800dbe2:	18d5      	adds	r5, r2, r3
 800dbe4:	42ac      	cmp	r4, r5
 800dbe6:	d101      	bne.n	800dbec <__sfputs_r+0x12>
 800dbe8:	2000      	movs	r0, #0
 800dbea:	e007      	b.n	800dbfc <__sfputs_r+0x22>
 800dbec:	7821      	ldrb	r1, [r4, #0]
 800dbee:	003a      	movs	r2, r7
 800dbf0:	0030      	movs	r0, r6
 800dbf2:	f7ff ffdd 	bl	800dbb0 <__sfputc_r>
 800dbf6:	3401      	adds	r4, #1
 800dbf8:	1c43      	adds	r3, r0, #1
 800dbfa:	d1f3      	bne.n	800dbe4 <__sfputs_r+0xa>
 800dbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc00 <_vfiprintf_r>:
 800dc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc02:	b0a1      	sub	sp, #132	@ 0x84
 800dc04:	000f      	movs	r7, r1
 800dc06:	0015      	movs	r5, r2
 800dc08:	001e      	movs	r6, r3
 800dc0a:	9003      	str	r0, [sp, #12]
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d004      	beq.n	800dc1a <_vfiprintf_r+0x1a>
 800dc10:	6a03      	ldr	r3, [r0, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <_vfiprintf_r+0x1a>
 800dc16:	f7fd f9c3 	bl	800afa0 <__sinit>
 800dc1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc1c:	07db      	lsls	r3, r3, #31
 800dc1e:	d405      	bmi.n	800dc2c <_vfiprintf_r+0x2c>
 800dc20:	89bb      	ldrh	r3, [r7, #12]
 800dc22:	059b      	lsls	r3, r3, #22
 800dc24:	d402      	bmi.n	800dc2c <_vfiprintf_r+0x2c>
 800dc26:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dc28:	f7fd fc2b 	bl	800b482 <__retarget_lock_acquire_recursive>
 800dc2c:	89bb      	ldrh	r3, [r7, #12]
 800dc2e:	071b      	lsls	r3, r3, #28
 800dc30:	d502      	bpl.n	800dc38 <_vfiprintf_r+0x38>
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d113      	bne.n	800dc60 <_vfiprintf_r+0x60>
 800dc38:	0039      	movs	r1, r7
 800dc3a:	9803      	ldr	r0, [sp, #12]
 800dc3c:	f7fd fb2c 	bl	800b298 <__swsetup_r>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d00d      	beq.n	800dc60 <_vfiprintf_r+0x60>
 800dc44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc46:	07db      	lsls	r3, r3, #31
 800dc48:	d503      	bpl.n	800dc52 <_vfiprintf_r+0x52>
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	4240      	negs	r0, r0
 800dc4e:	b021      	add	sp, #132	@ 0x84
 800dc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc52:	89bb      	ldrh	r3, [r7, #12]
 800dc54:	059b      	lsls	r3, r3, #22
 800dc56:	d4f8      	bmi.n	800dc4a <_vfiprintf_r+0x4a>
 800dc58:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dc5a:	f7fd fc13 	bl	800b484 <__retarget_lock_release_recursive>
 800dc5e:	e7f4      	b.n	800dc4a <_vfiprintf_r+0x4a>
 800dc60:	2300      	movs	r3, #0
 800dc62:	ac08      	add	r4, sp, #32
 800dc64:	6163      	str	r3, [r4, #20]
 800dc66:	3320      	adds	r3, #32
 800dc68:	7663      	strb	r3, [r4, #25]
 800dc6a:	3310      	adds	r3, #16
 800dc6c:	76a3      	strb	r3, [r4, #26]
 800dc6e:	9607      	str	r6, [sp, #28]
 800dc70:	002e      	movs	r6, r5
 800dc72:	7833      	ldrb	r3, [r6, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <_vfiprintf_r+0x7c>
 800dc78:	2b25      	cmp	r3, #37	@ 0x25
 800dc7a:	d148      	bne.n	800dd0e <_vfiprintf_r+0x10e>
 800dc7c:	1b73      	subs	r3, r6, r5
 800dc7e:	9305      	str	r3, [sp, #20]
 800dc80:	42ae      	cmp	r6, r5
 800dc82:	d00b      	beq.n	800dc9c <_vfiprintf_r+0x9c>
 800dc84:	002a      	movs	r2, r5
 800dc86:	0039      	movs	r1, r7
 800dc88:	9803      	ldr	r0, [sp, #12]
 800dc8a:	f7ff ffa6 	bl	800dbda <__sfputs_r>
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d100      	bne.n	800dc94 <_vfiprintf_r+0x94>
 800dc92:	e0ae      	b.n	800ddf2 <_vfiprintf_r+0x1f2>
 800dc94:	6963      	ldr	r3, [r4, #20]
 800dc96:	9a05      	ldr	r2, [sp, #20]
 800dc98:	189b      	adds	r3, r3, r2
 800dc9a:	6163      	str	r3, [r4, #20]
 800dc9c:	7833      	ldrb	r3, [r6, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d100      	bne.n	800dca4 <_vfiprintf_r+0xa4>
 800dca2:	e0a6      	b.n	800ddf2 <_vfiprintf_r+0x1f2>
 800dca4:	2201      	movs	r2, #1
 800dca6:	2300      	movs	r3, #0
 800dca8:	4252      	negs	r2, r2
 800dcaa:	6062      	str	r2, [r4, #4]
 800dcac:	a904      	add	r1, sp, #16
 800dcae:	3254      	adds	r2, #84	@ 0x54
 800dcb0:	1852      	adds	r2, r2, r1
 800dcb2:	1c75      	adds	r5, r6, #1
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	60e3      	str	r3, [r4, #12]
 800dcb8:	60a3      	str	r3, [r4, #8]
 800dcba:	7013      	strb	r3, [r2, #0]
 800dcbc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dcbe:	4b59      	ldr	r3, [pc, #356]	@ (800de24 <_vfiprintf_r+0x224>)
 800dcc0:	2205      	movs	r2, #5
 800dcc2:	0018      	movs	r0, r3
 800dcc4:	7829      	ldrb	r1, [r5, #0]
 800dcc6:	9305      	str	r3, [sp, #20]
 800dcc8:	f7fd fbdd 	bl	800b486 <memchr>
 800dccc:	1c6e      	adds	r6, r5, #1
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d11f      	bne.n	800dd12 <_vfiprintf_r+0x112>
 800dcd2:	6822      	ldr	r2, [r4, #0]
 800dcd4:	06d3      	lsls	r3, r2, #27
 800dcd6:	d504      	bpl.n	800dce2 <_vfiprintf_r+0xe2>
 800dcd8:	2353      	movs	r3, #83	@ 0x53
 800dcda:	a904      	add	r1, sp, #16
 800dcdc:	185b      	adds	r3, r3, r1
 800dcde:	2120      	movs	r1, #32
 800dce0:	7019      	strb	r1, [r3, #0]
 800dce2:	0713      	lsls	r3, r2, #28
 800dce4:	d504      	bpl.n	800dcf0 <_vfiprintf_r+0xf0>
 800dce6:	2353      	movs	r3, #83	@ 0x53
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	185b      	adds	r3, r3, r1
 800dcec:	212b      	movs	r1, #43	@ 0x2b
 800dcee:	7019      	strb	r1, [r3, #0]
 800dcf0:	782b      	ldrb	r3, [r5, #0]
 800dcf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcf4:	d016      	beq.n	800dd24 <_vfiprintf_r+0x124>
 800dcf6:	002e      	movs	r6, r5
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	200a      	movs	r0, #10
 800dcfc:	68e3      	ldr	r3, [r4, #12]
 800dcfe:	7832      	ldrb	r2, [r6, #0]
 800dd00:	1c75      	adds	r5, r6, #1
 800dd02:	3a30      	subs	r2, #48	@ 0x30
 800dd04:	2a09      	cmp	r2, #9
 800dd06:	d950      	bls.n	800ddaa <_vfiprintf_r+0x1aa>
 800dd08:	2900      	cmp	r1, #0
 800dd0a:	d111      	bne.n	800dd30 <_vfiprintf_r+0x130>
 800dd0c:	e017      	b.n	800dd3e <_vfiprintf_r+0x13e>
 800dd0e:	3601      	adds	r6, #1
 800dd10:	e7af      	b.n	800dc72 <_vfiprintf_r+0x72>
 800dd12:	9b05      	ldr	r3, [sp, #20]
 800dd14:	6822      	ldr	r2, [r4, #0]
 800dd16:	1ac0      	subs	r0, r0, r3
 800dd18:	2301      	movs	r3, #1
 800dd1a:	4083      	lsls	r3, r0
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	0035      	movs	r5, r6
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	e7cc      	b.n	800dcbe <_vfiprintf_r+0xbe>
 800dd24:	9b07      	ldr	r3, [sp, #28]
 800dd26:	1d19      	adds	r1, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	9107      	str	r1, [sp, #28]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	db01      	blt.n	800dd34 <_vfiprintf_r+0x134>
 800dd30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd32:	e004      	b.n	800dd3e <_vfiprintf_r+0x13e>
 800dd34:	425b      	negs	r3, r3
 800dd36:	60e3      	str	r3, [r4, #12]
 800dd38:	2302      	movs	r3, #2
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	7833      	ldrb	r3, [r6, #0]
 800dd40:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd42:	d10c      	bne.n	800dd5e <_vfiprintf_r+0x15e>
 800dd44:	7873      	ldrb	r3, [r6, #1]
 800dd46:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd48:	d134      	bne.n	800ddb4 <_vfiprintf_r+0x1b4>
 800dd4a:	9b07      	ldr	r3, [sp, #28]
 800dd4c:	3602      	adds	r6, #2
 800dd4e:	1d1a      	adds	r2, r3, #4
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	9207      	str	r2, [sp, #28]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	da01      	bge.n	800dd5c <_vfiprintf_r+0x15c>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	425b      	negs	r3, r3
 800dd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5e:	4d32      	ldr	r5, [pc, #200]	@ (800de28 <_vfiprintf_r+0x228>)
 800dd60:	2203      	movs	r2, #3
 800dd62:	0028      	movs	r0, r5
 800dd64:	7831      	ldrb	r1, [r6, #0]
 800dd66:	f7fd fb8e 	bl	800b486 <memchr>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d006      	beq.n	800dd7c <_vfiprintf_r+0x17c>
 800dd6e:	2340      	movs	r3, #64	@ 0x40
 800dd70:	1b40      	subs	r0, r0, r5
 800dd72:	4083      	lsls	r3, r0
 800dd74:	6822      	ldr	r2, [r4, #0]
 800dd76:	3601      	adds	r6, #1
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	6023      	str	r3, [r4, #0]
 800dd7c:	7831      	ldrb	r1, [r6, #0]
 800dd7e:	2206      	movs	r2, #6
 800dd80:	482a      	ldr	r0, [pc, #168]	@ (800de2c <_vfiprintf_r+0x22c>)
 800dd82:	1c75      	adds	r5, r6, #1
 800dd84:	7621      	strb	r1, [r4, #24]
 800dd86:	f7fd fb7e 	bl	800b486 <memchr>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d040      	beq.n	800de10 <_vfiprintf_r+0x210>
 800dd8e:	4b28      	ldr	r3, [pc, #160]	@ (800de30 <_vfiprintf_r+0x230>)
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d122      	bne.n	800ddda <_vfiprintf_r+0x1da>
 800dd94:	2207      	movs	r2, #7
 800dd96:	9b07      	ldr	r3, [sp, #28]
 800dd98:	3307      	adds	r3, #7
 800dd9a:	4393      	bics	r3, r2
 800dd9c:	3308      	adds	r3, #8
 800dd9e:	9307      	str	r3, [sp, #28]
 800dda0:	6963      	ldr	r3, [r4, #20]
 800dda2:	9a04      	ldr	r2, [sp, #16]
 800dda4:	189b      	adds	r3, r3, r2
 800dda6:	6163      	str	r3, [r4, #20]
 800dda8:	e762      	b.n	800dc70 <_vfiprintf_r+0x70>
 800ddaa:	4343      	muls	r3, r0
 800ddac:	002e      	movs	r6, r5
 800ddae:	2101      	movs	r1, #1
 800ddb0:	189b      	adds	r3, r3, r2
 800ddb2:	e7a4      	b.n	800dcfe <_vfiprintf_r+0xfe>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	200a      	movs	r0, #10
 800ddb8:	0019      	movs	r1, r3
 800ddba:	3601      	adds	r6, #1
 800ddbc:	6063      	str	r3, [r4, #4]
 800ddbe:	7832      	ldrb	r2, [r6, #0]
 800ddc0:	1c75      	adds	r5, r6, #1
 800ddc2:	3a30      	subs	r2, #48	@ 0x30
 800ddc4:	2a09      	cmp	r2, #9
 800ddc6:	d903      	bls.n	800ddd0 <_vfiprintf_r+0x1d0>
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d0c8      	beq.n	800dd5e <_vfiprintf_r+0x15e>
 800ddcc:	9109      	str	r1, [sp, #36]	@ 0x24
 800ddce:	e7c6      	b.n	800dd5e <_vfiprintf_r+0x15e>
 800ddd0:	4341      	muls	r1, r0
 800ddd2:	002e      	movs	r6, r5
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	1889      	adds	r1, r1, r2
 800ddd8:	e7f1      	b.n	800ddbe <_vfiprintf_r+0x1be>
 800ddda:	aa07      	add	r2, sp, #28
 800dddc:	9200      	str	r2, [sp, #0]
 800ddde:	0021      	movs	r1, r4
 800dde0:	003a      	movs	r2, r7
 800dde2:	4b14      	ldr	r3, [pc, #80]	@ (800de34 <_vfiprintf_r+0x234>)
 800dde4:	9803      	ldr	r0, [sp, #12]
 800dde6:	f7fc fa81 	bl	800a2ec <_printf_float>
 800ddea:	9004      	str	r0, [sp, #16]
 800ddec:	9b04      	ldr	r3, [sp, #16]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	d1d6      	bne.n	800dda0 <_vfiprintf_r+0x1a0>
 800ddf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ddf4:	07db      	lsls	r3, r3, #31
 800ddf6:	d405      	bmi.n	800de04 <_vfiprintf_r+0x204>
 800ddf8:	89bb      	ldrh	r3, [r7, #12]
 800ddfa:	059b      	lsls	r3, r3, #22
 800ddfc:	d402      	bmi.n	800de04 <_vfiprintf_r+0x204>
 800ddfe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800de00:	f7fd fb40 	bl	800b484 <__retarget_lock_release_recursive>
 800de04:	89bb      	ldrh	r3, [r7, #12]
 800de06:	065b      	lsls	r3, r3, #25
 800de08:	d500      	bpl.n	800de0c <_vfiprintf_r+0x20c>
 800de0a:	e71e      	b.n	800dc4a <_vfiprintf_r+0x4a>
 800de0c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800de0e:	e71e      	b.n	800dc4e <_vfiprintf_r+0x4e>
 800de10:	aa07      	add	r2, sp, #28
 800de12:	9200      	str	r2, [sp, #0]
 800de14:	0021      	movs	r1, r4
 800de16:	003a      	movs	r2, r7
 800de18:	4b06      	ldr	r3, [pc, #24]	@ (800de34 <_vfiprintf_r+0x234>)
 800de1a:	9803      	ldr	r0, [sp, #12]
 800de1c:	f7fc fd14 	bl	800a848 <_printf_i>
 800de20:	e7e3      	b.n	800ddea <_vfiprintf_r+0x1ea>
 800de22:	46c0      	nop			@ (mov r8, r8)
 800de24:	0800ecb9 	.word	0x0800ecb9
 800de28:	0800ecbf 	.word	0x0800ecbf
 800de2c:	0800ecc3 	.word	0x0800ecc3
 800de30:	0800a2ed 	.word	0x0800a2ed
 800de34:	0800dbdb 	.word	0x0800dbdb

0800de38 <_scanf_chars>:
 800de38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de3a:	0015      	movs	r5, r2
 800de3c:	688a      	ldr	r2, [r1, #8]
 800de3e:	000c      	movs	r4, r1
 800de40:	9001      	str	r0, [sp, #4]
 800de42:	2a00      	cmp	r2, #0
 800de44:	d104      	bne.n	800de50 <_scanf_chars+0x18>
 800de46:	698a      	ldr	r2, [r1, #24]
 800de48:	2a00      	cmp	r2, #0
 800de4a:	d117      	bne.n	800de7c <_scanf_chars+0x44>
 800de4c:	3201      	adds	r2, #1
 800de4e:	60a2      	str	r2, [r4, #8]
 800de50:	6822      	ldr	r2, [r4, #0]
 800de52:	06d2      	lsls	r2, r2, #27
 800de54:	d403      	bmi.n	800de5e <_scanf_chars+0x26>
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	1d11      	adds	r1, r2, #4
 800de5a:	6019      	str	r1, [r3, #0]
 800de5c:	6817      	ldr	r7, [r2, #0]
 800de5e:	2600      	movs	r6, #0
 800de60:	69a0      	ldr	r0, [r4, #24]
 800de62:	2800      	cmp	r0, #0
 800de64:	d016      	beq.n	800de94 <_scanf_chars+0x5c>
 800de66:	2801      	cmp	r0, #1
 800de68:	d10b      	bne.n	800de82 <_scanf_chars+0x4a>
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	6962      	ldr	r2, [r4, #20]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	5cd3      	ldrb	r3, [r2, r3]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10e      	bne.n	800de94 <_scanf_chars+0x5c>
 800de76:	2e00      	cmp	r6, #0
 800de78:	d03b      	beq.n	800def2 <_scanf_chars+0xba>
 800de7a:	e029      	b.n	800ded0 <_scanf_chars+0x98>
 800de7c:	2201      	movs	r2, #1
 800de7e:	4252      	negs	r2, r2
 800de80:	e7e5      	b.n	800de4e <_scanf_chars+0x16>
 800de82:	2802      	cmp	r0, #2
 800de84:	d124      	bne.n	800ded0 <_scanf_chars+0x98>
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	4a1a      	ldr	r2, [pc, #104]	@ (800def4 <_scanf_chars+0xbc>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	5cd3      	ldrb	r3, [r2, r3]
 800de8e:	2208      	movs	r2, #8
 800de90:	4213      	tst	r3, r2
 800de92:	d11d      	bne.n	800ded0 <_scanf_chars+0x98>
 800de94:	2210      	movs	r2, #16
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	3601      	adds	r6, #1
 800de9a:	4213      	tst	r3, r2
 800de9c:	d103      	bne.n	800dea6 <_scanf_chars+0x6e>
 800de9e:	682b      	ldr	r3, [r5, #0]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	703b      	strb	r3, [r7, #0]
 800dea4:	3701      	adds	r7, #1
 800dea6:	682a      	ldr	r2, [r5, #0]
 800dea8:	686b      	ldr	r3, [r5, #4]
 800deaa:	3201      	adds	r2, #1
 800deac:	602a      	str	r2, [r5, #0]
 800deae:	68a2      	ldr	r2, [r4, #8]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	3a01      	subs	r2, #1
 800deb4:	606b      	str	r3, [r5, #4]
 800deb6:	60a2      	str	r2, [r4, #8]
 800deb8:	2a00      	cmp	r2, #0
 800deba:	d009      	beq.n	800ded0 <_scanf_chars+0x98>
 800debc:	2b00      	cmp	r3, #0
 800debe:	dccf      	bgt.n	800de60 <_scanf_chars+0x28>
 800dec0:	23c0      	movs	r3, #192	@ 0xc0
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	0029      	movs	r1, r5
 800dec6:	58e3      	ldr	r3, [r4, r3]
 800dec8:	9801      	ldr	r0, [sp, #4]
 800deca:	4798      	blx	r3
 800decc:	2800      	cmp	r0, #0
 800dece:	d0c7      	beq.n	800de60 <_scanf_chars+0x28>
 800ded0:	6822      	ldr	r2, [r4, #0]
 800ded2:	2310      	movs	r3, #16
 800ded4:	0011      	movs	r1, r2
 800ded6:	4019      	ands	r1, r3
 800ded8:	421a      	tst	r2, r3
 800deda:	d106      	bne.n	800deea <_scanf_chars+0xb2>
 800dedc:	68e3      	ldr	r3, [r4, #12]
 800dede:	3301      	adds	r3, #1
 800dee0:	60e3      	str	r3, [r4, #12]
 800dee2:	69a3      	ldr	r3, [r4, #24]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d000      	beq.n	800deea <_scanf_chars+0xb2>
 800dee8:	7039      	strb	r1, [r7, #0]
 800deea:	2000      	movs	r0, #0
 800deec:	6923      	ldr	r3, [r4, #16]
 800deee:	199b      	adds	r3, r3, r6
 800def0:	6123      	str	r3, [r4, #16]
 800def2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800def4:	0800ebb9 	.word	0x0800ebb9

0800def8 <_scanf_i>:
 800def8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defa:	b08b      	sub	sp, #44	@ 0x2c
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	4b78      	ldr	r3, [pc, #480]	@ (800e0e0 <_scanf_i+0x1e8>)
 800df00:	0016      	movs	r6, r2
 800df02:	9004      	str	r0, [sp, #16]
 800df04:	aa07      	add	r2, sp, #28
 800df06:	cba1      	ldmia	r3!, {r0, r5, r7}
 800df08:	c2a1      	stmia	r2!, {r0, r5, r7}
 800df0a:	4a76      	ldr	r2, [pc, #472]	@ (800e0e4 <_scanf_i+0x1ec>)
 800df0c:	698b      	ldr	r3, [r1, #24]
 800df0e:	000c      	movs	r4, r1
 800df10:	9205      	str	r2, [sp, #20]
 800df12:	2b03      	cmp	r3, #3
 800df14:	d101      	bne.n	800df1a <_scanf_i+0x22>
 800df16:	4b74      	ldr	r3, [pc, #464]	@ (800e0e8 <_scanf_i+0x1f0>)
 800df18:	9305      	str	r3, [sp, #20]
 800df1a:	22ae      	movs	r2, #174	@ 0xae
 800df1c:	2000      	movs	r0, #0
 800df1e:	68a3      	ldr	r3, [r4, #8]
 800df20:	0052      	lsls	r2, r2, #1
 800df22:	1e59      	subs	r1, r3, #1
 800df24:	9003      	str	r0, [sp, #12]
 800df26:	4291      	cmp	r1, r2
 800df28:	d905      	bls.n	800df36 <_scanf_i+0x3e>
 800df2a:	3b5e      	subs	r3, #94	@ 0x5e
 800df2c:	3bff      	subs	r3, #255	@ 0xff
 800df2e:	9303      	str	r3, [sp, #12]
 800df30:	235e      	movs	r3, #94	@ 0x5e
 800df32:	33ff      	adds	r3, #255	@ 0xff
 800df34:	60a3      	str	r3, [r4, #8]
 800df36:	0023      	movs	r3, r4
 800df38:	331c      	adds	r3, #28
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	23d0      	movs	r3, #208	@ 0xd0
 800df3e:	2700      	movs	r7, #0
 800df40:	6822      	ldr	r2, [r4, #0]
 800df42:	011b      	lsls	r3, r3, #4
 800df44:	4313      	orrs	r3, r2
 800df46:	6023      	str	r3, [r4, #0]
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	9302      	str	r3, [sp, #8]
 800df4c:	6833      	ldr	r3, [r6, #0]
 800df4e:	a807      	add	r0, sp, #28
 800df50:	7819      	ldrb	r1, [r3, #0]
 800df52:	00bb      	lsls	r3, r7, #2
 800df54:	2202      	movs	r2, #2
 800df56:	5818      	ldr	r0, [r3, r0]
 800df58:	f7fd fa95 	bl	800b486 <memchr>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d029      	beq.n	800dfb4 <_scanf_i+0xbc>
 800df60:	2f01      	cmp	r7, #1
 800df62:	d15e      	bne.n	800e022 <_scanf_i+0x12a>
 800df64:	6863      	ldr	r3, [r4, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <_scanf_i+0x80>
 800df6a:	3308      	adds	r3, #8
 800df6c:	6822      	ldr	r2, [r4, #0]
 800df6e:	6063      	str	r3, [r4, #4]
 800df70:	33f9      	adds	r3, #249	@ 0xf9
 800df72:	33ff      	adds	r3, #255	@ 0xff
 800df74:	4313      	orrs	r3, r2
 800df76:	6023      	str	r3, [r4, #0]
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	4a5c      	ldr	r2, [pc, #368]	@ (800e0ec <_scanf_i+0x1f4>)
 800df7c:	4013      	ands	r3, r2
 800df7e:	6023      	str	r3, [r4, #0]
 800df80:	68a3      	ldr	r3, [r4, #8]
 800df82:	1e5a      	subs	r2, r3, #1
 800df84:	60a2      	str	r2, [r4, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d014      	beq.n	800dfb4 <_scanf_i+0xbc>
 800df8a:	6833      	ldr	r3, [r6, #0]
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	6032      	str	r2, [r6, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	9a02      	ldr	r2, [sp, #8]
 800df94:	7013      	strb	r3, [r2, #0]
 800df96:	6873      	ldr	r3, [r6, #4]
 800df98:	1c55      	adds	r5, r2, #1
 800df9a:	3b01      	subs	r3, #1
 800df9c:	6073      	str	r3, [r6, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	dc07      	bgt.n	800dfb2 <_scanf_i+0xba>
 800dfa2:	23c0      	movs	r3, #192	@ 0xc0
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	0031      	movs	r1, r6
 800dfa8:	58e3      	ldr	r3, [r4, r3]
 800dfaa:	9804      	ldr	r0, [sp, #16]
 800dfac:	4798      	blx	r3
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d17e      	bne.n	800e0b0 <_scanf_i+0x1b8>
 800dfb2:	9502      	str	r5, [sp, #8]
 800dfb4:	3701      	adds	r7, #1
 800dfb6:	2f03      	cmp	r7, #3
 800dfb8:	d1c8      	bne.n	800df4c <_scanf_i+0x54>
 800dfba:	6863      	ldr	r3, [r4, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <_scanf_i+0xcc>
 800dfc0:	330a      	adds	r3, #10
 800dfc2:	6063      	str	r3, [r4, #4]
 800dfc4:	2700      	movs	r7, #0
 800dfc6:	6863      	ldr	r3, [r4, #4]
 800dfc8:	4949      	ldr	r1, [pc, #292]	@ (800e0f0 <_scanf_i+0x1f8>)
 800dfca:	6960      	ldr	r0, [r4, #20]
 800dfcc:	1ac9      	subs	r1, r1, r3
 800dfce:	f000 f9b0 	bl	800e332 <__sccl>
 800dfd2:	9d02      	ldr	r5, [sp, #8]
 800dfd4:	68a3      	ldr	r3, [r4, #8]
 800dfd6:	6820      	ldr	r0, [r4, #0]
 800dfd8:	9302      	str	r3, [sp, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d03f      	beq.n	800e05e <_scanf_i+0x166>
 800dfde:	6831      	ldr	r1, [r6, #0]
 800dfe0:	6963      	ldr	r3, [r4, #20]
 800dfe2:	780a      	ldrb	r2, [r1, #0]
 800dfe4:	5c9b      	ldrb	r3, [r3, r2]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d039      	beq.n	800e05e <_scanf_i+0x166>
 800dfea:	2a30      	cmp	r2, #48	@ 0x30
 800dfec:	d128      	bne.n	800e040 <_scanf_i+0x148>
 800dfee:	2380      	movs	r3, #128	@ 0x80
 800dff0:	011b      	lsls	r3, r3, #4
 800dff2:	4218      	tst	r0, r3
 800dff4:	d024      	beq.n	800e040 <_scanf_i+0x148>
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	3701      	adds	r7, #1
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d005      	beq.n	800e00a <_scanf_i+0x112>
 800dffe:	001a      	movs	r2, r3
 800e000:	9b02      	ldr	r3, [sp, #8]
 800e002:	3a01      	subs	r2, #1
 800e004:	3301      	adds	r3, #1
 800e006:	9203      	str	r2, [sp, #12]
 800e008:	60a3      	str	r3, [r4, #8]
 800e00a:	6873      	ldr	r3, [r6, #4]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	6073      	str	r3, [r6, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	dd1c      	ble.n	800e04e <_scanf_i+0x156>
 800e014:	6833      	ldr	r3, [r6, #0]
 800e016:	3301      	adds	r3, #1
 800e018:	6033      	str	r3, [r6, #0]
 800e01a:	68a3      	ldr	r3, [r4, #8]
 800e01c:	3b01      	subs	r3, #1
 800e01e:	60a3      	str	r3, [r4, #8]
 800e020:	e7d8      	b.n	800dfd4 <_scanf_i+0xdc>
 800e022:	2f02      	cmp	r7, #2
 800e024:	d1ac      	bne.n	800df80 <_scanf_i+0x88>
 800e026:	23c0      	movs	r3, #192	@ 0xc0
 800e028:	2180      	movs	r1, #128	@ 0x80
 800e02a:	6822      	ldr	r2, [r4, #0]
 800e02c:	00db      	lsls	r3, r3, #3
 800e02e:	4013      	ands	r3, r2
 800e030:	0089      	lsls	r1, r1, #2
 800e032:	428b      	cmp	r3, r1
 800e034:	d1c1      	bne.n	800dfba <_scanf_i+0xc2>
 800e036:	2310      	movs	r3, #16
 800e038:	6063      	str	r3, [r4, #4]
 800e03a:	33f0      	adds	r3, #240	@ 0xf0
 800e03c:	4313      	orrs	r3, r2
 800e03e:	e79e      	b.n	800df7e <_scanf_i+0x86>
 800e040:	4b2c      	ldr	r3, [pc, #176]	@ (800e0f4 <_scanf_i+0x1fc>)
 800e042:	4003      	ands	r3, r0
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	780b      	ldrb	r3, [r1, #0]
 800e048:	702b      	strb	r3, [r5, #0]
 800e04a:	3501      	adds	r5, #1
 800e04c:	e7dd      	b.n	800e00a <_scanf_i+0x112>
 800e04e:	23c0      	movs	r3, #192	@ 0xc0
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	0031      	movs	r1, r6
 800e054:	58e3      	ldr	r3, [r4, r3]
 800e056:	9804      	ldr	r0, [sp, #16]
 800e058:	4798      	blx	r3
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d0dd      	beq.n	800e01a <_scanf_i+0x122>
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	05db      	lsls	r3, r3, #23
 800e062:	d50e      	bpl.n	800e082 <_scanf_i+0x18a>
 800e064:	9b00      	ldr	r3, [sp, #0]
 800e066:	429d      	cmp	r5, r3
 800e068:	d907      	bls.n	800e07a <_scanf_i+0x182>
 800e06a:	23be      	movs	r3, #190	@ 0xbe
 800e06c:	3d01      	subs	r5, #1
 800e06e:	005b      	lsls	r3, r3, #1
 800e070:	0032      	movs	r2, r6
 800e072:	7829      	ldrb	r1, [r5, #0]
 800e074:	58e3      	ldr	r3, [r4, r3]
 800e076:	9804      	ldr	r0, [sp, #16]
 800e078:	4798      	blx	r3
 800e07a:	9b00      	ldr	r3, [sp, #0]
 800e07c:	2001      	movs	r0, #1
 800e07e:	429d      	cmp	r5, r3
 800e080:	d029      	beq.n	800e0d6 <_scanf_i+0x1de>
 800e082:	6821      	ldr	r1, [r4, #0]
 800e084:	2310      	movs	r3, #16
 800e086:	000a      	movs	r2, r1
 800e088:	401a      	ands	r2, r3
 800e08a:	4219      	tst	r1, r3
 800e08c:	d11c      	bne.n	800e0c8 <_scanf_i+0x1d0>
 800e08e:	702a      	strb	r2, [r5, #0]
 800e090:	6863      	ldr	r3, [r4, #4]
 800e092:	9900      	ldr	r1, [sp, #0]
 800e094:	9804      	ldr	r0, [sp, #16]
 800e096:	9e05      	ldr	r6, [sp, #20]
 800e098:	47b0      	blx	r6
 800e09a:	9b01      	ldr	r3, [sp, #4]
 800e09c:	6822      	ldr	r2, [r4, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	0691      	lsls	r1, r2, #26
 800e0a2:	d507      	bpl.n	800e0b4 <_scanf_i+0x1bc>
 800e0a4:	9901      	ldr	r1, [sp, #4]
 800e0a6:	1d1a      	adds	r2, r3, #4
 800e0a8:	600a      	str	r2, [r1, #0]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6018      	str	r0, [r3, #0]
 800e0ae:	e008      	b.n	800e0c2 <_scanf_i+0x1ca>
 800e0b0:	2700      	movs	r7, #0
 800e0b2:	e7d4      	b.n	800e05e <_scanf_i+0x166>
 800e0b4:	1d19      	adds	r1, r3, #4
 800e0b6:	07d6      	lsls	r6, r2, #31
 800e0b8:	d50f      	bpl.n	800e0da <_scanf_i+0x1e2>
 800e0ba:	9a01      	ldr	r2, [sp, #4]
 800e0bc:	6011      	str	r1, [r2, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	8018      	strh	r0, [r3, #0]
 800e0c2:	68e3      	ldr	r3, [r4, #12]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	60e3      	str	r3, [r4, #12]
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	9b00      	ldr	r3, [sp, #0]
 800e0cc:	1aed      	subs	r5, r5, r3
 800e0ce:	6923      	ldr	r3, [r4, #16]
 800e0d0:	19ed      	adds	r5, r5, r7
 800e0d2:	195b      	adds	r3, r3, r5
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	b00b      	add	sp, #44	@ 0x2c
 800e0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0da:	9a01      	ldr	r2, [sp, #4]
 800e0dc:	6011      	str	r1, [r2, #0]
 800e0de:	e7e4      	b.n	800e0aa <_scanf_i+0x1b2>
 800e0e0:	0800e854 	.word	0x0800e854
 800e0e4:	0800e6ad 	.word	0x0800e6ad
 800e0e8:	0800d555 	.word	0x0800d555
 800e0ec:	fffffaff 	.word	0xfffffaff
 800e0f0:	0800ecda 	.word	0x0800ecda
 800e0f4:	fffff6ff 	.word	0xfffff6ff

0800e0f8 <__sflush_r>:
 800e0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0fa:	220c      	movs	r2, #12
 800e0fc:	5e8b      	ldrsh	r3, [r1, r2]
 800e0fe:	0005      	movs	r5, r0
 800e100:	000c      	movs	r4, r1
 800e102:	071a      	lsls	r2, r3, #28
 800e104:	d456      	bmi.n	800e1b4 <__sflush_r+0xbc>
 800e106:	684a      	ldr	r2, [r1, #4]
 800e108:	2a00      	cmp	r2, #0
 800e10a:	dc02      	bgt.n	800e112 <__sflush_r+0x1a>
 800e10c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800e10e:	2a00      	cmp	r2, #0
 800e110:	dd4e      	ble.n	800e1b0 <__sflush_r+0xb8>
 800e112:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e114:	2f00      	cmp	r7, #0
 800e116:	d04b      	beq.n	800e1b0 <__sflush_r+0xb8>
 800e118:	2200      	movs	r2, #0
 800e11a:	2080      	movs	r0, #128	@ 0x80
 800e11c:	682e      	ldr	r6, [r5, #0]
 800e11e:	602a      	str	r2, [r5, #0]
 800e120:	001a      	movs	r2, r3
 800e122:	0140      	lsls	r0, r0, #5
 800e124:	6a21      	ldr	r1, [r4, #32]
 800e126:	4002      	ands	r2, r0
 800e128:	4203      	tst	r3, r0
 800e12a:	d033      	beq.n	800e194 <__sflush_r+0x9c>
 800e12c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e12e:	89a3      	ldrh	r3, [r4, #12]
 800e130:	075b      	lsls	r3, r3, #29
 800e132:	d506      	bpl.n	800e142 <__sflush_r+0x4a>
 800e134:	6863      	ldr	r3, [r4, #4]
 800e136:	1ad2      	subs	r2, r2, r3
 800e138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <__sflush_r+0x4a>
 800e13e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e140:	1ad2      	subs	r2, r2, r3
 800e142:	2300      	movs	r3, #0
 800e144:	0028      	movs	r0, r5
 800e146:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e148:	6a21      	ldr	r1, [r4, #32]
 800e14a:	47b8      	blx	r7
 800e14c:	89a2      	ldrh	r2, [r4, #12]
 800e14e:	1c43      	adds	r3, r0, #1
 800e150:	d106      	bne.n	800e160 <__sflush_r+0x68>
 800e152:	6829      	ldr	r1, [r5, #0]
 800e154:	291d      	cmp	r1, #29
 800e156:	d846      	bhi.n	800e1e6 <__sflush_r+0xee>
 800e158:	4b29      	ldr	r3, [pc, #164]	@ (800e200 <__sflush_r+0x108>)
 800e15a:	410b      	asrs	r3, r1
 800e15c:	07db      	lsls	r3, r3, #31
 800e15e:	d442      	bmi.n	800e1e6 <__sflush_r+0xee>
 800e160:	2300      	movs	r3, #0
 800e162:	6063      	str	r3, [r4, #4]
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	04d2      	lsls	r2, r2, #19
 800e16a:	d505      	bpl.n	800e178 <__sflush_r+0x80>
 800e16c:	1c43      	adds	r3, r0, #1
 800e16e:	d102      	bne.n	800e176 <__sflush_r+0x7e>
 800e170:	682b      	ldr	r3, [r5, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d100      	bne.n	800e178 <__sflush_r+0x80>
 800e176:	6560      	str	r0, [r4, #84]	@ 0x54
 800e178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e17a:	602e      	str	r6, [r5, #0]
 800e17c:	2900      	cmp	r1, #0
 800e17e:	d017      	beq.n	800e1b0 <__sflush_r+0xb8>
 800e180:	0023      	movs	r3, r4
 800e182:	3344      	adds	r3, #68	@ 0x44
 800e184:	4299      	cmp	r1, r3
 800e186:	d002      	beq.n	800e18e <__sflush_r+0x96>
 800e188:	0028      	movs	r0, r5
 800e18a:	f7fe f81d 	bl	800c1c8 <_free_r>
 800e18e:	2300      	movs	r3, #0
 800e190:	6363      	str	r3, [r4, #52]	@ 0x34
 800e192:	e00d      	b.n	800e1b0 <__sflush_r+0xb8>
 800e194:	2301      	movs	r3, #1
 800e196:	0028      	movs	r0, r5
 800e198:	47b8      	blx	r7
 800e19a:	0002      	movs	r2, r0
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d1c6      	bne.n	800e12e <__sflush_r+0x36>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d0c3      	beq.n	800e12e <__sflush_r+0x36>
 800e1a6:	2b1d      	cmp	r3, #29
 800e1a8:	d001      	beq.n	800e1ae <__sflush_r+0xb6>
 800e1aa:	2b16      	cmp	r3, #22
 800e1ac:	d11a      	bne.n	800e1e4 <__sflush_r+0xec>
 800e1ae:	602e      	str	r6, [r5, #0]
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e01e      	b.n	800e1f2 <__sflush_r+0xfa>
 800e1b4:	690e      	ldr	r6, [r1, #16]
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	d0fa      	beq.n	800e1b0 <__sflush_r+0xb8>
 800e1ba:	680f      	ldr	r7, [r1, #0]
 800e1bc:	600e      	str	r6, [r1, #0]
 800e1be:	1bba      	subs	r2, r7, r6
 800e1c0:	9201      	str	r2, [sp, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	079b      	lsls	r3, r3, #30
 800e1c6:	d100      	bne.n	800e1ca <__sflush_r+0xd2>
 800e1c8:	694a      	ldr	r2, [r1, #20]
 800e1ca:	60a2      	str	r2, [r4, #8]
 800e1cc:	9b01      	ldr	r3, [sp, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	ddee      	ble.n	800e1b0 <__sflush_r+0xb8>
 800e1d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e1d4:	0032      	movs	r2, r6
 800e1d6:	001f      	movs	r7, r3
 800e1d8:	0028      	movs	r0, r5
 800e1da:	9b01      	ldr	r3, [sp, #4]
 800e1dc:	6a21      	ldr	r1, [r4, #32]
 800e1de:	47b8      	blx	r7
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	dc07      	bgt.n	800e1f4 <__sflush_r+0xfc>
 800e1e4:	89a2      	ldrh	r2, [r4, #12]
 800e1e6:	2340      	movs	r3, #64	@ 0x40
 800e1e8:	2001      	movs	r0, #1
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	b21b      	sxth	r3, r3
 800e1ee:	81a3      	strh	r3, [r4, #12]
 800e1f0:	4240      	negs	r0, r0
 800e1f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1f4:	9b01      	ldr	r3, [sp, #4]
 800e1f6:	1836      	adds	r6, r6, r0
 800e1f8:	1a1b      	subs	r3, r3, r0
 800e1fa:	9301      	str	r3, [sp, #4]
 800e1fc:	e7e6      	b.n	800e1cc <__sflush_r+0xd4>
 800e1fe:	46c0      	nop			@ (mov r8, r8)
 800e200:	dfbffffe 	.word	0xdfbffffe

0800e204 <_fflush_r>:
 800e204:	690b      	ldr	r3, [r1, #16]
 800e206:	b570      	push	{r4, r5, r6, lr}
 800e208:	0005      	movs	r5, r0
 800e20a:	000c      	movs	r4, r1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d102      	bne.n	800e216 <_fflush_r+0x12>
 800e210:	2500      	movs	r5, #0
 800e212:	0028      	movs	r0, r5
 800e214:	bd70      	pop	{r4, r5, r6, pc}
 800e216:	2800      	cmp	r0, #0
 800e218:	d004      	beq.n	800e224 <_fflush_r+0x20>
 800e21a:	6a03      	ldr	r3, [r0, #32]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d101      	bne.n	800e224 <_fflush_r+0x20>
 800e220:	f7fc febe 	bl	800afa0 <__sinit>
 800e224:	220c      	movs	r2, #12
 800e226:	5ea3      	ldrsh	r3, [r4, r2]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0f1      	beq.n	800e210 <_fflush_r+0xc>
 800e22c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e22e:	07d2      	lsls	r2, r2, #31
 800e230:	d404      	bmi.n	800e23c <_fflush_r+0x38>
 800e232:	059b      	lsls	r3, r3, #22
 800e234:	d402      	bmi.n	800e23c <_fflush_r+0x38>
 800e236:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e238:	f7fd f923 	bl	800b482 <__retarget_lock_acquire_recursive>
 800e23c:	0028      	movs	r0, r5
 800e23e:	0021      	movs	r1, r4
 800e240:	f7ff ff5a 	bl	800e0f8 <__sflush_r>
 800e244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e246:	0005      	movs	r5, r0
 800e248:	07db      	lsls	r3, r3, #31
 800e24a:	d4e2      	bmi.n	800e212 <_fflush_r+0xe>
 800e24c:	89a3      	ldrh	r3, [r4, #12]
 800e24e:	059b      	lsls	r3, r3, #22
 800e250:	d4df      	bmi.n	800e212 <_fflush_r+0xe>
 800e252:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e254:	f7fd f916 	bl	800b484 <__retarget_lock_release_recursive>
 800e258:	e7db      	b.n	800e212 <_fflush_r+0xe>
	...

0800e25c <__swhatbuf_r>:
 800e25c:	b570      	push	{r4, r5, r6, lr}
 800e25e:	000e      	movs	r6, r1
 800e260:	001d      	movs	r5, r3
 800e262:	230e      	movs	r3, #14
 800e264:	5ec9      	ldrsh	r1, [r1, r3]
 800e266:	0014      	movs	r4, r2
 800e268:	b096      	sub	sp, #88	@ 0x58
 800e26a:	2900      	cmp	r1, #0
 800e26c:	da0c      	bge.n	800e288 <__swhatbuf_r+0x2c>
 800e26e:	89b2      	ldrh	r2, [r6, #12]
 800e270:	2380      	movs	r3, #128	@ 0x80
 800e272:	0011      	movs	r1, r2
 800e274:	4019      	ands	r1, r3
 800e276:	421a      	tst	r2, r3
 800e278:	d114      	bne.n	800e2a4 <__swhatbuf_r+0x48>
 800e27a:	2380      	movs	r3, #128	@ 0x80
 800e27c:	00db      	lsls	r3, r3, #3
 800e27e:	2000      	movs	r0, #0
 800e280:	6029      	str	r1, [r5, #0]
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	b016      	add	sp, #88	@ 0x58
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	466a      	mov	r2, sp
 800e28a:	f000 f8dd 	bl	800e448 <_fstat_r>
 800e28e:	2800      	cmp	r0, #0
 800e290:	dbed      	blt.n	800e26e <__swhatbuf_r+0x12>
 800e292:	23f0      	movs	r3, #240	@ 0xf0
 800e294:	9901      	ldr	r1, [sp, #4]
 800e296:	021b      	lsls	r3, r3, #8
 800e298:	4019      	ands	r1, r3
 800e29a:	4b04      	ldr	r3, [pc, #16]	@ (800e2ac <__swhatbuf_r+0x50>)
 800e29c:	18c9      	adds	r1, r1, r3
 800e29e:	424b      	negs	r3, r1
 800e2a0:	4159      	adcs	r1, r3
 800e2a2:	e7ea      	b.n	800e27a <__swhatbuf_r+0x1e>
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	2340      	movs	r3, #64	@ 0x40
 800e2a8:	e7e9      	b.n	800e27e <__swhatbuf_r+0x22>
 800e2aa:	46c0      	nop			@ (mov r8, r8)
 800e2ac:	ffffe000 	.word	0xffffe000

0800e2b0 <__smakebuf_r>:
 800e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2b2:	2602      	movs	r6, #2
 800e2b4:	898b      	ldrh	r3, [r1, #12]
 800e2b6:	0005      	movs	r5, r0
 800e2b8:	000c      	movs	r4, r1
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	4233      	tst	r3, r6
 800e2be:	d007      	beq.n	800e2d0 <__smakebuf_r+0x20>
 800e2c0:	0023      	movs	r3, r4
 800e2c2:	3347      	adds	r3, #71	@ 0x47
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	6123      	str	r3, [r4, #16]
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	6163      	str	r3, [r4, #20]
 800e2cc:	b005      	add	sp, #20
 800e2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2d0:	ab03      	add	r3, sp, #12
 800e2d2:	aa02      	add	r2, sp, #8
 800e2d4:	f7ff ffc2 	bl	800e25c <__swhatbuf_r>
 800e2d8:	9f02      	ldr	r7, [sp, #8]
 800e2da:	9001      	str	r0, [sp, #4]
 800e2dc:	0039      	movs	r1, r7
 800e2de:	0028      	movs	r0, r5
 800e2e0:	f7fe fb42 	bl	800c968 <_malloc_r>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d108      	bne.n	800e2fa <__smakebuf_r+0x4a>
 800e2e8:	220c      	movs	r2, #12
 800e2ea:	5ea3      	ldrsh	r3, [r4, r2]
 800e2ec:	059a      	lsls	r2, r3, #22
 800e2ee:	d4ed      	bmi.n	800e2cc <__smakebuf_r+0x1c>
 800e2f0:	2203      	movs	r2, #3
 800e2f2:	4393      	bics	r3, r2
 800e2f4:	431e      	orrs	r6, r3
 800e2f6:	81a6      	strh	r6, [r4, #12]
 800e2f8:	e7e2      	b.n	800e2c0 <__smakebuf_r+0x10>
 800e2fa:	2380      	movs	r3, #128	@ 0x80
 800e2fc:	89a2      	ldrh	r2, [r4, #12]
 800e2fe:	6020      	str	r0, [r4, #0]
 800e300:	4313      	orrs	r3, r2
 800e302:	81a3      	strh	r3, [r4, #12]
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	6120      	str	r0, [r4, #16]
 800e308:	6167      	str	r7, [r4, #20]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00c      	beq.n	800e328 <__smakebuf_r+0x78>
 800e30e:	0028      	movs	r0, r5
 800e310:	230e      	movs	r3, #14
 800e312:	5ee1      	ldrsh	r1, [r4, r3]
 800e314:	f000 f8aa 	bl	800e46c <_isatty_r>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d005      	beq.n	800e328 <__smakebuf_r+0x78>
 800e31c:	2303      	movs	r3, #3
 800e31e:	89a2      	ldrh	r2, [r4, #12]
 800e320:	439a      	bics	r2, r3
 800e322:	3b02      	subs	r3, #2
 800e324:	4313      	orrs	r3, r2
 800e326:	81a3      	strh	r3, [r4, #12]
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	9a01      	ldr	r2, [sp, #4]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	81a3      	strh	r3, [r4, #12]
 800e330:	e7cc      	b.n	800e2cc <__smakebuf_r+0x1c>

0800e332 <__sccl>:
 800e332:	b570      	push	{r4, r5, r6, lr}
 800e334:	780b      	ldrb	r3, [r1, #0]
 800e336:	0004      	movs	r4, r0
 800e338:	2b5e      	cmp	r3, #94	@ 0x5e
 800e33a:	d018      	beq.n	800e36e <__sccl+0x3c>
 800e33c:	2200      	movs	r2, #0
 800e33e:	1c4d      	adds	r5, r1, #1
 800e340:	0021      	movs	r1, r4
 800e342:	1c60      	adds	r0, r4, #1
 800e344:	30ff      	adds	r0, #255	@ 0xff
 800e346:	700a      	strb	r2, [r1, #0]
 800e348:	3101      	adds	r1, #1
 800e34a:	4281      	cmp	r1, r0
 800e34c:	d1fb      	bne.n	800e346 <__sccl+0x14>
 800e34e:	1e68      	subs	r0, r5, #1
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00b      	beq.n	800e36c <__sccl+0x3a>
 800e354:	2101      	movs	r1, #1
 800e356:	404a      	eors	r2, r1
 800e358:	0028      	movs	r0, r5
 800e35a:	54e2      	strb	r2, [r4, r3]
 800e35c:	7801      	ldrb	r1, [r0, #0]
 800e35e:	1c45      	adds	r5, r0, #1
 800e360:	292d      	cmp	r1, #45	@ 0x2d
 800e362:	d00a      	beq.n	800e37a <__sccl+0x48>
 800e364:	295d      	cmp	r1, #93	@ 0x5d
 800e366:	d01b      	beq.n	800e3a0 <__sccl+0x6e>
 800e368:	2900      	cmp	r1, #0
 800e36a:	d104      	bne.n	800e376 <__sccl+0x44>
 800e36c:	bd70      	pop	{r4, r5, r6, pc}
 800e36e:	2201      	movs	r2, #1
 800e370:	784b      	ldrb	r3, [r1, #1]
 800e372:	1c8d      	adds	r5, r1, #2
 800e374:	e7e4      	b.n	800e340 <__sccl+0xe>
 800e376:	000b      	movs	r3, r1
 800e378:	e7ee      	b.n	800e358 <__sccl+0x26>
 800e37a:	7846      	ldrb	r6, [r0, #1]
 800e37c:	2e5d      	cmp	r6, #93	@ 0x5d
 800e37e:	d0fa      	beq.n	800e376 <__sccl+0x44>
 800e380:	42b3      	cmp	r3, r6
 800e382:	dcf8      	bgt.n	800e376 <__sccl+0x44>
 800e384:	0019      	movs	r1, r3
 800e386:	3002      	adds	r0, #2
 800e388:	3101      	adds	r1, #1
 800e38a:	5462      	strb	r2, [r4, r1]
 800e38c:	428e      	cmp	r6, r1
 800e38e:	dcfb      	bgt.n	800e388 <__sccl+0x56>
 800e390:	2100      	movs	r1, #0
 800e392:	1c5d      	adds	r5, r3, #1
 800e394:	42b3      	cmp	r3, r6
 800e396:	da01      	bge.n	800e39c <__sccl+0x6a>
 800e398:	1af1      	subs	r1, r6, r3
 800e39a:	3901      	subs	r1, #1
 800e39c:	186b      	adds	r3, r5, r1
 800e39e:	e7dd      	b.n	800e35c <__sccl+0x2a>
 800e3a0:	0028      	movs	r0, r5
 800e3a2:	e7e3      	b.n	800e36c <__sccl+0x3a>

0800e3a4 <__submore>:
 800e3a4:	000b      	movs	r3, r1
 800e3a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3a8:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800e3aa:	3344      	adds	r3, #68	@ 0x44
 800e3ac:	000c      	movs	r4, r1
 800e3ae:	429d      	cmp	r5, r3
 800e3b0:	d11c      	bne.n	800e3ec <__submore+0x48>
 800e3b2:	2680      	movs	r6, #128	@ 0x80
 800e3b4:	00f6      	lsls	r6, r6, #3
 800e3b6:	0031      	movs	r1, r6
 800e3b8:	f7fe fad6 	bl	800c968 <_malloc_r>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d102      	bne.n	800e3c6 <__submore+0x22>
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	4240      	negs	r0, r0
 800e3c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e3c6:	0023      	movs	r3, r4
 800e3c8:	6360      	str	r0, [r4, #52]	@ 0x34
 800e3ca:	63a6      	str	r6, [r4, #56]	@ 0x38
 800e3cc:	3346      	adds	r3, #70	@ 0x46
 800e3ce:	781a      	ldrb	r2, [r3, #0]
 800e3d0:	4b10      	ldr	r3, [pc, #64]	@ (800e414 <__submore+0x70>)
 800e3d2:	54c2      	strb	r2, [r0, r3]
 800e3d4:	0023      	movs	r3, r4
 800e3d6:	3345      	adds	r3, #69	@ 0x45
 800e3d8:	781a      	ldrb	r2, [r3, #0]
 800e3da:	4b0f      	ldr	r3, [pc, #60]	@ (800e418 <__submore+0x74>)
 800e3dc:	54c2      	strb	r2, [r0, r3]
 800e3de:	782a      	ldrb	r2, [r5, #0]
 800e3e0:	4b0e      	ldr	r3, [pc, #56]	@ (800e41c <__submore+0x78>)
 800e3e2:	54c2      	strb	r2, [r0, r3]
 800e3e4:	18c0      	adds	r0, r0, r3
 800e3e6:	6020      	str	r0, [r4, #0]
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	e7eb      	b.n	800e3c4 <__submore+0x20>
 800e3ec:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800e3ee:	0029      	movs	r1, r5
 800e3f0:	0073      	lsls	r3, r6, #1
 800e3f2:	001a      	movs	r2, r3
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	f000 f8a8 	bl	800e54a <_realloc_r>
 800e3fa:	1e05      	subs	r5, r0, #0
 800e3fc:	d0e0      	beq.n	800e3c0 <__submore+0x1c>
 800e3fe:	1987      	adds	r7, r0, r6
 800e400:	0001      	movs	r1, r0
 800e402:	0032      	movs	r2, r6
 800e404:	0038      	movs	r0, r7
 800e406:	f7fd f849 	bl	800b49c <memcpy>
 800e40a:	9b01      	ldr	r3, [sp, #4]
 800e40c:	6027      	str	r7, [r4, #0]
 800e40e:	6365      	str	r5, [r4, #52]	@ 0x34
 800e410:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e412:	e7e9      	b.n	800e3e8 <__submore+0x44>
 800e414:	000003ff 	.word	0x000003ff
 800e418:	000003fe 	.word	0x000003fe
 800e41c:	000003fd 	.word	0x000003fd

0800e420 <memmove>:
 800e420:	b510      	push	{r4, lr}
 800e422:	4288      	cmp	r0, r1
 800e424:	d806      	bhi.n	800e434 <memmove+0x14>
 800e426:	2300      	movs	r3, #0
 800e428:	429a      	cmp	r2, r3
 800e42a:	d008      	beq.n	800e43e <memmove+0x1e>
 800e42c:	5ccc      	ldrb	r4, [r1, r3]
 800e42e:	54c4      	strb	r4, [r0, r3]
 800e430:	3301      	adds	r3, #1
 800e432:	e7f9      	b.n	800e428 <memmove+0x8>
 800e434:	188b      	adds	r3, r1, r2
 800e436:	4298      	cmp	r0, r3
 800e438:	d2f5      	bcs.n	800e426 <memmove+0x6>
 800e43a:	3a01      	subs	r2, #1
 800e43c:	d200      	bcs.n	800e440 <memmove+0x20>
 800e43e:	bd10      	pop	{r4, pc}
 800e440:	5c8b      	ldrb	r3, [r1, r2]
 800e442:	5483      	strb	r3, [r0, r2]
 800e444:	e7f9      	b.n	800e43a <memmove+0x1a>
	...

0800e448 <_fstat_r>:
 800e448:	2300      	movs	r3, #0
 800e44a:	b570      	push	{r4, r5, r6, lr}
 800e44c:	4d06      	ldr	r5, [pc, #24]	@ (800e468 <_fstat_r+0x20>)
 800e44e:	0004      	movs	r4, r0
 800e450:	0008      	movs	r0, r1
 800e452:	0011      	movs	r1, r2
 800e454:	602b      	str	r3, [r5, #0]
 800e456:	f7f5 fc9f 	bl	8003d98 <_fstat>
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	d103      	bne.n	800e466 <_fstat_r+0x1e>
 800e45e:	682b      	ldr	r3, [r5, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d000      	beq.n	800e466 <_fstat_r+0x1e>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd70      	pop	{r4, r5, r6, pc}
 800e468:	200007dc 	.word	0x200007dc

0800e46c <_isatty_r>:
 800e46c:	2300      	movs	r3, #0
 800e46e:	b570      	push	{r4, r5, r6, lr}
 800e470:	4d06      	ldr	r5, [pc, #24]	@ (800e48c <_isatty_r+0x20>)
 800e472:	0004      	movs	r4, r0
 800e474:	0008      	movs	r0, r1
 800e476:	602b      	str	r3, [r5, #0]
 800e478:	f7f5 fc9c 	bl	8003db4 <_isatty>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d103      	bne.n	800e488 <_isatty_r+0x1c>
 800e480:	682b      	ldr	r3, [r5, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d000      	beq.n	800e488 <_isatty_r+0x1c>
 800e486:	6023      	str	r3, [r4, #0]
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	46c0      	nop			@ (mov r8, r8)
 800e48c:	200007dc 	.word	0x200007dc

0800e490 <_sbrk_r>:
 800e490:	2300      	movs	r3, #0
 800e492:	b570      	push	{r4, r5, r6, lr}
 800e494:	4d06      	ldr	r5, [pc, #24]	@ (800e4b0 <_sbrk_r+0x20>)
 800e496:	0004      	movs	r4, r0
 800e498:	0008      	movs	r0, r1
 800e49a:	602b      	str	r3, [r5, #0]
 800e49c:	f7f5 fc9e 	bl	8003ddc <_sbrk>
 800e4a0:	1c43      	adds	r3, r0, #1
 800e4a2:	d103      	bne.n	800e4ac <_sbrk_r+0x1c>
 800e4a4:	682b      	ldr	r3, [r5, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d000      	beq.n	800e4ac <_sbrk_r+0x1c>
 800e4aa:	6023      	str	r3, [r4, #0]
 800e4ac:	bd70      	pop	{r4, r5, r6, pc}
 800e4ae:	46c0      	nop			@ (mov r8, r8)
 800e4b0:	200007dc 	.word	0x200007dc

0800e4b4 <__assert_func>:
 800e4b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e4b6:	0014      	movs	r4, r2
 800e4b8:	001a      	movs	r2, r3
 800e4ba:	4b09      	ldr	r3, [pc, #36]	@ (800e4e0 <__assert_func+0x2c>)
 800e4bc:	0005      	movs	r5, r0
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	000e      	movs	r6, r1
 800e4c2:	68d8      	ldr	r0, [r3, #12]
 800e4c4:	4b07      	ldr	r3, [pc, #28]	@ (800e4e4 <__assert_func+0x30>)
 800e4c6:	2c00      	cmp	r4, #0
 800e4c8:	d101      	bne.n	800e4ce <__assert_func+0x1a>
 800e4ca:	4b07      	ldr	r3, [pc, #28]	@ (800e4e8 <__assert_func+0x34>)
 800e4cc:	001c      	movs	r4, r3
 800e4ce:	4907      	ldr	r1, [pc, #28]	@ (800e4ec <__assert_func+0x38>)
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	9402      	str	r4, [sp, #8]
 800e4d4:	002b      	movs	r3, r5
 800e4d6:	9600      	str	r6, [sp, #0]
 800e4d8:	f000 f8ec 	bl	800e6b4 <fiprintf>
 800e4dc:	f000 f8fa 	bl	800e6d4 <abort>
 800e4e0:	200001c4 	.word	0x200001c4
 800e4e4:	0800ece5 	.word	0x0800ece5
 800e4e8:	0800ed20 	.word	0x0800ed20
 800e4ec:	0800ecf2 	.word	0x0800ecf2

0800e4f0 <_calloc_r>:
 800e4f0:	b570      	push	{r4, r5, r6, lr}
 800e4f2:	0c0b      	lsrs	r3, r1, #16
 800e4f4:	0c15      	lsrs	r5, r2, #16
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d11e      	bne.n	800e538 <_calloc_r+0x48>
 800e4fa:	2d00      	cmp	r5, #0
 800e4fc:	d10c      	bne.n	800e518 <_calloc_r+0x28>
 800e4fe:	b289      	uxth	r1, r1
 800e500:	b294      	uxth	r4, r2
 800e502:	434c      	muls	r4, r1
 800e504:	0021      	movs	r1, r4
 800e506:	f7fe fa2f 	bl	800c968 <_malloc_r>
 800e50a:	1e05      	subs	r5, r0, #0
 800e50c:	d01a      	beq.n	800e544 <_calloc_r+0x54>
 800e50e:	0022      	movs	r2, r4
 800e510:	2100      	movs	r1, #0
 800e512:	f7fc ff1f 	bl	800b354 <memset>
 800e516:	e016      	b.n	800e546 <_calloc_r+0x56>
 800e518:	1c2b      	adds	r3, r5, #0
 800e51a:	1c0c      	adds	r4, r1, #0
 800e51c:	b289      	uxth	r1, r1
 800e51e:	b292      	uxth	r2, r2
 800e520:	434a      	muls	r2, r1
 800e522:	b29b      	uxth	r3, r3
 800e524:	b2a1      	uxth	r1, r4
 800e526:	4359      	muls	r1, r3
 800e528:	0c14      	lsrs	r4, r2, #16
 800e52a:	190c      	adds	r4, r1, r4
 800e52c:	0c23      	lsrs	r3, r4, #16
 800e52e:	d107      	bne.n	800e540 <_calloc_r+0x50>
 800e530:	0424      	lsls	r4, r4, #16
 800e532:	b292      	uxth	r2, r2
 800e534:	4314      	orrs	r4, r2
 800e536:	e7e5      	b.n	800e504 <_calloc_r+0x14>
 800e538:	2d00      	cmp	r5, #0
 800e53a:	d101      	bne.n	800e540 <_calloc_r+0x50>
 800e53c:	1c14      	adds	r4, r2, #0
 800e53e:	e7ed      	b.n	800e51c <_calloc_r+0x2c>
 800e540:	230c      	movs	r3, #12
 800e542:	6003      	str	r3, [r0, #0]
 800e544:	2500      	movs	r5, #0
 800e546:	0028      	movs	r0, r5
 800e548:	bd70      	pop	{r4, r5, r6, pc}

0800e54a <_realloc_r>:
 800e54a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e54c:	0006      	movs	r6, r0
 800e54e:	000c      	movs	r4, r1
 800e550:	0015      	movs	r5, r2
 800e552:	2900      	cmp	r1, #0
 800e554:	d105      	bne.n	800e562 <_realloc_r+0x18>
 800e556:	0011      	movs	r1, r2
 800e558:	f7fe fa06 	bl	800c968 <_malloc_r>
 800e55c:	0004      	movs	r4, r0
 800e55e:	0020      	movs	r0, r4
 800e560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e562:	2a00      	cmp	r2, #0
 800e564:	d103      	bne.n	800e56e <_realloc_r+0x24>
 800e566:	f7fd fe2f 	bl	800c1c8 <_free_r>
 800e56a:	2400      	movs	r4, #0
 800e56c:	e7f7      	b.n	800e55e <_realloc_r+0x14>
 800e56e:	f000 f8b8 	bl	800e6e2 <_malloc_usable_size_r>
 800e572:	0007      	movs	r7, r0
 800e574:	4285      	cmp	r5, r0
 800e576:	d802      	bhi.n	800e57e <_realloc_r+0x34>
 800e578:	0843      	lsrs	r3, r0, #1
 800e57a:	42ab      	cmp	r3, r5
 800e57c:	d3ef      	bcc.n	800e55e <_realloc_r+0x14>
 800e57e:	0029      	movs	r1, r5
 800e580:	0030      	movs	r0, r6
 800e582:	f7fe f9f1 	bl	800c968 <_malloc_r>
 800e586:	9001      	str	r0, [sp, #4]
 800e588:	2800      	cmp	r0, #0
 800e58a:	d0ee      	beq.n	800e56a <_realloc_r+0x20>
 800e58c:	002a      	movs	r2, r5
 800e58e:	42bd      	cmp	r5, r7
 800e590:	d900      	bls.n	800e594 <_realloc_r+0x4a>
 800e592:	003a      	movs	r2, r7
 800e594:	0021      	movs	r1, r4
 800e596:	9801      	ldr	r0, [sp, #4]
 800e598:	f7fc ff80 	bl	800b49c <memcpy>
 800e59c:	0021      	movs	r1, r4
 800e59e:	0030      	movs	r0, r6
 800e5a0:	f7fd fe12 	bl	800c1c8 <_free_r>
 800e5a4:	9c01      	ldr	r4, [sp, #4]
 800e5a6:	e7da      	b.n	800e55e <_realloc_r+0x14>

0800e5a8 <_strtoul_l.constprop.0>:
 800e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5aa:	001e      	movs	r6, r3
 800e5ac:	4b3e      	ldr	r3, [pc, #248]	@ (800e6a8 <_strtoul_l.constprop.0+0x100>)
 800e5ae:	0017      	movs	r7, r2
 800e5b0:	000c      	movs	r4, r1
 800e5b2:	469c      	mov	ip, r3
 800e5b4:	2208      	movs	r2, #8
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	9003      	str	r0, [sp, #12]
 800e5ba:	9100      	str	r1, [sp, #0]
 800e5bc:	0023      	movs	r3, r4
 800e5be:	4661      	mov	r1, ip
 800e5c0:	781d      	ldrb	r5, [r3, #0]
 800e5c2:	3401      	adds	r4, #1
 800e5c4:	5d48      	ldrb	r0, [r1, r5]
 800e5c6:	0001      	movs	r1, r0
 800e5c8:	4011      	ands	r1, r2
 800e5ca:	4210      	tst	r0, r2
 800e5cc:	d1f6      	bne.n	800e5bc <_strtoul_l.constprop.0+0x14>
 800e5ce:	2d2d      	cmp	r5, #45	@ 0x2d
 800e5d0:	d137      	bne.n	800e642 <_strtoul_l.constprop.0+0x9a>
 800e5d2:	7825      	ldrb	r5, [r4, #0]
 800e5d4:	1c9c      	adds	r4, r3, #2
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	9302      	str	r3, [sp, #8]
 800e5da:	2210      	movs	r2, #16
 800e5dc:	0033      	movs	r3, r6
 800e5de:	4393      	bics	r3, r2
 800e5e0:	d109      	bne.n	800e5f6 <_strtoul_l.constprop.0+0x4e>
 800e5e2:	2d30      	cmp	r5, #48	@ 0x30
 800e5e4:	d133      	bne.n	800e64e <_strtoul_l.constprop.0+0xa6>
 800e5e6:	2120      	movs	r1, #32
 800e5e8:	7823      	ldrb	r3, [r4, #0]
 800e5ea:	438b      	bics	r3, r1
 800e5ec:	2b58      	cmp	r3, #88	@ 0x58
 800e5ee:	d12e      	bne.n	800e64e <_strtoul_l.constprop.0+0xa6>
 800e5f0:	0016      	movs	r6, r2
 800e5f2:	7865      	ldrb	r5, [r4, #1]
 800e5f4:	3402      	adds	r4, #2
 800e5f6:	2001      	movs	r0, #1
 800e5f8:	0031      	movs	r1, r6
 800e5fa:	4240      	negs	r0, r0
 800e5fc:	f7f1 fdaa 	bl	8000154 <__udivsi3>
 800e600:	9001      	str	r0, [sp, #4]
 800e602:	2001      	movs	r0, #1
 800e604:	0031      	movs	r1, r6
 800e606:	4240      	negs	r0, r0
 800e608:	f7f1 fe2a 	bl	8000260 <__aeabi_uidivmod>
 800e60c:	2300      	movs	r3, #0
 800e60e:	2201      	movs	r2, #1
 800e610:	0018      	movs	r0, r3
 800e612:	4694      	mov	ip, r2
 800e614:	002a      	movs	r2, r5
 800e616:	3a30      	subs	r2, #48	@ 0x30
 800e618:	2a09      	cmp	r2, #9
 800e61a:	d81f      	bhi.n	800e65c <_strtoul_l.constprop.0+0xb4>
 800e61c:	0015      	movs	r5, r2
 800e61e:	42ae      	cmp	r6, r5
 800e620:	dd2b      	ble.n	800e67a <_strtoul_l.constprop.0+0xd2>
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	d00a      	beq.n	800e63c <_strtoul_l.constprop.0+0x94>
 800e626:	2301      	movs	r3, #1
 800e628:	9a01      	ldr	r2, [sp, #4]
 800e62a:	425b      	negs	r3, r3
 800e62c:	4282      	cmp	r2, r0
 800e62e:	d305      	bcc.n	800e63c <_strtoul_l.constprop.0+0x94>
 800e630:	d101      	bne.n	800e636 <_strtoul_l.constprop.0+0x8e>
 800e632:	42a9      	cmp	r1, r5
 800e634:	db1e      	blt.n	800e674 <_strtoul_l.constprop.0+0xcc>
 800e636:	4663      	mov	r3, ip
 800e638:	4370      	muls	r0, r6
 800e63a:	1828      	adds	r0, r5, r0
 800e63c:	7825      	ldrb	r5, [r4, #0]
 800e63e:	3401      	adds	r4, #1
 800e640:	e7e8      	b.n	800e614 <_strtoul_l.constprop.0+0x6c>
 800e642:	9102      	str	r1, [sp, #8]
 800e644:	2d2b      	cmp	r5, #43	@ 0x2b
 800e646:	d1c8      	bne.n	800e5da <_strtoul_l.constprop.0+0x32>
 800e648:	7825      	ldrb	r5, [r4, #0]
 800e64a:	1c9c      	adds	r4, r3, #2
 800e64c:	e7c5      	b.n	800e5da <_strtoul_l.constprop.0+0x32>
 800e64e:	2e00      	cmp	r6, #0
 800e650:	d1d1      	bne.n	800e5f6 <_strtoul_l.constprop.0+0x4e>
 800e652:	3608      	adds	r6, #8
 800e654:	2d30      	cmp	r5, #48	@ 0x30
 800e656:	d0ce      	beq.n	800e5f6 <_strtoul_l.constprop.0+0x4e>
 800e658:	3602      	adds	r6, #2
 800e65a:	e7cc      	b.n	800e5f6 <_strtoul_l.constprop.0+0x4e>
 800e65c:	002a      	movs	r2, r5
 800e65e:	3a41      	subs	r2, #65	@ 0x41
 800e660:	2a19      	cmp	r2, #25
 800e662:	d801      	bhi.n	800e668 <_strtoul_l.constprop.0+0xc0>
 800e664:	3d37      	subs	r5, #55	@ 0x37
 800e666:	e7da      	b.n	800e61e <_strtoul_l.constprop.0+0x76>
 800e668:	002a      	movs	r2, r5
 800e66a:	3a61      	subs	r2, #97	@ 0x61
 800e66c:	2a19      	cmp	r2, #25
 800e66e:	d804      	bhi.n	800e67a <_strtoul_l.constprop.0+0xd2>
 800e670:	3d57      	subs	r5, #87	@ 0x57
 800e672:	e7d4      	b.n	800e61e <_strtoul_l.constprop.0+0x76>
 800e674:	2301      	movs	r3, #1
 800e676:	425b      	negs	r3, r3
 800e678:	e7e0      	b.n	800e63c <_strtoul_l.constprop.0+0x94>
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	d107      	bne.n	800e68e <_strtoul_l.constprop.0+0xe6>
 800e67e:	2222      	movs	r2, #34	@ 0x22
 800e680:	9903      	ldr	r1, [sp, #12]
 800e682:	0018      	movs	r0, r3
 800e684:	600a      	str	r2, [r1, #0]
 800e686:	2f00      	cmp	r7, #0
 800e688:	d109      	bne.n	800e69e <_strtoul_l.constprop.0+0xf6>
 800e68a:	b005      	add	sp, #20
 800e68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e68e:	9a02      	ldr	r2, [sp, #8]
 800e690:	2a00      	cmp	r2, #0
 800e692:	d000      	beq.n	800e696 <_strtoul_l.constprop.0+0xee>
 800e694:	4240      	negs	r0, r0
 800e696:	2f00      	cmp	r7, #0
 800e698:	d0f7      	beq.n	800e68a <_strtoul_l.constprop.0+0xe2>
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <_strtoul_l.constprop.0+0xfa>
 800e69e:	1e63      	subs	r3, r4, #1
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	9b00      	ldr	r3, [sp, #0]
 800e6a4:	603b      	str	r3, [r7, #0]
 800e6a6:	e7f0      	b.n	800e68a <_strtoul_l.constprop.0+0xe2>
 800e6a8:	0800ebb9 	.word	0x0800ebb9

0800e6ac <_strtoul_r>:
 800e6ac:	b510      	push	{r4, lr}
 800e6ae:	f7ff ff7b 	bl	800e5a8 <_strtoul_l.constprop.0>
 800e6b2:	bd10      	pop	{r4, pc}

0800e6b4 <fiprintf>:
 800e6b4:	b40e      	push	{r1, r2, r3}
 800e6b6:	b517      	push	{r0, r1, r2, r4, lr}
 800e6b8:	4c05      	ldr	r4, [pc, #20]	@ (800e6d0 <fiprintf+0x1c>)
 800e6ba:	ab05      	add	r3, sp, #20
 800e6bc:	cb04      	ldmia	r3!, {r2}
 800e6be:	0001      	movs	r1, r0
 800e6c0:	6820      	ldr	r0, [r4, #0]
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	f7ff fa9c 	bl	800dc00 <_vfiprintf_r>
 800e6c8:	bc1e      	pop	{r1, r2, r3, r4}
 800e6ca:	bc08      	pop	{r3}
 800e6cc:	b003      	add	sp, #12
 800e6ce:	4718      	bx	r3
 800e6d0:	200001c4 	.word	0x200001c4

0800e6d4 <abort>:
 800e6d4:	2006      	movs	r0, #6
 800e6d6:	b510      	push	{r4, lr}
 800e6d8:	f000 f834 	bl	800e744 <raise>
 800e6dc:	2001      	movs	r0, #1
 800e6de:	f7f5 fb0b 	bl	8003cf8 <_exit>

0800e6e2 <_malloc_usable_size_r>:
 800e6e2:	1f0b      	subs	r3, r1, #4
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	1f18      	subs	r0, r3, #4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	da01      	bge.n	800e6f0 <_malloc_usable_size_r+0xe>
 800e6ec:	580b      	ldr	r3, [r1, r0]
 800e6ee:	18c0      	adds	r0, r0, r3
 800e6f0:	4770      	bx	lr

0800e6f2 <_raise_r>:
 800e6f2:	b570      	push	{r4, r5, r6, lr}
 800e6f4:	0004      	movs	r4, r0
 800e6f6:	000d      	movs	r5, r1
 800e6f8:	291f      	cmp	r1, #31
 800e6fa:	d904      	bls.n	800e706 <_raise_r+0x14>
 800e6fc:	2316      	movs	r3, #22
 800e6fe:	6003      	str	r3, [r0, #0]
 800e700:	2001      	movs	r0, #1
 800e702:	4240      	negs	r0, r0
 800e704:	bd70      	pop	{r4, r5, r6, pc}
 800e706:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d004      	beq.n	800e716 <_raise_r+0x24>
 800e70c:	008a      	lsls	r2, r1, #2
 800e70e:	189b      	adds	r3, r3, r2
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	2a00      	cmp	r2, #0
 800e714:	d108      	bne.n	800e728 <_raise_r+0x36>
 800e716:	0020      	movs	r0, r4
 800e718:	f000 f830 	bl	800e77c <_getpid_r>
 800e71c:	002a      	movs	r2, r5
 800e71e:	0001      	movs	r1, r0
 800e720:	0020      	movs	r0, r4
 800e722:	f000 f819 	bl	800e758 <_kill_r>
 800e726:	e7ed      	b.n	800e704 <_raise_r+0x12>
 800e728:	2a01      	cmp	r2, #1
 800e72a:	d009      	beq.n	800e740 <_raise_r+0x4e>
 800e72c:	1c51      	adds	r1, r2, #1
 800e72e:	d103      	bne.n	800e738 <_raise_r+0x46>
 800e730:	2316      	movs	r3, #22
 800e732:	6003      	str	r3, [r0, #0]
 800e734:	2001      	movs	r0, #1
 800e736:	e7e5      	b.n	800e704 <_raise_r+0x12>
 800e738:	2100      	movs	r1, #0
 800e73a:	0028      	movs	r0, r5
 800e73c:	6019      	str	r1, [r3, #0]
 800e73e:	4790      	blx	r2
 800e740:	2000      	movs	r0, #0
 800e742:	e7df      	b.n	800e704 <_raise_r+0x12>

0800e744 <raise>:
 800e744:	b510      	push	{r4, lr}
 800e746:	4b03      	ldr	r3, [pc, #12]	@ (800e754 <raise+0x10>)
 800e748:	0001      	movs	r1, r0
 800e74a:	6818      	ldr	r0, [r3, #0]
 800e74c:	f7ff ffd1 	bl	800e6f2 <_raise_r>
 800e750:	bd10      	pop	{r4, pc}
 800e752:	46c0      	nop			@ (mov r8, r8)
 800e754:	200001c4 	.word	0x200001c4

0800e758 <_kill_r>:
 800e758:	2300      	movs	r3, #0
 800e75a:	b570      	push	{r4, r5, r6, lr}
 800e75c:	4d06      	ldr	r5, [pc, #24]	@ (800e778 <_kill_r+0x20>)
 800e75e:	0004      	movs	r4, r0
 800e760:	0008      	movs	r0, r1
 800e762:	0011      	movs	r1, r2
 800e764:	602b      	str	r3, [r5, #0]
 800e766:	f7f5 fab7 	bl	8003cd8 <_kill>
 800e76a:	1c43      	adds	r3, r0, #1
 800e76c:	d103      	bne.n	800e776 <_kill_r+0x1e>
 800e76e:	682b      	ldr	r3, [r5, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d000      	beq.n	800e776 <_kill_r+0x1e>
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	200007dc 	.word	0x200007dc

0800e77c <_getpid_r>:
 800e77c:	b510      	push	{r4, lr}
 800e77e:	f7f5 faa5 	bl	8003ccc <_getpid>
 800e782:	bd10      	pop	{r4, pc}

0800e784 <_init>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	46c0      	nop			@ (mov r8, r8)
 800e788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78a:	bc08      	pop	{r3}
 800e78c:	469e      	mov	lr, r3
 800e78e:	4770      	bx	lr

0800e790 <_fini>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	46c0      	nop			@ (mov r8, r8)
 800e794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e796:	bc08      	pop	{r3}
 800e798:	469e      	mov	lr, r3
 800e79a:	4770      	bx	lr
