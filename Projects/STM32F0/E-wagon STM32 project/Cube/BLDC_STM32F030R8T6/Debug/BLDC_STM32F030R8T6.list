
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800d5a0  0800d5a0  0001d5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbcc  0800dbcc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbcc  0800dbcc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbcc  0800dbcc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbcc  0800dbcc  0001dbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbd0  0800dbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800dbd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000204  0800ddd8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800ddd8  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001182c  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002adb  00000000  00000000  00031a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000353e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047d5  00000000  00000000  00036160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014986  00000000  00000000  0003a935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bdd5  00000000  00000000  0004f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ac  00000000  00000000  000bb0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d588 	.word	0x0800d588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800d588 	.word	0x0800d588

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faaf 	bl	80019a0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9ff 	bl	8001850 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 faa1 	bl	80019a0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa97 	bl	80019a0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa27 	bl	80018d4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa1d 	bl	80018d4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f8ef 	bl	80026a0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fd38 	bl	8001f40 <__aeabi_dsub>
 80004d0:	f002 f8e6 	bl	80026a0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 fa9d 	bl	8001a68 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f002 f91a 	bl	800276c <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 fa94 	bl	8001a68 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fcfa 	bl	8001f40 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f002 f8d3 	bl	800270c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 fa7d 	bl	8001a68 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f002 f8fa 	bl	800276c <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 fb36 	bl	8000bec <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46c6      	mov	lr, r8
 800058c:	0243      	lsls	r3, r0, #9
 800058e:	0a5b      	lsrs	r3, r3, #9
 8000590:	024e      	lsls	r6, r1, #9
 8000592:	0045      	lsls	r5, r0, #1
 8000594:	004f      	lsls	r7, r1, #1
 8000596:	00da      	lsls	r2, r3, #3
 8000598:	0fc4      	lsrs	r4, r0, #31
 800059a:	469c      	mov	ip, r3
 800059c:	0a70      	lsrs	r0, r6, #9
 800059e:	4690      	mov	r8, r2
 80005a0:	b500      	push	{lr}
 80005a2:	0e2d      	lsrs	r5, r5, #24
 80005a4:	0e3f      	lsrs	r7, r7, #24
 80005a6:	0fc9      	lsrs	r1, r1, #31
 80005a8:	09b6      	lsrs	r6, r6, #6
 80005aa:	428c      	cmp	r4, r1
 80005ac:	d04b      	beq.n	8000646 <__aeabi_fadd+0xbe>
 80005ae:	1bea      	subs	r2, r5, r7
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	dd36      	ble.n	8000622 <__aeabi_fadd+0x9a>
 80005b4:	2f00      	cmp	r7, #0
 80005b6:	d061      	beq.n	800067c <__aeabi_fadd+0xf4>
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x36>
 80005bc:	e0ad      	b.n	800071a <__aeabi_fadd+0x192>
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	04db      	lsls	r3, r3, #19
 80005c2:	431e      	orrs	r6, r3
 80005c4:	2a1b      	cmp	r2, #27
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fadd+0x42>
 80005c8:	e0d3      	b.n	8000772 <__aeabi_fadd+0x1ea>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4643      	mov	r3, r8
 80005ce:	1a18      	subs	r0, r3, r0
 80005d0:	0143      	lsls	r3, r0, #5
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_fadd+0x4e>
 80005d4:	e08c      	b.n	80006f0 <__aeabi_fadd+0x168>
 80005d6:	0180      	lsls	r0, r0, #6
 80005d8:	0987      	lsrs	r7, r0, #6
 80005da:	0038      	movs	r0, r7
 80005dc:	f002 f9bc 	bl	8002958 <__clzsi2>
 80005e0:	3805      	subs	r0, #5
 80005e2:	4087      	lsls	r7, r0
 80005e4:	4285      	cmp	r5, r0
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_fadd+0x62>
 80005e8:	e0b6      	b.n	8000758 <__aeabi_fadd+0x1d0>
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	48b3      	ldr	r0, [pc, #716]	; (80008bc <__aeabi_fadd+0x334>)
 80005ee:	4038      	ands	r0, r7
 80005f0:	0743      	lsls	r3, r0, #29
 80005f2:	d004      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005f4:	230f      	movs	r3, #15
 80005f6:	4003      	ands	r3, r0
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005fc:	3004      	adds	r0, #4
 80005fe:	0143      	lsls	r3, r0, #5
 8000600:	d400      	bmi.n	8000604 <__aeabi_fadd+0x7c>
 8000602:	e078      	b.n	80006f6 <__aeabi_fadd+0x16e>
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	2dfe      	cmp	r5, #254	; 0xfe
 8000608:	d065      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800060a:	0180      	lsls	r0, r0, #6
 800060c:	0a43      	lsrs	r3, r0, #9
 800060e:	469c      	mov	ip, r3
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	4663      	mov	r3, ip
 8000614:	05d0      	lsls	r0, r2, #23
 8000616:	4318      	orrs	r0, r3
 8000618:	07e4      	lsls	r4, r4, #31
 800061a:	4320      	orrs	r0, r4
 800061c:	bc80      	pop	{r7}
 800061e:	46b8      	mov	r8, r7
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	2a00      	cmp	r2, #0
 8000624:	d035      	beq.n	8000692 <__aeabi_fadd+0x10a>
 8000626:	1b7a      	subs	r2, r7, r5
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0xa6>
 800062c:	e0af      	b.n	800078e <__aeabi_fadd+0x206>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0xae>
 8000634:	e0a7      	b.n	8000786 <__aeabi_fadd+0x1fe>
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0xb6>
 800063c:	e12f      	b.n	800089e <__aeabi_fadd+0x316>
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d069      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000642:	001a      	movs	r2, r3
 8000644:	e0aa      	b.n	800079c <__aeabi_fadd+0x214>
 8000646:	1be9      	subs	r1, r5, r7
 8000648:	2900      	cmp	r1, #0
 800064a:	dd70      	ble.n	800072e <__aeabi_fadd+0x1a6>
 800064c:	2f00      	cmp	r7, #0
 800064e:	d037      	beq.n	80006c0 <__aeabi_fadd+0x138>
 8000650:	2dff      	cmp	r5, #255	; 0xff
 8000652:	d062      	beq.n	800071a <__aeabi_fadd+0x192>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	04db      	lsls	r3, r3, #19
 8000658:	431e      	orrs	r6, r3
 800065a:	291b      	cmp	r1, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0xd8>
 800065e:	e0b0      	b.n	80007c2 <__aeabi_fadd+0x23a>
 8000660:	2001      	movs	r0, #1
 8000662:	4440      	add	r0, r8
 8000664:	0143      	lsls	r3, r0, #5
 8000666:	d543      	bpl.n	80006f0 <__aeabi_fadd+0x168>
 8000668:	3501      	adds	r5, #1
 800066a:	2dff      	cmp	r5, #255	; 0xff
 800066c:	d033      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800066e:	2301      	movs	r3, #1
 8000670:	4a93      	ldr	r2, [pc, #588]	; (80008c0 <__aeabi_fadd+0x338>)
 8000672:	4003      	ands	r3, r0
 8000674:	0840      	lsrs	r0, r0, #1
 8000676:	4010      	ands	r0, r2
 8000678:	4318      	orrs	r0, r3
 800067a:	e7b9      	b.n	80005f0 <__aeabi_fadd+0x68>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0xfa>
 8000680:	e083      	b.n	800078a <__aeabi_fadd+0x202>
 8000682:	1e51      	subs	r1, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x102>
 8000688:	e0d8      	b.n	800083c <__aeabi_fadd+0x2b4>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d045      	beq.n	800071a <__aeabi_fadd+0x192>
 800068e:	000a      	movs	r2, r1
 8000690:	e798      	b.n	80005c4 <__aeabi_fadd+0x3c>
 8000692:	27fe      	movs	r7, #254	; 0xfe
 8000694:	1c6a      	adds	r2, r5, #1
 8000696:	4217      	tst	r7, r2
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x114>
 800069a:	e086      	b.n	80007aa <__aeabi_fadd+0x222>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x11a>
 80006a0:	e0b7      	b.n	8000812 <__aeabi_fadd+0x28a>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x122>
 80006a8:	e0f3      	b.n	8000892 <__aeabi_fadd+0x30a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d0b0      	beq.n	8000612 <__aeabi_fadd+0x8a>
 80006b0:	1b98      	subs	r0, r3, r6
 80006b2:	0143      	lsls	r3, r0, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x130>
 80006b6:	e0fa      	b.n	80008ae <__aeabi_fadd+0x326>
 80006b8:	4643      	mov	r3, r8
 80006ba:	000c      	movs	r4, r1
 80006bc:	1af0      	subs	r0, r6, r3
 80006be:	e797      	b.n	80005f0 <__aeabi_fadd+0x68>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x13e>
 80006c4:	e0c8      	b.n	8000858 <__aeabi_fadd+0x2d0>
 80006c6:	1e4a      	subs	r2, r1, #1
 80006c8:	2901      	cmp	r1, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x146>
 80006cc:	e0ae      	b.n	800082c <__aeabi_fadd+0x2a4>
 80006ce:	29ff      	cmp	r1, #255	; 0xff
 80006d0:	d023      	beq.n	800071a <__aeabi_fadd+0x192>
 80006d2:	0011      	movs	r1, r2
 80006d4:	e7c1      	b.n	800065a <__aeabi_fadd+0xd2>
 80006d6:	2300      	movs	r3, #0
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	469c      	mov	ip, r3
 80006dc:	e799      	b.n	8000612 <__aeabi_fadd+0x8a>
 80006de:	21fe      	movs	r1, #254	; 0xfe
 80006e0:	1c6a      	adds	r2, r5, #1
 80006e2:	4211      	tst	r1, r2
 80006e4:	d077      	beq.n	80007d6 <__aeabi_fadd+0x24e>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d0f5      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 80006ea:	0015      	movs	r5, r2
 80006ec:	4446      	add	r6, r8
 80006ee:	0870      	lsrs	r0, r6, #1
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fadd+0x16e>
 80006f4:	e77e      	b.n	80005f4 <__aeabi_fadd+0x6c>
 80006f6:	08c3      	lsrs	r3, r0, #3
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d00e      	beq.n	800071a <__aeabi_fadd+0x192>
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	469c      	mov	ip, r3
 8000702:	b2ea      	uxtb	r2, r5
 8000704:	e785      	b.n	8000612 <__aeabi_fadd+0x8a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d007      	beq.n	800071a <__aeabi_fadd+0x192>
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d003      	beq.n	800071a <__aeabi_fadd+0x192>
 8000712:	4210      	tst	r0, r2
 8000714:	d101      	bne.n	800071a <__aeabi_fadd+0x192>
 8000716:	000c      	movs	r4, r1
 8000718:	0003      	movs	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0db      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800071e:	2080      	movs	r0, #128	; 0x80
 8000720:	03c0      	lsls	r0, r0, #15
 8000722:	4318      	orrs	r0, r3
 8000724:	0240      	lsls	r0, r0, #9
 8000726:	0a43      	lsrs	r3, r0, #9
 8000728:	469c      	mov	ip, r3
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	e771      	b.n	8000612 <__aeabi_fadd+0x8a>
 800072e:	2900      	cmp	r1, #0
 8000730:	d0d5      	beq.n	80006de <__aeabi_fadd+0x156>
 8000732:	1b7a      	subs	r2, r7, r5
 8000734:	2d00      	cmp	r5, #0
 8000736:	d160      	bne.n	80007fa <__aeabi_fadd+0x272>
 8000738:	4643      	mov	r3, r8
 800073a:	2b00      	cmp	r3, #0
 800073c:	d024      	beq.n	8000788 <__aeabi_fadd+0x200>
 800073e:	1e53      	subs	r3, r2, #1
 8000740:	2a01      	cmp	r2, #1
 8000742:	d073      	beq.n	800082c <__aeabi_fadd+0x2a4>
 8000744:	2aff      	cmp	r2, #255	; 0xff
 8000746:	d0e7      	beq.n	8000718 <__aeabi_fadd+0x190>
 8000748:	001a      	movs	r2, r3
 800074a:	2a1b      	cmp	r2, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x1c8>
 800074e:	e085      	b.n	800085c <__aeabi_fadd+0x2d4>
 8000750:	2001      	movs	r0, #1
 8000752:	003d      	movs	r5, r7
 8000754:	1980      	adds	r0, r0, r6
 8000756:	e785      	b.n	8000664 <__aeabi_fadd+0xdc>
 8000758:	2320      	movs	r3, #32
 800075a:	003a      	movs	r2, r7
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	0038      	movs	r0, r7
 8000760:	3501      	adds	r5, #1
 8000762:	40ea      	lsrs	r2, r5
 8000764:	1b5d      	subs	r5, r3, r5
 8000766:	40a8      	lsls	r0, r5
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4198      	sbcs	r0, r3
 800076c:	2500      	movs	r5, #0
 800076e:	4310      	orrs	r0, r2
 8000770:	e73e      	b.n	80005f0 <__aeabi_fadd+0x68>
 8000772:	2320      	movs	r3, #32
 8000774:	0030      	movs	r0, r6
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	0031      	movs	r1, r6
 800077a:	4098      	lsls	r0, r3
 800077c:	40d1      	lsrs	r1, r2
 800077e:	1e43      	subs	r3, r0, #1
 8000780:	4198      	sbcs	r0, r3
 8000782:	4308      	orrs	r0, r1
 8000784:	e722      	b.n	80005cc <__aeabi_fadd+0x44>
 8000786:	000c      	movs	r4, r1
 8000788:	0003      	movs	r3, r0
 800078a:	0015      	movs	r5, r2
 800078c:	e7b4      	b.n	80006f8 <__aeabi_fadd+0x170>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0c1      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4640      	mov	r0, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4318      	orrs	r0, r3
 800079a:	4680      	mov	r8, r0
 800079c:	2a1b      	cmp	r2, #27
 800079e:	dd51      	ble.n	8000844 <__aeabi_fadd+0x2bc>
 80007a0:	2001      	movs	r0, #1
 80007a2:	000c      	movs	r4, r1
 80007a4:	003d      	movs	r5, r7
 80007a6:	1a30      	subs	r0, r6, r0
 80007a8:	e712      	b.n	80005d0 <__aeabi_fadd+0x48>
 80007aa:	4643      	mov	r3, r8
 80007ac:	1b9f      	subs	r7, r3, r6
 80007ae:	017b      	lsls	r3, r7, #5
 80007b0:	d42b      	bmi.n	800080a <__aeabi_fadd+0x282>
 80007b2:	2f00      	cmp	r7, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x230>
 80007b6:	e710      	b.n	80005da <__aeabi_fadd+0x52>
 80007b8:	2300      	movs	r3, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	2200      	movs	r2, #0
 80007be:	469c      	mov	ip, r3
 80007c0:	e727      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007c2:	2320      	movs	r3, #32
 80007c4:	0032      	movs	r2, r6
 80007c6:	0030      	movs	r0, r6
 80007c8:	40ca      	lsrs	r2, r1
 80007ca:	1a59      	subs	r1, r3, r1
 80007cc:	4088      	lsls	r0, r1
 80007ce:	1e43      	subs	r3, r0, #1
 80007d0:	4198      	sbcs	r0, r3
 80007d2:	4310      	orrs	r0, r2
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0xda>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d14a      	bne.n	8000870 <__aeabi_fadd+0x2e8>
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d063      	beq.n	80008a8 <__aeabi_fadd+0x320>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x260>
 80007e6:	e714      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007e8:	0030      	movs	r0, r6
 80007ea:	4440      	add	r0, r8
 80007ec:	0143      	lsls	r3, r0, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0x26a>
 80007f0:	e77e      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <__aeabi_fadd+0x334>)
 80007f4:	3501      	adds	r5, #1
 80007f6:	4018      	ands	r0, r3
 80007f8:	e77a      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d08c      	beq.n	8000718 <__aeabi_fadd+0x190>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	4641      	mov	r1, r8
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	4319      	orrs	r1, r3
 8000806:	4688      	mov	r8, r1
 8000808:	e79f      	b.n	800074a <__aeabi_fadd+0x1c2>
 800080a:	4643      	mov	r3, r8
 800080c:	000c      	movs	r4, r1
 800080e:	1af7      	subs	r7, r6, r3
 8000810:	e6e3      	b.n	80005da <__aeabi_fadd+0x52>
 8000812:	4642      	mov	r2, r8
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x292>
 8000818:	e775      	b.n	8000706 <__aeabi_fadd+0x17e>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x298>
 800081e:	e77a      	b.n	8000716 <__aeabi_fadd+0x18e>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	03db      	lsls	r3, r3, #15
 8000824:	2400      	movs	r4, #0
 8000826:	469c      	mov	ip, r3
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	e6f2      	b.n	8000612 <__aeabi_fadd+0x8a>
 800082c:	0030      	movs	r0, r6
 800082e:	4440      	add	r0, r8
 8000830:	2501      	movs	r5, #1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x2b0>
 8000836:	e75b      	b.n	80006f0 <__aeabi_fadd+0x168>
 8000838:	2502      	movs	r5, #2
 800083a:	e718      	b.n	800066e <__aeabi_fadd+0xe6>
 800083c:	4643      	mov	r3, r8
 800083e:	2501      	movs	r5, #1
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	e6c5      	b.n	80005d0 <__aeabi_fadd+0x48>
 8000844:	2320      	movs	r3, #32
 8000846:	4644      	mov	r4, r8
 8000848:	4640      	mov	r0, r8
 800084a:	40d4      	lsrs	r4, r2
 800084c:	1a9a      	subs	r2, r3, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4320      	orrs	r0, r4
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x21a>
 8000858:	000d      	movs	r5, r1
 800085a:	e74d      	b.n	80006f8 <__aeabi_fadd+0x170>
 800085c:	2320      	movs	r3, #32
 800085e:	4641      	mov	r1, r8
 8000860:	4640      	mov	r0, r8
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1a9a      	subs	r2, r3, r2
 8000866:	4090      	lsls	r0, r2
 8000868:	1e43      	subs	r3, r0, #1
 800086a:	4198      	sbcs	r0, r3
 800086c:	4308      	orrs	r0, r1
 800086e:	e770      	b.n	8000752 <__aeabi_fadd+0x1ca>
 8000870:	4642      	mov	r2, r8
 8000872:	2a00      	cmp	r2, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x2f0>
 8000876:	e74f      	b.n	8000718 <__aeabi_fadd+0x190>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x2f6>
 800087c:	e74d      	b.n	800071a <__aeabi_fadd+0x192>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	03d2      	lsls	r2, r2, #15
 8000882:	4213      	tst	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x300>
 8000886:	e748      	b.n	800071a <__aeabi_fadd+0x192>
 8000888:	4210      	tst	r0, r2
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x306>
 800088c:	e745      	b.n	800071a <__aeabi_fadd+0x192>
 800088e:	0003      	movs	r3, r0
 8000890:	e743      	b.n	800071a <__aeabi_fadd+0x192>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d090      	beq.n	80007b8 <__aeabi_fadd+0x230>
 8000896:	000c      	movs	r4, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2200      	movs	r2, #0
 800089c:	e6b9      	b.n	8000612 <__aeabi_fadd+0x8a>
 800089e:	4643      	mov	r3, r8
 80008a0:	000c      	movs	r4, r1
 80008a2:	1af0      	subs	r0, r6, r3
 80008a4:	3501      	adds	r5, #1
 80008a6:	e693      	b.n	80005d0 <__aeabi_fadd+0x48>
 80008a8:	4684      	mov	ip, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	e6b1      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x32c>
 80008b2:	e71d      	b.n	80006f0 <__aeabi_fadd+0x168>
 80008b4:	2300      	movs	r3, #0
 80008b6:	2400      	movs	r4, #0
 80008b8:	469c      	mov	ip, r3
 80008ba:	e6aa      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008bc:	fbffffff 	.word	0xfbffffff
 80008c0:	7dffffff 	.word	0x7dffffff

080008c4 <__aeabi_fmul>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464f      	mov	r7, r9
 80008c8:	4646      	mov	r6, r8
 80008ca:	46d6      	mov	lr, sl
 80008cc:	0244      	lsls	r4, r0, #9
 80008ce:	0045      	lsls	r5, r0, #1
 80008d0:	b5c0      	push	{r6, r7, lr}
 80008d2:	0a64      	lsrs	r4, r4, #9
 80008d4:	1c0f      	adds	r7, r1, #0
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0fc6      	lsrs	r6, r0, #31
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fmul+0x1c>
 80008de:	e08d      	b.n	80009fc <__aeabi_fmul+0x138>
 80008e0:	2dff      	cmp	r5, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fmul+0x22>
 80008e4:	e092      	b.n	8000a0c <__aeabi_fmul+0x148>
 80008e6:	2300      	movs	r3, #0
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	4699      	mov	r9, r3
 80008ec:	469a      	mov	sl, r3
 80008ee:	00e4      	lsls	r4, r4, #3
 80008f0:	04c0      	lsls	r0, r0, #19
 80008f2:	4304      	orrs	r4, r0
 80008f4:	3d7f      	subs	r5, #127	; 0x7f
 80008f6:	0278      	lsls	r0, r7, #9
 80008f8:	0a43      	lsrs	r3, r0, #9
 80008fa:	4698      	mov	r8, r3
 80008fc:	007b      	lsls	r3, r7, #1
 80008fe:	0e1b      	lsrs	r3, r3, #24
 8000900:	0fff      	lsrs	r7, r7, #31
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fmul+0x44>
 8000906:	e070      	b.n	80009ea <__aeabi_fmul+0x126>
 8000908:	2bff      	cmp	r3, #255	; 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fmul+0x4a>
 800090c:	e086      	b.n	8000a1c <__aeabi_fmul+0x158>
 800090e:	4642      	mov	r2, r8
 8000910:	00d0      	lsls	r0, r2, #3
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	3b7f      	subs	r3, #127	; 0x7f
 8000916:	18ed      	adds	r5, r5, r3
 8000918:	2300      	movs	r3, #0
 800091a:	04d2      	lsls	r2, r2, #19
 800091c:	4302      	orrs	r2, r0
 800091e:	4690      	mov	r8, r2
 8000920:	469c      	mov	ip, r3
 8000922:	0031      	movs	r1, r6
 8000924:	464b      	mov	r3, r9
 8000926:	4079      	eors	r1, r7
 8000928:	1c68      	adds	r0, r5, #1
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d81c      	bhi.n	8000968 <__aeabi_fmul+0xa4>
 800092e:	4a76      	ldr	r2, [pc, #472]	; (8000b08 <__aeabi_fmul+0x244>)
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	58d3      	ldr	r3, [r2, r3]
 8000934:	469f      	mov	pc, r3
 8000936:	0039      	movs	r1, r7
 8000938:	4644      	mov	r4, r8
 800093a:	46e2      	mov	sl, ip
 800093c:	4653      	mov	r3, sl
 800093e:	2b02      	cmp	r3, #2
 8000940:	d00f      	beq.n	8000962 <__aeabi_fmul+0x9e>
 8000942:	2b03      	cmp	r3, #3
 8000944:	d100      	bne.n	8000948 <__aeabi_fmul+0x84>
 8000946:	e0d7      	b.n	8000af8 <__aeabi_fmul+0x234>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d137      	bne.n	80009bc <__aeabi_fmul+0xf8>
 800094c:	2000      	movs	r0, #0
 800094e:	2400      	movs	r4, #0
 8000950:	05c0      	lsls	r0, r0, #23
 8000952:	4320      	orrs	r0, r4
 8000954:	07c9      	lsls	r1, r1, #31
 8000956:	4308      	orrs	r0, r1
 8000958:	bce0      	pop	{r5, r6, r7}
 800095a:	46ba      	mov	sl, r7
 800095c:	46b1      	mov	r9, r6
 800095e:	46a8      	mov	r8, r5
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	2400      	movs	r4, #0
 8000966:	e7f3      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000968:	0c26      	lsrs	r6, r4, #16
 800096a:	0424      	lsls	r4, r4, #16
 800096c:	0c22      	lsrs	r2, r4, #16
 800096e:	4644      	mov	r4, r8
 8000970:	0424      	lsls	r4, r4, #16
 8000972:	0c24      	lsrs	r4, r4, #16
 8000974:	4643      	mov	r3, r8
 8000976:	0027      	movs	r7, r4
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	4357      	muls	r7, r2
 800097c:	4374      	muls	r4, r6
 800097e:	435a      	muls	r2, r3
 8000980:	435e      	muls	r6, r3
 8000982:	1912      	adds	r2, r2, r4
 8000984:	0c3b      	lsrs	r3, r7, #16
 8000986:	189b      	adds	r3, r3, r2
 8000988:	429c      	cmp	r4, r3
 800098a:	d903      	bls.n	8000994 <__aeabi_fmul+0xd0>
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	0252      	lsls	r2, r2, #9
 8000990:	4694      	mov	ip, r2
 8000992:	4466      	add	r6, ip
 8000994:	043f      	lsls	r7, r7, #16
 8000996:	041a      	lsls	r2, r3, #16
 8000998:	0c3f      	lsrs	r7, r7, #16
 800099a:	19d2      	adds	r2, r2, r7
 800099c:	0194      	lsls	r4, r2, #6
 800099e:	1e67      	subs	r7, r4, #1
 80009a0:	41bc      	sbcs	r4, r7
 80009a2:	0c1b      	lsrs	r3, r3, #16
 80009a4:	0e92      	lsrs	r2, r2, #26
 80009a6:	199b      	adds	r3, r3, r6
 80009a8:	4314      	orrs	r4, r2
 80009aa:	019b      	lsls	r3, r3, #6
 80009ac:	431c      	orrs	r4, r3
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_fmul+0xf0>
 80009b2:	e09b      	b.n	8000aec <__aeabi_fmul+0x228>
 80009b4:	2301      	movs	r3, #1
 80009b6:	0862      	lsrs	r2, r4, #1
 80009b8:	401c      	ands	r4, r3
 80009ba:	4314      	orrs	r4, r2
 80009bc:	0002      	movs	r2, r0
 80009be:	327f      	adds	r2, #127	; 0x7f
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	dd64      	ble.n	8000a8e <__aeabi_fmul+0x1ca>
 80009c4:	0763      	lsls	r3, r4, #29
 80009c6:	d004      	beq.n	80009d2 <__aeabi_fmul+0x10e>
 80009c8:	230f      	movs	r3, #15
 80009ca:	4023      	ands	r3, r4
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fmul+0x10e>
 80009d0:	3404      	adds	r4, #4
 80009d2:	0123      	lsls	r3, r4, #4
 80009d4:	d503      	bpl.n	80009de <__aeabi_fmul+0x11a>
 80009d6:	0002      	movs	r2, r0
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <__aeabi_fmul+0x248>)
 80009da:	3280      	adds	r2, #128	; 0x80
 80009dc:	401c      	ands	r4, r3
 80009de:	2afe      	cmp	r2, #254	; 0xfe
 80009e0:	dcbf      	bgt.n	8000962 <__aeabi_fmul+0x9e>
 80009e2:	01a4      	lsls	r4, r4, #6
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	b2d0      	uxtb	r0, r2
 80009e8:	e7b2      	b.n	8000950 <__aeabi_fmul+0x8c>
 80009ea:	4643      	mov	r3, r8
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d13d      	bne.n	8000a6c <__aeabi_fmul+0x1a8>
 80009f0:	464a      	mov	r2, r9
 80009f2:	3301      	adds	r3, #1
 80009f4:	431a      	orrs	r2, r3
 80009f6:	4691      	mov	r9, r2
 80009f8:	469c      	mov	ip, r3
 80009fa:	e792      	b.n	8000922 <__aeabi_fmul+0x5e>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d129      	bne.n	8000a54 <__aeabi_fmul+0x190>
 8000a00:	2304      	movs	r3, #4
 8000a02:	4699      	mov	r9, r3
 8000a04:	3b03      	subs	r3, #3
 8000a06:	2500      	movs	r5, #0
 8000a08:	469a      	mov	sl, r3
 8000a0a:	e774      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d11b      	bne.n	8000a48 <__aeabi_fmul+0x184>
 8000a10:	2308      	movs	r3, #8
 8000a12:	4699      	mov	r9, r3
 8000a14:	3b06      	subs	r3, #6
 8000a16:	25ff      	movs	r5, #255	; 0xff
 8000a18:	469a      	mov	sl, r3
 8000a1a:	e76c      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a1c:	4643      	mov	r3, r8
 8000a1e:	35ff      	adds	r5, #255	; 0xff
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10b      	bne.n	8000a3c <__aeabi_fmul+0x178>
 8000a24:	2302      	movs	r3, #2
 8000a26:	464a      	mov	r2, r9
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	e778      	b.n	8000922 <__aeabi_fmul+0x5e>
 8000a30:	4653      	mov	r3, sl
 8000a32:	0031      	movs	r1, r6
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fmul+0x176>
 8000a38:	e783      	b.n	8000942 <__aeabi_fmul+0x7e>
 8000a3a:	e792      	b.n	8000962 <__aeabi_fmul+0x9e>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	464a      	mov	r2, r9
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4691      	mov	r9, r2
 8000a44:	469c      	mov	ip, r3
 8000a46:	e76c      	b.n	8000922 <__aeabi_fmul+0x5e>
 8000a48:	230c      	movs	r3, #12
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b09      	subs	r3, #9
 8000a4e:	25ff      	movs	r5, #255	; 0xff
 8000a50:	469a      	mov	sl, r3
 8000a52:	e750      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a54:	0020      	movs	r0, r4
 8000a56:	f001 ff7f 	bl	8002958 <__clzsi2>
 8000a5a:	2576      	movs	r5, #118	; 0x76
 8000a5c:	1f43      	subs	r3, r0, #5
 8000a5e:	409c      	lsls	r4, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	426d      	negs	r5, r5
 8000a64:	4699      	mov	r9, r3
 8000a66:	469a      	mov	sl, r3
 8000a68:	1a2d      	subs	r5, r5, r0
 8000a6a:	e744      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	f001 ff73 	bl	8002958 <__clzsi2>
 8000a72:	4642      	mov	r2, r8
 8000a74:	1f43      	subs	r3, r0, #5
 8000a76:	409a      	lsls	r2, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	1a2d      	subs	r5, r5, r0
 8000a7c:	4690      	mov	r8, r2
 8000a7e:	469c      	mov	ip, r3
 8000a80:	3d76      	subs	r5, #118	; 0x76
 8000a82:	e74e      	b.n	8000922 <__aeabi_fmul+0x5e>
 8000a84:	2480      	movs	r4, #128	; 0x80
 8000a86:	2100      	movs	r1, #0
 8000a88:	20ff      	movs	r0, #255	; 0xff
 8000a8a:	03e4      	lsls	r4, r4, #15
 8000a8c:	e760      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	1a9b      	subs	r3, r3, r2
 8000a92:	2b1b      	cmp	r3, #27
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fmul+0x1d4>
 8000a96:	e759      	b.n	800094c <__aeabi_fmul+0x88>
 8000a98:	0022      	movs	r2, r4
 8000a9a:	309e      	adds	r0, #158	; 0x9e
 8000a9c:	40da      	lsrs	r2, r3
 8000a9e:	4084      	lsls	r4, r0
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	1e62      	subs	r2, r4, #1
 8000aa4:	4194      	sbcs	r4, r2
 8000aa6:	431c      	orrs	r4, r3
 8000aa8:	0763      	lsls	r3, r4, #29
 8000aaa:	d004      	beq.n	8000ab6 <__aeabi_fmul+0x1f2>
 8000aac:	230f      	movs	r3, #15
 8000aae:	4023      	ands	r3, r4
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_fmul+0x1f2>
 8000ab4:	3404      	adds	r4, #4
 8000ab6:	0163      	lsls	r3, r4, #5
 8000ab8:	d51a      	bpl.n	8000af0 <__aeabi_fmul+0x22c>
 8000aba:	2001      	movs	r0, #1
 8000abc:	2400      	movs	r4, #0
 8000abe:	e747      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000ac0:	2080      	movs	r0, #128	; 0x80
 8000ac2:	03c0      	lsls	r0, r0, #15
 8000ac4:	4204      	tst	r4, r0
 8000ac6:	d009      	beq.n	8000adc <__aeabi_fmul+0x218>
 8000ac8:	4643      	mov	r3, r8
 8000aca:	4203      	tst	r3, r0
 8000acc:	d106      	bne.n	8000adc <__aeabi_fmul+0x218>
 8000ace:	4644      	mov	r4, r8
 8000ad0:	4304      	orrs	r4, r0
 8000ad2:	0264      	lsls	r4, r4, #9
 8000ad4:	0039      	movs	r1, r7
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	0a64      	lsrs	r4, r4, #9
 8000ada:	e739      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000adc:	2080      	movs	r0, #128	; 0x80
 8000ade:	03c0      	lsls	r0, r0, #15
 8000ae0:	4304      	orrs	r4, r0
 8000ae2:	0264      	lsls	r4, r4, #9
 8000ae4:	0031      	movs	r1, r6
 8000ae6:	20ff      	movs	r0, #255	; 0xff
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	e731      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000aec:	0028      	movs	r0, r5
 8000aee:	e765      	b.n	80009bc <__aeabi_fmul+0xf8>
 8000af0:	01a4      	lsls	r4, r4, #6
 8000af2:	2000      	movs	r0, #0
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	e72b      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000af8:	2080      	movs	r0, #128	; 0x80
 8000afa:	03c0      	lsls	r0, r0, #15
 8000afc:	4304      	orrs	r4, r0
 8000afe:	0264      	lsls	r4, r4, #9
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	e724      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	0800d600 	.word	0x0800d600
 8000b0c:	f7ffffff 	.word	0xf7ffffff

08000b10 <__aeabi_f2iz>:
 8000b10:	0241      	lsls	r1, r0, #9
 8000b12:	0042      	lsls	r2, r0, #1
 8000b14:	0fc3      	lsrs	r3, r0, #31
 8000b16:	0a49      	lsrs	r1, r1, #9
 8000b18:	2000      	movs	r0, #0
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	2a7e      	cmp	r2, #126	; 0x7e
 8000b1e:	dd03      	ble.n	8000b28 <__aeabi_f2iz+0x18>
 8000b20:	2a9d      	cmp	r2, #157	; 0x9d
 8000b22:	dd02      	ble.n	8000b2a <__aeabi_f2iz+0x1a>
 8000b24:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <__aeabi_f2iz+0x3c>)
 8000b26:	1898      	adds	r0, r3, r2
 8000b28:	4770      	bx	lr
 8000b2a:	2080      	movs	r0, #128	; 0x80
 8000b2c:	0400      	lsls	r0, r0, #16
 8000b2e:	4301      	orrs	r1, r0
 8000b30:	2a95      	cmp	r2, #149	; 0x95
 8000b32:	dc07      	bgt.n	8000b44 <__aeabi_f2iz+0x34>
 8000b34:	2096      	movs	r0, #150	; 0x96
 8000b36:	1a82      	subs	r2, r0, r2
 8000b38:	40d1      	lsrs	r1, r2
 8000b3a:	4248      	negs	r0, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f3      	bne.n	8000b28 <__aeabi_f2iz+0x18>
 8000b40:	0008      	movs	r0, r1
 8000b42:	e7f1      	b.n	8000b28 <__aeabi_f2iz+0x18>
 8000b44:	3a96      	subs	r2, #150	; 0x96
 8000b46:	4091      	lsls	r1, r2
 8000b48:	e7f7      	b.n	8000b3a <__aeabi_f2iz+0x2a>
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	7fffffff 	.word	0x7fffffff

08000b50 <__aeabi_i2f>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	2800      	cmp	r0, #0
 8000b54:	d013      	beq.n	8000b7e <__aeabi_i2f+0x2e>
 8000b56:	17c3      	asrs	r3, r0, #31
 8000b58:	18c6      	adds	r6, r0, r3
 8000b5a:	405e      	eors	r6, r3
 8000b5c:	0fc4      	lsrs	r4, r0, #31
 8000b5e:	0030      	movs	r0, r6
 8000b60:	f001 fefa 	bl	8002958 <__clzsi2>
 8000b64:	239e      	movs	r3, #158	; 0x9e
 8000b66:	0005      	movs	r5, r0
 8000b68:	1a1b      	subs	r3, r3, r0
 8000b6a:	2b96      	cmp	r3, #150	; 0x96
 8000b6c:	dc0f      	bgt.n	8000b8e <__aeabi_i2f+0x3e>
 8000b6e:	2808      	cmp	r0, #8
 8000b70:	dd01      	ble.n	8000b76 <__aeabi_i2f+0x26>
 8000b72:	3d08      	subs	r5, #8
 8000b74:	40ae      	lsls	r6, r5
 8000b76:	0276      	lsls	r6, r6, #9
 8000b78:	0a76      	lsrs	r6, r6, #9
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	e002      	b.n	8000b84 <__aeabi_i2f+0x34>
 8000b7e:	2400      	movs	r4, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	2600      	movs	r6, #0
 8000b84:	05c0      	lsls	r0, r0, #23
 8000b86:	4330      	orrs	r0, r6
 8000b88:	07e4      	lsls	r4, r4, #31
 8000b8a:	4320      	orrs	r0, r4
 8000b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b8e:	2b99      	cmp	r3, #153	; 0x99
 8000b90:	dd0c      	ble.n	8000bac <__aeabi_i2f+0x5c>
 8000b92:	2205      	movs	r2, #5
 8000b94:	0031      	movs	r1, r6
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	40d1      	lsrs	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	0001      	movs	r1, r0
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	311b      	adds	r1, #27
 8000ba2:	4088      	lsls	r0, r1
 8000ba4:	1e41      	subs	r1, r0, #1
 8000ba6:	4188      	sbcs	r0, r1
 8000ba8:	4302      	orrs	r2, r0
 8000baa:	0016      	movs	r6, r2
 8000bac:	2d05      	cmp	r5, #5
 8000bae:	dc12      	bgt.n	8000bd6 <__aeabi_i2f+0x86>
 8000bb0:	0031      	movs	r1, r6
 8000bb2:	4f0d      	ldr	r7, [pc, #52]	; (8000be8 <__aeabi_i2f+0x98>)
 8000bb4:	4039      	ands	r1, r7
 8000bb6:	0772      	lsls	r2, r6, #29
 8000bb8:	d009      	beq.n	8000bce <__aeabi_i2f+0x7e>
 8000bba:	200f      	movs	r0, #15
 8000bbc:	4030      	ands	r0, r6
 8000bbe:	2804      	cmp	r0, #4
 8000bc0:	d005      	beq.n	8000bce <__aeabi_i2f+0x7e>
 8000bc2:	3104      	adds	r1, #4
 8000bc4:	014a      	lsls	r2, r1, #5
 8000bc6:	d502      	bpl.n	8000bce <__aeabi_i2f+0x7e>
 8000bc8:	239f      	movs	r3, #159	; 0x9f
 8000bca:	4039      	ands	r1, r7
 8000bcc:	1b5b      	subs	r3, r3, r5
 8000bce:	0189      	lsls	r1, r1, #6
 8000bd0:	0a4e      	lsrs	r6, r1, #9
 8000bd2:	b2d8      	uxtb	r0, r3
 8000bd4:	e7d6      	b.n	8000b84 <__aeabi_i2f+0x34>
 8000bd6:	1f6a      	subs	r2, r5, #5
 8000bd8:	4096      	lsls	r6, r2
 8000bda:	0031      	movs	r1, r6
 8000bdc:	4f02      	ldr	r7, [pc, #8]	; (8000be8 <__aeabi_i2f+0x98>)
 8000bde:	4039      	ands	r1, r7
 8000be0:	0772      	lsls	r2, r6, #29
 8000be2:	d0f4      	beq.n	8000bce <__aeabi_i2f+0x7e>
 8000be4:	e7e9      	b.n	8000bba <__aeabi_i2f+0x6a>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	fbffffff 	.word	0xfbffffff

08000bec <__aeabi_dadd>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	46d6      	mov	lr, sl
 8000bf4:	000d      	movs	r5, r1
 8000bf6:	0004      	movs	r4, r0
 8000bf8:	b5c0      	push	{r6, r7, lr}
 8000bfa:	001f      	movs	r7, r3
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0328      	lsls	r0, r5, #12
 8000c00:	0f62      	lsrs	r2, r4, #29
 8000c02:	0a40      	lsrs	r0, r0, #9
 8000c04:	4310      	orrs	r0, r2
 8000c06:	007a      	lsls	r2, r7, #1
 8000c08:	0d52      	lsrs	r2, r2, #21
 8000c0a:	00e3      	lsls	r3, r4, #3
 8000c0c:	033c      	lsls	r4, r7, #12
 8000c0e:	4691      	mov	r9, r2
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	0ffa      	lsrs	r2, r7, #31
 8000c14:	0f4f      	lsrs	r7, r1, #29
 8000c16:	006e      	lsls	r6, r5, #1
 8000c18:	4327      	orrs	r7, r4
 8000c1a:	4692      	mov	sl, r2
 8000c1c:	46b8      	mov	r8, r7
 8000c1e:	0d76      	lsrs	r6, r6, #21
 8000c20:	0fed      	lsrs	r5, r5, #31
 8000c22:	00c9      	lsls	r1, r1, #3
 8000c24:	4295      	cmp	r5, r2
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x3e>
 8000c28:	e099      	b.n	8000d5e <__aeabi_dadd+0x172>
 8000c2a:	464c      	mov	r4, r9
 8000c2c:	1b34      	subs	r4, r6, r4
 8000c2e:	46a4      	mov	ip, r4
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	dc00      	bgt.n	8000c36 <__aeabi_dadd+0x4a>
 8000c34:	e07c      	b.n	8000d30 <__aeabi_dadd+0x144>
 8000c36:	464a      	mov	r2, r9
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dadd+0x52>
 8000c3c:	e0b8      	b.n	8000db0 <__aeabi_dadd+0x1c4>
 8000c3e:	4ac5      	ldr	r2, [pc, #788]	; (8000f54 <__aeabi_dadd+0x368>)
 8000c40:	4296      	cmp	r6, r2
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x5a>
 8000c44:	e11c      	b.n	8000e80 <__aeabi_dadd+0x294>
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	003c      	movs	r4, r7
 8000c4a:	0412      	lsls	r2, r2, #16
 8000c4c:	4314      	orrs	r4, r2
 8000c4e:	46a0      	mov	r8, r4
 8000c50:	4662      	mov	r2, ip
 8000c52:	2a38      	cmp	r2, #56	; 0x38
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_dadd+0x6c>
 8000c56:	e161      	b.n	8000f1c <__aeabi_dadd+0x330>
 8000c58:	2a1f      	cmp	r2, #31
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_dadd+0x72>
 8000c5c:	e1cc      	b.n	8000ff8 <__aeabi_dadd+0x40c>
 8000c5e:	4664      	mov	r4, ip
 8000c60:	2220      	movs	r2, #32
 8000c62:	1b12      	subs	r2, r2, r4
 8000c64:	4644      	mov	r4, r8
 8000c66:	4094      	lsls	r4, r2
 8000c68:	000f      	movs	r7, r1
 8000c6a:	46a1      	mov	r9, r4
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	40e7      	lsrs	r7, r4
 8000c72:	464c      	mov	r4, r9
 8000c74:	1e4a      	subs	r2, r1, #1
 8000c76:	4191      	sbcs	r1, r2
 8000c78:	433c      	orrs	r4, r7
 8000c7a:	4642      	mov	r2, r8
 8000c7c:	4321      	orrs	r1, r4
 8000c7e:	4664      	mov	r4, ip
 8000c80:	40e2      	lsrs	r2, r4
 8000c82:	1a80      	subs	r0, r0, r2
 8000c84:	1a5c      	subs	r4, r3, r1
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	419b      	sbcs	r3, r3
 8000c8a:	425f      	negs	r7, r3
 8000c8c:	1bc7      	subs	r7, r0, r7
 8000c8e:	023b      	lsls	r3, r7, #8
 8000c90:	d400      	bmi.n	8000c94 <__aeabi_dadd+0xa8>
 8000c92:	e0d0      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8000c94:	027f      	lsls	r7, r7, #9
 8000c96:	0a7f      	lsrs	r7, r7, #9
 8000c98:	2f00      	cmp	r7, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0xb2>
 8000c9c:	e0ff      	b.n	8000e9e <__aeabi_dadd+0x2b2>
 8000c9e:	0038      	movs	r0, r7
 8000ca0:	f001 fe5a 	bl	8002958 <__clzsi2>
 8000ca4:	0001      	movs	r1, r0
 8000ca6:	3908      	subs	r1, #8
 8000ca8:	2320      	movs	r3, #32
 8000caa:	0022      	movs	r2, r4
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	408f      	lsls	r7, r1
 8000cb0:	40da      	lsrs	r2, r3
 8000cb2:	408c      	lsls	r4, r1
 8000cb4:	4317      	orrs	r7, r2
 8000cb6:	42b1      	cmp	r1, r6
 8000cb8:	da00      	bge.n	8000cbc <__aeabi_dadd+0xd0>
 8000cba:	e0ff      	b.n	8000ebc <__aeabi_dadd+0x2d0>
 8000cbc:	1b89      	subs	r1, r1, r6
 8000cbe:	1c4b      	adds	r3, r1, #1
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	dd00      	ble.n	8000cc6 <__aeabi_dadd+0xda>
 8000cc4:	e0a8      	b.n	8000e18 <__aeabi_dadd+0x22c>
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	0039      	movs	r1, r7
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	0020      	movs	r0, r4
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	1e62      	subs	r2, r4, #1
 8000cd6:	4194      	sbcs	r4, r2
 8000cd8:	40df      	lsrs	r7, r3
 8000cda:	2600      	movs	r6, #0
 8000cdc:	4301      	orrs	r1, r0
 8000cde:	430c      	orrs	r4, r1
 8000ce0:	0763      	lsls	r3, r4, #29
 8000ce2:	d009      	beq.n	8000cf8 <__aeabi_dadd+0x10c>
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4023      	ands	r3, r4
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d005      	beq.n	8000cf8 <__aeabi_dadd+0x10c>
 8000cec:	1d23      	adds	r3, r4, #4
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	41a4      	sbcs	r4, r4
 8000cf2:	4264      	negs	r4, r4
 8000cf4:	193f      	adds	r7, r7, r4
 8000cf6:	001c      	movs	r4, r3
 8000cf8:	023b      	lsls	r3, r7, #8
 8000cfa:	d400      	bmi.n	8000cfe <__aeabi_dadd+0x112>
 8000cfc:	e09e      	b.n	8000e3c <__aeabi_dadd+0x250>
 8000cfe:	4b95      	ldr	r3, [pc, #596]	; (8000f54 <__aeabi_dadd+0x368>)
 8000d00:	3601      	adds	r6, #1
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x11c>
 8000d06:	e0b7      	b.n	8000e78 <__aeabi_dadd+0x28c>
 8000d08:	4a93      	ldr	r2, [pc, #588]	; (8000f58 <__aeabi_dadd+0x36c>)
 8000d0a:	08e4      	lsrs	r4, r4, #3
 8000d0c:	4017      	ands	r7, r2
 8000d0e:	077b      	lsls	r3, r7, #29
 8000d10:	0571      	lsls	r1, r6, #21
 8000d12:	027f      	lsls	r7, r7, #9
 8000d14:	4323      	orrs	r3, r4
 8000d16:	0b3f      	lsrs	r7, r7, #12
 8000d18:	0d4a      	lsrs	r2, r1, #21
 8000d1a:	0512      	lsls	r2, r2, #20
 8000d1c:	433a      	orrs	r2, r7
 8000d1e:	07ed      	lsls	r5, r5, #31
 8000d20:	432a      	orrs	r2, r5
 8000d22:	0018      	movs	r0, r3
 8000d24:	0011      	movs	r1, r2
 8000d26:	bce0      	pop	{r5, r6, r7}
 8000d28:	46ba      	mov	sl, r7
 8000d2a:	46b1      	mov	r9, r6
 8000d2c:	46a8      	mov	r8, r5
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d04b      	beq.n	8000dcc <__aeabi_dadd+0x1e0>
 8000d34:	464c      	mov	r4, r9
 8000d36:	1ba4      	subs	r4, r4, r6
 8000d38:	46a4      	mov	ip, r4
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_dadd+0x154>
 8000d3e:	e123      	b.n	8000f88 <__aeabi_dadd+0x39c>
 8000d40:	0004      	movs	r4, r0
 8000d42:	431c      	orrs	r4, r3
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x15c>
 8000d46:	e1af      	b.n	80010a8 <__aeabi_dadd+0x4bc>
 8000d48:	4662      	mov	r2, ip
 8000d4a:	1e54      	subs	r4, r2, #1
 8000d4c:	2a01      	cmp	r2, #1
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0x166>
 8000d50:	e215      	b.n	800117e <__aeabi_dadd+0x592>
 8000d52:	4d80      	ldr	r5, [pc, #512]	; (8000f54 <__aeabi_dadd+0x368>)
 8000d54:	45ac      	cmp	ip, r5
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x16e>
 8000d58:	e1c8      	b.n	80010ec <__aeabi_dadd+0x500>
 8000d5a:	46a4      	mov	ip, r4
 8000d5c:	e11b      	b.n	8000f96 <__aeabi_dadd+0x3aa>
 8000d5e:	464a      	mov	r2, r9
 8000d60:	1ab2      	subs	r2, r6, r2
 8000d62:	4694      	mov	ip, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_dadd+0x17e>
 8000d68:	e0ac      	b.n	8000ec4 <__aeabi_dadd+0x2d8>
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d043      	beq.n	8000df8 <__aeabi_dadd+0x20c>
 8000d70:	4a78      	ldr	r2, [pc, #480]	; (8000f54 <__aeabi_dadd+0x368>)
 8000d72:	4296      	cmp	r6, r2
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x18c>
 8000d76:	e1af      	b.n	80010d8 <__aeabi_dadd+0x4ec>
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	0412      	lsls	r2, r2, #16
 8000d7e:	4314      	orrs	r4, r2
 8000d80:	46a0      	mov	r8, r4
 8000d82:	4662      	mov	r2, ip
 8000d84:	2a38      	cmp	r2, #56	; 0x38
 8000d86:	dc67      	bgt.n	8000e58 <__aeabi_dadd+0x26c>
 8000d88:	2a1f      	cmp	r2, #31
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dadd+0x1a2>
 8000d8c:	e15f      	b.n	800104e <__aeabi_dadd+0x462>
 8000d8e:	4647      	mov	r7, r8
 8000d90:	3a20      	subs	r2, #32
 8000d92:	40d7      	lsrs	r7, r2
 8000d94:	4662      	mov	r2, ip
 8000d96:	2a20      	cmp	r2, #32
 8000d98:	d005      	beq.n	8000da6 <__aeabi_dadd+0x1ba>
 8000d9a:	4664      	mov	r4, ip
 8000d9c:	2240      	movs	r2, #64	; 0x40
 8000d9e:	1b12      	subs	r2, r2, r4
 8000da0:	4644      	mov	r4, r8
 8000da2:	4094      	lsls	r4, r2
 8000da4:	4321      	orrs	r1, r4
 8000da6:	1e4a      	subs	r2, r1, #1
 8000da8:	4191      	sbcs	r1, r2
 8000daa:	000c      	movs	r4, r1
 8000dac:	433c      	orrs	r4, r7
 8000dae:	e057      	b.n	8000e60 <__aeabi_dadd+0x274>
 8000db0:	003a      	movs	r2, r7
 8000db2:	430a      	orrs	r2, r1
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x1cc>
 8000db6:	e105      	b.n	8000fc4 <__aeabi_dadd+0x3d8>
 8000db8:	0022      	movs	r2, r4
 8000dba:	3a01      	subs	r2, #1
 8000dbc:	2c01      	cmp	r4, #1
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_dadd+0x1d6>
 8000dc0:	e182      	b.n	80010c8 <__aeabi_dadd+0x4dc>
 8000dc2:	4c64      	ldr	r4, [pc, #400]	; (8000f54 <__aeabi_dadd+0x368>)
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	d05b      	beq.n	8000e80 <__aeabi_dadd+0x294>
 8000dc8:	4694      	mov	ip, r2
 8000dca:	e741      	b.n	8000c50 <__aeabi_dadd+0x64>
 8000dcc:	4c63      	ldr	r4, [pc, #396]	; (8000f5c <__aeabi_dadd+0x370>)
 8000dce:	1c77      	adds	r7, r6, #1
 8000dd0:	4227      	tst	r7, r4
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x1ea>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_dadd+0x374>
 8000dd6:	0004      	movs	r4, r0
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x1f4>
 8000dde:	e169      	b.n	80010b4 <__aeabi_dadd+0x4c8>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x1fa>
 8000de4:	e1bf      	b.n	8001166 <__aeabi_dadd+0x57a>
 8000de6:	4644      	mov	r4, r8
 8000de8:	430c      	orrs	r4, r1
 8000dea:	d000      	beq.n	8000dee <__aeabi_dadd+0x202>
 8000dec:	e1d0      	b.n	8001190 <__aeabi_dadd+0x5a4>
 8000dee:	0742      	lsls	r2, r0, #29
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	08c0      	lsrs	r0, r0, #3
 8000df6:	e029      	b.n	8000e4c <__aeabi_dadd+0x260>
 8000df8:	003a      	movs	r2, r7
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dadd+0x214>
 8000dfe:	e170      	b.n	80010e2 <__aeabi_dadd+0x4f6>
 8000e00:	4662      	mov	r2, ip
 8000e02:	4664      	mov	r4, ip
 8000e04:	3a01      	subs	r2, #1
 8000e06:	2c01      	cmp	r4, #1
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dadd+0x220>
 8000e0a:	e0e0      	b.n	8000fce <__aeabi_dadd+0x3e2>
 8000e0c:	4c51      	ldr	r4, [pc, #324]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dadd+0x228>
 8000e12:	e161      	b.n	80010d8 <__aeabi_dadd+0x4ec>
 8000e14:	4694      	mov	ip, r2
 8000e16:	e7b4      	b.n	8000d82 <__aeabi_dadd+0x196>
 8000e18:	003a      	movs	r2, r7
 8000e1a:	391f      	subs	r1, #31
 8000e1c:	40ca      	lsrs	r2, r1
 8000e1e:	0011      	movs	r1, r2
 8000e20:	2b20      	cmp	r3, #32
 8000e22:	d003      	beq.n	8000e2c <__aeabi_dadd+0x240>
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	433c      	orrs	r4, r7
 8000e2c:	1e63      	subs	r3, r4, #1
 8000e2e:	419c      	sbcs	r4, r3
 8000e30:	2700      	movs	r7, #0
 8000e32:	2600      	movs	r6, #0
 8000e34:	430c      	orrs	r4, r1
 8000e36:	0763      	lsls	r3, r4, #29
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x250>
 8000e3a:	e753      	b.n	8000ce4 <__aeabi_dadd+0xf8>
 8000e3c:	46b4      	mov	ip, r6
 8000e3e:	08e4      	lsrs	r4, r4, #3
 8000e40:	077b      	lsls	r3, r7, #29
 8000e42:	4323      	orrs	r3, r4
 8000e44:	08f8      	lsrs	r0, r7, #3
 8000e46:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e48:	4594      	cmp	ip, r2
 8000e4a:	d01d      	beq.n	8000e88 <__aeabi_dadd+0x29c>
 8000e4c:	4662      	mov	r2, ip
 8000e4e:	0307      	lsls	r7, r0, #12
 8000e50:	0552      	lsls	r2, r2, #21
 8000e52:	0b3f      	lsrs	r7, r7, #12
 8000e54:	0d52      	lsrs	r2, r2, #21
 8000e56:	e760      	b.n	8000d1a <__aeabi_dadd+0x12e>
 8000e58:	4644      	mov	r4, r8
 8000e5a:	430c      	orrs	r4, r1
 8000e5c:	1e62      	subs	r2, r4, #1
 8000e5e:	4194      	sbcs	r4, r2
 8000e60:	18e4      	adds	r4, r4, r3
 8000e62:	429c      	cmp	r4, r3
 8000e64:	419b      	sbcs	r3, r3
 8000e66:	425f      	negs	r7, r3
 8000e68:	183f      	adds	r7, r7, r0
 8000e6a:	023b      	lsls	r3, r7, #8
 8000e6c:	d5e3      	bpl.n	8000e36 <__aeabi_dadd+0x24a>
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e70:	3601      	adds	r6, #1
 8000e72:	429e      	cmp	r6, r3
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x28c>
 8000e76:	e0b5      	b.n	8000fe4 <__aeabi_dadd+0x3f8>
 8000e78:	0032      	movs	r2, r6
 8000e7a:	2700      	movs	r7, #0
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e74c      	b.n	8000d1a <__aeabi_dadd+0x12e>
 8000e80:	0742      	lsls	r2, r0, #29
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	08c0      	lsrs	r0, r0, #3
 8000e88:	001a      	movs	r2, r3
 8000e8a:	4302      	orrs	r2, r0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x2a4>
 8000e8e:	e1e1      	b.n	8001254 <__aeabi_dadd+0x668>
 8000e90:	2780      	movs	r7, #128	; 0x80
 8000e92:	033f      	lsls	r7, r7, #12
 8000e94:	4307      	orrs	r7, r0
 8000e96:	033f      	lsls	r7, r7, #12
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e9a:	0b3f      	lsrs	r7, r7, #12
 8000e9c:	e73d      	b.n	8000d1a <__aeabi_dadd+0x12e>
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f001 fd5a 	bl	8002958 <__clzsi2>
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	3118      	adds	r1, #24
 8000ea8:	291f      	cmp	r1, #31
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_dadd+0x2c2>
 8000eac:	e6fc      	b.n	8000ca8 <__aeabi_dadd+0xbc>
 8000eae:	3808      	subs	r0, #8
 8000eb0:	4084      	lsls	r4, r0
 8000eb2:	0027      	movs	r7, r4
 8000eb4:	2400      	movs	r4, #0
 8000eb6:	42b1      	cmp	r1, r6
 8000eb8:	db00      	blt.n	8000ebc <__aeabi_dadd+0x2d0>
 8000eba:	e6ff      	b.n	8000cbc <__aeabi_dadd+0xd0>
 8000ebc:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <__aeabi_dadd+0x36c>)
 8000ebe:	1a76      	subs	r6, r6, r1
 8000ec0:	4017      	ands	r7, r2
 8000ec2:	e70d      	b.n	8000ce0 <__aeabi_dadd+0xf4>
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d02f      	beq.n	8000f28 <__aeabi_dadd+0x33c>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	1b92      	subs	r2, r2, r6
 8000ecc:	4694      	mov	ip, r2
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dadd+0x2e8>
 8000ed2:	e0ad      	b.n	8001030 <__aeabi_dadd+0x444>
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <__aeabi_dadd+0x368>)
 8000ed6:	4591      	cmp	r9, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0x2f0>
 8000eda:	e10f      	b.n	80010fc <__aeabi_dadd+0x510>
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0412      	lsls	r2, r2, #16
 8000ee0:	4310      	orrs	r0, r2
 8000ee2:	4662      	mov	r2, ip
 8000ee4:	2a38      	cmp	r2, #56	; 0x38
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dadd+0x2fe>
 8000ee8:	e10f      	b.n	800110a <__aeabi_dadd+0x51e>
 8000eea:	2a1f      	cmp	r2, #31
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_dadd+0x304>
 8000eee:	e180      	b.n	80011f2 <__aeabi_dadd+0x606>
 8000ef0:	4664      	mov	r4, ip
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	001e      	movs	r6, r3
 8000ef6:	1b12      	subs	r2, r2, r4
 8000ef8:	4667      	mov	r7, ip
 8000efa:	0004      	movs	r4, r0
 8000efc:	4093      	lsls	r3, r2
 8000efe:	4094      	lsls	r4, r2
 8000f00:	40fe      	lsrs	r6, r7
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	4193      	sbcs	r3, r2
 8000f06:	40f8      	lsrs	r0, r7
 8000f08:	4334      	orrs	r4, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	4480      	add	r8, r0
 8000f0e:	1864      	adds	r4, r4, r1
 8000f10:	428c      	cmp	r4, r1
 8000f12:	41bf      	sbcs	r7, r7
 8000f14:	427f      	negs	r7, r7
 8000f16:	464e      	mov	r6, r9
 8000f18:	4447      	add	r7, r8
 8000f1a:	e7a6      	b.n	8000e6a <__aeabi_dadd+0x27e>
 8000f1c:	4642      	mov	r2, r8
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	0011      	movs	r1, r2
 8000f22:	1e4a      	subs	r2, r1, #1
 8000f24:	4191      	sbcs	r1, r2
 8000f26:	e6ad      	b.n	8000c84 <__aeabi_dadd+0x98>
 8000f28:	4c0c      	ldr	r4, [pc, #48]	; (8000f5c <__aeabi_dadd+0x370>)
 8000f2a:	1c72      	adds	r2, r6, #1
 8000f2c:	4222      	tst	r2, r4
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_dadd+0x346>
 8000f30:	e0a1      	b.n	8001076 <__aeabi_dadd+0x48a>
 8000f32:	0002      	movs	r2, r0
 8000f34:	431a      	orrs	r2, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dadd+0x350>
 8000f3a:	e0fa      	b.n	8001132 <__aeabi_dadd+0x546>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x356>
 8000f40:	e145      	b.n	80011ce <__aeabi_dadd+0x5e2>
 8000f42:	003a      	movs	r2, r7
 8000f44:	430a      	orrs	r2, r1
 8000f46:	d000      	beq.n	8000f4a <__aeabi_dadd+0x35e>
 8000f48:	e146      	b.n	80011d8 <__aeabi_dadd+0x5ec>
 8000f4a:	0742      	lsls	r2, r0, #29
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	08c0      	lsrs	r0, r0, #3
 8000f52:	e77b      	b.n	8000e4c <__aeabi_dadd+0x260>
 8000f54:	000007ff 	.word	0x000007ff
 8000f58:	ff7fffff 	.word	0xff7fffff
 8000f5c:	000007fe 	.word	0x000007fe
 8000f60:	4647      	mov	r7, r8
 8000f62:	1a5c      	subs	r4, r3, r1
 8000f64:	1bc2      	subs	r2, r0, r7
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	41bf      	sbcs	r7, r7
 8000f6a:	427f      	negs	r7, r7
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	464a      	mov	r2, r9
 8000f72:	1abf      	subs	r7, r7, r2
 8000f74:	023a      	lsls	r2, r7, #8
 8000f76:	d500      	bpl.n	8000f7a <__aeabi_dadd+0x38e>
 8000f78:	e08d      	b.n	8001096 <__aeabi_dadd+0x4aa>
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	433b      	orrs	r3, r7
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_dadd+0x396>
 8000f80:	e68a      	b.n	8000c98 <__aeabi_dadd+0xac>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	e761      	b.n	8000e4c <__aeabi_dadd+0x260>
 8000f88:	4cb4      	ldr	r4, [pc, #720]	; (800125c <__aeabi_dadd+0x670>)
 8000f8a:	45a1      	cmp	r9, r4
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x3a4>
 8000f8e:	e0ad      	b.n	80010ec <__aeabi_dadd+0x500>
 8000f90:	2480      	movs	r4, #128	; 0x80
 8000f92:	0424      	lsls	r4, r4, #16
 8000f94:	4320      	orrs	r0, r4
 8000f96:	4664      	mov	r4, ip
 8000f98:	2c38      	cmp	r4, #56	; 0x38
 8000f9a:	dc3d      	bgt.n	8001018 <__aeabi_dadd+0x42c>
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	2c1f      	cmp	r4, #31
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_dadd+0x3b8>
 8000fa2:	e0b7      	b.n	8001114 <__aeabi_dadd+0x528>
 8000fa4:	2520      	movs	r5, #32
 8000fa6:	001e      	movs	r6, r3
 8000fa8:	1b2d      	subs	r5, r5, r4
 8000faa:	0004      	movs	r4, r0
 8000fac:	40ab      	lsls	r3, r5
 8000fae:	40ac      	lsls	r4, r5
 8000fb0:	40d6      	lsrs	r6, r2
 8000fb2:	40d0      	lsrs	r0, r2
 8000fb4:	4642      	mov	r2, r8
 8000fb6:	1e5d      	subs	r5, r3, #1
 8000fb8:	41ab      	sbcs	r3, r5
 8000fba:	4334      	orrs	r4, r6
 8000fbc:	1a12      	subs	r2, r2, r0
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4323      	orrs	r3, r4
 8000fc2:	e02c      	b.n	800101e <__aeabi_dadd+0x432>
 8000fc4:	0742      	lsls	r2, r0, #29
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	08c0      	lsrs	r0, r0, #3
 8000fcc:	e73b      	b.n	8000e46 <__aeabi_dadd+0x25a>
 8000fce:	185c      	adds	r4, r3, r1
 8000fd0:	429c      	cmp	r4, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	4440      	add	r0, r8
 8000fd6:	425b      	negs	r3, r3
 8000fd8:	18c7      	adds	r7, r0, r3
 8000fda:	2601      	movs	r6, #1
 8000fdc:	023b      	lsls	r3, r7, #8
 8000fde:	d400      	bmi.n	8000fe2 <__aeabi_dadd+0x3f6>
 8000fe0:	e729      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8000fe2:	2602      	movs	r6, #2
 8000fe4:	4a9e      	ldr	r2, [pc, #632]	; (8001260 <__aeabi_dadd+0x674>)
 8000fe6:	0863      	lsrs	r3, r4, #1
 8000fe8:	4017      	ands	r7, r2
 8000fea:	2201      	movs	r2, #1
 8000fec:	4014      	ands	r4, r2
 8000fee:	431c      	orrs	r4, r3
 8000ff0:	07fb      	lsls	r3, r7, #31
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	087f      	lsrs	r7, r7, #1
 8000ff6:	e673      	b.n	8000ce0 <__aeabi_dadd+0xf4>
 8000ff8:	4644      	mov	r4, r8
 8000ffa:	3a20      	subs	r2, #32
 8000ffc:	40d4      	lsrs	r4, r2
 8000ffe:	4662      	mov	r2, ip
 8001000:	2a20      	cmp	r2, #32
 8001002:	d005      	beq.n	8001010 <__aeabi_dadd+0x424>
 8001004:	4667      	mov	r7, ip
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	1bd2      	subs	r2, r2, r7
 800100a:	4647      	mov	r7, r8
 800100c:	4097      	lsls	r7, r2
 800100e:	4339      	orrs	r1, r7
 8001010:	1e4a      	subs	r2, r1, #1
 8001012:	4191      	sbcs	r1, r2
 8001014:	4321      	orrs	r1, r4
 8001016:	e635      	b.n	8000c84 <__aeabi_dadd+0x98>
 8001018:	4303      	orrs	r3, r0
 800101a:	1e58      	subs	r0, r3, #1
 800101c:	4183      	sbcs	r3, r0
 800101e:	1acc      	subs	r4, r1, r3
 8001020:	42a1      	cmp	r1, r4
 8001022:	41bf      	sbcs	r7, r7
 8001024:	4643      	mov	r3, r8
 8001026:	427f      	negs	r7, r7
 8001028:	4655      	mov	r5, sl
 800102a:	464e      	mov	r6, r9
 800102c:	1bdf      	subs	r7, r3, r7
 800102e:	e62e      	b.n	8000c8e <__aeabi_dadd+0xa2>
 8001030:	0002      	movs	r2, r0
 8001032:	431a      	orrs	r2, r3
 8001034:	d100      	bne.n	8001038 <__aeabi_dadd+0x44c>
 8001036:	e0bd      	b.n	80011b4 <__aeabi_dadd+0x5c8>
 8001038:	4662      	mov	r2, ip
 800103a:	4664      	mov	r4, ip
 800103c:	3a01      	subs	r2, #1
 800103e:	2c01      	cmp	r4, #1
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x458>
 8001042:	e0e5      	b.n	8001210 <__aeabi_dadd+0x624>
 8001044:	4c85      	ldr	r4, [pc, #532]	; (800125c <__aeabi_dadd+0x670>)
 8001046:	45a4      	cmp	ip, r4
 8001048:	d058      	beq.n	80010fc <__aeabi_dadd+0x510>
 800104a:	4694      	mov	ip, r2
 800104c:	e749      	b.n	8000ee2 <__aeabi_dadd+0x2f6>
 800104e:	4664      	mov	r4, ip
 8001050:	2220      	movs	r2, #32
 8001052:	1b12      	subs	r2, r2, r4
 8001054:	4644      	mov	r4, r8
 8001056:	4094      	lsls	r4, r2
 8001058:	000f      	movs	r7, r1
 800105a:	46a1      	mov	r9, r4
 800105c:	4664      	mov	r4, ip
 800105e:	4091      	lsls	r1, r2
 8001060:	40e7      	lsrs	r7, r4
 8001062:	464c      	mov	r4, r9
 8001064:	1e4a      	subs	r2, r1, #1
 8001066:	4191      	sbcs	r1, r2
 8001068:	433c      	orrs	r4, r7
 800106a:	4642      	mov	r2, r8
 800106c:	430c      	orrs	r4, r1
 800106e:	4661      	mov	r1, ip
 8001070:	40ca      	lsrs	r2, r1
 8001072:	1880      	adds	r0, r0, r2
 8001074:	e6f4      	b.n	8000e60 <__aeabi_dadd+0x274>
 8001076:	4c79      	ldr	r4, [pc, #484]	; (800125c <__aeabi_dadd+0x670>)
 8001078:	42a2      	cmp	r2, r4
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x492>
 800107c:	e6fd      	b.n	8000e7a <__aeabi_dadd+0x28e>
 800107e:	1859      	adds	r1, r3, r1
 8001080:	4299      	cmp	r1, r3
 8001082:	419b      	sbcs	r3, r3
 8001084:	4440      	add	r0, r8
 8001086:	425f      	negs	r7, r3
 8001088:	19c7      	adds	r7, r0, r7
 800108a:	07fc      	lsls	r4, r7, #31
 800108c:	0849      	lsrs	r1, r1, #1
 800108e:	0016      	movs	r6, r2
 8001090:	430c      	orrs	r4, r1
 8001092:	087f      	lsrs	r7, r7, #1
 8001094:	e6cf      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8001096:	1acc      	subs	r4, r1, r3
 8001098:	42a1      	cmp	r1, r4
 800109a:	41bf      	sbcs	r7, r7
 800109c:	4643      	mov	r3, r8
 800109e:	427f      	negs	r7, r7
 80010a0:	1a18      	subs	r0, r3, r0
 80010a2:	4655      	mov	r5, sl
 80010a4:	1bc7      	subs	r7, r0, r7
 80010a6:	e5f7      	b.n	8000c98 <__aeabi_dadd+0xac>
 80010a8:	08c9      	lsrs	r1, r1, #3
 80010aa:	077b      	lsls	r3, r7, #29
 80010ac:	4655      	mov	r5, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	08f8      	lsrs	r0, r7, #3
 80010b2:	e6c8      	b.n	8000e46 <__aeabi_dadd+0x25a>
 80010b4:	2c00      	cmp	r4, #0
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x4ce>
 80010b8:	e081      	b.n	80011be <__aeabi_dadd+0x5d2>
 80010ba:	4643      	mov	r3, r8
 80010bc:	430b      	orrs	r3, r1
 80010be:	d115      	bne.n	80010ec <__aeabi_dadd+0x500>
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	2500      	movs	r5, #0
 80010c4:	0300      	lsls	r0, r0, #12
 80010c6:	e6e3      	b.n	8000e90 <__aeabi_dadd+0x2a4>
 80010c8:	1a5c      	subs	r4, r3, r1
 80010ca:	42a3      	cmp	r3, r4
 80010cc:	419b      	sbcs	r3, r3
 80010ce:	1bc7      	subs	r7, r0, r7
 80010d0:	425b      	negs	r3, r3
 80010d2:	2601      	movs	r6, #1
 80010d4:	1aff      	subs	r7, r7, r3
 80010d6:	e5da      	b.n	8000c8e <__aeabi_dadd+0xa2>
 80010d8:	0742      	lsls	r2, r0, #29
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	4313      	orrs	r3, r2
 80010de:	08c0      	lsrs	r0, r0, #3
 80010e0:	e6d2      	b.n	8000e88 <__aeabi_dadd+0x29c>
 80010e2:	0742      	lsls	r2, r0, #29
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	08c0      	lsrs	r0, r0, #3
 80010ea:	e6ac      	b.n	8000e46 <__aeabi_dadd+0x25a>
 80010ec:	4643      	mov	r3, r8
 80010ee:	4642      	mov	r2, r8
 80010f0:	08c9      	lsrs	r1, r1, #3
 80010f2:	075b      	lsls	r3, r3, #29
 80010f4:	4655      	mov	r5, sl
 80010f6:	430b      	orrs	r3, r1
 80010f8:	08d0      	lsrs	r0, r2, #3
 80010fa:	e6c5      	b.n	8000e88 <__aeabi_dadd+0x29c>
 80010fc:	4643      	mov	r3, r8
 80010fe:	4642      	mov	r2, r8
 8001100:	075b      	lsls	r3, r3, #29
 8001102:	08c9      	lsrs	r1, r1, #3
 8001104:	430b      	orrs	r3, r1
 8001106:	08d0      	lsrs	r0, r2, #3
 8001108:	e6be      	b.n	8000e88 <__aeabi_dadd+0x29c>
 800110a:	4303      	orrs	r3, r0
 800110c:	001c      	movs	r4, r3
 800110e:	1e63      	subs	r3, r4, #1
 8001110:	419c      	sbcs	r4, r3
 8001112:	e6fc      	b.n	8000f0e <__aeabi_dadd+0x322>
 8001114:	0002      	movs	r2, r0
 8001116:	3c20      	subs	r4, #32
 8001118:	40e2      	lsrs	r2, r4
 800111a:	0014      	movs	r4, r2
 800111c:	4662      	mov	r2, ip
 800111e:	2a20      	cmp	r2, #32
 8001120:	d003      	beq.n	800112a <__aeabi_dadd+0x53e>
 8001122:	2540      	movs	r5, #64	; 0x40
 8001124:	1aad      	subs	r5, r5, r2
 8001126:	40a8      	lsls	r0, r5
 8001128:	4303      	orrs	r3, r0
 800112a:	1e58      	subs	r0, r3, #1
 800112c:	4183      	sbcs	r3, r0
 800112e:	4323      	orrs	r3, r4
 8001130:	e775      	b.n	800101e <__aeabi_dadd+0x432>
 8001132:	2a00      	cmp	r2, #0
 8001134:	d0e2      	beq.n	80010fc <__aeabi_dadd+0x510>
 8001136:	003a      	movs	r2, r7
 8001138:	430a      	orrs	r2, r1
 800113a:	d0cd      	beq.n	80010d8 <__aeabi_dadd+0x4ec>
 800113c:	0742      	lsls	r2, r0, #29
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	4313      	orrs	r3, r2
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	08c0      	lsrs	r0, r0, #3
 8001146:	0312      	lsls	r2, r2, #12
 8001148:	4210      	tst	r0, r2
 800114a:	d006      	beq.n	800115a <__aeabi_dadd+0x56e>
 800114c:	08fc      	lsrs	r4, r7, #3
 800114e:	4214      	tst	r4, r2
 8001150:	d103      	bne.n	800115a <__aeabi_dadd+0x56e>
 8001152:	0020      	movs	r0, r4
 8001154:	08cb      	lsrs	r3, r1, #3
 8001156:	077a      	lsls	r2, r7, #29
 8001158:	4313      	orrs	r3, r2
 800115a:	0f5a      	lsrs	r2, r3, #29
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	0752      	lsls	r2, r2, #29
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	4313      	orrs	r3, r2
 8001164:	e690      	b.n	8000e88 <__aeabi_dadd+0x29c>
 8001166:	4643      	mov	r3, r8
 8001168:	430b      	orrs	r3, r1
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x582>
 800116c:	e709      	b.n	8000f82 <__aeabi_dadd+0x396>
 800116e:	4643      	mov	r3, r8
 8001170:	4642      	mov	r2, r8
 8001172:	08c9      	lsrs	r1, r1, #3
 8001174:	075b      	lsls	r3, r3, #29
 8001176:	4655      	mov	r5, sl
 8001178:	430b      	orrs	r3, r1
 800117a:	08d0      	lsrs	r0, r2, #3
 800117c:	e666      	b.n	8000e4c <__aeabi_dadd+0x260>
 800117e:	1acc      	subs	r4, r1, r3
 8001180:	42a1      	cmp	r1, r4
 8001182:	4189      	sbcs	r1, r1
 8001184:	1a3f      	subs	r7, r7, r0
 8001186:	4249      	negs	r1, r1
 8001188:	4655      	mov	r5, sl
 800118a:	2601      	movs	r6, #1
 800118c:	1a7f      	subs	r7, r7, r1
 800118e:	e57e      	b.n	8000c8e <__aeabi_dadd+0xa2>
 8001190:	4642      	mov	r2, r8
 8001192:	1a5c      	subs	r4, r3, r1
 8001194:	1a87      	subs	r7, r0, r2
 8001196:	42a3      	cmp	r3, r4
 8001198:	4192      	sbcs	r2, r2
 800119a:	4252      	negs	r2, r2
 800119c:	1abf      	subs	r7, r7, r2
 800119e:	023a      	lsls	r2, r7, #8
 80011a0:	d53d      	bpl.n	800121e <__aeabi_dadd+0x632>
 80011a2:	1acc      	subs	r4, r1, r3
 80011a4:	42a1      	cmp	r1, r4
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	4643      	mov	r3, r8
 80011aa:	4249      	negs	r1, r1
 80011ac:	1a1f      	subs	r7, r3, r0
 80011ae:	4655      	mov	r5, sl
 80011b0:	1a7f      	subs	r7, r7, r1
 80011b2:	e595      	b.n	8000ce0 <__aeabi_dadd+0xf4>
 80011b4:	077b      	lsls	r3, r7, #29
 80011b6:	08c9      	lsrs	r1, r1, #3
 80011b8:	430b      	orrs	r3, r1
 80011ba:	08f8      	lsrs	r0, r7, #3
 80011bc:	e643      	b.n	8000e46 <__aeabi_dadd+0x25a>
 80011be:	4644      	mov	r4, r8
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	430c      	orrs	r4, r1
 80011c4:	d130      	bne.n	8001228 <__aeabi_dadd+0x63c>
 80011c6:	0742      	lsls	r2, r0, #29
 80011c8:	4313      	orrs	r3, r2
 80011ca:	08c0      	lsrs	r0, r0, #3
 80011cc:	e65c      	b.n	8000e88 <__aeabi_dadd+0x29c>
 80011ce:	077b      	lsls	r3, r7, #29
 80011d0:	08c9      	lsrs	r1, r1, #3
 80011d2:	430b      	orrs	r3, r1
 80011d4:	08f8      	lsrs	r0, r7, #3
 80011d6:	e639      	b.n	8000e4c <__aeabi_dadd+0x260>
 80011d8:	185c      	adds	r4, r3, r1
 80011da:	429c      	cmp	r4, r3
 80011dc:	419b      	sbcs	r3, r3
 80011de:	4440      	add	r0, r8
 80011e0:	425b      	negs	r3, r3
 80011e2:	18c7      	adds	r7, r0, r3
 80011e4:	023b      	lsls	r3, r7, #8
 80011e6:	d400      	bmi.n	80011ea <__aeabi_dadd+0x5fe>
 80011e8:	e625      	b.n	8000e36 <__aeabi_dadd+0x24a>
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <__aeabi_dadd+0x674>)
 80011ec:	2601      	movs	r6, #1
 80011ee:	401f      	ands	r7, r3
 80011f0:	e621      	b.n	8000e36 <__aeabi_dadd+0x24a>
 80011f2:	0004      	movs	r4, r0
 80011f4:	3a20      	subs	r2, #32
 80011f6:	40d4      	lsrs	r4, r2
 80011f8:	4662      	mov	r2, ip
 80011fa:	2a20      	cmp	r2, #32
 80011fc:	d004      	beq.n	8001208 <__aeabi_dadd+0x61c>
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	4666      	mov	r6, ip
 8001202:	1b92      	subs	r2, r2, r6
 8001204:	4090      	lsls	r0, r2
 8001206:	4303      	orrs	r3, r0
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	4193      	sbcs	r3, r2
 800120c:	431c      	orrs	r4, r3
 800120e:	e67e      	b.n	8000f0e <__aeabi_dadd+0x322>
 8001210:	185c      	adds	r4, r3, r1
 8001212:	428c      	cmp	r4, r1
 8001214:	4189      	sbcs	r1, r1
 8001216:	4440      	add	r0, r8
 8001218:	4249      	negs	r1, r1
 800121a:	1847      	adds	r7, r0, r1
 800121c:	e6dd      	b.n	8000fda <__aeabi_dadd+0x3ee>
 800121e:	0023      	movs	r3, r4
 8001220:	433b      	orrs	r3, r7
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x63a>
 8001224:	e6ad      	b.n	8000f82 <__aeabi_dadd+0x396>
 8001226:	e606      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8001228:	0744      	lsls	r4, r0, #29
 800122a:	4323      	orrs	r3, r4
 800122c:	2480      	movs	r4, #128	; 0x80
 800122e:	08c0      	lsrs	r0, r0, #3
 8001230:	0324      	lsls	r4, r4, #12
 8001232:	4220      	tst	r0, r4
 8001234:	d008      	beq.n	8001248 <__aeabi_dadd+0x65c>
 8001236:	4642      	mov	r2, r8
 8001238:	08d6      	lsrs	r6, r2, #3
 800123a:	4226      	tst	r6, r4
 800123c:	d104      	bne.n	8001248 <__aeabi_dadd+0x65c>
 800123e:	4655      	mov	r5, sl
 8001240:	0030      	movs	r0, r6
 8001242:	08cb      	lsrs	r3, r1, #3
 8001244:	0751      	lsls	r1, r2, #29
 8001246:	430b      	orrs	r3, r1
 8001248:	0f5a      	lsrs	r2, r3, #29
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	4313      	orrs	r3, r2
 8001252:	e619      	b.n	8000e88 <__aeabi_dadd+0x29c>
 8001254:	2300      	movs	r3, #0
 8001256:	4a01      	ldr	r2, [pc, #4]	; (800125c <__aeabi_dadd+0x670>)
 8001258:	001f      	movs	r7, r3
 800125a:	e55e      	b.n	8000d1a <__aeabi_dadd+0x12e>
 800125c:	000007ff 	.word	0x000007ff
 8001260:	ff7fffff 	.word	0xff7fffff

08001264 <__aeabi_ddiv>:
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	4657      	mov	r7, sl
 8001268:	464e      	mov	r6, r9
 800126a:	4645      	mov	r5, r8
 800126c:	46de      	mov	lr, fp
 800126e:	b5e0      	push	{r5, r6, r7, lr}
 8001270:	4681      	mov	r9, r0
 8001272:	0005      	movs	r5, r0
 8001274:	030c      	lsls	r4, r1, #12
 8001276:	0048      	lsls	r0, r1, #1
 8001278:	4692      	mov	sl, r2
 800127a:	001f      	movs	r7, r3
 800127c:	b085      	sub	sp, #20
 800127e:	0b24      	lsrs	r4, r4, #12
 8001280:	0d40      	lsrs	r0, r0, #21
 8001282:	0fce      	lsrs	r6, r1, #31
 8001284:	2800      	cmp	r0, #0
 8001286:	d100      	bne.n	800128a <__aeabi_ddiv+0x26>
 8001288:	e156      	b.n	8001538 <__aeabi_ddiv+0x2d4>
 800128a:	4bd4      	ldr	r3, [pc, #848]	; (80015dc <__aeabi_ddiv+0x378>)
 800128c:	4298      	cmp	r0, r3
 800128e:	d100      	bne.n	8001292 <__aeabi_ddiv+0x2e>
 8001290:	e172      	b.n	8001578 <__aeabi_ddiv+0x314>
 8001292:	0f6b      	lsrs	r3, r5, #29
 8001294:	00e4      	lsls	r4, r4, #3
 8001296:	431c      	orrs	r4, r3
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	4323      	orrs	r3, r4
 800129e:	4698      	mov	r8, r3
 80012a0:	4bcf      	ldr	r3, [pc, #828]	; (80015e0 <__aeabi_ddiv+0x37c>)
 80012a2:	00ed      	lsls	r5, r5, #3
 80012a4:	469b      	mov	fp, r3
 80012a6:	2300      	movs	r3, #0
 80012a8:	4699      	mov	r9, r3
 80012aa:	4483      	add	fp, r0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	033c      	lsls	r4, r7, #12
 80012b0:	007b      	lsls	r3, r7, #1
 80012b2:	4650      	mov	r0, sl
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	0d5b      	lsrs	r3, r3, #21
 80012b8:	0fff      	lsrs	r7, r7, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_ddiv+0x5c>
 80012be:	e11f      	b.n	8001500 <__aeabi_ddiv+0x29c>
 80012c0:	4ac6      	ldr	r2, [pc, #792]	; (80015dc <__aeabi_ddiv+0x378>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d100      	bne.n	80012c8 <__aeabi_ddiv+0x64>
 80012c6:	e162      	b.n	800158e <__aeabi_ddiv+0x32a>
 80012c8:	49c5      	ldr	r1, [pc, #788]	; (80015e0 <__aeabi_ddiv+0x37c>)
 80012ca:	0f42      	lsrs	r2, r0, #29
 80012cc:	468c      	mov	ip, r1
 80012ce:	00e4      	lsls	r4, r4, #3
 80012d0:	4659      	mov	r1, fp
 80012d2:	4314      	orrs	r4, r2
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	4463      	add	r3, ip
 80012d8:	0412      	lsls	r2, r2, #16
 80012da:	1acb      	subs	r3, r1, r3
 80012dc:	4314      	orrs	r4, r2
 80012de:	469b      	mov	fp, r3
 80012e0:	00c2      	lsls	r2, r0, #3
 80012e2:	2000      	movs	r0, #0
 80012e4:	0033      	movs	r3, r6
 80012e6:	407b      	eors	r3, r7
 80012e8:	469a      	mov	sl, r3
 80012ea:	464b      	mov	r3, r9
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d827      	bhi.n	8001340 <__aeabi_ddiv+0xdc>
 80012f0:	49bc      	ldr	r1, [pc, #752]	; (80015e4 <__aeabi_ddiv+0x380>)
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	58cb      	ldr	r3, [r1, r3]
 80012f6:	469f      	mov	pc, r3
 80012f8:	46b2      	mov	sl, r6
 80012fa:	9b00      	ldr	r3, [sp, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d016      	beq.n	800132e <__aeabi_ddiv+0xca>
 8001300:	2b03      	cmp	r3, #3
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0xa2>
 8001304:	e28e      	b.n	8001824 <__aeabi_ddiv+0x5c0>
 8001306:	2b01      	cmp	r3, #1
 8001308:	d000      	beq.n	800130c <__aeabi_ddiv+0xa8>
 800130a:	e0d9      	b.n	80014c0 <__aeabi_ddiv+0x25c>
 800130c:	2300      	movs	r3, #0
 800130e:	2400      	movs	r4, #0
 8001310:	2500      	movs	r5, #0
 8001312:	4652      	mov	r2, sl
 8001314:	051b      	lsls	r3, r3, #20
 8001316:	4323      	orrs	r3, r4
 8001318:	07d2      	lsls	r2, r2, #31
 800131a:	4313      	orrs	r3, r2
 800131c:	0028      	movs	r0, r5
 800131e:	0019      	movs	r1, r3
 8001320:	b005      	add	sp, #20
 8001322:	bcf0      	pop	{r4, r5, r6, r7}
 8001324:	46bb      	mov	fp, r7
 8001326:	46b2      	mov	sl, r6
 8001328:	46a9      	mov	r9, r5
 800132a:	46a0      	mov	r8, r4
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	2400      	movs	r4, #0
 8001330:	2500      	movs	r5, #0
 8001332:	4baa      	ldr	r3, [pc, #680]	; (80015dc <__aeabi_ddiv+0x378>)
 8001334:	e7ed      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001336:	46ba      	mov	sl, r7
 8001338:	46a0      	mov	r8, r4
 800133a:	0015      	movs	r5, r2
 800133c:	9000      	str	r0, [sp, #0]
 800133e:	e7dc      	b.n	80012fa <__aeabi_ddiv+0x96>
 8001340:	4544      	cmp	r4, r8
 8001342:	d200      	bcs.n	8001346 <__aeabi_ddiv+0xe2>
 8001344:	e1c7      	b.n	80016d6 <__aeabi_ddiv+0x472>
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0xe6>
 8001348:	e1c2      	b.n	80016d0 <__aeabi_ddiv+0x46c>
 800134a:	2301      	movs	r3, #1
 800134c:	425b      	negs	r3, r3
 800134e:	469c      	mov	ip, r3
 8001350:	002e      	movs	r6, r5
 8001352:	4640      	mov	r0, r8
 8001354:	2500      	movs	r5, #0
 8001356:	44e3      	add	fp, ip
 8001358:	0223      	lsls	r3, r4, #8
 800135a:	0e14      	lsrs	r4, r2, #24
 800135c:	431c      	orrs	r4, r3
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	4699      	mov	r9, r3
 8001362:	0423      	lsls	r3, r4, #16
 8001364:	0c1f      	lsrs	r7, r3, #16
 8001366:	0212      	lsls	r2, r2, #8
 8001368:	4649      	mov	r1, r9
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	9701      	str	r7, [sp, #4]
 800136e:	f7fe ff6d 	bl	800024c <__aeabi_uidivmod>
 8001372:	0002      	movs	r2, r0
 8001374:	437a      	muls	r2, r7
 8001376:	040b      	lsls	r3, r1, #16
 8001378:	0c31      	lsrs	r1, r6, #16
 800137a:	4680      	mov	r8, r0
 800137c:	4319      	orrs	r1, r3
 800137e:	428a      	cmp	r2, r1
 8001380:	d907      	bls.n	8001392 <__aeabi_ddiv+0x12e>
 8001382:	2301      	movs	r3, #1
 8001384:	425b      	negs	r3, r3
 8001386:	469c      	mov	ip, r3
 8001388:	1909      	adds	r1, r1, r4
 800138a:	44e0      	add	r8, ip
 800138c:	428c      	cmp	r4, r1
 800138e:	d800      	bhi.n	8001392 <__aeabi_ddiv+0x12e>
 8001390:	e207      	b.n	80017a2 <__aeabi_ddiv+0x53e>
 8001392:	1a88      	subs	r0, r1, r2
 8001394:	4649      	mov	r1, r9
 8001396:	f7fe ff59 	bl	800024c <__aeabi_uidivmod>
 800139a:	0409      	lsls	r1, r1, #16
 800139c:	468c      	mov	ip, r1
 800139e:	0431      	lsls	r1, r6, #16
 80013a0:	4666      	mov	r6, ip
 80013a2:	9a01      	ldr	r2, [sp, #4]
 80013a4:	0c09      	lsrs	r1, r1, #16
 80013a6:	4342      	muls	r2, r0
 80013a8:	0003      	movs	r3, r0
 80013aa:	4331      	orrs	r1, r6
 80013ac:	428a      	cmp	r2, r1
 80013ae:	d904      	bls.n	80013ba <__aeabi_ddiv+0x156>
 80013b0:	1909      	adds	r1, r1, r4
 80013b2:	3b01      	subs	r3, #1
 80013b4:	428c      	cmp	r4, r1
 80013b6:	d800      	bhi.n	80013ba <__aeabi_ddiv+0x156>
 80013b8:	e1ed      	b.n	8001796 <__aeabi_ddiv+0x532>
 80013ba:	1a88      	subs	r0, r1, r2
 80013bc:	4642      	mov	r2, r8
 80013be:	0412      	lsls	r2, r2, #16
 80013c0:	431a      	orrs	r2, r3
 80013c2:	4690      	mov	r8, r2
 80013c4:	4641      	mov	r1, r8
 80013c6:	9b00      	ldr	r3, [sp, #0]
 80013c8:	040e      	lsls	r6, r1, #16
 80013ca:	0c1b      	lsrs	r3, r3, #16
 80013cc:	001f      	movs	r7, r3
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	9b00      	ldr	r3, [sp, #0]
 80013d2:	0c36      	lsrs	r6, r6, #16
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	0c19      	lsrs	r1, r3, #16
 80013d8:	000b      	movs	r3, r1
 80013da:	4373      	muls	r3, r6
 80013dc:	0c12      	lsrs	r2, r2, #16
 80013de:	437e      	muls	r6, r7
 80013e0:	9103      	str	r1, [sp, #12]
 80013e2:	4351      	muls	r1, r2
 80013e4:	437a      	muls	r2, r7
 80013e6:	0c1f      	lsrs	r7, r3, #16
 80013e8:	46bc      	mov	ip, r7
 80013ea:	1876      	adds	r6, r6, r1
 80013ec:	4466      	add	r6, ip
 80013ee:	42b1      	cmp	r1, r6
 80013f0:	d903      	bls.n	80013fa <__aeabi_ddiv+0x196>
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0249      	lsls	r1, r1, #9
 80013f6:	468c      	mov	ip, r1
 80013f8:	4462      	add	r2, ip
 80013fa:	0c31      	lsrs	r1, r6, #16
 80013fc:	188a      	adds	r2, r1, r2
 80013fe:	0431      	lsls	r1, r6, #16
 8001400:	041e      	lsls	r6, r3, #16
 8001402:	0c36      	lsrs	r6, r6, #16
 8001404:	198e      	adds	r6, r1, r6
 8001406:	4290      	cmp	r0, r2
 8001408:	d302      	bcc.n	8001410 <__aeabi_ddiv+0x1ac>
 800140a:	d112      	bne.n	8001432 <__aeabi_ddiv+0x1ce>
 800140c:	42b5      	cmp	r5, r6
 800140e:	d210      	bcs.n	8001432 <__aeabi_ddiv+0x1ce>
 8001410:	4643      	mov	r3, r8
 8001412:	1e59      	subs	r1, r3, #1
 8001414:	9b00      	ldr	r3, [sp, #0]
 8001416:	469c      	mov	ip, r3
 8001418:	4465      	add	r5, ip
 800141a:	001f      	movs	r7, r3
 800141c:	429d      	cmp	r5, r3
 800141e:	419b      	sbcs	r3, r3
 8001420:	425b      	negs	r3, r3
 8001422:	191b      	adds	r3, r3, r4
 8001424:	18c0      	adds	r0, r0, r3
 8001426:	4284      	cmp	r4, r0
 8001428:	d200      	bcs.n	800142c <__aeabi_ddiv+0x1c8>
 800142a:	e1a0      	b.n	800176e <__aeabi_ddiv+0x50a>
 800142c:	d100      	bne.n	8001430 <__aeabi_ddiv+0x1cc>
 800142e:	e19b      	b.n	8001768 <__aeabi_ddiv+0x504>
 8001430:	4688      	mov	r8, r1
 8001432:	1bae      	subs	r6, r5, r6
 8001434:	42b5      	cmp	r5, r6
 8001436:	41ad      	sbcs	r5, r5
 8001438:	1a80      	subs	r0, r0, r2
 800143a:	426d      	negs	r5, r5
 800143c:	1b40      	subs	r0, r0, r5
 800143e:	4284      	cmp	r4, r0
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x1e0>
 8001442:	e1d5      	b.n	80017f0 <__aeabi_ddiv+0x58c>
 8001444:	4649      	mov	r1, r9
 8001446:	f7fe ff01 	bl	800024c <__aeabi_uidivmod>
 800144a:	9a01      	ldr	r2, [sp, #4]
 800144c:	040b      	lsls	r3, r1, #16
 800144e:	4342      	muls	r2, r0
 8001450:	0c31      	lsrs	r1, r6, #16
 8001452:	0005      	movs	r5, r0
 8001454:	4319      	orrs	r1, r3
 8001456:	428a      	cmp	r2, r1
 8001458:	d900      	bls.n	800145c <__aeabi_ddiv+0x1f8>
 800145a:	e16c      	b.n	8001736 <__aeabi_ddiv+0x4d2>
 800145c:	1a88      	subs	r0, r1, r2
 800145e:	4649      	mov	r1, r9
 8001460:	f7fe fef4 	bl	800024c <__aeabi_uidivmod>
 8001464:	9a01      	ldr	r2, [sp, #4]
 8001466:	0436      	lsls	r6, r6, #16
 8001468:	4342      	muls	r2, r0
 800146a:	0409      	lsls	r1, r1, #16
 800146c:	0c36      	lsrs	r6, r6, #16
 800146e:	0003      	movs	r3, r0
 8001470:	430e      	orrs	r6, r1
 8001472:	42b2      	cmp	r2, r6
 8001474:	d900      	bls.n	8001478 <__aeabi_ddiv+0x214>
 8001476:	e153      	b.n	8001720 <__aeabi_ddiv+0x4bc>
 8001478:	9803      	ldr	r0, [sp, #12]
 800147a:	1ab6      	subs	r6, r6, r2
 800147c:	0002      	movs	r2, r0
 800147e:	042d      	lsls	r5, r5, #16
 8001480:	431d      	orrs	r5, r3
 8001482:	9f02      	ldr	r7, [sp, #8]
 8001484:	042b      	lsls	r3, r5, #16
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	435a      	muls	r2, r3
 800148a:	437b      	muls	r3, r7
 800148c:	469c      	mov	ip, r3
 800148e:	0c29      	lsrs	r1, r5, #16
 8001490:	4348      	muls	r0, r1
 8001492:	0c13      	lsrs	r3, r2, #16
 8001494:	4484      	add	ip, r0
 8001496:	4463      	add	r3, ip
 8001498:	4379      	muls	r1, r7
 800149a:	4298      	cmp	r0, r3
 800149c:	d903      	bls.n	80014a6 <__aeabi_ddiv+0x242>
 800149e:	2080      	movs	r0, #128	; 0x80
 80014a0:	0240      	lsls	r0, r0, #9
 80014a2:	4684      	mov	ip, r0
 80014a4:	4461      	add	r1, ip
 80014a6:	0c18      	lsrs	r0, r3, #16
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	0c12      	lsrs	r2, r2, #16
 80014ae:	1841      	adds	r1, r0, r1
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	428e      	cmp	r6, r1
 80014b4:	d200      	bcs.n	80014b8 <__aeabi_ddiv+0x254>
 80014b6:	e0ff      	b.n	80016b8 <__aeabi_ddiv+0x454>
 80014b8:	d100      	bne.n	80014bc <__aeabi_ddiv+0x258>
 80014ba:	e0fa      	b.n	80016b2 <__aeabi_ddiv+0x44e>
 80014bc:	2301      	movs	r3, #1
 80014be:	431d      	orrs	r5, r3
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <__aeabi_ddiv+0x384>)
 80014c2:	445a      	add	r2, fp
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_ddiv+0x266>
 80014c8:	e0aa      	b.n	8001620 <__aeabi_ddiv+0x3bc>
 80014ca:	076b      	lsls	r3, r5, #29
 80014cc:	d000      	beq.n	80014d0 <__aeabi_ddiv+0x26c>
 80014ce:	e13d      	b.n	800174c <__aeabi_ddiv+0x4e8>
 80014d0:	08ed      	lsrs	r5, r5, #3
 80014d2:	4643      	mov	r3, r8
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	d506      	bpl.n	80014e6 <__aeabi_ddiv+0x282>
 80014d8:	4642      	mov	r2, r8
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <__aeabi_ddiv+0x388>)
 80014dc:	401a      	ands	r2, r3
 80014de:	4690      	mov	r8, r2
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	00d2      	lsls	r2, r2, #3
 80014e4:	445a      	add	r2, fp
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <__aeabi_ddiv+0x38c>)
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dd00      	ble.n	80014ee <__aeabi_ddiv+0x28a>
 80014ec:	e71f      	b.n	800132e <__aeabi_ddiv+0xca>
 80014ee:	4643      	mov	r3, r8
 80014f0:	075b      	lsls	r3, r3, #29
 80014f2:	431d      	orrs	r5, r3
 80014f4:	4643      	mov	r3, r8
 80014f6:	0552      	lsls	r2, r2, #21
 80014f8:	025c      	lsls	r4, r3, #9
 80014fa:	0b24      	lsrs	r4, r4, #12
 80014fc:	0d53      	lsrs	r3, r2, #21
 80014fe:	e708      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001500:	4652      	mov	r2, sl
 8001502:	4322      	orrs	r2, r4
 8001504:	d100      	bne.n	8001508 <__aeabi_ddiv+0x2a4>
 8001506:	e07b      	b.n	8001600 <__aeabi_ddiv+0x39c>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x2aa>
 800150c:	e0fa      	b.n	8001704 <__aeabi_ddiv+0x4a0>
 800150e:	0020      	movs	r0, r4
 8001510:	f001 fa22 	bl	8002958 <__clzsi2>
 8001514:	0002      	movs	r2, r0
 8001516:	3a0b      	subs	r2, #11
 8001518:	231d      	movs	r3, #29
 800151a:	0001      	movs	r1, r0
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	4652      	mov	r2, sl
 8001520:	3908      	subs	r1, #8
 8001522:	40da      	lsrs	r2, r3
 8001524:	408c      	lsls	r4, r1
 8001526:	4314      	orrs	r4, r2
 8001528:	4652      	mov	r2, sl
 800152a:	408a      	lsls	r2, r1
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <__aeabi_ddiv+0x390>)
 800152e:	4458      	add	r0, fp
 8001530:	469b      	mov	fp, r3
 8001532:	4483      	add	fp, r0
 8001534:	2000      	movs	r0, #0
 8001536:	e6d5      	b.n	80012e4 <__aeabi_ddiv+0x80>
 8001538:	464b      	mov	r3, r9
 800153a:	4323      	orrs	r3, r4
 800153c:	4698      	mov	r8, r3
 800153e:	d044      	beq.n	80015ca <__aeabi_ddiv+0x366>
 8001540:	2c00      	cmp	r4, #0
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x2e2>
 8001544:	e0ce      	b.n	80016e4 <__aeabi_ddiv+0x480>
 8001546:	0020      	movs	r0, r4
 8001548:	f001 fa06 	bl	8002958 <__clzsi2>
 800154c:	0001      	movs	r1, r0
 800154e:	0002      	movs	r2, r0
 8001550:	390b      	subs	r1, #11
 8001552:	231d      	movs	r3, #29
 8001554:	1a5b      	subs	r3, r3, r1
 8001556:	4649      	mov	r1, r9
 8001558:	0010      	movs	r0, r2
 800155a:	40d9      	lsrs	r1, r3
 800155c:	3808      	subs	r0, #8
 800155e:	4084      	lsls	r4, r0
 8001560:	000b      	movs	r3, r1
 8001562:	464d      	mov	r5, r9
 8001564:	4323      	orrs	r3, r4
 8001566:	4698      	mov	r8, r3
 8001568:	4085      	lsls	r5, r0
 800156a:	4823      	ldr	r0, [pc, #140]	; (80015f8 <__aeabi_ddiv+0x394>)
 800156c:	1a83      	subs	r3, r0, r2
 800156e:	469b      	mov	fp, r3
 8001570:	2300      	movs	r3, #0
 8001572:	4699      	mov	r9, r3
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	e69a      	b.n	80012ae <__aeabi_ddiv+0x4a>
 8001578:	464b      	mov	r3, r9
 800157a:	4323      	orrs	r3, r4
 800157c:	4698      	mov	r8, r3
 800157e:	d11d      	bne.n	80015bc <__aeabi_ddiv+0x358>
 8001580:	2308      	movs	r3, #8
 8001582:	4699      	mov	r9, r3
 8001584:	3b06      	subs	r3, #6
 8001586:	2500      	movs	r5, #0
 8001588:	4683      	mov	fp, r0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	e68f      	b.n	80012ae <__aeabi_ddiv+0x4a>
 800158e:	4652      	mov	r2, sl
 8001590:	4322      	orrs	r2, r4
 8001592:	d109      	bne.n	80015a8 <__aeabi_ddiv+0x344>
 8001594:	2302      	movs	r3, #2
 8001596:	4649      	mov	r1, r9
 8001598:	4319      	orrs	r1, r3
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <__aeabi_ddiv+0x398>)
 800159c:	4689      	mov	r9, r1
 800159e:	469c      	mov	ip, r3
 80015a0:	2400      	movs	r4, #0
 80015a2:	2002      	movs	r0, #2
 80015a4:	44e3      	add	fp, ip
 80015a6:	e69d      	b.n	80012e4 <__aeabi_ddiv+0x80>
 80015a8:	2303      	movs	r3, #3
 80015aa:	464a      	mov	r2, r9
 80015ac:	431a      	orrs	r2, r3
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <__aeabi_ddiv+0x398>)
 80015b0:	4691      	mov	r9, r2
 80015b2:	469c      	mov	ip, r3
 80015b4:	4652      	mov	r2, sl
 80015b6:	2003      	movs	r0, #3
 80015b8:	44e3      	add	fp, ip
 80015ba:	e693      	b.n	80012e4 <__aeabi_ddiv+0x80>
 80015bc:	230c      	movs	r3, #12
 80015be:	4699      	mov	r9, r3
 80015c0:	3b09      	subs	r3, #9
 80015c2:	46a0      	mov	r8, r4
 80015c4:	4683      	mov	fp, r0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	e671      	b.n	80012ae <__aeabi_ddiv+0x4a>
 80015ca:	2304      	movs	r3, #4
 80015cc:	4699      	mov	r9, r3
 80015ce:	2300      	movs	r3, #0
 80015d0:	469b      	mov	fp, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	2500      	movs	r5, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	e669      	b.n	80012ae <__aeabi_ddiv+0x4a>
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	000007ff 	.word	0x000007ff
 80015e0:	fffffc01 	.word	0xfffffc01
 80015e4:	0800d640 	.word	0x0800d640
 80015e8:	000003ff 	.word	0x000003ff
 80015ec:	feffffff 	.word	0xfeffffff
 80015f0:	000007fe 	.word	0x000007fe
 80015f4:	000003f3 	.word	0x000003f3
 80015f8:	fffffc0d 	.word	0xfffffc0d
 80015fc:	fffff801 	.word	0xfffff801
 8001600:	4649      	mov	r1, r9
 8001602:	2301      	movs	r3, #1
 8001604:	4319      	orrs	r1, r3
 8001606:	4689      	mov	r9, r1
 8001608:	2400      	movs	r4, #0
 800160a:	2001      	movs	r0, #1
 800160c:	e66a      	b.n	80012e4 <__aeabi_ddiv+0x80>
 800160e:	2300      	movs	r3, #0
 8001610:	2480      	movs	r4, #128	; 0x80
 8001612:	469a      	mov	sl, r3
 8001614:	2500      	movs	r5, #0
 8001616:	4b8a      	ldr	r3, [pc, #552]	; (8001840 <__aeabi_ddiv+0x5dc>)
 8001618:	0324      	lsls	r4, r4, #12
 800161a:	e67a      	b.n	8001312 <__aeabi_ddiv+0xae>
 800161c:	2501      	movs	r5, #1
 800161e:	426d      	negs	r5, r5
 8001620:	2301      	movs	r3, #1
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	2b38      	cmp	r3, #56	; 0x38
 8001626:	dd00      	ble.n	800162a <__aeabi_ddiv+0x3c6>
 8001628:	e670      	b.n	800130c <__aeabi_ddiv+0xa8>
 800162a:	2b1f      	cmp	r3, #31
 800162c:	dc00      	bgt.n	8001630 <__aeabi_ddiv+0x3cc>
 800162e:	e0bf      	b.n	80017b0 <__aeabi_ddiv+0x54c>
 8001630:	211f      	movs	r1, #31
 8001632:	4249      	negs	r1, r1
 8001634:	1a8a      	subs	r2, r1, r2
 8001636:	4641      	mov	r1, r8
 8001638:	40d1      	lsrs	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	2b20      	cmp	r3, #32
 800163e:	d004      	beq.n	800164a <__aeabi_ddiv+0x3e6>
 8001640:	4641      	mov	r1, r8
 8001642:	4b80      	ldr	r3, [pc, #512]	; (8001844 <__aeabi_ddiv+0x5e0>)
 8001644:	445b      	add	r3, fp
 8001646:	4099      	lsls	r1, r3
 8001648:	430d      	orrs	r5, r1
 800164a:	1e6b      	subs	r3, r5, #1
 800164c:	419d      	sbcs	r5, r3
 800164e:	2307      	movs	r3, #7
 8001650:	432a      	orrs	r2, r5
 8001652:	001d      	movs	r5, r3
 8001654:	2400      	movs	r4, #0
 8001656:	4015      	ands	r5, r2
 8001658:	4213      	tst	r3, r2
 800165a:	d100      	bne.n	800165e <__aeabi_ddiv+0x3fa>
 800165c:	e0d4      	b.n	8001808 <__aeabi_ddiv+0x5a4>
 800165e:	210f      	movs	r1, #15
 8001660:	2300      	movs	r3, #0
 8001662:	4011      	ands	r1, r2
 8001664:	2904      	cmp	r1, #4
 8001666:	d100      	bne.n	800166a <__aeabi_ddiv+0x406>
 8001668:	e0cb      	b.n	8001802 <__aeabi_ddiv+0x59e>
 800166a:	1d11      	adds	r1, r2, #4
 800166c:	4291      	cmp	r1, r2
 800166e:	4192      	sbcs	r2, r2
 8001670:	4252      	negs	r2, r2
 8001672:	189b      	adds	r3, r3, r2
 8001674:	000a      	movs	r2, r1
 8001676:	0219      	lsls	r1, r3, #8
 8001678:	d400      	bmi.n	800167c <__aeabi_ddiv+0x418>
 800167a:	e0c2      	b.n	8001802 <__aeabi_ddiv+0x59e>
 800167c:	2301      	movs	r3, #1
 800167e:	2400      	movs	r4, #0
 8001680:	2500      	movs	r5, #0
 8001682:	e646      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	4641      	mov	r1, r8
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	4219      	tst	r1, r3
 800168c:	d008      	beq.n	80016a0 <__aeabi_ddiv+0x43c>
 800168e:	421c      	tst	r4, r3
 8001690:	d106      	bne.n	80016a0 <__aeabi_ddiv+0x43c>
 8001692:	431c      	orrs	r4, r3
 8001694:	0324      	lsls	r4, r4, #12
 8001696:	46ba      	mov	sl, r7
 8001698:	0015      	movs	r5, r2
 800169a:	4b69      	ldr	r3, [pc, #420]	; (8001840 <__aeabi_ddiv+0x5dc>)
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	e638      	b.n	8001312 <__aeabi_ddiv+0xae>
 80016a0:	2480      	movs	r4, #128	; 0x80
 80016a2:	4643      	mov	r3, r8
 80016a4:	0324      	lsls	r4, r4, #12
 80016a6:	431c      	orrs	r4, r3
 80016a8:	0324      	lsls	r4, r4, #12
 80016aa:	46b2      	mov	sl, r6
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <__aeabi_ddiv+0x5dc>)
 80016ae:	0b24      	lsrs	r4, r4, #12
 80016b0:	e62f      	b.n	8001312 <__aeabi_ddiv+0xae>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_ddiv+0x454>
 80016b6:	e703      	b.n	80014c0 <__aeabi_ddiv+0x25c>
 80016b8:	19a6      	adds	r6, r4, r6
 80016ba:	1e68      	subs	r0, r5, #1
 80016bc:	42a6      	cmp	r6, r4
 80016be:	d200      	bcs.n	80016c2 <__aeabi_ddiv+0x45e>
 80016c0:	e08d      	b.n	80017de <__aeabi_ddiv+0x57a>
 80016c2:	428e      	cmp	r6, r1
 80016c4:	d200      	bcs.n	80016c8 <__aeabi_ddiv+0x464>
 80016c6:	e0a3      	b.n	8001810 <__aeabi_ddiv+0x5ac>
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x468>
 80016ca:	e0b3      	b.n	8001834 <__aeabi_ddiv+0x5d0>
 80016cc:	0005      	movs	r5, r0
 80016ce:	e6f5      	b.n	80014bc <__aeabi_ddiv+0x258>
 80016d0:	42aa      	cmp	r2, r5
 80016d2:	d900      	bls.n	80016d6 <__aeabi_ddiv+0x472>
 80016d4:	e639      	b.n	800134a <__aeabi_ddiv+0xe6>
 80016d6:	4643      	mov	r3, r8
 80016d8:	07de      	lsls	r6, r3, #31
 80016da:	0858      	lsrs	r0, r3, #1
 80016dc:	086b      	lsrs	r3, r5, #1
 80016de:	431e      	orrs	r6, r3
 80016e0:	07ed      	lsls	r5, r5, #31
 80016e2:	e639      	b.n	8001358 <__aeabi_ddiv+0xf4>
 80016e4:	4648      	mov	r0, r9
 80016e6:	f001 f937 	bl	8002958 <__clzsi2>
 80016ea:	0001      	movs	r1, r0
 80016ec:	0002      	movs	r2, r0
 80016ee:	3115      	adds	r1, #21
 80016f0:	3220      	adds	r2, #32
 80016f2:	291c      	cmp	r1, #28
 80016f4:	dc00      	bgt.n	80016f8 <__aeabi_ddiv+0x494>
 80016f6:	e72c      	b.n	8001552 <__aeabi_ddiv+0x2ee>
 80016f8:	464b      	mov	r3, r9
 80016fa:	3808      	subs	r0, #8
 80016fc:	4083      	lsls	r3, r0
 80016fe:	2500      	movs	r5, #0
 8001700:	4698      	mov	r8, r3
 8001702:	e732      	b.n	800156a <__aeabi_ddiv+0x306>
 8001704:	f001 f928 	bl	8002958 <__clzsi2>
 8001708:	0003      	movs	r3, r0
 800170a:	001a      	movs	r2, r3
 800170c:	3215      	adds	r2, #21
 800170e:	3020      	adds	r0, #32
 8001710:	2a1c      	cmp	r2, #28
 8001712:	dc00      	bgt.n	8001716 <__aeabi_ddiv+0x4b2>
 8001714:	e700      	b.n	8001518 <__aeabi_ddiv+0x2b4>
 8001716:	4654      	mov	r4, sl
 8001718:	3b08      	subs	r3, #8
 800171a:	2200      	movs	r2, #0
 800171c:	409c      	lsls	r4, r3
 800171e:	e705      	b.n	800152c <__aeabi_ddiv+0x2c8>
 8001720:	1936      	adds	r6, r6, r4
 8001722:	3b01      	subs	r3, #1
 8001724:	42b4      	cmp	r4, r6
 8001726:	d900      	bls.n	800172a <__aeabi_ddiv+0x4c6>
 8001728:	e6a6      	b.n	8001478 <__aeabi_ddiv+0x214>
 800172a:	42b2      	cmp	r2, r6
 800172c:	d800      	bhi.n	8001730 <__aeabi_ddiv+0x4cc>
 800172e:	e6a3      	b.n	8001478 <__aeabi_ddiv+0x214>
 8001730:	1e83      	subs	r3, r0, #2
 8001732:	1936      	adds	r6, r6, r4
 8001734:	e6a0      	b.n	8001478 <__aeabi_ddiv+0x214>
 8001736:	1909      	adds	r1, r1, r4
 8001738:	3d01      	subs	r5, #1
 800173a:	428c      	cmp	r4, r1
 800173c:	d900      	bls.n	8001740 <__aeabi_ddiv+0x4dc>
 800173e:	e68d      	b.n	800145c <__aeabi_ddiv+0x1f8>
 8001740:	428a      	cmp	r2, r1
 8001742:	d800      	bhi.n	8001746 <__aeabi_ddiv+0x4e2>
 8001744:	e68a      	b.n	800145c <__aeabi_ddiv+0x1f8>
 8001746:	1e85      	subs	r5, r0, #2
 8001748:	1909      	adds	r1, r1, r4
 800174a:	e687      	b.n	800145c <__aeabi_ddiv+0x1f8>
 800174c:	230f      	movs	r3, #15
 800174e:	402b      	ands	r3, r5
 8001750:	2b04      	cmp	r3, #4
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0x4f2>
 8001754:	e6bc      	b.n	80014d0 <__aeabi_ddiv+0x26c>
 8001756:	2305      	movs	r3, #5
 8001758:	425b      	negs	r3, r3
 800175a:	42ab      	cmp	r3, r5
 800175c:	419b      	sbcs	r3, r3
 800175e:	3504      	adds	r5, #4
 8001760:	425b      	negs	r3, r3
 8001762:	08ed      	lsrs	r5, r5, #3
 8001764:	4498      	add	r8, r3
 8001766:	e6b4      	b.n	80014d2 <__aeabi_ddiv+0x26e>
 8001768:	42af      	cmp	r7, r5
 800176a:	d900      	bls.n	800176e <__aeabi_ddiv+0x50a>
 800176c:	e660      	b.n	8001430 <__aeabi_ddiv+0x1cc>
 800176e:	4282      	cmp	r2, r0
 8001770:	d804      	bhi.n	800177c <__aeabi_ddiv+0x518>
 8001772:	d000      	beq.n	8001776 <__aeabi_ddiv+0x512>
 8001774:	e65c      	b.n	8001430 <__aeabi_ddiv+0x1cc>
 8001776:	42ae      	cmp	r6, r5
 8001778:	d800      	bhi.n	800177c <__aeabi_ddiv+0x518>
 800177a:	e659      	b.n	8001430 <__aeabi_ddiv+0x1cc>
 800177c:	2302      	movs	r3, #2
 800177e:	425b      	negs	r3, r3
 8001780:	469c      	mov	ip, r3
 8001782:	9b00      	ldr	r3, [sp, #0]
 8001784:	44e0      	add	r8, ip
 8001786:	469c      	mov	ip, r3
 8001788:	4465      	add	r5, ip
 800178a:	429d      	cmp	r5, r3
 800178c:	419b      	sbcs	r3, r3
 800178e:	425b      	negs	r3, r3
 8001790:	191b      	adds	r3, r3, r4
 8001792:	18c0      	adds	r0, r0, r3
 8001794:	e64d      	b.n	8001432 <__aeabi_ddiv+0x1ce>
 8001796:	428a      	cmp	r2, r1
 8001798:	d800      	bhi.n	800179c <__aeabi_ddiv+0x538>
 800179a:	e60e      	b.n	80013ba <__aeabi_ddiv+0x156>
 800179c:	1e83      	subs	r3, r0, #2
 800179e:	1909      	adds	r1, r1, r4
 80017a0:	e60b      	b.n	80013ba <__aeabi_ddiv+0x156>
 80017a2:	428a      	cmp	r2, r1
 80017a4:	d800      	bhi.n	80017a8 <__aeabi_ddiv+0x544>
 80017a6:	e5f4      	b.n	8001392 <__aeabi_ddiv+0x12e>
 80017a8:	1e83      	subs	r3, r0, #2
 80017aa:	4698      	mov	r8, r3
 80017ac:	1909      	adds	r1, r1, r4
 80017ae:	e5f0      	b.n	8001392 <__aeabi_ddiv+0x12e>
 80017b0:	4925      	ldr	r1, [pc, #148]	; (8001848 <__aeabi_ddiv+0x5e4>)
 80017b2:	0028      	movs	r0, r5
 80017b4:	4459      	add	r1, fp
 80017b6:	408d      	lsls	r5, r1
 80017b8:	4642      	mov	r2, r8
 80017ba:	408a      	lsls	r2, r1
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4641      	mov	r1, r8
 80017c2:	40d8      	lsrs	r0, r3
 80017c4:	40d9      	lsrs	r1, r3
 80017c6:	4302      	orrs	r2, r0
 80017c8:	432a      	orrs	r2, r5
 80017ca:	000b      	movs	r3, r1
 80017cc:	0751      	lsls	r1, r2, #29
 80017ce:	d100      	bne.n	80017d2 <__aeabi_ddiv+0x56e>
 80017d0:	e751      	b.n	8001676 <__aeabi_ddiv+0x412>
 80017d2:	210f      	movs	r1, #15
 80017d4:	4011      	ands	r1, r2
 80017d6:	2904      	cmp	r1, #4
 80017d8:	d000      	beq.n	80017dc <__aeabi_ddiv+0x578>
 80017da:	e746      	b.n	800166a <__aeabi_ddiv+0x406>
 80017dc:	e74b      	b.n	8001676 <__aeabi_ddiv+0x412>
 80017de:	0005      	movs	r5, r0
 80017e0:	428e      	cmp	r6, r1
 80017e2:	d000      	beq.n	80017e6 <__aeabi_ddiv+0x582>
 80017e4:	e66a      	b.n	80014bc <__aeabi_ddiv+0x258>
 80017e6:	9a00      	ldr	r2, [sp, #0]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d000      	beq.n	80017ee <__aeabi_ddiv+0x58a>
 80017ec:	e666      	b.n	80014bc <__aeabi_ddiv+0x258>
 80017ee:	e667      	b.n	80014c0 <__aeabi_ddiv+0x25c>
 80017f0:	4a16      	ldr	r2, [pc, #88]	; (800184c <__aeabi_ddiv+0x5e8>)
 80017f2:	445a      	add	r2, fp
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_ddiv+0x596>
 80017f8:	e710      	b.n	800161c <__aeabi_ddiv+0x3b8>
 80017fa:	2301      	movs	r3, #1
 80017fc:	2500      	movs	r5, #0
 80017fe:	4498      	add	r8, r3
 8001800:	e667      	b.n	80014d2 <__aeabi_ddiv+0x26e>
 8001802:	075d      	lsls	r5, r3, #29
 8001804:	025b      	lsls	r3, r3, #9
 8001806:	0b1c      	lsrs	r4, r3, #12
 8001808:	08d2      	lsrs	r2, r2, #3
 800180a:	2300      	movs	r3, #0
 800180c:	4315      	orrs	r5, r2
 800180e:	e580      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001810:	9800      	ldr	r0, [sp, #0]
 8001812:	3d02      	subs	r5, #2
 8001814:	0042      	lsls	r2, r0, #1
 8001816:	4282      	cmp	r2, r0
 8001818:	41bf      	sbcs	r7, r7
 800181a:	427f      	negs	r7, r7
 800181c:	193c      	adds	r4, r7, r4
 800181e:	1936      	adds	r6, r6, r4
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	e7dd      	b.n	80017e0 <__aeabi_ddiv+0x57c>
 8001824:	2480      	movs	r4, #128	; 0x80
 8001826:	4643      	mov	r3, r8
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	431c      	orrs	r4, r3
 800182c:	0324      	lsls	r4, r4, #12
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__aeabi_ddiv+0x5dc>)
 8001830:	0b24      	lsrs	r4, r4, #12
 8001832:	e56e      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001834:	9a00      	ldr	r2, [sp, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3ea      	bcc.n	8001810 <__aeabi_ddiv+0x5ac>
 800183a:	0005      	movs	r5, r0
 800183c:	e7d3      	b.n	80017e6 <__aeabi_ddiv+0x582>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	000007ff 	.word	0x000007ff
 8001844:	0000043e 	.word	0x0000043e
 8001848:	0000041e 	.word	0x0000041e
 800184c:	000003ff 	.word	0x000003ff

08001850 <__eqdf2>:
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	464e      	mov	r6, r9
 8001854:	4645      	mov	r5, r8
 8001856:	46de      	mov	lr, fp
 8001858:	4657      	mov	r7, sl
 800185a:	4690      	mov	r8, r2
 800185c:	b5e0      	push	{r5, r6, r7, lr}
 800185e:	0017      	movs	r7, r2
 8001860:	031a      	lsls	r2, r3, #12
 8001862:	0b12      	lsrs	r2, r2, #12
 8001864:	0005      	movs	r5, r0
 8001866:	4684      	mov	ip, r0
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <__eqdf2+0x80>)
 800186a:	030e      	lsls	r6, r1, #12
 800186c:	004c      	lsls	r4, r1, #1
 800186e:	4691      	mov	r9, r2
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	0fdb      	lsrs	r3, r3, #31
 8001874:	469b      	mov	fp, r3
 8001876:	0b36      	lsrs	r6, r6, #12
 8001878:	0d64      	lsrs	r4, r4, #21
 800187a:	0fc9      	lsrs	r1, r1, #31
 800187c:	0d52      	lsrs	r2, r2, #21
 800187e:	4284      	cmp	r4, r0
 8001880:	d019      	beq.n	80018b6 <__eqdf2+0x66>
 8001882:	4282      	cmp	r2, r0
 8001884:	d010      	beq.n	80018a8 <__eqdf2+0x58>
 8001886:	2001      	movs	r0, #1
 8001888:	4294      	cmp	r4, r2
 800188a:	d10e      	bne.n	80018aa <__eqdf2+0x5a>
 800188c:	454e      	cmp	r6, r9
 800188e:	d10c      	bne.n	80018aa <__eqdf2+0x5a>
 8001890:	2001      	movs	r0, #1
 8001892:	45c4      	cmp	ip, r8
 8001894:	d109      	bne.n	80018aa <__eqdf2+0x5a>
 8001896:	4559      	cmp	r1, fp
 8001898:	d017      	beq.n	80018ca <__eqdf2+0x7a>
 800189a:	2c00      	cmp	r4, #0
 800189c:	d105      	bne.n	80018aa <__eqdf2+0x5a>
 800189e:	0030      	movs	r0, r6
 80018a0:	4328      	orrs	r0, r5
 80018a2:	1e43      	subs	r3, r0, #1
 80018a4:	4198      	sbcs	r0, r3
 80018a6:	e000      	b.n	80018aa <__eqdf2+0x5a>
 80018a8:	2001      	movs	r0, #1
 80018aa:	bcf0      	pop	{r4, r5, r6, r7}
 80018ac:	46bb      	mov	fp, r7
 80018ae:	46b2      	mov	sl, r6
 80018b0:	46a9      	mov	r9, r5
 80018b2:	46a0      	mov	r8, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	0033      	movs	r3, r6
 80018b8:	2001      	movs	r0, #1
 80018ba:	432b      	orrs	r3, r5
 80018bc:	d1f5      	bne.n	80018aa <__eqdf2+0x5a>
 80018be:	42a2      	cmp	r2, r4
 80018c0:	d1f3      	bne.n	80018aa <__eqdf2+0x5a>
 80018c2:	464b      	mov	r3, r9
 80018c4:	433b      	orrs	r3, r7
 80018c6:	d1f0      	bne.n	80018aa <__eqdf2+0x5a>
 80018c8:	e7e2      	b.n	8001890 <__eqdf2+0x40>
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7ed      	b.n	80018aa <__eqdf2+0x5a>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	000007ff 	.word	0x000007ff

080018d4 <__gedf2>:
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	4647      	mov	r7, r8
 80018d8:	46ce      	mov	lr, r9
 80018da:	0004      	movs	r4, r0
 80018dc:	0018      	movs	r0, r3
 80018de:	0016      	movs	r6, r2
 80018e0:	031b      	lsls	r3, r3, #12
 80018e2:	0b1b      	lsrs	r3, r3, #12
 80018e4:	4d2d      	ldr	r5, [pc, #180]	; (800199c <__gedf2+0xc8>)
 80018e6:	004a      	lsls	r2, r1, #1
 80018e8:	4699      	mov	r9, r3
 80018ea:	b580      	push	{r7, lr}
 80018ec:	0043      	lsls	r3, r0, #1
 80018ee:	030f      	lsls	r7, r1, #12
 80018f0:	46a4      	mov	ip, r4
 80018f2:	46b0      	mov	r8, r6
 80018f4:	0b3f      	lsrs	r7, r7, #12
 80018f6:	0d52      	lsrs	r2, r2, #21
 80018f8:	0fc9      	lsrs	r1, r1, #31
 80018fa:	0d5b      	lsrs	r3, r3, #21
 80018fc:	0fc0      	lsrs	r0, r0, #31
 80018fe:	42aa      	cmp	r2, r5
 8001900:	d021      	beq.n	8001946 <__gedf2+0x72>
 8001902:	42ab      	cmp	r3, r5
 8001904:	d013      	beq.n	800192e <__gedf2+0x5a>
 8001906:	2a00      	cmp	r2, #0
 8001908:	d122      	bne.n	8001950 <__gedf2+0x7c>
 800190a:	433c      	orrs	r4, r7
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <__gedf2+0x42>
 8001910:	464d      	mov	r5, r9
 8001912:	432e      	orrs	r6, r5
 8001914:	d022      	beq.n	800195c <__gedf2+0x88>
 8001916:	2c00      	cmp	r4, #0
 8001918:	d010      	beq.n	800193c <__gedf2+0x68>
 800191a:	4281      	cmp	r1, r0
 800191c:	d022      	beq.n	8001964 <__gedf2+0x90>
 800191e:	2002      	movs	r0, #2
 8001920:	3901      	subs	r1, #1
 8001922:	4008      	ands	r0, r1
 8001924:	3801      	subs	r0, #1
 8001926:	bcc0      	pop	{r6, r7}
 8001928:	46b9      	mov	r9, r7
 800192a:	46b0      	mov	r8, r6
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192e:	464d      	mov	r5, r9
 8001930:	432e      	orrs	r6, r5
 8001932:	d129      	bne.n	8001988 <__gedf2+0xb4>
 8001934:	2a00      	cmp	r2, #0
 8001936:	d1f0      	bne.n	800191a <__gedf2+0x46>
 8001938:	433c      	orrs	r4, r7
 800193a:	d1ee      	bne.n	800191a <__gedf2+0x46>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1f2      	bne.n	8001926 <__gedf2+0x52>
 8001940:	2001      	movs	r0, #1
 8001942:	4240      	negs	r0, r0
 8001944:	e7ef      	b.n	8001926 <__gedf2+0x52>
 8001946:	003d      	movs	r5, r7
 8001948:	4325      	orrs	r5, r4
 800194a:	d11d      	bne.n	8001988 <__gedf2+0xb4>
 800194c:	4293      	cmp	r3, r2
 800194e:	d0ee      	beq.n	800192e <__gedf2+0x5a>
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e2      	bne.n	800191a <__gedf2+0x46>
 8001954:	464c      	mov	r4, r9
 8001956:	4326      	orrs	r6, r4
 8001958:	d1df      	bne.n	800191a <__gedf2+0x46>
 800195a:	e7e0      	b.n	800191e <__gedf2+0x4a>
 800195c:	2000      	movs	r0, #0
 800195e:	2c00      	cmp	r4, #0
 8001960:	d0e1      	beq.n	8001926 <__gedf2+0x52>
 8001962:	e7dc      	b.n	800191e <__gedf2+0x4a>
 8001964:	429a      	cmp	r2, r3
 8001966:	dc0a      	bgt.n	800197e <__gedf2+0xaa>
 8001968:	dbe8      	blt.n	800193c <__gedf2+0x68>
 800196a:	454f      	cmp	r7, r9
 800196c:	d8d7      	bhi.n	800191e <__gedf2+0x4a>
 800196e:	d00e      	beq.n	800198e <__gedf2+0xba>
 8001970:	2000      	movs	r0, #0
 8001972:	454f      	cmp	r7, r9
 8001974:	d2d7      	bcs.n	8001926 <__gedf2+0x52>
 8001976:	2900      	cmp	r1, #0
 8001978:	d0e2      	beq.n	8001940 <__gedf2+0x6c>
 800197a:	0008      	movs	r0, r1
 800197c:	e7d3      	b.n	8001926 <__gedf2+0x52>
 800197e:	4243      	negs	r3, r0
 8001980:	4158      	adcs	r0, r3
 8001982:	0040      	lsls	r0, r0, #1
 8001984:	3801      	subs	r0, #1
 8001986:	e7ce      	b.n	8001926 <__gedf2+0x52>
 8001988:	2002      	movs	r0, #2
 800198a:	4240      	negs	r0, r0
 800198c:	e7cb      	b.n	8001926 <__gedf2+0x52>
 800198e:	45c4      	cmp	ip, r8
 8001990:	d8c5      	bhi.n	800191e <__gedf2+0x4a>
 8001992:	2000      	movs	r0, #0
 8001994:	45c4      	cmp	ip, r8
 8001996:	d2c6      	bcs.n	8001926 <__gedf2+0x52>
 8001998:	e7ed      	b.n	8001976 <__gedf2+0xa2>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	000007ff 	.word	0x000007ff

080019a0 <__ledf2>:
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	4647      	mov	r7, r8
 80019a4:	46ce      	mov	lr, r9
 80019a6:	0004      	movs	r4, r0
 80019a8:	0018      	movs	r0, r3
 80019aa:	0016      	movs	r6, r2
 80019ac:	031b      	lsls	r3, r3, #12
 80019ae:	0b1b      	lsrs	r3, r3, #12
 80019b0:	4d2c      	ldr	r5, [pc, #176]	; (8001a64 <__ledf2+0xc4>)
 80019b2:	004a      	lsls	r2, r1, #1
 80019b4:	4699      	mov	r9, r3
 80019b6:	b580      	push	{r7, lr}
 80019b8:	0043      	lsls	r3, r0, #1
 80019ba:	030f      	lsls	r7, r1, #12
 80019bc:	46a4      	mov	ip, r4
 80019be:	46b0      	mov	r8, r6
 80019c0:	0b3f      	lsrs	r7, r7, #12
 80019c2:	0d52      	lsrs	r2, r2, #21
 80019c4:	0fc9      	lsrs	r1, r1, #31
 80019c6:	0d5b      	lsrs	r3, r3, #21
 80019c8:	0fc0      	lsrs	r0, r0, #31
 80019ca:	42aa      	cmp	r2, r5
 80019cc:	d00d      	beq.n	80019ea <__ledf2+0x4a>
 80019ce:	42ab      	cmp	r3, r5
 80019d0:	d010      	beq.n	80019f4 <__ledf2+0x54>
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d127      	bne.n	8001a26 <__ledf2+0x86>
 80019d6:	433c      	orrs	r4, r7
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <__ledf2+0x60>
 80019dc:	464d      	mov	r5, r9
 80019de:	432e      	orrs	r6, r5
 80019e0:	d10e      	bne.n	8001a00 <__ledf2+0x60>
 80019e2:	2000      	movs	r0, #0
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d015      	beq.n	8001a14 <__ledf2+0x74>
 80019e8:	e00e      	b.n	8001a08 <__ledf2+0x68>
 80019ea:	003d      	movs	r5, r7
 80019ec:	4325      	orrs	r5, r4
 80019ee:	d110      	bne.n	8001a12 <__ledf2+0x72>
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d118      	bne.n	8001a26 <__ledf2+0x86>
 80019f4:	464d      	mov	r5, r9
 80019f6:	432e      	orrs	r6, r5
 80019f8:	d10b      	bne.n	8001a12 <__ledf2+0x72>
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d102      	bne.n	8001a04 <__ledf2+0x64>
 80019fe:	433c      	orrs	r4, r7
 8001a00:	2c00      	cmp	r4, #0
 8001a02:	d00b      	beq.n	8001a1c <__ledf2+0x7c>
 8001a04:	4281      	cmp	r1, r0
 8001a06:	d014      	beq.n	8001a32 <__ledf2+0x92>
 8001a08:	2002      	movs	r0, #2
 8001a0a:	3901      	subs	r1, #1
 8001a0c:	4008      	ands	r0, r1
 8001a0e:	3801      	subs	r0, #1
 8001a10:	e000      	b.n	8001a14 <__ledf2+0x74>
 8001a12:	2002      	movs	r0, #2
 8001a14:	bcc0      	pop	{r6, r7}
 8001a16:	46b9      	mov	r9, r7
 8001a18:	46b0      	mov	r8, r6
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1f9      	bne.n	8001a14 <__ledf2+0x74>
 8001a20:	2001      	movs	r0, #1
 8001a22:	4240      	negs	r0, r0
 8001a24:	e7f6      	b.n	8001a14 <__ledf2+0x74>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ec      	bne.n	8001a04 <__ledf2+0x64>
 8001a2a:	464c      	mov	r4, r9
 8001a2c:	4326      	orrs	r6, r4
 8001a2e:	d1e9      	bne.n	8001a04 <__ledf2+0x64>
 8001a30:	e7ea      	b.n	8001a08 <__ledf2+0x68>
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dd04      	ble.n	8001a40 <__ledf2+0xa0>
 8001a36:	4243      	negs	r3, r0
 8001a38:	4158      	adcs	r0, r3
 8001a3a:	0040      	lsls	r0, r0, #1
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	e7e9      	b.n	8001a14 <__ledf2+0x74>
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbeb      	blt.n	8001a1c <__ledf2+0x7c>
 8001a44:	454f      	cmp	r7, r9
 8001a46:	d8df      	bhi.n	8001a08 <__ledf2+0x68>
 8001a48:	d006      	beq.n	8001a58 <__ledf2+0xb8>
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	454f      	cmp	r7, r9
 8001a4e:	d2e1      	bcs.n	8001a14 <__ledf2+0x74>
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d0e5      	beq.n	8001a20 <__ledf2+0x80>
 8001a54:	0008      	movs	r0, r1
 8001a56:	e7dd      	b.n	8001a14 <__ledf2+0x74>
 8001a58:	45c4      	cmp	ip, r8
 8001a5a:	d8d5      	bhi.n	8001a08 <__ledf2+0x68>
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	45c4      	cmp	ip, r8
 8001a60:	d2d8      	bcs.n	8001a14 <__ledf2+0x74>
 8001a62:	e7f5      	b.n	8001a50 <__ledf2+0xb0>
 8001a64:	000007ff 	.word	0x000007ff

08001a68 <__aeabi_dmul>:
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	4657      	mov	r7, sl
 8001a6c:	464e      	mov	r6, r9
 8001a6e:	4645      	mov	r5, r8
 8001a70:	46de      	mov	lr, fp
 8001a72:	b5e0      	push	{r5, r6, r7, lr}
 8001a74:	4698      	mov	r8, r3
 8001a76:	030c      	lsls	r4, r1, #12
 8001a78:	004b      	lsls	r3, r1, #1
 8001a7a:	0006      	movs	r6, r0
 8001a7c:	4692      	mov	sl, r2
 8001a7e:	b087      	sub	sp, #28
 8001a80:	0b24      	lsrs	r4, r4, #12
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	0fcf      	lsrs	r7, r1, #31
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dmul+0x24>
 8001a8a:	e15c      	b.n	8001d46 <__aeabi_dmul+0x2de>
 8001a8c:	4ad9      	ldr	r2, [pc, #868]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dmul+0x2c>
 8001a92:	e175      	b.n	8001d80 <__aeabi_dmul+0x318>
 8001a94:	0f42      	lsrs	r2, r0, #29
 8001a96:	00e4      	lsls	r4, r4, #3
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	0412      	lsls	r2, r2, #16
 8001a9e:	4314      	orrs	r4, r2
 8001aa0:	4ad5      	ldr	r2, [pc, #852]	; (8001df8 <__aeabi_dmul+0x390>)
 8001aa2:	00c5      	lsls	r5, r0, #3
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	4463      	add	r3, ip
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	4699      	mov	r9, r3
 8001aae:	469b      	mov	fp, r3
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	031e      	lsls	r6, r3, #12
 8001ab6:	0fd2      	lsrs	r2, r2, #31
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4650      	mov	r0, sl
 8001abc:	4690      	mov	r8, r2
 8001abe:	0b36      	lsrs	r6, r6, #12
 8001ac0:	0d5b      	lsrs	r3, r3, #21
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dmul+0x5e>
 8001ac4:	e120      	b.n	8001d08 <__aeabi_dmul+0x2a0>
 8001ac6:	4acb      	ldr	r2, [pc, #812]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d100      	bne.n	8001ace <__aeabi_dmul+0x66>
 8001acc:	e162      	b.n	8001d94 <__aeabi_dmul+0x32c>
 8001ace:	49ca      	ldr	r1, [pc, #808]	; (8001df8 <__aeabi_dmul+0x390>)
 8001ad0:	0f42      	lsrs	r2, r0, #29
 8001ad2:	468c      	mov	ip, r1
 8001ad4:	9900      	ldr	r1, [sp, #0]
 8001ad6:	4463      	add	r3, ip
 8001ad8:	00f6      	lsls	r6, r6, #3
 8001ada:	468c      	mov	ip, r1
 8001adc:	4316      	orrs	r6, r2
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	449c      	add	ip, r3
 8001ae2:	0412      	lsls	r2, r2, #16
 8001ae4:	4663      	mov	r3, ip
 8001ae6:	4316      	orrs	r6, r2
 8001ae8:	00c2      	lsls	r2, r0, #3
 8001aea:	2000      	movs	r0, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	9900      	ldr	r1, [sp, #0]
 8001af0:	4643      	mov	r3, r8
 8001af2:	3101      	adds	r1, #1
 8001af4:	468c      	mov	ip, r1
 8001af6:	4649      	mov	r1, r9
 8001af8:	407b      	eors	r3, r7
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	290f      	cmp	r1, #15
 8001afe:	d826      	bhi.n	8001b4e <__aeabi_dmul+0xe6>
 8001b00:	4bbe      	ldr	r3, [pc, #760]	; (8001dfc <__aeabi_dmul+0x394>)
 8001b02:	0089      	lsls	r1, r1, #2
 8001b04:	5859      	ldr	r1, [r3, r1]
 8001b06:	468f      	mov	pc, r1
 8001b08:	4643      	mov	r3, r8
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	0034      	movs	r4, r6
 8001b0e:	0015      	movs	r5, r2
 8001b10:	4683      	mov	fp, r0
 8001b12:	465b      	mov	r3, fp
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d016      	beq.n	8001b46 <__aeabi_dmul+0xde>
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0xb6>
 8001b1c:	e203      	b.n	8001f26 <__aeabi_dmul+0x4be>
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d000      	beq.n	8001b24 <__aeabi_dmul+0xbc>
 8001b22:	e0cd      	b.n	8001cc0 <__aeabi_dmul+0x258>
 8001b24:	2200      	movs	r2, #0
 8001b26:	2400      	movs	r4, #0
 8001b28:	2500      	movs	r5, #0
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	0512      	lsls	r2, r2, #20
 8001b2e:	4322      	orrs	r2, r4
 8001b30:	07db      	lsls	r3, r3, #31
 8001b32:	431a      	orrs	r2, r3
 8001b34:	0028      	movs	r0, r5
 8001b36:	0011      	movs	r1, r2
 8001b38:	b007      	add	sp, #28
 8001b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b3c:	46bb      	mov	fp, r7
 8001b3e:	46b2      	mov	sl, r6
 8001b40:	46a9      	mov	r9, r5
 8001b42:	46a0      	mov	r8, r4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	2400      	movs	r4, #0
 8001b48:	2500      	movs	r5, #0
 8001b4a:	4aaa      	ldr	r2, [pc, #680]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001b4c:	e7ed      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001b4e:	0c28      	lsrs	r0, r5, #16
 8001b50:	042d      	lsls	r5, r5, #16
 8001b52:	0c2d      	lsrs	r5, r5, #16
 8001b54:	002b      	movs	r3, r5
 8001b56:	0c11      	lsrs	r1, r2, #16
 8001b58:	0412      	lsls	r2, r2, #16
 8001b5a:	0c12      	lsrs	r2, r2, #16
 8001b5c:	4353      	muls	r3, r2
 8001b5e:	4698      	mov	r8, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	002f      	movs	r7, r5
 8001b64:	4343      	muls	r3, r0
 8001b66:	4699      	mov	r9, r3
 8001b68:	434f      	muls	r7, r1
 8001b6a:	444f      	add	r7, r9
 8001b6c:	46bb      	mov	fp, r7
 8001b6e:	4647      	mov	r7, r8
 8001b70:	000b      	movs	r3, r1
 8001b72:	0c3f      	lsrs	r7, r7, #16
 8001b74:	46ba      	mov	sl, r7
 8001b76:	4343      	muls	r3, r0
 8001b78:	44da      	add	sl, fp
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	45d1      	cmp	r9, sl
 8001b7e:	d904      	bls.n	8001b8a <__aeabi_dmul+0x122>
 8001b80:	2780      	movs	r7, #128	; 0x80
 8001b82:	027f      	lsls	r7, r7, #9
 8001b84:	46b9      	mov	r9, r7
 8001b86:	444b      	add	r3, r9
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	4653      	mov	r3, sl
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	469b      	mov	fp, r3
 8001b90:	4653      	mov	r3, sl
 8001b92:	041f      	lsls	r7, r3, #16
 8001b94:	4643      	mov	r3, r8
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	4443      	add	r3, r8
 8001ba0:	9304      	str	r3, [sp, #16]
 8001ba2:	0c33      	lsrs	r3, r6, #16
 8001ba4:	0436      	lsls	r6, r6, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	4698      	mov	r8, r3
 8001baa:	0033      	movs	r3, r6
 8001bac:	4343      	muls	r3, r0
 8001bae:	4699      	mov	r9, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	002f      	movs	r7, r5
 8001bb6:	469a      	mov	sl, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	4377      	muls	r7, r6
 8001bbc:	435d      	muls	r5, r3
 8001bbe:	0c38      	lsrs	r0, r7, #16
 8001bc0:	444d      	add	r5, r9
 8001bc2:	1945      	adds	r5, r0, r5
 8001bc4:	45a9      	cmp	r9, r5
 8001bc6:	d903      	bls.n	8001bd0 <__aeabi_dmul+0x168>
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	025b      	lsls	r3, r3, #9
 8001bcc:	4699      	mov	r9, r3
 8001bce:	44ca      	add	sl, r9
 8001bd0:	043f      	lsls	r7, r7, #16
 8001bd2:	0c28      	lsrs	r0, r5, #16
 8001bd4:	0c3f      	lsrs	r7, r7, #16
 8001bd6:	042d      	lsls	r5, r5, #16
 8001bd8:	19ed      	adds	r5, r5, r7
 8001bda:	0c27      	lsrs	r7, r4, #16
 8001bdc:	0424      	lsls	r4, r4, #16
 8001bde:	0c24      	lsrs	r4, r4, #16
 8001be0:	0003      	movs	r3, r0
 8001be2:	0020      	movs	r0, r4
 8001be4:	4350      	muls	r0, r2
 8001be6:	437a      	muls	r2, r7
 8001be8:	4691      	mov	r9, r2
 8001bea:	003a      	movs	r2, r7
 8001bec:	4453      	add	r3, sl
 8001bee:	9305      	str	r3, [sp, #20]
 8001bf0:	0c03      	lsrs	r3, r0, #16
 8001bf2:	469a      	mov	sl, r3
 8001bf4:	434a      	muls	r2, r1
 8001bf6:	4361      	muls	r1, r4
 8001bf8:	4449      	add	r1, r9
 8001bfa:	4451      	add	r1, sl
 8001bfc:	44ab      	add	fp, r5
 8001bfe:	4589      	cmp	r9, r1
 8001c00:	d903      	bls.n	8001c0a <__aeabi_dmul+0x1a2>
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	4699      	mov	r9, r3
 8001c08:	444a      	add	r2, r9
 8001c0a:	0400      	lsls	r0, r0, #16
 8001c0c:	0c0b      	lsrs	r3, r1, #16
 8001c0e:	0c00      	lsrs	r0, r0, #16
 8001c10:	0409      	lsls	r1, r1, #16
 8001c12:	1809      	adds	r1, r1, r0
 8001c14:	0020      	movs	r0, r4
 8001c16:	4699      	mov	r9, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	4370      	muls	r0, r6
 8001c1c:	435c      	muls	r4, r3
 8001c1e:	437e      	muls	r6, r7
 8001c20:	435f      	muls	r7, r3
 8001c22:	0c03      	lsrs	r3, r0, #16
 8001c24:	4698      	mov	r8, r3
 8001c26:	19a4      	adds	r4, r4, r6
 8001c28:	4444      	add	r4, r8
 8001c2a:	444a      	add	r2, r9
 8001c2c:	9703      	str	r7, [sp, #12]
 8001c2e:	42a6      	cmp	r6, r4
 8001c30:	d904      	bls.n	8001c3c <__aeabi_dmul+0x1d4>
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	025b      	lsls	r3, r3, #9
 8001c36:	4698      	mov	r8, r3
 8001c38:	4447      	add	r7, r8
 8001c3a:	9703      	str	r7, [sp, #12]
 8001c3c:	0423      	lsls	r3, r4, #16
 8001c3e:	9e02      	ldr	r6, [sp, #8]
 8001c40:	469a      	mov	sl, r3
 8001c42:	9b05      	ldr	r3, [sp, #20]
 8001c44:	445e      	add	r6, fp
 8001c46:	4698      	mov	r8, r3
 8001c48:	42ae      	cmp	r6, r5
 8001c4a:	41ad      	sbcs	r5, r5
 8001c4c:	1876      	adds	r6, r6, r1
 8001c4e:	428e      	cmp	r6, r1
 8001c50:	4189      	sbcs	r1, r1
 8001c52:	0400      	lsls	r0, r0, #16
 8001c54:	0c00      	lsrs	r0, r0, #16
 8001c56:	4450      	add	r0, sl
 8001c58:	4440      	add	r0, r8
 8001c5a:	426d      	negs	r5, r5
 8001c5c:	1947      	adds	r7, r0, r5
 8001c5e:	46b8      	mov	r8, r7
 8001c60:	4693      	mov	fp, r2
 8001c62:	4249      	negs	r1, r1
 8001c64:	4689      	mov	r9, r1
 8001c66:	44c3      	add	fp, r8
 8001c68:	44d9      	add	r9, fp
 8001c6a:	4298      	cmp	r0, r3
 8001c6c:	4180      	sbcs	r0, r0
 8001c6e:	45a8      	cmp	r8, r5
 8001c70:	41ad      	sbcs	r5, r5
 8001c72:	4593      	cmp	fp, r2
 8001c74:	4192      	sbcs	r2, r2
 8001c76:	4589      	cmp	r9, r1
 8001c78:	4189      	sbcs	r1, r1
 8001c7a:	426d      	negs	r5, r5
 8001c7c:	4240      	negs	r0, r0
 8001c7e:	4328      	orrs	r0, r5
 8001c80:	0c24      	lsrs	r4, r4, #16
 8001c82:	4252      	negs	r2, r2
 8001c84:	4249      	negs	r1, r1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	1900      	adds	r0, r0, r4
 8001c8c:	1880      	adds	r0, r0, r2
 8001c8e:	18c7      	adds	r7, r0, r3
 8001c90:	464b      	mov	r3, r9
 8001c92:	0ddc      	lsrs	r4, r3, #23
 8001c94:	9b04      	ldr	r3, [sp, #16]
 8001c96:	0275      	lsls	r5, r6, #9
 8001c98:	431d      	orrs	r5, r3
 8001c9a:	1e6a      	subs	r2, r5, #1
 8001c9c:	4195      	sbcs	r5, r2
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	0df6      	lsrs	r6, r6, #23
 8001ca2:	027f      	lsls	r7, r7, #9
 8001ca4:	4335      	orrs	r5, r6
 8001ca6:	025a      	lsls	r2, r3, #9
 8001ca8:	433c      	orrs	r4, r7
 8001caa:	4315      	orrs	r5, r2
 8001cac:	01fb      	lsls	r3, r7, #7
 8001cae:	d400      	bmi.n	8001cb2 <__aeabi_dmul+0x24a>
 8001cb0:	e11c      	b.n	8001eec <__aeabi_dmul+0x484>
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	086a      	lsrs	r2, r5, #1
 8001cb6:	400d      	ands	r5, r1
 8001cb8:	4315      	orrs	r5, r2
 8001cba:	07e2      	lsls	r2, r4, #31
 8001cbc:	4315      	orrs	r5, r2
 8001cbe:	0864      	lsrs	r4, r4, #1
 8001cc0:	494f      	ldr	r1, [pc, #316]	; (8001e00 <__aeabi_dmul+0x398>)
 8001cc2:	4461      	add	r1, ip
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	dc00      	bgt.n	8001cca <__aeabi_dmul+0x262>
 8001cc8:	e0b0      	b.n	8001e2c <__aeabi_dmul+0x3c4>
 8001cca:	076b      	lsls	r3, r5, #29
 8001ccc:	d009      	beq.n	8001ce2 <__aeabi_dmul+0x27a>
 8001cce:	220f      	movs	r2, #15
 8001cd0:	402a      	ands	r2, r5
 8001cd2:	2a04      	cmp	r2, #4
 8001cd4:	d005      	beq.n	8001ce2 <__aeabi_dmul+0x27a>
 8001cd6:	1d2a      	adds	r2, r5, #4
 8001cd8:	42aa      	cmp	r2, r5
 8001cda:	41ad      	sbcs	r5, r5
 8001cdc:	426d      	negs	r5, r5
 8001cde:	1964      	adds	r4, r4, r5
 8001ce0:	0015      	movs	r5, r2
 8001ce2:	01e3      	lsls	r3, r4, #7
 8001ce4:	d504      	bpl.n	8001cf0 <__aeabi_dmul+0x288>
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <__aeabi_dmul+0x39c>)
 8001cea:	00c9      	lsls	r1, r1, #3
 8001cec:	4014      	ands	r4, r2
 8001cee:	4461      	add	r1, ip
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <__aeabi_dmul+0x3a0>)
 8001cf2:	4291      	cmp	r1, r2
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dmul+0x290>
 8001cf6:	e726      	b.n	8001b46 <__aeabi_dmul+0xde>
 8001cf8:	0762      	lsls	r2, r4, #29
 8001cfa:	08ed      	lsrs	r5, r5, #3
 8001cfc:	0264      	lsls	r4, r4, #9
 8001cfe:	0549      	lsls	r1, r1, #21
 8001d00:	4315      	orrs	r5, r2
 8001d02:	0b24      	lsrs	r4, r4, #12
 8001d04:	0d4a      	lsrs	r2, r1, #21
 8001d06:	e710      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001d08:	4652      	mov	r2, sl
 8001d0a:	4332      	orrs	r2, r6
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dmul+0x2a8>
 8001d0e:	e07f      	b.n	8001e10 <__aeabi_dmul+0x3a8>
 8001d10:	2e00      	cmp	r6, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dmul+0x2ae>
 8001d14:	e0dc      	b.n	8001ed0 <__aeabi_dmul+0x468>
 8001d16:	0030      	movs	r0, r6
 8001d18:	f000 fe1e 	bl	8002958 <__clzsi2>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	3a0b      	subs	r2, #11
 8001d20:	231d      	movs	r3, #29
 8001d22:	0001      	movs	r1, r0
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	4652      	mov	r2, sl
 8001d28:	3908      	subs	r1, #8
 8001d2a:	40da      	lsrs	r2, r3
 8001d2c:	408e      	lsls	r6, r1
 8001d2e:	4316      	orrs	r6, r2
 8001d30:	4652      	mov	r2, sl
 8001d32:	408a      	lsls	r2, r1
 8001d34:	9b00      	ldr	r3, [sp, #0]
 8001d36:	4935      	ldr	r1, [pc, #212]	; (8001e0c <__aeabi_dmul+0x3a4>)
 8001d38:	1a18      	subs	r0, r3, r0
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	468c      	mov	ip, r1
 8001d3e:	4463      	add	r3, ip
 8001d40:	2000      	movs	r0, #0
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	e6d3      	b.n	8001aee <__aeabi_dmul+0x86>
 8001d46:	0025      	movs	r5, r4
 8001d48:	4305      	orrs	r5, r0
 8001d4a:	d04a      	beq.n	8001de2 <__aeabi_dmul+0x37a>
 8001d4c:	2c00      	cmp	r4, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dmul+0x2ea>
 8001d50:	e0b0      	b.n	8001eb4 <__aeabi_dmul+0x44c>
 8001d52:	0020      	movs	r0, r4
 8001d54:	f000 fe00 	bl	8002958 <__clzsi2>
 8001d58:	0001      	movs	r1, r0
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	390b      	subs	r1, #11
 8001d5e:	231d      	movs	r3, #29
 8001d60:	0010      	movs	r0, r2
 8001d62:	1a5b      	subs	r3, r3, r1
 8001d64:	0031      	movs	r1, r6
 8001d66:	0035      	movs	r5, r6
 8001d68:	3808      	subs	r0, #8
 8001d6a:	4084      	lsls	r4, r0
 8001d6c:	40d9      	lsrs	r1, r3
 8001d6e:	4085      	lsls	r5, r0
 8001d70:	430c      	orrs	r4, r1
 8001d72:	4826      	ldr	r0, [pc, #152]	; (8001e0c <__aeabi_dmul+0x3a4>)
 8001d74:	1a83      	subs	r3, r0, r2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	e697      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001d80:	0005      	movs	r5, r0
 8001d82:	4325      	orrs	r5, r4
 8001d84:	d126      	bne.n	8001dd4 <__aeabi_dmul+0x36c>
 8001d86:	2208      	movs	r2, #8
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4691      	mov	r9, r2
 8001d90:	469b      	mov	fp, r3
 8001d92:	e68d      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001d94:	4652      	mov	r2, sl
 8001d96:	9b00      	ldr	r3, [sp, #0]
 8001d98:	4332      	orrs	r2, r6
 8001d9a:	d110      	bne.n	8001dbe <__aeabi_dmul+0x356>
 8001d9c:	4915      	ldr	r1, [pc, #84]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001d9e:	2600      	movs	r6, #0
 8001da0:	468c      	mov	ip, r1
 8001da2:	4463      	add	r3, ip
 8001da4:	4649      	mov	r1, r9
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2302      	movs	r3, #2
 8001daa:	4319      	orrs	r1, r3
 8001dac:	4689      	mov	r9, r1
 8001dae:	2002      	movs	r0, #2
 8001db0:	e69d      	b.n	8001aee <__aeabi_dmul+0x86>
 8001db2:	465b      	mov	r3, fp
 8001db4:	9701      	str	r7, [sp, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dmul+0x354>
 8001dba:	e6ad      	b.n	8001b18 <__aeabi_dmul+0xb0>
 8001dbc:	e6c3      	b.n	8001b46 <__aeabi_dmul+0xde>
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	4694      	mov	ip, r2
 8001dc4:	4463      	add	r3, ip
 8001dc6:	464a      	mov	r2, r9
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2303      	movs	r3, #3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	4691      	mov	r9, r2
 8001dd0:	4652      	mov	r2, sl
 8001dd2:	e68c      	b.n	8001aee <__aeabi_dmul+0x86>
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2303      	movs	r3, #3
 8001dda:	0005      	movs	r5, r0
 8001ddc:	4691      	mov	r9, r2
 8001dde:	469b      	mov	fp, r3
 8001de0:	e666      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001de2:	2304      	movs	r3, #4
 8001de4:	4699      	mov	r9, r3
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	2400      	movs	r4, #0
 8001dee:	469b      	mov	fp, r3
 8001df0:	e65e      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	000007ff 	.word	0x000007ff
 8001df8:	fffffc01 	.word	0xfffffc01
 8001dfc:	0800d680 	.word	0x0800d680
 8001e00:	000003ff 	.word	0x000003ff
 8001e04:	feffffff 	.word	0xfeffffff
 8001e08:	000007fe 	.word	0x000007fe
 8001e0c:	fffffc0d 	.word	0xfffffc0d
 8001e10:	4649      	mov	r1, r9
 8001e12:	2301      	movs	r3, #1
 8001e14:	4319      	orrs	r1, r3
 8001e16:	4689      	mov	r9, r1
 8001e18:	2600      	movs	r6, #0
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	e667      	b.n	8001aee <__aeabi_dmul+0x86>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2480      	movs	r4, #128	; 0x80
 8001e22:	2500      	movs	r5, #0
 8001e24:	4a43      	ldr	r2, [pc, #268]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	e67e      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	1a40      	subs	r0, r0, r1
 8001e30:	2838      	cmp	r0, #56	; 0x38
 8001e32:	dd00      	ble.n	8001e36 <__aeabi_dmul+0x3ce>
 8001e34:	e676      	b.n	8001b24 <__aeabi_dmul+0xbc>
 8001e36:	281f      	cmp	r0, #31
 8001e38:	dd5b      	ble.n	8001ef2 <__aeabi_dmul+0x48a>
 8001e3a:	221f      	movs	r2, #31
 8001e3c:	0023      	movs	r3, r4
 8001e3e:	4252      	negs	r2, r2
 8001e40:	1a51      	subs	r1, r2, r1
 8001e42:	40cb      	lsrs	r3, r1
 8001e44:	0019      	movs	r1, r3
 8001e46:	2820      	cmp	r0, #32
 8001e48:	d003      	beq.n	8001e52 <__aeabi_dmul+0x3ea>
 8001e4a:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <__aeabi_dmul+0x4d0>)
 8001e4c:	4462      	add	r2, ip
 8001e4e:	4094      	lsls	r4, r2
 8001e50:	4325      	orrs	r5, r4
 8001e52:	1e6a      	subs	r2, r5, #1
 8001e54:	4195      	sbcs	r5, r2
 8001e56:	002a      	movs	r2, r5
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	2107      	movs	r1, #7
 8001e5c:	000d      	movs	r5, r1
 8001e5e:	2400      	movs	r4, #0
 8001e60:	4015      	ands	r5, r2
 8001e62:	4211      	tst	r1, r2
 8001e64:	d05b      	beq.n	8001f1e <__aeabi_dmul+0x4b6>
 8001e66:	210f      	movs	r1, #15
 8001e68:	2400      	movs	r4, #0
 8001e6a:	4011      	ands	r1, r2
 8001e6c:	2904      	cmp	r1, #4
 8001e6e:	d053      	beq.n	8001f18 <__aeabi_dmul+0x4b0>
 8001e70:	1d11      	adds	r1, r2, #4
 8001e72:	4291      	cmp	r1, r2
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	4252      	negs	r2, r2
 8001e78:	18a4      	adds	r4, r4, r2
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	0223      	lsls	r3, r4, #8
 8001e7e:	d54b      	bpl.n	8001f18 <__aeabi_dmul+0x4b0>
 8001e80:	2201      	movs	r2, #1
 8001e82:	2400      	movs	r4, #0
 8001e84:	2500      	movs	r5, #0
 8001e86:	e650      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	031b      	lsls	r3, r3, #12
 8001e8c:	421c      	tst	r4, r3
 8001e8e:	d009      	beq.n	8001ea4 <__aeabi_dmul+0x43c>
 8001e90:	421e      	tst	r6, r3
 8001e92:	d107      	bne.n	8001ea4 <__aeabi_dmul+0x43c>
 8001e94:	4333      	orrs	r3, r6
 8001e96:	031c      	lsls	r4, r3, #12
 8001e98:	4643      	mov	r3, r8
 8001e9a:	0015      	movs	r5, r2
 8001e9c:	0b24      	lsrs	r4, r4, #12
 8001e9e:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	e642      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	0312      	lsls	r2, r2, #12
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	0324      	lsls	r4, r4, #12
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001eae:	0b24      	lsrs	r4, r4, #12
 8001eb0:	9701      	str	r7, [sp, #4]
 8001eb2:	e63a      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001eb4:	f000 fd50 	bl	8002958 <__clzsi2>
 8001eb8:	0001      	movs	r1, r0
 8001eba:	0002      	movs	r2, r0
 8001ebc:	3115      	adds	r1, #21
 8001ebe:	3220      	adds	r2, #32
 8001ec0:	291c      	cmp	r1, #28
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_dmul+0x45e>
 8001ec4:	e74b      	b.n	8001d5e <__aeabi_dmul+0x2f6>
 8001ec6:	0034      	movs	r4, r6
 8001ec8:	3808      	subs	r0, #8
 8001eca:	2500      	movs	r5, #0
 8001ecc:	4084      	lsls	r4, r0
 8001ece:	e750      	b.n	8001d72 <__aeabi_dmul+0x30a>
 8001ed0:	f000 fd42 	bl	8002958 <__clzsi2>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	3215      	adds	r2, #21
 8001eda:	3020      	adds	r0, #32
 8001edc:	2a1c      	cmp	r2, #28
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dmul+0x47a>
 8001ee0:	e71e      	b.n	8001d20 <__aeabi_dmul+0x2b8>
 8001ee2:	4656      	mov	r6, sl
 8001ee4:	3b08      	subs	r3, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	409e      	lsls	r6, r3
 8001eea:	e723      	b.n	8001d34 <__aeabi_dmul+0x2cc>
 8001eec:	9b00      	ldr	r3, [sp, #0]
 8001eee:	469c      	mov	ip, r3
 8001ef0:	e6e6      	b.n	8001cc0 <__aeabi_dmul+0x258>
 8001ef2:	4912      	ldr	r1, [pc, #72]	; (8001f3c <__aeabi_dmul+0x4d4>)
 8001ef4:	0022      	movs	r2, r4
 8001ef6:	4461      	add	r1, ip
 8001ef8:	002e      	movs	r6, r5
 8001efa:	408d      	lsls	r5, r1
 8001efc:	408a      	lsls	r2, r1
 8001efe:	40c6      	lsrs	r6, r0
 8001f00:	1e69      	subs	r1, r5, #1
 8001f02:	418d      	sbcs	r5, r1
 8001f04:	4332      	orrs	r2, r6
 8001f06:	432a      	orrs	r2, r5
 8001f08:	40c4      	lsrs	r4, r0
 8001f0a:	0753      	lsls	r3, r2, #29
 8001f0c:	d0b6      	beq.n	8001e7c <__aeabi_dmul+0x414>
 8001f0e:	210f      	movs	r1, #15
 8001f10:	4011      	ands	r1, r2
 8001f12:	2904      	cmp	r1, #4
 8001f14:	d1ac      	bne.n	8001e70 <__aeabi_dmul+0x408>
 8001f16:	e7b1      	b.n	8001e7c <__aeabi_dmul+0x414>
 8001f18:	0765      	lsls	r5, r4, #29
 8001f1a:	0264      	lsls	r4, r4, #9
 8001f1c:	0b24      	lsrs	r4, r4, #12
 8001f1e:	08d2      	lsrs	r2, r2, #3
 8001f20:	4315      	orrs	r5, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	e601      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	0312      	lsls	r2, r2, #12
 8001f2a:	4314      	orrs	r4, r2
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	4a01      	ldr	r2, [pc, #4]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001f30:	0b24      	lsrs	r4, r4, #12
 8001f32:	e5fa      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	0000043e 	.word	0x0000043e
 8001f3c:	0000041e 	.word	0x0000041e

08001f40 <__aeabi_dsub>:
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f42:	4657      	mov	r7, sl
 8001f44:	464e      	mov	r6, r9
 8001f46:	4645      	mov	r5, r8
 8001f48:	46de      	mov	lr, fp
 8001f4a:	b5e0      	push	{r5, r6, r7, lr}
 8001f4c:	001e      	movs	r6, r3
 8001f4e:	0017      	movs	r7, r2
 8001f50:	004a      	lsls	r2, r1, #1
 8001f52:	030b      	lsls	r3, r1, #12
 8001f54:	0d52      	lsrs	r2, r2, #21
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	4690      	mov	r8, r2
 8001f5a:	0f42      	lsrs	r2, r0, #29
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	0fcd      	lsrs	r5, r1, #31
 8001f60:	4ccd      	ldr	r4, [pc, #820]	; (8002298 <__aeabi_dsub+0x358>)
 8001f62:	0331      	lsls	r1, r6, #12
 8001f64:	00c3      	lsls	r3, r0, #3
 8001f66:	4694      	mov	ip, r2
 8001f68:	0070      	lsls	r0, r6, #1
 8001f6a:	0f7a      	lsrs	r2, r7, #29
 8001f6c:	0a49      	lsrs	r1, r1, #9
 8001f6e:	00ff      	lsls	r7, r7, #3
 8001f70:	469a      	mov	sl, r3
 8001f72:	46b9      	mov	r9, r7
 8001f74:	0d40      	lsrs	r0, r0, #21
 8001f76:	0ff6      	lsrs	r6, r6, #31
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	42a0      	cmp	r0, r4
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x40>
 8001f7e:	e0b1      	b.n	80020e4 <__aeabi_dsub+0x1a4>
 8001f80:	2201      	movs	r2, #1
 8001f82:	4056      	eors	r6, r2
 8001f84:	46b3      	mov	fp, r6
 8001f86:	42b5      	cmp	r5, r6
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x4c>
 8001f8a:	e088      	b.n	800209e <__aeabi_dsub+0x15e>
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	1a12      	subs	r2, r2, r0
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_dsub+0x56>
 8001f94:	e0ae      	b.n	80020f4 <__aeabi_dsub+0x1b4>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x5c>
 8001f9a:	e0c1      	b.n	8002120 <__aeabi_dsub+0x1e0>
 8001f9c:	48be      	ldr	r0, [pc, #760]	; (8002298 <__aeabi_dsub+0x358>)
 8001f9e:	4580      	cmp	r8, r0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x64>
 8001fa2:	e151      	b.n	8002248 <__aeabi_dsub+0x308>
 8001fa4:	2080      	movs	r0, #128	; 0x80
 8001fa6:	0400      	lsls	r0, r0, #16
 8001fa8:	4301      	orrs	r1, r0
 8001faa:	2a38      	cmp	r2, #56	; 0x38
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0x70>
 8001fae:	e17b      	b.n	80022a8 <__aeabi_dsub+0x368>
 8001fb0:	2a1f      	cmp	r2, #31
 8001fb2:	dd00      	ble.n	8001fb6 <__aeabi_dsub+0x76>
 8001fb4:	e1ee      	b.n	8002394 <__aeabi_dsub+0x454>
 8001fb6:	2020      	movs	r0, #32
 8001fb8:	003e      	movs	r6, r7
 8001fba:	1a80      	subs	r0, r0, r2
 8001fbc:	000c      	movs	r4, r1
 8001fbe:	40d6      	lsrs	r6, r2
 8001fc0:	40d1      	lsrs	r1, r2
 8001fc2:	4087      	lsls	r7, r0
 8001fc4:	4662      	mov	r2, ip
 8001fc6:	4084      	lsls	r4, r0
 8001fc8:	1a52      	subs	r2, r2, r1
 8001fca:	1e78      	subs	r0, r7, #1
 8001fcc:	4187      	sbcs	r7, r0
 8001fce:	4694      	mov	ip, r2
 8001fd0:	4334      	orrs	r4, r6
 8001fd2:	4327      	orrs	r7, r4
 8001fd4:	1bdc      	subs	r4, r3, r7
 8001fd6:	42a3      	cmp	r3, r4
 8001fd8:	419b      	sbcs	r3, r3
 8001fda:	4662      	mov	r2, ip
 8001fdc:	425b      	negs	r3, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	d400      	bmi.n	8001fea <__aeabi_dsub+0xaa>
 8001fe8:	e118      	b.n	800221c <__aeabi_dsub+0x2dc>
 8001fea:	464b      	mov	r3, r9
 8001fec:	0258      	lsls	r0, r3, #9
 8001fee:	0a43      	lsrs	r3, r0, #9
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0xba>
 8001ff8:	e137      	b.n	800226a <__aeabi_dsub+0x32a>
 8001ffa:	4648      	mov	r0, r9
 8001ffc:	f000 fcac 	bl	8002958 <__clzsi2>
 8002000:	0001      	movs	r1, r0
 8002002:	3908      	subs	r1, #8
 8002004:	2320      	movs	r3, #32
 8002006:	0022      	movs	r2, r4
 8002008:	4648      	mov	r0, r9
 800200a:	1a5b      	subs	r3, r3, r1
 800200c:	40da      	lsrs	r2, r3
 800200e:	4088      	lsls	r0, r1
 8002010:	408c      	lsls	r4, r1
 8002012:	4643      	mov	r3, r8
 8002014:	4310      	orrs	r0, r2
 8002016:	4588      	cmp	r8, r1
 8002018:	dd00      	ble.n	800201c <__aeabi_dsub+0xdc>
 800201a:	e136      	b.n	800228a <__aeabi_dsub+0x34a>
 800201c:	1ac9      	subs	r1, r1, r3
 800201e:	1c4b      	adds	r3, r1, #1
 8002020:	2b1f      	cmp	r3, #31
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0xe6>
 8002024:	e0ea      	b.n	80021fc <__aeabi_dsub+0x2bc>
 8002026:	2220      	movs	r2, #32
 8002028:	0026      	movs	r6, r4
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	0001      	movs	r1, r0
 800202e:	4094      	lsls	r4, r2
 8002030:	40de      	lsrs	r6, r3
 8002032:	40d8      	lsrs	r0, r3
 8002034:	2300      	movs	r3, #0
 8002036:	4091      	lsls	r1, r2
 8002038:	1e62      	subs	r2, r4, #1
 800203a:	4194      	sbcs	r4, r2
 800203c:	4681      	mov	r9, r0
 800203e:	4698      	mov	r8, r3
 8002040:	4331      	orrs	r1, r6
 8002042:	430c      	orrs	r4, r1
 8002044:	0763      	lsls	r3, r4, #29
 8002046:	d009      	beq.n	800205c <__aeabi_dsub+0x11c>
 8002048:	230f      	movs	r3, #15
 800204a:	4023      	ands	r3, r4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d005      	beq.n	800205c <__aeabi_dsub+0x11c>
 8002050:	1d23      	adds	r3, r4, #4
 8002052:	42a3      	cmp	r3, r4
 8002054:	41a4      	sbcs	r4, r4
 8002056:	4264      	negs	r4, r4
 8002058:	44a1      	add	r9, r4
 800205a:	001c      	movs	r4, r3
 800205c:	464b      	mov	r3, r9
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	d400      	bmi.n	8002064 <__aeabi_dsub+0x124>
 8002062:	e0de      	b.n	8002222 <__aeabi_dsub+0x2e2>
 8002064:	4641      	mov	r1, r8
 8002066:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <__aeabi_dsub+0x358>)
 8002068:	3101      	adds	r1, #1
 800206a:	4299      	cmp	r1, r3
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x130>
 800206e:	e0e7      	b.n	8002240 <__aeabi_dsub+0x300>
 8002070:	464b      	mov	r3, r9
 8002072:	488a      	ldr	r0, [pc, #552]	; (800229c <__aeabi_dsub+0x35c>)
 8002074:	08e4      	lsrs	r4, r4, #3
 8002076:	4003      	ands	r3, r0
 8002078:	0018      	movs	r0, r3
 800207a:	0549      	lsls	r1, r1, #21
 800207c:	075b      	lsls	r3, r3, #29
 800207e:	0240      	lsls	r0, r0, #9
 8002080:	4323      	orrs	r3, r4
 8002082:	0d4a      	lsrs	r2, r1, #21
 8002084:	0b04      	lsrs	r4, r0, #12
 8002086:	0512      	lsls	r2, r2, #20
 8002088:	07ed      	lsls	r5, r5, #31
 800208a:	4322      	orrs	r2, r4
 800208c:	432a      	orrs	r2, r5
 800208e:	0018      	movs	r0, r3
 8002090:	0011      	movs	r1, r2
 8002092:	bcf0      	pop	{r4, r5, r6, r7}
 8002094:	46bb      	mov	fp, r7
 8002096:	46b2      	mov	sl, r6
 8002098:	46a9      	mov	r9, r5
 800209a:	46a0      	mov	r8, r4
 800209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800209e:	4642      	mov	r2, r8
 80020a0:	1a12      	subs	r2, r2, r0
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	dd52      	ble.n	800214c <__aeabi_dsub+0x20c>
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x16c>
 80020aa:	e09c      	b.n	80021e6 <__aeabi_dsub+0x2a6>
 80020ac:	45a0      	cmp	r8, r4
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x172>
 80020b0:	e0ca      	b.n	8002248 <__aeabi_dsub+0x308>
 80020b2:	2080      	movs	r0, #128	; 0x80
 80020b4:	0400      	lsls	r0, r0, #16
 80020b6:	4301      	orrs	r1, r0
 80020b8:	2a38      	cmp	r2, #56	; 0x38
 80020ba:	dd00      	ble.n	80020be <__aeabi_dsub+0x17e>
 80020bc:	e149      	b.n	8002352 <__aeabi_dsub+0x412>
 80020be:	2a1f      	cmp	r2, #31
 80020c0:	dc00      	bgt.n	80020c4 <__aeabi_dsub+0x184>
 80020c2:	e197      	b.n	80023f4 <__aeabi_dsub+0x4b4>
 80020c4:	0010      	movs	r0, r2
 80020c6:	000e      	movs	r6, r1
 80020c8:	3820      	subs	r0, #32
 80020ca:	40c6      	lsrs	r6, r0
 80020cc:	2a20      	cmp	r2, #32
 80020ce:	d004      	beq.n	80020da <__aeabi_dsub+0x19a>
 80020d0:	2040      	movs	r0, #64	; 0x40
 80020d2:	1a82      	subs	r2, r0, r2
 80020d4:	4091      	lsls	r1, r2
 80020d6:	430f      	orrs	r7, r1
 80020d8:	46b9      	mov	r9, r7
 80020da:	464c      	mov	r4, r9
 80020dc:	1e62      	subs	r2, r4, #1
 80020de:	4194      	sbcs	r4, r2
 80020e0:	4334      	orrs	r4, r6
 80020e2:	e13a      	b.n	800235a <__aeabi_dsub+0x41a>
 80020e4:	000a      	movs	r2, r1
 80020e6:	433a      	orrs	r2, r7
 80020e8:	d028      	beq.n	800213c <__aeabi_dsub+0x1fc>
 80020ea:	46b3      	mov	fp, r6
 80020ec:	42b5      	cmp	r5, r6
 80020ee:	d02b      	beq.n	8002148 <__aeabi_dsub+0x208>
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <__aeabi_dsub+0x360>)
 80020f2:	4442      	add	r2, r8
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d05d      	beq.n	80021b4 <__aeabi_dsub+0x274>
 80020f8:	4642      	mov	r2, r8
 80020fa:	4644      	mov	r4, r8
 80020fc:	1a82      	subs	r2, r0, r2
 80020fe:	2c00      	cmp	r4, #0
 8002100:	d000      	beq.n	8002104 <__aeabi_dsub+0x1c4>
 8002102:	e0f5      	b.n	80022f0 <__aeabi_dsub+0x3b0>
 8002104:	4665      	mov	r5, ip
 8002106:	431d      	orrs	r5, r3
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x1cc>
 800210a:	e19c      	b.n	8002446 <__aeabi_dsub+0x506>
 800210c:	1e55      	subs	r5, r2, #1
 800210e:	2a01      	cmp	r2, #1
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x1d4>
 8002112:	e1fb      	b.n	800250c <__aeabi_dsub+0x5cc>
 8002114:	4c60      	ldr	r4, [pc, #384]	; (8002298 <__aeabi_dsub+0x358>)
 8002116:	42a2      	cmp	r2, r4
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x1dc>
 800211a:	e1bd      	b.n	8002498 <__aeabi_dsub+0x558>
 800211c:	002a      	movs	r2, r5
 800211e:	e0f0      	b.n	8002302 <__aeabi_dsub+0x3c2>
 8002120:	0008      	movs	r0, r1
 8002122:	4338      	orrs	r0, r7
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x1e8>
 8002126:	e0c3      	b.n	80022b0 <__aeabi_dsub+0x370>
 8002128:	1e50      	subs	r0, r2, #1
 800212a:	2a01      	cmp	r2, #1
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x1f0>
 800212e:	e1a8      	b.n	8002482 <__aeabi_dsub+0x542>
 8002130:	4c59      	ldr	r4, [pc, #356]	; (8002298 <__aeabi_dsub+0x358>)
 8002132:	42a2      	cmp	r2, r4
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x1f8>
 8002136:	e087      	b.n	8002248 <__aeabi_dsub+0x308>
 8002138:	0002      	movs	r2, r0
 800213a:	e736      	b.n	8001faa <__aeabi_dsub+0x6a>
 800213c:	2201      	movs	r2, #1
 800213e:	4056      	eors	r6, r2
 8002140:	46b3      	mov	fp, r6
 8002142:	42b5      	cmp	r5, r6
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x208>
 8002146:	e721      	b.n	8001f8c <__aeabi_dsub+0x4c>
 8002148:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <__aeabi_dsub+0x360>)
 800214a:	4442      	add	r2, r8
 800214c:	2a00      	cmp	r2, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x212>
 8002150:	e0b5      	b.n	80022be <__aeabi_dsub+0x37e>
 8002152:	4642      	mov	r2, r8
 8002154:	4644      	mov	r4, r8
 8002156:	1a82      	subs	r2, r0, r2
 8002158:	2c00      	cmp	r4, #0
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x21e>
 800215c:	e138      	b.n	80023d0 <__aeabi_dsub+0x490>
 800215e:	4e4e      	ldr	r6, [pc, #312]	; (8002298 <__aeabi_dsub+0x358>)
 8002160:	42b0      	cmp	r0, r6
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x226>
 8002164:	e1de      	b.n	8002524 <__aeabi_dsub+0x5e4>
 8002166:	2680      	movs	r6, #128	; 0x80
 8002168:	4664      	mov	r4, ip
 800216a:	0436      	lsls	r6, r6, #16
 800216c:	4334      	orrs	r4, r6
 800216e:	46a4      	mov	ip, r4
 8002170:	2a38      	cmp	r2, #56	; 0x38
 8002172:	dd00      	ble.n	8002176 <__aeabi_dsub+0x236>
 8002174:	e196      	b.n	80024a4 <__aeabi_dsub+0x564>
 8002176:	2a1f      	cmp	r2, #31
 8002178:	dd00      	ble.n	800217c <__aeabi_dsub+0x23c>
 800217a:	e224      	b.n	80025c6 <__aeabi_dsub+0x686>
 800217c:	2620      	movs	r6, #32
 800217e:	1ab4      	subs	r4, r6, r2
 8002180:	46a2      	mov	sl, r4
 8002182:	4664      	mov	r4, ip
 8002184:	4656      	mov	r6, sl
 8002186:	40b4      	lsls	r4, r6
 8002188:	46a1      	mov	r9, r4
 800218a:	001c      	movs	r4, r3
 800218c:	464e      	mov	r6, r9
 800218e:	40d4      	lsrs	r4, r2
 8002190:	4326      	orrs	r6, r4
 8002192:	0034      	movs	r4, r6
 8002194:	4656      	mov	r6, sl
 8002196:	40b3      	lsls	r3, r6
 8002198:	1e5e      	subs	r6, r3, #1
 800219a:	41b3      	sbcs	r3, r6
 800219c:	431c      	orrs	r4, r3
 800219e:	4663      	mov	r3, ip
 80021a0:	40d3      	lsrs	r3, r2
 80021a2:	18c9      	adds	r1, r1, r3
 80021a4:	19e4      	adds	r4, r4, r7
 80021a6:	42bc      	cmp	r4, r7
 80021a8:	41bf      	sbcs	r7, r7
 80021aa:	427f      	negs	r7, r7
 80021ac:	46b9      	mov	r9, r7
 80021ae:	4680      	mov	r8, r0
 80021b0:	4489      	add	r9, r1
 80021b2:	e0d8      	b.n	8002366 <__aeabi_dsub+0x426>
 80021b4:	4640      	mov	r0, r8
 80021b6:	4c3b      	ldr	r4, [pc, #236]	; (80022a4 <__aeabi_dsub+0x364>)
 80021b8:	3001      	adds	r0, #1
 80021ba:	4220      	tst	r0, r4
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dsub+0x280>
 80021be:	e0b4      	b.n	800232a <__aeabi_dsub+0x3ea>
 80021c0:	4640      	mov	r0, r8
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d000      	beq.n	80021c8 <__aeabi_dsub+0x288>
 80021c6:	e144      	b.n	8002452 <__aeabi_dsub+0x512>
 80021c8:	4660      	mov	r0, ip
 80021ca:	4318      	orrs	r0, r3
 80021cc:	d100      	bne.n	80021d0 <__aeabi_dsub+0x290>
 80021ce:	e190      	b.n	80024f2 <__aeabi_dsub+0x5b2>
 80021d0:	0008      	movs	r0, r1
 80021d2:	4338      	orrs	r0, r7
 80021d4:	d000      	beq.n	80021d8 <__aeabi_dsub+0x298>
 80021d6:	e1aa      	b.n	800252e <__aeabi_dsub+0x5ee>
 80021d8:	4661      	mov	r1, ip
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	0749      	lsls	r1, r1, #29
 80021de:	430b      	orrs	r3, r1
 80021e0:	4661      	mov	r1, ip
 80021e2:	08cc      	lsrs	r4, r1, #3
 80021e4:	e027      	b.n	8002236 <__aeabi_dsub+0x2f6>
 80021e6:	0008      	movs	r0, r1
 80021e8:	4338      	orrs	r0, r7
 80021ea:	d061      	beq.n	80022b0 <__aeabi_dsub+0x370>
 80021ec:	1e50      	subs	r0, r2, #1
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x2b4>
 80021f2:	e139      	b.n	8002468 <__aeabi_dsub+0x528>
 80021f4:	42a2      	cmp	r2, r4
 80021f6:	d027      	beq.n	8002248 <__aeabi_dsub+0x308>
 80021f8:	0002      	movs	r2, r0
 80021fa:	e75d      	b.n	80020b8 <__aeabi_dsub+0x178>
 80021fc:	0002      	movs	r2, r0
 80021fe:	391f      	subs	r1, #31
 8002200:	40ca      	lsrs	r2, r1
 8002202:	0011      	movs	r1, r2
 8002204:	2b20      	cmp	r3, #32
 8002206:	d003      	beq.n	8002210 <__aeabi_dsub+0x2d0>
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	4098      	lsls	r0, r3
 800220e:	4304      	orrs	r4, r0
 8002210:	1e63      	subs	r3, r4, #1
 8002212:	419c      	sbcs	r4, r3
 8002214:	2300      	movs	r3, #0
 8002216:	4699      	mov	r9, r3
 8002218:	4698      	mov	r8, r3
 800221a:	430c      	orrs	r4, r1
 800221c:	0763      	lsls	r3, r4, #29
 800221e:	d000      	beq.n	8002222 <__aeabi_dsub+0x2e2>
 8002220:	e712      	b.n	8002048 <__aeabi_dsub+0x108>
 8002222:	464b      	mov	r3, r9
 8002224:	464a      	mov	r2, r9
 8002226:	08e4      	lsrs	r4, r4, #3
 8002228:	075b      	lsls	r3, r3, #29
 800222a:	4323      	orrs	r3, r4
 800222c:	08d4      	lsrs	r4, r2, #3
 800222e:	4642      	mov	r2, r8
 8002230:	4919      	ldr	r1, [pc, #100]	; (8002298 <__aeabi_dsub+0x358>)
 8002232:	428a      	cmp	r2, r1
 8002234:	d00e      	beq.n	8002254 <__aeabi_dsub+0x314>
 8002236:	0324      	lsls	r4, r4, #12
 8002238:	0552      	lsls	r2, r2, #21
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	0d52      	lsrs	r2, r2, #21
 800223e:	e722      	b.n	8002086 <__aeabi_dsub+0x146>
 8002240:	000a      	movs	r2, r1
 8002242:	2400      	movs	r4, #0
 8002244:	2300      	movs	r3, #0
 8002246:	e71e      	b.n	8002086 <__aeabi_dsub+0x146>
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	4662      	mov	r2, ip
 800224c:	0752      	lsls	r2, r2, #29
 800224e:	4313      	orrs	r3, r2
 8002250:	4662      	mov	r2, ip
 8002252:	08d4      	lsrs	r4, r2, #3
 8002254:	001a      	movs	r2, r3
 8002256:	4322      	orrs	r2, r4
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x31c>
 800225a:	e1fc      	b.n	8002656 <__aeabi_dsub+0x716>
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0312      	lsls	r2, r2, #12
 8002260:	4314      	orrs	r4, r2
 8002262:	0324      	lsls	r4, r4, #12
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <__aeabi_dsub+0x358>)
 8002266:	0b24      	lsrs	r4, r4, #12
 8002268:	e70d      	b.n	8002086 <__aeabi_dsub+0x146>
 800226a:	0020      	movs	r0, r4
 800226c:	f000 fb74 	bl	8002958 <__clzsi2>
 8002270:	0001      	movs	r1, r0
 8002272:	3118      	adds	r1, #24
 8002274:	291f      	cmp	r1, #31
 8002276:	dc00      	bgt.n	800227a <__aeabi_dsub+0x33a>
 8002278:	e6c4      	b.n	8002004 <__aeabi_dsub+0xc4>
 800227a:	3808      	subs	r0, #8
 800227c:	4084      	lsls	r4, r0
 800227e:	4643      	mov	r3, r8
 8002280:	0020      	movs	r0, r4
 8002282:	2400      	movs	r4, #0
 8002284:	4588      	cmp	r8, r1
 8002286:	dc00      	bgt.n	800228a <__aeabi_dsub+0x34a>
 8002288:	e6c8      	b.n	800201c <__aeabi_dsub+0xdc>
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__aeabi_dsub+0x35c>)
 800228c:	1a5b      	subs	r3, r3, r1
 800228e:	4010      	ands	r0, r2
 8002290:	4698      	mov	r8, r3
 8002292:	4681      	mov	r9, r0
 8002294:	e6d6      	b.n	8002044 <__aeabi_dsub+0x104>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff
 800229c:	ff7fffff 	.word	0xff7fffff
 80022a0:	fffff801 	.word	0xfffff801
 80022a4:	000007fe 	.word	0x000007fe
 80022a8:	430f      	orrs	r7, r1
 80022aa:	1e7a      	subs	r2, r7, #1
 80022ac:	4197      	sbcs	r7, r2
 80022ae:	e691      	b.n	8001fd4 <__aeabi_dsub+0x94>
 80022b0:	4661      	mov	r1, ip
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	0749      	lsls	r1, r1, #29
 80022b6:	430b      	orrs	r3, r1
 80022b8:	4661      	mov	r1, ip
 80022ba:	08cc      	lsrs	r4, r1, #3
 80022bc:	e7b8      	b.n	8002230 <__aeabi_dsub+0x2f0>
 80022be:	4640      	mov	r0, r8
 80022c0:	4cd3      	ldr	r4, [pc, #844]	; (8002610 <__aeabi_dsub+0x6d0>)
 80022c2:	3001      	adds	r0, #1
 80022c4:	4220      	tst	r0, r4
 80022c6:	d000      	beq.n	80022ca <__aeabi_dsub+0x38a>
 80022c8:	e0a2      	b.n	8002410 <__aeabi_dsub+0x4d0>
 80022ca:	4640      	mov	r0, r8
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d000      	beq.n	80022d2 <__aeabi_dsub+0x392>
 80022d0:	e101      	b.n	80024d6 <__aeabi_dsub+0x596>
 80022d2:	4660      	mov	r0, ip
 80022d4:	4318      	orrs	r0, r3
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x39a>
 80022d8:	e15e      	b.n	8002598 <__aeabi_dsub+0x658>
 80022da:	0008      	movs	r0, r1
 80022dc:	4338      	orrs	r0, r7
 80022de:	d000      	beq.n	80022e2 <__aeabi_dsub+0x3a2>
 80022e0:	e15f      	b.n	80025a2 <__aeabi_dsub+0x662>
 80022e2:	4661      	mov	r1, ip
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	0749      	lsls	r1, r1, #29
 80022e8:	430b      	orrs	r3, r1
 80022ea:	4661      	mov	r1, ip
 80022ec:	08cc      	lsrs	r4, r1, #3
 80022ee:	e7a2      	b.n	8002236 <__aeabi_dsub+0x2f6>
 80022f0:	4dc8      	ldr	r5, [pc, #800]	; (8002614 <__aeabi_dsub+0x6d4>)
 80022f2:	42a8      	cmp	r0, r5
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x3b8>
 80022f6:	e0cf      	b.n	8002498 <__aeabi_dsub+0x558>
 80022f8:	2580      	movs	r5, #128	; 0x80
 80022fa:	4664      	mov	r4, ip
 80022fc:	042d      	lsls	r5, r5, #16
 80022fe:	432c      	orrs	r4, r5
 8002300:	46a4      	mov	ip, r4
 8002302:	2a38      	cmp	r2, #56	; 0x38
 8002304:	dc56      	bgt.n	80023b4 <__aeabi_dsub+0x474>
 8002306:	2a1f      	cmp	r2, #31
 8002308:	dd00      	ble.n	800230c <__aeabi_dsub+0x3cc>
 800230a:	e0d1      	b.n	80024b0 <__aeabi_dsub+0x570>
 800230c:	2520      	movs	r5, #32
 800230e:	001e      	movs	r6, r3
 8002310:	1aad      	subs	r5, r5, r2
 8002312:	4664      	mov	r4, ip
 8002314:	40ab      	lsls	r3, r5
 8002316:	40ac      	lsls	r4, r5
 8002318:	40d6      	lsrs	r6, r2
 800231a:	1e5d      	subs	r5, r3, #1
 800231c:	41ab      	sbcs	r3, r5
 800231e:	4334      	orrs	r4, r6
 8002320:	4323      	orrs	r3, r4
 8002322:	4664      	mov	r4, ip
 8002324:	40d4      	lsrs	r4, r2
 8002326:	1b09      	subs	r1, r1, r4
 8002328:	e049      	b.n	80023be <__aeabi_dsub+0x47e>
 800232a:	4660      	mov	r0, ip
 800232c:	1bdc      	subs	r4, r3, r7
 800232e:	1a46      	subs	r6, r0, r1
 8002330:	42a3      	cmp	r3, r4
 8002332:	4180      	sbcs	r0, r0
 8002334:	4240      	negs	r0, r0
 8002336:	4681      	mov	r9, r0
 8002338:	0030      	movs	r0, r6
 800233a:	464e      	mov	r6, r9
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	4681      	mov	r9, r0
 8002340:	0200      	lsls	r0, r0, #8
 8002342:	d476      	bmi.n	8002432 <__aeabi_dsub+0x4f2>
 8002344:	464b      	mov	r3, r9
 8002346:	4323      	orrs	r3, r4
 8002348:	d000      	beq.n	800234c <__aeabi_dsub+0x40c>
 800234a:	e652      	b.n	8001ff2 <__aeabi_dsub+0xb2>
 800234c:	2400      	movs	r4, #0
 800234e:	2500      	movs	r5, #0
 8002350:	e771      	b.n	8002236 <__aeabi_dsub+0x2f6>
 8002352:	4339      	orrs	r1, r7
 8002354:	000c      	movs	r4, r1
 8002356:	1e62      	subs	r2, r4, #1
 8002358:	4194      	sbcs	r4, r2
 800235a:	18e4      	adds	r4, r4, r3
 800235c:	429c      	cmp	r4, r3
 800235e:	419b      	sbcs	r3, r3
 8002360:	425b      	negs	r3, r3
 8002362:	4463      	add	r3, ip
 8002364:	4699      	mov	r9, r3
 8002366:	464b      	mov	r3, r9
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	d400      	bmi.n	800236e <__aeabi_dsub+0x42e>
 800236c:	e756      	b.n	800221c <__aeabi_dsub+0x2dc>
 800236e:	2301      	movs	r3, #1
 8002370:	469c      	mov	ip, r3
 8002372:	4ba8      	ldr	r3, [pc, #672]	; (8002614 <__aeabi_dsub+0x6d4>)
 8002374:	44e0      	add	r8, ip
 8002376:	4598      	cmp	r8, r3
 8002378:	d038      	beq.n	80023ec <__aeabi_dsub+0x4ac>
 800237a:	464b      	mov	r3, r9
 800237c:	48a6      	ldr	r0, [pc, #664]	; (8002618 <__aeabi_dsub+0x6d8>)
 800237e:	2201      	movs	r2, #1
 8002380:	4003      	ands	r3, r0
 8002382:	0018      	movs	r0, r3
 8002384:	0863      	lsrs	r3, r4, #1
 8002386:	4014      	ands	r4, r2
 8002388:	431c      	orrs	r4, r3
 800238a:	07c3      	lsls	r3, r0, #31
 800238c:	431c      	orrs	r4, r3
 800238e:	0843      	lsrs	r3, r0, #1
 8002390:	4699      	mov	r9, r3
 8002392:	e657      	b.n	8002044 <__aeabi_dsub+0x104>
 8002394:	0010      	movs	r0, r2
 8002396:	000e      	movs	r6, r1
 8002398:	3820      	subs	r0, #32
 800239a:	40c6      	lsrs	r6, r0
 800239c:	2a20      	cmp	r2, #32
 800239e:	d004      	beq.n	80023aa <__aeabi_dsub+0x46a>
 80023a0:	2040      	movs	r0, #64	; 0x40
 80023a2:	1a82      	subs	r2, r0, r2
 80023a4:	4091      	lsls	r1, r2
 80023a6:	430f      	orrs	r7, r1
 80023a8:	46b9      	mov	r9, r7
 80023aa:	464f      	mov	r7, r9
 80023ac:	1e7a      	subs	r2, r7, #1
 80023ae:	4197      	sbcs	r7, r2
 80023b0:	4337      	orrs	r7, r6
 80023b2:	e60f      	b.n	8001fd4 <__aeabi_dsub+0x94>
 80023b4:	4662      	mov	r2, ip
 80023b6:	431a      	orrs	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	4193      	sbcs	r3, r2
 80023be:	1afc      	subs	r4, r7, r3
 80023c0:	42a7      	cmp	r7, r4
 80023c2:	41bf      	sbcs	r7, r7
 80023c4:	427f      	negs	r7, r7
 80023c6:	1bcb      	subs	r3, r1, r7
 80023c8:	4699      	mov	r9, r3
 80023ca:	465d      	mov	r5, fp
 80023cc:	4680      	mov	r8, r0
 80023ce:	e608      	b.n	8001fe2 <__aeabi_dsub+0xa2>
 80023d0:	4666      	mov	r6, ip
 80023d2:	431e      	orrs	r6, r3
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x498>
 80023d6:	e0be      	b.n	8002556 <__aeabi_dsub+0x616>
 80023d8:	1e56      	subs	r6, r2, #1
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x4a0>
 80023de:	e109      	b.n	80025f4 <__aeabi_dsub+0x6b4>
 80023e0:	4c8c      	ldr	r4, [pc, #560]	; (8002614 <__aeabi_dsub+0x6d4>)
 80023e2:	42a2      	cmp	r2, r4
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x4a8>
 80023e6:	e119      	b.n	800261c <__aeabi_dsub+0x6dc>
 80023e8:	0032      	movs	r2, r6
 80023ea:	e6c1      	b.n	8002170 <__aeabi_dsub+0x230>
 80023ec:	4642      	mov	r2, r8
 80023ee:	2400      	movs	r4, #0
 80023f0:	2300      	movs	r3, #0
 80023f2:	e648      	b.n	8002086 <__aeabi_dsub+0x146>
 80023f4:	2020      	movs	r0, #32
 80023f6:	000c      	movs	r4, r1
 80023f8:	1a80      	subs	r0, r0, r2
 80023fa:	003e      	movs	r6, r7
 80023fc:	4087      	lsls	r7, r0
 80023fe:	4084      	lsls	r4, r0
 8002400:	40d6      	lsrs	r6, r2
 8002402:	1e78      	subs	r0, r7, #1
 8002404:	4187      	sbcs	r7, r0
 8002406:	40d1      	lsrs	r1, r2
 8002408:	4334      	orrs	r4, r6
 800240a:	433c      	orrs	r4, r7
 800240c:	448c      	add	ip, r1
 800240e:	e7a4      	b.n	800235a <__aeabi_dsub+0x41a>
 8002410:	4a80      	ldr	r2, [pc, #512]	; (8002614 <__aeabi_dsub+0x6d4>)
 8002412:	4290      	cmp	r0, r2
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x4d8>
 8002416:	e0e9      	b.n	80025ec <__aeabi_dsub+0x6ac>
 8002418:	19df      	adds	r7, r3, r7
 800241a:	429f      	cmp	r7, r3
 800241c:	419b      	sbcs	r3, r3
 800241e:	4461      	add	r1, ip
 8002420:	425b      	negs	r3, r3
 8002422:	18c9      	adds	r1, r1, r3
 8002424:	07cc      	lsls	r4, r1, #31
 8002426:	087f      	lsrs	r7, r7, #1
 8002428:	084b      	lsrs	r3, r1, #1
 800242a:	4699      	mov	r9, r3
 800242c:	4680      	mov	r8, r0
 800242e:	433c      	orrs	r4, r7
 8002430:	e6f4      	b.n	800221c <__aeabi_dsub+0x2dc>
 8002432:	1afc      	subs	r4, r7, r3
 8002434:	42a7      	cmp	r7, r4
 8002436:	41bf      	sbcs	r7, r7
 8002438:	4663      	mov	r3, ip
 800243a:	427f      	negs	r7, r7
 800243c:	1ac9      	subs	r1, r1, r3
 800243e:	1bcb      	subs	r3, r1, r7
 8002440:	4699      	mov	r9, r3
 8002442:	465d      	mov	r5, fp
 8002444:	e5d5      	b.n	8001ff2 <__aeabi_dsub+0xb2>
 8002446:	08ff      	lsrs	r7, r7, #3
 8002448:	074b      	lsls	r3, r1, #29
 800244a:	465d      	mov	r5, fp
 800244c:	433b      	orrs	r3, r7
 800244e:	08cc      	lsrs	r4, r1, #3
 8002450:	e6ee      	b.n	8002230 <__aeabi_dsub+0x2f0>
 8002452:	4662      	mov	r2, ip
 8002454:	431a      	orrs	r2, r3
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x51a>
 8002458:	e082      	b.n	8002560 <__aeabi_dsub+0x620>
 800245a:	000b      	movs	r3, r1
 800245c:	433b      	orrs	r3, r7
 800245e:	d11b      	bne.n	8002498 <__aeabi_dsub+0x558>
 8002460:	2480      	movs	r4, #128	; 0x80
 8002462:	2500      	movs	r5, #0
 8002464:	0324      	lsls	r4, r4, #12
 8002466:	e6f9      	b.n	800225c <__aeabi_dsub+0x31c>
 8002468:	19dc      	adds	r4, r3, r7
 800246a:	429c      	cmp	r4, r3
 800246c:	419b      	sbcs	r3, r3
 800246e:	4461      	add	r1, ip
 8002470:	4689      	mov	r9, r1
 8002472:	425b      	negs	r3, r3
 8002474:	4499      	add	r9, r3
 8002476:	464b      	mov	r3, r9
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	d444      	bmi.n	8002506 <__aeabi_dsub+0x5c6>
 800247c:	2301      	movs	r3, #1
 800247e:	4698      	mov	r8, r3
 8002480:	e6cc      	b.n	800221c <__aeabi_dsub+0x2dc>
 8002482:	1bdc      	subs	r4, r3, r7
 8002484:	4662      	mov	r2, ip
 8002486:	42a3      	cmp	r3, r4
 8002488:	419b      	sbcs	r3, r3
 800248a:	1a51      	subs	r1, r2, r1
 800248c:	425b      	negs	r3, r3
 800248e:	1acb      	subs	r3, r1, r3
 8002490:	4699      	mov	r9, r3
 8002492:	2301      	movs	r3, #1
 8002494:	4698      	mov	r8, r3
 8002496:	e5a4      	b.n	8001fe2 <__aeabi_dsub+0xa2>
 8002498:	08ff      	lsrs	r7, r7, #3
 800249a:	074b      	lsls	r3, r1, #29
 800249c:	465d      	mov	r5, fp
 800249e:	433b      	orrs	r3, r7
 80024a0:	08cc      	lsrs	r4, r1, #3
 80024a2:	e6d7      	b.n	8002254 <__aeabi_dsub+0x314>
 80024a4:	4662      	mov	r2, ip
 80024a6:	431a      	orrs	r2, r3
 80024a8:	0014      	movs	r4, r2
 80024aa:	1e63      	subs	r3, r4, #1
 80024ac:	419c      	sbcs	r4, r3
 80024ae:	e679      	b.n	80021a4 <__aeabi_dsub+0x264>
 80024b0:	0015      	movs	r5, r2
 80024b2:	4664      	mov	r4, ip
 80024b4:	3d20      	subs	r5, #32
 80024b6:	40ec      	lsrs	r4, r5
 80024b8:	46a0      	mov	r8, r4
 80024ba:	2a20      	cmp	r2, #32
 80024bc:	d005      	beq.n	80024ca <__aeabi_dsub+0x58a>
 80024be:	2540      	movs	r5, #64	; 0x40
 80024c0:	4664      	mov	r4, ip
 80024c2:	1aaa      	subs	r2, r5, r2
 80024c4:	4094      	lsls	r4, r2
 80024c6:	4323      	orrs	r3, r4
 80024c8:	469a      	mov	sl, r3
 80024ca:	4654      	mov	r4, sl
 80024cc:	1e63      	subs	r3, r4, #1
 80024ce:	419c      	sbcs	r4, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	4323      	orrs	r3, r4
 80024d4:	e773      	b.n	80023be <__aeabi_dsub+0x47e>
 80024d6:	4662      	mov	r2, ip
 80024d8:	431a      	orrs	r2, r3
 80024da:	d023      	beq.n	8002524 <__aeabi_dsub+0x5e4>
 80024dc:	000a      	movs	r2, r1
 80024de:	433a      	orrs	r2, r7
 80024e0:	d000      	beq.n	80024e4 <__aeabi_dsub+0x5a4>
 80024e2:	e0a0      	b.n	8002626 <__aeabi_dsub+0x6e6>
 80024e4:	4662      	mov	r2, ip
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	0752      	lsls	r2, r2, #29
 80024ea:	4313      	orrs	r3, r2
 80024ec:	4662      	mov	r2, ip
 80024ee:	08d4      	lsrs	r4, r2, #3
 80024f0:	e6b0      	b.n	8002254 <__aeabi_dsub+0x314>
 80024f2:	000b      	movs	r3, r1
 80024f4:	433b      	orrs	r3, r7
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0x5ba>
 80024f8:	e728      	b.n	800234c <__aeabi_dsub+0x40c>
 80024fa:	08ff      	lsrs	r7, r7, #3
 80024fc:	074b      	lsls	r3, r1, #29
 80024fe:	465d      	mov	r5, fp
 8002500:	433b      	orrs	r3, r7
 8002502:	08cc      	lsrs	r4, r1, #3
 8002504:	e697      	b.n	8002236 <__aeabi_dsub+0x2f6>
 8002506:	2302      	movs	r3, #2
 8002508:	4698      	mov	r8, r3
 800250a:	e736      	b.n	800237a <__aeabi_dsub+0x43a>
 800250c:	1afc      	subs	r4, r7, r3
 800250e:	42a7      	cmp	r7, r4
 8002510:	41bf      	sbcs	r7, r7
 8002512:	4663      	mov	r3, ip
 8002514:	427f      	negs	r7, r7
 8002516:	1ac9      	subs	r1, r1, r3
 8002518:	1bcb      	subs	r3, r1, r7
 800251a:	4699      	mov	r9, r3
 800251c:	2301      	movs	r3, #1
 800251e:	465d      	mov	r5, fp
 8002520:	4698      	mov	r8, r3
 8002522:	e55e      	b.n	8001fe2 <__aeabi_dsub+0xa2>
 8002524:	074b      	lsls	r3, r1, #29
 8002526:	08ff      	lsrs	r7, r7, #3
 8002528:	433b      	orrs	r3, r7
 800252a:	08cc      	lsrs	r4, r1, #3
 800252c:	e692      	b.n	8002254 <__aeabi_dsub+0x314>
 800252e:	1bdc      	subs	r4, r3, r7
 8002530:	4660      	mov	r0, ip
 8002532:	42a3      	cmp	r3, r4
 8002534:	41b6      	sbcs	r6, r6
 8002536:	1a40      	subs	r0, r0, r1
 8002538:	4276      	negs	r6, r6
 800253a:	1b80      	subs	r0, r0, r6
 800253c:	4681      	mov	r9, r0
 800253e:	0200      	lsls	r0, r0, #8
 8002540:	d560      	bpl.n	8002604 <__aeabi_dsub+0x6c4>
 8002542:	1afc      	subs	r4, r7, r3
 8002544:	42a7      	cmp	r7, r4
 8002546:	41bf      	sbcs	r7, r7
 8002548:	4663      	mov	r3, ip
 800254a:	427f      	negs	r7, r7
 800254c:	1ac9      	subs	r1, r1, r3
 800254e:	1bcb      	subs	r3, r1, r7
 8002550:	4699      	mov	r9, r3
 8002552:	465d      	mov	r5, fp
 8002554:	e576      	b.n	8002044 <__aeabi_dsub+0x104>
 8002556:	08ff      	lsrs	r7, r7, #3
 8002558:	074b      	lsls	r3, r1, #29
 800255a:	433b      	orrs	r3, r7
 800255c:	08cc      	lsrs	r4, r1, #3
 800255e:	e667      	b.n	8002230 <__aeabi_dsub+0x2f0>
 8002560:	000a      	movs	r2, r1
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	433a      	orrs	r2, r7
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x62a>
 8002568:	e66f      	b.n	800224a <__aeabi_dsub+0x30a>
 800256a:	4662      	mov	r2, ip
 800256c:	0752      	lsls	r2, r2, #29
 800256e:	4313      	orrs	r3, r2
 8002570:	4662      	mov	r2, ip
 8002572:	08d4      	lsrs	r4, r2, #3
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0312      	lsls	r2, r2, #12
 8002578:	4214      	tst	r4, r2
 800257a:	d007      	beq.n	800258c <__aeabi_dsub+0x64c>
 800257c:	08c8      	lsrs	r0, r1, #3
 800257e:	4210      	tst	r0, r2
 8002580:	d104      	bne.n	800258c <__aeabi_dsub+0x64c>
 8002582:	465d      	mov	r5, fp
 8002584:	0004      	movs	r4, r0
 8002586:	08fb      	lsrs	r3, r7, #3
 8002588:	0749      	lsls	r1, r1, #29
 800258a:	430b      	orrs	r3, r1
 800258c:	0f5a      	lsrs	r2, r3, #29
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	0752      	lsls	r2, r2, #29
 8002594:	4313      	orrs	r3, r2
 8002596:	e65d      	b.n	8002254 <__aeabi_dsub+0x314>
 8002598:	074b      	lsls	r3, r1, #29
 800259a:	08ff      	lsrs	r7, r7, #3
 800259c:	433b      	orrs	r3, r7
 800259e:	08cc      	lsrs	r4, r1, #3
 80025a0:	e649      	b.n	8002236 <__aeabi_dsub+0x2f6>
 80025a2:	19dc      	adds	r4, r3, r7
 80025a4:	429c      	cmp	r4, r3
 80025a6:	419b      	sbcs	r3, r3
 80025a8:	4461      	add	r1, ip
 80025aa:	4689      	mov	r9, r1
 80025ac:	425b      	negs	r3, r3
 80025ae:	4499      	add	r9, r3
 80025b0:	464b      	mov	r3, r9
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	d400      	bmi.n	80025b8 <__aeabi_dsub+0x678>
 80025b6:	e631      	b.n	800221c <__aeabi_dsub+0x2dc>
 80025b8:	464a      	mov	r2, r9
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <__aeabi_dsub+0x6d8>)
 80025bc:	401a      	ands	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	4691      	mov	r9, r2
 80025c2:	4698      	mov	r8, r3
 80025c4:	e62a      	b.n	800221c <__aeabi_dsub+0x2dc>
 80025c6:	0016      	movs	r6, r2
 80025c8:	4664      	mov	r4, ip
 80025ca:	3e20      	subs	r6, #32
 80025cc:	40f4      	lsrs	r4, r6
 80025ce:	46a0      	mov	r8, r4
 80025d0:	2a20      	cmp	r2, #32
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dsub+0x6a0>
 80025d4:	2640      	movs	r6, #64	; 0x40
 80025d6:	4664      	mov	r4, ip
 80025d8:	1ab2      	subs	r2, r6, r2
 80025da:	4094      	lsls	r4, r2
 80025dc:	4323      	orrs	r3, r4
 80025de:	469a      	mov	sl, r3
 80025e0:	4654      	mov	r4, sl
 80025e2:	1e63      	subs	r3, r4, #1
 80025e4:	419c      	sbcs	r4, r3
 80025e6:	4643      	mov	r3, r8
 80025e8:	431c      	orrs	r4, r3
 80025ea:	e5db      	b.n	80021a4 <__aeabi_dsub+0x264>
 80025ec:	0002      	movs	r2, r0
 80025ee:	2400      	movs	r4, #0
 80025f0:	2300      	movs	r3, #0
 80025f2:	e548      	b.n	8002086 <__aeabi_dsub+0x146>
 80025f4:	19dc      	adds	r4, r3, r7
 80025f6:	42bc      	cmp	r4, r7
 80025f8:	41bf      	sbcs	r7, r7
 80025fa:	4461      	add	r1, ip
 80025fc:	4689      	mov	r9, r1
 80025fe:	427f      	negs	r7, r7
 8002600:	44b9      	add	r9, r7
 8002602:	e738      	b.n	8002476 <__aeabi_dsub+0x536>
 8002604:	464b      	mov	r3, r9
 8002606:	4323      	orrs	r3, r4
 8002608:	d100      	bne.n	800260c <__aeabi_dsub+0x6cc>
 800260a:	e69f      	b.n	800234c <__aeabi_dsub+0x40c>
 800260c:	e606      	b.n	800221c <__aeabi_dsub+0x2dc>
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	000007fe 	.word	0x000007fe
 8002614:	000007ff 	.word	0x000007ff
 8002618:	ff7fffff 	.word	0xff7fffff
 800261c:	08ff      	lsrs	r7, r7, #3
 800261e:	074b      	lsls	r3, r1, #29
 8002620:	433b      	orrs	r3, r7
 8002622:	08cc      	lsrs	r4, r1, #3
 8002624:	e616      	b.n	8002254 <__aeabi_dsub+0x314>
 8002626:	4662      	mov	r2, ip
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	0752      	lsls	r2, r2, #29
 800262c:	4313      	orrs	r3, r2
 800262e:	4662      	mov	r2, ip
 8002630:	08d4      	lsrs	r4, r2, #3
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	0312      	lsls	r2, r2, #12
 8002636:	4214      	tst	r4, r2
 8002638:	d007      	beq.n	800264a <__aeabi_dsub+0x70a>
 800263a:	08c8      	lsrs	r0, r1, #3
 800263c:	4210      	tst	r0, r2
 800263e:	d104      	bne.n	800264a <__aeabi_dsub+0x70a>
 8002640:	465d      	mov	r5, fp
 8002642:	0004      	movs	r4, r0
 8002644:	08fb      	lsrs	r3, r7, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430b      	orrs	r3, r1
 800264a:	0f5a      	lsrs	r2, r3, #29
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	0752      	lsls	r2, r2, #29
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	4313      	orrs	r3, r2
 8002654:	e5fe      	b.n	8002254 <__aeabi_dsub+0x314>
 8002656:	2300      	movs	r3, #0
 8002658:	4a01      	ldr	r2, [pc, #4]	; (8002660 <__aeabi_dsub+0x720>)
 800265a:	001c      	movs	r4, r3
 800265c:	e513      	b.n	8002086 <__aeabi_dsub+0x146>
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	000007ff 	.word	0x000007ff

08002664 <__aeabi_dcmpun>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	0005      	movs	r5, r0
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <__aeabi_dcmpun+0x38>)
 800266a:	031c      	lsls	r4, r3, #12
 800266c:	0016      	movs	r6, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	030a      	lsls	r2, r1, #12
 8002672:	0049      	lsls	r1, r1, #1
 8002674:	0b12      	lsrs	r2, r2, #12
 8002676:	0d49      	lsrs	r1, r1, #21
 8002678:	0b24      	lsrs	r4, r4, #12
 800267a:	0d5b      	lsrs	r3, r3, #21
 800267c:	4281      	cmp	r1, r0
 800267e:	d008      	beq.n	8002692 <__aeabi_dcmpun+0x2e>
 8002680:	4a06      	ldr	r2, [pc, #24]	; (800269c <__aeabi_dcmpun+0x38>)
 8002682:	2000      	movs	r0, #0
 8002684:	4293      	cmp	r3, r2
 8002686:	d103      	bne.n	8002690 <__aeabi_dcmpun+0x2c>
 8002688:	0020      	movs	r0, r4
 800268a:	4330      	orrs	r0, r6
 800268c:	1e43      	subs	r3, r0, #1
 800268e:	4198      	sbcs	r0, r3
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	2001      	movs	r0, #1
 8002694:	432a      	orrs	r2, r5
 8002696:	d1fb      	bne.n	8002690 <__aeabi_dcmpun+0x2c>
 8002698:	e7f2      	b.n	8002680 <__aeabi_dcmpun+0x1c>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000007ff 	.word	0x000007ff

080026a0 <__aeabi_d2iz>:
 80026a0:	000a      	movs	r2, r1
 80026a2:	b530      	push	{r4, r5, lr}
 80026a4:	4c13      	ldr	r4, [pc, #76]	; (80026f4 <__aeabi_d2iz+0x54>)
 80026a6:	0053      	lsls	r3, r2, #1
 80026a8:	0309      	lsls	r1, r1, #12
 80026aa:	0005      	movs	r5, r0
 80026ac:	0b09      	lsrs	r1, r1, #12
 80026ae:	2000      	movs	r0, #0
 80026b0:	0d5b      	lsrs	r3, r3, #21
 80026b2:	0fd2      	lsrs	r2, r2, #31
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	dd04      	ble.n	80026c2 <__aeabi_d2iz+0x22>
 80026b8:	480f      	ldr	r0, [pc, #60]	; (80026f8 <__aeabi_d2iz+0x58>)
 80026ba:	4283      	cmp	r3, r0
 80026bc:	dd02      	ble.n	80026c4 <__aeabi_d2iz+0x24>
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_d2iz+0x5c>)
 80026c0:	18d0      	adds	r0, r2, r3
 80026c2:	bd30      	pop	{r4, r5, pc}
 80026c4:	2080      	movs	r0, #128	; 0x80
 80026c6:	0340      	lsls	r0, r0, #13
 80026c8:	4301      	orrs	r1, r0
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <__aeabi_d2iz+0x60>)
 80026cc:	1ac0      	subs	r0, r0, r3
 80026ce:	281f      	cmp	r0, #31
 80026d0:	dd08      	ble.n	80026e4 <__aeabi_d2iz+0x44>
 80026d2:	480c      	ldr	r0, [pc, #48]	; (8002704 <__aeabi_d2iz+0x64>)
 80026d4:	1ac3      	subs	r3, r0, r3
 80026d6:	40d9      	lsrs	r1, r3
 80026d8:	000b      	movs	r3, r1
 80026da:	4258      	negs	r0, r3
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d1f0      	bne.n	80026c2 <__aeabi_d2iz+0x22>
 80026e0:	0018      	movs	r0, r3
 80026e2:	e7ee      	b.n	80026c2 <__aeabi_d2iz+0x22>
 80026e4:	4c08      	ldr	r4, [pc, #32]	; (8002708 <__aeabi_d2iz+0x68>)
 80026e6:	40c5      	lsrs	r5, r0
 80026e8:	46a4      	mov	ip, r4
 80026ea:	4463      	add	r3, ip
 80026ec:	4099      	lsls	r1, r3
 80026ee:	000b      	movs	r3, r1
 80026f0:	432b      	orrs	r3, r5
 80026f2:	e7f2      	b.n	80026da <__aeabi_d2iz+0x3a>
 80026f4:	000003fe 	.word	0x000003fe
 80026f8:	0000041d 	.word	0x0000041d
 80026fc:	7fffffff 	.word	0x7fffffff
 8002700:	00000433 	.word	0x00000433
 8002704:	00000413 	.word	0x00000413
 8002708:	fffffbed 	.word	0xfffffbed

0800270c <__aeabi_i2d>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	2800      	cmp	r0, #0
 8002710:	d016      	beq.n	8002740 <__aeabi_i2d+0x34>
 8002712:	17c3      	asrs	r3, r0, #31
 8002714:	18c5      	adds	r5, r0, r3
 8002716:	405d      	eors	r5, r3
 8002718:	0fc4      	lsrs	r4, r0, #31
 800271a:	0028      	movs	r0, r5
 800271c:	f000 f91c 	bl	8002958 <__clzsi2>
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <__aeabi_i2d+0x5c>)
 8002722:	1a12      	subs	r2, r2, r0
 8002724:	280a      	cmp	r0, #10
 8002726:	dc16      	bgt.n	8002756 <__aeabi_i2d+0x4a>
 8002728:	0003      	movs	r3, r0
 800272a:	002e      	movs	r6, r5
 800272c:	3315      	adds	r3, #21
 800272e:	409e      	lsls	r6, r3
 8002730:	230b      	movs	r3, #11
 8002732:	1a18      	subs	r0, r3, r0
 8002734:	40c5      	lsrs	r5, r0
 8002736:	0552      	lsls	r2, r2, #21
 8002738:	032d      	lsls	r5, r5, #12
 800273a:	0b2d      	lsrs	r5, r5, #12
 800273c:	0d53      	lsrs	r3, r2, #21
 800273e:	e003      	b.n	8002748 <__aeabi_i2d+0x3c>
 8002740:	2400      	movs	r4, #0
 8002742:	2300      	movs	r3, #0
 8002744:	2500      	movs	r5, #0
 8002746:	2600      	movs	r6, #0
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	432b      	orrs	r3, r5
 800274c:	07e4      	lsls	r4, r4, #31
 800274e:	4323      	orrs	r3, r4
 8002750:	0030      	movs	r0, r6
 8002752:	0019      	movs	r1, r3
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	380b      	subs	r0, #11
 8002758:	4085      	lsls	r5, r0
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	032d      	lsls	r5, r5, #12
 800275e:	2600      	movs	r6, #0
 8002760:	0b2d      	lsrs	r5, r5, #12
 8002762:	0d53      	lsrs	r3, r2, #21
 8002764:	e7f0      	b.n	8002748 <__aeabi_i2d+0x3c>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	0000041e 	.word	0x0000041e

0800276c <__aeabi_ui2d>:
 800276c:	b510      	push	{r4, lr}
 800276e:	1e04      	subs	r4, r0, #0
 8002770:	d010      	beq.n	8002794 <__aeabi_ui2d+0x28>
 8002772:	f000 f8f1 	bl	8002958 <__clzsi2>
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <__aeabi_ui2d+0x48>)
 8002778:	1a1b      	subs	r3, r3, r0
 800277a:	280a      	cmp	r0, #10
 800277c:	dc11      	bgt.n	80027a2 <__aeabi_ui2d+0x36>
 800277e:	220b      	movs	r2, #11
 8002780:	0021      	movs	r1, r4
 8002782:	1a12      	subs	r2, r2, r0
 8002784:	40d1      	lsrs	r1, r2
 8002786:	3015      	adds	r0, #21
 8002788:	030a      	lsls	r2, r1, #12
 800278a:	055b      	lsls	r3, r3, #21
 800278c:	4084      	lsls	r4, r0
 800278e:	0b12      	lsrs	r2, r2, #12
 8002790:	0d5b      	lsrs	r3, r3, #21
 8002792:	e001      	b.n	8002798 <__aeabi_ui2d+0x2c>
 8002794:	2300      	movs	r3, #0
 8002796:	2200      	movs	r2, #0
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	4313      	orrs	r3, r2
 800279c:	0020      	movs	r0, r4
 800279e:	0019      	movs	r1, r3
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	0022      	movs	r2, r4
 80027a4:	380b      	subs	r0, #11
 80027a6:	4082      	lsls	r2, r0
 80027a8:	055b      	lsls	r3, r3, #21
 80027aa:	0312      	lsls	r2, r2, #12
 80027ac:	2400      	movs	r4, #0
 80027ae:	0b12      	lsrs	r2, r2, #12
 80027b0:	0d5b      	lsrs	r3, r3, #21
 80027b2:	e7f1      	b.n	8002798 <__aeabi_ui2d+0x2c>
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_f2d>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	0043      	lsls	r3, r0, #1
 80027bc:	0246      	lsls	r6, r0, #9
 80027be:	0fc4      	lsrs	r4, r0, #31
 80027c0:	20fe      	movs	r0, #254	; 0xfe
 80027c2:	0e1b      	lsrs	r3, r3, #24
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	0a75      	lsrs	r5, r6, #9
 80027c8:	4208      	tst	r0, r1
 80027ca:	d00c      	beq.n	80027e6 <__aeabi_f2d+0x2e>
 80027cc:	22e0      	movs	r2, #224	; 0xe0
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4694      	mov	ip, r2
 80027d2:	076d      	lsls	r5, r5, #29
 80027d4:	0b36      	lsrs	r6, r6, #12
 80027d6:	4463      	add	r3, ip
 80027d8:	051b      	lsls	r3, r3, #20
 80027da:	4333      	orrs	r3, r6
 80027dc:	07e4      	lsls	r4, r4, #31
 80027de:	4323      	orrs	r3, r4
 80027e0:	0028      	movs	r0, r5
 80027e2:	0019      	movs	r1, r3
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d114      	bne.n	8002814 <__aeabi_f2d+0x5c>
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d01b      	beq.n	8002826 <__aeabi_f2d+0x6e>
 80027ee:	0028      	movs	r0, r5
 80027f0:	f000 f8b2 	bl	8002958 <__clzsi2>
 80027f4:	280a      	cmp	r0, #10
 80027f6:	dc1c      	bgt.n	8002832 <__aeabi_f2d+0x7a>
 80027f8:	230b      	movs	r3, #11
 80027fa:	002e      	movs	r6, r5
 80027fc:	1a1b      	subs	r3, r3, r0
 80027fe:	40de      	lsrs	r6, r3
 8002800:	0003      	movs	r3, r0
 8002802:	3315      	adds	r3, #21
 8002804:	409d      	lsls	r5, r3
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <__aeabi_f2d+0x88>)
 8002808:	0336      	lsls	r6, r6, #12
 800280a:	1a12      	subs	r2, r2, r0
 800280c:	0552      	lsls	r2, r2, #21
 800280e:	0b36      	lsrs	r6, r6, #12
 8002810:	0d53      	lsrs	r3, r2, #21
 8002812:	e7e1      	b.n	80027d8 <__aeabi_f2d+0x20>
 8002814:	2d00      	cmp	r5, #0
 8002816:	d009      	beq.n	800282c <__aeabi_f2d+0x74>
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0b36      	lsrs	r6, r6, #12
 800281c:	0312      	lsls	r2, r2, #12
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <__aeabi_f2d+0x8c>)
 8002820:	076d      	lsls	r5, r5, #29
 8002822:	4316      	orrs	r6, r2
 8002824:	e7d8      	b.n	80027d8 <__aeabi_f2d+0x20>
 8002826:	2300      	movs	r3, #0
 8002828:	2600      	movs	r6, #0
 800282a:	e7d5      	b.n	80027d8 <__aeabi_f2d+0x20>
 800282c:	2600      	movs	r6, #0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <__aeabi_f2d+0x8c>)
 8002830:	e7d2      	b.n	80027d8 <__aeabi_f2d+0x20>
 8002832:	0003      	movs	r3, r0
 8002834:	3b0b      	subs	r3, #11
 8002836:	409d      	lsls	r5, r3
 8002838:	002e      	movs	r6, r5
 800283a:	2500      	movs	r5, #0
 800283c:	e7e3      	b.n	8002806 <__aeabi_f2d+0x4e>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	00000389 	.word	0x00000389
 8002844:	000007ff 	.word	0x000007ff

08002848 <__aeabi_d2f>:
 8002848:	0002      	movs	r2, r0
 800284a:	004b      	lsls	r3, r1, #1
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	0d5b      	lsrs	r3, r3, #21
 8002850:	030c      	lsls	r4, r1, #12
 8002852:	4e3d      	ldr	r6, [pc, #244]	; (8002948 <__aeabi_d2f+0x100>)
 8002854:	0a64      	lsrs	r4, r4, #9
 8002856:	0f40      	lsrs	r0, r0, #29
 8002858:	1c5f      	adds	r7, r3, #1
 800285a:	0fc9      	lsrs	r1, r1, #31
 800285c:	4304      	orrs	r4, r0
 800285e:	00d5      	lsls	r5, r2, #3
 8002860:	4237      	tst	r7, r6
 8002862:	d00a      	beq.n	800287a <__aeabi_d2f+0x32>
 8002864:	4839      	ldr	r0, [pc, #228]	; (800294c <__aeabi_d2f+0x104>)
 8002866:	181e      	adds	r6, r3, r0
 8002868:	2efe      	cmp	r6, #254	; 0xfe
 800286a:	dd16      	ble.n	800289a <__aeabi_d2f+0x52>
 800286c:	20ff      	movs	r0, #255	; 0xff
 800286e:	2400      	movs	r4, #0
 8002870:	05c0      	lsls	r0, r0, #23
 8002872:	4320      	orrs	r0, r4
 8002874:	07c9      	lsls	r1, r1, #31
 8002876:	4308      	orrs	r0, r1
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <__aeabi_d2f+0x44>
 800287e:	432c      	orrs	r4, r5
 8002880:	d026      	beq.n	80028d0 <__aeabi_d2f+0x88>
 8002882:	2205      	movs	r2, #5
 8002884:	0192      	lsls	r2, r2, #6
 8002886:	0a54      	lsrs	r4, r2, #9
 8002888:	b2d8      	uxtb	r0, r3
 800288a:	e7f1      	b.n	8002870 <__aeabi_d2f+0x28>
 800288c:	4325      	orrs	r5, r4
 800288e:	d0ed      	beq.n	800286c <__aeabi_d2f+0x24>
 8002890:	2080      	movs	r0, #128	; 0x80
 8002892:	03c0      	lsls	r0, r0, #15
 8002894:	4304      	orrs	r4, r0
 8002896:	20ff      	movs	r0, #255	; 0xff
 8002898:	e7ea      	b.n	8002870 <__aeabi_d2f+0x28>
 800289a:	2e00      	cmp	r6, #0
 800289c:	dd1b      	ble.n	80028d6 <__aeabi_d2f+0x8e>
 800289e:	0192      	lsls	r2, r2, #6
 80028a0:	1e53      	subs	r3, r2, #1
 80028a2:	419a      	sbcs	r2, r3
 80028a4:	00e4      	lsls	r4, r4, #3
 80028a6:	0f6d      	lsrs	r5, r5, #29
 80028a8:	4322      	orrs	r2, r4
 80028aa:	432a      	orrs	r2, r5
 80028ac:	0753      	lsls	r3, r2, #29
 80028ae:	d048      	beq.n	8002942 <__aeabi_d2f+0xfa>
 80028b0:	230f      	movs	r3, #15
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d000      	beq.n	80028ba <__aeabi_d2f+0x72>
 80028b8:	3204      	adds	r2, #4
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	04db      	lsls	r3, r3, #19
 80028be:	4013      	ands	r3, r2
 80028c0:	d03f      	beq.n	8002942 <__aeabi_d2f+0xfa>
 80028c2:	1c70      	adds	r0, r6, #1
 80028c4:	2efe      	cmp	r6, #254	; 0xfe
 80028c6:	d0d1      	beq.n	800286c <__aeabi_d2f+0x24>
 80028c8:	0192      	lsls	r2, r2, #6
 80028ca:	0a54      	lsrs	r4, r2, #9
 80028cc:	b2c0      	uxtb	r0, r0
 80028ce:	e7cf      	b.n	8002870 <__aeabi_d2f+0x28>
 80028d0:	2000      	movs	r0, #0
 80028d2:	2400      	movs	r4, #0
 80028d4:	e7cc      	b.n	8002870 <__aeabi_d2f+0x28>
 80028d6:	0032      	movs	r2, r6
 80028d8:	3217      	adds	r2, #23
 80028da:	db22      	blt.n	8002922 <__aeabi_d2f+0xda>
 80028dc:	2080      	movs	r0, #128	; 0x80
 80028de:	0400      	lsls	r0, r0, #16
 80028e0:	4320      	orrs	r0, r4
 80028e2:	241e      	movs	r4, #30
 80028e4:	1ba4      	subs	r4, r4, r6
 80028e6:	2c1f      	cmp	r4, #31
 80028e8:	dd1d      	ble.n	8002926 <__aeabi_d2f+0xde>
 80028ea:	2202      	movs	r2, #2
 80028ec:	4252      	negs	r2, r2
 80028ee:	1b96      	subs	r6, r2, r6
 80028f0:	0002      	movs	r2, r0
 80028f2:	40f2      	lsrs	r2, r6
 80028f4:	0016      	movs	r6, r2
 80028f6:	2c20      	cmp	r4, #32
 80028f8:	d004      	beq.n	8002904 <__aeabi_d2f+0xbc>
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <__aeabi_d2f+0x108>)
 80028fc:	4694      	mov	ip, r2
 80028fe:	4463      	add	r3, ip
 8002900:	4098      	lsls	r0, r3
 8002902:	4305      	orrs	r5, r0
 8002904:	002a      	movs	r2, r5
 8002906:	1e53      	subs	r3, r2, #1
 8002908:	419a      	sbcs	r2, r3
 800290a:	4332      	orrs	r2, r6
 800290c:	2600      	movs	r6, #0
 800290e:	0753      	lsls	r3, r2, #29
 8002910:	d1ce      	bne.n	80028b0 <__aeabi_d2f+0x68>
 8002912:	2480      	movs	r4, #128	; 0x80
 8002914:	0013      	movs	r3, r2
 8002916:	04e4      	lsls	r4, r4, #19
 8002918:	2001      	movs	r0, #1
 800291a:	4023      	ands	r3, r4
 800291c:	4222      	tst	r2, r4
 800291e:	d1d3      	bne.n	80028c8 <__aeabi_d2f+0x80>
 8002920:	e7b0      	b.n	8002884 <__aeabi_d2f+0x3c>
 8002922:	2300      	movs	r3, #0
 8002924:	e7ad      	b.n	8002882 <__aeabi_d2f+0x3a>
 8002926:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <__aeabi_d2f+0x10c>)
 8002928:	4694      	mov	ip, r2
 800292a:	002a      	movs	r2, r5
 800292c:	40e2      	lsrs	r2, r4
 800292e:	0014      	movs	r4, r2
 8002930:	002a      	movs	r2, r5
 8002932:	4463      	add	r3, ip
 8002934:	409a      	lsls	r2, r3
 8002936:	4098      	lsls	r0, r3
 8002938:	1e55      	subs	r5, r2, #1
 800293a:	41aa      	sbcs	r2, r5
 800293c:	4302      	orrs	r2, r0
 800293e:	4322      	orrs	r2, r4
 8002940:	e7e4      	b.n	800290c <__aeabi_d2f+0xc4>
 8002942:	0033      	movs	r3, r6
 8002944:	e79e      	b.n	8002884 <__aeabi_d2f+0x3c>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	000007fe 	.word	0x000007fe
 800294c:	fffffc80 	.word	0xfffffc80
 8002950:	fffffca2 	.word	0xfffffca2
 8002954:	fffffc82 	.word	0xfffffc82

08002958 <__clzsi2>:
 8002958:	211c      	movs	r1, #28
 800295a:	2301      	movs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	4298      	cmp	r0, r3
 8002960:	d301      	bcc.n	8002966 <__clzsi2+0xe>
 8002962:	0c00      	lsrs	r0, r0, #16
 8002964:	3910      	subs	r1, #16
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	4298      	cmp	r0, r3
 800296a:	d301      	bcc.n	8002970 <__clzsi2+0x18>
 800296c:	0a00      	lsrs	r0, r0, #8
 800296e:	3908      	subs	r1, #8
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	4298      	cmp	r0, r3
 8002974:	d301      	bcc.n	800297a <__clzsi2+0x22>
 8002976:	0900      	lsrs	r0, r0, #4
 8002978:	3904      	subs	r1, #4
 800297a:	a202      	add	r2, pc, #8	; (adr r2, 8002984 <__clzsi2+0x2c>)
 800297c:	5c10      	ldrb	r0, [r2, r0]
 800297e:	1840      	adds	r0, r0, r1
 8002980:	4770      	bx	lr
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	02020304 	.word	0x02020304
 8002988:	01010101 	.word	0x01010101
	...

08002994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002998:	f001 fc58 	bl	800424c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800299c:	f000 f870 	bl	8002a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a0:	f000 fba6 	bl	80030f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80029a4:	f000 fb86 	bl	80030b4 <MX_DMA_Init>
  MX_ADC_Init();
 80029a8:	f000 fa24 	bl	8002df4 <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_TIM1_Init();
 80029ac:	f000 ffa2 	bl	80038f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029b0:	f001 f8a6 	bl	8003b00 <MX_TIM3_Init>
  MX_TIM6_Init();
 80029b4:	f001 f940 	bl	8003c38 <MX_TIM6_Init>
  MX_TIM14_Init();
 80029b8:	f001 f960 	bl	8003c7c <MX_TIM14_Init>
  MX_TIM15_Init();
 80029bc:	f001 f9aa 	bl	8003d14 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80029c0:	f001 fb38 	bl	8004034 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <main+0xc4>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f003 fb1e 	bl	8006008 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <main+0xc8>)
 80029ce:	0018      	movs	r0, r3
 80029d0:	f003 fb1a 	bl	8006008 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 80029d4:	4922      	ldr	r1, [pc, #136]	; (8002a60 <main+0xcc>)
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <main+0xd0>)
 80029d8:	2201      	movs	r2, #1
 80029da:	0018      	movs	r0, r3
 80029dc:	f004 ff08 	bl	80077f0 <HAL_UART_Receive_IT>
	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 80029e0:	4921      	ldr	r1, [pc, #132]	; (8002a68 <main+0xd4>)
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <main+0xd8>)
 80029e4:	220a      	movs	r2, #10
 80029e6:	0018      	movs	r0, r3
 80029e8:	f001 fdd4 	bl	8004594 <HAL_ADC_Start_DMA>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <main+0x60>
	{
		Error_Handler(); //This function also enable the interruption
 80029f0:	f000 f8bc 	bl	8002b6c <Error_Handler>
	}

  /* USER CODE BEGIN 2 */
	HX711_Calibration(&weight_par);
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <main+0xdc>)
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 fdee 	bl	80035d8 <HX711_Calibration>
  /* USER CODE END 2 */

  HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <main+0xe0>)
 80029fe:	210c      	movs	r1, #12
 8002a00:	0018      	movs	r0, r3
 8002a02:	f003 fbd3 	bl	80061ac <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <main+0xe4>)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f003 fcd8 	bl	80063c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <main+0xe4>)
 8002a12:	2104      	movs	r1, #4
 8002a14:	0018      	movs	r0, r3
 8002a16:	f003 fcd3 	bl	80063c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <main+0xe4>)
 8002a1c:	2108      	movs	r1, #8
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f003 fcce 	bl	80063c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <main+0xe4>)
 8002a26:	210c      	movs	r1, #12
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f003 fcc9 	bl	80063c0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(weight_par.calibration_flag)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <main+0xdc>)
 8002a30:	7b1b      	ldrb	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0fb      	beq.n	8002a2e <main+0x9a>
		  printf("The Weight is: %.02f g\r\n", (float)weight_par.gram );
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <main+0xdc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7fe f888 	bl	8000b50 <__aeabi_i2f>
 8002a40:	1c03      	adds	r3, r0, #0
 8002a42:	1c18      	adds	r0, r3, #0
 8002a44:	f7ff feb8 	bl	80027b8 <__aeabi_f2d>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	000b      	movs	r3, r1
 8002a4c:	490b      	ldr	r1, [pc, #44]	; (8002a7c <main+0xe8>)
 8002a4e:	0008      	movs	r0, r1
 8002a50:	f006 fed6 	bl	8009800 <iprintf>
	  if(weight_par.calibration_flag)
 8002a54:	e7eb      	b.n	8002a2e <main+0x9a>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	2000036c 	.word	0x2000036c
 8002a5c:	200003b4 	.word	0x200003b4
 8002a60:	20000543 	.word	0x20000543
 8002a64:	20000548 	.word	0x20000548
 8002a68:	20000220 	.word	0x20000220
 8002a6c:	20000248 	.word	0x20000248
 8002a70:	20000234 	.word	0x20000234
 8002a74:	200002dc 	.word	0x200002dc
 8002a78:	20000324 	.word	0x20000324
 8002a7c:	0800d5a0 	.word	0x0800d5a0

08002a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b095      	sub	sp, #84	; 0x54
 8002a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a86:	2420      	movs	r4, #32
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	2330      	movs	r3, #48	; 0x30
 8002a8e:	001a      	movs	r2, r3
 8002a90:	2100      	movs	r1, #0
 8002a92:	f006 f836 	bl	8008b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a96:	2310      	movs	r3, #16
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	f006 f82e 	bl	8008b02 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aa6:	003b      	movs	r3, r7
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	2310      	movs	r3, #16
 8002aac:	001a      	movs	r2, r3
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f006 f827 	bl	8008b02 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ab4:	0021      	movs	r1, r4
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	2201      	movs	r2, #1
 8002ac0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	2202      	movs	r2, #2
 8002acc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	22a0      	movs	r2, #160	; 0xa0
 8002ad8:	0392      	lsls	r2, r2, #14
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f002 fca9 	bl	800543c <HAL_RCC_OscConfig>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d001      	beq.n	8002af2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002aee:	f000 f83d 	bl	8002b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af2:	2110      	movs	r1, #16
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2207      	movs	r2, #7
 8002af8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2202      	movs	r2, #2
 8002afe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2101      	movs	r1, #1
 8002b10:	0018      	movs	r0, r3
 8002b12:	f002 ffad 	bl	8005a70 <HAL_RCC_ClockConfig>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d001      	beq.n	8002b1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b1a:	f000 f827 	bl	8002b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b1e:	003b      	movs	r3, r7
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b24:	003b      	movs	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f003 f8e3 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d001      	beq.n	8002b3a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002b36:	f000 f819 	bl	8002b6c <Error_Handler>
  }
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b015      	add	sp, #84	; 0x54
 8002b40:	bd90      	pop	{r4, r7, pc}
	...

08002b44 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <__io_putchar+0x20>)
 8002b4e:	1d39      	adds	r1, r7, #4
 8002b50:	4805      	ldr	r0, [pc, #20]	; (8002b68 <__io_putchar+0x24>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	f004 fdac 	bl	80076b0 <HAL_UART_Transmit>
    return ch;
 8002b58:	687b      	ldr	r3, [r7, #4]
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	0000ffff 	.word	0x0000ffff
 8002b68:	20000548 	.word	0x20000548

08002b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
}
 8002b72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <Error_Handler+0x8>
	...

08002b78 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d000      	beq.n	8002b8a <HAL_TIM_PeriodElapsedCallback+0x12>
 8002b88:	e09a      	b.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x148>
//		static int period1 = 1000;
//		period1 = period1<50? 1000: period1-20;
//		TIM6->ARR=period1;
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);

		if(weight_par.calibration_flag == 1)
 8002b8a:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002b8c:	7b1b      	ldrb	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d000      	beq.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8002b92:	e0a5      	b.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x168>
		{
			static char dc_pwm, pid_pwm;
			Get_weight(&weight_par);
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fcf2 	bl	8003580 <Get_weight>
			pid_pwm = Incremental_PID(&weight_par, PULL_FORCE_THR);
 8002b9c:	23fa      	movs	r3, #250	; 0xfa
 8002b9e:	009a      	lsls	r2, r3, #2
 8002ba0:	4b52      	ldr	r3, [pc, #328]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 fd87 	bl	80036b8 <Incremental_PID>
 8002baa:	0003      	movs	r3, r0
 8002bac:	001a      	movs	r2, r3
 8002bae:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002bb0:	701a      	strb	r2, [r3, #0]
			if(0<pid_pwm)
 8002bb2:	4b4f      	ldr	r3, [pc, #316]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d043      	beq.n	8002c42 <HAL_TIM_PeriodElapsedCallback+0xca>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002bba:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f002 fbf8 	bl	80053b6 <HAL_GPIO_WritePin>
				AHBL_ON;
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f003 fcaa 	bl	8006524 <HAL_TIM_PWM_Stop>
 8002bd0:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f003 fca5 	bl	8006524 <HAL_TIM_PWM_Stop>
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bdc:	2108      	movs	r1, #8
 8002bde:	0018      	movs	r0, r3
 8002be0:	f003 fca0 	bl	8006524 <HAL_TIM_PWM_Stop>
 8002be4:	23e0      	movs	r3, #224	; 0xe0
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4844      	ldr	r0, [pc, #272]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	0019      	movs	r1, r3
 8002bee:	f002 fbe2 	bl	80053b6 <HAL_GPIO_WritePin>
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f003 fbe2 	bl	80063c0 <HAL_TIM_PWM_Start>
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	01db      	lsls	r3, r3, #7
 8002c00:	483e      	ldr	r0, [pc, #248]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	0019      	movs	r1, r3
 8002c06:	f002 fbd6 	bl	80053b6 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 1;
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	735a      	strb	r2, [r3, #13]
				dc_pwm = dc_pwm>=pid_pwm? dc_pwm:dc_pwm+5;
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d204      	bcs.n	8002c26 <HAL_TIM_PeriodElapsedCallback+0xae>
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	3305      	adds	r3, #5
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e001      	b.n	8002c2a <HAL_TIM_PeriodElapsedCallback+0xb2>
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4a35      	ldr	r2, [pc, #212]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c2c:	7013      	strb	r3, [r2, #0]
				if(dc_pwm>20)
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b14      	cmp	r3, #20
 8002c34:	d919      	bls.n	8002c6a <HAL_TIM_PeriodElapsedCallback+0xf2>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c40:	e013      	b.n	8002c6a <HAL_TIM_PeriodElapsedCallback+0xf2>
			}
			else
			{
				dc_pwm = dc_pwm<=pid_pwm? dc_pwm:dc_pwm-1;
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d904      	bls.n	8002c58 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e001      	b.n	8002c5c <HAL_TIM_PeriodElapsedCallback+0xe4>
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c5e:	7013      	strb	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(weight_par.gram<LOWER_LIMMIT)
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b95      	cmp	r3, #149	; 0x95
 8002c70:	dc36      	bgt.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x168>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	2101      	movs	r1, #1
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f002 fb9c 	bl	80053b6 <HAL_GPIO_WritePin>
				CLOSE_PWM;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002c80:	2100      	movs	r1, #0
 8002c82:	0018      	movs	r0, r3
 8002c84:	f003 fc4e 	bl	8006524 <HAL_TIM_PWM_Stop>
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	01db      	lsls	r3, r3, #7
 8002c8c:	481b      	ldr	r0, [pc, #108]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	0019      	movs	r1, r3
 8002c92:	f002 fb90 	bl	80053b6 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 0;
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	735a      	strb	r2, [r3, #13]
				dc_pwm = dc_pwm<=10? 0:dc_pwm-5;
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b0a      	cmp	r3, #10
 8002ca2:	d904      	bls.n	8002cae <HAL_TIM_PeriodElapsedCallback+0x136>
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	3b05      	subs	r3, #5
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	e000      	b.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x138>
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002cb2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
				period1--;
				TIM14->ARR=period1;
			}*/

	}
}
 8002cbe:	e00f      	b.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x168>
	else if(htim == &htim14)//10ms enter
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x168>
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002cca:	8b5a      	ldrh	r2, [r3, #26]
 8002ccc:	23fa      	movs	r3, #250	; 0xfa
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d905      	bls.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x168>
			adc_val.commutation_timeout = 0;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	831a      	strh	r2, [r3, #24]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000036c 	.word	0x2000036c
 8002cec:	20000234 	.word	0x20000234
 8002cf0:	20000244 	.word	0x20000244
 8002cf4:	48000800 	.word	0x48000800
 8002cf8:	200002dc 	.word	0x200002dc
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	20000245 	.word	0x20000245
 8002d04:	200003b4 	.word	0x200003b4
 8002d08:	20000000 	.word	0x20000000

08002d0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_UART_RxCpltCallback+0xb8>)
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d14e      	bne.n	8002dba <HAL_UART_RxCpltCallback+0xae>
	{
		extern uint8_t cnt;
		cnt=cnt==255?1:cnt+1;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2bff      	cmp	r3, #255	; 0xff
 8002d22:	d004      	beq.n	8002d2e <HAL_UART_RxCpltCallback+0x22>
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	e000      	b.n	8002d30 <HAL_UART_RxCpltCallback+0x24>
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002d32:	701a      	strb	r2, [r3, #0]
		rxbuf[cnt] = rxdata;
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002d3c:	7819      	ldrb	r1, [r3, #0]
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002d40:	5499      	strb	r1, [r3, r2]
		switch(rxbuf[cnt])
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	001a      	movs	r2, r3
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002d4a:	5c9b      	ldrb	r3, [r3, r2]
 8002d4c:	2b34      	cmp	r3, #52	; 0x34
 8002d4e:	dc09      	bgt.n	8002d64 <HAL_UART_RxCpltCallback+0x58>
 8002d50:	2b2b      	cmp	r3, #43	; 0x2b
 8002d52:	db25      	blt.n	8002da0 <HAL_UART_RxCpltCallback+0x94>
 8002d54:	3b2b      	subs	r3, #43	; 0x2b
 8002d56:	2b09      	cmp	r3, #9
 8002d58:	d822      	bhi.n	8002da0 <HAL_UART_RxCpltCallback+0x94>
 8002d5a:	009a      	lsls	r2, r3, #2
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_UART_RxCpltCallback+0xc8>)
 8002d5e:	18d3      	adds	r3, r2, r3
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	469f      	mov	pc, r3
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d012      	beq.n	8002d8e <HAL_UART_RxCpltCallback+0x82>
		case '4':
		{
			TIM14->ARR--;
		}
		default:
			break;
 8002d68:	e01a      	b.n	8002da0 <HAL_UART_RxCpltCallback+0x94>
			HAL_TIM_Base_Stop_IT(&htim6);
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_UART_RxCpltCallback+0xcc>)
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f003 f997 	bl	80060a0 <HAL_TIM_Base_Stop_IT>
			break;
 8002d72:	e016      	b.n	8002da2 <HAL_UART_RxCpltCallback+0x96>
			HAL_TIM_Base_Start_IT(&htim6);
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_UART_RxCpltCallback+0xcc>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f003 f946 	bl	8006008 <HAL_TIM_Base_Start_IT>
			break;
 8002d7c:	e011      	b.n	8002da2 <HAL_UART_RxCpltCallback+0x96>
			BT_PWM_handle(TURE);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f001 f9ee 	bl	8004160 <BT_PWM_handle>
			break;
 8002d84:	e00d      	b.n	8002da2 <HAL_UART_RxCpltCallback+0x96>
			BT_PWM_handle(FALSE);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f001 f9ea 	bl	8004160 <BT_PWM_handle>
			break;
 8002d8c:	e009      	b.n	8002da2 <HAL_UART_RxCpltCallback+0x96>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_UART_RxCpltCallback+0xd0>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f003 f985 	bl	80060a0 <HAL_TIM_Base_Stop_IT>
			break;
 8002d96:	e004      	b.n	8002da2 <HAL_UART_RxCpltCallback+0x96>
			TIM14->ARR--;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_UART_RxCpltCallback+0xd4>)
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002da0:	46c0      	nop			; (mov r8, r8)
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8002da2:	490a      	ldr	r1, [pc, #40]	; (8002dcc <HAL_UART_RxCpltCallback+0xc0>)
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_UART_RxCpltCallback+0xb8>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	0018      	movs	r0, r3
 8002daa:	f004 fd21 	bl	80077f0 <HAL_UART_Receive_IT>
		cnt++;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002db8:	701a      	strb	r2, [r3, #0]
	}
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000548 	.word	0x20000548
 8002dc8:	20000544 	.word	0x20000544
 8002dcc:	20000543 	.word	0x20000543
 8002dd0:	20000444 	.word	0x20000444
 8002dd4:	0800d6c0 	.word	0x0800d6c0
 8002dd8:	2000036c 	.word	0x2000036c
 8002ddc:	200002dc 	.word	0x200002dc
 8002de0:	40002000 	.word	0x40002000

08002de4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{													  // The ADC sample time is for all channel, the DMA
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
//	My_ADC_getvalue(adc_buf, &adc_val);
//	BLDC_Phase_switching(&adc_val);
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	230c      	movs	r3, #12
 8002e00:	001a      	movs	r2, r3
 8002e02:	2100      	movs	r1, #0
 8002e04:	f005 fe7d 	bl	8008b02 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e08:	4b60      	ldr	r3, [pc, #384]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e0a:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <MX_ADC_Init+0x19c>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e0e:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e14:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e1a:	4b5c      	ldr	r3, [pc, #368]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e20:	4b5a      	ldr	r3, [pc, #360]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002e26:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e28:	2208      	movs	r2, #8
 8002e2a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e2c:	4b57      	ldr	r3, [pc, #348]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e32:	4b56      	ldr	r3, [pc, #344]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e38:	4b54      	ldr	r3, [pc, #336]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8002e44:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e4a:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	00d2      	lsls	r2, r2, #3
 8002e50:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002e52:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e54:	2224      	movs	r2, #36	; 0x24
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f001 fa56 	bl	8004314 <HAL_ADC_Init>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002e6c:	f7ff fe7e 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	0152      	lsls	r2, r2, #5
 8002e7c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2206      	movs	r2, #6
 8002e82:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e84:	1d3a      	adds	r2, r7, #4
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <MX_ADC_Init+0x198>)
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f001 fc14 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d001      	beq.n	8002e98 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002e94:	f7ff fe6a 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e9e:	1d3a      	adds	r2, r7, #4
 8002ea0:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <MX_ADC_Init+0x198>)
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f001 fc07 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002eae:	f7ff fe5d 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002eb8:	1d3a      	adds	r2, r7, #4
 8002eba:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <MX_ADC_Init+0x198>)
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f001 fbfa 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002ec8:	f7ff fe50 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2203      	movs	r2, #3
 8002ed0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ed2:	1d3a      	adds	r2, r7, #4
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <MX_ADC_Init+0x198>)
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f001 fbed 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002ede:	1e03      	subs	r3, r0, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8002ee2:	f7ff fe43 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2204      	movs	r2, #4
 8002eea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002eec:	1d3a      	adds	r2, r7, #4
 8002eee:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <MX_ADC_Init+0x198>)
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f001 fbe0 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d001      	beq.n	8002f00 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002efc:	f7ff fe36 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2205      	movs	r2, #5
 8002f04:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f06:	1d3a      	adds	r2, r7, #4
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <MX_ADC_Init+0x198>)
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f001 fbd3 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8002f16:	f7ff fe29 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2206      	movs	r2, #6
 8002f1e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f20:	1d3a      	adds	r2, r7, #4
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <MX_ADC_Init+0x198>)
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f001 fbc6 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8002f30:	f7ff fe1c 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2207      	movs	r2, #7
 8002f38:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f3a:	1d3a      	adds	r2, r7, #4
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <MX_ADC_Init+0x198>)
 8002f3e:	0011      	movs	r1, r2
 8002f40:	0018      	movs	r0, r3
 8002f42:	f001 fbb9 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8002f4a:	f7ff fe0f 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	2208      	movs	r2, #8
 8002f52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f54:	1d3a      	adds	r2, r7, #4
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MX_ADC_Init+0x198>)
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f001 fbac 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002f60:	1e03      	subs	r3, r0, #0
 8002f62:	d001      	beq.n	8002f68 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8002f64:	f7ff fe02 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	2211      	movs	r2, #17
 8002f6c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f6e:	1d3a      	adds	r2, r7, #4
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MX_ADC_Init+0x198>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 fb9f 	bl	80046b8 <HAL_ADC_ConfigChannel>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8002f7e:	f7ff fdf5 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	20000248 	.word	0x20000248
 8002f90:	40012400 	.word	0x40012400

08002f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b08b      	sub	sp, #44	; 0x2c
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	2414      	movs	r4, #20
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f005 fdab 	bl	8008b02 <memset>
  if(adcHandle->Instance==ADC1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_ADC_MspInit+0x10c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d170      	bne.n	8003098 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	0089      	lsls	r1, r1, #2
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]
 8002fc4:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b33      	ldr	r3, [pc, #204]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	0289      	lsls	r1, r1, #10
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	615a      	str	r2, [r3, #20]
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	029b      	lsls	r3, r3, #10
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	02c9      	lsls	r1, r1, #11
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	615a      	str	r2, [r3, #20]
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_ADC_MspInit+0x110>)
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	02db      	lsls	r3, r3, #11
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800300a:	193b      	adds	r3, r7, r4
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2203      	movs	r2, #3
 8003014:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	193a      	adds	r2, r7, r4
 800301e:	2390      	movs	r3, #144	; 0x90
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f002 f839 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800302a:	193b      	adds	r3, r7, r4
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2203      	movs	r2, #3
 8003034:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	193b      	adds	r3, r7, r4
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_ADC_MspInit+0x114>)
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f002 f82a 	bl	800509c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_ADC_MspInit+0x118>)
 800304a:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_ADC_MspInit+0x11c>)
 800304c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_ADC_MspInit+0x118>)
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_ADC_MspInit+0x118>)
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	00d2      	lsls	r2, r2, #3
 800306e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003072:	2220      	movs	r2, #32
 8003074:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003078:	2200      	movs	r2, #0
 800307a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_ADC_MspInit+0x118>)
 800307e:	0018      	movs	r0, r3
 8003080:	f001 fdf6 	bl	8004c70 <HAL_DMA_Init>
 8003084:	1e03      	subs	r3, r0, #0
 8003086:	d001      	beq.n	800308c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8003088:	f7ff fd70 	bl	8002b6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_ADC_MspInit+0x118>)
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b00b      	add	sp, #44	; 0x2c
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	40012400 	.word	0x40012400
 80030a4:	40021000 	.word	0x40021000
 80030a8:	48000400 	.word	0x48000400
 80030ac:	20000288 	.word	0x20000288
 80030b0:	40020008 	.word	0x40020008

080030b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MX_DMA_Init+0x38>)
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <MX_DMA_Init+0x38>)
 80030c0:	2101      	movs	r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	615a      	str	r2, [r3, #20]
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <MX_DMA_Init+0x38>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	2009      	movs	r0, #9
 80030d8:	f001 fd98 	bl	8004c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030dc:	2009      	movs	r0, #9
 80030de:	f001 fdaa 	bl	8004c36 <HAL_NVIC_EnableIRQ>

}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b002      	add	sp, #8
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	40021000 	.word	0x40021000

080030f0 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b08b      	sub	sp, #44	; 0x2c
 80030f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f6:	2414      	movs	r4, #20
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	0018      	movs	r0, r3
 80030fc:	2314      	movs	r3, #20
 80030fe:	001a      	movs	r2, r3
 8003100:	2100      	movs	r1, #0
 8003102:	f005 fcfe 	bl	8008b02 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003106:	4ba9      	ldr	r3, [pc, #676]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	4ba8      	ldr	r3, [pc, #672]	; (80033ac <MX_GPIO_Init+0x2bc>)
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0309      	lsls	r1, r1, #12
 8003110:	430a      	orrs	r2, r1
 8003112:	615a      	str	r2, [r3, #20]
 8003114:	4ba5      	ldr	r3, [pc, #660]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003122:	4ba2      	ldr	r3, [pc, #648]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	4ba1      	ldr	r3, [pc, #644]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	03c9      	lsls	r1, r1, #15
 800312c:	430a      	orrs	r2, r1
 800312e:	615a      	str	r2, [r3, #20]
 8003130:	4b9e      	ldr	r3, [pc, #632]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	03db      	lsls	r3, r3, #15
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b9b      	ldr	r3, [pc, #620]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	0289      	lsls	r1, r1, #10
 8003148:	430a      	orrs	r2, r1
 800314a:	615a      	str	r2, [r3, #20]
 800314c:	4b97      	ldr	r3, [pc, #604]	; (80033ac <MX_GPIO_Init+0x2bc>)
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	4b94      	ldr	r3, [pc, #592]	; (80033ac <MX_GPIO_Init+0x2bc>)
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	4b93      	ldr	r3, [pc, #588]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	02c9      	lsls	r1, r1, #11
 8003164:	430a      	orrs	r2, r1
 8003166:	615a      	str	r2, [r3, #20]
 8003168:	4b90      	ldr	r3, [pc, #576]	; (80033ac <MX_GPIO_Init+0x2bc>)
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	02db      	lsls	r3, r3, #11
 8003170:	4013      	ands	r3, r2
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003176:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <MX_GPIO_Init+0x2bc>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	0349      	lsls	r1, r1, #13
 8003180:	430a      	orrs	r2, r1
 8003182:	615a      	str	r2, [r3, #20]
 8003184:	4b89      	ldr	r3, [pc, #548]	; (80033ac <MX_GPIO_Init+0x2bc>)
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	035b      	lsls	r3, r3, #13
 800318c:	4013      	ands	r3, r2
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10
 8003192:	4987      	ldr	r1, [pc, #540]	; (80033b0 <MX_GPIO_Init+0x2c0>)
 8003194:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <MX_GPIO_Init+0x2c4>)
 8003196:	2200      	movs	r2, #0
 8003198:	0018      	movs	r0, r3
 800319a:	f002 f90c 	bl	80053b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800319e:	4b86      	ldr	r3, [pc, #536]	; (80033b8 <MX_GPIO_Init+0x2c8>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	2110      	movs	r1, #16
 80031a4:	0018      	movs	r0, r3
 80031a6:	f002 f906 	bl	80053b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80031aa:	4984      	ldr	r1, [pc, #528]	; (80033bc <MX_GPIO_Init+0x2cc>)
 80031ac:	4b84      	ldr	r3, [pc, #528]	; (80033c0 <MX_GPIO_Init+0x2d0>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	0018      	movs	r0, r3
 80031b2:	f002 f900 	bl	80053b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	0219      	lsls	r1, r3, #8
 80031ba:	2390      	movs	r3, #144	; 0x90
 80031bc:	05db      	lsls	r3, r3, #23
 80031be:	2200      	movs	r2, #0
 80031c0:	0018      	movs	r0, r3
 80031c2:	f002 f8f8 	bl	80053b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	01d2      	lsls	r2, r2, #7
 80031cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	4a75      	ldr	r2, [pc, #468]	; (80033b4 <MX_GPIO_Init+0x2c4>)
 80031de:	0019      	movs	r1, r3
 80031e0:	0010      	movs	r0, r2
 80031e2:	f001 ff5b 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC5 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	4a76      	ldr	r2, [pc, #472]	; (80033c4 <MX_GPIO_Init+0x2d4>)
 80031ea:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	2201      	movs	r2, #1
 80031f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	4a6c      	ldr	r2, [pc, #432]	; (80033b4 <MX_GPIO_Init+0x2c4>)
 8003202:	0019      	movs	r1, r3
 8003204:	0010      	movs	r0, r2
 8003206:	f001 ff49 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 800320a:	193b      	adds	r3, r7, r4
 800320c:	2243      	movs	r2, #67	; 0x43
 800320e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003210:	193b      	adds	r3, r7, r4
 8003212:	2203      	movs	r2, #3
 8003214:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	193b      	adds	r3, r7, r4
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800321c:	193b      	adds	r3, r7, r4
 800321e:	4a66      	ldr	r2, [pc, #408]	; (80033b8 <MX_GPIO_Init+0x2c8>)
 8003220:	0019      	movs	r1, r3
 8003222:	0010      	movs	r0, r2
 8003224:	f001 ff3a 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003228:	193b      	adds	r3, r7, r4
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800322e:	193b      	adds	r3, r7, r4
 8003230:	2201      	movs	r2, #1
 8003232:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2202      	movs	r2, #2
 8003238:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	2200      	movs	r2, #0
 800323e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	193b      	adds	r3, r7, r4
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <MX_GPIO_Init+0x2c4>)
 8003244:	0019      	movs	r1, r3
 8003246:	0010      	movs	r0, r2
 8003248:	f001 ff28 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800324c:	193b      	adds	r3, r7, r4
 800324e:	220e      	movs	r2, #14
 8003250:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003252:	193b      	adds	r3, r7, r4
 8003254:	2203      	movs	r2, #3
 8003256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	193b      	adds	r3, r7, r4
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325e:	193b      	adds	r3, r7, r4
 8003260:	4a54      	ldr	r2, [pc, #336]	; (80033b4 <MX_GPIO_Init+0x2c4>)
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f001 ff19 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800326a:	193b      	adds	r3, r7, r4
 800326c:	2210      	movs	r2, #16
 800326e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003270:	193b      	adds	r3, r7, r4
 8003272:	2201      	movs	r2, #1
 8003274:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	193b      	adds	r3, r7, r4
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	193b      	adds	r3, r7, r4
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003282:	193b      	adds	r3, r7, r4
 8003284:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <MX_GPIO_Init+0x2c8>)
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f001 ff07 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800328e:	193b      	adds	r3, r7, r4
 8003290:	2220      	movs	r2, #32
 8003292:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003294:	193b      	adds	r3, r7, r4
 8003296:	2200      	movs	r2, #0
 8003298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	193b      	adds	r3, r7, r4
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	4a45      	ldr	r2, [pc, #276]	; (80033b8 <MX_GPIO_Init+0x2c8>)
 80032a4:	0019      	movs	r1, r3
 80032a6:	0010      	movs	r0, r2
 80032a8:	f001 fef8 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	4a43      	ldr	r2, [pc, #268]	; (80033bc <MX_GPIO_Init+0x2cc>)
 80032b0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	2201      	movs	r2, #1
 80032b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	4a3e      	ldr	r2, [pc, #248]	; (80033c0 <MX_GPIO_Init+0x2d0>)
 80032c8:	0019      	movs	r1, r3
 80032ca:	0010      	movs	r0, r2
 80032cc:	f001 fee6 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	22c0      	movs	r2, #192	; 0xc0
 80032d4:	0152      	lsls	r2, r2, #5
 80032d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	2203      	movs	r2, #3
 80032dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	193a      	adds	r2, r7, r4
 80032e6:	2390      	movs	r3, #144	; 0x90
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f001 fed5 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032f2:	0021      	movs	r1, r4
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	2288      	movs	r2, #136	; 0x88
 80032fe:	0352      	lsls	r2, r2, #13
 8003300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003308:	000c      	movs	r4, r1
 800330a:	187b      	adds	r3, r7, r1
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <MX_GPIO_Init+0x2c8>)
 800330e:	0019      	movs	r1, r3
 8003310:	0010      	movs	r0, r2
 8003312:	f001 fec3 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003316:	0021      	movs	r1, r4
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	0212      	lsls	r2, r2, #8
 800331e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	000c      	movs	r4, r1
 8003322:	193b      	adds	r3, r7, r4
 8003324:	2201      	movs	r2, #1
 8003326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	193b      	adds	r3, r7, r4
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	193a      	adds	r2, r7, r4
 8003336:	2390      	movs	r3, #144	; 0x90
 8003338:	05db      	lsls	r3, r3, #23
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f001 fead 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003342:	0021      	movs	r1, r4
 8003344:	187b      	adds	r3, r7, r1
 8003346:	2204      	movs	r2, #4
 8003348:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2288      	movs	r2, #136	; 0x88
 800334e:	0352      	lsls	r2, r2, #13
 8003350:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003358:	000c      	movs	r4, r1
 800335a:	187b      	adds	r3, r7, r1
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <MX_GPIO_Init+0x2d8>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f001 fe9b 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003366:	0021      	movs	r1, r4
 8003368:	187b      	adds	r3, r7, r1
 800336a:	22c0      	movs	r2, #192	; 0xc0
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2212      	movs	r2, #18
 8003374:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2203      	movs	r2, #3
 8003380:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2201      	movs	r2, #1
 8003386:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	187b      	adds	r3, r7, r1
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <MX_GPIO_Init+0x2d0>)
 800338c:	0019      	movs	r1, r3
 800338e:	0010      	movs	r0, r2
 8003390:	f001 fe84 	bl	800509c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	2007      	movs	r0, #7
 800339a:	f001 fc37 	bl	8004c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800339e:	2007      	movs	r0, #7
 80033a0:	f001 fc49 	bl	8004c36 <HAL_NVIC_EnableIRQ>

}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b00b      	add	sp, #44	; 0x2c
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	00009c21 	.word	0x00009c21
 80033b4:	48000800 	.word	0x48000800
 80033b8:	48001400 	.word	0x48001400
 80033bc:	0000fc04 	.word	0x0000fc04
 80033c0:	48000400 	.word	0x48000400
 80033c4:	00009c20 	.word	0x00009c20
 80033c8:	48000c00 	.word	0x48000c00

080033cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_MspInit+0x44>)
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_MspInit+0x44>)
 80033d8:	2101      	movs	r1, #1
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <HAL_MspInit+0x44>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2201      	movs	r2, #1
 80033e4:	4013      	ands	r3, r2
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_MspInit+0x44>)
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_MspInit+0x44>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0549      	lsls	r1, r1, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	61da      	str	r2, [r3, #28]
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_MspInit+0x44>)
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	055b      	lsls	r3, r3, #21
 8003400:	4013      	ands	r3, r2
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	40021000 	.word	0x40021000

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003418:	e7fe      	b.n	8003418 <NMI_Handler+0x4>

0800341a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341e:	e7fe      	b.n	800341e <HardFault_Handler+0x4>

08003420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003438:	f000 ff50 	bl	80042dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003446:	2080      	movs	r0, #128	; 0x80
 8003448:	f001 ffd2 	bl	80053f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <DMA1_Channel1_IRQHandler+0x14>)
 800345a:	0018      	movs	r0, r3
 800345c:	f001 fd33 	bl	8004ec6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	20000288 	.word	0x20000288

0800346c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <TIM6_IRQHandler+0x14>)
 8003472:	0018      	movs	r0, r3
 8003474:	f003 f8d2 	bl	800661c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	2000036c 	.word	0x2000036c

08003484 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <TIM14_IRQHandler+0x14>)
 800348a:	0018      	movs	r0, r3
 800348c:	f003 f8c6 	bl	800661c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	200003b4 	.word	0x200003b4

0800349c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <USART1_IRQHandler+0x14>)
 80034a2:	0018      	movs	r0, r3
 80034a4:	f004 f9fc 	bl	80078a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	20000548 	.word	0x20000548

080034b4 <Get_24bit_Weight>:
 *      Author: kzhou
 */
#include "sw_spi.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	0002      	movs	r2, r0
 80034bc:	1dfb      	adds	r3, r7, #7
 80034be:	701a      	strb	r2, [r3, #0]
	unsigned int weight=0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
	SW_SPI_PWR_ON; //Pull down clk
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <Get_24bit_Weight+0xc8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	2110      	movs	r1, #16
 80034ca:	0018      	movs	r0, r3
 80034cc:	f001 ff73 	bl	80053b6 <HAL_GPIO_WritePin>

	while(SW_SPI_DAT_RDY)
 80034d0:	e00b      	b.n	80034ea <Get_24bit_Weight+0x36>
	{
		SW_SPI_CLK_H;
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <Get_24bit_Weight+0xc8>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	2110      	movs	r1, #16
 80034d8:	0018      	movs	r0, r3
 80034da:	f001 ff6c 	bl	80053b6 <HAL_GPIO_WritePin>
//		delay_us(1);
		SW_SPI_CLK_L;
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <Get_24bit_Weight+0xc8>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	2110      	movs	r1, #16
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 ff66 	bl	80053b6 <HAL_GPIO_WritePin>
	while(SW_SPI_DAT_RDY)
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <Get_24bit_Weight+0xc8>)
 80034ec:	2120      	movs	r1, #32
 80034ee:	0018      	movs	r0, r3
 80034f0:	f001 ff44 	bl	800537c <HAL_GPIO_ReadPin>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d1ec      	bne.n	80034d2 <Get_24bit_Weight+0x1e>
	}

	for(char i = 24; i!=0; i--)
 80034f8:	230b      	movs	r3, #11
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2218      	movs	r2, #24
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e021      	b.n	8003546 <Get_24bit_Weight+0x92>
	{
		SW_SPI_CLK_H;
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <Get_24bit_Weight+0xc8>)
 8003504:	2201      	movs	r2, #1
 8003506:	2110      	movs	r1, #16
 8003508:	0018      	movs	r0, r3
 800350a:	f001 ff54 	bl	80053b6 <HAL_GPIO_WritePin>
		weight = weight<<1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
	//	delay_us(1);
		SW_SPI_CLK_L;
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <Get_24bit_Weight+0xc8>)
 8003516:	2200      	movs	r2, #0
 8003518:	2110      	movs	r1, #16
 800351a:	0018      	movs	r0, r3
 800351c:	f001 ff4b 	bl	80053b6 <HAL_GPIO_WritePin>
		if(SW_SPI_DAT_RDY)
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <Get_24bit_Weight+0xc8>)
 8003522:	2120      	movs	r1, #32
 8003524:	0018      	movs	r0, r3
 8003526:	f001 ff29 	bl	800537c <HAL_GPIO_ReadPin>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d002      	beq.n	8003534 <Get_24bit_Weight+0x80>
		{
		 weight+=1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
		}
		delay_us(1);
 8003534:	2001      	movs	r0, #1
 8003536:	f000 fd4f 	bl	8003fd8 <delay_us>
	for(char i = 24; i!=0; i--)
 800353a:	210b      	movs	r1, #11
 800353c:	187b      	adds	r3, r7, r1
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	187b      	adds	r3, r7, r1
 8003542:	3a01      	subs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	230b      	movs	r3, #11
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1d8      	bne.n	8003502 <Get_24bit_Weight+0x4e>
	}
	SW_SPI_CLK_H;
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <Get_24bit_Weight+0xc8>)
 8003552:	2201      	movs	r2, #1
 8003554:	2110      	movs	r1, #16
 8003556:	0018      	movs	r0, r3
 8003558:	f001 ff2d 	bl	80053b6 <HAL_GPIO_WritePin>
//	delay_us(1);
	weight = weight^0x800000;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	0412      	lsls	r2, r2, #16
 8003562:	4053      	eors	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
	SW_SPI_CLK_L;
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <Get_24bit_Weight+0xc8>)
 8003568:	2200      	movs	r2, #0
 800356a:	2110      	movs	r1, #16
 800356c:	0018      	movs	r0, r3
 800356e:	f001 ff22 	bl	80053b6 <HAL_GPIO_WritePin>

	//Preserved for channel selection

	return weight;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bd80      	pop	{r7, pc}
 800357c:	48001400 	.word	0x48001400

08003580 <Get_weight>:

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	weight_par->gross_weight = Get_24bit_Weight(CHA_128);
 8003588:	2019      	movs	r0, #25
 800358a:	f7ff ff93 	bl	80034b4 <Get_24bit_Weight>
 800358e:	0003      	movs	r3, r0
 8003590:	001a      	movs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
	if(weight_par->calibration_flag)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7b1b      	ldrb	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <Get_weight+0x4e>
	{
		if(weight_par->gross_weight - weight_par->calibrated_value>0)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dd0d      	ble.n	80035c8 <Get_weight+0x48>
			weight_par->gram = (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	21e1      	movs	r1, #225	; 0xe1
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fc fe4b 	bl	8000254 <__divsi3>
 80035be:	0003      	movs	r3, r0
 80035c0:	001a      	movs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
		else
			weight_par->gram = 0;

		//Kalman  filter
	}
}
 80035c6:	e002      	b.n	80035ce <Get_weight+0x4e>
			weight_par->gram = 0;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HX711_Calibration>:

void HX711_Calibration(HX711_Structure* weight_par)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	  /*******Get gross weight**************/
	  SW_SPI_PWR_OFF;
 80035e0:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <HX711_Calibration+0xcc>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	2110      	movs	r1, #16
 80035e6:	0018      	movs	r0, r3
 80035e8:	f001 fee5 	bl	80053b6 <HAL_GPIO_WritePin>
	  delay_us(200);
 80035ec:	20c8      	movs	r0, #200	; 0xc8
 80035ee:	f000 fcf3 	bl	8003fd8 <delay_us>
	  SW_SPI_PWR_ON;
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HX711_Calibration+0xcc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	2110      	movs	r1, #16
 80035f8:	0018      	movs	r0, r3
 80035fa:	f001 fedc 	bl	80053b6 <HAL_GPIO_WritePin>
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 80035fe:	2019      	movs	r0, #25
 8003600:	f7ff ff58 	bl	80034b4 <Get_24bit_Weight>
 8003604:	0003      	movs	r3, r0
 8003606:	001a      	movs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	609a      	str	r2, [r3, #8]
	  delay_us(2000);
 800360c:	23fa      	movs	r3, #250	; 0xfa
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	0018      	movs	r0, r3
 8003612:	f000 fce1 	bl	8003fd8 <delay_us>
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003616:	2019      	movs	r0, #25
 8003618:	f7ff ff4c 	bl	80034b4 <Get_24bit_Weight>
 800361c:	0003      	movs	r3, r0
 800361e:	001a      	movs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	609a      	str	r2, [r3, #8]

	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003624:	e025      	b.n	8003672 <HX711_Calibration+0x9a>
	  {
		  printf("Sensor initial error, re-calibrating");
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HX711_Calibration+0xd0>)
 8003628:	0018      	movs	r0, r3
 800362a:	f006 f8e9 	bl	8009800 <iprintf>
		  SW_SPI_PWR_OFF;
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HX711_Calibration+0xcc>)
 8003630:	2201      	movs	r2, #1
 8003632:	2110      	movs	r1, #16
 8003634:	0018      	movs	r0, r3
 8003636:	f001 febe 	bl	80053b6 <HAL_GPIO_WritePin>
		  delay_us(200);
 800363a:	20c8      	movs	r0, #200	; 0xc8
 800363c:	f000 fccc 	bl	8003fd8 <delay_us>
		  SW_SPI_PWR_ON;
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HX711_Calibration+0xcc>)
 8003642:	2200      	movs	r2, #0
 8003644:	2110      	movs	r1, #16
 8003646:	0018      	movs	r0, r3
 8003648:	f001 feb5 	bl	80053b6 <HAL_GPIO_WritePin>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 800364c:	2019      	movs	r0, #25
 800364e:	f7ff ff31 	bl	80034b4 <Get_24bit_Weight>
 8003652:	0003      	movs	r3, r0
 8003654:	001a      	movs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
		  delay_us(2000);
 800365a:	23fa      	movs	r3, #250	; 0xfa
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	0018      	movs	r0, r3
 8003660:	f000 fcba 	bl	8003fd8 <delay_us>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003664:	2019      	movs	r0, #25
 8003666:	f7ff ff25 	bl	80034b4 <Get_24bit_Weight>
 800366a:	0003      	movs	r3, r0
 800366c:	001a      	movs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]
	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <HX711_Calibration+0xd4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	ddd4      	ble.n	8003626 <HX711_Calibration+0x4e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <HX711_Calibration+0xd8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	dccf      	bgt.n	8003626 <HX711_Calibration+0x4e>
	  }
	  printf("calibration ok weight:%d", weight_par->calibrated_value);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HX711_Calibration+0xdc>)
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f006 f8b6 	bl	8009800 <iprintf>
	  weight_par->calibration_flag = 1; //Calibration done
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	731a      	strb	r2, [r3, #12]

}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	48001400 	.word	0x48001400
 80036a8:	0800d5bc 	.word	0x0800d5bc
 80036ac:	007a11ff 	.word	0x007a11ff
 80036b0:	007ea5e0 	.word	0x007ea5e0
 80036b4:	0800d5e4 	.word	0x0800d5e4

080036b8 <Incremental_PID>:
// e(k) the value difference of actual and setting e(k-1) the last time difference
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]

char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	000a      	movs	r2, r1
 80036c2:	1cbb      	adds	r3, r7, #2
 80036c4:	801a      	strh	r2, [r3, #0]
	static float Kp = 0.05, Ki = 0.1, Kd = 0.5;
	static int  sum_integral=0, Bias=0, Last_bias=0;
	static int PWM;
	Bias = weight_par->gram> LOWER_LIMMIT? weight_par->gram - pull_force_thr : 0;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b96      	cmp	r3, #150	; 0x96
 80036cc:	dd05      	ble.n	80036da <Incremental_PID+0x22>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	1cbb      	adds	r3, r7, #2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	1ad2      	subs	r2, r2, r3
 80036d8:	e000      	b.n	80036dc <Incremental_PID+0x24>
 80036da:	2200      	movs	r2, #0
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <Incremental_PID+0xa4>)
 80036de:	601a      	str	r2, [r3, #0]
	//sum_integral +=Bias;
	PWM += Kp*(Bias-Last_bias)/*+Ki*sum_integral + Kd*(Bias-2*Last_bias+*/;
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <Incremental_PID+0xa8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fd fa33 	bl	8000b50 <__aeabi_i2f>
 80036ea:	1c04      	adds	r4, r0, #0
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <Incremental_PID+0xa4>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <Incremental_PID+0xac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7fd fa2a 	bl	8000b50 <__aeabi_i2f>
 80036fc:	1c02      	adds	r2, r0, #0
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <Incremental_PID+0xb0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1c19      	adds	r1, r3, #0
 8003704:	1c10      	adds	r0, r2, #0
 8003706:	f7fd f8dd 	bl	80008c4 <__aeabi_fmul>
 800370a:	1c03      	adds	r3, r0, #0
 800370c:	1c19      	adds	r1, r3, #0
 800370e:	1c20      	adds	r0, r4, #0
 8003710:	f7fc ff3a 	bl	8000588 <__aeabi_fadd>
 8003714:	1c03      	adds	r3, r0, #0
 8003716:	1c18      	adds	r0, r3, #0
 8003718:	f7fd f9fa 	bl	8000b10 <__aeabi_f2iz>
 800371c:	0002      	movs	r2, r0
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <Incremental_PID+0xa8>)
 8003720:	601a      	str	r2, [r3, #0]
	if(PWM>=0)
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <Incremental_PID+0xa8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0a      	blt.n	8003740 <Incremental_PID+0x88>
	{
		PWM = PWM>=90? 100:PWM;
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <Incremental_PID+0xa8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b59      	cmp	r3, #89	; 0x59
 8003730:	dc02      	bgt.n	8003738 <Incremental_PID+0x80>
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <Incremental_PID+0xa8>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	e000      	b.n	800373a <Incremental_PID+0x82>
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <Incremental_PID+0xa8>)
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e002      	b.n	8003746 <Incremental_PID+0x8e>
	}
	else
	{
		PWM = 0;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <Incremental_PID+0xa8>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	}
	Last_bias = Bias;
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <Incremental_PID+0xa4>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <Incremental_PID+0xac>)
 800374c:	601a      	str	r2, [r3, #0]
	return PWM;
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <Incremental_PID+0xa8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b2db      	uxtb	r3, r3
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b003      	add	sp, #12
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	200002cc 	.word	0x200002cc
 8003760:	200002d0 	.word	0x200002d0
 8003764:	200002d4 	.word	0x200002d4
 8003768:	20000020 	.word	0x20000020

0800376c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  return 1;
 8003770:	2301      	movs	r3, #1
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_kill>:

int _kill(int pid, int sig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003782:	f005 f98b 	bl	8008a9c <__errno>
 8003786:	0003      	movs	r3, r0
 8003788:	2216      	movs	r2, #22
 800378a:	601a      	str	r2, [r3, #0]
  return -1;
 800378c:	2301      	movs	r3, #1
 800378e:	425b      	negs	r3, r3
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}

08003798 <_exit>:

void _exit (int status)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037a0:	2301      	movs	r3, #1
 80037a2:	425a      	negs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff ffe5 	bl	8003778 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037ae:	e7fe      	b.n	80037ae <_exit+0x16>

080037b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00a      	b.n	80037d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037c2:	e000      	b.n	80037c6 <_read+0x16>
 80037c4:	bf00      	nop
 80037c6:	0001      	movs	r1, r0
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	60ba      	str	r2, [r7, #8]
 80037ce:	b2ca      	uxtb	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	dbf0      	blt.n	80037c2 <_read+0x12>
  }

  return len;
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b006      	add	sp, #24
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e009      	b.n	8003810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	60ba      	str	r2, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	0018      	movs	r0, r3
 8003806:	f7ff f99d 	bl	8002b44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	dbf1      	blt.n	80037fc <_write+0x12>
  }
  return len;
 8003818:	687b      	ldr	r3, [r7, #4]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}

08003822 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800382a:	2301      	movs	r3, #1
 800382c:	425b      	negs	r3, r3
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}

08003836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	0192      	lsls	r2, r2, #6
 8003846:	605a      	str	r2, [r3, #4]
  return 0;
 8003848:	2300      	movs	r3, #0
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}

08003852 <_isatty>:

int _isatty(int file)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800385a:	2301      	movs	r3, #1
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <_sbrk+0x5c>)
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <_sbrk+0x60>)
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <_sbrk+0x64>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <_sbrk+0x64>)
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <_sbrk+0x68>)
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <_sbrk+0x64>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	18d3      	adds	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d207      	bcs.n	80038bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038ac:	f005 f8f6 	bl	8008a9c <__errno>
 80038b0:	0003      	movs	r3, r0
 80038b2:	220c      	movs	r2, #12
 80038b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	425b      	negs	r3, r3
 80038ba:	e009      	b.n	80038d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <_sbrk+0x64>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <_sbrk+0x64>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	18d2      	adds	r2, r2, r3
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_sbrk+0x64>)
 80038cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038ce:	68fb      	ldr	r3, [r7, #12]
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b006      	add	sp, #24
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20002000 	.word	0x20002000
 80038dc:	00000400 	.word	0x00000400
 80038e0:	200002d8 	.word	0x200002d8
 80038e4:	200005e8 	.word	0x200005e8

080038e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b09a      	sub	sp, #104	; 0x68
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038fa:	2358      	movs	r3, #88	; 0x58
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	0018      	movs	r0, r3
 8003900:	2310      	movs	r3, #16
 8003902:	001a      	movs	r2, r3
 8003904:	2100      	movs	r1, #0
 8003906:	f005 f8fc 	bl	8008b02 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800390a:	2344      	movs	r3, #68	; 0x44
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	0018      	movs	r0, r3
 8003910:	2314      	movs	r3, #20
 8003912:	001a      	movs	r2, r3
 8003914:	2100      	movs	r1, #0
 8003916:	f005 f8f4 	bl	8008b02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800391a:	233c      	movs	r3, #60	; 0x3c
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	0018      	movs	r0, r3
 8003920:	2308      	movs	r3, #8
 8003922:	001a      	movs	r2, r3
 8003924:	2100      	movs	r1, #0
 8003926:	f005 f8ec 	bl	8008b02 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800392a:	2320      	movs	r3, #32
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	0018      	movs	r0, r3
 8003930:	231c      	movs	r3, #28
 8003932:	001a      	movs	r2, r3
 8003934:	2100      	movs	r1, #0
 8003936:	f005 f8e4 	bl	8008b02 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800393a:	003b      	movs	r3, r7
 800393c:	0018      	movs	r0, r3
 800393e:	2320      	movs	r3, #32
 8003940:	001a      	movs	r2, r3
 8003942:	2100      	movs	r1, #0
 8003944:	f005 f8dd 	bl	8008b02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <MX_TIM1_Init+0x204>)
 800394a:	4a6c      	ldr	r2, [pc, #432]	; (8003afc <MX_TIM1_Init+0x208>)
 800394c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 800394e:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003950:	2218      	movs	r2, #24
 8003952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003954:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800395a:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <MX_TIM1_Init+0x204>)
 800395c:	2263      	movs	r2, #99	; 0x63
 800395e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003960:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003966:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396c:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <MX_TIM1_Init+0x204>)
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003972:	4b61      	ldr	r3, [pc, #388]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003974:	0018      	movs	r0, r3
 8003976:	f002 fa8d 	bl	8005e94 <HAL_TIM_Base_Init>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d001      	beq.n	8003982 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800397e:	f7ff f8f5 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003982:	2158      	movs	r1, #88	; 0x58
 8003984:	187b      	adds	r3, r7, r1
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	0152      	lsls	r2, r2, #5
 800398a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800398c:	187a      	adds	r2, r7, r1
 800398e:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f003 f876 	bl	8006a84 <HAL_TIM_ConfigClockSource>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800399c:	f7ff f8e6 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039a0:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <MX_TIM1_Init+0x204>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f002 fcb4 	bl	8006310 <HAL_TIM_PWM_Init>
 80039a8:	1e03      	subs	r3, r0, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80039ac:	f7ff f8de 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80039b0:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <MX_TIM1_Init+0x204>)
 80039b2:	0018      	movs	r0, r3
 80039b4:	f002 fba2 	bl	80060fc <HAL_TIM_OC_Init>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80039bc:	f7ff f8d6 	bl	8002b6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80039c0:	2144      	movs	r1, #68	; 0x44
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80039ce:	187a      	adds	r2, r7, r1
 80039d0:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <MX_TIM1_Init+0x204>)
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f003 f929 	bl	8006c2c <HAL_TIM_SlaveConfigSynchro>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80039de:	f7ff f8c5 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80039e2:	213c      	movs	r1, #60	; 0x3c
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	2270      	movs	r2, #112	; 0x70
 80039e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039f0:	187a      	adds	r2, r7, r1
 80039f2:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <MX_TIM1_Init+0x204>)
 80039f4:	0011      	movs	r1, r2
 80039f6:	0018      	movs	r0, r3
 80039f8:	f003 fd40 	bl	800747c <HAL_TIMEx_MasterConfigSynchronization>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003a00:	f7ff f8b4 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a04:	2120      	movs	r1, #32
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2260      	movs	r2, #96	; 0x60
 8003a0a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	2232      	movs	r2, #50	; 0x32
 8003a10:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	2200      	movs	r2, #0
 8003a22:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	2200      	movs	r2, #0
 8003a28:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a30:	1879      	adds	r1, r7, r1
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	0018      	movs	r0, r3
 8003a38:	f002 ff5e 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003a3c:	1e03      	subs	r3, r0, #0
 8003a3e:	d001      	beq.n	8003a44 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003a40:	f7ff f894 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a44:	2320      	movs	r3, #32
 8003a46:	18f9      	adds	r1, r7, r3
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f002 ff53 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8003a56:	f7ff f889 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	18f9      	adds	r1, r7, r3
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003a60:	2208      	movs	r2, #8
 8003a62:	0018      	movs	r0, r3
 8003a64:	f002 ff48 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8003a6c:	f7ff f87e 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003a70:	2120      	movs	r1, #32
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2230      	movs	r2, #48	; 0x30
 8003a76:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a78:	1879      	adds	r1, r7, r1
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003a7c:	220c      	movs	r2, #12
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f002 fee2 	bl	8006848 <HAL_TIM_OC_ConfigChannel>
 8003a84:	1e03      	subs	r3, r0, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8003a88:	f7ff f870 	bl	8002b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a8c:	003b      	movs	r3, r7
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a92:	003b      	movs	r3, r7
 8003a94:	2200      	movs	r2, #0
 8003a96:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a98:	003b      	movs	r3, r7
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a9e:	003b      	movs	r3, r7
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003aa4:	003b      	movs	r3, r7
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003aaa:	003b      	movs	r3, r7
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	0192      	lsls	r2, r2, #6
 8003ab0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ab2:	003b      	movs	r3, r7
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ab8:	003a      	movs	r2, r7
 8003aba:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f003 fd34 	bl	800752c <HAL_TIMEx_ConfigBreakDeadTime>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8003ac8:	f7ff f850 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 8003acc:	003b      	movs	r3, r7
 8003ace:	22f4      	movs	r2, #244	; 0xf4
 8003ad0:	32ff      	adds	r2, #255	; 0xff
 8003ad2:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ad4:	003a      	movs	r2, r7
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003ad8:	0011      	movs	r1, r2
 8003ada:	0018      	movs	r0, r3
 8003adc:	f003 fd26 	bl	800752c <HAL_TIMEx_ConfigBreakDeadTime>
 8003ae0:	1e03      	subs	r3, r0, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM1_Init+0x1f4>
  {
    Error_Handler();
 8003ae4:	f7ff f842 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <MX_TIM1_Init+0x204>)
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f9ee 	bl	8003ecc <HAL_TIM_MspPostInit>

}
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b01a      	add	sp, #104	; 0x68
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200002dc 	.word	0x200002dc
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	; 0x38
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b06:	2328      	movs	r3, #40	; 0x28
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	001a      	movs	r2, r3
 8003b10:	2100      	movs	r1, #0
 8003b12:	f004 fff6 	bl	8008b02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b16:	2320      	movs	r3, #32
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	001a      	movs	r2, r3
 8003b20:	2100      	movs	r1, #0
 8003b22:	f004 ffee 	bl	8008b02 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	0018      	movs	r0, r3
 8003b2a:	231c      	movs	r3, #28
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f004 ffe7 	bl	8008b02 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b34:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b36:	4a3f      	ldr	r2, [pc, #252]	; (8003c34 <MX_TIM3_Init+0x134>)
 8003b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003b3a:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b40:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003b46:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b48:	2263      	movs	r2, #99	; 0x63
 8003b4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4c:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b58:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f002 f99a 	bl	8005e94 <HAL_TIM_Base_Init>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003b64:	f7ff f802 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b68:	2128      	movs	r1, #40	; 0x28
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	0152      	lsls	r2, r2, #5
 8003b70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b72:	187a      	adds	r2, r7, r1
 8003b74:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f002 ff83 	bl	8006a84 <HAL_TIM_ConfigClockSource>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003b82:	f7fe fff3 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f002 fbc1 	bl	8006310 <HAL_TIM_PWM_Init>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d001      	beq.n	8003b96 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003b92:	f7fe ffeb 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b96:	2120      	movs	r1, #32
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ba4:	187a      	adds	r2, r7, r1
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f003 fc66 	bl	800747c <HAL_TIMEx_MasterConfigSynchronization>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003bb4:	f7fe ffda 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	2260      	movs	r2, #96	; 0x60
 8003bbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bd0:	1d39      	adds	r1, r7, #4
 8003bd2:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f002 fe8e 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003be0:	f7fe ffc4 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003be4:	1d39      	adds	r1, r7, #4
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003be8:	2204      	movs	r2, #4
 8003bea:	0018      	movs	r0, r3
 8003bec:	f002 fe84 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003bf4:	f7fe ffba 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bf8:	1d39      	adds	r1, r7, #4
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f002 fe7a 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8003c08:	f7fe ffb0 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c0c:	1d39      	adds	r1, r7, #4
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003c10:	220c      	movs	r2, #12
 8003c12:	0018      	movs	r0, r3
 8003c14:	f002 fe70 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8003c1c:	f7fe ffa6 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <MX_TIM3_Init+0x130>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 f952 	bl	8003ecc <HAL_TIM_MspPostInit>

}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b00e      	add	sp, #56	; 0x38
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000324 	.word	0x20000324
 8003c34:	40000400 	.word	0x40000400

08003c38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <MX_TIM6_Init+0x38>)
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <MX_TIM6_Init+0x3c>)
 8003c40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <MX_TIM6_Init+0x38>)
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <MX_TIM6_Init+0x40>)
 8003c46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <MX_TIM6_Init+0x38>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <MX_TIM6_Init+0x38>)
 8003c50:	2263      	movs	r2, #99	; 0x63
 8003c52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <MX_TIM6_Init+0x38>)
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <MX_TIM6_Init+0x38>)
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f002 f919 	bl	8005e94 <HAL_TIM_Base_Init>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8003c66:	f7fe ff81 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	2000036c 	.word	0x2000036c
 8003c74:	40001000 	.word	0x40001000
 8003c78:	0000bb7f 	.word	0x0000bb7f

08003c7c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	0018      	movs	r0, r3
 8003c86:	231c      	movs	r3, #28
 8003c88:	001a      	movs	r2, r3
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f004 ff39 	bl	8008b02 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003c92:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <MX_TIM14_Init+0x90>)
 8003c94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003c98:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <MX_TIM14_Init+0x94>)
 8003c9a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8003ca2:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003ca4:	2263      	movs	r2, #99	; 0x63
 8003ca6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f002 f8ec 	bl	8005e94 <HAL_TIM_Base_Init>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003cc0:	f7fe ff54 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f002 fa18 	bl	80060fc <HAL_TIM_OC_Init>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003cd0:	f7fe ff4c 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	2200      	movs	r2, #0
 8003cde:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cec:	1d39      	adds	r1, r7, #4
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <MX_TIM14_Init+0x8c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f002 fda8 	bl	8006848 <HAL_TIM_OC_ConfigChannel>
 8003cf8:	1e03      	subs	r3, r0, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003cfc:	f7fe ff36 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b008      	add	sp, #32
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200003b4 	.word	0x200003b4
 8003d0c:	40002000 	.word	0x40002000
 8003d10:	000012bf 	.word	0x000012bf

08003d14 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	0018      	movs	r0, r3
 8003d20:	2310      	movs	r3, #16
 8003d22:	001a      	movs	r2, r3
 8003d24:	2100      	movs	r1, #0
 8003d26:	f004 feec 	bl	8008b02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	2308      	movs	r3, #8
 8003d30:	001a      	movs	r2, r3
 8003d32:	2100      	movs	r1, #0
 8003d34:	f004 fee5 	bl	8008b02 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003d38:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d3a:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <MX_TIM15_Init+0xa8>)
 8003d3c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d40:	222f      	movs	r2, #47	; 0x2f
 8003d42:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d4c:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <MX_TIM15_Init+0xac>)
 8003d4e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d64:	0018      	movs	r0, r3
 8003d66:	f002 f895 	bl	8005e94 <HAL_TIM_Base_Init>
 8003d6a:	1e03      	subs	r3, r0, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8003d6e:	f7fe fefd 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d72:	2108      	movs	r1, #8
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	0152      	lsls	r2, r2, #5
 8003d7a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003d7c:	187a      	adds	r2, r7, r1
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f002 fe7e 	bl	8006a84 <HAL_TIM_ConfigClockSource>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003d8c:	f7fe feee 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d90:	003b      	movs	r3, r7
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d96:	003b      	movs	r3, r7
 8003d98:	2200      	movs	r2, #0
 8003d9a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003d9c:	003a      	movs	r2, r7
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_TIM15_Init+0xa4>)
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f003 fb6a 	bl	800747c <HAL_TIMEx_MasterConfigSynchronization>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003dac:	f7fe fede 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b006      	add	sp, #24
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200003fc 	.word	0x200003fc
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	0000ffff 	.word	0x0000ffff

08003dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_TIM_Base_MspInit+0xf0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10e      	bne.n	8003df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	0109      	lsls	r1, r1, #4
 8003de0:	430a      	orrs	r2, r1
 8003de2:	619a      	str	r2, [r3, #24]
 8003de4:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	4013      	ands	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003df2:	e05a      	b.n	8003eaa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a30      	ldr	r2, [pc, #192]	; (8003ebc <HAL_TIM_Base_MspInit+0xf8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10c      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e04:	2102      	movs	r1, #2
 8003e06:	430a      	orrs	r2, r1
 8003e08:	61da      	str	r2, [r3, #28]
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	69bb      	ldr	r3, [r7, #24]
}
 8003e16:	e048      	b.n	8003eaa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <HAL_TIM_Base_MspInit+0xfc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d114      	bne.n	8003e4c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e28:	2110      	movs	r1, #16
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	61da      	str	r2, [r3, #28]
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2210      	movs	r2, #16
 8003e34:	4013      	ands	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	2011      	movs	r0, #17
 8003e40:	f000 fee4 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003e44:	2011      	movs	r0, #17
 8003e46:	f000 fef6 	bl	8004c36 <HAL_NVIC_EnableIRQ>
}
 8003e4a:	e02e      	b.n	8003eaa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM14)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIM_Base_MspInit+0x100>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d116      	bne.n	8003e84 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	0049      	lsls	r1, r1, #1
 8003e60:	430a      	orrs	r2, r1
 8003e62:	61da      	str	r2, [r3, #28]
 8003e64:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2101      	movs	r1, #1
 8003e76:	2013      	movs	r0, #19
 8003e78:	f000 fec8 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003e7c:	2013      	movs	r0, #19
 8003e7e:	f000 feda 	bl	8004c36 <HAL_NVIC_EnableIRQ>
}
 8003e82:	e012      	b.n	8003eaa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM15)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <HAL_TIM_Base_MspInit+0x104>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10d      	bne.n	8003eaa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	0249      	lsls	r1, r1, #9
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	619a      	str	r2, [r3, #24]
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf4>)
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	025b      	lsls	r3, r3, #9
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b008      	add	sp, #32
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40001000 	.word	0x40001000
 8003ec4:	40002000 	.word	0x40002000
 8003ec8:	40014000 	.word	0x40014000

08003ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b08b      	sub	sp, #44	; 0x2c
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed4:	2414      	movs	r4, #20
 8003ed6:	193b      	adds	r3, r7, r4
 8003ed8:	0018      	movs	r0, r3
 8003eda:	2314      	movs	r3, #20
 8003edc:	001a      	movs	r2, r3
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f004 fe0f 	bl	8008b02 <memset>
  if(timHandle->Instance==TIM1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a37      	ldr	r2, [pc, #220]	; (8003fc8 <HAL_TIM_MspPostInit+0xfc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d126      	bne.n	8003f3c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_TIM_MspPostInit+0x100>)
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_TIM_MspPostInit+0x100>)
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	0289      	lsls	r1, r1, #10
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	615a      	str	r2, [r3, #20]
 8003efc:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_TIM_MspPostInit+0x100>)
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	029b      	lsls	r3, r3, #10
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	22e0      	movs	r2, #224	; 0xe0
 8003f0e:	00d2      	lsls	r2, r2, #3
 8003f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f12:	0021      	movs	r1, r4
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2202      	movs	r2, #2
 8003f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	2202      	movs	r2, #2
 8003f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2c:	187a      	adds	r2, r7, r1
 8003f2e:	2390      	movs	r3, #144	; 0x90
 8003f30:	05db      	lsls	r3, r3, #23
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f001 f8b1 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f3a:	e041      	b.n	8003fc0 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <HAL_TIM_MspPostInit+0x104>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d13c      	bne.n	8003fc0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_TIM_MspPostInit+0x100>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <HAL_TIM_MspPostInit+0x100>)
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0309      	lsls	r1, r1, #12
 8003f50:	430a      	orrs	r2, r1
 8003f52:	615a      	str	r2, [r3, #20]
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_TIM_MspPostInit+0x100>)
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	031b      	lsls	r3, r3, #12
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003f62:	2114      	movs	r1, #20
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	22b0      	movs	r2, #176	; 0xb0
 8003f68:	0092      	lsls	r2, r2, #2
 8003f6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	000c      	movs	r4, r1
 8003f6e:	193b      	adds	r3, r7, r4
 8003f70:	2202      	movs	r2, #2
 8003f72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	193b      	adds	r3, r7, r4
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7a:	193b      	adds	r3, r7, r4
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_TIM_MspPostInit+0x108>)
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	0010      	movs	r0, r2
 8003f8e:	f001 f885 	bl	800509c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f92:	0021      	movs	r1, r4
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	0052      	lsls	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <HAL_TIM_MspPostInit+0x108>)
 8003fb8:	0019      	movs	r1, r3
 8003fba:	0010      	movs	r0, r2
 8003fbc:	f001 f86e 	bl	800509c <HAL_GPIO_Init>
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b00b      	add	sp, #44	; 0x2c
 8003fc6:	bd90      	pop	{r4, r7, pc}
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	48000800 	.word	0x48000800

08003fd8 <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	0002      	movs	r2, r0
 8003fe0:	1dbb      	adds	r3, r7, #6
 8003fe2:	801a      	strh	r2, [r3, #0]
	us = 0xffff - us-10;
 8003fe4:	1dbb      	adds	r3, r7, #6
 8003fe6:	1dba      	adds	r2, r7, #6
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	210b      	movs	r1, #11
 8003fec:	4249      	negs	r1, r1
 8003fee:	1a8a      	subs	r2, r1, r2
 8003ff0:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, us);//the auto reload is set to 65535
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	; (800402c <delay_us+0x54>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1dba      	adds	r2, r7, #6
 8003ff8:	8812      	ldrh	r2, [r2, #0]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim15);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <delay_us+0x54>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f001 ff98 	bl	8005f34 <HAL_TIM_Base_Start>
	while(us<0xffff-10)
 8004004:	e004      	b.n	8004010 <delay_us+0x38>
	{
		us = __HAL_TIM_GET_COUNTER(&htim15);
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <delay_us+0x54>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	801a      	strh	r2, [r3, #0]
	while(us<0xffff-10)
 8004010:	1dbb      	adds	r3, r7, #6
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	4a06      	ldr	r2, [pc, #24]	; (8004030 <delay_us+0x58>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d9f5      	bls.n	8004006 <delay_us+0x2e>
	}
	HAL_TIM_Base_Stop(&htim15);
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <delay_us+0x54>)
 800401c:	0018      	movs	r0, r3
 800401e:	f001 ffcd 	bl	8005fbc <HAL_TIM_Base_Stop>
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	200003fc 	.word	0x200003fc
 8004030:	0000fff4 	.word	0x0000fff4

08004034 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004038:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <MX_USART1_UART_Init+0x78>)
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <MX_USART1_UART_Init+0x7c>)
 800403c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004040:	22e1      	movs	r2, #225	; 0xe1
 8004042:	0252      	lsls	r2, r2, #9
 8004044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <MX_USART1_UART_Init+0x78>)
 800404e:	2200      	movs	r2, #0
 8004050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004054:	2200      	movs	r2, #0
 8004056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <MX_USART1_UART_Init+0x78>)
 800405a:	220c      	movs	r2, #12
 800405c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <MX_USART1_UART_Init+0x78>)
 800406c:	2200      	movs	r2, #0
 800406e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004072:	2200      	movs	r2, #0
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004078:	0018      	movs	r0, r3
 800407a:	f003 fac5 	bl	8007608 <HAL_UART_Init>
 800407e:	1e03      	subs	r3, r0, #0
 8004080:	d001      	beq.n	8004086 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004082:	f7fe fd73 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004088:	2208      	movs	r2, #8
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap	= UART_ADVFEATURE_SWAP_ENABLE;
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <MX_USART1_UART_Init+0x78>)
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	0212      	lsls	r2, r2, #8
 8004092:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <MX_USART1_UART_Init+0x78>)
 8004096:	0018      	movs	r0, r3
 8004098:	f003 fab6 	bl	8007608 <HAL_UART_Init>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80040a0:	f7fe fd64 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE END USART1_Init 2 */

}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	20000548 	.word	0x20000548
 80040b0:	40013800 	.word	0x40013800

080040b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b08b      	sub	sp, #44	; 0x2c
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	2414      	movs	r4, #20
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	0018      	movs	r0, r3
 80040c2:	2314      	movs	r3, #20
 80040c4:	001a      	movs	r2, r3
 80040c6:	2100      	movs	r1, #0
 80040c8:	f004 fd1b 	bl	8008b02 <memset>
  if(uartHandle->Instance==USART1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a20      	ldr	r2, [pc, #128]	; (8004154 <HAL_UART_MspInit+0xa0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d139      	bne.n	800414a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_UART_MspInit+0xa4>)
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <HAL_UART_MspInit+0xa4>)
 80040dc:	2180      	movs	r1, #128	; 0x80
 80040de:	01c9      	lsls	r1, r1, #7
 80040e0:	430a      	orrs	r2, r1
 80040e2:	619a      	str	r2, [r3, #24]
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_UART_MspInit+0xa4>)
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_UART_MspInit+0xa4>)
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_UART_MspInit+0xa4>)
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	02c9      	lsls	r1, r1, #11
 80040fc:	430a      	orrs	r2, r1
 80040fe:	615a      	str	r2, [r3, #20]
 8004100:	4b15      	ldr	r3, [pc, #84]	; (8004158 <HAL_UART_MspInit+0xa4>)
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	02db      	lsls	r3, r3, #11
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800410e:	0021      	movs	r1, r4
 8004110:	187b      	adds	r3, r7, r1
 8004112:	22c0      	movs	r2, #192	; 0xc0
 8004114:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	187b      	adds	r3, r7, r1
 8004118:	2202      	movs	r2, #2
 800411a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	187b      	adds	r3, r7, r1
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004122:	187b      	adds	r3, r7, r1
 8004124:	2203      	movs	r2, #3
 8004126:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004128:	187b      	adds	r3, r7, r1
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412e:	187b      	adds	r3, r7, r1
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <HAL_UART_MspInit+0xa8>)
 8004132:	0019      	movs	r1, r3
 8004134:	0010      	movs	r0, r2
 8004136:	f000 ffb1 	bl	800509c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2101      	movs	r1, #1
 800413e:	201b      	movs	r0, #27
 8004140:	f000 fd64 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004144:	201b      	movs	r0, #27
 8004146:	f000 fd76 	bl	8004c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b00b      	add	sp, #44	; 0x2c
 8004150:	bd90      	pop	{r4, r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40013800 	.word	0x40013800
 8004158:	40021000 	.word	0x40021000
 800415c:	48000400 	.word	0x48000400

08004160 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	0002      	movs	r2, r0
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 800416c:	1dfb      	adds	r3, r7, #7
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 8004174:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <BT_PWM_handle+0x90>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b25b      	sxtb	r3, r3
 800417a:	2b08      	cmp	r3, #8
 800417c:	dc07      	bgt.n	800418e <BT_PWM_handle+0x2e>
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <BT_PWM_handle+0x90>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b25b      	sxtb	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	3301      	adds	r3, #1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	b25a      	sxtb	r2, r3
 800418c:	e000      	b.n	8004190 <BT_PWM_handle+0x30>
 800418e:	220a      	movs	r2, #10
 8004190:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <BT_PWM_handle+0x90>)
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e00f      	b.n	80041b6 <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 8004196:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <BT_PWM_handle+0x90>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	dd07      	ble.n	80041b0 <BT_PWM_handle+0x50>
 80041a0:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <BT_PWM_handle+0x90>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	b25a      	sxtb	r2, r3
 80041ae:	e000      	b.n	80041b2 <BT_PWM_handle+0x52>
 80041b0:	2200      	movs	r2, #0
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <BT_PWM_handle+0x90>)
 80041b4:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 80041b6:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <BT_PWM_handle+0x90>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	569a      	ldrsb	r2, [r3, r2]
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <BT_PWM_handle+0x94>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <BT_PWM_handle+0x90>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	569a      	ldrsb	r2, [r3, r2]
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <BT_PWM_handle+0x94>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <BT_PWM_handle+0x90>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	569a      	ldrsb	r2, [r3, r2]
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <BT_PWM_handle+0x94>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <BT_PWM_handle+0x90>)
 80041dc:	2200      	movs	r2, #0
 80041de:	569a      	ldrsb	r2, [r3, r2]
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <BT_PWM_handle+0x94>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b002      	add	sp, #8
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	200005d0 	.word	0x200005d0
 80041f4:	20000324 	.word	0x20000324

080041f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041f8:	480d      	ldr	r0, [pc, #52]	; (8004230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041fc:	f7ff fb74 	bl	80038e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004200:	480c      	ldr	r0, [pc, #48]	; (8004234 <LoopForever+0x6>)
  ldr r1, =_edata
 8004202:	490d      	ldr	r1, [pc, #52]	; (8004238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <LoopForever+0xe>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004208:	e002      	b.n	8004210 <LoopCopyDataInit>

0800420a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800420a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800420c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800420e:	3304      	adds	r3, #4

08004210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004214:	d3f9      	bcc.n	800420a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004218:	4c0a      	ldr	r4, [pc, #40]	; (8004244 <LoopForever+0x16>)
  movs r3, #0
 800421a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800421c:	e001      	b.n	8004222 <LoopFillZerobss>

0800421e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800421e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004220:	3204      	adds	r2, #4

08004222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004224:	d3fb      	bcc.n	800421e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004226:	f004 fc3f 	bl	8008aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800422a:	f7fe fbb3 	bl	8002994 <main>

0800422e <LoopForever>:

LoopForever:
    b LoopForever
 800422e:	e7fe      	b.n	800422e <LoopForever>
  ldr   r0, =_estack
 8004230:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004238:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800423c:	0800dbd4 	.word	0x0800dbd4
  ldr r2, =_sbss
 8004240:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004244:	200005e8 	.word	0x200005e8

08004248 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004248:	e7fe      	b.n	8004248 <ADC1_IRQHandler>
	...

0800424c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_Init+0x24>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_Init+0x24>)
 8004256:	2110      	movs	r1, #16
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800425c:	2003      	movs	r0, #3
 800425e:	f000 f809 	bl	8004274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004262:	f7ff f8b3 	bl	80033cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	40022000 	.word	0x40022000

08004274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <HAL_InitTick+0x5c>)
 800427e:	681c      	ldr	r4, [r3, #0]
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_InitTick+0x60>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	0019      	movs	r1, r3
 8004286:	23fa      	movs	r3, #250	; 0xfa
 8004288:	0098      	lsls	r0, r3, #2
 800428a:	f7fb ff59 	bl	8000140 <__udivsi3>
 800428e:	0003      	movs	r3, r0
 8004290:	0019      	movs	r1, r3
 8004292:	0020      	movs	r0, r4
 8004294:	f7fb ff54 	bl	8000140 <__udivsi3>
 8004298:	0003      	movs	r3, r0
 800429a:	0018      	movs	r0, r3
 800429c:	f000 fcdb 	bl	8004c56 <HAL_SYSTICK_Config>
 80042a0:	1e03      	subs	r3, r0, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e00f      	b.n	80042c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d80b      	bhi.n	80042c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	2301      	movs	r3, #1
 80042b2:	425b      	negs	r3, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 fca8 	bl	8004c0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_InitTick+0x64>)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b003      	add	sp, #12
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	20000024 	.word	0x20000024
 80042d4:	2000002c 	.word	0x2000002c
 80042d8:	20000028 	.word	0x20000028

080042dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_IncTick+0x1c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	001a      	movs	r2, r3
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_IncTick+0x20>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	18d2      	adds	r2, r2, r3
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_IncTick+0x20>)
 80042ee:	601a      	str	r2, [r3, #0]
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	2000002c 	.word	0x2000002c
 80042fc:	200005d4 	.word	0x200005d4

08004300 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  return uwTick;
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <HAL_GetTick+0x10>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	200005d4 	.word	0x200005d4

08004314 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800431c:	230f      	movs	r3, #15
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e125      	b.n	800457e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2234      	movs	r2, #52	; 0x34
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f7fe fe22 	bl	8002f94 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	2210      	movs	r2, #16
 8004356:	4013      	ands	r3, r2
 8004358:	d000      	beq.n	800435c <HAL_ADC_Init+0x48>
 800435a:	e103      	b.n	8004564 <HAL_ADC_Init+0x250>
 800435c:	230f      	movs	r3, #15
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d000      	beq.n	8004368 <HAL_ADC_Init+0x54>
 8004366:	e0fd      	b.n	8004564 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2204      	movs	r2, #4
 8004370:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004372:	d000      	beq.n	8004376 <HAL_ADC_Init+0x62>
 8004374:	e0f6      	b.n	8004564 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4a83      	ldr	r2, [pc, #524]	; (8004588 <HAL_ADC_Init+0x274>)
 800437c:	4013      	ands	r3, r2
 800437e:	2202      	movs	r2, #2
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2203      	movs	r2, #3
 800438e:	4013      	ands	r3, r2
 8004390:	2b01      	cmp	r3, #1
 8004392:	d112      	bne.n	80043ba <HAL_ADC_Init+0xa6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	4013      	ands	r3, r2
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d009      	beq.n	80043b6 <HAL_ADC_Init+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	401a      	ands	r2, r3
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_Init+0xa6>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_ADC_Init+0xa8>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d116      	bne.n	80043ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2218      	movs	r2, #24
 80043c8:	4393      	bics	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	0899      	lsrs	r1, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4964      	ldr	r1, [pc, #400]	; (800458c <HAL_ADC_Init+0x278>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7e1b      	ldrb	r3, [r3, #24]
 8004402:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7e5b      	ldrb	r3, [r3, #25]
 8004408:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800440a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e9b      	ldrb	r3, [r3, #26]
 8004410:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004412:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	2b01      	cmp	r3, #1
 800441a:	d002      	beq.n	8004422 <HAL_ADC_Init+0x10e>
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	015b      	lsls	r3, r3, #5
 8004420:	e000      	b.n	8004424 <HAL_ADC_Init+0x110>
 8004422:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004424:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800442a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d101      	bne.n	8004438 <HAL_ADC_Init+0x124>
 8004434:	2304      	movs	r3, #4
 8004436:	e000      	b.n	800443a <HAL_ADC_Init+0x126>
 8004438:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800443a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2124      	movs	r1, #36	; 0x24
 8004440:	5c5b      	ldrb	r3, [r3, r1]
 8004442:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004444:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7edb      	ldrb	r3, [r3, #27]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d115      	bne.n	8004480 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7e9b      	ldrb	r3, [r3, #26]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	0252      	lsls	r2, r2, #9
 8004462:	4313      	orrs	r3, r2
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	e00b      	b.n	8004480 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	2220      	movs	r2, #32
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	2201      	movs	r2, #1
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	23c2      	movs	r3, #194	; 0xc2
 8004486:	33ff      	adds	r3, #255	; 0xff
 8004488:	429a      	cmp	r2, r3
 800448a:	d007      	beq.n	800449c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004494:	4313      	orrs	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	055b      	lsls	r3, r3, #21
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d01b      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d017      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d013      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d00f      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d00b      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d007      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d003      	beq.n	80044f0 <HAL_ADC_Init+0x1dc>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	2b07      	cmp	r3, #7
 80044ee:	d112      	bne.n	8004516 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2107      	movs	r1, #7
 80044fc:	438a      	bics	r2, r1
 80044fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6959      	ldr	r1, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	2207      	movs	r2, #7
 800450c:	401a      	ands	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <HAL_ADC_Init+0x27c>)
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	d10b      	bne.n	800453e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	2201      	movs	r2, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800453c:	e01c      	b.n	8004578 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	2212      	movs	r2, #18
 8004544:	4393      	bics	r3, r2
 8004546:	2210      	movs	r2, #16
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2201      	movs	r2, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800455a:	230f      	movs	r3, #15
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004562:	e009      	b.n	8004578 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	2210      	movs	r2, #16
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004570:	230f      	movs	r3, #15
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004578:	230f      	movs	r3, #15
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b004      	add	sp, #16
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	fffffefd 	.word	0xfffffefd
 800458c:	fffe0219 	.word	0xfffe0219
 8004590:	833fffe7 	.word	0x833fffe7

08004594 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045a0:	2317      	movs	r3, #23
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2204      	movs	r2, #4
 80045b0:	4013      	ands	r3, r2
 80045b2:	d15e      	bne.n	8004672 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2234      	movs	r2, #52	; 0x34
 80045b8:	5c9b      	ldrb	r3, [r3, r2]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_Start_DMA+0x2e>
 80045be:	2302      	movs	r3, #2
 80045c0:	e05e      	b.n	8004680 <HAL_ADC_Start_DMA+0xec>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2234      	movs	r2, #52	; 0x34
 80045c6:	2101      	movs	r1, #1
 80045c8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	7e5b      	ldrb	r3, [r3, #25]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d007      	beq.n	80045e2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80045d2:	2317      	movs	r3, #23
 80045d4:	18fc      	adds	r4, r7, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 f963 	bl	80048a4 <ADC_Enable>
 80045de:	0003      	movs	r3, r0
 80045e0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045e2:	2317      	movs	r3, #23
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d146      	bne.n	800467a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <HAL_ADC_Start_DMA+0xf4>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	0052      	lsls	r2, r2, #1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2234      	movs	r2, #52	; 0x34
 8004608:	2100      	movs	r1, #0
 800460a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_ADC_Start_DMA+0xf8>)
 8004612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_ADC_Start_DMA+0xfc>)
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <HAL_ADC_Start_DMA+0x100>)
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	221c      	movs	r2, #28
 800462a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2110      	movs	r1, #16
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2101      	movs	r1, #1
 8004648:	430a      	orrs	r2, r1
 800464a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3340      	adds	r3, #64	; 0x40
 8004656:	0019      	movs	r1, r3
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f000 fb50 	bl	8004d00 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2104      	movs	r1, #4
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	e003      	b.n	800467a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004672:	2317      	movs	r3, #23
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2202      	movs	r2, #2
 8004678:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800467a:	2317      	movs	r3, #23
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	781b      	ldrb	r3, [r3, #0]
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b007      	add	sp, #28
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	fffff0fe 	.word	0xfffff0fe
 800468c:	080049ad 	.word	0x080049ad
 8004690:	08004a61 	.word	0x08004a61
 8004694:	08004a7f 	.word	0x08004a7f

08004698 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b002      	add	sp, #8
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c2:	230f      	movs	r3, #15
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	055b      	lsls	r3, r3, #21
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d011      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x46>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d00d      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x46>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d009      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x46>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d005      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x46>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d001      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x46>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2234      	movs	r2, #52	; 0x34
 8004702:	5c9b      	ldrb	r3, [r3, r2]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x54>
 8004708:	2302      	movs	r3, #2
 800470a:	e0bb      	b.n	8004884 <HAL_ADC_ConfigChannel+0x1cc>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2234      	movs	r2, #52	; 0x34
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2204      	movs	r2, #4
 800471c:	4013      	ands	r3, r2
 800471e:	d000      	beq.n	8004722 <HAL_ADC_ConfigChannel+0x6a>
 8004720:	e09f      	b.n	8004862 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a59      	ldr	r2, [pc, #356]	; (800488c <HAL_ADC_ConfigChannel+0x1d4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <HAL_ADC_ConfigChannel+0x76>
 800472c:	e077      	b.n	800481e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	409a      	lsls	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	055b      	lsls	r3, r3, #21
 800474c:	429a      	cmp	r2, r3
 800474e:	d037      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d033      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	2b02      	cmp	r3, #2
 800475e:	d02f      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	2b03      	cmp	r3, #3
 8004766:	d02b      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	2b04      	cmp	r3, #4
 800476e:	d027      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2b05      	cmp	r3, #5
 8004776:	d023      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	2b06      	cmp	r3, #6
 800477e:	d01f      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	2b07      	cmp	r3, #7
 8004786:	d01b      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2107      	movs	r1, #7
 8004794:	400b      	ands	r3, r1
 8004796:	429a      	cmp	r2, r3
 8004798:	d012      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2107      	movs	r1, #7
 80047a6:	438a      	bics	r2, r1
 80047a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6959      	ldr	r1, [r3, #20]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2207      	movs	r2, #7
 80047b6:	401a      	ands	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d003      	beq.n	80047d0 <HAL_ADC_ConfigChannel+0x118>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b11      	cmp	r3, #17
 80047ce:	d152      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80047d0:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <HAL_ADC_ConfigChannel+0x1d8>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d102      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x12a>
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	e001      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x12e>
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	03db      	lsls	r3, r3, #15
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <HAL_ADC_ConfigChannel+0x1d8>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d140      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <HAL_ADC_ConfigChannel+0x1dc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4927      	ldr	r1, [pc, #156]	; (8004898 <HAL_ADC_ConfigChannel+0x1e0>)
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fb fca0 	bl	8000140 <__udivsi3>
 8004800:	0003      	movs	r3, r0
 8004802:	001a      	movs	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	189b      	adds	r3, r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800480e:	e002      	b.n	8004816 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3b01      	subs	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f9      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x158>
 800481c:	e02b      	b.n	8004876 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	4099      	lsls	r1, r3
 800482c:	000b      	movs	r3, r1
 800482e:	43d9      	mvns	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	400a      	ands	r2, r1
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d003      	beq.n	8004848 <HAL_ADC_ConfigChannel+0x190>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b11      	cmp	r3, #17
 8004846:	d116      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_ADC_ConfigChannel+0x1d8>)
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b10      	cmp	r3, #16
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x1a0>
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <HAL_ADC_ConfigChannel+0x1e4>)
 8004856:	e000      	b.n	800485a <HAL_ADC_ConfigChannel+0x1a2>
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <HAL_ADC_ConfigChannel+0x1e8>)
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <HAL_ADC_ConfigChannel+0x1d8>)
 800485c:	400a      	ands	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e009      	b.n	8004876 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	2220      	movs	r2, #32
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800486e:	230f      	movs	r3, #15
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2234      	movs	r2, #52	; 0x34
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800487e:	230f      	movs	r3, #15
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b004      	add	sp, #16
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00001001 	.word	0x00001001
 8004890:	40012708 	.word	0x40012708
 8004894:	20000024 	.word	0x20000024
 8004898:	000f4240 	.word	0x000f4240
 800489c:	ff7fffff 	.word	0xff7fffff
 80048a0:	ffbfffff 	.word	0xffbfffff

080048a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2203      	movs	r2, #3
 80048bc:	4013      	ands	r3, r2
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d112      	bne.n	80048e8 <ADC_Enable+0x44>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d009      	beq.n	80048e4 <ADC_Enable+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	401a      	ands	r2, r3
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d101      	bne.n	80048e8 <ADC_Enable+0x44>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <ADC_Enable+0x46>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d152      	bne.n	8004994 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <ADC_Enable+0xfc>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	d00d      	beq.n	8004916 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	2210      	movs	r2, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2201      	movs	r2, #1
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03f      	b.n	8004996 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <ADC_Enable+0x100>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	491f      	ldr	r1, [pc, #124]	; (80049a8 <ADC_Enable+0x104>)
 800492c:	0018      	movs	r0, r3
 800492e:	f7fb fc07 	bl	8000140 <__udivsi3>
 8004932:	0003      	movs	r3, r0
 8004934:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004936:	e002      	b.n	800493e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3b01      	subs	r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f9      	bne.n	8004938 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004944:	f7ff fcdc 	bl	8004300 <HAL_GetTick>
 8004948:	0003      	movs	r3, r0
 800494a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800494c:	e01b      	b.n	8004986 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800494e:	f7ff fcd7 	bl	8004300 <HAL_GetTick>
 8004952:	0002      	movs	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d914      	bls.n	8004986 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	4013      	ands	r3, r2
 8004966:	2b01      	cmp	r3, #1
 8004968:	d00d      	beq.n	8004986 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	2210      	movs	r2, #16
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	2201      	movs	r2, #1
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e007      	b.n	8004996 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2201      	movs	r2, #1
 800498e:	4013      	ands	r3, r2
 8004990:	2b01      	cmp	r3, #1
 8004992:	d1dc      	bne.n	800494e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b004      	add	sp, #16
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	80000017 	.word	0x80000017
 80049a4:	20000024 	.word	0x20000024
 80049a8:	000f4240 	.word	0x000f4240

080049ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	2250      	movs	r2, #80	; 0x50
 80049c0:	4013      	ands	r3, r2
 80049c2:	d140      	bne.n	8004a46 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	2280      	movs	r2, #128	; 0x80
 80049ca:	0092      	lsls	r2, r2, #2
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	23c0      	movs	r3, #192	; 0xc0
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4013      	ands	r3, r2
 80049de:	d12d      	bne.n	8004a3c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d129      	bne.n	8004a3c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2208      	movs	r2, #8
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d122      	bne.n	8004a3c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2204      	movs	r2, #4
 80049fe:	4013      	ands	r3, r2
 8004a00:	d110      	bne.n	8004a24 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	210c      	movs	r1, #12
 8004a0e:	438a      	bics	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <ADC_DMAConvCplt+0xb0>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
 8004a22:	e00b      	b.n	8004a3c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	2220      	movs	r2, #32
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	2201      	movs	r2, #1
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7fe f9d0 	bl	8002de4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004a44:	e005      	b.n	8004a52 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	0010      	movs	r0, r2
 8004a50:	4798      	blx	r3
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b004      	add	sp, #16
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	fffffefe 	.word	0xfffffefe

08004a60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff fe11 	bl	8004698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b004      	add	sp, #16
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	2240      	movs	r2, #64	; 0x40
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7ff fdfe 	bl	80046a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b004      	add	sp, #16
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	0002      	movs	r2, r0
 8004abc:	1dfb      	adds	r3, r7, #7
 8004abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ac0:	1dfb      	adds	r3, r7, #7
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac6:	d809      	bhi.n	8004adc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac8:	1dfb      	adds	r3, r7, #7
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	001a      	movs	r2, r3
 8004ace:	231f      	movs	r3, #31
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <__NVIC_EnableIRQ+0x30>)
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4091      	lsls	r1, r2
 8004ad8:	000a      	movs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
  }
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	e000e100 	.word	0xe000e100

08004ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	0002      	movs	r2, r0
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	1dfb      	adds	r3, r7, #7
 8004af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004af6:	1dfb      	adds	r3, r7, #7
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b7f      	cmp	r3, #127	; 0x7f
 8004afc:	d828      	bhi.n	8004b50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004afe:	4a2f      	ldr	r2, [pc, #188]	; (8004bbc <__NVIC_SetPriority+0xd4>)
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	33c0      	adds	r3, #192	; 0xc0
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	589b      	ldr	r3, [r3, r2]
 8004b0e:	1dfa      	adds	r2, r7, #7
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	0011      	movs	r1, r2
 8004b14:	2203      	movs	r2, #3
 8004b16:	400a      	ands	r2, r1
 8004b18:	00d2      	lsls	r2, r2, #3
 8004b1a:	21ff      	movs	r1, #255	; 0xff
 8004b1c:	4091      	lsls	r1, r2
 8004b1e:	000a      	movs	r2, r1
 8004b20:	43d2      	mvns	r2, r2
 8004b22:	401a      	ands	r2, r3
 8004b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	019b      	lsls	r3, r3, #6
 8004b2a:	22ff      	movs	r2, #255	; 0xff
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	0018      	movs	r0, r3
 8004b34:	2303      	movs	r3, #3
 8004b36:	4003      	ands	r3, r0
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b3c:	481f      	ldr	r0, [pc, #124]	; (8004bbc <__NVIC_SetPriority+0xd4>)
 8004b3e:	1dfb      	adds	r3, r7, #7
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	430a      	orrs	r2, r1
 8004b48:	33c0      	adds	r3, #192	; 0xc0
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b4e:	e031      	b.n	8004bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b50:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <__NVIC_SetPriority+0xd8>)
 8004b52:	1dfb      	adds	r3, r7, #7
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	0019      	movs	r1, r3
 8004b58:	230f      	movs	r3, #15
 8004b5a:	400b      	ands	r3, r1
 8004b5c:	3b08      	subs	r3, #8
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	3306      	adds	r3, #6
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	3304      	adds	r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	1dfa      	adds	r2, r7, #7
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	0011      	movs	r1, r2
 8004b70:	2203      	movs	r2, #3
 8004b72:	400a      	ands	r2, r1
 8004b74:	00d2      	lsls	r2, r2, #3
 8004b76:	21ff      	movs	r1, #255	; 0xff
 8004b78:	4091      	lsls	r1, r2
 8004b7a:	000a      	movs	r2, r1
 8004b7c:	43d2      	mvns	r2, r2
 8004b7e:	401a      	ands	r2, r3
 8004b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	22ff      	movs	r2, #255	; 0xff
 8004b88:	401a      	ands	r2, r3
 8004b8a:	1dfb      	adds	r3, r7, #7
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	2303      	movs	r3, #3
 8004b92:	4003      	ands	r3, r0
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b98:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <__NVIC_SetPriority+0xd8>)
 8004b9a:	1dfb      	adds	r3, r7, #7
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	001c      	movs	r4, r3
 8004ba0:	230f      	movs	r3, #15
 8004ba2:	4023      	ands	r3, r4
 8004ba4:	3b08      	subs	r3, #8
 8004ba6:	089b      	lsrs	r3, r3, #2
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	3306      	adds	r3, #6
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	18c3      	adds	r3, r0, r3
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b003      	add	sp, #12
 8004bba:	bd90      	pop	{r4, r7, pc}
 8004bbc:	e000e100 	.word	0xe000e100
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	045b      	lsls	r3, r3, #17
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d301      	bcc.n	8004bdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e010      	b.n	8004bfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <SysTick_Config+0x44>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	3a01      	subs	r2, #1
 8004be2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be4:	2301      	movs	r3, #1
 8004be6:	425b      	negs	r3, r3
 8004be8:	2103      	movs	r1, #3
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7ff ff7c 	bl	8004ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <SysTick_Config+0x44>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf6:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <SysTick_Config+0x44>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	e000e010 	.word	0xe000e010

08004c0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	210f      	movs	r1, #15
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	1c02      	adds	r2, r0, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff ff5d 	bl	8004ae8 <__NVIC_SetPriority>
}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c42:	1dfb      	adds	r3, r7, #7
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7ff ff33 	bl	8004ab4 <__NVIC_EnableIRQ>
}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b002      	add	sp, #8
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7ff ffaf 	bl	8004bc4 <SysTick_Config>
 8004c66:	0003      	movs	r3, r0
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e036      	b.n	8004cf4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2221      	movs	r2, #33	; 0x21
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_DMA_Init+0x8c>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f9c4 	bl	8005064 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2221      	movs	r2, #33	; 0x21
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b004      	add	sp, #16
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	ffffc00f 	.word	0xffffc00f

08004d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2317      	movs	r3, #23
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	5c9b      	ldrb	r3, [r3, r2]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_DMA_Start_IT+0x24>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e04f      	b.n	8004dc4 <HAL_DMA_Start_IT+0xc4>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	2101      	movs	r1, #1
 8004d2a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2221      	movs	r2, #33	; 0x21
 8004d30:	5c9b      	ldrb	r3, [r3, r2]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d13a      	bne.n	8004dae <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2221      	movs	r2, #33	; 0x21
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	438a      	bics	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f954 	bl	800500a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	210e      	movs	r1, #14
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e00f      	b.n	8004d9c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	210a      	movs	r1, #10
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2104      	movs	r1, #4
 8004d98:	438a      	bics	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2101      	movs	r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e007      	b.n	8004dbe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004db6:	2317      	movs	r3, #23
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004dbe:	2317      	movs	r3, #23
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2221      	movs	r2, #33	; 0x21
 8004dd8:	5c9b      	ldrb	r3, [r3, r2]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d008      	beq.n	8004df2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2204      	movs	r2, #4
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	2100      	movs	r1, #0
 8004dec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e020      	b.n	8004e34 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	210e      	movs	r1, #14
 8004dfe:	438a      	bics	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	438a      	bics	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4091      	lsls	r1, r2
 8004e1e:	000a      	movs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2221      	movs	r2, #33	; 0x21
 8004e26:	2101      	movs	r1, #1
 8004e28:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	2100      	movs	r1, #0
 8004e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	210f      	movs	r1, #15
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2221      	movs	r2, #33	; 0x21
 8004e50:	5c9b      	ldrb	r3, [r3, r2]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d006      	beq.n	8004e66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004e5e:	187b      	adds	r3, r7, r1
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e028      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	210e      	movs	r1, #14
 8004e72:	438a      	bics	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	438a      	bics	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4091      	lsls	r1, r2
 8004e92:	000a      	movs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2221      	movs	r2, #33	; 0x21
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	0010      	movs	r0, r2
 8004eb6:	4798      	blx	r3
    }
  }
  return status;
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	781b      	ldrb	r3, [r3, #0]
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	d024      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x72>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d020      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2220      	movs	r2, #32
 8004efe:	4013      	ands	r3, r2
 8004f00:	d107      	bne.n	8004f12 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	438a      	bics	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	4091      	lsls	r1, r2
 8004f1e:	000a      	movs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d100      	bne.n	8004f2c <HAL_DMA_IRQHandler+0x66>
 8004f2a:	e06a      	b.n	8005002 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	0010      	movs	r0, r2
 8004f34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f36:	e064      	b.n	8005002 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	0013      	movs	r3, r2
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4013      	ands	r3, r2
 8004f46:	d02b      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0xda>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d027      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2220      	movs	r2, #32
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d10b      	bne.n	8004f74 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	210a      	movs	r1, #10
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2221      	movs	r2, #33	; 0x21
 8004f70:	2101      	movs	r1, #1
 8004f72:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4091      	lsls	r1, r2
 8004f80:	000a      	movs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d036      	beq.n	8005002 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	0010      	movs	r0, r2
 8004f9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f9e:	e030      	b.n	8005002 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	0013      	movs	r3, r2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4013      	ands	r3, r2
 8004fae:	d028      	beq.n	8005002 <HAL_DMA_IRQHandler+0x13c>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2208      	movs	r2, #8
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d024      	beq.n	8005002 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	210e      	movs	r1, #14
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4091      	lsls	r1, r2
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2221      	movs	r2, #33	; 0x21
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	0010      	movs	r0, r2
 8004ffe:	4798      	blx	r3
    }
  }
}
 8005000:	e7ff      	b.n	8005002 <HAL_DMA_IRQHandler+0x13c>
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b004      	add	sp, #16
 8005008:	bd80      	pop	{r7, pc}

0800500a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	2101      	movs	r1, #1
 8005022:	4091      	lsls	r1, r2
 8005024:	000a      	movs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d108      	bne.n	800504a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005048:	e007      	b.n	800505a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]
}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <DMA_CalcBaseAndBitshift+0x30>)
 8005072:	4694      	mov	ip, r2
 8005074:	4463      	add	r3, ip
 8005076:	2114      	movs	r1, #20
 8005078:	0018      	movs	r0, r3
 800507a:	f7fb f861 	bl	8000140 <__udivsi3>
 800507e:	0003      	movs	r3, r0
 8005080:	009a      	lsls	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a03      	ldr	r2, [pc, #12]	; (8005098 <DMA_CalcBaseAndBitshift+0x34>)
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}
 8005094:	bffdfff8 	.word	0xbffdfff8
 8005098:	40020000 	.word	0x40020000

0800509c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050aa:	e14f      	b.n	800534c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2101      	movs	r1, #1
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4091      	lsls	r1, r2
 80050b6:	000a      	movs	r2, r1
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d100      	bne.n	80050c4 <HAL_GPIO_Init+0x28>
 80050c2:	e140      	b.n	8005346 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2203      	movs	r2, #3
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d005      	beq.n	80050dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d130      	bne.n	800513e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	2203      	movs	r2, #3
 80050e8:	409a      	lsls	r2, r3
 80050ea:	0013      	movs	r3, r2
 80050ec:	43da      	mvns	r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	409a      	lsls	r2, r3
 80050fe:	0013      	movs	r3, r2
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005112:	2201      	movs	r2, #1
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	409a      	lsls	r2, r3
 8005118:	0013      	movs	r3, r2
 800511a:	43da      	mvns	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4013      	ands	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	2201      	movs	r2, #1
 800512a:	401a      	ands	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	409a      	lsls	r2, r3
 8005130:	0013      	movs	r3, r2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2203      	movs	r2, #3
 8005144:	4013      	ands	r3, r2
 8005146:	2b03      	cmp	r3, #3
 8005148:	d017      	beq.n	800517a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	409a      	lsls	r2, r3
 8005158:	0013      	movs	r3, r2
 800515a:	43da      	mvns	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4013      	ands	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	0013      	movs	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2203      	movs	r2, #3
 8005180:	4013      	ands	r3, r2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d123      	bne.n	80051ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	08da      	lsrs	r2, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3208      	adds	r2, #8
 800518e:	0092      	lsls	r2, r2, #2
 8005190:	58d3      	ldr	r3, [r2, r3]
 8005192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2207      	movs	r2, #7
 8005198:	4013      	ands	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	220f      	movs	r2, #15
 800519e:	409a      	lsls	r2, r3
 80051a0:	0013      	movs	r3, r2
 80051a2:	43da      	mvns	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2107      	movs	r1, #7
 80051b2:	400b      	ands	r3, r1
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	409a      	lsls	r2, r3
 80051b8:	0013      	movs	r3, r2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3208      	adds	r2, #8
 80051c8:	0092      	lsls	r2, r2, #2
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	2203      	movs	r2, #3
 80051da:	409a      	lsls	r2, r3
 80051dc:	0013      	movs	r3, r2
 80051de:	43da      	mvns	r2, r3
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2203      	movs	r2, #3
 80051ec:	401a      	ands	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	0013      	movs	r3, r2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	23c0      	movs	r3, #192	; 0xc0
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	4013      	ands	r3, r2
 800520c:	d100      	bne.n	8005210 <HAL_GPIO_Init+0x174>
 800520e:	e09a      	b.n	8005346 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005210:	4b54      	ldr	r3, [pc, #336]	; (8005364 <HAL_GPIO_Init+0x2c8>)
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	4b53      	ldr	r3, [pc, #332]	; (8005364 <HAL_GPIO_Init+0x2c8>)
 8005216:	2101      	movs	r1, #1
 8005218:	430a      	orrs	r2, r1
 800521a:	619a      	str	r2, [r3, #24]
 800521c:	4b51      	ldr	r3, [pc, #324]	; (8005364 <HAL_GPIO_Init+0x2c8>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2201      	movs	r2, #1
 8005222:	4013      	ands	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005228:	4a4f      	ldr	r2, [pc, #316]	; (8005368 <HAL_GPIO_Init+0x2cc>)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	3302      	adds	r3, #2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	589b      	ldr	r3, [r3, r2]
 8005234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2203      	movs	r2, #3
 800523a:	4013      	ands	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	220f      	movs	r2, #15
 8005240:	409a      	lsls	r2, r3
 8005242:	0013      	movs	r3, r2
 8005244:	43da      	mvns	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	2390      	movs	r3, #144	; 0x90
 8005250:	05db      	lsls	r3, r3, #23
 8005252:	429a      	cmp	r2, r3
 8005254:	d013      	beq.n	800527e <HAL_GPIO_Init+0x1e2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a44      	ldr	r2, [pc, #272]	; (800536c <HAL_GPIO_Init+0x2d0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00d      	beq.n	800527a <HAL_GPIO_Init+0x1de>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a43      	ldr	r2, [pc, #268]	; (8005370 <HAL_GPIO_Init+0x2d4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <HAL_GPIO_Init+0x1da>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a42      	ldr	r2, [pc, #264]	; (8005374 <HAL_GPIO_Init+0x2d8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_GPIO_Init+0x1d6>
 800526e:	2303      	movs	r3, #3
 8005270:	e006      	b.n	8005280 <HAL_GPIO_Init+0x1e4>
 8005272:	2305      	movs	r3, #5
 8005274:	e004      	b.n	8005280 <HAL_GPIO_Init+0x1e4>
 8005276:	2302      	movs	r3, #2
 8005278:	e002      	b.n	8005280 <HAL_GPIO_Init+0x1e4>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_GPIO_Init+0x1e4>
 800527e:	2300      	movs	r3, #0
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	2103      	movs	r1, #3
 8005284:	400a      	ands	r2, r1
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	4093      	lsls	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005290:	4935      	ldr	r1, [pc, #212]	; (8005368 <HAL_GPIO_Init+0x2cc>)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	3302      	adds	r3, #2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	035b      	lsls	r3, r3, #13
 80052b6:	4013      	ands	r3, r2
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052c2:	4b2d      	ldr	r3, [pc, #180]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80052c8:	4b2b      	ldr	r3, [pc, #172]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	43da      	mvns	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4013      	ands	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	039b      	lsls	r3, r3, #14
 80052e0:	4013      	ands	r3, r2
 80052e2:	d003      	beq.n	80052ec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	43da      	mvns	r2, r3
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4013      	ands	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	029b      	lsls	r3, r3, #10
 800530a:	4013      	ands	r3, r2
 800530c:	d003      	beq.n	8005316 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	43da      	mvns	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4013      	ands	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	025b      	lsls	r3, r3, #9
 8005334:	4013      	ands	r3, r2
 8005336:	d003      	beq.n	8005340 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005340:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	3301      	adds	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	40da      	lsrs	r2, r3
 8005354:	1e13      	subs	r3, r2, #0
 8005356:	d000      	beq.n	800535a <HAL_GPIO_Init+0x2be>
 8005358:	e6a8      	b.n	80050ac <HAL_GPIO_Init+0x10>
  } 
}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46c0      	nop			; (mov r8, r8)
 800535e:	46bd      	mov	sp, r7
 8005360:	b006      	add	sp, #24
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000
 8005368:	40010000 	.word	0x40010000
 800536c:	48000400 	.word	0x48000400
 8005370:	48000800 	.word	0x48000800
 8005374:	48000c00 	.word	0x48000c00
 8005378:	40010400 	.word	0x40010400

0800537c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	000a      	movs	r2, r1
 8005386:	1cbb      	adds	r3, r7, #2
 8005388:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	1cba      	adds	r2, r7, #2
 8005390:	8812      	ldrh	r2, [r2, #0]
 8005392:	4013      	ands	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005396:	230f      	movs	r3, #15
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e003      	b.n	80053a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053a0:	230f      	movs	r3, #15
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80053a8:	230f      	movs	r3, #15
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	781b      	ldrb	r3, [r3, #0]
  }
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	0008      	movs	r0, r1
 80053c0:	0011      	movs	r1, r2
 80053c2:	1cbb      	adds	r3, r7, #2
 80053c4:	1c02      	adds	r2, r0, #0
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	1c7b      	adds	r3, r7, #1
 80053ca:	1c0a      	adds	r2, r1, #0
 80053cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ce:	1c7b      	adds	r3, r7, #1
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d6:	1cbb      	adds	r3, r7, #2
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053de:	e003      	b.n	80053e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053e0:	1cbb      	adds	r3, r7, #2
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	0002      	movs	r2, r0
 80053f8:	1dbb      	adds	r3, r7, #6
 80053fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	1dba      	adds	r2, r7, #6
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	4013      	ands	r3, r2
 8005406:	d008      	beq.n	800541a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800540a:	1dba      	adds	r2, r7, #6
 800540c:	8812      	ldrh	r2, [r2, #0]
 800540e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005410:	1dbb      	adds	r3, r7, #6
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	0018      	movs	r0, r3
 8005416:	f000 f807 	bl	8005428 <HAL_GPIO_EXTI_Callback>
  }
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b002      	add	sp, #8
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	40010400 	.word	0x40010400

08005428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	0002      	movs	r2, r0
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e301      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2201      	movs	r2, #1
 8005454:	4013      	ands	r3, r2
 8005456:	d100      	bne.n	800545a <HAL_RCC_OscConfig+0x1e>
 8005458:	e08d      	b.n	8005576 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800545a:	4bc3      	ldr	r3, [pc, #780]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	220c      	movs	r2, #12
 8005460:	4013      	ands	r3, r2
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00e      	beq.n	8005484 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005466:	4bc0      	ldr	r3, [pc, #768]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	220c      	movs	r2, #12
 800546c:	4013      	ands	r3, r2
 800546e:	2b08      	cmp	r3, #8
 8005470:	d116      	bne.n	80054a0 <HAL_RCC_OscConfig+0x64>
 8005472:	4bbd      	ldr	r3, [pc, #756]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	025b      	lsls	r3, r3, #9
 800547a:	401a      	ands	r2, r3
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	025b      	lsls	r3, r3, #9
 8005480:	429a      	cmp	r2, r3
 8005482:	d10d      	bne.n	80054a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005484:	4bb8      	ldr	r3, [pc, #736]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	029b      	lsls	r3, r3, #10
 800548c:	4013      	ands	r3, r2
 800548e:	d100      	bne.n	8005492 <HAL_RCC_OscConfig+0x56>
 8005490:	e070      	b.n	8005574 <HAL_RCC_OscConfig+0x138>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d000      	beq.n	800549c <HAL_RCC_OscConfig+0x60>
 800549a:	e06b      	b.n	8005574 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e2d8      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_OscConfig+0x7c>
 80054a8:	4baf      	ldr	r3, [pc, #700]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4bae      	ldr	r3, [pc, #696]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054ae:	2180      	movs	r1, #128	; 0x80
 80054b0:	0249      	lsls	r1, r1, #9
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e02f      	b.n	8005518 <HAL_RCC_OscConfig+0xdc>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10c      	bne.n	80054da <HAL_RCC_OscConfig+0x9e>
 80054c0:	4ba9      	ldr	r3, [pc, #676]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4ba8      	ldr	r3, [pc, #672]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054c6:	49a9      	ldr	r1, [pc, #676]	; (800576c <HAL_RCC_OscConfig+0x330>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	4ba6      	ldr	r3, [pc, #664]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054d2:	49a7      	ldr	r1, [pc, #668]	; (8005770 <HAL_RCC_OscConfig+0x334>)
 80054d4:	400a      	ands	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e01e      	b.n	8005518 <HAL_RCC_OscConfig+0xdc>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d10e      	bne.n	8005500 <HAL_RCC_OscConfig+0xc4>
 80054e2:	4ba1      	ldr	r3, [pc, #644]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4ba0      	ldr	r3, [pc, #640]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	02c9      	lsls	r1, r1, #11
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	4b9d      	ldr	r3, [pc, #628]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b9c      	ldr	r3, [pc, #624]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	0249      	lsls	r1, r1, #9
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_OscConfig+0xdc>
 8005500:	4b99      	ldr	r3, [pc, #612]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b98      	ldr	r3, [pc, #608]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005506:	4999      	ldr	r1, [pc, #612]	; (800576c <HAL_RCC_OscConfig+0x330>)
 8005508:	400a      	ands	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b96      	ldr	r3, [pc, #600]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b95      	ldr	r3, [pc, #596]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005512:	4997      	ldr	r1, [pc, #604]	; (8005770 <HAL_RCC_OscConfig+0x334>)
 8005514:	400a      	ands	r2, r1
 8005516:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d014      	beq.n	800554a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fe feee 	bl	8004300 <HAL_GetTick>
 8005524:	0003      	movs	r3, r0
 8005526:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800552a:	f7fe fee9 	bl	8004300 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b64      	cmp	r3, #100	; 0x64
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e28a      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553c:	4b8a      	ldr	r3, [pc, #552]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	4013      	ands	r3, r2
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0xee>
 8005548:	e015      	b.n	8005576 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554a:	f7fe fed9 	bl	8004300 <HAL_GetTick>
 800554e:	0003      	movs	r3, r0
 8005550:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005554:	f7fe fed4 	bl	8004300 <HAL_GetTick>
 8005558:	0002      	movs	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e275      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005566:	4b80      	ldr	r3, [pc, #512]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	4013      	ands	r3, r2
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x118>
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2202      	movs	r2, #2
 800557c:	4013      	ands	r3, r2
 800557e:	d100      	bne.n	8005582 <HAL_RCC_OscConfig+0x146>
 8005580:	e069      	b.n	8005656 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005582:	4b79      	ldr	r3, [pc, #484]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	220c      	movs	r2, #12
 8005588:	4013      	ands	r3, r2
 800558a:	d00b      	beq.n	80055a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800558c:	4b76      	ldr	r3, [pc, #472]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	220c      	movs	r2, #12
 8005592:	4013      	ands	r3, r2
 8005594:	2b08      	cmp	r3, #8
 8005596:	d11c      	bne.n	80055d2 <HAL_RCC_OscConfig+0x196>
 8005598:	4b73      	ldr	r3, [pc, #460]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	025b      	lsls	r3, r3, #9
 80055a0:	4013      	ands	r3, r2
 80055a2:	d116      	bne.n	80055d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a4:	4b70      	ldr	r3, [pc, #448]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	4013      	ands	r3, r2
 80055ac:	d005      	beq.n	80055ba <HAL_RCC_OscConfig+0x17e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d001      	beq.n	80055ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e24b      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ba:	4b6b      	ldr	r3, [pc, #428]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	22f8      	movs	r2, #248	; 0xf8
 80055c0:	4393      	bics	r3, r2
 80055c2:	0019      	movs	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	00da      	lsls	r2, r3, #3
 80055ca:	4b67      	ldr	r3, [pc, #412]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80055cc:	430a      	orrs	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d0:	e041      	b.n	8005656 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d024      	beq.n	8005624 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055da:	4b63      	ldr	r3, [pc, #396]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b62      	ldr	r3, [pc, #392]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80055e0:	2101      	movs	r1, #1
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fe8b 	bl	8004300 <HAL_GetTick>
 80055ea:	0003      	movs	r3, r0
 80055ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055f0:	f7fe fe86 	bl	8004300 <HAL_GetTick>
 80055f4:	0002      	movs	r2, r0
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e227      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2202      	movs	r2, #2
 8005608:	4013      	ands	r3, r2
 800560a:	d0f1      	beq.n	80055f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560c:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	22f8      	movs	r2, #248	; 0xf8
 8005612:	4393      	bics	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00da      	lsls	r2, r3, #3
 800561c:	4b52      	ldr	r3, [pc, #328]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e018      	b.n	8005656 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005624:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800562a:	2101      	movs	r1, #1
 800562c:	438a      	bics	r2, r1
 800562e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fe fe66 	bl	8004300 <HAL_GetTick>
 8005634:	0003      	movs	r3, r0
 8005636:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563a:	f7fe fe61 	bl	8004300 <HAL_GetTick>
 800563e:	0002      	movs	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e202      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564c:	4b46      	ldr	r3, [pc, #280]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2202      	movs	r2, #2
 8005652:	4013      	ands	r3, r2
 8005654:	d1f1      	bne.n	800563a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2208      	movs	r2, #8
 800565c:	4013      	ands	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d019      	beq.n	800569c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005668:	4b3f      	ldr	r3, [pc, #252]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800566a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800566c:	4b3e      	ldr	r3, [pc, #248]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800566e:	2101      	movs	r1, #1
 8005670:	430a      	orrs	r2, r1
 8005672:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005674:	f7fe fe44 	bl	8004300 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567e:	f7fe fe3f 	bl	8004300 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e1e0      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005690:	4b35      	ldr	r3, [pc, #212]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2202      	movs	r2, #2
 8005696:	4013      	ands	r3, r2
 8005698:	d0f1      	beq.n	800567e <HAL_RCC_OscConfig+0x242>
 800569a:	e018      	b.n	80056ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569c:	4b32      	ldr	r3, [pc, #200]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800569e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a0:	4b31      	ldr	r3, [pc, #196]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80056a2:	2101      	movs	r1, #1
 80056a4:	438a      	bics	r2, r1
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a8:	f7fe fe2a 	bl	8004300 <HAL_GetTick>
 80056ac:	0003      	movs	r3, r0
 80056ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b2:	f7fe fe25 	bl	8004300 <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e1c6      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c4:	4b28      	ldr	r3, [pc, #160]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	2202      	movs	r2, #2
 80056ca:	4013      	ands	r3, r2
 80056cc:	d1f1      	bne.n	80056b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2204      	movs	r2, #4
 80056d4:	4013      	ands	r3, r2
 80056d6:	d100      	bne.n	80056da <HAL_RCC_OscConfig+0x29e>
 80056d8:	e0b4      	b.n	8005844 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	201f      	movs	r0, #31
 80056dc:	183b      	adds	r3, r7, r0
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	055b      	lsls	r3, r3, #21
 80056ea:	4013      	ands	r3, r2
 80056ec:	d110      	bne.n	8005710 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	0549      	lsls	r1, r1, #21
 80056f8:	430a      	orrs	r2, r1
 80056fa:	61da      	str	r2, [r3, #28]
 80056fc:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	055b      	lsls	r3, r3, #21
 8005704:	4013      	ands	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800570a:	183b      	adds	r3, r7, r0
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <HAL_RCC_OscConfig+0x338>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d11a      	bne.n	8005752 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_RCC_OscConfig+0x338>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <HAL_RCC_OscConfig+0x338>)
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	0049      	lsls	r1, r1, #1
 8005726:	430a      	orrs	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fe fde9 	bl	8004300 <HAL_GetTick>
 800572e:	0003      	movs	r3, r0
 8005730:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005734:	f7fe fde4 	bl	8004300 <HAL_GetTick>
 8005738:	0002      	movs	r2, r0
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e185      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_OscConfig+0x338>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4013      	ands	r3, r2
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d10e      	bne.n	8005778 <HAL_RCC_OscConfig+0x33c>
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	4b02      	ldr	r3, [pc, #8]	; (8005768 <HAL_RCC_OscConfig+0x32c>)
 8005760:	2101      	movs	r1, #1
 8005762:	430a      	orrs	r2, r1
 8005764:	621a      	str	r2, [r3, #32]
 8005766:	e035      	b.n	80057d4 <HAL_RCC_OscConfig+0x398>
 8005768:	40021000 	.word	0x40021000
 800576c:	fffeffff 	.word	0xfffeffff
 8005770:	fffbffff 	.word	0xfffbffff
 8005774:	40007000 	.word	0x40007000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10c      	bne.n	800579a <HAL_RCC_OscConfig+0x35e>
 8005780:	4bb6      	ldr	r3, [pc, #728]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	4bb5      	ldr	r3, [pc, #724]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005786:	2101      	movs	r1, #1
 8005788:	438a      	bics	r2, r1
 800578a:	621a      	str	r2, [r3, #32]
 800578c:	4bb3      	ldr	r3, [pc, #716]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	4bb2      	ldr	r3, [pc, #712]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005792:	2104      	movs	r1, #4
 8005794:	438a      	bics	r2, r1
 8005796:	621a      	str	r2, [r3, #32]
 8005798:	e01c      	b.n	80057d4 <HAL_RCC_OscConfig+0x398>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x380>
 80057a2:	4bae      	ldr	r3, [pc, #696]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	4bad      	ldr	r3, [pc, #692]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057a8:	2104      	movs	r1, #4
 80057aa:	430a      	orrs	r2, r1
 80057ac:	621a      	str	r2, [r3, #32]
 80057ae:	4bab      	ldr	r3, [pc, #684]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	4baa      	ldr	r3, [pc, #680]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057b4:	2101      	movs	r1, #1
 80057b6:	430a      	orrs	r2, r1
 80057b8:	621a      	str	r2, [r3, #32]
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0x398>
 80057bc:	4ba7      	ldr	r3, [pc, #668]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	4ba6      	ldr	r3, [pc, #664]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057c2:	2101      	movs	r1, #1
 80057c4:	438a      	bics	r2, r1
 80057c6:	621a      	str	r2, [r3, #32]
 80057c8:	4ba4      	ldr	r3, [pc, #656]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	4ba3      	ldr	r3, [pc, #652]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057ce:	2104      	movs	r1, #4
 80057d0:	438a      	bics	r2, r1
 80057d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d014      	beq.n	8005806 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057dc:	f7fe fd90 	bl	8004300 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e4:	e009      	b.n	80057fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fe fd8b 	bl	8004300 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	4a9b      	ldr	r2, [pc, #620]	; (8005a60 <HAL_RCC_OscConfig+0x624>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e12b      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fa:	4b98      	ldr	r3, [pc, #608]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	2202      	movs	r2, #2
 8005800:	4013      	ands	r3, r2
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x3aa>
 8005804:	e013      	b.n	800582e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005806:	f7fe fd7b 	bl	8004300 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800580e:	e009      	b.n	8005824 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fe fd76 	bl	8004300 <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a91      	ldr	r2, [pc, #580]	; (8005a60 <HAL_RCC_OscConfig+0x624>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e116      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005824:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	2202      	movs	r2, #2
 800582a:	4013      	ands	r3, r2
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800582e:	231f      	movs	r3, #31
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	4b87      	ldr	r3, [pc, #540]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800583e:	4989      	ldr	r1, [pc, #548]	; (8005a64 <HAL_RCC_OscConfig+0x628>)
 8005840:	400a      	ands	r2, r1
 8005842:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d063      	beq.n	8005916 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d12a      	bne.n	80058ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005856:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585a:	4b80      	ldr	r3, [pc, #512]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800585c:	2104      	movs	r1, #4
 800585e:	430a      	orrs	r2, r1
 8005860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005862:	4b7e      	ldr	r3, [pc, #504]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005866:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005868:	2101      	movs	r1, #1
 800586a:	430a      	orrs	r2, r1
 800586c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586e:	f7fe fd47 	bl	8004300 <HAL_GetTick>
 8005872:	0003      	movs	r3, r0
 8005874:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005878:	f7fe fd42 	bl	8004300 <HAL_GetTick>
 800587c:	0002      	movs	r2, r0
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e0e3      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800588a:	4b74      	ldr	r3, [pc, #464]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	2202      	movs	r2, #2
 8005890:	4013      	ands	r3, r2
 8005892:	d0f1      	beq.n	8005878 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005894:	4b71      	ldr	r3, [pc, #452]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	22f8      	movs	r2, #248	; 0xf8
 800589a:	4393      	bics	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	00da      	lsls	r2, r3, #3
 80058a4:	4b6d      	ldr	r3, [pc, #436]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058a6:	430a      	orrs	r2, r1
 80058a8:	635a      	str	r2, [r3, #52]	; 0x34
 80058aa:	e034      	b.n	8005916 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	3305      	adds	r3, #5
 80058b2:	d111      	bne.n	80058d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80058b4:	4b69      	ldr	r3, [pc, #420]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b8:	4b68      	ldr	r3, [pc, #416]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058ba:	2104      	movs	r1, #4
 80058bc:	438a      	bics	r2, r1
 80058be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80058c0:	4b66      	ldr	r3, [pc, #408]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	22f8      	movs	r2, #248	; 0xf8
 80058c6:	4393      	bics	r3, r2
 80058c8:	0019      	movs	r1, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	00da      	lsls	r2, r3, #3
 80058d0:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058d2:	430a      	orrs	r2, r1
 80058d4:	635a      	str	r2, [r3, #52]	; 0x34
 80058d6:	e01e      	b.n	8005916 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80058d8:	4b60      	ldr	r3, [pc, #384]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058dc:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058de:	2104      	movs	r1, #4
 80058e0:	430a      	orrs	r2, r1
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80058e4:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e8:	4b5c      	ldr	r3, [pc, #368]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	438a      	bics	r2, r1
 80058ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f0:	f7fe fd06 	bl	8004300 <HAL_GetTick>
 80058f4:	0003      	movs	r3, r0
 80058f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80058fa:	f7fe fd01 	bl	8004300 <HAL_GetTick>
 80058fe:	0002      	movs	r2, r0
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0a2      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800590c:	4b53      	ldr	r3, [pc, #332]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	2202      	movs	r2, #2
 8005912:	4013      	ands	r3, r2
 8005914:	d1f1      	bne.n	80058fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d100      	bne.n	8005920 <HAL_RCC_OscConfig+0x4e4>
 800591e:	e097      	b.n	8005a50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005920:	4b4e      	ldr	r3, [pc, #312]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	220c      	movs	r2, #12
 8005926:	4013      	ands	r3, r2
 8005928:	2b08      	cmp	r3, #8
 800592a:	d100      	bne.n	800592e <HAL_RCC_OscConfig+0x4f2>
 800592c:	e06b      	b.n	8005a06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d14c      	bne.n	80059d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005936:	4b49      	ldr	r3, [pc, #292]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b48      	ldr	r3, [pc, #288]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800593c:	494a      	ldr	r1, [pc, #296]	; (8005a68 <HAL_RCC_OscConfig+0x62c>)
 800593e:	400a      	ands	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005942:	f7fe fcdd 	bl	8004300 <HAL_GetTick>
 8005946:	0003      	movs	r3, r0
 8005948:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594c:	f7fe fcd8 	bl	8004300 <HAL_GetTick>
 8005950:	0002      	movs	r2, r0
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e079      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800595e:	4b3f      	ldr	r3, [pc, #252]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	049b      	lsls	r3, r3, #18
 8005966:	4013      	ands	r3, r2
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800596a:	4b3c      	ldr	r3, [pc, #240]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	220f      	movs	r2, #15
 8005970:	4393      	bics	r3, r2
 8005972:	0019      	movs	r1, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005978:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800597a:	430a      	orrs	r2, r1
 800597c:	62da      	str	r2, [r3, #44]	; 0x2c
 800597e:	4b37      	ldr	r3, [pc, #220]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4a3a      	ldr	r2, [pc, #232]	; (8005a6c <HAL_RCC_OscConfig+0x630>)
 8005984:	4013      	ands	r3, r2
 8005986:	0019      	movs	r1, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	431a      	orrs	r2, r3
 8005992:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005998:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 800599e:	2180      	movs	r1, #128	; 0x80
 80059a0:	0449      	lsls	r1, r1, #17
 80059a2:	430a      	orrs	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a6:	f7fe fcab 	bl	8004300 <HAL_GetTick>
 80059aa:	0003      	movs	r3, r0
 80059ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe fca6 	bl	8004300 <HAL_GetTick>
 80059b4:	0002      	movs	r2, r0
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e047      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059c2:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	049b      	lsls	r3, r3, #18
 80059ca:	4013      	ands	r3, r2
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x574>
 80059ce:	e03f      	b.n	8005a50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80059d6:	4924      	ldr	r1, [pc, #144]	; (8005a68 <HAL_RCC_OscConfig+0x62c>)
 80059d8:	400a      	ands	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fe fc90 	bl	8004300 <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fe fc8b 	bl	8004300 <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e02c      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f8:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	049b      	lsls	r3, r3, #18
 8005a00:	4013      	ands	r3, r2
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x5aa>
 8005a04:	e024      	b.n	8005a50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e01f      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_RCC_OscConfig+0x620>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	025b      	lsls	r3, r3, #9
 8005a24:	401a      	ands	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d10e      	bne.n	8005a4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	220f      	movs	r2, #15
 8005a32:	401a      	ands	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	23f0      	movs	r3, #240	; 0xf0
 8005a40:	039b      	lsls	r3, r3, #14
 8005a42:	401a      	ands	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b008      	add	sp, #32
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	00001388 	.word	0x00001388
 8005a64:	efffffff 	.word	0xefffffff
 8005a68:	feffffff 	.word	0xfeffffff
 8005a6c:	ffc2ffff 	.word	0xffc2ffff

08005a70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0b3      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a84:	4b5b      	ldr	r3, [pc, #364]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d911      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2201      	movs	r2, #1
 8005a98:	4393      	bics	r3, r2
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	4b55      	ldr	r3, [pc, #340]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa4:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4013      	ands	r3, r2
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e09a      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2202      	movs	r2, #2
 8005abc:	4013      	ands	r3, r2
 8005abe:	d015      	beq.n	8005aec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d006      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005aca:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4b4a      	ldr	r3, [pc, #296]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005ad0:	21e0      	movs	r1, #224	; 0xe0
 8005ad2:	00c9      	lsls	r1, r1, #3
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad8:	4b47      	ldr	r3, [pc, #284]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	22f0      	movs	r2, #240	; 0xf0
 8005ade:	4393      	bics	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b44      	ldr	r3, [pc, #272]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2201      	movs	r2, #1
 8005af2:	4013      	ands	r3, r2
 8005af4:	d040      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b3e      	ldr	r3, [pc, #248]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	029b      	lsls	r3, r3, #10
 8005b06:	4013      	ands	r3, r2
 8005b08:	d114      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e06e      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b16:	4b38      	ldr	r3, [pc, #224]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	049b      	lsls	r3, r3, #18
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d108      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e062      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b26:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e05b      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b34:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	4393      	bics	r3, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	4b2d      	ldr	r3, [pc, #180]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b48:	f7fe fbda 	bl	8004300 <HAL_GetTick>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b50:	e009      	b.n	8005b66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b52:	f7fe fbd5 	bl	8004300 <HAL_GetTick>
 8005b56:	0002      	movs	r2, r0
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <HAL_RCC_ClockConfig+0x18c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e042      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	220c      	movs	r2, #12
 8005b6c:	401a      	ands	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d1ec      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4013      	ands	r3, r2
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d211      	bcs.n	8005baa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4393      	bics	r3, r2
 8005b8e:	0019      	movs	r1, r3
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <HAL_RCC_ClockConfig+0x184>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d001      	beq.n	8005baa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e020      	b.n	8005bec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <HAL_RCC_ClockConfig+0x190>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bc8:	f000 f820 	bl	8005c0c <HAL_RCC_GetSysClockFreq>
 8005bcc:	0001      	movs	r1, r0
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x188>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	220f      	movs	r2, #15
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <HAL_RCC_ClockConfig+0x194>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	000a      	movs	r2, r1
 8005bde:	40da      	lsrs	r2, r3
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_ClockConfig+0x198>)
 8005be2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005be4:	2003      	movs	r0, #3
 8005be6:	f7fe fb45 	bl	8004274 <HAL_InitTick>
  
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	0018      	movs	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b004      	add	sp, #16
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40022000 	.word	0x40022000
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	00001388 	.word	0x00001388
 8005c00:	fffff8ff 	.word	0xfffff8ff
 8005c04:	0800d6e8 	.word	0x0800d6e8
 8005c08:	20000024 	.word	0x20000024

08005c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	220c      	movs	r2, #12
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x30>
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d003      	beq.n	8005c42 <HAL_RCC_GetSysClockFreq+0x36>
 8005c3a:	e02c      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	; (8005cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c3e:	613b      	str	r3, [r7, #16]
      break;
 8005c40:	e02c      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	0c9b      	lsrs	r3, r3, #18
 8005c46:	220f      	movs	r2, #15
 8005c48:	4013      	ands	r3, r2
 8005c4a:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c4c:	5cd3      	ldrb	r3, [r2, r3]
 8005c4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005c50:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	220f      	movs	r2, #15
 8005c56:	4013      	ands	r3, r2
 8005c58:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005c5a:	5cd3      	ldrb	r3, [r2, r3]
 8005c5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	025b      	lsls	r3, r3, #9
 8005c64:	4013      	ands	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4810      	ldr	r0, [pc, #64]	; (8005cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c6c:	f7fa fa68 	bl	8000140 <__udivsi3>
 8005c70:	0003      	movs	r3, r0
 8005c72:	001a      	movs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4353      	muls	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e009      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	000a      	movs	r2, r1
 8005c80:	0152      	lsls	r2, r2, #5
 8005c82:	1a52      	subs	r2, r2, r1
 8005c84:	0193      	lsls	r3, r2, #6
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	185b      	adds	r3, r3, r1
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	613b      	str	r3, [r7, #16]
      break;
 8005c94:	e002      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c98:	613b      	str	r3, [r7, #16]
      break;
 8005c9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c9c:	693b      	ldr	r3, [r7, #16]
}
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b006      	add	sp, #24
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	007a1200 	.word	0x007a1200
 8005cb0:	0800d700 	.word	0x0800d700
 8005cb4:	0800d710 	.word	0x0800d710

08005cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cbc:	4b02      	ldr	r3, [pc, #8]	; (8005cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	20000024 	.word	0x20000024

08005ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005cd0:	f7ff fff2 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005cd4:	0001      	movs	r1, r0
 8005cd6:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	2207      	movs	r2, #7
 8005cde:	4013      	ands	r3, r2
 8005ce0:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	40d9      	lsrs	r1, r3
 8005ce6:	000b      	movs	r3, r1
}    
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	0800d6f8 	.word	0x0800d6f8

08005cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	025b      	lsls	r3, r3, #9
 8005d10:	4013      	ands	r3, r2
 8005d12:	d100      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005d14:	e08e      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005d16:	2017      	movs	r0, #23
 8005d18:	183b      	adds	r3, r7, r0
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d1e:	4b57      	ldr	r3, [pc, #348]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	055b      	lsls	r3, r3, #21
 8005d26:	4013      	ands	r3, r2
 8005d28:	d110      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d2a:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	4b53      	ldr	r3, [pc, #332]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	0549      	lsls	r1, r1, #21
 8005d34:	430a      	orrs	r2, r1
 8005d36:	61da      	str	r2, [r3, #28]
 8005d38:	4b50      	ldr	r3, [pc, #320]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	055b      	lsls	r3, r3, #21
 8005d40:	4013      	ands	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4c:	4b4c      	ldr	r3, [pc, #304]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4013      	ands	r3, r2
 8005d56:	d11a      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d58:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b48      	ldr	r3, [pc, #288]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d5e:	2180      	movs	r1, #128	; 0x80
 8005d60:	0049      	lsls	r1, r1, #1
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d66:	f7fe facb 	bl	8004300 <HAL_GetTick>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	e008      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d70:	f7fe fac6 	bl	8004300 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e077      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d8e:	4b3b      	ldr	r3, [pc, #236]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	23c0      	movs	r3, #192	; 0xc0
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4013      	ands	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d034      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	23c0      	movs	r3, #192	; 0xc0
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4013      	ands	r3, r2
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d02c      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db0:	4b32      	ldr	r3, [pc, #200]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dbc:	6a1a      	ldr	r2, [r3, #32]
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	0249      	lsls	r1, r1, #9
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc8:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dce:	492e      	ldr	r1, [pc, #184]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dd4:	4b29      	ldr	r3, [pc, #164]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4013      	ands	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de2:	f7fe fa8d 	bl	8004300 <HAL_GetTick>
 8005de6:	0003      	movs	r3, r0
 8005de8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dea:	e009      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dec:	f7fe fa88 	bl	8004300 <HAL_GetTick>
 8005df0:	0002      	movs	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e038      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	2202      	movs	r2, #2
 8005e06:	4013      	ands	r3, r2
 8005e08:	d0f0      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	0019      	movs	r1, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e1e:	2317      	movs	r3, #23
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d105      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e28:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e2e:	4918      	ldr	r1, [pc, #96]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005e30:	400a      	ands	r2, r1
 8005e32:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	2203      	movs	r2, #3
 8005e44:	4393      	bics	r3, r2
 8005e46:	0019      	movs	r1, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2220      	movs	r2, #32
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e5c:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	2210      	movs	r2, #16
 8005e62:	4393      	bics	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b006      	add	sp, #24
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40007000 	.word	0x40007000
 8005e84:	fffffcff 	.word	0xfffffcff
 8005e88:	fffeffff 	.word	0xfffeffff
 8005e8c:	00001388 	.word	0x00001388
 8005e90:	efffffff 	.word	0xefffffff

08005e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e042      	b.n	8005f2c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	223d      	movs	r2, #61	; 0x3d
 8005eaa:	5c9b      	ldrb	r3, [r3, r2]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d107      	bne.n	8005ec2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	223c      	movs	r2, #60	; 0x3c
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fd ff81 	bl	8003dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	223d      	movs	r2, #61	; 0x3d
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	0010      	movs	r0, r2
 8005ed6:	f000 ff0f 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2246      	movs	r2, #70	; 0x46
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	223e      	movs	r2, #62	; 0x3e
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	223f      	movs	r2, #63	; 0x3f
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2240      	movs	r2, #64	; 0x40
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2241      	movs	r2, #65	; 0x41
 8005efe:	2101      	movs	r1, #1
 8005f00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2242      	movs	r2, #66	; 0x42
 8005f06:	2101      	movs	r1, #1
 8005f08:	5499      	strb	r1, [r3, r2]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2243      	movs	r2, #67	; 0x43
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2244      	movs	r2, #68	; 0x44
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2245      	movs	r2, #69	; 0x45
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	223d      	movs	r2, #61	; 0x3d
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	223d      	movs	r2, #61	; 0x3d
 8005f40:	5c9b      	ldrb	r3, [r3, r2]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e02d      	b.n	8005fa8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	223d      	movs	r2, #61	; 0x3d
 8005f50:	2102      	movs	r1, #2
 8005f52:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <HAL_TIM_Base_Start+0x7c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_TIM_Base_Start+0x3e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIM_Base_Start+0x80>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_TIM_Base_Start+0x3e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <HAL_TIM_Base_Start+0x84>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d111      	bne.n	8005f96 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2207      	movs	r2, #7
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b06      	cmp	r3, #6
 8005f82:	d010      	beq.n	8005fa6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2101      	movs	r1, #1
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	e007      	b.n	8005fa6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b004      	add	sp, #16
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40014000 	.word	0x40014000

08005fbc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4a0d      	ldr	r2, [pc, #52]	; (8006000 <HAL_TIM_Base_Stop+0x44>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d10d      	bne.n	8005fec <HAL_TIM_Base_Stop+0x30>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4a0b      	ldr	r2, [pc, #44]	; (8006004 <HAL_TIM_Base_Stop+0x48>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d107      	bne.n	8005fec <HAL_TIM_Base_Stop+0x30>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	438a      	bics	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	223d      	movs	r2, #61	; 0x3d
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b002      	add	sp, #8
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	00001111 	.word	0x00001111
 8006004:	00000444 	.word	0x00000444

08006008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	223d      	movs	r2, #61	; 0x3d
 8006014:	5c9b      	ldrb	r3, [r3, r2]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e035      	b.n	800608c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	223d      	movs	r2, #61	; 0x3d
 8006024:	2102      	movs	r1, #2
 8006026:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2101      	movs	r1, #1
 8006034:	430a      	orrs	r2, r1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_TIM_Base_Start_IT+0x8c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_TIM_Base_Start_IT+0x4e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_TIM_Base_Start_IT+0x90>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_TIM_Base_Start_IT+0x4e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a12      	ldr	r2, [pc, #72]	; (800609c <HAL_TIM_Base_Start_IT+0x94>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d111      	bne.n	800607a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2207      	movs	r2, #7
 800605e:	4013      	ands	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d010      	beq.n	800608a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	e007      	b.n	800608a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2101      	movs	r1, #1
 8006086:	430a      	orrs	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b004      	add	sp, #16
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40000400 	.word	0x40000400
 800609c:	40014000 	.word	0x40014000

080060a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2101      	movs	r1, #1
 80060b4:	438a      	bics	r2, r1
 80060b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <HAL_TIM_Base_Stop_IT+0x54>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	d10d      	bne.n	80060e0 <HAL_TIM_Base_Stop_IT+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <HAL_TIM_Base_Stop_IT+0x58>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	d107      	bne.n	80060e0 <HAL_TIM_Base_Stop_IT+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2101      	movs	r1, #1
 80060dc:	438a      	bics	r2, r1
 80060de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	223d      	movs	r2, #61	; 0x3d
 80060e4:	2101      	movs	r1, #1
 80060e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	0018      	movs	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b002      	add	sp, #8
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	00001111 	.word	0x00001111
 80060f8:	00000444 	.word	0x00000444

080060fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e042      	b.n	8006194 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	223d      	movs	r2, #61	; 0x3d
 8006112:	5c9b      	ldrb	r3, [r3, r2]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	223c      	movs	r2, #60	; 0x3c
 800611e:	2100      	movs	r1, #0
 8006120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f839 	bl	800619c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	223d      	movs	r2, #61	; 0x3d
 800612e:	2102      	movs	r1, #2
 8006130:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
 800613a:	0019      	movs	r1, r3
 800613c:	0010      	movs	r0, r2
 800613e:	f000 fddb 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2246      	movs	r2, #70	; 0x46
 8006146:	2101      	movs	r1, #1
 8006148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	223e      	movs	r2, #62	; 0x3e
 800614e:	2101      	movs	r1, #1
 8006150:	5499      	strb	r1, [r3, r2]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	223f      	movs	r2, #63	; 0x3f
 8006156:	2101      	movs	r1, #1
 8006158:	5499      	strb	r1, [r3, r2]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2240      	movs	r2, #64	; 0x40
 800615e:	2101      	movs	r1, #1
 8006160:	5499      	strb	r1, [r3, r2]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2241      	movs	r2, #65	; 0x41
 8006166:	2101      	movs	r1, #1
 8006168:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2242      	movs	r2, #66	; 0x42
 800616e:	2101      	movs	r1, #1
 8006170:	5499      	strb	r1, [r3, r2]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2243      	movs	r2, #67	; 0x43
 8006176:	2101      	movs	r1, #1
 8006178:	5499      	strb	r1, [r3, r2]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2244      	movs	r2, #68	; 0x44
 800617e:	2101      	movs	r1, #1
 8006180:	5499      	strb	r1, [r3, r2]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2245      	movs	r2, #69	; 0x45
 8006186:	2101      	movs	r1, #1
 8006188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	223d      	movs	r2, #61	; 0x3d
 800618e:	2101      	movs	r1, #1
 8006190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	0018      	movs	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	b002      	add	sp, #8
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80061a4:	46c0      	nop			; (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b002      	add	sp, #8
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d108      	bne.n	80061ce <HAL_TIM_OC_Start+0x22>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	223e      	movs	r2, #62	; 0x3e
 80061c0:	5c9b      	ldrb	r3, [r3, r2]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	1e5a      	subs	r2, r3, #1
 80061c8:	4193      	sbcs	r3, r2
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	e01f      	b.n	800620e <HAL_TIM_OC_Start+0x62>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d108      	bne.n	80061e6 <HAL_TIM_OC_Start+0x3a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	223f      	movs	r2, #63	; 0x3f
 80061d8:	5c9b      	ldrb	r3, [r3, r2]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	1e5a      	subs	r2, r3, #1
 80061e0:	4193      	sbcs	r3, r2
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	e013      	b.n	800620e <HAL_TIM_OC_Start+0x62>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d108      	bne.n	80061fe <HAL_TIM_OC_Start+0x52>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2240      	movs	r2, #64	; 0x40
 80061f0:	5c9b      	ldrb	r3, [r3, r2]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	1e5a      	subs	r2, r3, #1
 80061f8:	4193      	sbcs	r3, r2
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	e007      	b.n	800620e <HAL_TIM_OC_Start+0x62>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2241      	movs	r2, #65	; 0x41
 8006202:	5c9b      	ldrb	r3, [r3, r2]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	1e5a      	subs	r2, r3, #1
 800620a:	4193      	sbcs	r3, r2
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e06e      	b.n	80062f4 <HAL_TIM_OC_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_TIM_OC_Start+0x7a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	223e      	movs	r2, #62	; 0x3e
 8006220:	2102      	movs	r1, #2
 8006222:	5499      	strb	r1, [r3, r2]
 8006224:	e013      	b.n	800624e <HAL_TIM_OC_Start+0xa2>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d104      	bne.n	8006236 <HAL_TIM_OC_Start+0x8a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	223f      	movs	r2, #63	; 0x3f
 8006230:	2102      	movs	r1, #2
 8006232:	5499      	strb	r1, [r3, r2]
 8006234:	e00b      	b.n	800624e <HAL_TIM_OC_Start+0xa2>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d104      	bne.n	8006246 <HAL_TIM_OC_Start+0x9a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2240      	movs	r2, #64	; 0x40
 8006240:	2102      	movs	r1, #2
 8006242:	5499      	strb	r1, [r3, r2]
 8006244:	e003      	b.n	800624e <HAL_TIM_OC_Start+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2241      	movs	r2, #65	; 0x41
 800624a:	2102      	movs	r1, #2
 800624c:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	2201      	movs	r2, #1
 8006256:	0018      	movs	r0, r3
 8006258:	f001 f8ec 	bl	8007434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a26      	ldr	r2, [pc, #152]	; (80062fc <HAL_TIM_OC_Start+0x150>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00e      	beq.n	8006284 <HAL_TIM_OC_Start+0xd8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a25      	ldr	r2, [pc, #148]	; (8006300 <HAL_TIM_OC_Start+0x154>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d009      	beq.n	8006284 <HAL_TIM_OC_Start+0xd8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a23      	ldr	r2, [pc, #140]	; (8006304 <HAL_TIM_OC_Start+0x158>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <HAL_TIM_OC_Start+0xd8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a22      	ldr	r2, [pc, #136]	; (8006308 <HAL_TIM_OC_Start+0x15c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d101      	bne.n	8006288 <HAL_TIM_OC_Start+0xdc>
 8006284:	2301      	movs	r3, #1
 8006286:	e000      	b.n	800628a <HAL_TIM_OC_Start+0xde>
 8006288:	2300      	movs	r3, #0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	0209      	lsls	r1, r1, #8
 800629c:	430a      	orrs	r2, r1
 800629e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_TIM_OC_Start+0x150>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_TIM_OC_Start+0x112>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a17      	ldr	r2, [pc, #92]	; (800630c <HAL_TIM_OC_Start+0x160>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIM_OC_Start+0x112>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a11      	ldr	r2, [pc, #68]	; (8006300 <HAL_TIM_OC_Start+0x154>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d111      	bne.n	80062e2 <HAL_TIM_OC_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2207      	movs	r2, #7
 80062c6:	4013      	ands	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b06      	cmp	r3, #6
 80062ce:	d010      	beq.n	80062f2 <HAL_TIM_OC_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	430a      	orrs	r2, r1
 80062de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e0:	e007      	b.n	80062f2 <HAL_TIM_OC_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2101      	movs	r1, #1
 80062ee:	430a      	orrs	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	0018      	movs	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b004      	add	sp, #16
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800
 800630c:	40000400 	.word	0x40000400

08006310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e042      	b.n	80063a8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	223d      	movs	r2, #61	; 0x3d
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d107      	bne.n	800633e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	223c      	movs	r2, #60	; 0x3c
 8006332:	2100      	movs	r1, #0
 8006334:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 f839 	bl	80063b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	223d      	movs	r2, #61	; 0x3d
 8006342:	2102      	movs	r1, #2
 8006344:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	0019      	movs	r1, r3
 8006350:	0010      	movs	r0, r2
 8006352:	f000 fcd1 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2246      	movs	r2, #70	; 0x46
 800635a:	2101      	movs	r1, #1
 800635c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	223e      	movs	r2, #62	; 0x3e
 8006362:	2101      	movs	r1, #1
 8006364:	5499      	strb	r1, [r3, r2]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	223f      	movs	r2, #63	; 0x3f
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2240      	movs	r2, #64	; 0x40
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2241      	movs	r2, #65	; 0x41
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2242      	movs	r2, #66	; 0x42
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2243      	movs	r2, #67	; 0x43
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2244      	movs	r2, #68	; 0x44
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2245      	movs	r2, #69	; 0x45
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	223d      	movs	r2, #61	; 0x3d
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b002      	add	sp, #8
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <HAL_TIM_PWM_Start+0x22>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	223e      	movs	r2, #62	; 0x3e
 80063d4:	5c9b      	ldrb	r3, [r3, r2]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	1e5a      	subs	r2, r3, #1
 80063dc:	4193      	sbcs	r3, r2
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	e01f      	b.n	8006422 <HAL_TIM_PWM_Start+0x62>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d108      	bne.n	80063fa <HAL_TIM_PWM_Start+0x3a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	223f      	movs	r2, #63	; 0x3f
 80063ec:	5c9b      	ldrb	r3, [r3, r2]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	1e5a      	subs	r2, r3, #1
 80063f4:	4193      	sbcs	r3, r2
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	e013      	b.n	8006422 <HAL_TIM_PWM_Start+0x62>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d108      	bne.n	8006412 <HAL_TIM_PWM_Start+0x52>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2240      	movs	r2, #64	; 0x40
 8006404:	5c9b      	ldrb	r3, [r3, r2]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	1e5a      	subs	r2, r3, #1
 800640c:	4193      	sbcs	r3, r2
 800640e:	b2db      	uxtb	r3, r3
 8006410:	e007      	b.n	8006422 <HAL_TIM_PWM_Start+0x62>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2241      	movs	r2, #65	; 0x41
 8006416:	5c9b      	ldrb	r3, [r3, r2]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	4193      	sbcs	r3, r2
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e06e      	b.n	8006508 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0x7a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	223e      	movs	r2, #62	; 0x3e
 8006434:	2102      	movs	r1, #2
 8006436:	5499      	strb	r1, [r3, r2]
 8006438:	e013      	b.n	8006462 <HAL_TIM_PWM_Start+0xa2>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0x8a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	223f      	movs	r2, #63	; 0x3f
 8006444:	2102      	movs	r1, #2
 8006446:	5499      	strb	r1, [r3, r2]
 8006448:	e00b      	b.n	8006462 <HAL_TIM_PWM_Start+0xa2>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0x9a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2240      	movs	r2, #64	; 0x40
 8006454:	2102      	movs	r1, #2
 8006456:	5499      	strb	r1, [r3, r2]
 8006458:	e003      	b.n	8006462 <HAL_TIM_PWM_Start+0xa2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2241      	movs	r2, #65	; 0x41
 800645e:	2102      	movs	r1, #2
 8006460:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	0018      	movs	r0, r3
 800646c:	f000 ffe2 	bl	8007434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a26      	ldr	r2, [pc, #152]	; (8006510 <HAL_TIM_PWM_Start+0x150>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_TIM_PWM_Start+0xd8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a25      	ldr	r2, [pc, #148]	; (8006514 <HAL_TIM_PWM_Start+0x154>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_TIM_PWM_Start+0xd8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a23      	ldr	r2, [pc, #140]	; (8006518 <HAL_TIM_PWM_Start+0x158>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIM_PWM_Start+0xd8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a22      	ldr	r2, [pc, #136]	; (800651c <HAL_TIM_PWM_Start+0x15c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <HAL_TIM_PWM_Start+0xdc>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <HAL_TIM_PWM_Start+0xde>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2180      	movs	r1, #128	; 0x80
 80064ae:	0209      	lsls	r1, r1, #8
 80064b0:	430a      	orrs	r2, r1
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <HAL_TIM_PWM_Start+0x150>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d009      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x112>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a17      	ldr	r2, [pc, #92]	; (8006520 <HAL_TIM_PWM_Start+0x160>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d004      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x112>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a11      	ldr	r2, [pc, #68]	; (8006514 <HAL_TIM_PWM_Start+0x154>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d111      	bne.n	80064f6 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2207      	movs	r2, #7
 80064da:	4013      	ands	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	d010      	beq.n	8006506 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2101      	movs	r1, #1
 80064f0:	430a      	orrs	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	e007      	b.n	8006506 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2101      	movs	r1, #1
 8006502:	430a      	orrs	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	0018      	movs	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	b004      	add	sp, #16
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800
 8006520:	40000400 	.word	0x40000400

08006524 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	2200      	movs	r2, #0
 8006536:	0018      	movs	r0, r3
 8006538:	f000 ff7c 	bl	8007434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2f      	ldr	r2, [pc, #188]	; (8006600 <HAL_TIM_PWM_Stop+0xdc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00e      	beq.n	8006564 <HAL_TIM_PWM_Stop+0x40>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2e      	ldr	r2, [pc, #184]	; (8006604 <HAL_TIM_PWM_Stop+0xe0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d009      	beq.n	8006564 <HAL_TIM_PWM_Stop+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2c      	ldr	r2, [pc, #176]	; (8006608 <HAL_TIM_PWM_Stop+0xe4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_TIM_PWM_Stop+0x40>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2b      	ldr	r2, [pc, #172]	; (800660c <HAL_TIM_PWM_Stop+0xe8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_TIM_PWM_Stop+0x44>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <HAL_TIM_PWM_Stop+0x46>
 8006568:	2300      	movs	r3, #0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d013      	beq.n	8006596 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	4a26      	ldr	r2, [pc, #152]	; (8006610 <HAL_TIM_PWM_Stop+0xec>)
 8006576:	4013      	ands	r3, r2
 8006578:	d10d      	bne.n	8006596 <HAL_TIM_PWM_Stop+0x72>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	4a24      	ldr	r2, [pc, #144]	; (8006614 <HAL_TIM_PWM_Stop+0xf0>)
 8006582:	4013      	ands	r3, r2
 8006584:	d107      	bne.n	8006596 <HAL_TIM_PWM_Stop+0x72>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4921      	ldr	r1, [pc, #132]	; (8006618 <HAL_TIM_PWM_Stop+0xf4>)
 8006592:	400a      	ands	r2, r1
 8006594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_TIM_PWM_Stop+0xec>)
 800659e:	4013      	ands	r3, r2
 80065a0:	d10d      	bne.n	80065be <HAL_TIM_PWM_Stop+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <HAL_TIM_PWM_Stop+0xf0>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	d107      	bne.n	80065be <HAL_TIM_PWM_Stop+0x9a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	438a      	bics	r2, r1
 80065bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Stop+0xaa>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	223e      	movs	r2, #62	; 0x3e
 80065c8:	2101      	movs	r1, #1
 80065ca:	5499      	strb	r1, [r3, r2]
 80065cc:	e013      	b.n	80065f6 <HAL_TIM_PWM_Stop+0xd2>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Stop+0xba>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	223f      	movs	r2, #63	; 0x3f
 80065d8:	2101      	movs	r1, #1
 80065da:	5499      	strb	r1, [r3, r2]
 80065dc:	e00b      	b.n	80065f6 <HAL_TIM_PWM_Stop+0xd2>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Stop+0xca>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2240      	movs	r2, #64	; 0x40
 80065e8:	2101      	movs	r1, #1
 80065ea:	5499      	strb	r1, [r3, r2]
 80065ec:	e003      	b.n	80065f6 <HAL_TIM_PWM_Stop+0xd2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2241      	movs	r2, #65	; 0x41
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b002      	add	sp, #8
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40014000 	.word	0x40014000
 8006608:	40014400 	.word	0x40014400
 800660c:	40014800 	.word	0x40014800
 8006610:	00001111 	.word	0x00001111
 8006614:	00000444 	.word	0x00000444
 8006618:	ffff7fff 	.word	0xffff7fff

0800661c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2202      	movs	r2, #2
 800662c:	4013      	ands	r3, r2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d124      	bne.n	800667c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2202      	movs	r2, #2
 800663a:	4013      	ands	r3, r2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d11d      	bne.n	800667c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2203      	movs	r2, #3
 8006646:	4252      	negs	r2, r2
 8006648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2203      	movs	r2, #3
 8006658:	4013      	ands	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 fb32 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006664:	e007      	b.n	8006676 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	0018      	movs	r0, r3
 800666a:	f000 fb25 	bl	8006cb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	0018      	movs	r0, r3
 8006672:	f000 fb31 	bl	8006cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2204      	movs	r2, #4
 8006684:	4013      	ands	r3, r2
 8006686:	2b04      	cmp	r3, #4
 8006688:	d125      	bne.n	80066d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	2204      	movs	r2, #4
 8006692:	4013      	ands	r3, r2
 8006694:	2b04      	cmp	r3, #4
 8006696:	d11e      	bne.n	80066d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2205      	movs	r2, #5
 800669e:	4252      	negs	r2, r2
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	23c0      	movs	r3, #192	; 0xc0
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4013      	ands	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 fb05 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80066be:	e007      	b.n	80066d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 faf8 	bl	8006cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	0018      	movs	r0, r3
 80066cc:	f000 fb04 	bl	8006cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2208      	movs	r2, #8
 80066de:	4013      	ands	r3, r2
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d124      	bne.n	800672e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2208      	movs	r2, #8
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d11d      	bne.n	800672e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2209      	movs	r2, #9
 80066f8:	4252      	negs	r2, r2
 80066fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2204      	movs	r2, #4
 8006700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	2203      	movs	r2, #3
 800670a:	4013      	ands	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0018      	movs	r0, r3
 8006712:	f000 fad9 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006716:	e007      	b.n	8006728 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	0018      	movs	r0, r3
 800671c:	f000 facc 	bl	8006cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	0018      	movs	r0, r3
 8006724:	f000 fad8 	bl	8006cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2210      	movs	r2, #16
 8006736:	4013      	ands	r3, r2
 8006738:	2b10      	cmp	r3, #16
 800673a:	d125      	bne.n	8006788 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	2210      	movs	r2, #16
 8006744:	4013      	ands	r3, r2
 8006746:	2b10      	cmp	r3, #16
 8006748:	d11e      	bne.n	8006788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2211      	movs	r2, #17
 8006750:	4252      	negs	r2, r2
 8006752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2208      	movs	r2, #8
 8006758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	23c0      	movs	r3, #192	; 0xc0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4013      	ands	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0018      	movs	r0, r3
 800676c:	f000 faac 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006770:	e007      	b.n	8006782 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 fa9f 	bl	8006cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0018      	movs	r0, r3
 800677e:	f000 faab 	bl	8006cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2201      	movs	r2, #1
 8006790:	4013      	ands	r3, r2
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10f      	bne.n	80067b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d108      	bne.n	80067b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2202      	movs	r2, #2
 80067aa:	4252      	negs	r2, r2
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fc f9e1 	bl	8002b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2280      	movs	r2, #128	; 0x80
 80067be:	4013      	ands	r3, r2
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d10f      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	4013      	ands	r3, r2
 80067ce:	2b80      	cmp	r3, #128	; 0x80
 80067d0:	d108      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2281      	movs	r2, #129	; 0x81
 80067d8:	4252      	negs	r2, r2
 80067da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 ff0a 	bl	80075f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2240      	movs	r2, #64	; 0x40
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d10f      	bne.n	8006812 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2240      	movs	r2, #64	; 0x40
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d108      	bne.n	8006812 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2241      	movs	r2, #65	; 0x41
 8006806:	4252      	negs	r2, r2
 8006808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f000 fa6b 	bl	8006ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2220      	movs	r2, #32
 800681a:	4013      	ands	r3, r2
 800681c:	2b20      	cmp	r3, #32
 800681e:	d10f      	bne.n	8006840 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	4013      	ands	r3, r2
 800682a:	2b20      	cmp	r3, #32
 800682c:	d108      	bne.n	8006840 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2221      	movs	r2, #33	; 0x21
 8006834:	4252      	negs	r2, r2
 8006836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	0018      	movs	r0, r3
 800683c:	f000 fed4 	bl	80075e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	46c0      	nop			; (mov r8, r8)
 8006842:	46bd      	mov	sp, r7
 8006844:	b002      	add	sp, #8
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006854:	2317      	movs	r3, #23
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	223c      	movs	r2, #60	; 0x3c
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_TIM_OC_ConfigChannel+0x22>
 8006866:	2302      	movs	r3, #2
 8006868:	e042      	b.n	80068f0 <HAL_TIM_OC_ConfigChannel+0xa8>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	223c      	movs	r2, #60	; 0x3c
 800686e:	2101      	movs	r1, #1
 8006870:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d027      	beq.n	80068c8 <HAL_TIM_OC_ConfigChannel+0x80>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b0c      	cmp	r3, #12
 800687c:	d82c      	bhi.n	80068d8 <HAL_TIM_OC_ConfigChannel+0x90>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d019      	beq.n	80068b8 <HAL_TIM_OC_ConfigChannel+0x70>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d826      	bhi.n	80068d8 <HAL_TIM_OC_ConfigChannel+0x90>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_TIM_OC_ConfigChannel+0x50>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b04      	cmp	r3, #4
 8006894:	d008      	beq.n	80068a8 <HAL_TIM_OC_ConfigChannel+0x60>
 8006896:	e01f      	b.n	80068d8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	0011      	movs	r1, r2
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 fa9f 	bl	8006de4 <TIM_OC1_SetConfig>
      break;
 80068a6:	e01c      	b.n	80068e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	0011      	movs	r1, r2
 80068b0:	0018      	movs	r0, r3
 80068b2:	f000 fb1f 	bl	8006ef4 <TIM_OC2_SetConfig>
      break;
 80068b6:	e014      	b.n	80068e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	0011      	movs	r1, r2
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 fb9b 	bl	8006ffc <TIM_OC3_SetConfig>
      break;
 80068c6:	e00c      	b.n	80068e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fc19 	bl	8007108 <TIM_OC4_SetConfig>
      break;
 80068d6:	e004      	b.n	80068e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80068d8:	2317      	movs	r3, #23
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	2201      	movs	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
      break;
 80068e0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	223c      	movs	r2, #60	; 0x3c
 80068e6:	2100      	movs	r1, #0
 80068e8:	5499      	strb	r1, [r3, r2]

  return status;
 80068ea:	2317      	movs	r3, #23
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	781b      	ldrb	r3, [r3, #0]
}
 80068f0:	0018      	movs	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b006      	add	sp, #24
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006904:	2317      	movs	r3, #23
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	223c      	movs	r2, #60	; 0x3c
 8006910:	5c9b      	ldrb	r3, [r3, r2]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006916:	2302      	movs	r3, #2
 8006918:	e0ad      	b.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	223c      	movs	r2, #60	; 0x3c
 800691e:	2101      	movs	r1, #1
 8006920:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b0c      	cmp	r3, #12
 8006926:	d100      	bne.n	800692a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006928:	e076      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x120>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b0c      	cmp	r3, #12
 800692e:	d900      	bls.n	8006932 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006930:	e095      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d04e      	beq.n	80069d6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b08      	cmp	r3, #8
 800693c:	d900      	bls.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x48>
 800693e:	e08e      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_PWM_ConfigChannel+0x56>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b04      	cmp	r3, #4
 800694a:	d021      	beq.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x98>
 800694c:	e087      	b.n	8006a5e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	0011      	movs	r1, r2
 8006956:	0018      	movs	r0, r3
 8006958:	f000 fa44 	bl	8006de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2108      	movs	r1, #8
 8006968:	430a      	orrs	r2, r1
 800696a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2104      	movs	r1, #4
 8006978:	438a      	bics	r2, r1
 800697a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6999      	ldr	r1, [r3, #24]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	619a      	str	r2, [r3, #24]
      break;
 800698e:	e06b      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	0011      	movs	r1, r2
 8006998:	0018      	movs	r0, r3
 800699a:	f000 faab 	bl	8006ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2180      	movs	r1, #128	; 0x80
 80069aa:	0109      	lsls	r1, r1, #4
 80069ac:	430a      	orrs	r2, r1
 80069ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4931      	ldr	r1, [pc, #196]	; (8006a80 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80069bc:	400a      	ands	r2, r1
 80069be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6999      	ldr	r1, [r3, #24]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	021a      	lsls	r2, r3, #8
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	619a      	str	r2, [r3, #24]
      break;
 80069d4:	e048      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	0011      	movs	r1, r2
 80069de:	0018      	movs	r0, r3
 80069e0:	f000 fb0c 	bl	8006ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69da      	ldr	r2, [r3, #28]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2108      	movs	r1, #8
 80069f0:	430a      	orrs	r2, r1
 80069f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2104      	movs	r1, #4
 8006a00:	438a      	bics	r2, r1
 8006a02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69d9      	ldr	r1, [r3, #28]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	61da      	str	r2, [r3, #28]
      break;
 8006a16:	e027      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	0011      	movs	r1, r2
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 fb71 	bl	8007108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2180      	movs	r1, #128	; 0x80
 8006a32:	0109      	lsls	r1, r1, #4
 8006a34:	430a      	orrs	r2, r1
 8006a36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	490f      	ldr	r1, [pc, #60]	; (8006a80 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006a44:	400a      	ands	r2, r1
 8006a46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69d9      	ldr	r1, [r3, #28]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	61da      	str	r2, [r3, #28]
      break;
 8006a5c:	e004      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006a5e:	2317      	movs	r3, #23
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	2201      	movs	r2, #1
 8006a64:	701a      	strb	r2, [r3, #0]
      break;
 8006a66:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	223c      	movs	r2, #60	; 0x3c
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	5499      	strb	r1, [r3, r2]

  return status;
 8006a70:	2317      	movs	r3, #23
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	781b      	ldrb	r3, [r3, #0]
}
 8006a76:	0018      	movs	r0, r3
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b006      	add	sp, #24
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	fffffbff 	.word	0xfffffbff

08006a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	230f      	movs	r3, #15
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	223c      	movs	r2, #60	; 0x3c
 8006a9a:	5c9b      	ldrb	r3, [r3, r2]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x20>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0bc      	b.n	8006c1e <HAL_TIM_ConfigClockSource+0x19a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	223c      	movs	r2, #60	; 0x3c
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	223d      	movs	r2, #61	; 0x3d
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2277      	movs	r2, #119	; 0x77
 8006ac0:	4393      	bics	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a58      	ldr	r2, [pc, #352]	; (8006c28 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	0192      	lsls	r2, r2, #6
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d040      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0xde>
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	0192      	lsls	r2, r2, #6
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d900      	bls.n	8006aea <HAL_TIM_ConfigClockSource+0x66>
 8006ae8:	e088      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006aea:	2280      	movs	r2, #128	; 0x80
 8006aec:	0152      	lsls	r2, r2, #5
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d100      	bne.n	8006af4 <HAL_TIM_ConfigClockSource+0x70>
 8006af2:	e088      	b.n	8006c06 <HAL_TIM_ConfigClockSource+0x182>
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	0152      	lsls	r2, r2, #5
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d900      	bls.n	8006afe <HAL_TIM_ConfigClockSource+0x7a>
 8006afc:	e07e      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006afe:	2b70      	cmp	r3, #112	; 0x70
 8006b00:	d018      	beq.n	8006b34 <HAL_TIM_ConfigClockSource+0xb0>
 8006b02:	d900      	bls.n	8006b06 <HAL_TIM_ConfigClockSource+0x82>
 8006b04:	e07a      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006b06:	2b60      	cmp	r3, #96	; 0x60
 8006b08:	d04f      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x126>
 8006b0a:	d900      	bls.n	8006b0e <HAL_TIM_ConfigClockSource+0x8a>
 8006b0c:	e076      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006b0e:	2b50      	cmp	r3, #80	; 0x50
 8006b10:	d03b      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x106>
 8006b12:	d900      	bls.n	8006b16 <HAL_TIM_ConfigClockSource+0x92>
 8006b14:	e072      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d057      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x146>
 8006b1a:	d900      	bls.n	8006b1e <HAL_TIM_ConfigClockSource+0x9a>
 8006b1c:	e06e      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006b1e:	2b30      	cmp	r3, #48	; 0x30
 8006b20:	d063      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x166>
 8006b22:	d86b      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d060      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x166>
 8006b28:	d868      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d05d      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x166>
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d05b      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x166>
 8006b32:	e063      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6899      	ldr	r1, [r3, #8]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f000 fc56 	bl	80073f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2277      	movs	r2, #119	; 0x77
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	609a      	str	r2, [r3, #8]
      break;
 8006b60:	e052      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6899      	ldr	r1, [r3, #8]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f000 fc3f 	bl	80073f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	01c9      	lsls	r1, r1, #7
 8006b84:	430a      	orrs	r2, r1
 8006b86:	609a      	str	r2, [r3, #8]
      break;
 8006b88:	e03e      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	001a      	movs	r2, r3
 8006b98:	f000 fbb2 	bl	8007300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2150      	movs	r1, #80	; 0x50
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f000 fc0c 	bl	80073c0 <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e02e      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	001a      	movs	r2, r3
 8006bb8:	f000 fbd0 	bl	800735c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2160      	movs	r1, #96	; 0x60
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f000 fbfc 	bl	80073c0 <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e01e      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6859      	ldr	r1, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	001a      	movs	r2, r3
 8006bd8:	f000 fb92 	bl	8007300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2140      	movs	r1, #64	; 0x40
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 fbec 	bl	80073c0 <TIM_ITRx_SetConfig>
      break;
 8006be8:	e00e      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	0010      	movs	r0, r2
 8006bf6:	f000 fbe3 	bl	80073c0 <TIM_ITRx_SetConfig>
      break;
 8006bfa:	e005      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006bfc:	230f      	movs	r3, #15
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
      break;
 8006c04:	e000      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006c06:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	223d      	movs	r2, #61	; 0x3d
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	223c      	movs	r2, #60	; 0x3c
 8006c14:	2100      	movs	r1, #0
 8006c16:	5499      	strb	r1, [r3, r2]

  return status;
 8006c18:	230f      	movs	r3, #15
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	781b      	ldrb	r3, [r3, #0]
}
 8006c1e:	0018      	movs	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b004      	add	sp, #16
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	ffff00ff 	.word	0xffff00ff

08006c2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	223c      	movs	r2, #60	; 0x3c
 8006c3a:	5c9b      	ldrb	r3, [r3, r2]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e032      	b.n	8006caa <HAL_TIM_SlaveConfigSynchro+0x7e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	223c      	movs	r2, #60	; 0x3c
 8006c48:	2101      	movs	r1, #1
 8006c4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	223d      	movs	r2, #61	; 0x3d
 8006c50:	2102      	movs	r1, #2
 8006c52:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	0011      	movs	r1, r2
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f000 fabe 	bl	80071dc <TIM_SlaveTimer_SetConfig>
 8006c60:	1e03      	subs	r3, r0, #0
 8006c62:	d009      	beq.n	8006c78 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	223d      	movs	r2, #61	; 0x3d
 8006c68:	2101      	movs	r1, #1
 8006c6a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	223c      	movs	r2, #60	; 0x3c
 8006c70:	2100      	movs	r1, #0
 8006c72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e018      	b.n	8006caa <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2140      	movs	r1, #64	; 0x40
 8006c84:	438a      	bics	r2, r1
 8006c86:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8006c94:	400a      	ands	r2, r1
 8006c96:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	223d      	movs	r2, #61	; 0x3d
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	223c      	movs	r2, #60	; 0x3c
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b002      	add	sp, #8
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	ffffbfff 	.word	0xffffbfff

08006cb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b002      	add	sp, #8
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	46c0      	nop			; (mov r8, r8)
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b002      	add	sp, #8
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b002      	add	sp, #8
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2f      	ldr	r2, [pc, #188]	; (8006dc8 <TIM_Base_SetConfig+0xd0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_Base_SetConfig+0x20>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <TIM_Base_SetConfig+0xd4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d108      	bne.n	8006d2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2270      	movs	r2, #112	; 0x70
 8006d1c:	4393      	bics	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a26      	ldr	r2, [pc, #152]	; (8006dc8 <TIM_Base_SetConfig+0xd0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <TIM_Base_SetConfig+0xd4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00f      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <TIM_Base_SetConfig+0xd8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a23      	ldr	r2, [pc, #140]	; (8006dd4 <TIM_Base_SetConfig+0xdc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <TIM_Base_SetConfig+0xe0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <TIM_Base_SetConfig+0xe4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d108      	bne.n	8006d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <TIM_Base_SetConfig+0xe8>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2280      	movs	r2, #128	; 0x80
 8006d70:	4393      	bics	r3, r2
 8006d72:	001a      	movs	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a0c      	ldr	r2, [pc, #48]	; (8006dc8 <TIM_Base_SetConfig+0xd0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00b      	beq.n	8006db2 <TIM_Base_SetConfig+0xba>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <TIM_Base_SetConfig+0xdc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <TIM_Base_SetConfig+0xba>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <TIM_Base_SetConfig+0xe0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_Base_SetConfig+0xba>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a0b      	ldr	r2, [pc, #44]	; (8006ddc <TIM_Base_SetConfig+0xe4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d103      	bne.n	8006dba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	615a      	str	r2, [r3, #20]
}
 8006dc0:	46c0      	nop			; (mov r8, r8)
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b004      	add	sp, #16
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40002000 	.word	0x40002000
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800
 8006de0:	fffffcff 	.word	0xfffffcff

08006de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	2201      	movs	r2, #1
 8006df4:	4393      	bics	r3, r2
 8006df6:	001a      	movs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2270      	movs	r2, #112	; 0x70
 8006e12:	4393      	bics	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	4393      	bics	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	4393      	bics	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a27      	ldr	r2, [pc, #156]	; (8006edc <TIM_OC1_SetConfig+0xf8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00b      	beq.n	8006e5a <TIM_OC1_SetConfig+0x76>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <TIM_OC1_SetConfig+0xfc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d007      	beq.n	8006e5a <TIM_OC1_SetConfig+0x76>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <TIM_OC1_SetConfig+0x100>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_OC1_SetConfig+0x76>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <TIM_OC1_SetConfig+0x104>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d10c      	bne.n	8006e74 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	4393      	bics	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	4393      	bics	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a19      	ldr	r2, [pc, #100]	; (8006edc <TIM_OC1_SetConfig+0xf8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_OC1_SetConfig+0xb0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <TIM_OC1_SetConfig+0xfc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC1_SetConfig+0xb0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC1_SetConfig+0x100>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC1_SetConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <TIM_OC1_SetConfig+0x104>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d111      	bne.n	8006eb8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <TIM_OC1_SetConfig+0x108>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4a14      	ldr	r2, [pc, #80]	; (8006ef0 <TIM_OC1_SetConfig+0x10c>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b006      	add	sp, #24
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800
 8006eec:	fffffeff 	.word	0xfffffeff
 8006ef0:	fffffdff 	.word	0xfffffdff

08006ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	2210      	movs	r2, #16
 8006f04:	4393      	bics	r3, r2
 8006f06:	001a      	movs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <TIM_OC2_SetConfig+0xe8>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4a2d      	ldr	r2, [pc, #180]	; (8006fe0 <TIM_OC2_SetConfig+0xec>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	4393      	bics	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a24      	ldr	r2, [pc, #144]	; (8006fe4 <TIM_OC2_SetConfig+0xf0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10d      	bne.n	8006f72 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	4393      	bics	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2240      	movs	r2, #64	; 0x40
 8006f6e:	4393      	bics	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <TIM_OC2_SetConfig+0xf0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00b      	beq.n	8006f92 <TIM_OC2_SetConfig+0x9e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1a      	ldr	r2, [pc, #104]	; (8006fe8 <TIM_OC2_SetConfig+0xf4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d007      	beq.n	8006f92 <TIM_OC2_SetConfig+0x9e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <TIM_OC2_SetConfig+0xf8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d003      	beq.n	8006f92 <TIM_OC2_SetConfig+0x9e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <TIM_OC2_SetConfig+0xfc>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d113      	bne.n	8006fba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <TIM_OC2_SetConfig+0x100>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <TIM_OC2_SetConfig+0x104>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b006      	add	sp, #24
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	ffff8fff 	.word	0xffff8fff
 8006fe0:	fffffcff 	.word	0xfffffcff
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800
 8006ff4:	fffffbff 	.word	0xfffffbff
 8006ff8:	fffff7ff 	.word	0xfffff7ff

08006ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	4a35      	ldr	r2, [pc, #212]	; (80070e0 <TIM_OC3_SetConfig+0xe4>)
 800700c:	401a      	ands	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2270      	movs	r2, #112	; 0x70
 8007028:	4393      	bics	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2203      	movs	r2, #3
 8007030:	4393      	bics	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4a28      	ldr	r2, [pc, #160]	; (80070e4 <TIM_OC3_SetConfig+0xe8>)
 8007042:	4013      	ands	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <TIM_OC3_SetConfig+0xec>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d10d      	bne.n	8007076 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	4a23      	ldr	r2, [pc, #140]	; (80070ec <TIM_OC3_SetConfig+0xf0>)
 800705e:	4013      	ands	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <TIM_OC3_SetConfig+0xf4>)
 8007072:	4013      	ands	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <TIM_OC3_SetConfig+0xec>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00b      	beq.n	8007096 <TIM_OC3_SetConfig+0x9a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <TIM_OC3_SetConfig+0xf8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d007      	beq.n	8007096 <TIM_OC3_SetConfig+0x9a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <TIM_OC3_SetConfig+0xfc>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_OC3_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <TIM_OC3_SetConfig+0x100>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d113      	bne.n	80070be <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4a19      	ldr	r2, [pc, #100]	; (8007100 <TIM_OC3_SetConfig+0x104>)
 800709a:	4013      	ands	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4a18      	ldr	r2, [pc, #96]	; (8007104 <TIM_OC3_SetConfig+0x108>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	46c0      	nop			; (mov r8, r8)
 80070da:	46bd      	mov	sp, r7
 80070dc:	b006      	add	sp, #24
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	fffffeff 	.word	0xfffffeff
 80070e4:	fffffdff 	.word	0xfffffdff
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	fffff7ff 	.word	0xfffff7ff
 80070f0:	fffffbff 	.word	0xfffffbff
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800
 8007100:	ffffefff 	.word	0xffffefff
 8007104:	ffffdfff 	.word	0xffffdfff

08007108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	4a28      	ldr	r2, [pc, #160]	; (80071b8 <TIM_OC4_SetConfig+0xb0>)
 8007118:	401a      	ands	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a22      	ldr	r2, [pc, #136]	; (80071bc <TIM_OC4_SetConfig+0xb4>)
 8007134:	4013      	ands	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a21      	ldr	r2, [pc, #132]	; (80071c0 <TIM_OC4_SetConfig+0xb8>)
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4a1d      	ldr	r2, [pc, #116]	; (80071c4 <TIM_OC4_SetConfig+0xbc>)
 8007150:	4013      	ands	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	031b      	lsls	r3, r3, #12
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <TIM_OC4_SetConfig+0xc0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_OC4_SetConfig+0x78>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <TIM_OC4_SetConfig+0xc4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_OC4_SetConfig+0x78>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <TIM_OC4_SetConfig+0xc8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_OC4_SetConfig+0x78>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <TIM_OC4_SetConfig+0xcc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d109      	bne.n	8007194 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <TIM_OC4_SetConfig+0xd0>)
 8007184:	4013      	ands	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	019b      	lsls	r3, r3, #6
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b006      	add	sp, #24
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	ffffefff 	.word	0xffffefff
 80071bc:	ffff8fff 	.word	0xffff8fff
 80071c0:	fffffcff 	.word	0xfffffcff
 80071c4:	ffffdfff 	.word	0xffffdfff
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400
 80071d4:	40014800 	.word	0x40014800
 80071d8:	ffffbfff 	.word	0xffffbfff

080071dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2317      	movs	r3, #23
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2270      	movs	r2, #112	; 0x70
 80071fa:	4393      	bics	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2207      	movs	r2, #7
 800720c:	4393      	bics	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b70      	cmp	r3, #112	; 0x70
 8007228:	d015      	beq.n	8007256 <TIM_SlaveTimer_SetConfig+0x7a>
 800722a:	d900      	bls.n	800722e <TIM_SlaveTimer_SetConfig+0x52>
 800722c:	e05b      	b.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
 800722e:	2b60      	cmp	r3, #96	; 0x60
 8007230:	d04f      	beq.n	80072d2 <TIM_SlaveTimer_SetConfig+0xf6>
 8007232:	d858      	bhi.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
 8007234:	2b50      	cmp	r3, #80	; 0x50
 8007236:	d042      	beq.n	80072be <TIM_SlaveTimer_SetConfig+0xe2>
 8007238:	d855      	bhi.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d016      	beq.n	800726c <TIM_SlaveTimer_SetConfig+0x90>
 800723e:	d852      	bhi.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
 8007240:	2b30      	cmp	r3, #48	; 0x30
 8007242:	d055      	beq.n	80072f0 <TIM_SlaveTimer_SetConfig+0x114>
 8007244:	d84f      	bhi.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d052      	beq.n	80072f0 <TIM_SlaveTimer_SetConfig+0x114>
 800724a:	d84c      	bhi.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d04f      	beq.n	80072f0 <TIM_SlaveTimer_SetConfig+0x114>
 8007250:	2b10      	cmp	r3, #16
 8007252:	d04d      	beq.n	80072f0 <TIM_SlaveTimer_SetConfig+0x114>
 8007254:	e047      	b.n	80072e6 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68d9      	ldr	r1, [r3, #12]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f000 f8c5 	bl	80073f4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800726a:	e042      	b.n	80072f2 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b05      	cmp	r3, #5
 8007272:	d101      	bne.n	8007278 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e03f      	b.n	80072f8 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6a1a      	ldr	r2, [r3, #32]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2101      	movs	r1, #1
 800728c:	438a      	bics	r2, r1
 800728e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	22f0      	movs	r2, #240	; 0xf0
 800729c:	4393      	bics	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	621a      	str	r2, [r3, #32]
      break;
 80072bc:	e019      	b.n	80072f2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6899      	ldr	r1, [r3, #8]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	001a      	movs	r2, r3
 80072cc:	f000 f818 	bl	8007300 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072d0:	e00f      	b.n	80072f2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6899      	ldr	r1, [r3, #8]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	001a      	movs	r2, r3
 80072e0:	f000 f83c 	bl	800735c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072e4:	e005      	b.n	80072f2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80072e6:	2317      	movs	r3, #23
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
      break;
 80072ee:	e000      	b.n	80072f2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80072f0:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80072f2:	2317      	movs	r3, #23
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	781b      	ldrb	r3, [r3, #0]
}
 80072f8:	0018      	movs	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	b006      	add	sp, #24
 80072fe:	bd80      	pop	{r7, pc}

08007300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	2201      	movs	r2, #1
 8007318:	4393      	bics	r3, r2
 800731a:	001a      	movs	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	22f0      	movs	r2, #240	; 0xf0
 800732a:	4393      	bics	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	220a      	movs	r2, #10
 800733c:	4393      	bics	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	46c0      	nop			; (mov r8, r8)
 8007356:	46bd      	mov	sp, r7
 8007358:	b006      	add	sp, #24
 800735a:	bd80      	pop	{r7, pc}

0800735c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	2210      	movs	r2, #16
 800736e:	4393      	bics	r3, r2
 8007370:	001a      	movs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <TIM_TI2_ConfigInputStage+0x60>)
 8007386:	4013      	ands	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	031b      	lsls	r3, r3, #12
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	22a0      	movs	r2, #160	; 0xa0
 8007398:	4393      	bics	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	621a      	str	r2, [r3, #32]
}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b006      	add	sp, #24
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	ffff0fff 	.word	0xffff0fff

080073c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2270      	movs	r2, #112	; 0x70
 80073d4:	4393      	bics	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	2207      	movs	r2, #7
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b004      	add	sp, #16
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4a09      	ldr	r2, [pc, #36]	; (8007430 <TIM_ETR_SetConfig+0x3c>)
 800740c:	4013      	ands	r3, r2
 800740e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	021a      	lsls	r2, r3, #8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	431a      	orrs	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4313      	orrs	r3, r2
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	609a      	str	r2, [r3, #8]
}
 8007428:	46c0      	nop			; (mov r8, r8)
 800742a:	46bd      	mov	sp, r7
 800742c:	b006      	add	sp, #24
 800742e:	bd80      	pop	{r7, pc}
 8007430:	ffff00ff 	.word	0xffff00ff

08007434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	221f      	movs	r2, #31
 8007444:	4013      	ands	r3, r2
 8007446:	2201      	movs	r2, #1
 8007448:	409a      	lsls	r2, r3
 800744a:	0013      	movs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	43d2      	mvns	r2, r2
 8007456:	401a      	ands	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	211f      	movs	r1, #31
 8007464:	400b      	ands	r3, r1
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	4099      	lsls	r1, r3
 800746a:	000b      	movs	r3, r1
 800746c:	431a      	orrs	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	46bd      	mov	sp, r7
 8007476:	b006      	add	sp, #24
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	223c      	movs	r2, #60	; 0x3c
 800748a:	5c9b      	ldrb	r3, [r3, r2]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007490:	2302      	movs	r3, #2
 8007492:	e041      	b.n	8007518 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	223c      	movs	r2, #60	; 0x3c
 8007498:	2101      	movs	r1, #1
 800749a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	223d      	movs	r2, #61	; 0x3d
 80074a0:	2102      	movs	r1, #2
 80074a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2270      	movs	r2, #112	; 0x70
 80074b8:	4393      	bics	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a13      	ldr	r2, [pc, #76]	; (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a10      	ldr	r2, [pc, #64]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d10c      	bne.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2280      	movs	r2, #128	; 0x80
 80074f0:	4393      	bics	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	223d      	movs	r2, #61	; 0x3d
 800750a:	2101      	movs	r1, #1
 800750c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	223c      	movs	r2, #60	; 0x3c
 8007512:	2100      	movs	r1, #0
 8007514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	b004      	add	sp, #16
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40000400 	.word	0x40000400
 8007528:	40014000 	.word	0x40014000

0800752c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	223c      	movs	r2, #60	; 0x3c
 800753e:	5c9b      	ldrb	r3, [r3, r2]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007544:	2302      	movs	r3, #2
 8007546:	e03e      	b.n	80075c6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	223c      	movs	r2, #60	; 0x3c
 800754c:	2101      	movs	r1, #1
 800754e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	22ff      	movs	r2, #255	; 0xff
 8007554:	4393      	bics	r3, r2
 8007556:	001a      	movs	r2, r3
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007564:	401a      	ands	r2, r3
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007572:	401a      	ands	r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007580:	401a      	ands	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4a13      	ldr	r2, [pc, #76]	; (80075dc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800758e:	401a      	ands	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800759c:	401a      	ands	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4a0e      	ldr	r2, [pc, #56]	; (80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80075aa:	401a      	ands	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	223c      	movs	r2, #60	; 0x3c
 80075c0:	2100      	movs	r1, #0
 80075c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	0018      	movs	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b004      	add	sp, #16
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	fffffcff 	.word	0xfffffcff
 80075d4:	fffffbff 	.word	0xfffffbff
 80075d8:	fffff7ff 	.word	0xfffff7ff
 80075dc:	ffffefff 	.word	0xffffefff
 80075e0:	ffffdfff 	.word	0xffffdfff
 80075e4:	ffffbfff 	.word	0xffffbfff

080075e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e044      	b.n	80076a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2278      	movs	r2, #120	; 0x78
 8007626:	2100      	movs	r1, #0
 8007628:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0018      	movs	r0, r3
 800762e:	f7fc fd41 	bl	80040b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2224      	movs	r2, #36	; 0x24
 8007636:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2101      	movs	r1, #1
 8007644:	438a      	bics	r2, r1
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	0018      	movs	r0, r3
 800764c:	f000 fc0c 	bl	8007e68 <UART_SetConfig>
 8007650:	0003      	movs	r3, r0
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e024      	b.n	80076a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	0018      	movs	r0, r3
 8007666:	f000 fd3f 	bl	80080e8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	490d      	ldr	r1, [pc, #52]	; (80076ac <HAL_UART_Init+0xa4>)
 8007676:	400a      	ands	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2108      	movs	r1, #8
 8007686:	438a      	bics	r2, r1
 8007688:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2101      	movs	r1, #1
 8007696:	430a      	orrs	r2, r1
 8007698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	0018      	movs	r0, r3
 800769e:	f000 fdd7 	bl	8008250 <UART_CheckIdleState>
 80076a2:	0003      	movs	r3, r0
}
 80076a4:	0018      	movs	r0, r3
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b002      	add	sp, #8
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	fffff7ff 	.word	0xfffff7ff

080076b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	1dbb      	adds	r3, r7, #6
 80076be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d000      	beq.n	80076ca <HAL_UART_Transmit+0x1a>
 80076c8:	e08d      	b.n	80077e6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_UART_Transmit+0x28>
 80076d0:	1dbb      	adds	r3, r7, #6
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e085      	b.n	80077e8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	015b      	lsls	r3, r3, #5
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d109      	bne.n	80076fc <HAL_UART_Transmit+0x4c>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d105      	bne.n	80076fc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2201      	movs	r2, #1
 80076f4:	4013      	ands	r3, r2
 80076f6:	d001      	beq.n	80076fc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e075      	b.n	80077e8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2284      	movs	r2, #132	; 0x84
 8007700:	2100      	movs	r1, #0
 8007702:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2221      	movs	r2, #33	; 0x21
 8007708:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770a:	f7fc fdf9 	bl	8004300 <HAL_GetTick>
 800770e:	0003      	movs	r3, r0
 8007710:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1dba      	adds	r2, r7, #6
 8007716:	2150      	movs	r1, #80	; 0x50
 8007718:	8812      	ldrh	r2, [r2, #0]
 800771a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	1dba      	adds	r2, r7, #6
 8007720:	2152      	movs	r1, #82	; 0x52
 8007722:	8812      	ldrh	r2, [r2, #0]
 8007724:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	2380      	movs	r3, #128	; 0x80
 800772c:	015b      	lsls	r3, r3, #5
 800772e:	429a      	cmp	r2, r3
 8007730:	d108      	bne.n	8007744 <HAL_UART_Transmit+0x94>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e003      	b.n	800774c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800774c:	e030      	b.n	80077b0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	0013      	movs	r3, r2
 8007758:	2200      	movs	r2, #0
 800775a:	2180      	movs	r1, #128	; 0x80
 800775c:	f000 fe20 	bl	80083a0 <UART_WaitOnFlagUntilTimeout>
 8007760:	1e03      	subs	r3, r0, #0
 8007762:	d004      	beq.n	800776e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2220      	movs	r2, #32
 8007768:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e03c      	b.n	80077e8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10b      	bne.n	800778c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	881a      	ldrh	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	05d2      	lsls	r2, r2, #23
 800777e:	0dd2      	lsrs	r2, r2, #23
 8007780:	b292      	uxth	r2, r2
 8007782:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	3302      	adds	r3, #2
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	e008      	b.n	800779e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	b292      	uxth	r2, r2
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	3301      	adds	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2252      	movs	r2, #82	; 0x52
 80077a2:	5a9b      	ldrh	r3, [r3, r2]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b299      	uxth	r1, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2252      	movs	r2, #82	; 0x52
 80077ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2252      	movs	r2, #82	; 0x52
 80077b4:	5a9b      	ldrh	r3, [r3, r2]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1c8      	bne.n	800774e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	0013      	movs	r3, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	2140      	movs	r1, #64	; 0x40
 80077ca:	f000 fde9 	bl	80083a0 <UART_WaitOnFlagUntilTimeout>
 80077ce:	1e03      	subs	r3, r0, #0
 80077d0:	d004      	beq.n	80077dc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e005      	b.n	80077e8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e000      	b.n	80077e8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b008      	add	sp, #32
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	1dbb      	adds	r3, r7, #6
 80077fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2280      	movs	r2, #128	; 0x80
 8007802:	589b      	ldr	r3, [r3, r2]
 8007804:	2b20      	cmp	r3, #32
 8007806:	d145      	bne.n	8007894 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_UART_Receive_IT+0x26>
 800780e:	1dbb      	adds	r3, r7, #6
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e03d      	b.n	8007896 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	2380      	movs	r3, #128	; 0x80
 8007820:	015b      	lsls	r3, r3, #5
 8007822:	429a      	cmp	r2, r3
 8007824:	d109      	bne.n	800783a <HAL_UART_Receive_IT+0x4a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2201      	movs	r2, #1
 8007832:	4013      	ands	r3, r2
 8007834:	d001      	beq.n	800783a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e02d      	b.n	8007896 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	2380      	movs	r3, #128	; 0x80
 8007848:	041b      	lsls	r3, r3, #16
 800784a:	4013      	ands	r3, r2
 800784c:	d019      	beq.n	8007882 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800784e:	f3ef 8310 	mrs	r3, PRIMASK
 8007852:	613b      	str	r3, [r7, #16]
  return(result);
 8007854:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	2301      	movs	r3, #1
 800785a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f383 8810 	msr	PRIMASK, r3
}
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2180      	movs	r1, #128	; 0x80
 8007870:	04c9      	lsls	r1, r1, #19
 8007872:	430a      	orrs	r2, r1
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f383 8810 	msr	PRIMASK, r3
}
 8007880:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007882:	1dbb      	adds	r3, r7, #6
 8007884:	881a      	ldrh	r2, [r3, #0]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 fdf2 	bl	8008474 <UART_Start_Receive_IT>
 8007890:	0003      	movs	r3, r0
 8007892:	e000      	b.n	8007896 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007894:	2302      	movs	r3, #2
  }
}
 8007896:	0018      	movs	r0, r3
 8007898:	46bd      	mov	sp, r7
 800789a:	b008      	add	sp, #32
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078a0:	b590      	push	{r4, r7, lr}
 80078a2:	b0ab      	sub	sp, #172	; 0xac
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	22a4      	movs	r2, #164	; 0xa4
 80078b0:	18b9      	adds	r1, r7, r2
 80078b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	20a0      	movs	r0, #160	; 0xa0
 80078bc:	1839      	adds	r1, r7, r0
 80078be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	219c      	movs	r1, #156	; 0x9c
 80078c8:	1879      	adds	r1, r7, r1
 80078ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078cc:	0011      	movs	r1, r2
 80078ce:	18bb      	adds	r3, r7, r2
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a99      	ldr	r2, [pc, #612]	; (8007b38 <HAL_UART_IRQHandler+0x298>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	2298      	movs	r2, #152	; 0x98
 80078d8:	18bc      	adds	r4, r7, r2
 80078da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80078dc:	18bb      	adds	r3, r7, r2
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d114      	bne.n	800790e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078e4:	187b      	adds	r3, r7, r1
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2220      	movs	r2, #32
 80078ea:	4013      	ands	r3, r2
 80078ec:	d00f      	beq.n	800790e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078ee:	183b      	adds	r3, r7, r0
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2220      	movs	r2, #32
 80078f4:	4013      	ands	r3, r2
 80078f6:	d00a      	beq.n	800790e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d100      	bne.n	8007902 <HAL_UART_IRQHandler+0x62>
 8007900:	e286      	b.n	8007e10 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	0010      	movs	r0, r2
 800790a:	4798      	blx	r3
      }
      return;
 800790c:	e280      	b.n	8007e10 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800790e:	2398      	movs	r3, #152	; 0x98
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d100      	bne.n	800791a <HAL_UART_IRQHandler+0x7a>
 8007918:	e114      	b.n	8007b44 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800791a:	239c      	movs	r3, #156	; 0x9c
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	4013      	ands	r3, r2
 8007924:	d106      	bne.n	8007934 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007926:	23a0      	movs	r3, #160	; 0xa0
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a83      	ldr	r2, [pc, #524]	; (8007b3c <HAL_UART_IRQHandler+0x29c>)
 800792e:	4013      	ands	r3, r2
 8007930:	d100      	bne.n	8007934 <HAL_UART_IRQHandler+0x94>
 8007932:	e107      	b.n	8007b44 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007934:	23a4      	movs	r3, #164	; 0xa4
 8007936:	18fb      	adds	r3, r7, r3
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2201      	movs	r2, #1
 800793c:	4013      	ands	r3, r2
 800793e:	d012      	beq.n	8007966 <HAL_UART_IRQHandler+0xc6>
 8007940:	23a0      	movs	r3, #160	; 0xa0
 8007942:	18fb      	adds	r3, r7, r3
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	2380      	movs	r3, #128	; 0x80
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4013      	ands	r3, r2
 800794c:	d00b      	beq.n	8007966 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2201      	movs	r2, #1
 8007954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2284      	movs	r2, #132	; 0x84
 800795a:	589b      	ldr	r3, [r3, r2]
 800795c:	2201      	movs	r2, #1
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2184      	movs	r1, #132	; 0x84
 8007964:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007966:	23a4      	movs	r3, #164	; 0xa4
 8007968:	18fb      	adds	r3, r7, r3
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2202      	movs	r2, #2
 800796e:	4013      	ands	r3, r2
 8007970:	d011      	beq.n	8007996 <HAL_UART_IRQHandler+0xf6>
 8007972:	239c      	movs	r3, #156	; 0x9c
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2201      	movs	r2, #1
 800797a:	4013      	ands	r3, r2
 800797c:	d00b      	beq.n	8007996 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2202      	movs	r2, #2
 8007984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2284      	movs	r2, #132	; 0x84
 800798a:	589b      	ldr	r3, [r3, r2]
 800798c:	2204      	movs	r2, #4
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2184      	movs	r1, #132	; 0x84
 8007994:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007996:	23a4      	movs	r3, #164	; 0xa4
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2204      	movs	r2, #4
 800799e:	4013      	ands	r3, r2
 80079a0:	d011      	beq.n	80079c6 <HAL_UART_IRQHandler+0x126>
 80079a2:	239c      	movs	r3, #156	; 0x9c
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2201      	movs	r2, #1
 80079aa:	4013      	ands	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2204      	movs	r2, #4
 80079b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2284      	movs	r2, #132	; 0x84
 80079ba:	589b      	ldr	r3, [r3, r2]
 80079bc:	2202      	movs	r2, #2
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2184      	movs	r1, #132	; 0x84
 80079c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079c6:	23a4      	movs	r3, #164	; 0xa4
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2208      	movs	r2, #8
 80079ce:	4013      	ands	r3, r2
 80079d0:	d017      	beq.n	8007a02 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079d2:	23a0      	movs	r3, #160	; 0xa0
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2220      	movs	r2, #32
 80079da:	4013      	ands	r3, r2
 80079dc:	d105      	bne.n	80079ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079de:	239c      	movs	r3, #156	; 0x9c
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079e8:	d00b      	beq.n	8007a02 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2208      	movs	r2, #8
 80079f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2284      	movs	r2, #132	; 0x84
 80079f6:	589b      	ldr	r3, [r3, r2]
 80079f8:	2208      	movs	r2, #8
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2184      	movs	r1, #132	; 0x84
 8007a00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a02:	23a4      	movs	r3, #164	; 0xa4
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	2380      	movs	r3, #128	; 0x80
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <HAL_UART_IRQHandler+0x198>
 8007a10:	23a0      	movs	r3, #160	; 0xa0
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	2380      	movs	r3, #128	; 0x80
 8007a18:	04db      	lsls	r3, r3, #19
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	d00c      	beq.n	8007a38 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2280      	movs	r2, #128	; 0x80
 8007a24:	0112      	lsls	r2, r2, #4
 8007a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2284      	movs	r2, #132	; 0x84
 8007a2c:	589b      	ldr	r3, [r3, r2]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2184      	movs	r1, #132	; 0x84
 8007a36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2284      	movs	r2, #132	; 0x84
 8007a3c:	589b      	ldr	r3, [r3, r2]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d100      	bne.n	8007a44 <HAL_UART_IRQHandler+0x1a4>
 8007a42:	e1e7      	b.n	8007e14 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a44:	23a4      	movs	r3, #164	; 0xa4
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	d00e      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a50:	23a0      	movs	r3, #160	; 0xa0
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2220      	movs	r2, #32
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d008      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	0010      	movs	r0, r2
 8007a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2284      	movs	r2, #132	; 0x84
 8007a72:	589b      	ldr	r3, [r3, r2]
 8007a74:	2194      	movs	r1, #148	; 0x94
 8007a76:	187a      	adds	r2, r7, r1
 8007a78:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2240      	movs	r2, #64	; 0x40
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d004      	beq.n	8007a92 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a88:	187b      	adds	r3, r7, r1
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2228      	movs	r2, #40	; 0x28
 8007a8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a90:	d047      	beq.n	8007b22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 fda3 	bl	80085e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	d137      	bne.n	8007b18 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab0:	2090      	movs	r0, #144	; 0x90
 8007ab2:	183a      	adds	r2, r7, r0
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007abc:	f383 8810 	msr	PRIMASK, r3
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2140      	movs	r1, #64	; 0x40
 8007ace:	438a      	bics	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	183b      	adds	r3, r7, r0
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ada:	f383 8810 	msr	PRIMASK, r3
}
 8007ade:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aec:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <HAL_UART_IRQHandler+0x2a0>)
 8007aee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af4:	0018      	movs	r0, r3
 8007af6:	f7fd f9a1 	bl	8004e3c <HAL_DMA_Abort_IT>
 8007afa:	1e03      	subs	r3, r0, #0
 8007afc:	d01a      	beq.n	8007b34 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b08:	0018      	movs	r0, r3
 8007b0a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	e012      	b.n	8007b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0018      	movs	r0, r3
 8007b12:	f000 f995 	bl	8007e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b16:	e00d      	b.n	8007b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f000 f990 	bl	8007e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	e008      	b.n	8007b34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	0018      	movs	r0, r3
 8007b26:	f000 f98b 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2284      	movs	r2, #132	; 0x84
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007b32:	e16f      	b.n	8007e14 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	46c0      	nop			; (mov r8, r8)
    return;
 8007b36:	e16d      	b.n	8007e14 <HAL_UART_IRQHandler+0x574>
 8007b38:	0000080f 	.word	0x0000080f
 8007b3c:	04000120 	.word	0x04000120
 8007b40:	080086a9 	.word	0x080086a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d000      	beq.n	8007b4e <HAL_UART_IRQHandler+0x2ae>
 8007b4c:	e139      	b.n	8007dc2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b4e:	23a4      	movs	r3, #164	; 0xa4
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2210      	movs	r2, #16
 8007b56:	4013      	ands	r3, r2
 8007b58:	d100      	bne.n	8007b5c <HAL_UART_IRQHandler+0x2bc>
 8007b5a:	e132      	b.n	8007dc2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b5c:	23a0      	movs	r3, #160	; 0xa0
 8007b5e:	18fb      	adds	r3, r7, r3
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2210      	movs	r2, #16
 8007b64:	4013      	ands	r3, r2
 8007b66:	d100      	bne.n	8007b6a <HAL_UART_IRQHandler+0x2ca>
 8007b68:	e12b      	b.n	8007dc2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2240      	movs	r2, #64	; 0x40
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	d000      	beq.n	8007b82 <HAL_UART_IRQHandler+0x2e2>
 8007b80:	e09f      	b.n	8007cc2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	217e      	movs	r1, #126	; 0x7e
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007b90:	187b      	adds	r3, r7, r1
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d100      	bne.n	8007b9a <HAL_UART_IRQHandler+0x2fa>
 8007b98:	e13e      	b.n	8007e18 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2258      	movs	r2, #88	; 0x58
 8007b9e:	5a9b      	ldrh	r3, [r3, r2]
 8007ba0:	187a      	adds	r2, r7, r1
 8007ba2:	8812      	ldrh	r2, [r2, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d300      	bcc.n	8007baa <HAL_UART_IRQHandler+0x30a>
 8007ba8:	e136      	b.n	8007e18 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	187a      	adds	r2, r7, r1
 8007bae:	215a      	movs	r1, #90	; 0x5a
 8007bb0:	8812      	ldrh	r2, [r2, #0]
 8007bb2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d06f      	beq.n	8007c9e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bc8:	2301      	movs	r3, #1
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	f383 8810 	msr	PRIMASK, r3
}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4992      	ldr	r1, [pc, #584]	; (8007e28 <HAL_UART_IRQHandler+0x588>)
 8007be0:	400a      	ands	r2, r1
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	f383 8810 	msr	PRIMASK, r3
}
 8007bee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf8:	677b      	str	r3, [r7, #116]	; 0x74
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c00:	f383 8810 	msr	PRIMASK, r3
}
 8007c04:	46c0      	nop			; (mov r8, r8)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2101      	movs	r1, #1
 8007c12:	438a      	bics	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]
 8007c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c18:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1c:	f383 8810 	msr	PRIMASK, r3
}
 8007c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c22:	f3ef 8310 	mrs	r3, PRIMASK
 8007c26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c32:	f383 8810 	msr	PRIMASK, r3
}
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2140      	movs	r1, #64	; 0x40
 8007c44:	438a      	bics	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c4a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	f383 8810 	msr	PRIMASK, r3
}
 8007c52:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2280      	movs	r2, #128	; 0x80
 8007c58:	2120      	movs	r1, #32
 8007c5a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c62:	f3ef 8310 	mrs	r3, PRIMASK
 8007c66:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c72:	f383 8810 	msr	PRIMASK, r3
}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2110      	movs	r1, #16
 8007c84:	438a      	bics	r2, r1
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c8e:	f383 8810 	msr	PRIMASK, r3
}
 8007c92:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f7fd f897 	bl	8004dcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2258      	movs	r2, #88	; 0x58
 8007ca8:	5a9a      	ldrh	r2, [r3, r2]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	215a      	movs	r1, #90	; 0x5a
 8007cae:	5a5b      	ldrh	r3, [r3, r1]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0011      	movs	r1, r2
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f000 f8c8 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cc0:	e0aa      	b.n	8007e18 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2258      	movs	r2, #88	; 0x58
 8007cc6:	5a99      	ldrh	r1, [r3, r2]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	225a      	movs	r2, #90	; 0x5a
 8007ccc:	5a9b      	ldrh	r3, [r3, r2]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	208e      	movs	r0, #142	; 0x8e
 8007cd2:	183b      	adds	r3, r7, r0
 8007cd4:	1a8a      	subs	r2, r1, r2
 8007cd6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	225a      	movs	r2, #90	; 0x5a
 8007cdc:	5a9b      	ldrh	r3, [r3, r2]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d100      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x446>
 8007ce4:	e09a      	b.n	8007e1c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8007ce6:	183b      	adds	r3, r7, r0
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d100      	bne.n	8007cf0 <HAL_UART_IRQHandler+0x450>
 8007cee:	e095      	b.n	8007e1c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cf8:	2488      	movs	r4, #136	; 0x88
 8007cfa:	193a      	adds	r2, r7, r4
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	2301      	movs	r3, #1
 8007d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f383 8810 	msr	PRIMASK, r3
}
 8007d08:	46c0      	nop			; (mov r8, r8)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4945      	ldr	r1, [pc, #276]	; (8007e2c <HAL_UART_IRQHandler+0x58c>)
 8007d16:	400a      	ands	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	193b      	adds	r3, r7, r4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f383 8810 	msr	PRIMASK, r3
}
 8007d26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d28:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d2e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d30:	2484      	movs	r4, #132	; 0x84
 8007d32:	193a      	adds	r2, r7, r4
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	2301      	movs	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f383 8810 	msr	PRIMASK, r3
}
 8007d40:	46c0      	nop			; (mov r8, r8)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	438a      	bics	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]
 8007d52:	193b      	adds	r3, r7, r4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f383 8810 	msr	PRIMASK, r3
}
 8007d5e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2280      	movs	r2, #128	; 0x80
 8007d64:	2120      	movs	r1, #32
 8007d66:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d74:	f3ef 8310 	mrs	r3, PRIMASK
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7c:	2480      	movs	r4, #128	; 0x80
 8007d7e:	193a      	adds	r2, r7, r4
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	2301      	movs	r3, #1
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	f383 8810 	msr	PRIMASK, r3
}
 8007d8c:	46c0      	nop			; (mov r8, r8)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2110      	movs	r1, #16
 8007d9a:	438a      	bics	r2, r1
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	193b      	adds	r3, r7, r4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	f383 8810 	msr	PRIMASK, r3
}
 8007daa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007db2:	183b      	adds	r3, r7, r0
 8007db4:	881a      	ldrh	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	0011      	movs	r1, r2
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 f848 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dc0:	e02c      	b.n	8007e1c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007dc2:	23a4      	movs	r3, #164	; 0xa4
 8007dc4:	18fb      	adds	r3, r7, r3
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d00f      	beq.n	8007dee <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dce:	23a0      	movs	r3, #160	; 0xa0
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2280      	movs	r2, #128	; 0x80
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	d009      	beq.n	8007dee <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01e      	beq.n	8007e20 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	0010      	movs	r0, r2
 8007dea:	4798      	blx	r3
    }
    return;
 8007dec:	e018      	b.n	8007e20 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dee:	23a4      	movs	r3, #164	; 0xa4
 8007df0:	18fb      	adds	r3, r7, r3
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2240      	movs	r2, #64	; 0x40
 8007df6:	4013      	ands	r3, r2
 8007df8:	d013      	beq.n	8007e22 <HAL_UART_IRQHandler+0x582>
 8007dfa:	23a0      	movs	r3, #160	; 0xa0
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2240      	movs	r2, #64	; 0x40
 8007e02:	4013      	ands	r3, r2
 8007e04:	d00d      	beq.n	8007e22 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f000 fc64 	bl	80086d6 <UART_EndTransmit_IT>
    return;
 8007e0e:	e008      	b.n	8007e22 <HAL_UART_IRQHandler+0x582>
      return;
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	e006      	b.n	8007e22 <HAL_UART_IRQHandler+0x582>
    return;
 8007e14:	46c0      	nop			; (mov r8, r8)
 8007e16:	e004      	b.n	8007e22 <HAL_UART_IRQHandler+0x582>
      return;
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	e002      	b.n	8007e22 <HAL_UART_IRQHandler+0x582>
      return;
 8007e1c:	46c0      	nop			; (mov r8, r8)
 8007e1e:	e000      	b.n	8007e22 <HAL_UART_IRQHandler+0x582>
    return;
 8007e20:	46c0      	nop			; (mov r8, r8)
  }

}
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b02b      	add	sp, #172	; 0xac
 8007e26:	bd90      	pop	{r4, r7, pc}
 8007e28:	fffffeff 	.word	0xfffffeff
 8007e2c:	fffffedf 	.word	0xfffffedf

08007e30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e38:	46c0      	nop			; (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b002      	add	sp, #8
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e48:	46c0      	nop			; (mov r8, r8)
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b002      	add	sp, #8
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	000a      	movs	r2, r1
 8007e5a:	1cbb      	adds	r3, r7, #2
 8007e5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b002      	add	sp, #8
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e70:	231e      	movs	r3, #30
 8007e72:	18fb      	adds	r3, r7, r3
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a8d      	ldr	r2, [pc, #564]	; (80080cc <UART_SetConfig+0x264>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4a88      	ldr	r2, [pc, #544]	; (80080d0 <UART_SetConfig+0x268>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4a7f      	ldr	r2, [pc, #508]	; (80080d4 <UART_SetConfig+0x26c>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	0019      	movs	r1, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a7b      	ldr	r2, [pc, #492]	; (80080d8 <UART_SetConfig+0x270>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d127      	bne.n	8007f3e <UART_SetConfig+0xd6>
 8007eee:	4b7b      	ldr	r3, [pc, #492]	; (80080dc <UART_SetConfig+0x274>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d00d      	beq.n	8007f16 <UART_SetConfig+0xae>
 8007efa:	d81b      	bhi.n	8007f34 <UART_SetConfig+0xcc>
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d014      	beq.n	8007f2a <UART_SetConfig+0xc2>
 8007f00:	d818      	bhi.n	8007f34 <UART_SetConfig+0xcc>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <UART_SetConfig+0xa4>
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d00a      	beq.n	8007f20 <UART_SetConfig+0xb8>
 8007f0a:	e013      	b.n	8007f34 <UART_SetConfig+0xcc>
 8007f0c:	231f      	movs	r3, #31
 8007f0e:	18fb      	adds	r3, r7, r3
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e021      	b.n	8007f5a <UART_SetConfig+0xf2>
 8007f16:	231f      	movs	r3, #31
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e01c      	b.n	8007f5a <UART_SetConfig+0xf2>
 8007f20:	231f      	movs	r3, #31
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	2204      	movs	r2, #4
 8007f26:	701a      	strb	r2, [r3, #0]
 8007f28:	e017      	b.n	8007f5a <UART_SetConfig+0xf2>
 8007f2a:	231f      	movs	r3, #31
 8007f2c:	18fb      	adds	r3, r7, r3
 8007f2e:	2208      	movs	r2, #8
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e012      	b.n	8007f5a <UART_SetConfig+0xf2>
 8007f34:	231f      	movs	r3, #31
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	2210      	movs	r2, #16
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e00d      	b.n	8007f5a <UART_SetConfig+0xf2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a67      	ldr	r2, [pc, #412]	; (80080e0 <UART_SetConfig+0x278>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d104      	bne.n	8007f52 <UART_SetConfig+0xea>
 8007f48:	231f      	movs	r3, #31
 8007f4a:	18fb      	adds	r3, r7, r3
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e003      	b.n	8007f5a <UART_SetConfig+0xf2>
 8007f52:	231f      	movs	r3, #31
 8007f54:	18fb      	adds	r3, r7, r3
 8007f56:	2210      	movs	r2, #16
 8007f58:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69da      	ldr	r2, [r3, #28]
 8007f5e:	2380      	movs	r3, #128	; 0x80
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d15c      	bne.n	8008020 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8007f66:	231f      	movs	r3, #31
 8007f68:	18fb      	adds	r3, r7, r3
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d015      	beq.n	8007f9c <UART_SetConfig+0x134>
 8007f70:	dc18      	bgt.n	8007fa4 <UART_SetConfig+0x13c>
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d00d      	beq.n	8007f92 <UART_SetConfig+0x12a>
 8007f76:	dc15      	bgt.n	8007fa4 <UART_SetConfig+0x13c>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <UART_SetConfig+0x11a>
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d005      	beq.n	8007f8c <UART_SetConfig+0x124>
 8007f80:	e010      	b.n	8007fa4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f82:	f7fd fea3 	bl	8005ccc <HAL_RCC_GetPCLK1Freq>
 8007f86:	0003      	movs	r3, r0
 8007f88:	61bb      	str	r3, [r7, #24]
        break;
 8007f8a:	e012      	b.n	8007fb2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b55      	ldr	r3, [pc, #340]	; (80080e4 <UART_SetConfig+0x27c>)
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e00f      	b.n	8007fb2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fd fe3b 	bl	8005c0c <HAL_RCC_GetSysClockFreq>
 8007f96:	0003      	movs	r3, r0
 8007f98:	61bb      	str	r3, [r7, #24]
        break;
 8007f9a:	e00a      	b.n	8007fb2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	021b      	lsls	r3, r3, #8
 8007fa0:	61bb      	str	r3, [r7, #24]
        break;
 8007fa2:	e006      	b.n	8007fb2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fa8:	231e      	movs	r3, #30
 8007faa:	18fb      	adds	r3, r7, r3
 8007fac:	2201      	movs	r2, #1
 8007fae:	701a      	strb	r2, [r3, #0]
        break;
 8007fb0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d100      	bne.n	8007fba <UART_SetConfig+0x152>
 8007fb8:	e07a      	b.n	80080b0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	005a      	lsls	r2, r3, #1
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	18d2      	adds	r2, r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	0019      	movs	r1, r3
 8007fcc:	0010      	movs	r0, r2
 8007fce:	f7f8 f8b7 	bl	8000140 <__udivsi3>
 8007fd2:	0003      	movs	r3, r0
 8007fd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b0f      	cmp	r3, #15
 8007fda:	d91c      	bls.n	8008016 <UART_SetConfig+0x1ae>
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	2380      	movs	r3, #128	; 0x80
 8007fe0:	025b      	lsls	r3, r3, #9
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d217      	bcs.n	8008016 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	200e      	movs	r0, #14
 8007fec:	183b      	adds	r3, r7, r0
 8007fee:	210f      	movs	r1, #15
 8007ff0:	438a      	bics	r2, r1
 8007ff2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2207      	movs	r2, #7
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	b299      	uxth	r1, r3
 8008000:	183b      	adds	r3, r7, r0
 8008002:	183a      	adds	r2, r7, r0
 8008004:	8812      	ldrh	r2, [r2, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	183a      	adds	r2, r7, r0
 8008010:	8812      	ldrh	r2, [r2, #0]
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e04c      	b.n	80080b0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008016:	231e      	movs	r3, #30
 8008018:	18fb      	adds	r3, r7, r3
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e047      	b.n	80080b0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008020:	231f      	movs	r3, #31
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b08      	cmp	r3, #8
 8008028:	d015      	beq.n	8008056 <UART_SetConfig+0x1ee>
 800802a:	dc18      	bgt.n	800805e <UART_SetConfig+0x1f6>
 800802c:	2b04      	cmp	r3, #4
 800802e:	d00d      	beq.n	800804c <UART_SetConfig+0x1e4>
 8008030:	dc15      	bgt.n	800805e <UART_SetConfig+0x1f6>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <UART_SetConfig+0x1d4>
 8008036:	2b02      	cmp	r3, #2
 8008038:	d005      	beq.n	8008046 <UART_SetConfig+0x1de>
 800803a:	e010      	b.n	800805e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800803c:	f7fd fe46 	bl	8005ccc <HAL_RCC_GetPCLK1Freq>
 8008040:	0003      	movs	r3, r0
 8008042:	61bb      	str	r3, [r7, #24]
        break;
 8008044:	e012      	b.n	800806c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <UART_SetConfig+0x27c>)
 8008048:	61bb      	str	r3, [r7, #24]
        break;
 800804a:	e00f      	b.n	800806c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800804c:	f7fd fdde 	bl	8005c0c <HAL_RCC_GetSysClockFreq>
 8008050:	0003      	movs	r3, r0
 8008052:	61bb      	str	r3, [r7, #24]
        break;
 8008054:	e00a      	b.n	800806c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008056:	2380      	movs	r3, #128	; 0x80
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	61bb      	str	r3, [r7, #24]
        break;
 800805c:	e006      	b.n	800806c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008062:	231e      	movs	r3, #30
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	2201      	movs	r2, #1
 8008068:	701a      	strb	r2, [r3, #0]
        break;
 800806a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01e      	beq.n	80080b0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	085a      	lsrs	r2, r3, #1
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	18d2      	adds	r2, r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	0019      	movs	r1, r3
 8008082:	0010      	movs	r0, r2
 8008084:	f7f8 f85c 	bl	8000140 <__udivsi3>
 8008088:	0003      	movs	r3, r0
 800808a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d90a      	bls.n	80080a8 <UART_SetConfig+0x240>
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	025b      	lsls	r3, r3, #9
 8008098:	429a      	cmp	r2, r3
 800809a:	d205      	bcs.n	80080a8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	e003      	b.n	80080b0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80080a8:	231e      	movs	r3, #30
 80080aa:	18fb      	adds	r3, r7, r3
 80080ac:	2201      	movs	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080bc:	231e      	movs	r3, #30
 80080be:	18fb      	adds	r3, r7, r3
 80080c0:	781b      	ldrb	r3, [r3, #0]
}
 80080c2:	0018      	movs	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b008      	add	sp, #32
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	ffff69f3 	.word	0xffff69f3
 80080d0:	ffffcfff 	.word	0xffffcfff
 80080d4:	fffff4ff 	.word	0xfffff4ff
 80080d8:	40013800 	.word	0x40013800
 80080dc:	40021000 	.word	0x40021000
 80080e0:	40004400 	.word	0x40004400
 80080e4:	007a1200 	.word	0x007a1200

080080e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2201      	movs	r2, #1
 80080f6:	4013      	ands	r3, r2
 80080f8:	d00b      	beq.n	8008112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4a4a      	ldr	r2, [pc, #296]	; (800822c <UART_AdvFeatureConfig+0x144>)
 8008102:	4013      	ands	r3, r2
 8008104:	0019      	movs	r1, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2202      	movs	r2, #2
 8008118:	4013      	ands	r3, r2
 800811a:	d00b      	beq.n	8008134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4a43      	ldr	r2, [pc, #268]	; (8008230 <UART_AdvFeatureConfig+0x148>)
 8008124:	4013      	ands	r3, r2
 8008126:	0019      	movs	r1, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2204      	movs	r2, #4
 800813a:	4013      	ands	r3, r2
 800813c:	d00b      	beq.n	8008156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4a3b      	ldr	r2, [pc, #236]	; (8008234 <UART_AdvFeatureConfig+0x14c>)
 8008146:	4013      	ands	r3, r2
 8008148:	0019      	movs	r1, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2208      	movs	r2, #8
 800815c:	4013      	ands	r3, r2
 800815e:	d00b      	beq.n	8008178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	4a34      	ldr	r2, [pc, #208]	; (8008238 <UART_AdvFeatureConfig+0x150>)
 8008168:	4013      	ands	r3, r2
 800816a:	0019      	movs	r1, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2210      	movs	r2, #16
 800817e:	4013      	ands	r3, r2
 8008180:	d00b      	beq.n	800819a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a2c      	ldr	r2, [pc, #176]	; (800823c <UART_AdvFeatureConfig+0x154>)
 800818a:	4013      	ands	r3, r2
 800818c:	0019      	movs	r1, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2220      	movs	r2, #32
 80081a0:	4013      	ands	r3, r2
 80081a2:	d00b      	beq.n	80081bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	4a25      	ldr	r2, [pc, #148]	; (8008240 <UART_AdvFeatureConfig+0x158>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	0019      	movs	r1, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2240      	movs	r2, #64	; 0x40
 80081c2:	4013      	ands	r3, r2
 80081c4:	d01d      	beq.n	8008202 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <UART_AdvFeatureConfig+0x15c>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	0019      	movs	r1, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	035b      	lsls	r3, r3, #13
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d10b      	bne.n	8008202 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <UART_AdvFeatureConfig+0x160>)
 80081f2:	4013      	ands	r3, r2
 80081f4:	0019      	movs	r1, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2280      	movs	r2, #128	; 0x80
 8008208:	4013      	ands	r3, r2
 800820a:	d00b      	beq.n	8008224 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	4a0e      	ldr	r2, [pc, #56]	; (800824c <UART_AdvFeatureConfig+0x164>)
 8008214:	4013      	ands	r3, r2
 8008216:	0019      	movs	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	605a      	str	r2, [r3, #4]
  }
}
 8008224:	46c0      	nop			; (mov r8, r8)
 8008226:	46bd      	mov	sp, r7
 8008228:	b002      	add	sp, #8
 800822a:	bd80      	pop	{r7, pc}
 800822c:	fffdffff 	.word	0xfffdffff
 8008230:	fffeffff 	.word	0xfffeffff
 8008234:	fffbffff 	.word	0xfffbffff
 8008238:	ffff7fff 	.word	0xffff7fff
 800823c:	ffffefff 	.word	0xffffefff
 8008240:	ffffdfff 	.word	0xffffdfff
 8008244:	ffefffff 	.word	0xffefffff
 8008248:	ff9fffff 	.word	0xff9fffff
 800824c:	fff7ffff 	.word	0xfff7ffff

08008250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b092      	sub	sp, #72	; 0x48
 8008254:	af02      	add	r7, sp, #8
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2284      	movs	r2, #132	; 0x84
 800825c:	2100      	movs	r1, #0
 800825e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008260:	f7fc f84e 	bl	8004300 <HAL_GetTick>
 8008264:	0003      	movs	r3, r0
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2208      	movs	r2, #8
 8008270:	4013      	ands	r3, r2
 8008272:	2b08      	cmp	r3, #8
 8008274:	d12c      	bne.n	80082d0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008278:	2280      	movs	r2, #128	; 0x80
 800827a:	0391      	lsls	r1, r2, #14
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4a46      	ldr	r2, [pc, #280]	; (8008398 <UART_CheckIdleState+0x148>)
 8008280:	9200      	str	r2, [sp, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	f000 f88c 	bl	80083a0 <UART_WaitOnFlagUntilTimeout>
 8008288:	1e03      	subs	r3, r0, #0
 800828a:	d021      	beq.n	80082d0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828c:	f3ef 8310 	mrs	r3, PRIMASK
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008294:	63bb      	str	r3, [r7, #56]	; 0x38
 8008296:	2301      	movs	r3, #1
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	46c0      	nop			; (mov r8, r8)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2180      	movs	r1, #128	; 0x80
 80082ae:	438a      	bics	r2, r1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	f383 8810 	msr	PRIMASK, r3
}
 80082bc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2278      	movs	r2, #120	; 0x78
 80082c8:	2100      	movs	r1, #0
 80082ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e05f      	b.n	8008390 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2204      	movs	r2, #4
 80082d8:	4013      	ands	r3, r2
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d146      	bne.n	800836c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e0:	2280      	movs	r2, #128	; 0x80
 80082e2:	03d1      	lsls	r1, r2, #15
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4a2c      	ldr	r2, [pc, #176]	; (8008398 <UART_CheckIdleState+0x148>)
 80082e8:	9200      	str	r2, [sp, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f000 f858 	bl	80083a0 <UART_WaitOnFlagUntilTimeout>
 80082f0:	1e03      	subs	r3, r0, #0
 80082f2:	d03b      	beq.n	800836c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f4:	f3ef 8310 	mrs	r3, PRIMASK
 80082f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80082fa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	2301      	movs	r3, #1
 8008300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			; (mov r8, r8)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4921      	ldr	r1, [pc, #132]	; (800839c <UART_CheckIdleState+0x14c>)
 8008316:	400a      	ands	r2, r1
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008326:	f3ef 8310 	mrs	r3, PRIMASK
 800832a:	61bb      	str	r3, [r7, #24]
  return(result);
 800832c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
 8008330:	2301      	movs	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2101      	movs	r1, #1
 8008348:	438a      	bics	r2, r1
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	f383 8810 	msr	PRIMASK, r3
}
 8008356:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2280      	movs	r2, #128	; 0x80
 800835c:	2120      	movs	r1, #32
 800835e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2278      	movs	r2, #120	; 0x78
 8008364:	2100      	movs	r1, #0
 8008366:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e011      	b.n	8008390 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2280      	movs	r2, #128	; 0x80
 8008376:	2120      	movs	r1, #32
 8008378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2278      	movs	r2, #120	; 0x78
 800838a:	2100      	movs	r1, #0
 800838c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	0018      	movs	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	b010      	add	sp, #64	; 0x40
 8008396:	bd80      	pop	{r7, pc}
 8008398:	01ffffff 	.word	0x01ffffff
 800839c:	fffffedf 	.word	0xfffffedf

080083a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	1dfb      	adds	r3, r7, #7
 80083ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083b0:	e04b      	b.n	800844a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	3301      	adds	r3, #1
 80083b6:	d048      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b8:	f7fb ffa2 	bl	8004300 <HAL_GetTick>
 80083bc:	0002      	movs	r2, r0
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d302      	bcc.n	80083ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e04b      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2204      	movs	r2, #4
 80083da:	4013      	ands	r3, r2
 80083dc:	d035      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	2208      	movs	r2, #8
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d111      	bne.n	8008410 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2208      	movs	r2, #8
 80083f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	0018      	movs	r0, r3
 80083f8:	f000 f8f2 	bl	80085e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2284      	movs	r2, #132	; 0x84
 8008400:	2108      	movs	r1, #8
 8008402:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2278      	movs	r2, #120	; 0x78
 8008408:	2100      	movs	r1, #0
 800840a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e02c      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69da      	ldr	r2, [r3, #28]
 8008416:	2380      	movs	r3, #128	; 0x80
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	401a      	ands	r2, r3
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	429a      	cmp	r2, r3
 8008422:	d112      	bne.n	800844a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2280      	movs	r2, #128	; 0x80
 800842a:	0112      	lsls	r2, r2, #4
 800842c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	0018      	movs	r0, r3
 8008432:	f000 f8d5 	bl	80085e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2284      	movs	r2, #132	; 0x84
 800843a:	2120      	movs	r1, #32
 800843c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2278      	movs	r2, #120	; 0x78
 8008442:	2100      	movs	r1, #0
 8008444:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e00f      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4013      	ands	r3, r2
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	425a      	negs	r2, r3
 800845a:	4153      	adcs	r3, r2
 800845c:	b2db      	uxtb	r3, r3
 800845e:	001a      	movs	r2, r3
 8008460:	1dfb      	adds	r3, r7, #7
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d0a4      	beq.n	80083b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	0018      	movs	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	b004      	add	sp, #16
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b090      	sub	sp, #64	; 0x40
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	1dbb      	adds	r3, r7, #6
 8008480:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	1dba      	adds	r2, r7, #6
 800848c:	2158      	movs	r1, #88	; 0x58
 800848e:	8812      	ldrh	r2, [r2, #0]
 8008490:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	1dba      	adds	r2, r7, #6
 8008496:	215a      	movs	r1, #90	; 0x5a
 8008498:	8812      	ldrh	r2, [r2, #0]
 800849a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	2380      	movs	r3, #128	; 0x80
 80084a8:	015b      	lsls	r3, r3, #5
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d10d      	bne.n	80084ca <UART_Start_Receive_IT+0x56>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d104      	bne.n	80084c0 <UART_Start_Receive_IT+0x4c>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	225c      	movs	r2, #92	; 0x5c
 80084ba:	4946      	ldr	r1, [pc, #280]	; (80085d4 <UART_Start_Receive_IT+0x160>)
 80084bc:	5299      	strh	r1, [r3, r2]
 80084be:	e01a      	b.n	80084f6 <UART_Start_Receive_IT+0x82>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	225c      	movs	r2, #92	; 0x5c
 80084c4:	21ff      	movs	r1, #255	; 0xff
 80084c6:	5299      	strh	r1, [r3, r2]
 80084c8:	e015      	b.n	80084f6 <UART_Start_Receive_IT+0x82>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10d      	bne.n	80084ee <UART_Start_Receive_IT+0x7a>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d104      	bne.n	80084e4 <UART_Start_Receive_IT+0x70>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	225c      	movs	r2, #92	; 0x5c
 80084de:	21ff      	movs	r1, #255	; 0xff
 80084e0:	5299      	strh	r1, [r3, r2]
 80084e2:	e008      	b.n	80084f6 <UART_Start_Receive_IT+0x82>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	225c      	movs	r2, #92	; 0x5c
 80084e8:	217f      	movs	r1, #127	; 0x7f
 80084ea:	5299      	strh	r1, [r3, r2]
 80084ec:	e003      	b.n	80084f6 <UART_Start_Receive_IT+0x82>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	225c      	movs	r2, #92	; 0x5c
 80084f2:	2100      	movs	r1, #0
 80084f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2284      	movs	r2, #132	; 0x84
 80084fa:	2100      	movs	r1, #0
 80084fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2280      	movs	r2, #128	; 0x80
 8008502:	2122      	movs	r1, #34	; 0x22
 8008504:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008506:	f3ef 8310 	mrs	r3, PRIMASK
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008510:	2301      	movs	r3, #1
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	f383 8810 	msr	PRIMASK, r3
}
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2101      	movs	r1, #1
 8008528:	430a      	orrs	r2, r1
 800852a:	609a      	str	r2, [r3, #8]
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f383 8810 	msr	PRIMASK, r3
}
 8008536:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	2380      	movs	r3, #128	; 0x80
 800853e:	015b      	lsls	r3, r3, #5
 8008540:	429a      	cmp	r2, r3
 8008542:	d107      	bne.n	8008554 <UART_Start_Receive_IT+0xe0>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4a22      	ldr	r2, [pc, #136]	; (80085d8 <UART_Start_Receive_IT+0x164>)
 8008550:	669a      	str	r2, [r3, #104]	; 0x68
 8008552:	e002      	b.n	800855a <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4a21      	ldr	r2, [pc, #132]	; (80085dc <UART_Start_Receive_IT+0x168>)
 8008558:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d019      	beq.n	8008596 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008562:	f3ef 8310 	mrs	r3, PRIMASK
 8008566:	61fb      	str	r3, [r7, #28]
  return(result);
 8008568:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
 800856c:	2301      	movs	r3, #1
 800856e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	f383 8810 	msr	PRIMASK, r3
}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2190      	movs	r1, #144	; 0x90
 8008584:	0049      	lsls	r1, r1, #1
 8008586:	430a      	orrs	r2, r1
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	f383 8810 	msr	PRIMASK, r3
}
 8008594:	e018      	b.n	80085c8 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008596:	f3ef 8310 	mrs	r3, PRIMASK
 800859a:	613b      	str	r3, [r7, #16]
  return(result);
 800859c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800859e:	63bb      	str	r3, [r7, #56]	; 0x38
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f383 8810 	msr	PRIMASK, r3
}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2120      	movs	r1, #32
 80085b8:	430a      	orrs	r2, r1
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f383 8810 	msr	PRIMASK, r3
}
 80085c6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	0018      	movs	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	b010      	add	sp, #64	; 0x40
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	000001ff 	.word	0x000001ff
 80085d8:	080088e5 	.word	0x080088e5
 80085dc:	0800872d 	.word	0x0800872d

080085e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08e      	sub	sp, #56	; 0x38
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e8:	f3ef 8310 	mrs	r3, PRIMASK
 80085ec:	617b      	str	r3, [r7, #20]
  return(result);
 80085ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
 80085f2:	2301      	movs	r3, #1
 80085f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	f383 8810 	msr	PRIMASK, r3
}
 80085fc:	46c0      	nop			; (mov r8, r8)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4926      	ldr	r1, [pc, #152]	; (80086a4 <UART_EndRxTransfer+0xc4>)
 800860a:	400a      	ands	r2, r1
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f383 8810 	msr	PRIMASK, r3
}
 8008618:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800861a:	f3ef 8310 	mrs	r3, PRIMASK
 800861e:	623b      	str	r3, [r7, #32]
  return(result);
 8008620:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008622:	633b      	str	r3, [r7, #48]	; 0x30
 8008624:	2301      	movs	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	f383 8810 	msr	PRIMASK, r3
}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2101      	movs	r1, #1
 800863c:	438a      	bics	r2, r1
 800863e:	609a      	str	r2, [r3, #8]
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	f383 8810 	msr	PRIMASK, r3
}
 800864a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008650:	2b01      	cmp	r3, #1
 8008652:	d118      	bne.n	8008686 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008654:	f3ef 8310 	mrs	r3, PRIMASK
 8008658:	60bb      	str	r3, [r7, #8]
  return(result);
 800865a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800865e:	2301      	movs	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f383 8810 	msr	PRIMASK, r3
}
 8008668:	46c0      	nop			; (mov r8, r8)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2110      	movs	r1, #16
 8008676:	438a      	bics	r2, r1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f383 8810 	msr	PRIMASK, r3
}
 8008684:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2280      	movs	r2, #128	; 0x80
 800868a:	2120      	movs	r1, #32
 800868c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	669a      	str	r2, [r3, #104]	; 0x68
}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	46bd      	mov	sp, r7
 800869e:	b00e      	add	sp, #56	; 0x38
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	fffffedf 	.word	0xfffffedf

080086a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	225a      	movs	r2, #90	; 0x5a
 80086ba:	2100      	movs	r1, #0
 80086bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2252      	movs	r2, #82	; 0x52
 80086c2:	2100      	movs	r1, #0
 80086c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7ff fbb9 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	46bd      	mov	sp, r7
 80086d2:	b004      	add	sp, #16
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086de:	f3ef 8310 	mrs	r3, PRIMASK
 80086e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80086e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	2301      	movs	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f383 8810 	msr	PRIMASK, r3
}
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2140      	movs	r1, #64	; 0x40
 8008700:	438a      	bics	r2, r1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f383 8810 	msr	PRIMASK, r3
}
 800870e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0018      	movs	r0, r3
 8008720:	f7ff fb86 	bl	8007e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008724:	46c0      	nop			; (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	b006      	add	sp, #24
 800872a:	bd80      	pop	{r7, pc}

0800872c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b094      	sub	sp, #80	; 0x50
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008734:	204e      	movs	r0, #78	; 0x4e
 8008736:	183b      	adds	r3, r7, r0
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	215c      	movs	r1, #92	; 0x5c
 800873c:	5a52      	ldrh	r2, [r2, r1]
 800873e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2280      	movs	r2, #128	; 0x80
 8008744:	589b      	ldr	r3, [r3, r2]
 8008746:	2b22      	cmp	r3, #34	; 0x22
 8008748:	d000      	beq.n	800874c <UART_RxISR_8BIT+0x20>
 800874a:	e0ba      	b.n	80088c2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	214c      	movs	r1, #76	; 0x4c
 8008752:	187b      	adds	r3, r7, r1
 8008754:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008756:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008758:	187b      	adds	r3, r7, r1
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b2da      	uxtb	r2, r3
 800875e:	183b      	adds	r3, r7, r0
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b2d9      	uxtb	r1, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008768:	400a      	ands	r2, r1
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	225a      	movs	r2, #90	; 0x5a
 800877c:	5a9b      	ldrh	r3, [r3, r2]
 800877e:	b29b      	uxth	r3, r3
 8008780:	3b01      	subs	r3, #1
 8008782:	b299      	uxth	r1, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	225a      	movs	r2, #90	; 0x5a
 8008788:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	225a      	movs	r2, #90	; 0x5a
 800878e:	5a9b      	ldrh	r3, [r3, r2]
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d000      	beq.n	8008798 <UART_RxISR_8BIT+0x6c>
 8008796:	e09c      	b.n	80088d2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008798:	f3ef 8310 	mrs	r3, PRIMASK
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a2:	2301      	movs	r3, #1
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	f383 8810 	msr	PRIMASK, r3
}
 80087ac:	46c0      	nop			; (mov r8, r8)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4948      	ldr	r1, [pc, #288]	; (80088dc <UART_RxISR_8BIT+0x1b0>)
 80087ba:	400a      	ands	r2, r1
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	f383 8810 	msr	PRIMASK, r3
}
 80087c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ca:	f3ef 8310 	mrs	r3, PRIMASK
 80087ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d2:	647b      	str	r3, [r7, #68]	; 0x44
 80087d4:	2301      	movs	r3, #1
 80087d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087da:	f383 8810 	msr	PRIMASK, r3
}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2101      	movs	r1, #1
 80087ec:	438a      	bics	r2, r1
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f383 8810 	msr	PRIMASK, r3
}
 80087fa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2280      	movs	r2, #128	; 0x80
 8008800:	2120      	movs	r1, #32
 8008802:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	2380      	movs	r3, #128	; 0x80
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	4013      	ands	r3, r2
 800881c:	d018      	beq.n	8008850 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881e:	f3ef 8310 	mrs	r3, PRIMASK
 8008822:	61bb      	str	r3, [r7, #24]
  return(result);
 8008824:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008826:	643b      	str	r3, [r7, #64]	; 0x40
 8008828:	2301      	movs	r3, #1
 800882a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f383 8810 	msr	PRIMASK, r3
}
 8008832:	46c0      	nop			; (mov r8, r8)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4928      	ldr	r1, [pc, #160]	; (80088e0 <UART_RxISR_8BIT+0x1b4>)
 8008840:	400a      	ands	r2, r1
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008846:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	f383 8810 	msr	PRIMASK, r3
}
 800884e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008854:	2b01      	cmp	r3, #1
 8008856:	d12f      	bne.n	80088b8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800885e:	f3ef 8310 	mrs	r3, PRIMASK
 8008862:	60fb      	str	r3, [r7, #12]
  return(result);
 8008864:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008868:	2301      	movs	r3, #1
 800886a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f383 8810 	msr	PRIMASK, r3
}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2110      	movs	r1, #16
 8008880:	438a      	bics	r2, r1
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f383 8810 	msr	PRIMASK, r3
}
 800888e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	2210      	movs	r2, #16
 8008898:	4013      	ands	r3, r2
 800889a:	2b10      	cmp	r3, #16
 800889c:	d103      	bne.n	80088a6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2210      	movs	r2, #16
 80088a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2258      	movs	r2, #88	; 0x58
 80088aa:	5a9a      	ldrh	r2, [r3, r2]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	0011      	movs	r1, r2
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7ff facd 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088b6:	e00c      	b.n	80088d2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7fa fa26 	bl	8002d0c <HAL_UART_RxCpltCallback>
}
 80088c0:	e007      	b.n	80088d2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2108      	movs	r1, #8
 80088ce:	430a      	orrs	r2, r1
 80088d0:	619a      	str	r2, [r3, #24]
}
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b014      	add	sp, #80	; 0x50
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	fffffedf 	.word	0xfffffedf
 80088e0:	fbffffff 	.word	0xfbffffff

080088e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b094      	sub	sp, #80	; 0x50
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088ec:	204e      	movs	r0, #78	; 0x4e
 80088ee:	183b      	adds	r3, r7, r0
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	215c      	movs	r1, #92	; 0x5c
 80088f4:	5a52      	ldrh	r2, [r2, r1]
 80088f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2280      	movs	r2, #128	; 0x80
 80088fc:	589b      	ldr	r3, [r3, r2]
 80088fe:	2b22      	cmp	r3, #34	; 0x22
 8008900:	d000      	beq.n	8008904 <UART_RxISR_16BIT+0x20>
 8008902:	e0ba      	b.n	8008a7a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	214c      	movs	r1, #76	; 0x4c
 800890a:	187b      	adds	r3, r7, r1
 800890c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800890e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008916:	187b      	adds	r3, r7, r1
 8008918:	183a      	adds	r2, r7, r0
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	8812      	ldrh	r2, [r2, #0]
 800891e:	4013      	ands	r3, r2
 8008920:	b29a      	uxth	r2, r3
 8008922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008924:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	1c9a      	adds	r2, r3, #2
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	225a      	movs	r2, #90	; 0x5a
 8008934:	5a9b      	ldrh	r3, [r3, r2]
 8008936:	b29b      	uxth	r3, r3
 8008938:	3b01      	subs	r3, #1
 800893a:	b299      	uxth	r1, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	225a      	movs	r2, #90	; 0x5a
 8008940:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	225a      	movs	r2, #90	; 0x5a
 8008946:	5a9b      	ldrh	r3, [r3, r2]
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d000      	beq.n	8008950 <UART_RxISR_16BIT+0x6c>
 800894e:	e09c      	b.n	8008a8a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008950:	f3ef 8310 	mrs	r3, PRIMASK
 8008954:	623b      	str	r3, [r7, #32]
  return(result);
 8008956:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008958:	647b      	str	r3, [r7, #68]	; 0x44
 800895a:	2301      	movs	r3, #1
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	f383 8810 	msr	PRIMASK, r3
}
 8008964:	46c0      	nop			; (mov r8, r8)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4948      	ldr	r1, [pc, #288]	; (8008a94 <UART_RxISR_16BIT+0x1b0>)
 8008972:	400a      	ands	r2, r1
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	f383 8810 	msr	PRIMASK, r3
}
 8008980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008982:	f3ef 8310 	mrs	r3, PRIMASK
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898a:	643b      	str	r3, [r7, #64]	; 0x40
 800898c:	2301      	movs	r3, #1
 800898e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	f383 8810 	msr	PRIMASK, r3
}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2101      	movs	r1, #1
 80089a4:	438a      	bics	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	f383 8810 	msr	PRIMASK, r3
}
 80089b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2280      	movs	r2, #128	; 0x80
 80089b8:	2120      	movs	r1, #32
 80089ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	2380      	movs	r3, #128	; 0x80
 80089d0:	041b      	lsls	r3, r3, #16
 80089d2:	4013      	ands	r3, r2
 80089d4:	d018      	beq.n	8008a08 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089d6:	f3ef 8310 	mrs	r3, PRIMASK
 80089da:	617b      	str	r3, [r7, #20]
  return(result);
 80089dc:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e0:	2301      	movs	r3, #1
 80089e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4928      	ldr	r1, [pc, #160]	; (8008a98 <UART_RxISR_16BIT+0x1b4>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f383 8810 	msr	PRIMASK, r3
}
 8008a06:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d12f      	bne.n	8008a70 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a16:	f3ef 8310 	mrs	r3, PRIMASK
 8008a1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a1c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a20:	2301      	movs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f383 8810 	msr	PRIMASK, r3
}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2110      	movs	r1, #16
 8008a38:	438a      	bics	r2, r1
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f383 8810 	msr	PRIMASK, r3
}
 8008a46:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	2210      	movs	r2, #16
 8008a50:	4013      	ands	r3, r2
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d103      	bne.n	8008a5e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2258      	movs	r2, #88	; 0x58
 8008a62:	5a9a      	ldrh	r2, [r3, r2]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	0011      	movs	r1, r2
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f7ff f9f1 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a6e:	e00c      	b.n	8008a8a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	0018      	movs	r0, r3
 8008a74:	f7fa f94a 	bl	8002d0c <HAL_UART_RxCpltCallback>
}
 8008a78:	e007      	b.n	8008a8a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	699a      	ldr	r2, [r3, #24]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2108      	movs	r1, #8
 8008a86:	430a      	orrs	r2, r1
 8008a88:	619a      	str	r2, [r3, #24]
}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	b014      	add	sp, #80	; 0x50
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	fffffedf 	.word	0xfffffedf
 8008a98:	fbffffff 	.word	0xfbffffff

08008a9c <__errno>:
 8008a9c:	4b01      	ldr	r3, [pc, #4]	; (8008aa4 <__errno+0x8>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	4770      	bx	lr
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	20000030 	.word	0x20000030

08008aa8 <__libc_init_array>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	2600      	movs	r6, #0
 8008aac:	4d0c      	ldr	r5, [pc, #48]	; (8008ae0 <__libc_init_array+0x38>)
 8008aae:	4c0d      	ldr	r4, [pc, #52]	; (8008ae4 <__libc_init_array+0x3c>)
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	42a6      	cmp	r6, r4
 8008ab6:	d109      	bne.n	8008acc <__libc_init_array+0x24>
 8008ab8:	2600      	movs	r6, #0
 8008aba:	f004 fd65 	bl	800d588 <_init>
 8008abe:	4d0a      	ldr	r5, [pc, #40]	; (8008ae8 <__libc_init_array+0x40>)
 8008ac0:	4c0a      	ldr	r4, [pc, #40]	; (8008aec <__libc_init_array+0x44>)
 8008ac2:	1b64      	subs	r4, r4, r5
 8008ac4:	10a4      	asrs	r4, r4, #2
 8008ac6:	42a6      	cmp	r6, r4
 8008ac8:	d105      	bne.n	8008ad6 <__libc_init_array+0x2e>
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	00b3      	lsls	r3, r6, #2
 8008ace:	58eb      	ldr	r3, [r5, r3]
 8008ad0:	4798      	blx	r3
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7ee      	b.n	8008ab4 <__libc_init_array+0xc>
 8008ad6:	00b3      	lsls	r3, r6, #2
 8008ad8:	58eb      	ldr	r3, [r5, r3]
 8008ada:	4798      	blx	r3
 8008adc:	3601      	adds	r6, #1
 8008ade:	e7f2      	b.n	8008ac6 <__libc_init_array+0x1e>
 8008ae0:	0800dbcc 	.word	0x0800dbcc
 8008ae4:	0800dbcc 	.word	0x0800dbcc
 8008ae8:	0800dbcc 	.word	0x0800dbcc
 8008aec:	0800dbd0 	.word	0x0800dbd0

08008af0 <memcpy>:
 8008af0:	2300      	movs	r3, #0
 8008af2:	b510      	push	{r4, lr}
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d100      	bne.n	8008afa <memcpy+0xa>
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	5ccc      	ldrb	r4, [r1, r3]
 8008afc:	54c4      	strb	r4, [r0, r3]
 8008afe:	3301      	adds	r3, #1
 8008b00:	e7f8      	b.n	8008af4 <memcpy+0x4>

08008b02 <memset>:
 8008b02:	0003      	movs	r3, r0
 8008b04:	1882      	adds	r2, r0, r2
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d100      	bne.n	8008b0c <memset+0xa>
 8008b0a:	4770      	bx	lr
 8008b0c:	7019      	strb	r1, [r3, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	e7f9      	b.n	8008b06 <memset+0x4>

08008b12 <__cvt>:
 8008b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b14:	001e      	movs	r6, r3
 8008b16:	2300      	movs	r3, #0
 8008b18:	0014      	movs	r4, r2
 8008b1a:	b08b      	sub	sp, #44	; 0x2c
 8008b1c:	429e      	cmp	r6, r3
 8008b1e:	da04      	bge.n	8008b2a <__cvt+0x18>
 8008b20:	2180      	movs	r1, #128	; 0x80
 8008b22:	0609      	lsls	r1, r1, #24
 8008b24:	1873      	adds	r3, r6, r1
 8008b26:	001e      	movs	r6, r3
 8008b28:	232d      	movs	r3, #45	; 0x2d
 8008b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b2c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b2e:	7013      	strb	r3, [r2, #0]
 8008b30:	2320      	movs	r3, #32
 8008b32:	2203      	movs	r2, #3
 8008b34:	439f      	bics	r7, r3
 8008b36:	2f46      	cmp	r7, #70	; 0x46
 8008b38:	d007      	beq.n	8008b4a <__cvt+0x38>
 8008b3a:	003b      	movs	r3, r7
 8008b3c:	3b45      	subs	r3, #69	; 0x45
 8008b3e:	4259      	negs	r1, r3
 8008b40:	414b      	adcs	r3, r1
 8008b42:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b44:	3a01      	subs	r2, #1
 8008b46:	18cb      	adds	r3, r1, r3
 8008b48:	9310      	str	r3, [sp, #64]	; 0x40
 8008b4a:	ab09      	add	r3, sp, #36	; 0x24
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	ab08      	add	r3, sp, #32
 8008b50:	9303      	str	r3, [sp, #12]
 8008b52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b54:	9200      	str	r2, [sp, #0]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b5a:	0022      	movs	r2, r4
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	0033      	movs	r3, r6
 8008b60:	f001 fdde 	bl	800a720 <_dtoa_r>
 8008b64:	0005      	movs	r5, r0
 8008b66:	2f47      	cmp	r7, #71	; 0x47
 8008b68:	d102      	bne.n	8008b70 <__cvt+0x5e>
 8008b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b6c:	07db      	lsls	r3, r3, #31
 8008b6e:	d528      	bpl.n	8008bc2 <__cvt+0xb0>
 8008b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b72:	18eb      	adds	r3, r5, r3
 8008b74:	9307      	str	r3, [sp, #28]
 8008b76:	2f46      	cmp	r7, #70	; 0x46
 8008b78:	d114      	bne.n	8008ba4 <__cvt+0x92>
 8008b7a:	782b      	ldrb	r3, [r5, #0]
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d10c      	bne.n	8008b9a <__cvt+0x88>
 8008b80:	2200      	movs	r2, #0
 8008b82:	2300      	movs	r3, #0
 8008b84:	0020      	movs	r0, r4
 8008b86:	0031      	movs	r1, r6
 8008b88:	f7f7 fc60 	bl	800044c <__aeabi_dcmpeq>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d104      	bne.n	8008b9a <__cvt+0x88>
 8008b90:	2301      	movs	r3, #1
 8008b92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b9c:	9a07      	ldr	r2, [sp, #28]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	18d3      	adds	r3, r2, r3
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	0020      	movs	r0, r4
 8008baa:	0031      	movs	r1, r6
 8008bac:	f7f7 fc4e 	bl	800044c <__aeabi_dcmpeq>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d001      	beq.n	8008bb8 <__cvt+0xa6>
 8008bb4:	9b07      	ldr	r3, [sp, #28]
 8008bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb8:	2230      	movs	r2, #48	; 0x30
 8008bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbc:	9907      	ldr	r1, [sp, #28]
 8008bbe:	428b      	cmp	r3, r1
 8008bc0:	d306      	bcc.n	8008bd0 <__cvt+0xbe>
 8008bc2:	0028      	movs	r0, r5
 8008bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bc8:	1b5b      	subs	r3, r3, r5
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	b00b      	add	sp, #44	; 0x2c
 8008bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd0:	1c59      	adds	r1, r3, #1
 8008bd2:	9109      	str	r1, [sp, #36]	; 0x24
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e7f0      	b.n	8008bba <__cvt+0xa8>

08008bd8 <__exponent>:
 8008bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bda:	1c83      	adds	r3, r0, #2
 8008bdc:	b087      	sub	sp, #28
 8008bde:	9303      	str	r3, [sp, #12]
 8008be0:	0005      	movs	r5, r0
 8008be2:	000c      	movs	r4, r1
 8008be4:	232b      	movs	r3, #43	; 0x2b
 8008be6:	7002      	strb	r2, [r0, #0]
 8008be8:	2900      	cmp	r1, #0
 8008bea:	da01      	bge.n	8008bf0 <__exponent+0x18>
 8008bec:	424c      	negs	r4, r1
 8008bee:	3302      	adds	r3, #2
 8008bf0:	706b      	strb	r3, [r5, #1]
 8008bf2:	2c09      	cmp	r4, #9
 8008bf4:	dd31      	ble.n	8008c5a <__exponent+0x82>
 8008bf6:	270a      	movs	r7, #10
 8008bf8:	ab04      	add	r3, sp, #16
 8008bfa:	1dde      	adds	r6, r3, #7
 8008bfc:	0020      	movs	r0, r4
 8008bfe:	0039      	movs	r1, r7
 8008c00:	9601      	str	r6, [sp, #4]
 8008c02:	f7f7 fc0d 	bl	8000420 <__aeabi_idivmod>
 8008c06:	3e01      	subs	r6, #1
 8008c08:	3130      	adds	r1, #48	; 0x30
 8008c0a:	0020      	movs	r0, r4
 8008c0c:	7031      	strb	r1, [r6, #0]
 8008c0e:	0039      	movs	r1, r7
 8008c10:	9402      	str	r4, [sp, #8]
 8008c12:	f7f7 fb1f 	bl	8000254 <__divsi3>
 8008c16:	9b02      	ldr	r3, [sp, #8]
 8008c18:	0004      	movs	r4, r0
 8008c1a:	2b63      	cmp	r3, #99	; 0x63
 8008c1c:	dcee      	bgt.n	8008bfc <__exponent+0x24>
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	3430      	adds	r4, #48	; 0x30
 8008c22:	1e9a      	subs	r2, r3, #2
 8008c24:	0013      	movs	r3, r2
 8008c26:	9903      	ldr	r1, [sp, #12]
 8008c28:	7014      	strb	r4, [r2, #0]
 8008c2a:	a804      	add	r0, sp, #16
 8008c2c:	3007      	adds	r0, #7
 8008c2e:	4298      	cmp	r0, r3
 8008c30:	d80e      	bhi.n	8008c50 <__exponent+0x78>
 8008c32:	ab04      	add	r3, sp, #16
 8008c34:	3307      	adds	r3, #7
 8008c36:	2000      	movs	r0, #0
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d804      	bhi.n	8008c46 <__exponent+0x6e>
 8008c3c:	ab04      	add	r3, sp, #16
 8008c3e:	3009      	adds	r0, #9
 8008c40:	18c0      	adds	r0, r0, r3
 8008c42:	9b01      	ldr	r3, [sp, #4]
 8008c44:	1ac0      	subs	r0, r0, r3
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	1818      	adds	r0, r3, r0
 8008c4a:	1b40      	subs	r0, r0, r5
 8008c4c:	b007      	add	sp, #28
 8008c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c50:	7818      	ldrb	r0, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	7008      	strb	r0, [r1, #0]
 8008c56:	3101      	adds	r1, #1
 8008c58:	e7e7      	b.n	8008c2a <__exponent+0x52>
 8008c5a:	2330      	movs	r3, #48	; 0x30
 8008c5c:	18e4      	adds	r4, r4, r3
 8008c5e:	70ab      	strb	r3, [r5, #2]
 8008c60:	1d28      	adds	r0, r5, #4
 8008c62:	70ec      	strb	r4, [r5, #3]
 8008c64:	e7f1      	b.n	8008c4a <__exponent+0x72>
	...

08008c68 <_printf_float>:
 8008c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6a:	b095      	sub	sp, #84	; 0x54
 8008c6c:	000c      	movs	r4, r1
 8008c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c70:	001e      	movs	r6, r3
 8008c72:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008c74:	0007      	movs	r7, r0
 8008c76:	f002 ffe3 	bl	800bc40 <_localeconv_r>
 8008c7a:	6803      	ldr	r3, [r0, #0]
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c80:	f7f7 fa42 	bl	8000108 <strlen>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9312      	str	r3, [sp, #72]	; 0x48
 8008c88:	7e23      	ldrb	r3, [r4, #24]
 8008c8a:	2207      	movs	r2, #7
 8008c8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	900e      	str	r0, [sp, #56]	; 0x38
 8008c92:	930d      	str	r3, [sp, #52]	; 0x34
 8008c94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c96:	682b      	ldr	r3, [r5, #0]
 8008c98:	05c9      	lsls	r1, r1, #23
 8008c9a:	d547      	bpl.n	8008d2c <_printf_float+0xc4>
 8008c9c:	189b      	adds	r3, r3, r2
 8008c9e:	4393      	bics	r3, r2
 8008ca0:	001a      	movs	r2, r3
 8008ca2:	3208      	adds	r2, #8
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	64a2      	str	r2, [r4, #72]	; 0x48
 8008cac:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008cae:	2201      	movs	r2, #1
 8008cb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008cb2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb6:	006b      	lsls	r3, r5, #1
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cbc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008cbe:	4ba7      	ldr	r3, [pc, #668]	; (8008f5c <_printf_float+0x2f4>)
 8008cc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cc2:	4252      	negs	r2, r2
 8008cc4:	f7f9 fcce 	bl	8002664 <__aeabi_dcmpun>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d131      	bne.n	8008d30 <_printf_float+0xc8>
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4ba3      	ldr	r3, [pc, #652]	; (8008f5c <_printf_float+0x2f4>)
 8008cd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008cd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cd4:	4252      	negs	r2, r2
 8008cd6:	f7f7 fbc9 	bl	800046c <__aeabi_dcmple>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d128      	bne.n	8008d30 <_printf_float+0xc8>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	0029      	movs	r1, r5
 8008ce4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ce6:	f7f7 fbb7 	bl	8000458 <__aeabi_dcmplt>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d003      	beq.n	8008cf6 <_printf_float+0x8e>
 8008cee:	0023      	movs	r3, r4
 8008cf0:	222d      	movs	r2, #45	; 0x2d
 8008cf2:	3343      	adds	r3, #67	; 0x43
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf8:	4d99      	ldr	r5, [pc, #612]	; (8008f60 <_printf_float+0x2f8>)
 8008cfa:	2b47      	cmp	r3, #71	; 0x47
 8008cfc:	d900      	bls.n	8008d00 <_printf_float+0x98>
 8008cfe:	4d99      	ldr	r5, [pc, #612]	; (8008f64 <_printf_float+0x2fc>)
 8008d00:	2303      	movs	r3, #3
 8008d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	3301      	adds	r3, #1
 8008d08:	439a      	bics	r2, r3
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	6022      	str	r2, [r4, #0]
 8008d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	0021      	movs	r1, r4
 8008d14:	0038      	movs	r0, r7
 8008d16:	9600      	str	r6, [sp, #0]
 8008d18:	aa13      	add	r2, sp, #76	; 0x4c
 8008d1a:	f000 f9e7 	bl	80090ec <_printf_common>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d000      	beq.n	8008d24 <_printf_float+0xbc>
 8008d22:	e0a2      	b.n	8008e6a <_printf_float+0x202>
 8008d24:	2001      	movs	r0, #1
 8008d26:	4240      	negs	r0, r0
 8008d28:	b015      	add	sp, #84	; 0x54
 8008d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2c:	3307      	adds	r3, #7
 8008d2e:	e7b6      	b.n	8008c9e <_printf_float+0x36>
 8008d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d32:	002b      	movs	r3, r5
 8008d34:	0010      	movs	r0, r2
 8008d36:	0029      	movs	r1, r5
 8008d38:	f7f9 fc94 	bl	8002664 <__aeabi_dcmpun>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d00b      	beq.n	8008d58 <_printf_float+0xf0>
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	da03      	bge.n	8008d4c <_printf_float+0xe4>
 8008d44:	0023      	movs	r3, r4
 8008d46:	222d      	movs	r2, #45	; 0x2d
 8008d48:	3343      	adds	r3, #67	; 0x43
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4e:	4d86      	ldr	r5, [pc, #536]	; (8008f68 <_printf_float+0x300>)
 8008d50:	2b47      	cmp	r3, #71	; 0x47
 8008d52:	d9d5      	bls.n	8008d00 <_printf_float+0x98>
 8008d54:	4d85      	ldr	r5, [pc, #532]	; (8008f6c <_printf_float+0x304>)
 8008d56:	e7d3      	b.n	8008d00 <_printf_float+0x98>
 8008d58:	2220      	movs	r2, #32
 8008d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	4391      	bics	r1, r2
 8008d60:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	d149      	bne.n	8008dfa <_printf_float+0x192>
 8008d66:	3307      	adds	r3, #7
 8008d68:	6063      	str	r3, [r4, #4]
 8008d6a:	2380      	movs	r3, #128	; 0x80
 8008d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4313      	orrs	r3, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	9206      	str	r2, [sp, #24]
 8008d76:	aa12      	add	r2, sp, #72	; 0x48
 8008d78:	9205      	str	r2, [sp, #20]
 8008d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7c:	a908      	add	r1, sp, #32
 8008d7e:	9204      	str	r2, [sp, #16]
 8008d80:	aa11      	add	r2, sp, #68	; 0x44
 8008d82:	9203      	str	r2, [sp, #12]
 8008d84:	2223      	movs	r2, #35	; 0x23
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	1852      	adds	r2, r2, r1
 8008d8e:	9202      	str	r2, [sp, #8]
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	0038      	movs	r0, r7
 8008d94:	002b      	movs	r3, r5
 8008d96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d98:	f7ff febb 	bl	8008b12 <__cvt>
 8008d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d9e:	0005      	movs	r5, r0
 8008da0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008da2:	2b47      	cmp	r3, #71	; 0x47
 8008da4:	d108      	bne.n	8008db8 <_printf_float+0x150>
 8008da6:	1ccb      	adds	r3, r1, #3
 8008da8:	db02      	blt.n	8008db0 <_printf_float+0x148>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	4299      	cmp	r1, r3
 8008dae:	dd48      	ble.n	8008e42 <_printf_float+0x1da>
 8008db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db2:	3b02      	subs	r3, #2
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	930a      	str	r3, [sp, #40]	; 0x28
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	2b65      	cmp	r3, #101	; 0x65
 8008dbc:	d824      	bhi.n	8008e08 <_printf_float+0x1a0>
 8008dbe:	0020      	movs	r0, r4
 8008dc0:	001a      	movs	r2, r3
 8008dc2:	3901      	subs	r1, #1
 8008dc4:	3050      	adds	r0, #80	; 0x50
 8008dc6:	9111      	str	r1, [sp, #68]	; 0x44
 8008dc8:	f7ff ff06 	bl	8008bd8 <__exponent>
 8008dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dce:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dd0:	1813      	adds	r3, r2, r0
 8008dd2:	6123      	str	r3, [r4, #16]
 8008dd4:	2a01      	cmp	r2, #1
 8008dd6:	dc02      	bgt.n	8008dde <_printf_float+0x176>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	07d2      	lsls	r2, r2, #31
 8008ddc:	d501      	bpl.n	8008de2 <_printf_float+0x17a>
 8008dde:	3301      	adds	r3, #1
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	2323      	movs	r3, #35	; 0x23
 8008de4:	aa08      	add	r2, sp, #32
 8008de6:	189b      	adds	r3, r3, r2
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d100      	bne.n	8008df0 <_printf_float+0x188>
 8008dee:	e78f      	b.n	8008d10 <_printf_float+0xa8>
 8008df0:	0023      	movs	r3, r4
 8008df2:	222d      	movs	r2, #45	; 0x2d
 8008df4:	3343      	adds	r3, #67	; 0x43
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e78a      	b.n	8008d10 <_printf_float+0xa8>
 8008dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dfc:	2a47      	cmp	r2, #71	; 0x47
 8008dfe:	d1b4      	bne.n	8008d6a <_printf_float+0x102>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1b2      	bne.n	8008d6a <_printf_float+0x102>
 8008e04:	3301      	adds	r3, #1
 8008e06:	e7af      	b.n	8008d68 <_printf_float+0x100>
 8008e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e0a:	2b66      	cmp	r3, #102	; 0x66
 8008e0c:	d11b      	bne.n	8008e46 <_printf_float+0x1de>
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	2900      	cmp	r1, #0
 8008e12:	dd0d      	ble.n	8008e30 <_printf_float+0x1c8>
 8008e14:	6121      	str	r1, [r4, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <_printf_float+0x1b8>
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	07d2      	lsls	r2, r2, #31
 8008e1e:	d502      	bpl.n	8008e26 <_printf_float+0x1be>
 8008e20:	3301      	adds	r3, #1
 8008e22:	1859      	adds	r1, r3, r1
 8008e24:	6121      	str	r1, [r4, #16]
 8008e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e28:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2e:	e7d8      	b.n	8008de2 <_printf_float+0x17a>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <_printf_float+0x1d4>
 8008e34:	2201      	movs	r2, #1
 8008e36:	6821      	ldr	r1, [r4, #0]
 8008e38:	4211      	tst	r1, r2
 8008e3a:	d000      	beq.n	8008e3e <_printf_float+0x1d6>
 8008e3c:	1c9a      	adds	r2, r3, #2
 8008e3e:	6122      	str	r2, [r4, #16]
 8008e40:	e7f1      	b.n	8008e26 <_printf_float+0x1be>
 8008e42:	2367      	movs	r3, #103	; 0x67
 8008e44:	930a      	str	r3, [sp, #40]	; 0x28
 8008e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	db06      	blt.n	8008e5c <_printf_float+0x1f4>
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	07d2      	lsls	r2, r2, #31
 8008e54:	d5e7      	bpl.n	8008e26 <_printf_float+0x1be>
 8008e56:	3301      	adds	r3, #1
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	e7e4      	b.n	8008e26 <_printf_float+0x1be>
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dc01      	bgt.n	8008e66 <_printf_float+0x1fe>
 8008e62:	1849      	adds	r1, r1, r1
 8008e64:	1ac9      	subs	r1, r1, r3
 8008e66:	1852      	adds	r2, r2, r1
 8008e68:	e7e9      	b.n	8008e3e <_printf_float+0x1d6>
 8008e6a:	6822      	ldr	r2, [r4, #0]
 8008e6c:	0553      	lsls	r3, r2, #21
 8008e6e:	d407      	bmi.n	8008e80 <_printf_float+0x218>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	002a      	movs	r2, r5
 8008e74:	0038      	movs	r0, r7
 8008e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e78:	47b0      	blx	r6
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d128      	bne.n	8008ed0 <_printf_float+0x268>
 8008e7e:	e751      	b.n	8008d24 <_printf_float+0xbc>
 8008e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e82:	2b65      	cmp	r3, #101	; 0x65
 8008e84:	d800      	bhi.n	8008e88 <_printf_float+0x220>
 8008e86:	e0e1      	b.n	800904c <_printf_float+0x3e4>
 8008e88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008e8a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f7f7 fadc 	bl	800044c <__aeabi_dcmpeq>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d031      	beq.n	8008efc <_printf_float+0x294>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	0038      	movs	r0, r7
 8008e9c:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <_printf_float+0x308>)
 8008e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea0:	47b0      	blx	r6
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d100      	bne.n	8008ea8 <_printf_float+0x240>
 8008ea6:	e73d      	b.n	8008d24 <_printf_float+0xbc>
 8008ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eac:	4293      	cmp	r3, r2
 8008eae:	db02      	blt.n	8008eb6 <_printf_float+0x24e>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07db      	lsls	r3, r3, #31
 8008eb4:	d50c      	bpl.n	8008ed0 <_printf_float+0x268>
 8008eb6:	0038      	movs	r0, r7
 8008eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ebe:	47b0      	blx	r6
 8008ec0:	2500      	movs	r5, #0
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	d100      	bne.n	8008ec8 <_printf_float+0x260>
 8008ec6:	e72d      	b.n	8008d24 <_printf_float+0xbc>
 8008ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dc0a      	bgt.n	8008ee6 <_printf_float+0x27e>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	079b      	lsls	r3, r3, #30
 8008ed4:	d500      	bpl.n	8008ed8 <_printf_float+0x270>
 8008ed6:	e106      	b.n	80090e6 <_printf_float+0x47e>
 8008ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eda:	68e0      	ldr	r0, [r4, #12]
 8008edc:	4298      	cmp	r0, r3
 8008ede:	db00      	blt.n	8008ee2 <_printf_float+0x27a>
 8008ee0:	e722      	b.n	8008d28 <_printf_float+0xc0>
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	e720      	b.n	8008d28 <_printf_float+0xc0>
 8008ee6:	0022      	movs	r2, r4
 8008ee8:	2301      	movs	r3, #1
 8008eea:	0038      	movs	r0, r7
 8008eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eee:	321a      	adds	r2, #26
 8008ef0:	47b0      	blx	r6
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	d100      	bne.n	8008ef8 <_printf_float+0x290>
 8008ef6:	e715      	b.n	8008d24 <_printf_float+0xbc>
 8008ef8:	3501      	adds	r5, #1
 8008efa:	e7e5      	b.n	8008ec8 <_printf_float+0x260>
 8008efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dc38      	bgt.n	8008f74 <_printf_float+0x30c>
 8008f02:	2301      	movs	r3, #1
 8008f04:	0038      	movs	r0, r7
 8008f06:	4a1a      	ldr	r2, [pc, #104]	; (8008f70 <_printf_float+0x308>)
 8008f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0a:	47b0      	blx	r6
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d100      	bne.n	8008f12 <_printf_float+0x2aa>
 8008f10:	e708      	b.n	8008d24 <_printf_float+0xbc>
 8008f12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f16:	4313      	orrs	r3, r2
 8008f18:	d102      	bne.n	8008f20 <_printf_float+0x2b8>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	07db      	lsls	r3, r3, #31
 8008f1e:	d5d7      	bpl.n	8008ed0 <_printf_float+0x268>
 8008f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f22:	0038      	movs	r0, r7
 8008f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f28:	47b0      	blx	r6
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d100      	bne.n	8008f30 <_printf_float+0x2c8>
 8008f2e:	e6f9      	b.n	8008d24 <_printf_float+0xbc>
 8008f30:	2300      	movs	r3, #0
 8008f32:	930a      	str	r3, [sp, #40]	; 0x28
 8008f34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f38:	425b      	negs	r3, r3
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	dc01      	bgt.n	8008f42 <_printf_float+0x2da>
 8008f3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f40:	e797      	b.n	8008e72 <_printf_float+0x20a>
 8008f42:	0022      	movs	r2, r4
 8008f44:	2301      	movs	r3, #1
 8008f46:	0038      	movs	r0, r7
 8008f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f4a:	321a      	adds	r2, #26
 8008f4c:	47b0      	blx	r6
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	d100      	bne.n	8008f54 <_printf_float+0x2ec>
 8008f52:	e6e7      	b.n	8008d24 <_printf_float+0xbc>
 8008f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f56:	3301      	adds	r3, #1
 8008f58:	e7eb      	b.n	8008f32 <_printf_float+0x2ca>
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	7fefffff 	.word	0x7fefffff
 8008f60:	0800d724 	.word	0x0800d724
 8008f64:	0800d728 	.word	0x0800d728
 8008f68:	0800d72c 	.word	0x0800d72c
 8008f6c:	0800d730 	.word	0x0800d730
 8008f70:	0800d734 	.word	0x0800d734
 8008f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f78:	920a      	str	r2, [sp, #40]	; 0x28
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	dd00      	ble.n	8008f80 <_printf_float+0x318>
 8008f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dc3c      	bgt.n	8009000 <_printf_float+0x398>
 8008f86:	2300      	movs	r3, #0
 8008f88:	930d      	str	r3, [sp, #52]	; 0x34
 8008f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	17db      	asrs	r3, r3, #31
 8008f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	dc34      	bgt.n	8009010 <_printf_float+0x3a8>
 8008fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008faa:	4293      	cmp	r3, r2
 8008fac:	db3d      	blt.n	800902a <_printf_float+0x3c2>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	07db      	lsls	r3, r3, #31
 8008fb2:	d43a      	bmi.n	800902a <_printf_float+0x3c2>
 8008fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	1a52      	subs	r2, r2, r1
 8008fbe:	920a      	str	r2, [sp, #40]	; 0x28
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	dd00      	ble.n	8008fc6 <_printf_float+0x35e>
 8008fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc36      	bgt.n	800903a <_printf_float+0x3d2>
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fce:	2500      	movs	r5, #0
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	17db      	asrs	r3, r3, #31
 8008fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fe0:	400a      	ands	r2, r1
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	42ab      	cmp	r3, r5
 8008fe6:	dc00      	bgt.n	8008fea <_printf_float+0x382>
 8008fe8:	e772      	b.n	8008ed0 <_printf_float+0x268>
 8008fea:	0022      	movs	r2, r4
 8008fec:	2301      	movs	r3, #1
 8008fee:	0038      	movs	r0, r7
 8008ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ff2:	321a      	adds	r2, #26
 8008ff4:	47b0      	blx	r6
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d100      	bne.n	8008ffc <_printf_float+0x394>
 8008ffa:	e693      	b.n	8008d24 <_printf_float+0xbc>
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	e7ea      	b.n	8008fd6 <_printf_float+0x36e>
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	002a      	movs	r2, r5
 8009004:	0038      	movs	r0, r7
 8009006:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009008:	47b0      	blx	r6
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d1bb      	bne.n	8008f86 <_printf_float+0x31e>
 800900e:	e689      	b.n	8008d24 <_printf_float+0xbc>
 8009010:	0022      	movs	r2, r4
 8009012:	2301      	movs	r3, #1
 8009014:	0038      	movs	r0, r7
 8009016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009018:	321a      	adds	r2, #26
 800901a:	47b0      	blx	r6
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d100      	bne.n	8009022 <_printf_float+0x3ba>
 8009020:	e680      	b.n	8008d24 <_printf_float+0xbc>
 8009022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009024:	3301      	adds	r3, #1
 8009026:	930d      	str	r3, [sp, #52]	; 0x34
 8009028:	e7b3      	b.n	8008f92 <_printf_float+0x32a>
 800902a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902c:	0038      	movs	r0, r7
 800902e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009032:	47b0      	blx	r6
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d1bd      	bne.n	8008fb4 <_printf_float+0x34c>
 8009038:	e674      	b.n	8008d24 <_printf_float+0xbc>
 800903a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800903c:	0038      	movs	r0, r7
 800903e:	18ea      	adds	r2, r5, r3
 8009040:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009044:	47b0      	blx	r6
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d1c0      	bne.n	8008fcc <_printf_float+0x364>
 800904a:	e66b      	b.n	8008d24 <_printf_float+0xbc>
 800904c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800904e:	2b01      	cmp	r3, #1
 8009050:	dc02      	bgt.n	8009058 <_printf_float+0x3f0>
 8009052:	2301      	movs	r3, #1
 8009054:	421a      	tst	r2, r3
 8009056:	d034      	beq.n	80090c2 <_printf_float+0x45a>
 8009058:	2301      	movs	r3, #1
 800905a:	002a      	movs	r2, r5
 800905c:	0038      	movs	r0, r7
 800905e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009060:	47b0      	blx	r6
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	d100      	bne.n	8009068 <_printf_float+0x400>
 8009066:	e65d      	b.n	8008d24 <_printf_float+0xbc>
 8009068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800906a:	0038      	movs	r0, r7
 800906c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800906e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009070:	47b0      	blx	r6
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d100      	bne.n	8009078 <_printf_float+0x410>
 8009076:	e655      	b.n	8008d24 <_printf_float+0xbc>
 8009078:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800907a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800907c:	2200      	movs	r2, #0
 800907e:	2300      	movs	r3, #0
 8009080:	f7f7 f9e4 	bl	800044c <__aeabi_dcmpeq>
 8009084:	2800      	cmp	r0, #0
 8009086:	d11a      	bne.n	80090be <_printf_float+0x456>
 8009088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800908a:	1c6a      	adds	r2, r5, #1
 800908c:	3b01      	subs	r3, #1
 800908e:	0038      	movs	r0, r7
 8009090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009092:	47b0      	blx	r6
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d10e      	bne.n	80090b6 <_printf_float+0x44e>
 8009098:	e644      	b.n	8008d24 <_printf_float+0xbc>
 800909a:	0022      	movs	r2, r4
 800909c:	2301      	movs	r3, #1
 800909e:	0038      	movs	r0, r7
 80090a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090a2:	321a      	adds	r2, #26
 80090a4:	47b0      	blx	r6
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d100      	bne.n	80090ac <_printf_float+0x444>
 80090aa:	e63b      	b.n	8008d24 <_printf_float+0xbc>
 80090ac:	3501      	adds	r5, #1
 80090ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090b0:	3b01      	subs	r3, #1
 80090b2:	42ab      	cmp	r3, r5
 80090b4:	dcf1      	bgt.n	800909a <_printf_float+0x432>
 80090b6:	0022      	movs	r2, r4
 80090b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ba:	3250      	adds	r2, #80	; 0x50
 80090bc:	e6da      	b.n	8008e74 <_printf_float+0x20c>
 80090be:	2500      	movs	r5, #0
 80090c0:	e7f5      	b.n	80090ae <_printf_float+0x446>
 80090c2:	002a      	movs	r2, r5
 80090c4:	e7e3      	b.n	800908e <_printf_float+0x426>
 80090c6:	0022      	movs	r2, r4
 80090c8:	2301      	movs	r3, #1
 80090ca:	0038      	movs	r0, r7
 80090cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ce:	3219      	adds	r2, #25
 80090d0:	47b0      	blx	r6
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d100      	bne.n	80090d8 <_printf_float+0x470>
 80090d6:	e625      	b.n	8008d24 <_printf_float+0xbc>
 80090d8:	3501      	adds	r5, #1
 80090da:	68e3      	ldr	r3, [r4, #12]
 80090dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	dcf0      	bgt.n	80090c6 <_printf_float+0x45e>
 80090e4:	e6f8      	b.n	8008ed8 <_printf_float+0x270>
 80090e6:	2500      	movs	r5, #0
 80090e8:	e7f7      	b.n	80090da <_printf_float+0x472>
 80090ea:	46c0      	nop			; (mov r8, r8)

080090ec <_printf_common>:
 80090ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ee:	0015      	movs	r5, r2
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	688a      	ldr	r2, [r1, #8]
 80090f4:	690b      	ldr	r3, [r1, #16]
 80090f6:	000c      	movs	r4, r1
 80090f8:	9000      	str	r0, [sp, #0]
 80090fa:	4293      	cmp	r3, r2
 80090fc:	da00      	bge.n	8009100 <_printf_common+0x14>
 80090fe:	0013      	movs	r3, r2
 8009100:	0022      	movs	r2, r4
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	3243      	adds	r2, #67	; 0x43
 8009106:	7812      	ldrb	r2, [r2, #0]
 8009108:	2a00      	cmp	r2, #0
 800910a:	d001      	beq.n	8009110 <_printf_common+0x24>
 800910c:	3301      	adds	r3, #1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	069b      	lsls	r3, r3, #26
 8009114:	d502      	bpl.n	800911c <_printf_common+0x30>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	3302      	adds	r3, #2
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	6822      	ldr	r2, [r4, #0]
 800911e:	2306      	movs	r3, #6
 8009120:	0017      	movs	r7, r2
 8009122:	401f      	ands	r7, r3
 8009124:	421a      	tst	r2, r3
 8009126:	d027      	beq.n	8009178 <_printf_common+0x8c>
 8009128:	0023      	movs	r3, r4
 800912a:	3343      	adds	r3, #67	; 0x43
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	1e5a      	subs	r2, r3, #1
 8009130:	4193      	sbcs	r3, r2
 8009132:	6822      	ldr	r2, [r4, #0]
 8009134:	0692      	lsls	r2, r2, #26
 8009136:	d430      	bmi.n	800919a <_printf_common+0xae>
 8009138:	0022      	movs	r2, r4
 800913a:	9901      	ldr	r1, [sp, #4]
 800913c:	9800      	ldr	r0, [sp, #0]
 800913e:	9e08      	ldr	r6, [sp, #32]
 8009140:	3243      	adds	r2, #67	; 0x43
 8009142:	47b0      	blx	r6
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d025      	beq.n	8009194 <_printf_common+0xa8>
 8009148:	2306      	movs	r3, #6
 800914a:	6820      	ldr	r0, [r4, #0]
 800914c:	682a      	ldr	r2, [r5, #0]
 800914e:	68e1      	ldr	r1, [r4, #12]
 8009150:	2500      	movs	r5, #0
 8009152:	4003      	ands	r3, r0
 8009154:	2b04      	cmp	r3, #4
 8009156:	d103      	bne.n	8009160 <_printf_common+0x74>
 8009158:	1a8d      	subs	r5, r1, r2
 800915a:	43eb      	mvns	r3, r5
 800915c:	17db      	asrs	r3, r3, #31
 800915e:	401d      	ands	r5, r3
 8009160:	68a3      	ldr	r3, [r4, #8]
 8009162:	6922      	ldr	r2, [r4, #16]
 8009164:	4293      	cmp	r3, r2
 8009166:	dd01      	ble.n	800916c <_printf_common+0x80>
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	18ed      	adds	r5, r5, r3
 800916c:	2700      	movs	r7, #0
 800916e:	42bd      	cmp	r5, r7
 8009170:	d120      	bne.n	80091b4 <_printf_common+0xc8>
 8009172:	2000      	movs	r0, #0
 8009174:	e010      	b.n	8009198 <_printf_common+0xac>
 8009176:	3701      	adds	r7, #1
 8009178:	68e3      	ldr	r3, [r4, #12]
 800917a:	682a      	ldr	r2, [r5, #0]
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	42bb      	cmp	r3, r7
 8009180:	ddd2      	ble.n	8009128 <_printf_common+0x3c>
 8009182:	0022      	movs	r2, r4
 8009184:	2301      	movs	r3, #1
 8009186:	9901      	ldr	r1, [sp, #4]
 8009188:	9800      	ldr	r0, [sp, #0]
 800918a:	9e08      	ldr	r6, [sp, #32]
 800918c:	3219      	adds	r2, #25
 800918e:	47b0      	blx	r6
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d1f0      	bne.n	8009176 <_printf_common+0x8a>
 8009194:	2001      	movs	r0, #1
 8009196:	4240      	negs	r0, r0
 8009198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800919a:	2030      	movs	r0, #48	; 0x30
 800919c:	18e1      	adds	r1, r4, r3
 800919e:	3143      	adds	r1, #67	; 0x43
 80091a0:	7008      	strb	r0, [r1, #0]
 80091a2:	0021      	movs	r1, r4
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	3145      	adds	r1, #69	; 0x45
 80091a8:	7809      	ldrb	r1, [r1, #0]
 80091aa:	18a2      	adds	r2, r4, r2
 80091ac:	3243      	adds	r2, #67	; 0x43
 80091ae:	3302      	adds	r3, #2
 80091b0:	7011      	strb	r1, [r2, #0]
 80091b2:	e7c1      	b.n	8009138 <_printf_common+0x4c>
 80091b4:	0022      	movs	r2, r4
 80091b6:	2301      	movs	r3, #1
 80091b8:	9901      	ldr	r1, [sp, #4]
 80091ba:	9800      	ldr	r0, [sp, #0]
 80091bc:	9e08      	ldr	r6, [sp, #32]
 80091be:	321a      	adds	r2, #26
 80091c0:	47b0      	blx	r6
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d0e6      	beq.n	8009194 <_printf_common+0xa8>
 80091c6:	3701      	adds	r7, #1
 80091c8:	e7d1      	b.n	800916e <_printf_common+0x82>
	...

080091cc <_printf_i>:
 80091cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ce:	b08b      	sub	sp, #44	; 0x2c
 80091d0:	9206      	str	r2, [sp, #24]
 80091d2:	000a      	movs	r2, r1
 80091d4:	3243      	adds	r2, #67	; 0x43
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	9005      	str	r0, [sp, #20]
 80091da:	9204      	str	r2, [sp, #16]
 80091dc:	7e0a      	ldrb	r2, [r1, #24]
 80091de:	000c      	movs	r4, r1
 80091e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091e2:	2a78      	cmp	r2, #120	; 0x78
 80091e4:	d807      	bhi.n	80091f6 <_printf_i+0x2a>
 80091e6:	2a62      	cmp	r2, #98	; 0x62
 80091e8:	d809      	bhi.n	80091fe <_printf_i+0x32>
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d100      	bne.n	80091f0 <_printf_i+0x24>
 80091ee:	e0c1      	b.n	8009374 <_printf_i+0x1a8>
 80091f0:	2a58      	cmp	r2, #88	; 0x58
 80091f2:	d100      	bne.n	80091f6 <_printf_i+0x2a>
 80091f4:	e08c      	b.n	8009310 <_printf_i+0x144>
 80091f6:	0026      	movs	r6, r4
 80091f8:	3642      	adds	r6, #66	; 0x42
 80091fa:	7032      	strb	r2, [r6, #0]
 80091fc:	e022      	b.n	8009244 <_printf_i+0x78>
 80091fe:	0010      	movs	r0, r2
 8009200:	3863      	subs	r0, #99	; 0x63
 8009202:	2815      	cmp	r0, #21
 8009204:	d8f7      	bhi.n	80091f6 <_printf_i+0x2a>
 8009206:	f7f6 ff91 	bl	800012c <__gnu_thumb1_case_shi>
 800920a:	0016      	.short	0x0016
 800920c:	fff6001f 	.word	0xfff6001f
 8009210:	fff6fff6 	.word	0xfff6fff6
 8009214:	001ffff6 	.word	0x001ffff6
 8009218:	fff6fff6 	.word	0xfff6fff6
 800921c:	fff6fff6 	.word	0xfff6fff6
 8009220:	003600a8 	.word	0x003600a8
 8009224:	fff6009a 	.word	0xfff6009a
 8009228:	00b9fff6 	.word	0x00b9fff6
 800922c:	0036fff6 	.word	0x0036fff6
 8009230:	fff6fff6 	.word	0xfff6fff6
 8009234:	009e      	.short	0x009e
 8009236:	0026      	movs	r6, r4
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	3642      	adds	r6, #66	; 0x42
 800923c:	1d11      	adds	r1, r2, #4
 800923e:	6019      	str	r1, [r3, #0]
 8009240:	6813      	ldr	r3, [r2, #0]
 8009242:	7033      	strb	r3, [r6, #0]
 8009244:	2301      	movs	r3, #1
 8009246:	e0a7      	b.n	8009398 <_printf_i+0x1cc>
 8009248:	6808      	ldr	r0, [r1, #0]
 800924a:	6819      	ldr	r1, [r3, #0]
 800924c:	1d0a      	adds	r2, r1, #4
 800924e:	0605      	lsls	r5, r0, #24
 8009250:	d50b      	bpl.n	800926a <_printf_i+0x9e>
 8009252:	680d      	ldr	r5, [r1, #0]
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	2d00      	cmp	r5, #0
 8009258:	da03      	bge.n	8009262 <_printf_i+0x96>
 800925a:	232d      	movs	r3, #45	; 0x2d
 800925c:	9a04      	ldr	r2, [sp, #16]
 800925e:	426d      	negs	r5, r5
 8009260:	7013      	strb	r3, [r2, #0]
 8009262:	4b61      	ldr	r3, [pc, #388]	; (80093e8 <_printf_i+0x21c>)
 8009264:	270a      	movs	r7, #10
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	e01b      	b.n	80092a2 <_printf_i+0xd6>
 800926a:	680d      	ldr	r5, [r1, #0]
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	0641      	lsls	r1, r0, #25
 8009270:	d5f1      	bpl.n	8009256 <_printf_i+0x8a>
 8009272:	b22d      	sxth	r5, r5
 8009274:	e7ef      	b.n	8009256 <_printf_i+0x8a>
 8009276:	680d      	ldr	r5, [r1, #0]
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	1d08      	adds	r0, r1, #4
 800927c:	6018      	str	r0, [r3, #0]
 800927e:	062e      	lsls	r6, r5, #24
 8009280:	d501      	bpl.n	8009286 <_printf_i+0xba>
 8009282:	680d      	ldr	r5, [r1, #0]
 8009284:	e003      	b.n	800928e <_printf_i+0xc2>
 8009286:	066d      	lsls	r5, r5, #25
 8009288:	d5fb      	bpl.n	8009282 <_printf_i+0xb6>
 800928a:	680d      	ldr	r5, [r1, #0]
 800928c:	b2ad      	uxth	r5, r5
 800928e:	4b56      	ldr	r3, [pc, #344]	; (80093e8 <_printf_i+0x21c>)
 8009290:	2708      	movs	r7, #8
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	2a6f      	cmp	r2, #111	; 0x6f
 8009296:	d000      	beq.n	800929a <_printf_i+0xce>
 8009298:	3702      	adds	r7, #2
 800929a:	0023      	movs	r3, r4
 800929c:	2200      	movs	r2, #0
 800929e:	3343      	adds	r3, #67	; 0x43
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	60a3      	str	r3, [r4, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	db03      	blt.n	80092b2 <_printf_i+0xe6>
 80092aa:	2204      	movs	r2, #4
 80092ac:	6821      	ldr	r1, [r4, #0]
 80092ae:	4391      	bics	r1, r2
 80092b0:	6021      	str	r1, [r4, #0]
 80092b2:	2d00      	cmp	r5, #0
 80092b4:	d102      	bne.n	80092bc <_printf_i+0xf0>
 80092b6:	9e04      	ldr	r6, [sp, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <_printf_i+0x10a>
 80092bc:	9e04      	ldr	r6, [sp, #16]
 80092be:	0028      	movs	r0, r5
 80092c0:	0039      	movs	r1, r7
 80092c2:	f7f6 ffc3 	bl	800024c <__aeabi_uidivmod>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	3e01      	subs	r6, #1
 80092ca:	5c5b      	ldrb	r3, [r3, r1]
 80092cc:	7033      	strb	r3, [r6, #0]
 80092ce:	002b      	movs	r3, r5
 80092d0:	0005      	movs	r5, r0
 80092d2:	429f      	cmp	r7, r3
 80092d4:	d9f3      	bls.n	80092be <_printf_i+0xf2>
 80092d6:	2f08      	cmp	r7, #8
 80092d8:	d109      	bne.n	80092ee <_printf_i+0x122>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	07db      	lsls	r3, r3, #31
 80092de:	d506      	bpl.n	80092ee <_printf_i+0x122>
 80092e0:	6863      	ldr	r3, [r4, #4]
 80092e2:	6922      	ldr	r2, [r4, #16]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	dc02      	bgt.n	80092ee <_printf_i+0x122>
 80092e8:	2330      	movs	r3, #48	; 0x30
 80092ea:	3e01      	subs	r6, #1
 80092ec:	7033      	strb	r3, [r6, #0]
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	1b9b      	subs	r3, r3, r6
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	9b07      	ldr	r3, [sp, #28]
 80092f6:	0021      	movs	r1, r4
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	9805      	ldr	r0, [sp, #20]
 80092fc:	9b06      	ldr	r3, [sp, #24]
 80092fe:	aa09      	add	r2, sp, #36	; 0x24
 8009300:	f7ff fef4 	bl	80090ec <_printf_common>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d14c      	bne.n	80093a2 <_printf_i+0x1d6>
 8009308:	2001      	movs	r0, #1
 800930a:	4240      	negs	r0, r0
 800930c:	b00b      	add	sp, #44	; 0x2c
 800930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009310:	3145      	adds	r1, #69	; 0x45
 8009312:	700a      	strb	r2, [r1, #0]
 8009314:	4a34      	ldr	r2, [pc, #208]	; (80093e8 <_printf_i+0x21c>)
 8009316:	9203      	str	r2, [sp, #12]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	6821      	ldr	r1, [r4, #0]
 800931c:	ca20      	ldmia	r2!, {r5}
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	0608      	lsls	r0, r1, #24
 8009322:	d516      	bpl.n	8009352 <_printf_i+0x186>
 8009324:	07cb      	lsls	r3, r1, #31
 8009326:	d502      	bpl.n	800932e <_printf_i+0x162>
 8009328:	2320      	movs	r3, #32
 800932a:	4319      	orrs	r1, r3
 800932c:	6021      	str	r1, [r4, #0]
 800932e:	2710      	movs	r7, #16
 8009330:	2d00      	cmp	r5, #0
 8009332:	d1b2      	bne.n	800929a <_printf_i+0xce>
 8009334:	2320      	movs	r3, #32
 8009336:	6822      	ldr	r2, [r4, #0]
 8009338:	439a      	bics	r2, r3
 800933a:	6022      	str	r2, [r4, #0]
 800933c:	e7ad      	b.n	800929a <_printf_i+0xce>
 800933e:	2220      	movs	r2, #32
 8009340:	6809      	ldr	r1, [r1, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	0022      	movs	r2, r4
 8009348:	2178      	movs	r1, #120	; 0x78
 800934a:	3245      	adds	r2, #69	; 0x45
 800934c:	7011      	strb	r1, [r2, #0]
 800934e:	4a27      	ldr	r2, [pc, #156]	; (80093ec <_printf_i+0x220>)
 8009350:	e7e1      	b.n	8009316 <_printf_i+0x14a>
 8009352:	0648      	lsls	r0, r1, #25
 8009354:	d5e6      	bpl.n	8009324 <_printf_i+0x158>
 8009356:	b2ad      	uxth	r5, r5
 8009358:	e7e4      	b.n	8009324 <_printf_i+0x158>
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	680d      	ldr	r5, [r1, #0]
 800935e:	1d10      	adds	r0, r2, #4
 8009360:	6949      	ldr	r1, [r1, #20]
 8009362:	6018      	str	r0, [r3, #0]
 8009364:	6813      	ldr	r3, [r2, #0]
 8009366:	062e      	lsls	r6, r5, #24
 8009368:	d501      	bpl.n	800936e <_printf_i+0x1a2>
 800936a:	6019      	str	r1, [r3, #0]
 800936c:	e002      	b.n	8009374 <_printf_i+0x1a8>
 800936e:	066d      	lsls	r5, r5, #25
 8009370:	d5fb      	bpl.n	800936a <_printf_i+0x19e>
 8009372:	8019      	strh	r1, [r3, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	9e04      	ldr	r6, [sp, #16]
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	e7bb      	b.n	80092f4 <_printf_i+0x128>
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	1d11      	adds	r1, r2, #4
 8009380:	6019      	str	r1, [r3, #0]
 8009382:	6816      	ldr	r6, [r2, #0]
 8009384:	2100      	movs	r1, #0
 8009386:	0030      	movs	r0, r6
 8009388:	6862      	ldr	r2, [r4, #4]
 800938a:	f002 fc7d 	bl	800bc88 <memchr>
 800938e:	2800      	cmp	r0, #0
 8009390:	d001      	beq.n	8009396 <_printf_i+0x1ca>
 8009392:	1b80      	subs	r0, r0, r6
 8009394:	6060      	str	r0, [r4, #4]
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	2300      	movs	r3, #0
 800939c:	9a04      	ldr	r2, [sp, #16]
 800939e:	7013      	strb	r3, [r2, #0]
 80093a0:	e7a8      	b.n	80092f4 <_printf_i+0x128>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	0032      	movs	r2, r6
 80093a6:	9906      	ldr	r1, [sp, #24]
 80093a8:	9805      	ldr	r0, [sp, #20]
 80093aa:	9d07      	ldr	r5, [sp, #28]
 80093ac:	47a8      	blx	r5
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d0aa      	beq.n	8009308 <_printf_i+0x13c>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	079b      	lsls	r3, r3, #30
 80093b6:	d415      	bmi.n	80093e4 <_printf_i+0x218>
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	68e0      	ldr	r0, [r4, #12]
 80093bc:	4298      	cmp	r0, r3
 80093be:	daa5      	bge.n	800930c <_printf_i+0x140>
 80093c0:	0018      	movs	r0, r3
 80093c2:	e7a3      	b.n	800930c <_printf_i+0x140>
 80093c4:	0022      	movs	r2, r4
 80093c6:	2301      	movs	r3, #1
 80093c8:	9906      	ldr	r1, [sp, #24]
 80093ca:	9805      	ldr	r0, [sp, #20]
 80093cc:	9e07      	ldr	r6, [sp, #28]
 80093ce:	3219      	adds	r2, #25
 80093d0:	47b0      	blx	r6
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d098      	beq.n	8009308 <_printf_i+0x13c>
 80093d6:	3501      	adds	r5, #1
 80093d8:	68e3      	ldr	r3, [r4, #12]
 80093da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093dc:	1a9b      	subs	r3, r3, r2
 80093de:	42ab      	cmp	r3, r5
 80093e0:	dcf0      	bgt.n	80093c4 <_printf_i+0x1f8>
 80093e2:	e7e9      	b.n	80093b8 <_printf_i+0x1ec>
 80093e4:	2500      	movs	r5, #0
 80093e6:	e7f7      	b.n	80093d8 <_printf_i+0x20c>
 80093e8:	0800d736 	.word	0x0800d736
 80093ec:	0800d747 	.word	0x0800d747

080093f0 <_scanf_float>:
 80093f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f2:	b08b      	sub	sp, #44	; 0x2c
 80093f4:	0015      	movs	r5, r2
 80093f6:	9001      	str	r0, [sp, #4]
 80093f8:	22ae      	movs	r2, #174	; 0xae
 80093fa:	2000      	movs	r0, #0
 80093fc:	9306      	str	r3, [sp, #24]
 80093fe:	688b      	ldr	r3, [r1, #8]
 8009400:	000e      	movs	r6, r1
 8009402:	1e59      	subs	r1, r3, #1
 8009404:	0052      	lsls	r2, r2, #1
 8009406:	9005      	str	r0, [sp, #20]
 8009408:	4291      	cmp	r1, r2
 800940a:	d905      	bls.n	8009418 <_scanf_float+0x28>
 800940c:	3b5e      	subs	r3, #94	; 0x5e
 800940e:	3bff      	subs	r3, #255	; 0xff
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	235e      	movs	r3, #94	; 0x5e
 8009414:	33ff      	adds	r3, #255	; 0xff
 8009416:	60b3      	str	r3, [r6, #8]
 8009418:	23f0      	movs	r3, #240	; 0xf0
 800941a:	6832      	ldr	r2, [r6, #0]
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	4313      	orrs	r3, r2
 8009420:	6033      	str	r3, [r6, #0]
 8009422:	0033      	movs	r3, r6
 8009424:	2400      	movs	r4, #0
 8009426:	331c      	adds	r3, #28
 8009428:	001f      	movs	r7, r3
 800942a:	9303      	str	r3, [sp, #12]
 800942c:	9402      	str	r4, [sp, #8]
 800942e:	9408      	str	r4, [sp, #32]
 8009430:	9407      	str	r4, [sp, #28]
 8009432:	9400      	str	r4, [sp, #0]
 8009434:	9404      	str	r4, [sp, #16]
 8009436:	68b2      	ldr	r2, [r6, #8]
 8009438:	2a00      	cmp	r2, #0
 800943a:	d00a      	beq.n	8009452 <_scanf_float+0x62>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b4e      	cmp	r3, #78	; 0x4e
 8009442:	d844      	bhi.n	80094ce <_scanf_float+0xde>
 8009444:	0018      	movs	r0, r3
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d82c      	bhi.n	80094a4 <_scanf_float+0xb4>
 800944a:	382b      	subs	r0, #43	; 0x2b
 800944c:	b2c1      	uxtb	r1, r0
 800944e:	290e      	cmp	r1, #14
 8009450:	d92a      	bls.n	80094a8 <_scanf_float+0xb8>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <_scanf_float+0x70>
 8009458:	6832      	ldr	r2, [r6, #0]
 800945a:	4ba4      	ldr	r3, [pc, #656]	; (80096ec <_scanf_float+0x2fc>)
 800945c:	4013      	ands	r3, r2
 800945e:	6033      	str	r3, [r6, #0]
 8009460:	9b02      	ldr	r3, [sp, #8]
 8009462:	3b01      	subs	r3, #1
 8009464:	2b01      	cmp	r3, #1
 8009466:	d900      	bls.n	800946a <_scanf_float+0x7a>
 8009468:	e0f9      	b.n	800965e <_scanf_float+0x26e>
 800946a:	24be      	movs	r4, #190	; 0xbe
 800946c:	0064      	lsls	r4, r4, #1
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	429f      	cmp	r7, r3
 8009472:	d900      	bls.n	8009476 <_scanf_float+0x86>
 8009474:	e0e9      	b.n	800964a <_scanf_float+0x25a>
 8009476:	2301      	movs	r3, #1
 8009478:	9302      	str	r3, [sp, #8]
 800947a:	e185      	b.n	8009788 <_scanf_float+0x398>
 800947c:	0018      	movs	r0, r3
 800947e:	3861      	subs	r0, #97	; 0x61
 8009480:	280d      	cmp	r0, #13
 8009482:	d8e6      	bhi.n	8009452 <_scanf_float+0x62>
 8009484:	f7f6 fe52 	bl	800012c <__gnu_thumb1_case_shi>
 8009488:	ffe50083 	.word	0xffe50083
 800948c:	ffe5ffe5 	.word	0xffe5ffe5
 8009490:	00a200b6 	.word	0x00a200b6
 8009494:	ffe5ffe5 	.word	0xffe5ffe5
 8009498:	ffe50089 	.word	0xffe50089
 800949c:	ffe5ffe5 	.word	0xffe5ffe5
 80094a0:	0065ffe5 	.word	0x0065ffe5
 80094a4:	3841      	subs	r0, #65	; 0x41
 80094a6:	e7eb      	b.n	8009480 <_scanf_float+0x90>
 80094a8:	280e      	cmp	r0, #14
 80094aa:	d8d2      	bhi.n	8009452 <_scanf_float+0x62>
 80094ac:	f7f6 fe3e 	bl	800012c <__gnu_thumb1_case_shi>
 80094b0:	ffd1004b 	.word	0xffd1004b
 80094b4:	0098004b 	.word	0x0098004b
 80094b8:	0020ffd1 	.word	0x0020ffd1
 80094bc:	00400040 	.word	0x00400040
 80094c0:	00400040 	.word	0x00400040
 80094c4:	00400040 	.word	0x00400040
 80094c8:	00400040 	.word	0x00400040
 80094cc:	0040      	.short	0x0040
 80094ce:	2b6e      	cmp	r3, #110	; 0x6e
 80094d0:	d809      	bhi.n	80094e6 <_scanf_float+0xf6>
 80094d2:	2b60      	cmp	r3, #96	; 0x60
 80094d4:	d8d2      	bhi.n	800947c <_scanf_float+0x8c>
 80094d6:	2b54      	cmp	r3, #84	; 0x54
 80094d8:	d07d      	beq.n	80095d6 <_scanf_float+0x1e6>
 80094da:	2b59      	cmp	r3, #89	; 0x59
 80094dc:	d1b9      	bne.n	8009452 <_scanf_float+0x62>
 80094de:	2c07      	cmp	r4, #7
 80094e0:	d1b7      	bne.n	8009452 <_scanf_float+0x62>
 80094e2:	2408      	movs	r4, #8
 80094e4:	e02c      	b.n	8009540 <_scanf_float+0x150>
 80094e6:	2b74      	cmp	r3, #116	; 0x74
 80094e8:	d075      	beq.n	80095d6 <_scanf_float+0x1e6>
 80094ea:	2b79      	cmp	r3, #121	; 0x79
 80094ec:	d0f7      	beq.n	80094de <_scanf_float+0xee>
 80094ee:	e7b0      	b.n	8009452 <_scanf_float+0x62>
 80094f0:	6831      	ldr	r1, [r6, #0]
 80094f2:	05c8      	lsls	r0, r1, #23
 80094f4:	d51c      	bpl.n	8009530 <_scanf_float+0x140>
 80094f6:	2380      	movs	r3, #128	; 0x80
 80094f8:	4399      	bics	r1, r3
 80094fa:	9b00      	ldr	r3, [sp, #0]
 80094fc:	6031      	str	r1, [r6, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d003      	beq.n	8009510 <_scanf_float+0x120>
 8009508:	3b01      	subs	r3, #1
 800950a:	3201      	adds	r2, #1
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	60b2      	str	r2, [r6, #8]
 8009510:	68b3      	ldr	r3, [r6, #8]
 8009512:	3b01      	subs	r3, #1
 8009514:	60b3      	str	r3, [r6, #8]
 8009516:	6933      	ldr	r3, [r6, #16]
 8009518:	3301      	adds	r3, #1
 800951a:	6133      	str	r3, [r6, #16]
 800951c:	686b      	ldr	r3, [r5, #4]
 800951e:	3b01      	subs	r3, #1
 8009520:	606b      	str	r3, [r5, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dc00      	bgt.n	8009528 <_scanf_float+0x138>
 8009526:	e086      	b.n	8009636 <_scanf_float+0x246>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	3301      	adds	r3, #1
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	e782      	b.n	8009436 <_scanf_float+0x46>
 8009530:	9a02      	ldr	r2, [sp, #8]
 8009532:	1912      	adds	r2, r2, r4
 8009534:	2a00      	cmp	r2, #0
 8009536:	d18c      	bne.n	8009452 <_scanf_float+0x62>
 8009538:	4a6d      	ldr	r2, [pc, #436]	; (80096f0 <_scanf_float+0x300>)
 800953a:	6831      	ldr	r1, [r6, #0]
 800953c:	400a      	ands	r2, r1
 800953e:	6032      	str	r2, [r6, #0]
 8009540:	703b      	strb	r3, [r7, #0]
 8009542:	3701      	adds	r7, #1
 8009544:	e7e4      	b.n	8009510 <_scanf_float+0x120>
 8009546:	2180      	movs	r1, #128	; 0x80
 8009548:	6832      	ldr	r2, [r6, #0]
 800954a:	420a      	tst	r2, r1
 800954c:	d081      	beq.n	8009452 <_scanf_float+0x62>
 800954e:	438a      	bics	r2, r1
 8009550:	e7f5      	b.n	800953e <_scanf_float+0x14e>
 8009552:	9a02      	ldr	r2, [sp, #8]
 8009554:	2a00      	cmp	r2, #0
 8009556:	d10f      	bne.n	8009578 <_scanf_float+0x188>
 8009558:	9a00      	ldr	r2, [sp, #0]
 800955a:	2a00      	cmp	r2, #0
 800955c:	d10f      	bne.n	800957e <_scanf_float+0x18e>
 800955e:	6832      	ldr	r2, [r6, #0]
 8009560:	21e0      	movs	r1, #224	; 0xe0
 8009562:	0010      	movs	r0, r2
 8009564:	00c9      	lsls	r1, r1, #3
 8009566:	4008      	ands	r0, r1
 8009568:	4288      	cmp	r0, r1
 800956a:	d108      	bne.n	800957e <_scanf_float+0x18e>
 800956c:	4961      	ldr	r1, [pc, #388]	; (80096f4 <_scanf_float+0x304>)
 800956e:	400a      	ands	r2, r1
 8009570:	6032      	str	r2, [r6, #0]
 8009572:	2201      	movs	r2, #1
 8009574:	9202      	str	r2, [sp, #8]
 8009576:	e7e3      	b.n	8009540 <_scanf_float+0x150>
 8009578:	9a02      	ldr	r2, [sp, #8]
 800957a:	2a02      	cmp	r2, #2
 800957c:	d059      	beq.n	8009632 <_scanf_float+0x242>
 800957e:	2c01      	cmp	r4, #1
 8009580:	d002      	beq.n	8009588 <_scanf_float+0x198>
 8009582:	2c04      	cmp	r4, #4
 8009584:	d000      	beq.n	8009588 <_scanf_float+0x198>
 8009586:	e764      	b.n	8009452 <_scanf_float+0x62>
 8009588:	3401      	adds	r4, #1
 800958a:	b2e4      	uxtb	r4, r4
 800958c:	e7d8      	b.n	8009540 <_scanf_float+0x150>
 800958e:	9a02      	ldr	r2, [sp, #8]
 8009590:	2a01      	cmp	r2, #1
 8009592:	d000      	beq.n	8009596 <_scanf_float+0x1a6>
 8009594:	e75d      	b.n	8009452 <_scanf_float+0x62>
 8009596:	2202      	movs	r2, #2
 8009598:	e7ec      	b.n	8009574 <_scanf_float+0x184>
 800959a:	2c00      	cmp	r4, #0
 800959c:	d110      	bne.n	80095c0 <_scanf_float+0x1d0>
 800959e:	9a00      	ldr	r2, [sp, #0]
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d000      	beq.n	80095a6 <_scanf_float+0x1b6>
 80095a4:	e758      	b.n	8009458 <_scanf_float+0x68>
 80095a6:	6832      	ldr	r2, [r6, #0]
 80095a8:	21e0      	movs	r1, #224	; 0xe0
 80095aa:	0010      	movs	r0, r2
 80095ac:	00c9      	lsls	r1, r1, #3
 80095ae:	4008      	ands	r0, r1
 80095b0:	4288      	cmp	r0, r1
 80095b2:	d000      	beq.n	80095b6 <_scanf_float+0x1c6>
 80095b4:	e754      	b.n	8009460 <_scanf_float+0x70>
 80095b6:	494f      	ldr	r1, [pc, #316]	; (80096f4 <_scanf_float+0x304>)
 80095b8:	3401      	adds	r4, #1
 80095ba:	400a      	ands	r2, r1
 80095bc:	6032      	str	r2, [r6, #0]
 80095be:	e7bf      	b.n	8009540 <_scanf_float+0x150>
 80095c0:	21fd      	movs	r1, #253	; 0xfd
 80095c2:	1ee2      	subs	r2, r4, #3
 80095c4:	420a      	tst	r2, r1
 80095c6:	d000      	beq.n	80095ca <_scanf_float+0x1da>
 80095c8:	e743      	b.n	8009452 <_scanf_float+0x62>
 80095ca:	e7dd      	b.n	8009588 <_scanf_float+0x198>
 80095cc:	2c02      	cmp	r4, #2
 80095ce:	d000      	beq.n	80095d2 <_scanf_float+0x1e2>
 80095d0:	e73f      	b.n	8009452 <_scanf_float+0x62>
 80095d2:	2403      	movs	r4, #3
 80095d4:	e7b4      	b.n	8009540 <_scanf_float+0x150>
 80095d6:	2c06      	cmp	r4, #6
 80095d8:	d000      	beq.n	80095dc <_scanf_float+0x1ec>
 80095da:	e73a      	b.n	8009452 <_scanf_float+0x62>
 80095dc:	2407      	movs	r4, #7
 80095de:	e7af      	b.n	8009540 <_scanf_float+0x150>
 80095e0:	6832      	ldr	r2, [r6, #0]
 80095e2:	0591      	lsls	r1, r2, #22
 80095e4:	d400      	bmi.n	80095e8 <_scanf_float+0x1f8>
 80095e6:	e734      	b.n	8009452 <_scanf_float+0x62>
 80095e8:	4943      	ldr	r1, [pc, #268]	; (80096f8 <_scanf_float+0x308>)
 80095ea:	400a      	ands	r2, r1
 80095ec:	6032      	str	r2, [r6, #0]
 80095ee:	9a00      	ldr	r2, [sp, #0]
 80095f0:	9204      	str	r2, [sp, #16]
 80095f2:	e7a5      	b.n	8009540 <_scanf_float+0x150>
 80095f4:	21a0      	movs	r1, #160	; 0xa0
 80095f6:	2080      	movs	r0, #128	; 0x80
 80095f8:	6832      	ldr	r2, [r6, #0]
 80095fa:	00c9      	lsls	r1, r1, #3
 80095fc:	4011      	ands	r1, r2
 80095fe:	00c0      	lsls	r0, r0, #3
 8009600:	4281      	cmp	r1, r0
 8009602:	d006      	beq.n	8009612 <_scanf_float+0x222>
 8009604:	4202      	tst	r2, r0
 8009606:	d100      	bne.n	800960a <_scanf_float+0x21a>
 8009608:	e723      	b.n	8009452 <_scanf_float+0x62>
 800960a:	9900      	ldr	r1, [sp, #0]
 800960c:	2900      	cmp	r1, #0
 800960e:	d100      	bne.n	8009612 <_scanf_float+0x222>
 8009610:	e726      	b.n	8009460 <_scanf_float+0x70>
 8009612:	0591      	lsls	r1, r2, #22
 8009614:	d404      	bmi.n	8009620 <_scanf_float+0x230>
 8009616:	9900      	ldr	r1, [sp, #0]
 8009618:	9804      	ldr	r0, [sp, #16]
 800961a:	9708      	str	r7, [sp, #32]
 800961c:	1a09      	subs	r1, r1, r0
 800961e:	9107      	str	r1, [sp, #28]
 8009620:	4934      	ldr	r1, [pc, #208]	; (80096f4 <_scanf_float+0x304>)
 8009622:	400a      	ands	r2, r1
 8009624:	21c0      	movs	r1, #192	; 0xc0
 8009626:	0049      	lsls	r1, r1, #1
 8009628:	430a      	orrs	r2, r1
 800962a:	6032      	str	r2, [r6, #0]
 800962c:	2200      	movs	r2, #0
 800962e:	9200      	str	r2, [sp, #0]
 8009630:	e786      	b.n	8009540 <_scanf_float+0x150>
 8009632:	2203      	movs	r2, #3
 8009634:	e79e      	b.n	8009574 <_scanf_float+0x184>
 8009636:	23c0      	movs	r3, #192	; 0xc0
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	0029      	movs	r1, r5
 800963c:	58f3      	ldr	r3, [r6, r3]
 800963e:	9801      	ldr	r0, [sp, #4]
 8009640:	4798      	blx	r3
 8009642:	2800      	cmp	r0, #0
 8009644:	d100      	bne.n	8009648 <_scanf_float+0x258>
 8009646:	e6f6      	b.n	8009436 <_scanf_float+0x46>
 8009648:	e703      	b.n	8009452 <_scanf_float+0x62>
 800964a:	3f01      	subs	r7, #1
 800964c:	5933      	ldr	r3, [r6, r4]
 800964e:	002a      	movs	r2, r5
 8009650:	7839      	ldrb	r1, [r7, #0]
 8009652:	9801      	ldr	r0, [sp, #4]
 8009654:	4798      	blx	r3
 8009656:	6933      	ldr	r3, [r6, #16]
 8009658:	3b01      	subs	r3, #1
 800965a:	6133      	str	r3, [r6, #16]
 800965c:	e707      	b.n	800946e <_scanf_float+0x7e>
 800965e:	1e63      	subs	r3, r4, #1
 8009660:	2b06      	cmp	r3, #6
 8009662:	d80e      	bhi.n	8009682 <_scanf_float+0x292>
 8009664:	9702      	str	r7, [sp, #8]
 8009666:	2c02      	cmp	r4, #2
 8009668:	d920      	bls.n	80096ac <_scanf_float+0x2bc>
 800966a:	1be3      	subs	r3, r4, r7
 800966c:	b2db      	uxtb	r3, r3
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	189b      	adds	r3, r3, r2
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b03      	cmp	r3, #3
 800967a:	d827      	bhi.n	80096cc <_scanf_float+0x2dc>
 800967c:	3c03      	subs	r4, #3
 800967e:	b2e4      	uxtb	r4, r4
 8009680:	1b3f      	subs	r7, r7, r4
 8009682:	6833      	ldr	r3, [r6, #0]
 8009684:	05da      	lsls	r2, r3, #23
 8009686:	d554      	bpl.n	8009732 <_scanf_float+0x342>
 8009688:	055b      	lsls	r3, r3, #21
 800968a:	d537      	bpl.n	80096fc <_scanf_float+0x30c>
 800968c:	24be      	movs	r4, #190	; 0xbe
 800968e:	0064      	lsls	r4, r4, #1
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	429f      	cmp	r7, r3
 8009694:	d800      	bhi.n	8009698 <_scanf_float+0x2a8>
 8009696:	e6ee      	b.n	8009476 <_scanf_float+0x86>
 8009698:	3f01      	subs	r7, #1
 800969a:	5933      	ldr	r3, [r6, r4]
 800969c:	002a      	movs	r2, r5
 800969e:	7839      	ldrb	r1, [r7, #0]
 80096a0:	9801      	ldr	r0, [sp, #4]
 80096a2:	4798      	blx	r3
 80096a4:	6933      	ldr	r3, [r6, #16]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	6133      	str	r3, [r6, #16]
 80096aa:	e7f1      	b.n	8009690 <_scanf_float+0x2a0>
 80096ac:	24be      	movs	r4, #190	; 0xbe
 80096ae:	0064      	lsls	r4, r4, #1
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	429f      	cmp	r7, r3
 80096b4:	d800      	bhi.n	80096b8 <_scanf_float+0x2c8>
 80096b6:	e6de      	b.n	8009476 <_scanf_float+0x86>
 80096b8:	3f01      	subs	r7, #1
 80096ba:	5933      	ldr	r3, [r6, r4]
 80096bc:	002a      	movs	r2, r5
 80096be:	7839      	ldrb	r1, [r7, #0]
 80096c0:	9801      	ldr	r0, [sp, #4]
 80096c2:	4798      	blx	r3
 80096c4:	6933      	ldr	r3, [r6, #16]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	6133      	str	r3, [r6, #16]
 80096ca:	e7f1      	b.n	80096b0 <_scanf_float+0x2c0>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	002a      	movs	r2, r5
 80096d0:	3b01      	subs	r3, #1
 80096d2:	7819      	ldrb	r1, [r3, #0]
 80096d4:	9302      	str	r3, [sp, #8]
 80096d6:	23be      	movs	r3, #190	; 0xbe
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	58f3      	ldr	r3, [r6, r3]
 80096dc:	9801      	ldr	r0, [sp, #4]
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	4798      	blx	r3
 80096e2:	6933      	ldr	r3, [r6, #16]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	6133      	str	r3, [r6, #16]
 80096e8:	e7c2      	b.n	8009670 <_scanf_float+0x280>
 80096ea:	46c0      	nop			; (mov r8, r8)
 80096ec:	fffffeff 	.word	0xfffffeff
 80096f0:	fffffe7f 	.word	0xfffffe7f
 80096f4:	fffff87f 	.word	0xfffff87f
 80096f8:	fffffd7f 	.word	0xfffffd7f
 80096fc:	6933      	ldr	r3, [r6, #16]
 80096fe:	1e7c      	subs	r4, r7, #1
 8009700:	7821      	ldrb	r1, [r4, #0]
 8009702:	3b01      	subs	r3, #1
 8009704:	6133      	str	r3, [r6, #16]
 8009706:	2965      	cmp	r1, #101	; 0x65
 8009708:	d00c      	beq.n	8009724 <_scanf_float+0x334>
 800970a:	2945      	cmp	r1, #69	; 0x45
 800970c:	d00a      	beq.n	8009724 <_scanf_float+0x334>
 800970e:	23be      	movs	r3, #190	; 0xbe
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	58f3      	ldr	r3, [r6, r3]
 8009714:	002a      	movs	r2, r5
 8009716:	9801      	ldr	r0, [sp, #4]
 8009718:	4798      	blx	r3
 800971a:	6933      	ldr	r3, [r6, #16]
 800971c:	1ebc      	subs	r4, r7, #2
 800971e:	3b01      	subs	r3, #1
 8009720:	7821      	ldrb	r1, [r4, #0]
 8009722:	6133      	str	r3, [r6, #16]
 8009724:	23be      	movs	r3, #190	; 0xbe
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	002a      	movs	r2, r5
 800972a:	58f3      	ldr	r3, [r6, r3]
 800972c:	9801      	ldr	r0, [sp, #4]
 800972e:	4798      	blx	r3
 8009730:	0027      	movs	r7, r4
 8009732:	6832      	ldr	r2, [r6, #0]
 8009734:	2310      	movs	r3, #16
 8009736:	0011      	movs	r1, r2
 8009738:	4019      	ands	r1, r3
 800973a:	9102      	str	r1, [sp, #8]
 800973c:	421a      	tst	r2, r3
 800973e:	d158      	bne.n	80097f2 <_scanf_float+0x402>
 8009740:	23c0      	movs	r3, #192	; 0xc0
 8009742:	7039      	strb	r1, [r7, #0]
 8009744:	6832      	ldr	r2, [r6, #0]
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	4013      	ands	r3, r2
 800974a:	2280      	movs	r2, #128	; 0x80
 800974c:	00d2      	lsls	r2, r2, #3
 800974e:	4293      	cmp	r3, r2
 8009750:	d11d      	bne.n	800978e <_scanf_float+0x39e>
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	9a00      	ldr	r2, [sp, #0]
 8009756:	9900      	ldr	r1, [sp, #0]
 8009758:	1a9a      	subs	r2, r3, r2
 800975a:	428b      	cmp	r3, r1
 800975c:	d124      	bne.n	80097a8 <_scanf_float+0x3b8>
 800975e:	2200      	movs	r2, #0
 8009760:	9903      	ldr	r1, [sp, #12]
 8009762:	9801      	ldr	r0, [sp, #4]
 8009764:	f000 feb6 	bl	800a4d4 <_strtod_r>
 8009768:	9b06      	ldr	r3, [sp, #24]
 800976a:	000d      	movs	r5, r1
 800976c:	6831      	ldr	r1, [r6, #0]
 800976e:	0004      	movs	r4, r0
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	078a      	lsls	r2, r1, #30
 8009774:	d525      	bpl.n	80097c2 <_scanf_float+0x3d2>
 8009776:	1d1a      	adds	r2, r3, #4
 8009778:	9906      	ldr	r1, [sp, #24]
 800977a:	600a      	str	r2, [r1, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	601c      	str	r4, [r3, #0]
 8009780:	605d      	str	r5, [r3, #4]
 8009782:	68f3      	ldr	r3, [r6, #12]
 8009784:	3301      	adds	r3, #1
 8009786:	60f3      	str	r3, [r6, #12]
 8009788:	9802      	ldr	r0, [sp, #8]
 800978a:	b00b      	add	sp, #44	; 0x2c
 800978c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978e:	9b07      	ldr	r3, [sp, #28]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0e4      	beq.n	800975e <_scanf_float+0x36e>
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	9a02      	ldr	r2, [sp, #8]
 8009798:	1c59      	adds	r1, r3, #1
 800979a:	9801      	ldr	r0, [sp, #4]
 800979c:	230a      	movs	r3, #10
 800979e:	f000 ff2f 	bl	800a600 <_strtol_r>
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	9f08      	ldr	r7, [sp, #32]
 80097a6:	1ac2      	subs	r2, r0, r3
 80097a8:	0033      	movs	r3, r6
 80097aa:	3370      	adds	r3, #112	; 0x70
 80097ac:	33ff      	adds	r3, #255	; 0xff
 80097ae:	429f      	cmp	r7, r3
 80097b0:	d302      	bcc.n	80097b8 <_scanf_float+0x3c8>
 80097b2:	0037      	movs	r7, r6
 80097b4:	376f      	adds	r7, #111	; 0x6f
 80097b6:	37ff      	adds	r7, #255	; 0xff
 80097b8:	0038      	movs	r0, r7
 80097ba:	490f      	ldr	r1, [pc, #60]	; (80097f8 <_scanf_float+0x408>)
 80097bc:	f000 f83e 	bl	800983c <siprintf>
 80097c0:	e7cd      	b.n	800975e <_scanf_float+0x36e>
 80097c2:	1d1a      	adds	r2, r3, #4
 80097c4:	0749      	lsls	r1, r1, #29
 80097c6:	d4d7      	bmi.n	8009778 <_scanf_float+0x388>
 80097c8:	9906      	ldr	r1, [sp, #24]
 80097ca:	0020      	movs	r0, r4
 80097cc:	600a      	str	r2, [r1, #0]
 80097ce:	681f      	ldr	r7, [r3, #0]
 80097d0:	0022      	movs	r2, r4
 80097d2:	002b      	movs	r3, r5
 80097d4:	0029      	movs	r1, r5
 80097d6:	f7f8 ff45 	bl	8002664 <__aeabi_dcmpun>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d004      	beq.n	80097e8 <_scanf_float+0x3f8>
 80097de:	4807      	ldr	r0, [pc, #28]	; (80097fc <_scanf_float+0x40c>)
 80097e0:	f000 f828 	bl	8009834 <nanf>
 80097e4:	6038      	str	r0, [r7, #0]
 80097e6:	e7cc      	b.n	8009782 <_scanf_float+0x392>
 80097e8:	0020      	movs	r0, r4
 80097ea:	0029      	movs	r1, r5
 80097ec:	f7f9 f82c 	bl	8002848 <__aeabi_d2f>
 80097f0:	e7f8      	b.n	80097e4 <_scanf_float+0x3f4>
 80097f2:	2300      	movs	r3, #0
 80097f4:	e640      	b.n	8009478 <_scanf_float+0x88>
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	0800d758 	.word	0x0800d758
 80097fc:	0800dbc8 	.word	0x0800dbc8

08009800 <iprintf>:
 8009800:	b40f      	push	{r0, r1, r2, r3}
 8009802:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <iprintf+0x30>)
 8009804:	b513      	push	{r0, r1, r4, lr}
 8009806:	681c      	ldr	r4, [r3, #0]
 8009808:	2c00      	cmp	r4, #0
 800980a:	d005      	beq.n	8009818 <iprintf+0x18>
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <iprintf+0x18>
 8009812:	0020      	movs	r0, r4
 8009814:	f001 fe00 	bl	800b418 <__sinit>
 8009818:	ab05      	add	r3, sp, #20
 800981a:	0020      	movs	r0, r4
 800981c:	9a04      	ldr	r2, [sp, #16]
 800981e:	68a1      	ldr	r1, [r4, #8]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f003 f99f 	bl	800cb64 <_vfiprintf_r>
 8009826:	bc16      	pop	{r1, r2, r4}
 8009828:	bc08      	pop	{r3}
 800982a:	b004      	add	sp, #16
 800982c:	4718      	bx	r3
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	20000030 	.word	0x20000030

08009834 <nanf>:
 8009834:	4800      	ldr	r0, [pc, #0]	; (8009838 <nanf+0x4>)
 8009836:	4770      	bx	lr
 8009838:	7fc00000 	.word	0x7fc00000

0800983c <siprintf>:
 800983c:	b40e      	push	{r1, r2, r3}
 800983e:	b500      	push	{lr}
 8009840:	490b      	ldr	r1, [pc, #44]	; (8009870 <siprintf+0x34>)
 8009842:	b09c      	sub	sp, #112	; 0x70
 8009844:	ab1d      	add	r3, sp, #116	; 0x74
 8009846:	9002      	str	r0, [sp, #8]
 8009848:	9006      	str	r0, [sp, #24]
 800984a:	9107      	str	r1, [sp, #28]
 800984c:	9104      	str	r1, [sp, #16]
 800984e:	4809      	ldr	r0, [pc, #36]	; (8009874 <siprintf+0x38>)
 8009850:	4909      	ldr	r1, [pc, #36]	; (8009878 <siprintf+0x3c>)
 8009852:	cb04      	ldmia	r3!, {r2}
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	a902      	add	r1, sp, #8
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	f003 f85a 	bl	800c914 <_svfiprintf_r>
 8009860:	2300      	movs	r3, #0
 8009862:	9a02      	ldr	r2, [sp, #8]
 8009864:	7013      	strb	r3, [r2, #0]
 8009866:	b01c      	add	sp, #112	; 0x70
 8009868:	bc08      	pop	{r3}
 800986a:	b003      	add	sp, #12
 800986c:	4718      	bx	r3
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	7fffffff 	.word	0x7fffffff
 8009874:	20000030 	.word	0x20000030
 8009878:	ffff0208 	.word	0xffff0208

0800987c <sulp>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	0016      	movs	r6, r2
 8009880:	000d      	movs	r5, r1
 8009882:	f002 fd91 	bl	800c3a8 <__ulp>
 8009886:	2e00      	cmp	r6, #0
 8009888:	d00d      	beq.n	80098a6 <sulp+0x2a>
 800988a:	236b      	movs	r3, #107	; 0x6b
 800988c:	006a      	lsls	r2, r5, #1
 800988e:	0d52      	lsrs	r2, r2, #21
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	2b00      	cmp	r3, #0
 8009894:	dd07      	ble.n	80098a6 <sulp+0x2a>
 8009896:	2400      	movs	r4, #0
 8009898:	4a03      	ldr	r2, [pc, #12]	; (80098a8 <sulp+0x2c>)
 800989a:	051b      	lsls	r3, r3, #20
 800989c:	189d      	adds	r5, r3, r2
 800989e:	002b      	movs	r3, r5
 80098a0:	0022      	movs	r2, r4
 80098a2:	f7f8 f8e1 	bl	8001a68 <__aeabi_dmul>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	3ff00000 	.word	0x3ff00000

080098ac <_strtod_l>:
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	001d      	movs	r5, r3
 80098b0:	2300      	movs	r3, #0
 80098b2:	b0a5      	sub	sp, #148	; 0x94
 80098b4:	9320      	str	r3, [sp, #128]	; 0x80
 80098b6:	4bac      	ldr	r3, [pc, #688]	; (8009b68 <_strtod_l+0x2bc>)
 80098b8:	9005      	str	r0, [sp, #20]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	9108      	str	r1, [sp, #32]
 80098be:	0018      	movs	r0, r3
 80098c0:	9307      	str	r3, [sp, #28]
 80098c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80098c4:	f7f6 fc20 	bl	8000108 <strlen>
 80098c8:	2600      	movs	r6, #0
 80098ca:	0004      	movs	r4, r0
 80098cc:	2700      	movs	r7, #0
 80098ce:	9b08      	ldr	r3, [sp, #32]
 80098d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80098d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80098d4:	7813      	ldrb	r3, [r2, #0]
 80098d6:	2b2b      	cmp	r3, #43	; 0x2b
 80098d8:	d058      	beq.n	800998c <_strtod_l+0xe0>
 80098da:	d844      	bhi.n	8009966 <_strtod_l+0xba>
 80098dc:	2b0d      	cmp	r3, #13
 80098de:	d83d      	bhi.n	800995c <_strtod_l+0xb0>
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d83d      	bhi.n	8009960 <_strtod_l+0xb4>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d047      	beq.n	8009978 <_strtod_l+0xcc>
 80098e8:	2300      	movs	r3, #0
 80098ea:	930e      	str	r3, [sp, #56]	; 0x38
 80098ec:	2200      	movs	r2, #0
 80098ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098f0:	920a      	str	r2, [sp, #40]	; 0x28
 80098f2:	9306      	str	r3, [sp, #24]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b30      	cmp	r3, #48	; 0x30
 80098f8:	d000      	beq.n	80098fc <_strtod_l+0x50>
 80098fa:	e07f      	b.n	80099fc <_strtod_l+0x150>
 80098fc:	9b06      	ldr	r3, [sp, #24]
 80098fe:	3220      	adds	r2, #32
 8009900:	785b      	ldrb	r3, [r3, #1]
 8009902:	4393      	bics	r3, r2
 8009904:	2b58      	cmp	r3, #88	; 0x58
 8009906:	d000      	beq.n	800990a <_strtod_l+0x5e>
 8009908:	e06e      	b.n	80099e8 <_strtod_l+0x13c>
 800990a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800990c:	9502      	str	r5, [sp, #8]
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	ab20      	add	r3, sp, #128	; 0x80
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4a95      	ldr	r2, [pc, #596]	; (8009b6c <_strtod_l+0x2c0>)
 8009916:	ab21      	add	r3, sp, #132	; 0x84
 8009918:	9805      	ldr	r0, [sp, #20]
 800991a:	a91f      	add	r1, sp, #124	; 0x7c
 800991c:	f001 fe86 	bl	800b62c <__gethex>
 8009920:	2307      	movs	r3, #7
 8009922:	0005      	movs	r5, r0
 8009924:	0004      	movs	r4, r0
 8009926:	401d      	ands	r5, r3
 8009928:	4218      	tst	r0, r3
 800992a:	d006      	beq.n	800993a <_strtod_l+0x8e>
 800992c:	2d06      	cmp	r5, #6
 800992e:	d12f      	bne.n	8009990 <_strtod_l+0xe4>
 8009930:	9b06      	ldr	r3, [sp, #24]
 8009932:	3301      	adds	r3, #1
 8009934:	931f      	str	r3, [sp, #124]	; 0x7c
 8009936:	2300      	movs	r3, #0
 8009938:	930e      	str	r3, [sp, #56]	; 0x38
 800993a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <_strtod_l+0x9a>
 8009940:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009942:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01c      	beq.n	8009986 <_strtod_l+0xda>
 800994c:	2380      	movs	r3, #128	; 0x80
 800994e:	0032      	movs	r2, r6
 8009950:	061b      	lsls	r3, r3, #24
 8009952:	18fb      	adds	r3, r7, r3
 8009954:	0010      	movs	r0, r2
 8009956:	0019      	movs	r1, r3
 8009958:	b025      	add	sp, #148	; 0x94
 800995a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995c:	2b20      	cmp	r3, #32
 800995e:	d1c3      	bne.n	80098e8 <_strtod_l+0x3c>
 8009960:	3201      	adds	r2, #1
 8009962:	921f      	str	r2, [sp, #124]	; 0x7c
 8009964:	e7b5      	b.n	80098d2 <_strtod_l+0x26>
 8009966:	2b2d      	cmp	r3, #45	; 0x2d
 8009968:	d1be      	bne.n	80098e8 <_strtod_l+0x3c>
 800996a:	3b2c      	subs	r3, #44	; 0x2c
 800996c:	930e      	str	r3, [sp, #56]	; 0x38
 800996e:	1c53      	adds	r3, r2, #1
 8009970:	931f      	str	r3, [sp, #124]	; 0x7c
 8009972:	7853      	ldrb	r3, [r2, #1]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1b9      	bne.n	80098ec <_strtod_l+0x40>
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	931f      	str	r3, [sp, #124]	; 0x7c
 800997c:	2300      	movs	r3, #0
 800997e:	930e      	str	r3, [sp, #56]	; 0x38
 8009980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1dc      	bne.n	8009940 <_strtod_l+0x94>
 8009986:	0032      	movs	r2, r6
 8009988:	003b      	movs	r3, r7
 800998a:	e7e3      	b.n	8009954 <_strtod_l+0xa8>
 800998c:	2300      	movs	r3, #0
 800998e:	e7ed      	b.n	800996c <_strtod_l+0xc0>
 8009990:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009992:	2a00      	cmp	r2, #0
 8009994:	d007      	beq.n	80099a6 <_strtod_l+0xfa>
 8009996:	2135      	movs	r1, #53	; 0x35
 8009998:	a822      	add	r0, sp, #136	; 0x88
 800999a:	f002 fe06 	bl	800c5aa <__copybits>
 800999e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80099a0:	9805      	ldr	r0, [sp, #20]
 80099a2:	f002 f9c1 	bl	800bd28 <_Bfree>
 80099a6:	1e68      	subs	r0, r5, #1
 80099a8:	2804      	cmp	r0, #4
 80099aa:	d806      	bhi.n	80099ba <_strtod_l+0x10e>
 80099ac:	f7f6 fbb4 	bl	8000118 <__gnu_thumb1_case_uqi>
 80099b0:	1816030b 	.word	0x1816030b
 80099b4:	0b          	.byte	0x0b
 80099b5:	00          	.byte	0x00
 80099b6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80099b8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80099ba:	0723      	lsls	r3, r4, #28
 80099bc:	d5bd      	bpl.n	800993a <_strtod_l+0x8e>
 80099be:	2380      	movs	r3, #128	; 0x80
 80099c0:	061b      	lsls	r3, r3, #24
 80099c2:	431f      	orrs	r7, r3
 80099c4:	e7b9      	b.n	800993a <_strtod_l+0x8e>
 80099c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099c8:	4a69      	ldr	r2, [pc, #420]	; (8009b70 <_strtod_l+0x2c4>)
 80099ca:	496a      	ldr	r1, [pc, #424]	; (8009b74 <_strtod_l+0x2c8>)
 80099cc:	401a      	ands	r2, r3
 80099ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80099d2:	185b      	adds	r3, r3, r1
 80099d4:	051b      	lsls	r3, r3, #20
 80099d6:	431a      	orrs	r2, r3
 80099d8:	0017      	movs	r7, r2
 80099da:	e7ee      	b.n	80099ba <_strtod_l+0x10e>
 80099dc:	4f66      	ldr	r7, [pc, #408]	; (8009b78 <_strtod_l+0x2cc>)
 80099de:	e7ec      	b.n	80099ba <_strtod_l+0x10e>
 80099e0:	2601      	movs	r6, #1
 80099e2:	4f66      	ldr	r7, [pc, #408]	; (8009b7c <_strtod_l+0x2d0>)
 80099e4:	4276      	negs	r6, r6
 80099e6:	e7e8      	b.n	80099ba <_strtod_l+0x10e>
 80099e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	2b30      	cmp	r3, #48	; 0x30
 80099f2:	d0f9      	beq.n	80099e8 <_strtod_l+0x13c>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0a0      	beq.n	800993a <_strtod_l+0x8e>
 80099f8:	2301      	movs	r3, #1
 80099fa:	930a      	str	r3, [sp, #40]	; 0x28
 80099fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099fe:	220a      	movs	r2, #10
 8009a00:	9310      	str	r3, [sp, #64]	; 0x40
 8009a02:	2300      	movs	r3, #0
 8009a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a08:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009a0c:	7805      	ldrb	r5, [r0, #0]
 8009a0e:	002b      	movs	r3, r5
 8009a10:	3b30      	subs	r3, #48	; 0x30
 8009a12:	b2d9      	uxtb	r1, r3
 8009a14:	2909      	cmp	r1, #9
 8009a16:	d927      	bls.n	8009a68 <_strtod_l+0x1bc>
 8009a18:	0022      	movs	r2, r4
 8009a1a:	9907      	ldr	r1, [sp, #28]
 8009a1c:	f003 fa40 	bl	800cea0 <strncmp>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d033      	beq.n	8009a8c <_strtod_l+0x1e0>
 8009a24:	2000      	movs	r0, #0
 8009a26:	002b      	movs	r3, r5
 8009a28:	4684      	mov	ip, r0
 8009a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a2c:	900c      	str	r0, [sp, #48]	; 0x30
 8009a2e:	9206      	str	r2, [sp, #24]
 8009a30:	2220      	movs	r2, #32
 8009a32:	0019      	movs	r1, r3
 8009a34:	4391      	bics	r1, r2
 8009a36:	000a      	movs	r2, r1
 8009a38:	2100      	movs	r1, #0
 8009a3a:	9107      	str	r1, [sp, #28]
 8009a3c:	2a45      	cmp	r2, #69	; 0x45
 8009a3e:	d000      	beq.n	8009a42 <_strtod_l+0x196>
 8009a40:	e0c5      	b.n	8009bce <_strtod_l+0x322>
 8009a42:	9b06      	ldr	r3, [sp, #24]
 8009a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a46:	4303      	orrs	r3, r0
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	428b      	cmp	r3, r1
 8009a4c:	d094      	beq.n	8009978 <_strtod_l+0xcc>
 8009a4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a50:	9308      	str	r3, [sp, #32]
 8009a52:	3301      	adds	r3, #1
 8009a54:	931f      	str	r3, [sp, #124]	; 0x7c
 8009a56:	9b08      	ldr	r3, [sp, #32]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b2b      	cmp	r3, #43	; 0x2b
 8009a5c:	d076      	beq.n	8009b4c <_strtod_l+0x2a0>
 8009a5e:	000c      	movs	r4, r1
 8009a60:	2b2d      	cmp	r3, #45	; 0x2d
 8009a62:	d179      	bne.n	8009b58 <_strtod_l+0x2ac>
 8009a64:	2401      	movs	r4, #1
 8009a66:	e072      	b.n	8009b4e <_strtod_l+0x2a2>
 8009a68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6a:	2908      	cmp	r1, #8
 8009a6c:	dc09      	bgt.n	8009a82 <_strtod_l+0x1d6>
 8009a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a70:	4351      	muls	r1, r2
 8009a72:	185b      	adds	r3, r3, r1
 8009a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	3001      	adds	r0, #1
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	901f      	str	r0, [sp, #124]	; 0x7c
 8009a80:	e7c3      	b.n	8009a0a <_strtod_l+0x15e>
 8009a82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a84:	4351      	muls	r1, r2
 8009a86:	185b      	adds	r3, r3, r1
 8009a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a8a:	e7f4      	b.n	8009a76 <_strtod_l+0x1ca>
 8009a8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a90:	191c      	adds	r4, r3, r4
 8009a92:	941f      	str	r4, [sp, #124]	; 0x7c
 8009a94:	7823      	ldrb	r3, [r4, #0]
 8009a96:	2a00      	cmp	r2, #0
 8009a98:	d039      	beq.n	8009b0e <_strtod_l+0x262>
 8009a9a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a9c:	9206      	str	r2, [sp, #24]
 8009a9e:	001a      	movs	r2, r3
 8009aa0:	3a30      	subs	r2, #48	; 0x30
 8009aa2:	2a09      	cmp	r2, #9
 8009aa4:	d912      	bls.n	8009acc <_strtod_l+0x220>
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4694      	mov	ip, r2
 8009aaa:	e7c1      	b.n	8009a30 <_strtod_l+0x184>
 8009aac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009aae:	3001      	adds	r0, #1
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	921f      	str	r2, [sp, #124]	; 0x7c
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	2b30      	cmp	r3, #48	; 0x30
 8009ab8:	d0f8      	beq.n	8009aac <_strtod_l+0x200>
 8009aba:	001a      	movs	r2, r3
 8009abc:	3a31      	subs	r2, #49	; 0x31
 8009abe:	2a08      	cmp	r2, #8
 8009ac0:	d83f      	bhi.n	8009b42 <_strtod_l+0x296>
 8009ac2:	900c      	str	r0, [sp, #48]	; 0x30
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009ac8:	9006      	str	r0, [sp, #24]
 8009aca:	9210      	str	r2, [sp, #64]	; 0x40
 8009acc:	001a      	movs	r2, r3
 8009ace:	1c41      	adds	r1, r0, #1
 8009ad0:	3a30      	subs	r2, #48	; 0x30
 8009ad2:	2b30      	cmp	r3, #48	; 0x30
 8009ad4:	d015      	beq.n	8009b02 <_strtod_l+0x256>
 8009ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad8:	185b      	adds	r3, r3, r1
 8009ada:	210a      	movs	r1, #10
 8009adc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	18c4      	adds	r4, r0, r3
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	d115      	bne.n	8009b12 <_strtod_l+0x266>
 8009ae6:	9906      	ldr	r1, [sp, #24]
 8009ae8:	9b06      	ldr	r3, [sp, #24]
 8009aea:	3101      	adds	r1, #1
 8009aec:	1809      	adds	r1, r1, r0
 8009aee:	181b      	adds	r3, r3, r0
 8009af0:	9106      	str	r1, [sp, #24]
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	dc1b      	bgt.n	8009b2e <_strtod_l+0x282>
 8009af6:	230a      	movs	r3, #10
 8009af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009afa:	434b      	muls	r3, r1
 8009afc:	2100      	movs	r1, #0
 8009afe:	18d3      	adds	r3, r2, r3
 8009b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b04:	0008      	movs	r0, r1
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	e7c7      	b.n	8009a9e <_strtod_l+0x1f2>
 8009b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b10:	e7d1      	b.n	8009ab6 <_strtod_l+0x20a>
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	dc04      	bgt.n	8009b20 <_strtod_l+0x274>
 8009b16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b18:	434d      	muls	r5, r1
 8009b1a:	950b      	str	r5, [sp, #44]	; 0x2c
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	e7e0      	b.n	8009ae2 <_strtod_l+0x236>
 8009b20:	1c5d      	adds	r5, r3, #1
 8009b22:	2d10      	cmp	r5, #16
 8009b24:	dcfa      	bgt.n	8009b1c <_strtod_l+0x270>
 8009b26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b28:	434d      	muls	r5, r1
 8009b2a:	950f      	str	r5, [sp, #60]	; 0x3c
 8009b2c:	e7f6      	b.n	8009b1c <_strtod_l+0x270>
 8009b2e:	9b06      	ldr	r3, [sp, #24]
 8009b30:	2100      	movs	r1, #0
 8009b32:	2b10      	cmp	r3, #16
 8009b34:	dce5      	bgt.n	8009b02 <_strtod_l+0x256>
 8009b36:	230a      	movs	r3, #10
 8009b38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009b3a:	4343      	muls	r3, r0
 8009b3c:	18d3      	adds	r3, r2, r3
 8009b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b40:	e7df      	b.n	8009b02 <_strtod_l+0x256>
 8009b42:	2200      	movs	r2, #0
 8009b44:	920c      	str	r2, [sp, #48]	; 0x30
 8009b46:	9206      	str	r2, [sp, #24]
 8009b48:	3201      	adds	r2, #1
 8009b4a:	e7ad      	b.n	8009aa8 <_strtod_l+0x1fc>
 8009b4c:	2400      	movs	r4, #0
 8009b4e:	9b08      	ldr	r3, [sp, #32]
 8009b50:	3302      	adds	r3, #2
 8009b52:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	789b      	ldrb	r3, [r3, #2]
 8009b58:	001a      	movs	r2, r3
 8009b5a:	3a30      	subs	r2, #48	; 0x30
 8009b5c:	2a09      	cmp	r2, #9
 8009b5e:	d913      	bls.n	8009b88 <_strtod_l+0x2dc>
 8009b60:	9a08      	ldr	r2, [sp, #32]
 8009b62:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b64:	2200      	movs	r2, #0
 8009b66:	e031      	b.n	8009bcc <_strtod_l+0x320>
 8009b68:	0800da0c 	.word	0x0800da0c
 8009b6c:	0800d760 	.word	0x0800d760
 8009b70:	ffefffff 	.word	0xffefffff
 8009b74:	00000433 	.word	0x00000433
 8009b78:	7ff00000 	.word	0x7ff00000
 8009b7c:	7fffffff 	.word	0x7fffffff
 8009b80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b86:	785b      	ldrb	r3, [r3, #1]
 8009b88:	2b30      	cmp	r3, #48	; 0x30
 8009b8a:	d0f9      	beq.n	8009b80 <_strtod_l+0x2d4>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	9207      	str	r2, [sp, #28]
 8009b90:	001a      	movs	r2, r3
 8009b92:	3a31      	subs	r2, #49	; 0x31
 8009b94:	2a08      	cmp	r2, #8
 8009b96:	d81a      	bhi.n	8009bce <_strtod_l+0x322>
 8009b98:	3b30      	subs	r3, #48	; 0x30
 8009b9a:	001a      	movs	r2, r3
 8009b9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ba2:	1c59      	adds	r1, r3, #1
 8009ba4:	911f      	str	r1, [sp, #124]	; 0x7c
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	001d      	movs	r5, r3
 8009baa:	3d30      	subs	r5, #48	; 0x30
 8009bac:	2d09      	cmp	r5, #9
 8009bae:	d939      	bls.n	8009c24 <_strtod_l+0x378>
 8009bb0:	9d07      	ldr	r5, [sp, #28]
 8009bb2:	1b49      	subs	r1, r1, r5
 8009bb4:	4db0      	ldr	r5, [pc, #704]	; (8009e78 <_strtod_l+0x5cc>)
 8009bb6:	9507      	str	r5, [sp, #28]
 8009bb8:	2908      	cmp	r1, #8
 8009bba:	dc03      	bgt.n	8009bc4 <_strtod_l+0x318>
 8009bbc:	9207      	str	r2, [sp, #28]
 8009bbe:	42aa      	cmp	r2, r5
 8009bc0:	dd00      	ble.n	8009bc4 <_strtod_l+0x318>
 8009bc2:	9507      	str	r5, [sp, #28]
 8009bc4:	2c00      	cmp	r4, #0
 8009bc6:	d002      	beq.n	8009bce <_strtod_l+0x322>
 8009bc8:	9a07      	ldr	r2, [sp, #28]
 8009bca:	4252      	negs	r2, r2
 8009bcc:	9207      	str	r2, [sp, #28]
 8009bce:	9a06      	ldr	r2, [sp, #24]
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	d14b      	bne.n	8009c6c <_strtod_l+0x3c0>
 8009bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd6:	4310      	orrs	r0, r2
 8009bd8:	d000      	beq.n	8009bdc <_strtod_l+0x330>
 8009bda:	e6ae      	b.n	800993a <_strtod_l+0x8e>
 8009bdc:	4662      	mov	r2, ip
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	d000      	beq.n	8009be4 <_strtod_l+0x338>
 8009be2:	e6c9      	b.n	8009978 <_strtod_l+0xcc>
 8009be4:	2b69      	cmp	r3, #105	; 0x69
 8009be6:	d025      	beq.n	8009c34 <_strtod_l+0x388>
 8009be8:	dc21      	bgt.n	8009c2e <_strtod_l+0x382>
 8009bea:	2b49      	cmp	r3, #73	; 0x49
 8009bec:	d022      	beq.n	8009c34 <_strtod_l+0x388>
 8009bee:	2b4e      	cmp	r3, #78	; 0x4e
 8009bf0:	d000      	beq.n	8009bf4 <_strtod_l+0x348>
 8009bf2:	e6c1      	b.n	8009978 <_strtod_l+0xcc>
 8009bf4:	49a1      	ldr	r1, [pc, #644]	; (8009e7c <_strtod_l+0x5d0>)
 8009bf6:	a81f      	add	r0, sp, #124	; 0x7c
 8009bf8:	f001 ff66 	bl	800bac8 <__match>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d100      	bne.n	8009c02 <_strtod_l+0x356>
 8009c00:	e6ba      	b.n	8009978 <_strtod_l+0xcc>
 8009c02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b28      	cmp	r3, #40	; 0x28
 8009c08:	d12a      	bne.n	8009c60 <_strtod_l+0x3b4>
 8009c0a:	499d      	ldr	r1, [pc, #628]	; (8009e80 <_strtod_l+0x5d4>)
 8009c0c:	aa22      	add	r2, sp, #136	; 0x88
 8009c0e:	a81f      	add	r0, sp, #124	; 0x7c
 8009c10:	f001 ff6e 	bl	800baf0 <__hexnan>
 8009c14:	2805      	cmp	r0, #5
 8009c16:	d123      	bne.n	8009c60 <_strtod_l+0x3b4>
 8009c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c1a:	4a9a      	ldr	r2, [pc, #616]	; (8009e84 <_strtod_l+0x5d8>)
 8009c1c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	0017      	movs	r7, r2
 8009c22:	e68a      	b.n	800993a <_strtod_l+0x8e>
 8009c24:	210a      	movs	r1, #10
 8009c26:	434a      	muls	r2, r1
 8009c28:	18d2      	adds	r2, r2, r3
 8009c2a:	3a30      	subs	r2, #48	; 0x30
 8009c2c:	e7b8      	b.n	8009ba0 <_strtod_l+0x2f4>
 8009c2e:	2b6e      	cmp	r3, #110	; 0x6e
 8009c30:	d0e0      	beq.n	8009bf4 <_strtod_l+0x348>
 8009c32:	e6a1      	b.n	8009978 <_strtod_l+0xcc>
 8009c34:	4994      	ldr	r1, [pc, #592]	; (8009e88 <_strtod_l+0x5dc>)
 8009c36:	a81f      	add	r0, sp, #124	; 0x7c
 8009c38:	f001 ff46 	bl	800bac8 <__match>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d100      	bne.n	8009c42 <_strtod_l+0x396>
 8009c40:	e69a      	b.n	8009978 <_strtod_l+0xcc>
 8009c42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c44:	4991      	ldr	r1, [pc, #580]	; (8009e8c <_strtod_l+0x5e0>)
 8009c46:	3b01      	subs	r3, #1
 8009c48:	a81f      	add	r0, sp, #124	; 0x7c
 8009c4a:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c4c:	f001 ff3c 	bl	800bac8 <__match>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d102      	bne.n	8009c5a <_strtod_l+0x3ae>
 8009c54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c56:	3301      	adds	r3, #1
 8009c58:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c5a:	2600      	movs	r6, #0
 8009c5c:	4f89      	ldr	r7, [pc, #548]	; (8009e84 <_strtod_l+0x5d8>)
 8009c5e:	e66c      	b.n	800993a <_strtod_l+0x8e>
 8009c60:	488b      	ldr	r0, [pc, #556]	; (8009e90 <_strtod_l+0x5e4>)
 8009c62:	f003 f8b9 	bl	800cdd8 <nan>
 8009c66:	0006      	movs	r6, r0
 8009c68:	000f      	movs	r7, r1
 8009c6a:	e666      	b.n	800993a <_strtod_l+0x8e>
 8009c6c:	9b07      	ldr	r3, [sp, #28]
 8009c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c70:	1a9b      	subs	r3, r3, r2
 8009c72:	930a      	str	r3, [sp, #40]	; 0x28
 8009c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <_strtod_l+0x3d2>
 8009c7a:	9b06      	ldr	r3, [sp, #24]
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	9c06      	ldr	r4, [sp, #24]
 8009c80:	2c10      	cmp	r4, #16
 8009c82:	dd00      	ble.n	8009c86 <_strtod_l+0x3da>
 8009c84:	2410      	movs	r4, #16
 8009c86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c88:	f7f8 fd70 	bl	800276c <__aeabi_ui2d>
 8009c8c:	9b06      	ldr	r3, [sp, #24]
 8009c8e:	0006      	movs	r6, r0
 8009c90:	000f      	movs	r7, r1
 8009c92:	2b09      	cmp	r3, #9
 8009c94:	dd15      	ble.n	8009cc2 <_strtod_l+0x416>
 8009c96:	0022      	movs	r2, r4
 8009c98:	4b7e      	ldr	r3, [pc, #504]	; (8009e94 <_strtod_l+0x5e8>)
 8009c9a:	3a09      	subs	r2, #9
 8009c9c:	00d2      	lsls	r2, r2, #3
 8009c9e:	189b      	adds	r3, r3, r2
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f7f7 fee0 	bl	8001a68 <__aeabi_dmul>
 8009ca8:	0006      	movs	r6, r0
 8009caa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009cac:	000f      	movs	r7, r1
 8009cae:	f7f8 fd5d 	bl	800276c <__aeabi_ui2d>
 8009cb2:	0002      	movs	r2, r0
 8009cb4:	000b      	movs	r3, r1
 8009cb6:	0030      	movs	r0, r6
 8009cb8:	0039      	movs	r1, r7
 8009cba:	f7f6 ff97 	bl	8000bec <__aeabi_dadd>
 8009cbe:	0006      	movs	r6, r0
 8009cc0:	000f      	movs	r7, r1
 8009cc2:	9b06      	ldr	r3, [sp, #24]
 8009cc4:	2b0f      	cmp	r3, #15
 8009cc6:	dc39      	bgt.n	8009d3c <_strtod_l+0x490>
 8009cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d100      	bne.n	8009cd0 <_strtod_l+0x424>
 8009cce:	e634      	b.n	800993a <_strtod_l+0x8e>
 8009cd0:	dd24      	ble.n	8009d1c <_strtod_l+0x470>
 8009cd2:	2b16      	cmp	r3, #22
 8009cd4:	dc09      	bgt.n	8009cea <_strtod_l+0x43e>
 8009cd6:	496f      	ldr	r1, [pc, #444]	; (8009e94 <_strtod_l+0x5e8>)
 8009cd8:	00db      	lsls	r3, r3, #3
 8009cda:	18c9      	adds	r1, r1, r3
 8009cdc:	0032      	movs	r2, r6
 8009cde:	6808      	ldr	r0, [r1, #0]
 8009ce0:	6849      	ldr	r1, [r1, #4]
 8009ce2:	003b      	movs	r3, r7
 8009ce4:	f7f7 fec0 	bl	8001a68 <__aeabi_dmul>
 8009ce8:	e7bd      	b.n	8009c66 <_strtod_l+0x3ba>
 8009cea:	2325      	movs	r3, #37	; 0x25
 8009cec:	9a06      	ldr	r2, [sp, #24]
 8009cee:	1a9b      	subs	r3, r3, r2
 8009cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	db22      	blt.n	8009d3c <_strtod_l+0x490>
 8009cf6:	240f      	movs	r4, #15
 8009cf8:	9b06      	ldr	r3, [sp, #24]
 8009cfa:	4d66      	ldr	r5, [pc, #408]	; (8009e94 <_strtod_l+0x5e8>)
 8009cfc:	1ae4      	subs	r4, r4, r3
 8009cfe:	00e1      	lsls	r1, r4, #3
 8009d00:	1869      	adds	r1, r5, r1
 8009d02:	0032      	movs	r2, r6
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	6849      	ldr	r1, [r1, #4]
 8009d08:	003b      	movs	r3, r7
 8009d0a:	f7f7 fead 	bl	8001a68 <__aeabi_dmul>
 8009d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d10:	1b1c      	subs	r4, r3, r4
 8009d12:	00e4      	lsls	r4, r4, #3
 8009d14:	192c      	adds	r4, r5, r4
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	6863      	ldr	r3, [r4, #4]
 8009d1a:	e7e3      	b.n	8009ce4 <_strtod_l+0x438>
 8009d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1e:	3316      	adds	r3, #22
 8009d20:	db0c      	blt.n	8009d3c <_strtod_l+0x490>
 8009d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d24:	9a07      	ldr	r2, [sp, #28]
 8009d26:	0030      	movs	r0, r6
 8009d28:	1a9a      	subs	r2, r3, r2
 8009d2a:	4b5a      	ldr	r3, [pc, #360]	; (8009e94 <_strtod_l+0x5e8>)
 8009d2c:	00d2      	lsls	r2, r2, #3
 8009d2e:	189b      	adds	r3, r3, r2
 8009d30:	0039      	movs	r1, r7
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f7f7 fa95 	bl	8001264 <__aeabi_ddiv>
 8009d3a:	e794      	b.n	8009c66 <_strtod_l+0x3ba>
 8009d3c:	9b06      	ldr	r3, [sp, #24]
 8009d3e:	1b1c      	subs	r4, r3, r4
 8009d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d42:	18e4      	adds	r4, r4, r3
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	dd72      	ble.n	8009e2e <_strtod_l+0x582>
 8009d48:	230f      	movs	r3, #15
 8009d4a:	0021      	movs	r1, r4
 8009d4c:	4019      	ands	r1, r3
 8009d4e:	421c      	tst	r4, r3
 8009d50:	d00a      	beq.n	8009d68 <_strtod_l+0x4bc>
 8009d52:	00cb      	lsls	r3, r1, #3
 8009d54:	494f      	ldr	r1, [pc, #316]	; (8009e94 <_strtod_l+0x5e8>)
 8009d56:	0032      	movs	r2, r6
 8009d58:	18c9      	adds	r1, r1, r3
 8009d5a:	6808      	ldr	r0, [r1, #0]
 8009d5c:	6849      	ldr	r1, [r1, #4]
 8009d5e:	003b      	movs	r3, r7
 8009d60:	f7f7 fe82 	bl	8001a68 <__aeabi_dmul>
 8009d64:	0006      	movs	r6, r0
 8009d66:	000f      	movs	r7, r1
 8009d68:	230f      	movs	r3, #15
 8009d6a:	439c      	bics	r4, r3
 8009d6c:	d04a      	beq.n	8009e04 <_strtod_l+0x558>
 8009d6e:	3326      	adds	r3, #38	; 0x26
 8009d70:	33ff      	adds	r3, #255	; 0xff
 8009d72:	429c      	cmp	r4, r3
 8009d74:	dd22      	ble.n	8009dbc <_strtod_l+0x510>
 8009d76:	2300      	movs	r3, #0
 8009d78:	9306      	str	r3, [sp, #24]
 8009d7a:	9307      	str	r3, [sp, #28]
 8009d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d80:	2322      	movs	r3, #34	; 0x22
 8009d82:	2600      	movs	r6, #0
 8009d84:	9a05      	ldr	r2, [sp, #20]
 8009d86:	4f3f      	ldr	r7, [pc, #252]	; (8009e84 <_strtod_l+0x5d8>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d8c:	42b3      	cmp	r3, r6
 8009d8e:	d100      	bne.n	8009d92 <_strtod_l+0x4e6>
 8009d90:	e5d3      	b.n	800993a <_strtod_l+0x8e>
 8009d92:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d94:	9805      	ldr	r0, [sp, #20]
 8009d96:	f001 ffc7 	bl	800bd28 <_Bfree>
 8009d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d9c:	9805      	ldr	r0, [sp, #20]
 8009d9e:	f001 ffc3 	bl	800bd28 <_Bfree>
 8009da2:	9907      	ldr	r1, [sp, #28]
 8009da4:	9805      	ldr	r0, [sp, #20]
 8009da6:	f001 ffbf 	bl	800bd28 <_Bfree>
 8009daa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dac:	9805      	ldr	r0, [sp, #20]
 8009dae:	f001 ffbb 	bl	800bd28 <_Bfree>
 8009db2:	9906      	ldr	r1, [sp, #24]
 8009db4:	9805      	ldr	r0, [sp, #20]
 8009db6:	f001 ffb7 	bl	800bd28 <_Bfree>
 8009dba:	e5be      	b.n	800993a <_strtod_l+0x8e>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	0030      	movs	r0, r6
 8009dc0:	0039      	movs	r1, r7
 8009dc2:	4d35      	ldr	r5, [pc, #212]	; (8009e98 <_strtod_l+0x5ec>)
 8009dc4:	1124      	asrs	r4, r4, #4
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	2c01      	cmp	r4, #1
 8009dca:	dc1e      	bgt.n	8009e0a <_strtod_l+0x55e>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <_strtod_l+0x528>
 8009dd0:	0006      	movs	r6, r0
 8009dd2:	000f      	movs	r7, r1
 8009dd4:	4b31      	ldr	r3, [pc, #196]	; (8009e9c <_strtod_l+0x5f0>)
 8009dd6:	0032      	movs	r2, r6
 8009dd8:	18ff      	adds	r7, r7, r3
 8009dda:	9b08      	ldr	r3, [sp, #32]
 8009ddc:	00dd      	lsls	r5, r3, #3
 8009dde:	4b2e      	ldr	r3, [pc, #184]	; (8009e98 <_strtod_l+0x5ec>)
 8009de0:	195d      	adds	r5, r3, r5
 8009de2:	6828      	ldr	r0, [r5, #0]
 8009de4:	6869      	ldr	r1, [r5, #4]
 8009de6:	003b      	movs	r3, r7
 8009de8:	f7f7 fe3e 	bl	8001a68 <__aeabi_dmul>
 8009dec:	4b25      	ldr	r3, [pc, #148]	; (8009e84 <_strtod_l+0x5d8>)
 8009dee:	4a2c      	ldr	r2, [pc, #176]	; (8009ea0 <_strtod_l+0x5f4>)
 8009df0:	0006      	movs	r6, r0
 8009df2:	400b      	ands	r3, r1
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d8be      	bhi.n	8009d76 <_strtod_l+0x4ca>
 8009df8:	4a2a      	ldr	r2, [pc, #168]	; (8009ea4 <_strtod_l+0x5f8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d913      	bls.n	8009e26 <_strtod_l+0x57a>
 8009dfe:	2601      	movs	r6, #1
 8009e00:	4f29      	ldr	r7, [pc, #164]	; (8009ea8 <_strtod_l+0x5fc>)
 8009e02:	4276      	negs	r6, r6
 8009e04:	2300      	movs	r3, #0
 8009e06:	9308      	str	r3, [sp, #32]
 8009e08:	e087      	b.n	8009f1a <_strtod_l+0x66e>
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	4214      	tst	r4, r2
 8009e0e:	d004      	beq.n	8009e1a <_strtod_l+0x56e>
 8009e10:	682a      	ldr	r2, [r5, #0]
 8009e12:	686b      	ldr	r3, [r5, #4]
 8009e14:	f7f7 fe28 	bl	8001a68 <__aeabi_dmul>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	9a08      	ldr	r2, [sp, #32]
 8009e1c:	1064      	asrs	r4, r4, #1
 8009e1e:	3201      	adds	r2, #1
 8009e20:	9208      	str	r2, [sp, #32]
 8009e22:	3508      	adds	r5, #8
 8009e24:	e7d0      	b.n	8009dc8 <_strtod_l+0x51c>
 8009e26:	23d4      	movs	r3, #212	; 0xd4
 8009e28:	049b      	lsls	r3, r3, #18
 8009e2a:	18cf      	adds	r7, r1, r3
 8009e2c:	e7ea      	b.n	8009e04 <_strtod_l+0x558>
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d0e8      	beq.n	8009e04 <_strtod_l+0x558>
 8009e32:	4264      	negs	r4, r4
 8009e34:	220f      	movs	r2, #15
 8009e36:	0023      	movs	r3, r4
 8009e38:	4013      	ands	r3, r2
 8009e3a:	4214      	tst	r4, r2
 8009e3c:	d00a      	beq.n	8009e54 <_strtod_l+0x5a8>
 8009e3e:	00da      	lsls	r2, r3, #3
 8009e40:	4b14      	ldr	r3, [pc, #80]	; (8009e94 <_strtod_l+0x5e8>)
 8009e42:	0030      	movs	r0, r6
 8009e44:	189b      	adds	r3, r3, r2
 8009e46:	0039      	movs	r1, r7
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f7f7 fa0a 	bl	8001264 <__aeabi_ddiv>
 8009e50:	0006      	movs	r6, r0
 8009e52:	000f      	movs	r7, r1
 8009e54:	1124      	asrs	r4, r4, #4
 8009e56:	d0d5      	beq.n	8009e04 <_strtod_l+0x558>
 8009e58:	2c1f      	cmp	r4, #31
 8009e5a:	dd27      	ble.n	8009eac <_strtod_l+0x600>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9306      	str	r3, [sp, #24]
 8009e60:	9307      	str	r3, [sp, #28]
 8009e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e64:	9309      	str	r3, [sp, #36]	; 0x24
 8009e66:	2322      	movs	r3, #34	; 0x22
 8009e68:	9a05      	ldr	r2, [sp, #20]
 8009e6a:	2600      	movs	r6, #0
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e70:	2700      	movs	r7, #0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d18d      	bne.n	8009d92 <_strtod_l+0x4e6>
 8009e76:	e560      	b.n	800993a <_strtod_l+0x8e>
 8009e78:	00004e1f 	.word	0x00004e1f
 8009e7c:	0800d731 	.word	0x0800d731
 8009e80:	0800d774 	.word	0x0800d774
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	0800d729 	.word	0x0800d729
 8009e8c:	0800d8b4 	.word	0x0800d8b4
 8009e90:	0800dbc8 	.word	0x0800dbc8
 8009e94:	0800daa8 	.word	0x0800daa8
 8009e98:	0800da80 	.word	0x0800da80
 8009e9c:	fcb00000 	.word	0xfcb00000
 8009ea0:	7ca00000 	.word	0x7ca00000
 8009ea4:	7c900000 	.word	0x7c900000
 8009ea8:	7fefffff 	.word	0x7fefffff
 8009eac:	2310      	movs	r3, #16
 8009eae:	0022      	movs	r2, r4
 8009eb0:	401a      	ands	r2, r3
 8009eb2:	9208      	str	r2, [sp, #32]
 8009eb4:	421c      	tst	r4, r3
 8009eb6:	d001      	beq.n	8009ebc <_strtod_l+0x610>
 8009eb8:	335a      	adds	r3, #90	; 0x5a
 8009eba:	9308      	str	r3, [sp, #32]
 8009ebc:	0030      	movs	r0, r6
 8009ebe:	0039      	movs	r1, r7
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4dc5      	ldr	r5, [pc, #788]	; (800a1d8 <_strtod_l+0x92c>)
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	4214      	tst	r4, r2
 8009ec8:	d004      	beq.n	8009ed4 <_strtod_l+0x628>
 8009eca:	682a      	ldr	r2, [r5, #0]
 8009ecc:	686b      	ldr	r3, [r5, #4]
 8009ece:	f7f7 fdcb 	bl	8001a68 <__aeabi_dmul>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	1064      	asrs	r4, r4, #1
 8009ed6:	3508      	adds	r5, #8
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	d1f3      	bne.n	8009ec4 <_strtod_l+0x618>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <_strtod_l+0x638>
 8009ee0:	0006      	movs	r6, r0
 8009ee2:	000f      	movs	r7, r1
 8009ee4:	9b08      	ldr	r3, [sp, #32]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00f      	beq.n	8009f0a <_strtod_l+0x65e>
 8009eea:	236b      	movs	r3, #107	; 0x6b
 8009eec:	007a      	lsls	r2, r7, #1
 8009eee:	0d52      	lsrs	r2, r2, #21
 8009ef0:	0039      	movs	r1, r7
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dd08      	ble.n	8009f0a <_strtod_l+0x65e>
 8009ef8:	2b1f      	cmp	r3, #31
 8009efa:	dc00      	bgt.n	8009efe <_strtod_l+0x652>
 8009efc:	e124      	b.n	800a148 <_strtod_l+0x89c>
 8009efe:	2600      	movs	r6, #0
 8009f00:	2b34      	cmp	r3, #52	; 0x34
 8009f02:	dc00      	bgt.n	8009f06 <_strtod_l+0x65a>
 8009f04:	e119      	b.n	800a13a <_strtod_l+0x88e>
 8009f06:	27dc      	movs	r7, #220	; 0xdc
 8009f08:	04bf      	lsls	r7, r7, #18
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	0030      	movs	r0, r6
 8009f10:	0039      	movs	r1, r7
 8009f12:	f7f6 fa9b 	bl	800044c <__aeabi_dcmpeq>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d1a0      	bne.n	8009e5c <_strtod_l+0x5b0>
 8009f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009f22:	9b06      	ldr	r3, [sp, #24]
 8009f24:	9805      	ldr	r0, [sp, #20]
 8009f26:	f001 ff67 	bl	800bdf8 <__s2b>
 8009f2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d100      	bne.n	8009f32 <_strtod_l+0x686>
 8009f30:	e721      	b.n	8009d76 <_strtod_l+0x4ca>
 8009f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f34:	9907      	ldr	r1, [sp, #28]
 8009f36:	17da      	asrs	r2, r3, #31
 8009f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f3a:	1a5b      	subs	r3, r3, r1
 8009f3c:	401a      	ands	r2, r3
 8009f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f40:	9215      	str	r2, [sp, #84]	; 0x54
 8009f42:	43db      	mvns	r3, r3
 8009f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f46:	17db      	asrs	r3, r3, #31
 8009f48:	401a      	ands	r2, r3
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	921a      	str	r2, [sp, #104]	; 0x68
 8009f4e:	9306      	str	r3, [sp, #24]
 8009f50:	9307      	str	r3, [sp, #28]
 8009f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f54:	9805      	ldr	r0, [sp, #20]
 8009f56:	6859      	ldr	r1, [r3, #4]
 8009f58:	f001 fea2 	bl	800bca0 <_Balloc>
 8009f5c:	9009      	str	r0, [sp, #36]	; 0x24
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d100      	bne.n	8009f64 <_strtod_l+0x6b8>
 8009f62:	e70d      	b.n	8009d80 <_strtod_l+0x4d4>
 8009f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	310c      	adds	r1, #12
 8009f6c:	1c9a      	adds	r2, r3, #2
 8009f6e:	0092      	lsls	r2, r2, #2
 8009f70:	300c      	adds	r0, #12
 8009f72:	930c      	str	r3, [sp, #48]	; 0x30
 8009f74:	f7fe fdbc 	bl	8008af0 <memcpy>
 8009f78:	ab22      	add	r3, sp, #136	; 0x88
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	ab21      	add	r3, sp, #132	; 0x84
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	0032      	movs	r2, r6
 8009f82:	003b      	movs	r3, r7
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	9612      	str	r6, [sp, #72]	; 0x48
 8009f88:	9713      	str	r7, [sp, #76]	; 0x4c
 8009f8a:	f002 fa81 	bl	800c490 <__d2b>
 8009f8e:	9020      	str	r0, [sp, #128]	; 0x80
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d100      	bne.n	8009f96 <_strtod_l+0x6ea>
 8009f94:	e6f4      	b.n	8009d80 <_strtod_l+0x4d4>
 8009f96:	2101      	movs	r1, #1
 8009f98:	9805      	ldr	r0, [sp, #20]
 8009f9a:	f001 ffc1 	bl	800bf20 <__i2b>
 8009f9e:	9007      	str	r0, [sp, #28]
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d100      	bne.n	8009fa6 <_strtod_l+0x6fa>
 8009fa4:	e6ec      	b.n	8009d80 <_strtod_l+0x4d4>
 8009fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fa8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009faa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009fac:	1ad4      	subs	r4, r2, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	db01      	blt.n	8009fb6 <_strtod_l+0x70a>
 8009fb2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009fb4:	195d      	adds	r5, r3, r5
 8009fb6:	9908      	ldr	r1, [sp, #32]
 8009fb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fba:	1a5b      	subs	r3, r3, r1
 8009fbc:	2136      	movs	r1, #54	; 0x36
 8009fbe:	189b      	adds	r3, r3, r2
 8009fc0:	1a8a      	subs	r2, r1, r2
 8009fc2:	4986      	ldr	r1, [pc, #536]	; (800a1dc <_strtod_l+0x930>)
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	468c      	mov	ip, r1
 8009fc8:	2100      	movs	r1, #0
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	9110      	str	r1, [sp, #64]	; 0x40
 8009fce:	9014      	str	r0, [sp, #80]	; 0x50
 8009fd0:	4563      	cmp	r3, ip
 8009fd2:	da07      	bge.n	8009fe4 <_strtod_l+0x738>
 8009fd4:	4661      	mov	r1, ip
 8009fd6:	1ac9      	subs	r1, r1, r3
 8009fd8:	1a52      	subs	r2, r2, r1
 8009fda:	291f      	cmp	r1, #31
 8009fdc:	dd00      	ble.n	8009fe0 <_strtod_l+0x734>
 8009fde:	e0b8      	b.n	800a152 <_strtod_l+0x8a6>
 8009fe0:	4088      	lsls	r0, r1
 8009fe2:	9014      	str	r0, [sp, #80]	; 0x50
 8009fe4:	18ab      	adds	r3, r5, r2
 8009fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe8:	18a4      	adds	r4, r4, r2
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fee:	191c      	adds	r4, r3, r4
 8009ff0:	002b      	movs	r3, r5
 8009ff2:	4295      	cmp	r5, r2
 8009ff4:	dd00      	ble.n	8009ff8 <_strtod_l+0x74c>
 8009ff6:	0013      	movs	r3, r2
 8009ff8:	42a3      	cmp	r3, r4
 8009ffa:	dd00      	ble.n	8009ffe <_strtod_l+0x752>
 8009ffc:	0023      	movs	r3, r4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	dd04      	ble.n	800a00c <_strtod_l+0x760>
 800a002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a004:	1ae4      	subs	r4, r4, r3
 800a006:	1ad2      	subs	r2, r2, r3
 800a008:	920c      	str	r2, [sp, #48]	; 0x30
 800a00a:	1aed      	subs	r5, r5, r3
 800a00c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a00e:	2b00      	cmp	r3, #0
 800a010:	dd17      	ble.n	800a042 <_strtod_l+0x796>
 800a012:	001a      	movs	r2, r3
 800a014:	9907      	ldr	r1, [sp, #28]
 800a016:	9805      	ldr	r0, [sp, #20]
 800a018:	f002 f848 	bl	800c0ac <__pow5mult>
 800a01c:	9007      	str	r0, [sp, #28]
 800a01e:	2800      	cmp	r0, #0
 800a020:	d100      	bne.n	800a024 <_strtod_l+0x778>
 800a022:	e6ad      	b.n	8009d80 <_strtod_l+0x4d4>
 800a024:	0001      	movs	r1, r0
 800a026:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a028:	9805      	ldr	r0, [sp, #20]
 800a02a:	f001 ff8f 	bl	800bf4c <__multiply>
 800a02e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a030:	2800      	cmp	r0, #0
 800a032:	d100      	bne.n	800a036 <_strtod_l+0x78a>
 800a034:	e6a4      	b.n	8009d80 <_strtod_l+0x4d4>
 800a036:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a038:	9805      	ldr	r0, [sp, #20]
 800a03a:	f001 fe75 	bl	800bd28 <_Bfree>
 800a03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a040:	9320      	str	r3, [sp, #128]	; 0x80
 800a042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd00      	ble.n	800a04a <_strtod_l+0x79e>
 800a048:	e089      	b.n	800a15e <_strtod_l+0x8b2>
 800a04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd08      	ble.n	800a062 <_strtod_l+0x7b6>
 800a050:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a052:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	f002 f829 	bl	800c0ac <__pow5mult>
 800a05a:	9009      	str	r0, [sp, #36]	; 0x24
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d100      	bne.n	800a062 <_strtod_l+0x7b6>
 800a060:	e68e      	b.n	8009d80 <_strtod_l+0x4d4>
 800a062:	2c00      	cmp	r4, #0
 800a064:	dd08      	ble.n	800a078 <_strtod_l+0x7cc>
 800a066:	0022      	movs	r2, r4
 800a068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a06a:	9805      	ldr	r0, [sp, #20]
 800a06c:	f002 f87a 	bl	800c164 <__lshift>
 800a070:	9009      	str	r0, [sp, #36]	; 0x24
 800a072:	2800      	cmp	r0, #0
 800a074:	d100      	bne.n	800a078 <_strtod_l+0x7cc>
 800a076:	e683      	b.n	8009d80 <_strtod_l+0x4d4>
 800a078:	2d00      	cmp	r5, #0
 800a07a:	dd08      	ble.n	800a08e <_strtod_l+0x7e2>
 800a07c:	002a      	movs	r2, r5
 800a07e:	9907      	ldr	r1, [sp, #28]
 800a080:	9805      	ldr	r0, [sp, #20]
 800a082:	f002 f86f 	bl	800c164 <__lshift>
 800a086:	9007      	str	r0, [sp, #28]
 800a088:	2800      	cmp	r0, #0
 800a08a:	d100      	bne.n	800a08e <_strtod_l+0x7e2>
 800a08c:	e678      	b.n	8009d80 <_strtod_l+0x4d4>
 800a08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a090:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a092:	9805      	ldr	r0, [sp, #20]
 800a094:	f002 f8f0 	bl	800c278 <__mdiff>
 800a098:	9006      	str	r0, [sp, #24]
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d100      	bne.n	800a0a0 <_strtod_l+0x7f4>
 800a09e:	e66f      	b.n	8009d80 <_strtod_l+0x4d4>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	68c3      	ldr	r3, [r0, #12]
 800a0a4:	9907      	ldr	r1, [sp, #28]
 800a0a6:	60c2      	str	r2, [r0, #12]
 800a0a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0aa:	f002 f8c9 	bl	800c240 <__mcmp>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	da5f      	bge.n	800a172 <_strtod_l+0x8c6>
 800a0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b4:	4333      	orrs	r3, r6
 800a0b6:	d000      	beq.n	800a0ba <_strtod_l+0x80e>
 800a0b8:	e08a      	b.n	800a1d0 <_strtod_l+0x924>
 800a0ba:	033b      	lsls	r3, r7, #12
 800a0bc:	d000      	beq.n	800a0c0 <_strtod_l+0x814>
 800a0be:	e087      	b.n	800a1d0 <_strtod_l+0x924>
 800a0c0:	22d6      	movs	r2, #214	; 0xd6
 800a0c2:	4b47      	ldr	r3, [pc, #284]	; (800a1e0 <_strtod_l+0x934>)
 800a0c4:	04d2      	lsls	r2, r2, #19
 800a0c6:	403b      	ands	r3, r7
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d800      	bhi.n	800a0ce <_strtod_l+0x822>
 800a0cc:	e080      	b.n	800a1d0 <_strtod_l+0x924>
 800a0ce:	9b06      	ldr	r3, [sp, #24]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d104      	bne.n	800a0e2 <_strtod_l+0x836>
 800a0d8:	9b06      	ldr	r3, [sp, #24]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	dd76      	ble.n	800a1d0 <_strtod_l+0x924>
 800a0e2:	9906      	ldr	r1, [sp, #24]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	9805      	ldr	r0, [sp, #20]
 800a0e8:	f002 f83c 	bl	800c164 <__lshift>
 800a0ec:	9907      	ldr	r1, [sp, #28]
 800a0ee:	9006      	str	r0, [sp, #24]
 800a0f0:	f002 f8a6 	bl	800c240 <__mcmp>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	dd6b      	ble.n	800a1d0 <_strtod_l+0x924>
 800a0f8:	9908      	ldr	r1, [sp, #32]
 800a0fa:	003b      	movs	r3, r7
 800a0fc:	4a38      	ldr	r2, [pc, #224]	; (800a1e0 <_strtod_l+0x934>)
 800a0fe:	2900      	cmp	r1, #0
 800a100:	d100      	bne.n	800a104 <_strtod_l+0x858>
 800a102:	e092      	b.n	800a22a <_strtod_l+0x97e>
 800a104:	0011      	movs	r1, r2
 800a106:	20d6      	movs	r0, #214	; 0xd6
 800a108:	4039      	ands	r1, r7
 800a10a:	04c0      	lsls	r0, r0, #19
 800a10c:	4281      	cmp	r1, r0
 800a10e:	dd00      	ble.n	800a112 <_strtod_l+0x866>
 800a110:	e08b      	b.n	800a22a <_strtod_l+0x97e>
 800a112:	23dc      	movs	r3, #220	; 0xdc
 800a114:	049b      	lsls	r3, r3, #18
 800a116:	4299      	cmp	r1, r3
 800a118:	dc00      	bgt.n	800a11c <_strtod_l+0x870>
 800a11a:	e6a4      	b.n	8009e66 <_strtod_l+0x5ba>
 800a11c:	0030      	movs	r0, r6
 800a11e:	0039      	movs	r1, r7
 800a120:	2200      	movs	r2, #0
 800a122:	4b30      	ldr	r3, [pc, #192]	; (800a1e4 <_strtod_l+0x938>)
 800a124:	f7f7 fca0 	bl	8001a68 <__aeabi_dmul>
 800a128:	0006      	movs	r6, r0
 800a12a:	000f      	movs	r7, r1
 800a12c:	4308      	orrs	r0, r1
 800a12e:	d000      	beq.n	800a132 <_strtod_l+0x886>
 800a130:	e62f      	b.n	8009d92 <_strtod_l+0x4e6>
 800a132:	2322      	movs	r3, #34	; 0x22
 800a134:	9a05      	ldr	r2, [sp, #20]
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	e62b      	b.n	8009d92 <_strtod_l+0x4e6>
 800a13a:	234b      	movs	r3, #75	; 0x4b
 800a13c:	1a9a      	subs	r2, r3, r2
 800a13e:	3b4c      	subs	r3, #76	; 0x4c
 800a140:	4093      	lsls	r3, r2
 800a142:	4019      	ands	r1, r3
 800a144:	000f      	movs	r7, r1
 800a146:	e6e0      	b.n	8009f0a <_strtod_l+0x65e>
 800a148:	2201      	movs	r2, #1
 800a14a:	4252      	negs	r2, r2
 800a14c:	409a      	lsls	r2, r3
 800a14e:	4016      	ands	r6, r2
 800a150:	e6db      	b.n	8009f0a <_strtod_l+0x65e>
 800a152:	4925      	ldr	r1, [pc, #148]	; (800a1e8 <_strtod_l+0x93c>)
 800a154:	1acb      	subs	r3, r1, r3
 800a156:	0001      	movs	r1, r0
 800a158:	4099      	lsls	r1, r3
 800a15a:	9110      	str	r1, [sp, #64]	; 0x40
 800a15c:	e741      	b.n	8009fe2 <_strtod_l+0x736>
 800a15e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a160:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a162:	9805      	ldr	r0, [sp, #20]
 800a164:	f001 fffe 	bl	800c164 <__lshift>
 800a168:	9020      	str	r0, [sp, #128]	; 0x80
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d000      	beq.n	800a170 <_strtod_l+0x8c4>
 800a16e:	e76c      	b.n	800a04a <_strtod_l+0x79e>
 800a170:	e606      	b.n	8009d80 <_strtod_l+0x4d4>
 800a172:	970c      	str	r7, [sp, #48]	; 0x30
 800a174:	2800      	cmp	r0, #0
 800a176:	d176      	bne.n	800a266 <_strtod_l+0x9ba>
 800a178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a17a:	033b      	lsls	r3, r7, #12
 800a17c:	0b1b      	lsrs	r3, r3, #12
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d038      	beq.n	800a1f4 <_strtod_l+0x948>
 800a182:	4a1a      	ldr	r2, [pc, #104]	; (800a1ec <_strtod_l+0x940>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d138      	bne.n	800a1fa <_strtod_l+0x94e>
 800a188:	2201      	movs	r2, #1
 800a18a:	9b08      	ldr	r3, [sp, #32]
 800a18c:	4252      	negs	r2, r2
 800a18e:	0031      	movs	r1, r6
 800a190:	0010      	movs	r0, r2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00b      	beq.n	800a1ae <_strtod_l+0x902>
 800a196:	24d4      	movs	r4, #212	; 0xd4
 800a198:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <_strtod_l+0x934>)
 800a19a:	0010      	movs	r0, r2
 800a19c:	403b      	ands	r3, r7
 800a19e:	04e4      	lsls	r4, r4, #19
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	d804      	bhi.n	800a1ae <_strtod_l+0x902>
 800a1a4:	306c      	adds	r0, #108	; 0x6c
 800a1a6:	0d1b      	lsrs	r3, r3, #20
 800a1a8:	1ac3      	subs	r3, r0, r3
 800a1aa:	409a      	lsls	r2, r3
 800a1ac:	0010      	movs	r0, r2
 800a1ae:	4281      	cmp	r1, r0
 800a1b0:	d123      	bne.n	800a1fa <_strtod_l+0x94e>
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <_strtod_l+0x944>)
 800a1b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d102      	bne.n	800a1c0 <_strtod_l+0x914>
 800a1ba:	1c4b      	adds	r3, r1, #1
 800a1bc:	d100      	bne.n	800a1c0 <_strtod_l+0x914>
 800a1be:	e5df      	b.n	8009d80 <_strtod_l+0x4d4>
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <_strtod_l+0x934>)
 800a1c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	401a      	ands	r2, r3
 800a1c8:	0013      	movs	r3, r2
 800a1ca:	2280      	movs	r2, #128	; 0x80
 800a1cc:	0352      	lsls	r2, r2, #13
 800a1ce:	189f      	adds	r7, r3, r2
 800a1d0:	9b08      	ldr	r3, [sp, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1a2      	bne.n	800a11c <_strtod_l+0x870>
 800a1d6:	e5dc      	b.n	8009d92 <_strtod_l+0x4e6>
 800a1d8:	0800d788 	.word	0x0800d788
 800a1dc:	fffffc02 	.word	0xfffffc02
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	39500000 	.word	0x39500000
 800a1e8:	fffffbe2 	.word	0xfffffbe2
 800a1ec:	000fffff 	.word	0x000fffff
 800a1f0:	7fefffff 	.word	0x7fefffff
 800a1f4:	4333      	orrs	r3, r6
 800a1f6:	d100      	bne.n	800a1fa <_strtod_l+0x94e>
 800a1f8:	e77e      	b.n	800a0f8 <_strtod_l+0x84c>
 800a1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01d      	beq.n	800a23c <_strtod_l+0x990>
 800a200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a202:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a204:	4213      	tst	r3, r2
 800a206:	d0e3      	beq.n	800a1d0 <_strtod_l+0x924>
 800a208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a20a:	0030      	movs	r0, r6
 800a20c:	0039      	movs	r1, r7
 800a20e:	9a08      	ldr	r2, [sp, #32]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d017      	beq.n	800a244 <_strtod_l+0x998>
 800a214:	f7ff fb32 	bl	800987c <sulp>
 800a218:	0002      	movs	r2, r0
 800a21a:	000b      	movs	r3, r1
 800a21c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a21e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a220:	f7f6 fce4 	bl	8000bec <__aeabi_dadd>
 800a224:	0006      	movs	r6, r0
 800a226:	000f      	movs	r7, r1
 800a228:	e7d2      	b.n	800a1d0 <_strtod_l+0x924>
 800a22a:	2601      	movs	r6, #1
 800a22c:	4013      	ands	r3, r2
 800a22e:	4a99      	ldr	r2, [pc, #612]	; (800a494 <_strtod_l+0xbe8>)
 800a230:	4276      	negs	r6, r6
 800a232:	189b      	adds	r3, r3, r2
 800a234:	4a98      	ldr	r2, [pc, #608]	; (800a498 <_strtod_l+0xbec>)
 800a236:	431a      	orrs	r2, r3
 800a238:	0017      	movs	r7, r2
 800a23a:	e7c9      	b.n	800a1d0 <_strtod_l+0x924>
 800a23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a23e:	4233      	tst	r3, r6
 800a240:	d0c6      	beq.n	800a1d0 <_strtod_l+0x924>
 800a242:	e7e1      	b.n	800a208 <_strtod_l+0x95c>
 800a244:	f7ff fb1a 	bl	800987c <sulp>
 800a248:	0002      	movs	r2, r0
 800a24a:	000b      	movs	r3, r1
 800a24c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a24e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a250:	f7f7 fe76 	bl	8001f40 <__aeabi_dsub>
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	0006      	movs	r6, r0
 800a25a:	000f      	movs	r7, r1
 800a25c:	f7f6 f8f6 	bl	800044c <__aeabi_dcmpeq>
 800a260:	2800      	cmp	r0, #0
 800a262:	d0b5      	beq.n	800a1d0 <_strtod_l+0x924>
 800a264:	e5ff      	b.n	8009e66 <_strtod_l+0x5ba>
 800a266:	9907      	ldr	r1, [sp, #28]
 800a268:	9806      	ldr	r0, [sp, #24]
 800a26a:	f002 f975 	bl	800c558 <__ratio>
 800a26e:	2380      	movs	r3, #128	; 0x80
 800a270:	2200      	movs	r2, #0
 800a272:	05db      	lsls	r3, r3, #23
 800a274:	0004      	movs	r4, r0
 800a276:	000d      	movs	r5, r1
 800a278:	f7f6 f8f8 	bl	800046c <__aeabi_dcmple>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d075      	beq.n	800a36c <_strtod_l+0xac0>
 800a280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d047      	beq.n	800a316 <_strtod_l+0xa6a>
 800a286:	2300      	movs	r3, #0
 800a288:	4c84      	ldr	r4, [pc, #528]	; (800a49c <_strtod_l+0xbf0>)
 800a28a:	2500      	movs	r5, #0
 800a28c:	9310      	str	r3, [sp, #64]	; 0x40
 800a28e:	9411      	str	r4, [sp, #68]	; 0x44
 800a290:	4c82      	ldr	r4, [pc, #520]	; (800a49c <_strtod_l+0xbf0>)
 800a292:	4a83      	ldr	r2, [pc, #524]	; (800a4a0 <_strtod_l+0xbf4>)
 800a294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a296:	4013      	ands	r3, r2
 800a298:	9314      	str	r3, [sp, #80]	; 0x50
 800a29a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a29c:	4b81      	ldr	r3, [pc, #516]	; (800a4a4 <_strtod_l+0xbf8>)
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d000      	beq.n	800a2a4 <_strtod_l+0x9f8>
 800a2a2:	e0ac      	b.n	800a3fe <_strtod_l+0xb52>
 800a2a4:	4a80      	ldr	r2, [pc, #512]	; (800a4a8 <_strtod_l+0xbfc>)
 800a2a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a8:	4694      	mov	ip, r2
 800a2aa:	4463      	add	r3, ip
 800a2ac:	001f      	movs	r7, r3
 800a2ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2b2:	0030      	movs	r0, r6
 800a2b4:	0039      	movs	r1, r7
 800a2b6:	920c      	str	r2, [sp, #48]	; 0x30
 800a2b8:	930d      	str	r3, [sp, #52]	; 0x34
 800a2ba:	f002 f875 	bl	800c3a8 <__ulp>
 800a2be:	0002      	movs	r2, r0
 800a2c0:	000b      	movs	r3, r1
 800a2c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a2c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a2c6:	f7f7 fbcf 	bl	8001a68 <__aeabi_dmul>
 800a2ca:	0032      	movs	r2, r6
 800a2cc:	003b      	movs	r3, r7
 800a2ce:	f7f6 fc8d 	bl	8000bec <__aeabi_dadd>
 800a2d2:	4a73      	ldr	r2, [pc, #460]	; (800a4a0 <_strtod_l+0xbf4>)
 800a2d4:	4b75      	ldr	r3, [pc, #468]	; (800a4ac <_strtod_l+0xc00>)
 800a2d6:	0006      	movs	r6, r0
 800a2d8:	400a      	ands	r2, r1
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d95e      	bls.n	800a39c <_strtod_l+0xaf0>
 800a2de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2e0:	4b73      	ldr	r3, [pc, #460]	; (800a4b0 <_strtod_l+0xc04>)
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d103      	bne.n	800a2ee <_strtod_l+0xa42>
 800a2e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	d100      	bne.n	800a2ee <_strtod_l+0xa42>
 800a2ec:	e548      	b.n	8009d80 <_strtod_l+0x4d4>
 800a2ee:	2601      	movs	r6, #1
 800a2f0:	4f6f      	ldr	r7, [pc, #444]	; (800a4b0 <_strtod_l+0xc04>)
 800a2f2:	4276      	negs	r6, r6
 800a2f4:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a2f6:	9805      	ldr	r0, [sp, #20]
 800a2f8:	f001 fd16 	bl	800bd28 <_Bfree>
 800a2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2fe:	9805      	ldr	r0, [sp, #20]
 800a300:	f001 fd12 	bl	800bd28 <_Bfree>
 800a304:	9907      	ldr	r1, [sp, #28]
 800a306:	9805      	ldr	r0, [sp, #20]
 800a308:	f001 fd0e 	bl	800bd28 <_Bfree>
 800a30c:	9906      	ldr	r1, [sp, #24]
 800a30e:	9805      	ldr	r0, [sp, #20]
 800a310:	f001 fd0a 	bl	800bd28 <_Bfree>
 800a314:	e61d      	b.n	8009f52 <_strtod_l+0x6a6>
 800a316:	2e00      	cmp	r6, #0
 800a318:	d11c      	bne.n	800a354 <_strtod_l+0xaa8>
 800a31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a31c:	031b      	lsls	r3, r3, #12
 800a31e:	d11f      	bne.n	800a360 <_strtod_l+0xab4>
 800a320:	2200      	movs	r2, #0
 800a322:	0020      	movs	r0, r4
 800a324:	0029      	movs	r1, r5
 800a326:	4b5d      	ldr	r3, [pc, #372]	; (800a49c <_strtod_l+0xbf0>)
 800a328:	f7f6 f896 	bl	8000458 <__aeabi_dcmplt>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d11a      	bne.n	800a366 <_strtod_l+0xaba>
 800a330:	0020      	movs	r0, r4
 800a332:	0029      	movs	r1, r5
 800a334:	2200      	movs	r2, #0
 800a336:	4b5f      	ldr	r3, [pc, #380]	; (800a4b4 <_strtod_l+0xc08>)
 800a338:	f7f7 fb96 	bl	8001a68 <__aeabi_dmul>
 800a33c:	0005      	movs	r5, r0
 800a33e:	000c      	movs	r4, r1
 800a340:	2380      	movs	r3, #128	; 0x80
 800a342:	061b      	lsls	r3, r3, #24
 800a344:	18e3      	adds	r3, r4, r3
 800a346:	951c      	str	r5, [sp, #112]	; 0x70
 800a348:	931d      	str	r3, [sp, #116]	; 0x74
 800a34a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a34c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a34e:	9210      	str	r2, [sp, #64]	; 0x40
 800a350:	9311      	str	r3, [sp, #68]	; 0x44
 800a352:	e79e      	b.n	800a292 <_strtod_l+0x9e6>
 800a354:	2e01      	cmp	r6, #1
 800a356:	d103      	bne.n	800a360 <_strtod_l+0xab4>
 800a358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d100      	bne.n	800a360 <_strtod_l+0xab4>
 800a35e:	e582      	b.n	8009e66 <_strtod_l+0x5ba>
 800a360:	2300      	movs	r3, #0
 800a362:	4c55      	ldr	r4, [pc, #340]	; (800a4b8 <_strtod_l+0xc0c>)
 800a364:	e791      	b.n	800a28a <_strtod_l+0x9de>
 800a366:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a368:	4c52      	ldr	r4, [pc, #328]	; (800a4b4 <_strtod_l+0xc08>)
 800a36a:	e7e9      	b.n	800a340 <_strtod_l+0xa94>
 800a36c:	2200      	movs	r2, #0
 800a36e:	0020      	movs	r0, r4
 800a370:	0029      	movs	r1, r5
 800a372:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <_strtod_l+0xc08>)
 800a374:	f7f7 fb78 	bl	8001a68 <__aeabi_dmul>
 800a378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a37a:	0005      	movs	r5, r0
 800a37c:	000b      	movs	r3, r1
 800a37e:	000c      	movs	r4, r1
 800a380:	2a00      	cmp	r2, #0
 800a382:	d107      	bne.n	800a394 <_strtod_l+0xae8>
 800a384:	2280      	movs	r2, #128	; 0x80
 800a386:	0612      	lsls	r2, r2, #24
 800a388:	188b      	adds	r3, r1, r2
 800a38a:	9016      	str	r0, [sp, #88]	; 0x58
 800a38c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a38e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a392:	e7dc      	b.n	800a34e <_strtod_l+0xaa2>
 800a394:	0002      	movs	r2, r0
 800a396:	9216      	str	r2, [sp, #88]	; 0x58
 800a398:	9317      	str	r3, [sp, #92]	; 0x5c
 800a39a:	e7f8      	b.n	800a38e <_strtod_l+0xae2>
 800a39c:	23d4      	movs	r3, #212	; 0xd4
 800a39e:	049b      	lsls	r3, r3, #18
 800a3a0:	18cf      	adds	r7, r1, r3
 800a3a2:	9b08      	ldr	r3, [sp, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1a5      	bne.n	800a2f4 <_strtod_l+0xa48>
 800a3a8:	4b3d      	ldr	r3, [pc, #244]	; (800a4a0 <_strtod_l+0xbf4>)
 800a3aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3ac:	403b      	ands	r3, r7
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d1a0      	bne.n	800a2f4 <_strtod_l+0xa48>
 800a3b2:	0028      	movs	r0, r5
 800a3b4:	0021      	movs	r1, r4
 800a3b6:	f7f6 f895 	bl	80004e4 <__aeabi_d2lz>
 800a3ba:	f7f6 f8cf 	bl	800055c <__aeabi_l2d>
 800a3be:	0002      	movs	r2, r0
 800a3c0:	000b      	movs	r3, r1
 800a3c2:	0028      	movs	r0, r5
 800a3c4:	0021      	movs	r1, r4
 800a3c6:	f7f7 fdbb 	bl	8001f40 <__aeabi_dsub>
 800a3ca:	033b      	lsls	r3, r7, #12
 800a3cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3ce:	0b1b      	lsrs	r3, r3, #12
 800a3d0:	4333      	orrs	r3, r6
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	0004      	movs	r4, r0
 800a3d6:	000d      	movs	r5, r1
 800a3d8:	4a38      	ldr	r2, [pc, #224]	; (800a4bc <_strtod_l+0xc10>)
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d055      	beq.n	800a48a <_strtod_l+0xbde>
 800a3de:	4b38      	ldr	r3, [pc, #224]	; (800a4c0 <_strtod_l+0xc14>)
 800a3e0:	f7f6 f83a 	bl	8000458 <__aeabi_dcmplt>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d000      	beq.n	800a3ea <_strtod_l+0xb3e>
 800a3e8:	e4d3      	b.n	8009d92 <_strtod_l+0x4e6>
 800a3ea:	0020      	movs	r0, r4
 800a3ec:	0029      	movs	r1, r5
 800a3ee:	4a35      	ldr	r2, [pc, #212]	; (800a4c4 <_strtod_l+0xc18>)
 800a3f0:	4b30      	ldr	r3, [pc, #192]	; (800a4b4 <_strtod_l+0xc08>)
 800a3f2:	f7f6 f845 	bl	8000480 <__aeabi_dcmpgt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d100      	bne.n	800a3fc <_strtod_l+0xb50>
 800a3fa:	e77b      	b.n	800a2f4 <_strtod_l+0xa48>
 800a3fc:	e4c9      	b.n	8009d92 <_strtod_l+0x4e6>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d02b      	beq.n	800a45c <_strtod_l+0xbb0>
 800a404:	23d4      	movs	r3, #212	; 0xd4
 800a406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a408:	04db      	lsls	r3, r3, #19
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d826      	bhi.n	800a45c <_strtod_l+0xbb0>
 800a40e:	0028      	movs	r0, r5
 800a410:	0021      	movs	r1, r4
 800a412:	4a2d      	ldr	r2, [pc, #180]	; (800a4c8 <_strtod_l+0xc1c>)
 800a414:	4b2d      	ldr	r3, [pc, #180]	; (800a4cc <_strtod_l+0xc20>)
 800a416:	f7f6 f829 	bl	800046c <__aeabi_dcmple>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d017      	beq.n	800a44e <_strtod_l+0xba2>
 800a41e:	0028      	movs	r0, r5
 800a420:	0021      	movs	r1, r4
 800a422:	f7f6 f841 	bl	80004a8 <__aeabi_d2uiz>
 800a426:	2800      	cmp	r0, #0
 800a428:	d100      	bne.n	800a42c <_strtod_l+0xb80>
 800a42a:	3001      	adds	r0, #1
 800a42c:	f7f8 f99e 	bl	800276c <__aeabi_ui2d>
 800a430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a432:	0005      	movs	r5, r0
 800a434:	000b      	movs	r3, r1
 800a436:	000c      	movs	r4, r1
 800a438:	2a00      	cmp	r2, #0
 800a43a:	d122      	bne.n	800a482 <_strtod_l+0xbd6>
 800a43c:	2280      	movs	r2, #128	; 0x80
 800a43e:	0612      	lsls	r2, r2, #24
 800a440:	188b      	adds	r3, r1, r2
 800a442:	9018      	str	r0, [sp, #96]	; 0x60
 800a444:	9319      	str	r3, [sp, #100]	; 0x64
 800a446:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a44a:	9210      	str	r2, [sp, #64]	; 0x40
 800a44c:	9311      	str	r3, [sp, #68]	; 0x44
 800a44e:	22d6      	movs	r2, #214	; 0xd6
 800a450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a452:	04d2      	lsls	r2, r2, #19
 800a454:	189b      	adds	r3, r3, r2
 800a456:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	9311      	str	r3, [sp, #68]	; 0x44
 800a45c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a45e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a460:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a462:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a464:	f001 ffa0 	bl	800c3a8 <__ulp>
 800a468:	0002      	movs	r2, r0
 800a46a:	000b      	movs	r3, r1
 800a46c:	0030      	movs	r0, r6
 800a46e:	0039      	movs	r1, r7
 800a470:	f7f7 fafa 	bl	8001a68 <__aeabi_dmul>
 800a474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a478:	f7f6 fbb8 	bl	8000bec <__aeabi_dadd>
 800a47c:	0006      	movs	r6, r0
 800a47e:	000f      	movs	r7, r1
 800a480:	e78f      	b.n	800a3a2 <_strtod_l+0xaf6>
 800a482:	0002      	movs	r2, r0
 800a484:	9218      	str	r2, [sp, #96]	; 0x60
 800a486:	9319      	str	r3, [sp, #100]	; 0x64
 800a488:	e7dd      	b.n	800a446 <_strtod_l+0xb9a>
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <_strtod_l+0xc24>)
 800a48c:	f7f5 ffe4 	bl	8000458 <__aeabi_dcmplt>
 800a490:	e7b1      	b.n	800a3f6 <_strtod_l+0xb4a>
 800a492:	46c0      	nop			; (mov r8, r8)
 800a494:	fff00000 	.word	0xfff00000
 800a498:	000fffff 	.word	0x000fffff
 800a49c:	3ff00000 	.word	0x3ff00000
 800a4a0:	7ff00000 	.word	0x7ff00000
 800a4a4:	7fe00000 	.word	0x7fe00000
 800a4a8:	fcb00000 	.word	0xfcb00000
 800a4ac:	7c9fffff 	.word	0x7c9fffff
 800a4b0:	7fefffff 	.word	0x7fefffff
 800a4b4:	3fe00000 	.word	0x3fe00000
 800a4b8:	bff00000 	.word	0xbff00000
 800a4bc:	94a03595 	.word	0x94a03595
 800a4c0:	3fdfffff 	.word	0x3fdfffff
 800a4c4:	35afe535 	.word	0x35afe535
 800a4c8:	ffc00000 	.word	0xffc00000
 800a4cc:	41dfffff 	.word	0x41dfffff
 800a4d0:	3fcfffff 	.word	0x3fcfffff

0800a4d4 <_strtod_r>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <_strtod_r+0xc>)
 800a4d8:	f7ff f9e8 	bl	80098ac <_strtod_l>
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	20000098 	.word	0x20000098

0800a4e4 <_strtol_l.constprop.0>:
 800a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	001e      	movs	r6, r3
 800a4ea:	9005      	str	r0, [sp, #20]
 800a4ec:	9101      	str	r1, [sp, #4]
 800a4ee:	9202      	str	r2, [sp, #8]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d045      	beq.n	800a580 <_strtol_l.constprop.0+0x9c>
 800a4f4:	000b      	movs	r3, r1
 800a4f6:	2e24      	cmp	r6, #36	; 0x24
 800a4f8:	d842      	bhi.n	800a580 <_strtol_l.constprop.0+0x9c>
 800a4fa:	4a3f      	ldr	r2, [pc, #252]	; (800a5f8 <_strtol_l.constprop.0+0x114>)
 800a4fc:	2108      	movs	r1, #8
 800a4fe:	4694      	mov	ip, r2
 800a500:	001a      	movs	r2, r3
 800a502:	4660      	mov	r0, ip
 800a504:	7814      	ldrb	r4, [r2, #0]
 800a506:	3301      	adds	r3, #1
 800a508:	5d00      	ldrb	r0, [r0, r4]
 800a50a:	001d      	movs	r5, r3
 800a50c:	0007      	movs	r7, r0
 800a50e:	400f      	ands	r7, r1
 800a510:	4208      	tst	r0, r1
 800a512:	d1f5      	bne.n	800a500 <_strtol_l.constprop.0+0x1c>
 800a514:	2c2d      	cmp	r4, #45	; 0x2d
 800a516:	d13a      	bne.n	800a58e <_strtol_l.constprop.0+0xaa>
 800a518:	2701      	movs	r7, #1
 800a51a:	781c      	ldrb	r4, [r3, #0]
 800a51c:	1c95      	adds	r5, r2, #2
 800a51e:	2e00      	cmp	r6, #0
 800a520:	d065      	beq.n	800a5ee <_strtol_l.constprop.0+0x10a>
 800a522:	2e10      	cmp	r6, #16
 800a524:	d109      	bne.n	800a53a <_strtol_l.constprop.0+0x56>
 800a526:	2c30      	cmp	r4, #48	; 0x30
 800a528:	d107      	bne.n	800a53a <_strtol_l.constprop.0+0x56>
 800a52a:	2220      	movs	r2, #32
 800a52c:	782b      	ldrb	r3, [r5, #0]
 800a52e:	4393      	bics	r3, r2
 800a530:	2b58      	cmp	r3, #88	; 0x58
 800a532:	d157      	bne.n	800a5e4 <_strtol_l.constprop.0+0x100>
 800a534:	2610      	movs	r6, #16
 800a536:	786c      	ldrb	r4, [r5, #1]
 800a538:	3502      	adds	r5, #2
 800a53a:	4b30      	ldr	r3, [pc, #192]	; (800a5fc <_strtol_l.constprop.0+0x118>)
 800a53c:	0031      	movs	r1, r6
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	0018      	movs	r0, r3
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	f7f5 fe82 	bl	800024c <__aeabi_uidivmod>
 800a548:	2300      	movs	r3, #0
 800a54a:	2201      	movs	r2, #1
 800a54c:	4684      	mov	ip, r0
 800a54e:	0018      	movs	r0, r3
 800a550:	9104      	str	r1, [sp, #16]
 800a552:	4252      	negs	r2, r2
 800a554:	0021      	movs	r1, r4
 800a556:	3930      	subs	r1, #48	; 0x30
 800a558:	2909      	cmp	r1, #9
 800a55a:	d81d      	bhi.n	800a598 <_strtol_l.constprop.0+0xb4>
 800a55c:	000c      	movs	r4, r1
 800a55e:	42a6      	cmp	r6, r4
 800a560:	dd28      	ble.n	800a5b4 <_strtol_l.constprop.0+0xd0>
 800a562:	2b00      	cmp	r3, #0
 800a564:	db24      	blt.n	800a5b0 <_strtol_l.constprop.0+0xcc>
 800a566:	0013      	movs	r3, r2
 800a568:	4584      	cmp	ip, r0
 800a56a:	d306      	bcc.n	800a57a <_strtol_l.constprop.0+0x96>
 800a56c:	d102      	bne.n	800a574 <_strtol_l.constprop.0+0x90>
 800a56e:	9904      	ldr	r1, [sp, #16]
 800a570:	42a1      	cmp	r1, r4
 800a572:	db02      	blt.n	800a57a <_strtol_l.constprop.0+0x96>
 800a574:	2301      	movs	r3, #1
 800a576:	4370      	muls	r0, r6
 800a578:	1820      	adds	r0, r4, r0
 800a57a:	782c      	ldrb	r4, [r5, #0]
 800a57c:	3501      	adds	r5, #1
 800a57e:	e7e9      	b.n	800a554 <_strtol_l.constprop.0+0x70>
 800a580:	f7fe fa8c 	bl	8008a9c <__errno>
 800a584:	2316      	movs	r3, #22
 800a586:	6003      	str	r3, [r0, #0]
 800a588:	2000      	movs	r0, #0
 800a58a:	b007      	add	sp, #28
 800a58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a58e:	2c2b      	cmp	r4, #43	; 0x2b
 800a590:	d1c5      	bne.n	800a51e <_strtol_l.constprop.0+0x3a>
 800a592:	781c      	ldrb	r4, [r3, #0]
 800a594:	1c95      	adds	r5, r2, #2
 800a596:	e7c2      	b.n	800a51e <_strtol_l.constprop.0+0x3a>
 800a598:	0021      	movs	r1, r4
 800a59a:	3941      	subs	r1, #65	; 0x41
 800a59c:	2919      	cmp	r1, #25
 800a59e:	d801      	bhi.n	800a5a4 <_strtol_l.constprop.0+0xc0>
 800a5a0:	3c37      	subs	r4, #55	; 0x37
 800a5a2:	e7dc      	b.n	800a55e <_strtol_l.constprop.0+0x7a>
 800a5a4:	0021      	movs	r1, r4
 800a5a6:	3961      	subs	r1, #97	; 0x61
 800a5a8:	2919      	cmp	r1, #25
 800a5aa:	d803      	bhi.n	800a5b4 <_strtol_l.constprop.0+0xd0>
 800a5ac:	3c57      	subs	r4, #87	; 0x57
 800a5ae:	e7d6      	b.n	800a55e <_strtol_l.constprop.0+0x7a>
 800a5b0:	0013      	movs	r3, r2
 800a5b2:	e7e2      	b.n	800a57a <_strtol_l.constprop.0+0x96>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	da09      	bge.n	800a5cc <_strtol_l.constprop.0+0xe8>
 800a5b8:	2322      	movs	r3, #34	; 0x22
 800a5ba:	9a05      	ldr	r2, [sp, #20]
 800a5bc:	9803      	ldr	r0, [sp, #12]
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	9b02      	ldr	r3, [sp, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0e1      	beq.n	800a58a <_strtol_l.constprop.0+0xa6>
 800a5c6:	1e6b      	subs	r3, r5, #1
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	e007      	b.n	800a5dc <_strtol_l.constprop.0+0xf8>
 800a5cc:	2f00      	cmp	r7, #0
 800a5ce:	d000      	beq.n	800a5d2 <_strtol_l.constprop.0+0xee>
 800a5d0:	4240      	negs	r0, r0
 800a5d2:	9a02      	ldr	r2, [sp, #8]
 800a5d4:	2a00      	cmp	r2, #0
 800a5d6:	d0d8      	beq.n	800a58a <_strtol_l.constprop.0+0xa6>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1f4      	bne.n	800a5c6 <_strtol_l.constprop.0+0xe2>
 800a5dc:	9b02      	ldr	r3, [sp, #8]
 800a5de:	9a01      	ldr	r2, [sp, #4]
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e7d2      	b.n	800a58a <_strtol_l.constprop.0+0xa6>
 800a5e4:	2430      	movs	r4, #48	; 0x30
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	d1a7      	bne.n	800a53a <_strtol_l.constprop.0+0x56>
 800a5ea:	3608      	adds	r6, #8
 800a5ec:	e7a5      	b.n	800a53a <_strtol_l.constprop.0+0x56>
 800a5ee:	2c30      	cmp	r4, #48	; 0x30
 800a5f0:	d09b      	beq.n	800a52a <_strtol_l.constprop.0+0x46>
 800a5f2:	260a      	movs	r6, #10
 800a5f4:	e7a1      	b.n	800a53a <_strtol_l.constprop.0+0x56>
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	0800d7b1 	.word	0x0800d7b1
 800a5fc:	7fffffff 	.word	0x7fffffff

0800a600 <_strtol_r>:
 800a600:	b510      	push	{r4, lr}
 800a602:	f7ff ff6f 	bl	800a4e4 <_strtol_l.constprop.0>
 800a606:	bd10      	pop	{r4, pc}

0800a608 <quorem>:
 800a608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a60a:	0006      	movs	r6, r0
 800a60c:	690b      	ldr	r3, [r1, #16]
 800a60e:	6932      	ldr	r2, [r6, #16]
 800a610:	b087      	sub	sp, #28
 800a612:	2000      	movs	r0, #0
 800a614:	9103      	str	r1, [sp, #12]
 800a616:	429a      	cmp	r2, r3
 800a618:	db65      	blt.n	800a6e6 <quorem+0xde>
 800a61a:	3b01      	subs	r3, #1
 800a61c:	009c      	lsls	r4, r3, #2
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	000b      	movs	r3, r1
 800a622:	3314      	adds	r3, #20
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	191b      	adds	r3, r3, r4
 800a628:	9304      	str	r3, [sp, #16]
 800a62a:	0033      	movs	r3, r6
 800a62c:	3314      	adds	r3, #20
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	191c      	adds	r4, r3, r4
 800a632:	9b04      	ldr	r3, [sp, #16]
 800a634:	6827      	ldr	r7, [r4, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	0038      	movs	r0, r7
 800a63a:	1c5d      	adds	r5, r3, #1
 800a63c:	0029      	movs	r1, r5
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	f7f5 fd7e 	bl	8000140 <__udivsi3>
 800a644:	9001      	str	r0, [sp, #4]
 800a646:	42af      	cmp	r7, r5
 800a648:	d324      	bcc.n	800a694 <quorem+0x8c>
 800a64a:	2500      	movs	r5, #0
 800a64c:	46ac      	mov	ip, r5
 800a64e:	9802      	ldr	r0, [sp, #8]
 800a650:	9f05      	ldr	r7, [sp, #20]
 800a652:	cf08      	ldmia	r7!, {r3}
 800a654:	9a01      	ldr	r2, [sp, #4]
 800a656:	b299      	uxth	r1, r3
 800a658:	4351      	muls	r1, r2
 800a65a:	0c1b      	lsrs	r3, r3, #16
 800a65c:	4353      	muls	r3, r2
 800a65e:	1949      	adds	r1, r1, r5
 800a660:	0c0a      	lsrs	r2, r1, #16
 800a662:	189b      	adds	r3, r3, r2
 800a664:	6802      	ldr	r2, [r0, #0]
 800a666:	b289      	uxth	r1, r1
 800a668:	b292      	uxth	r2, r2
 800a66a:	4462      	add	r2, ip
 800a66c:	1a52      	subs	r2, r2, r1
 800a66e:	6801      	ldr	r1, [r0, #0]
 800a670:	0c1d      	lsrs	r5, r3, #16
 800a672:	0c09      	lsrs	r1, r1, #16
 800a674:	b29b      	uxth	r3, r3
 800a676:	1acb      	subs	r3, r1, r3
 800a678:	1411      	asrs	r1, r2, #16
 800a67a:	185b      	adds	r3, r3, r1
 800a67c:	1419      	asrs	r1, r3, #16
 800a67e:	b292      	uxth	r2, r2
 800a680:	041b      	lsls	r3, r3, #16
 800a682:	431a      	orrs	r2, r3
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	468c      	mov	ip, r1
 800a688:	c004      	stmia	r0!, {r2}
 800a68a:	42bb      	cmp	r3, r7
 800a68c:	d2e1      	bcs.n	800a652 <quorem+0x4a>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d030      	beq.n	800a6f6 <quorem+0xee>
 800a694:	0030      	movs	r0, r6
 800a696:	9903      	ldr	r1, [sp, #12]
 800a698:	f001 fdd2 	bl	800c240 <__mcmp>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	db21      	blt.n	800a6e4 <quorem+0xdc>
 800a6a0:	0030      	movs	r0, r6
 800a6a2:	2400      	movs	r4, #0
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	9903      	ldr	r1, [sp, #12]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	9301      	str	r3, [sp, #4]
 800a6ac:	3014      	adds	r0, #20
 800a6ae:	3114      	adds	r1, #20
 800a6b0:	6803      	ldr	r3, [r0, #0]
 800a6b2:	c920      	ldmia	r1!, {r5}
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	1914      	adds	r4, r2, r4
 800a6b8:	b2aa      	uxth	r2, r5
 800a6ba:	1aa2      	subs	r2, r4, r2
 800a6bc:	0c1b      	lsrs	r3, r3, #16
 800a6be:	0c2d      	lsrs	r5, r5, #16
 800a6c0:	1414      	asrs	r4, r2, #16
 800a6c2:	1b5b      	subs	r3, r3, r5
 800a6c4:	191b      	adds	r3, r3, r4
 800a6c6:	141c      	asrs	r4, r3, #16
 800a6c8:	b292      	uxth	r2, r2
 800a6ca:	041b      	lsls	r3, r3, #16
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	c008      	stmia	r0!, {r3}
 800a6d0:	9b04      	ldr	r3, [sp, #16]
 800a6d2:	428b      	cmp	r3, r1
 800a6d4:	d2ec      	bcs.n	800a6b0 <quorem+0xa8>
 800a6d6:	9b00      	ldr	r3, [sp, #0]
 800a6d8:	9a02      	ldr	r2, [sp, #8]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	18d3      	adds	r3, r2, r3
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	d015      	beq.n	800a710 <quorem+0x108>
 800a6e4:	9801      	ldr	r0, [sp, #4]
 800a6e6:	b007      	add	sp, #28
 800a6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d106      	bne.n	800a6fe <quorem+0xf6>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	9b02      	ldr	r3, [sp, #8]
 800a6f8:	3c04      	subs	r4, #4
 800a6fa:	42a3      	cmp	r3, r4
 800a6fc:	d3f5      	bcc.n	800a6ea <quorem+0xe2>
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	6133      	str	r3, [r6, #16]
 800a702:	e7c7      	b.n	800a694 <quorem+0x8c>
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	2a00      	cmp	r2, #0
 800a708:	d106      	bne.n	800a718 <quorem+0x110>
 800a70a:	9a00      	ldr	r2, [sp, #0]
 800a70c:	3a01      	subs	r2, #1
 800a70e:	9200      	str	r2, [sp, #0]
 800a710:	9a02      	ldr	r2, [sp, #8]
 800a712:	3b04      	subs	r3, #4
 800a714:	429a      	cmp	r2, r3
 800a716:	d3f5      	bcc.n	800a704 <quorem+0xfc>
 800a718:	9b00      	ldr	r3, [sp, #0]
 800a71a:	6133      	str	r3, [r6, #16]
 800a71c:	e7e2      	b.n	800a6e4 <quorem+0xdc>
	...

0800a720 <_dtoa_r>:
 800a720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a722:	b09d      	sub	sp, #116	; 0x74
 800a724:	9202      	str	r2, [sp, #8]
 800a726:	9303      	str	r3, [sp, #12]
 800a728:	9b02      	ldr	r3, [sp, #8]
 800a72a:	9c03      	ldr	r4, [sp, #12]
 800a72c:	9308      	str	r3, [sp, #32]
 800a72e:	9409      	str	r4, [sp, #36]	; 0x24
 800a730:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a732:	0007      	movs	r7, r0
 800a734:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a736:	2c00      	cmp	r4, #0
 800a738:	d10e      	bne.n	800a758 <_dtoa_r+0x38>
 800a73a:	2010      	movs	r0, #16
 800a73c:	f001 fa88 	bl	800bc50 <malloc>
 800a740:	1e02      	subs	r2, r0, #0
 800a742:	6278      	str	r0, [r7, #36]	; 0x24
 800a744:	d104      	bne.n	800a750 <_dtoa_r+0x30>
 800a746:	21ea      	movs	r1, #234	; 0xea
 800a748:	4bc7      	ldr	r3, [pc, #796]	; (800aa68 <_dtoa_r+0x348>)
 800a74a:	48c8      	ldr	r0, [pc, #800]	; (800aa6c <_dtoa_r+0x34c>)
 800a74c:	f002 fcaa 	bl	800d0a4 <__assert_func>
 800a750:	6044      	str	r4, [r0, #4]
 800a752:	6084      	str	r4, [r0, #8]
 800a754:	6004      	str	r4, [r0, #0]
 800a756:	60c4      	str	r4, [r0, #12]
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	6819      	ldr	r1, [r3, #0]
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d00a      	beq.n	800a776 <_dtoa_r+0x56>
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	2301      	movs	r3, #1
 800a764:	4093      	lsls	r3, r2
 800a766:	604a      	str	r2, [r1, #4]
 800a768:	608b      	str	r3, [r1, #8]
 800a76a:	0038      	movs	r0, r7
 800a76c:	f001 fadc 	bl	800bd28 <_Bfree>
 800a770:	2200      	movs	r2, #0
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	da20      	bge.n	800a7be <_dtoa_r+0x9e>
 800a77c:	2301      	movs	r3, #1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	9b03      	ldr	r3, [sp, #12]
 800a782:	005b      	lsls	r3, r3, #1
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	9309      	str	r3, [sp, #36]	; 0x24
 800a788:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a78a:	4bb9      	ldr	r3, [pc, #740]	; (800aa70 <_dtoa_r+0x350>)
 800a78c:	4ab8      	ldr	r2, [pc, #736]	; (800aa70 <_dtoa_r+0x350>)
 800a78e:	402b      	ands	r3, r5
 800a790:	4293      	cmp	r3, r2
 800a792:	d117      	bne.n	800a7c4 <_dtoa_r+0xa4>
 800a794:	4bb7      	ldr	r3, [pc, #732]	; (800aa74 <_dtoa_r+0x354>)
 800a796:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a798:	0328      	lsls	r0, r5, #12
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	9b02      	ldr	r3, [sp, #8]
 800a79e:	0b00      	lsrs	r0, r0, #12
 800a7a0:	4318      	orrs	r0, r3
 800a7a2:	d101      	bne.n	800a7a8 <_dtoa_r+0x88>
 800a7a4:	f000 fdbf 	bl	800b326 <_dtoa_r+0xc06>
 800a7a8:	48b3      	ldr	r0, [pc, #716]	; (800aa78 <_dtoa_r+0x358>)
 800a7aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7ac:	9006      	str	r0, [sp, #24]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <_dtoa_r+0x98>
 800a7b2:	4bb2      	ldr	r3, [pc, #712]	; (800aa7c <_dtoa_r+0x35c>)
 800a7b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	9806      	ldr	r0, [sp, #24]
 800a7ba:	b01d      	add	sp, #116	; 0x74
 800a7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7be:	2300      	movs	r3, #0
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	e7e1      	b.n	800a788 <_dtoa_r+0x68>
 800a7c4:	9b08      	ldr	r3, [sp, #32]
 800a7c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a7c8:	9312      	str	r3, [sp, #72]	; 0x48
 800a7ca:	9413      	str	r4, [sp, #76]	; 0x4c
 800a7cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f7f5 fe3a 	bl	800044c <__aeabi_dcmpeq>
 800a7d8:	1e04      	subs	r4, r0, #0
 800a7da:	d009      	beq.n	800a7f0 <_dtoa_r+0xd0>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	4ba7      	ldr	r3, [pc, #668]	; (800aa80 <_dtoa_r+0x360>)
 800a7e4:	9306      	str	r3, [sp, #24]
 800a7e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0e5      	beq.n	800a7b8 <_dtoa_r+0x98>
 800a7ec:	4ba5      	ldr	r3, [pc, #660]	; (800aa84 <_dtoa_r+0x364>)
 800a7ee:	e7e1      	b.n	800a7b4 <_dtoa_r+0x94>
 800a7f0:	ab1a      	add	r3, sp, #104	; 0x68
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	ab1b      	add	r3, sp, #108	; 0x6c
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	0038      	movs	r0, r7
 800a7fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7fe:	f001 fe47 	bl	800c490 <__d2b>
 800a802:	006e      	lsls	r6, r5, #1
 800a804:	9005      	str	r0, [sp, #20]
 800a806:	0d76      	lsrs	r6, r6, #21
 800a808:	d100      	bne.n	800a80c <_dtoa_r+0xec>
 800a80a:	e07c      	b.n	800a906 <_dtoa_r+0x1e6>
 800a80c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a80e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a812:	4a9d      	ldr	r2, [pc, #628]	; (800aa88 <_dtoa_r+0x368>)
 800a814:	031b      	lsls	r3, r3, #12
 800a816:	0b1b      	lsrs	r3, r3, #12
 800a818:	431a      	orrs	r2, r3
 800a81a:	0011      	movs	r1, r2
 800a81c:	4b9b      	ldr	r3, [pc, #620]	; (800aa8c <_dtoa_r+0x36c>)
 800a81e:	9418      	str	r4, [sp, #96]	; 0x60
 800a820:	18f6      	adds	r6, r6, r3
 800a822:	2200      	movs	r2, #0
 800a824:	4b9a      	ldr	r3, [pc, #616]	; (800aa90 <_dtoa_r+0x370>)
 800a826:	f7f7 fb8b 	bl	8001f40 <__aeabi_dsub>
 800a82a:	4a9a      	ldr	r2, [pc, #616]	; (800aa94 <_dtoa_r+0x374>)
 800a82c:	4b9a      	ldr	r3, [pc, #616]	; (800aa98 <_dtoa_r+0x378>)
 800a82e:	f7f7 f91b 	bl	8001a68 <__aeabi_dmul>
 800a832:	4a9a      	ldr	r2, [pc, #616]	; (800aa9c <_dtoa_r+0x37c>)
 800a834:	4b9a      	ldr	r3, [pc, #616]	; (800aaa0 <_dtoa_r+0x380>)
 800a836:	f7f6 f9d9 	bl	8000bec <__aeabi_dadd>
 800a83a:	0004      	movs	r4, r0
 800a83c:	0030      	movs	r0, r6
 800a83e:	000d      	movs	r5, r1
 800a840:	f7f7 ff64 	bl	800270c <__aeabi_i2d>
 800a844:	4a97      	ldr	r2, [pc, #604]	; (800aaa4 <_dtoa_r+0x384>)
 800a846:	4b98      	ldr	r3, [pc, #608]	; (800aaa8 <_dtoa_r+0x388>)
 800a848:	f7f7 f90e 	bl	8001a68 <__aeabi_dmul>
 800a84c:	0002      	movs	r2, r0
 800a84e:	000b      	movs	r3, r1
 800a850:	0020      	movs	r0, r4
 800a852:	0029      	movs	r1, r5
 800a854:	f7f6 f9ca 	bl	8000bec <__aeabi_dadd>
 800a858:	0004      	movs	r4, r0
 800a85a:	000d      	movs	r5, r1
 800a85c:	f7f7 ff20 	bl	80026a0 <__aeabi_d2iz>
 800a860:	2200      	movs	r2, #0
 800a862:	9002      	str	r0, [sp, #8]
 800a864:	2300      	movs	r3, #0
 800a866:	0020      	movs	r0, r4
 800a868:	0029      	movs	r1, r5
 800a86a:	f7f5 fdf5 	bl	8000458 <__aeabi_dcmplt>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d00b      	beq.n	800a88a <_dtoa_r+0x16a>
 800a872:	9802      	ldr	r0, [sp, #8]
 800a874:	f7f7 ff4a 	bl	800270c <__aeabi_i2d>
 800a878:	002b      	movs	r3, r5
 800a87a:	0022      	movs	r2, r4
 800a87c:	f7f5 fde6 	bl	800044c <__aeabi_dcmpeq>
 800a880:	4243      	negs	r3, r0
 800a882:	4158      	adcs	r0, r3
 800a884:	9b02      	ldr	r3, [sp, #8]
 800a886:	1a1b      	subs	r3, r3, r0
 800a888:	9302      	str	r3, [sp, #8]
 800a88a:	2301      	movs	r3, #1
 800a88c:	9316      	str	r3, [sp, #88]	; 0x58
 800a88e:	9b02      	ldr	r3, [sp, #8]
 800a890:	2b16      	cmp	r3, #22
 800a892:	d80f      	bhi.n	800a8b4 <_dtoa_r+0x194>
 800a894:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a896:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a898:	00da      	lsls	r2, r3, #3
 800a89a:	4b84      	ldr	r3, [pc, #528]	; (800aaac <_dtoa_r+0x38c>)
 800a89c:	189b      	adds	r3, r3, r2
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f7f5 fdd9 	bl	8000458 <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d049      	beq.n	800a93e <_dtoa_r+0x21e>
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	9302      	str	r3, [sp, #8]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9316      	str	r3, [sp, #88]	; 0x58
 800a8b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a8b6:	1b9e      	subs	r6, r3, r6
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a8bc:	0033      	movs	r3, r6
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c2:	d504      	bpl.n	800a8ce <_dtoa_r+0x1ae>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	1b9b      	subs	r3, r3, r6
 800a8c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	930d      	str	r3, [sp, #52]	; 0x34
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	db36      	blt.n	800a942 <_dtoa_r+0x222>
 800a8d4:	9a02      	ldr	r2, [sp, #8]
 800a8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8d8:	4694      	mov	ip, r2
 800a8da:	4463      	add	r3, ip
 800a8dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a8de:	2300      	movs	r3, #0
 800a8e0:	9215      	str	r2, [sp, #84]	; 0x54
 800a8e2:	930e      	str	r3, [sp, #56]	; 0x38
 800a8e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8e6:	2401      	movs	r4, #1
 800a8e8:	2b09      	cmp	r3, #9
 800a8ea:	d864      	bhi.n	800a9b6 <_dtoa_r+0x296>
 800a8ec:	2b05      	cmp	r3, #5
 800a8ee:	dd02      	ble.n	800a8f6 <_dtoa_r+0x1d6>
 800a8f0:	2400      	movs	r4, #0
 800a8f2:	3b04      	subs	r3, #4
 800a8f4:	9322      	str	r3, [sp, #136]	; 0x88
 800a8f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8f8:	1e98      	subs	r0, r3, #2
 800a8fa:	2803      	cmp	r0, #3
 800a8fc:	d864      	bhi.n	800a9c8 <_dtoa_r+0x2a8>
 800a8fe:	f7f5 fc0b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a902:	3829      	.short	0x3829
 800a904:	5836      	.short	0x5836
 800a906:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a908:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a90a:	189e      	adds	r6, r3, r2
 800a90c:	4b68      	ldr	r3, [pc, #416]	; (800aab0 <_dtoa_r+0x390>)
 800a90e:	18f2      	adds	r2, r6, r3
 800a910:	2a20      	cmp	r2, #32
 800a912:	dd0f      	ble.n	800a934 <_dtoa_r+0x214>
 800a914:	2340      	movs	r3, #64	; 0x40
 800a916:	1a9b      	subs	r3, r3, r2
 800a918:	409d      	lsls	r5, r3
 800a91a:	4b66      	ldr	r3, [pc, #408]	; (800aab4 <_dtoa_r+0x394>)
 800a91c:	9802      	ldr	r0, [sp, #8]
 800a91e:	18f3      	adds	r3, r6, r3
 800a920:	40d8      	lsrs	r0, r3
 800a922:	4328      	orrs	r0, r5
 800a924:	f7f7 ff22 	bl	800276c <__aeabi_ui2d>
 800a928:	2301      	movs	r3, #1
 800a92a:	4c63      	ldr	r4, [pc, #396]	; (800aab8 <_dtoa_r+0x398>)
 800a92c:	3e01      	subs	r6, #1
 800a92e:	1909      	adds	r1, r1, r4
 800a930:	9318      	str	r3, [sp, #96]	; 0x60
 800a932:	e776      	b.n	800a822 <_dtoa_r+0x102>
 800a934:	2320      	movs	r3, #32
 800a936:	9802      	ldr	r0, [sp, #8]
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	4098      	lsls	r0, r3
 800a93c:	e7f2      	b.n	800a924 <_dtoa_r+0x204>
 800a93e:	9016      	str	r0, [sp, #88]	; 0x58
 800a940:	e7b8      	b.n	800a8b4 <_dtoa_r+0x194>
 800a942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a944:	9a02      	ldr	r2, [sp, #8]
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	930a      	str	r3, [sp, #40]	; 0x28
 800a94a:	4253      	negs	r3, r2
 800a94c:	930e      	str	r3, [sp, #56]	; 0x38
 800a94e:	2300      	movs	r3, #0
 800a950:	9315      	str	r3, [sp, #84]	; 0x54
 800a952:	e7c7      	b.n	800a8e4 <_dtoa_r+0x1c4>
 800a954:	2300      	movs	r3, #0
 800a956:	930f      	str	r3, [sp, #60]	; 0x3c
 800a958:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a95a:	930c      	str	r3, [sp, #48]	; 0x30
 800a95c:	9307      	str	r3, [sp, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dc13      	bgt.n	800a98a <_dtoa_r+0x26a>
 800a962:	2301      	movs	r3, #1
 800a964:	001a      	movs	r2, r3
 800a966:	930c      	str	r3, [sp, #48]	; 0x30
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	9223      	str	r2, [sp, #140]	; 0x8c
 800a96c:	e00d      	b.n	800a98a <_dtoa_r+0x26a>
 800a96e:	2301      	movs	r3, #1
 800a970:	e7f1      	b.n	800a956 <_dtoa_r+0x236>
 800a972:	2300      	movs	r3, #0
 800a974:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a976:	930f      	str	r3, [sp, #60]	; 0x3c
 800a978:	4694      	mov	ip, r2
 800a97a:	9b02      	ldr	r3, [sp, #8]
 800a97c:	4463      	add	r3, ip
 800a97e:	930c      	str	r3, [sp, #48]	; 0x30
 800a980:	3301      	adds	r3, #1
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	2b00      	cmp	r3, #0
 800a986:	dc00      	bgt.n	800a98a <_dtoa_r+0x26a>
 800a988:	2301      	movs	r3, #1
 800a98a:	2200      	movs	r2, #0
 800a98c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a98e:	6042      	str	r2, [r0, #4]
 800a990:	3204      	adds	r2, #4
 800a992:	0015      	movs	r5, r2
 800a994:	3514      	adds	r5, #20
 800a996:	6841      	ldr	r1, [r0, #4]
 800a998:	429d      	cmp	r5, r3
 800a99a:	d919      	bls.n	800a9d0 <_dtoa_r+0x2b0>
 800a99c:	0038      	movs	r0, r7
 800a99e:	f001 f97f 	bl	800bca0 <_Balloc>
 800a9a2:	9006      	str	r0, [sp, #24]
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d117      	bne.n	800a9d8 <_dtoa_r+0x2b8>
 800a9a8:	21d5      	movs	r1, #213	; 0xd5
 800a9aa:	0002      	movs	r2, r0
 800a9ac:	4b43      	ldr	r3, [pc, #268]	; (800aabc <_dtoa_r+0x39c>)
 800a9ae:	0049      	lsls	r1, r1, #1
 800a9b0:	e6cb      	b.n	800a74a <_dtoa_r+0x2a>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e7de      	b.n	800a974 <_dtoa_r+0x254>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	940f      	str	r4, [sp, #60]	; 0x3c
 800a9ba:	9322      	str	r3, [sp, #136]	; 0x88
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	930c      	str	r3, [sp, #48]	; 0x30
 800a9c0:	9307      	str	r3, [sp, #28]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	3313      	adds	r3, #19
 800a9c6:	e7d0      	b.n	800a96a <_dtoa_r+0x24a>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9cc:	3b02      	subs	r3, #2
 800a9ce:	e7f6      	b.n	800a9be <_dtoa_r+0x29e>
 800a9d0:	3101      	adds	r1, #1
 800a9d2:	6041      	str	r1, [r0, #4]
 800a9d4:	0052      	lsls	r2, r2, #1
 800a9d6:	e7dc      	b.n	800a992 <_dtoa_r+0x272>
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	9a06      	ldr	r2, [sp, #24]
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	9b07      	ldr	r3, [sp, #28]
 800a9e0:	2b0e      	cmp	r3, #14
 800a9e2:	d900      	bls.n	800a9e6 <_dtoa_r+0x2c6>
 800a9e4:	e0eb      	b.n	800abbe <_dtoa_r+0x49e>
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	d100      	bne.n	800a9ec <_dtoa_r+0x2cc>
 800a9ea:	e0e8      	b.n	800abbe <_dtoa_r+0x49e>
 800a9ec:	9b02      	ldr	r3, [sp, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dd68      	ble.n	800aac4 <_dtoa_r+0x3a4>
 800a9f2:	001a      	movs	r2, r3
 800a9f4:	210f      	movs	r1, #15
 800a9f6:	4b2d      	ldr	r3, [pc, #180]	; (800aaac <_dtoa_r+0x38c>)
 800a9f8:	400a      	ands	r2, r1
 800a9fa:	00d2      	lsls	r2, r2, #3
 800a9fc:	189b      	adds	r3, r3, r2
 800a9fe:	681d      	ldr	r5, [r3, #0]
 800aa00:	685e      	ldr	r6, [r3, #4]
 800aa02:	9b02      	ldr	r3, [sp, #8]
 800aa04:	111c      	asrs	r4, r3, #4
 800aa06:	2302      	movs	r3, #2
 800aa08:	9310      	str	r3, [sp, #64]	; 0x40
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	05db      	lsls	r3, r3, #23
 800aa0e:	d50b      	bpl.n	800aa28 <_dtoa_r+0x308>
 800aa10:	4b2b      	ldr	r3, [pc, #172]	; (800aac0 <_dtoa_r+0x3a0>)
 800aa12:	400c      	ands	r4, r1
 800aa14:	6a1a      	ldr	r2, [r3, #32]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa1c:	f7f6 fc22 	bl	8001264 <__aeabi_ddiv>
 800aa20:	2303      	movs	r3, #3
 800aa22:	9008      	str	r0, [sp, #32]
 800aa24:	9109      	str	r1, [sp, #36]	; 0x24
 800aa26:	9310      	str	r3, [sp, #64]	; 0x40
 800aa28:	4b25      	ldr	r3, [pc, #148]	; (800aac0 <_dtoa_r+0x3a0>)
 800aa2a:	9314      	str	r3, [sp, #80]	; 0x50
 800aa2c:	2c00      	cmp	r4, #0
 800aa2e:	d108      	bne.n	800aa42 <_dtoa_r+0x322>
 800aa30:	9808      	ldr	r0, [sp, #32]
 800aa32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa34:	002a      	movs	r2, r5
 800aa36:	0033      	movs	r3, r6
 800aa38:	f7f6 fc14 	bl	8001264 <__aeabi_ddiv>
 800aa3c:	9008      	str	r0, [sp, #32]
 800aa3e:	9109      	str	r1, [sp, #36]	; 0x24
 800aa40:	e05c      	b.n	800aafc <_dtoa_r+0x3dc>
 800aa42:	2301      	movs	r3, #1
 800aa44:	421c      	tst	r4, r3
 800aa46:	d00b      	beq.n	800aa60 <_dtoa_r+0x340>
 800aa48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa4a:	0028      	movs	r0, r5
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	9310      	str	r3, [sp, #64]	; 0x40
 800aa50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa52:	0031      	movs	r1, r6
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f7f7 f806 	bl	8001a68 <__aeabi_dmul>
 800aa5c:	0005      	movs	r5, r0
 800aa5e:	000e      	movs	r6, r1
 800aa60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa62:	1064      	asrs	r4, r4, #1
 800aa64:	3308      	adds	r3, #8
 800aa66:	e7e0      	b.n	800aa2a <_dtoa_r+0x30a>
 800aa68:	0800d8be 	.word	0x0800d8be
 800aa6c:	0800d8d5 	.word	0x0800d8d5
 800aa70:	7ff00000 	.word	0x7ff00000
 800aa74:	0000270f 	.word	0x0000270f
 800aa78:	0800d8ba 	.word	0x0800d8ba
 800aa7c:	0800d8bd 	.word	0x0800d8bd
 800aa80:	0800d734 	.word	0x0800d734
 800aa84:	0800d735 	.word	0x0800d735
 800aa88:	3ff00000 	.word	0x3ff00000
 800aa8c:	fffffc01 	.word	0xfffffc01
 800aa90:	3ff80000 	.word	0x3ff80000
 800aa94:	636f4361 	.word	0x636f4361
 800aa98:	3fd287a7 	.word	0x3fd287a7
 800aa9c:	8b60c8b3 	.word	0x8b60c8b3
 800aaa0:	3fc68a28 	.word	0x3fc68a28
 800aaa4:	509f79fb 	.word	0x509f79fb
 800aaa8:	3fd34413 	.word	0x3fd34413
 800aaac:	0800daa8 	.word	0x0800daa8
 800aab0:	00000432 	.word	0x00000432
 800aab4:	00000412 	.word	0x00000412
 800aab8:	fe100000 	.word	0xfe100000
 800aabc:	0800d930 	.word	0x0800d930
 800aac0:	0800da80 	.word	0x0800da80
 800aac4:	2302      	movs	r3, #2
 800aac6:	9310      	str	r3, [sp, #64]	; 0x40
 800aac8:	9b02      	ldr	r3, [sp, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d016      	beq.n	800aafc <_dtoa_r+0x3dc>
 800aace:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aad0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aad2:	425c      	negs	r4, r3
 800aad4:	230f      	movs	r3, #15
 800aad6:	4ab6      	ldr	r2, [pc, #728]	; (800adb0 <_dtoa_r+0x690>)
 800aad8:	4023      	ands	r3, r4
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	18d3      	adds	r3, r2, r3
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f7f6 ffc1 	bl	8001a68 <__aeabi_dmul>
 800aae6:	2601      	movs	r6, #1
 800aae8:	2300      	movs	r3, #0
 800aaea:	9008      	str	r0, [sp, #32]
 800aaec:	9109      	str	r1, [sp, #36]	; 0x24
 800aaee:	4db1      	ldr	r5, [pc, #708]	; (800adb4 <_dtoa_r+0x694>)
 800aaf0:	1124      	asrs	r4, r4, #4
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	d000      	beq.n	800aaf8 <_dtoa_r+0x3d8>
 800aaf6:	e094      	b.n	800ac22 <_dtoa_r+0x502>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d19f      	bne.n	800aa3c <_dtoa_r+0x31c>
 800aafc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d100      	bne.n	800ab04 <_dtoa_r+0x3e4>
 800ab02:	e09b      	b.n	800ac3c <_dtoa_r+0x51c>
 800ab04:	9c08      	ldr	r4, [sp, #32]
 800ab06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab08:	2200      	movs	r2, #0
 800ab0a:	0020      	movs	r0, r4
 800ab0c:	0029      	movs	r1, r5
 800ab0e:	4baa      	ldr	r3, [pc, #680]	; (800adb8 <_dtoa_r+0x698>)
 800ab10:	f7f5 fca2 	bl	8000458 <__aeabi_dcmplt>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d100      	bne.n	800ab1a <_dtoa_r+0x3fa>
 800ab18:	e090      	b.n	800ac3c <_dtoa_r+0x51c>
 800ab1a:	9b07      	ldr	r3, [sp, #28]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d100      	bne.n	800ab22 <_dtoa_r+0x402>
 800ab20:	e08c      	b.n	800ac3c <_dtoa_r+0x51c>
 800ab22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dd46      	ble.n	800abb6 <_dtoa_r+0x496>
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	0020      	movs	r0, r4
 800ab2e:	0029      	movs	r1, r5
 800ab30:	1e5e      	subs	r6, r3, #1
 800ab32:	4ba2      	ldr	r3, [pc, #648]	; (800adbc <_dtoa_r+0x69c>)
 800ab34:	f7f6 ff98 	bl	8001a68 <__aeabi_dmul>
 800ab38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab3a:	9008      	str	r0, [sp, #32]
 800ab3c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab3e:	3301      	adds	r3, #1
 800ab40:	9310      	str	r3, [sp, #64]	; 0x40
 800ab42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab46:	9c08      	ldr	r4, [sp, #32]
 800ab48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab4a:	9314      	str	r3, [sp, #80]	; 0x50
 800ab4c:	f7f7 fdde 	bl	800270c <__aeabi_i2d>
 800ab50:	0022      	movs	r2, r4
 800ab52:	002b      	movs	r3, r5
 800ab54:	f7f6 ff88 	bl	8001a68 <__aeabi_dmul>
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4b99      	ldr	r3, [pc, #612]	; (800adc0 <_dtoa_r+0x6a0>)
 800ab5c:	f7f6 f846 	bl	8000bec <__aeabi_dadd>
 800ab60:	9010      	str	r0, [sp, #64]	; 0x40
 800ab62:	9111      	str	r1, [sp, #68]	; 0x44
 800ab64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab68:	9208      	str	r2, [sp, #32]
 800ab6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6c:	4a95      	ldr	r2, [pc, #596]	; (800adc4 <_dtoa_r+0x6a4>)
 800ab6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab70:	4694      	mov	ip, r2
 800ab72:	4463      	add	r3, ip
 800ab74:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab76:	9309      	str	r3, [sp, #36]	; 0x24
 800ab78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d161      	bne.n	800ac42 <_dtoa_r+0x522>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	0020      	movs	r0, r4
 800ab82:	0029      	movs	r1, r5
 800ab84:	4b90      	ldr	r3, [pc, #576]	; (800adc8 <_dtoa_r+0x6a8>)
 800ab86:	f7f7 f9db 	bl	8001f40 <__aeabi_dsub>
 800ab8a:	9a08      	ldr	r2, [sp, #32]
 800ab8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab8e:	0004      	movs	r4, r0
 800ab90:	000d      	movs	r5, r1
 800ab92:	f7f5 fc75 	bl	8000480 <__aeabi_dcmpgt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d000      	beq.n	800ab9c <_dtoa_r+0x47c>
 800ab9a:	e2af      	b.n	800b0fc <_dtoa_r+0x9dc>
 800ab9c:	488b      	ldr	r0, [pc, #556]	; (800adcc <_dtoa_r+0x6ac>)
 800ab9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aba0:	4684      	mov	ip, r0
 800aba2:	4461      	add	r1, ip
 800aba4:	000b      	movs	r3, r1
 800aba6:	0020      	movs	r0, r4
 800aba8:	0029      	movs	r1, r5
 800abaa:	9a08      	ldr	r2, [sp, #32]
 800abac:	f7f5 fc54 	bl	8000458 <__aeabi_dcmplt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d000      	beq.n	800abb6 <_dtoa_r+0x496>
 800abb4:	e29f      	b.n	800b0f6 <_dtoa_r+0x9d6>
 800abb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800abba:	9308      	str	r3, [sp, #32]
 800abbc:	9409      	str	r4, [sp, #36]	; 0x24
 800abbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	da00      	bge.n	800abc6 <_dtoa_r+0x4a6>
 800abc4:	e172      	b.n	800aeac <_dtoa_r+0x78c>
 800abc6:	9a02      	ldr	r2, [sp, #8]
 800abc8:	2a0e      	cmp	r2, #14
 800abca:	dd00      	ble.n	800abce <_dtoa_r+0x4ae>
 800abcc:	e16e      	b.n	800aeac <_dtoa_r+0x78c>
 800abce:	4b78      	ldr	r3, [pc, #480]	; (800adb0 <_dtoa_r+0x690>)
 800abd0:	00d2      	lsls	r2, r2, #3
 800abd2:	189b      	adds	r3, r3, r2
 800abd4:	685c      	ldr	r4, [r3, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	930a      	str	r3, [sp, #40]	; 0x28
 800abda:	940b      	str	r4, [sp, #44]	; 0x2c
 800abdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	db00      	blt.n	800abe4 <_dtoa_r+0x4c4>
 800abe2:	e0f7      	b.n	800add4 <_dtoa_r+0x6b4>
 800abe4:	9b07      	ldr	r3, [sp, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dd00      	ble.n	800abec <_dtoa_r+0x4cc>
 800abea:	e0f3      	b.n	800add4 <_dtoa_r+0x6b4>
 800abec:	d000      	beq.n	800abf0 <_dtoa_r+0x4d0>
 800abee:	e282      	b.n	800b0f6 <_dtoa_r+0x9d6>
 800abf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abf4:	2200      	movs	r2, #0
 800abf6:	4b74      	ldr	r3, [pc, #464]	; (800adc8 <_dtoa_r+0x6a8>)
 800abf8:	f7f6 ff36 	bl	8001a68 <__aeabi_dmul>
 800abfc:	9a08      	ldr	r2, [sp, #32]
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	f7f5 fc48 	bl	8000494 <__aeabi_dcmpge>
 800ac04:	9e07      	ldr	r6, [sp, #28]
 800ac06:	0035      	movs	r5, r6
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d000      	beq.n	800ac0e <_dtoa_r+0x4ee>
 800ac0c:	e259      	b.n	800b0c2 <_dtoa_r+0x9a2>
 800ac0e:	9b06      	ldr	r3, [sp, #24]
 800ac10:	9a06      	ldr	r2, [sp, #24]
 800ac12:	3301      	adds	r3, #1
 800ac14:	9308      	str	r3, [sp, #32]
 800ac16:	2331      	movs	r3, #49	; 0x31
 800ac18:	7013      	strb	r3, [r2, #0]
 800ac1a:	9b02      	ldr	r3, [sp, #8]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	9302      	str	r3, [sp, #8]
 800ac20:	e254      	b.n	800b0cc <_dtoa_r+0x9ac>
 800ac22:	4234      	tst	r4, r6
 800ac24:	d007      	beq.n	800ac36 <_dtoa_r+0x516>
 800ac26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac28:	3301      	adds	r3, #1
 800ac2a:	9310      	str	r3, [sp, #64]	; 0x40
 800ac2c:	682a      	ldr	r2, [r5, #0]
 800ac2e:	686b      	ldr	r3, [r5, #4]
 800ac30:	f7f6 ff1a 	bl	8001a68 <__aeabi_dmul>
 800ac34:	0033      	movs	r3, r6
 800ac36:	1064      	asrs	r4, r4, #1
 800ac38:	3508      	adds	r5, #8
 800ac3a:	e75a      	b.n	800aaf2 <_dtoa_r+0x3d2>
 800ac3c:	9e02      	ldr	r6, [sp, #8]
 800ac3e:	9b07      	ldr	r3, [sp, #28]
 800ac40:	e780      	b.n	800ab44 <_dtoa_r+0x424>
 800ac42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac46:	1e5a      	subs	r2, r3, #1
 800ac48:	4b59      	ldr	r3, [pc, #356]	; (800adb0 <_dtoa_r+0x690>)
 800ac4a:	00d2      	lsls	r2, r2, #3
 800ac4c:	189b      	adds	r3, r3, r2
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2900      	cmp	r1, #0
 800ac54:	d051      	beq.n	800acfa <_dtoa_r+0x5da>
 800ac56:	2000      	movs	r0, #0
 800ac58:	495d      	ldr	r1, [pc, #372]	; (800add0 <_dtoa_r+0x6b0>)
 800ac5a:	f7f6 fb03 	bl	8001264 <__aeabi_ddiv>
 800ac5e:	9a08      	ldr	r2, [sp, #32]
 800ac60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac62:	f7f7 f96d 	bl	8001f40 <__aeabi_dsub>
 800ac66:	9a06      	ldr	r2, [sp, #24]
 800ac68:	9b06      	ldr	r3, [sp, #24]
 800ac6a:	4694      	mov	ip, r2
 800ac6c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac70:	9010      	str	r0, [sp, #64]	; 0x40
 800ac72:	9111      	str	r1, [sp, #68]	; 0x44
 800ac74:	4463      	add	r3, ip
 800ac76:	9319      	str	r3, [sp, #100]	; 0x64
 800ac78:	0029      	movs	r1, r5
 800ac7a:	0020      	movs	r0, r4
 800ac7c:	f7f7 fd10 	bl	80026a0 <__aeabi_d2iz>
 800ac80:	9014      	str	r0, [sp, #80]	; 0x50
 800ac82:	f7f7 fd43 	bl	800270c <__aeabi_i2d>
 800ac86:	0002      	movs	r2, r0
 800ac88:	000b      	movs	r3, r1
 800ac8a:	0020      	movs	r0, r4
 800ac8c:	0029      	movs	r1, r5
 800ac8e:	f7f7 f957 	bl	8001f40 <__aeabi_dsub>
 800ac92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac96:	3301      	adds	r3, #1
 800ac98:	9308      	str	r3, [sp, #32]
 800ac9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac9c:	0004      	movs	r4, r0
 800ac9e:	3330      	adds	r3, #48	; 0x30
 800aca0:	7013      	strb	r3, [r2, #0]
 800aca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aca6:	000d      	movs	r5, r1
 800aca8:	f7f5 fbd6 	bl	8000458 <__aeabi_dcmplt>
 800acac:	2800      	cmp	r0, #0
 800acae:	d175      	bne.n	800ad9c <_dtoa_r+0x67c>
 800acb0:	0022      	movs	r2, r4
 800acb2:	002b      	movs	r3, r5
 800acb4:	2000      	movs	r0, #0
 800acb6:	4940      	ldr	r1, [pc, #256]	; (800adb8 <_dtoa_r+0x698>)
 800acb8:	f7f7 f942 	bl	8001f40 <__aeabi_dsub>
 800acbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acc0:	f7f5 fbca 	bl	8000458 <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d000      	beq.n	800acca <_dtoa_r+0x5aa>
 800acc8:	e0d2      	b.n	800ae70 <_dtoa_r+0x750>
 800acca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800accc:	9a08      	ldr	r2, [sp, #32]
 800acce:	4293      	cmp	r3, r2
 800acd0:	d100      	bne.n	800acd4 <_dtoa_r+0x5b4>
 800acd2:	e770      	b.n	800abb6 <_dtoa_r+0x496>
 800acd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800acd8:	2200      	movs	r2, #0
 800acda:	4b38      	ldr	r3, [pc, #224]	; (800adbc <_dtoa_r+0x69c>)
 800acdc:	f7f6 fec4 	bl	8001a68 <__aeabi_dmul>
 800ace0:	4b36      	ldr	r3, [pc, #216]	; (800adbc <_dtoa_r+0x69c>)
 800ace2:	9010      	str	r0, [sp, #64]	; 0x40
 800ace4:	9111      	str	r1, [sp, #68]	; 0x44
 800ace6:	2200      	movs	r2, #0
 800ace8:	0020      	movs	r0, r4
 800acea:	0029      	movs	r1, r5
 800acec:	f7f6 febc 	bl	8001a68 <__aeabi_dmul>
 800acf0:	9b08      	ldr	r3, [sp, #32]
 800acf2:	0004      	movs	r4, r0
 800acf4:	000d      	movs	r5, r1
 800acf6:	9317      	str	r3, [sp, #92]	; 0x5c
 800acf8:	e7be      	b.n	800ac78 <_dtoa_r+0x558>
 800acfa:	9808      	ldr	r0, [sp, #32]
 800acfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acfe:	f7f6 feb3 	bl	8001a68 <__aeabi_dmul>
 800ad02:	9a06      	ldr	r2, [sp, #24]
 800ad04:	9b06      	ldr	r3, [sp, #24]
 800ad06:	4694      	mov	ip, r2
 800ad08:	9308      	str	r3, [sp, #32]
 800ad0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad0c:	9010      	str	r0, [sp, #64]	; 0x40
 800ad0e:	9111      	str	r1, [sp, #68]	; 0x44
 800ad10:	4463      	add	r3, ip
 800ad12:	9319      	str	r3, [sp, #100]	; 0x64
 800ad14:	0029      	movs	r1, r5
 800ad16:	0020      	movs	r0, r4
 800ad18:	f7f7 fcc2 	bl	80026a0 <__aeabi_d2iz>
 800ad1c:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad1e:	f7f7 fcf5 	bl	800270c <__aeabi_i2d>
 800ad22:	0002      	movs	r2, r0
 800ad24:	000b      	movs	r3, r1
 800ad26:	0020      	movs	r0, r4
 800ad28:	0029      	movs	r1, r5
 800ad2a:	f7f7 f909 	bl	8001f40 <__aeabi_dsub>
 800ad2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad30:	9a08      	ldr	r2, [sp, #32]
 800ad32:	3330      	adds	r3, #48	; 0x30
 800ad34:	7013      	strb	r3, [r2, #0]
 800ad36:	0013      	movs	r3, r2
 800ad38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	0004      	movs	r4, r0
 800ad3e:	000d      	movs	r5, r1
 800ad40:	9308      	str	r3, [sp, #32]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d12c      	bne.n	800ada0 <_dtoa_r+0x680>
 800ad46:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad48:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad4a:	9a06      	ldr	r2, [sp, #24]
 800ad4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad4e:	4694      	mov	ip, r2
 800ad50:	4463      	add	r3, ip
 800ad52:	2200      	movs	r2, #0
 800ad54:	9308      	str	r3, [sp, #32]
 800ad56:	4b1e      	ldr	r3, [pc, #120]	; (800add0 <_dtoa_r+0x6b0>)
 800ad58:	f7f5 ff48 	bl	8000bec <__aeabi_dadd>
 800ad5c:	0002      	movs	r2, r0
 800ad5e:	000b      	movs	r3, r1
 800ad60:	0020      	movs	r0, r4
 800ad62:	0029      	movs	r1, r5
 800ad64:	f7f5 fb8c 	bl	8000480 <__aeabi_dcmpgt>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d000      	beq.n	800ad6e <_dtoa_r+0x64e>
 800ad6c:	e080      	b.n	800ae70 <_dtoa_r+0x750>
 800ad6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad72:	2000      	movs	r0, #0
 800ad74:	4916      	ldr	r1, [pc, #88]	; (800add0 <_dtoa_r+0x6b0>)
 800ad76:	f7f7 f8e3 	bl	8001f40 <__aeabi_dsub>
 800ad7a:	0002      	movs	r2, r0
 800ad7c:	000b      	movs	r3, r1
 800ad7e:	0020      	movs	r0, r4
 800ad80:	0029      	movs	r1, r5
 800ad82:	f7f5 fb69 	bl	8000458 <__aeabi_dcmplt>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d100      	bne.n	800ad8c <_dtoa_r+0x66c>
 800ad8a:	e714      	b.n	800abb6 <_dtoa_r+0x496>
 800ad8c:	9b08      	ldr	r3, [sp, #32]
 800ad8e:	001a      	movs	r2, r3
 800ad90:	3a01      	subs	r2, #1
 800ad92:	9208      	str	r2, [sp, #32]
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	2a30      	cmp	r2, #48	; 0x30
 800ad98:	d0f8      	beq.n	800ad8c <_dtoa_r+0x66c>
 800ad9a:	9308      	str	r3, [sp, #32]
 800ad9c:	9602      	str	r6, [sp, #8]
 800ad9e:	e055      	b.n	800ae4c <_dtoa_r+0x72c>
 800ada0:	2200      	movs	r2, #0
 800ada2:	4b06      	ldr	r3, [pc, #24]	; (800adbc <_dtoa_r+0x69c>)
 800ada4:	f7f6 fe60 	bl	8001a68 <__aeabi_dmul>
 800ada8:	0004      	movs	r4, r0
 800adaa:	000d      	movs	r5, r1
 800adac:	e7b2      	b.n	800ad14 <_dtoa_r+0x5f4>
 800adae:	46c0      	nop			; (mov r8, r8)
 800adb0:	0800daa8 	.word	0x0800daa8
 800adb4:	0800da80 	.word	0x0800da80
 800adb8:	3ff00000 	.word	0x3ff00000
 800adbc:	40240000 	.word	0x40240000
 800adc0:	401c0000 	.word	0x401c0000
 800adc4:	fcc00000 	.word	0xfcc00000
 800adc8:	40140000 	.word	0x40140000
 800adcc:	7cc00000 	.word	0x7cc00000
 800add0:	3fe00000 	.word	0x3fe00000
 800add4:	9b07      	ldr	r3, [sp, #28]
 800add6:	9e06      	ldr	r6, [sp, #24]
 800add8:	3b01      	subs	r3, #1
 800adda:	199b      	adds	r3, r3, r6
 800addc:	930c      	str	r3, [sp, #48]	; 0x30
 800adde:	9c08      	ldr	r4, [sp, #32]
 800ade0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ade2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ade4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade6:	0020      	movs	r0, r4
 800ade8:	0029      	movs	r1, r5
 800adea:	f7f6 fa3b 	bl	8001264 <__aeabi_ddiv>
 800adee:	f7f7 fc57 	bl	80026a0 <__aeabi_d2iz>
 800adf2:	9007      	str	r0, [sp, #28]
 800adf4:	f7f7 fc8a 	bl	800270c <__aeabi_i2d>
 800adf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adfc:	f7f6 fe34 	bl	8001a68 <__aeabi_dmul>
 800ae00:	0002      	movs	r2, r0
 800ae02:	000b      	movs	r3, r1
 800ae04:	0020      	movs	r0, r4
 800ae06:	0029      	movs	r1, r5
 800ae08:	f7f7 f89a 	bl	8001f40 <__aeabi_dsub>
 800ae0c:	0033      	movs	r3, r6
 800ae0e:	9a07      	ldr	r2, [sp, #28]
 800ae10:	3601      	adds	r6, #1
 800ae12:	3230      	adds	r2, #48	; 0x30
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae18:	9608      	str	r6, [sp, #32]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d139      	bne.n	800ae92 <_dtoa_r+0x772>
 800ae1e:	0002      	movs	r2, r0
 800ae20:	000b      	movs	r3, r1
 800ae22:	f7f5 fee3 	bl	8000bec <__aeabi_dadd>
 800ae26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2a:	0004      	movs	r4, r0
 800ae2c:	000d      	movs	r5, r1
 800ae2e:	f7f5 fb27 	bl	8000480 <__aeabi_dcmpgt>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d11b      	bne.n	800ae6e <_dtoa_r+0x74e>
 800ae36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3a:	0020      	movs	r0, r4
 800ae3c:	0029      	movs	r1, r5
 800ae3e:	f7f5 fb05 	bl	800044c <__aeabi_dcmpeq>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d002      	beq.n	800ae4c <_dtoa_r+0x72c>
 800ae46:	9b07      	ldr	r3, [sp, #28]
 800ae48:	07db      	lsls	r3, r3, #31
 800ae4a:	d410      	bmi.n	800ae6e <_dtoa_r+0x74e>
 800ae4c:	0038      	movs	r0, r7
 800ae4e:	9905      	ldr	r1, [sp, #20]
 800ae50:	f000 ff6a 	bl	800bd28 <_Bfree>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9a08      	ldr	r2, [sp, #32]
 800ae58:	9802      	ldr	r0, [sp, #8]
 800ae5a:	7013      	strb	r3, [r2, #0]
 800ae5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae5e:	3001      	adds	r0, #1
 800ae60:	6018      	str	r0, [r3, #0]
 800ae62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d100      	bne.n	800ae6a <_dtoa_r+0x74a>
 800ae68:	e4a6      	b.n	800a7b8 <_dtoa_r+0x98>
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	e4a4      	b.n	800a7b8 <_dtoa_r+0x98>
 800ae6e:	9e02      	ldr	r6, [sp, #8]
 800ae70:	9b08      	ldr	r3, [sp, #32]
 800ae72:	9308      	str	r3, [sp, #32]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	781a      	ldrb	r2, [r3, #0]
 800ae78:	2a39      	cmp	r2, #57	; 0x39
 800ae7a:	d106      	bne.n	800ae8a <_dtoa_r+0x76a>
 800ae7c:	9a06      	ldr	r2, [sp, #24]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d1f7      	bne.n	800ae72 <_dtoa_r+0x752>
 800ae82:	2230      	movs	r2, #48	; 0x30
 800ae84:	9906      	ldr	r1, [sp, #24]
 800ae86:	3601      	adds	r6, #1
 800ae88:	700a      	strb	r2, [r1, #0]
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	3201      	adds	r2, #1
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	e784      	b.n	800ad9c <_dtoa_r+0x67c>
 800ae92:	2200      	movs	r2, #0
 800ae94:	4baa      	ldr	r3, [pc, #680]	; (800b140 <_dtoa_r+0xa20>)
 800ae96:	f7f6 fde7 	bl	8001a68 <__aeabi_dmul>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	0004      	movs	r4, r0
 800aea0:	000d      	movs	r5, r1
 800aea2:	f7f5 fad3 	bl	800044c <__aeabi_dcmpeq>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d09b      	beq.n	800ade2 <_dtoa_r+0x6c2>
 800aeaa:	e7cf      	b.n	800ae4c <_dtoa_r+0x72c>
 800aeac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aeae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aeb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	d012      	beq.n	800aedc <_dtoa_r+0x7bc>
 800aeb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aeb8:	2a01      	cmp	r2, #1
 800aeba:	dc66      	bgt.n	800af8a <_dtoa_r+0x86a>
 800aebc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	d05d      	beq.n	800af7e <_dtoa_r+0x85e>
 800aec2:	4aa0      	ldr	r2, [pc, #640]	; (800b144 <_dtoa_r+0xa24>)
 800aec4:	189b      	adds	r3, r3, r2
 800aec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aec8:	2101      	movs	r1, #1
 800aeca:	18d2      	adds	r2, r2, r3
 800aecc:	920a      	str	r2, [sp, #40]	; 0x28
 800aece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aed0:	0038      	movs	r0, r7
 800aed2:	18d3      	adds	r3, r2, r3
 800aed4:	930d      	str	r3, [sp, #52]	; 0x34
 800aed6:	f001 f823 	bl	800bf20 <__i2b>
 800aeda:	0005      	movs	r5, r0
 800aedc:	2c00      	cmp	r4, #0
 800aede:	dd0e      	ble.n	800aefe <_dtoa_r+0x7de>
 800aee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dd0b      	ble.n	800aefe <_dtoa_r+0x7de>
 800aee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aee8:	0023      	movs	r3, r4
 800aeea:	4294      	cmp	r4, r2
 800aeec:	dd00      	ble.n	800aef0 <_dtoa_r+0x7d0>
 800aeee:	0013      	movs	r3, r2
 800aef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef2:	1ae4      	subs	r4, r4, r3
 800aef4:	1ad2      	subs	r2, r2, r3
 800aef6:	920a      	str	r2, [sp, #40]	; 0x28
 800aef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	930d      	str	r3, [sp, #52]	; 0x34
 800aefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01f      	beq.n	800af44 <_dtoa_r+0x824>
 800af04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d054      	beq.n	800afb4 <_dtoa_r+0x894>
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	dd11      	ble.n	800af32 <_dtoa_r+0x812>
 800af0e:	0029      	movs	r1, r5
 800af10:	0032      	movs	r2, r6
 800af12:	0038      	movs	r0, r7
 800af14:	f001 f8ca 	bl	800c0ac <__pow5mult>
 800af18:	9a05      	ldr	r2, [sp, #20]
 800af1a:	0001      	movs	r1, r0
 800af1c:	0005      	movs	r5, r0
 800af1e:	0038      	movs	r0, r7
 800af20:	f001 f814 	bl	800bf4c <__multiply>
 800af24:	9905      	ldr	r1, [sp, #20]
 800af26:	9014      	str	r0, [sp, #80]	; 0x50
 800af28:	0038      	movs	r0, r7
 800af2a:	f000 fefd 	bl	800bd28 <_Bfree>
 800af2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af34:	1b9a      	subs	r2, r3, r6
 800af36:	42b3      	cmp	r3, r6
 800af38:	d004      	beq.n	800af44 <_dtoa_r+0x824>
 800af3a:	0038      	movs	r0, r7
 800af3c:	9905      	ldr	r1, [sp, #20]
 800af3e:	f001 f8b5 	bl	800c0ac <__pow5mult>
 800af42:	9005      	str	r0, [sp, #20]
 800af44:	2101      	movs	r1, #1
 800af46:	0038      	movs	r0, r7
 800af48:	f000 ffea 	bl	800bf20 <__i2b>
 800af4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af4e:	0006      	movs	r6, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	dd31      	ble.n	800afb8 <_dtoa_r+0x898>
 800af54:	001a      	movs	r2, r3
 800af56:	0001      	movs	r1, r0
 800af58:	0038      	movs	r0, r7
 800af5a:	f001 f8a7 	bl	800c0ac <__pow5mult>
 800af5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af60:	0006      	movs	r6, r0
 800af62:	2b01      	cmp	r3, #1
 800af64:	dd2d      	ble.n	800afc2 <_dtoa_r+0x8a2>
 800af66:	2300      	movs	r3, #0
 800af68:	930e      	str	r3, [sp, #56]	; 0x38
 800af6a:	6933      	ldr	r3, [r6, #16]
 800af6c:	3303      	adds	r3, #3
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	18f3      	adds	r3, r6, r3
 800af72:	6858      	ldr	r0, [r3, #4]
 800af74:	f000 ff8c 	bl	800be90 <__hi0bits>
 800af78:	2320      	movs	r3, #32
 800af7a:	1a18      	subs	r0, r3, r0
 800af7c:	e039      	b.n	800aff2 <_dtoa_r+0x8d2>
 800af7e:	2336      	movs	r3, #54	; 0x36
 800af80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	e79d      	b.n	800aec6 <_dtoa_r+0x7a6>
 800af8a:	9b07      	ldr	r3, [sp, #28]
 800af8c:	1e5e      	subs	r6, r3, #1
 800af8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af90:	42b3      	cmp	r3, r6
 800af92:	db07      	blt.n	800afa4 <_dtoa_r+0x884>
 800af94:	1b9e      	subs	r6, r3, r6
 800af96:	9b07      	ldr	r3, [sp, #28]
 800af98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da93      	bge.n	800aec6 <_dtoa_r+0x7a6>
 800af9e:	1ae4      	subs	r4, r4, r3
 800afa0:	2300      	movs	r3, #0
 800afa2:	e790      	b.n	800aec6 <_dtoa_r+0x7a6>
 800afa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afa8:	1af3      	subs	r3, r6, r3
 800afaa:	18d3      	adds	r3, r2, r3
 800afac:	960e      	str	r6, [sp, #56]	; 0x38
 800afae:	9315      	str	r3, [sp, #84]	; 0x54
 800afb0:	2600      	movs	r6, #0
 800afb2:	e7f0      	b.n	800af96 <_dtoa_r+0x876>
 800afb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afb6:	e7c0      	b.n	800af3a <_dtoa_r+0x81a>
 800afb8:	2300      	movs	r3, #0
 800afba:	930e      	str	r3, [sp, #56]	; 0x38
 800afbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	dc13      	bgt.n	800afea <_dtoa_r+0x8ca>
 800afc2:	2300      	movs	r3, #0
 800afc4:	930e      	str	r3, [sp, #56]	; 0x38
 800afc6:	9b08      	ldr	r3, [sp, #32]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10e      	bne.n	800afea <_dtoa_r+0x8ca>
 800afcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afce:	031b      	lsls	r3, r3, #12
 800afd0:	d10b      	bne.n	800afea <_dtoa_r+0x8ca>
 800afd2:	4b5d      	ldr	r3, [pc, #372]	; (800b148 <_dtoa_r+0xa28>)
 800afd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd6:	4213      	tst	r3, r2
 800afd8:	d007      	beq.n	800afea <_dtoa_r+0x8ca>
 800afda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afdc:	3301      	adds	r3, #1
 800afde:	930a      	str	r3, [sp, #40]	; 0x28
 800afe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe2:	3301      	adds	r3, #1
 800afe4:	930d      	str	r3, [sp, #52]	; 0x34
 800afe6:	2301      	movs	r3, #1
 800afe8:	930e      	str	r3, [sp, #56]	; 0x38
 800afea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afec:	2001      	movs	r0, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1bb      	bne.n	800af6a <_dtoa_r+0x84a>
 800aff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aff4:	221f      	movs	r2, #31
 800aff6:	1818      	adds	r0, r3, r0
 800aff8:	0003      	movs	r3, r0
 800affa:	4013      	ands	r3, r2
 800affc:	4210      	tst	r0, r2
 800affe:	d046      	beq.n	800b08e <_dtoa_r+0x96e>
 800b000:	3201      	adds	r2, #1
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	2a04      	cmp	r2, #4
 800b006:	dd3f      	ble.n	800b088 <_dtoa_r+0x968>
 800b008:	221c      	movs	r2, #28
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b00e:	18e4      	adds	r4, r4, r3
 800b010:	18d2      	adds	r2, r2, r3
 800b012:	920a      	str	r2, [sp, #40]	; 0x28
 800b014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b016:	18d3      	adds	r3, r2, r3
 800b018:	930d      	str	r3, [sp, #52]	; 0x34
 800b01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd05      	ble.n	800b02c <_dtoa_r+0x90c>
 800b020:	001a      	movs	r2, r3
 800b022:	0038      	movs	r0, r7
 800b024:	9905      	ldr	r1, [sp, #20]
 800b026:	f001 f89d 	bl	800c164 <__lshift>
 800b02a:	9005      	str	r0, [sp, #20]
 800b02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b02e:	2b00      	cmp	r3, #0
 800b030:	dd05      	ble.n	800b03e <_dtoa_r+0x91e>
 800b032:	0031      	movs	r1, r6
 800b034:	001a      	movs	r2, r3
 800b036:	0038      	movs	r0, r7
 800b038:	f001 f894 	bl	800c164 <__lshift>
 800b03c:	0006      	movs	r6, r0
 800b03e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b040:	2b00      	cmp	r3, #0
 800b042:	d026      	beq.n	800b092 <_dtoa_r+0x972>
 800b044:	0031      	movs	r1, r6
 800b046:	9805      	ldr	r0, [sp, #20]
 800b048:	f001 f8fa 	bl	800c240 <__mcmp>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	da20      	bge.n	800b092 <_dtoa_r+0x972>
 800b050:	9b02      	ldr	r3, [sp, #8]
 800b052:	220a      	movs	r2, #10
 800b054:	3b01      	subs	r3, #1
 800b056:	9302      	str	r3, [sp, #8]
 800b058:	0038      	movs	r0, r7
 800b05a:	2300      	movs	r3, #0
 800b05c:	9905      	ldr	r1, [sp, #20]
 800b05e:	f000 fe87 	bl	800bd70 <__multadd>
 800b062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b064:	9005      	str	r0, [sp, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d100      	bne.n	800b06c <_dtoa_r+0x94c>
 800b06a:	e166      	b.n	800b33a <_dtoa_r+0xc1a>
 800b06c:	2300      	movs	r3, #0
 800b06e:	0029      	movs	r1, r5
 800b070:	220a      	movs	r2, #10
 800b072:	0038      	movs	r0, r7
 800b074:	f000 fe7c 	bl	800bd70 <__multadd>
 800b078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b07a:	0005      	movs	r5, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dc47      	bgt.n	800b110 <_dtoa_r+0x9f0>
 800b080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b082:	2b02      	cmp	r3, #2
 800b084:	dc0d      	bgt.n	800b0a2 <_dtoa_r+0x982>
 800b086:	e043      	b.n	800b110 <_dtoa_r+0x9f0>
 800b088:	2a04      	cmp	r2, #4
 800b08a:	d0c6      	beq.n	800b01a <_dtoa_r+0x8fa>
 800b08c:	0013      	movs	r3, r2
 800b08e:	331c      	adds	r3, #28
 800b090:	e7bc      	b.n	800b00c <_dtoa_r+0x8ec>
 800b092:	9b07      	ldr	r3, [sp, #28]
 800b094:	2b00      	cmp	r3, #0
 800b096:	dc35      	bgt.n	800b104 <_dtoa_r+0x9e4>
 800b098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	dd32      	ble.n	800b104 <_dtoa_r+0x9e4>
 800b09e:	9b07      	ldr	r3, [sp, #28]
 800b0a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10c      	bne.n	800b0c2 <_dtoa_r+0x9a2>
 800b0a8:	0031      	movs	r1, r6
 800b0aa:	2205      	movs	r2, #5
 800b0ac:	0038      	movs	r0, r7
 800b0ae:	f000 fe5f 	bl	800bd70 <__multadd>
 800b0b2:	0006      	movs	r6, r0
 800b0b4:	0001      	movs	r1, r0
 800b0b6:	9805      	ldr	r0, [sp, #20]
 800b0b8:	f001 f8c2 	bl	800c240 <__mcmp>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	dd00      	ble.n	800b0c2 <_dtoa_r+0x9a2>
 800b0c0:	e5a5      	b.n	800ac0e <_dtoa_r+0x4ee>
 800b0c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	9302      	str	r3, [sp, #8]
 800b0c8:	9b06      	ldr	r3, [sp, #24]
 800b0ca:	9308      	str	r3, [sp, #32]
 800b0cc:	2400      	movs	r4, #0
 800b0ce:	0031      	movs	r1, r6
 800b0d0:	0038      	movs	r0, r7
 800b0d2:	f000 fe29 	bl	800bd28 <_Bfree>
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	d100      	bne.n	800b0dc <_dtoa_r+0x9bc>
 800b0da:	e6b7      	b.n	800ae4c <_dtoa_r+0x72c>
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	d005      	beq.n	800b0ec <_dtoa_r+0x9cc>
 800b0e0:	42ac      	cmp	r4, r5
 800b0e2:	d003      	beq.n	800b0ec <_dtoa_r+0x9cc>
 800b0e4:	0021      	movs	r1, r4
 800b0e6:	0038      	movs	r0, r7
 800b0e8:	f000 fe1e 	bl	800bd28 <_Bfree>
 800b0ec:	0029      	movs	r1, r5
 800b0ee:	0038      	movs	r0, r7
 800b0f0:	f000 fe1a 	bl	800bd28 <_Bfree>
 800b0f4:	e6aa      	b.n	800ae4c <_dtoa_r+0x72c>
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	0035      	movs	r5, r6
 800b0fa:	e7e2      	b.n	800b0c2 <_dtoa_r+0x9a2>
 800b0fc:	9602      	str	r6, [sp, #8]
 800b0fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b100:	0035      	movs	r5, r6
 800b102:	e584      	b.n	800ac0e <_dtoa_r+0x4ee>
 800b104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d100      	bne.n	800b10c <_dtoa_r+0x9ec>
 800b10a:	e0ce      	b.n	800b2aa <_dtoa_r+0xb8a>
 800b10c:	9b07      	ldr	r3, [sp, #28]
 800b10e:	930c      	str	r3, [sp, #48]	; 0x30
 800b110:	2c00      	cmp	r4, #0
 800b112:	dd05      	ble.n	800b120 <_dtoa_r+0xa00>
 800b114:	0029      	movs	r1, r5
 800b116:	0022      	movs	r2, r4
 800b118:	0038      	movs	r0, r7
 800b11a:	f001 f823 	bl	800c164 <__lshift>
 800b11e:	0005      	movs	r5, r0
 800b120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b122:	0028      	movs	r0, r5
 800b124:	2b00      	cmp	r3, #0
 800b126:	d022      	beq.n	800b16e <_dtoa_r+0xa4e>
 800b128:	0038      	movs	r0, r7
 800b12a:	6869      	ldr	r1, [r5, #4]
 800b12c:	f000 fdb8 	bl	800bca0 <_Balloc>
 800b130:	1e04      	subs	r4, r0, #0
 800b132:	d10f      	bne.n	800b154 <_dtoa_r+0xa34>
 800b134:	0002      	movs	r2, r0
 800b136:	4b05      	ldr	r3, [pc, #20]	; (800b14c <_dtoa_r+0xa2c>)
 800b138:	4905      	ldr	r1, [pc, #20]	; (800b150 <_dtoa_r+0xa30>)
 800b13a:	f7ff fb06 	bl	800a74a <_dtoa_r+0x2a>
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	40240000 	.word	0x40240000
 800b144:	00000433 	.word	0x00000433
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	0800d930 	.word	0x0800d930
 800b150:	000002ea 	.word	0x000002ea
 800b154:	0029      	movs	r1, r5
 800b156:	692b      	ldr	r3, [r5, #16]
 800b158:	310c      	adds	r1, #12
 800b15a:	1c9a      	adds	r2, r3, #2
 800b15c:	0092      	lsls	r2, r2, #2
 800b15e:	300c      	adds	r0, #12
 800b160:	f7fd fcc6 	bl	8008af0 <memcpy>
 800b164:	2201      	movs	r2, #1
 800b166:	0021      	movs	r1, r4
 800b168:	0038      	movs	r0, r7
 800b16a:	f000 fffb 	bl	800c164 <__lshift>
 800b16e:	9b06      	ldr	r3, [sp, #24]
 800b170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b172:	930a      	str	r3, [sp, #40]	; 0x28
 800b174:	3b01      	subs	r3, #1
 800b176:	189b      	adds	r3, r3, r2
 800b178:	2201      	movs	r2, #1
 800b17a:	002c      	movs	r4, r5
 800b17c:	0005      	movs	r5, r0
 800b17e:	9314      	str	r3, [sp, #80]	; 0x50
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	4013      	ands	r3, r2
 800b184:	930f      	str	r3, [sp, #60]	; 0x3c
 800b186:	0031      	movs	r1, r6
 800b188:	9805      	ldr	r0, [sp, #20]
 800b18a:	f7ff fa3d 	bl	800a608 <quorem>
 800b18e:	0003      	movs	r3, r0
 800b190:	0021      	movs	r1, r4
 800b192:	3330      	adds	r3, #48	; 0x30
 800b194:	900d      	str	r0, [sp, #52]	; 0x34
 800b196:	9805      	ldr	r0, [sp, #20]
 800b198:	9307      	str	r3, [sp, #28]
 800b19a:	f001 f851 	bl	800c240 <__mcmp>
 800b19e:	002a      	movs	r2, r5
 800b1a0:	900e      	str	r0, [sp, #56]	; 0x38
 800b1a2:	0031      	movs	r1, r6
 800b1a4:	0038      	movs	r0, r7
 800b1a6:	f001 f867 	bl	800c278 <__mdiff>
 800b1aa:	68c3      	ldr	r3, [r0, #12]
 800b1ac:	9008      	str	r0, [sp, #32]
 800b1ae:	9310      	str	r3, [sp, #64]	; 0x40
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800b1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d104      	bne.n	800b1c4 <_dtoa_r+0xaa4>
 800b1ba:	0001      	movs	r1, r0
 800b1bc:	9805      	ldr	r0, [sp, #20]
 800b1be:	f001 f83f 	bl	800c240 <__mcmp>
 800b1c2:	900c      	str	r0, [sp, #48]	; 0x30
 800b1c4:	0038      	movs	r0, r7
 800b1c6:	9908      	ldr	r1, [sp, #32]
 800b1c8:	f000 fdae 	bl	800bd28 <_Bfree>
 800b1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	9308      	str	r3, [sp, #32]
 800b1d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	d10c      	bne.n	800b1f8 <_dtoa_r+0xad8>
 800b1de:	9b07      	ldr	r3, [sp, #28]
 800b1e0:	2b39      	cmp	r3, #57	; 0x39
 800b1e2:	d026      	beq.n	800b232 <_dtoa_r+0xb12>
 800b1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dd02      	ble.n	800b1f0 <_dtoa_r+0xad0>
 800b1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ec:	3331      	adds	r3, #49	; 0x31
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f2:	9a07      	ldr	r2, [sp, #28]
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	e76a      	b.n	800b0ce <_dtoa_r+0x9ae>
 800b1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	db04      	blt.n	800b208 <_dtoa_r+0xae8>
 800b1fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b200:	4313      	orrs	r3, r2
 800b202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b204:	4313      	orrs	r3, r2
 800b206:	d11f      	bne.n	800b248 <_dtoa_r+0xb28>
 800b208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	ddf0      	ble.n	800b1f0 <_dtoa_r+0xad0>
 800b20e:	9905      	ldr	r1, [sp, #20]
 800b210:	2201      	movs	r2, #1
 800b212:	0038      	movs	r0, r7
 800b214:	f000 ffa6 	bl	800c164 <__lshift>
 800b218:	0031      	movs	r1, r6
 800b21a:	9005      	str	r0, [sp, #20]
 800b21c:	f001 f810 	bl	800c240 <__mcmp>
 800b220:	2800      	cmp	r0, #0
 800b222:	dc03      	bgt.n	800b22c <_dtoa_r+0xb0c>
 800b224:	d1e4      	bne.n	800b1f0 <_dtoa_r+0xad0>
 800b226:	9b07      	ldr	r3, [sp, #28]
 800b228:	07db      	lsls	r3, r3, #31
 800b22a:	d5e1      	bpl.n	800b1f0 <_dtoa_r+0xad0>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	2b39      	cmp	r3, #57	; 0x39
 800b230:	d1db      	bne.n	800b1ea <_dtoa_r+0xaca>
 800b232:	2339      	movs	r3, #57	; 0x39
 800b234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b236:	7013      	strb	r3, [r2, #0]
 800b238:	9b08      	ldr	r3, [sp, #32]
 800b23a:	9308      	str	r3, [sp, #32]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	781a      	ldrb	r2, [r3, #0]
 800b240:	2a39      	cmp	r2, #57	; 0x39
 800b242:	d068      	beq.n	800b316 <_dtoa_r+0xbf6>
 800b244:	3201      	adds	r2, #1
 800b246:	e7d5      	b.n	800b1f4 <_dtoa_r+0xad4>
 800b248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dd07      	ble.n	800b25e <_dtoa_r+0xb3e>
 800b24e:	9b07      	ldr	r3, [sp, #28]
 800b250:	2b39      	cmp	r3, #57	; 0x39
 800b252:	d0ee      	beq.n	800b232 <_dtoa_r+0xb12>
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b258:	3301      	adds	r3, #1
 800b25a:	7013      	strb	r3, [r2, #0]
 800b25c:	e737      	b.n	800b0ce <_dtoa_r+0x9ae>
 800b25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b260:	9a07      	ldr	r2, [sp, #28]
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b268:	4293      	cmp	r3, r2
 800b26a:	d03e      	beq.n	800b2ea <_dtoa_r+0xbca>
 800b26c:	2300      	movs	r3, #0
 800b26e:	220a      	movs	r2, #10
 800b270:	9905      	ldr	r1, [sp, #20]
 800b272:	0038      	movs	r0, r7
 800b274:	f000 fd7c 	bl	800bd70 <__multadd>
 800b278:	2300      	movs	r3, #0
 800b27a:	9005      	str	r0, [sp, #20]
 800b27c:	220a      	movs	r2, #10
 800b27e:	0021      	movs	r1, r4
 800b280:	0038      	movs	r0, r7
 800b282:	42ac      	cmp	r4, r5
 800b284:	d106      	bne.n	800b294 <_dtoa_r+0xb74>
 800b286:	f000 fd73 	bl	800bd70 <__multadd>
 800b28a:	0004      	movs	r4, r0
 800b28c:	0005      	movs	r5, r0
 800b28e:	9b08      	ldr	r3, [sp, #32]
 800b290:	930a      	str	r3, [sp, #40]	; 0x28
 800b292:	e778      	b.n	800b186 <_dtoa_r+0xa66>
 800b294:	f000 fd6c 	bl	800bd70 <__multadd>
 800b298:	0029      	movs	r1, r5
 800b29a:	0004      	movs	r4, r0
 800b29c:	2300      	movs	r3, #0
 800b29e:	220a      	movs	r2, #10
 800b2a0:	0038      	movs	r0, r7
 800b2a2:	f000 fd65 	bl	800bd70 <__multadd>
 800b2a6:	0005      	movs	r5, r0
 800b2a8:	e7f1      	b.n	800b28e <_dtoa_r+0xb6e>
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b2ae:	2400      	movs	r4, #0
 800b2b0:	0031      	movs	r1, r6
 800b2b2:	9805      	ldr	r0, [sp, #20]
 800b2b4:	f7ff f9a8 	bl	800a608 <quorem>
 800b2b8:	9b06      	ldr	r3, [sp, #24]
 800b2ba:	3030      	adds	r0, #48	; 0x30
 800b2bc:	5518      	strb	r0, [r3, r4]
 800b2be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	9007      	str	r0, [sp, #28]
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	dd07      	ble.n	800b2d8 <_dtoa_r+0xbb8>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	220a      	movs	r2, #10
 800b2cc:	0038      	movs	r0, r7
 800b2ce:	9905      	ldr	r1, [sp, #20]
 800b2d0:	f000 fd4e 	bl	800bd70 <__multadd>
 800b2d4:	9005      	str	r0, [sp, #20]
 800b2d6:	e7eb      	b.n	800b2b0 <_dtoa_r+0xb90>
 800b2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2da:	2001      	movs	r0, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dd00      	ble.n	800b2e2 <_dtoa_r+0xbc2>
 800b2e0:	0018      	movs	r0, r3
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	9b06      	ldr	r3, [sp, #24]
 800b2e6:	181b      	adds	r3, r3, r0
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	9905      	ldr	r1, [sp, #20]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	0038      	movs	r0, r7
 800b2f0:	f000 ff38 	bl	800c164 <__lshift>
 800b2f4:	0031      	movs	r1, r6
 800b2f6:	9005      	str	r0, [sp, #20]
 800b2f8:	f000 ffa2 	bl	800c240 <__mcmp>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	dc9b      	bgt.n	800b238 <_dtoa_r+0xb18>
 800b300:	d102      	bne.n	800b308 <_dtoa_r+0xbe8>
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	07db      	lsls	r3, r3, #31
 800b306:	d497      	bmi.n	800b238 <_dtoa_r+0xb18>
 800b308:	9b08      	ldr	r3, [sp, #32]
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	2a30      	cmp	r2, #48	; 0x30
 800b312:	d0fa      	beq.n	800b30a <_dtoa_r+0xbea>
 800b314:	e6db      	b.n	800b0ce <_dtoa_r+0x9ae>
 800b316:	9a06      	ldr	r2, [sp, #24]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d18e      	bne.n	800b23a <_dtoa_r+0xb1a>
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	3301      	adds	r3, #1
 800b320:	9302      	str	r3, [sp, #8]
 800b322:	2331      	movs	r3, #49	; 0x31
 800b324:	e799      	b.n	800b25a <_dtoa_r+0xb3a>
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <_dtoa_r+0xc2c>)
 800b328:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b32a:	9306      	str	r3, [sp, #24]
 800b32c:	4b08      	ldr	r3, [pc, #32]	; (800b350 <_dtoa_r+0xc30>)
 800b32e:	2a00      	cmp	r2, #0
 800b330:	d001      	beq.n	800b336 <_dtoa_r+0xc16>
 800b332:	f7ff fa3f 	bl	800a7b4 <_dtoa_r+0x94>
 800b336:	f7ff fa3f 	bl	800a7b8 <_dtoa_r+0x98>
 800b33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dcb6      	bgt.n	800b2ae <_dtoa_r+0xb8e>
 800b340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b342:	2b02      	cmp	r3, #2
 800b344:	dd00      	ble.n	800b348 <_dtoa_r+0xc28>
 800b346:	e6ac      	b.n	800b0a2 <_dtoa_r+0x982>
 800b348:	e7b1      	b.n	800b2ae <_dtoa_r+0xb8e>
 800b34a:	46c0      	nop			; (mov r8, r8)
 800b34c:	0800d8b1 	.word	0x0800d8b1
 800b350:	0800d8b9 	.word	0x0800d8b9

0800b354 <std>:
 800b354:	2300      	movs	r3, #0
 800b356:	b510      	push	{r4, lr}
 800b358:	0004      	movs	r4, r0
 800b35a:	6003      	str	r3, [r0, #0]
 800b35c:	6043      	str	r3, [r0, #4]
 800b35e:	6083      	str	r3, [r0, #8]
 800b360:	8181      	strh	r1, [r0, #12]
 800b362:	6643      	str	r3, [r0, #100]	; 0x64
 800b364:	0019      	movs	r1, r3
 800b366:	81c2      	strh	r2, [r0, #14]
 800b368:	6103      	str	r3, [r0, #16]
 800b36a:	6143      	str	r3, [r0, #20]
 800b36c:	6183      	str	r3, [r0, #24]
 800b36e:	2208      	movs	r2, #8
 800b370:	305c      	adds	r0, #92	; 0x5c
 800b372:	f7fd fbc6 	bl	8008b02 <memset>
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <std+0x38>)
 800b378:	6224      	str	r4, [r4, #32]
 800b37a:	6263      	str	r3, [r4, #36]	; 0x24
 800b37c:	4b04      	ldr	r3, [pc, #16]	; (800b390 <std+0x3c>)
 800b37e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b380:	4b04      	ldr	r3, [pc, #16]	; (800b394 <std+0x40>)
 800b382:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b384:	4b04      	ldr	r3, [pc, #16]	; (800b398 <std+0x44>)
 800b386:	6323      	str	r3, [r4, #48]	; 0x30
 800b388:	bd10      	pop	{r4, pc}
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	0800ce09 	.word	0x0800ce09
 800b390:	0800ce31 	.word	0x0800ce31
 800b394:	0800ce69 	.word	0x0800ce69
 800b398:	0800ce95 	.word	0x0800ce95

0800b39c <_cleanup_r>:
 800b39c:	b510      	push	{r4, lr}
 800b39e:	4902      	ldr	r1, [pc, #8]	; (800b3a8 <_cleanup_r+0xc>)
 800b3a0:	f000 f8ba 	bl	800b518 <_fwalk_reent>
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	46c0      	nop			; (mov r8, r8)
 800b3a8:	0800d21d 	.word	0x0800d21d

0800b3ac <__sfmoreglue>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	2568      	movs	r5, #104	; 0x68
 800b3b0:	1e4a      	subs	r2, r1, #1
 800b3b2:	4355      	muls	r5, r2
 800b3b4:	000e      	movs	r6, r1
 800b3b6:	0029      	movs	r1, r5
 800b3b8:	3174      	adds	r1, #116	; 0x74
 800b3ba:	f001 f9d3 	bl	800c764 <_malloc_r>
 800b3be:	1e04      	subs	r4, r0, #0
 800b3c0:	d008      	beq.n	800b3d4 <__sfmoreglue+0x28>
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	002a      	movs	r2, r5
 800b3c6:	6001      	str	r1, [r0, #0]
 800b3c8:	6046      	str	r6, [r0, #4]
 800b3ca:	300c      	adds	r0, #12
 800b3cc:	60a0      	str	r0, [r4, #8]
 800b3ce:	3268      	adds	r2, #104	; 0x68
 800b3d0:	f7fd fb97 	bl	8008b02 <memset>
 800b3d4:	0020      	movs	r0, r4
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}

0800b3d8 <__sfp_lock_acquire>:
 800b3d8:	b510      	push	{r4, lr}
 800b3da:	4802      	ldr	r0, [pc, #8]	; (800b3e4 <__sfp_lock_acquire+0xc>)
 800b3dc:	f000 fc35 	bl	800bc4a <__retarget_lock_acquire_recursive>
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	46c0      	nop			; (mov r8, r8)
 800b3e4:	200005d9 	.word	0x200005d9

0800b3e8 <__sfp_lock_release>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	4802      	ldr	r0, [pc, #8]	; (800b3f4 <__sfp_lock_release+0xc>)
 800b3ec:	f000 fc2e 	bl	800bc4c <__retarget_lock_release_recursive>
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	200005d9 	.word	0x200005d9

0800b3f8 <__sinit_lock_acquire>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	4802      	ldr	r0, [pc, #8]	; (800b404 <__sinit_lock_acquire+0xc>)
 800b3fc:	f000 fc25 	bl	800bc4a <__retarget_lock_acquire_recursive>
 800b400:	bd10      	pop	{r4, pc}
 800b402:	46c0      	nop			; (mov r8, r8)
 800b404:	200005da 	.word	0x200005da

0800b408 <__sinit_lock_release>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	4802      	ldr	r0, [pc, #8]	; (800b414 <__sinit_lock_release+0xc>)
 800b40c:	f000 fc1e 	bl	800bc4c <__retarget_lock_release_recursive>
 800b410:	bd10      	pop	{r4, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	200005da 	.word	0x200005da

0800b418 <__sinit>:
 800b418:	b513      	push	{r0, r1, r4, lr}
 800b41a:	0004      	movs	r4, r0
 800b41c:	f7ff ffec 	bl	800b3f8 <__sinit_lock_acquire>
 800b420:	69a3      	ldr	r3, [r4, #24]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <__sinit+0x14>
 800b426:	f7ff ffef 	bl	800b408 <__sinit_lock_release>
 800b42a:	bd13      	pop	{r0, r1, r4, pc}
 800b42c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b42e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b430:	6523      	str	r3, [r4, #80]	; 0x50
 800b432:	4b13      	ldr	r3, [pc, #76]	; (800b480 <__sinit+0x68>)
 800b434:	4a13      	ldr	r2, [pc, #76]	; (800b484 <__sinit+0x6c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	62a2      	str	r2, [r4, #40]	; 0x28
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d101      	bne.n	800b444 <__sinit+0x2c>
 800b440:	2301      	movs	r3, #1
 800b442:	61a3      	str	r3, [r4, #24]
 800b444:	0020      	movs	r0, r4
 800b446:	f000 f81f 	bl	800b488 <__sfp>
 800b44a:	6060      	str	r0, [r4, #4]
 800b44c:	0020      	movs	r0, r4
 800b44e:	f000 f81b 	bl	800b488 <__sfp>
 800b452:	60a0      	str	r0, [r4, #8]
 800b454:	0020      	movs	r0, r4
 800b456:	f000 f817 	bl	800b488 <__sfp>
 800b45a:	2200      	movs	r2, #0
 800b45c:	2104      	movs	r1, #4
 800b45e:	60e0      	str	r0, [r4, #12]
 800b460:	6860      	ldr	r0, [r4, #4]
 800b462:	f7ff ff77 	bl	800b354 <std>
 800b466:	2201      	movs	r2, #1
 800b468:	2109      	movs	r1, #9
 800b46a:	68a0      	ldr	r0, [r4, #8]
 800b46c:	f7ff ff72 	bl	800b354 <std>
 800b470:	2202      	movs	r2, #2
 800b472:	2112      	movs	r1, #18
 800b474:	68e0      	ldr	r0, [r4, #12]
 800b476:	f7ff ff6d 	bl	800b354 <std>
 800b47a:	2301      	movs	r3, #1
 800b47c:	61a3      	str	r3, [r4, #24]
 800b47e:	e7d2      	b.n	800b426 <__sinit+0xe>
 800b480:	0800d720 	.word	0x0800d720
 800b484:	0800b39d 	.word	0x0800b39d

0800b488 <__sfp>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	0007      	movs	r7, r0
 800b48c:	f7ff ffa4 	bl	800b3d8 <__sfp_lock_acquire>
 800b490:	4b1f      	ldr	r3, [pc, #124]	; (800b510 <__sfp+0x88>)
 800b492:	681e      	ldr	r6, [r3, #0]
 800b494:	69b3      	ldr	r3, [r6, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <__sfp+0x18>
 800b49a:	0030      	movs	r0, r6
 800b49c:	f7ff ffbc 	bl	800b418 <__sinit>
 800b4a0:	3648      	adds	r6, #72	; 0x48
 800b4a2:	68b4      	ldr	r4, [r6, #8]
 800b4a4:	6873      	ldr	r3, [r6, #4]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	d504      	bpl.n	800b4b4 <__sfp+0x2c>
 800b4aa:	6833      	ldr	r3, [r6, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d022      	beq.n	800b4f6 <__sfp+0x6e>
 800b4b0:	6836      	ldr	r6, [r6, #0]
 800b4b2:	e7f6      	b.n	800b4a2 <__sfp+0x1a>
 800b4b4:	220c      	movs	r2, #12
 800b4b6:	5ea5      	ldrsh	r5, [r4, r2]
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	d11a      	bne.n	800b4f2 <__sfp+0x6a>
 800b4bc:	0020      	movs	r0, r4
 800b4be:	4b15      	ldr	r3, [pc, #84]	; (800b514 <__sfp+0x8c>)
 800b4c0:	3058      	adds	r0, #88	; 0x58
 800b4c2:	60e3      	str	r3, [r4, #12]
 800b4c4:	6665      	str	r5, [r4, #100]	; 0x64
 800b4c6:	f000 fbbf 	bl	800bc48 <__retarget_lock_init_recursive>
 800b4ca:	f7ff ff8d 	bl	800b3e8 <__sfp_lock_release>
 800b4ce:	0020      	movs	r0, r4
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	0029      	movs	r1, r5
 800b4d4:	6025      	str	r5, [r4, #0]
 800b4d6:	60a5      	str	r5, [r4, #8]
 800b4d8:	6065      	str	r5, [r4, #4]
 800b4da:	6125      	str	r5, [r4, #16]
 800b4dc:	6165      	str	r5, [r4, #20]
 800b4de:	61a5      	str	r5, [r4, #24]
 800b4e0:	305c      	adds	r0, #92	; 0x5c
 800b4e2:	f7fd fb0e 	bl	8008b02 <memset>
 800b4e6:	6365      	str	r5, [r4, #52]	; 0x34
 800b4e8:	63a5      	str	r5, [r4, #56]	; 0x38
 800b4ea:	64a5      	str	r5, [r4, #72]	; 0x48
 800b4ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b4ee:	0020      	movs	r0, r4
 800b4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f2:	3468      	adds	r4, #104	; 0x68
 800b4f4:	e7d7      	b.n	800b4a6 <__sfp+0x1e>
 800b4f6:	2104      	movs	r1, #4
 800b4f8:	0038      	movs	r0, r7
 800b4fa:	f7ff ff57 	bl	800b3ac <__sfmoreglue>
 800b4fe:	1e04      	subs	r4, r0, #0
 800b500:	6030      	str	r0, [r6, #0]
 800b502:	d1d5      	bne.n	800b4b0 <__sfp+0x28>
 800b504:	f7ff ff70 	bl	800b3e8 <__sfp_lock_release>
 800b508:	230c      	movs	r3, #12
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	e7ef      	b.n	800b4ee <__sfp+0x66>
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	0800d720 	.word	0x0800d720
 800b514:	ffff0001 	.word	0xffff0001

0800b518 <_fwalk_reent>:
 800b518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51a:	0004      	movs	r4, r0
 800b51c:	0006      	movs	r6, r0
 800b51e:	2700      	movs	r7, #0
 800b520:	9101      	str	r1, [sp, #4]
 800b522:	3448      	adds	r4, #72	; 0x48
 800b524:	6863      	ldr	r3, [r4, #4]
 800b526:	68a5      	ldr	r5, [r4, #8]
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	9b00      	ldr	r3, [sp, #0]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	d504      	bpl.n	800b53c <_fwalk_reent+0x24>
 800b532:	6824      	ldr	r4, [r4, #0]
 800b534:	2c00      	cmp	r4, #0
 800b536:	d1f5      	bne.n	800b524 <_fwalk_reent+0xc>
 800b538:	0038      	movs	r0, r7
 800b53a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b53c:	89ab      	ldrh	r3, [r5, #12]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d908      	bls.n	800b554 <_fwalk_reent+0x3c>
 800b542:	220e      	movs	r2, #14
 800b544:	5eab      	ldrsh	r3, [r5, r2]
 800b546:	3301      	adds	r3, #1
 800b548:	d004      	beq.n	800b554 <_fwalk_reent+0x3c>
 800b54a:	0029      	movs	r1, r5
 800b54c:	0030      	movs	r0, r6
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	4798      	blx	r3
 800b552:	4307      	orrs	r7, r0
 800b554:	3568      	adds	r5, #104	; 0x68
 800b556:	e7e8      	b.n	800b52a <_fwalk_reent+0x12>

0800b558 <rshift>:
 800b558:	0002      	movs	r2, r0
 800b55a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55c:	6904      	ldr	r4, [r0, #16]
 800b55e:	3214      	adds	r2, #20
 800b560:	0013      	movs	r3, r2
 800b562:	b085      	sub	sp, #20
 800b564:	114f      	asrs	r7, r1, #5
 800b566:	42bc      	cmp	r4, r7
 800b568:	dd31      	ble.n	800b5ce <rshift+0x76>
 800b56a:	00bb      	lsls	r3, r7, #2
 800b56c:	18d3      	adds	r3, r2, r3
 800b56e:	261f      	movs	r6, #31
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	000b      	movs	r3, r1
 800b574:	00a5      	lsls	r5, r4, #2
 800b576:	4033      	ands	r3, r6
 800b578:	1955      	adds	r5, r2, r5
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	4231      	tst	r1, r6
 800b57e:	d10c      	bne.n	800b59a <rshift+0x42>
 800b580:	0016      	movs	r6, r2
 800b582:	9901      	ldr	r1, [sp, #4]
 800b584:	428d      	cmp	r5, r1
 800b586:	d838      	bhi.n	800b5fa <rshift+0xa2>
 800b588:	9901      	ldr	r1, [sp, #4]
 800b58a:	2300      	movs	r3, #0
 800b58c:	3903      	subs	r1, #3
 800b58e:	428d      	cmp	r5, r1
 800b590:	d301      	bcc.n	800b596 <rshift+0x3e>
 800b592:	1be3      	subs	r3, r4, r7
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	18d3      	adds	r3, r2, r3
 800b598:	e019      	b.n	800b5ce <rshift+0x76>
 800b59a:	2120      	movs	r1, #32
 800b59c:	9b02      	ldr	r3, [sp, #8]
 800b59e:	9e01      	ldr	r6, [sp, #4]
 800b5a0:	1acb      	subs	r3, r1, r3
 800b5a2:	9303      	str	r3, [sp, #12]
 800b5a4:	ce02      	ldmia	r6!, {r1}
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	4694      	mov	ip, r2
 800b5aa:	40d9      	lsrs	r1, r3
 800b5ac:	9100      	str	r1, [sp, #0]
 800b5ae:	42b5      	cmp	r5, r6
 800b5b0:	d816      	bhi.n	800b5e0 <rshift+0x88>
 800b5b2:	9e01      	ldr	r6, [sp, #4]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	3601      	adds	r6, #1
 800b5b8:	42b5      	cmp	r5, r6
 800b5ba:	d302      	bcc.n	800b5c2 <rshift+0x6a>
 800b5bc:	1be3      	subs	r3, r4, r7
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	3b04      	subs	r3, #4
 800b5c2:	9900      	ldr	r1, [sp, #0]
 800b5c4:	18d3      	adds	r3, r2, r3
 800b5c6:	6019      	str	r1, [r3, #0]
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d000      	beq.n	800b5ce <rshift+0x76>
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	1a99      	subs	r1, r3, r2
 800b5d0:	1089      	asrs	r1, r1, #2
 800b5d2:	6101      	str	r1, [r0, #16]
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d101      	bne.n	800b5dc <rshift+0x84>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	6143      	str	r3, [r0, #20]
 800b5dc:	b005      	add	sp, #20
 800b5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	9903      	ldr	r1, [sp, #12]
 800b5e4:	408b      	lsls	r3, r1
 800b5e6:	9900      	ldr	r1, [sp, #0]
 800b5e8:	4319      	orrs	r1, r3
 800b5ea:	4663      	mov	r3, ip
 800b5ec:	c302      	stmia	r3!, {r1}
 800b5ee:	469c      	mov	ip, r3
 800b5f0:	ce02      	ldmia	r6!, {r1}
 800b5f2:	9b02      	ldr	r3, [sp, #8]
 800b5f4:	40d9      	lsrs	r1, r3
 800b5f6:	9100      	str	r1, [sp, #0]
 800b5f8:	e7d9      	b.n	800b5ae <rshift+0x56>
 800b5fa:	c908      	ldmia	r1!, {r3}
 800b5fc:	c608      	stmia	r6!, {r3}
 800b5fe:	e7c1      	b.n	800b584 <rshift+0x2c>

0800b600 <__hexdig_fun>:
 800b600:	0002      	movs	r2, r0
 800b602:	3a30      	subs	r2, #48	; 0x30
 800b604:	0003      	movs	r3, r0
 800b606:	2a09      	cmp	r2, #9
 800b608:	d802      	bhi.n	800b610 <__hexdig_fun+0x10>
 800b60a:	3b20      	subs	r3, #32
 800b60c:	b2d8      	uxtb	r0, r3
 800b60e:	4770      	bx	lr
 800b610:	0002      	movs	r2, r0
 800b612:	3a61      	subs	r2, #97	; 0x61
 800b614:	2a05      	cmp	r2, #5
 800b616:	d801      	bhi.n	800b61c <__hexdig_fun+0x1c>
 800b618:	3b47      	subs	r3, #71	; 0x47
 800b61a:	e7f7      	b.n	800b60c <__hexdig_fun+0xc>
 800b61c:	001a      	movs	r2, r3
 800b61e:	3a41      	subs	r2, #65	; 0x41
 800b620:	2000      	movs	r0, #0
 800b622:	2a05      	cmp	r2, #5
 800b624:	d8f3      	bhi.n	800b60e <__hexdig_fun+0xe>
 800b626:	3b27      	subs	r3, #39	; 0x27
 800b628:	e7f0      	b.n	800b60c <__hexdig_fun+0xc>
	...

0800b62c <__gethex>:
 800b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62e:	b08d      	sub	sp, #52	; 0x34
 800b630:	930a      	str	r3, [sp, #40]	; 0x28
 800b632:	4bbf      	ldr	r3, [pc, #764]	; (800b930 <__gethex+0x304>)
 800b634:	9005      	str	r0, [sp, #20]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	9109      	str	r1, [sp, #36]	; 0x24
 800b63a:	0018      	movs	r0, r3
 800b63c:	9202      	str	r2, [sp, #8]
 800b63e:	9307      	str	r3, [sp, #28]
 800b640:	f7f4 fd62 	bl	8000108 <strlen>
 800b644:	2202      	movs	r2, #2
 800b646:	9b07      	ldr	r3, [sp, #28]
 800b648:	4252      	negs	r2, r2
 800b64a:	181b      	adds	r3, r3, r0
 800b64c:	3b01      	subs	r3, #1
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	9003      	str	r0, [sp, #12]
 800b652:	930b      	str	r3, [sp, #44]	; 0x2c
 800b654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b656:	6819      	ldr	r1, [r3, #0]
 800b658:	1c8b      	adds	r3, r1, #2
 800b65a:	1a52      	subs	r2, r2, r1
 800b65c:	18d1      	adds	r1, r2, r3
 800b65e:	9301      	str	r3, [sp, #4]
 800b660:	9108      	str	r1, [sp, #32]
 800b662:	9901      	ldr	r1, [sp, #4]
 800b664:	3301      	adds	r3, #1
 800b666:	7808      	ldrb	r0, [r1, #0]
 800b668:	2830      	cmp	r0, #48	; 0x30
 800b66a:	d0f7      	beq.n	800b65c <__gethex+0x30>
 800b66c:	f7ff ffc8 	bl	800b600 <__hexdig_fun>
 800b670:	2300      	movs	r3, #0
 800b672:	001c      	movs	r4, r3
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	4298      	cmp	r0, r3
 800b678:	d11f      	bne.n	800b6ba <__gethex+0x8e>
 800b67a:	9a03      	ldr	r2, [sp, #12]
 800b67c:	9907      	ldr	r1, [sp, #28]
 800b67e:	9801      	ldr	r0, [sp, #4]
 800b680:	f001 fc0e 	bl	800cea0 <strncmp>
 800b684:	0007      	movs	r7, r0
 800b686:	42a0      	cmp	r0, r4
 800b688:	d000      	beq.n	800b68c <__gethex+0x60>
 800b68a:	e06b      	b.n	800b764 <__gethex+0x138>
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	9a03      	ldr	r2, [sp, #12]
 800b690:	5c98      	ldrb	r0, [r3, r2]
 800b692:	189d      	adds	r5, r3, r2
 800b694:	f7ff ffb4 	bl	800b600 <__hexdig_fun>
 800b698:	2301      	movs	r3, #1
 800b69a:	9304      	str	r3, [sp, #16]
 800b69c:	42a0      	cmp	r0, r4
 800b69e:	d030      	beq.n	800b702 <__gethex+0xd6>
 800b6a0:	9501      	str	r5, [sp, #4]
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	7818      	ldrb	r0, [r3, #0]
 800b6a6:	2830      	cmp	r0, #48	; 0x30
 800b6a8:	d009      	beq.n	800b6be <__gethex+0x92>
 800b6aa:	f7ff ffa9 	bl	800b600 <__hexdig_fun>
 800b6ae:	4242      	negs	r2, r0
 800b6b0:	4142      	adcs	r2, r0
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	002c      	movs	r4, r5
 800b6b6:	9204      	str	r2, [sp, #16]
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	9d01      	ldr	r5, [sp, #4]
 800b6bc:	e004      	b.n	800b6c8 <__gethex+0x9c>
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	e7ed      	b.n	800b6a2 <__gethex+0x76>
 800b6c6:	3501      	adds	r5, #1
 800b6c8:	7828      	ldrb	r0, [r5, #0]
 800b6ca:	f7ff ff99 	bl	800b600 <__hexdig_fun>
 800b6ce:	1e07      	subs	r7, r0, #0
 800b6d0:	d1f9      	bne.n	800b6c6 <__gethex+0x9a>
 800b6d2:	0028      	movs	r0, r5
 800b6d4:	9a03      	ldr	r2, [sp, #12]
 800b6d6:	9907      	ldr	r1, [sp, #28]
 800b6d8:	f001 fbe2 	bl	800cea0 <strncmp>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d10e      	bne.n	800b6fe <__gethex+0xd2>
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	d107      	bne.n	800b6f4 <__gethex+0xc8>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	18ed      	adds	r5, r5, r3
 800b6e8:	002c      	movs	r4, r5
 800b6ea:	7828      	ldrb	r0, [r5, #0]
 800b6ec:	f7ff ff88 	bl	800b600 <__hexdig_fun>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d102      	bne.n	800b6fa <__gethex+0xce>
 800b6f4:	1b64      	subs	r4, r4, r5
 800b6f6:	00a7      	lsls	r7, r4, #2
 800b6f8:	e003      	b.n	800b702 <__gethex+0xd6>
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	e7f5      	b.n	800b6ea <__gethex+0xbe>
 800b6fe:	2c00      	cmp	r4, #0
 800b700:	d1f8      	bne.n	800b6f4 <__gethex+0xc8>
 800b702:	2220      	movs	r2, #32
 800b704:	782b      	ldrb	r3, [r5, #0]
 800b706:	002e      	movs	r6, r5
 800b708:	4393      	bics	r3, r2
 800b70a:	2b50      	cmp	r3, #80	; 0x50
 800b70c:	d11d      	bne.n	800b74a <__gethex+0x11e>
 800b70e:	786b      	ldrb	r3, [r5, #1]
 800b710:	2b2b      	cmp	r3, #43	; 0x2b
 800b712:	d02c      	beq.n	800b76e <__gethex+0x142>
 800b714:	2b2d      	cmp	r3, #45	; 0x2d
 800b716:	d02e      	beq.n	800b776 <__gethex+0x14a>
 800b718:	2300      	movs	r3, #0
 800b71a:	1c6e      	adds	r6, r5, #1
 800b71c:	9306      	str	r3, [sp, #24]
 800b71e:	7830      	ldrb	r0, [r6, #0]
 800b720:	f7ff ff6e 	bl	800b600 <__hexdig_fun>
 800b724:	1e43      	subs	r3, r0, #1
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b18      	cmp	r3, #24
 800b72a:	d82b      	bhi.n	800b784 <__gethex+0x158>
 800b72c:	3810      	subs	r0, #16
 800b72e:	0004      	movs	r4, r0
 800b730:	7870      	ldrb	r0, [r6, #1]
 800b732:	f7ff ff65 	bl	800b600 <__hexdig_fun>
 800b736:	1e43      	subs	r3, r0, #1
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	3601      	adds	r6, #1
 800b73c:	2b18      	cmp	r3, #24
 800b73e:	d91c      	bls.n	800b77a <__gethex+0x14e>
 800b740:	9b06      	ldr	r3, [sp, #24]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d000      	beq.n	800b748 <__gethex+0x11c>
 800b746:	4264      	negs	r4, r4
 800b748:	193f      	adds	r7, r7, r4
 800b74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74c:	601e      	str	r6, [r3, #0]
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d019      	beq.n	800b788 <__gethex+0x15c>
 800b754:	2600      	movs	r6, #0
 800b756:	9b08      	ldr	r3, [sp, #32]
 800b758:	42b3      	cmp	r3, r6
 800b75a:	d100      	bne.n	800b75e <__gethex+0x132>
 800b75c:	3606      	adds	r6, #6
 800b75e:	0030      	movs	r0, r6
 800b760:	b00d      	add	sp, #52	; 0x34
 800b762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b764:	2301      	movs	r3, #1
 800b766:	2700      	movs	r7, #0
 800b768:	9d01      	ldr	r5, [sp, #4]
 800b76a:	9304      	str	r3, [sp, #16]
 800b76c:	e7c9      	b.n	800b702 <__gethex+0xd6>
 800b76e:	2300      	movs	r3, #0
 800b770:	9306      	str	r3, [sp, #24]
 800b772:	1cae      	adds	r6, r5, #2
 800b774:	e7d3      	b.n	800b71e <__gethex+0xf2>
 800b776:	2301      	movs	r3, #1
 800b778:	e7fa      	b.n	800b770 <__gethex+0x144>
 800b77a:	230a      	movs	r3, #10
 800b77c:	435c      	muls	r4, r3
 800b77e:	1824      	adds	r4, r4, r0
 800b780:	3c10      	subs	r4, #16
 800b782:	e7d5      	b.n	800b730 <__gethex+0x104>
 800b784:	002e      	movs	r6, r5
 800b786:	e7e0      	b.n	800b74a <__gethex+0x11e>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	9904      	ldr	r1, [sp, #16]
 800b78c:	1aeb      	subs	r3, r5, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	2b07      	cmp	r3, #7
 800b792:	dc0a      	bgt.n	800b7aa <__gethex+0x17e>
 800b794:	9805      	ldr	r0, [sp, #20]
 800b796:	f000 fa83 	bl	800bca0 <_Balloc>
 800b79a:	1e04      	subs	r4, r0, #0
 800b79c:	d108      	bne.n	800b7b0 <__gethex+0x184>
 800b79e:	0002      	movs	r2, r0
 800b7a0:	21de      	movs	r1, #222	; 0xde
 800b7a2:	4b64      	ldr	r3, [pc, #400]	; (800b934 <__gethex+0x308>)
 800b7a4:	4864      	ldr	r0, [pc, #400]	; (800b938 <__gethex+0x30c>)
 800b7a6:	f001 fc7d 	bl	800d0a4 <__assert_func>
 800b7aa:	3101      	adds	r1, #1
 800b7ac:	105b      	asrs	r3, r3, #1
 800b7ae:	e7ef      	b.n	800b790 <__gethex+0x164>
 800b7b0:	0003      	movs	r3, r0
 800b7b2:	3314      	adds	r3, #20
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	001e      	movs	r6, r3
 800b7bc:	9306      	str	r3, [sp, #24]
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	d340      	bcc.n	800b846 <__gethex+0x21a>
 800b7c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	c540      	stmia	r5!, {r6}
 800b7ca:	1aed      	subs	r5, r5, r3
 800b7cc:	10ad      	asrs	r5, r5, #2
 800b7ce:	0030      	movs	r0, r6
 800b7d0:	6125      	str	r5, [r4, #16]
 800b7d2:	f000 fb5d 	bl	800be90 <__hi0bits>
 800b7d6:	9b02      	ldr	r3, [sp, #8]
 800b7d8:	016d      	lsls	r5, r5, #5
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1a2e      	subs	r6, r5, r0
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	429e      	cmp	r6, r3
 800b7e2:	dd5a      	ble.n	800b89a <__gethex+0x26e>
 800b7e4:	1af6      	subs	r6, r6, r3
 800b7e6:	0031      	movs	r1, r6
 800b7e8:	0020      	movs	r0, r4
 800b7ea:	f000 feff 	bl	800c5ec <__any_on>
 800b7ee:	1e05      	subs	r5, r0, #0
 800b7f0:	d016      	beq.n	800b820 <__gethex+0x1f4>
 800b7f2:	2501      	movs	r5, #1
 800b7f4:	211f      	movs	r1, #31
 800b7f6:	0028      	movs	r0, r5
 800b7f8:	1e73      	subs	r3, r6, #1
 800b7fa:	4019      	ands	r1, r3
 800b7fc:	4088      	lsls	r0, r1
 800b7fe:	0001      	movs	r1, r0
 800b800:	115a      	asrs	r2, r3, #5
 800b802:	9804      	ldr	r0, [sp, #16]
 800b804:	0092      	lsls	r2, r2, #2
 800b806:	5812      	ldr	r2, [r2, r0]
 800b808:	420a      	tst	r2, r1
 800b80a:	d009      	beq.n	800b820 <__gethex+0x1f4>
 800b80c:	42ab      	cmp	r3, r5
 800b80e:	dd06      	ble.n	800b81e <__gethex+0x1f2>
 800b810:	0020      	movs	r0, r4
 800b812:	1eb1      	subs	r1, r6, #2
 800b814:	f000 feea 	bl	800c5ec <__any_on>
 800b818:	3502      	adds	r5, #2
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d100      	bne.n	800b820 <__gethex+0x1f4>
 800b81e:	2502      	movs	r5, #2
 800b820:	0031      	movs	r1, r6
 800b822:	0020      	movs	r0, r4
 800b824:	f7ff fe98 	bl	800b558 <rshift>
 800b828:	19bf      	adds	r7, r7, r6
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	42bb      	cmp	r3, r7
 800b832:	da42      	bge.n	800b8ba <__gethex+0x28e>
 800b834:	0021      	movs	r1, r4
 800b836:	9805      	ldr	r0, [sp, #20]
 800b838:	f000 fa76 	bl	800bd28 <_Bfree>
 800b83c:	2300      	movs	r3, #0
 800b83e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b840:	26a3      	movs	r6, #163	; 0xa3
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	e78b      	b.n	800b75e <__gethex+0x132>
 800b846:	1e6b      	subs	r3, r5, #1
 800b848:	9308      	str	r3, [sp, #32]
 800b84a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4293      	cmp	r3, r2
 800b850:	d014      	beq.n	800b87c <__gethex+0x250>
 800b852:	9b06      	ldr	r3, [sp, #24]
 800b854:	2b20      	cmp	r3, #32
 800b856:	d104      	bne.n	800b862 <__gethex+0x236>
 800b858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85a:	c340      	stmia	r3!, {r6}
 800b85c:	2600      	movs	r6, #0
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	9606      	str	r6, [sp, #24]
 800b862:	9b08      	ldr	r3, [sp, #32]
 800b864:	7818      	ldrb	r0, [r3, #0]
 800b866:	f7ff fecb 	bl	800b600 <__hexdig_fun>
 800b86a:	230f      	movs	r3, #15
 800b86c:	4018      	ands	r0, r3
 800b86e:	9b06      	ldr	r3, [sp, #24]
 800b870:	9d08      	ldr	r5, [sp, #32]
 800b872:	4098      	lsls	r0, r3
 800b874:	3304      	adds	r3, #4
 800b876:	4306      	orrs	r6, r0
 800b878:	9306      	str	r3, [sp, #24]
 800b87a:	e7a0      	b.n	800b7be <__gethex+0x192>
 800b87c:	2301      	movs	r3, #1
 800b87e:	9a03      	ldr	r2, [sp, #12]
 800b880:	1a9d      	subs	r5, r3, r2
 800b882:	9b08      	ldr	r3, [sp, #32]
 800b884:	195d      	adds	r5, r3, r5
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	429d      	cmp	r5, r3
 800b88a:	d3e2      	bcc.n	800b852 <__gethex+0x226>
 800b88c:	0028      	movs	r0, r5
 800b88e:	9907      	ldr	r1, [sp, #28]
 800b890:	f001 fb06 	bl	800cea0 <strncmp>
 800b894:	2800      	cmp	r0, #0
 800b896:	d1dc      	bne.n	800b852 <__gethex+0x226>
 800b898:	e791      	b.n	800b7be <__gethex+0x192>
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	2500      	movs	r5, #0
 800b89e:	429e      	cmp	r6, r3
 800b8a0:	dac3      	bge.n	800b82a <__gethex+0x1fe>
 800b8a2:	1b9e      	subs	r6, r3, r6
 800b8a4:	0021      	movs	r1, r4
 800b8a6:	0032      	movs	r2, r6
 800b8a8:	9805      	ldr	r0, [sp, #20]
 800b8aa:	f000 fc5b 	bl	800c164 <__lshift>
 800b8ae:	0003      	movs	r3, r0
 800b8b0:	3314      	adds	r3, #20
 800b8b2:	0004      	movs	r4, r0
 800b8b4:	1bbf      	subs	r7, r7, r6
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	e7b7      	b.n	800b82a <__gethex+0x1fe>
 800b8ba:	9b02      	ldr	r3, [sp, #8]
 800b8bc:	685e      	ldr	r6, [r3, #4]
 800b8be:	42be      	cmp	r6, r7
 800b8c0:	dd71      	ble.n	800b9a6 <__gethex+0x37a>
 800b8c2:	9b01      	ldr	r3, [sp, #4]
 800b8c4:	1bf6      	subs	r6, r6, r7
 800b8c6:	42b3      	cmp	r3, r6
 800b8c8:	dc38      	bgt.n	800b93c <__gethex+0x310>
 800b8ca:	9b02      	ldr	r3, [sp, #8]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d026      	beq.n	800b920 <__gethex+0x2f4>
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d028      	beq.n	800b928 <__gethex+0x2fc>
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d119      	bne.n	800b90e <__gethex+0x2e2>
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	42b3      	cmp	r3, r6
 800b8de:	d116      	bne.n	800b90e <__gethex+0x2e2>
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d10d      	bne.n	800b900 <__gethex+0x2d4>
 800b8e4:	9b02      	ldr	r3, [sp, #8]
 800b8e6:	2662      	movs	r6, #98	; 0x62
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	9a01      	ldr	r2, [sp, #4]
 800b8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	9a04      	ldr	r2, [sp, #16]
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8fc:	601c      	str	r4, [r3, #0]
 800b8fe:	e72e      	b.n	800b75e <__gethex+0x132>
 800b900:	9901      	ldr	r1, [sp, #4]
 800b902:	0020      	movs	r0, r4
 800b904:	3901      	subs	r1, #1
 800b906:	f000 fe71 	bl	800c5ec <__any_on>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d1ea      	bne.n	800b8e4 <__gethex+0x2b8>
 800b90e:	0021      	movs	r1, r4
 800b910:	9805      	ldr	r0, [sp, #20]
 800b912:	f000 fa09 	bl	800bd28 <_Bfree>
 800b916:	2300      	movs	r3, #0
 800b918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b91a:	2650      	movs	r6, #80	; 0x50
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e71e      	b.n	800b75e <__gethex+0x132>
 800b920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1f3      	bne.n	800b90e <__gethex+0x2e2>
 800b926:	e7dd      	b.n	800b8e4 <__gethex+0x2b8>
 800b928:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1da      	bne.n	800b8e4 <__gethex+0x2b8>
 800b92e:	e7ee      	b.n	800b90e <__gethex+0x2e2>
 800b930:	0800da0c 	.word	0x0800da0c
 800b934:	0800d930 	.word	0x0800d930
 800b938:	0800d9a4 	.word	0x0800d9a4
 800b93c:	1e77      	subs	r7, r6, #1
 800b93e:	2d00      	cmp	r5, #0
 800b940:	d12f      	bne.n	800b9a2 <__gethex+0x376>
 800b942:	2f00      	cmp	r7, #0
 800b944:	d004      	beq.n	800b950 <__gethex+0x324>
 800b946:	0039      	movs	r1, r7
 800b948:	0020      	movs	r0, r4
 800b94a:	f000 fe4f 	bl	800c5ec <__any_on>
 800b94e:	0005      	movs	r5, r0
 800b950:	231f      	movs	r3, #31
 800b952:	117a      	asrs	r2, r7, #5
 800b954:	401f      	ands	r7, r3
 800b956:	3b1e      	subs	r3, #30
 800b958:	40bb      	lsls	r3, r7
 800b95a:	9904      	ldr	r1, [sp, #16]
 800b95c:	0092      	lsls	r2, r2, #2
 800b95e:	5852      	ldr	r2, [r2, r1]
 800b960:	421a      	tst	r2, r3
 800b962:	d001      	beq.n	800b968 <__gethex+0x33c>
 800b964:	2302      	movs	r3, #2
 800b966:	431d      	orrs	r5, r3
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	0031      	movs	r1, r6
 800b96c:	1b9b      	subs	r3, r3, r6
 800b96e:	2602      	movs	r6, #2
 800b970:	0020      	movs	r0, r4
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	f7ff fdf0 	bl	800b558 <rshift>
 800b978:	9b02      	ldr	r3, [sp, #8]
 800b97a:	685f      	ldr	r7, [r3, #4]
 800b97c:	2d00      	cmp	r5, #0
 800b97e:	d041      	beq.n	800ba04 <__gethex+0x3d8>
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d010      	beq.n	800b9aa <__gethex+0x37e>
 800b988:	2b03      	cmp	r3, #3
 800b98a:	d012      	beq.n	800b9b2 <__gethex+0x386>
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d106      	bne.n	800b99e <__gethex+0x372>
 800b990:	07aa      	lsls	r2, r5, #30
 800b992:	d504      	bpl.n	800b99e <__gethex+0x372>
 800b994:	9a04      	ldr	r2, [sp, #16]
 800b996:	6810      	ldr	r0, [r2, #0]
 800b998:	4305      	orrs	r5, r0
 800b99a:	421d      	tst	r5, r3
 800b99c:	d10c      	bne.n	800b9b8 <__gethex+0x38c>
 800b99e:	2310      	movs	r3, #16
 800b9a0:	e02f      	b.n	800ba02 <__gethex+0x3d6>
 800b9a2:	2501      	movs	r5, #1
 800b9a4:	e7d4      	b.n	800b950 <__gethex+0x324>
 800b9a6:	2601      	movs	r6, #1
 800b9a8:	e7e8      	b.n	800b97c <__gethex+0x350>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9ae:	1a9b      	subs	r3, r3, r2
 800b9b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0f2      	beq.n	800b99e <__gethex+0x372>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	9303      	str	r3, [sp, #12]
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	0023      	movs	r3, r4
 800b9c4:	9a04      	ldr	r2, [sp, #16]
 800b9c6:	3314      	adds	r3, #20
 800b9c8:	1899      	adds	r1, r3, r2
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	1c55      	adds	r5, r2, #1
 800b9ce:	d01e      	beq.n	800ba0e <__gethex+0x3e2>
 800b9d0:	3201      	adds	r2, #1
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	0023      	movs	r3, r4
 800b9d6:	3314      	adds	r3, #20
 800b9d8:	2e02      	cmp	r6, #2
 800b9da:	d140      	bne.n	800ba5e <__gethex+0x432>
 800b9dc:	9a02      	ldr	r2, [sp, #8]
 800b9de:	9901      	ldr	r1, [sp, #4]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	3a01      	subs	r2, #1
 800b9e4:	428a      	cmp	r2, r1
 800b9e6:	d10b      	bne.n	800ba00 <__gethex+0x3d4>
 800b9e8:	114a      	asrs	r2, r1, #5
 800b9ea:	211f      	movs	r1, #31
 800b9ec:	9801      	ldr	r0, [sp, #4]
 800b9ee:	0092      	lsls	r2, r2, #2
 800b9f0:	4001      	ands	r1, r0
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	0005      	movs	r5, r0
 800b9f6:	408d      	lsls	r5, r1
 800b9f8:	58d3      	ldr	r3, [r2, r3]
 800b9fa:	422b      	tst	r3, r5
 800b9fc:	d000      	beq.n	800ba00 <__gethex+0x3d4>
 800b9fe:	2601      	movs	r6, #1
 800ba00:	2320      	movs	r3, #32
 800ba02:	431e      	orrs	r6, r3
 800ba04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba06:	601c      	str	r4, [r3, #0]
 800ba08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba0a:	601f      	str	r7, [r3, #0]
 800ba0c:	e6a7      	b.n	800b75e <__gethex+0x132>
 800ba0e:	c301      	stmia	r3!, {r0}
 800ba10:	4299      	cmp	r1, r3
 800ba12:	d8da      	bhi.n	800b9ca <__gethex+0x39e>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	68a2      	ldr	r2, [r4, #8]
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	db17      	blt.n	800ba4c <__gethex+0x420>
 800ba1c:	6863      	ldr	r3, [r4, #4]
 800ba1e:	9805      	ldr	r0, [sp, #20]
 800ba20:	1c59      	adds	r1, r3, #1
 800ba22:	f000 f93d 	bl	800bca0 <_Balloc>
 800ba26:	1e05      	subs	r5, r0, #0
 800ba28:	d103      	bne.n	800ba32 <__gethex+0x406>
 800ba2a:	0002      	movs	r2, r0
 800ba2c:	2184      	movs	r1, #132	; 0x84
 800ba2e:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <__gethex+0x474>)
 800ba30:	e6b8      	b.n	800b7a4 <__gethex+0x178>
 800ba32:	0021      	movs	r1, r4
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	310c      	adds	r1, #12
 800ba38:	1c9a      	adds	r2, r3, #2
 800ba3a:	0092      	lsls	r2, r2, #2
 800ba3c:	300c      	adds	r0, #12
 800ba3e:	f7fd f857 	bl	8008af0 <memcpy>
 800ba42:	0021      	movs	r1, r4
 800ba44:	9805      	ldr	r0, [sp, #20]
 800ba46:	f000 f96f 	bl	800bd28 <_Bfree>
 800ba4a:	002c      	movs	r4, r5
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	6122      	str	r2, [r4, #16]
 800ba52:	2201      	movs	r2, #1
 800ba54:	3304      	adds	r3, #4
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	18e3      	adds	r3, r4, r3
 800ba5a:	605a      	str	r2, [r3, #4]
 800ba5c:	e7ba      	b.n	800b9d4 <__gethex+0x3a8>
 800ba5e:	6922      	ldr	r2, [r4, #16]
 800ba60:	9903      	ldr	r1, [sp, #12]
 800ba62:	428a      	cmp	r2, r1
 800ba64:	dd09      	ble.n	800ba7a <__gethex+0x44e>
 800ba66:	2101      	movs	r1, #1
 800ba68:	0020      	movs	r0, r4
 800ba6a:	f7ff fd75 	bl	800b558 <rshift>
 800ba6e:	9b02      	ldr	r3, [sp, #8]
 800ba70:	3701      	adds	r7, #1
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	42bb      	cmp	r3, r7
 800ba76:	dac2      	bge.n	800b9fe <__gethex+0x3d2>
 800ba78:	e6dc      	b.n	800b834 <__gethex+0x208>
 800ba7a:	221f      	movs	r2, #31
 800ba7c:	9d01      	ldr	r5, [sp, #4]
 800ba7e:	9901      	ldr	r1, [sp, #4]
 800ba80:	2601      	movs	r6, #1
 800ba82:	4015      	ands	r5, r2
 800ba84:	4211      	tst	r1, r2
 800ba86:	d0bb      	beq.n	800ba00 <__gethex+0x3d4>
 800ba88:	9a04      	ldr	r2, [sp, #16]
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	3b04      	subs	r3, #4
 800ba8e:	6818      	ldr	r0, [r3, #0]
 800ba90:	f000 f9fe 	bl	800be90 <__hi0bits>
 800ba94:	2320      	movs	r3, #32
 800ba96:	1b5d      	subs	r5, r3, r5
 800ba98:	42a8      	cmp	r0, r5
 800ba9a:	dbe4      	blt.n	800ba66 <__gethex+0x43a>
 800ba9c:	e7b0      	b.n	800ba00 <__gethex+0x3d4>
 800ba9e:	46c0      	nop			; (mov r8, r8)
 800baa0:	0800d930 	.word	0x0800d930

0800baa4 <L_shift>:
 800baa4:	2308      	movs	r3, #8
 800baa6:	b570      	push	{r4, r5, r6, lr}
 800baa8:	2520      	movs	r5, #32
 800baaa:	1a9a      	subs	r2, r3, r2
 800baac:	0092      	lsls	r2, r2, #2
 800baae:	1aad      	subs	r5, r5, r2
 800bab0:	6843      	ldr	r3, [r0, #4]
 800bab2:	6806      	ldr	r6, [r0, #0]
 800bab4:	001c      	movs	r4, r3
 800bab6:	40ac      	lsls	r4, r5
 800bab8:	40d3      	lsrs	r3, r2
 800baba:	4334      	orrs	r4, r6
 800babc:	6004      	str	r4, [r0, #0]
 800babe:	6043      	str	r3, [r0, #4]
 800bac0:	3004      	adds	r0, #4
 800bac2:	4288      	cmp	r0, r1
 800bac4:	d3f4      	bcc.n	800bab0 <L_shift+0xc>
 800bac6:	bd70      	pop	{r4, r5, r6, pc}

0800bac8 <__match>:
 800bac8:	b530      	push	{r4, r5, lr}
 800baca:	6803      	ldr	r3, [r0, #0]
 800bacc:	780c      	ldrb	r4, [r1, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	2c00      	cmp	r4, #0
 800bad2:	d102      	bne.n	800bada <__match+0x12>
 800bad4:	6003      	str	r3, [r0, #0]
 800bad6:	2001      	movs	r0, #1
 800bad8:	bd30      	pop	{r4, r5, pc}
 800bada:	781a      	ldrb	r2, [r3, #0]
 800badc:	0015      	movs	r5, r2
 800bade:	3d41      	subs	r5, #65	; 0x41
 800bae0:	2d19      	cmp	r5, #25
 800bae2:	d800      	bhi.n	800bae6 <__match+0x1e>
 800bae4:	3220      	adds	r2, #32
 800bae6:	3101      	adds	r1, #1
 800bae8:	42a2      	cmp	r2, r4
 800baea:	d0ef      	beq.n	800bacc <__match+0x4>
 800baec:	2000      	movs	r0, #0
 800baee:	e7f3      	b.n	800bad8 <__match+0x10>

0800baf0 <__hexnan>:
 800baf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf2:	680b      	ldr	r3, [r1, #0]
 800baf4:	b08b      	sub	sp, #44	; 0x2c
 800baf6:	9201      	str	r2, [sp, #4]
 800baf8:	9901      	ldr	r1, [sp, #4]
 800bafa:	115a      	asrs	r2, r3, #5
 800bafc:	0092      	lsls	r2, r2, #2
 800bafe:	188a      	adds	r2, r1, r2
 800bb00:	9202      	str	r2, [sp, #8]
 800bb02:	0019      	movs	r1, r3
 800bb04:	221f      	movs	r2, #31
 800bb06:	4011      	ands	r1, r2
 800bb08:	9008      	str	r0, [sp, #32]
 800bb0a:	9106      	str	r1, [sp, #24]
 800bb0c:	4213      	tst	r3, r2
 800bb0e:	d002      	beq.n	800bb16 <__hexnan+0x26>
 800bb10:	9b02      	ldr	r3, [sp, #8]
 800bb12:	3304      	adds	r3, #4
 800bb14:	9302      	str	r3, [sp, #8]
 800bb16:	9b02      	ldr	r3, [sp, #8]
 800bb18:	2500      	movs	r5, #0
 800bb1a:	1f1e      	subs	r6, r3, #4
 800bb1c:	0037      	movs	r7, r6
 800bb1e:	0034      	movs	r4, r6
 800bb20:	9b08      	ldr	r3, [sp, #32]
 800bb22:	6035      	str	r5, [r6, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	9507      	str	r5, [sp, #28]
 800bb28:	9305      	str	r3, [sp, #20]
 800bb2a:	9503      	str	r5, [sp, #12]
 800bb2c:	9b05      	ldr	r3, [sp, #20]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	9309      	str	r3, [sp, #36]	; 0x24
 800bb32:	9b05      	ldr	r3, [sp, #20]
 800bb34:	785b      	ldrb	r3, [r3, #1]
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d028      	beq.n	800bb8e <__hexnan+0x9e>
 800bb3c:	9804      	ldr	r0, [sp, #16]
 800bb3e:	f7ff fd5f 	bl	800b600 <__hexdig_fun>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d154      	bne.n	800bbf0 <__hexnan+0x100>
 800bb46:	9b04      	ldr	r3, [sp, #16]
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d819      	bhi.n	800bb80 <__hexnan+0x90>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	9a07      	ldr	r2, [sp, #28]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	dd12      	ble.n	800bb7a <__hexnan+0x8a>
 800bb54:	42bc      	cmp	r4, r7
 800bb56:	d206      	bcs.n	800bb66 <__hexnan+0x76>
 800bb58:	2d07      	cmp	r5, #7
 800bb5a:	dc04      	bgt.n	800bb66 <__hexnan+0x76>
 800bb5c:	002a      	movs	r2, r5
 800bb5e:	0039      	movs	r1, r7
 800bb60:	0020      	movs	r0, r4
 800bb62:	f7ff ff9f 	bl	800baa4 <L_shift>
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	2508      	movs	r5, #8
 800bb6a:	429c      	cmp	r4, r3
 800bb6c:	d905      	bls.n	800bb7a <__hexnan+0x8a>
 800bb6e:	1f27      	subs	r7, r4, #4
 800bb70:	2500      	movs	r5, #0
 800bb72:	003c      	movs	r4, r7
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	603d      	str	r5, [r7, #0]
 800bb78:	9307      	str	r3, [sp, #28]
 800bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7c:	9305      	str	r3, [sp, #20]
 800bb7e:	e7d5      	b.n	800bb2c <__hexnan+0x3c>
 800bb80:	9b04      	ldr	r3, [sp, #16]
 800bb82:	2b29      	cmp	r3, #41	; 0x29
 800bb84:	d159      	bne.n	800bc3a <__hexnan+0x14a>
 800bb86:	9b05      	ldr	r3, [sp, #20]
 800bb88:	9a08      	ldr	r2, [sp, #32]
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d052      	beq.n	800bc3a <__hexnan+0x14a>
 800bb94:	42bc      	cmp	r4, r7
 800bb96:	d206      	bcs.n	800bba6 <__hexnan+0xb6>
 800bb98:	2d07      	cmp	r5, #7
 800bb9a:	dc04      	bgt.n	800bba6 <__hexnan+0xb6>
 800bb9c:	002a      	movs	r2, r5
 800bb9e:	0039      	movs	r1, r7
 800bba0:	0020      	movs	r0, r4
 800bba2:	f7ff ff7f 	bl	800baa4 <L_shift>
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	d935      	bls.n	800bc18 <__hexnan+0x128>
 800bbac:	001a      	movs	r2, r3
 800bbae:	0023      	movs	r3, r4
 800bbb0:	cb02      	ldmia	r3!, {r1}
 800bbb2:	c202      	stmia	r2!, {r1}
 800bbb4:	429e      	cmp	r6, r3
 800bbb6:	d2fb      	bcs.n	800bbb0 <__hexnan+0xc0>
 800bbb8:	9b02      	ldr	r3, [sp, #8]
 800bbba:	1c61      	adds	r1, r4, #1
 800bbbc:	1eda      	subs	r2, r3, #3
 800bbbe:	2304      	movs	r3, #4
 800bbc0:	4291      	cmp	r1, r2
 800bbc2:	d805      	bhi.n	800bbd0 <__hexnan+0xe0>
 800bbc4:	9b02      	ldr	r3, [sp, #8]
 800bbc6:	3b04      	subs	r3, #4
 800bbc8:	1b1b      	subs	r3, r3, r4
 800bbca:	089b      	lsrs	r3, r3, #2
 800bbcc:	3301      	adds	r3, #1
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	9a01      	ldr	r2, [sp, #4]
 800bbd2:	18d3      	adds	r3, r2, r3
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	c304      	stmia	r3!, {r2}
 800bbd8:	429e      	cmp	r6, r3
 800bbda:	d2fc      	bcs.n	800bbd6 <__hexnan+0xe6>
 800bbdc:	6833      	ldr	r3, [r6, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d104      	bne.n	800bbec <__hexnan+0xfc>
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	429e      	cmp	r6, r3
 800bbe6:	d126      	bne.n	800bc36 <__hexnan+0x146>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	6033      	str	r3, [r6, #0]
 800bbec:	2005      	movs	r0, #5
 800bbee:	e025      	b.n	800bc3c <__hexnan+0x14c>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	3501      	adds	r5, #1
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	9303      	str	r3, [sp, #12]
 800bbf8:	2d08      	cmp	r5, #8
 800bbfa:	dd06      	ble.n	800bc0a <__hexnan+0x11a>
 800bbfc:	9b01      	ldr	r3, [sp, #4]
 800bbfe:	429c      	cmp	r4, r3
 800bc00:	d9bb      	bls.n	800bb7a <__hexnan+0x8a>
 800bc02:	2300      	movs	r3, #0
 800bc04:	2501      	movs	r5, #1
 800bc06:	3c04      	subs	r4, #4
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	220f      	movs	r2, #15
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	4010      	ands	r0, r2
 800bc10:	011b      	lsls	r3, r3, #4
 800bc12:	4318      	orrs	r0, r3
 800bc14:	6020      	str	r0, [r4, #0]
 800bc16:	e7b0      	b.n	800bb7a <__hexnan+0x8a>
 800bc18:	9b06      	ldr	r3, [sp, #24]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0de      	beq.n	800bbdc <__hexnan+0xec>
 800bc1e:	2120      	movs	r1, #32
 800bc20:	9a06      	ldr	r2, [sp, #24]
 800bc22:	9b02      	ldr	r3, [sp, #8]
 800bc24:	1a89      	subs	r1, r1, r2
 800bc26:	2201      	movs	r2, #1
 800bc28:	4252      	negs	r2, r2
 800bc2a:	40ca      	lsrs	r2, r1
 800bc2c:	3b04      	subs	r3, #4
 800bc2e:	6819      	ldr	r1, [r3, #0]
 800bc30:	400a      	ands	r2, r1
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	e7d2      	b.n	800bbdc <__hexnan+0xec>
 800bc36:	3e04      	subs	r6, #4
 800bc38:	e7d0      	b.n	800bbdc <__hexnan+0xec>
 800bc3a:	2004      	movs	r0, #4
 800bc3c:	b00b      	add	sp, #44	; 0x2c
 800bc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc40 <_localeconv_r>:
 800bc40:	4800      	ldr	r0, [pc, #0]	; (800bc44 <_localeconv_r+0x4>)
 800bc42:	4770      	bx	lr
 800bc44:	20000188 	.word	0x20000188

0800bc48 <__retarget_lock_init_recursive>:
 800bc48:	4770      	bx	lr

0800bc4a <__retarget_lock_acquire_recursive>:
 800bc4a:	4770      	bx	lr

0800bc4c <__retarget_lock_release_recursive>:
 800bc4c:	4770      	bx	lr
	...

0800bc50 <malloc>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	4b03      	ldr	r3, [pc, #12]	; (800bc60 <malloc+0x10>)
 800bc54:	0001      	movs	r1, r0
 800bc56:	6818      	ldr	r0, [r3, #0]
 800bc58:	f000 fd84 	bl	800c764 <_malloc_r>
 800bc5c:	bd10      	pop	{r4, pc}
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	20000030 	.word	0x20000030

0800bc64 <__ascii_mbtowc>:
 800bc64:	b082      	sub	sp, #8
 800bc66:	2900      	cmp	r1, #0
 800bc68:	d100      	bne.n	800bc6c <__ascii_mbtowc+0x8>
 800bc6a:	a901      	add	r1, sp, #4
 800bc6c:	1e10      	subs	r0, r2, #0
 800bc6e:	d006      	beq.n	800bc7e <__ascii_mbtowc+0x1a>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d006      	beq.n	800bc82 <__ascii_mbtowc+0x1e>
 800bc74:	7813      	ldrb	r3, [r2, #0]
 800bc76:	600b      	str	r3, [r1, #0]
 800bc78:	7810      	ldrb	r0, [r2, #0]
 800bc7a:	1e43      	subs	r3, r0, #1
 800bc7c:	4198      	sbcs	r0, r3
 800bc7e:	b002      	add	sp, #8
 800bc80:	4770      	bx	lr
 800bc82:	2002      	movs	r0, #2
 800bc84:	4240      	negs	r0, r0
 800bc86:	e7fa      	b.n	800bc7e <__ascii_mbtowc+0x1a>

0800bc88 <memchr>:
 800bc88:	b2c9      	uxtb	r1, r1
 800bc8a:	1882      	adds	r2, r0, r2
 800bc8c:	4290      	cmp	r0, r2
 800bc8e:	d101      	bne.n	800bc94 <memchr+0xc>
 800bc90:	2000      	movs	r0, #0
 800bc92:	4770      	bx	lr
 800bc94:	7803      	ldrb	r3, [r0, #0]
 800bc96:	428b      	cmp	r3, r1
 800bc98:	d0fb      	beq.n	800bc92 <memchr+0xa>
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	e7f6      	b.n	800bc8c <memchr+0x4>
	...

0800bca0 <_Balloc>:
 800bca0:	b570      	push	{r4, r5, r6, lr}
 800bca2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bca4:	0006      	movs	r6, r0
 800bca6:	000c      	movs	r4, r1
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	d10e      	bne.n	800bcca <_Balloc+0x2a>
 800bcac:	2010      	movs	r0, #16
 800bcae:	f7ff ffcf 	bl	800bc50 <malloc>
 800bcb2:	1e02      	subs	r2, r0, #0
 800bcb4:	6270      	str	r0, [r6, #36]	; 0x24
 800bcb6:	d104      	bne.n	800bcc2 <_Balloc+0x22>
 800bcb8:	2166      	movs	r1, #102	; 0x66
 800bcba:	4b19      	ldr	r3, [pc, #100]	; (800bd20 <_Balloc+0x80>)
 800bcbc:	4819      	ldr	r0, [pc, #100]	; (800bd24 <_Balloc+0x84>)
 800bcbe:	f001 f9f1 	bl	800d0a4 <__assert_func>
 800bcc2:	6045      	str	r5, [r0, #4]
 800bcc4:	6085      	str	r5, [r0, #8]
 800bcc6:	6005      	str	r5, [r0, #0]
 800bcc8:	60c5      	str	r5, [r0, #12]
 800bcca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bccc:	68eb      	ldr	r3, [r5, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d013      	beq.n	800bcfa <_Balloc+0x5a>
 800bcd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bcd4:	00a2      	lsls	r2, r4, #2
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	189b      	adds	r3, r3, r2
 800bcda:	6818      	ldr	r0, [r3, #0]
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d118      	bne.n	800bd12 <_Balloc+0x72>
 800bce0:	2101      	movs	r1, #1
 800bce2:	000d      	movs	r5, r1
 800bce4:	40a5      	lsls	r5, r4
 800bce6:	1d6a      	adds	r2, r5, #5
 800bce8:	0030      	movs	r0, r6
 800bcea:	0092      	lsls	r2, r2, #2
 800bcec:	f000 fca1 	bl	800c632 <_calloc_r>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d00c      	beq.n	800bd0e <_Balloc+0x6e>
 800bcf4:	6044      	str	r4, [r0, #4]
 800bcf6:	6085      	str	r5, [r0, #8]
 800bcf8:	e00d      	b.n	800bd16 <_Balloc+0x76>
 800bcfa:	2221      	movs	r2, #33	; 0x21
 800bcfc:	2104      	movs	r1, #4
 800bcfe:	0030      	movs	r0, r6
 800bd00:	f000 fc97 	bl	800c632 <_calloc_r>
 800bd04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd06:	60e8      	str	r0, [r5, #12]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1e1      	bne.n	800bcd2 <_Balloc+0x32>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	6802      	ldr	r2, [r0, #0]
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	2300      	movs	r3, #0
 800bd18:	6103      	str	r3, [r0, #16]
 800bd1a:	60c3      	str	r3, [r0, #12]
 800bd1c:	e7f8      	b.n	800bd10 <_Balloc+0x70>
 800bd1e:	46c0      	nop			; (mov r8, r8)
 800bd20:	0800d8be 	.word	0x0800d8be
 800bd24:	0800da20 	.word	0x0800da20

0800bd28 <_Bfree>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd2c:	0005      	movs	r5, r0
 800bd2e:	000c      	movs	r4, r1
 800bd30:	2e00      	cmp	r6, #0
 800bd32:	d10e      	bne.n	800bd52 <_Bfree+0x2a>
 800bd34:	2010      	movs	r0, #16
 800bd36:	f7ff ff8b 	bl	800bc50 <malloc>
 800bd3a:	1e02      	subs	r2, r0, #0
 800bd3c:	6268      	str	r0, [r5, #36]	; 0x24
 800bd3e:	d104      	bne.n	800bd4a <_Bfree+0x22>
 800bd40:	218a      	movs	r1, #138	; 0x8a
 800bd42:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <_Bfree+0x40>)
 800bd44:	4809      	ldr	r0, [pc, #36]	; (800bd6c <_Bfree+0x44>)
 800bd46:	f001 f9ad 	bl	800d0a4 <__assert_func>
 800bd4a:	6046      	str	r6, [r0, #4]
 800bd4c:	6086      	str	r6, [r0, #8]
 800bd4e:	6006      	str	r6, [r0, #0]
 800bd50:	60c6      	str	r6, [r0, #12]
 800bd52:	2c00      	cmp	r4, #0
 800bd54:	d007      	beq.n	800bd66 <_Bfree+0x3e>
 800bd56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd58:	6862      	ldr	r2, [r4, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	0092      	lsls	r2, r2, #2
 800bd5e:	189b      	adds	r3, r3, r2
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	6022      	str	r2, [r4, #0]
 800bd64:	601c      	str	r4, [r3, #0]
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	0800d8be 	.word	0x0800d8be
 800bd6c:	0800da20 	.word	0x0800da20

0800bd70 <__multadd>:
 800bd70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd72:	000e      	movs	r6, r1
 800bd74:	9001      	str	r0, [sp, #4]
 800bd76:	000c      	movs	r4, r1
 800bd78:	001d      	movs	r5, r3
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	690f      	ldr	r7, [r1, #16]
 800bd7e:	3614      	adds	r6, #20
 800bd80:	6833      	ldr	r3, [r6, #0]
 800bd82:	3001      	adds	r0, #1
 800bd84:	b299      	uxth	r1, r3
 800bd86:	4351      	muls	r1, r2
 800bd88:	0c1b      	lsrs	r3, r3, #16
 800bd8a:	4353      	muls	r3, r2
 800bd8c:	1949      	adds	r1, r1, r5
 800bd8e:	0c0d      	lsrs	r5, r1, #16
 800bd90:	195b      	adds	r3, r3, r5
 800bd92:	0c1d      	lsrs	r5, r3, #16
 800bd94:	b289      	uxth	r1, r1
 800bd96:	041b      	lsls	r3, r3, #16
 800bd98:	185b      	adds	r3, r3, r1
 800bd9a:	c608      	stmia	r6!, {r3}
 800bd9c:	4287      	cmp	r7, r0
 800bd9e:	dcef      	bgt.n	800bd80 <__multadd+0x10>
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	d022      	beq.n	800bdea <__multadd+0x7a>
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	42bb      	cmp	r3, r7
 800bda8:	dc19      	bgt.n	800bdde <__multadd+0x6e>
 800bdaa:	6863      	ldr	r3, [r4, #4]
 800bdac:	9801      	ldr	r0, [sp, #4]
 800bdae:	1c59      	adds	r1, r3, #1
 800bdb0:	f7ff ff76 	bl	800bca0 <_Balloc>
 800bdb4:	1e06      	subs	r6, r0, #0
 800bdb6:	d105      	bne.n	800bdc4 <__multadd+0x54>
 800bdb8:	0002      	movs	r2, r0
 800bdba:	21b5      	movs	r1, #181	; 0xb5
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <__multadd+0x80>)
 800bdbe:	480d      	ldr	r0, [pc, #52]	; (800bdf4 <__multadd+0x84>)
 800bdc0:	f001 f970 	bl	800d0a4 <__assert_func>
 800bdc4:	0021      	movs	r1, r4
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	310c      	adds	r1, #12
 800bdca:	1c9a      	adds	r2, r3, #2
 800bdcc:	0092      	lsls	r2, r2, #2
 800bdce:	300c      	adds	r0, #12
 800bdd0:	f7fc fe8e 	bl	8008af0 <memcpy>
 800bdd4:	0021      	movs	r1, r4
 800bdd6:	9801      	ldr	r0, [sp, #4]
 800bdd8:	f7ff ffa6 	bl	800bd28 <_Bfree>
 800bddc:	0034      	movs	r4, r6
 800bdde:	1d3b      	adds	r3, r7, #4
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	18e3      	adds	r3, r4, r3
 800bde4:	605d      	str	r5, [r3, #4]
 800bde6:	1c7b      	adds	r3, r7, #1
 800bde8:	6123      	str	r3, [r4, #16]
 800bdea:	0020      	movs	r0, r4
 800bdec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdee:	46c0      	nop			; (mov r8, r8)
 800bdf0:	0800d930 	.word	0x0800d930
 800bdf4:	0800da20 	.word	0x0800da20

0800bdf8 <__s2b>:
 800bdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdfa:	0006      	movs	r6, r0
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	000c      	movs	r4, r1
 800be00:	3008      	adds	r0, #8
 800be02:	2109      	movs	r1, #9
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	0015      	movs	r5, r2
 800be08:	f7f4 fa24 	bl	8000254 <__divsi3>
 800be0c:	2301      	movs	r3, #1
 800be0e:	2100      	movs	r1, #0
 800be10:	4283      	cmp	r3, r0
 800be12:	db0a      	blt.n	800be2a <__s2b+0x32>
 800be14:	0030      	movs	r0, r6
 800be16:	f7ff ff43 	bl	800bca0 <_Balloc>
 800be1a:	1e01      	subs	r1, r0, #0
 800be1c:	d108      	bne.n	800be30 <__s2b+0x38>
 800be1e:	0002      	movs	r2, r0
 800be20:	4b19      	ldr	r3, [pc, #100]	; (800be88 <__s2b+0x90>)
 800be22:	481a      	ldr	r0, [pc, #104]	; (800be8c <__s2b+0x94>)
 800be24:	31ce      	adds	r1, #206	; 0xce
 800be26:	f001 f93d 	bl	800d0a4 <__assert_func>
 800be2a:	005b      	lsls	r3, r3, #1
 800be2c:	3101      	adds	r1, #1
 800be2e:	e7ef      	b.n	800be10 <__s2b+0x18>
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	6143      	str	r3, [r0, #20]
 800be34:	2301      	movs	r3, #1
 800be36:	6103      	str	r3, [r0, #16]
 800be38:	2d09      	cmp	r5, #9
 800be3a:	dd18      	ble.n	800be6e <__s2b+0x76>
 800be3c:	0023      	movs	r3, r4
 800be3e:	3309      	adds	r3, #9
 800be40:	001f      	movs	r7, r3
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	1964      	adds	r4, r4, r5
 800be46:	783b      	ldrb	r3, [r7, #0]
 800be48:	220a      	movs	r2, #10
 800be4a:	0030      	movs	r0, r6
 800be4c:	3b30      	subs	r3, #48	; 0x30
 800be4e:	f7ff ff8f 	bl	800bd70 <__multadd>
 800be52:	3701      	adds	r7, #1
 800be54:	0001      	movs	r1, r0
 800be56:	42a7      	cmp	r7, r4
 800be58:	d1f5      	bne.n	800be46 <__s2b+0x4e>
 800be5a:	002c      	movs	r4, r5
 800be5c:	9b00      	ldr	r3, [sp, #0]
 800be5e:	3c08      	subs	r4, #8
 800be60:	191c      	adds	r4, r3, r4
 800be62:	002f      	movs	r7, r5
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	429f      	cmp	r7, r3
 800be68:	db04      	blt.n	800be74 <__s2b+0x7c>
 800be6a:	0008      	movs	r0, r1
 800be6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be6e:	2509      	movs	r5, #9
 800be70:	340a      	adds	r4, #10
 800be72:	e7f6      	b.n	800be62 <__s2b+0x6a>
 800be74:	1b63      	subs	r3, r4, r5
 800be76:	5ddb      	ldrb	r3, [r3, r7]
 800be78:	220a      	movs	r2, #10
 800be7a:	0030      	movs	r0, r6
 800be7c:	3b30      	subs	r3, #48	; 0x30
 800be7e:	f7ff ff77 	bl	800bd70 <__multadd>
 800be82:	3701      	adds	r7, #1
 800be84:	0001      	movs	r1, r0
 800be86:	e7ed      	b.n	800be64 <__s2b+0x6c>
 800be88:	0800d930 	.word	0x0800d930
 800be8c:	0800da20 	.word	0x0800da20

0800be90 <__hi0bits>:
 800be90:	0003      	movs	r3, r0
 800be92:	0c02      	lsrs	r2, r0, #16
 800be94:	2000      	movs	r0, #0
 800be96:	4282      	cmp	r2, r0
 800be98:	d101      	bne.n	800be9e <__hi0bits+0xe>
 800be9a:	041b      	lsls	r3, r3, #16
 800be9c:	3010      	adds	r0, #16
 800be9e:	0e1a      	lsrs	r2, r3, #24
 800bea0:	d101      	bne.n	800bea6 <__hi0bits+0x16>
 800bea2:	3008      	adds	r0, #8
 800bea4:	021b      	lsls	r3, r3, #8
 800bea6:	0f1a      	lsrs	r2, r3, #28
 800bea8:	d101      	bne.n	800beae <__hi0bits+0x1e>
 800beaa:	3004      	adds	r0, #4
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	0f9a      	lsrs	r2, r3, #30
 800beb0:	d101      	bne.n	800beb6 <__hi0bits+0x26>
 800beb2:	3002      	adds	r0, #2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	db03      	blt.n	800bec2 <__hi0bits+0x32>
 800beba:	3001      	adds	r0, #1
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	d400      	bmi.n	800bec2 <__hi0bits+0x32>
 800bec0:	2020      	movs	r0, #32
 800bec2:	4770      	bx	lr

0800bec4 <__lo0bits>:
 800bec4:	6803      	ldr	r3, [r0, #0]
 800bec6:	0002      	movs	r2, r0
 800bec8:	2107      	movs	r1, #7
 800beca:	0018      	movs	r0, r3
 800becc:	4008      	ands	r0, r1
 800bece:	420b      	tst	r3, r1
 800bed0:	d00d      	beq.n	800beee <__lo0bits+0x2a>
 800bed2:	3906      	subs	r1, #6
 800bed4:	2000      	movs	r0, #0
 800bed6:	420b      	tst	r3, r1
 800bed8:	d105      	bne.n	800bee6 <__lo0bits+0x22>
 800beda:	3002      	adds	r0, #2
 800bedc:	4203      	tst	r3, r0
 800bede:	d003      	beq.n	800bee8 <__lo0bits+0x24>
 800bee0:	40cb      	lsrs	r3, r1
 800bee2:	0008      	movs	r0, r1
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	4770      	bx	lr
 800bee8:	089b      	lsrs	r3, r3, #2
 800beea:	6013      	str	r3, [r2, #0]
 800beec:	e7fb      	b.n	800bee6 <__lo0bits+0x22>
 800beee:	b299      	uxth	r1, r3
 800bef0:	2900      	cmp	r1, #0
 800bef2:	d101      	bne.n	800bef8 <__lo0bits+0x34>
 800bef4:	2010      	movs	r0, #16
 800bef6:	0c1b      	lsrs	r3, r3, #16
 800bef8:	b2d9      	uxtb	r1, r3
 800befa:	2900      	cmp	r1, #0
 800befc:	d101      	bne.n	800bf02 <__lo0bits+0x3e>
 800befe:	3008      	adds	r0, #8
 800bf00:	0a1b      	lsrs	r3, r3, #8
 800bf02:	0719      	lsls	r1, r3, #28
 800bf04:	d101      	bne.n	800bf0a <__lo0bits+0x46>
 800bf06:	3004      	adds	r0, #4
 800bf08:	091b      	lsrs	r3, r3, #4
 800bf0a:	0799      	lsls	r1, r3, #30
 800bf0c:	d101      	bne.n	800bf12 <__lo0bits+0x4e>
 800bf0e:	3002      	adds	r0, #2
 800bf10:	089b      	lsrs	r3, r3, #2
 800bf12:	07d9      	lsls	r1, r3, #31
 800bf14:	d4e9      	bmi.n	800beea <__lo0bits+0x26>
 800bf16:	3001      	adds	r0, #1
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	d1e6      	bne.n	800beea <__lo0bits+0x26>
 800bf1c:	2020      	movs	r0, #32
 800bf1e:	e7e2      	b.n	800bee6 <__lo0bits+0x22>

0800bf20 <__i2b>:
 800bf20:	b510      	push	{r4, lr}
 800bf22:	000c      	movs	r4, r1
 800bf24:	2101      	movs	r1, #1
 800bf26:	f7ff febb 	bl	800bca0 <_Balloc>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d106      	bne.n	800bf3c <__i2b+0x1c>
 800bf2e:	21a0      	movs	r1, #160	; 0xa0
 800bf30:	0002      	movs	r2, r0
 800bf32:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <__i2b+0x24>)
 800bf34:	4804      	ldr	r0, [pc, #16]	; (800bf48 <__i2b+0x28>)
 800bf36:	0049      	lsls	r1, r1, #1
 800bf38:	f001 f8b4 	bl	800d0a4 <__assert_func>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	6144      	str	r4, [r0, #20]
 800bf40:	6103      	str	r3, [r0, #16]
 800bf42:	bd10      	pop	{r4, pc}
 800bf44:	0800d930 	.word	0x0800d930
 800bf48:	0800da20 	.word	0x0800da20

0800bf4c <__multiply>:
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	690b      	ldr	r3, [r1, #16]
 800bf50:	0014      	movs	r4, r2
 800bf52:	6912      	ldr	r2, [r2, #16]
 800bf54:	000d      	movs	r5, r1
 800bf56:	b089      	sub	sp, #36	; 0x24
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	da01      	bge.n	800bf60 <__multiply+0x14>
 800bf5c:	0025      	movs	r5, r4
 800bf5e:	000c      	movs	r4, r1
 800bf60:	692f      	ldr	r7, [r5, #16]
 800bf62:	6926      	ldr	r6, [r4, #16]
 800bf64:	6869      	ldr	r1, [r5, #4]
 800bf66:	19bb      	adds	r3, r7, r6
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	68ab      	ldr	r3, [r5, #8]
 800bf6c:	19ba      	adds	r2, r7, r6
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	da00      	bge.n	800bf74 <__multiply+0x28>
 800bf72:	3101      	adds	r1, #1
 800bf74:	f7ff fe94 	bl	800bca0 <_Balloc>
 800bf78:	9001      	str	r0, [sp, #4]
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d106      	bne.n	800bf8c <__multiply+0x40>
 800bf7e:	215e      	movs	r1, #94	; 0x5e
 800bf80:	0002      	movs	r2, r0
 800bf82:	4b48      	ldr	r3, [pc, #288]	; (800c0a4 <__multiply+0x158>)
 800bf84:	4848      	ldr	r0, [pc, #288]	; (800c0a8 <__multiply+0x15c>)
 800bf86:	31ff      	adds	r1, #255	; 0xff
 800bf88:	f001 f88c 	bl	800d0a4 <__assert_func>
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	3314      	adds	r3, #20
 800bf92:	469c      	mov	ip, r3
 800bf94:	19bb      	adds	r3, r7, r6
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4463      	add	r3, ip
 800bf9a:	9303      	str	r3, [sp, #12]
 800bf9c:	4663      	mov	r3, ip
 800bf9e:	9903      	ldr	r1, [sp, #12]
 800bfa0:	428b      	cmp	r3, r1
 800bfa2:	d32c      	bcc.n	800bffe <__multiply+0xb2>
 800bfa4:	002b      	movs	r3, r5
 800bfa6:	0022      	movs	r2, r4
 800bfa8:	3314      	adds	r3, #20
 800bfaa:	00bf      	lsls	r7, r7, #2
 800bfac:	3214      	adds	r2, #20
 800bfae:	9306      	str	r3, [sp, #24]
 800bfb0:	00b6      	lsls	r6, r6, #2
 800bfb2:	19db      	adds	r3, r3, r7
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	1993      	adds	r3, r2, r6
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	2304      	movs	r3, #4
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	002b      	movs	r3, r5
 800bfc0:	9904      	ldr	r1, [sp, #16]
 800bfc2:	3315      	adds	r3, #21
 800bfc4:	9200      	str	r2, [sp, #0]
 800bfc6:	4299      	cmp	r1, r3
 800bfc8:	d305      	bcc.n	800bfd6 <__multiply+0x8a>
 800bfca:	1b4b      	subs	r3, r1, r5
 800bfcc:	3b15      	subs	r3, #21
 800bfce:	089b      	lsrs	r3, r3, #2
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	9b07      	ldr	r3, [sp, #28]
 800bfd8:	9a00      	ldr	r2, [sp, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d311      	bcc.n	800c002 <__multiply+0xb6>
 800bfde:	9b02      	ldr	r3, [sp, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dd06      	ble.n	800bff2 <__multiply+0xa6>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	3b04      	subs	r3, #4
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d053      	beq.n	800c09a <__multiply+0x14e>
 800bff2:	9b01      	ldr	r3, [sp, #4]
 800bff4:	9a02      	ldr	r2, [sp, #8]
 800bff6:	0018      	movs	r0, r3
 800bff8:	611a      	str	r2, [r3, #16]
 800bffa:	b009      	add	sp, #36	; 0x24
 800bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffe:	c304      	stmia	r3!, {r2}
 800c000:	e7cd      	b.n	800bf9e <__multiply+0x52>
 800c002:	9b00      	ldr	r3, [sp, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	b298      	uxth	r0, r3
 800c008:	2800      	cmp	r0, #0
 800c00a:	d01b      	beq.n	800c044 <__multiply+0xf8>
 800c00c:	4667      	mov	r7, ip
 800c00e:	2400      	movs	r4, #0
 800c010:	9e06      	ldr	r6, [sp, #24]
 800c012:	ce02      	ldmia	r6!, {r1}
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	b28b      	uxth	r3, r1
 800c018:	4343      	muls	r3, r0
 800c01a:	b292      	uxth	r2, r2
 800c01c:	189b      	adds	r3, r3, r2
 800c01e:	191b      	adds	r3, r3, r4
 800c020:	0c0c      	lsrs	r4, r1, #16
 800c022:	4344      	muls	r4, r0
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	0c11      	lsrs	r1, r2, #16
 800c028:	1861      	adds	r1, r4, r1
 800c02a:	0c1c      	lsrs	r4, r3, #16
 800c02c:	1909      	adds	r1, r1, r4
 800c02e:	0c0c      	lsrs	r4, r1, #16
 800c030:	b29b      	uxth	r3, r3
 800c032:	0409      	lsls	r1, r1, #16
 800c034:	430b      	orrs	r3, r1
 800c036:	c708      	stmia	r7!, {r3}
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	42b3      	cmp	r3, r6
 800c03c:	d8e9      	bhi.n	800c012 <__multiply+0xc6>
 800c03e:	4663      	mov	r3, ip
 800c040:	9a05      	ldr	r2, [sp, #20]
 800c042:	509c      	str	r4, [r3, r2]
 800c044:	9b00      	ldr	r3, [sp, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	0c1e      	lsrs	r6, r3, #16
 800c04a:	d020      	beq.n	800c08e <__multiply+0x142>
 800c04c:	4663      	mov	r3, ip
 800c04e:	002c      	movs	r4, r5
 800c050:	4660      	mov	r0, ip
 800c052:	2700      	movs	r7, #0
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3414      	adds	r4, #20
 800c058:	6822      	ldr	r2, [r4, #0]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	b291      	uxth	r1, r2
 800c05e:	4371      	muls	r1, r6
 800c060:	6802      	ldr	r2, [r0, #0]
 800c062:	0c12      	lsrs	r2, r2, #16
 800c064:	1889      	adds	r1, r1, r2
 800c066:	19cf      	adds	r7, r1, r7
 800c068:	0439      	lsls	r1, r7, #16
 800c06a:	430b      	orrs	r3, r1
 800c06c:	6003      	str	r3, [r0, #0]
 800c06e:	cc02      	ldmia	r4!, {r1}
 800c070:	6843      	ldr	r3, [r0, #4]
 800c072:	0c09      	lsrs	r1, r1, #16
 800c074:	4371      	muls	r1, r6
 800c076:	b29b      	uxth	r3, r3
 800c078:	0c3f      	lsrs	r7, r7, #16
 800c07a:	18cb      	adds	r3, r1, r3
 800c07c:	9a04      	ldr	r2, [sp, #16]
 800c07e:	19db      	adds	r3, r3, r7
 800c080:	0c1f      	lsrs	r7, r3, #16
 800c082:	3004      	adds	r0, #4
 800c084:	42a2      	cmp	r2, r4
 800c086:	d8e7      	bhi.n	800c058 <__multiply+0x10c>
 800c088:	4662      	mov	r2, ip
 800c08a:	9905      	ldr	r1, [sp, #20]
 800c08c:	5053      	str	r3, [r2, r1]
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	3304      	adds	r3, #4
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2304      	movs	r3, #4
 800c096:	449c      	add	ip, r3
 800c098:	e79d      	b.n	800bfd6 <__multiply+0x8a>
 800c09a:	9b02      	ldr	r3, [sp, #8]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	9302      	str	r3, [sp, #8]
 800c0a0:	e79d      	b.n	800bfde <__multiply+0x92>
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	0800d930 	.word	0x0800d930
 800c0a8:	0800da20 	.word	0x0800da20

0800c0ac <__pow5mult>:
 800c0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	0015      	movs	r5, r2
 800c0b2:	0007      	movs	r7, r0
 800c0b4:	000e      	movs	r6, r1
 800c0b6:	401a      	ands	r2, r3
 800c0b8:	421d      	tst	r5, r3
 800c0ba:	d008      	beq.n	800c0ce <__pow5mult+0x22>
 800c0bc:	4925      	ldr	r1, [pc, #148]	; (800c154 <__pow5mult+0xa8>)
 800c0be:	3a01      	subs	r2, #1
 800c0c0:	0092      	lsls	r2, r2, #2
 800c0c2:	5852      	ldr	r2, [r2, r1]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	0031      	movs	r1, r6
 800c0c8:	f7ff fe52 	bl	800bd70 <__multadd>
 800c0cc:	0006      	movs	r6, r0
 800c0ce:	10ad      	asrs	r5, r5, #2
 800c0d0:	d03d      	beq.n	800c14e <__pow5mult+0xa2>
 800c0d2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c0d4:	2c00      	cmp	r4, #0
 800c0d6:	d10f      	bne.n	800c0f8 <__pow5mult+0x4c>
 800c0d8:	2010      	movs	r0, #16
 800c0da:	f7ff fdb9 	bl	800bc50 <malloc>
 800c0de:	1e02      	subs	r2, r0, #0
 800c0e0:	6278      	str	r0, [r7, #36]	; 0x24
 800c0e2:	d105      	bne.n	800c0f0 <__pow5mult+0x44>
 800c0e4:	21d7      	movs	r1, #215	; 0xd7
 800c0e6:	4b1c      	ldr	r3, [pc, #112]	; (800c158 <__pow5mult+0xac>)
 800c0e8:	481c      	ldr	r0, [pc, #112]	; (800c15c <__pow5mult+0xb0>)
 800c0ea:	0049      	lsls	r1, r1, #1
 800c0ec:	f000 ffda 	bl	800d0a4 <__assert_func>
 800c0f0:	6044      	str	r4, [r0, #4]
 800c0f2:	6084      	str	r4, [r0, #8]
 800c0f4:	6004      	str	r4, [r0, #0]
 800c0f6:	60c4      	str	r4, [r0, #12]
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	689c      	ldr	r4, [r3, #8]
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	2c00      	cmp	r4, #0
 800c100:	d108      	bne.n	800c114 <__pow5mult+0x68>
 800c102:	0038      	movs	r0, r7
 800c104:	4916      	ldr	r1, [pc, #88]	; (800c160 <__pow5mult+0xb4>)
 800c106:	f7ff ff0b 	bl	800bf20 <__i2b>
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	0004      	movs	r4, r0
 800c10e:	6098      	str	r0, [r3, #8]
 800c110:	2300      	movs	r3, #0
 800c112:	6003      	str	r3, [r0, #0]
 800c114:	2301      	movs	r3, #1
 800c116:	421d      	tst	r5, r3
 800c118:	d00a      	beq.n	800c130 <__pow5mult+0x84>
 800c11a:	0031      	movs	r1, r6
 800c11c:	0022      	movs	r2, r4
 800c11e:	0038      	movs	r0, r7
 800c120:	f7ff ff14 	bl	800bf4c <__multiply>
 800c124:	0031      	movs	r1, r6
 800c126:	9001      	str	r0, [sp, #4]
 800c128:	0038      	movs	r0, r7
 800c12a:	f7ff fdfd 	bl	800bd28 <_Bfree>
 800c12e:	9e01      	ldr	r6, [sp, #4]
 800c130:	106d      	asrs	r5, r5, #1
 800c132:	d00c      	beq.n	800c14e <__pow5mult+0xa2>
 800c134:	6820      	ldr	r0, [r4, #0]
 800c136:	2800      	cmp	r0, #0
 800c138:	d107      	bne.n	800c14a <__pow5mult+0x9e>
 800c13a:	0022      	movs	r2, r4
 800c13c:	0021      	movs	r1, r4
 800c13e:	0038      	movs	r0, r7
 800c140:	f7ff ff04 	bl	800bf4c <__multiply>
 800c144:	2300      	movs	r3, #0
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	0004      	movs	r4, r0
 800c14c:	e7e2      	b.n	800c114 <__pow5mult+0x68>
 800c14e:	0030      	movs	r0, r6
 800c150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c152:	46c0      	nop			; (mov r8, r8)
 800c154:	0800db70 	.word	0x0800db70
 800c158:	0800d8be 	.word	0x0800d8be
 800c15c:	0800da20 	.word	0x0800da20
 800c160:	00000271 	.word	0x00000271

0800c164 <__lshift>:
 800c164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c166:	000c      	movs	r4, r1
 800c168:	0017      	movs	r7, r2
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	1155      	asrs	r5, r2, #5
 800c16e:	b087      	sub	sp, #28
 800c170:	18eb      	adds	r3, r5, r3
 800c172:	9302      	str	r3, [sp, #8]
 800c174:	3301      	adds	r3, #1
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	6849      	ldr	r1, [r1, #4]
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	9004      	str	r0, [sp, #16]
 800c17e:	9a01      	ldr	r2, [sp, #4]
 800c180:	4293      	cmp	r3, r2
 800c182:	db10      	blt.n	800c1a6 <__lshift+0x42>
 800c184:	9804      	ldr	r0, [sp, #16]
 800c186:	f7ff fd8b 	bl	800bca0 <_Balloc>
 800c18a:	2300      	movs	r3, #0
 800c18c:	0002      	movs	r2, r0
 800c18e:	0006      	movs	r6, r0
 800c190:	0019      	movs	r1, r3
 800c192:	3214      	adds	r2, #20
 800c194:	4298      	cmp	r0, r3
 800c196:	d10c      	bne.n	800c1b2 <__lshift+0x4e>
 800c198:	21da      	movs	r1, #218	; 0xda
 800c19a:	0002      	movs	r2, r0
 800c19c:	4b26      	ldr	r3, [pc, #152]	; (800c238 <__lshift+0xd4>)
 800c19e:	4827      	ldr	r0, [pc, #156]	; (800c23c <__lshift+0xd8>)
 800c1a0:	31ff      	adds	r1, #255	; 0xff
 800c1a2:	f000 ff7f 	bl	800d0a4 <__assert_func>
 800c1a6:	3101      	adds	r1, #1
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	e7e8      	b.n	800c17e <__lshift+0x1a>
 800c1ac:	0098      	lsls	r0, r3, #2
 800c1ae:	5011      	str	r1, [r2, r0]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	42ab      	cmp	r3, r5
 800c1b4:	dbfa      	blt.n	800c1ac <__lshift+0x48>
 800c1b6:	43eb      	mvns	r3, r5
 800c1b8:	17db      	asrs	r3, r3, #31
 800c1ba:	401d      	ands	r5, r3
 800c1bc:	211f      	movs	r1, #31
 800c1be:	0023      	movs	r3, r4
 800c1c0:	0038      	movs	r0, r7
 800c1c2:	00ad      	lsls	r5, r5, #2
 800c1c4:	1955      	adds	r5, r2, r5
 800c1c6:	6922      	ldr	r2, [r4, #16]
 800c1c8:	3314      	adds	r3, #20
 800c1ca:	0092      	lsls	r2, r2, #2
 800c1cc:	4008      	ands	r0, r1
 800c1ce:	4684      	mov	ip, r0
 800c1d0:	189a      	adds	r2, r3, r2
 800c1d2:	420f      	tst	r7, r1
 800c1d4:	d02a      	beq.n	800c22c <__lshift+0xc8>
 800c1d6:	3101      	adds	r1, #1
 800c1d8:	1a09      	subs	r1, r1, r0
 800c1da:	9105      	str	r1, [sp, #20]
 800c1dc:	2100      	movs	r1, #0
 800c1de:	9503      	str	r5, [sp, #12]
 800c1e0:	4667      	mov	r7, ip
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	40b8      	lsls	r0, r7
 800c1e6:	4301      	orrs	r1, r0
 800c1e8:	9803      	ldr	r0, [sp, #12]
 800c1ea:	c002      	stmia	r0!, {r1}
 800c1ec:	cb02      	ldmia	r3!, {r1}
 800c1ee:	9003      	str	r0, [sp, #12]
 800c1f0:	9805      	ldr	r0, [sp, #20]
 800c1f2:	40c1      	lsrs	r1, r0
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d8f3      	bhi.n	800c1e0 <__lshift+0x7c>
 800c1f8:	0020      	movs	r0, r4
 800c1fa:	3015      	adds	r0, #21
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	4282      	cmp	r2, r0
 800c200:	d304      	bcc.n	800c20c <__lshift+0xa8>
 800c202:	1b13      	subs	r3, r2, r4
 800c204:	3b15      	subs	r3, #21
 800c206:	089b      	lsrs	r3, r3, #2
 800c208:	3301      	adds	r3, #1
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	50e9      	str	r1, [r5, r3]
 800c20e:	2900      	cmp	r1, #0
 800c210:	d002      	beq.n	800c218 <__lshift+0xb4>
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	3302      	adds	r3, #2
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	9804      	ldr	r0, [sp, #16]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	0021      	movs	r1, r4
 800c220:	6133      	str	r3, [r6, #16]
 800c222:	f7ff fd81 	bl	800bd28 <_Bfree>
 800c226:	0030      	movs	r0, r6
 800c228:	b007      	add	sp, #28
 800c22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22c:	cb02      	ldmia	r3!, {r1}
 800c22e:	c502      	stmia	r5!, {r1}
 800c230:	429a      	cmp	r2, r3
 800c232:	d8fb      	bhi.n	800c22c <__lshift+0xc8>
 800c234:	e7f0      	b.n	800c218 <__lshift+0xb4>
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	0800d930 	.word	0x0800d930
 800c23c:	0800da20 	.word	0x0800da20

0800c240 <__mcmp>:
 800c240:	6902      	ldr	r2, [r0, #16]
 800c242:	690b      	ldr	r3, [r1, #16]
 800c244:	b530      	push	{r4, r5, lr}
 800c246:	0004      	movs	r4, r0
 800c248:	1ad0      	subs	r0, r2, r3
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d10d      	bne.n	800c26a <__mcmp+0x2a>
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	3414      	adds	r4, #20
 800c252:	3114      	adds	r1, #20
 800c254:	18e2      	adds	r2, r4, r3
 800c256:	18c9      	adds	r1, r1, r3
 800c258:	3a04      	subs	r2, #4
 800c25a:	3904      	subs	r1, #4
 800c25c:	6815      	ldr	r5, [r2, #0]
 800c25e:	680b      	ldr	r3, [r1, #0]
 800c260:	429d      	cmp	r5, r3
 800c262:	d003      	beq.n	800c26c <__mcmp+0x2c>
 800c264:	2001      	movs	r0, #1
 800c266:	429d      	cmp	r5, r3
 800c268:	d303      	bcc.n	800c272 <__mcmp+0x32>
 800c26a:	bd30      	pop	{r4, r5, pc}
 800c26c:	4294      	cmp	r4, r2
 800c26e:	d3f3      	bcc.n	800c258 <__mcmp+0x18>
 800c270:	e7fb      	b.n	800c26a <__mcmp+0x2a>
 800c272:	4240      	negs	r0, r0
 800c274:	e7f9      	b.n	800c26a <__mcmp+0x2a>
	...

0800c278 <__mdiff>:
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	000e      	movs	r6, r1
 800c27c:	0007      	movs	r7, r0
 800c27e:	0011      	movs	r1, r2
 800c280:	0030      	movs	r0, r6
 800c282:	b087      	sub	sp, #28
 800c284:	0014      	movs	r4, r2
 800c286:	f7ff ffdb 	bl	800c240 <__mcmp>
 800c28a:	1e05      	subs	r5, r0, #0
 800c28c:	d110      	bne.n	800c2b0 <__mdiff+0x38>
 800c28e:	0001      	movs	r1, r0
 800c290:	0038      	movs	r0, r7
 800c292:	f7ff fd05 	bl	800bca0 <_Balloc>
 800c296:	1e02      	subs	r2, r0, #0
 800c298:	d104      	bne.n	800c2a4 <__mdiff+0x2c>
 800c29a:	4b40      	ldr	r3, [pc, #256]	; (800c39c <__mdiff+0x124>)
 800c29c:	4940      	ldr	r1, [pc, #256]	; (800c3a0 <__mdiff+0x128>)
 800c29e:	4841      	ldr	r0, [pc, #260]	; (800c3a4 <__mdiff+0x12c>)
 800c2a0:	f000 ff00 	bl	800d0a4 <__assert_func>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	6145      	str	r5, [r0, #20]
 800c2a8:	6103      	str	r3, [r0, #16]
 800c2aa:	0010      	movs	r0, r2
 800c2ac:	b007      	add	sp, #28
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	db04      	blt.n	800c2c2 <__mdiff+0x4a>
 800c2b8:	0023      	movs	r3, r4
 800c2ba:	0034      	movs	r4, r6
 800c2bc:	001e      	movs	r6, r3
 800c2be:	2300      	movs	r3, #0
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	0038      	movs	r0, r7
 800c2c4:	6861      	ldr	r1, [r4, #4]
 800c2c6:	f7ff fceb 	bl	800bca0 <_Balloc>
 800c2ca:	1e02      	subs	r2, r0, #0
 800c2cc:	d103      	bne.n	800c2d6 <__mdiff+0x5e>
 800c2ce:	2190      	movs	r1, #144	; 0x90
 800c2d0:	4b32      	ldr	r3, [pc, #200]	; (800c39c <__mdiff+0x124>)
 800c2d2:	0089      	lsls	r1, r1, #2
 800c2d4:	e7e3      	b.n	800c29e <__mdiff+0x26>
 800c2d6:	9b01      	ldr	r3, [sp, #4]
 800c2d8:	2700      	movs	r7, #0
 800c2da:	60c3      	str	r3, [r0, #12]
 800c2dc:	6920      	ldr	r0, [r4, #16]
 800c2de:	3414      	adds	r4, #20
 800c2e0:	9401      	str	r4, [sp, #4]
 800c2e2:	9b01      	ldr	r3, [sp, #4]
 800c2e4:	0084      	lsls	r4, r0, #2
 800c2e6:	191b      	adds	r3, r3, r4
 800c2e8:	0034      	movs	r4, r6
 800c2ea:	9302      	str	r3, [sp, #8]
 800c2ec:	6933      	ldr	r3, [r6, #16]
 800c2ee:	3414      	adds	r4, #20
 800c2f0:	0099      	lsls	r1, r3, #2
 800c2f2:	1863      	adds	r3, r4, r1
 800c2f4:	9303      	str	r3, [sp, #12]
 800c2f6:	0013      	movs	r3, r2
 800c2f8:	3314      	adds	r3, #20
 800c2fa:	469c      	mov	ip, r3
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	9b01      	ldr	r3, [sp, #4]
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	9b04      	ldr	r3, [sp, #16]
 800c304:	cc02      	ldmia	r4!, {r1}
 800c306:	cb20      	ldmia	r3!, {r5}
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	b2ab      	uxth	r3, r5
 800c30c:	19df      	adds	r7, r3, r7
 800c30e:	b28b      	uxth	r3, r1
 800c310:	1afb      	subs	r3, r7, r3
 800c312:	0c09      	lsrs	r1, r1, #16
 800c314:	0c2d      	lsrs	r5, r5, #16
 800c316:	1a6d      	subs	r5, r5, r1
 800c318:	1419      	asrs	r1, r3, #16
 800c31a:	186d      	adds	r5, r5, r1
 800c31c:	4661      	mov	r1, ip
 800c31e:	142f      	asrs	r7, r5, #16
 800c320:	b29b      	uxth	r3, r3
 800c322:	042d      	lsls	r5, r5, #16
 800c324:	432b      	orrs	r3, r5
 800c326:	c108      	stmia	r1!, {r3}
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	468c      	mov	ip, r1
 800c32c:	42a3      	cmp	r3, r4
 800c32e:	d8e8      	bhi.n	800c302 <__mdiff+0x8a>
 800c330:	0031      	movs	r1, r6
 800c332:	9c03      	ldr	r4, [sp, #12]
 800c334:	3115      	adds	r1, #21
 800c336:	2304      	movs	r3, #4
 800c338:	428c      	cmp	r4, r1
 800c33a:	d304      	bcc.n	800c346 <__mdiff+0xce>
 800c33c:	1ba3      	subs	r3, r4, r6
 800c33e:	3b15      	subs	r3, #21
 800c340:	089b      	lsrs	r3, r3, #2
 800c342:	3301      	adds	r3, #1
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	9901      	ldr	r1, [sp, #4]
 800c348:	18cc      	adds	r4, r1, r3
 800c34a:	9905      	ldr	r1, [sp, #20]
 800c34c:	0026      	movs	r6, r4
 800c34e:	18cb      	adds	r3, r1, r3
 800c350:	469c      	mov	ip, r3
 800c352:	9902      	ldr	r1, [sp, #8]
 800c354:	428e      	cmp	r6, r1
 800c356:	d310      	bcc.n	800c37a <__mdiff+0x102>
 800c358:	9e02      	ldr	r6, [sp, #8]
 800c35a:	1ee1      	subs	r1, r4, #3
 800c35c:	2500      	movs	r5, #0
 800c35e:	428e      	cmp	r6, r1
 800c360:	d304      	bcc.n	800c36c <__mdiff+0xf4>
 800c362:	0031      	movs	r1, r6
 800c364:	3103      	adds	r1, #3
 800c366:	1b0c      	subs	r4, r1, r4
 800c368:	08a4      	lsrs	r4, r4, #2
 800c36a:	00a5      	lsls	r5, r4, #2
 800c36c:	195b      	adds	r3, r3, r5
 800c36e:	3b04      	subs	r3, #4
 800c370:	6819      	ldr	r1, [r3, #0]
 800c372:	2900      	cmp	r1, #0
 800c374:	d00f      	beq.n	800c396 <__mdiff+0x11e>
 800c376:	6110      	str	r0, [r2, #16]
 800c378:	e797      	b.n	800c2aa <__mdiff+0x32>
 800c37a:	ce02      	ldmia	r6!, {r1}
 800c37c:	b28d      	uxth	r5, r1
 800c37e:	19ed      	adds	r5, r5, r7
 800c380:	0c0f      	lsrs	r7, r1, #16
 800c382:	1429      	asrs	r1, r5, #16
 800c384:	1879      	adds	r1, r7, r1
 800c386:	140f      	asrs	r7, r1, #16
 800c388:	b2ad      	uxth	r5, r5
 800c38a:	0409      	lsls	r1, r1, #16
 800c38c:	430d      	orrs	r5, r1
 800c38e:	4661      	mov	r1, ip
 800c390:	c120      	stmia	r1!, {r5}
 800c392:	468c      	mov	ip, r1
 800c394:	e7dd      	b.n	800c352 <__mdiff+0xda>
 800c396:	3801      	subs	r0, #1
 800c398:	e7e9      	b.n	800c36e <__mdiff+0xf6>
 800c39a:	46c0      	nop			; (mov r8, r8)
 800c39c:	0800d930 	.word	0x0800d930
 800c3a0:	00000232 	.word	0x00000232
 800c3a4:	0800da20 	.word	0x0800da20

0800c3a8 <__ulp>:
 800c3a8:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <__ulp+0x40>)
 800c3aa:	4019      	ands	r1, r3
 800c3ac:	4b0f      	ldr	r3, [pc, #60]	; (800c3ec <__ulp+0x44>)
 800c3ae:	18c9      	adds	r1, r1, r3
 800c3b0:	2900      	cmp	r1, #0
 800c3b2:	dd04      	ble.n	800c3be <__ulp+0x16>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	000b      	movs	r3, r1
 800c3b8:	0010      	movs	r0, r2
 800c3ba:	0019      	movs	r1, r3
 800c3bc:	4770      	bx	lr
 800c3be:	4249      	negs	r1, r1
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	1509      	asrs	r1, r1, #20
 800c3c6:	2913      	cmp	r1, #19
 800c3c8:	dc04      	bgt.n	800c3d4 <__ulp+0x2c>
 800c3ca:	2080      	movs	r0, #128	; 0x80
 800c3cc:	0300      	lsls	r0, r0, #12
 800c3ce:	4108      	asrs	r0, r1
 800c3d0:	0003      	movs	r3, r0
 800c3d2:	e7f1      	b.n	800c3b8 <__ulp+0x10>
 800c3d4:	3914      	subs	r1, #20
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	291e      	cmp	r1, #30
 800c3da:	dc02      	bgt.n	800c3e2 <__ulp+0x3a>
 800c3dc:	2080      	movs	r0, #128	; 0x80
 800c3de:	0600      	lsls	r0, r0, #24
 800c3e0:	40c8      	lsrs	r0, r1
 800c3e2:	0002      	movs	r2, r0
 800c3e4:	e7e8      	b.n	800c3b8 <__ulp+0x10>
 800c3e6:	46c0      	nop			; (mov r8, r8)
 800c3e8:	7ff00000 	.word	0x7ff00000
 800c3ec:	fcc00000 	.word	0xfcc00000

0800c3f0 <__b2d>:
 800c3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3f2:	0006      	movs	r6, r0
 800c3f4:	6903      	ldr	r3, [r0, #16]
 800c3f6:	3614      	adds	r6, #20
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	18f3      	adds	r3, r6, r3
 800c3fc:	1f1d      	subs	r5, r3, #4
 800c3fe:	682c      	ldr	r4, [r5, #0]
 800c400:	000f      	movs	r7, r1
 800c402:	0020      	movs	r0, r4
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	f7ff fd43 	bl	800be90 <__hi0bits>
 800c40a:	2320      	movs	r3, #32
 800c40c:	1a1b      	subs	r3, r3, r0
 800c40e:	491f      	ldr	r1, [pc, #124]	; (800c48c <__b2d+0x9c>)
 800c410:	603b      	str	r3, [r7, #0]
 800c412:	280a      	cmp	r0, #10
 800c414:	dc16      	bgt.n	800c444 <__b2d+0x54>
 800c416:	230b      	movs	r3, #11
 800c418:	0027      	movs	r7, r4
 800c41a:	1a1b      	subs	r3, r3, r0
 800c41c:	40df      	lsrs	r7, r3
 800c41e:	4339      	orrs	r1, r7
 800c420:	469c      	mov	ip, r3
 800c422:	000b      	movs	r3, r1
 800c424:	2100      	movs	r1, #0
 800c426:	42ae      	cmp	r6, r5
 800c428:	d202      	bcs.n	800c430 <__b2d+0x40>
 800c42a:	9901      	ldr	r1, [sp, #4]
 800c42c:	3908      	subs	r1, #8
 800c42e:	6809      	ldr	r1, [r1, #0]
 800c430:	3015      	adds	r0, #21
 800c432:	4084      	lsls	r4, r0
 800c434:	4660      	mov	r0, ip
 800c436:	40c1      	lsrs	r1, r0
 800c438:	430c      	orrs	r4, r1
 800c43a:	0022      	movs	r2, r4
 800c43c:	0010      	movs	r0, r2
 800c43e:	0019      	movs	r1, r3
 800c440:	b003      	add	sp, #12
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	2700      	movs	r7, #0
 800c446:	42ae      	cmp	r6, r5
 800c448:	d202      	bcs.n	800c450 <__b2d+0x60>
 800c44a:	9d01      	ldr	r5, [sp, #4]
 800c44c:	3d08      	subs	r5, #8
 800c44e:	682f      	ldr	r7, [r5, #0]
 800c450:	230b      	movs	r3, #11
 800c452:	425b      	negs	r3, r3
 800c454:	469c      	mov	ip, r3
 800c456:	4484      	add	ip, r0
 800c458:	280b      	cmp	r0, #11
 800c45a:	d013      	beq.n	800c484 <__b2d+0x94>
 800c45c:	4663      	mov	r3, ip
 800c45e:	2020      	movs	r0, #32
 800c460:	409c      	lsls	r4, r3
 800c462:	1ac0      	subs	r0, r0, r3
 800c464:	003b      	movs	r3, r7
 800c466:	40c3      	lsrs	r3, r0
 800c468:	431c      	orrs	r4, r3
 800c46a:	4321      	orrs	r1, r4
 800c46c:	000b      	movs	r3, r1
 800c46e:	2100      	movs	r1, #0
 800c470:	42b5      	cmp	r5, r6
 800c472:	d901      	bls.n	800c478 <__b2d+0x88>
 800c474:	3d04      	subs	r5, #4
 800c476:	6829      	ldr	r1, [r5, #0]
 800c478:	4664      	mov	r4, ip
 800c47a:	40c1      	lsrs	r1, r0
 800c47c:	40a7      	lsls	r7, r4
 800c47e:	430f      	orrs	r7, r1
 800c480:	003a      	movs	r2, r7
 800c482:	e7db      	b.n	800c43c <__b2d+0x4c>
 800c484:	4321      	orrs	r1, r4
 800c486:	000b      	movs	r3, r1
 800c488:	e7fa      	b.n	800c480 <__b2d+0x90>
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	3ff00000 	.word	0x3ff00000

0800c490 <__d2b>:
 800c490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c492:	2101      	movs	r1, #1
 800c494:	0014      	movs	r4, r2
 800c496:	001e      	movs	r6, r3
 800c498:	9f08      	ldr	r7, [sp, #32]
 800c49a:	f7ff fc01 	bl	800bca0 <_Balloc>
 800c49e:	1e05      	subs	r5, r0, #0
 800c4a0:	d105      	bne.n	800c4ae <__d2b+0x1e>
 800c4a2:	0002      	movs	r2, r0
 800c4a4:	4b26      	ldr	r3, [pc, #152]	; (800c540 <__d2b+0xb0>)
 800c4a6:	4927      	ldr	r1, [pc, #156]	; (800c544 <__d2b+0xb4>)
 800c4a8:	4827      	ldr	r0, [pc, #156]	; (800c548 <__d2b+0xb8>)
 800c4aa:	f000 fdfb 	bl	800d0a4 <__assert_func>
 800c4ae:	0333      	lsls	r3, r6, #12
 800c4b0:	0076      	lsls	r6, r6, #1
 800c4b2:	0b1b      	lsrs	r3, r3, #12
 800c4b4:	0d76      	lsrs	r6, r6, #21
 800c4b6:	d124      	bne.n	800c502 <__d2b+0x72>
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	2c00      	cmp	r4, #0
 800c4bc:	d027      	beq.n	800c50e <__d2b+0x7e>
 800c4be:	4668      	mov	r0, sp
 800c4c0:	9400      	str	r4, [sp, #0]
 800c4c2:	f7ff fcff 	bl	800bec4 <__lo0bits>
 800c4c6:	9c00      	ldr	r4, [sp, #0]
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d01e      	beq.n	800c50a <__d2b+0x7a>
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	2120      	movs	r1, #32
 800c4d0:	001a      	movs	r2, r3
 800c4d2:	1a09      	subs	r1, r1, r0
 800c4d4:	408a      	lsls	r2, r1
 800c4d6:	40c3      	lsrs	r3, r0
 800c4d8:	4322      	orrs	r2, r4
 800c4da:	616a      	str	r2, [r5, #20]
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	9c01      	ldr	r4, [sp, #4]
 800c4e0:	61ac      	str	r4, [r5, #24]
 800c4e2:	1e63      	subs	r3, r4, #1
 800c4e4:	419c      	sbcs	r4, r3
 800c4e6:	3401      	adds	r4, #1
 800c4e8:	612c      	str	r4, [r5, #16]
 800c4ea:	2e00      	cmp	r6, #0
 800c4ec:	d018      	beq.n	800c520 <__d2b+0x90>
 800c4ee:	4b17      	ldr	r3, [pc, #92]	; (800c54c <__d2b+0xbc>)
 800c4f0:	18f6      	adds	r6, r6, r3
 800c4f2:	2335      	movs	r3, #53	; 0x35
 800c4f4:	1836      	adds	r6, r6, r0
 800c4f6:	1a18      	subs	r0, r3, r0
 800c4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fa:	603e      	str	r6, [r7, #0]
 800c4fc:	6018      	str	r0, [r3, #0]
 800c4fe:	0028      	movs	r0, r5
 800c500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c502:	2280      	movs	r2, #128	; 0x80
 800c504:	0352      	lsls	r2, r2, #13
 800c506:	4313      	orrs	r3, r2
 800c508:	e7d6      	b.n	800c4b8 <__d2b+0x28>
 800c50a:	616c      	str	r4, [r5, #20]
 800c50c:	e7e7      	b.n	800c4de <__d2b+0x4e>
 800c50e:	a801      	add	r0, sp, #4
 800c510:	f7ff fcd8 	bl	800bec4 <__lo0bits>
 800c514:	2401      	movs	r4, #1
 800c516:	9b01      	ldr	r3, [sp, #4]
 800c518:	612c      	str	r4, [r5, #16]
 800c51a:	616b      	str	r3, [r5, #20]
 800c51c:	3020      	adds	r0, #32
 800c51e:	e7e4      	b.n	800c4ea <__d2b+0x5a>
 800c520:	4b0b      	ldr	r3, [pc, #44]	; (800c550 <__d2b+0xc0>)
 800c522:	18c0      	adds	r0, r0, r3
 800c524:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <__d2b+0xc4>)
 800c526:	6038      	str	r0, [r7, #0]
 800c528:	18e3      	adds	r3, r4, r3
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	18eb      	adds	r3, r5, r3
 800c52e:	6958      	ldr	r0, [r3, #20]
 800c530:	f7ff fcae 	bl	800be90 <__hi0bits>
 800c534:	0164      	lsls	r4, r4, #5
 800c536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c538:	1a24      	subs	r4, r4, r0
 800c53a:	601c      	str	r4, [r3, #0]
 800c53c:	e7df      	b.n	800c4fe <__d2b+0x6e>
 800c53e:	46c0      	nop			; (mov r8, r8)
 800c540:	0800d930 	.word	0x0800d930
 800c544:	0000030a 	.word	0x0000030a
 800c548:	0800da20 	.word	0x0800da20
 800c54c:	fffffbcd 	.word	0xfffffbcd
 800c550:	fffffbce 	.word	0xfffffbce
 800c554:	3fffffff 	.word	0x3fffffff

0800c558 <__ratio>:
 800c558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55a:	b087      	sub	sp, #28
 800c55c:	000f      	movs	r7, r1
 800c55e:	a904      	add	r1, sp, #16
 800c560:	0006      	movs	r6, r0
 800c562:	f7ff ff45 	bl	800c3f0 <__b2d>
 800c566:	9000      	str	r0, [sp, #0]
 800c568:	9101      	str	r1, [sp, #4]
 800c56a:	9c00      	ldr	r4, [sp, #0]
 800c56c:	9d01      	ldr	r5, [sp, #4]
 800c56e:	0038      	movs	r0, r7
 800c570:	a905      	add	r1, sp, #20
 800c572:	f7ff ff3d 	bl	800c3f0 <__b2d>
 800c576:	9002      	str	r0, [sp, #8]
 800c578:	9103      	str	r1, [sp, #12]
 800c57a:	9a02      	ldr	r2, [sp, #8]
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	6931      	ldr	r1, [r6, #16]
 800c580:	6938      	ldr	r0, [r7, #16]
 800c582:	9e05      	ldr	r6, [sp, #20]
 800c584:	1a08      	subs	r0, r1, r0
 800c586:	9904      	ldr	r1, [sp, #16]
 800c588:	0140      	lsls	r0, r0, #5
 800c58a:	1b89      	subs	r1, r1, r6
 800c58c:	1841      	adds	r1, r0, r1
 800c58e:	0508      	lsls	r0, r1, #20
 800c590:	2900      	cmp	r1, #0
 800c592:	dd07      	ble.n	800c5a4 <__ratio+0x4c>
 800c594:	9901      	ldr	r1, [sp, #4]
 800c596:	1845      	adds	r5, r0, r1
 800c598:	0020      	movs	r0, r4
 800c59a:	0029      	movs	r1, r5
 800c59c:	f7f4 fe62 	bl	8001264 <__aeabi_ddiv>
 800c5a0:	b007      	add	sp, #28
 800c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a4:	9903      	ldr	r1, [sp, #12]
 800c5a6:	1a0b      	subs	r3, r1, r0
 800c5a8:	e7f6      	b.n	800c598 <__ratio+0x40>

0800c5aa <__copybits>:
 800c5aa:	b570      	push	{r4, r5, r6, lr}
 800c5ac:	0014      	movs	r4, r2
 800c5ae:	0005      	movs	r5, r0
 800c5b0:	3901      	subs	r1, #1
 800c5b2:	6913      	ldr	r3, [r2, #16]
 800c5b4:	1149      	asrs	r1, r1, #5
 800c5b6:	3101      	adds	r1, #1
 800c5b8:	0089      	lsls	r1, r1, #2
 800c5ba:	3414      	adds	r4, #20
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	1841      	adds	r1, r0, r1
 800c5c0:	18e3      	adds	r3, r4, r3
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	d80d      	bhi.n	800c5e2 <__copybits+0x38>
 800c5c6:	0014      	movs	r4, r2
 800c5c8:	3411      	adds	r4, #17
 800c5ca:	2500      	movs	r5, #0
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	d803      	bhi.n	800c5d8 <__copybits+0x2e>
 800c5d0:	1a9b      	subs	r3, r3, r2
 800c5d2:	3b11      	subs	r3, #17
 800c5d4:	089b      	lsrs	r3, r3, #2
 800c5d6:	009d      	lsls	r5, r3, #2
 800c5d8:	2300      	movs	r3, #0
 800c5da:	1940      	adds	r0, r0, r5
 800c5dc:	4281      	cmp	r1, r0
 800c5de:	d803      	bhi.n	800c5e8 <__copybits+0x3e>
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	cc40      	ldmia	r4!, {r6}
 800c5e4:	c540      	stmia	r5!, {r6}
 800c5e6:	e7ec      	b.n	800c5c2 <__copybits+0x18>
 800c5e8:	c008      	stmia	r0!, {r3}
 800c5ea:	e7f7      	b.n	800c5dc <__copybits+0x32>

0800c5ec <__any_on>:
 800c5ec:	0002      	movs	r2, r0
 800c5ee:	6900      	ldr	r0, [r0, #16]
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	3214      	adds	r2, #20
 800c5f4:	114b      	asrs	r3, r1, #5
 800c5f6:	4298      	cmp	r0, r3
 800c5f8:	db13      	blt.n	800c622 <__any_on+0x36>
 800c5fa:	dd0c      	ble.n	800c616 <__any_on+0x2a>
 800c5fc:	241f      	movs	r4, #31
 800c5fe:	0008      	movs	r0, r1
 800c600:	4020      	ands	r0, r4
 800c602:	4221      	tst	r1, r4
 800c604:	d007      	beq.n	800c616 <__any_on+0x2a>
 800c606:	0099      	lsls	r1, r3, #2
 800c608:	588c      	ldr	r4, [r1, r2]
 800c60a:	0021      	movs	r1, r4
 800c60c:	40c1      	lsrs	r1, r0
 800c60e:	4081      	lsls	r1, r0
 800c610:	2001      	movs	r0, #1
 800c612:	428c      	cmp	r4, r1
 800c614:	d104      	bne.n	800c620 <__any_on+0x34>
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	18d3      	adds	r3, r2, r3
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d803      	bhi.n	800c626 <__any_on+0x3a>
 800c61e:	2000      	movs	r0, #0
 800c620:	bd10      	pop	{r4, pc}
 800c622:	0003      	movs	r3, r0
 800c624:	e7f7      	b.n	800c616 <__any_on+0x2a>
 800c626:	3b04      	subs	r3, #4
 800c628:	6819      	ldr	r1, [r3, #0]
 800c62a:	2900      	cmp	r1, #0
 800c62c:	d0f5      	beq.n	800c61a <__any_on+0x2e>
 800c62e:	2001      	movs	r0, #1
 800c630:	e7f6      	b.n	800c620 <__any_on+0x34>

0800c632 <_calloc_r>:
 800c632:	b570      	push	{r4, r5, r6, lr}
 800c634:	0c13      	lsrs	r3, r2, #16
 800c636:	0c0d      	lsrs	r5, r1, #16
 800c638:	d11e      	bne.n	800c678 <_calloc_r+0x46>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10c      	bne.n	800c658 <_calloc_r+0x26>
 800c63e:	b289      	uxth	r1, r1
 800c640:	b294      	uxth	r4, r2
 800c642:	434c      	muls	r4, r1
 800c644:	0021      	movs	r1, r4
 800c646:	f000 f88d 	bl	800c764 <_malloc_r>
 800c64a:	1e05      	subs	r5, r0, #0
 800c64c:	d01b      	beq.n	800c686 <_calloc_r+0x54>
 800c64e:	0022      	movs	r2, r4
 800c650:	2100      	movs	r1, #0
 800c652:	f7fc fa56 	bl	8008b02 <memset>
 800c656:	e016      	b.n	800c686 <_calloc_r+0x54>
 800c658:	1c1d      	adds	r5, r3, #0
 800c65a:	1c0b      	adds	r3, r1, #0
 800c65c:	b292      	uxth	r2, r2
 800c65e:	b289      	uxth	r1, r1
 800c660:	b29c      	uxth	r4, r3
 800c662:	4351      	muls	r1, r2
 800c664:	b2ab      	uxth	r3, r5
 800c666:	4363      	muls	r3, r4
 800c668:	0c0c      	lsrs	r4, r1, #16
 800c66a:	191c      	adds	r4, r3, r4
 800c66c:	0c22      	lsrs	r2, r4, #16
 800c66e:	d107      	bne.n	800c680 <_calloc_r+0x4e>
 800c670:	0424      	lsls	r4, r4, #16
 800c672:	b289      	uxth	r1, r1
 800c674:	430c      	orrs	r4, r1
 800c676:	e7e5      	b.n	800c644 <_calloc_r+0x12>
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <_calloc_r+0x4e>
 800c67c:	1c13      	adds	r3, r2, #0
 800c67e:	e7ed      	b.n	800c65c <_calloc_r+0x2a>
 800c680:	230c      	movs	r3, #12
 800c682:	2500      	movs	r5, #0
 800c684:	6003      	str	r3, [r0, #0]
 800c686:	0028      	movs	r0, r5
 800c688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c68c <_free_r>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	0005      	movs	r5, r0
 800c690:	2900      	cmp	r1, #0
 800c692:	d010      	beq.n	800c6b6 <_free_r+0x2a>
 800c694:	1f0c      	subs	r4, r1, #4
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	da00      	bge.n	800c69e <_free_r+0x12>
 800c69c:	18e4      	adds	r4, r4, r3
 800c69e:	0028      	movs	r0, r5
 800c6a0:	f000 fea0 	bl	800d3e4 <__malloc_lock>
 800c6a4:	4a1d      	ldr	r2, [pc, #116]	; (800c71c <_free_r+0x90>)
 800c6a6:	6813      	ldr	r3, [r2, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d105      	bne.n	800c6b8 <_free_r+0x2c>
 800c6ac:	6063      	str	r3, [r4, #4]
 800c6ae:	6014      	str	r4, [r2, #0]
 800c6b0:	0028      	movs	r0, r5
 800c6b2:	f000 fe9f 	bl	800d3f4 <__malloc_unlock>
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	d908      	bls.n	800c6ce <_free_r+0x42>
 800c6bc:	6821      	ldr	r1, [r4, #0]
 800c6be:	1860      	adds	r0, r4, r1
 800c6c0:	4283      	cmp	r3, r0
 800c6c2:	d1f3      	bne.n	800c6ac <_free_r+0x20>
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	1841      	adds	r1, r0, r1
 800c6ca:	6021      	str	r1, [r4, #0]
 800c6cc:	e7ee      	b.n	800c6ac <_free_r+0x20>
 800c6ce:	001a      	movs	r2, r3
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <_free_r+0x4e>
 800c6d6:	42a3      	cmp	r3, r4
 800c6d8:	d9f9      	bls.n	800c6ce <_free_r+0x42>
 800c6da:	6811      	ldr	r1, [r2, #0]
 800c6dc:	1850      	adds	r0, r2, r1
 800c6de:	42a0      	cmp	r0, r4
 800c6e0:	d10b      	bne.n	800c6fa <_free_r+0x6e>
 800c6e2:	6820      	ldr	r0, [r4, #0]
 800c6e4:	1809      	adds	r1, r1, r0
 800c6e6:	1850      	adds	r0, r2, r1
 800c6e8:	6011      	str	r1, [r2, #0]
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	d1e0      	bne.n	800c6b0 <_free_r+0x24>
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	1841      	adds	r1, r0, r1
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	6053      	str	r3, [r2, #4]
 800c6f8:	e7da      	b.n	800c6b0 <_free_r+0x24>
 800c6fa:	42a0      	cmp	r0, r4
 800c6fc:	d902      	bls.n	800c704 <_free_r+0x78>
 800c6fe:	230c      	movs	r3, #12
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	e7d5      	b.n	800c6b0 <_free_r+0x24>
 800c704:	6821      	ldr	r1, [r4, #0]
 800c706:	1860      	adds	r0, r4, r1
 800c708:	4283      	cmp	r3, r0
 800c70a:	d103      	bne.n	800c714 <_free_r+0x88>
 800c70c:	6818      	ldr	r0, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	1841      	adds	r1, r0, r1
 800c712:	6021      	str	r1, [r4, #0]
 800c714:	6063      	str	r3, [r4, #4]
 800c716:	6054      	str	r4, [r2, #4]
 800c718:	e7ca      	b.n	800c6b0 <_free_r+0x24>
 800c71a:	46c0      	nop			; (mov r8, r8)
 800c71c:	200005dc 	.word	0x200005dc

0800c720 <sbrk_aligned>:
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	4e0f      	ldr	r6, [pc, #60]	; (800c760 <sbrk_aligned+0x40>)
 800c724:	000d      	movs	r5, r1
 800c726:	6831      	ldr	r1, [r6, #0]
 800c728:	0004      	movs	r4, r0
 800c72a:	2900      	cmp	r1, #0
 800c72c:	d102      	bne.n	800c734 <sbrk_aligned+0x14>
 800c72e:	f000 fb59 	bl	800cde4 <_sbrk_r>
 800c732:	6030      	str	r0, [r6, #0]
 800c734:	0029      	movs	r1, r5
 800c736:	0020      	movs	r0, r4
 800c738:	f000 fb54 	bl	800cde4 <_sbrk_r>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d00a      	beq.n	800c756 <sbrk_aligned+0x36>
 800c740:	2303      	movs	r3, #3
 800c742:	1cc5      	adds	r5, r0, #3
 800c744:	439d      	bics	r5, r3
 800c746:	42a8      	cmp	r0, r5
 800c748:	d007      	beq.n	800c75a <sbrk_aligned+0x3a>
 800c74a:	1a29      	subs	r1, r5, r0
 800c74c:	0020      	movs	r0, r4
 800c74e:	f000 fb49 	bl	800cde4 <_sbrk_r>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d101      	bne.n	800c75a <sbrk_aligned+0x3a>
 800c756:	2501      	movs	r5, #1
 800c758:	426d      	negs	r5, r5
 800c75a:	0028      	movs	r0, r5
 800c75c:	bd70      	pop	{r4, r5, r6, pc}
 800c75e:	46c0      	nop			; (mov r8, r8)
 800c760:	200005e0 	.word	0x200005e0

0800c764 <_malloc_r>:
 800c764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c766:	2203      	movs	r2, #3
 800c768:	1ccb      	adds	r3, r1, #3
 800c76a:	4393      	bics	r3, r2
 800c76c:	3308      	adds	r3, #8
 800c76e:	0006      	movs	r6, r0
 800c770:	001f      	movs	r7, r3
 800c772:	2b0c      	cmp	r3, #12
 800c774:	d232      	bcs.n	800c7dc <_malloc_r+0x78>
 800c776:	270c      	movs	r7, #12
 800c778:	42b9      	cmp	r1, r7
 800c77a:	d831      	bhi.n	800c7e0 <_malloc_r+0x7c>
 800c77c:	0030      	movs	r0, r6
 800c77e:	f000 fe31 	bl	800d3e4 <__malloc_lock>
 800c782:	4d32      	ldr	r5, [pc, #200]	; (800c84c <_malloc_r+0xe8>)
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	001c      	movs	r4, r3
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d12e      	bne.n	800c7ea <_malloc_r+0x86>
 800c78c:	0039      	movs	r1, r7
 800c78e:	0030      	movs	r0, r6
 800c790:	f7ff ffc6 	bl	800c720 <sbrk_aligned>
 800c794:	0004      	movs	r4, r0
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	d11e      	bne.n	800c7d8 <_malloc_r+0x74>
 800c79a:	682c      	ldr	r4, [r5, #0]
 800c79c:	0025      	movs	r5, r4
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	d14a      	bne.n	800c838 <_malloc_r+0xd4>
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	0029      	movs	r1, r5
 800c7a6:	18e3      	adds	r3, r4, r3
 800c7a8:	0030      	movs	r0, r6
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	f000 fb1a 	bl	800cde4 <_sbrk_r>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	4283      	cmp	r3, r0
 800c7b4:	d143      	bne.n	800c83e <_malloc_r+0xda>
 800c7b6:	6823      	ldr	r3, [r4, #0]
 800c7b8:	3703      	adds	r7, #3
 800c7ba:	1aff      	subs	r7, r7, r3
 800c7bc:	2303      	movs	r3, #3
 800c7be:	439f      	bics	r7, r3
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	2f0c      	cmp	r7, #12
 800c7c4:	d200      	bcs.n	800c7c8 <_malloc_r+0x64>
 800c7c6:	270c      	movs	r7, #12
 800c7c8:	0039      	movs	r1, r7
 800c7ca:	0030      	movs	r0, r6
 800c7cc:	f7ff ffa8 	bl	800c720 <sbrk_aligned>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d034      	beq.n	800c83e <_malloc_r+0xda>
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	19df      	adds	r7, r3, r7
 800c7d8:	6027      	str	r7, [r4, #0]
 800c7da:	e013      	b.n	800c804 <_malloc_r+0xa0>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dacb      	bge.n	800c778 <_malloc_r+0x14>
 800c7e0:	230c      	movs	r3, #12
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	6033      	str	r3, [r6, #0]
 800c7e6:	0028      	movs	r0, r5
 800c7e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7ea:	6822      	ldr	r2, [r4, #0]
 800c7ec:	1bd1      	subs	r1, r2, r7
 800c7ee:	d420      	bmi.n	800c832 <_malloc_r+0xce>
 800c7f0:	290b      	cmp	r1, #11
 800c7f2:	d917      	bls.n	800c824 <_malloc_r+0xc0>
 800c7f4:	19e2      	adds	r2, r4, r7
 800c7f6:	6027      	str	r7, [r4, #0]
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	d111      	bne.n	800c820 <_malloc_r+0xbc>
 800c7fc:	602a      	str	r2, [r5, #0]
 800c7fe:	6863      	ldr	r3, [r4, #4]
 800c800:	6011      	str	r1, [r2, #0]
 800c802:	6053      	str	r3, [r2, #4]
 800c804:	0030      	movs	r0, r6
 800c806:	0025      	movs	r5, r4
 800c808:	f000 fdf4 	bl	800d3f4 <__malloc_unlock>
 800c80c:	2207      	movs	r2, #7
 800c80e:	350b      	adds	r5, #11
 800c810:	1d23      	adds	r3, r4, #4
 800c812:	4395      	bics	r5, r2
 800c814:	1aea      	subs	r2, r5, r3
 800c816:	429d      	cmp	r5, r3
 800c818:	d0e5      	beq.n	800c7e6 <_malloc_r+0x82>
 800c81a:	1b5b      	subs	r3, r3, r5
 800c81c:	50a3      	str	r3, [r4, r2]
 800c81e:	e7e2      	b.n	800c7e6 <_malloc_r+0x82>
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	e7ec      	b.n	800c7fe <_malloc_r+0x9a>
 800c824:	6862      	ldr	r2, [r4, #4]
 800c826:	42a3      	cmp	r3, r4
 800c828:	d101      	bne.n	800c82e <_malloc_r+0xca>
 800c82a:	602a      	str	r2, [r5, #0]
 800c82c:	e7ea      	b.n	800c804 <_malloc_r+0xa0>
 800c82e:	605a      	str	r2, [r3, #4]
 800c830:	e7e8      	b.n	800c804 <_malloc_r+0xa0>
 800c832:	0023      	movs	r3, r4
 800c834:	6864      	ldr	r4, [r4, #4]
 800c836:	e7a7      	b.n	800c788 <_malloc_r+0x24>
 800c838:	002c      	movs	r4, r5
 800c83a:	686d      	ldr	r5, [r5, #4]
 800c83c:	e7af      	b.n	800c79e <_malloc_r+0x3a>
 800c83e:	230c      	movs	r3, #12
 800c840:	0030      	movs	r0, r6
 800c842:	6033      	str	r3, [r6, #0]
 800c844:	f000 fdd6 	bl	800d3f4 <__malloc_unlock>
 800c848:	e7cd      	b.n	800c7e6 <_malloc_r+0x82>
 800c84a:	46c0      	nop			; (mov r8, r8)
 800c84c:	200005dc 	.word	0x200005dc

0800c850 <__ssputs_r>:
 800c850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c852:	688e      	ldr	r6, [r1, #8]
 800c854:	b085      	sub	sp, #20
 800c856:	0007      	movs	r7, r0
 800c858:	000c      	movs	r4, r1
 800c85a:	9203      	str	r2, [sp, #12]
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	429e      	cmp	r6, r3
 800c860:	d83c      	bhi.n	800c8dc <__ssputs_r+0x8c>
 800c862:	2390      	movs	r3, #144	; 0x90
 800c864:	898a      	ldrh	r2, [r1, #12]
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	421a      	tst	r2, r3
 800c86a:	d034      	beq.n	800c8d6 <__ssputs_r+0x86>
 800c86c:	6909      	ldr	r1, [r1, #16]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	6960      	ldr	r0, [r4, #20]
 800c872:	1a5b      	subs	r3, r3, r1
 800c874:	9302      	str	r3, [sp, #8]
 800c876:	2303      	movs	r3, #3
 800c878:	4343      	muls	r3, r0
 800c87a:	0fdd      	lsrs	r5, r3, #31
 800c87c:	18ed      	adds	r5, r5, r3
 800c87e:	9b01      	ldr	r3, [sp, #4]
 800c880:	9802      	ldr	r0, [sp, #8]
 800c882:	3301      	adds	r3, #1
 800c884:	181b      	adds	r3, r3, r0
 800c886:	106d      	asrs	r5, r5, #1
 800c888:	42ab      	cmp	r3, r5
 800c88a:	d900      	bls.n	800c88e <__ssputs_r+0x3e>
 800c88c:	001d      	movs	r5, r3
 800c88e:	0553      	lsls	r3, r2, #21
 800c890:	d532      	bpl.n	800c8f8 <__ssputs_r+0xa8>
 800c892:	0029      	movs	r1, r5
 800c894:	0038      	movs	r0, r7
 800c896:	f7ff ff65 	bl	800c764 <_malloc_r>
 800c89a:	1e06      	subs	r6, r0, #0
 800c89c:	d109      	bne.n	800c8b2 <__ssputs_r+0x62>
 800c89e:	230c      	movs	r3, #12
 800c8a0:	603b      	str	r3, [r7, #0]
 800c8a2:	2340      	movs	r3, #64	; 0x40
 800c8a4:	2001      	movs	r0, #1
 800c8a6:	89a2      	ldrh	r2, [r4, #12]
 800c8a8:	4240      	negs	r0, r0
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	b005      	add	sp, #20
 800c8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b2:	9a02      	ldr	r2, [sp, #8]
 800c8b4:	6921      	ldr	r1, [r4, #16]
 800c8b6:	f7fc f91b 	bl	8008af0 <memcpy>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	4a14      	ldr	r2, [pc, #80]	; (800c910 <__ssputs_r+0xc0>)
 800c8be:	401a      	ands	r2, r3
 800c8c0:	2380      	movs	r3, #128	; 0x80
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	9b02      	ldr	r3, [sp, #8]
 800c8c8:	6126      	str	r6, [r4, #16]
 800c8ca:	18f6      	adds	r6, r6, r3
 800c8cc:	6026      	str	r6, [r4, #0]
 800c8ce:	6165      	str	r5, [r4, #20]
 800c8d0:	9e01      	ldr	r6, [sp, #4]
 800c8d2:	1aed      	subs	r5, r5, r3
 800c8d4:	60a5      	str	r5, [r4, #8]
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	429e      	cmp	r6, r3
 800c8da:	d900      	bls.n	800c8de <__ssputs_r+0x8e>
 800c8dc:	9e01      	ldr	r6, [sp, #4]
 800c8de:	0032      	movs	r2, r6
 800c8e0:	9903      	ldr	r1, [sp, #12]
 800c8e2:	6820      	ldr	r0, [r4, #0]
 800c8e4:	f000 fd6a 	bl	800d3bc <memmove>
 800c8e8:	68a3      	ldr	r3, [r4, #8]
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	1b9b      	subs	r3, r3, r6
 800c8ee:	60a3      	str	r3, [r4, #8]
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	199e      	adds	r6, r3, r6
 800c8f4:	6026      	str	r6, [r4, #0]
 800c8f6:	e7da      	b.n	800c8ae <__ssputs_r+0x5e>
 800c8f8:	002a      	movs	r2, r5
 800c8fa:	0038      	movs	r0, r7
 800c8fc:	f000 fd82 	bl	800d404 <_realloc_r>
 800c900:	1e06      	subs	r6, r0, #0
 800c902:	d1e0      	bne.n	800c8c6 <__ssputs_r+0x76>
 800c904:	0038      	movs	r0, r7
 800c906:	6921      	ldr	r1, [r4, #16]
 800c908:	f7ff fec0 	bl	800c68c <_free_r>
 800c90c:	e7c7      	b.n	800c89e <__ssputs_r+0x4e>
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	fffffb7f 	.word	0xfffffb7f

0800c914 <_svfiprintf_r>:
 800c914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c916:	b0a1      	sub	sp, #132	; 0x84
 800c918:	9003      	str	r0, [sp, #12]
 800c91a:	001d      	movs	r5, r3
 800c91c:	898b      	ldrh	r3, [r1, #12]
 800c91e:	000f      	movs	r7, r1
 800c920:	0016      	movs	r6, r2
 800c922:	061b      	lsls	r3, r3, #24
 800c924:	d511      	bpl.n	800c94a <_svfiprintf_r+0x36>
 800c926:	690b      	ldr	r3, [r1, #16]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10e      	bne.n	800c94a <_svfiprintf_r+0x36>
 800c92c:	2140      	movs	r1, #64	; 0x40
 800c92e:	f7ff ff19 	bl	800c764 <_malloc_r>
 800c932:	6038      	str	r0, [r7, #0]
 800c934:	6138      	str	r0, [r7, #16]
 800c936:	2800      	cmp	r0, #0
 800c938:	d105      	bne.n	800c946 <_svfiprintf_r+0x32>
 800c93a:	230c      	movs	r3, #12
 800c93c:	9a03      	ldr	r2, [sp, #12]
 800c93e:	3801      	subs	r0, #1
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	b021      	add	sp, #132	; 0x84
 800c944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c946:	2340      	movs	r3, #64	; 0x40
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	2300      	movs	r3, #0
 800c94c:	ac08      	add	r4, sp, #32
 800c94e:	6163      	str	r3, [r4, #20]
 800c950:	3320      	adds	r3, #32
 800c952:	7663      	strb	r3, [r4, #25]
 800c954:	3310      	adds	r3, #16
 800c956:	76a3      	strb	r3, [r4, #26]
 800c958:	9507      	str	r5, [sp, #28]
 800c95a:	0035      	movs	r5, r6
 800c95c:	782b      	ldrb	r3, [r5, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <_svfiprintf_r+0x52>
 800c962:	2b25      	cmp	r3, #37	; 0x25
 800c964:	d147      	bne.n	800c9f6 <_svfiprintf_r+0xe2>
 800c966:	1bab      	subs	r3, r5, r6
 800c968:	9305      	str	r3, [sp, #20]
 800c96a:	42b5      	cmp	r5, r6
 800c96c:	d00c      	beq.n	800c988 <_svfiprintf_r+0x74>
 800c96e:	0032      	movs	r2, r6
 800c970:	0039      	movs	r1, r7
 800c972:	9803      	ldr	r0, [sp, #12]
 800c974:	f7ff ff6c 	bl	800c850 <__ssputs_r>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d100      	bne.n	800c97e <_svfiprintf_r+0x6a>
 800c97c:	e0ae      	b.n	800cadc <_svfiprintf_r+0x1c8>
 800c97e:	6962      	ldr	r2, [r4, #20]
 800c980:	9b05      	ldr	r3, [sp, #20]
 800c982:	4694      	mov	ip, r2
 800c984:	4463      	add	r3, ip
 800c986:	6163      	str	r3, [r4, #20]
 800c988:	782b      	ldrb	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d100      	bne.n	800c990 <_svfiprintf_r+0x7c>
 800c98e:	e0a5      	b.n	800cadc <_svfiprintf_r+0x1c8>
 800c990:	2201      	movs	r2, #1
 800c992:	2300      	movs	r3, #0
 800c994:	4252      	negs	r2, r2
 800c996:	6062      	str	r2, [r4, #4]
 800c998:	a904      	add	r1, sp, #16
 800c99a:	3254      	adds	r2, #84	; 0x54
 800c99c:	1852      	adds	r2, r2, r1
 800c99e:	1c6e      	adds	r6, r5, #1
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	60e3      	str	r3, [r4, #12]
 800c9a4:	60a3      	str	r3, [r4, #8]
 800c9a6:	7013      	strb	r3, [r2, #0]
 800c9a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800c9aa:	2205      	movs	r2, #5
 800c9ac:	7831      	ldrb	r1, [r6, #0]
 800c9ae:	4854      	ldr	r0, [pc, #336]	; (800cb00 <_svfiprintf_r+0x1ec>)
 800c9b0:	f7ff f96a 	bl	800bc88 <memchr>
 800c9b4:	1c75      	adds	r5, r6, #1
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d11f      	bne.n	800c9fa <_svfiprintf_r+0xe6>
 800c9ba:	6822      	ldr	r2, [r4, #0]
 800c9bc:	06d3      	lsls	r3, r2, #27
 800c9be:	d504      	bpl.n	800c9ca <_svfiprintf_r+0xb6>
 800c9c0:	2353      	movs	r3, #83	; 0x53
 800c9c2:	a904      	add	r1, sp, #16
 800c9c4:	185b      	adds	r3, r3, r1
 800c9c6:	2120      	movs	r1, #32
 800c9c8:	7019      	strb	r1, [r3, #0]
 800c9ca:	0713      	lsls	r3, r2, #28
 800c9cc:	d504      	bpl.n	800c9d8 <_svfiprintf_r+0xc4>
 800c9ce:	2353      	movs	r3, #83	; 0x53
 800c9d0:	a904      	add	r1, sp, #16
 800c9d2:	185b      	adds	r3, r3, r1
 800c9d4:	212b      	movs	r1, #43	; 0x2b
 800c9d6:	7019      	strb	r1, [r3, #0]
 800c9d8:	7833      	ldrb	r3, [r6, #0]
 800c9da:	2b2a      	cmp	r3, #42	; 0x2a
 800c9dc:	d016      	beq.n	800ca0c <_svfiprintf_r+0xf8>
 800c9de:	0035      	movs	r5, r6
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	200a      	movs	r0, #10
 800c9e4:	68e3      	ldr	r3, [r4, #12]
 800c9e6:	782a      	ldrb	r2, [r5, #0]
 800c9e8:	1c6e      	adds	r6, r5, #1
 800c9ea:	3a30      	subs	r2, #48	; 0x30
 800c9ec:	2a09      	cmp	r2, #9
 800c9ee:	d94e      	bls.n	800ca8e <_svfiprintf_r+0x17a>
 800c9f0:	2900      	cmp	r1, #0
 800c9f2:	d111      	bne.n	800ca18 <_svfiprintf_r+0x104>
 800c9f4:	e017      	b.n	800ca26 <_svfiprintf_r+0x112>
 800c9f6:	3501      	adds	r5, #1
 800c9f8:	e7b0      	b.n	800c95c <_svfiprintf_r+0x48>
 800c9fa:	4b41      	ldr	r3, [pc, #260]	; (800cb00 <_svfiprintf_r+0x1ec>)
 800c9fc:	6822      	ldr	r2, [r4, #0]
 800c9fe:	1ac0      	subs	r0, r0, r3
 800ca00:	2301      	movs	r3, #1
 800ca02:	4083      	lsls	r3, r0
 800ca04:	4313      	orrs	r3, r2
 800ca06:	002e      	movs	r6, r5
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	e7ce      	b.n	800c9aa <_svfiprintf_r+0x96>
 800ca0c:	9b07      	ldr	r3, [sp, #28]
 800ca0e:	1d19      	adds	r1, r3, #4
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	9107      	str	r1, [sp, #28]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	db01      	blt.n	800ca1c <_svfiprintf_r+0x108>
 800ca18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca1a:	e004      	b.n	800ca26 <_svfiprintf_r+0x112>
 800ca1c:	425b      	negs	r3, r3
 800ca1e:	60e3      	str	r3, [r4, #12]
 800ca20:	2302      	movs	r3, #2
 800ca22:	4313      	orrs	r3, r2
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	782b      	ldrb	r3, [r5, #0]
 800ca28:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2a:	d10a      	bne.n	800ca42 <_svfiprintf_r+0x12e>
 800ca2c:	786b      	ldrb	r3, [r5, #1]
 800ca2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca30:	d135      	bne.n	800ca9e <_svfiprintf_r+0x18a>
 800ca32:	9b07      	ldr	r3, [sp, #28]
 800ca34:	3502      	adds	r5, #2
 800ca36:	1d1a      	adds	r2, r3, #4
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	9207      	str	r2, [sp, #28]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	db2b      	blt.n	800ca98 <_svfiprintf_r+0x184>
 800ca40:	9309      	str	r3, [sp, #36]	; 0x24
 800ca42:	4e30      	ldr	r6, [pc, #192]	; (800cb04 <_svfiprintf_r+0x1f0>)
 800ca44:	2203      	movs	r2, #3
 800ca46:	0030      	movs	r0, r6
 800ca48:	7829      	ldrb	r1, [r5, #0]
 800ca4a:	f7ff f91d 	bl	800bc88 <memchr>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d006      	beq.n	800ca60 <_svfiprintf_r+0x14c>
 800ca52:	2340      	movs	r3, #64	; 0x40
 800ca54:	1b80      	subs	r0, r0, r6
 800ca56:	4083      	lsls	r3, r0
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	3501      	adds	r5, #1
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	7829      	ldrb	r1, [r5, #0]
 800ca62:	2206      	movs	r2, #6
 800ca64:	4828      	ldr	r0, [pc, #160]	; (800cb08 <_svfiprintf_r+0x1f4>)
 800ca66:	1c6e      	adds	r6, r5, #1
 800ca68:	7621      	strb	r1, [r4, #24]
 800ca6a:	f7ff f90d 	bl	800bc88 <memchr>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d03c      	beq.n	800caec <_svfiprintf_r+0x1d8>
 800ca72:	4b26      	ldr	r3, [pc, #152]	; (800cb0c <_svfiprintf_r+0x1f8>)
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d125      	bne.n	800cac4 <_svfiprintf_r+0x1b0>
 800ca78:	2207      	movs	r2, #7
 800ca7a:	9b07      	ldr	r3, [sp, #28]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	4393      	bics	r3, r2
 800ca80:	3308      	adds	r3, #8
 800ca82:	9307      	str	r3, [sp, #28]
 800ca84:	6963      	ldr	r3, [r4, #20]
 800ca86:	9a04      	ldr	r2, [sp, #16]
 800ca88:	189b      	adds	r3, r3, r2
 800ca8a:	6163      	str	r3, [r4, #20]
 800ca8c:	e765      	b.n	800c95a <_svfiprintf_r+0x46>
 800ca8e:	4343      	muls	r3, r0
 800ca90:	0035      	movs	r5, r6
 800ca92:	2101      	movs	r1, #1
 800ca94:	189b      	adds	r3, r3, r2
 800ca96:	e7a6      	b.n	800c9e6 <_svfiprintf_r+0xd2>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	425b      	negs	r3, r3
 800ca9c:	e7d0      	b.n	800ca40 <_svfiprintf_r+0x12c>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	200a      	movs	r0, #10
 800caa2:	001a      	movs	r2, r3
 800caa4:	3501      	adds	r5, #1
 800caa6:	6063      	str	r3, [r4, #4]
 800caa8:	7829      	ldrb	r1, [r5, #0]
 800caaa:	1c6e      	adds	r6, r5, #1
 800caac:	3930      	subs	r1, #48	; 0x30
 800caae:	2909      	cmp	r1, #9
 800cab0:	d903      	bls.n	800caba <_svfiprintf_r+0x1a6>
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0c5      	beq.n	800ca42 <_svfiprintf_r+0x12e>
 800cab6:	9209      	str	r2, [sp, #36]	; 0x24
 800cab8:	e7c3      	b.n	800ca42 <_svfiprintf_r+0x12e>
 800caba:	4342      	muls	r2, r0
 800cabc:	0035      	movs	r5, r6
 800cabe:	2301      	movs	r3, #1
 800cac0:	1852      	adds	r2, r2, r1
 800cac2:	e7f1      	b.n	800caa8 <_svfiprintf_r+0x194>
 800cac4:	ab07      	add	r3, sp, #28
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	003a      	movs	r2, r7
 800caca:	0021      	movs	r1, r4
 800cacc:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <_svfiprintf_r+0x1fc>)
 800cace:	9803      	ldr	r0, [sp, #12]
 800cad0:	f7fc f8ca 	bl	8008c68 <_printf_float>
 800cad4:	9004      	str	r0, [sp, #16]
 800cad6:	9b04      	ldr	r3, [sp, #16]
 800cad8:	3301      	adds	r3, #1
 800cada:	d1d3      	bne.n	800ca84 <_svfiprintf_r+0x170>
 800cadc:	89bb      	ldrh	r3, [r7, #12]
 800cade:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cae0:	065b      	lsls	r3, r3, #25
 800cae2:	d400      	bmi.n	800cae6 <_svfiprintf_r+0x1d2>
 800cae4:	e72d      	b.n	800c942 <_svfiprintf_r+0x2e>
 800cae6:	2001      	movs	r0, #1
 800cae8:	4240      	negs	r0, r0
 800caea:	e72a      	b.n	800c942 <_svfiprintf_r+0x2e>
 800caec:	ab07      	add	r3, sp, #28
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	003a      	movs	r2, r7
 800caf2:	0021      	movs	r1, r4
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <_svfiprintf_r+0x1fc>)
 800caf6:	9803      	ldr	r0, [sp, #12]
 800caf8:	f7fc fb68 	bl	80091cc <_printf_i>
 800cafc:	e7ea      	b.n	800cad4 <_svfiprintf_r+0x1c0>
 800cafe:	46c0      	nop			; (mov r8, r8)
 800cb00:	0800db7c 	.word	0x0800db7c
 800cb04:	0800db82 	.word	0x0800db82
 800cb08:	0800db86 	.word	0x0800db86
 800cb0c:	08008c69 	.word	0x08008c69
 800cb10:	0800c851 	.word	0x0800c851

0800cb14 <__sfputc_r>:
 800cb14:	6893      	ldr	r3, [r2, #8]
 800cb16:	b510      	push	{r4, lr}
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	6093      	str	r3, [r2, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da04      	bge.n	800cb2a <__sfputc_r+0x16>
 800cb20:	6994      	ldr	r4, [r2, #24]
 800cb22:	42a3      	cmp	r3, r4
 800cb24:	db07      	blt.n	800cb36 <__sfputc_r+0x22>
 800cb26:	290a      	cmp	r1, #10
 800cb28:	d005      	beq.n	800cb36 <__sfputc_r+0x22>
 800cb2a:	6813      	ldr	r3, [r2, #0]
 800cb2c:	1c58      	adds	r0, r3, #1
 800cb2e:	6010      	str	r0, [r2, #0]
 800cb30:	7019      	strb	r1, [r3, #0]
 800cb32:	0008      	movs	r0, r1
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	f000 f9c5 	bl	800cec4 <__swbuf_r>
 800cb3a:	0001      	movs	r1, r0
 800cb3c:	e7f9      	b.n	800cb32 <__sfputc_r+0x1e>

0800cb3e <__sfputs_r>:
 800cb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb40:	0006      	movs	r6, r0
 800cb42:	000f      	movs	r7, r1
 800cb44:	0014      	movs	r4, r2
 800cb46:	18d5      	adds	r5, r2, r3
 800cb48:	42ac      	cmp	r4, r5
 800cb4a:	d101      	bne.n	800cb50 <__sfputs_r+0x12>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	e007      	b.n	800cb60 <__sfputs_r+0x22>
 800cb50:	7821      	ldrb	r1, [r4, #0]
 800cb52:	003a      	movs	r2, r7
 800cb54:	0030      	movs	r0, r6
 800cb56:	f7ff ffdd 	bl	800cb14 <__sfputc_r>
 800cb5a:	3401      	adds	r4, #1
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	d1f3      	bne.n	800cb48 <__sfputs_r+0xa>
 800cb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb64 <_vfiprintf_r>:
 800cb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb66:	b0a1      	sub	sp, #132	; 0x84
 800cb68:	0006      	movs	r6, r0
 800cb6a:	000c      	movs	r4, r1
 800cb6c:	001f      	movs	r7, r3
 800cb6e:	9203      	str	r2, [sp, #12]
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d004      	beq.n	800cb7e <_vfiprintf_r+0x1a>
 800cb74:	6983      	ldr	r3, [r0, #24]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <_vfiprintf_r+0x1a>
 800cb7a:	f7fe fc4d 	bl	800b418 <__sinit>
 800cb7e:	4b8e      	ldr	r3, [pc, #568]	; (800cdb8 <_vfiprintf_r+0x254>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	d11c      	bne.n	800cbbe <_vfiprintf_r+0x5a>
 800cb84:	6874      	ldr	r4, [r6, #4]
 800cb86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb88:	07db      	lsls	r3, r3, #31
 800cb8a:	d405      	bmi.n	800cb98 <_vfiprintf_r+0x34>
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	059b      	lsls	r3, r3, #22
 800cb90:	d402      	bmi.n	800cb98 <_vfiprintf_r+0x34>
 800cb92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb94:	f7ff f859 	bl	800bc4a <__retarget_lock_acquire_recursive>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	071b      	lsls	r3, r3, #28
 800cb9c:	d502      	bpl.n	800cba4 <_vfiprintf_r+0x40>
 800cb9e:	6923      	ldr	r3, [r4, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11d      	bne.n	800cbe0 <_vfiprintf_r+0x7c>
 800cba4:	0021      	movs	r1, r4
 800cba6:	0030      	movs	r0, r6
 800cba8:	f000 fa04 	bl	800cfb4 <__swsetup_r>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d017      	beq.n	800cbe0 <_vfiprintf_r+0x7c>
 800cbb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbb2:	07db      	lsls	r3, r3, #31
 800cbb4:	d50d      	bpl.n	800cbd2 <_vfiprintf_r+0x6e>
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	4240      	negs	r0, r0
 800cbba:	b021      	add	sp, #132	; 0x84
 800cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbbe:	4b7f      	ldr	r3, [pc, #508]	; (800cdbc <_vfiprintf_r+0x258>)
 800cbc0:	429c      	cmp	r4, r3
 800cbc2:	d101      	bne.n	800cbc8 <_vfiprintf_r+0x64>
 800cbc4:	68b4      	ldr	r4, [r6, #8]
 800cbc6:	e7de      	b.n	800cb86 <_vfiprintf_r+0x22>
 800cbc8:	4b7d      	ldr	r3, [pc, #500]	; (800cdc0 <_vfiprintf_r+0x25c>)
 800cbca:	429c      	cmp	r4, r3
 800cbcc:	d1db      	bne.n	800cb86 <_vfiprintf_r+0x22>
 800cbce:	68f4      	ldr	r4, [r6, #12]
 800cbd0:	e7d9      	b.n	800cb86 <_vfiprintf_r+0x22>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	059b      	lsls	r3, r3, #22
 800cbd6:	d4ee      	bmi.n	800cbb6 <_vfiprintf_r+0x52>
 800cbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbda:	f7ff f837 	bl	800bc4c <__retarget_lock_release_recursive>
 800cbde:	e7ea      	b.n	800cbb6 <_vfiprintf_r+0x52>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	ad08      	add	r5, sp, #32
 800cbe4:	616b      	str	r3, [r5, #20]
 800cbe6:	3320      	adds	r3, #32
 800cbe8:	766b      	strb	r3, [r5, #25]
 800cbea:	3310      	adds	r3, #16
 800cbec:	76ab      	strb	r3, [r5, #26]
 800cbee:	9707      	str	r7, [sp, #28]
 800cbf0:	9f03      	ldr	r7, [sp, #12]
 800cbf2:	783b      	ldrb	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <_vfiprintf_r+0x98>
 800cbf8:	2b25      	cmp	r3, #37	; 0x25
 800cbfa:	d14e      	bne.n	800cc9a <_vfiprintf_r+0x136>
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	1afb      	subs	r3, r7, r3
 800cc00:	9305      	str	r3, [sp, #20]
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	429f      	cmp	r7, r3
 800cc06:	d00d      	beq.n	800cc24 <_vfiprintf_r+0xc0>
 800cc08:	9b05      	ldr	r3, [sp, #20]
 800cc0a:	0021      	movs	r1, r4
 800cc0c:	0030      	movs	r0, r6
 800cc0e:	9a03      	ldr	r2, [sp, #12]
 800cc10:	f7ff ff95 	bl	800cb3e <__sfputs_r>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d100      	bne.n	800cc1a <_vfiprintf_r+0xb6>
 800cc18:	e0b5      	b.n	800cd86 <_vfiprintf_r+0x222>
 800cc1a:	696a      	ldr	r2, [r5, #20]
 800cc1c:	9b05      	ldr	r3, [sp, #20]
 800cc1e:	4694      	mov	ip, r2
 800cc20:	4463      	add	r3, ip
 800cc22:	616b      	str	r3, [r5, #20]
 800cc24:	783b      	ldrb	r3, [r7, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d100      	bne.n	800cc2c <_vfiprintf_r+0xc8>
 800cc2a:	e0ac      	b.n	800cd86 <_vfiprintf_r+0x222>
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	1c7b      	adds	r3, r7, #1
 800cc30:	9303      	str	r3, [sp, #12]
 800cc32:	2300      	movs	r3, #0
 800cc34:	4252      	negs	r2, r2
 800cc36:	606a      	str	r2, [r5, #4]
 800cc38:	a904      	add	r1, sp, #16
 800cc3a:	3254      	adds	r2, #84	; 0x54
 800cc3c:	1852      	adds	r2, r2, r1
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	60eb      	str	r3, [r5, #12]
 800cc42:	60ab      	str	r3, [r5, #8]
 800cc44:	7013      	strb	r3, [r2, #0]
 800cc46:	65ab      	str	r3, [r5, #88]	; 0x58
 800cc48:	9b03      	ldr	r3, [sp, #12]
 800cc4a:	2205      	movs	r2, #5
 800cc4c:	7819      	ldrb	r1, [r3, #0]
 800cc4e:	485d      	ldr	r0, [pc, #372]	; (800cdc4 <_vfiprintf_r+0x260>)
 800cc50:	f7ff f81a 	bl	800bc88 <memchr>
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	1c5f      	adds	r7, r3, #1
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d120      	bne.n	800cc9e <_vfiprintf_r+0x13a>
 800cc5c:	682a      	ldr	r2, [r5, #0]
 800cc5e:	06d3      	lsls	r3, r2, #27
 800cc60:	d504      	bpl.n	800cc6c <_vfiprintf_r+0x108>
 800cc62:	2353      	movs	r3, #83	; 0x53
 800cc64:	a904      	add	r1, sp, #16
 800cc66:	185b      	adds	r3, r3, r1
 800cc68:	2120      	movs	r1, #32
 800cc6a:	7019      	strb	r1, [r3, #0]
 800cc6c:	0713      	lsls	r3, r2, #28
 800cc6e:	d504      	bpl.n	800cc7a <_vfiprintf_r+0x116>
 800cc70:	2353      	movs	r3, #83	; 0x53
 800cc72:	a904      	add	r1, sp, #16
 800cc74:	185b      	adds	r3, r3, r1
 800cc76:	212b      	movs	r1, #43	; 0x2b
 800cc78:	7019      	strb	r1, [r3, #0]
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc80:	d016      	beq.n	800ccb0 <_vfiprintf_r+0x14c>
 800cc82:	2100      	movs	r1, #0
 800cc84:	68eb      	ldr	r3, [r5, #12]
 800cc86:	9f03      	ldr	r7, [sp, #12]
 800cc88:	783a      	ldrb	r2, [r7, #0]
 800cc8a:	1c78      	adds	r0, r7, #1
 800cc8c:	3a30      	subs	r2, #48	; 0x30
 800cc8e:	4684      	mov	ip, r0
 800cc90:	2a09      	cmp	r2, #9
 800cc92:	d94f      	bls.n	800cd34 <_vfiprintf_r+0x1d0>
 800cc94:	2900      	cmp	r1, #0
 800cc96:	d111      	bne.n	800ccbc <_vfiprintf_r+0x158>
 800cc98:	e017      	b.n	800ccca <_vfiprintf_r+0x166>
 800cc9a:	3701      	adds	r7, #1
 800cc9c:	e7a9      	b.n	800cbf2 <_vfiprintf_r+0x8e>
 800cc9e:	4b49      	ldr	r3, [pc, #292]	; (800cdc4 <_vfiprintf_r+0x260>)
 800cca0:	682a      	ldr	r2, [r5, #0]
 800cca2:	1ac0      	subs	r0, r0, r3
 800cca4:	2301      	movs	r3, #1
 800cca6:	4083      	lsls	r3, r0
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	602b      	str	r3, [r5, #0]
 800ccac:	9703      	str	r7, [sp, #12]
 800ccae:	e7cb      	b.n	800cc48 <_vfiprintf_r+0xe4>
 800ccb0:	9b07      	ldr	r3, [sp, #28]
 800ccb2:	1d19      	adds	r1, r3, #4
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	9107      	str	r1, [sp, #28]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	db01      	blt.n	800ccc0 <_vfiprintf_r+0x15c>
 800ccbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccbe:	e004      	b.n	800ccca <_vfiprintf_r+0x166>
 800ccc0:	425b      	negs	r3, r3
 800ccc2:	60eb      	str	r3, [r5, #12]
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	602b      	str	r3, [r5, #0]
 800ccca:	783b      	ldrb	r3, [r7, #0]
 800cccc:	2b2e      	cmp	r3, #46	; 0x2e
 800ccce:	d10a      	bne.n	800cce6 <_vfiprintf_r+0x182>
 800ccd0:	787b      	ldrb	r3, [r7, #1]
 800ccd2:	2b2a      	cmp	r3, #42	; 0x2a
 800ccd4:	d137      	bne.n	800cd46 <_vfiprintf_r+0x1e2>
 800ccd6:	9b07      	ldr	r3, [sp, #28]
 800ccd8:	3702      	adds	r7, #2
 800ccda:	1d1a      	adds	r2, r3, #4
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	9207      	str	r2, [sp, #28]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	db2d      	blt.n	800cd40 <_vfiprintf_r+0x1dc>
 800cce4:	9309      	str	r3, [sp, #36]	; 0x24
 800cce6:	2203      	movs	r2, #3
 800cce8:	7839      	ldrb	r1, [r7, #0]
 800ccea:	4837      	ldr	r0, [pc, #220]	; (800cdc8 <_vfiprintf_r+0x264>)
 800ccec:	f7fe ffcc 	bl	800bc88 <memchr>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d007      	beq.n	800cd04 <_vfiprintf_r+0x1a0>
 800ccf4:	4b34      	ldr	r3, [pc, #208]	; (800cdc8 <_vfiprintf_r+0x264>)
 800ccf6:	682a      	ldr	r2, [r5, #0]
 800ccf8:	1ac0      	subs	r0, r0, r3
 800ccfa:	2340      	movs	r3, #64	; 0x40
 800ccfc:	4083      	lsls	r3, r0
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	3701      	adds	r7, #1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	7839      	ldrb	r1, [r7, #0]
 800cd06:	1c7b      	adds	r3, r7, #1
 800cd08:	2206      	movs	r2, #6
 800cd0a:	4830      	ldr	r0, [pc, #192]	; (800cdcc <_vfiprintf_r+0x268>)
 800cd0c:	9303      	str	r3, [sp, #12]
 800cd0e:	7629      	strb	r1, [r5, #24]
 800cd10:	f7fe ffba 	bl	800bc88 <memchr>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d045      	beq.n	800cda4 <_vfiprintf_r+0x240>
 800cd18:	4b2d      	ldr	r3, [pc, #180]	; (800cdd0 <_vfiprintf_r+0x26c>)
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d127      	bne.n	800cd6e <_vfiprintf_r+0x20a>
 800cd1e:	2207      	movs	r2, #7
 800cd20:	9b07      	ldr	r3, [sp, #28]
 800cd22:	3307      	adds	r3, #7
 800cd24:	4393      	bics	r3, r2
 800cd26:	3308      	adds	r3, #8
 800cd28:	9307      	str	r3, [sp, #28]
 800cd2a:	696b      	ldr	r3, [r5, #20]
 800cd2c:	9a04      	ldr	r2, [sp, #16]
 800cd2e:	189b      	adds	r3, r3, r2
 800cd30:	616b      	str	r3, [r5, #20]
 800cd32:	e75d      	b.n	800cbf0 <_vfiprintf_r+0x8c>
 800cd34:	210a      	movs	r1, #10
 800cd36:	434b      	muls	r3, r1
 800cd38:	4667      	mov	r7, ip
 800cd3a:	189b      	adds	r3, r3, r2
 800cd3c:	3909      	subs	r1, #9
 800cd3e:	e7a3      	b.n	800cc88 <_vfiprintf_r+0x124>
 800cd40:	2301      	movs	r3, #1
 800cd42:	425b      	negs	r3, r3
 800cd44:	e7ce      	b.n	800cce4 <_vfiprintf_r+0x180>
 800cd46:	2300      	movs	r3, #0
 800cd48:	001a      	movs	r2, r3
 800cd4a:	3701      	adds	r7, #1
 800cd4c:	606b      	str	r3, [r5, #4]
 800cd4e:	7839      	ldrb	r1, [r7, #0]
 800cd50:	1c78      	adds	r0, r7, #1
 800cd52:	3930      	subs	r1, #48	; 0x30
 800cd54:	4684      	mov	ip, r0
 800cd56:	2909      	cmp	r1, #9
 800cd58:	d903      	bls.n	800cd62 <_vfiprintf_r+0x1fe>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0c3      	beq.n	800cce6 <_vfiprintf_r+0x182>
 800cd5e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd60:	e7c1      	b.n	800cce6 <_vfiprintf_r+0x182>
 800cd62:	230a      	movs	r3, #10
 800cd64:	435a      	muls	r2, r3
 800cd66:	4667      	mov	r7, ip
 800cd68:	1852      	adds	r2, r2, r1
 800cd6a:	3b09      	subs	r3, #9
 800cd6c:	e7ef      	b.n	800cd4e <_vfiprintf_r+0x1ea>
 800cd6e:	ab07      	add	r3, sp, #28
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	0022      	movs	r2, r4
 800cd74:	0029      	movs	r1, r5
 800cd76:	0030      	movs	r0, r6
 800cd78:	4b16      	ldr	r3, [pc, #88]	; (800cdd4 <_vfiprintf_r+0x270>)
 800cd7a:	f7fb ff75 	bl	8008c68 <_printf_float>
 800cd7e:	9004      	str	r0, [sp, #16]
 800cd80:	9b04      	ldr	r3, [sp, #16]
 800cd82:	3301      	adds	r3, #1
 800cd84:	d1d1      	bne.n	800cd2a <_vfiprintf_r+0x1c6>
 800cd86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd88:	07db      	lsls	r3, r3, #31
 800cd8a:	d405      	bmi.n	800cd98 <_vfiprintf_r+0x234>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	059b      	lsls	r3, r3, #22
 800cd90:	d402      	bmi.n	800cd98 <_vfiprintf_r+0x234>
 800cd92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd94:	f7fe ff5a 	bl	800bc4c <__retarget_lock_release_recursive>
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	065b      	lsls	r3, r3, #25
 800cd9c:	d500      	bpl.n	800cda0 <_vfiprintf_r+0x23c>
 800cd9e:	e70a      	b.n	800cbb6 <_vfiprintf_r+0x52>
 800cda0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cda2:	e70a      	b.n	800cbba <_vfiprintf_r+0x56>
 800cda4:	ab07      	add	r3, sp, #28
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	0022      	movs	r2, r4
 800cdaa:	0029      	movs	r1, r5
 800cdac:	0030      	movs	r0, r6
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <_vfiprintf_r+0x270>)
 800cdb0:	f7fc fa0c 	bl	80091cc <_printf_i>
 800cdb4:	e7e3      	b.n	800cd7e <_vfiprintf_r+0x21a>
 800cdb6:	46c0      	nop			; (mov r8, r8)
 800cdb8:	0800d964 	.word	0x0800d964
 800cdbc:	0800d984 	.word	0x0800d984
 800cdc0:	0800d944 	.word	0x0800d944
 800cdc4:	0800db7c 	.word	0x0800db7c
 800cdc8:	0800db82 	.word	0x0800db82
 800cdcc:	0800db86 	.word	0x0800db86
 800cdd0:	08008c69 	.word	0x08008c69
 800cdd4:	0800cb3f 	.word	0x0800cb3f

0800cdd8 <nan>:
 800cdd8:	2000      	movs	r0, #0
 800cdda:	4901      	ldr	r1, [pc, #4]	; (800cde0 <nan+0x8>)
 800cddc:	4770      	bx	lr
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	7ff80000 	.word	0x7ff80000

0800cde4 <_sbrk_r>:
 800cde4:	2300      	movs	r3, #0
 800cde6:	b570      	push	{r4, r5, r6, lr}
 800cde8:	4d06      	ldr	r5, [pc, #24]	; (800ce04 <_sbrk_r+0x20>)
 800cdea:	0004      	movs	r4, r0
 800cdec:	0008      	movs	r0, r1
 800cdee:	602b      	str	r3, [r5, #0]
 800cdf0:	f7f6 fd44 	bl	800387c <_sbrk>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d103      	bne.n	800ce00 <_sbrk_r+0x1c>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d000      	beq.n	800ce00 <_sbrk_r+0x1c>
 800cdfe:	6023      	str	r3, [r4, #0]
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	46c0      	nop			; (mov r8, r8)
 800ce04:	200005e4 	.word	0x200005e4

0800ce08 <__sread>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	000c      	movs	r4, r1
 800ce0c:	250e      	movs	r5, #14
 800ce0e:	5f49      	ldrsh	r1, [r1, r5]
 800ce10:	f000 fb28 	bl	800d464 <_read_r>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	db03      	blt.n	800ce20 <__sread+0x18>
 800ce18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce1a:	181b      	adds	r3, r3, r0
 800ce1c:	6563      	str	r3, [r4, #84]	; 0x54
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	4a02      	ldr	r2, [pc, #8]	; (800ce2c <__sread+0x24>)
 800ce24:	4013      	ands	r3, r2
 800ce26:	81a3      	strh	r3, [r4, #12]
 800ce28:	e7f9      	b.n	800ce1e <__sread+0x16>
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	ffffefff 	.word	0xffffefff

0800ce30 <__swrite>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	001f      	movs	r7, r3
 800ce34:	898b      	ldrh	r3, [r1, #12]
 800ce36:	0005      	movs	r5, r0
 800ce38:	000c      	movs	r4, r1
 800ce3a:	0016      	movs	r6, r2
 800ce3c:	05db      	lsls	r3, r3, #23
 800ce3e:	d505      	bpl.n	800ce4c <__swrite+0x1c>
 800ce40:	230e      	movs	r3, #14
 800ce42:	5ec9      	ldrsh	r1, [r1, r3]
 800ce44:	2200      	movs	r2, #0
 800ce46:	2302      	movs	r3, #2
 800ce48:	f000 fa38 	bl	800d2bc <_lseek_r>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	4a05      	ldr	r2, [pc, #20]	; (800ce64 <__swrite+0x34>)
 800ce50:	0028      	movs	r0, r5
 800ce52:	4013      	ands	r3, r2
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	0032      	movs	r2, r6
 800ce58:	230e      	movs	r3, #14
 800ce5a:	5ee1      	ldrsh	r1, [r4, r3]
 800ce5c:	003b      	movs	r3, r7
 800ce5e:	f000 f895 	bl	800cf8c <_write_r>
 800ce62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce64:	ffffefff 	.word	0xffffefff

0800ce68 <__sseek>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	000c      	movs	r4, r1
 800ce6c:	250e      	movs	r5, #14
 800ce6e:	5f49      	ldrsh	r1, [r1, r5]
 800ce70:	f000 fa24 	bl	800d2bc <_lseek_r>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	1c42      	adds	r2, r0, #1
 800ce78:	d103      	bne.n	800ce82 <__sseek+0x1a>
 800ce7a:	4a05      	ldr	r2, [pc, #20]	; (800ce90 <__sseek+0x28>)
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	bd70      	pop	{r4, r5, r6, pc}
 800ce82:	2280      	movs	r2, #128	; 0x80
 800ce84:	0152      	lsls	r2, r2, #5
 800ce86:	4313      	orrs	r3, r2
 800ce88:	81a3      	strh	r3, [r4, #12]
 800ce8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce8c:	e7f8      	b.n	800ce80 <__sseek+0x18>
 800ce8e:	46c0      	nop			; (mov r8, r8)
 800ce90:	ffffefff 	.word	0xffffefff

0800ce94 <__sclose>:
 800ce94:	b510      	push	{r4, lr}
 800ce96:	230e      	movs	r3, #14
 800ce98:	5ec9      	ldrsh	r1, [r1, r3]
 800ce9a:	f000 f921 	bl	800d0e0 <_close_r>
 800ce9e:	bd10      	pop	{r4, pc}

0800cea0 <strncmp>:
 800cea0:	b530      	push	{r4, r5, lr}
 800cea2:	0005      	movs	r5, r0
 800cea4:	1e10      	subs	r0, r2, #0
 800cea6:	d008      	beq.n	800ceba <strncmp+0x1a>
 800cea8:	2400      	movs	r4, #0
 800ceaa:	3a01      	subs	r2, #1
 800ceac:	5d2b      	ldrb	r3, [r5, r4]
 800ceae:	5d08      	ldrb	r0, [r1, r4]
 800ceb0:	4283      	cmp	r3, r0
 800ceb2:	d101      	bne.n	800ceb8 <strncmp+0x18>
 800ceb4:	4294      	cmp	r4, r2
 800ceb6:	d101      	bne.n	800cebc <strncmp+0x1c>
 800ceb8:	1a18      	subs	r0, r3, r0
 800ceba:	bd30      	pop	{r4, r5, pc}
 800cebc:	3401      	adds	r4, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1f4      	bne.n	800ceac <strncmp+0xc>
 800cec2:	e7f9      	b.n	800ceb8 <strncmp+0x18>

0800cec4 <__swbuf_r>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	0005      	movs	r5, r0
 800cec8:	000e      	movs	r6, r1
 800ceca:	0014      	movs	r4, r2
 800cecc:	2800      	cmp	r0, #0
 800cece:	d004      	beq.n	800ceda <__swbuf_r+0x16>
 800ced0:	6983      	ldr	r3, [r0, #24]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <__swbuf_r+0x16>
 800ced6:	f7fe fa9f 	bl	800b418 <__sinit>
 800ceda:	4b22      	ldr	r3, [pc, #136]	; (800cf64 <__swbuf_r+0xa0>)
 800cedc:	429c      	cmp	r4, r3
 800cede:	d12e      	bne.n	800cf3e <__swbuf_r+0x7a>
 800cee0:	686c      	ldr	r4, [r5, #4]
 800cee2:	69a3      	ldr	r3, [r4, #24]
 800cee4:	60a3      	str	r3, [r4, #8]
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	071b      	lsls	r3, r3, #28
 800ceea:	d532      	bpl.n	800cf52 <__swbuf_r+0x8e>
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d02f      	beq.n	800cf52 <__swbuf_r+0x8e>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	6922      	ldr	r2, [r4, #16]
 800cef6:	b2f7      	uxtb	r7, r6
 800cef8:	1a98      	subs	r0, r3, r2
 800cefa:	6963      	ldr	r3, [r4, #20]
 800cefc:	b2f6      	uxtb	r6, r6
 800cefe:	4283      	cmp	r3, r0
 800cf00:	dc05      	bgt.n	800cf0e <__swbuf_r+0x4a>
 800cf02:	0021      	movs	r1, r4
 800cf04:	0028      	movs	r0, r5
 800cf06:	f000 f989 	bl	800d21c <_fflush_r>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d127      	bne.n	800cf5e <__swbuf_r+0x9a>
 800cf0e:	68a3      	ldr	r3, [r4, #8]
 800cf10:	3001      	adds	r0, #1
 800cf12:	3b01      	subs	r3, #1
 800cf14:	60a3      	str	r3, [r4, #8]
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	6022      	str	r2, [r4, #0]
 800cf1c:	701f      	strb	r7, [r3, #0]
 800cf1e:	6963      	ldr	r3, [r4, #20]
 800cf20:	4283      	cmp	r3, r0
 800cf22:	d004      	beq.n	800cf2e <__swbuf_r+0x6a>
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	07db      	lsls	r3, r3, #31
 800cf28:	d507      	bpl.n	800cf3a <__swbuf_r+0x76>
 800cf2a:	2e0a      	cmp	r6, #10
 800cf2c:	d105      	bne.n	800cf3a <__swbuf_r+0x76>
 800cf2e:	0021      	movs	r1, r4
 800cf30:	0028      	movs	r0, r5
 800cf32:	f000 f973 	bl	800d21c <_fflush_r>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d111      	bne.n	800cf5e <__swbuf_r+0x9a>
 800cf3a:	0030      	movs	r0, r6
 800cf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf3e:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <__swbuf_r+0xa4>)
 800cf40:	429c      	cmp	r4, r3
 800cf42:	d101      	bne.n	800cf48 <__swbuf_r+0x84>
 800cf44:	68ac      	ldr	r4, [r5, #8]
 800cf46:	e7cc      	b.n	800cee2 <__swbuf_r+0x1e>
 800cf48:	4b08      	ldr	r3, [pc, #32]	; (800cf6c <__swbuf_r+0xa8>)
 800cf4a:	429c      	cmp	r4, r3
 800cf4c:	d1c9      	bne.n	800cee2 <__swbuf_r+0x1e>
 800cf4e:	68ec      	ldr	r4, [r5, #12]
 800cf50:	e7c7      	b.n	800cee2 <__swbuf_r+0x1e>
 800cf52:	0021      	movs	r1, r4
 800cf54:	0028      	movs	r0, r5
 800cf56:	f000 f82d 	bl	800cfb4 <__swsetup_r>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d0c9      	beq.n	800cef2 <__swbuf_r+0x2e>
 800cf5e:	2601      	movs	r6, #1
 800cf60:	4276      	negs	r6, r6
 800cf62:	e7ea      	b.n	800cf3a <__swbuf_r+0x76>
 800cf64:	0800d964 	.word	0x0800d964
 800cf68:	0800d984 	.word	0x0800d984
 800cf6c:	0800d944 	.word	0x0800d944

0800cf70 <__ascii_wctomb>:
 800cf70:	0003      	movs	r3, r0
 800cf72:	1e08      	subs	r0, r1, #0
 800cf74:	d005      	beq.n	800cf82 <__ascii_wctomb+0x12>
 800cf76:	2aff      	cmp	r2, #255	; 0xff
 800cf78:	d904      	bls.n	800cf84 <__ascii_wctomb+0x14>
 800cf7a:	228a      	movs	r2, #138	; 0x8a
 800cf7c:	2001      	movs	r0, #1
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	4240      	negs	r0, r0
 800cf82:	4770      	bx	lr
 800cf84:	2001      	movs	r0, #1
 800cf86:	700a      	strb	r2, [r1, #0]
 800cf88:	e7fb      	b.n	800cf82 <__ascii_wctomb+0x12>
	...

0800cf8c <_write_r>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	0004      	movs	r4, r0
 800cf90:	0008      	movs	r0, r1
 800cf92:	0011      	movs	r1, r2
 800cf94:	001a      	movs	r2, r3
 800cf96:	2300      	movs	r3, #0
 800cf98:	4d05      	ldr	r5, [pc, #20]	; (800cfb0 <_write_r+0x24>)
 800cf9a:	602b      	str	r3, [r5, #0]
 800cf9c:	f7f6 fc25 	bl	80037ea <_write>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d103      	bne.n	800cfac <_write_r+0x20>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d000      	beq.n	800cfac <_write_r+0x20>
 800cfaa:	6023      	str	r3, [r4, #0]
 800cfac:	bd70      	pop	{r4, r5, r6, pc}
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	200005e4 	.word	0x200005e4

0800cfb4 <__swsetup_r>:
 800cfb4:	4b37      	ldr	r3, [pc, #220]	; (800d094 <__swsetup_r+0xe0>)
 800cfb6:	b570      	push	{r4, r5, r6, lr}
 800cfb8:	681d      	ldr	r5, [r3, #0]
 800cfba:	0006      	movs	r6, r0
 800cfbc:	000c      	movs	r4, r1
 800cfbe:	2d00      	cmp	r5, #0
 800cfc0:	d005      	beq.n	800cfce <__swsetup_r+0x1a>
 800cfc2:	69ab      	ldr	r3, [r5, #24]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d102      	bne.n	800cfce <__swsetup_r+0x1a>
 800cfc8:	0028      	movs	r0, r5
 800cfca:	f7fe fa25 	bl	800b418 <__sinit>
 800cfce:	4b32      	ldr	r3, [pc, #200]	; (800d098 <__swsetup_r+0xe4>)
 800cfd0:	429c      	cmp	r4, r3
 800cfd2:	d10f      	bne.n	800cff4 <__swsetup_r+0x40>
 800cfd4:	686c      	ldr	r4, [r5, #4]
 800cfd6:	230c      	movs	r3, #12
 800cfd8:	5ee2      	ldrsh	r2, [r4, r3]
 800cfda:	b293      	uxth	r3, r2
 800cfdc:	0711      	lsls	r1, r2, #28
 800cfde:	d42d      	bmi.n	800d03c <__swsetup_r+0x88>
 800cfe0:	06d9      	lsls	r1, r3, #27
 800cfe2:	d411      	bmi.n	800d008 <__swsetup_r+0x54>
 800cfe4:	2309      	movs	r3, #9
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	3337      	adds	r3, #55	; 0x37
 800cfec:	4313      	orrs	r3, r2
 800cfee:	81a3      	strh	r3, [r4, #12]
 800cff0:	4240      	negs	r0, r0
 800cff2:	bd70      	pop	{r4, r5, r6, pc}
 800cff4:	4b29      	ldr	r3, [pc, #164]	; (800d09c <__swsetup_r+0xe8>)
 800cff6:	429c      	cmp	r4, r3
 800cff8:	d101      	bne.n	800cffe <__swsetup_r+0x4a>
 800cffa:	68ac      	ldr	r4, [r5, #8]
 800cffc:	e7eb      	b.n	800cfd6 <__swsetup_r+0x22>
 800cffe:	4b28      	ldr	r3, [pc, #160]	; (800d0a0 <__swsetup_r+0xec>)
 800d000:	429c      	cmp	r4, r3
 800d002:	d1e8      	bne.n	800cfd6 <__swsetup_r+0x22>
 800d004:	68ec      	ldr	r4, [r5, #12]
 800d006:	e7e6      	b.n	800cfd6 <__swsetup_r+0x22>
 800d008:	075b      	lsls	r3, r3, #29
 800d00a:	d513      	bpl.n	800d034 <__swsetup_r+0x80>
 800d00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d00e:	2900      	cmp	r1, #0
 800d010:	d008      	beq.n	800d024 <__swsetup_r+0x70>
 800d012:	0023      	movs	r3, r4
 800d014:	3344      	adds	r3, #68	; 0x44
 800d016:	4299      	cmp	r1, r3
 800d018:	d002      	beq.n	800d020 <__swsetup_r+0x6c>
 800d01a:	0030      	movs	r0, r6
 800d01c:	f7ff fb36 	bl	800c68c <_free_r>
 800d020:	2300      	movs	r3, #0
 800d022:	6363      	str	r3, [r4, #52]	; 0x34
 800d024:	2224      	movs	r2, #36	; 0x24
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	4393      	bics	r3, r2
 800d02a:	81a3      	strh	r3, [r4, #12]
 800d02c:	2300      	movs	r3, #0
 800d02e:	6063      	str	r3, [r4, #4]
 800d030:	6923      	ldr	r3, [r4, #16]
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	2308      	movs	r3, #8
 800d036:	89a2      	ldrh	r2, [r4, #12]
 800d038:	4313      	orrs	r3, r2
 800d03a:	81a3      	strh	r3, [r4, #12]
 800d03c:	6923      	ldr	r3, [r4, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10b      	bne.n	800d05a <__swsetup_r+0xa6>
 800d042:	21a0      	movs	r1, #160	; 0xa0
 800d044:	2280      	movs	r2, #128	; 0x80
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	0089      	lsls	r1, r1, #2
 800d04a:	0092      	lsls	r2, r2, #2
 800d04c:	400b      	ands	r3, r1
 800d04e:	4293      	cmp	r3, r2
 800d050:	d003      	beq.n	800d05a <__swsetup_r+0xa6>
 800d052:	0021      	movs	r1, r4
 800d054:	0030      	movs	r0, r6
 800d056:	f000 f96d 	bl	800d334 <__smakebuf_r>
 800d05a:	220c      	movs	r2, #12
 800d05c:	5ea3      	ldrsh	r3, [r4, r2]
 800d05e:	2001      	movs	r0, #1
 800d060:	001a      	movs	r2, r3
 800d062:	b299      	uxth	r1, r3
 800d064:	4002      	ands	r2, r0
 800d066:	4203      	tst	r3, r0
 800d068:	d00f      	beq.n	800d08a <__swsetup_r+0xd6>
 800d06a:	2200      	movs	r2, #0
 800d06c:	60a2      	str	r2, [r4, #8]
 800d06e:	6962      	ldr	r2, [r4, #20]
 800d070:	4252      	negs	r2, r2
 800d072:	61a2      	str	r2, [r4, #24]
 800d074:	2000      	movs	r0, #0
 800d076:	6922      	ldr	r2, [r4, #16]
 800d078:	4282      	cmp	r2, r0
 800d07a:	d1ba      	bne.n	800cff2 <__swsetup_r+0x3e>
 800d07c:	060a      	lsls	r2, r1, #24
 800d07e:	d5b8      	bpl.n	800cff2 <__swsetup_r+0x3e>
 800d080:	2240      	movs	r2, #64	; 0x40
 800d082:	4313      	orrs	r3, r2
 800d084:	81a3      	strh	r3, [r4, #12]
 800d086:	3801      	subs	r0, #1
 800d088:	e7b3      	b.n	800cff2 <__swsetup_r+0x3e>
 800d08a:	0788      	lsls	r0, r1, #30
 800d08c:	d400      	bmi.n	800d090 <__swsetup_r+0xdc>
 800d08e:	6962      	ldr	r2, [r4, #20]
 800d090:	60a2      	str	r2, [r4, #8]
 800d092:	e7ef      	b.n	800d074 <__swsetup_r+0xc0>
 800d094:	20000030 	.word	0x20000030
 800d098:	0800d964 	.word	0x0800d964
 800d09c:	0800d984 	.word	0x0800d984
 800d0a0:	0800d944 	.word	0x0800d944

0800d0a4 <__assert_func>:
 800d0a4:	b530      	push	{r4, r5, lr}
 800d0a6:	0014      	movs	r4, r2
 800d0a8:	001a      	movs	r2, r3
 800d0aa:	4b09      	ldr	r3, [pc, #36]	; (800d0d0 <__assert_func+0x2c>)
 800d0ac:	0005      	movs	r5, r0
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	68d8      	ldr	r0, [r3, #12]
 800d0b4:	4b07      	ldr	r3, [pc, #28]	; (800d0d4 <__assert_func+0x30>)
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d101      	bne.n	800d0be <__assert_func+0x1a>
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <__assert_func+0x34>)
 800d0bc:	001c      	movs	r4, r3
 800d0be:	9301      	str	r3, [sp, #4]
 800d0c0:	9100      	str	r1, [sp, #0]
 800d0c2:	002b      	movs	r3, r5
 800d0c4:	4905      	ldr	r1, [pc, #20]	; (800d0dc <__assert_func+0x38>)
 800d0c6:	9402      	str	r4, [sp, #8]
 800d0c8:	f000 f8e8 	bl	800d29c <fiprintf>
 800d0cc:	f000 f9de 	bl	800d48c <abort>
 800d0d0:	20000030 	.word	0x20000030
 800d0d4:	0800db8d 	.word	0x0800db8d
 800d0d8:	0800dbc8 	.word	0x0800dbc8
 800d0dc:	0800db9a 	.word	0x0800db9a

0800d0e0 <_close_r>:
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	b570      	push	{r4, r5, r6, lr}
 800d0e4:	4d06      	ldr	r5, [pc, #24]	; (800d100 <_close_r+0x20>)
 800d0e6:	0004      	movs	r4, r0
 800d0e8:	0008      	movs	r0, r1
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	f7f6 fb99 	bl	8003822 <_close>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d103      	bne.n	800d0fc <_close_r+0x1c>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d000      	beq.n	800d0fc <_close_r+0x1c>
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	bd70      	pop	{r4, r5, r6, pc}
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	200005e4 	.word	0x200005e4

0800d104 <__sflush_r>:
 800d104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d106:	898b      	ldrh	r3, [r1, #12]
 800d108:	0005      	movs	r5, r0
 800d10a:	000c      	movs	r4, r1
 800d10c:	071a      	lsls	r2, r3, #28
 800d10e:	d45f      	bmi.n	800d1d0 <__sflush_r+0xcc>
 800d110:	684a      	ldr	r2, [r1, #4]
 800d112:	2a00      	cmp	r2, #0
 800d114:	dc04      	bgt.n	800d120 <__sflush_r+0x1c>
 800d116:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d118:	2a00      	cmp	r2, #0
 800d11a:	dc01      	bgt.n	800d120 <__sflush_r+0x1c>
 800d11c:	2000      	movs	r0, #0
 800d11e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d120:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d122:	2f00      	cmp	r7, #0
 800d124:	d0fa      	beq.n	800d11c <__sflush_r+0x18>
 800d126:	2200      	movs	r2, #0
 800d128:	2180      	movs	r1, #128	; 0x80
 800d12a:	682e      	ldr	r6, [r5, #0]
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	001a      	movs	r2, r3
 800d130:	0149      	lsls	r1, r1, #5
 800d132:	400a      	ands	r2, r1
 800d134:	420b      	tst	r3, r1
 800d136:	d034      	beq.n	800d1a2 <__sflush_r+0x9e>
 800d138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	075b      	lsls	r3, r3, #29
 800d13e:	d506      	bpl.n	800d14e <__sflush_r+0x4a>
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	1ac0      	subs	r0, r0, r3
 800d144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d146:	2b00      	cmp	r3, #0
 800d148:	d001      	beq.n	800d14e <__sflush_r+0x4a>
 800d14a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d14c:	1ac0      	subs	r0, r0, r3
 800d14e:	0002      	movs	r2, r0
 800d150:	6a21      	ldr	r1, [r4, #32]
 800d152:	2300      	movs	r3, #0
 800d154:	0028      	movs	r0, r5
 800d156:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d158:	47b8      	blx	r7
 800d15a:	89a1      	ldrh	r1, [r4, #12]
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d106      	bne.n	800d16e <__sflush_r+0x6a>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	2b1d      	cmp	r3, #29
 800d164:	d831      	bhi.n	800d1ca <__sflush_r+0xc6>
 800d166:	4a2c      	ldr	r2, [pc, #176]	; (800d218 <__sflush_r+0x114>)
 800d168:	40da      	lsrs	r2, r3
 800d16a:	07d3      	lsls	r3, r2, #31
 800d16c:	d52d      	bpl.n	800d1ca <__sflush_r+0xc6>
 800d16e:	2300      	movs	r3, #0
 800d170:	6063      	str	r3, [r4, #4]
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	04cb      	lsls	r3, r1, #19
 800d178:	d505      	bpl.n	800d186 <__sflush_r+0x82>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	d102      	bne.n	800d184 <__sflush_r+0x80>
 800d17e:	682b      	ldr	r3, [r5, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d100      	bne.n	800d186 <__sflush_r+0x82>
 800d184:	6560      	str	r0, [r4, #84]	; 0x54
 800d186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d188:	602e      	str	r6, [r5, #0]
 800d18a:	2900      	cmp	r1, #0
 800d18c:	d0c6      	beq.n	800d11c <__sflush_r+0x18>
 800d18e:	0023      	movs	r3, r4
 800d190:	3344      	adds	r3, #68	; 0x44
 800d192:	4299      	cmp	r1, r3
 800d194:	d002      	beq.n	800d19c <__sflush_r+0x98>
 800d196:	0028      	movs	r0, r5
 800d198:	f7ff fa78 	bl	800c68c <_free_r>
 800d19c:	2000      	movs	r0, #0
 800d19e:	6360      	str	r0, [r4, #52]	; 0x34
 800d1a0:	e7bd      	b.n	800d11e <__sflush_r+0x1a>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	0028      	movs	r0, r5
 800d1a6:	6a21      	ldr	r1, [r4, #32]
 800d1a8:	47b8      	blx	r7
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	d1c5      	bne.n	800d13a <__sflush_r+0x36>
 800d1ae:	682b      	ldr	r3, [r5, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d0c2      	beq.n	800d13a <__sflush_r+0x36>
 800d1b4:	2b1d      	cmp	r3, #29
 800d1b6:	d001      	beq.n	800d1bc <__sflush_r+0xb8>
 800d1b8:	2b16      	cmp	r3, #22
 800d1ba:	d101      	bne.n	800d1c0 <__sflush_r+0xbc>
 800d1bc:	602e      	str	r6, [r5, #0]
 800d1be:	e7ad      	b.n	800d11c <__sflush_r+0x18>
 800d1c0:	2340      	movs	r3, #64	; 0x40
 800d1c2:	89a2      	ldrh	r2, [r4, #12]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	81a3      	strh	r3, [r4, #12]
 800d1c8:	e7a9      	b.n	800d11e <__sflush_r+0x1a>
 800d1ca:	2340      	movs	r3, #64	; 0x40
 800d1cc:	430b      	orrs	r3, r1
 800d1ce:	e7fa      	b.n	800d1c6 <__sflush_r+0xc2>
 800d1d0:	690f      	ldr	r7, [r1, #16]
 800d1d2:	2f00      	cmp	r7, #0
 800d1d4:	d0a2      	beq.n	800d11c <__sflush_r+0x18>
 800d1d6:	680a      	ldr	r2, [r1, #0]
 800d1d8:	600f      	str	r7, [r1, #0]
 800d1da:	1bd2      	subs	r2, r2, r7
 800d1dc:	9201      	str	r2, [sp, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	079b      	lsls	r3, r3, #30
 800d1e2:	d100      	bne.n	800d1e6 <__sflush_r+0xe2>
 800d1e4:	694a      	ldr	r2, [r1, #20]
 800d1e6:	60a2      	str	r2, [r4, #8]
 800d1e8:	9b01      	ldr	r3, [sp, #4]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	dc00      	bgt.n	800d1f0 <__sflush_r+0xec>
 800d1ee:	e795      	b.n	800d11c <__sflush_r+0x18>
 800d1f0:	003a      	movs	r2, r7
 800d1f2:	0028      	movs	r0, r5
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	6a21      	ldr	r1, [r4, #32]
 800d1f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1fa:	47b0      	blx	r6
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	dc06      	bgt.n	800d20e <__sflush_r+0x10a>
 800d200:	2340      	movs	r3, #64	; 0x40
 800d202:	2001      	movs	r0, #1
 800d204:	89a2      	ldrh	r2, [r4, #12]
 800d206:	4240      	negs	r0, r0
 800d208:	4313      	orrs	r3, r2
 800d20a:	81a3      	strh	r3, [r4, #12]
 800d20c:	e787      	b.n	800d11e <__sflush_r+0x1a>
 800d20e:	9b01      	ldr	r3, [sp, #4]
 800d210:	183f      	adds	r7, r7, r0
 800d212:	1a1b      	subs	r3, r3, r0
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	e7e7      	b.n	800d1e8 <__sflush_r+0xe4>
 800d218:	20400001 	.word	0x20400001

0800d21c <_fflush_r>:
 800d21c:	690b      	ldr	r3, [r1, #16]
 800d21e:	b570      	push	{r4, r5, r6, lr}
 800d220:	0005      	movs	r5, r0
 800d222:	000c      	movs	r4, r1
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <_fflush_r+0x12>
 800d228:	2500      	movs	r5, #0
 800d22a:	0028      	movs	r0, r5
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	2800      	cmp	r0, #0
 800d230:	d004      	beq.n	800d23c <_fflush_r+0x20>
 800d232:	6983      	ldr	r3, [r0, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <_fflush_r+0x20>
 800d238:	f7fe f8ee 	bl	800b418 <__sinit>
 800d23c:	4b14      	ldr	r3, [pc, #80]	; (800d290 <_fflush_r+0x74>)
 800d23e:	429c      	cmp	r4, r3
 800d240:	d11b      	bne.n	800d27a <_fflush_r+0x5e>
 800d242:	686c      	ldr	r4, [r5, #4]
 800d244:	220c      	movs	r2, #12
 800d246:	5ea3      	ldrsh	r3, [r4, r2]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d0ed      	beq.n	800d228 <_fflush_r+0xc>
 800d24c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d24e:	07d2      	lsls	r2, r2, #31
 800d250:	d404      	bmi.n	800d25c <_fflush_r+0x40>
 800d252:	059b      	lsls	r3, r3, #22
 800d254:	d402      	bmi.n	800d25c <_fflush_r+0x40>
 800d256:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d258:	f7fe fcf7 	bl	800bc4a <__retarget_lock_acquire_recursive>
 800d25c:	0028      	movs	r0, r5
 800d25e:	0021      	movs	r1, r4
 800d260:	f7ff ff50 	bl	800d104 <__sflush_r>
 800d264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d266:	0005      	movs	r5, r0
 800d268:	07db      	lsls	r3, r3, #31
 800d26a:	d4de      	bmi.n	800d22a <_fflush_r+0xe>
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	059b      	lsls	r3, r3, #22
 800d270:	d4db      	bmi.n	800d22a <_fflush_r+0xe>
 800d272:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d274:	f7fe fcea 	bl	800bc4c <__retarget_lock_release_recursive>
 800d278:	e7d7      	b.n	800d22a <_fflush_r+0xe>
 800d27a:	4b06      	ldr	r3, [pc, #24]	; (800d294 <_fflush_r+0x78>)
 800d27c:	429c      	cmp	r4, r3
 800d27e:	d101      	bne.n	800d284 <_fflush_r+0x68>
 800d280:	68ac      	ldr	r4, [r5, #8]
 800d282:	e7df      	b.n	800d244 <_fflush_r+0x28>
 800d284:	4b04      	ldr	r3, [pc, #16]	; (800d298 <_fflush_r+0x7c>)
 800d286:	429c      	cmp	r4, r3
 800d288:	d1dc      	bne.n	800d244 <_fflush_r+0x28>
 800d28a:	68ec      	ldr	r4, [r5, #12]
 800d28c:	e7da      	b.n	800d244 <_fflush_r+0x28>
 800d28e:	46c0      	nop			; (mov r8, r8)
 800d290:	0800d964 	.word	0x0800d964
 800d294:	0800d984 	.word	0x0800d984
 800d298:	0800d944 	.word	0x0800d944

0800d29c <fiprintf>:
 800d29c:	b40e      	push	{r1, r2, r3}
 800d29e:	b503      	push	{r0, r1, lr}
 800d2a0:	0001      	movs	r1, r0
 800d2a2:	ab03      	add	r3, sp, #12
 800d2a4:	4804      	ldr	r0, [pc, #16]	; (800d2b8 <fiprintf+0x1c>)
 800d2a6:	cb04      	ldmia	r3!, {r2}
 800d2a8:	6800      	ldr	r0, [r0, #0]
 800d2aa:	9301      	str	r3, [sp, #4]
 800d2ac:	f7ff fc5a 	bl	800cb64 <_vfiprintf_r>
 800d2b0:	b002      	add	sp, #8
 800d2b2:	bc08      	pop	{r3}
 800d2b4:	b003      	add	sp, #12
 800d2b6:	4718      	bx	r3
 800d2b8:	20000030 	.word	0x20000030

0800d2bc <_lseek_r>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	0004      	movs	r4, r0
 800d2c0:	0008      	movs	r0, r1
 800d2c2:	0011      	movs	r1, r2
 800d2c4:	001a      	movs	r2, r3
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	4d05      	ldr	r5, [pc, #20]	; (800d2e0 <_lseek_r+0x24>)
 800d2ca:	602b      	str	r3, [r5, #0]
 800d2cc:	f7f6 faca 	bl	8003864 <_lseek>
 800d2d0:	1c43      	adds	r3, r0, #1
 800d2d2:	d103      	bne.n	800d2dc <_lseek_r+0x20>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d000      	beq.n	800d2dc <_lseek_r+0x20>
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	46c0      	nop			; (mov r8, r8)
 800d2e0:	200005e4 	.word	0x200005e4

0800d2e4 <__swhatbuf_r>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	000e      	movs	r6, r1
 800d2e8:	001d      	movs	r5, r3
 800d2ea:	230e      	movs	r3, #14
 800d2ec:	5ec9      	ldrsh	r1, [r1, r3]
 800d2ee:	0014      	movs	r4, r2
 800d2f0:	b096      	sub	sp, #88	; 0x58
 800d2f2:	2900      	cmp	r1, #0
 800d2f4:	da08      	bge.n	800d308 <__swhatbuf_r+0x24>
 800d2f6:	220c      	movs	r2, #12
 800d2f8:	5eb3      	ldrsh	r3, [r6, r2]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	602a      	str	r2, [r5, #0]
 800d2fe:	061b      	lsls	r3, r3, #24
 800d300:	d411      	bmi.n	800d326 <__swhatbuf_r+0x42>
 800d302:	2380      	movs	r3, #128	; 0x80
 800d304:	00db      	lsls	r3, r3, #3
 800d306:	e00f      	b.n	800d328 <__swhatbuf_r+0x44>
 800d308:	466a      	mov	r2, sp
 800d30a:	f000 f8c7 	bl	800d49c <_fstat_r>
 800d30e:	2800      	cmp	r0, #0
 800d310:	dbf1      	blt.n	800d2f6 <__swhatbuf_r+0x12>
 800d312:	23f0      	movs	r3, #240	; 0xf0
 800d314:	9901      	ldr	r1, [sp, #4]
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	4019      	ands	r1, r3
 800d31a:	4b05      	ldr	r3, [pc, #20]	; (800d330 <__swhatbuf_r+0x4c>)
 800d31c:	18c9      	adds	r1, r1, r3
 800d31e:	424b      	negs	r3, r1
 800d320:	4159      	adcs	r1, r3
 800d322:	6029      	str	r1, [r5, #0]
 800d324:	e7ed      	b.n	800d302 <__swhatbuf_r+0x1e>
 800d326:	2340      	movs	r3, #64	; 0x40
 800d328:	2000      	movs	r0, #0
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	b016      	add	sp, #88	; 0x58
 800d32e:	bd70      	pop	{r4, r5, r6, pc}
 800d330:	ffffe000 	.word	0xffffe000

0800d334 <__smakebuf_r>:
 800d334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d336:	2602      	movs	r6, #2
 800d338:	898b      	ldrh	r3, [r1, #12]
 800d33a:	0005      	movs	r5, r0
 800d33c:	000c      	movs	r4, r1
 800d33e:	4233      	tst	r3, r6
 800d340:	d006      	beq.n	800d350 <__smakebuf_r+0x1c>
 800d342:	0023      	movs	r3, r4
 800d344:	3347      	adds	r3, #71	; 0x47
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	6123      	str	r3, [r4, #16]
 800d34a:	2301      	movs	r3, #1
 800d34c:	6163      	str	r3, [r4, #20]
 800d34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d350:	466a      	mov	r2, sp
 800d352:	ab01      	add	r3, sp, #4
 800d354:	f7ff ffc6 	bl	800d2e4 <__swhatbuf_r>
 800d358:	9900      	ldr	r1, [sp, #0]
 800d35a:	0007      	movs	r7, r0
 800d35c:	0028      	movs	r0, r5
 800d35e:	f7ff fa01 	bl	800c764 <_malloc_r>
 800d362:	2800      	cmp	r0, #0
 800d364:	d108      	bne.n	800d378 <__smakebuf_r+0x44>
 800d366:	220c      	movs	r2, #12
 800d368:	5ea3      	ldrsh	r3, [r4, r2]
 800d36a:	059a      	lsls	r2, r3, #22
 800d36c:	d4ef      	bmi.n	800d34e <__smakebuf_r+0x1a>
 800d36e:	2203      	movs	r2, #3
 800d370:	4393      	bics	r3, r2
 800d372:	431e      	orrs	r6, r3
 800d374:	81a6      	strh	r6, [r4, #12]
 800d376:	e7e4      	b.n	800d342 <__smakebuf_r+0xe>
 800d378:	4b0f      	ldr	r3, [pc, #60]	; (800d3b8 <__smakebuf_r+0x84>)
 800d37a:	62ab      	str	r3, [r5, #40]	; 0x28
 800d37c:	2380      	movs	r3, #128	; 0x80
 800d37e:	89a2      	ldrh	r2, [r4, #12]
 800d380:	6020      	str	r0, [r4, #0]
 800d382:	4313      	orrs	r3, r2
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	9b00      	ldr	r3, [sp, #0]
 800d388:	6120      	str	r0, [r4, #16]
 800d38a:	6163      	str	r3, [r4, #20]
 800d38c:	9b01      	ldr	r3, [sp, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00d      	beq.n	800d3ae <__smakebuf_r+0x7a>
 800d392:	0028      	movs	r0, r5
 800d394:	230e      	movs	r3, #14
 800d396:	5ee1      	ldrsh	r1, [r4, r3]
 800d398:	f000 f892 	bl	800d4c0 <_isatty_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d006      	beq.n	800d3ae <__smakebuf_r+0x7a>
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	4393      	bics	r3, r2
 800d3a6:	001a      	movs	r2, r3
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	89a0      	ldrh	r0, [r4, #12]
 800d3b0:	4307      	orrs	r7, r0
 800d3b2:	81a7      	strh	r7, [r4, #12]
 800d3b4:	e7cb      	b.n	800d34e <__smakebuf_r+0x1a>
 800d3b6:	46c0      	nop			; (mov r8, r8)
 800d3b8:	0800b39d 	.word	0x0800b39d

0800d3bc <memmove>:
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	4288      	cmp	r0, r1
 800d3c0:	d902      	bls.n	800d3c8 <memmove+0xc>
 800d3c2:	188b      	adds	r3, r1, r2
 800d3c4:	4298      	cmp	r0, r3
 800d3c6:	d303      	bcc.n	800d3d0 <memmove+0x14>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e007      	b.n	800d3dc <memmove+0x20>
 800d3cc:	5c8b      	ldrb	r3, [r1, r2]
 800d3ce:	5483      	strb	r3, [r0, r2]
 800d3d0:	3a01      	subs	r2, #1
 800d3d2:	d2fb      	bcs.n	800d3cc <memmove+0x10>
 800d3d4:	bd10      	pop	{r4, pc}
 800d3d6:	5ccc      	ldrb	r4, [r1, r3]
 800d3d8:	54c4      	strb	r4, [r0, r3]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d1fa      	bne.n	800d3d6 <memmove+0x1a>
 800d3e0:	e7f8      	b.n	800d3d4 <memmove+0x18>
	...

0800d3e4 <__malloc_lock>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4802      	ldr	r0, [pc, #8]	; (800d3f0 <__malloc_lock+0xc>)
 800d3e8:	f7fe fc2f 	bl	800bc4a <__retarget_lock_acquire_recursive>
 800d3ec:	bd10      	pop	{r4, pc}
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	200005d8 	.word	0x200005d8

0800d3f4 <__malloc_unlock>:
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	4802      	ldr	r0, [pc, #8]	; (800d400 <__malloc_unlock+0xc>)
 800d3f8:	f7fe fc28 	bl	800bc4c <__retarget_lock_release_recursive>
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	46c0      	nop			; (mov r8, r8)
 800d400:	200005d8 	.word	0x200005d8

0800d404 <_realloc_r>:
 800d404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d406:	0007      	movs	r7, r0
 800d408:	000e      	movs	r6, r1
 800d40a:	0014      	movs	r4, r2
 800d40c:	2900      	cmp	r1, #0
 800d40e:	d105      	bne.n	800d41c <_realloc_r+0x18>
 800d410:	0011      	movs	r1, r2
 800d412:	f7ff f9a7 	bl	800c764 <_malloc_r>
 800d416:	0005      	movs	r5, r0
 800d418:	0028      	movs	r0, r5
 800d41a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d41c:	2a00      	cmp	r2, #0
 800d41e:	d103      	bne.n	800d428 <_realloc_r+0x24>
 800d420:	f7ff f934 	bl	800c68c <_free_r>
 800d424:	0025      	movs	r5, r4
 800d426:	e7f7      	b.n	800d418 <_realloc_r+0x14>
 800d428:	f000 f85c 	bl	800d4e4 <_malloc_usable_size_r>
 800d42c:	9001      	str	r0, [sp, #4]
 800d42e:	4284      	cmp	r4, r0
 800d430:	d803      	bhi.n	800d43a <_realloc_r+0x36>
 800d432:	0035      	movs	r5, r6
 800d434:	0843      	lsrs	r3, r0, #1
 800d436:	42a3      	cmp	r3, r4
 800d438:	d3ee      	bcc.n	800d418 <_realloc_r+0x14>
 800d43a:	0021      	movs	r1, r4
 800d43c:	0038      	movs	r0, r7
 800d43e:	f7ff f991 	bl	800c764 <_malloc_r>
 800d442:	1e05      	subs	r5, r0, #0
 800d444:	d0e8      	beq.n	800d418 <_realloc_r+0x14>
 800d446:	9b01      	ldr	r3, [sp, #4]
 800d448:	0022      	movs	r2, r4
 800d44a:	429c      	cmp	r4, r3
 800d44c:	d900      	bls.n	800d450 <_realloc_r+0x4c>
 800d44e:	001a      	movs	r2, r3
 800d450:	0031      	movs	r1, r6
 800d452:	0028      	movs	r0, r5
 800d454:	f7fb fb4c 	bl	8008af0 <memcpy>
 800d458:	0031      	movs	r1, r6
 800d45a:	0038      	movs	r0, r7
 800d45c:	f7ff f916 	bl	800c68c <_free_r>
 800d460:	e7da      	b.n	800d418 <_realloc_r+0x14>
	...

0800d464 <_read_r>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	0004      	movs	r4, r0
 800d468:	0008      	movs	r0, r1
 800d46a:	0011      	movs	r1, r2
 800d46c:	001a      	movs	r2, r3
 800d46e:	2300      	movs	r3, #0
 800d470:	4d05      	ldr	r5, [pc, #20]	; (800d488 <_read_r+0x24>)
 800d472:	602b      	str	r3, [r5, #0]
 800d474:	f7f6 f99c 	bl	80037b0 <_read>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d103      	bne.n	800d484 <_read_r+0x20>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d000      	beq.n	800d484 <_read_r+0x20>
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	bd70      	pop	{r4, r5, r6, pc}
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	200005e4 	.word	0x200005e4

0800d48c <abort>:
 800d48c:	2006      	movs	r0, #6
 800d48e:	b510      	push	{r4, lr}
 800d490:	f000 f85a 	bl	800d548 <raise>
 800d494:	2001      	movs	r0, #1
 800d496:	f7f6 f97f 	bl	8003798 <_exit>
	...

0800d49c <_fstat_r>:
 800d49c:	2300      	movs	r3, #0
 800d49e:	b570      	push	{r4, r5, r6, lr}
 800d4a0:	4d06      	ldr	r5, [pc, #24]	; (800d4bc <_fstat_r+0x20>)
 800d4a2:	0004      	movs	r4, r0
 800d4a4:	0008      	movs	r0, r1
 800d4a6:	0011      	movs	r1, r2
 800d4a8:	602b      	str	r3, [r5, #0]
 800d4aa:	f7f6 f9c4 	bl	8003836 <_fstat>
 800d4ae:	1c43      	adds	r3, r0, #1
 800d4b0:	d103      	bne.n	800d4ba <_fstat_r+0x1e>
 800d4b2:	682b      	ldr	r3, [r5, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d000      	beq.n	800d4ba <_fstat_r+0x1e>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd70      	pop	{r4, r5, r6, pc}
 800d4bc:	200005e4 	.word	0x200005e4

0800d4c0 <_isatty_r>:
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	b570      	push	{r4, r5, r6, lr}
 800d4c4:	4d06      	ldr	r5, [pc, #24]	; (800d4e0 <_isatty_r+0x20>)
 800d4c6:	0004      	movs	r4, r0
 800d4c8:	0008      	movs	r0, r1
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	f7f6 f9c1 	bl	8003852 <_isatty>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	d103      	bne.n	800d4dc <_isatty_r+0x1c>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d000      	beq.n	800d4dc <_isatty_r+0x1c>
 800d4da:	6023      	str	r3, [r4, #0]
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	46c0      	nop			; (mov r8, r8)
 800d4e0:	200005e4 	.word	0x200005e4

0800d4e4 <_malloc_usable_size_r>:
 800d4e4:	1f0b      	subs	r3, r1, #4
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	1f18      	subs	r0, r3, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da01      	bge.n	800d4f2 <_malloc_usable_size_r+0xe>
 800d4ee:	580b      	ldr	r3, [r1, r0]
 800d4f0:	18c0      	adds	r0, r0, r3
 800d4f2:	4770      	bx	lr

0800d4f4 <_raise_r>:
 800d4f4:	b570      	push	{r4, r5, r6, lr}
 800d4f6:	0004      	movs	r4, r0
 800d4f8:	000d      	movs	r5, r1
 800d4fa:	291f      	cmp	r1, #31
 800d4fc:	d904      	bls.n	800d508 <_raise_r+0x14>
 800d4fe:	2316      	movs	r3, #22
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	2001      	movs	r0, #1
 800d504:	4240      	negs	r0, r0
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d004      	beq.n	800d518 <_raise_r+0x24>
 800d50e:	008a      	lsls	r2, r1, #2
 800d510:	189b      	adds	r3, r3, r2
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	2a00      	cmp	r2, #0
 800d516:	d108      	bne.n	800d52a <_raise_r+0x36>
 800d518:	0020      	movs	r0, r4
 800d51a:	f000 f831 	bl	800d580 <_getpid_r>
 800d51e:	002a      	movs	r2, r5
 800d520:	0001      	movs	r1, r0
 800d522:	0020      	movs	r0, r4
 800d524:	f000 f81a 	bl	800d55c <_kill_r>
 800d528:	e7ed      	b.n	800d506 <_raise_r+0x12>
 800d52a:	2000      	movs	r0, #0
 800d52c:	2a01      	cmp	r2, #1
 800d52e:	d0ea      	beq.n	800d506 <_raise_r+0x12>
 800d530:	1c51      	adds	r1, r2, #1
 800d532:	d103      	bne.n	800d53c <_raise_r+0x48>
 800d534:	2316      	movs	r3, #22
 800d536:	3001      	adds	r0, #1
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	e7e4      	b.n	800d506 <_raise_r+0x12>
 800d53c:	2400      	movs	r4, #0
 800d53e:	0028      	movs	r0, r5
 800d540:	601c      	str	r4, [r3, #0]
 800d542:	4790      	blx	r2
 800d544:	0020      	movs	r0, r4
 800d546:	e7de      	b.n	800d506 <_raise_r+0x12>

0800d548 <raise>:
 800d548:	b510      	push	{r4, lr}
 800d54a:	4b03      	ldr	r3, [pc, #12]	; (800d558 <raise+0x10>)
 800d54c:	0001      	movs	r1, r0
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	f7ff ffd0 	bl	800d4f4 <_raise_r>
 800d554:	bd10      	pop	{r4, pc}
 800d556:	46c0      	nop			; (mov r8, r8)
 800d558:	20000030 	.word	0x20000030

0800d55c <_kill_r>:
 800d55c:	2300      	movs	r3, #0
 800d55e:	b570      	push	{r4, r5, r6, lr}
 800d560:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_kill_r+0x20>)
 800d562:	0004      	movs	r4, r0
 800d564:	0008      	movs	r0, r1
 800d566:	0011      	movs	r1, r2
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f7f6 f905 	bl	8003778 <_kill>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	d103      	bne.n	800d57a <_kill_r+0x1e>
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d000      	beq.n	800d57a <_kill_r+0x1e>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	200005e4 	.word	0x200005e4

0800d580 <_getpid_r>:
 800d580:	b510      	push	{r4, lr}
 800d582:	f7f6 f8f3 	bl	800376c <_getpid>
 800d586:	bd10      	pop	{r4, pc}

0800d588 <_init>:
 800d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58a:	46c0      	nop			; (mov r8, r8)
 800d58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58e:	bc08      	pop	{r3}
 800d590:	469e      	mov	lr, r3
 800d592:	4770      	bx	lr

0800d594 <_fini>:
 800d594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d596:	46c0      	nop			; (mov r8, r8)
 800d598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59a:	bc08      	pop	{r3}
 800d59c:	469e      	mov	lr, r3
 800d59e:	4770      	bx	lr
