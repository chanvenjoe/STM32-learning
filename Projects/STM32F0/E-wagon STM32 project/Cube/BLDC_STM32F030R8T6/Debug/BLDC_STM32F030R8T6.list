
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  0800d668  0800d668  0001d668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcac  0800dcac  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcac  0800dcac  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcac  0800dcac  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcac  0800dcac  0001dcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcb0  0800dcb0  0001dcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800dcb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000204  0800deb8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800deb8  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001193e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af9  00000000  00000000  00031b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00034668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004810  00000000  00000000  000362d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0b  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c033  00000000  00000000  0004f4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a60  00000000  00000000  000bb570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d64c 	.word	0x0800d64c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800d64c 	.word	0x0800d64c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faaf 	bl	80019a0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9ff 	bl	8001850 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 faa1 	bl	80019a0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa97 	bl	80019a0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa27 	bl	80018d4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa1d 	bl	80018d4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f8ef 	bl	80026a0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fd38 	bl	8001f40 <__aeabi_dsub>
 80004d0:	f002 f8e6 	bl	80026a0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 fa9d 	bl	8001a68 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f002 f91a 	bl	800276c <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 fa94 	bl	8001a68 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fcfa 	bl	8001f40 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f002 f8d3 	bl	800270c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 fa7d 	bl	8001a68 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f002 f8fa 	bl	800276c <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 fb36 	bl	8000bec <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46c6      	mov	lr, r8
 800058c:	0243      	lsls	r3, r0, #9
 800058e:	0a5b      	lsrs	r3, r3, #9
 8000590:	024e      	lsls	r6, r1, #9
 8000592:	0045      	lsls	r5, r0, #1
 8000594:	004f      	lsls	r7, r1, #1
 8000596:	00da      	lsls	r2, r3, #3
 8000598:	0fc4      	lsrs	r4, r0, #31
 800059a:	469c      	mov	ip, r3
 800059c:	0a70      	lsrs	r0, r6, #9
 800059e:	4690      	mov	r8, r2
 80005a0:	b500      	push	{lr}
 80005a2:	0e2d      	lsrs	r5, r5, #24
 80005a4:	0e3f      	lsrs	r7, r7, #24
 80005a6:	0fc9      	lsrs	r1, r1, #31
 80005a8:	09b6      	lsrs	r6, r6, #6
 80005aa:	428c      	cmp	r4, r1
 80005ac:	d04b      	beq.n	8000646 <__aeabi_fadd+0xbe>
 80005ae:	1bea      	subs	r2, r5, r7
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	dd36      	ble.n	8000622 <__aeabi_fadd+0x9a>
 80005b4:	2f00      	cmp	r7, #0
 80005b6:	d061      	beq.n	800067c <__aeabi_fadd+0xf4>
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x36>
 80005bc:	e0ad      	b.n	800071a <__aeabi_fadd+0x192>
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	04db      	lsls	r3, r3, #19
 80005c2:	431e      	orrs	r6, r3
 80005c4:	2a1b      	cmp	r2, #27
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fadd+0x42>
 80005c8:	e0d3      	b.n	8000772 <__aeabi_fadd+0x1ea>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4643      	mov	r3, r8
 80005ce:	1a18      	subs	r0, r3, r0
 80005d0:	0143      	lsls	r3, r0, #5
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_fadd+0x4e>
 80005d4:	e08c      	b.n	80006f0 <__aeabi_fadd+0x168>
 80005d6:	0180      	lsls	r0, r0, #6
 80005d8:	0987      	lsrs	r7, r0, #6
 80005da:	0038      	movs	r0, r7
 80005dc:	f002 f9bc 	bl	8002958 <__clzsi2>
 80005e0:	3805      	subs	r0, #5
 80005e2:	4087      	lsls	r7, r0
 80005e4:	4285      	cmp	r5, r0
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_fadd+0x62>
 80005e8:	e0b6      	b.n	8000758 <__aeabi_fadd+0x1d0>
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	48b3      	ldr	r0, [pc, #716]	; (80008bc <__aeabi_fadd+0x334>)
 80005ee:	4038      	ands	r0, r7
 80005f0:	0743      	lsls	r3, r0, #29
 80005f2:	d004      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005f4:	230f      	movs	r3, #15
 80005f6:	4003      	ands	r3, r0
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005fc:	3004      	adds	r0, #4
 80005fe:	0143      	lsls	r3, r0, #5
 8000600:	d400      	bmi.n	8000604 <__aeabi_fadd+0x7c>
 8000602:	e078      	b.n	80006f6 <__aeabi_fadd+0x16e>
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	2dfe      	cmp	r5, #254	; 0xfe
 8000608:	d065      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800060a:	0180      	lsls	r0, r0, #6
 800060c:	0a43      	lsrs	r3, r0, #9
 800060e:	469c      	mov	ip, r3
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	4663      	mov	r3, ip
 8000614:	05d0      	lsls	r0, r2, #23
 8000616:	4318      	orrs	r0, r3
 8000618:	07e4      	lsls	r4, r4, #31
 800061a:	4320      	orrs	r0, r4
 800061c:	bc80      	pop	{r7}
 800061e:	46b8      	mov	r8, r7
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	2a00      	cmp	r2, #0
 8000624:	d035      	beq.n	8000692 <__aeabi_fadd+0x10a>
 8000626:	1b7a      	subs	r2, r7, r5
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0xa6>
 800062c:	e0af      	b.n	800078e <__aeabi_fadd+0x206>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0xae>
 8000634:	e0a7      	b.n	8000786 <__aeabi_fadd+0x1fe>
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0xb6>
 800063c:	e12f      	b.n	800089e <__aeabi_fadd+0x316>
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d069      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000642:	001a      	movs	r2, r3
 8000644:	e0aa      	b.n	800079c <__aeabi_fadd+0x214>
 8000646:	1be9      	subs	r1, r5, r7
 8000648:	2900      	cmp	r1, #0
 800064a:	dd70      	ble.n	800072e <__aeabi_fadd+0x1a6>
 800064c:	2f00      	cmp	r7, #0
 800064e:	d037      	beq.n	80006c0 <__aeabi_fadd+0x138>
 8000650:	2dff      	cmp	r5, #255	; 0xff
 8000652:	d062      	beq.n	800071a <__aeabi_fadd+0x192>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	04db      	lsls	r3, r3, #19
 8000658:	431e      	orrs	r6, r3
 800065a:	291b      	cmp	r1, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0xd8>
 800065e:	e0b0      	b.n	80007c2 <__aeabi_fadd+0x23a>
 8000660:	2001      	movs	r0, #1
 8000662:	4440      	add	r0, r8
 8000664:	0143      	lsls	r3, r0, #5
 8000666:	d543      	bpl.n	80006f0 <__aeabi_fadd+0x168>
 8000668:	3501      	adds	r5, #1
 800066a:	2dff      	cmp	r5, #255	; 0xff
 800066c:	d033      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800066e:	2301      	movs	r3, #1
 8000670:	4a93      	ldr	r2, [pc, #588]	; (80008c0 <__aeabi_fadd+0x338>)
 8000672:	4003      	ands	r3, r0
 8000674:	0840      	lsrs	r0, r0, #1
 8000676:	4010      	ands	r0, r2
 8000678:	4318      	orrs	r0, r3
 800067a:	e7b9      	b.n	80005f0 <__aeabi_fadd+0x68>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0xfa>
 8000680:	e083      	b.n	800078a <__aeabi_fadd+0x202>
 8000682:	1e51      	subs	r1, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x102>
 8000688:	e0d8      	b.n	800083c <__aeabi_fadd+0x2b4>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d045      	beq.n	800071a <__aeabi_fadd+0x192>
 800068e:	000a      	movs	r2, r1
 8000690:	e798      	b.n	80005c4 <__aeabi_fadd+0x3c>
 8000692:	27fe      	movs	r7, #254	; 0xfe
 8000694:	1c6a      	adds	r2, r5, #1
 8000696:	4217      	tst	r7, r2
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x114>
 800069a:	e086      	b.n	80007aa <__aeabi_fadd+0x222>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x11a>
 80006a0:	e0b7      	b.n	8000812 <__aeabi_fadd+0x28a>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x122>
 80006a8:	e0f3      	b.n	8000892 <__aeabi_fadd+0x30a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d0b0      	beq.n	8000612 <__aeabi_fadd+0x8a>
 80006b0:	1b98      	subs	r0, r3, r6
 80006b2:	0143      	lsls	r3, r0, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x130>
 80006b6:	e0fa      	b.n	80008ae <__aeabi_fadd+0x326>
 80006b8:	4643      	mov	r3, r8
 80006ba:	000c      	movs	r4, r1
 80006bc:	1af0      	subs	r0, r6, r3
 80006be:	e797      	b.n	80005f0 <__aeabi_fadd+0x68>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x13e>
 80006c4:	e0c8      	b.n	8000858 <__aeabi_fadd+0x2d0>
 80006c6:	1e4a      	subs	r2, r1, #1
 80006c8:	2901      	cmp	r1, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x146>
 80006cc:	e0ae      	b.n	800082c <__aeabi_fadd+0x2a4>
 80006ce:	29ff      	cmp	r1, #255	; 0xff
 80006d0:	d023      	beq.n	800071a <__aeabi_fadd+0x192>
 80006d2:	0011      	movs	r1, r2
 80006d4:	e7c1      	b.n	800065a <__aeabi_fadd+0xd2>
 80006d6:	2300      	movs	r3, #0
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	469c      	mov	ip, r3
 80006dc:	e799      	b.n	8000612 <__aeabi_fadd+0x8a>
 80006de:	21fe      	movs	r1, #254	; 0xfe
 80006e0:	1c6a      	adds	r2, r5, #1
 80006e2:	4211      	tst	r1, r2
 80006e4:	d077      	beq.n	80007d6 <__aeabi_fadd+0x24e>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d0f5      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 80006ea:	0015      	movs	r5, r2
 80006ec:	4446      	add	r6, r8
 80006ee:	0870      	lsrs	r0, r6, #1
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fadd+0x16e>
 80006f4:	e77e      	b.n	80005f4 <__aeabi_fadd+0x6c>
 80006f6:	08c3      	lsrs	r3, r0, #3
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d00e      	beq.n	800071a <__aeabi_fadd+0x192>
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	469c      	mov	ip, r3
 8000702:	b2ea      	uxtb	r2, r5
 8000704:	e785      	b.n	8000612 <__aeabi_fadd+0x8a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d007      	beq.n	800071a <__aeabi_fadd+0x192>
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d003      	beq.n	800071a <__aeabi_fadd+0x192>
 8000712:	4210      	tst	r0, r2
 8000714:	d101      	bne.n	800071a <__aeabi_fadd+0x192>
 8000716:	000c      	movs	r4, r1
 8000718:	0003      	movs	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0db      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800071e:	2080      	movs	r0, #128	; 0x80
 8000720:	03c0      	lsls	r0, r0, #15
 8000722:	4318      	orrs	r0, r3
 8000724:	0240      	lsls	r0, r0, #9
 8000726:	0a43      	lsrs	r3, r0, #9
 8000728:	469c      	mov	ip, r3
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	e771      	b.n	8000612 <__aeabi_fadd+0x8a>
 800072e:	2900      	cmp	r1, #0
 8000730:	d0d5      	beq.n	80006de <__aeabi_fadd+0x156>
 8000732:	1b7a      	subs	r2, r7, r5
 8000734:	2d00      	cmp	r5, #0
 8000736:	d160      	bne.n	80007fa <__aeabi_fadd+0x272>
 8000738:	4643      	mov	r3, r8
 800073a:	2b00      	cmp	r3, #0
 800073c:	d024      	beq.n	8000788 <__aeabi_fadd+0x200>
 800073e:	1e53      	subs	r3, r2, #1
 8000740:	2a01      	cmp	r2, #1
 8000742:	d073      	beq.n	800082c <__aeabi_fadd+0x2a4>
 8000744:	2aff      	cmp	r2, #255	; 0xff
 8000746:	d0e7      	beq.n	8000718 <__aeabi_fadd+0x190>
 8000748:	001a      	movs	r2, r3
 800074a:	2a1b      	cmp	r2, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x1c8>
 800074e:	e085      	b.n	800085c <__aeabi_fadd+0x2d4>
 8000750:	2001      	movs	r0, #1
 8000752:	003d      	movs	r5, r7
 8000754:	1980      	adds	r0, r0, r6
 8000756:	e785      	b.n	8000664 <__aeabi_fadd+0xdc>
 8000758:	2320      	movs	r3, #32
 800075a:	003a      	movs	r2, r7
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	0038      	movs	r0, r7
 8000760:	3501      	adds	r5, #1
 8000762:	40ea      	lsrs	r2, r5
 8000764:	1b5d      	subs	r5, r3, r5
 8000766:	40a8      	lsls	r0, r5
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4198      	sbcs	r0, r3
 800076c:	2500      	movs	r5, #0
 800076e:	4310      	orrs	r0, r2
 8000770:	e73e      	b.n	80005f0 <__aeabi_fadd+0x68>
 8000772:	2320      	movs	r3, #32
 8000774:	0030      	movs	r0, r6
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	0031      	movs	r1, r6
 800077a:	4098      	lsls	r0, r3
 800077c:	40d1      	lsrs	r1, r2
 800077e:	1e43      	subs	r3, r0, #1
 8000780:	4198      	sbcs	r0, r3
 8000782:	4308      	orrs	r0, r1
 8000784:	e722      	b.n	80005cc <__aeabi_fadd+0x44>
 8000786:	000c      	movs	r4, r1
 8000788:	0003      	movs	r3, r0
 800078a:	0015      	movs	r5, r2
 800078c:	e7b4      	b.n	80006f8 <__aeabi_fadd+0x170>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0c1      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4640      	mov	r0, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4318      	orrs	r0, r3
 800079a:	4680      	mov	r8, r0
 800079c:	2a1b      	cmp	r2, #27
 800079e:	dd51      	ble.n	8000844 <__aeabi_fadd+0x2bc>
 80007a0:	2001      	movs	r0, #1
 80007a2:	000c      	movs	r4, r1
 80007a4:	003d      	movs	r5, r7
 80007a6:	1a30      	subs	r0, r6, r0
 80007a8:	e712      	b.n	80005d0 <__aeabi_fadd+0x48>
 80007aa:	4643      	mov	r3, r8
 80007ac:	1b9f      	subs	r7, r3, r6
 80007ae:	017b      	lsls	r3, r7, #5
 80007b0:	d42b      	bmi.n	800080a <__aeabi_fadd+0x282>
 80007b2:	2f00      	cmp	r7, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x230>
 80007b6:	e710      	b.n	80005da <__aeabi_fadd+0x52>
 80007b8:	2300      	movs	r3, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	2200      	movs	r2, #0
 80007be:	469c      	mov	ip, r3
 80007c0:	e727      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007c2:	2320      	movs	r3, #32
 80007c4:	0032      	movs	r2, r6
 80007c6:	0030      	movs	r0, r6
 80007c8:	40ca      	lsrs	r2, r1
 80007ca:	1a59      	subs	r1, r3, r1
 80007cc:	4088      	lsls	r0, r1
 80007ce:	1e43      	subs	r3, r0, #1
 80007d0:	4198      	sbcs	r0, r3
 80007d2:	4310      	orrs	r0, r2
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0xda>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d14a      	bne.n	8000870 <__aeabi_fadd+0x2e8>
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d063      	beq.n	80008a8 <__aeabi_fadd+0x320>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x260>
 80007e6:	e714      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007e8:	0030      	movs	r0, r6
 80007ea:	4440      	add	r0, r8
 80007ec:	0143      	lsls	r3, r0, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0x26a>
 80007f0:	e77e      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <__aeabi_fadd+0x334>)
 80007f4:	3501      	adds	r5, #1
 80007f6:	4018      	ands	r0, r3
 80007f8:	e77a      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d08c      	beq.n	8000718 <__aeabi_fadd+0x190>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	4641      	mov	r1, r8
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	4319      	orrs	r1, r3
 8000806:	4688      	mov	r8, r1
 8000808:	e79f      	b.n	800074a <__aeabi_fadd+0x1c2>
 800080a:	4643      	mov	r3, r8
 800080c:	000c      	movs	r4, r1
 800080e:	1af7      	subs	r7, r6, r3
 8000810:	e6e3      	b.n	80005da <__aeabi_fadd+0x52>
 8000812:	4642      	mov	r2, r8
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x292>
 8000818:	e775      	b.n	8000706 <__aeabi_fadd+0x17e>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x298>
 800081e:	e77a      	b.n	8000716 <__aeabi_fadd+0x18e>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	03db      	lsls	r3, r3, #15
 8000824:	2400      	movs	r4, #0
 8000826:	469c      	mov	ip, r3
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	e6f2      	b.n	8000612 <__aeabi_fadd+0x8a>
 800082c:	0030      	movs	r0, r6
 800082e:	4440      	add	r0, r8
 8000830:	2501      	movs	r5, #1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x2b0>
 8000836:	e75b      	b.n	80006f0 <__aeabi_fadd+0x168>
 8000838:	2502      	movs	r5, #2
 800083a:	e718      	b.n	800066e <__aeabi_fadd+0xe6>
 800083c:	4643      	mov	r3, r8
 800083e:	2501      	movs	r5, #1
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	e6c5      	b.n	80005d0 <__aeabi_fadd+0x48>
 8000844:	2320      	movs	r3, #32
 8000846:	4644      	mov	r4, r8
 8000848:	4640      	mov	r0, r8
 800084a:	40d4      	lsrs	r4, r2
 800084c:	1a9a      	subs	r2, r3, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4320      	orrs	r0, r4
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x21a>
 8000858:	000d      	movs	r5, r1
 800085a:	e74d      	b.n	80006f8 <__aeabi_fadd+0x170>
 800085c:	2320      	movs	r3, #32
 800085e:	4641      	mov	r1, r8
 8000860:	4640      	mov	r0, r8
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1a9a      	subs	r2, r3, r2
 8000866:	4090      	lsls	r0, r2
 8000868:	1e43      	subs	r3, r0, #1
 800086a:	4198      	sbcs	r0, r3
 800086c:	4308      	orrs	r0, r1
 800086e:	e770      	b.n	8000752 <__aeabi_fadd+0x1ca>
 8000870:	4642      	mov	r2, r8
 8000872:	2a00      	cmp	r2, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x2f0>
 8000876:	e74f      	b.n	8000718 <__aeabi_fadd+0x190>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x2f6>
 800087c:	e74d      	b.n	800071a <__aeabi_fadd+0x192>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	03d2      	lsls	r2, r2, #15
 8000882:	4213      	tst	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x300>
 8000886:	e748      	b.n	800071a <__aeabi_fadd+0x192>
 8000888:	4210      	tst	r0, r2
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x306>
 800088c:	e745      	b.n	800071a <__aeabi_fadd+0x192>
 800088e:	0003      	movs	r3, r0
 8000890:	e743      	b.n	800071a <__aeabi_fadd+0x192>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d090      	beq.n	80007b8 <__aeabi_fadd+0x230>
 8000896:	000c      	movs	r4, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2200      	movs	r2, #0
 800089c:	e6b9      	b.n	8000612 <__aeabi_fadd+0x8a>
 800089e:	4643      	mov	r3, r8
 80008a0:	000c      	movs	r4, r1
 80008a2:	1af0      	subs	r0, r6, r3
 80008a4:	3501      	adds	r5, #1
 80008a6:	e693      	b.n	80005d0 <__aeabi_fadd+0x48>
 80008a8:	4684      	mov	ip, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	e6b1      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x32c>
 80008b2:	e71d      	b.n	80006f0 <__aeabi_fadd+0x168>
 80008b4:	2300      	movs	r3, #0
 80008b6:	2400      	movs	r4, #0
 80008b8:	469c      	mov	ip, r3
 80008ba:	e6aa      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008bc:	fbffffff 	.word	0xfbffffff
 80008c0:	7dffffff 	.word	0x7dffffff

080008c4 <__aeabi_fmul>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464f      	mov	r7, r9
 80008c8:	4646      	mov	r6, r8
 80008ca:	46d6      	mov	lr, sl
 80008cc:	0244      	lsls	r4, r0, #9
 80008ce:	0045      	lsls	r5, r0, #1
 80008d0:	b5c0      	push	{r6, r7, lr}
 80008d2:	0a64      	lsrs	r4, r4, #9
 80008d4:	1c0f      	adds	r7, r1, #0
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0fc6      	lsrs	r6, r0, #31
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fmul+0x1c>
 80008de:	e08d      	b.n	80009fc <__aeabi_fmul+0x138>
 80008e0:	2dff      	cmp	r5, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fmul+0x22>
 80008e4:	e092      	b.n	8000a0c <__aeabi_fmul+0x148>
 80008e6:	2300      	movs	r3, #0
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	4699      	mov	r9, r3
 80008ec:	469a      	mov	sl, r3
 80008ee:	00e4      	lsls	r4, r4, #3
 80008f0:	04c0      	lsls	r0, r0, #19
 80008f2:	4304      	orrs	r4, r0
 80008f4:	3d7f      	subs	r5, #127	; 0x7f
 80008f6:	0278      	lsls	r0, r7, #9
 80008f8:	0a43      	lsrs	r3, r0, #9
 80008fa:	4698      	mov	r8, r3
 80008fc:	007b      	lsls	r3, r7, #1
 80008fe:	0e1b      	lsrs	r3, r3, #24
 8000900:	0fff      	lsrs	r7, r7, #31
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fmul+0x44>
 8000906:	e070      	b.n	80009ea <__aeabi_fmul+0x126>
 8000908:	2bff      	cmp	r3, #255	; 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fmul+0x4a>
 800090c:	e086      	b.n	8000a1c <__aeabi_fmul+0x158>
 800090e:	4642      	mov	r2, r8
 8000910:	00d0      	lsls	r0, r2, #3
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	3b7f      	subs	r3, #127	; 0x7f
 8000916:	18ed      	adds	r5, r5, r3
 8000918:	2300      	movs	r3, #0
 800091a:	04d2      	lsls	r2, r2, #19
 800091c:	4302      	orrs	r2, r0
 800091e:	4690      	mov	r8, r2
 8000920:	469c      	mov	ip, r3
 8000922:	0031      	movs	r1, r6
 8000924:	464b      	mov	r3, r9
 8000926:	4079      	eors	r1, r7
 8000928:	1c68      	adds	r0, r5, #1
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d81c      	bhi.n	8000968 <__aeabi_fmul+0xa4>
 800092e:	4a76      	ldr	r2, [pc, #472]	; (8000b08 <__aeabi_fmul+0x244>)
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	58d3      	ldr	r3, [r2, r3]
 8000934:	469f      	mov	pc, r3
 8000936:	0039      	movs	r1, r7
 8000938:	4644      	mov	r4, r8
 800093a:	46e2      	mov	sl, ip
 800093c:	4653      	mov	r3, sl
 800093e:	2b02      	cmp	r3, #2
 8000940:	d00f      	beq.n	8000962 <__aeabi_fmul+0x9e>
 8000942:	2b03      	cmp	r3, #3
 8000944:	d100      	bne.n	8000948 <__aeabi_fmul+0x84>
 8000946:	e0d7      	b.n	8000af8 <__aeabi_fmul+0x234>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d137      	bne.n	80009bc <__aeabi_fmul+0xf8>
 800094c:	2000      	movs	r0, #0
 800094e:	2400      	movs	r4, #0
 8000950:	05c0      	lsls	r0, r0, #23
 8000952:	4320      	orrs	r0, r4
 8000954:	07c9      	lsls	r1, r1, #31
 8000956:	4308      	orrs	r0, r1
 8000958:	bce0      	pop	{r5, r6, r7}
 800095a:	46ba      	mov	sl, r7
 800095c:	46b1      	mov	r9, r6
 800095e:	46a8      	mov	r8, r5
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	2400      	movs	r4, #0
 8000966:	e7f3      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000968:	0c26      	lsrs	r6, r4, #16
 800096a:	0424      	lsls	r4, r4, #16
 800096c:	0c22      	lsrs	r2, r4, #16
 800096e:	4644      	mov	r4, r8
 8000970:	0424      	lsls	r4, r4, #16
 8000972:	0c24      	lsrs	r4, r4, #16
 8000974:	4643      	mov	r3, r8
 8000976:	0027      	movs	r7, r4
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	4357      	muls	r7, r2
 800097c:	4374      	muls	r4, r6
 800097e:	435a      	muls	r2, r3
 8000980:	435e      	muls	r6, r3
 8000982:	1912      	adds	r2, r2, r4
 8000984:	0c3b      	lsrs	r3, r7, #16
 8000986:	189b      	adds	r3, r3, r2
 8000988:	429c      	cmp	r4, r3
 800098a:	d903      	bls.n	8000994 <__aeabi_fmul+0xd0>
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	0252      	lsls	r2, r2, #9
 8000990:	4694      	mov	ip, r2
 8000992:	4466      	add	r6, ip
 8000994:	043f      	lsls	r7, r7, #16
 8000996:	041a      	lsls	r2, r3, #16
 8000998:	0c3f      	lsrs	r7, r7, #16
 800099a:	19d2      	adds	r2, r2, r7
 800099c:	0194      	lsls	r4, r2, #6
 800099e:	1e67      	subs	r7, r4, #1
 80009a0:	41bc      	sbcs	r4, r7
 80009a2:	0c1b      	lsrs	r3, r3, #16
 80009a4:	0e92      	lsrs	r2, r2, #26
 80009a6:	199b      	adds	r3, r3, r6
 80009a8:	4314      	orrs	r4, r2
 80009aa:	019b      	lsls	r3, r3, #6
 80009ac:	431c      	orrs	r4, r3
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_fmul+0xf0>
 80009b2:	e09b      	b.n	8000aec <__aeabi_fmul+0x228>
 80009b4:	2301      	movs	r3, #1
 80009b6:	0862      	lsrs	r2, r4, #1
 80009b8:	401c      	ands	r4, r3
 80009ba:	4314      	orrs	r4, r2
 80009bc:	0002      	movs	r2, r0
 80009be:	327f      	adds	r2, #127	; 0x7f
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	dd64      	ble.n	8000a8e <__aeabi_fmul+0x1ca>
 80009c4:	0763      	lsls	r3, r4, #29
 80009c6:	d004      	beq.n	80009d2 <__aeabi_fmul+0x10e>
 80009c8:	230f      	movs	r3, #15
 80009ca:	4023      	ands	r3, r4
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fmul+0x10e>
 80009d0:	3404      	adds	r4, #4
 80009d2:	0123      	lsls	r3, r4, #4
 80009d4:	d503      	bpl.n	80009de <__aeabi_fmul+0x11a>
 80009d6:	0002      	movs	r2, r0
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <__aeabi_fmul+0x248>)
 80009da:	3280      	adds	r2, #128	; 0x80
 80009dc:	401c      	ands	r4, r3
 80009de:	2afe      	cmp	r2, #254	; 0xfe
 80009e0:	dcbf      	bgt.n	8000962 <__aeabi_fmul+0x9e>
 80009e2:	01a4      	lsls	r4, r4, #6
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	b2d0      	uxtb	r0, r2
 80009e8:	e7b2      	b.n	8000950 <__aeabi_fmul+0x8c>
 80009ea:	4643      	mov	r3, r8
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d13d      	bne.n	8000a6c <__aeabi_fmul+0x1a8>
 80009f0:	464a      	mov	r2, r9
 80009f2:	3301      	adds	r3, #1
 80009f4:	431a      	orrs	r2, r3
 80009f6:	4691      	mov	r9, r2
 80009f8:	469c      	mov	ip, r3
 80009fa:	e792      	b.n	8000922 <__aeabi_fmul+0x5e>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d129      	bne.n	8000a54 <__aeabi_fmul+0x190>
 8000a00:	2304      	movs	r3, #4
 8000a02:	4699      	mov	r9, r3
 8000a04:	3b03      	subs	r3, #3
 8000a06:	2500      	movs	r5, #0
 8000a08:	469a      	mov	sl, r3
 8000a0a:	e774      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d11b      	bne.n	8000a48 <__aeabi_fmul+0x184>
 8000a10:	2308      	movs	r3, #8
 8000a12:	4699      	mov	r9, r3
 8000a14:	3b06      	subs	r3, #6
 8000a16:	25ff      	movs	r5, #255	; 0xff
 8000a18:	469a      	mov	sl, r3
 8000a1a:	e76c      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a1c:	4643      	mov	r3, r8
 8000a1e:	35ff      	adds	r5, #255	; 0xff
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10b      	bne.n	8000a3c <__aeabi_fmul+0x178>
 8000a24:	2302      	movs	r3, #2
 8000a26:	464a      	mov	r2, r9
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	e778      	b.n	8000922 <__aeabi_fmul+0x5e>
 8000a30:	4653      	mov	r3, sl
 8000a32:	0031      	movs	r1, r6
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fmul+0x176>
 8000a38:	e783      	b.n	8000942 <__aeabi_fmul+0x7e>
 8000a3a:	e792      	b.n	8000962 <__aeabi_fmul+0x9e>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	464a      	mov	r2, r9
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4691      	mov	r9, r2
 8000a44:	469c      	mov	ip, r3
 8000a46:	e76c      	b.n	8000922 <__aeabi_fmul+0x5e>
 8000a48:	230c      	movs	r3, #12
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b09      	subs	r3, #9
 8000a4e:	25ff      	movs	r5, #255	; 0xff
 8000a50:	469a      	mov	sl, r3
 8000a52:	e750      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a54:	0020      	movs	r0, r4
 8000a56:	f001 ff7f 	bl	8002958 <__clzsi2>
 8000a5a:	2576      	movs	r5, #118	; 0x76
 8000a5c:	1f43      	subs	r3, r0, #5
 8000a5e:	409c      	lsls	r4, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	426d      	negs	r5, r5
 8000a64:	4699      	mov	r9, r3
 8000a66:	469a      	mov	sl, r3
 8000a68:	1a2d      	subs	r5, r5, r0
 8000a6a:	e744      	b.n	80008f6 <__aeabi_fmul+0x32>
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	f001 ff73 	bl	8002958 <__clzsi2>
 8000a72:	4642      	mov	r2, r8
 8000a74:	1f43      	subs	r3, r0, #5
 8000a76:	409a      	lsls	r2, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	1a2d      	subs	r5, r5, r0
 8000a7c:	4690      	mov	r8, r2
 8000a7e:	469c      	mov	ip, r3
 8000a80:	3d76      	subs	r5, #118	; 0x76
 8000a82:	e74e      	b.n	8000922 <__aeabi_fmul+0x5e>
 8000a84:	2480      	movs	r4, #128	; 0x80
 8000a86:	2100      	movs	r1, #0
 8000a88:	20ff      	movs	r0, #255	; 0xff
 8000a8a:	03e4      	lsls	r4, r4, #15
 8000a8c:	e760      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	1a9b      	subs	r3, r3, r2
 8000a92:	2b1b      	cmp	r3, #27
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fmul+0x1d4>
 8000a96:	e759      	b.n	800094c <__aeabi_fmul+0x88>
 8000a98:	0022      	movs	r2, r4
 8000a9a:	309e      	adds	r0, #158	; 0x9e
 8000a9c:	40da      	lsrs	r2, r3
 8000a9e:	4084      	lsls	r4, r0
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	1e62      	subs	r2, r4, #1
 8000aa4:	4194      	sbcs	r4, r2
 8000aa6:	431c      	orrs	r4, r3
 8000aa8:	0763      	lsls	r3, r4, #29
 8000aaa:	d004      	beq.n	8000ab6 <__aeabi_fmul+0x1f2>
 8000aac:	230f      	movs	r3, #15
 8000aae:	4023      	ands	r3, r4
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_fmul+0x1f2>
 8000ab4:	3404      	adds	r4, #4
 8000ab6:	0163      	lsls	r3, r4, #5
 8000ab8:	d51a      	bpl.n	8000af0 <__aeabi_fmul+0x22c>
 8000aba:	2001      	movs	r0, #1
 8000abc:	2400      	movs	r4, #0
 8000abe:	e747      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000ac0:	2080      	movs	r0, #128	; 0x80
 8000ac2:	03c0      	lsls	r0, r0, #15
 8000ac4:	4204      	tst	r4, r0
 8000ac6:	d009      	beq.n	8000adc <__aeabi_fmul+0x218>
 8000ac8:	4643      	mov	r3, r8
 8000aca:	4203      	tst	r3, r0
 8000acc:	d106      	bne.n	8000adc <__aeabi_fmul+0x218>
 8000ace:	4644      	mov	r4, r8
 8000ad0:	4304      	orrs	r4, r0
 8000ad2:	0264      	lsls	r4, r4, #9
 8000ad4:	0039      	movs	r1, r7
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	0a64      	lsrs	r4, r4, #9
 8000ada:	e739      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000adc:	2080      	movs	r0, #128	; 0x80
 8000ade:	03c0      	lsls	r0, r0, #15
 8000ae0:	4304      	orrs	r4, r0
 8000ae2:	0264      	lsls	r4, r4, #9
 8000ae4:	0031      	movs	r1, r6
 8000ae6:	20ff      	movs	r0, #255	; 0xff
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	e731      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000aec:	0028      	movs	r0, r5
 8000aee:	e765      	b.n	80009bc <__aeabi_fmul+0xf8>
 8000af0:	01a4      	lsls	r4, r4, #6
 8000af2:	2000      	movs	r0, #0
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	e72b      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000af8:	2080      	movs	r0, #128	; 0x80
 8000afa:	03c0      	lsls	r0, r0, #15
 8000afc:	4304      	orrs	r4, r0
 8000afe:	0264      	lsls	r4, r4, #9
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	e724      	b.n	8000950 <__aeabi_fmul+0x8c>
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	0800d6dc 	.word	0x0800d6dc
 8000b0c:	f7ffffff 	.word	0xf7ffffff

08000b10 <__aeabi_f2iz>:
 8000b10:	0241      	lsls	r1, r0, #9
 8000b12:	0042      	lsls	r2, r0, #1
 8000b14:	0fc3      	lsrs	r3, r0, #31
 8000b16:	0a49      	lsrs	r1, r1, #9
 8000b18:	2000      	movs	r0, #0
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	2a7e      	cmp	r2, #126	; 0x7e
 8000b1e:	dd03      	ble.n	8000b28 <__aeabi_f2iz+0x18>
 8000b20:	2a9d      	cmp	r2, #157	; 0x9d
 8000b22:	dd02      	ble.n	8000b2a <__aeabi_f2iz+0x1a>
 8000b24:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <__aeabi_f2iz+0x3c>)
 8000b26:	1898      	adds	r0, r3, r2
 8000b28:	4770      	bx	lr
 8000b2a:	2080      	movs	r0, #128	; 0x80
 8000b2c:	0400      	lsls	r0, r0, #16
 8000b2e:	4301      	orrs	r1, r0
 8000b30:	2a95      	cmp	r2, #149	; 0x95
 8000b32:	dc07      	bgt.n	8000b44 <__aeabi_f2iz+0x34>
 8000b34:	2096      	movs	r0, #150	; 0x96
 8000b36:	1a82      	subs	r2, r0, r2
 8000b38:	40d1      	lsrs	r1, r2
 8000b3a:	4248      	negs	r0, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f3      	bne.n	8000b28 <__aeabi_f2iz+0x18>
 8000b40:	0008      	movs	r0, r1
 8000b42:	e7f1      	b.n	8000b28 <__aeabi_f2iz+0x18>
 8000b44:	3a96      	subs	r2, #150	; 0x96
 8000b46:	4091      	lsls	r1, r2
 8000b48:	e7f7      	b.n	8000b3a <__aeabi_f2iz+0x2a>
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	7fffffff 	.word	0x7fffffff

08000b50 <__aeabi_i2f>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	2800      	cmp	r0, #0
 8000b54:	d013      	beq.n	8000b7e <__aeabi_i2f+0x2e>
 8000b56:	17c3      	asrs	r3, r0, #31
 8000b58:	18c6      	adds	r6, r0, r3
 8000b5a:	405e      	eors	r6, r3
 8000b5c:	0fc4      	lsrs	r4, r0, #31
 8000b5e:	0030      	movs	r0, r6
 8000b60:	f001 fefa 	bl	8002958 <__clzsi2>
 8000b64:	239e      	movs	r3, #158	; 0x9e
 8000b66:	0005      	movs	r5, r0
 8000b68:	1a1b      	subs	r3, r3, r0
 8000b6a:	2b96      	cmp	r3, #150	; 0x96
 8000b6c:	dc0f      	bgt.n	8000b8e <__aeabi_i2f+0x3e>
 8000b6e:	2808      	cmp	r0, #8
 8000b70:	dd01      	ble.n	8000b76 <__aeabi_i2f+0x26>
 8000b72:	3d08      	subs	r5, #8
 8000b74:	40ae      	lsls	r6, r5
 8000b76:	0276      	lsls	r6, r6, #9
 8000b78:	0a76      	lsrs	r6, r6, #9
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	e002      	b.n	8000b84 <__aeabi_i2f+0x34>
 8000b7e:	2400      	movs	r4, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	2600      	movs	r6, #0
 8000b84:	05c0      	lsls	r0, r0, #23
 8000b86:	4330      	orrs	r0, r6
 8000b88:	07e4      	lsls	r4, r4, #31
 8000b8a:	4320      	orrs	r0, r4
 8000b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b8e:	2b99      	cmp	r3, #153	; 0x99
 8000b90:	dd0c      	ble.n	8000bac <__aeabi_i2f+0x5c>
 8000b92:	2205      	movs	r2, #5
 8000b94:	0031      	movs	r1, r6
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	40d1      	lsrs	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	0001      	movs	r1, r0
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	311b      	adds	r1, #27
 8000ba2:	4088      	lsls	r0, r1
 8000ba4:	1e41      	subs	r1, r0, #1
 8000ba6:	4188      	sbcs	r0, r1
 8000ba8:	4302      	orrs	r2, r0
 8000baa:	0016      	movs	r6, r2
 8000bac:	2d05      	cmp	r5, #5
 8000bae:	dc12      	bgt.n	8000bd6 <__aeabi_i2f+0x86>
 8000bb0:	0031      	movs	r1, r6
 8000bb2:	4f0d      	ldr	r7, [pc, #52]	; (8000be8 <__aeabi_i2f+0x98>)
 8000bb4:	4039      	ands	r1, r7
 8000bb6:	0772      	lsls	r2, r6, #29
 8000bb8:	d009      	beq.n	8000bce <__aeabi_i2f+0x7e>
 8000bba:	200f      	movs	r0, #15
 8000bbc:	4030      	ands	r0, r6
 8000bbe:	2804      	cmp	r0, #4
 8000bc0:	d005      	beq.n	8000bce <__aeabi_i2f+0x7e>
 8000bc2:	3104      	adds	r1, #4
 8000bc4:	014a      	lsls	r2, r1, #5
 8000bc6:	d502      	bpl.n	8000bce <__aeabi_i2f+0x7e>
 8000bc8:	239f      	movs	r3, #159	; 0x9f
 8000bca:	4039      	ands	r1, r7
 8000bcc:	1b5b      	subs	r3, r3, r5
 8000bce:	0189      	lsls	r1, r1, #6
 8000bd0:	0a4e      	lsrs	r6, r1, #9
 8000bd2:	b2d8      	uxtb	r0, r3
 8000bd4:	e7d6      	b.n	8000b84 <__aeabi_i2f+0x34>
 8000bd6:	1f6a      	subs	r2, r5, #5
 8000bd8:	4096      	lsls	r6, r2
 8000bda:	0031      	movs	r1, r6
 8000bdc:	4f02      	ldr	r7, [pc, #8]	; (8000be8 <__aeabi_i2f+0x98>)
 8000bde:	4039      	ands	r1, r7
 8000be0:	0772      	lsls	r2, r6, #29
 8000be2:	d0f4      	beq.n	8000bce <__aeabi_i2f+0x7e>
 8000be4:	e7e9      	b.n	8000bba <__aeabi_i2f+0x6a>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	fbffffff 	.word	0xfbffffff

08000bec <__aeabi_dadd>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	46d6      	mov	lr, sl
 8000bf4:	000d      	movs	r5, r1
 8000bf6:	0004      	movs	r4, r0
 8000bf8:	b5c0      	push	{r6, r7, lr}
 8000bfa:	001f      	movs	r7, r3
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0328      	lsls	r0, r5, #12
 8000c00:	0f62      	lsrs	r2, r4, #29
 8000c02:	0a40      	lsrs	r0, r0, #9
 8000c04:	4310      	orrs	r0, r2
 8000c06:	007a      	lsls	r2, r7, #1
 8000c08:	0d52      	lsrs	r2, r2, #21
 8000c0a:	00e3      	lsls	r3, r4, #3
 8000c0c:	033c      	lsls	r4, r7, #12
 8000c0e:	4691      	mov	r9, r2
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	0ffa      	lsrs	r2, r7, #31
 8000c14:	0f4f      	lsrs	r7, r1, #29
 8000c16:	006e      	lsls	r6, r5, #1
 8000c18:	4327      	orrs	r7, r4
 8000c1a:	4692      	mov	sl, r2
 8000c1c:	46b8      	mov	r8, r7
 8000c1e:	0d76      	lsrs	r6, r6, #21
 8000c20:	0fed      	lsrs	r5, r5, #31
 8000c22:	00c9      	lsls	r1, r1, #3
 8000c24:	4295      	cmp	r5, r2
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x3e>
 8000c28:	e099      	b.n	8000d5e <__aeabi_dadd+0x172>
 8000c2a:	464c      	mov	r4, r9
 8000c2c:	1b34      	subs	r4, r6, r4
 8000c2e:	46a4      	mov	ip, r4
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	dc00      	bgt.n	8000c36 <__aeabi_dadd+0x4a>
 8000c34:	e07c      	b.n	8000d30 <__aeabi_dadd+0x144>
 8000c36:	464a      	mov	r2, r9
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dadd+0x52>
 8000c3c:	e0b8      	b.n	8000db0 <__aeabi_dadd+0x1c4>
 8000c3e:	4ac5      	ldr	r2, [pc, #788]	; (8000f54 <__aeabi_dadd+0x368>)
 8000c40:	4296      	cmp	r6, r2
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x5a>
 8000c44:	e11c      	b.n	8000e80 <__aeabi_dadd+0x294>
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	003c      	movs	r4, r7
 8000c4a:	0412      	lsls	r2, r2, #16
 8000c4c:	4314      	orrs	r4, r2
 8000c4e:	46a0      	mov	r8, r4
 8000c50:	4662      	mov	r2, ip
 8000c52:	2a38      	cmp	r2, #56	; 0x38
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_dadd+0x6c>
 8000c56:	e161      	b.n	8000f1c <__aeabi_dadd+0x330>
 8000c58:	2a1f      	cmp	r2, #31
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_dadd+0x72>
 8000c5c:	e1cc      	b.n	8000ff8 <__aeabi_dadd+0x40c>
 8000c5e:	4664      	mov	r4, ip
 8000c60:	2220      	movs	r2, #32
 8000c62:	1b12      	subs	r2, r2, r4
 8000c64:	4644      	mov	r4, r8
 8000c66:	4094      	lsls	r4, r2
 8000c68:	000f      	movs	r7, r1
 8000c6a:	46a1      	mov	r9, r4
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	40e7      	lsrs	r7, r4
 8000c72:	464c      	mov	r4, r9
 8000c74:	1e4a      	subs	r2, r1, #1
 8000c76:	4191      	sbcs	r1, r2
 8000c78:	433c      	orrs	r4, r7
 8000c7a:	4642      	mov	r2, r8
 8000c7c:	4321      	orrs	r1, r4
 8000c7e:	4664      	mov	r4, ip
 8000c80:	40e2      	lsrs	r2, r4
 8000c82:	1a80      	subs	r0, r0, r2
 8000c84:	1a5c      	subs	r4, r3, r1
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	419b      	sbcs	r3, r3
 8000c8a:	425f      	negs	r7, r3
 8000c8c:	1bc7      	subs	r7, r0, r7
 8000c8e:	023b      	lsls	r3, r7, #8
 8000c90:	d400      	bmi.n	8000c94 <__aeabi_dadd+0xa8>
 8000c92:	e0d0      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8000c94:	027f      	lsls	r7, r7, #9
 8000c96:	0a7f      	lsrs	r7, r7, #9
 8000c98:	2f00      	cmp	r7, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0xb2>
 8000c9c:	e0ff      	b.n	8000e9e <__aeabi_dadd+0x2b2>
 8000c9e:	0038      	movs	r0, r7
 8000ca0:	f001 fe5a 	bl	8002958 <__clzsi2>
 8000ca4:	0001      	movs	r1, r0
 8000ca6:	3908      	subs	r1, #8
 8000ca8:	2320      	movs	r3, #32
 8000caa:	0022      	movs	r2, r4
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	408f      	lsls	r7, r1
 8000cb0:	40da      	lsrs	r2, r3
 8000cb2:	408c      	lsls	r4, r1
 8000cb4:	4317      	orrs	r7, r2
 8000cb6:	42b1      	cmp	r1, r6
 8000cb8:	da00      	bge.n	8000cbc <__aeabi_dadd+0xd0>
 8000cba:	e0ff      	b.n	8000ebc <__aeabi_dadd+0x2d0>
 8000cbc:	1b89      	subs	r1, r1, r6
 8000cbe:	1c4b      	adds	r3, r1, #1
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	dd00      	ble.n	8000cc6 <__aeabi_dadd+0xda>
 8000cc4:	e0a8      	b.n	8000e18 <__aeabi_dadd+0x22c>
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	0039      	movs	r1, r7
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	0020      	movs	r0, r4
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	1e62      	subs	r2, r4, #1
 8000cd6:	4194      	sbcs	r4, r2
 8000cd8:	40df      	lsrs	r7, r3
 8000cda:	2600      	movs	r6, #0
 8000cdc:	4301      	orrs	r1, r0
 8000cde:	430c      	orrs	r4, r1
 8000ce0:	0763      	lsls	r3, r4, #29
 8000ce2:	d009      	beq.n	8000cf8 <__aeabi_dadd+0x10c>
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4023      	ands	r3, r4
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d005      	beq.n	8000cf8 <__aeabi_dadd+0x10c>
 8000cec:	1d23      	adds	r3, r4, #4
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	41a4      	sbcs	r4, r4
 8000cf2:	4264      	negs	r4, r4
 8000cf4:	193f      	adds	r7, r7, r4
 8000cf6:	001c      	movs	r4, r3
 8000cf8:	023b      	lsls	r3, r7, #8
 8000cfa:	d400      	bmi.n	8000cfe <__aeabi_dadd+0x112>
 8000cfc:	e09e      	b.n	8000e3c <__aeabi_dadd+0x250>
 8000cfe:	4b95      	ldr	r3, [pc, #596]	; (8000f54 <__aeabi_dadd+0x368>)
 8000d00:	3601      	adds	r6, #1
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x11c>
 8000d06:	e0b7      	b.n	8000e78 <__aeabi_dadd+0x28c>
 8000d08:	4a93      	ldr	r2, [pc, #588]	; (8000f58 <__aeabi_dadd+0x36c>)
 8000d0a:	08e4      	lsrs	r4, r4, #3
 8000d0c:	4017      	ands	r7, r2
 8000d0e:	077b      	lsls	r3, r7, #29
 8000d10:	0571      	lsls	r1, r6, #21
 8000d12:	027f      	lsls	r7, r7, #9
 8000d14:	4323      	orrs	r3, r4
 8000d16:	0b3f      	lsrs	r7, r7, #12
 8000d18:	0d4a      	lsrs	r2, r1, #21
 8000d1a:	0512      	lsls	r2, r2, #20
 8000d1c:	433a      	orrs	r2, r7
 8000d1e:	07ed      	lsls	r5, r5, #31
 8000d20:	432a      	orrs	r2, r5
 8000d22:	0018      	movs	r0, r3
 8000d24:	0011      	movs	r1, r2
 8000d26:	bce0      	pop	{r5, r6, r7}
 8000d28:	46ba      	mov	sl, r7
 8000d2a:	46b1      	mov	r9, r6
 8000d2c:	46a8      	mov	r8, r5
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d04b      	beq.n	8000dcc <__aeabi_dadd+0x1e0>
 8000d34:	464c      	mov	r4, r9
 8000d36:	1ba4      	subs	r4, r4, r6
 8000d38:	46a4      	mov	ip, r4
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_dadd+0x154>
 8000d3e:	e123      	b.n	8000f88 <__aeabi_dadd+0x39c>
 8000d40:	0004      	movs	r4, r0
 8000d42:	431c      	orrs	r4, r3
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x15c>
 8000d46:	e1af      	b.n	80010a8 <__aeabi_dadd+0x4bc>
 8000d48:	4662      	mov	r2, ip
 8000d4a:	1e54      	subs	r4, r2, #1
 8000d4c:	2a01      	cmp	r2, #1
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0x166>
 8000d50:	e215      	b.n	800117e <__aeabi_dadd+0x592>
 8000d52:	4d80      	ldr	r5, [pc, #512]	; (8000f54 <__aeabi_dadd+0x368>)
 8000d54:	45ac      	cmp	ip, r5
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x16e>
 8000d58:	e1c8      	b.n	80010ec <__aeabi_dadd+0x500>
 8000d5a:	46a4      	mov	ip, r4
 8000d5c:	e11b      	b.n	8000f96 <__aeabi_dadd+0x3aa>
 8000d5e:	464a      	mov	r2, r9
 8000d60:	1ab2      	subs	r2, r6, r2
 8000d62:	4694      	mov	ip, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_dadd+0x17e>
 8000d68:	e0ac      	b.n	8000ec4 <__aeabi_dadd+0x2d8>
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d043      	beq.n	8000df8 <__aeabi_dadd+0x20c>
 8000d70:	4a78      	ldr	r2, [pc, #480]	; (8000f54 <__aeabi_dadd+0x368>)
 8000d72:	4296      	cmp	r6, r2
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x18c>
 8000d76:	e1af      	b.n	80010d8 <__aeabi_dadd+0x4ec>
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	0412      	lsls	r2, r2, #16
 8000d7e:	4314      	orrs	r4, r2
 8000d80:	46a0      	mov	r8, r4
 8000d82:	4662      	mov	r2, ip
 8000d84:	2a38      	cmp	r2, #56	; 0x38
 8000d86:	dc67      	bgt.n	8000e58 <__aeabi_dadd+0x26c>
 8000d88:	2a1f      	cmp	r2, #31
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dadd+0x1a2>
 8000d8c:	e15f      	b.n	800104e <__aeabi_dadd+0x462>
 8000d8e:	4647      	mov	r7, r8
 8000d90:	3a20      	subs	r2, #32
 8000d92:	40d7      	lsrs	r7, r2
 8000d94:	4662      	mov	r2, ip
 8000d96:	2a20      	cmp	r2, #32
 8000d98:	d005      	beq.n	8000da6 <__aeabi_dadd+0x1ba>
 8000d9a:	4664      	mov	r4, ip
 8000d9c:	2240      	movs	r2, #64	; 0x40
 8000d9e:	1b12      	subs	r2, r2, r4
 8000da0:	4644      	mov	r4, r8
 8000da2:	4094      	lsls	r4, r2
 8000da4:	4321      	orrs	r1, r4
 8000da6:	1e4a      	subs	r2, r1, #1
 8000da8:	4191      	sbcs	r1, r2
 8000daa:	000c      	movs	r4, r1
 8000dac:	433c      	orrs	r4, r7
 8000dae:	e057      	b.n	8000e60 <__aeabi_dadd+0x274>
 8000db0:	003a      	movs	r2, r7
 8000db2:	430a      	orrs	r2, r1
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x1cc>
 8000db6:	e105      	b.n	8000fc4 <__aeabi_dadd+0x3d8>
 8000db8:	0022      	movs	r2, r4
 8000dba:	3a01      	subs	r2, #1
 8000dbc:	2c01      	cmp	r4, #1
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_dadd+0x1d6>
 8000dc0:	e182      	b.n	80010c8 <__aeabi_dadd+0x4dc>
 8000dc2:	4c64      	ldr	r4, [pc, #400]	; (8000f54 <__aeabi_dadd+0x368>)
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	d05b      	beq.n	8000e80 <__aeabi_dadd+0x294>
 8000dc8:	4694      	mov	ip, r2
 8000dca:	e741      	b.n	8000c50 <__aeabi_dadd+0x64>
 8000dcc:	4c63      	ldr	r4, [pc, #396]	; (8000f5c <__aeabi_dadd+0x370>)
 8000dce:	1c77      	adds	r7, r6, #1
 8000dd0:	4227      	tst	r7, r4
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x1ea>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_dadd+0x374>
 8000dd6:	0004      	movs	r4, r0
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x1f4>
 8000dde:	e169      	b.n	80010b4 <__aeabi_dadd+0x4c8>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x1fa>
 8000de4:	e1bf      	b.n	8001166 <__aeabi_dadd+0x57a>
 8000de6:	4644      	mov	r4, r8
 8000de8:	430c      	orrs	r4, r1
 8000dea:	d000      	beq.n	8000dee <__aeabi_dadd+0x202>
 8000dec:	e1d0      	b.n	8001190 <__aeabi_dadd+0x5a4>
 8000dee:	0742      	lsls	r2, r0, #29
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	08c0      	lsrs	r0, r0, #3
 8000df6:	e029      	b.n	8000e4c <__aeabi_dadd+0x260>
 8000df8:	003a      	movs	r2, r7
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dadd+0x214>
 8000dfe:	e170      	b.n	80010e2 <__aeabi_dadd+0x4f6>
 8000e00:	4662      	mov	r2, ip
 8000e02:	4664      	mov	r4, ip
 8000e04:	3a01      	subs	r2, #1
 8000e06:	2c01      	cmp	r4, #1
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dadd+0x220>
 8000e0a:	e0e0      	b.n	8000fce <__aeabi_dadd+0x3e2>
 8000e0c:	4c51      	ldr	r4, [pc, #324]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dadd+0x228>
 8000e12:	e161      	b.n	80010d8 <__aeabi_dadd+0x4ec>
 8000e14:	4694      	mov	ip, r2
 8000e16:	e7b4      	b.n	8000d82 <__aeabi_dadd+0x196>
 8000e18:	003a      	movs	r2, r7
 8000e1a:	391f      	subs	r1, #31
 8000e1c:	40ca      	lsrs	r2, r1
 8000e1e:	0011      	movs	r1, r2
 8000e20:	2b20      	cmp	r3, #32
 8000e22:	d003      	beq.n	8000e2c <__aeabi_dadd+0x240>
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	433c      	orrs	r4, r7
 8000e2c:	1e63      	subs	r3, r4, #1
 8000e2e:	419c      	sbcs	r4, r3
 8000e30:	2700      	movs	r7, #0
 8000e32:	2600      	movs	r6, #0
 8000e34:	430c      	orrs	r4, r1
 8000e36:	0763      	lsls	r3, r4, #29
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x250>
 8000e3a:	e753      	b.n	8000ce4 <__aeabi_dadd+0xf8>
 8000e3c:	46b4      	mov	ip, r6
 8000e3e:	08e4      	lsrs	r4, r4, #3
 8000e40:	077b      	lsls	r3, r7, #29
 8000e42:	4323      	orrs	r3, r4
 8000e44:	08f8      	lsrs	r0, r7, #3
 8000e46:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e48:	4594      	cmp	ip, r2
 8000e4a:	d01d      	beq.n	8000e88 <__aeabi_dadd+0x29c>
 8000e4c:	4662      	mov	r2, ip
 8000e4e:	0307      	lsls	r7, r0, #12
 8000e50:	0552      	lsls	r2, r2, #21
 8000e52:	0b3f      	lsrs	r7, r7, #12
 8000e54:	0d52      	lsrs	r2, r2, #21
 8000e56:	e760      	b.n	8000d1a <__aeabi_dadd+0x12e>
 8000e58:	4644      	mov	r4, r8
 8000e5a:	430c      	orrs	r4, r1
 8000e5c:	1e62      	subs	r2, r4, #1
 8000e5e:	4194      	sbcs	r4, r2
 8000e60:	18e4      	adds	r4, r4, r3
 8000e62:	429c      	cmp	r4, r3
 8000e64:	419b      	sbcs	r3, r3
 8000e66:	425f      	negs	r7, r3
 8000e68:	183f      	adds	r7, r7, r0
 8000e6a:	023b      	lsls	r3, r7, #8
 8000e6c:	d5e3      	bpl.n	8000e36 <__aeabi_dadd+0x24a>
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e70:	3601      	adds	r6, #1
 8000e72:	429e      	cmp	r6, r3
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x28c>
 8000e76:	e0b5      	b.n	8000fe4 <__aeabi_dadd+0x3f8>
 8000e78:	0032      	movs	r2, r6
 8000e7a:	2700      	movs	r7, #0
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e74c      	b.n	8000d1a <__aeabi_dadd+0x12e>
 8000e80:	0742      	lsls	r2, r0, #29
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	08c0      	lsrs	r0, r0, #3
 8000e88:	001a      	movs	r2, r3
 8000e8a:	4302      	orrs	r2, r0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x2a4>
 8000e8e:	e1e1      	b.n	8001254 <__aeabi_dadd+0x668>
 8000e90:	2780      	movs	r7, #128	; 0x80
 8000e92:	033f      	lsls	r7, r7, #12
 8000e94:	4307      	orrs	r7, r0
 8000e96:	033f      	lsls	r7, r7, #12
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <__aeabi_dadd+0x368>)
 8000e9a:	0b3f      	lsrs	r7, r7, #12
 8000e9c:	e73d      	b.n	8000d1a <__aeabi_dadd+0x12e>
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f001 fd5a 	bl	8002958 <__clzsi2>
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	3118      	adds	r1, #24
 8000ea8:	291f      	cmp	r1, #31
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_dadd+0x2c2>
 8000eac:	e6fc      	b.n	8000ca8 <__aeabi_dadd+0xbc>
 8000eae:	3808      	subs	r0, #8
 8000eb0:	4084      	lsls	r4, r0
 8000eb2:	0027      	movs	r7, r4
 8000eb4:	2400      	movs	r4, #0
 8000eb6:	42b1      	cmp	r1, r6
 8000eb8:	db00      	blt.n	8000ebc <__aeabi_dadd+0x2d0>
 8000eba:	e6ff      	b.n	8000cbc <__aeabi_dadd+0xd0>
 8000ebc:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <__aeabi_dadd+0x36c>)
 8000ebe:	1a76      	subs	r6, r6, r1
 8000ec0:	4017      	ands	r7, r2
 8000ec2:	e70d      	b.n	8000ce0 <__aeabi_dadd+0xf4>
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d02f      	beq.n	8000f28 <__aeabi_dadd+0x33c>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	1b92      	subs	r2, r2, r6
 8000ecc:	4694      	mov	ip, r2
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dadd+0x2e8>
 8000ed2:	e0ad      	b.n	8001030 <__aeabi_dadd+0x444>
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <__aeabi_dadd+0x368>)
 8000ed6:	4591      	cmp	r9, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0x2f0>
 8000eda:	e10f      	b.n	80010fc <__aeabi_dadd+0x510>
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0412      	lsls	r2, r2, #16
 8000ee0:	4310      	orrs	r0, r2
 8000ee2:	4662      	mov	r2, ip
 8000ee4:	2a38      	cmp	r2, #56	; 0x38
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dadd+0x2fe>
 8000ee8:	e10f      	b.n	800110a <__aeabi_dadd+0x51e>
 8000eea:	2a1f      	cmp	r2, #31
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_dadd+0x304>
 8000eee:	e180      	b.n	80011f2 <__aeabi_dadd+0x606>
 8000ef0:	4664      	mov	r4, ip
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	001e      	movs	r6, r3
 8000ef6:	1b12      	subs	r2, r2, r4
 8000ef8:	4667      	mov	r7, ip
 8000efa:	0004      	movs	r4, r0
 8000efc:	4093      	lsls	r3, r2
 8000efe:	4094      	lsls	r4, r2
 8000f00:	40fe      	lsrs	r6, r7
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	4193      	sbcs	r3, r2
 8000f06:	40f8      	lsrs	r0, r7
 8000f08:	4334      	orrs	r4, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	4480      	add	r8, r0
 8000f0e:	1864      	adds	r4, r4, r1
 8000f10:	428c      	cmp	r4, r1
 8000f12:	41bf      	sbcs	r7, r7
 8000f14:	427f      	negs	r7, r7
 8000f16:	464e      	mov	r6, r9
 8000f18:	4447      	add	r7, r8
 8000f1a:	e7a6      	b.n	8000e6a <__aeabi_dadd+0x27e>
 8000f1c:	4642      	mov	r2, r8
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	0011      	movs	r1, r2
 8000f22:	1e4a      	subs	r2, r1, #1
 8000f24:	4191      	sbcs	r1, r2
 8000f26:	e6ad      	b.n	8000c84 <__aeabi_dadd+0x98>
 8000f28:	4c0c      	ldr	r4, [pc, #48]	; (8000f5c <__aeabi_dadd+0x370>)
 8000f2a:	1c72      	adds	r2, r6, #1
 8000f2c:	4222      	tst	r2, r4
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_dadd+0x346>
 8000f30:	e0a1      	b.n	8001076 <__aeabi_dadd+0x48a>
 8000f32:	0002      	movs	r2, r0
 8000f34:	431a      	orrs	r2, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dadd+0x350>
 8000f3a:	e0fa      	b.n	8001132 <__aeabi_dadd+0x546>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x356>
 8000f40:	e145      	b.n	80011ce <__aeabi_dadd+0x5e2>
 8000f42:	003a      	movs	r2, r7
 8000f44:	430a      	orrs	r2, r1
 8000f46:	d000      	beq.n	8000f4a <__aeabi_dadd+0x35e>
 8000f48:	e146      	b.n	80011d8 <__aeabi_dadd+0x5ec>
 8000f4a:	0742      	lsls	r2, r0, #29
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	08c0      	lsrs	r0, r0, #3
 8000f52:	e77b      	b.n	8000e4c <__aeabi_dadd+0x260>
 8000f54:	000007ff 	.word	0x000007ff
 8000f58:	ff7fffff 	.word	0xff7fffff
 8000f5c:	000007fe 	.word	0x000007fe
 8000f60:	4647      	mov	r7, r8
 8000f62:	1a5c      	subs	r4, r3, r1
 8000f64:	1bc2      	subs	r2, r0, r7
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	41bf      	sbcs	r7, r7
 8000f6a:	427f      	negs	r7, r7
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	464a      	mov	r2, r9
 8000f72:	1abf      	subs	r7, r7, r2
 8000f74:	023a      	lsls	r2, r7, #8
 8000f76:	d500      	bpl.n	8000f7a <__aeabi_dadd+0x38e>
 8000f78:	e08d      	b.n	8001096 <__aeabi_dadd+0x4aa>
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	433b      	orrs	r3, r7
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_dadd+0x396>
 8000f80:	e68a      	b.n	8000c98 <__aeabi_dadd+0xac>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	e761      	b.n	8000e4c <__aeabi_dadd+0x260>
 8000f88:	4cb4      	ldr	r4, [pc, #720]	; (800125c <__aeabi_dadd+0x670>)
 8000f8a:	45a1      	cmp	r9, r4
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x3a4>
 8000f8e:	e0ad      	b.n	80010ec <__aeabi_dadd+0x500>
 8000f90:	2480      	movs	r4, #128	; 0x80
 8000f92:	0424      	lsls	r4, r4, #16
 8000f94:	4320      	orrs	r0, r4
 8000f96:	4664      	mov	r4, ip
 8000f98:	2c38      	cmp	r4, #56	; 0x38
 8000f9a:	dc3d      	bgt.n	8001018 <__aeabi_dadd+0x42c>
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	2c1f      	cmp	r4, #31
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_dadd+0x3b8>
 8000fa2:	e0b7      	b.n	8001114 <__aeabi_dadd+0x528>
 8000fa4:	2520      	movs	r5, #32
 8000fa6:	001e      	movs	r6, r3
 8000fa8:	1b2d      	subs	r5, r5, r4
 8000faa:	0004      	movs	r4, r0
 8000fac:	40ab      	lsls	r3, r5
 8000fae:	40ac      	lsls	r4, r5
 8000fb0:	40d6      	lsrs	r6, r2
 8000fb2:	40d0      	lsrs	r0, r2
 8000fb4:	4642      	mov	r2, r8
 8000fb6:	1e5d      	subs	r5, r3, #1
 8000fb8:	41ab      	sbcs	r3, r5
 8000fba:	4334      	orrs	r4, r6
 8000fbc:	1a12      	subs	r2, r2, r0
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4323      	orrs	r3, r4
 8000fc2:	e02c      	b.n	800101e <__aeabi_dadd+0x432>
 8000fc4:	0742      	lsls	r2, r0, #29
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	08c0      	lsrs	r0, r0, #3
 8000fcc:	e73b      	b.n	8000e46 <__aeabi_dadd+0x25a>
 8000fce:	185c      	adds	r4, r3, r1
 8000fd0:	429c      	cmp	r4, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	4440      	add	r0, r8
 8000fd6:	425b      	negs	r3, r3
 8000fd8:	18c7      	adds	r7, r0, r3
 8000fda:	2601      	movs	r6, #1
 8000fdc:	023b      	lsls	r3, r7, #8
 8000fde:	d400      	bmi.n	8000fe2 <__aeabi_dadd+0x3f6>
 8000fe0:	e729      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8000fe2:	2602      	movs	r6, #2
 8000fe4:	4a9e      	ldr	r2, [pc, #632]	; (8001260 <__aeabi_dadd+0x674>)
 8000fe6:	0863      	lsrs	r3, r4, #1
 8000fe8:	4017      	ands	r7, r2
 8000fea:	2201      	movs	r2, #1
 8000fec:	4014      	ands	r4, r2
 8000fee:	431c      	orrs	r4, r3
 8000ff0:	07fb      	lsls	r3, r7, #31
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	087f      	lsrs	r7, r7, #1
 8000ff6:	e673      	b.n	8000ce0 <__aeabi_dadd+0xf4>
 8000ff8:	4644      	mov	r4, r8
 8000ffa:	3a20      	subs	r2, #32
 8000ffc:	40d4      	lsrs	r4, r2
 8000ffe:	4662      	mov	r2, ip
 8001000:	2a20      	cmp	r2, #32
 8001002:	d005      	beq.n	8001010 <__aeabi_dadd+0x424>
 8001004:	4667      	mov	r7, ip
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	1bd2      	subs	r2, r2, r7
 800100a:	4647      	mov	r7, r8
 800100c:	4097      	lsls	r7, r2
 800100e:	4339      	orrs	r1, r7
 8001010:	1e4a      	subs	r2, r1, #1
 8001012:	4191      	sbcs	r1, r2
 8001014:	4321      	orrs	r1, r4
 8001016:	e635      	b.n	8000c84 <__aeabi_dadd+0x98>
 8001018:	4303      	orrs	r3, r0
 800101a:	1e58      	subs	r0, r3, #1
 800101c:	4183      	sbcs	r3, r0
 800101e:	1acc      	subs	r4, r1, r3
 8001020:	42a1      	cmp	r1, r4
 8001022:	41bf      	sbcs	r7, r7
 8001024:	4643      	mov	r3, r8
 8001026:	427f      	negs	r7, r7
 8001028:	4655      	mov	r5, sl
 800102a:	464e      	mov	r6, r9
 800102c:	1bdf      	subs	r7, r3, r7
 800102e:	e62e      	b.n	8000c8e <__aeabi_dadd+0xa2>
 8001030:	0002      	movs	r2, r0
 8001032:	431a      	orrs	r2, r3
 8001034:	d100      	bne.n	8001038 <__aeabi_dadd+0x44c>
 8001036:	e0bd      	b.n	80011b4 <__aeabi_dadd+0x5c8>
 8001038:	4662      	mov	r2, ip
 800103a:	4664      	mov	r4, ip
 800103c:	3a01      	subs	r2, #1
 800103e:	2c01      	cmp	r4, #1
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x458>
 8001042:	e0e5      	b.n	8001210 <__aeabi_dadd+0x624>
 8001044:	4c85      	ldr	r4, [pc, #532]	; (800125c <__aeabi_dadd+0x670>)
 8001046:	45a4      	cmp	ip, r4
 8001048:	d058      	beq.n	80010fc <__aeabi_dadd+0x510>
 800104a:	4694      	mov	ip, r2
 800104c:	e749      	b.n	8000ee2 <__aeabi_dadd+0x2f6>
 800104e:	4664      	mov	r4, ip
 8001050:	2220      	movs	r2, #32
 8001052:	1b12      	subs	r2, r2, r4
 8001054:	4644      	mov	r4, r8
 8001056:	4094      	lsls	r4, r2
 8001058:	000f      	movs	r7, r1
 800105a:	46a1      	mov	r9, r4
 800105c:	4664      	mov	r4, ip
 800105e:	4091      	lsls	r1, r2
 8001060:	40e7      	lsrs	r7, r4
 8001062:	464c      	mov	r4, r9
 8001064:	1e4a      	subs	r2, r1, #1
 8001066:	4191      	sbcs	r1, r2
 8001068:	433c      	orrs	r4, r7
 800106a:	4642      	mov	r2, r8
 800106c:	430c      	orrs	r4, r1
 800106e:	4661      	mov	r1, ip
 8001070:	40ca      	lsrs	r2, r1
 8001072:	1880      	adds	r0, r0, r2
 8001074:	e6f4      	b.n	8000e60 <__aeabi_dadd+0x274>
 8001076:	4c79      	ldr	r4, [pc, #484]	; (800125c <__aeabi_dadd+0x670>)
 8001078:	42a2      	cmp	r2, r4
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x492>
 800107c:	e6fd      	b.n	8000e7a <__aeabi_dadd+0x28e>
 800107e:	1859      	adds	r1, r3, r1
 8001080:	4299      	cmp	r1, r3
 8001082:	419b      	sbcs	r3, r3
 8001084:	4440      	add	r0, r8
 8001086:	425f      	negs	r7, r3
 8001088:	19c7      	adds	r7, r0, r7
 800108a:	07fc      	lsls	r4, r7, #31
 800108c:	0849      	lsrs	r1, r1, #1
 800108e:	0016      	movs	r6, r2
 8001090:	430c      	orrs	r4, r1
 8001092:	087f      	lsrs	r7, r7, #1
 8001094:	e6cf      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8001096:	1acc      	subs	r4, r1, r3
 8001098:	42a1      	cmp	r1, r4
 800109a:	41bf      	sbcs	r7, r7
 800109c:	4643      	mov	r3, r8
 800109e:	427f      	negs	r7, r7
 80010a0:	1a18      	subs	r0, r3, r0
 80010a2:	4655      	mov	r5, sl
 80010a4:	1bc7      	subs	r7, r0, r7
 80010a6:	e5f7      	b.n	8000c98 <__aeabi_dadd+0xac>
 80010a8:	08c9      	lsrs	r1, r1, #3
 80010aa:	077b      	lsls	r3, r7, #29
 80010ac:	4655      	mov	r5, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	08f8      	lsrs	r0, r7, #3
 80010b2:	e6c8      	b.n	8000e46 <__aeabi_dadd+0x25a>
 80010b4:	2c00      	cmp	r4, #0
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x4ce>
 80010b8:	e081      	b.n	80011be <__aeabi_dadd+0x5d2>
 80010ba:	4643      	mov	r3, r8
 80010bc:	430b      	orrs	r3, r1
 80010be:	d115      	bne.n	80010ec <__aeabi_dadd+0x500>
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	2500      	movs	r5, #0
 80010c4:	0300      	lsls	r0, r0, #12
 80010c6:	e6e3      	b.n	8000e90 <__aeabi_dadd+0x2a4>
 80010c8:	1a5c      	subs	r4, r3, r1
 80010ca:	42a3      	cmp	r3, r4
 80010cc:	419b      	sbcs	r3, r3
 80010ce:	1bc7      	subs	r7, r0, r7
 80010d0:	425b      	negs	r3, r3
 80010d2:	2601      	movs	r6, #1
 80010d4:	1aff      	subs	r7, r7, r3
 80010d6:	e5da      	b.n	8000c8e <__aeabi_dadd+0xa2>
 80010d8:	0742      	lsls	r2, r0, #29
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	4313      	orrs	r3, r2
 80010de:	08c0      	lsrs	r0, r0, #3
 80010e0:	e6d2      	b.n	8000e88 <__aeabi_dadd+0x29c>
 80010e2:	0742      	lsls	r2, r0, #29
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	08c0      	lsrs	r0, r0, #3
 80010ea:	e6ac      	b.n	8000e46 <__aeabi_dadd+0x25a>
 80010ec:	4643      	mov	r3, r8
 80010ee:	4642      	mov	r2, r8
 80010f0:	08c9      	lsrs	r1, r1, #3
 80010f2:	075b      	lsls	r3, r3, #29
 80010f4:	4655      	mov	r5, sl
 80010f6:	430b      	orrs	r3, r1
 80010f8:	08d0      	lsrs	r0, r2, #3
 80010fa:	e6c5      	b.n	8000e88 <__aeabi_dadd+0x29c>
 80010fc:	4643      	mov	r3, r8
 80010fe:	4642      	mov	r2, r8
 8001100:	075b      	lsls	r3, r3, #29
 8001102:	08c9      	lsrs	r1, r1, #3
 8001104:	430b      	orrs	r3, r1
 8001106:	08d0      	lsrs	r0, r2, #3
 8001108:	e6be      	b.n	8000e88 <__aeabi_dadd+0x29c>
 800110a:	4303      	orrs	r3, r0
 800110c:	001c      	movs	r4, r3
 800110e:	1e63      	subs	r3, r4, #1
 8001110:	419c      	sbcs	r4, r3
 8001112:	e6fc      	b.n	8000f0e <__aeabi_dadd+0x322>
 8001114:	0002      	movs	r2, r0
 8001116:	3c20      	subs	r4, #32
 8001118:	40e2      	lsrs	r2, r4
 800111a:	0014      	movs	r4, r2
 800111c:	4662      	mov	r2, ip
 800111e:	2a20      	cmp	r2, #32
 8001120:	d003      	beq.n	800112a <__aeabi_dadd+0x53e>
 8001122:	2540      	movs	r5, #64	; 0x40
 8001124:	1aad      	subs	r5, r5, r2
 8001126:	40a8      	lsls	r0, r5
 8001128:	4303      	orrs	r3, r0
 800112a:	1e58      	subs	r0, r3, #1
 800112c:	4183      	sbcs	r3, r0
 800112e:	4323      	orrs	r3, r4
 8001130:	e775      	b.n	800101e <__aeabi_dadd+0x432>
 8001132:	2a00      	cmp	r2, #0
 8001134:	d0e2      	beq.n	80010fc <__aeabi_dadd+0x510>
 8001136:	003a      	movs	r2, r7
 8001138:	430a      	orrs	r2, r1
 800113a:	d0cd      	beq.n	80010d8 <__aeabi_dadd+0x4ec>
 800113c:	0742      	lsls	r2, r0, #29
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	4313      	orrs	r3, r2
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	08c0      	lsrs	r0, r0, #3
 8001146:	0312      	lsls	r2, r2, #12
 8001148:	4210      	tst	r0, r2
 800114a:	d006      	beq.n	800115a <__aeabi_dadd+0x56e>
 800114c:	08fc      	lsrs	r4, r7, #3
 800114e:	4214      	tst	r4, r2
 8001150:	d103      	bne.n	800115a <__aeabi_dadd+0x56e>
 8001152:	0020      	movs	r0, r4
 8001154:	08cb      	lsrs	r3, r1, #3
 8001156:	077a      	lsls	r2, r7, #29
 8001158:	4313      	orrs	r3, r2
 800115a:	0f5a      	lsrs	r2, r3, #29
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	0752      	lsls	r2, r2, #29
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	4313      	orrs	r3, r2
 8001164:	e690      	b.n	8000e88 <__aeabi_dadd+0x29c>
 8001166:	4643      	mov	r3, r8
 8001168:	430b      	orrs	r3, r1
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x582>
 800116c:	e709      	b.n	8000f82 <__aeabi_dadd+0x396>
 800116e:	4643      	mov	r3, r8
 8001170:	4642      	mov	r2, r8
 8001172:	08c9      	lsrs	r1, r1, #3
 8001174:	075b      	lsls	r3, r3, #29
 8001176:	4655      	mov	r5, sl
 8001178:	430b      	orrs	r3, r1
 800117a:	08d0      	lsrs	r0, r2, #3
 800117c:	e666      	b.n	8000e4c <__aeabi_dadd+0x260>
 800117e:	1acc      	subs	r4, r1, r3
 8001180:	42a1      	cmp	r1, r4
 8001182:	4189      	sbcs	r1, r1
 8001184:	1a3f      	subs	r7, r7, r0
 8001186:	4249      	negs	r1, r1
 8001188:	4655      	mov	r5, sl
 800118a:	2601      	movs	r6, #1
 800118c:	1a7f      	subs	r7, r7, r1
 800118e:	e57e      	b.n	8000c8e <__aeabi_dadd+0xa2>
 8001190:	4642      	mov	r2, r8
 8001192:	1a5c      	subs	r4, r3, r1
 8001194:	1a87      	subs	r7, r0, r2
 8001196:	42a3      	cmp	r3, r4
 8001198:	4192      	sbcs	r2, r2
 800119a:	4252      	negs	r2, r2
 800119c:	1abf      	subs	r7, r7, r2
 800119e:	023a      	lsls	r2, r7, #8
 80011a0:	d53d      	bpl.n	800121e <__aeabi_dadd+0x632>
 80011a2:	1acc      	subs	r4, r1, r3
 80011a4:	42a1      	cmp	r1, r4
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	4643      	mov	r3, r8
 80011aa:	4249      	negs	r1, r1
 80011ac:	1a1f      	subs	r7, r3, r0
 80011ae:	4655      	mov	r5, sl
 80011b0:	1a7f      	subs	r7, r7, r1
 80011b2:	e595      	b.n	8000ce0 <__aeabi_dadd+0xf4>
 80011b4:	077b      	lsls	r3, r7, #29
 80011b6:	08c9      	lsrs	r1, r1, #3
 80011b8:	430b      	orrs	r3, r1
 80011ba:	08f8      	lsrs	r0, r7, #3
 80011bc:	e643      	b.n	8000e46 <__aeabi_dadd+0x25a>
 80011be:	4644      	mov	r4, r8
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	430c      	orrs	r4, r1
 80011c4:	d130      	bne.n	8001228 <__aeabi_dadd+0x63c>
 80011c6:	0742      	lsls	r2, r0, #29
 80011c8:	4313      	orrs	r3, r2
 80011ca:	08c0      	lsrs	r0, r0, #3
 80011cc:	e65c      	b.n	8000e88 <__aeabi_dadd+0x29c>
 80011ce:	077b      	lsls	r3, r7, #29
 80011d0:	08c9      	lsrs	r1, r1, #3
 80011d2:	430b      	orrs	r3, r1
 80011d4:	08f8      	lsrs	r0, r7, #3
 80011d6:	e639      	b.n	8000e4c <__aeabi_dadd+0x260>
 80011d8:	185c      	adds	r4, r3, r1
 80011da:	429c      	cmp	r4, r3
 80011dc:	419b      	sbcs	r3, r3
 80011de:	4440      	add	r0, r8
 80011e0:	425b      	negs	r3, r3
 80011e2:	18c7      	adds	r7, r0, r3
 80011e4:	023b      	lsls	r3, r7, #8
 80011e6:	d400      	bmi.n	80011ea <__aeabi_dadd+0x5fe>
 80011e8:	e625      	b.n	8000e36 <__aeabi_dadd+0x24a>
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <__aeabi_dadd+0x674>)
 80011ec:	2601      	movs	r6, #1
 80011ee:	401f      	ands	r7, r3
 80011f0:	e621      	b.n	8000e36 <__aeabi_dadd+0x24a>
 80011f2:	0004      	movs	r4, r0
 80011f4:	3a20      	subs	r2, #32
 80011f6:	40d4      	lsrs	r4, r2
 80011f8:	4662      	mov	r2, ip
 80011fa:	2a20      	cmp	r2, #32
 80011fc:	d004      	beq.n	8001208 <__aeabi_dadd+0x61c>
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	4666      	mov	r6, ip
 8001202:	1b92      	subs	r2, r2, r6
 8001204:	4090      	lsls	r0, r2
 8001206:	4303      	orrs	r3, r0
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	4193      	sbcs	r3, r2
 800120c:	431c      	orrs	r4, r3
 800120e:	e67e      	b.n	8000f0e <__aeabi_dadd+0x322>
 8001210:	185c      	adds	r4, r3, r1
 8001212:	428c      	cmp	r4, r1
 8001214:	4189      	sbcs	r1, r1
 8001216:	4440      	add	r0, r8
 8001218:	4249      	negs	r1, r1
 800121a:	1847      	adds	r7, r0, r1
 800121c:	e6dd      	b.n	8000fda <__aeabi_dadd+0x3ee>
 800121e:	0023      	movs	r3, r4
 8001220:	433b      	orrs	r3, r7
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x63a>
 8001224:	e6ad      	b.n	8000f82 <__aeabi_dadd+0x396>
 8001226:	e606      	b.n	8000e36 <__aeabi_dadd+0x24a>
 8001228:	0744      	lsls	r4, r0, #29
 800122a:	4323      	orrs	r3, r4
 800122c:	2480      	movs	r4, #128	; 0x80
 800122e:	08c0      	lsrs	r0, r0, #3
 8001230:	0324      	lsls	r4, r4, #12
 8001232:	4220      	tst	r0, r4
 8001234:	d008      	beq.n	8001248 <__aeabi_dadd+0x65c>
 8001236:	4642      	mov	r2, r8
 8001238:	08d6      	lsrs	r6, r2, #3
 800123a:	4226      	tst	r6, r4
 800123c:	d104      	bne.n	8001248 <__aeabi_dadd+0x65c>
 800123e:	4655      	mov	r5, sl
 8001240:	0030      	movs	r0, r6
 8001242:	08cb      	lsrs	r3, r1, #3
 8001244:	0751      	lsls	r1, r2, #29
 8001246:	430b      	orrs	r3, r1
 8001248:	0f5a      	lsrs	r2, r3, #29
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	4313      	orrs	r3, r2
 8001252:	e619      	b.n	8000e88 <__aeabi_dadd+0x29c>
 8001254:	2300      	movs	r3, #0
 8001256:	4a01      	ldr	r2, [pc, #4]	; (800125c <__aeabi_dadd+0x670>)
 8001258:	001f      	movs	r7, r3
 800125a:	e55e      	b.n	8000d1a <__aeabi_dadd+0x12e>
 800125c:	000007ff 	.word	0x000007ff
 8001260:	ff7fffff 	.word	0xff7fffff

08001264 <__aeabi_ddiv>:
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	4657      	mov	r7, sl
 8001268:	464e      	mov	r6, r9
 800126a:	4645      	mov	r5, r8
 800126c:	46de      	mov	lr, fp
 800126e:	b5e0      	push	{r5, r6, r7, lr}
 8001270:	4681      	mov	r9, r0
 8001272:	0005      	movs	r5, r0
 8001274:	030c      	lsls	r4, r1, #12
 8001276:	0048      	lsls	r0, r1, #1
 8001278:	4692      	mov	sl, r2
 800127a:	001f      	movs	r7, r3
 800127c:	b085      	sub	sp, #20
 800127e:	0b24      	lsrs	r4, r4, #12
 8001280:	0d40      	lsrs	r0, r0, #21
 8001282:	0fce      	lsrs	r6, r1, #31
 8001284:	2800      	cmp	r0, #0
 8001286:	d100      	bne.n	800128a <__aeabi_ddiv+0x26>
 8001288:	e156      	b.n	8001538 <__aeabi_ddiv+0x2d4>
 800128a:	4bd4      	ldr	r3, [pc, #848]	; (80015dc <__aeabi_ddiv+0x378>)
 800128c:	4298      	cmp	r0, r3
 800128e:	d100      	bne.n	8001292 <__aeabi_ddiv+0x2e>
 8001290:	e172      	b.n	8001578 <__aeabi_ddiv+0x314>
 8001292:	0f6b      	lsrs	r3, r5, #29
 8001294:	00e4      	lsls	r4, r4, #3
 8001296:	431c      	orrs	r4, r3
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	4323      	orrs	r3, r4
 800129e:	4698      	mov	r8, r3
 80012a0:	4bcf      	ldr	r3, [pc, #828]	; (80015e0 <__aeabi_ddiv+0x37c>)
 80012a2:	00ed      	lsls	r5, r5, #3
 80012a4:	469b      	mov	fp, r3
 80012a6:	2300      	movs	r3, #0
 80012a8:	4699      	mov	r9, r3
 80012aa:	4483      	add	fp, r0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	033c      	lsls	r4, r7, #12
 80012b0:	007b      	lsls	r3, r7, #1
 80012b2:	4650      	mov	r0, sl
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	0d5b      	lsrs	r3, r3, #21
 80012b8:	0fff      	lsrs	r7, r7, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_ddiv+0x5c>
 80012be:	e11f      	b.n	8001500 <__aeabi_ddiv+0x29c>
 80012c0:	4ac6      	ldr	r2, [pc, #792]	; (80015dc <__aeabi_ddiv+0x378>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d100      	bne.n	80012c8 <__aeabi_ddiv+0x64>
 80012c6:	e162      	b.n	800158e <__aeabi_ddiv+0x32a>
 80012c8:	49c5      	ldr	r1, [pc, #788]	; (80015e0 <__aeabi_ddiv+0x37c>)
 80012ca:	0f42      	lsrs	r2, r0, #29
 80012cc:	468c      	mov	ip, r1
 80012ce:	00e4      	lsls	r4, r4, #3
 80012d0:	4659      	mov	r1, fp
 80012d2:	4314      	orrs	r4, r2
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	4463      	add	r3, ip
 80012d8:	0412      	lsls	r2, r2, #16
 80012da:	1acb      	subs	r3, r1, r3
 80012dc:	4314      	orrs	r4, r2
 80012de:	469b      	mov	fp, r3
 80012e0:	00c2      	lsls	r2, r0, #3
 80012e2:	2000      	movs	r0, #0
 80012e4:	0033      	movs	r3, r6
 80012e6:	407b      	eors	r3, r7
 80012e8:	469a      	mov	sl, r3
 80012ea:	464b      	mov	r3, r9
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d827      	bhi.n	8001340 <__aeabi_ddiv+0xdc>
 80012f0:	49bc      	ldr	r1, [pc, #752]	; (80015e4 <__aeabi_ddiv+0x380>)
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	58cb      	ldr	r3, [r1, r3]
 80012f6:	469f      	mov	pc, r3
 80012f8:	46b2      	mov	sl, r6
 80012fa:	9b00      	ldr	r3, [sp, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d016      	beq.n	800132e <__aeabi_ddiv+0xca>
 8001300:	2b03      	cmp	r3, #3
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0xa2>
 8001304:	e28e      	b.n	8001824 <__aeabi_ddiv+0x5c0>
 8001306:	2b01      	cmp	r3, #1
 8001308:	d000      	beq.n	800130c <__aeabi_ddiv+0xa8>
 800130a:	e0d9      	b.n	80014c0 <__aeabi_ddiv+0x25c>
 800130c:	2300      	movs	r3, #0
 800130e:	2400      	movs	r4, #0
 8001310:	2500      	movs	r5, #0
 8001312:	4652      	mov	r2, sl
 8001314:	051b      	lsls	r3, r3, #20
 8001316:	4323      	orrs	r3, r4
 8001318:	07d2      	lsls	r2, r2, #31
 800131a:	4313      	orrs	r3, r2
 800131c:	0028      	movs	r0, r5
 800131e:	0019      	movs	r1, r3
 8001320:	b005      	add	sp, #20
 8001322:	bcf0      	pop	{r4, r5, r6, r7}
 8001324:	46bb      	mov	fp, r7
 8001326:	46b2      	mov	sl, r6
 8001328:	46a9      	mov	r9, r5
 800132a:	46a0      	mov	r8, r4
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	2400      	movs	r4, #0
 8001330:	2500      	movs	r5, #0
 8001332:	4baa      	ldr	r3, [pc, #680]	; (80015dc <__aeabi_ddiv+0x378>)
 8001334:	e7ed      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001336:	46ba      	mov	sl, r7
 8001338:	46a0      	mov	r8, r4
 800133a:	0015      	movs	r5, r2
 800133c:	9000      	str	r0, [sp, #0]
 800133e:	e7dc      	b.n	80012fa <__aeabi_ddiv+0x96>
 8001340:	4544      	cmp	r4, r8
 8001342:	d200      	bcs.n	8001346 <__aeabi_ddiv+0xe2>
 8001344:	e1c7      	b.n	80016d6 <__aeabi_ddiv+0x472>
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0xe6>
 8001348:	e1c2      	b.n	80016d0 <__aeabi_ddiv+0x46c>
 800134a:	2301      	movs	r3, #1
 800134c:	425b      	negs	r3, r3
 800134e:	469c      	mov	ip, r3
 8001350:	002e      	movs	r6, r5
 8001352:	4640      	mov	r0, r8
 8001354:	2500      	movs	r5, #0
 8001356:	44e3      	add	fp, ip
 8001358:	0223      	lsls	r3, r4, #8
 800135a:	0e14      	lsrs	r4, r2, #24
 800135c:	431c      	orrs	r4, r3
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	4699      	mov	r9, r3
 8001362:	0423      	lsls	r3, r4, #16
 8001364:	0c1f      	lsrs	r7, r3, #16
 8001366:	0212      	lsls	r2, r2, #8
 8001368:	4649      	mov	r1, r9
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	9701      	str	r7, [sp, #4]
 800136e:	f7fe ff6d 	bl	800024c <__aeabi_uidivmod>
 8001372:	0002      	movs	r2, r0
 8001374:	437a      	muls	r2, r7
 8001376:	040b      	lsls	r3, r1, #16
 8001378:	0c31      	lsrs	r1, r6, #16
 800137a:	4680      	mov	r8, r0
 800137c:	4319      	orrs	r1, r3
 800137e:	428a      	cmp	r2, r1
 8001380:	d907      	bls.n	8001392 <__aeabi_ddiv+0x12e>
 8001382:	2301      	movs	r3, #1
 8001384:	425b      	negs	r3, r3
 8001386:	469c      	mov	ip, r3
 8001388:	1909      	adds	r1, r1, r4
 800138a:	44e0      	add	r8, ip
 800138c:	428c      	cmp	r4, r1
 800138e:	d800      	bhi.n	8001392 <__aeabi_ddiv+0x12e>
 8001390:	e207      	b.n	80017a2 <__aeabi_ddiv+0x53e>
 8001392:	1a88      	subs	r0, r1, r2
 8001394:	4649      	mov	r1, r9
 8001396:	f7fe ff59 	bl	800024c <__aeabi_uidivmod>
 800139a:	0409      	lsls	r1, r1, #16
 800139c:	468c      	mov	ip, r1
 800139e:	0431      	lsls	r1, r6, #16
 80013a0:	4666      	mov	r6, ip
 80013a2:	9a01      	ldr	r2, [sp, #4]
 80013a4:	0c09      	lsrs	r1, r1, #16
 80013a6:	4342      	muls	r2, r0
 80013a8:	0003      	movs	r3, r0
 80013aa:	4331      	orrs	r1, r6
 80013ac:	428a      	cmp	r2, r1
 80013ae:	d904      	bls.n	80013ba <__aeabi_ddiv+0x156>
 80013b0:	1909      	adds	r1, r1, r4
 80013b2:	3b01      	subs	r3, #1
 80013b4:	428c      	cmp	r4, r1
 80013b6:	d800      	bhi.n	80013ba <__aeabi_ddiv+0x156>
 80013b8:	e1ed      	b.n	8001796 <__aeabi_ddiv+0x532>
 80013ba:	1a88      	subs	r0, r1, r2
 80013bc:	4642      	mov	r2, r8
 80013be:	0412      	lsls	r2, r2, #16
 80013c0:	431a      	orrs	r2, r3
 80013c2:	4690      	mov	r8, r2
 80013c4:	4641      	mov	r1, r8
 80013c6:	9b00      	ldr	r3, [sp, #0]
 80013c8:	040e      	lsls	r6, r1, #16
 80013ca:	0c1b      	lsrs	r3, r3, #16
 80013cc:	001f      	movs	r7, r3
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	9b00      	ldr	r3, [sp, #0]
 80013d2:	0c36      	lsrs	r6, r6, #16
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	0c19      	lsrs	r1, r3, #16
 80013d8:	000b      	movs	r3, r1
 80013da:	4373      	muls	r3, r6
 80013dc:	0c12      	lsrs	r2, r2, #16
 80013de:	437e      	muls	r6, r7
 80013e0:	9103      	str	r1, [sp, #12]
 80013e2:	4351      	muls	r1, r2
 80013e4:	437a      	muls	r2, r7
 80013e6:	0c1f      	lsrs	r7, r3, #16
 80013e8:	46bc      	mov	ip, r7
 80013ea:	1876      	adds	r6, r6, r1
 80013ec:	4466      	add	r6, ip
 80013ee:	42b1      	cmp	r1, r6
 80013f0:	d903      	bls.n	80013fa <__aeabi_ddiv+0x196>
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0249      	lsls	r1, r1, #9
 80013f6:	468c      	mov	ip, r1
 80013f8:	4462      	add	r2, ip
 80013fa:	0c31      	lsrs	r1, r6, #16
 80013fc:	188a      	adds	r2, r1, r2
 80013fe:	0431      	lsls	r1, r6, #16
 8001400:	041e      	lsls	r6, r3, #16
 8001402:	0c36      	lsrs	r6, r6, #16
 8001404:	198e      	adds	r6, r1, r6
 8001406:	4290      	cmp	r0, r2
 8001408:	d302      	bcc.n	8001410 <__aeabi_ddiv+0x1ac>
 800140a:	d112      	bne.n	8001432 <__aeabi_ddiv+0x1ce>
 800140c:	42b5      	cmp	r5, r6
 800140e:	d210      	bcs.n	8001432 <__aeabi_ddiv+0x1ce>
 8001410:	4643      	mov	r3, r8
 8001412:	1e59      	subs	r1, r3, #1
 8001414:	9b00      	ldr	r3, [sp, #0]
 8001416:	469c      	mov	ip, r3
 8001418:	4465      	add	r5, ip
 800141a:	001f      	movs	r7, r3
 800141c:	429d      	cmp	r5, r3
 800141e:	419b      	sbcs	r3, r3
 8001420:	425b      	negs	r3, r3
 8001422:	191b      	adds	r3, r3, r4
 8001424:	18c0      	adds	r0, r0, r3
 8001426:	4284      	cmp	r4, r0
 8001428:	d200      	bcs.n	800142c <__aeabi_ddiv+0x1c8>
 800142a:	e1a0      	b.n	800176e <__aeabi_ddiv+0x50a>
 800142c:	d100      	bne.n	8001430 <__aeabi_ddiv+0x1cc>
 800142e:	e19b      	b.n	8001768 <__aeabi_ddiv+0x504>
 8001430:	4688      	mov	r8, r1
 8001432:	1bae      	subs	r6, r5, r6
 8001434:	42b5      	cmp	r5, r6
 8001436:	41ad      	sbcs	r5, r5
 8001438:	1a80      	subs	r0, r0, r2
 800143a:	426d      	negs	r5, r5
 800143c:	1b40      	subs	r0, r0, r5
 800143e:	4284      	cmp	r4, r0
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x1e0>
 8001442:	e1d5      	b.n	80017f0 <__aeabi_ddiv+0x58c>
 8001444:	4649      	mov	r1, r9
 8001446:	f7fe ff01 	bl	800024c <__aeabi_uidivmod>
 800144a:	9a01      	ldr	r2, [sp, #4]
 800144c:	040b      	lsls	r3, r1, #16
 800144e:	4342      	muls	r2, r0
 8001450:	0c31      	lsrs	r1, r6, #16
 8001452:	0005      	movs	r5, r0
 8001454:	4319      	orrs	r1, r3
 8001456:	428a      	cmp	r2, r1
 8001458:	d900      	bls.n	800145c <__aeabi_ddiv+0x1f8>
 800145a:	e16c      	b.n	8001736 <__aeabi_ddiv+0x4d2>
 800145c:	1a88      	subs	r0, r1, r2
 800145e:	4649      	mov	r1, r9
 8001460:	f7fe fef4 	bl	800024c <__aeabi_uidivmod>
 8001464:	9a01      	ldr	r2, [sp, #4]
 8001466:	0436      	lsls	r6, r6, #16
 8001468:	4342      	muls	r2, r0
 800146a:	0409      	lsls	r1, r1, #16
 800146c:	0c36      	lsrs	r6, r6, #16
 800146e:	0003      	movs	r3, r0
 8001470:	430e      	orrs	r6, r1
 8001472:	42b2      	cmp	r2, r6
 8001474:	d900      	bls.n	8001478 <__aeabi_ddiv+0x214>
 8001476:	e153      	b.n	8001720 <__aeabi_ddiv+0x4bc>
 8001478:	9803      	ldr	r0, [sp, #12]
 800147a:	1ab6      	subs	r6, r6, r2
 800147c:	0002      	movs	r2, r0
 800147e:	042d      	lsls	r5, r5, #16
 8001480:	431d      	orrs	r5, r3
 8001482:	9f02      	ldr	r7, [sp, #8]
 8001484:	042b      	lsls	r3, r5, #16
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	435a      	muls	r2, r3
 800148a:	437b      	muls	r3, r7
 800148c:	469c      	mov	ip, r3
 800148e:	0c29      	lsrs	r1, r5, #16
 8001490:	4348      	muls	r0, r1
 8001492:	0c13      	lsrs	r3, r2, #16
 8001494:	4484      	add	ip, r0
 8001496:	4463      	add	r3, ip
 8001498:	4379      	muls	r1, r7
 800149a:	4298      	cmp	r0, r3
 800149c:	d903      	bls.n	80014a6 <__aeabi_ddiv+0x242>
 800149e:	2080      	movs	r0, #128	; 0x80
 80014a0:	0240      	lsls	r0, r0, #9
 80014a2:	4684      	mov	ip, r0
 80014a4:	4461      	add	r1, ip
 80014a6:	0c18      	lsrs	r0, r3, #16
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	0c12      	lsrs	r2, r2, #16
 80014ae:	1841      	adds	r1, r0, r1
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	428e      	cmp	r6, r1
 80014b4:	d200      	bcs.n	80014b8 <__aeabi_ddiv+0x254>
 80014b6:	e0ff      	b.n	80016b8 <__aeabi_ddiv+0x454>
 80014b8:	d100      	bne.n	80014bc <__aeabi_ddiv+0x258>
 80014ba:	e0fa      	b.n	80016b2 <__aeabi_ddiv+0x44e>
 80014bc:	2301      	movs	r3, #1
 80014be:	431d      	orrs	r5, r3
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <__aeabi_ddiv+0x384>)
 80014c2:	445a      	add	r2, fp
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_ddiv+0x266>
 80014c8:	e0aa      	b.n	8001620 <__aeabi_ddiv+0x3bc>
 80014ca:	076b      	lsls	r3, r5, #29
 80014cc:	d000      	beq.n	80014d0 <__aeabi_ddiv+0x26c>
 80014ce:	e13d      	b.n	800174c <__aeabi_ddiv+0x4e8>
 80014d0:	08ed      	lsrs	r5, r5, #3
 80014d2:	4643      	mov	r3, r8
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	d506      	bpl.n	80014e6 <__aeabi_ddiv+0x282>
 80014d8:	4642      	mov	r2, r8
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <__aeabi_ddiv+0x388>)
 80014dc:	401a      	ands	r2, r3
 80014de:	4690      	mov	r8, r2
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	00d2      	lsls	r2, r2, #3
 80014e4:	445a      	add	r2, fp
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <__aeabi_ddiv+0x38c>)
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dd00      	ble.n	80014ee <__aeabi_ddiv+0x28a>
 80014ec:	e71f      	b.n	800132e <__aeabi_ddiv+0xca>
 80014ee:	4643      	mov	r3, r8
 80014f0:	075b      	lsls	r3, r3, #29
 80014f2:	431d      	orrs	r5, r3
 80014f4:	4643      	mov	r3, r8
 80014f6:	0552      	lsls	r2, r2, #21
 80014f8:	025c      	lsls	r4, r3, #9
 80014fa:	0b24      	lsrs	r4, r4, #12
 80014fc:	0d53      	lsrs	r3, r2, #21
 80014fe:	e708      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001500:	4652      	mov	r2, sl
 8001502:	4322      	orrs	r2, r4
 8001504:	d100      	bne.n	8001508 <__aeabi_ddiv+0x2a4>
 8001506:	e07b      	b.n	8001600 <__aeabi_ddiv+0x39c>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x2aa>
 800150c:	e0fa      	b.n	8001704 <__aeabi_ddiv+0x4a0>
 800150e:	0020      	movs	r0, r4
 8001510:	f001 fa22 	bl	8002958 <__clzsi2>
 8001514:	0002      	movs	r2, r0
 8001516:	3a0b      	subs	r2, #11
 8001518:	231d      	movs	r3, #29
 800151a:	0001      	movs	r1, r0
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	4652      	mov	r2, sl
 8001520:	3908      	subs	r1, #8
 8001522:	40da      	lsrs	r2, r3
 8001524:	408c      	lsls	r4, r1
 8001526:	4314      	orrs	r4, r2
 8001528:	4652      	mov	r2, sl
 800152a:	408a      	lsls	r2, r1
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <__aeabi_ddiv+0x390>)
 800152e:	4458      	add	r0, fp
 8001530:	469b      	mov	fp, r3
 8001532:	4483      	add	fp, r0
 8001534:	2000      	movs	r0, #0
 8001536:	e6d5      	b.n	80012e4 <__aeabi_ddiv+0x80>
 8001538:	464b      	mov	r3, r9
 800153a:	4323      	orrs	r3, r4
 800153c:	4698      	mov	r8, r3
 800153e:	d044      	beq.n	80015ca <__aeabi_ddiv+0x366>
 8001540:	2c00      	cmp	r4, #0
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x2e2>
 8001544:	e0ce      	b.n	80016e4 <__aeabi_ddiv+0x480>
 8001546:	0020      	movs	r0, r4
 8001548:	f001 fa06 	bl	8002958 <__clzsi2>
 800154c:	0001      	movs	r1, r0
 800154e:	0002      	movs	r2, r0
 8001550:	390b      	subs	r1, #11
 8001552:	231d      	movs	r3, #29
 8001554:	1a5b      	subs	r3, r3, r1
 8001556:	4649      	mov	r1, r9
 8001558:	0010      	movs	r0, r2
 800155a:	40d9      	lsrs	r1, r3
 800155c:	3808      	subs	r0, #8
 800155e:	4084      	lsls	r4, r0
 8001560:	000b      	movs	r3, r1
 8001562:	464d      	mov	r5, r9
 8001564:	4323      	orrs	r3, r4
 8001566:	4698      	mov	r8, r3
 8001568:	4085      	lsls	r5, r0
 800156a:	4823      	ldr	r0, [pc, #140]	; (80015f8 <__aeabi_ddiv+0x394>)
 800156c:	1a83      	subs	r3, r0, r2
 800156e:	469b      	mov	fp, r3
 8001570:	2300      	movs	r3, #0
 8001572:	4699      	mov	r9, r3
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	e69a      	b.n	80012ae <__aeabi_ddiv+0x4a>
 8001578:	464b      	mov	r3, r9
 800157a:	4323      	orrs	r3, r4
 800157c:	4698      	mov	r8, r3
 800157e:	d11d      	bne.n	80015bc <__aeabi_ddiv+0x358>
 8001580:	2308      	movs	r3, #8
 8001582:	4699      	mov	r9, r3
 8001584:	3b06      	subs	r3, #6
 8001586:	2500      	movs	r5, #0
 8001588:	4683      	mov	fp, r0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	e68f      	b.n	80012ae <__aeabi_ddiv+0x4a>
 800158e:	4652      	mov	r2, sl
 8001590:	4322      	orrs	r2, r4
 8001592:	d109      	bne.n	80015a8 <__aeabi_ddiv+0x344>
 8001594:	2302      	movs	r3, #2
 8001596:	4649      	mov	r1, r9
 8001598:	4319      	orrs	r1, r3
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <__aeabi_ddiv+0x398>)
 800159c:	4689      	mov	r9, r1
 800159e:	469c      	mov	ip, r3
 80015a0:	2400      	movs	r4, #0
 80015a2:	2002      	movs	r0, #2
 80015a4:	44e3      	add	fp, ip
 80015a6:	e69d      	b.n	80012e4 <__aeabi_ddiv+0x80>
 80015a8:	2303      	movs	r3, #3
 80015aa:	464a      	mov	r2, r9
 80015ac:	431a      	orrs	r2, r3
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <__aeabi_ddiv+0x398>)
 80015b0:	4691      	mov	r9, r2
 80015b2:	469c      	mov	ip, r3
 80015b4:	4652      	mov	r2, sl
 80015b6:	2003      	movs	r0, #3
 80015b8:	44e3      	add	fp, ip
 80015ba:	e693      	b.n	80012e4 <__aeabi_ddiv+0x80>
 80015bc:	230c      	movs	r3, #12
 80015be:	4699      	mov	r9, r3
 80015c0:	3b09      	subs	r3, #9
 80015c2:	46a0      	mov	r8, r4
 80015c4:	4683      	mov	fp, r0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	e671      	b.n	80012ae <__aeabi_ddiv+0x4a>
 80015ca:	2304      	movs	r3, #4
 80015cc:	4699      	mov	r9, r3
 80015ce:	2300      	movs	r3, #0
 80015d0:	469b      	mov	fp, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	2500      	movs	r5, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	e669      	b.n	80012ae <__aeabi_ddiv+0x4a>
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	000007ff 	.word	0x000007ff
 80015e0:	fffffc01 	.word	0xfffffc01
 80015e4:	0800d71c 	.word	0x0800d71c
 80015e8:	000003ff 	.word	0x000003ff
 80015ec:	feffffff 	.word	0xfeffffff
 80015f0:	000007fe 	.word	0x000007fe
 80015f4:	000003f3 	.word	0x000003f3
 80015f8:	fffffc0d 	.word	0xfffffc0d
 80015fc:	fffff801 	.word	0xfffff801
 8001600:	4649      	mov	r1, r9
 8001602:	2301      	movs	r3, #1
 8001604:	4319      	orrs	r1, r3
 8001606:	4689      	mov	r9, r1
 8001608:	2400      	movs	r4, #0
 800160a:	2001      	movs	r0, #1
 800160c:	e66a      	b.n	80012e4 <__aeabi_ddiv+0x80>
 800160e:	2300      	movs	r3, #0
 8001610:	2480      	movs	r4, #128	; 0x80
 8001612:	469a      	mov	sl, r3
 8001614:	2500      	movs	r5, #0
 8001616:	4b8a      	ldr	r3, [pc, #552]	; (8001840 <__aeabi_ddiv+0x5dc>)
 8001618:	0324      	lsls	r4, r4, #12
 800161a:	e67a      	b.n	8001312 <__aeabi_ddiv+0xae>
 800161c:	2501      	movs	r5, #1
 800161e:	426d      	negs	r5, r5
 8001620:	2301      	movs	r3, #1
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	2b38      	cmp	r3, #56	; 0x38
 8001626:	dd00      	ble.n	800162a <__aeabi_ddiv+0x3c6>
 8001628:	e670      	b.n	800130c <__aeabi_ddiv+0xa8>
 800162a:	2b1f      	cmp	r3, #31
 800162c:	dc00      	bgt.n	8001630 <__aeabi_ddiv+0x3cc>
 800162e:	e0bf      	b.n	80017b0 <__aeabi_ddiv+0x54c>
 8001630:	211f      	movs	r1, #31
 8001632:	4249      	negs	r1, r1
 8001634:	1a8a      	subs	r2, r1, r2
 8001636:	4641      	mov	r1, r8
 8001638:	40d1      	lsrs	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	2b20      	cmp	r3, #32
 800163e:	d004      	beq.n	800164a <__aeabi_ddiv+0x3e6>
 8001640:	4641      	mov	r1, r8
 8001642:	4b80      	ldr	r3, [pc, #512]	; (8001844 <__aeabi_ddiv+0x5e0>)
 8001644:	445b      	add	r3, fp
 8001646:	4099      	lsls	r1, r3
 8001648:	430d      	orrs	r5, r1
 800164a:	1e6b      	subs	r3, r5, #1
 800164c:	419d      	sbcs	r5, r3
 800164e:	2307      	movs	r3, #7
 8001650:	432a      	orrs	r2, r5
 8001652:	001d      	movs	r5, r3
 8001654:	2400      	movs	r4, #0
 8001656:	4015      	ands	r5, r2
 8001658:	4213      	tst	r3, r2
 800165a:	d100      	bne.n	800165e <__aeabi_ddiv+0x3fa>
 800165c:	e0d4      	b.n	8001808 <__aeabi_ddiv+0x5a4>
 800165e:	210f      	movs	r1, #15
 8001660:	2300      	movs	r3, #0
 8001662:	4011      	ands	r1, r2
 8001664:	2904      	cmp	r1, #4
 8001666:	d100      	bne.n	800166a <__aeabi_ddiv+0x406>
 8001668:	e0cb      	b.n	8001802 <__aeabi_ddiv+0x59e>
 800166a:	1d11      	adds	r1, r2, #4
 800166c:	4291      	cmp	r1, r2
 800166e:	4192      	sbcs	r2, r2
 8001670:	4252      	negs	r2, r2
 8001672:	189b      	adds	r3, r3, r2
 8001674:	000a      	movs	r2, r1
 8001676:	0219      	lsls	r1, r3, #8
 8001678:	d400      	bmi.n	800167c <__aeabi_ddiv+0x418>
 800167a:	e0c2      	b.n	8001802 <__aeabi_ddiv+0x59e>
 800167c:	2301      	movs	r3, #1
 800167e:	2400      	movs	r4, #0
 8001680:	2500      	movs	r5, #0
 8001682:	e646      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	4641      	mov	r1, r8
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	4219      	tst	r1, r3
 800168c:	d008      	beq.n	80016a0 <__aeabi_ddiv+0x43c>
 800168e:	421c      	tst	r4, r3
 8001690:	d106      	bne.n	80016a0 <__aeabi_ddiv+0x43c>
 8001692:	431c      	orrs	r4, r3
 8001694:	0324      	lsls	r4, r4, #12
 8001696:	46ba      	mov	sl, r7
 8001698:	0015      	movs	r5, r2
 800169a:	4b69      	ldr	r3, [pc, #420]	; (8001840 <__aeabi_ddiv+0x5dc>)
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	e638      	b.n	8001312 <__aeabi_ddiv+0xae>
 80016a0:	2480      	movs	r4, #128	; 0x80
 80016a2:	4643      	mov	r3, r8
 80016a4:	0324      	lsls	r4, r4, #12
 80016a6:	431c      	orrs	r4, r3
 80016a8:	0324      	lsls	r4, r4, #12
 80016aa:	46b2      	mov	sl, r6
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <__aeabi_ddiv+0x5dc>)
 80016ae:	0b24      	lsrs	r4, r4, #12
 80016b0:	e62f      	b.n	8001312 <__aeabi_ddiv+0xae>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_ddiv+0x454>
 80016b6:	e703      	b.n	80014c0 <__aeabi_ddiv+0x25c>
 80016b8:	19a6      	adds	r6, r4, r6
 80016ba:	1e68      	subs	r0, r5, #1
 80016bc:	42a6      	cmp	r6, r4
 80016be:	d200      	bcs.n	80016c2 <__aeabi_ddiv+0x45e>
 80016c0:	e08d      	b.n	80017de <__aeabi_ddiv+0x57a>
 80016c2:	428e      	cmp	r6, r1
 80016c4:	d200      	bcs.n	80016c8 <__aeabi_ddiv+0x464>
 80016c6:	e0a3      	b.n	8001810 <__aeabi_ddiv+0x5ac>
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x468>
 80016ca:	e0b3      	b.n	8001834 <__aeabi_ddiv+0x5d0>
 80016cc:	0005      	movs	r5, r0
 80016ce:	e6f5      	b.n	80014bc <__aeabi_ddiv+0x258>
 80016d0:	42aa      	cmp	r2, r5
 80016d2:	d900      	bls.n	80016d6 <__aeabi_ddiv+0x472>
 80016d4:	e639      	b.n	800134a <__aeabi_ddiv+0xe6>
 80016d6:	4643      	mov	r3, r8
 80016d8:	07de      	lsls	r6, r3, #31
 80016da:	0858      	lsrs	r0, r3, #1
 80016dc:	086b      	lsrs	r3, r5, #1
 80016de:	431e      	orrs	r6, r3
 80016e0:	07ed      	lsls	r5, r5, #31
 80016e2:	e639      	b.n	8001358 <__aeabi_ddiv+0xf4>
 80016e4:	4648      	mov	r0, r9
 80016e6:	f001 f937 	bl	8002958 <__clzsi2>
 80016ea:	0001      	movs	r1, r0
 80016ec:	0002      	movs	r2, r0
 80016ee:	3115      	adds	r1, #21
 80016f0:	3220      	adds	r2, #32
 80016f2:	291c      	cmp	r1, #28
 80016f4:	dc00      	bgt.n	80016f8 <__aeabi_ddiv+0x494>
 80016f6:	e72c      	b.n	8001552 <__aeabi_ddiv+0x2ee>
 80016f8:	464b      	mov	r3, r9
 80016fa:	3808      	subs	r0, #8
 80016fc:	4083      	lsls	r3, r0
 80016fe:	2500      	movs	r5, #0
 8001700:	4698      	mov	r8, r3
 8001702:	e732      	b.n	800156a <__aeabi_ddiv+0x306>
 8001704:	f001 f928 	bl	8002958 <__clzsi2>
 8001708:	0003      	movs	r3, r0
 800170a:	001a      	movs	r2, r3
 800170c:	3215      	adds	r2, #21
 800170e:	3020      	adds	r0, #32
 8001710:	2a1c      	cmp	r2, #28
 8001712:	dc00      	bgt.n	8001716 <__aeabi_ddiv+0x4b2>
 8001714:	e700      	b.n	8001518 <__aeabi_ddiv+0x2b4>
 8001716:	4654      	mov	r4, sl
 8001718:	3b08      	subs	r3, #8
 800171a:	2200      	movs	r2, #0
 800171c:	409c      	lsls	r4, r3
 800171e:	e705      	b.n	800152c <__aeabi_ddiv+0x2c8>
 8001720:	1936      	adds	r6, r6, r4
 8001722:	3b01      	subs	r3, #1
 8001724:	42b4      	cmp	r4, r6
 8001726:	d900      	bls.n	800172a <__aeabi_ddiv+0x4c6>
 8001728:	e6a6      	b.n	8001478 <__aeabi_ddiv+0x214>
 800172a:	42b2      	cmp	r2, r6
 800172c:	d800      	bhi.n	8001730 <__aeabi_ddiv+0x4cc>
 800172e:	e6a3      	b.n	8001478 <__aeabi_ddiv+0x214>
 8001730:	1e83      	subs	r3, r0, #2
 8001732:	1936      	adds	r6, r6, r4
 8001734:	e6a0      	b.n	8001478 <__aeabi_ddiv+0x214>
 8001736:	1909      	adds	r1, r1, r4
 8001738:	3d01      	subs	r5, #1
 800173a:	428c      	cmp	r4, r1
 800173c:	d900      	bls.n	8001740 <__aeabi_ddiv+0x4dc>
 800173e:	e68d      	b.n	800145c <__aeabi_ddiv+0x1f8>
 8001740:	428a      	cmp	r2, r1
 8001742:	d800      	bhi.n	8001746 <__aeabi_ddiv+0x4e2>
 8001744:	e68a      	b.n	800145c <__aeabi_ddiv+0x1f8>
 8001746:	1e85      	subs	r5, r0, #2
 8001748:	1909      	adds	r1, r1, r4
 800174a:	e687      	b.n	800145c <__aeabi_ddiv+0x1f8>
 800174c:	230f      	movs	r3, #15
 800174e:	402b      	ands	r3, r5
 8001750:	2b04      	cmp	r3, #4
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0x4f2>
 8001754:	e6bc      	b.n	80014d0 <__aeabi_ddiv+0x26c>
 8001756:	2305      	movs	r3, #5
 8001758:	425b      	negs	r3, r3
 800175a:	42ab      	cmp	r3, r5
 800175c:	419b      	sbcs	r3, r3
 800175e:	3504      	adds	r5, #4
 8001760:	425b      	negs	r3, r3
 8001762:	08ed      	lsrs	r5, r5, #3
 8001764:	4498      	add	r8, r3
 8001766:	e6b4      	b.n	80014d2 <__aeabi_ddiv+0x26e>
 8001768:	42af      	cmp	r7, r5
 800176a:	d900      	bls.n	800176e <__aeabi_ddiv+0x50a>
 800176c:	e660      	b.n	8001430 <__aeabi_ddiv+0x1cc>
 800176e:	4282      	cmp	r2, r0
 8001770:	d804      	bhi.n	800177c <__aeabi_ddiv+0x518>
 8001772:	d000      	beq.n	8001776 <__aeabi_ddiv+0x512>
 8001774:	e65c      	b.n	8001430 <__aeabi_ddiv+0x1cc>
 8001776:	42ae      	cmp	r6, r5
 8001778:	d800      	bhi.n	800177c <__aeabi_ddiv+0x518>
 800177a:	e659      	b.n	8001430 <__aeabi_ddiv+0x1cc>
 800177c:	2302      	movs	r3, #2
 800177e:	425b      	negs	r3, r3
 8001780:	469c      	mov	ip, r3
 8001782:	9b00      	ldr	r3, [sp, #0]
 8001784:	44e0      	add	r8, ip
 8001786:	469c      	mov	ip, r3
 8001788:	4465      	add	r5, ip
 800178a:	429d      	cmp	r5, r3
 800178c:	419b      	sbcs	r3, r3
 800178e:	425b      	negs	r3, r3
 8001790:	191b      	adds	r3, r3, r4
 8001792:	18c0      	adds	r0, r0, r3
 8001794:	e64d      	b.n	8001432 <__aeabi_ddiv+0x1ce>
 8001796:	428a      	cmp	r2, r1
 8001798:	d800      	bhi.n	800179c <__aeabi_ddiv+0x538>
 800179a:	e60e      	b.n	80013ba <__aeabi_ddiv+0x156>
 800179c:	1e83      	subs	r3, r0, #2
 800179e:	1909      	adds	r1, r1, r4
 80017a0:	e60b      	b.n	80013ba <__aeabi_ddiv+0x156>
 80017a2:	428a      	cmp	r2, r1
 80017a4:	d800      	bhi.n	80017a8 <__aeabi_ddiv+0x544>
 80017a6:	e5f4      	b.n	8001392 <__aeabi_ddiv+0x12e>
 80017a8:	1e83      	subs	r3, r0, #2
 80017aa:	4698      	mov	r8, r3
 80017ac:	1909      	adds	r1, r1, r4
 80017ae:	e5f0      	b.n	8001392 <__aeabi_ddiv+0x12e>
 80017b0:	4925      	ldr	r1, [pc, #148]	; (8001848 <__aeabi_ddiv+0x5e4>)
 80017b2:	0028      	movs	r0, r5
 80017b4:	4459      	add	r1, fp
 80017b6:	408d      	lsls	r5, r1
 80017b8:	4642      	mov	r2, r8
 80017ba:	408a      	lsls	r2, r1
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4641      	mov	r1, r8
 80017c2:	40d8      	lsrs	r0, r3
 80017c4:	40d9      	lsrs	r1, r3
 80017c6:	4302      	orrs	r2, r0
 80017c8:	432a      	orrs	r2, r5
 80017ca:	000b      	movs	r3, r1
 80017cc:	0751      	lsls	r1, r2, #29
 80017ce:	d100      	bne.n	80017d2 <__aeabi_ddiv+0x56e>
 80017d0:	e751      	b.n	8001676 <__aeabi_ddiv+0x412>
 80017d2:	210f      	movs	r1, #15
 80017d4:	4011      	ands	r1, r2
 80017d6:	2904      	cmp	r1, #4
 80017d8:	d000      	beq.n	80017dc <__aeabi_ddiv+0x578>
 80017da:	e746      	b.n	800166a <__aeabi_ddiv+0x406>
 80017dc:	e74b      	b.n	8001676 <__aeabi_ddiv+0x412>
 80017de:	0005      	movs	r5, r0
 80017e0:	428e      	cmp	r6, r1
 80017e2:	d000      	beq.n	80017e6 <__aeabi_ddiv+0x582>
 80017e4:	e66a      	b.n	80014bc <__aeabi_ddiv+0x258>
 80017e6:	9a00      	ldr	r2, [sp, #0]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d000      	beq.n	80017ee <__aeabi_ddiv+0x58a>
 80017ec:	e666      	b.n	80014bc <__aeabi_ddiv+0x258>
 80017ee:	e667      	b.n	80014c0 <__aeabi_ddiv+0x25c>
 80017f0:	4a16      	ldr	r2, [pc, #88]	; (800184c <__aeabi_ddiv+0x5e8>)
 80017f2:	445a      	add	r2, fp
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_ddiv+0x596>
 80017f8:	e710      	b.n	800161c <__aeabi_ddiv+0x3b8>
 80017fa:	2301      	movs	r3, #1
 80017fc:	2500      	movs	r5, #0
 80017fe:	4498      	add	r8, r3
 8001800:	e667      	b.n	80014d2 <__aeabi_ddiv+0x26e>
 8001802:	075d      	lsls	r5, r3, #29
 8001804:	025b      	lsls	r3, r3, #9
 8001806:	0b1c      	lsrs	r4, r3, #12
 8001808:	08d2      	lsrs	r2, r2, #3
 800180a:	2300      	movs	r3, #0
 800180c:	4315      	orrs	r5, r2
 800180e:	e580      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001810:	9800      	ldr	r0, [sp, #0]
 8001812:	3d02      	subs	r5, #2
 8001814:	0042      	lsls	r2, r0, #1
 8001816:	4282      	cmp	r2, r0
 8001818:	41bf      	sbcs	r7, r7
 800181a:	427f      	negs	r7, r7
 800181c:	193c      	adds	r4, r7, r4
 800181e:	1936      	adds	r6, r6, r4
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	e7dd      	b.n	80017e0 <__aeabi_ddiv+0x57c>
 8001824:	2480      	movs	r4, #128	; 0x80
 8001826:	4643      	mov	r3, r8
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	431c      	orrs	r4, r3
 800182c:	0324      	lsls	r4, r4, #12
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__aeabi_ddiv+0x5dc>)
 8001830:	0b24      	lsrs	r4, r4, #12
 8001832:	e56e      	b.n	8001312 <__aeabi_ddiv+0xae>
 8001834:	9a00      	ldr	r2, [sp, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3ea      	bcc.n	8001810 <__aeabi_ddiv+0x5ac>
 800183a:	0005      	movs	r5, r0
 800183c:	e7d3      	b.n	80017e6 <__aeabi_ddiv+0x582>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	000007ff 	.word	0x000007ff
 8001844:	0000043e 	.word	0x0000043e
 8001848:	0000041e 	.word	0x0000041e
 800184c:	000003ff 	.word	0x000003ff

08001850 <__eqdf2>:
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	464e      	mov	r6, r9
 8001854:	4645      	mov	r5, r8
 8001856:	46de      	mov	lr, fp
 8001858:	4657      	mov	r7, sl
 800185a:	4690      	mov	r8, r2
 800185c:	b5e0      	push	{r5, r6, r7, lr}
 800185e:	0017      	movs	r7, r2
 8001860:	031a      	lsls	r2, r3, #12
 8001862:	0b12      	lsrs	r2, r2, #12
 8001864:	0005      	movs	r5, r0
 8001866:	4684      	mov	ip, r0
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <__eqdf2+0x80>)
 800186a:	030e      	lsls	r6, r1, #12
 800186c:	004c      	lsls	r4, r1, #1
 800186e:	4691      	mov	r9, r2
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	0fdb      	lsrs	r3, r3, #31
 8001874:	469b      	mov	fp, r3
 8001876:	0b36      	lsrs	r6, r6, #12
 8001878:	0d64      	lsrs	r4, r4, #21
 800187a:	0fc9      	lsrs	r1, r1, #31
 800187c:	0d52      	lsrs	r2, r2, #21
 800187e:	4284      	cmp	r4, r0
 8001880:	d019      	beq.n	80018b6 <__eqdf2+0x66>
 8001882:	4282      	cmp	r2, r0
 8001884:	d010      	beq.n	80018a8 <__eqdf2+0x58>
 8001886:	2001      	movs	r0, #1
 8001888:	4294      	cmp	r4, r2
 800188a:	d10e      	bne.n	80018aa <__eqdf2+0x5a>
 800188c:	454e      	cmp	r6, r9
 800188e:	d10c      	bne.n	80018aa <__eqdf2+0x5a>
 8001890:	2001      	movs	r0, #1
 8001892:	45c4      	cmp	ip, r8
 8001894:	d109      	bne.n	80018aa <__eqdf2+0x5a>
 8001896:	4559      	cmp	r1, fp
 8001898:	d017      	beq.n	80018ca <__eqdf2+0x7a>
 800189a:	2c00      	cmp	r4, #0
 800189c:	d105      	bne.n	80018aa <__eqdf2+0x5a>
 800189e:	0030      	movs	r0, r6
 80018a0:	4328      	orrs	r0, r5
 80018a2:	1e43      	subs	r3, r0, #1
 80018a4:	4198      	sbcs	r0, r3
 80018a6:	e000      	b.n	80018aa <__eqdf2+0x5a>
 80018a8:	2001      	movs	r0, #1
 80018aa:	bcf0      	pop	{r4, r5, r6, r7}
 80018ac:	46bb      	mov	fp, r7
 80018ae:	46b2      	mov	sl, r6
 80018b0:	46a9      	mov	r9, r5
 80018b2:	46a0      	mov	r8, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	0033      	movs	r3, r6
 80018b8:	2001      	movs	r0, #1
 80018ba:	432b      	orrs	r3, r5
 80018bc:	d1f5      	bne.n	80018aa <__eqdf2+0x5a>
 80018be:	42a2      	cmp	r2, r4
 80018c0:	d1f3      	bne.n	80018aa <__eqdf2+0x5a>
 80018c2:	464b      	mov	r3, r9
 80018c4:	433b      	orrs	r3, r7
 80018c6:	d1f0      	bne.n	80018aa <__eqdf2+0x5a>
 80018c8:	e7e2      	b.n	8001890 <__eqdf2+0x40>
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7ed      	b.n	80018aa <__eqdf2+0x5a>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	000007ff 	.word	0x000007ff

080018d4 <__gedf2>:
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	4647      	mov	r7, r8
 80018d8:	46ce      	mov	lr, r9
 80018da:	0004      	movs	r4, r0
 80018dc:	0018      	movs	r0, r3
 80018de:	0016      	movs	r6, r2
 80018e0:	031b      	lsls	r3, r3, #12
 80018e2:	0b1b      	lsrs	r3, r3, #12
 80018e4:	4d2d      	ldr	r5, [pc, #180]	; (800199c <__gedf2+0xc8>)
 80018e6:	004a      	lsls	r2, r1, #1
 80018e8:	4699      	mov	r9, r3
 80018ea:	b580      	push	{r7, lr}
 80018ec:	0043      	lsls	r3, r0, #1
 80018ee:	030f      	lsls	r7, r1, #12
 80018f0:	46a4      	mov	ip, r4
 80018f2:	46b0      	mov	r8, r6
 80018f4:	0b3f      	lsrs	r7, r7, #12
 80018f6:	0d52      	lsrs	r2, r2, #21
 80018f8:	0fc9      	lsrs	r1, r1, #31
 80018fa:	0d5b      	lsrs	r3, r3, #21
 80018fc:	0fc0      	lsrs	r0, r0, #31
 80018fe:	42aa      	cmp	r2, r5
 8001900:	d021      	beq.n	8001946 <__gedf2+0x72>
 8001902:	42ab      	cmp	r3, r5
 8001904:	d013      	beq.n	800192e <__gedf2+0x5a>
 8001906:	2a00      	cmp	r2, #0
 8001908:	d122      	bne.n	8001950 <__gedf2+0x7c>
 800190a:	433c      	orrs	r4, r7
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <__gedf2+0x42>
 8001910:	464d      	mov	r5, r9
 8001912:	432e      	orrs	r6, r5
 8001914:	d022      	beq.n	800195c <__gedf2+0x88>
 8001916:	2c00      	cmp	r4, #0
 8001918:	d010      	beq.n	800193c <__gedf2+0x68>
 800191a:	4281      	cmp	r1, r0
 800191c:	d022      	beq.n	8001964 <__gedf2+0x90>
 800191e:	2002      	movs	r0, #2
 8001920:	3901      	subs	r1, #1
 8001922:	4008      	ands	r0, r1
 8001924:	3801      	subs	r0, #1
 8001926:	bcc0      	pop	{r6, r7}
 8001928:	46b9      	mov	r9, r7
 800192a:	46b0      	mov	r8, r6
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192e:	464d      	mov	r5, r9
 8001930:	432e      	orrs	r6, r5
 8001932:	d129      	bne.n	8001988 <__gedf2+0xb4>
 8001934:	2a00      	cmp	r2, #0
 8001936:	d1f0      	bne.n	800191a <__gedf2+0x46>
 8001938:	433c      	orrs	r4, r7
 800193a:	d1ee      	bne.n	800191a <__gedf2+0x46>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1f2      	bne.n	8001926 <__gedf2+0x52>
 8001940:	2001      	movs	r0, #1
 8001942:	4240      	negs	r0, r0
 8001944:	e7ef      	b.n	8001926 <__gedf2+0x52>
 8001946:	003d      	movs	r5, r7
 8001948:	4325      	orrs	r5, r4
 800194a:	d11d      	bne.n	8001988 <__gedf2+0xb4>
 800194c:	4293      	cmp	r3, r2
 800194e:	d0ee      	beq.n	800192e <__gedf2+0x5a>
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e2      	bne.n	800191a <__gedf2+0x46>
 8001954:	464c      	mov	r4, r9
 8001956:	4326      	orrs	r6, r4
 8001958:	d1df      	bne.n	800191a <__gedf2+0x46>
 800195a:	e7e0      	b.n	800191e <__gedf2+0x4a>
 800195c:	2000      	movs	r0, #0
 800195e:	2c00      	cmp	r4, #0
 8001960:	d0e1      	beq.n	8001926 <__gedf2+0x52>
 8001962:	e7dc      	b.n	800191e <__gedf2+0x4a>
 8001964:	429a      	cmp	r2, r3
 8001966:	dc0a      	bgt.n	800197e <__gedf2+0xaa>
 8001968:	dbe8      	blt.n	800193c <__gedf2+0x68>
 800196a:	454f      	cmp	r7, r9
 800196c:	d8d7      	bhi.n	800191e <__gedf2+0x4a>
 800196e:	d00e      	beq.n	800198e <__gedf2+0xba>
 8001970:	2000      	movs	r0, #0
 8001972:	454f      	cmp	r7, r9
 8001974:	d2d7      	bcs.n	8001926 <__gedf2+0x52>
 8001976:	2900      	cmp	r1, #0
 8001978:	d0e2      	beq.n	8001940 <__gedf2+0x6c>
 800197a:	0008      	movs	r0, r1
 800197c:	e7d3      	b.n	8001926 <__gedf2+0x52>
 800197e:	4243      	negs	r3, r0
 8001980:	4158      	adcs	r0, r3
 8001982:	0040      	lsls	r0, r0, #1
 8001984:	3801      	subs	r0, #1
 8001986:	e7ce      	b.n	8001926 <__gedf2+0x52>
 8001988:	2002      	movs	r0, #2
 800198a:	4240      	negs	r0, r0
 800198c:	e7cb      	b.n	8001926 <__gedf2+0x52>
 800198e:	45c4      	cmp	ip, r8
 8001990:	d8c5      	bhi.n	800191e <__gedf2+0x4a>
 8001992:	2000      	movs	r0, #0
 8001994:	45c4      	cmp	ip, r8
 8001996:	d2c6      	bcs.n	8001926 <__gedf2+0x52>
 8001998:	e7ed      	b.n	8001976 <__gedf2+0xa2>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	000007ff 	.word	0x000007ff

080019a0 <__ledf2>:
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	4647      	mov	r7, r8
 80019a4:	46ce      	mov	lr, r9
 80019a6:	0004      	movs	r4, r0
 80019a8:	0018      	movs	r0, r3
 80019aa:	0016      	movs	r6, r2
 80019ac:	031b      	lsls	r3, r3, #12
 80019ae:	0b1b      	lsrs	r3, r3, #12
 80019b0:	4d2c      	ldr	r5, [pc, #176]	; (8001a64 <__ledf2+0xc4>)
 80019b2:	004a      	lsls	r2, r1, #1
 80019b4:	4699      	mov	r9, r3
 80019b6:	b580      	push	{r7, lr}
 80019b8:	0043      	lsls	r3, r0, #1
 80019ba:	030f      	lsls	r7, r1, #12
 80019bc:	46a4      	mov	ip, r4
 80019be:	46b0      	mov	r8, r6
 80019c0:	0b3f      	lsrs	r7, r7, #12
 80019c2:	0d52      	lsrs	r2, r2, #21
 80019c4:	0fc9      	lsrs	r1, r1, #31
 80019c6:	0d5b      	lsrs	r3, r3, #21
 80019c8:	0fc0      	lsrs	r0, r0, #31
 80019ca:	42aa      	cmp	r2, r5
 80019cc:	d00d      	beq.n	80019ea <__ledf2+0x4a>
 80019ce:	42ab      	cmp	r3, r5
 80019d0:	d010      	beq.n	80019f4 <__ledf2+0x54>
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d127      	bne.n	8001a26 <__ledf2+0x86>
 80019d6:	433c      	orrs	r4, r7
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <__ledf2+0x60>
 80019dc:	464d      	mov	r5, r9
 80019de:	432e      	orrs	r6, r5
 80019e0:	d10e      	bne.n	8001a00 <__ledf2+0x60>
 80019e2:	2000      	movs	r0, #0
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d015      	beq.n	8001a14 <__ledf2+0x74>
 80019e8:	e00e      	b.n	8001a08 <__ledf2+0x68>
 80019ea:	003d      	movs	r5, r7
 80019ec:	4325      	orrs	r5, r4
 80019ee:	d110      	bne.n	8001a12 <__ledf2+0x72>
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d118      	bne.n	8001a26 <__ledf2+0x86>
 80019f4:	464d      	mov	r5, r9
 80019f6:	432e      	orrs	r6, r5
 80019f8:	d10b      	bne.n	8001a12 <__ledf2+0x72>
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d102      	bne.n	8001a04 <__ledf2+0x64>
 80019fe:	433c      	orrs	r4, r7
 8001a00:	2c00      	cmp	r4, #0
 8001a02:	d00b      	beq.n	8001a1c <__ledf2+0x7c>
 8001a04:	4281      	cmp	r1, r0
 8001a06:	d014      	beq.n	8001a32 <__ledf2+0x92>
 8001a08:	2002      	movs	r0, #2
 8001a0a:	3901      	subs	r1, #1
 8001a0c:	4008      	ands	r0, r1
 8001a0e:	3801      	subs	r0, #1
 8001a10:	e000      	b.n	8001a14 <__ledf2+0x74>
 8001a12:	2002      	movs	r0, #2
 8001a14:	bcc0      	pop	{r6, r7}
 8001a16:	46b9      	mov	r9, r7
 8001a18:	46b0      	mov	r8, r6
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1f9      	bne.n	8001a14 <__ledf2+0x74>
 8001a20:	2001      	movs	r0, #1
 8001a22:	4240      	negs	r0, r0
 8001a24:	e7f6      	b.n	8001a14 <__ledf2+0x74>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ec      	bne.n	8001a04 <__ledf2+0x64>
 8001a2a:	464c      	mov	r4, r9
 8001a2c:	4326      	orrs	r6, r4
 8001a2e:	d1e9      	bne.n	8001a04 <__ledf2+0x64>
 8001a30:	e7ea      	b.n	8001a08 <__ledf2+0x68>
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dd04      	ble.n	8001a40 <__ledf2+0xa0>
 8001a36:	4243      	negs	r3, r0
 8001a38:	4158      	adcs	r0, r3
 8001a3a:	0040      	lsls	r0, r0, #1
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	e7e9      	b.n	8001a14 <__ledf2+0x74>
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbeb      	blt.n	8001a1c <__ledf2+0x7c>
 8001a44:	454f      	cmp	r7, r9
 8001a46:	d8df      	bhi.n	8001a08 <__ledf2+0x68>
 8001a48:	d006      	beq.n	8001a58 <__ledf2+0xb8>
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	454f      	cmp	r7, r9
 8001a4e:	d2e1      	bcs.n	8001a14 <__ledf2+0x74>
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d0e5      	beq.n	8001a20 <__ledf2+0x80>
 8001a54:	0008      	movs	r0, r1
 8001a56:	e7dd      	b.n	8001a14 <__ledf2+0x74>
 8001a58:	45c4      	cmp	ip, r8
 8001a5a:	d8d5      	bhi.n	8001a08 <__ledf2+0x68>
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	45c4      	cmp	ip, r8
 8001a60:	d2d8      	bcs.n	8001a14 <__ledf2+0x74>
 8001a62:	e7f5      	b.n	8001a50 <__ledf2+0xb0>
 8001a64:	000007ff 	.word	0x000007ff

08001a68 <__aeabi_dmul>:
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	4657      	mov	r7, sl
 8001a6c:	464e      	mov	r6, r9
 8001a6e:	4645      	mov	r5, r8
 8001a70:	46de      	mov	lr, fp
 8001a72:	b5e0      	push	{r5, r6, r7, lr}
 8001a74:	4698      	mov	r8, r3
 8001a76:	030c      	lsls	r4, r1, #12
 8001a78:	004b      	lsls	r3, r1, #1
 8001a7a:	0006      	movs	r6, r0
 8001a7c:	4692      	mov	sl, r2
 8001a7e:	b087      	sub	sp, #28
 8001a80:	0b24      	lsrs	r4, r4, #12
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	0fcf      	lsrs	r7, r1, #31
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dmul+0x24>
 8001a8a:	e15c      	b.n	8001d46 <__aeabi_dmul+0x2de>
 8001a8c:	4ad9      	ldr	r2, [pc, #868]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dmul+0x2c>
 8001a92:	e175      	b.n	8001d80 <__aeabi_dmul+0x318>
 8001a94:	0f42      	lsrs	r2, r0, #29
 8001a96:	00e4      	lsls	r4, r4, #3
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	0412      	lsls	r2, r2, #16
 8001a9e:	4314      	orrs	r4, r2
 8001aa0:	4ad5      	ldr	r2, [pc, #852]	; (8001df8 <__aeabi_dmul+0x390>)
 8001aa2:	00c5      	lsls	r5, r0, #3
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	4463      	add	r3, ip
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	4699      	mov	r9, r3
 8001aae:	469b      	mov	fp, r3
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	031e      	lsls	r6, r3, #12
 8001ab6:	0fd2      	lsrs	r2, r2, #31
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4650      	mov	r0, sl
 8001abc:	4690      	mov	r8, r2
 8001abe:	0b36      	lsrs	r6, r6, #12
 8001ac0:	0d5b      	lsrs	r3, r3, #21
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dmul+0x5e>
 8001ac4:	e120      	b.n	8001d08 <__aeabi_dmul+0x2a0>
 8001ac6:	4acb      	ldr	r2, [pc, #812]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d100      	bne.n	8001ace <__aeabi_dmul+0x66>
 8001acc:	e162      	b.n	8001d94 <__aeabi_dmul+0x32c>
 8001ace:	49ca      	ldr	r1, [pc, #808]	; (8001df8 <__aeabi_dmul+0x390>)
 8001ad0:	0f42      	lsrs	r2, r0, #29
 8001ad2:	468c      	mov	ip, r1
 8001ad4:	9900      	ldr	r1, [sp, #0]
 8001ad6:	4463      	add	r3, ip
 8001ad8:	00f6      	lsls	r6, r6, #3
 8001ada:	468c      	mov	ip, r1
 8001adc:	4316      	orrs	r6, r2
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	449c      	add	ip, r3
 8001ae2:	0412      	lsls	r2, r2, #16
 8001ae4:	4663      	mov	r3, ip
 8001ae6:	4316      	orrs	r6, r2
 8001ae8:	00c2      	lsls	r2, r0, #3
 8001aea:	2000      	movs	r0, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	9900      	ldr	r1, [sp, #0]
 8001af0:	4643      	mov	r3, r8
 8001af2:	3101      	adds	r1, #1
 8001af4:	468c      	mov	ip, r1
 8001af6:	4649      	mov	r1, r9
 8001af8:	407b      	eors	r3, r7
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	290f      	cmp	r1, #15
 8001afe:	d826      	bhi.n	8001b4e <__aeabi_dmul+0xe6>
 8001b00:	4bbe      	ldr	r3, [pc, #760]	; (8001dfc <__aeabi_dmul+0x394>)
 8001b02:	0089      	lsls	r1, r1, #2
 8001b04:	5859      	ldr	r1, [r3, r1]
 8001b06:	468f      	mov	pc, r1
 8001b08:	4643      	mov	r3, r8
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	0034      	movs	r4, r6
 8001b0e:	0015      	movs	r5, r2
 8001b10:	4683      	mov	fp, r0
 8001b12:	465b      	mov	r3, fp
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d016      	beq.n	8001b46 <__aeabi_dmul+0xde>
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0xb6>
 8001b1c:	e203      	b.n	8001f26 <__aeabi_dmul+0x4be>
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d000      	beq.n	8001b24 <__aeabi_dmul+0xbc>
 8001b22:	e0cd      	b.n	8001cc0 <__aeabi_dmul+0x258>
 8001b24:	2200      	movs	r2, #0
 8001b26:	2400      	movs	r4, #0
 8001b28:	2500      	movs	r5, #0
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	0512      	lsls	r2, r2, #20
 8001b2e:	4322      	orrs	r2, r4
 8001b30:	07db      	lsls	r3, r3, #31
 8001b32:	431a      	orrs	r2, r3
 8001b34:	0028      	movs	r0, r5
 8001b36:	0011      	movs	r1, r2
 8001b38:	b007      	add	sp, #28
 8001b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b3c:	46bb      	mov	fp, r7
 8001b3e:	46b2      	mov	sl, r6
 8001b40:	46a9      	mov	r9, r5
 8001b42:	46a0      	mov	r8, r4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	2400      	movs	r4, #0
 8001b48:	2500      	movs	r5, #0
 8001b4a:	4aaa      	ldr	r2, [pc, #680]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001b4c:	e7ed      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001b4e:	0c28      	lsrs	r0, r5, #16
 8001b50:	042d      	lsls	r5, r5, #16
 8001b52:	0c2d      	lsrs	r5, r5, #16
 8001b54:	002b      	movs	r3, r5
 8001b56:	0c11      	lsrs	r1, r2, #16
 8001b58:	0412      	lsls	r2, r2, #16
 8001b5a:	0c12      	lsrs	r2, r2, #16
 8001b5c:	4353      	muls	r3, r2
 8001b5e:	4698      	mov	r8, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	002f      	movs	r7, r5
 8001b64:	4343      	muls	r3, r0
 8001b66:	4699      	mov	r9, r3
 8001b68:	434f      	muls	r7, r1
 8001b6a:	444f      	add	r7, r9
 8001b6c:	46bb      	mov	fp, r7
 8001b6e:	4647      	mov	r7, r8
 8001b70:	000b      	movs	r3, r1
 8001b72:	0c3f      	lsrs	r7, r7, #16
 8001b74:	46ba      	mov	sl, r7
 8001b76:	4343      	muls	r3, r0
 8001b78:	44da      	add	sl, fp
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	45d1      	cmp	r9, sl
 8001b7e:	d904      	bls.n	8001b8a <__aeabi_dmul+0x122>
 8001b80:	2780      	movs	r7, #128	; 0x80
 8001b82:	027f      	lsls	r7, r7, #9
 8001b84:	46b9      	mov	r9, r7
 8001b86:	444b      	add	r3, r9
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	4653      	mov	r3, sl
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	469b      	mov	fp, r3
 8001b90:	4653      	mov	r3, sl
 8001b92:	041f      	lsls	r7, r3, #16
 8001b94:	4643      	mov	r3, r8
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	4443      	add	r3, r8
 8001ba0:	9304      	str	r3, [sp, #16]
 8001ba2:	0c33      	lsrs	r3, r6, #16
 8001ba4:	0436      	lsls	r6, r6, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	4698      	mov	r8, r3
 8001baa:	0033      	movs	r3, r6
 8001bac:	4343      	muls	r3, r0
 8001bae:	4699      	mov	r9, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	002f      	movs	r7, r5
 8001bb6:	469a      	mov	sl, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	4377      	muls	r7, r6
 8001bbc:	435d      	muls	r5, r3
 8001bbe:	0c38      	lsrs	r0, r7, #16
 8001bc0:	444d      	add	r5, r9
 8001bc2:	1945      	adds	r5, r0, r5
 8001bc4:	45a9      	cmp	r9, r5
 8001bc6:	d903      	bls.n	8001bd0 <__aeabi_dmul+0x168>
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	025b      	lsls	r3, r3, #9
 8001bcc:	4699      	mov	r9, r3
 8001bce:	44ca      	add	sl, r9
 8001bd0:	043f      	lsls	r7, r7, #16
 8001bd2:	0c28      	lsrs	r0, r5, #16
 8001bd4:	0c3f      	lsrs	r7, r7, #16
 8001bd6:	042d      	lsls	r5, r5, #16
 8001bd8:	19ed      	adds	r5, r5, r7
 8001bda:	0c27      	lsrs	r7, r4, #16
 8001bdc:	0424      	lsls	r4, r4, #16
 8001bde:	0c24      	lsrs	r4, r4, #16
 8001be0:	0003      	movs	r3, r0
 8001be2:	0020      	movs	r0, r4
 8001be4:	4350      	muls	r0, r2
 8001be6:	437a      	muls	r2, r7
 8001be8:	4691      	mov	r9, r2
 8001bea:	003a      	movs	r2, r7
 8001bec:	4453      	add	r3, sl
 8001bee:	9305      	str	r3, [sp, #20]
 8001bf0:	0c03      	lsrs	r3, r0, #16
 8001bf2:	469a      	mov	sl, r3
 8001bf4:	434a      	muls	r2, r1
 8001bf6:	4361      	muls	r1, r4
 8001bf8:	4449      	add	r1, r9
 8001bfa:	4451      	add	r1, sl
 8001bfc:	44ab      	add	fp, r5
 8001bfe:	4589      	cmp	r9, r1
 8001c00:	d903      	bls.n	8001c0a <__aeabi_dmul+0x1a2>
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	4699      	mov	r9, r3
 8001c08:	444a      	add	r2, r9
 8001c0a:	0400      	lsls	r0, r0, #16
 8001c0c:	0c0b      	lsrs	r3, r1, #16
 8001c0e:	0c00      	lsrs	r0, r0, #16
 8001c10:	0409      	lsls	r1, r1, #16
 8001c12:	1809      	adds	r1, r1, r0
 8001c14:	0020      	movs	r0, r4
 8001c16:	4699      	mov	r9, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	4370      	muls	r0, r6
 8001c1c:	435c      	muls	r4, r3
 8001c1e:	437e      	muls	r6, r7
 8001c20:	435f      	muls	r7, r3
 8001c22:	0c03      	lsrs	r3, r0, #16
 8001c24:	4698      	mov	r8, r3
 8001c26:	19a4      	adds	r4, r4, r6
 8001c28:	4444      	add	r4, r8
 8001c2a:	444a      	add	r2, r9
 8001c2c:	9703      	str	r7, [sp, #12]
 8001c2e:	42a6      	cmp	r6, r4
 8001c30:	d904      	bls.n	8001c3c <__aeabi_dmul+0x1d4>
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	025b      	lsls	r3, r3, #9
 8001c36:	4698      	mov	r8, r3
 8001c38:	4447      	add	r7, r8
 8001c3a:	9703      	str	r7, [sp, #12]
 8001c3c:	0423      	lsls	r3, r4, #16
 8001c3e:	9e02      	ldr	r6, [sp, #8]
 8001c40:	469a      	mov	sl, r3
 8001c42:	9b05      	ldr	r3, [sp, #20]
 8001c44:	445e      	add	r6, fp
 8001c46:	4698      	mov	r8, r3
 8001c48:	42ae      	cmp	r6, r5
 8001c4a:	41ad      	sbcs	r5, r5
 8001c4c:	1876      	adds	r6, r6, r1
 8001c4e:	428e      	cmp	r6, r1
 8001c50:	4189      	sbcs	r1, r1
 8001c52:	0400      	lsls	r0, r0, #16
 8001c54:	0c00      	lsrs	r0, r0, #16
 8001c56:	4450      	add	r0, sl
 8001c58:	4440      	add	r0, r8
 8001c5a:	426d      	negs	r5, r5
 8001c5c:	1947      	adds	r7, r0, r5
 8001c5e:	46b8      	mov	r8, r7
 8001c60:	4693      	mov	fp, r2
 8001c62:	4249      	negs	r1, r1
 8001c64:	4689      	mov	r9, r1
 8001c66:	44c3      	add	fp, r8
 8001c68:	44d9      	add	r9, fp
 8001c6a:	4298      	cmp	r0, r3
 8001c6c:	4180      	sbcs	r0, r0
 8001c6e:	45a8      	cmp	r8, r5
 8001c70:	41ad      	sbcs	r5, r5
 8001c72:	4593      	cmp	fp, r2
 8001c74:	4192      	sbcs	r2, r2
 8001c76:	4589      	cmp	r9, r1
 8001c78:	4189      	sbcs	r1, r1
 8001c7a:	426d      	negs	r5, r5
 8001c7c:	4240      	negs	r0, r0
 8001c7e:	4328      	orrs	r0, r5
 8001c80:	0c24      	lsrs	r4, r4, #16
 8001c82:	4252      	negs	r2, r2
 8001c84:	4249      	negs	r1, r1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	1900      	adds	r0, r0, r4
 8001c8c:	1880      	adds	r0, r0, r2
 8001c8e:	18c7      	adds	r7, r0, r3
 8001c90:	464b      	mov	r3, r9
 8001c92:	0ddc      	lsrs	r4, r3, #23
 8001c94:	9b04      	ldr	r3, [sp, #16]
 8001c96:	0275      	lsls	r5, r6, #9
 8001c98:	431d      	orrs	r5, r3
 8001c9a:	1e6a      	subs	r2, r5, #1
 8001c9c:	4195      	sbcs	r5, r2
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	0df6      	lsrs	r6, r6, #23
 8001ca2:	027f      	lsls	r7, r7, #9
 8001ca4:	4335      	orrs	r5, r6
 8001ca6:	025a      	lsls	r2, r3, #9
 8001ca8:	433c      	orrs	r4, r7
 8001caa:	4315      	orrs	r5, r2
 8001cac:	01fb      	lsls	r3, r7, #7
 8001cae:	d400      	bmi.n	8001cb2 <__aeabi_dmul+0x24a>
 8001cb0:	e11c      	b.n	8001eec <__aeabi_dmul+0x484>
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	086a      	lsrs	r2, r5, #1
 8001cb6:	400d      	ands	r5, r1
 8001cb8:	4315      	orrs	r5, r2
 8001cba:	07e2      	lsls	r2, r4, #31
 8001cbc:	4315      	orrs	r5, r2
 8001cbe:	0864      	lsrs	r4, r4, #1
 8001cc0:	494f      	ldr	r1, [pc, #316]	; (8001e00 <__aeabi_dmul+0x398>)
 8001cc2:	4461      	add	r1, ip
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	dc00      	bgt.n	8001cca <__aeabi_dmul+0x262>
 8001cc8:	e0b0      	b.n	8001e2c <__aeabi_dmul+0x3c4>
 8001cca:	076b      	lsls	r3, r5, #29
 8001ccc:	d009      	beq.n	8001ce2 <__aeabi_dmul+0x27a>
 8001cce:	220f      	movs	r2, #15
 8001cd0:	402a      	ands	r2, r5
 8001cd2:	2a04      	cmp	r2, #4
 8001cd4:	d005      	beq.n	8001ce2 <__aeabi_dmul+0x27a>
 8001cd6:	1d2a      	adds	r2, r5, #4
 8001cd8:	42aa      	cmp	r2, r5
 8001cda:	41ad      	sbcs	r5, r5
 8001cdc:	426d      	negs	r5, r5
 8001cde:	1964      	adds	r4, r4, r5
 8001ce0:	0015      	movs	r5, r2
 8001ce2:	01e3      	lsls	r3, r4, #7
 8001ce4:	d504      	bpl.n	8001cf0 <__aeabi_dmul+0x288>
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <__aeabi_dmul+0x39c>)
 8001cea:	00c9      	lsls	r1, r1, #3
 8001cec:	4014      	ands	r4, r2
 8001cee:	4461      	add	r1, ip
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <__aeabi_dmul+0x3a0>)
 8001cf2:	4291      	cmp	r1, r2
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dmul+0x290>
 8001cf6:	e726      	b.n	8001b46 <__aeabi_dmul+0xde>
 8001cf8:	0762      	lsls	r2, r4, #29
 8001cfa:	08ed      	lsrs	r5, r5, #3
 8001cfc:	0264      	lsls	r4, r4, #9
 8001cfe:	0549      	lsls	r1, r1, #21
 8001d00:	4315      	orrs	r5, r2
 8001d02:	0b24      	lsrs	r4, r4, #12
 8001d04:	0d4a      	lsrs	r2, r1, #21
 8001d06:	e710      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001d08:	4652      	mov	r2, sl
 8001d0a:	4332      	orrs	r2, r6
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dmul+0x2a8>
 8001d0e:	e07f      	b.n	8001e10 <__aeabi_dmul+0x3a8>
 8001d10:	2e00      	cmp	r6, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dmul+0x2ae>
 8001d14:	e0dc      	b.n	8001ed0 <__aeabi_dmul+0x468>
 8001d16:	0030      	movs	r0, r6
 8001d18:	f000 fe1e 	bl	8002958 <__clzsi2>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	3a0b      	subs	r2, #11
 8001d20:	231d      	movs	r3, #29
 8001d22:	0001      	movs	r1, r0
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	4652      	mov	r2, sl
 8001d28:	3908      	subs	r1, #8
 8001d2a:	40da      	lsrs	r2, r3
 8001d2c:	408e      	lsls	r6, r1
 8001d2e:	4316      	orrs	r6, r2
 8001d30:	4652      	mov	r2, sl
 8001d32:	408a      	lsls	r2, r1
 8001d34:	9b00      	ldr	r3, [sp, #0]
 8001d36:	4935      	ldr	r1, [pc, #212]	; (8001e0c <__aeabi_dmul+0x3a4>)
 8001d38:	1a18      	subs	r0, r3, r0
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	468c      	mov	ip, r1
 8001d3e:	4463      	add	r3, ip
 8001d40:	2000      	movs	r0, #0
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	e6d3      	b.n	8001aee <__aeabi_dmul+0x86>
 8001d46:	0025      	movs	r5, r4
 8001d48:	4305      	orrs	r5, r0
 8001d4a:	d04a      	beq.n	8001de2 <__aeabi_dmul+0x37a>
 8001d4c:	2c00      	cmp	r4, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dmul+0x2ea>
 8001d50:	e0b0      	b.n	8001eb4 <__aeabi_dmul+0x44c>
 8001d52:	0020      	movs	r0, r4
 8001d54:	f000 fe00 	bl	8002958 <__clzsi2>
 8001d58:	0001      	movs	r1, r0
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	390b      	subs	r1, #11
 8001d5e:	231d      	movs	r3, #29
 8001d60:	0010      	movs	r0, r2
 8001d62:	1a5b      	subs	r3, r3, r1
 8001d64:	0031      	movs	r1, r6
 8001d66:	0035      	movs	r5, r6
 8001d68:	3808      	subs	r0, #8
 8001d6a:	4084      	lsls	r4, r0
 8001d6c:	40d9      	lsrs	r1, r3
 8001d6e:	4085      	lsls	r5, r0
 8001d70:	430c      	orrs	r4, r1
 8001d72:	4826      	ldr	r0, [pc, #152]	; (8001e0c <__aeabi_dmul+0x3a4>)
 8001d74:	1a83      	subs	r3, r0, r2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	e697      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001d80:	0005      	movs	r5, r0
 8001d82:	4325      	orrs	r5, r4
 8001d84:	d126      	bne.n	8001dd4 <__aeabi_dmul+0x36c>
 8001d86:	2208      	movs	r2, #8
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4691      	mov	r9, r2
 8001d90:	469b      	mov	fp, r3
 8001d92:	e68d      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001d94:	4652      	mov	r2, sl
 8001d96:	9b00      	ldr	r3, [sp, #0]
 8001d98:	4332      	orrs	r2, r6
 8001d9a:	d110      	bne.n	8001dbe <__aeabi_dmul+0x356>
 8001d9c:	4915      	ldr	r1, [pc, #84]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001d9e:	2600      	movs	r6, #0
 8001da0:	468c      	mov	ip, r1
 8001da2:	4463      	add	r3, ip
 8001da4:	4649      	mov	r1, r9
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2302      	movs	r3, #2
 8001daa:	4319      	orrs	r1, r3
 8001dac:	4689      	mov	r9, r1
 8001dae:	2002      	movs	r0, #2
 8001db0:	e69d      	b.n	8001aee <__aeabi_dmul+0x86>
 8001db2:	465b      	mov	r3, fp
 8001db4:	9701      	str	r7, [sp, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dmul+0x354>
 8001dba:	e6ad      	b.n	8001b18 <__aeabi_dmul+0xb0>
 8001dbc:	e6c3      	b.n	8001b46 <__aeabi_dmul+0xde>
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <__aeabi_dmul+0x38c>)
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	4694      	mov	ip, r2
 8001dc4:	4463      	add	r3, ip
 8001dc6:	464a      	mov	r2, r9
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2303      	movs	r3, #3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	4691      	mov	r9, r2
 8001dd0:	4652      	mov	r2, sl
 8001dd2:	e68c      	b.n	8001aee <__aeabi_dmul+0x86>
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2303      	movs	r3, #3
 8001dda:	0005      	movs	r5, r0
 8001ddc:	4691      	mov	r9, r2
 8001dde:	469b      	mov	fp, r3
 8001de0:	e666      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001de2:	2304      	movs	r3, #4
 8001de4:	4699      	mov	r9, r3
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	2400      	movs	r4, #0
 8001dee:	469b      	mov	fp, r3
 8001df0:	e65e      	b.n	8001ab0 <__aeabi_dmul+0x48>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	000007ff 	.word	0x000007ff
 8001df8:	fffffc01 	.word	0xfffffc01
 8001dfc:	0800d75c 	.word	0x0800d75c
 8001e00:	000003ff 	.word	0x000003ff
 8001e04:	feffffff 	.word	0xfeffffff
 8001e08:	000007fe 	.word	0x000007fe
 8001e0c:	fffffc0d 	.word	0xfffffc0d
 8001e10:	4649      	mov	r1, r9
 8001e12:	2301      	movs	r3, #1
 8001e14:	4319      	orrs	r1, r3
 8001e16:	4689      	mov	r9, r1
 8001e18:	2600      	movs	r6, #0
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	e667      	b.n	8001aee <__aeabi_dmul+0x86>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2480      	movs	r4, #128	; 0x80
 8001e22:	2500      	movs	r5, #0
 8001e24:	4a43      	ldr	r2, [pc, #268]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	e67e      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	1a40      	subs	r0, r0, r1
 8001e30:	2838      	cmp	r0, #56	; 0x38
 8001e32:	dd00      	ble.n	8001e36 <__aeabi_dmul+0x3ce>
 8001e34:	e676      	b.n	8001b24 <__aeabi_dmul+0xbc>
 8001e36:	281f      	cmp	r0, #31
 8001e38:	dd5b      	ble.n	8001ef2 <__aeabi_dmul+0x48a>
 8001e3a:	221f      	movs	r2, #31
 8001e3c:	0023      	movs	r3, r4
 8001e3e:	4252      	negs	r2, r2
 8001e40:	1a51      	subs	r1, r2, r1
 8001e42:	40cb      	lsrs	r3, r1
 8001e44:	0019      	movs	r1, r3
 8001e46:	2820      	cmp	r0, #32
 8001e48:	d003      	beq.n	8001e52 <__aeabi_dmul+0x3ea>
 8001e4a:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <__aeabi_dmul+0x4d0>)
 8001e4c:	4462      	add	r2, ip
 8001e4e:	4094      	lsls	r4, r2
 8001e50:	4325      	orrs	r5, r4
 8001e52:	1e6a      	subs	r2, r5, #1
 8001e54:	4195      	sbcs	r5, r2
 8001e56:	002a      	movs	r2, r5
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	2107      	movs	r1, #7
 8001e5c:	000d      	movs	r5, r1
 8001e5e:	2400      	movs	r4, #0
 8001e60:	4015      	ands	r5, r2
 8001e62:	4211      	tst	r1, r2
 8001e64:	d05b      	beq.n	8001f1e <__aeabi_dmul+0x4b6>
 8001e66:	210f      	movs	r1, #15
 8001e68:	2400      	movs	r4, #0
 8001e6a:	4011      	ands	r1, r2
 8001e6c:	2904      	cmp	r1, #4
 8001e6e:	d053      	beq.n	8001f18 <__aeabi_dmul+0x4b0>
 8001e70:	1d11      	adds	r1, r2, #4
 8001e72:	4291      	cmp	r1, r2
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	4252      	negs	r2, r2
 8001e78:	18a4      	adds	r4, r4, r2
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	0223      	lsls	r3, r4, #8
 8001e7e:	d54b      	bpl.n	8001f18 <__aeabi_dmul+0x4b0>
 8001e80:	2201      	movs	r2, #1
 8001e82:	2400      	movs	r4, #0
 8001e84:	2500      	movs	r5, #0
 8001e86:	e650      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	031b      	lsls	r3, r3, #12
 8001e8c:	421c      	tst	r4, r3
 8001e8e:	d009      	beq.n	8001ea4 <__aeabi_dmul+0x43c>
 8001e90:	421e      	tst	r6, r3
 8001e92:	d107      	bne.n	8001ea4 <__aeabi_dmul+0x43c>
 8001e94:	4333      	orrs	r3, r6
 8001e96:	031c      	lsls	r4, r3, #12
 8001e98:	4643      	mov	r3, r8
 8001e9a:	0015      	movs	r5, r2
 8001e9c:	0b24      	lsrs	r4, r4, #12
 8001e9e:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	e642      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	0312      	lsls	r2, r2, #12
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	0324      	lsls	r4, r4, #12
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001eae:	0b24      	lsrs	r4, r4, #12
 8001eb0:	9701      	str	r7, [sp, #4]
 8001eb2:	e63a      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001eb4:	f000 fd50 	bl	8002958 <__clzsi2>
 8001eb8:	0001      	movs	r1, r0
 8001eba:	0002      	movs	r2, r0
 8001ebc:	3115      	adds	r1, #21
 8001ebe:	3220      	adds	r2, #32
 8001ec0:	291c      	cmp	r1, #28
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_dmul+0x45e>
 8001ec4:	e74b      	b.n	8001d5e <__aeabi_dmul+0x2f6>
 8001ec6:	0034      	movs	r4, r6
 8001ec8:	3808      	subs	r0, #8
 8001eca:	2500      	movs	r5, #0
 8001ecc:	4084      	lsls	r4, r0
 8001ece:	e750      	b.n	8001d72 <__aeabi_dmul+0x30a>
 8001ed0:	f000 fd42 	bl	8002958 <__clzsi2>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	3215      	adds	r2, #21
 8001eda:	3020      	adds	r0, #32
 8001edc:	2a1c      	cmp	r2, #28
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dmul+0x47a>
 8001ee0:	e71e      	b.n	8001d20 <__aeabi_dmul+0x2b8>
 8001ee2:	4656      	mov	r6, sl
 8001ee4:	3b08      	subs	r3, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	409e      	lsls	r6, r3
 8001eea:	e723      	b.n	8001d34 <__aeabi_dmul+0x2cc>
 8001eec:	9b00      	ldr	r3, [sp, #0]
 8001eee:	469c      	mov	ip, r3
 8001ef0:	e6e6      	b.n	8001cc0 <__aeabi_dmul+0x258>
 8001ef2:	4912      	ldr	r1, [pc, #72]	; (8001f3c <__aeabi_dmul+0x4d4>)
 8001ef4:	0022      	movs	r2, r4
 8001ef6:	4461      	add	r1, ip
 8001ef8:	002e      	movs	r6, r5
 8001efa:	408d      	lsls	r5, r1
 8001efc:	408a      	lsls	r2, r1
 8001efe:	40c6      	lsrs	r6, r0
 8001f00:	1e69      	subs	r1, r5, #1
 8001f02:	418d      	sbcs	r5, r1
 8001f04:	4332      	orrs	r2, r6
 8001f06:	432a      	orrs	r2, r5
 8001f08:	40c4      	lsrs	r4, r0
 8001f0a:	0753      	lsls	r3, r2, #29
 8001f0c:	d0b6      	beq.n	8001e7c <__aeabi_dmul+0x414>
 8001f0e:	210f      	movs	r1, #15
 8001f10:	4011      	ands	r1, r2
 8001f12:	2904      	cmp	r1, #4
 8001f14:	d1ac      	bne.n	8001e70 <__aeabi_dmul+0x408>
 8001f16:	e7b1      	b.n	8001e7c <__aeabi_dmul+0x414>
 8001f18:	0765      	lsls	r5, r4, #29
 8001f1a:	0264      	lsls	r4, r4, #9
 8001f1c:	0b24      	lsrs	r4, r4, #12
 8001f1e:	08d2      	lsrs	r2, r2, #3
 8001f20:	4315      	orrs	r5, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	e601      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	0312      	lsls	r2, r2, #12
 8001f2a:	4314      	orrs	r4, r2
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	4a01      	ldr	r2, [pc, #4]	; (8001f34 <__aeabi_dmul+0x4cc>)
 8001f30:	0b24      	lsrs	r4, r4, #12
 8001f32:	e5fa      	b.n	8001b2a <__aeabi_dmul+0xc2>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	0000043e 	.word	0x0000043e
 8001f3c:	0000041e 	.word	0x0000041e

08001f40 <__aeabi_dsub>:
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f42:	4657      	mov	r7, sl
 8001f44:	464e      	mov	r6, r9
 8001f46:	4645      	mov	r5, r8
 8001f48:	46de      	mov	lr, fp
 8001f4a:	b5e0      	push	{r5, r6, r7, lr}
 8001f4c:	001e      	movs	r6, r3
 8001f4e:	0017      	movs	r7, r2
 8001f50:	004a      	lsls	r2, r1, #1
 8001f52:	030b      	lsls	r3, r1, #12
 8001f54:	0d52      	lsrs	r2, r2, #21
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	4690      	mov	r8, r2
 8001f5a:	0f42      	lsrs	r2, r0, #29
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	0fcd      	lsrs	r5, r1, #31
 8001f60:	4ccd      	ldr	r4, [pc, #820]	; (8002298 <__aeabi_dsub+0x358>)
 8001f62:	0331      	lsls	r1, r6, #12
 8001f64:	00c3      	lsls	r3, r0, #3
 8001f66:	4694      	mov	ip, r2
 8001f68:	0070      	lsls	r0, r6, #1
 8001f6a:	0f7a      	lsrs	r2, r7, #29
 8001f6c:	0a49      	lsrs	r1, r1, #9
 8001f6e:	00ff      	lsls	r7, r7, #3
 8001f70:	469a      	mov	sl, r3
 8001f72:	46b9      	mov	r9, r7
 8001f74:	0d40      	lsrs	r0, r0, #21
 8001f76:	0ff6      	lsrs	r6, r6, #31
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	42a0      	cmp	r0, r4
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x40>
 8001f7e:	e0b1      	b.n	80020e4 <__aeabi_dsub+0x1a4>
 8001f80:	2201      	movs	r2, #1
 8001f82:	4056      	eors	r6, r2
 8001f84:	46b3      	mov	fp, r6
 8001f86:	42b5      	cmp	r5, r6
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x4c>
 8001f8a:	e088      	b.n	800209e <__aeabi_dsub+0x15e>
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	1a12      	subs	r2, r2, r0
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_dsub+0x56>
 8001f94:	e0ae      	b.n	80020f4 <__aeabi_dsub+0x1b4>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x5c>
 8001f9a:	e0c1      	b.n	8002120 <__aeabi_dsub+0x1e0>
 8001f9c:	48be      	ldr	r0, [pc, #760]	; (8002298 <__aeabi_dsub+0x358>)
 8001f9e:	4580      	cmp	r8, r0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x64>
 8001fa2:	e151      	b.n	8002248 <__aeabi_dsub+0x308>
 8001fa4:	2080      	movs	r0, #128	; 0x80
 8001fa6:	0400      	lsls	r0, r0, #16
 8001fa8:	4301      	orrs	r1, r0
 8001faa:	2a38      	cmp	r2, #56	; 0x38
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0x70>
 8001fae:	e17b      	b.n	80022a8 <__aeabi_dsub+0x368>
 8001fb0:	2a1f      	cmp	r2, #31
 8001fb2:	dd00      	ble.n	8001fb6 <__aeabi_dsub+0x76>
 8001fb4:	e1ee      	b.n	8002394 <__aeabi_dsub+0x454>
 8001fb6:	2020      	movs	r0, #32
 8001fb8:	003e      	movs	r6, r7
 8001fba:	1a80      	subs	r0, r0, r2
 8001fbc:	000c      	movs	r4, r1
 8001fbe:	40d6      	lsrs	r6, r2
 8001fc0:	40d1      	lsrs	r1, r2
 8001fc2:	4087      	lsls	r7, r0
 8001fc4:	4662      	mov	r2, ip
 8001fc6:	4084      	lsls	r4, r0
 8001fc8:	1a52      	subs	r2, r2, r1
 8001fca:	1e78      	subs	r0, r7, #1
 8001fcc:	4187      	sbcs	r7, r0
 8001fce:	4694      	mov	ip, r2
 8001fd0:	4334      	orrs	r4, r6
 8001fd2:	4327      	orrs	r7, r4
 8001fd4:	1bdc      	subs	r4, r3, r7
 8001fd6:	42a3      	cmp	r3, r4
 8001fd8:	419b      	sbcs	r3, r3
 8001fda:	4662      	mov	r2, ip
 8001fdc:	425b      	negs	r3, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	d400      	bmi.n	8001fea <__aeabi_dsub+0xaa>
 8001fe8:	e118      	b.n	800221c <__aeabi_dsub+0x2dc>
 8001fea:	464b      	mov	r3, r9
 8001fec:	0258      	lsls	r0, r3, #9
 8001fee:	0a43      	lsrs	r3, r0, #9
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0xba>
 8001ff8:	e137      	b.n	800226a <__aeabi_dsub+0x32a>
 8001ffa:	4648      	mov	r0, r9
 8001ffc:	f000 fcac 	bl	8002958 <__clzsi2>
 8002000:	0001      	movs	r1, r0
 8002002:	3908      	subs	r1, #8
 8002004:	2320      	movs	r3, #32
 8002006:	0022      	movs	r2, r4
 8002008:	4648      	mov	r0, r9
 800200a:	1a5b      	subs	r3, r3, r1
 800200c:	40da      	lsrs	r2, r3
 800200e:	4088      	lsls	r0, r1
 8002010:	408c      	lsls	r4, r1
 8002012:	4643      	mov	r3, r8
 8002014:	4310      	orrs	r0, r2
 8002016:	4588      	cmp	r8, r1
 8002018:	dd00      	ble.n	800201c <__aeabi_dsub+0xdc>
 800201a:	e136      	b.n	800228a <__aeabi_dsub+0x34a>
 800201c:	1ac9      	subs	r1, r1, r3
 800201e:	1c4b      	adds	r3, r1, #1
 8002020:	2b1f      	cmp	r3, #31
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0xe6>
 8002024:	e0ea      	b.n	80021fc <__aeabi_dsub+0x2bc>
 8002026:	2220      	movs	r2, #32
 8002028:	0026      	movs	r6, r4
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	0001      	movs	r1, r0
 800202e:	4094      	lsls	r4, r2
 8002030:	40de      	lsrs	r6, r3
 8002032:	40d8      	lsrs	r0, r3
 8002034:	2300      	movs	r3, #0
 8002036:	4091      	lsls	r1, r2
 8002038:	1e62      	subs	r2, r4, #1
 800203a:	4194      	sbcs	r4, r2
 800203c:	4681      	mov	r9, r0
 800203e:	4698      	mov	r8, r3
 8002040:	4331      	orrs	r1, r6
 8002042:	430c      	orrs	r4, r1
 8002044:	0763      	lsls	r3, r4, #29
 8002046:	d009      	beq.n	800205c <__aeabi_dsub+0x11c>
 8002048:	230f      	movs	r3, #15
 800204a:	4023      	ands	r3, r4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d005      	beq.n	800205c <__aeabi_dsub+0x11c>
 8002050:	1d23      	adds	r3, r4, #4
 8002052:	42a3      	cmp	r3, r4
 8002054:	41a4      	sbcs	r4, r4
 8002056:	4264      	negs	r4, r4
 8002058:	44a1      	add	r9, r4
 800205a:	001c      	movs	r4, r3
 800205c:	464b      	mov	r3, r9
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	d400      	bmi.n	8002064 <__aeabi_dsub+0x124>
 8002062:	e0de      	b.n	8002222 <__aeabi_dsub+0x2e2>
 8002064:	4641      	mov	r1, r8
 8002066:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <__aeabi_dsub+0x358>)
 8002068:	3101      	adds	r1, #1
 800206a:	4299      	cmp	r1, r3
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x130>
 800206e:	e0e7      	b.n	8002240 <__aeabi_dsub+0x300>
 8002070:	464b      	mov	r3, r9
 8002072:	488a      	ldr	r0, [pc, #552]	; (800229c <__aeabi_dsub+0x35c>)
 8002074:	08e4      	lsrs	r4, r4, #3
 8002076:	4003      	ands	r3, r0
 8002078:	0018      	movs	r0, r3
 800207a:	0549      	lsls	r1, r1, #21
 800207c:	075b      	lsls	r3, r3, #29
 800207e:	0240      	lsls	r0, r0, #9
 8002080:	4323      	orrs	r3, r4
 8002082:	0d4a      	lsrs	r2, r1, #21
 8002084:	0b04      	lsrs	r4, r0, #12
 8002086:	0512      	lsls	r2, r2, #20
 8002088:	07ed      	lsls	r5, r5, #31
 800208a:	4322      	orrs	r2, r4
 800208c:	432a      	orrs	r2, r5
 800208e:	0018      	movs	r0, r3
 8002090:	0011      	movs	r1, r2
 8002092:	bcf0      	pop	{r4, r5, r6, r7}
 8002094:	46bb      	mov	fp, r7
 8002096:	46b2      	mov	sl, r6
 8002098:	46a9      	mov	r9, r5
 800209a:	46a0      	mov	r8, r4
 800209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800209e:	4642      	mov	r2, r8
 80020a0:	1a12      	subs	r2, r2, r0
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	dd52      	ble.n	800214c <__aeabi_dsub+0x20c>
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x16c>
 80020aa:	e09c      	b.n	80021e6 <__aeabi_dsub+0x2a6>
 80020ac:	45a0      	cmp	r8, r4
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x172>
 80020b0:	e0ca      	b.n	8002248 <__aeabi_dsub+0x308>
 80020b2:	2080      	movs	r0, #128	; 0x80
 80020b4:	0400      	lsls	r0, r0, #16
 80020b6:	4301      	orrs	r1, r0
 80020b8:	2a38      	cmp	r2, #56	; 0x38
 80020ba:	dd00      	ble.n	80020be <__aeabi_dsub+0x17e>
 80020bc:	e149      	b.n	8002352 <__aeabi_dsub+0x412>
 80020be:	2a1f      	cmp	r2, #31
 80020c0:	dc00      	bgt.n	80020c4 <__aeabi_dsub+0x184>
 80020c2:	e197      	b.n	80023f4 <__aeabi_dsub+0x4b4>
 80020c4:	0010      	movs	r0, r2
 80020c6:	000e      	movs	r6, r1
 80020c8:	3820      	subs	r0, #32
 80020ca:	40c6      	lsrs	r6, r0
 80020cc:	2a20      	cmp	r2, #32
 80020ce:	d004      	beq.n	80020da <__aeabi_dsub+0x19a>
 80020d0:	2040      	movs	r0, #64	; 0x40
 80020d2:	1a82      	subs	r2, r0, r2
 80020d4:	4091      	lsls	r1, r2
 80020d6:	430f      	orrs	r7, r1
 80020d8:	46b9      	mov	r9, r7
 80020da:	464c      	mov	r4, r9
 80020dc:	1e62      	subs	r2, r4, #1
 80020de:	4194      	sbcs	r4, r2
 80020e0:	4334      	orrs	r4, r6
 80020e2:	e13a      	b.n	800235a <__aeabi_dsub+0x41a>
 80020e4:	000a      	movs	r2, r1
 80020e6:	433a      	orrs	r2, r7
 80020e8:	d028      	beq.n	800213c <__aeabi_dsub+0x1fc>
 80020ea:	46b3      	mov	fp, r6
 80020ec:	42b5      	cmp	r5, r6
 80020ee:	d02b      	beq.n	8002148 <__aeabi_dsub+0x208>
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <__aeabi_dsub+0x360>)
 80020f2:	4442      	add	r2, r8
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d05d      	beq.n	80021b4 <__aeabi_dsub+0x274>
 80020f8:	4642      	mov	r2, r8
 80020fa:	4644      	mov	r4, r8
 80020fc:	1a82      	subs	r2, r0, r2
 80020fe:	2c00      	cmp	r4, #0
 8002100:	d000      	beq.n	8002104 <__aeabi_dsub+0x1c4>
 8002102:	e0f5      	b.n	80022f0 <__aeabi_dsub+0x3b0>
 8002104:	4665      	mov	r5, ip
 8002106:	431d      	orrs	r5, r3
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x1cc>
 800210a:	e19c      	b.n	8002446 <__aeabi_dsub+0x506>
 800210c:	1e55      	subs	r5, r2, #1
 800210e:	2a01      	cmp	r2, #1
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x1d4>
 8002112:	e1fb      	b.n	800250c <__aeabi_dsub+0x5cc>
 8002114:	4c60      	ldr	r4, [pc, #384]	; (8002298 <__aeabi_dsub+0x358>)
 8002116:	42a2      	cmp	r2, r4
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x1dc>
 800211a:	e1bd      	b.n	8002498 <__aeabi_dsub+0x558>
 800211c:	002a      	movs	r2, r5
 800211e:	e0f0      	b.n	8002302 <__aeabi_dsub+0x3c2>
 8002120:	0008      	movs	r0, r1
 8002122:	4338      	orrs	r0, r7
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x1e8>
 8002126:	e0c3      	b.n	80022b0 <__aeabi_dsub+0x370>
 8002128:	1e50      	subs	r0, r2, #1
 800212a:	2a01      	cmp	r2, #1
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x1f0>
 800212e:	e1a8      	b.n	8002482 <__aeabi_dsub+0x542>
 8002130:	4c59      	ldr	r4, [pc, #356]	; (8002298 <__aeabi_dsub+0x358>)
 8002132:	42a2      	cmp	r2, r4
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x1f8>
 8002136:	e087      	b.n	8002248 <__aeabi_dsub+0x308>
 8002138:	0002      	movs	r2, r0
 800213a:	e736      	b.n	8001faa <__aeabi_dsub+0x6a>
 800213c:	2201      	movs	r2, #1
 800213e:	4056      	eors	r6, r2
 8002140:	46b3      	mov	fp, r6
 8002142:	42b5      	cmp	r5, r6
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x208>
 8002146:	e721      	b.n	8001f8c <__aeabi_dsub+0x4c>
 8002148:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <__aeabi_dsub+0x360>)
 800214a:	4442      	add	r2, r8
 800214c:	2a00      	cmp	r2, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x212>
 8002150:	e0b5      	b.n	80022be <__aeabi_dsub+0x37e>
 8002152:	4642      	mov	r2, r8
 8002154:	4644      	mov	r4, r8
 8002156:	1a82      	subs	r2, r0, r2
 8002158:	2c00      	cmp	r4, #0
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x21e>
 800215c:	e138      	b.n	80023d0 <__aeabi_dsub+0x490>
 800215e:	4e4e      	ldr	r6, [pc, #312]	; (8002298 <__aeabi_dsub+0x358>)
 8002160:	42b0      	cmp	r0, r6
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x226>
 8002164:	e1de      	b.n	8002524 <__aeabi_dsub+0x5e4>
 8002166:	2680      	movs	r6, #128	; 0x80
 8002168:	4664      	mov	r4, ip
 800216a:	0436      	lsls	r6, r6, #16
 800216c:	4334      	orrs	r4, r6
 800216e:	46a4      	mov	ip, r4
 8002170:	2a38      	cmp	r2, #56	; 0x38
 8002172:	dd00      	ble.n	8002176 <__aeabi_dsub+0x236>
 8002174:	e196      	b.n	80024a4 <__aeabi_dsub+0x564>
 8002176:	2a1f      	cmp	r2, #31
 8002178:	dd00      	ble.n	800217c <__aeabi_dsub+0x23c>
 800217a:	e224      	b.n	80025c6 <__aeabi_dsub+0x686>
 800217c:	2620      	movs	r6, #32
 800217e:	1ab4      	subs	r4, r6, r2
 8002180:	46a2      	mov	sl, r4
 8002182:	4664      	mov	r4, ip
 8002184:	4656      	mov	r6, sl
 8002186:	40b4      	lsls	r4, r6
 8002188:	46a1      	mov	r9, r4
 800218a:	001c      	movs	r4, r3
 800218c:	464e      	mov	r6, r9
 800218e:	40d4      	lsrs	r4, r2
 8002190:	4326      	orrs	r6, r4
 8002192:	0034      	movs	r4, r6
 8002194:	4656      	mov	r6, sl
 8002196:	40b3      	lsls	r3, r6
 8002198:	1e5e      	subs	r6, r3, #1
 800219a:	41b3      	sbcs	r3, r6
 800219c:	431c      	orrs	r4, r3
 800219e:	4663      	mov	r3, ip
 80021a0:	40d3      	lsrs	r3, r2
 80021a2:	18c9      	adds	r1, r1, r3
 80021a4:	19e4      	adds	r4, r4, r7
 80021a6:	42bc      	cmp	r4, r7
 80021a8:	41bf      	sbcs	r7, r7
 80021aa:	427f      	negs	r7, r7
 80021ac:	46b9      	mov	r9, r7
 80021ae:	4680      	mov	r8, r0
 80021b0:	4489      	add	r9, r1
 80021b2:	e0d8      	b.n	8002366 <__aeabi_dsub+0x426>
 80021b4:	4640      	mov	r0, r8
 80021b6:	4c3b      	ldr	r4, [pc, #236]	; (80022a4 <__aeabi_dsub+0x364>)
 80021b8:	3001      	adds	r0, #1
 80021ba:	4220      	tst	r0, r4
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dsub+0x280>
 80021be:	e0b4      	b.n	800232a <__aeabi_dsub+0x3ea>
 80021c0:	4640      	mov	r0, r8
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d000      	beq.n	80021c8 <__aeabi_dsub+0x288>
 80021c6:	e144      	b.n	8002452 <__aeabi_dsub+0x512>
 80021c8:	4660      	mov	r0, ip
 80021ca:	4318      	orrs	r0, r3
 80021cc:	d100      	bne.n	80021d0 <__aeabi_dsub+0x290>
 80021ce:	e190      	b.n	80024f2 <__aeabi_dsub+0x5b2>
 80021d0:	0008      	movs	r0, r1
 80021d2:	4338      	orrs	r0, r7
 80021d4:	d000      	beq.n	80021d8 <__aeabi_dsub+0x298>
 80021d6:	e1aa      	b.n	800252e <__aeabi_dsub+0x5ee>
 80021d8:	4661      	mov	r1, ip
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	0749      	lsls	r1, r1, #29
 80021de:	430b      	orrs	r3, r1
 80021e0:	4661      	mov	r1, ip
 80021e2:	08cc      	lsrs	r4, r1, #3
 80021e4:	e027      	b.n	8002236 <__aeabi_dsub+0x2f6>
 80021e6:	0008      	movs	r0, r1
 80021e8:	4338      	orrs	r0, r7
 80021ea:	d061      	beq.n	80022b0 <__aeabi_dsub+0x370>
 80021ec:	1e50      	subs	r0, r2, #1
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x2b4>
 80021f2:	e139      	b.n	8002468 <__aeabi_dsub+0x528>
 80021f4:	42a2      	cmp	r2, r4
 80021f6:	d027      	beq.n	8002248 <__aeabi_dsub+0x308>
 80021f8:	0002      	movs	r2, r0
 80021fa:	e75d      	b.n	80020b8 <__aeabi_dsub+0x178>
 80021fc:	0002      	movs	r2, r0
 80021fe:	391f      	subs	r1, #31
 8002200:	40ca      	lsrs	r2, r1
 8002202:	0011      	movs	r1, r2
 8002204:	2b20      	cmp	r3, #32
 8002206:	d003      	beq.n	8002210 <__aeabi_dsub+0x2d0>
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	4098      	lsls	r0, r3
 800220e:	4304      	orrs	r4, r0
 8002210:	1e63      	subs	r3, r4, #1
 8002212:	419c      	sbcs	r4, r3
 8002214:	2300      	movs	r3, #0
 8002216:	4699      	mov	r9, r3
 8002218:	4698      	mov	r8, r3
 800221a:	430c      	orrs	r4, r1
 800221c:	0763      	lsls	r3, r4, #29
 800221e:	d000      	beq.n	8002222 <__aeabi_dsub+0x2e2>
 8002220:	e712      	b.n	8002048 <__aeabi_dsub+0x108>
 8002222:	464b      	mov	r3, r9
 8002224:	464a      	mov	r2, r9
 8002226:	08e4      	lsrs	r4, r4, #3
 8002228:	075b      	lsls	r3, r3, #29
 800222a:	4323      	orrs	r3, r4
 800222c:	08d4      	lsrs	r4, r2, #3
 800222e:	4642      	mov	r2, r8
 8002230:	4919      	ldr	r1, [pc, #100]	; (8002298 <__aeabi_dsub+0x358>)
 8002232:	428a      	cmp	r2, r1
 8002234:	d00e      	beq.n	8002254 <__aeabi_dsub+0x314>
 8002236:	0324      	lsls	r4, r4, #12
 8002238:	0552      	lsls	r2, r2, #21
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	0d52      	lsrs	r2, r2, #21
 800223e:	e722      	b.n	8002086 <__aeabi_dsub+0x146>
 8002240:	000a      	movs	r2, r1
 8002242:	2400      	movs	r4, #0
 8002244:	2300      	movs	r3, #0
 8002246:	e71e      	b.n	8002086 <__aeabi_dsub+0x146>
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	4662      	mov	r2, ip
 800224c:	0752      	lsls	r2, r2, #29
 800224e:	4313      	orrs	r3, r2
 8002250:	4662      	mov	r2, ip
 8002252:	08d4      	lsrs	r4, r2, #3
 8002254:	001a      	movs	r2, r3
 8002256:	4322      	orrs	r2, r4
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x31c>
 800225a:	e1fc      	b.n	8002656 <__aeabi_dsub+0x716>
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0312      	lsls	r2, r2, #12
 8002260:	4314      	orrs	r4, r2
 8002262:	0324      	lsls	r4, r4, #12
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <__aeabi_dsub+0x358>)
 8002266:	0b24      	lsrs	r4, r4, #12
 8002268:	e70d      	b.n	8002086 <__aeabi_dsub+0x146>
 800226a:	0020      	movs	r0, r4
 800226c:	f000 fb74 	bl	8002958 <__clzsi2>
 8002270:	0001      	movs	r1, r0
 8002272:	3118      	adds	r1, #24
 8002274:	291f      	cmp	r1, #31
 8002276:	dc00      	bgt.n	800227a <__aeabi_dsub+0x33a>
 8002278:	e6c4      	b.n	8002004 <__aeabi_dsub+0xc4>
 800227a:	3808      	subs	r0, #8
 800227c:	4084      	lsls	r4, r0
 800227e:	4643      	mov	r3, r8
 8002280:	0020      	movs	r0, r4
 8002282:	2400      	movs	r4, #0
 8002284:	4588      	cmp	r8, r1
 8002286:	dc00      	bgt.n	800228a <__aeabi_dsub+0x34a>
 8002288:	e6c8      	b.n	800201c <__aeabi_dsub+0xdc>
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__aeabi_dsub+0x35c>)
 800228c:	1a5b      	subs	r3, r3, r1
 800228e:	4010      	ands	r0, r2
 8002290:	4698      	mov	r8, r3
 8002292:	4681      	mov	r9, r0
 8002294:	e6d6      	b.n	8002044 <__aeabi_dsub+0x104>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff
 800229c:	ff7fffff 	.word	0xff7fffff
 80022a0:	fffff801 	.word	0xfffff801
 80022a4:	000007fe 	.word	0x000007fe
 80022a8:	430f      	orrs	r7, r1
 80022aa:	1e7a      	subs	r2, r7, #1
 80022ac:	4197      	sbcs	r7, r2
 80022ae:	e691      	b.n	8001fd4 <__aeabi_dsub+0x94>
 80022b0:	4661      	mov	r1, ip
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	0749      	lsls	r1, r1, #29
 80022b6:	430b      	orrs	r3, r1
 80022b8:	4661      	mov	r1, ip
 80022ba:	08cc      	lsrs	r4, r1, #3
 80022bc:	e7b8      	b.n	8002230 <__aeabi_dsub+0x2f0>
 80022be:	4640      	mov	r0, r8
 80022c0:	4cd3      	ldr	r4, [pc, #844]	; (8002610 <__aeabi_dsub+0x6d0>)
 80022c2:	3001      	adds	r0, #1
 80022c4:	4220      	tst	r0, r4
 80022c6:	d000      	beq.n	80022ca <__aeabi_dsub+0x38a>
 80022c8:	e0a2      	b.n	8002410 <__aeabi_dsub+0x4d0>
 80022ca:	4640      	mov	r0, r8
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d000      	beq.n	80022d2 <__aeabi_dsub+0x392>
 80022d0:	e101      	b.n	80024d6 <__aeabi_dsub+0x596>
 80022d2:	4660      	mov	r0, ip
 80022d4:	4318      	orrs	r0, r3
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x39a>
 80022d8:	e15e      	b.n	8002598 <__aeabi_dsub+0x658>
 80022da:	0008      	movs	r0, r1
 80022dc:	4338      	orrs	r0, r7
 80022de:	d000      	beq.n	80022e2 <__aeabi_dsub+0x3a2>
 80022e0:	e15f      	b.n	80025a2 <__aeabi_dsub+0x662>
 80022e2:	4661      	mov	r1, ip
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	0749      	lsls	r1, r1, #29
 80022e8:	430b      	orrs	r3, r1
 80022ea:	4661      	mov	r1, ip
 80022ec:	08cc      	lsrs	r4, r1, #3
 80022ee:	e7a2      	b.n	8002236 <__aeabi_dsub+0x2f6>
 80022f0:	4dc8      	ldr	r5, [pc, #800]	; (8002614 <__aeabi_dsub+0x6d4>)
 80022f2:	42a8      	cmp	r0, r5
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x3b8>
 80022f6:	e0cf      	b.n	8002498 <__aeabi_dsub+0x558>
 80022f8:	2580      	movs	r5, #128	; 0x80
 80022fa:	4664      	mov	r4, ip
 80022fc:	042d      	lsls	r5, r5, #16
 80022fe:	432c      	orrs	r4, r5
 8002300:	46a4      	mov	ip, r4
 8002302:	2a38      	cmp	r2, #56	; 0x38
 8002304:	dc56      	bgt.n	80023b4 <__aeabi_dsub+0x474>
 8002306:	2a1f      	cmp	r2, #31
 8002308:	dd00      	ble.n	800230c <__aeabi_dsub+0x3cc>
 800230a:	e0d1      	b.n	80024b0 <__aeabi_dsub+0x570>
 800230c:	2520      	movs	r5, #32
 800230e:	001e      	movs	r6, r3
 8002310:	1aad      	subs	r5, r5, r2
 8002312:	4664      	mov	r4, ip
 8002314:	40ab      	lsls	r3, r5
 8002316:	40ac      	lsls	r4, r5
 8002318:	40d6      	lsrs	r6, r2
 800231a:	1e5d      	subs	r5, r3, #1
 800231c:	41ab      	sbcs	r3, r5
 800231e:	4334      	orrs	r4, r6
 8002320:	4323      	orrs	r3, r4
 8002322:	4664      	mov	r4, ip
 8002324:	40d4      	lsrs	r4, r2
 8002326:	1b09      	subs	r1, r1, r4
 8002328:	e049      	b.n	80023be <__aeabi_dsub+0x47e>
 800232a:	4660      	mov	r0, ip
 800232c:	1bdc      	subs	r4, r3, r7
 800232e:	1a46      	subs	r6, r0, r1
 8002330:	42a3      	cmp	r3, r4
 8002332:	4180      	sbcs	r0, r0
 8002334:	4240      	negs	r0, r0
 8002336:	4681      	mov	r9, r0
 8002338:	0030      	movs	r0, r6
 800233a:	464e      	mov	r6, r9
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	4681      	mov	r9, r0
 8002340:	0200      	lsls	r0, r0, #8
 8002342:	d476      	bmi.n	8002432 <__aeabi_dsub+0x4f2>
 8002344:	464b      	mov	r3, r9
 8002346:	4323      	orrs	r3, r4
 8002348:	d000      	beq.n	800234c <__aeabi_dsub+0x40c>
 800234a:	e652      	b.n	8001ff2 <__aeabi_dsub+0xb2>
 800234c:	2400      	movs	r4, #0
 800234e:	2500      	movs	r5, #0
 8002350:	e771      	b.n	8002236 <__aeabi_dsub+0x2f6>
 8002352:	4339      	orrs	r1, r7
 8002354:	000c      	movs	r4, r1
 8002356:	1e62      	subs	r2, r4, #1
 8002358:	4194      	sbcs	r4, r2
 800235a:	18e4      	adds	r4, r4, r3
 800235c:	429c      	cmp	r4, r3
 800235e:	419b      	sbcs	r3, r3
 8002360:	425b      	negs	r3, r3
 8002362:	4463      	add	r3, ip
 8002364:	4699      	mov	r9, r3
 8002366:	464b      	mov	r3, r9
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	d400      	bmi.n	800236e <__aeabi_dsub+0x42e>
 800236c:	e756      	b.n	800221c <__aeabi_dsub+0x2dc>
 800236e:	2301      	movs	r3, #1
 8002370:	469c      	mov	ip, r3
 8002372:	4ba8      	ldr	r3, [pc, #672]	; (8002614 <__aeabi_dsub+0x6d4>)
 8002374:	44e0      	add	r8, ip
 8002376:	4598      	cmp	r8, r3
 8002378:	d038      	beq.n	80023ec <__aeabi_dsub+0x4ac>
 800237a:	464b      	mov	r3, r9
 800237c:	48a6      	ldr	r0, [pc, #664]	; (8002618 <__aeabi_dsub+0x6d8>)
 800237e:	2201      	movs	r2, #1
 8002380:	4003      	ands	r3, r0
 8002382:	0018      	movs	r0, r3
 8002384:	0863      	lsrs	r3, r4, #1
 8002386:	4014      	ands	r4, r2
 8002388:	431c      	orrs	r4, r3
 800238a:	07c3      	lsls	r3, r0, #31
 800238c:	431c      	orrs	r4, r3
 800238e:	0843      	lsrs	r3, r0, #1
 8002390:	4699      	mov	r9, r3
 8002392:	e657      	b.n	8002044 <__aeabi_dsub+0x104>
 8002394:	0010      	movs	r0, r2
 8002396:	000e      	movs	r6, r1
 8002398:	3820      	subs	r0, #32
 800239a:	40c6      	lsrs	r6, r0
 800239c:	2a20      	cmp	r2, #32
 800239e:	d004      	beq.n	80023aa <__aeabi_dsub+0x46a>
 80023a0:	2040      	movs	r0, #64	; 0x40
 80023a2:	1a82      	subs	r2, r0, r2
 80023a4:	4091      	lsls	r1, r2
 80023a6:	430f      	orrs	r7, r1
 80023a8:	46b9      	mov	r9, r7
 80023aa:	464f      	mov	r7, r9
 80023ac:	1e7a      	subs	r2, r7, #1
 80023ae:	4197      	sbcs	r7, r2
 80023b0:	4337      	orrs	r7, r6
 80023b2:	e60f      	b.n	8001fd4 <__aeabi_dsub+0x94>
 80023b4:	4662      	mov	r2, ip
 80023b6:	431a      	orrs	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	4193      	sbcs	r3, r2
 80023be:	1afc      	subs	r4, r7, r3
 80023c0:	42a7      	cmp	r7, r4
 80023c2:	41bf      	sbcs	r7, r7
 80023c4:	427f      	negs	r7, r7
 80023c6:	1bcb      	subs	r3, r1, r7
 80023c8:	4699      	mov	r9, r3
 80023ca:	465d      	mov	r5, fp
 80023cc:	4680      	mov	r8, r0
 80023ce:	e608      	b.n	8001fe2 <__aeabi_dsub+0xa2>
 80023d0:	4666      	mov	r6, ip
 80023d2:	431e      	orrs	r6, r3
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x498>
 80023d6:	e0be      	b.n	8002556 <__aeabi_dsub+0x616>
 80023d8:	1e56      	subs	r6, r2, #1
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x4a0>
 80023de:	e109      	b.n	80025f4 <__aeabi_dsub+0x6b4>
 80023e0:	4c8c      	ldr	r4, [pc, #560]	; (8002614 <__aeabi_dsub+0x6d4>)
 80023e2:	42a2      	cmp	r2, r4
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x4a8>
 80023e6:	e119      	b.n	800261c <__aeabi_dsub+0x6dc>
 80023e8:	0032      	movs	r2, r6
 80023ea:	e6c1      	b.n	8002170 <__aeabi_dsub+0x230>
 80023ec:	4642      	mov	r2, r8
 80023ee:	2400      	movs	r4, #0
 80023f0:	2300      	movs	r3, #0
 80023f2:	e648      	b.n	8002086 <__aeabi_dsub+0x146>
 80023f4:	2020      	movs	r0, #32
 80023f6:	000c      	movs	r4, r1
 80023f8:	1a80      	subs	r0, r0, r2
 80023fa:	003e      	movs	r6, r7
 80023fc:	4087      	lsls	r7, r0
 80023fe:	4084      	lsls	r4, r0
 8002400:	40d6      	lsrs	r6, r2
 8002402:	1e78      	subs	r0, r7, #1
 8002404:	4187      	sbcs	r7, r0
 8002406:	40d1      	lsrs	r1, r2
 8002408:	4334      	orrs	r4, r6
 800240a:	433c      	orrs	r4, r7
 800240c:	448c      	add	ip, r1
 800240e:	e7a4      	b.n	800235a <__aeabi_dsub+0x41a>
 8002410:	4a80      	ldr	r2, [pc, #512]	; (8002614 <__aeabi_dsub+0x6d4>)
 8002412:	4290      	cmp	r0, r2
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x4d8>
 8002416:	e0e9      	b.n	80025ec <__aeabi_dsub+0x6ac>
 8002418:	19df      	adds	r7, r3, r7
 800241a:	429f      	cmp	r7, r3
 800241c:	419b      	sbcs	r3, r3
 800241e:	4461      	add	r1, ip
 8002420:	425b      	negs	r3, r3
 8002422:	18c9      	adds	r1, r1, r3
 8002424:	07cc      	lsls	r4, r1, #31
 8002426:	087f      	lsrs	r7, r7, #1
 8002428:	084b      	lsrs	r3, r1, #1
 800242a:	4699      	mov	r9, r3
 800242c:	4680      	mov	r8, r0
 800242e:	433c      	orrs	r4, r7
 8002430:	e6f4      	b.n	800221c <__aeabi_dsub+0x2dc>
 8002432:	1afc      	subs	r4, r7, r3
 8002434:	42a7      	cmp	r7, r4
 8002436:	41bf      	sbcs	r7, r7
 8002438:	4663      	mov	r3, ip
 800243a:	427f      	negs	r7, r7
 800243c:	1ac9      	subs	r1, r1, r3
 800243e:	1bcb      	subs	r3, r1, r7
 8002440:	4699      	mov	r9, r3
 8002442:	465d      	mov	r5, fp
 8002444:	e5d5      	b.n	8001ff2 <__aeabi_dsub+0xb2>
 8002446:	08ff      	lsrs	r7, r7, #3
 8002448:	074b      	lsls	r3, r1, #29
 800244a:	465d      	mov	r5, fp
 800244c:	433b      	orrs	r3, r7
 800244e:	08cc      	lsrs	r4, r1, #3
 8002450:	e6ee      	b.n	8002230 <__aeabi_dsub+0x2f0>
 8002452:	4662      	mov	r2, ip
 8002454:	431a      	orrs	r2, r3
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x51a>
 8002458:	e082      	b.n	8002560 <__aeabi_dsub+0x620>
 800245a:	000b      	movs	r3, r1
 800245c:	433b      	orrs	r3, r7
 800245e:	d11b      	bne.n	8002498 <__aeabi_dsub+0x558>
 8002460:	2480      	movs	r4, #128	; 0x80
 8002462:	2500      	movs	r5, #0
 8002464:	0324      	lsls	r4, r4, #12
 8002466:	e6f9      	b.n	800225c <__aeabi_dsub+0x31c>
 8002468:	19dc      	adds	r4, r3, r7
 800246a:	429c      	cmp	r4, r3
 800246c:	419b      	sbcs	r3, r3
 800246e:	4461      	add	r1, ip
 8002470:	4689      	mov	r9, r1
 8002472:	425b      	negs	r3, r3
 8002474:	4499      	add	r9, r3
 8002476:	464b      	mov	r3, r9
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	d444      	bmi.n	8002506 <__aeabi_dsub+0x5c6>
 800247c:	2301      	movs	r3, #1
 800247e:	4698      	mov	r8, r3
 8002480:	e6cc      	b.n	800221c <__aeabi_dsub+0x2dc>
 8002482:	1bdc      	subs	r4, r3, r7
 8002484:	4662      	mov	r2, ip
 8002486:	42a3      	cmp	r3, r4
 8002488:	419b      	sbcs	r3, r3
 800248a:	1a51      	subs	r1, r2, r1
 800248c:	425b      	negs	r3, r3
 800248e:	1acb      	subs	r3, r1, r3
 8002490:	4699      	mov	r9, r3
 8002492:	2301      	movs	r3, #1
 8002494:	4698      	mov	r8, r3
 8002496:	e5a4      	b.n	8001fe2 <__aeabi_dsub+0xa2>
 8002498:	08ff      	lsrs	r7, r7, #3
 800249a:	074b      	lsls	r3, r1, #29
 800249c:	465d      	mov	r5, fp
 800249e:	433b      	orrs	r3, r7
 80024a0:	08cc      	lsrs	r4, r1, #3
 80024a2:	e6d7      	b.n	8002254 <__aeabi_dsub+0x314>
 80024a4:	4662      	mov	r2, ip
 80024a6:	431a      	orrs	r2, r3
 80024a8:	0014      	movs	r4, r2
 80024aa:	1e63      	subs	r3, r4, #1
 80024ac:	419c      	sbcs	r4, r3
 80024ae:	e679      	b.n	80021a4 <__aeabi_dsub+0x264>
 80024b0:	0015      	movs	r5, r2
 80024b2:	4664      	mov	r4, ip
 80024b4:	3d20      	subs	r5, #32
 80024b6:	40ec      	lsrs	r4, r5
 80024b8:	46a0      	mov	r8, r4
 80024ba:	2a20      	cmp	r2, #32
 80024bc:	d005      	beq.n	80024ca <__aeabi_dsub+0x58a>
 80024be:	2540      	movs	r5, #64	; 0x40
 80024c0:	4664      	mov	r4, ip
 80024c2:	1aaa      	subs	r2, r5, r2
 80024c4:	4094      	lsls	r4, r2
 80024c6:	4323      	orrs	r3, r4
 80024c8:	469a      	mov	sl, r3
 80024ca:	4654      	mov	r4, sl
 80024cc:	1e63      	subs	r3, r4, #1
 80024ce:	419c      	sbcs	r4, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	4323      	orrs	r3, r4
 80024d4:	e773      	b.n	80023be <__aeabi_dsub+0x47e>
 80024d6:	4662      	mov	r2, ip
 80024d8:	431a      	orrs	r2, r3
 80024da:	d023      	beq.n	8002524 <__aeabi_dsub+0x5e4>
 80024dc:	000a      	movs	r2, r1
 80024de:	433a      	orrs	r2, r7
 80024e0:	d000      	beq.n	80024e4 <__aeabi_dsub+0x5a4>
 80024e2:	e0a0      	b.n	8002626 <__aeabi_dsub+0x6e6>
 80024e4:	4662      	mov	r2, ip
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	0752      	lsls	r2, r2, #29
 80024ea:	4313      	orrs	r3, r2
 80024ec:	4662      	mov	r2, ip
 80024ee:	08d4      	lsrs	r4, r2, #3
 80024f0:	e6b0      	b.n	8002254 <__aeabi_dsub+0x314>
 80024f2:	000b      	movs	r3, r1
 80024f4:	433b      	orrs	r3, r7
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0x5ba>
 80024f8:	e728      	b.n	800234c <__aeabi_dsub+0x40c>
 80024fa:	08ff      	lsrs	r7, r7, #3
 80024fc:	074b      	lsls	r3, r1, #29
 80024fe:	465d      	mov	r5, fp
 8002500:	433b      	orrs	r3, r7
 8002502:	08cc      	lsrs	r4, r1, #3
 8002504:	e697      	b.n	8002236 <__aeabi_dsub+0x2f6>
 8002506:	2302      	movs	r3, #2
 8002508:	4698      	mov	r8, r3
 800250a:	e736      	b.n	800237a <__aeabi_dsub+0x43a>
 800250c:	1afc      	subs	r4, r7, r3
 800250e:	42a7      	cmp	r7, r4
 8002510:	41bf      	sbcs	r7, r7
 8002512:	4663      	mov	r3, ip
 8002514:	427f      	negs	r7, r7
 8002516:	1ac9      	subs	r1, r1, r3
 8002518:	1bcb      	subs	r3, r1, r7
 800251a:	4699      	mov	r9, r3
 800251c:	2301      	movs	r3, #1
 800251e:	465d      	mov	r5, fp
 8002520:	4698      	mov	r8, r3
 8002522:	e55e      	b.n	8001fe2 <__aeabi_dsub+0xa2>
 8002524:	074b      	lsls	r3, r1, #29
 8002526:	08ff      	lsrs	r7, r7, #3
 8002528:	433b      	orrs	r3, r7
 800252a:	08cc      	lsrs	r4, r1, #3
 800252c:	e692      	b.n	8002254 <__aeabi_dsub+0x314>
 800252e:	1bdc      	subs	r4, r3, r7
 8002530:	4660      	mov	r0, ip
 8002532:	42a3      	cmp	r3, r4
 8002534:	41b6      	sbcs	r6, r6
 8002536:	1a40      	subs	r0, r0, r1
 8002538:	4276      	negs	r6, r6
 800253a:	1b80      	subs	r0, r0, r6
 800253c:	4681      	mov	r9, r0
 800253e:	0200      	lsls	r0, r0, #8
 8002540:	d560      	bpl.n	8002604 <__aeabi_dsub+0x6c4>
 8002542:	1afc      	subs	r4, r7, r3
 8002544:	42a7      	cmp	r7, r4
 8002546:	41bf      	sbcs	r7, r7
 8002548:	4663      	mov	r3, ip
 800254a:	427f      	negs	r7, r7
 800254c:	1ac9      	subs	r1, r1, r3
 800254e:	1bcb      	subs	r3, r1, r7
 8002550:	4699      	mov	r9, r3
 8002552:	465d      	mov	r5, fp
 8002554:	e576      	b.n	8002044 <__aeabi_dsub+0x104>
 8002556:	08ff      	lsrs	r7, r7, #3
 8002558:	074b      	lsls	r3, r1, #29
 800255a:	433b      	orrs	r3, r7
 800255c:	08cc      	lsrs	r4, r1, #3
 800255e:	e667      	b.n	8002230 <__aeabi_dsub+0x2f0>
 8002560:	000a      	movs	r2, r1
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	433a      	orrs	r2, r7
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x62a>
 8002568:	e66f      	b.n	800224a <__aeabi_dsub+0x30a>
 800256a:	4662      	mov	r2, ip
 800256c:	0752      	lsls	r2, r2, #29
 800256e:	4313      	orrs	r3, r2
 8002570:	4662      	mov	r2, ip
 8002572:	08d4      	lsrs	r4, r2, #3
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0312      	lsls	r2, r2, #12
 8002578:	4214      	tst	r4, r2
 800257a:	d007      	beq.n	800258c <__aeabi_dsub+0x64c>
 800257c:	08c8      	lsrs	r0, r1, #3
 800257e:	4210      	tst	r0, r2
 8002580:	d104      	bne.n	800258c <__aeabi_dsub+0x64c>
 8002582:	465d      	mov	r5, fp
 8002584:	0004      	movs	r4, r0
 8002586:	08fb      	lsrs	r3, r7, #3
 8002588:	0749      	lsls	r1, r1, #29
 800258a:	430b      	orrs	r3, r1
 800258c:	0f5a      	lsrs	r2, r3, #29
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	0752      	lsls	r2, r2, #29
 8002594:	4313      	orrs	r3, r2
 8002596:	e65d      	b.n	8002254 <__aeabi_dsub+0x314>
 8002598:	074b      	lsls	r3, r1, #29
 800259a:	08ff      	lsrs	r7, r7, #3
 800259c:	433b      	orrs	r3, r7
 800259e:	08cc      	lsrs	r4, r1, #3
 80025a0:	e649      	b.n	8002236 <__aeabi_dsub+0x2f6>
 80025a2:	19dc      	adds	r4, r3, r7
 80025a4:	429c      	cmp	r4, r3
 80025a6:	419b      	sbcs	r3, r3
 80025a8:	4461      	add	r1, ip
 80025aa:	4689      	mov	r9, r1
 80025ac:	425b      	negs	r3, r3
 80025ae:	4499      	add	r9, r3
 80025b0:	464b      	mov	r3, r9
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	d400      	bmi.n	80025b8 <__aeabi_dsub+0x678>
 80025b6:	e631      	b.n	800221c <__aeabi_dsub+0x2dc>
 80025b8:	464a      	mov	r2, r9
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <__aeabi_dsub+0x6d8>)
 80025bc:	401a      	ands	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	4691      	mov	r9, r2
 80025c2:	4698      	mov	r8, r3
 80025c4:	e62a      	b.n	800221c <__aeabi_dsub+0x2dc>
 80025c6:	0016      	movs	r6, r2
 80025c8:	4664      	mov	r4, ip
 80025ca:	3e20      	subs	r6, #32
 80025cc:	40f4      	lsrs	r4, r6
 80025ce:	46a0      	mov	r8, r4
 80025d0:	2a20      	cmp	r2, #32
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dsub+0x6a0>
 80025d4:	2640      	movs	r6, #64	; 0x40
 80025d6:	4664      	mov	r4, ip
 80025d8:	1ab2      	subs	r2, r6, r2
 80025da:	4094      	lsls	r4, r2
 80025dc:	4323      	orrs	r3, r4
 80025de:	469a      	mov	sl, r3
 80025e0:	4654      	mov	r4, sl
 80025e2:	1e63      	subs	r3, r4, #1
 80025e4:	419c      	sbcs	r4, r3
 80025e6:	4643      	mov	r3, r8
 80025e8:	431c      	orrs	r4, r3
 80025ea:	e5db      	b.n	80021a4 <__aeabi_dsub+0x264>
 80025ec:	0002      	movs	r2, r0
 80025ee:	2400      	movs	r4, #0
 80025f0:	2300      	movs	r3, #0
 80025f2:	e548      	b.n	8002086 <__aeabi_dsub+0x146>
 80025f4:	19dc      	adds	r4, r3, r7
 80025f6:	42bc      	cmp	r4, r7
 80025f8:	41bf      	sbcs	r7, r7
 80025fa:	4461      	add	r1, ip
 80025fc:	4689      	mov	r9, r1
 80025fe:	427f      	negs	r7, r7
 8002600:	44b9      	add	r9, r7
 8002602:	e738      	b.n	8002476 <__aeabi_dsub+0x536>
 8002604:	464b      	mov	r3, r9
 8002606:	4323      	orrs	r3, r4
 8002608:	d100      	bne.n	800260c <__aeabi_dsub+0x6cc>
 800260a:	e69f      	b.n	800234c <__aeabi_dsub+0x40c>
 800260c:	e606      	b.n	800221c <__aeabi_dsub+0x2dc>
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	000007fe 	.word	0x000007fe
 8002614:	000007ff 	.word	0x000007ff
 8002618:	ff7fffff 	.word	0xff7fffff
 800261c:	08ff      	lsrs	r7, r7, #3
 800261e:	074b      	lsls	r3, r1, #29
 8002620:	433b      	orrs	r3, r7
 8002622:	08cc      	lsrs	r4, r1, #3
 8002624:	e616      	b.n	8002254 <__aeabi_dsub+0x314>
 8002626:	4662      	mov	r2, ip
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	0752      	lsls	r2, r2, #29
 800262c:	4313      	orrs	r3, r2
 800262e:	4662      	mov	r2, ip
 8002630:	08d4      	lsrs	r4, r2, #3
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	0312      	lsls	r2, r2, #12
 8002636:	4214      	tst	r4, r2
 8002638:	d007      	beq.n	800264a <__aeabi_dsub+0x70a>
 800263a:	08c8      	lsrs	r0, r1, #3
 800263c:	4210      	tst	r0, r2
 800263e:	d104      	bne.n	800264a <__aeabi_dsub+0x70a>
 8002640:	465d      	mov	r5, fp
 8002642:	0004      	movs	r4, r0
 8002644:	08fb      	lsrs	r3, r7, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430b      	orrs	r3, r1
 800264a:	0f5a      	lsrs	r2, r3, #29
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	0752      	lsls	r2, r2, #29
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	4313      	orrs	r3, r2
 8002654:	e5fe      	b.n	8002254 <__aeabi_dsub+0x314>
 8002656:	2300      	movs	r3, #0
 8002658:	4a01      	ldr	r2, [pc, #4]	; (8002660 <__aeabi_dsub+0x720>)
 800265a:	001c      	movs	r4, r3
 800265c:	e513      	b.n	8002086 <__aeabi_dsub+0x146>
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	000007ff 	.word	0x000007ff

08002664 <__aeabi_dcmpun>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	0005      	movs	r5, r0
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <__aeabi_dcmpun+0x38>)
 800266a:	031c      	lsls	r4, r3, #12
 800266c:	0016      	movs	r6, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	030a      	lsls	r2, r1, #12
 8002672:	0049      	lsls	r1, r1, #1
 8002674:	0b12      	lsrs	r2, r2, #12
 8002676:	0d49      	lsrs	r1, r1, #21
 8002678:	0b24      	lsrs	r4, r4, #12
 800267a:	0d5b      	lsrs	r3, r3, #21
 800267c:	4281      	cmp	r1, r0
 800267e:	d008      	beq.n	8002692 <__aeabi_dcmpun+0x2e>
 8002680:	4a06      	ldr	r2, [pc, #24]	; (800269c <__aeabi_dcmpun+0x38>)
 8002682:	2000      	movs	r0, #0
 8002684:	4293      	cmp	r3, r2
 8002686:	d103      	bne.n	8002690 <__aeabi_dcmpun+0x2c>
 8002688:	0020      	movs	r0, r4
 800268a:	4330      	orrs	r0, r6
 800268c:	1e43      	subs	r3, r0, #1
 800268e:	4198      	sbcs	r0, r3
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	2001      	movs	r0, #1
 8002694:	432a      	orrs	r2, r5
 8002696:	d1fb      	bne.n	8002690 <__aeabi_dcmpun+0x2c>
 8002698:	e7f2      	b.n	8002680 <__aeabi_dcmpun+0x1c>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000007ff 	.word	0x000007ff

080026a0 <__aeabi_d2iz>:
 80026a0:	000a      	movs	r2, r1
 80026a2:	b530      	push	{r4, r5, lr}
 80026a4:	4c13      	ldr	r4, [pc, #76]	; (80026f4 <__aeabi_d2iz+0x54>)
 80026a6:	0053      	lsls	r3, r2, #1
 80026a8:	0309      	lsls	r1, r1, #12
 80026aa:	0005      	movs	r5, r0
 80026ac:	0b09      	lsrs	r1, r1, #12
 80026ae:	2000      	movs	r0, #0
 80026b0:	0d5b      	lsrs	r3, r3, #21
 80026b2:	0fd2      	lsrs	r2, r2, #31
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	dd04      	ble.n	80026c2 <__aeabi_d2iz+0x22>
 80026b8:	480f      	ldr	r0, [pc, #60]	; (80026f8 <__aeabi_d2iz+0x58>)
 80026ba:	4283      	cmp	r3, r0
 80026bc:	dd02      	ble.n	80026c4 <__aeabi_d2iz+0x24>
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_d2iz+0x5c>)
 80026c0:	18d0      	adds	r0, r2, r3
 80026c2:	bd30      	pop	{r4, r5, pc}
 80026c4:	2080      	movs	r0, #128	; 0x80
 80026c6:	0340      	lsls	r0, r0, #13
 80026c8:	4301      	orrs	r1, r0
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <__aeabi_d2iz+0x60>)
 80026cc:	1ac0      	subs	r0, r0, r3
 80026ce:	281f      	cmp	r0, #31
 80026d0:	dd08      	ble.n	80026e4 <__aeabi_d2iz+0x44>
 80026d2:	480c      	ldr	r0, [pc, #48]	; (8002704 <__aeabi_d2iz+0x64>)
 80026d4:	1ac3      	subs	r3, r0, r3
 80026d6:	40d9      	lsrs	r1, r3
 80026d8:	000b      	movs	r3, r1
 80026da:	4258      	negs	r0, r3
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d1f0      	bne.n	80026c2 <__aeabi_d2iz+0x22>
 80026e0:	0018      	movs	r0, r3
 80026e2:	e7ee      	b.n	80026c2 <__aeabi_d2iz+0x22>
 80026e4:	4c08      	ldr	r4, [pc, #32]	; (8002708 <__aeabi_d2iz+0x68>)
 80026e6:	40c5      	lsrs	r5, r0
 80026e8:	46a4      	mov	ip, r4
 80026ea:	4463      	add	r3, ip
 80026ec:	4099      	lsls	r1, r3
 80026ee:	000b      	movs	r3, r1
 80026f0:	432b      	orrs	r3, r5
 80026f2:	e7f2      	b.n	80026da <__aeabi_d2iz+0x3a>
 80026f4:	000003fe 	.word	0x000003fe
 80026f8:	0000041d 	.word	0x0000041d
 80026fc:	7fffffff 	.word	0x7fffffff
 8002700:	00000433 	.word	0x00000433
 8002704:	00000413 	.word	0x00000413
 8002708:	fffffbed 	.word	0xfffffbed

0800270c <__aeabi_i2d>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	2800      	cmp	r0, #0
 8002710:	d016      	beq.n	8002740 <__aeabi_i2d+0x34>
 8002712:	17c3      	asrs	r3, r0, #31
 8002714:	18c5      	adds	r5, r0, r3
 8002716:	405d      	eors	r5, r3
 8002718:	0fc4      	lsrs	r4, r0, #31
 800271a:	0028      	movs	r0, r5
 800271c:	f000 f91c 	bl	8002958 <__clzsi2>
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <__aeabi_i2d+0x5c>)
 8002722:	1a12      	subs	r2, r2, r0
 8002724:	280a      	cmp	r0, #10
 8002726:	dc16      	bgt.n	8002756 <__aeabi_i2d+0x4a>
 8002728:	0003      	movs	r3, r0
 800272a:	002e      	movs	r6, r5
 800272c:	3315      	adds	r3, #21
 800272e:	409e      	lsls	r6, r3
 8002730:	230b      	movs	r3, #11
 8002732:	1a18      	subs	r0, r3, r0
 8002734:	40c5      	lsrs	r5, r0
 8002736:	0552      	lsls	r2, r2, #21
 8002738:	032d      	lsls	r5, r5, #12
 800273a:	0b2d      	lsrs	r5, r5, #12
 800273c:	0d53      	lsrs	r3, r2, #21
 800273e:	e003      	b.n	8002748 <__aeabi_i2d+0x3c>
 8002740:	2400      	movs	r4, #0
 8002742:	2300      	movs	r3, #0
 8002744:	2500      	movs	r5, #0
 8002746:	2600      	movs	r6, #0
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	432b      	orrs	r3, r5
 800274c:	07e4      	lsls	r4, r4, #31
 800274e:	4323      	orrs	r3, r4
 8002750:	0030      	movs	r0, r6
 8002752:	0019      	movs	r1, r3
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	380b      	subs	r0, #11
 8002758:	4085      	lsls	r5, r0
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	032d      	lsls	r5, r5, #12
 800275e:	2600      	movs	r6, #0
 8002760:	0b2d      	lsrs	r5, r5, #12
 8002762:	0d53      	lsrs	r3, r2, #21
 8002764:	e7f0      	b.n	8002748 <__aeabi_i2d+0x3c>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	0000041e 	.word	0x0000041e

0800276c <__aeabi_ui2d>:
 800276c:	b510      	push	{r4, lr}
 800276e:	1e04      	subs	r4, r0, #0
 8002770:	d010      	beq.n	8002794 <__aeabi_ui2d+0x28>
 8002772:	f000 f8f1 	bl	8002958 <__clzsi2>
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <__aeabi_ui2d+0x48>)
 8002778:	1a1b      	subs	r3, r3, r0
 800277a:	280a      	cmp	r0, #10
 800277c:	dc11      	bgt.n	80027a2 <__aeabi_ui2d+0x36>
 800277e:	220b      	movs	r2, #11
 8002780:	0021      	movs	r1, r4
 8002782:	1a12      	subs	r2, r2, r0
 8002784:	40d1      	lsrs	r1, r2
 8002786:	3015      	adds	r0, #21
 8002788:	030a      	lsls	r2, r1, #12
 800278a:	055b      	lsls	r3, r3, #21
 800278c:	4084      	lsls	r4, r0
 800278e:	0b12      	lsrs	r2, r2, #12
 8002790:	0d5b      	lsrs	r3, r3, #21
 8002792:	e001      	b.n	8002798 <__aeabi_ui2d+0x2c>
 8002794:	2300      	movs	r3, #0
 8002796:	2200      	movs	r2, #0
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	4313      	orrs	r3, r2
 800279c:	0020      	movs	r0, r4
 800279e:	0019      	movs	r1, r3
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	0022      	movs	r2, r4
 80027a4:	380b      	subs	r0, #11
 80027a6:	4082      	lsls	r2, r0
 80027a8:	055b      	lsls	r3, r3, #21
 80027aa:	0312      	lsls	r2, r2, #12
 80027ac:	2400      	movs	r4, #0
 80027ae:	0b12      	lsrs	r2, r2, #12
 80027b0:	0d5b      	lsrs	r3, r3, #21
 80027b2:	e7f1      	b.n	8002798 <__aeabi_ui2d+0x2c>
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_f2d>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	0043      	lsls	r3, r0, #1
 80027bc:	0246      	lsls	r6, r0, #9
 80027be:	0fc4      	lsrs	r4, r0, #31
 80027c0:	20fe      	movs	r0, #254	; 0xfe
 80027c2:	0e1b      	lsrs	r3, r3, #24
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	0a75      	lsrs	r5, r6, #9
 80027c8:	4208      	tst	r0, r1
 80027ca:	d00c      	beq.n	80027e6 <__aeabi_f2d+0x2e>
 80027cc:	22e0      	movs	r2, #224	; 0xe0
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4694      	mov	ip, r2
 80027d2:	076d      	lsls	r5, r5, #29
 80027d4:	0b36      	lsrs	r6, r6, #12
 80027d6:	4463      	add	r3, ip
 80027d8:	051b      	lsls	r3, r3, #20
 80027da:	4333      	orrs	r3, r6
 80027dc:	07e4      	lsls	r4, r4, #31
 80027de:	4323      	orrs	r3, r4
 80027e0:	0028      	movs	r0, r5
 80027e2:	0019      	movs	r1, r3
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d114      	bne.n	8002814 <__aeabi_f2d+0x5c>
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d01b      	beq.n	8002826 <__aeabi_f2d+0x6e>
 80027ee:	0028      	movs	r0, r5
 80027f0:	f000 f8b2 	bl	8002958 <__clzsi2>
 80027f4:	280a      	cmp	r0, #10
 80027f6:	dc1c      	bgt.n	8002832 <__aeabi_f2d+0x7a>
 80027f8:	230b      	movs	r3, #11
 80027fa:	002e      	movs	r6, r5
 80027fc:	1a1b      	subs	r3, r3, r0
 80027fe:	40de      	lsrs	r6, r3
 8002800:	0003      	movs	r3, r0
 8002802:	3315      	adds	r3, #21
 8002804:	409d      	lsls	r5, r3
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <__aeabi_f2d+0x88>)
 8002808:	0336      	lsls	r6, r6, #12
 800280a:	1a12      	subs	r2, r2, r0
 800280c:	0552      	lsls	r2, r2, #21
 800280e:	0b36      	lsrs	r6, r6, #12
 8002810:	0d53      	lsrs	r3, r2, #21
 8002812:	e7e1      	b.n	80027d8 <__aeabi_f2d+0x20>
 8002814:	2d00      	cmp	r5, #0
 8002816:	d009      	beq.n	800282c <__aeabi_f2d+0x74>
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0b36      	lsrs	r6, r6, #12
 800281c:	0312      	lsls	r2, r2, #12
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <__aeabi_f2d+0x8c>)
 8002820:	076d      	lsls	r5, r5, #29
 8002822:	4316      	orrs	r6, r2
 8002824:	e7d8      	b.n	80027d8 <__aeabi_f2d+0x20>
 8002826:	2300      	movs	r3, #0
 8002828:	2600      	movs	r6, #0
 800282a:	e7d5      	b.n	80027d8 <__aeabi_f2d+0x20>
 800282c:	2600      	movs	r6, #0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <__aeabi_f2d+0x8c>)
 8002830:	e7d2      	b.n	80027d8 <__aeabi_f2d+0x20>
 8002832:	0003      	movs	r3, r0
 8002834:	3b0b      	subs	r3, #11
 8002836:	409d      	lsls	r5, r3
 8002838:	002e      	movs	r6, r5
 800283a:	2500      	movs	r5, #0
 800283c:	e7e3      	b.n	8002806 <__aeabi_f2d+0x4e>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	00000389 	.word	0x00000389
 8002844:	000007ff 	.word	0x000007ff

08002848 <__aeabi_d2f>:
 8002848:	0002      	movs	r2, r0
 800284a:	004b      	lsls	r3, r1, #1
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	0d5b      	lsrs	r3, r3, #21
 8002850:	030c      	lsls	r4, r1, #12
 8002852:	4e3d      	ldr	r6, [pc, #244]	; (8002948 <__aeabi_d2f+0x100>)
 8002854:	0a64      	lsrs	r4, r4, #9
 8002856:	0f40      	lsrs	r0, r0, #29
 8002858:	1c5f      	adds	r7, r3, #1
 800285a:	0fc9      	lsrs	r1, r1, #31
 800285c:	4304      	orrs	r4, r0
 800285e:	00d5      	lsls	r5, r2, #3
 8002860:	4237      	tst	r7, r6
 8002862:	d00a      	beq.n	800287a <__aeabi_d2f+0x32>
 8002864:	4839      	ldr	r0, [pc, #228]	; (800294c <__aeabi_d2f+0x104>)
 8002866:	181e      	adds	r6, r3, r0
 8002868:	2efe      	cmp	r6, #254	; 0xfe
 800286a:	dd16      	ble.n	800289a <__aeabi_d2f+0x52>
 800286c:	20ff      	movs	r0, #255	; 0xff
 800286e:	2400      	movs	r4, #0
 8002870:	05c0      	lsls	r0, r0, #23
 8002872:	4320      	orrs	r0, r4
 8002874:	07c9      	lsls	r1, r1, #31
 8002876:	4308      	orrs	r0, r1
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <__aeabi_d2f+0x44>
 800287e:	432c      	orrs	r4, r5
 8002880:	d026      	beq.n	80028d0 <__aeabi_d2f+0x88>
 8002882:	2205      	movs	r2, #5
 8002884:	0192      	lsls	r2, r2, #6
 8002886:	0a54      	lsrs	r4, r2, #9
 8002888:	b2d8      	uxtb	r0, r3
 800288a:	e7f1      	b.n	8002870 <__aeabi_d2f+0x28>
 800288c:	4325      	orrs	r5, r4
 800288e:	d0ed      	beq.n	800286c <__aeabi_d2f+0x24>
 8002890:	2080      	movs	r0, #128	; 0x80
 8002892:	03c0      	lsls	r0, r0, #15
 8002894:	4304      	orrs	r4, r0
 8002896:	20ff      	movs	r0, #255	; 0xff
 8002898:	e7ea      	b.n	8002870 <__aeabi_d2f+0x28>
 800289a:	2e00      	cmp	r6, #0
 800289c:	dd1b      	ble.n	80028d6 <__aeabi_d2f+0x8e>
 800289e:	0192      	lsls	r2, r2, #6
 80028a0:	1e53      	subs	r3, r2, #1
 80028a2:	419a      	sbcs	r2, r3
 80028a4:	00e4      	lsls	r4, r4, #3
 80028a6:	0f6d      	lsrs	r5, r5, #29
 80028a8:	4322      	orrs	r2, r4
 80028aa:	432a      	orrs	r2, r5
 80028ac:	0753      	lsls	r3, r2, #29
 80028ae:	d048      	beq.n	8002942 <__aeabi_d2f+0xfa>
 80028b0:	230f      	movs	r3, #15
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d000      	beq.n	80028ba <__aeabi_d2f+0x72>
 80028b8:	3204      	adds	r2, #4
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	04db      	lsls	r3, r3, #19
 80028be:	4013      	ands	r3, r2
 80028c0:	d03f      	beq.n	8002942 <__aeabi_d2f+0xfa>
 80028c2:	1c70      	adds	r0, r6, #1
 80028c4:	2efe      	cmp	r6, #254	; 0xfe
 80028c6:	d0d1      	beq.n	800286c <__aeabi_d2f+0x24>
 80028c8:	0192      	lsls	r2, r2, #6
 80028ca:	0a54      	lsrs	r4, r2, #9
 80028cc:	b2c0      	uxtb	r0, r0
 80028ce:	e7cf      	b.n	8002870 <__aeabi_d2f+0x28>
 80028d0:	2000      	movs	r0, #0
 80028d2:	2400      	movs	r4, #0
 80028d4:	e7cc      	b.n	8002870 <__aeabi_d2f+0x28>
 80028d6:	0032      	movs	r2, r6
 80028d8:	3217      	adds	r2, #23
 80028da:	db22      	blt.n	8002922 <__aeabi_d2f+0xda>
 80028dc:	2080      	movs	r0, #128	; 0x80
 80028de:	0400      	lsls	r0, r0, #16
 80028e0:	4320      	orrs	r0, r4
 80028e2:	241e      	movs	r4, #30
 80028e4:	1ba4      	subs	r4, r4, r6
 80028e6:	2c1f      	cmp	r4, #31
 80028e8:	dd1d      	ble.n	8002926 <__aeabi_d2f+0xde>
 80028ea:	2202      	movs	r2, #2
 80028ec:	4252      	negs	r2, r2
 80028ee:	1b96      	subs	r6, r2, r6
 80028f0:	0002      	movs	r2, r0
 80028f2:	40f2      	lsrs	r2, r6
 80028f4:	0016      	movs	r6, r2
 80028f6:	2c20      	cmp	r4, #32
 80028f8:	d004      	beq.n	8002904 <__aeabi_d2f+0xbc>
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <__aeabi_d2f+0x108>)
 80028fc:	4694      	mov	ip, r2
 80028fe:	4463      	add	r3, ip
 8002900:	4098      	lsls	r0, r3
 8002902:	4305      	orrs	r5, r0
 8002904:	002a      	movs	r2, r5
 8002906:	1e53      	subs	r3, r2, #1
 8002908:	419a      	sbcs	r2, r3
 800290a:	4332      	orrs	r2, r6
 800290c:	2600      	movs	r6, #0
 800290e:	0753      	lsls	r3, r2, #29
 8002910:	d1ce      	bne.n	80028b0 <__aeabi_d2f+0x68>
 8002912:	2480      	movs	r4, #128	; 0x80
 8002914:	0013      	movs	r3, r2
 8002916:	04e4      	lsls	r4, r4, #19
 8002918:	2001      	movs	r0, #1
 800291a:	4023      	ands	r3, r4
 800291c:	4222      	tst	r2, r4
 800291e:	d1d3      	bne.n	80028c8 <__aeabi_d2f+0x80>
 8002920:	e7b0      	b.n	8002884 <__aeabi_d2f+0x3c>
 8002922:	2300      	movs	r3, #0
 8002924:	e7ad      	b.n	8002882 <__aeabi_d2f+0x3a>
 8002926:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <__aeabi_d2f+0x10c>)
 8002928:	4694      	mov	ip, r2
 800292a:	002a      	movs	r2, r5
 800292c:	40e2      	lsrs	r2, r4
 800292e:	0014      	movs	r4, r2
 8002930:	002a      	movs	r2, r5
 8002932:	4463      	add	r3, ip
 8002934:	409a      	lsls	r2, r3
 8002936:	4098      	lsls	r0, r3
 8002938:	1e55      	subs	r5, r2, #1
 800293a:	41aa      	sbcs	r2, r5
 800293c:	4302      	orrs	r2, r0
 800293e:	4322      	orrs	r2, r4
 8002940:	e7e4      	b.n	800290c <__aeabi_d2f+0xc4>
 8002942:	0033      	movs	r3, r6
 8002944:	e79e      	b.n	8002884 <__aeabi_d2f+0x3c>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	000007fe 	.word	0x000007fe
 800294c:	fffffc80 	.word	0xfffffc80
 8002950:	fffffca2 	.word	0xfffffca2
 8002954:	fffffc82 	.word	0xfffffc82

08002958 <__clzsi2>:
 8002958:	211c      	movs	r1, #28
 800295a:	2301      	movs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	4298      	cmp	r0, r3
 8002960:	d301      	bcc.n	8002966 <__clzsi2+0xe>
 8002962:	0c00      	lsrs	r0, r0, #16
 8002964:	3910      	subs	r1, #16
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	4298      	cmp	r0, r3
 800296a:	d301      	bcc.n	8002970 <__clzsi2+0x18>
 800296c:	0a00      	lsrs	r0, r0, #8
 800296e:	3908      	subs	r1, #8
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	4298      	cmp	r0, r3
 8002974:	d301      	bcc.n	800297a <__clzsi2+0x22>
 8002976:	0900      	lsrs	r0, r0, #4
 8002978:	3904      	subs	r1, #4
 800297a:	a202      	add	r2, pc, #8	; (adr r2, 8002984 <__clzsi2+0x2c>)
 800297c:	5c10      	ldrb	r0, [r2, r0]
 800297e:	1840      	adds	r0, r0, r1
 8002980:	4770      	bx	lr
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	02020304 	.word	0x02020304
 8002988:	01010101 	.word	0x01010101
	...

08002994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002998:	f001 fcf0 	bl	800437c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800299c:	f000 f876 	bl	8002a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a0:	f000 fbd2 	bl	8003148 <MX_GPIO_Init>
  MX_DMA_Init();
 80029a4:	f000 fbb2 	bl	800310c <MX_DMA_Init>
  MX_ADC_Init();
 80029a8:	f000 fa50 	bl	8002e4c <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 80029ac:	f001 fbda 	bl	8004164 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 80029b0:	4929      	ldr	r1, [pc, #164]	; (8002a58 <main+0xc4>)
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <main+0xc8>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	0018      	movs	r0, r3
 80029b8:	f004 ff00 	bl	80077bc <HAL_UART_Receive_IT>

  MX_TIM1_Init();
 80029bc:	f001 f80a 	bl	80039d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029c0:	f001 f90e 	bl	8003be0 <MX_TIM3_Init>
  MX_TIM6_Init();
 80029c4:	f001 f962 	bl	8003c8c <MX_TIM6_Init>
  MX_TIM14_Init();
 80029c8:	f001 f982 	bl	8003cd0 <MX_TIM14_Init>
  MX_TIM15_Init();
 80029cc:	f001 f9cc 	bl	8003d68 <MX_TIM15_Init>
  MX_TIM16_Init();
 80029d0:	f001 fa22 	bl	8003e18 <MX_TIM16_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <main+0xcc>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f003 fbae 	bl	8006138 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <main+0xd0>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f003 fbaa 	bl	8006138 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80029e4:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <main+0xd4>)
 80029e6:	0018      	movs	r0, r3
 80029e8:	f003 fba6 	bl	8006138 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <main+0xd8>)
 80029ee:	0018      	movs	r0, r3
 80029f0:	f003 fba2 	bl	8006138 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <main+0xdc>)
 80029f6:	0018      	movs	r0, r3
 80029f8:	f003 fb9e 	bl	8006138 <HAL_TIM_Base_Start_IT>

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 80029fc:	491d      	ldr	r1, [pc, #116]	; (8002a74 <main+0xe0>)
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <main+0xe4>)
 8002a00:	220a      	movs	r2, #10
 8002a02:	0018      	movs	r0, r3
 8002a04:	f001 fe5e 	bl	80046c4 <HAL_ADC_Start_DMA>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <main+0x7c>
	{
		Error_Handler(); //This function also enable the interruption
 8002a0c:	f000 f8b4 	bl	8002b78 <Error_Handler>
	}

  /* USER CODE BEGIN 2 */
	HX711_Calibration(&weight_par);
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <main+0xe8>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 fe48 	bl	80036a8 <HX711_Calibration>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(weight_par.calibration_flag)
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <main+0xe8>)
 8002a1a:	7b1b      	ldrb	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <main+0xaa>
		  printf("0x31 %.02f g\r\n", (float)weight_par.gram );
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <main+0xe8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe f893 	bl	8000b50 <__aeabi_i2f>
 8002a2a:	1c03      	adds	r3, r0, #0
 8002a2c:	1c18      	adds	r0, r3, #0
 8002a2e:	f7ff fec3 	bl	80027b8 <__aeabi_f2d>
 8002a32:	0002      	movs	r2, r0
 8002a34:	000b      	movs	r3, r1
 8002a36:	4912      	ldr	r1, [pc, #72]	; (8002a80 <main+0xec>)
 8002a38:	0008      	movs	r0, r1
 8002a3a:	f006 fec7 	bl	80097cc <iprintf>

	  printf("time laps: %d \r\n", adc_val.commutation_delay);
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <main+0xf0>)
 8002a40:	8b1b      	ldrh	r3, [r3, #24]
 8002a42:	001a      	movs	r2, r3
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <main+0xf4>)
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f006 febf 	bl	80097cc <iprintf>
	  delay_ms(100);
 8002a4e:	2064      	movs	r0, #100	; 0x64
 8002a50:	f001 fb70 	bl	8004134 <delay_ms>
	  if(weight_par.calibration_flag)
 8002a54:	e7e0      	b.n	8002a18 <main+0x84>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	2000058f 	.word	0x2000058f
 8002a5c:	20000594 	.word	0x20000594
 8002a60:	20000328 	.word	0x20000328
 8002a64:	20000370 	.word	0x20000370
 8002a68:	200003b8 	.word	0x200003b8
 8002a6c:	20000400 	.word	0x20000400
 8002a70:	20000448 	.word	0x20000448
 8002a74:	20000220 	.word	0x20000220
 8002a78:	20000248 	.word	0x20000248
 8002a7c:	20000234 	.word	0x20000234
 8002a80:	0800d668 	.word	0x0800d668
 8002a84:	20000000 	.word	0x20000000
 8002a88:	0800d678 	.word	0x0800d678

08002a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b095      	sub	sp, #84	; 0x54
 8002a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a92:	2420      	movs	r4, #32
 8002a94:	193b      	adds	r3, r7, r4
 8002a96:	0018      	movs	r0, r3
 8002a98:	2330      	movs	r3, #48	; 0x30
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f006 f816 	bl	8008ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	001a      	movs	r2, r3
 8002aac:	2100      	movs	r1, #0
 8002aae:	f006 f80e 	bl	8008ace <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab2:	003b      	movs	r3, r7
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	001a      	movs	r2, r3
 8002aba:	2100      	movs	r1, #0
 8002abc:	f006 f807 	bl	8008ace <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ac0:	0021      	movs	r1, r4
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	2201      	movs	r2, #1
 8002acc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	22a0      	movs	r2, #160	; 0xa0
 8002ae4:	0392      	lsls	r2, r2, #14
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2200      	movs	r2, #0
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	0018      	movs	r0, r3
 8002af2:	f002 fd3b 	bl	800556c <HAL_RCC_OscConfig>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002afa:	f000 f83d 	bl	8002b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002afe:	2110      	movs	r1, #16
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2207      	movs	r2, #7
 8002b04:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2202      	movs	r2, #2
 8002b0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f003 f83f 	bl	8005ba0 <HAL_RCC_ClockConfig>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b26:	f000 f827 	bl	8002b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b36:	003b      	movs	r3, r7
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f003 f975 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	1e03      	subs	r3, r0, #0
 8002b40:	d001      	beq.n	8002b46 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002b42:	f000 f819 	bl	8002b78 <Error_Handler>
  }
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b015      	add	sp, #84	; 0x54
 8002b4c:	bd90      	pop	{r4, r7, pc}
	...

08002b50 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <__io_putchar+0x20>)
 8002b5a:	1d39      	adds	r1, r7, #4
 8002b5c:	4805      	ldr	r0, [pc, #20]	; (8002b74 <__io_putchar+0x24>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f004 fd8c 	bl	800767c <HAL_UART_Transmit>
    return ch;
 8002b64:	687b      	ldr	r3, [r7, #4]
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	0000ffff 	.word	0x0000ffff
 8002b74:	20000594 	.word	0x20000594

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
	...

08002b84 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d11e      	bne.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
//		TIMERTESTER
		if(weight_par.calibration_flag)
 8002b94:	4b69      	ldr	r3, [pc, #420]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002b96:	7b1b      	ldrb	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d100      	bne.n	8002b9e <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002b9c:	e0c7      	b.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
		{
			FORCESAPTIME;
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	831a      	strh	r2, [r3, #24]
 8002ba4:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
 8002bac:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f003 fa58 	bl	8006064 <HAL_TIM_Base_Start>
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fd4a 	bl	8003650 <Get_weight>
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f003 fa94 	bl	80060ec <HAL_TIM_Base_Stop>
 8002bc4:	4b5f      	ldr	r3, [pc, #380]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002bce:	831a      	strh	r2, [r3, #24]
	}
	else if(htim == &htim16)//1us interval
	{

	}
}
 8002bd0:	e0ad      	b.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
	else if(htim == &htim6)
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d000      	beq.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0x58>
 8002bda:	e098      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0x18a>
		if(weight_par.calibration_flag == 1)
 8002bdc:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002bde:	7b1b      	ldrb	r3, [r3, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d000      	beq.n	8002be6 <HAL_TIM_PeriodElapsedCallback+0x62>
 8002be4:	e0a3      	b.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
			pid_pwm = Incremental_PID(&weight_par, PULL_FORCE_THR);
 8002be6:	23fa      	movs	r3, #250	; 0xfa
 8002be8:	009a      	lsls	r2, r3, #2
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fdca 	bl	8003788 <Incremental_PID>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002bfa:	701a      	strb	r2, [r3, #0]
			if(0<pid_pwm)
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d043      	beq.n	8002c8c <HAL_TIM_PeriodElapsedCallback+0x108>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002c04:	4b52      	ldr	r3, [pc, #328]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2101      	movs	r1, #1
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f002 fc6b 	bl	80054e6 <HAL_GPIO_WritePin>
				AHBL_ON;
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c12:	2100      	movs	r1, #0
 8002c14:	0018      	movs	r0, r3
 8002c16:	f003 fc6b 	bl	80064f0 <HAL_TIM_PWM_Stop>
 8002c1a:	4b4e      	ldr	r3, [pc, #312]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c1c:	2104      	movs	r1, #4
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f003 fc66 	bl	80064f0 <HAL_TIM_PWM_Stop>
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c26:	2108      	movs	r1, #8
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f003 fc61 	bl	80064f0 <HAL_TIM_PWM_Stop>
 8002c2e:	23e0      	movs	r3, #224	; 0xe0
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	4849      	ldr	r0, [pc, #292]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	0019      	movs	r1, r3
 8002c38:	f002 fc55 	bl	80054e6 <HAL_GPIO_WritePin>
 8002c3c:	4b45      	ldr	r3, [pc, #276]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c3e:	2100      	movs	r1, #0
 8002c40:	0018      	movs	r0, r3
 8002c42:	f003 fba3 	bl	800638c <HAL_TIM_PWM_Start>
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	01db      	lsls	r3, r3, #7
 8002c4a:	4843      	ldr	r0, [pc, #268]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	0019      	movs	r1, r3
 8002c50:	f002 fc49 	bl	80054e6 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 1;
 8002c54:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	735a      	strb	r2, [r3, #13]
				dc_pwm = dc_pwm>=pid_pwm? dc_pwm:dc_pwm+5;
 8002c5a:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d204      	bcs.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0xec>
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	3305      	adds	r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e001      	b.n	8002c74 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c76:	7013      	strb	r3, [r2, #0]
				if(dc_pwm>10)
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0a      	cmp	r3, #10
 8002c7e:	d919      	bls.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x130>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002c80:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
 8002c8a:	e013      	b.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x130>
				dc_pwm = dc_pwm<=pid_pwm? dc_pwm:dc_pwm-5;
 8002c8c:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d904      	bls.n	8002ca2 <HAL_TIM_PeriodElapsedCallback+0x11e>
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	3b05      	subs	r3, #5
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e001      	b.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x122>
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002ca8:	7013      	strb	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
			if(weight_par.gram<LOWER_LIMMIT)
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	23fa      	movs	r3, #250	; 0xfa
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	da36      	bge.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f002 fc0d 	bl	80054e6 <HAL_GPIO_WritePin>
				CLOSE_PWM;
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002cce:	2100      	movs	r1, #0
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f003 fc0d 	bl	80064f0 <HAL_TIM_PWM_Stop>
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	01db      	lsls	r3, r3, #7
 8002cda:	481f      	ldr	r0, [pc, #124]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	0019      	movs	r1, r3
 8002ce0:	f002 fc01 	bl	80054e6 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 0;
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	735a      	strb	r2, [r3, #13]
				dc_pwm = dc_pwm<=10? 0:dc_pwm-5;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b0a      	cmp	r3, #10
 8002cf0:	d904      	bls.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x178>
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3b05      	subs	r3, #5
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	e000      	b.n	8002cfe <HAL_TIM_PeriodElapsedCallback+0x17a>
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002d00:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d0c:	e00f      	b.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
	else if(htim == &htim14)//10ms enter for E-wagon protection counting
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10b      	bne.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002d18:	8b5a      	ldrh	r2, [r3, #26]
 8002d1a:	23fa      	movs	r3, #250	; 0xfa
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d905      	bls.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
			adc_val.commutation_timeout = 0;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	831a      	strh	r2, [r3, #24]
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	20000328 	.word	0x20000328
 8002d3c:	20000234 	.word	0x20000234
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000448 	.word	0x20000448
 8002d48:	20000370 	.word	0x20000370
 8002d4c:	20000244 	.word	0x20000244
 8002d50:	48000800 	.word	0x48000800
 8002d54:	200002e0 	.word	0x200002e0
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	20000245 	.word	0x20000245
 8002d60:	200003b8 	.word	0x200003b8

08002d64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_UART_RxCpltCallback+0xb8>)
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d14e      	bne.n	8002e12 <HAL_UART_RxCpltCallback+0xae>
	{
		extern uint8_t cnt;
		cnt=cnt==255?1:cnt+1;
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2bff      	cmp	r3, #255	; 0xff
 8002d7a:	d004      	beq.n	8002d86 <HAL_UART_RxCpltCallback+0x22>
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	e000      	b.n	8002d88 <HAL_UART_RxCpltCallback+0x24>
 8002d86:	2201      	movs	r2, #1
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002d8a:	701a      	strb	r2, [r3, #0]
		rxbuf[cnt] = rxdata;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	001a      	movs	r2, r3
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_UART_RxCpltCallback+0xc0>)
 8002d94:	7819      	ldrb	r1, [r3, #0]
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_UART_RxCpltCallback+0xc4>)
 8002d98:	5499      	strb	r1, [r3, r2]
		switch(rxbuf[cnt])
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	001a      	movs	r2, r3
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_UART_RxCpltCallback+0xc4>)
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	2b34      	cmp	r3, #52	; 0x34
 8002da6:	dc09      	bgt.n	8002dbc <HAL_UART_RxCpltCallback+0x58>
 8002da8:	2b2b      	cmp	r3, #43	; 0x2b
 8002daa:	db25      	blt.n	8002df8 <HAL_UART_RxCpltCallback+0x94>
 8002dac:	3b2b      	subs	r3, #43	; 0x2b
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d822      	bhi.n	8002df8 <HAL_UART_RxCpltCallback+0x94>
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_UART_RxCpltCallback+0xc8>)
 8002db6:	18d3      	adds	r3, r2, r3
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	469f      	mov	pc, r3
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d012      	beq.n	8002de6 <HAL_UART_RxCpltCallback+0x82>
		case '4':
		{
			TIM14->ARR--;
		}
		default:
			break;
 8002dc0:	e01a      	b.n	8002df8 <HAL_UART_RxCpltCallback+0x94>
			HAL_TIM_Base_Stop_IT(&htim6);
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_UART_RxCpltCallback+0xcc>)
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f003 fa03 	bl	80061d0 <HAL_TIM_Base_Stop_IT>
			break;
 8002dca:	e016      	b.n	8002dfa <HAL_UART_RxCpltCallback+0x96>
			HAL_TIM_Base_Start_IT(&htim6);
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_UART_RxCpltCallback+0xcc>)
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f003 f9b2 	bl	8006138 <HAL_TIM_Base_Start_IT>
			break;
 8002dd4:	e011      	b.n	8002dfa <HAL_UART_RxCpltCallback+0x96>
			BT_PWM_handle(TURE);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f001 fa5a 	bl	8004290 <BT_PWM_handle>
			break;
 8002ddc:	e00d      	b.n	8002dfa <HAL_UART_RxCpltCallback+0x96>
			BT_PWM_handle(FALSE);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f001 fa56 	bl	8004290 <BT_PWM_handle>
			break;
 8002de4:	e009      	b.n	8002dfa <HAL_UART_RxCpltCallback+0x96>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_UART_RxCpltCallback+0xd0>)
 8002de8:	0018      	movs	r0, r3
 8002dea:	f003 f9f1 	bl	80061d0 <HAL_TIM_Base_Stop_IT>
			break;
 8002dee:	e004      	b.n	8002dfa <HAL_UART_RxCpltCallback+0x96>
			TIM14->ARR--;
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_UART_RxCpltCallback+0xd4>)
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	3a01      	subs	r2, #1
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002df8:	46c0      	nop			; (mov r8, r8)
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8002dfa:	490a      	ldr	r1, [pc, #40]	; (8002e24 <HAL_UART_RxCpltCallback+0xc0>)
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_UART_RxCpltCallback+0xb8>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	0018      	movs	r0, r3
 8002e02:	f004 fcdb 	bl	80077bc <HAL_UART_Receive_IT>
		cnt++;
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_UART_RxCpltCallback+0xbc>)
 8002e10:	701a      	strb	r2, [r3, #0]
	}
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b002      	add	sp, #8
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000594 	.word	0x20000594
 8002e20:	20000590 	.word	0x20000590
 8002e24:	2000058f 	.word	0x2000058f
 8002e28:	20000490 	.word	0x20000490
 8002e2c:	0800d79c 	.word	0x0800d79c
 8002e30:	20000370 	.word	0x20000370
 8002e34:	200002e0 	.word	0x200002e0
 8002e38:	40002000 	.word	0x40002000

08002e3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{													  // The ADC sample time is for all channel, the DMA
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
//	My_ADC_getvalue(adc_buf, &adc_val);
//	BLDC_Phase_switching(&adc_val);
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	0018      	movs	r0, r3
 8002e56:	230c      	movs	r3, #12
 8002e58:	001a      	movs	r2, r3
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	f005 fe37 	bl	8008ace <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e60:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <MX_ADC_Init+0x19c>)
 8002e64:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e6c:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e80:	2208      	movs	r2, #8
 8002e82:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e8a:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e90:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e96:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002e9e:	2240      	movs	r2, #64	; 0x40
 8002ea0:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002ea2:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	00d2      	lsls	r2, r2, #3
 8002ea8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002eac:	2224      	movs	r2, #36	; 0x24
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002eb8:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f001 fac2 	bl	8004444 <HAL_ADC_Init>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002ec4:	f7ff fe58 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	0152      	lsls	r2, r2, #5
 8002ed4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2206      	movs	r2, #6
 8002eda:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002edc:	1d3a      	adds	r2, r7, #4
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002ee0:	0011      	movs	r1, r2
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f001 fc80 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002ee8:	1e03      	subs	r3, r0, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002eec:	f7ff fe44 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ef6:	1d3a      	adds	r2, r7, #4
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002efa:	0011      	movs	r1, r2
 8002efc:	0018      	movs	r0, r3
 8002efe:	f001 fc73 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002f06:	f7ff fe37 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002f14:	0011      	movs	r1, r2
 8002f16:	0018      	movs	r0, r3
 8002f18:	f001 fc66 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002f20:	f7ff fe2a 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	2203      	movs	r2, #3
 8002f28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f2a:	1d3a      	adds	r2, r7, #4
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002f2e:	0011      	movs	r1, r2
 8002f30:	0018      	movs	r0, r3
 8002f32:	f001 fc59 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f36:	1e03      	subs	r3, r0, #0
 8002f38:	d001      	beq.n	8002f3e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8002f3a:	f7ff fe1d 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	2204      	movs	r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f44:	1d3a      	adds	r2, r7, #4
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002f48:	0011      	movs	r1, r2
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f001 fc4c 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002f54:	f7ff fe10 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f5e:	1d3a      	adds	r2, r7, #4
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 fc3f 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8002f6e:	f7ff fe03 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2206      	movs	r2, #6
 8002f76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f78:	1d3a      	adds	r2, r7, #4
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f001 fc32 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8002f88:	f7ff fdf6 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2207      	movs	r2, #7
 8002f90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f92:	1d3a      	adds	r2, r7, #4
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002f96:	0011      	movs	r1, r2
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 fc25 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8002fa2:	f7ff fde9 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2208      	movs	r2, #8
 8002faa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002fac:	1d3a      	adds	r2, r7, #4
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002fb0:	0011      	movs	r1, r2
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f001 fc18 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8002fbc:	f7ff fddc 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	2211      	movs	r2, #17
 8002fc4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002fc6:	1d3a      	adds	r2, r7, #4
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_ADC_Init+0x198>)
 8002fca:	0011      	movs	r1, r2
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f001 fc0b 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d001      	beq.n	8002fda <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8002fd6:	f7ff fdcf 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	20000248 	.word	0x20000248
 8002fe8:	40012400 	.word	0x40012400

08002fec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b08b      	sub	sp, #44	; 0x2c
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	2414      	movs	r4, #20
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2314      	movs	r3, #20
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f005 fd65 	bl	8008ace <memset>
  if(adcHandle->Instance==ADC1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3b      	ldr	r2, [pc, #236]	; (80030f8 <HAL_ADC_MspInit+0x10c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d170      	bne.n	80030f0 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_ADC_MspInit+0x110>)
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_ADC_MspInit+0x110>)
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	0089      	lsls	r1, r1, #2
 8003018:	430a      	orrs	r2, r1
 800301a:	619a      	str	r2, [r3, #24]
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_ADC_MspInit+0x110>)
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_ADC_MspInit+0x110>)
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	4b33      	ldr	r3, [pc, #204]	; (80030fc <HAL_ADC_MspInit+0x110>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0289      	lsls	r1, r1, #10
 8003034:	430a      	orrs	r2, r1
 8003036:	615a      	str	r2, [r3, #20]
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <HAL_ADC_MspInit+0x110>)
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_ADC_MspInit+0x110>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_ADC_MspInit+0x110>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	02c9      	lsls	r1, r1, #11
 8003050:	430a      	orrs	r2, r1
 8003052:	615a      	str	r2, [r3, #20]
 8003054:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_ADC_MspInit+0x110>)
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	02db      	lsls	r3, r3, #11
 800305c:	4013      	ands	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003062:	193b      	adds	r3, r7, r4
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003068:	193b      	adds	r3, r7, r4
 800306a:	2203      	movs	r2, #3
 800306c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	193b      	adds	r3, r7, r4
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	193a      	adds	r2, r7, r4
 8003076:	2390      	movs	r3, #144	; 0x90
 8003078:	05db      	lsls	r3, r3, #23
 800307a:	0011      	movs	r1, r2
 800307c:	0018      	movs	r0, r3
 800307e:	f002 f8a5 	bl	80051cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003082:	193b      	adds	r3, r7, r4
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2203      	movs	r2, #3
 800308c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	193b      	adds	r3, r7, r4
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	193b      	adds	r3, r7, r4
 8003096:	4a1a      	ldr	r2, [pc, #104]	; (8003100 <HAL_ADC_MspInit+0x114>)
 8003098:	0019      	movs	r1, r3
 800309a:	0010      	movs	r0, r2
 800309c:	f002 f896 	bl	80051cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030a2:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_ADC_MspInit+0x11c>)
 80030a4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	00d2      	lsls	r2, r2, #3
 80030c6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030ca:	2220      	movs	r2, #32
 80030cc:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f001 fe62 	bl	8004da0 <HAL_DMA_Init>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80030e0:	f7ff fd4a 	bl	8002b78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_ADC_MspInit+0x118>)
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b00b      	add	sp, #44	; 0x2c
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	40012400 	.word	0x40012400
 80030fc:	40021000 	.word	0x40021000
 8003100:	48000400 	.word	0x48000400
 8003104:	20000288 	.word	0x20000288
 8003108:	40020008 	.word	0x40020008

0800310c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <MX_DMA_Init+0x38>)
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <MX_DMA_Init+0x38>)
 8003118:	2101      	movs	r1, #1
 800311a:	430a      	orrs	r2, r1
 800311c:	615a      	str	r2, [r3, #20]
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <MX_DMA_Init+0x38>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2201      	movs	r2, #1
 8003124:	4013      	ands	r3, r2
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2009      	movs	r0, #9
 8003130:	f001 fe04 	bl	8004d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003134:	2009      	movs	r0, #9
 8003136:	f001 fe16 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	40021000 	.word	0x40021000

08003148 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	2414      	movs	r4, #20
 8003150:	193b      	adds	r3, r7, r4
 8003152:	0018      	movs	r0, r3
 8003154:	2314      	movs	r3, #20
 8003156:	001a      	movs	r2, r3
 8003158:	2100      	movs	r1, #0
 800315a:	f005 fcb8 	bl	8008ace <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	4bb9      	ldr	r3, [pc, #740]	; (8003444 <MX_GPIO_Init+0x2fc>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	4bb8      	ldr	r3, [pc, #736]	; (8003444 <MX_GPIO_Init+0x2fc>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	0309      	lsls	r1, r1, #12
 8003168:	430a      	orrs	r2, r1
 800316a:	615a      	str	r2, [r3, #20]
 800316c:	4bb5      	ldr	r3, [pc, #724]	; (8003444 <MX_GPIO_Init+0x2fc>)
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	031b      	lsls	r3, r3, #12
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800317a:	4bb2      	ldr	r3, [pc, #712]	; (8003444 <MX_GPIO_Init+0x2fc>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	4bb1      	ldr	r3, [pc, #708]	; (8003444 <MX_GPIO_Init+0x2fc>)
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	03c9      	lsls	r1, r1, #15
 8003184:	430a      	orrs	r2, r1
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	4bae      	ldr	r3, [pc, #696]	; (8003444 <MX_GPIO_Init+0x2fc>)
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	03db      	lsls	r3, r3, #15
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	4bab      	ldr	r3, [pc, #684]	; (8003444 <MX_GPIO_Init+0x2fc>)
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	4baa      	ldr	r3, [pc, #680]	; (8003444 <MX_GPIO_Init+0x2fc>)
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	0289      	lsls	r1, r1, #10
 80031a0:	430a      	orrs	r2, r1
 80031a2:	615a      	str	r2, [r3, #20]
 80031a4:	4ba7      	ldr	r3, [pc, #668]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	029b      	lsls	r3, r3, #10
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4ba4      	ldr	r3, [pc, #656]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	4ba3      	ldr	r3, [pc, #652]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	02c9      	lsls	r1, r1, #11
 80031bc:	430a      	orrs	r2, r1
 80031be:	615a      	str	r2, [r3, #20]
 80031c0:	4ba0      	ldr	r3, [pc, #640]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	02db      	lsls	r3, r3, #11
 80031c8:	4013      	ands	r3, r2
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ce:	4b9d      	ldr	r3, [pc, #628]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	4b9c      	ldr	r3, [pc, #624]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	0349      	lsls	r1, r1, #13
 80031d8:	430a      	orrs	r2, r1
 80031da:	615a      	str	r2, [r3, #20]
 80031dc:	4b99      	ldr	r3, [pc, #612]	; (8003444 <MX_GPIO_Init+0x2fc>)
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	035b      	lsls	r3, r3, #13
 80031e4:	4013      	ands	r3, r2
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTWakeUp_GPIO_Port, BTWakeUp_Pin, GPIO_PIN_SET);
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	4896      	ldr	r0, [pc, #600]	; (8003448 <MX_GPIO_Init+0x300>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	0019      	movs	r1, r3
 80031f4:	f002 f977 	bl	80054e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 80031f8:	4994      	ldr	r1, [pc, #592]	; (800344c <MX_GPIO_Init+0x304>)
 80031fa:	4b93      	ldr	r3, [pc, #588]	; (8003448 <MX_GPIO_Init+0x300>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	0018      	movs	r0, r3
 8003200:	f002 f971 	bl	80054e6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8003204:	4b92      	ldr	r3, [pc, #584]	; (8003450 <MX_GPIO_Init+0x308>)
 8003206:	2200      	movs	r2, #0
 8003208:	2110      	movs	r1, #16
 800320a:	0018      	movs	r0, r3
 800320c:	f002 f96b 	bl	80054e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8003210:	4990      	ldr	r1, [pc, #576]	; (8003454 <MX_GPIO_Init+0x30c>)
 8003212:	4b91      	ldr	r3, [pc, #580]	; (8003458 <MX_GPIO_Init+0x310>)
 8003214:	2200      	movs	r2, #0
 8003216:	0018      	movs	r0, r3
 8003218:	f002 f965 	bl	80054e6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	0219      	lsls	r1, r3, #8
 8003220:	2390      	movs	r3, #144	; 0x90
 8003222:	05db      	lsls	r3, r3, #23
 8003224:	2200      	movs	r2, #0
 8003226:	0018      	movs	r0, r3
 8003228:	f002 f95d 	bl	80054e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800322c:	193b      	adds	r3, r7, r4
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	01d2      	lsls	r2, r2, #7
 8003232:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	193b      	adds	r3, r7, r4
 8003242:	4a81      	ldr	r2, [pc, #516]	; (8003448 <MX_GPIO_Init+0x300>)
 8003244:	0019      	movs	r1, r3
 8003246:	0010      	movs	r0, r2
 8003248:	f001 ffc0 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTWakeUp_Pin;
 800324c:	0021      	movs	r1, r4
 800324e:	187b      	adds	r3, r7, r1
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	0212      	lsls	r2, r2, #8
 8003254:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003256:	000c      	movs	r4, r1
 8003258:	193b      	adds	r3, r7, r4
 800325a:	2201      	movs	r2, #1
 800325c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800325e:	193b      	adds	r3, r7, r4
 8003260:	2201      	movs	r2, #1
 8003262:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003264:	193b      	adds	r3, r7, r4
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BTWakeUp_GPIO_Port, &GPIO_InitStruct);
 800326a:	193b      	adds	r3, r7, r4
 800326c:	4a76      	ldr	r2, [pc, #472]	; (8003448 <MX_GPIO_Init+0x300>)
 800326e:	0019      	movs	r1, r3
 8003270:	0010      	movs	r0, r2
 8003272:	f001 ffab 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8003276:	193b      	adds	r3, r7, r4
 8003278:	2243      	movs	r2, #67	; 0x43
 800327a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327c:	193b      	adds	r3, r7, r4
 800327e:	2203      	movs	r2, #3
 8003280:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	193b      	adds	r3, r7, r4
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003288:	193b      	adds	r3, r7, r4
 800328a:	4a71      	ldr	r2, [pc, #452]	; (8003450 <MX_GPIO_Init+0x308>)
 800328c:	0019      	movs	r1, r3
 800328e:	0010      	movs	r0, r2
 8003290:	f001 ff9c 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003294:	193b      	adds	r3, r7, r4
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329a:	193b      	adds	r3, r7, r4
 800329c:	2201      	movs	r2, #1
 800329e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	2202      	movs	r2, #2
 80032a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	4a66      	ldr	r2, [pc, #408]	; (8003448 <MX_GPIO_Init+0x300>)
 80032b0:	0019      	movs	r1, r3
 80032b2:	0010      	movs	r0, r2
 80032b4:	f001 ff8a 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	220e      	movs	r2, #14
 80032bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	2203      	movs	r2, #3
 80032c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	4a5e      	ldr	r2, [pc, #376]	; (8003448 <MX_GPIO_Init+0x300>)
 80032ce:	0019      	movs	r1, r3
 80032d0:	0010      	movs	r0, r2
 80032d2:	f001 ff7b 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	2210      	movs	r2, #16
 80032da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	2201      	movs	r2, #1
 80032e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	4a57      	ldr	r2, [pc, #348]	; (8003450 <MX_GPIO_Init+0x308>)
 80032f2:	0019      	movs	r1, r3
 80032f4:	0010      	movs	r0, r2
 80032f6:	f001 ff69 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2220      	movs	r2, #32
 80032fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003300:	193b      	adds	r3, r7, r4
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	193b      	adds	r3, r7, r4
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800330c:	193b      	adds	r3, r7, r4
 800330e:	4a50      	ldr	r2, [pc, #320]	; (8003450 <MX_GPIO_Init+0x308>)
 8003310:	0019      	movs	r1, r3
 8003312:	0010      	movs	r0, r2
 8003314:	f001 ff5a 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003318:	0021      	movs	r1, r4
 800331a:	187b      	adds	r3, r7, r1
 800331c:	22e1      	movs	r2, #225	; 0xe1
 800331e:	0152      	lsls	r2, r2, #5
 8003320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	000c      	movs	r4, r1
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2201      	movs	r2, #1
 8003328:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	193b      	adds	r3, r7, r4
 8003338:	4a43      	ldr	r2, [pc, #268]	; (8003448 <MX_GPIO_Init+0x300>)
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f001 ff45 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8003342:	193b      	adds	r3, r7, r4
 8003344:	4a43      	ldr	r2, [pc, #268]	; (8003454 <MX_GPIO_Init+0x30c>)
 8003346:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2201      	movs	r2, #1
 800334c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	193b      	adds	r3, r7, r4
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	193b      	adds	r3, r7, r4
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	193b      	adds	r3, r7, r4
 800335c:	4a3e      	ldr	r2, [pc, #248]	; (8003458 <MX_GPIO_Init+0x310>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f001 ff33 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	22c0      	movs	r2, #192	; 0xc0
 800336a:	0152      	lsls	r2, r2, #5
 800336c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336e:	193b      	adds	r3, r7, r4
 8003370:	2203      	movs	r2, #3
 8003372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	193b      	adds	r3, r7, r4
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	193a      	adds	r2, r7, r4
 800337c:	2390      	movs	r3, #144	; 0x90
 800337e:	05db      	lsls	r3, r3, #23
 8003380:	0011      	movs	r1, r2
 8003382:	0018      	movs	r0, r3
 8003384:	f001 ff22 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003388:	0021      	movs	r1, r4
 800338a:	187b      	adds	r3, r7, r1
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003390:	187b      	adds	r3, r7, r1
 8003392:	2288      	movs	r2, #136	; 0x88
 8003394:	0352      	lsls	r2, r2, #13
 8003396:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800339e:	000c      	movs	r4, r1
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <MX_GPIO_Init+0x308>)
 80033a4:	0019      	movs	r1, r3
 80033a6:	0010      	movs	r0, r2
 80033a8:	f001 ff10 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033ac:	0021      	movs	r1, r4
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	0212      	lsls	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b6:	000c      	movs	r4, r1
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	2201      	movs	r2, #1
 80033bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	193a      	adds	r2, r7, r4
 80033cc:	2390      	movs	r3, #144	; 0x90
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f001 fefa 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033d8:	0021      	movs	r1, r4
 80033da:	187b      	adds	r3, r7, r1
 80033dc:	2204      	movs	r2, #4
 80033de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	2288      	movs	r2, #136	; 0x88
 80033e4:	0352      	lsls	r2, r2, #13
 80033e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ee:	000c      	movs	r4, r1
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <MX_GPIO_Init+0x314>)
 80033f4:	0019      	movs	r1, r3
 80033f6:	0010      	movs	r0, r2
 80033f8:	f001 fee8 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033fc:	0021      	movs	r1, r4
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	22c0      	movs	r2, #192	; 0xc0
 8003402:	0092      	lsls	r2, r2, #2
 8003404:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2212      	movs	r2, #18
 800340a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	187b      	adds	r3, r7, r1
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003412:	187b      	adds	r3, r7, r1
 8003414:	2203      	movs	r2, #3
 8003416:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003418:	187b      	adds	r3, r7, r1
 800341a:	2201      	movs	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	187b      	adds	r3, r7, r1
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <MX_GPIO_Init+0x310>)
 8003422:	0019      	movs	r1, r3
 8003424:	0010      	movs	r0, r2
 8003426:	f001 fed1 	bl	80051cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2007      	movs	r0, #7
 8003430:	f001 fc84 	bl	8004d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003434:	2007      	movs	r0, #7
 8003436:	f001 fc96 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b00b      	add	sp, #44	; 0x2c
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40021000 	.word	0x40021000
 8003448:	48000800 	.word	0x48000800
 800344c:	00001c21 	.word	0x00001c21
 8003450:	48001400 	.word	0x48001400
 8003454:	0000fc04 	.word	0x0000fc04
 8003458:	48000400 	.word	0x48000400
 800345c:	48000c00 	.word	0x48000c00

08003460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_MspInit+0x44>)
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_MspInit+0x44>)
 800346c:	2101      	movs	r1, #1
 800346e:	430a      	orrs	r2, r1
 8003470:	619a      	str	r2, [r3, #24]
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_MspInit+0x44>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2201      	movs	r2, #1
 8003478:	4013      	ands	r3, r2
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_MspInit+0x44>)
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_MspInit+0x44>)
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	0549      	lsls	r1, r1, #21
 8003488:	430a      	orrs	r2, r1
 800348a:	61da      	str	r2, [r3, #28]
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_MspInit+0x44>)
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	055b      	lsls	r3, r3, #21
 8003494:	4013      	ands	r3, r2
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	40021000 	.word	0x40021000

080034a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034ac:	e7fe      	b.n	80034ac <NMI_Handler+0x4>

080034ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b2:	e7fe      	b.n	80034b2 <HardFault_Handler+0x4>

080034b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034cc:	f000 ff9e 	bl	800440c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80034da:	2080      	movs	r0, #128	; 0x80
 80034dc:	f002 f820 	bl	8005520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <DMA1_Channel1_IRQHandler+0x14>)
 80034ee:	0018      	movs	r0, r3
 80034f0:	f001 fd81 	bl	8004ff6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	20000288 	.word	0x20000288

08003500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <TIM3_IRQHandler+0x14>)
 8003506:	0018      	movs	r0, r3
 8003508:	f003 f86e 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	20000328 	.word	0x20000328

08003518 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <TIM6_IRQHandler+0x14>)
 800351e:	0018      	movs	r0, r3
 8003520:	f003 f862 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000370 	.word	0x20000370

08003530 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <TIM14_IRQHandler+0x14>)
 8003536:	0018      	movs	r0, r3
 8003538:	f003 f856 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	200003b8 	.word	0x200003b8

08003548 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <TIM15_IRQHandler+0x14>)
 800354e:	0018      	movs	r0, r3
 8003550:	f003 f84a 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000400 	.word	0x20000400

08003560 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <TIM16_IRQHandler+0x14>)
 8003566:	0018      	movs	r0, r3
 8003568:	f003 f83e 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000448 	.word	0x20000448

08003578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <USART1_IRQHandler+0x14>)
 800357e:	0018      	movs	r0, r3
 8003580:	f004 f974 	bl	800786c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	20000594 	.word	0x20000594

08003590 <Get_24bit_Weight>:
 *      Author: kzhou
 */
#include "sw_spi.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	0002      	movs	r2, r0
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	701a      	strb	r2, [r3, #0]
	unsigned int weight=0;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
	SW_SPI_PWR_ON; //Pull down clk
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <Get_24bit_Weight+0xb8>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	2110      	movs	r1, #16
 80035a6:	0018      	movs	r0, r3
 80035a8:	f001 ff9d 	bl	80054e6 <HAL_GPIO_WritePin>

	while(SW_SPI_DAT_RDY)
 80035ac:	e003      	b.n	80035b6 <Get_24bit_Weight+0x26>
	{
//		SW_SPI_CLK_H;
//		SW_SPI_CLK_L;
		printf("Un-ready\r\n");
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <Get_24bit_Weight+0xbc>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f006 f997 	bl	80098e4 <puts>
	while(SW_SPI_DAT_RDY)
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <Get_24bit_Weight+0xb8>)
 80035b8:	2120      	movs	r1, #32
 80035ba:	0018      	movs	r0, r3
 80035bc:	f001 ff76 	bl	80054ac <HAL_GPIO_ReadPin>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d1f4      	bne.n	80035ae <Get_24bit_Weight+0x1e>
	}

	for(char i = 24; i!=0; i--)
 80035c4:	230b      	movs	r3, #11
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2218      	movs	r2, #24
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e021      	b.n	8003612 <Get_24bit_Weight+0x82>
	{
		SW_SPI_CLK_H;
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <Get_24bit_Weight+0xb8>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	2110      	movs	r1, #16
 80035d4:	0018      	movs	r0, r3
 80035d6:	f001 ff86 	bl	80054e6 <HAL_GPIO_WritePin>
		weight = weight<<1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
		SW_SPI_CLK_L;
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <Get_24bit_Weight+0xb8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	2110      	movs	r1, #16
 80035e6:	0018      	movs	r0, r3
 80035e8:	f001 ff7d 	bl	80054e6 <HAL_GPIO_WritePin>
		if(SW_SPI_DAT_RDY)
 80035ec:	4b16      	ldr	r3, [pc, #88]	; (8003648 <Get_24bit_Weight+0xb8>)
 80035ee:	2120      	movs	r1, #32
 80035f0:	0018      	movs	r0, r3
 80035f2:	f001 ff5b 	bl	80054ac <HAL_GPIO_ReadPin>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d002      	beq.n	8003600 <Get_24bit_Weight+0x70>
		{
		 weight+=1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
		}
		delay_us(1);
 8003600:	2001      	movs	r0, #1
 8003602:	f000 fd69 	bl	80040d8 <delay_us>
	for(char i = 24; i!=0; i--)
 8003606:	210b      	movs	r1, #11
 8003608:	187b      	adds	r3, r7, r1
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	187b      	adds	r3, r7, r1
 800360e:	3a01      	subs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	230b      	movs	r3, #11
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1d8      	bne.n	80035ce <Get_24bit_Weight+0x3e>
	}
	SW_SPI_CLK_H;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <Get_24bit_Weight+0xb8>)
 800361e:	2201      	movs	r2, #1
 8003620:	2110      	movs	r1, #16
 8003622:	0018      	movs	r0, r3
 8003624:	f001 ff5f 	bl	80054e6 <HAL_GPIO_WritePin>
	weight = weight^0x800000;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	0412      	lsls	r2, r2, #16
 800362e:	4053      	eors	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
	SW_SPI_CLK_L;
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <Get_24bit_Weight+0xb8>)
 8003634:	2200      	movs	r2, #0
 8003636:	2110      	movs	r1, #16
 8003638:	0018      	movs	r0, r3
 800363a:	f001 ff54 	bl	80054e6 <HAL_GPIO_WritePin>

	//Preserved for channel selection

	return weight;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b004      	add	sp, #16
 8003646:	bd80      	pop	{r7, pc}
 8003648:	48001400 	.word	0x48001400
 800364c:	0800d68c 	.word	0x0800d68c

08003650 <Get_weight>:

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	weight_par->gross_weight = Get_24bit_Weight(CHA_128);
 8003658:	2019      	movs	r0, #25
 800365a:	f7ff ff99 	bl	8003590 <Get_24bit_Weight>
 800365e:	0003      	movs	r3, r0
 8003660:	001a      	movs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	605a      	str	r2, [r3, #4]
	if(weight_par->calibration_flag)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7b1b      	ldrb	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <Get_weight+0x4e>
	{
		if(weight_par->gross_weight - weight_par->calibrated_value>0)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	dd0d      	ble.n	8003698 <Get_weight+0x48>
			weight_par->gram = (weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2137      	movs	r1, #55	; 0x37
 8003688:	0018      	movs	r0, r3
 800368a:	f7fc fde3 	bl	8000254 <__divsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	001a      	movs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
		else
			weight_par->gram = 0;

		//Kalman  filter
	}
}
 8003696:	e002      	b.n	800369e <Get_weight+0x4e>
			weight_par->gram = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HX711_Calibration>:

void HX711_Calibration(HX711_Structure* weight_par)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	  /*******Get gross weight**************/
	  SW_SPI_PWR_OFF;
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HX711_Calibration+0xcc>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	2110      	movs	r1, #16
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 ff15 	bl	80054e6 <HAL_GPIO_WritePin>
	  delay_us(200);
 80036bc:	20c8      	movs	r0, #200	; 0xc8
 80036be:	f000 fd0b 	bl	80040d8 <delay_us>
	  SW_SPI_PWR_ON;
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HX711_Calibration+0xcc>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	2110      	movs	r1, #16
 80036c8:	0018      	movs	r0, r3
 80036ca:	f001 ff0c 	bl	80054e6 <HAL_GPIO_WritePin>
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 80036ce:	2019      	movs	r0, #25
 80036d0:	f7ff ff5e 	bl	8003590 <Get_24bit_Weight>
 80036d4:	0003      	movs	r3, r0
 80036d6:	001a      	movs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
	  delay_us(2000);
 80036dc:	23fa      	movs	r3, #250	; 0xfa
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 fcf9 	bl	80040d8 <delay_us>
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 80036e6:	2019      	movs	r0, #25
 80036e8:	f7ff ff52 	bl	8003590 <Get_24bit_Weight>
 80036ec:	0003      	movs	r3, r0
 80036ee:	001a      	movs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]

	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 80036f4:	e025      	b.n	8003742 <HX711_Calibration+0x9a>
	  {
		  printf("Sensor initial error, re-calibrating\r\n");
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HX711_Calibration+0xd0>)
 80036f8:	0018      	movs	r0, r3
 80036fa:	f006 f8f3 	bl	80098e4 <puts>
		  SW_SPI_PWR_OFF;
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HX711_Calibration+0xcc>)
 8003700:	2201      	movs	r2, #1
 8003702:	2110      	movs	r1, #16
 8003704:	0018      	movs	r0, r3
 8003706:	f001 feee 	bl	80054e6 <HAL_GPIO_WritePin>
		  delay_us(200);
 800370a:	20c8      	movs	r0, #200	; 0xc8
 800370c:	f000 fce4 	bl	80040d8 <delay_us>
		  SW_SPI_PWR_ON;
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HX711_Calibration+0xcc>)
 8003712:	2200      	movs	r2, #0
 8003714:	2110      	movs	r1, #16
 8003716:	0018      	movs	r0, r3
 8003718:	f001 fee5 	bl	80054e6 <HAL_GPIO_WritePin>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 800371c:	2019      	movs	r0, #25
 800371e:	f7ff ff37 	bl	8003590 <Get_24bit_Weight>
 8003722:	0003      	movs	r3, r0
 8003724:	001a      	movs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
		  delay_us(2000);
 800372a:	23fa      	movs	r3, #250	; 0xfa
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	0018      	movs	r0, r3
 8003730:	f000 fcd2 	bl	80040d8 <delay_us>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003734:	2019      	movs	r0, #25
 8003736:	f7ff ff2b 	bl	8003590 <Get_24bit_Weight>
 800373a:	0003      	movs	r3, r0
 800373c:	001a      	movs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]
	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a0d      	ldr	r2, [pc, #52]	; (800377c <HX711_Calibration+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	ddd4      	ble.n	80036f6 <HX711_Calibration+0x4e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <HX711_Calibration+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	dccf      	bgt.n	80036f6 <HX711_Calibration+0x4e>
	  }
	  printf("calibration ok weight:%d\r\n", weight_par->calibrated_value);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HX711_Calibration+0xdc>)
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f006 f834 	bl	80097cc <iprintf>
	  weight_par->calibration_flag = 1; //Calibration done
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	731a      	strb	r2, [r3, #12]

}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	48001400 	.word	0x48001400
 8003778:	0800d698 	.word	0x0800d698
 800377c:	007a11ff 	.word	0x007a11ff
 8003780:	0084c060 	.word	0x0084c060
 8003784:	0800d6c0 	.word	0x0800d6c0

08003788 <Incremental_PID>:
// e(k) the value difference of actual and setting e(k-1) the last time difference
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]

char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	000a      	movs	r2, r1
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	801a      	strh	r2, [r3, #0]
	static float Kp = 0.05, Ki = 0.1, Kd = 0.5;
	static int  sum_integral=0, Bias=0, Last_bias=0, Last1_bias = 0;
	static int PWM;
	Bias = weight_par->gram> LOWER_LIMMIT/*&& weight_par->gram< TOP_LIMIT*/? weight_par->gram - pull_force_thr : 0;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	23fa      	movs	r3, #250	; 0xfa
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	429a      	cmp	r2, r3
 80037a0:	dd05      	ble.n	80037ae <Incremental_PID+0x26>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	e000      	b.n	80037b0 <Incremental_PID+0x28>
 80037ae:	2200      	movs	r2, #0
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <Incremental_PID+0xb0>)
 80037b2:	601a      	str	r2, [r3, #0]
	//sum_integral +=Bias*Ki;
	PWM += Kp*(Bias-Last_bias)/*+Ki*Bias + Kd*(Bias-2*Last_bias+Last2_bias)*/;
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <Incremental_PID+0xb4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fd f9c9 	bl	8000b50 <__aeabi_i2f>
 80037be:	1c04      	adds	r4, r0, #0
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <Incremental_PID+0xb0>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <Incremental_PID+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7fd f9c0 	bl	8000b50 <__aeabi_i2f>
 80037d0:	1c02      	adds	r2, r0, #0
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <Incremental_PID+0xbc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1c19      	adds	r1, r3, #0
 80037d8:	1c10      	adds	r0, r2, #0
 80037da:	f7fd f873 	bl	80008c4 <__aeabi_fmul>
 80037de:	1c03      	adds	r3, r0, #0
 80037e0:	1c19      	adds	r1, r3, #0
 80037e2:	1c20      	adds	r0, r4, #0
 80037e4:	f7fc fed0 	bl	8000588 <__aeabi_fadd>
 80037e8:	1c03      	adds	r3, r0, #0
 80037ea:	1c18      	adds	r0, r3, #0
 80037ec:	f7fd f990 	bl	8000b10 <__aeabi_f2iz>
 80037f0:	0002      	movs	r2, r0
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <Incremental_PID+0xb4>)
 80037f4:	601a      	str	r2, [r3, #0]
	if(PWM>=0)
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <Incremental_PID+0xb4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db0a      	blt.n	8003814 <Incremental_PID+0x8c>
	{
		PWM = PWM>=90? 100:PWM;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <Incremental_PID+0xb4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b59      	cmp	r3, #89	; 0x59
 8003804:	dc02      	bgt.n	800380c <Incremental_PID+0x84>
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <Incremental_PID+0xb4>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	e000      	b.n	800380e <Incremental_PID+0x86>
 800380c:	2264      	movs	r2, #100	; 0x64
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <Incremental_PID+0xb4>)
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e002      	b.n	800381a <Incremental_PID+0x92>
	}
	else
	{
		PWM = 0;
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <Incremental_PID+0xb4>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
	}
	Last1_bias = Last_bias;
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <Incremental_PID+0xb8>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <Incremental_PID+0xc0>)
 8003820:	601a      	str	r2, [r3, #0]
	Last_bias = Bias;
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <Incremental_PID+0xb0>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <Incremental_PID+0xb8>)
 8003828:	601a      	str	r2, [r3, #0]
	return PWM;
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <Incremental_PID+0xb4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b003      	add	sp, #12
 8003836:	bd90      	pop	{r4, r7, pc}
 8003838:	200002cc 	.word	0x200002cc
 800383c:	200002d0 	.word	0x200002d0
 8003840:	200002d4 	.word	0x200002d4
 8003844:	20000020 	.word	0x20000020
 8003848:	200002d8 	.word	0x200002d8

0800384c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  return 1;
 8003850:	2301      	movs	r3, #1
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_kill>:

int _kill(int pid, int sig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003862:	f005 f901 	bl	8008a68 <__errno>
 8003866:	0003      	movs	r3, r0
 8003868:	2216      	movs	r2, #22
 800386a:	601a      	str	r2, [r3, #0]
  return -1;
 800386c:	2301      	movs	r3, #1
 800386e:	425b      	negs	r3, r3
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <_exit>:

void _exit (int status)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003880:	2301      	movs	r3, #1
 8003882:	425a      	negs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff ffe5 	bl	8003858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800388e:	e7fe      	b.n	800388e <_exit+0x16>

08003890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e00a      	b.n	80038b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038a2:	e000      	b.n	80038a6 <_read+0x16>
 80038a4:	bf00      	nop
 80038a6:	0001      	movs	r1, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	b2ca      	uxtb	r2, r1
 80038b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	dbf0      	blt.n	80038a2 <_read+0x12>
  }

  return len;
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b006      	add	sp, #24
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e009      	b.n	80038f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff f933 	bl	8002b50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dbf1      	blt.n	80038dc <_write+0x12>
  }
  return len;
 80038f8:	687b      	ldr	r3, [r7, #4]
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b006      	add	sp, #24
 8003900:	bd80      	pop	{r7, pc}

08003902 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800390a:	2301      	movs	r3, #1
 800390c:	425b      	negs	r3, r3
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}

08003916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	0192      	lsls	r2, r2, #6
 8003926:	605a      	str	r2, [r3, #4]
  return 0;
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}

08003932 <_isatty>:

int _isatty(int file)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800393a:	2301      	movs	r3, #1
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f005 f86c 	bl	8008a68 <__errno>
 8003990:	0003      	movs	r3, r0
 8003992:	220c      	movs	r2, #12
 8003994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003996:	2301      	movs	r3, #1
 8003998:	425b      	negs	r3, r3
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	18d2      	adds	r2, r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <_sbrk+0x64>)
 80039ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b006      	add	sp, #24
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20002000 	.word	0x20002000
 80039bc:	00000400 	.word	0x00000400
 80039c0:	200002dc 	.word	0x200002dc
 80039c4:	20000638 	.word	0x20000638

080039c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09a      	sub	sp, #104	; 0x68
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039da:	2358      	movs	r3, #88	; 0x58
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	0018      	movs	r0, r3
 80039e0:	2310      	movs	r3, #16
 80039e2:	001a      	movs	r2, r3
 80039e4:	2100      	movs	r1, #0
 80039e6:	f005 f872 	bl	8008ace <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80039ea:	2344      	movs	r3, #68	; 0x44
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	0018      	movs	r0, r3
 80039f0:	2314      	movs	r3, #20
 80039f2:	001a      	movs	r2, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	f005 f86a 	bl	8008ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fa:	233c      	movs	r3, #60	; 0x3c
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	0018      	movs	r0, r3
 8003a00:	2308      	movs	r3, #8
 8003a02:	001a      	movs	r2, r3
 8003a04:	2100      	movs	r1, #0
 8003a06:	f005 f862 	bl	8008ace <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	0018      	movs	r0, r3
 8003a10:	231c      	movs	r3, #28
 8003a12:	001a      	movs	r2, r3
 8003a14:	2100      	movs	r1, #0
 8003a16:	f005 f85a 	bl	8008ace <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a1a:	003b      	movs	r3, r7
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	2320      	movs	r3, #32
 8003a20:	001a      	movs	r2, r3
 8003a22:	2100      	movs	r1, #0
 8003a24:	f005 f853 	bl	8008ace <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a28:	4b6b      	ldr	r3, [pc, #428]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a2a:	4a6c      	ldr	r2, [pc, #432]	; (8003bdc <MX_TIM1_Init+0x208>)
 8003a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a30:	2217      	movs	r2, #23
 8003a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003a3a:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a3c:	2263      	movs	r2, #99	; 0x63
 8003a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a40:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a46:	4b64      	ldr	r3, [pc, #400]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a4c:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a52:	4b61      	ldr	r3, [pc, #388]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a54:	0018      	movs	r0, r3
 8003a56:	f002 fab5 	bl	8005fc4 <HAL_TIM_Base_Init>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8003a5e:	f7ff f88b 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a62:	2158      	movs	r1, #88	; 0x58
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	0152      	lsls	r2, r2, #5
 8003a6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a6c:	187a      	adds	r2, r7, r1
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f002 ffec 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003a7c:	f7ff f87c 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a80:	4b55      	ldr	r3, [pc, #340]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f002 fc2a 	bl	80062dc <HAL_TIM_PWM_Init>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003a8c:	f7ff f874 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003a90:	4b51      	ldr	r3, [pc, #324]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003a92:	0018      	movs	r0, r3
 8003a94:	f002 fbca 	bl	800622c <HAL_TIM_OC_Init>
 8003a98:	1e03      	subs	r3, r0, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003a9c:	f7ff f86c 	bl	8002b78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003aa0:	2144      	movs	r1, #68	; 0x44
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003aae:	187a      	adds	r2, r7, r1
 8003ab0:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003ab2:	0011      	movs	r1, r2
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f003 f89f 	bl	8006bf8 <HAL_TIM_SlaveConfigSynchro>
 8003aba:	1e03      	subs	r3, r0, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003abe:	f7ff f85b 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003ac2:	213c      	movs	r1, #60	; 0x3c
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2270      	movs	r2, #112	; 0x70
 8003ac8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2200      	movs	r2, #0
 8003ace:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ad0:	187a      	adds	r2, r7, r1
 8003ad2:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003ad4:	0011      	movs	r1, r2
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f003 fcb6 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003ae0:	f7ff f84a 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2260      	movs	r2, #96	; 0x60
 8003aea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2232      	movs	r2, #50	; 0x32
 8003af0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2200      	movs	r2, #0
 8003b02:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2200      	movs	r2, #0
 8003b08:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b10:	1879      	adds	r1, r7, r1
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	0018      	movs	r0, r3
 8003b18:	f002 fed4 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003b20:	f7ff f82a 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b24:	2320      	movs	r3, #32
 8003b26:	18f9      	adds	r1, r7, r3
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f002 fec9 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8003b36:	f7ff f81f 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	18f9      	adds	r1, r7, r3
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003b40:	2208      	movs	r2, #8
 8003b42:	0018      	movs	r0, r3
 8003b44:	f002 febe 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8003b4c:	f7ff f814 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003b50:	2120      	movs	r1, #32
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2230      	movs	r2, #48	; 0x30
 8003b56:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b58:	1879      	adds	r1, r7, r1
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003b5c:	220c      	movs	r2, #12
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 fe58 	bl	8006814 <HAL_TIM_OC_ConfigChannel>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8003b68:	f7ff f806 	bl	8002b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b6c:	003b      	movs	r3, r7
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b72:	003b      	movs	r3, r7
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b78:	003b      	movs	r3, r7
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b7e:	003b      	movs	r3, r7
 8003b80:	2200      	movs	r2, #0
 8003b82:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b84:	003b      	movs	r3, r7
 8003b86:	2200      	movs	r2, #0
 8003b88:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b8a:	003b      	movs	r3, r7
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	0192      	lsls	r2, r2, #6
 8003b90:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b92:	003b      	movs	r3, r7
 8003b94:	2200      	movs	r2, #0
 8003b96:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b98:	003a      	movs	r2, r7
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f003 fcaa 	bl	80074f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8003ba8:	f7fe ffe6 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 8003bac:	003b      	movs	r3, r7
 8003bae:	22f4      	movs	r2, #244	; 0xf4
 8003bb0:	32ff      	adds	r2, #255	; 0xff
 8003bb2:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bb4:	003a      	movs	r2, r7
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003bb8:	0011      	movs	r1, r2
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f003 fc9c 	bl	80074f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bc0:	1e03      	subs	r3, r0, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM1_Init+0x1f4>
  {
    Error_Handler();
 8003bc4:	f7fe ffd8 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <MX_TIM1_Init+0x204>)
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fa44 	bl	8004058 <HAL_TIM_MspPostInit>

}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b01a      	add	sp, #104	; 0x68
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200002e0 	.word	0x200002e0
 8003bdc:	40012c00 	.word	0x40012c00

08003be0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003be6:	2308      	movs	r3, #8
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	0018      	movs	r0, r3
 8003bec:	2310      	movs	r3, #16
 8003bee:	001a      	movs	r2, r3
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	f004 ff6c 	bl	8008ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf6:	003b      	movs	r3, r7
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f004 ff65 	bl	8008ace <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <MX_TIM3_Init+0xa4>)
 8003c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <MX_TIM3_Init+0xa8>)
 8003c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c18:	2213      	movs	r2, #19
 8003c1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f002 f9ca 	bl	8005fc4 <HAL_TIM_Base_Init>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d001      	beq.n	8003c38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003c34:	f7fe ffa0 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c38:	2108      	movs	r1, #8
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	0152      	lsls	r2, r2, #5
 8003c40:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c42:	187a      	adds	r2, r7, r1
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c46:	0011      	movs	r1, r2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f002 ff01 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 8003c4e:	1e03      	subs	r3, r0, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003c52:	f7fe ff91 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c56:	003b      	movs	r3, r7
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5c:	003b      	movs	r3, r7
 8003c5e:	2200      	movs	r2, #0
 8003c60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c62:	003a      	movs	r2, r7
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <MX_TIM3_Init+0xa0>)
 8003c66:	0011      	movs	r1, r2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f003 fbed 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003c72:	f7fe ff81 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b006      	add	sp, #24
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	20000328 	.word	0x20000328
 8003c84:	40000400 	.word	0x40000400
 8003c88:	0000bb7f 	.word	0x0000bb7f

08003c8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <MX_TIM6_Init+0x38>)
 8003c92:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <MX_TIM6_Init+0x3c>)
 8003c94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <MX_TIM6_Init+0x38>)
 8003c98:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <MX_TIM6_Init+0x40>)
 8003c9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <MX_TIM6_Init+0x38>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <MX_TIM6_Init+0x38>)
 8003ca4:	2263      	movs	r2, #99	; 0x63
 8003ca6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <MX_TIM6_Init+0x38>)
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <MX_TIM6_Init+0x38>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f002 f987 	bl	8005fc4 <HAL_TIM_Base_Init>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8003cba:	f7fe ff5d 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000370 	.word	0x20000370
 8003cc8:	40001000 	.word	0x40001000
 8003ccc:	0000bb7f 	.word	0x0000bb7f

08003cd0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	0018      	movs	r0, r3
 8003cda:	231c      	movs	r3, #28
 8003cdc:	001a      	movs	r2, r3
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f004 fef5 	bl	8008ace <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <MX_TIM14_Init+0x90>)
 8003ce8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <MX_TIM14_Init+0x94>)
 8003cee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003cf8:	2263      	movs	r2, #99	; 0x63
 8003cfa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f002 f95a 	bl	8005fc4 <HAL_TIM_Base_Init>
 8003d10:	1e03      	subs	r3, r0, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003d14:	f7fe ff30 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f002 fa86 	bl	800622c <HAL_TIM_OC_Init>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d001      	beq.n	8003d28 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003d24:	f7fe ff28 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	2200      	movs	r2, #0
 8003d32:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d40:	1d39      	adds	r1, r7, #4
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <MX_TIM14_Init+0x8c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	0018      	movs	r0, r3
 8003d48:	f002 fd64 	bl	8006814 <HAL_TIM_OC_ConfigChannel>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003d50:	f7fe ff12 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b008      	add	sp, #32
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	200003b8 	.word	0x200003b8
 8003d60:	40002000 	.word	0x40002000
 8003d64:	000012bf 	.word	0x000012bf

08003d68 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d6e:	2308      	movs	r3, #8
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	0018      	movs	r0, r3
 8003d74:	2310      	movs	r3, #16
 8003d76:	001a      	movs	r2, r3
 8003d78:	2100      	movs	r1, #0
 8003d7a:	f004 fea8 	bl	8008ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d7e:	003b      	movs	r3, r7
 8003d80:	0018      	movs	r0, r3
 8003d82:	2308      	movs	r3, #8
 8003d84:	001a      	movs	r2, r3
 8003d86:	2100      	movs	r1, #0
 8003d88:	f004 fea1 	bl	8008ace <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003d8e:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <MX_TIM15_Init+0xa8>)
 8003d90:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003d94:	222f      	movs	r2, #47	; 0x2f
 8003d96:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535-1;
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <MX_TIM15_Init+0xac>)
 8003da2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003db8:	0018      	movs	r0, r3
 8003dba:	f002 f903 	bl	8005fc4 <HAL_TIM_Base_Init>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8003dc2:	f7fe fed9 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	0152      	lsls	r2, r2, #5
 8003dce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003dd0:	187a      	adds	r2, r7, r1
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f002 fe3a 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003de0:	f7fe feca 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de4:	003b      	movs	r3, r7
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dea:	003b      	movs	r3, r7
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003df0:	003a      	movs	r2, r7
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <MX_TIM15_Init+0xa4>)
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f003 fb26 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003e00:	f7fe feba 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000400 	.word	0x20000400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	0000fffe 	.word	0x0000fffe

08003e18 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <MX_TIM16_Init+0x48>)
 8003e20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e24:	222f      	movs	r2, #47	; 0x2f
 8003e26:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <MX_TIM16_Init+0x4c>)
 8003e32:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <MX_TIM16_Init+0x44>)
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f002 f8bb 	bl	8005fc4 <HAL_TIM_Base_Init>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8003e52:	f7fe fe91 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000448 	.word	0x20000448
 8003e60:	40014400 	.word	0x40014400
 8003e64:	0000fffe 	.word	0x0000fffe

08003e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b08f      	sub	sp, #60	; 0x3c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	2324      	movs	r3, #36	; 0x24
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	0018      	movs	r0, r3
 8003e76:	2314      	movs	r3, #20
 8003e78:	001a      	movs	r2, r3
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f004 fe27 	bl	8008ace <memset>
  if(tim_baseHandle->Instance==TIM1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6c      	ldr	r2, [pc, #432]	; (8004038 <HAL_TIM_Base_MspInit+0x1d0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e8a:	4b6c      	ldr	r3, [pc, #432]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	4b6b      	ldr	r3, [pc, #428]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	0109      	lsls	r1, r1, #4
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]
 8003e98:	4b68      	ldr	r3, [pc, #416]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003ea6:	e0c3      	b.n	8004030 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM3)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a64      	ldr	r2, [pc, #400]	; (8004040 <HAL_TIM_Base_MspInit+0x1d8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d151      	bne.n	8003f56 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eb2:	4b62      	ldr	r3, [pc, #392]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	4b61      	ldr	r3, [pc, #388]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003eb8:	2102      	movs	r1, #2
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	61da      	str	r2, [r3, #28]
 8003ebe:	4b5f      	ldr	r3, [pc, #380]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eca:	4b5c      	ldr	r3, [pc, #368]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b5b      	ldr	r3, [pc, #364]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	0309      	lsls	r1, r1, #12
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]
 8003ed8:	4b58      	ldr	r3, [pc, #352]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	031b      	lsls	r3, r3, #12
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003ee6:	2124      	movs	r1, #36	; 0x24
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	22b0      	movs	r2, #176	; 0xb0
 8003eec:	0092      	lsls	r2, r2, #2
 8003eee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	000c      	movs	r4, r1
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f04:	193b      	adds	r3, r7, r4
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	4a4d      	ldr	r2, [pc, #308]	; (8004044 <HAL_TIM_Base_MspInit+0x1dc>)
 8003f0e:	0019      	movs	r1, r3
 8003f10:	0010      	movs	r0, r2
 8003f12:	f001 f95b 	bl	80051cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f16:	0021      	movs	r1, r4
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	0052      	lsls	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	2202      	movs	r2, #2
 8003f24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	2201      	movs	r2, #1
 8003f36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	4a42      	ldr	r2, [pc, #264]	; (8004044 <HAL_TIM_Base_MspInit+0x1dc>)
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	0010      	movs	r0, r2
 8003f40:	f001 f944 	bl	80051cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	2102      	movs	r1, #2
 8003f48:	2010      	movs	r0, #16
 8003f4a:	f000 fef7 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f4e:	2010      	movs	r0, #16
 8003f50:	f000 ff09 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8003f54:	e06c      	b.n	8004030 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM6)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3b      	ldr	r2, [pc, #236]	; (8004048 <HAL_TIM_Base_MspInit+0x1e0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d114      	bne.n	8003f8a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	4b35      	ldr	r3, [pc, #212]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003f66:	2110      	movs	r1, #16
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	61da      	str	r2, [r3, #28]
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2210      	movs	r2, #16
 8003f72:	4013      	ands	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	2011      	movs	r0, #17
 8003f7e:	f000 fedd 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003f82:	2011      	movs	r0, #17
 8003f84:	f000 feef 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8003f88:	e052      	b.n	8004030 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM14)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2f      	ldr	r2, [pc, #188]	; (800404c <HAL_TIM_Base_MspInit+0x1e4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d116      	bne.n	8003fc2 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f94:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	0049      	lsls	r1, r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4013      	ands	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2013      	movs	r0, #19
 8003fb6:	f000 fec1 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003fba:	2013      	movs	r0, #19
 8003fbc:	f000 fed3 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8003fc0:	e036      	b.n	8004030 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM15)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_TIM_Base_MspInit+0x1e8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d116      	bne.n	8003ffa <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	0249      	lsls	r1, r1, #9
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	619a      	str	r2, [r3, #24]
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	025b      	lsls	r3, r3, #9
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2100      	movs	r1, #0
 8003fec:	2014      	movs	r0, #20
 8003fee:	f000 fea5 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003ff2:	2014      	movs	r0, #20
 8003ff4:	f000 feb7 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8003ff8:	e01a      	b.n	8004030 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM16)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <HAL_TIM_Base_MspInit+0x1ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d115      	bne.n	8004030 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	0289      	lsls	r1, r1, #10
 800400e:	430a      	orrs	r2, r1
 8004010:	619a      	str	r2, [r3, #24]
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_TIM_Base_MspInit+0x1d4>)
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	4013      	ands	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	2015      	movs	r0, #21
 8004026:	f000 fe89 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800402a:	2015      	movs	r0, #21
 800402c:	f000 fe9b 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b00f      	add	sp, #60	; 0x3c
 8004036:	bd90      	pop	{r4, r7, pc}
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40000400 	.word	0x40000400
 8004044:	48000800 	.word	0x48000800
 8004048:	40001000 	.word	0x40001000
 800404c:	40002000 	.word	0x40002000
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400

08004058 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	240c      	movs	r4, #12
 8004062:	193b      	adds	r3, r7, r4
 8004064:	0018      	movs	r0, r3
 8004066:	2314      	movs	r3, #20
 8004068:	001a      	movs	r2, r3
 800406a:	2100      	movs	r1, #0
 800406c:	f004 fd2f 	bl	8008ace <memset>
  if(timHandle->Instance==TIM1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_TIM_MspPostInit+0x78>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d125      	bne.n	80040c6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407a:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_TIM_MspPostInit+0x7c>)
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_TIM_MspPostInit+0x7c>)
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0289      	lsls	r1, r1, #10
 8004084:	430a      	orrs	r2, r1
 8004086:	615a      	str	r2, [r3, #20]
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_TIM_MspPostInit+0x7c>)
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	029b      	lsls	r3, r3, #10
 8004090:	4013      	ands	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004096:	193b      	adds	r3, r7, r4
 8004098:	22e0      	movs	r2, #224	; 0xe0
 800409a:	00d2      	lsls	r2, r2, #3
 800409c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	0021      	movs	r1, r4
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2202      	movs	r2, #2
 80040a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	2202      	movs	r2, #2
 80040b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b8:	187a      	adds	r2, r7, r1
 80040ba:	2390      	movs	r3, #144	; 0x90
 80040bc:	05db      	lsls	r3, r3, #23
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f001 f883 	bl	80051cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b009      	add	sp, #36	; 0x24
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40021000 	.word	0x40021000

080040d8 <delay_us>:

/* USER CODE BEGIN 1 */


void delay_us(uint16_t us)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	0002      	movs	r2, r0
 80040e0:	1dbb      	adds	r3, r7, #6
 80040e2:	801a      	strh	r2, [r3, #0]
	us = 0xffff - us-10;
 80040e4:	1dbb      	adds	r3, r7, #6
 80040e6:	1dba      	adds	r2, r7, #6
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	210b      	movs	r1, #11
 80040ec:	4249      	negs	r1, r1
 80040ee:	1a8a      	subs	r2, r1, r2
 80040f0:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, us);//the auto reload is set to 65535
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <delay_us+0x54>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1dba      	adds	r2, r7, #6
 80040f8:	8812      	ldrh	r2, [r2, #0]
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim15);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <delay_us+0x54>)
 80040fe:	0018      	movs	r0, r3
 8004100:	f001 ffb0 	bl	8006064 <HAL_TIM_Base_Start>
	while(us<0xffff-10)
 8004104:	e004      	b.n	8004110 <delay_us+0x38>
	{
		us = __HAL_TIM_GET_COUNTER(&htim15);
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <delay_us+0x54>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410c:	1dbb      	adds	r3, r7, #6
 800410e:	801a      	strh	r2, [r3, #0]
	while(us<0xffff-10)
 8004110:	1dbb      	adds	r3, r7, #6
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	4a06      	ldr	r2, [pc, #24]	; (8004130 <delay_us+0x58>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d9f5      	bls.n	8004106 <delay_us+0x2e>
	}
	HAL_TIM_Base_Stop(&htim15);
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <delay_us+0x54>)
 800411c:	0018      	movs	r0, r3
 800411e:	f001 ffe5 	bl	80060ec <HAL_TIM_Base_Stop>
}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000400 	.word	0x20000400
 8004130:	0000fff4 	.word	0x0000fff4

08004134 <delay_ms>:

void delay_ms(uint32_t delay)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	uint32_t tick_start;
	tick_start = HAL_GetTick();
 800413c:	f000 f978 	bl	8004430 <HAL_GetTick>
 8004140:	0003      	movs	r3, r0
 8004142:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick()-tick_start)<delay)
 8004144:	e000      	b.n	8004148 <delay_ms+0x14>
		__NOP();
 8004146:	46c0      	nop			; (mov r8, r8)
	while((HAL_GetTick()-tick_start)<delay)
 8004148:	f000 f972 	bl	8004430 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d8f6      	bhi.n	8004146 <delay_ms+0x12>
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b004      	add	sp, #16
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004168:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <MX_USART1_UART_Init+0x78>)
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <MX_USART1_UART_Init+0x7c>)
 800416c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <MX_USART1_UART_Init+0x78>)
 8004170:	22e1      	movs	r2, #225	; 0xe1
 8004172:	0252      	lsls	r2, r2, #9
 8004174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <MX_USART1_UART_Init+0x78>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800417c:	4b17      	ldr	r3, [pc, #92]	; (80041dc <MX_USART1_UART_Init+0x78>)
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004182:	4b16      	ldr	r3, [pc, #88]	; (80041dc <MX_USART1_UART_Init+0x78>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <MX_USART1_UART_Init+0x78>)
 800418a:	220c      	movs	r2, #12
 800418c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <MX_USART1_UART_Init+0x78>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <MX_USART1_UART_Init+0x78>)
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <MX_USART1_UART_Init+0x78>)
 800419c:	2200      	movs	r2, #0
 800419e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <MX_USART1_UART_Init+0x78>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <MX_USART1_UART_Init+0x78>)
 80041a8:	0018      	movs	r0, r3
 80041aa:	f003 fa13 	bl	80075d4 <HAL_UART_Init>
 80041ae:	1e03      	subs	r3, r0, #0
 80041b0:	d001      	beq.n	80041b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80041b2:	f7fe fce1 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <MX_USART1_UART_Init+0x78>)
 80041b8:	2208      	movs	r2, #8
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap	= UART_ADVFEATURE_SWAP_ENABLE;
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <MX_USART1_UART_Init+0x78>)
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	0212      	lsls	r2, r2, #8
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <MX_USART1_UART_Init+0x78>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f003 fa04 	bl	80075d4 <HAL_UART_Init>
 80041cc:	1e03      	subs	r3, r0, #0
 80041ce:	d001      	beq.n	80041d4 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80041d0:	f7fe fcd2 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE END USART1_Init 2 */

}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	20000594 	.word	0x20000594
 80041e0:	40013800 	.word	0x40013800

080041e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b08b      	sub	sp, #44	; 0x2c
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	2414      	movs	r4, #20
 80041ee:	193b      	adds	r3, r7, r4
 80041f0:	0018      	movs	r0, r3
 80041f2:	2314      	movs	r3, #20
 80041f4:	001a      	movs	r2, r3
 80041f6:	2100      	movs	r1, #0
 80041f8:	f004 fc69 	bl	8008ace <memset>
  if(uartHandle->Instance==USART1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_UART_MspInit+0xa0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d139      	bne.n	800427a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_UART_MspInit+0xa4>)
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <HAL_UART_MspInit+0xa4>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	01c9      	lsls	r1, r1, #7
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_UART_MspInit+0xa4>)
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	01db      	lsls	r3, r3, #7
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_UART_MspInit+0xa4>)
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_UART_MspInit+0xa4>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	02c9      	lsls	r1, r1, #11
 800422c:	430a      	orrs	r2, r1
 800422e:	615a      	str	r2, [r3, #20]
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_UART_MspInit+0xa4>)
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	02db      	lsls	r3, r3, #11
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800423e:	0021      	movs	r1, r4
 8004240:	187b      	adds	r3, r7, r1
 8004242:	22c0      	movs	r2, #192	; 0xc0
 8004244:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	187b      	adds	r3, r7, r1
 8004248:	2202      	movs	r2, #2
 800424a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	187b      	adds	r3, r7, r1
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004252:	187b      	adds	r3, r7, r1
 8004254:	2203      	movs	r2, #3
 8004256:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004258:	187b      	adds	r3, r7, r1
 800425a:	2200      	movs	r2, #0
 800425c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425e:	187b      	adds	r3, r7, r1
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_UART_MspInit+0xa8>)
 8004262:	0019      	movs	r1, r3
 8004264:	0010      	movs	r0, r2
 8004266:	f000 ffb1 	bl	80051cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2102      	movs	r1, #2
 800426e:	201b      	movs	r0, #27
 8004270:	f000 fd64 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004274:	201b      	movs	r0, #27
 8004276:	f000 fd76 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b00b      	add	sp, #44	; 0x2c
 8004280:	bd90      	pop	{r4, r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	40013800 	.word	0x40013800
 8004288:	40021000 	.word	0x40021000
 800428c:	48000400 	.word	0x48000400

08004290 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	0002      	movs	r2, r0
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d110      	bne.n	80042c6 <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <BT_PWM_handle+0x90>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b25b      	sxtb	r3, r3
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	dc07      	bgt.n	80042be <BT_PWM_handle+0x2e>
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <BT_PWM_handle+0x90>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	b25a      	sxtb	r2, r3
 80042bc:	e000      	b.n	80042c0 <BT_PWM_handle+0x30>
 80042be:	220a      	movs	r2, #10
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <BT_PWM_handle+0x90>)
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e00f      	b.n	80042e6 <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <BT_PWM_handle+0x90>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	dd07      	ble.n	80042e0 <BT_PWM_handle+0x50>
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <BT_PWM_handle+0x90>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	b25a      	sxtb	r2, r3
 80042de:	e000      	b.n	80042e2 <BT_PWM_handle+0x52>
 80042e0:	2200      	movs	r2, #0
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <BT_PWM_handle+0x90>)
 80042e4:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <BT_PWM_handle+0x90>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	569a      	ldrsb	r2, [r3, r2]
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <BT_PWM_handle+0x94>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <BT_PWM_handle+0x90>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	569a      	ldrsb	r2, [r3, r2]
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <BT_PWM_handle+0x94>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <BT_PWM_handle+0x90>)
 8004300:	2200      	movs	r2, #0
 8004302:	569a      	ldrsb	r2, [r3, r2]
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <BT_PWM_handle+0x94>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <BT_PWM_handle+0x90>)
 800430c:	2200      	movs	r2, #0
 800430e:	569a      	ldrsb	r2, [r3, r2]
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <BT_PWM_handle+0x94>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	2000061c 	.word	0x2000061c
 8004324:	20000328 	.word	0x20000328

08004328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004328:	480d      	ldr	r0, [pc, #52]	; (8004360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800432a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800432c:	f7ff fb4c 	bl	80039c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004330:	480c      	ldr	r0, [pc, #48]	; (8004364 <LoopForever+0x6>)
  ldr r1, =_edata
 8004332:	490d      	ldr	r1, [pc, #52]	; (8004368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <LoopForever+0xe>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004338:	e002      	b.n	8004340 <LoopCopyDataInit>

0800433a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800433c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433e:	3304      	adds	r3, #4

08004340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004344:	d3f9      	bcc.n	800433a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004346:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004348:	4c0a      	ldr	r4, [pc, #40]	; (8004374 <LoopForever+0x16>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800434c:	e001      	b.n	8004352 <LoopFillZerobss>

0800434e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004350:	3204      	adds	r2, #4

08004352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004354:	d3fb      	bcc.n	800434e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004356:	f004 fb8d 	bl	8008a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800435a:	f7fe fb1b 	bl	8002994 <main>

0800435e <LoopForever>:

LoopForever:
    b LoopForever
 800435e:	e7fe      	b.n	800435e <LoopForever>
  ldr   r0, =_estack
 8004360:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004368:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800436c:	0800dcb4 	.word	0x0800dcb4
  ldr r2, =_sbss
 8004370:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004374:	20000634 	.word	0x20000634

08004378 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004378:	e7fe      	b.n	8004378 <ADC1_IRQHandler>
	...

0800437c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_Init+0x24>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_Init+0x24>)
 8004386:	2110      	movs	r1, #16
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800438c:	2003      	movs	r0, #3
 800438e:	f000 f809 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004392:	f7ff f865 	bl	8003460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40022000 	.word	0x40022000

080043a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_InitTick+0x5c>)
 80043ae:	681c      	ldr	r4, [r3, #0]
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_InitTick+0x60>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	0019      	movs	r1, r3
 80043b6:	23fa      	movs	r3, #250	; 0xfa
 80043b8:	0098      	lsls	r0, r3, #2
 80043ba:	f7fb fec1 	bl	8000140 <__udivsi3>
 80043be:	0003      	movs	r3, r0
 80043c0:	0019      	movs	r1, r3
 80043c2:	0020      	movs	r0, r4
 80043c4:	f7fb febc 	bl	8000140 <__udivsi3>
 80043c8:	0003      	movs	r3, r0
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 fcdb 	bl	8004d86 <HAL_SYSTICK_Config>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e00f      	b.n	80043f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d80b      	bhi.n	80043f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	2301      	movs	r3, #1
 80043e2:	425b      	negs	r3, r3
 80043e4:	2200      	movs	r2, #0
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 fca8 	bl	8004d3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_InitTick+0x64>)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b003      	add	sp, #12
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	20000024 	.word	0x20000024
 8004404:	2000002c 	.word	0x2000002c
 8004408:	20000028 	.word	0x20000028

0800440c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_IncTick+0x1c>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	001a      	movs	r2, r3
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_IncTick+0x20>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	18d2      	adds	r2, r2, r3
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <HAL_IncTick+0x20>)
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	2000002c 	.word	0x2000002c
 800442c:	20000620 	.word	0x20000620

08004430 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  return uwTick;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <HAL_GetTick+0x10>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000620 	.word	0x20000620

08004444 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444c:	230f      	movs	r3, #15
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e125      	b.n	80046ae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2234      	movs	r2, #52	; 0x34
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f7fe fdb6 	bl	8002fec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	2210      	movs	r2, #16
 8004486:	4013      	ands	r3, r2
 8004488:	d000      	beq.n	800448c <HAL_ADC_Init+0x48>
 800448a:	e103      	b.n	8004694 <HAL_ADC_Init+0x250>
 800448c:	230f      	movs	r3, #15
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d000      	beq.n	8004498 <HAL_ADC_Init+0x54>
 8004496:	e0fd      	b.n	8004694 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2204      	movs	r2, #4
 80044a0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80044a2:	d000      	beq.n	80044a6 <HAL_ADC_Init+0x62>
 80044a4:	e0f6      	b.n	8004694 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4a83      	ldr	r2, [pc, #524]	; (80046b8 <HAL_ADC_Init+0x274>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	2202      	movs	r2, #2
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2203      	movs	r2, #3
 80044be:	4013      	ands	r3, r2
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d112      	bne.n	80044ea <HAL_ADC_Init+0xa6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d009      	beq.n	80044e6 <HAL_ADC_Init+0xa2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	401a      	ands	r2, r3
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d101      	bne.n	80044ea <HAL_ADC_Init+0xa6>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_ADC_Init+0xa8>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2218      	movs	r2, #24
 80044f8:	4393      	bics	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	0899      	lsrs	r1, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4964      	ldr	r1, [pc, #400]	; (80046bc <HAL_ADC_Init+0x278>)
 800452a:	400a      	ands	r2, r1
 800452c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7e1b      	ldrb	r3, [r3, #24]
 8004532:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7e5b      	ldrb	r3, [r3, #25]
 8004538:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800453a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7e9b      	ldrb	r3, [r3, #26]
 8004540:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004542:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2b01      	cmp	r3, #1
 800454a:	d002      	beq.n	8004552 <HAL_ADC_Init+0x10e>
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	015b      	lsls	r3, r3, #5
 8004550:	e000      	b.n	8004554 <HAL_ADC_Init+0x110>
 8004552:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004554:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800455a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d101      	bne.n	8004568 <HAL_ADC_Init+0x124>
 8004564:	2304      	movs	r3, #4
 8004566:	e000      	b.n	800456a <HAL_ADC_Init+0x126>
 8004568:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800456a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2124      	movs	r1, #36	; 0x24
 8004570:	5c5b      	ldrb	r3, [r3, r1]
 8004572:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004574:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7edb      	ldrb	r3, [r3, #27]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d115      	bne.n	80045b0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7e9b      	ldrb	r3, [r3, #26]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	0252      	lsls	r2, r2, #9
 8004592:	4313      	orrs	r3, r2
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	e00b      	b.n	80045b0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	2220      	movs	r2, #32
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	2201      	movs	r2, #1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	23c2      	movs	r3, #194	; 0xc2
 80045b6:	33ff      	adds	r3, #255	; 0xff
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d007      	beq.n	80045cc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045c4:	4313      	orrs	r3, r2
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68d9      	ldr	r1, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	055b      	lsls	r3, r3, #21
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d01b      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d017      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d013      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d00f      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2b04      	cmp	r3, #4
 8004606:	d00b      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2b05      	cmp	r3, #5
 800460e:	d007      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b06      	cmp	r3, #6
 8004616:	d003      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	2b07      	cmp	r3, #7
 800461e:	d112      	bne.n	8004646 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2107      	movs	r1, #7
 800462c:	438a      	bics	r2, r1
 800462e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6959      	ldr	r1, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	2207      	movs	r2, #7
 800463c:	401a      	ands	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_ADC_Init+0x27c>)
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d10b      	bne.n	800466e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	2203      	movs	r2, #3
 8004662:	4393      	bics	r3, r2
 8004664:	2201      	movs	r2, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800466c:	e01c      	b.n	80046a8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	2212      	movs	r2, #18
 8004674:	4393      	bics	r3, r2
 8004676:	2210      	movs	r2, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	2201      	movs	r2, #1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004692:	e009      	b.n	80046a8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2210      	movs	r2, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046a8:	230f      	movs	r3, #15
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	fffffefd 	.word	0xfffffefd
 80046bc:	fffe0219 	.word	0xfffe0219
 80046c0:	833fffe7 	.word	0x833fffe7

080046c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d0:	2317      	movs	r3, #23
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2204      	movs	r2, #4
 80046e0:	4013      	ands	r3, r2
 80046e2:	d15e      	bne.n	80047a2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2234      	movs	r2, #52	; 0x34
 80046e8:	5c9b      	ldrb	r3, [r3, r2]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_Start_DMA+0x2e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e05e      	b.n	80047b0 <HAL_ADC_Start_DMA+0xec>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2234      	movs	r2, #52	; 0x34
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	7e5b      	ldrb	r3, [r3, #25]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d007      	beq.n	8004712 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004702:	2317      	movs	r3, #23
 8004704:	18fc      	adds	r4, r7, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0018      	movs	r0, r3
 800470a:	f000 f963 	bl	80049d4 <ADC_Enable>
 800470e:	0003      	movs	r3, r0
 8004710:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004712:	2317      	movs	r3, #23
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d146      	bne.n	80047aa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <HAL_ADC_Start_DMA+0xf4>)
 8004722:	4013      	ands	r3, r2
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	0052      	lsls	r2, r2, #1
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2234      	movs	r2, #52	; 0x34
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_ADC_Start_DMA+0xf8>)
 8004742:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <HAL_ADC_Start_DMA+0xfc>)
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <HAL_ADC_Start_DMA+0x100>)
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	221c      	movs	r2, #28
 800475a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2110      	movs	r1, #16
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	430a      	orrs	r2, r1
 800477a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3340      	adds	r3, #64	; 0x40
 8004786:	0019      	movs	r1, r3
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f000 fb50 	bl	8004e30 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2104      	movs	r1, #4
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	e003      	b.n	80047aa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047a2:	2317      	movs	r3, #23
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80047aa:	2317      	movs	r3, #23
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b007      	add	sp, #28
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	fffff0fe 	.word	0xfffff0fe
 80047bc:	08004add 	.word	0x08004add
 80047c0:	08004b91 	.word	0x08004b91
 80047c4:	08004baf 	.word	0x08004baf

080047c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f2:	230f      	movs	r3, #15
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	055b      	lsls	r3, r3, #21
 8004806:	429a      	cmp	r2, r3
 8004808:	d011      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d00d      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	2b02      	cmp	r3, #2
 8004818:	d009      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	2b03      	cmp	r3, #3
 8004820:	d005      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	2b04      	cmp	r3, #4
 8004828:	d001      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2234      	movs	r2, #52	; 0x34
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x54>
 8004838:	2302      	movs	r3, #2
 800483a:	e0bb      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x1cc>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2234      	movs	r2, #52	; 0x34
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2204      	movs	r2, #4
 800484c:	4013      	ands	r3, r2
 800484e:	d000      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x6a>
 8004850:	e09f      	b.n	8004992 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a59      	ldr	r2, [pc, #356]	; (80049bc <HAL_ADC_ConfigChannel+0x1d4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d100      	bne.n	800485e <HAL_ADC_ConfigChannel+0x76>
 800485c:	e077      	b.n	800494e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	055b      	lsls	r3, r3, #21
 800487c:	429a      	cmp	r2, r3
 800487e:	d037      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d033      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	2b02      	cmp	r3, #2
 800488e:	d02f      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2b03      	cmp	r3, #3
 8004896:	d02b      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2b04      	cmp	r3, #4
 800489e:	d027      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d023      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d01f      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	2b07      	cmp	r3, #7
 80048b6:	d01b      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2107      	movs	r1, #7
 80048c4:	400b      	ands	r3, r1
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d012      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2107      	movs	r1, #7
 80048d6:	438a      	bics	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6959      	ldr	r1, [r3, #20]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2207      	movs	r2, #7
 80048e6:	401a      	ands	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d003      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x118>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b11      	cmp	r3, #17
 80048fe:	d152      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004900:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b10      	cmp	r3, #16
 800490a:	d102      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x12a>
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	e001      	b.n	8004916 <HAL_ADC_ConfigChannel+0x12e>
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	03db      	lsls	r3, r3, #15
 8004916:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b10      	cmp	r3, #16
 8004922:	d140      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_ADC_ConfigChannel+0x1dc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4927      	ldr	r1, [pc, #156]	; (80049c8 <HAL_ADC_ConfigChannel+0x1e0>)
 800492a:	0018      	movs	r0, r3
 800492c:	f7fb fc08 	bl	8000140 <__udivsi3>
 8004930:	0003      	movs	r3, r0
 8004932:	001a      	movs	r2, r3
 8004934:	0013      	movs	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	189b      	adds	r3, r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800493e:	e002      	b.n	8004946 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f9      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x158>
 800494c:	e02b      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	4099      	lsls	r1, r3
 800495c:	000b      	movs	r3, r1
 800495e:	43d9      	mvns	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	400a      	ands	r2, r1
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d003      	beq.n	8004978 <HAL_ADC_ConfigChannel+0x190>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b11      	cmp	r3, #17
 8004976:	d116      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1a0>
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <HAL_ADC_ConfigChannel+0x1e4>)
 8004986:	e000      	b.n	800498a <HAL_ADC_ConfigChannel+0x1a2>
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_ADC_ConfigChannel+0x1e8>)
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 800498c:	400a      	ands	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e009      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	2220      	movs	r2, #32
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800499e:	230f      	movs	r3, #15
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2234      	movs	r2, #52	; 0x34
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80049ae:	230f      	movs	r3, #15
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	00001001 	.word	0x00001001
 80049c0:	40012708 	.word	0x40012708
 80049c4:	20000024 	.word	0x20000024
 80049c8:	000f4240 	.word	0x000f4240
 80049cc:	ff7fffff 	.word	0xff7fffff
 80049d0:	ffbfffff 	.word	0xffbfffff

080049d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2203      	movs	r2, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d112      	bne.n	8004a18 <ADC_Enable+0x44>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2201      	movs	r2, #1
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d009      	beq.n	8004a14 <ADC_Enable+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d101      	bne.n	8004a18 <ADC_Enable+0x44>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <ADC_Enable+0x46>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d152      	bne.n	8004ac4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <ADC_Enable+0xfc>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	2210      	movs	r2, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e03f      	b.n	8004ac6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a56:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <ADC_Enable+0x100>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	491f      	ldr	r1, [pc, #124]	; (8004ad8 <ADC_Enable+0x104>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fb fb6f 	bl	8000140 <__udivsi3>
 8004a62:	0003      	movs	r3, r0
 8004a64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a66:	e002      	b.n	8004a6e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f9      	bne.n	8004a68 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a74:	f7ff fcdc 	bl	8004430 <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a7c:	e01b      	b.n	8004ab6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a7e:	f7ff fcd7 	bl	8004430 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d914      	bls.n	8004ab6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2201      	movs	r2, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d00d      	beq.n	8004ab6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	2201      	movs	r2, #1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e007      	b.n	8004ac6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d1dc      	bne.n	8004a7e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	80000017 	.word	0x80000017
 8004ad4:	20000024 	.word	0x20000024
 8004ad8:	000f4240 	.word	0x000f4240

08004adc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	2250      	movs	r2, #80	; 0x50
 8004af0:	4013      	ands	r3, r2
 8004af2:	d140      	bne.n	8004b76 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	23c0      	movs	r3, #192	; 0xc0
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d12d      	bne.n	8004b6c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d129      	bne.n	8004b6c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d122      	bne.n	8004b6c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d110      	bne.n	8004b54 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	210c      	movs	r1, #12
 8004b3e:	438a      	bics	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <ADC_DMAConvCplt+0xb0>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
 8004b52:	e00b      	b.n	8004b6c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	2220      	movs	r2, #32
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	2201      	movs	r2, #1
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7fe f964 	bl	8002e3c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004b74:	e005      	b.n	8004b82 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	0010      	movs	r0, r2
 8004b80:	4798      	blx	r3
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b004      	add	sp, #16
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	fffffefe 	.word	0xfffffefe

08004b90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff fe11 	bl	80047c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}

08004bae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	2240      	movs	r2, #64	; 0x40
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	2204      	movs	r2, #4
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7ff fdfe 	bl	80047d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	0002      	movs	r2, r0
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	1dfb      	adds	r3, r7, #7
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf6:	d809      	bhi.n	8004c0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	231f      	movs	r3, #31
 8004c00:	401a      	ands	r2, r3
 8004c02:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__NVIC_EnableIRQ+0x30>)
 8004c04:	2101      	movs	r1, #1
 8004c06:	4091      	lsls	r1, r2
 8004c08:	000a      	movs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
  }
}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b002      	add	sp, #8
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	0002      	movs	r2, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	1dfb      	adds	r3, r7, #7
 8004c24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c26:	1dfb      	adds	r3, r7, #7
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c2c:	d828      	bhi.n	8004c80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	; (8004cec <__NVIC_SetPriority+0xd4>)
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	33c0      	adds	r3, #192	; 0xc0
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	589b      	ldr	r3, [r3, r2]
 8004c3e:	1dfa      	adds	r2, r7, #7
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	0011      	movs	r1, r2
 8004c44:	2203      	movs	r2, #3
 8004c46:	400a      	ands	r2, r1
 8004c48:	00d2      	lsls	r2, r2, #3
 8004c4a:	21ff      	movs	r1, #255	; 0xff
 8004c4c:	4091      	lsls	r1, r2
 8004c4e:	000a      	movs	r2, r1
 8004c50:	43d2      	mvns	r2, r2
 8004c52:	401a      	ands	r2, r3
 8004c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	22ff      	movs	r2, #255	; 0xff
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	1dfb      	adds	r3, r7, #7
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	0018      	movs	r0, r3
 8004c64:	2303      	movs	r3, #3
 8004c66:	4003      	ands	r3, r0
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c6c:	481f      	ldr	r0, [pc, #124]	; (8004cec <__NVIC_SetPriority+0xd4>)
 8004c6e:	1dfb      	adds	r3, r7, #7
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	430a      	orrs	r2, r1
 8004c78:	33c0      	adds	r3, #192	; 0xc0
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c7e:	e031      	b.n	8004ce4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <__NVIC_SetPriority+0xd8>)
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	0019      	movs	r1, r3
 8004c88:	230f      	movs	r3, #15
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	3b08      	subs	r3, #8
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	3306      	adds	r3, #6
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	18d3      	adds	r3, r2, r3
 8004c96:	3304      	adds	r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1dfa      	adds	r2, r7, #7
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	0011      	movs	r1, r2
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	00d2      	lsls	r2, r2, #3
 8004ca6:	21ff      	movs	r1, #255	; 0xff
 8004ca8:	4091      	lsls	r1, r2
 8004caa:	000a      	movs	r2, r1
 8004cac:	43d2      	mvns	r2, r2
 8004cae:	401a      	ands	r2, r3
 8004cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	22ff      	movs	r2, #255	; 0xff
 8004cb8:	401a      	ands	r2, r3
 8004cba:	1dfb      	adds	r3, r7, #7
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	4003      	ands	r3, r0
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc8:	4809      	ldr	r0, [pc, #36]	; (8004cf0 <__NVIC_SetPriority+0xd8>)
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	001c      	movs	r4, r3
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	4023      	ands	r3, r4
 8004cd4:	3b08      	subs	r3, #8
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	3306      	adds	r3, #6
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	18c3      	adds	r3, r0, r3
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b003      	add	sp, #12
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	e000e100 	.word	0xe000e100
 8004cf0:	e000ed00 	.word	0xe000ed00

08004cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1e5a      	subs	r2, r3, #1
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	045b      	lsls	r3, r3, #17
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d301      	bcc.n	8004d0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e010      	b.n	8004d2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <SysTick_Config+0x44>)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	3a01      	subs	r2, #1
 8004d12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d14:	2301      	movs	r3, #1
 8004d16:	425b      	negs	r3, r3
 8004d18:	2103      	movs	r1, #3
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f7ff ff7c 	bl	8004c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <SysTick_Config+0x44>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <SysTick_Config+0x44>)
 8004d28:	2207      	movs	r2, #7
 8004d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b002      	add	sp, #8
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	e000e010 	.word	0xe000e010

08004d3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	210f      	movs	r1, #15
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	1c02      	adds	r2, r0, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	0011      	movs	r1, r2
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff ff5d 	bl	8004c18 <__NVIC_SetPriority>
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff ff33 	bl	8004be4 <__NVIC_EnableIRQ>
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff ffaf 	bl	8004cf4 <SysTick_Config>
 8004d96:	0003      	movs	r3, r0
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e036      	b.n	8004e24 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2221      	movs	r2, #33	; 0x21
 8004dba:	2102      	movs	r1, #2
 8004dbc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_DMA_Init+0x8c>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 f9c4 	bl	8005194 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	2100      	movs	r1, #0
 8004e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	ffffc00f 	.word	0xffffc00f

08004e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2317      	movs	r3, #23
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	5c9b      	ldrb	r3, [r3, r2]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMA_Start_IT+0x24>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e04f      	b.n	8004ef4 <HAL_DMA_Start_IT+0xc4>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2221      	movs	r2, #33	; 0x21
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d13a      	bne.n	8004ede <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	; 0x21
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	438a      	bics	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f954 	bl	800513a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	210e      	movs	r1, #14
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e00f      	b.n	8004ecc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	210a      	movs	r1, #10
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	438a      	bics	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e007      	b.n	8004eee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2202      	movs	r2, #2
 8004eec:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004eee:	2317      	movs	r3, #23
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b006      	add	sp, #24
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2221      	movs	r2, #33	; 0x21
 8004f08:	5c9b      	ldrb	r3, [r3, r2]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d008      	beq.n	8004f22 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2204      	movs	r2, #4
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e020      	b.n	8004f64 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	210e      	movs	r1, #14
 8004f2e:	438a      	bics	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	438a      	bics	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4091      	lsls	r1, r2
 8004f4e:	000a      	movs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2221      	movs	r2, #33	; 0x21
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f74:	210f      	movs	r1, #15
 8004f76:	187b      	adds	r3, r7, r1
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2221      	movs	r2, #33	; 0x21
 8004f80:	5c9b      	ldrb	r3, [r3, r2]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d006      	beq.n	8004f96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004f8e:	187b      	adds	r3, r7, r1
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e028      	b.n	8004fe8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	210e      	movs	r1, #14
 8004fa2:	438a      	bics	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	438a      	bics	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4091      	lsls	r1, r2
 8004fc2:	000a      	movs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2221      	movs	r2, #33	; 0x21
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	0010      	movs	r0, r2
 8004fe6:	4798      	blx	r3
    }
  }
  return status;
 8004fe8:	230f      	movs	r3, #15
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	781b      	ldrb	r3, [r3, #0]
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b004      	add	sp, #16
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2204      	movs	r2, #4
 8005014:	409a      	lsls	r2, r3
 8005016:	0013      	movs	r3, r2
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	d024      	beq.n	8005068 <HAL_DMA_IRQHandler+0x72>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2204      	movs	r2, #4
 8005022:	4013      	ands	r3, r2
 8005024:	d020      	beq.n	8005068 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	4013      	ands	r3, r2
 8005030:	d107      	bne.n	8005042 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2104      	movs	r1, #4
 800503e:	438a      	bics	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504a:	2104      	movs	r1, #4
 800504c:	4091      	lsls	r1, r2
 800504e:	000a      	movs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d100      	bne.n	800505c <HAL_DMA_IRQHandler+0x66>
 800505a:	e06a      	b.n	8005132 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	0010      	movs	r0, r2
 8005064:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005066:	e064      	b.n	8005132 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	2202      	movs	r2, #2
 800506e:	409a      	lsls	r2, r3
 8005070:	0013      	movs	r3, r2
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4013      	ands	r3, r2
 8005076:	d02b      	beq.n	80050d0 <HAL_DMA_IRQHandler+0xda>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2202      	movs	r2, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d027      	beq.n	80050d0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2220      	movs	r2, #32
 8005088:	4013      	ands	r3, r2
 800508a:	d10b      	bne.n	80050a4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	210a      	movs	r1, #10
 8005098:	438a      	bics	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2221      	movs	r2, #33	; 0x21
 80050a0:	2101      	movs	r1, #1
 80050a2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	2102      	movs	r1, #2
 80050ae:	4091      	lsls	r1, r2
 80050b0:	000a      	movs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	2100      	movs	r1, #0
 80050ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d036      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	0010      	movs	r0, r2
 80050cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050ce:	e030      	b.n	8005132 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	2208      	movs	r2, #8
 80050d6:	409a      	lsls	r2, r3
 80050d8:	0013      	movs	r3, r2
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4013      	ands	r3, r2
 80050de:	d028      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13c>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2208      	movs	r2, #8
 80050e4:	4013      	ands	r3, r2
 80050e6:	d024      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	210e      	movs	r1, #14
 80050f4:	438a      	bics	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	2101      	movs	r1, #1
 8005102:	4091      	lsls	r1, r2
 8005104:	000a      	movs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2221      	movs	r2, #33	; 0x21
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	0010      	movs	r0, r2
 800512e:	4798      	blx	r3
    }
  }
}
 8005130:	e7ff      	b.n	8005132 <HAL_DMA_IRQHandler+0x13c>
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bd80      	pop	{r7, pc}

0800513a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	2101      	movs	r1, #1
 8005152:	4091      	lsls	r1, r2
 8005154:	000a      	movs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b10      	cmp	r3, #16
 8005166:	d108      	bne.n	800517a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005178:	e007      	b.n	800518a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	60da      	str	r2, [r3, #12]
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b004      	add	sp, #16
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <DMA_CalcBaseAndBitshift+0x30>)
 80051a2:	4694      	mov	ip, r2
 80051a4:	4463      	add	r3, ip
 80051a6:	2114      	movs	r1, #20
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7fa ffc9 	bl	8000140 <__udivsi3>
 80051ae:	0003      	movs	r3, r0
 80051b0:	009a      	lsls	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <DMA_CalcBaseAndBitshift+0x34>)
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	bffdfff8 	.word	0xbffdfff8
 80051c8:	40020000 	.word	0x40020000

080051cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051da:	e14f      	b.n	800547c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2101      	movs	r1, #1
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4091      	lsls	r1, r2
 80051e6:	000a      	movs	r2, r1
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d100      	bne.n	80051f4 <HAL_GPIO_Init+0x28>
 80051f2:	e140      	b.n	8005476 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2203      	movs	r2, #3
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d005      	beq.n	800520c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2203      	movs	r2, #3
 8005206:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005208:	2b02      	cmp	r3, #2
 800520a:	d130      	bne.n	800526e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2203      	movs	r2, #3
 8005218:	409a      	lsls	r2, r3
 800521a:	0013      	movs	r3, r2
 800521c:	43da      	mvns	r2, r3
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4013      	ands	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	409a      	lsls	r2, r3
 800522e:	0013      	movs	r3, r2
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005242:	2201      	movs	r2, #1
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	409a      	lsls	r2, r3
 8005248:	0013      	movs	r3, r2
 800524a:	43da      	mvns	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	2201      	movs	r2, #1
 800525a:	401a      	ands	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	409a      	lsls	r2, r3
 8005260:	0013      	movs	r3, r2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2203      	movs	r2, #3
 8005274:	4013      	ands	r3, r2
 8005276:	2b03      	cmp	r3, #3
 8005278:	d017      	beq.n	80052aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	409a      	lsls	r2, r3
 8005288:	0013      	movs	r3, r2
 800528a:	43da      	mvns	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d123      	bne.n	80052fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	08da      	lsrs	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3208      	adds	r2, #8
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	58d3      	ldr	r3, [r2, r3]
 80052c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2207      	movs	r2, #7
 80052c8:	4013      	ands	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	220f      	movs	r2, #15
 80052ce:	409a      	lsls	r2, r3
 80052d0:	0013      	movs	r3, r2
 80052d2:	43da      	mvns	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2107      	movs	r1, #7
 80052e2:	400b      	ands	r3, r1
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	409a      	lsls	r2, r3
 80052e8:	0013      	movs	r3, r2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	08da      	lsrs	r2, r3, #3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3208      	adds	r2, #8
 80052f8:	0092      	lsls	r2, r2, #2
 80052fa:	6939      	ldr	r1, [r7, #16]
 80052fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	2203      	movs	r2, #3
 800530a:	409a      	lsls	r2, r3
 800530c:	0013      	movs	r3, r2
 800530e:	43da      	mvns	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4013      	ands	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2203      	movs	r2, #3
 800531c:	401a      	ands	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	0013      	movs	r3, r2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	23c0      	movs	r3, #192	; 0xc0
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	4013      	ands	r3, r2
 800533c:	d100      	bne.n	8005340 <HAL_GPIO_Init+0x174>
 800533e:	e09a      	b.n	8005476 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005340:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_GPIO_Init+0x2c8>)
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_GPIO_Init+0x2c8>)
 8005346:	2101      	movs	r1, #1
 8005348:	430a      	orrs	r2, r1
 800534a:	619a      	str	r2, [r3, #24]
 800534c:	4b51      	ldr	r3, [pc, #324]	; (8005494 <HAL_GPIO_Init+0x2c8>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005358:	4a4f      	ldr	r2, [pc, #316]	; (8005498 <HAL_GPIO_Init+0x2cc>)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	3302      	adds	r3, #2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	589b      	ldr	r3, [r3, r2]
 8005364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2203      	movs	r2, #3
 800536a:	4013      	ands	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	220f      	movs	r2, #15
 8005370:	409a      	lsls	r2, r3
 8005372:	0013      	movs	r3, r2
 8005374:	43da      	mvns	r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	2390      	movs	r3, #144	; 0x90
 8005380:	05db      	lsls	r3, r3, #23
 8005382:	429a      	cmp	r2, r3
 8005384:	d013      	beq.n	80053ae <HAL_GPIO_Init+0x1e2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a44      	ldr	r2, [pc, #272]	; (800549c <HAL_GPIO_Init+0x2d0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00d      	beq.n	80053aa <HAL_GPIO_Init+0x1de>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a43      	ldr	r2, [pc, #268]	; (80054a0 <HAL_GPIO_Init+0x2d4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <HAL_GPIO_Init+0x1da>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a42      	ldr	r2, [pc, #264]	; (80054a4 <HAL_GPIO_Init+0x2d8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d101      	bne.n	80053a2 <HAL_GPIO_Init+0x1d6>
 800539e:	2303      	movs	r3, #3
 80053a0:	e006      	b.n	80053b0 <HAL_GPIO_Init+0x1e4>
 80053a2:	2305      	movs	r3, #5
 80053a4:	e004      	b.n	80053b0 <HAL_GPIO_Init+0x1e4>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e002      	b.n	80053b0 <HAL_GPIO_Init+0x1e4>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <HAL_GPIO_Init+0x1e4>
 80053ae:	2300      	movs	r3, #0
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	2103      	movs	r1, #3
 80053b4:	400a      	ands	r2, r1
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	4093      	lsls	r3, r2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053c0:	4935      	ldr	r1, [pc, #212]	; (8005498 <HAL_GPIO_Init+0x2cc>)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	3302      	adds	r3, #2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4013      	ands	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	035b      	lsls	r3, r3, #13
 80053e6:	4013      	ands	r3, r2
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053f2:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053f8:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	43da      	mvns	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	039b      	lsls	r3, r3, #14
 8005410:	4013      	ands	r3, r2
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800541c:	4b22      	ldr	r3, [pc, #136]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	43da      	mvns	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	029b      	lsls	r3, r3, #10
 800543a:	4013      	ands	r3, r2
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	43da      	mvns	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	025b      	lsls	r3, r3, #9
 8005464:	4013      	ands	r3, r2
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <HAL_GPIO_Init+0x2dc>)
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	3301      	adds	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	40da      	lsrs	r2, r3
 8005484:	1e13      	subs	r3, r2, #0
 8005486:	d000      	beq.n	800548a <HAL_GPIO_Init+0x2be>
 8005488:	e6a8      	b.n	80051dc <HAL_GPIO_Init+0x10>
  } 
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b006      	add	sp, #24
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	40010000 	.word	0x40010000
 800549c:	48000400 	.word	0x48000400
 80054a0:	48000800 	.word	0x48000800
 80054a4:	48000c00 	.word	0x48000c00
 80054a8:	40010400 	.word	0x40010400

080054ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	000a      	movs	r2, r1
 80054b6:	1cbb      	adds	r3, r7, #2
 80054b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	1cba      	adds	r2, r7, #2
 80054c0:	8812      	ldrh	r2, [r2, #0]
 80054c2:	4013      	ands	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80054c6:	230f      	movs	r3, #15
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e003      	b.n	80054d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054d0:	230f      	movs	r3, #15
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80054d8:	230f      	movs	r3, #15
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	781b      	ldrb	r3, [r3, #0]
  }
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	0008      	movs	r0, r1
 80054f0:	0011      	movs	r1, r2
 80054f2:	1cbb      	adds	r3, r7, #2
 80054f4:	1c02      	adds	r2, r0, #0
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	1c7b      	adds	r3, r7, #1
 80054fa:	1c0a      	adds	r2, r1, #0
 80054fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054fe:	1c7b      	adds	r3, r7, #1
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005506:	1cbb      	adds	r3, r7, #2
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800550e:	e003      	b.n	8005518 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005510:	1cbb      	adds	r3, r7, #2
 8005512:	881a      	ldrh	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	0002      	movs	r2, r0
 8005528:	1dbb      	adds	r3, r7, #6
 800552a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	1dba      	adds	r2, r7, #6
 8005532:	8812      	ldrh	r2, [r2, #0]
 8005534:	4013      	ands	r3, r2
 8005536:	d008      	beq.n	800554a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800553a:	1dba      	adds	r2, r7, #6
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005540:	1dbb      	adds	r3, r7, #6
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 f807 	bl	8005558 <HAL_GPIO_EXTI_Callback>
  }
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b002      	add	sp, #8
 8005550:	bd80      	pop	{r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	40010400 	.word	0x40010400

08005558 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	0002      	movs	r2, r0
 8005560:	1dbb      	adds	r3, r7, #6
 8005562:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e301      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	4013      	ands	r3, r2
 8005586:	d100      	bne.n	800558a <HAL_RCC_OscConfig+0x1e>
 8005588:	e08d      	b.n	80056a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800558a:	4bc3      	ldr	r3, [pc, #780]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	220c      	movs	r2, #12
 8005590:	4013      	ands	r3, r2
 8005592:	2b04      	cmp	r3, #4
 8005594:	d00e      	beq.n	80055b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005596:	4bc0      	ldr	r3, [pc, #768]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	220c      	movs	r2, #12
 800559c:	4013      	ands	r3, r2
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d116      	bne.n	80055d0 <HAL_RCC_OscConfig+0x64>
 80055a2:	4bbd      	ldr	r3, [pc, #756]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	025b      	lsls	r3, r3, #9
 80055aa:	401a      	ands	r2, r3
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	025b      	lsls	r3, r3, #9
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d10d      	bne.n	80055d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	4bb8      	ldr	r3, [pc, #736]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	029b      	lsls	r3, r3, #10
 80055bc:	4013      	ands	r3, r2
 80055be:	d100      	bne.n	80055c2 <HAL_RCC_OscConfig+0x56>
 80055c0:	e070      	b.n	80056a4 <HAL_RCC_OscConfig+0x138>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d000      	beq.n	80055cc <HAL_RCC_OscConfig+0x60>
 80055ca:	e06b      	b.n	80056a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e2d8      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_OscConfig+0x7c>
 80055d8:	4baf      	ldr	r3, [pc, #700]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4bae      	ldr	r3, [pc, #696]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	0249      	lsls	r1, r1, #9
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e02f      	b.n	8005648 <HAL_RCC_OscConfig+0xdc>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10c      	bne.n	800560a <HAL_RCC_OscConfig+0x9e>
 80055f0:	4ba9      	ldr	r3, [pc, #676]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4ba8      	ldr	r3, [pc, #672]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055f6:	49a9      	ldr	r1, [pc, #676]	; (800589c <HAL_RCC_OscConfig+0x330>)
 80055f8:	400a      	ands	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	4ba6      	ldr	r3, [pc, #664]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4ba5      	ldr	r3, [pc, #660]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005602:	49a7      	ldr	r1, [pc, #668]	; (80058a0 <HAL_RCC_OscConfig+0x334>)
 8005604:	400a      	ands	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e01e      	b.n	8005648 <HAL_RCC_OscConfig+0xdc>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d10e      	bne.n	8005630 <HAL_RCC_OscConfig+0xc4>
 8005612:	4ba1      	ldr	r3, [pc, #644]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4ba0      	ldr	r3, [pc, #640]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	02c9      	lsls	r1, r1, #11
 800561c:	430a      	orrs	r2, r1
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	4b9d      	ldr	r3, [pc, #628]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b9c      	ldr	r3, [pc, #624]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005626:	2180      	movs	r1, #128	; 0x80
 8005628:	0249      	lsls	r1, r1, #9
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e00b      	b.n	8005648 <HAL_RCC_OscConfig+0xdc>
 8005630:	4b99      	ldr	r3, [pc, #612]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b98      	ldr	r3, [pc, #608]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005636:	4999      	ldr	r1, [pc, #612]	; (800589c <HAL_RCC_OscConfig+0x330>)
 8005638:	400a      	ands	r2, r1
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	4b96      	ldr	r3, [pc, #600]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b95      	ldr	r3, [pc, #596]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005642:	4997      	ldr	r1, [pc, #604]	; (80058a0 <HAL_RCC_OscConfig+0x334>)
 8005644:	400a      	ands	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d014      	beq.n	800567a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fe feee 	bl	8004430 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800565a:	f7fe fee9 	bl	8004430 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b64      	cmp	r3, #100	; 0x64
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e28a      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566c:	4b8a      	ldr	r3, [pc, #552]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	029b      	lsls	r3, r3, #10
 8005674:	4013      	ands	r3, r2
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0xee>
 8005678:	e015      	b.n	80056a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567a:	f7fe fed9 	bl	8004430 <HAL_GetTick>
 800567e:	0003      	movs	r3, r0
 8005680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005684:	f7fe fed4 	bl	8004430 <HAL_GetTick>
 8005688:	0002      	movs	r2, r0
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e275      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005696:	4b80      	ldr	r3, [pc, #512]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	4013      	ands	r3, r2
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x118>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2202      	movs	r2, #2
 80056ac:	4013      	ands	r3, r2
 80056ae:	d100      	bne.n	80056b2 <HAL_RCC_OscConfig+0x146>
 80056b0:	e069      	b.n	8005786 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80056b2:	4b79      	ldr	r3, [pc, #484]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	220c      	movs	r2, #12
 80056b8:	4013      	ands	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80056bc:	4b76      	ldr	r3, [pc, #472]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	220c      	movs	r2, #12
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d11c      	bne.n	8005702 <HAL_RCC_OscConfig+0x196>
 80056c8:	4b73      	ldr	r3, [pc, #460]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	025b      	lsls	r3, r3, #9
 80056d0:	4013      	ands	r3, r2
 80056d2:	d116      	bne.n	8005702 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d4:	4b70      	ldr	r3, [pc, #448]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2202      	movs	r2, #2
 80056da:	4013      	ands	r3, r2
 80056dc:	d005      	beq.n	80056ea <HAL_RCC_OscConfig+0x17e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d001      	beq.n	80056ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e24b      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ea:	4b6b      	ldr	r3, [pc, #428]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	22f8      	movs	r2, #248	; 0xf8
 80056f0:	4393      	bics	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	00da      	lsls	r2, r3, #3
 80056fa:	4b67      	ldr	r3, [pc, #412]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005700:	e041      	b.n	8005786 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d024      	beq.n	8005754 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570a:	4b63      	ldr	r3, [pc, #396]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b62      	ldr	r3, [pc, #392]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005710:	2101      	movs	r1, #1
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005716:	f7fe fe8b 	bl	8004430 <HAL_GetTick>
 800571a:	0003      	movs	r3, r0
 800571c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005720:	f7fe fe86 	bl	8004430 <HAL_GetTick>
 8005724:	0002      	movs	r2, r0
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e227      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005732:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2202      	movs	r2, #2
 8005738:	4013      	ands	r3, r2
 800573a:	d0f1      	beq.n	8005720 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573c:	4b56      	ldr	r3, [pc, #344]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	22f8      	movs	r2, #248	; 0xf8
 8005742:	4393      	bics	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00da      	lsls	r2, r3, #3
 800574c:	4b52      	ldr	r3, [pc, #328]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e018      	b.n	8005786 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005754:	4b50      	ldr	r3, [pc, #320]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b4f      	ldr	r3, [pc, #316]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800575a:	2101      	movs	r1, #1
 800575c:	438a      	bics	r2, r1
 800575e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fe fe66 	bl	8004430 <HAL_GetTick>
 8005764:	0003      	movs	r3, r0
 8005766:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576a:	f7fe fe61 	bl	8004430 <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e202      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577c:	4b46      	ldr	r3, [pc, #280]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2202      	movs	r2, #2
 8005782:	4013      	ands	r3, r2
 8005784:	d1f1      	bne.n	800576a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2208      	movs	r2, #8
 800578c:	4013      	ands	r3, r2
 800578e:	d036      	beq.n	80057fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d019      	beq.n	80057cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005798:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800579a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579c:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800579e:	2101      	movs	r1, #1
 80057a0:	430a      	orrs	r2, r1
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a4:	f7fe fe44 	bl	8004430 <HAL_GetTick>
 80057a8:	0003      	movs	r3, r0
 80057aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ae:	f7fe fe3f 	bl	8004430 <HAL_GetTick>
 80057b2:	0002      	movs	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1e0      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c0:	4b35      	ldr	r3, [pc, #212]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2202      	movs	r2, #2
 80057c6:	4013      	ands	r3, r2
 80057c8:	d0f1      	beq.n	80057ae <HAL_RCC_OscConfig+0x242>
 80057ca:	e018      	b.n	80057fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057cc:	4b32      	ldr	r3, [pc, #200]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80057ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057d0:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80057d2:	2101      	movs	r1, #1
 80057d4:	438a      	bics	r2, r1
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d8:	f7fe fe2a 	bl	8004430 <HAL_GetTick>
 80057dc:	0003      	movs	r3, r0
 80057de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e2:	f7fe fe25 	bl	8004430 <HAL_GetTick>
 80057e6:	0002      	movs	r2, r0
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e1c6      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	4b28      	ldr	r3, [pc, #160]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2202      	movs	r2, #2
 80057fa:	4013      	ands	r3, r2
 80057fc:	d1f1      	bne.n	80057e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2204      	movs	r2, #4
 8005804:	4013      	ands	r3, r2
 8005806:	d100      	bne.n	800580a <HAL_RCC_OscConfig+0x29e>
 8005808:	e0b4      	b.n	8005974 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580a:	201f      	movs	r0, #31
 800580c:	183b      	adds	r3, r7, r0
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005812:	4b21      	ldr	r3, [pc, #132]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	055b      	lsls	r3, r3, #21
 800581a:	4013      	ands	r3, r2
 800581c:	d110      	bne.n	8005840 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	0549      	lsls	r1, r1, #21
 8005828:	430a      	orrs	r2, r1
 800582a:	61da      	str	r2, [r3, #28]
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	055b      	lsls	r3, r3, #21
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800583a:	183b      	adds	r3, r7, r0
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <HAL_RCC_OscConfig+0x338>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d11a      	bne.n	8005882 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584c:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <HAL_RCC_OscConfig+0x338>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <HAL_RCC_OscConfig+0x338>)
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	0049      	lsls	r1, r1, #1
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585a:	f7fe fde9 	bl	8004430 <HAL_GetTick>
 800585e:	0003      	movs	r3, r0
 8005860:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005864:	f7fe fde4 	bl	8004430 <HAL_GetTick>
 8005868:	0002      	movs	r2, r0
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e185      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_OscConfig+0x338>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d10e      	bne.n	80058a8 <HAL_RCC_OscConfig+0x33c>
 800588a:	4b03      	ldr	r3, [pc, #12]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 800588c:	6a1a      	ldr	r2, [r3, #32]
 800588e:	4b02      	ldr	r3, [pc, #8]	; (8005898 <HAL_RCC_OscConfig+0x32c>)
 8005890:	2101      	movs	r1, #1
 8005892:	430a      	orrs	r2, r1
 8005894:	621a      	str	r2, [r3, #32]
 8005896:	e035      	b.n	8005904 <HAL_RCC_OscConfig+0x398>
 8005898:	40021000 	.word	0x40021000
 800589c:	fffeffff 	.word	0xfffeffff
 80058a0:	fffbffff 	.word	0xfffbffff
 80058a4:	40007000 	.word	0x40007000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_OscConfig+0x35e>
 80058b0:	4bb6      	ldr	r3, [pc, #728]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	4bb5      	ldr	r3, [pc, #724]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058b6:	2101      	movs	r1, #1
 80058b8:	438a      	bics	r2, r1
 80058ba:	621a      	str	r2, [r3, #32]
 80058bc:	4bb3      	ldr	r3, [pc, #716]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	4bb2      	ldr	r3, [pc, #712]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058c2:	2104      	movs	r1, #4
 80058c4:	438a      	bics	r2, r1
 80058c6:	621a      	str	r2, [r3, #32]
 80058c8:	e01c      	b.n	8005904 <HAL_RCC_OscConfig+0x398>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x380>
 80058d2:	4bae      	ldr	r3, [pc, #696]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	4bad      	ldr	r3, [pc, #692]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058d8:	2104      	movs	r1, #4
 80058da:	430a      	orrs	r2, r1
 80058dc:	621a      	str	r2, [r3, #32]
 80058de:	4bab      	ldr	r3, [pc, #684]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	4baa      	ldr	r3, [pc, #680]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058e4:	2101      	movs	r1, #1
 80058e6:	430a      	orrs	r2, r1
 80058e8:	621a      	str	r2, [r3, #32]
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0x398>
 80058ec:	4ba7      	ldr	r3, [pc, #668]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	4ba6      	ldr	r3, [pc, #664]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058f2:	2101      	movs	r1, #1
 80058f4:	438a      	bics	r2, r1
 80058f6:	621a      	str	r2, [r3, #32]
 80058f8:	4ba4      	ldr	r3, [pc, #656]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	4ba3      	ldr	r3, [pc, #652]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80058fe:	2104      	movs	r1, #4
 8005900:	438a      	bics	r2, r1
 8005902:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d014      	beq.n	8005936 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590c:	f7fe fd90 	bl	8004430 <HAL_GetTick>
 8005910:	0003      	movs	r3, r0
 8005912:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	e009      	b.n	800592a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fe fd8b 	bl	8004430 <HAL_GetTick>
 800591a:	0002      	movs	r2, r0
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	4a9b      	ldr	r2, [pc, #620]	; (8005b90 <HAL_RCC_OscConfig+0x624>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e12b      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592a:	4b98      	ldr	r3, [pc, #608]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	2202      	movs	r2, #2
 8005930:	4013      	ands	r3, r2
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x3aa>
 8005934:	e013      	b.n	800595e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005936:	f7fe fd7b 	bl	8004430 <HAL_GetTick>
 800593a:	0003      	movs	r3, r0
 800593c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593e:	e009      	b.n	8005954 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005940:	f7fe fd76 	bl	8004430 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	4a91      	ldr	r2, [pc, #580]	; (8005b90 <HAL_RCC_OscConfig+0x624>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e116      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005954:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	2202      	movs	r2, #2
 800595a:	4013      	ands	r3, r2
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800595e:	231f      	movs	r3, #31
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b88      	ldr	r3, [pc, #544]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	4b87      	ldr	r3, [pc, #540]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 800596e:	4989      	ldr	r1, [pc, #548]	; (8005b94 <HAL_RCC_OscConfig+0x628>)
 8005970:	400a      	ands	r2, r1
 8005972:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2210      	movs	r2, #16
 800597a:	4013      	ands	r3, r2
 800597c:	d063      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d12a      	bne.n	80059dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005986:	4b81      	ldr	r3, [pc, #516]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	4b80      	ldr	r3, [pc, #512]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 800598c:	2104      	movs	r1, #4
 800598e:	430a      	orrs	r2, r1
 8005990:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005992:	4b7e      	ldr	r3, [pc, #504]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005996:	4b7d      	ldr	r3, [pc, #500]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005998:	2101      	movs	r1, #1
 800599a:	430a      	orrs	r2, r1
 800599c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800599e:	f7fe fd47 	bl	8004430 <HAL_GetTick>
 80059a2:	0003      	movs	r3, r0
 80059a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80059a8:	f7fe fd42 	bl	8004430 <HAL_GetTick>
 80059ac:	0002      	movs	r2, r0
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e0e3      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80059ba:	4b74      	ldr	r3, [pc, #464]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	2202      	movs	r2, #2
 80059c0:	4013      	ands	r3, r2
 80059c2:	d0f1      	beq.n	80059a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80059c4:	4b71      	ldr	r3, [pc, #452]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80059c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c8:	22f8      	movs	r2, #248	; 0xf8
 80059ca:	4393      	bics	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	00da      	lsls	r2, r3, #3
 80059d4:	4b6d      	ldr	r3, [pc, #436]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80059d6:	430a      	orrs	r2, r1
 80059d8:	635a      	str	r2, [r3, #52]	; 0x34
 80059da:	e034      	b.n	8005a46 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	3305      	adds	r3, #5
 80059e2:	d111      	bne.n	8005a08 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80059e4:	4b69      	ldr	r3, [pc, #420]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e8:	4b68      	ldr	r3, [pc, #416]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80059ea:	2104      	movs	r1, #4
 80059ec:	438a      	bics	r2, r1
 80059ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80059f0:	4b66      	ldr	r3, [pc, #408]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	22f8      	movs	r2, #248	; 0xf8
 80059f6:	4393      	bics	r3, r2
 80059f8:	0019      	movs	r1, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	00da      	lsls	r2, r3, #3
 8005a00:	4b62      	ldr	r3, [pc, #392]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a02:	430a      	orrs	r2, r1
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
 8005a06:	e01e      	b.n	8005a46 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a08:	4b60      	ldr	r3, [pc, #384]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0c:	4b5f      	ldr	r3, [pc, #380]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a0e:	2104      	movs	r1, #4
 8005a10:	430a      	orrs	r2, r1
 8005a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005a14:	4b5d      	ldr	r3, [pc, #372]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a18:	4b5c      	ldr	r3, [pc, #368]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	438a      	bics	r2, r1
 8005a1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a20:	f7fe fd06 	bl	8004430 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005a2a:	f7fe fd01 	bl	8004430 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0a2      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a3c:	4b53      	ldr	r3, [pc, #332]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	2202      	movs	r2, #2
 8005a42:	4013      	ands	r3, r2
 8005a44:	d1f1      	bne.n	8005a2a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d100      	bne.n	8005a50 <HAL_RCC_OscConfig+0x4e4>
 8005a4e:	e097      	b.n	8005b80 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a50:	4b4e      	ldr	r3, [pc, #312]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	220c      	movs	r2, #12
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d100      	bne.n	8005a5e <HAL_RCC_OscConfig+0x4f2>
 8005a5c:	e06b      	b.n	8005b36 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d14c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b48      	ldr	r3, [pc, #288]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a6c:	494a      	ldr	r1, [pc, #296]	; (8005b98 <HAL_RCC_OscConfig+0x62c>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a72:	f7fe fcdd 	bl	8004430 <HAL_GetTick>
 8005a76:	0003      	movs	r3, r0
 8005a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fe fcd8 	bl	8004430 <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e079      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a8e:	4b3f      	ldr	r3, [pc, #252]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	049b      	lsls	r3, r3, #18
 8005a96:	4013      	ands	r3, r2
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a9a:	4b3c      	ldr	r3, [pc, #240]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	220f      	movs	r2, #15
 8005aa0:	4393      	bics	r3, r2
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8005aae:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4a3a      	ldr	r2, [pc, #232]	; (8005b9c <HAL_RCC_OscConfig+0x630>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	4b32      	ldr	r3, [pc, #200]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	0449      	lsls	r1, r1, #17
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad6:	f7fe fcab 	bl	8004430 <HAL_GetTick>
 8005ada:	0003      	movs	r3, r0
 8005adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fe fca6 	bl	8004430 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e047      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005af2:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	049b      	lsls	r3, r3, #18
 8005afa:	4013      	ands	r3, r2
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x574>
 8005afe:	e03f      	b.n	8005b80 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b00:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005b06:	4924      	ldr	r1, [pc, #144]	; (8005b98 <HAL_RCC_OscConfig+0x62c>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fe fc90 	bl	8004430 <HAL_GetTick>
 8005b10:	0003      	movs	r3, r0
 8005b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b16:	f7fe fc8b 	bl	8004430 <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e02c      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b28:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	049b      	lsls	r3, r3, #18
 8005b30:	4013      	ands	r3, r2
 8005b32:	d1f0      	bne.n	8005b16 <HAL_RCC_OscConfig+0x5aa>
 8005b34:	e024      	b.n	8005b80 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e01f      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_RCC_OscConfig+0x620>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	025b      	lsls	r3, r3, #9
 8005b54:	401a      	ands	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d10e      	bne.n	8005b7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	220f      	movs	r2, #15
 8005b62:	401a      	ands	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	23f0      	movs	r3, #240	; 0xf0
 8005b70:	039b      	lsls	r3, r3, #14
 8005b72:	401a      	ands	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	0018      	movs	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b008      	add	sp, #32
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	00001388 	.word	0x00001388
 8005b94:	efffffff 	.word	0xefffffff
 8005b98:	feffffff 	.word	0xfeffffff
 8005b9c:	ffc2ffff 	.word	0xffc2ffff

08005ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0b3      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b5b      	ldr	r3, [pc, #364]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d911      	bls.n	8005be6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b58      	ldr	r3, [pc, #352]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4393      	bics	r3, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	4b55      	ldr	r3, [pc, #340]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd4:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4013      	ands	r3, r2
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e09a      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	d015      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d006      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005bfa:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	4b4a      	ldr	r3, [pc, #296]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c00:	21e0      	movs	r1, #224	; 0xe0
 8005c02:	00c9      	lsls	r1, r1, #3
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c08:	4b47      	ldr	r3, [pc, #284]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	22f0      	movs	r2, #240	; 0xf0
 8005c0e:	4393      	bics	r3, r2
 8005c10:	0019      	movs	r1, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4b44      	ldr	r3, [pc, #272]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	4013      	ands	r3, r2
 8005c24:	d040      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2e:	4b3e      	ldr	r3, [pc, #248]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	4013      	ands	r3, r2
 8005c38:	d114      	bne.n	8005c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e06e      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d107      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c46:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	049b      	lsls	r3, r3, #18
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d108      	bne.n	8005c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e062      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c56:	4b34      	ldr	r3, [pc, #208]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e05b      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c64:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	4393      	bics	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c78:	f7fe fbda 	bl	8004430 <HAL_GetTick>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c80:	e009      	b.n	8005c96 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c82:	f7fe fbd5 	bl	8004430 <HAL_GetTick>
 8005c86:	0002      	movs	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <HAL_RCC_ClockConfig+0x18c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e042      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	220c      	movs	r2, #12
 8005c9c:	401a      	ands	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d1ec      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca8:	4b1e      	ldr	r3, [pc, #120]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	4013      	ands	r3, r2
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d211      	bcs.n	8005cda <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4393      	bics	r3, r2
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <HAL_RCC_ClockConfig+0x184>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4013      	ands	r3, r2
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e020      	b.n	8005d1c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2204      	movs	r2, #4
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce4:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a11      	ldr	r2, [pc, #68]	; (8005d30 <HAL_RCC_ClockConfig+0x190>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cf8:	f000 f820 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <HAL_RCC_ClockConfig+0x188>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	220f      	movs	r2, #15
 8005d06:	4013      	ands	r3, r2
 8005d08:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <HAL_RCC_ClockConfig+0x194>)
 8005d0a:	5cd3      	ldrb	r3, [r2, r3]
 8005d0c:	000a      	movs	r2, r1
 8005d0e:	40da      	lsrs	r2, r3
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <HAL_RCC_ClockConfig+0x198>)
 8005d12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005d14:	2003      	movs	r0, #3
 8005d16:	f7fe fb45 	bl	80043a4 <HAL_InitTick>
  
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b004      	add	sp, #16
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40022000 	.word	0x40022000
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	00001388 	.word	0x00001388
 8005d30:	fffff8ff 	.word	0xfffff8ff
 8005d34:	0800d7c4 	.word	0x0800d7c4
 8005d38:	20000024 	.word	0x20000024

08005d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	220c      	movs	r2, #12
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d002      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x30>
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_GetSysClockFreq+0x36>
 8005d6a:	e02c      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d6e:	613b      	str	r3, [r7, #16]
      break;
 8005d70:	e02c      	b.n	8005dcc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	0c9b      	lsrs	r3, r3, #18
 8005d76:	220f      	movs	r2, #15
 8005d78:	4013      	ands	r3, r2
 8005d7a:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005d80:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	220f      	movs	r2, #15
 8005d86:	4013      	ands	r3, r2
 8005d88:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005d8a:	5cd3      	ldrb	r3, [r2, r3]
 8005d8c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	025b      	lsls	r3, r3, #9
 8005d94:	4013      	ands	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4810      	ldr	r0, [pc, #64]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d9c:	f7fa f9d0 	bl	8000140 <__udivsi3>
 8005da0:	0003      	movs	r3, r0
 8005da2:	001a      	movs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4353      	muls	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e009      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	000a      	movs	r2, r1
 8005db0:	0152      	lsls	r2, r2, #5
 8005db2:	1a52      	subs	r2, r2, r1
 8005db4:	0193      	lsls	r3, r2, #6
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	185b      	adds	r3, r3, r1
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	613b      	str	r3, [r7, #16]
      break;
 8005dc4:	e002      	b.n	8005dcc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005dc8:	613b      	str	r3, [r7, #16]
      break;
 8005dca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005dcc:	693b      	ldr	r3, [r7, #16]
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b006      	add	sp, #24
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	007a1200 	.word	0x007a1200
 8005de0:	0800d7dc 	.word	0x0800d7dc
 8005de4:	0800d7ec 	.word	0x0800d7ec

08005de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	20000024 	.word	0x20000024

08005dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005e00:	f7ff fff2 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e04:	0001      	movs	r1, r0
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	2207      	movs	r2, #7
 8005e0e:	4013      	ands	r3, r2
 8005e10:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e12:	5cd3      	ldrb	r3, [r2, r3]
 8005e14:	40d9      	lsrs	r1, r3
 8005e16:	000b      	movs	r3, r1
}    
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	40021000 	.word	0x40021000
 8005e24:	0800d7d4 	.word	0x0800d7d4

08005e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	025b      	lsls	r3, r3, #9
 8005e40:	4013      	ands	r3, r2
 8005e42:	d100      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005e44:	e08e      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2017      	movs	r0, #23
 8005e48:	183b      	adds	r3, r7, r0
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e4e:	4b57      	ldr	r3, [pc, #348]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e50:	69da      	ldr	r2, [r3, #28]
 8005e52:	2380      	movs	r3, #128	; 0x80
 8005e54:	055b      	lsls	r3, r3, #21
 8005e56:	4013      	ands	r3, r2
 8005e58:	d110      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e5a:	4b54      	ldr	r3, [pc, #336]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	0549      	lsls	r1, r1, #21
 8005e64:	430a      	orrs	r2, r1
 8005e66:	61da      	str	r2, [r3, #28]
 8005e68:	4b50      	ldr	r3, [pc, #320]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	055b      	lsls	r3, r3, #21
 8005e70:	4013      	ands	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e76:	183b      	adds	r3, r7, r0
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4013      	ands	r3, r2
 8005e86:	d11a      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e88:	4b49      	ldr	r3, [pc, #292]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b48      	ldr	r3, [pc, #288]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e8e:	2180      	movs	r1, #128	; 0x80
 8005e90:	0049      	lsls	r1, r1, #1
 8005e92:	430a      	orrs	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e96:	f7fe facb 	bl	8004430 <HAL_GetTick>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea0:	f7fe fac6 	bl	8004430 <HAL_GetTick>
 8005ea4:	0002      	movs	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e077      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	23c0      	movs	r3, #192	; 0xc0
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d034      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	23c0      	movs	r3, #192	; 0xc0
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d02c      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ee0:	4b32      	ldr	r3, [pc, #200]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	4a33      	ldr	r2, [pc, #204]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005eec:	6a1a      	ldr	r2, [r3, #32]
 8005eee:	4b2f      	ldr	r3, [pc, #188]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ef0:	2180      	movs	r1, #128	; 0x80
 8005ef2:	0249      	lsls	r1, r1, #9
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef8:	4b2c      	ldr	r3, [pc, #176]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005efe:	492e      	ldr	r1, [pc, #184]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f04:	4b29      	ldr	r3, [pc, #164]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f12:	f7fe fa8d 	bl	8004430 <HAL_GetTick>
 8005f16:	0003      	movs	r3, r0
 8005f18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1a:	e009      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fe fa88 	bl	8004430 <HAL_GetTick>
 8005f20:	0002      	movs	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e038      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f30:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	2202      	movs	r2, #2
 8005f36:	4013      	ands	r3, r2
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	0019      	movs	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4b18      	ldr	r3, [pc, #96]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f4e:	2317      	movs	r3, #23
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f58:	4b14      	ldr	r3, [pc, #80]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f5e:	4918      	ldr	r1, [pc, #96]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005f60:	400a      	ands	r2, r1
 8005f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	2203      	movs	r2, #3
 8005f74:	4393      	bics	r3, r2
 8005f76:	0019      	movs	r1, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2220      	movs	r2, #32
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	2210      	movs	r2, #16
 8005f92:	4393      	bics	r3, r2
 8005f94:	0019      	movs	r1, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	4b04      	ldr	r3, [pc, #16]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b006      	add	sp, #24
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	fffffcff 	.word	0xfffffcff
 8005fb8:	fffeffff 	.word	0xfffeffff
 8005fbc:	00001388 	.word	0x00001388
 8005fc0:	efffffff 	.word	0xefffffff

08005fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e042      	b.n	800605c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	223d      	movs	r2, #61	; 0x3d
 8005fda:	5c9b      	ldrb	r3, [r3, r2]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d107      	bne.n	8005ff2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	223c      	movs	r2, #60	; 0x3c
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7fd ff3b 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	223d      	movs	r2, #61	; 0x3d
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	0019      	movs	r1, r3
 8006004:	0010      	movs	r0, r2
 8006006:	f000 fe5d 	bl	8006cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2246      	movs	r2, #70	; 0x46
 800600e:	2101      	movs	r1, #1
 8006010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	223e      	movs	r2, #62	; 0x3e
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	223f      	movs	r2, #63	; 0x3f
 800601e:	2101      	movs	r1, #1
 8006020:	5499      	strb	r1, [r3, r2]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2240      	movs	r2, #64	; 0x40
 8006026:	2101      	movs	r1, #1
 8006028:	5499      	strb	r1, [r3, r2]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2241      	movs	r2, #65	; 0x41
 800602e:	2101      	movs	r1, #1
 8006030:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2242      	movs	r2, #66	; 0x42
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2243      	movs	r2, #67	; 0x43
 800603e:	2101      	movs	r1, #1
 8006040:	5499      	strb	r1, [r3, r2]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2244      	movs	r2, #68	; 0x44
 8006046:	2101      	movs	r1, #1
 8006048:	5499      	strb	r1, [r3, r2]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2245      	movs	r2, #69	; 0x45
 800604e:	2101      	movs	r1, #1
 8006050:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	223d      	movs	r2, #61	; 0x3d
 8006056:	2101      	movs	r1, #1
 8006058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	223d      	movs	r2, #61	; 0x3d
 8006070:	5c9b      	ldrb	r3, [r3, r2]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d001      	beq.n	800607c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e02d      	b.n	80060d8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	223d      	movs	r2, #61	; 0x3d
 8006080:	2102      	movs	r1, #2
 8006082:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <HAL_TIM_Base_Start+0x7c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_TIM_Base_Start+0x3e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <HAL_TIM_Base_Start+0x80>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_Base_Start+0x3e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <HAL_TIM_Base_Start+0x84>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d111      	bne.n	80060c6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2207      	movs	r2, #7
 80060aa:	4013      	ands	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d010      	beq.n	80060d6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2101      	movs	r1, #1
 80060c0:	430a      	orrs	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	e007      	b.n	80060d6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2101      	movs	r1, #1
 80060d2:	430a      	orrs	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b004      	add	sp, #16
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40014000 	.word	0x40014000

080060ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <HAL_TIM_Base_Stop+0x44>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	d10d      	bne.n	800611c <HAL_TIM_Base_Stop+0x30>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	4a0b      	ldr	r2, [pc, #44]	; (8006134 <HAL_TIM_Base_Stop+0x48>)
 8006108:	4013      	ands	r3, r2
 800610a:	d107      	bne.n	800611c <HAL_TIM_Base_Stop+0x30>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2101      	movs	r1, #1
 8006118:	438a      	bics	r2, r1
 800611a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	223d      	movs	r2, #61	; 0x3d
 8006120:	2101      	movs	r1, #1
 8006122:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b002      	add	sp, #8
 800612c:	bd80      	pop	{r7, pc}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	00001111 	.word	0x00001111
 8006134:	00000444 	.word	0x00000444

08006138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	223d      	movs	r2, #61	; 0x3d
 8006144:	5c9b      	ldrb	r3, [r3, r2]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d001      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e035      	b.n	80061bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	223d      	movs	r2, #61	; 0x3d
 8006154:	2102      	movs	r1, #2
 8006156:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2101      	movs	r1, #1
 8006164:	430a      	orrs	r2, r1
 8006166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <HAL_TIM_Base_Start_IT+0x8c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIM_Base_Start_IT+0x4e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <HAL_TIM_Base_Start_IT+0x90>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIM_Base_Start_IT+0x4e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a12      	ldr	r2, [pc, #72]	; (80061cc <HAL_TIM_Base_Start_IT+0x94>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d111      	bne.n	80061aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2207      	movs	r2, #7
 800618e:	4013      	ands	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b06      	cmp	r3, #6
 8006196:	d010      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2101      	movs	r1, #1
 80061a4:	430a      	orrs	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	e007      	b.n	80061ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2101      	movs	r1, #1
 80061b6:	430a      	orrs	r2, r1
 80061b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b004      	add	sp, #16
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40014000 	.word	0x40014000

080061d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2101      	movs	r1, #1
 80061e4:	438a      	bics	r2, r1
 80061e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <HAL_TIM_Base_Stop_IT+0x54>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	d10d      	bne.n	8006210 <HAL_TIM_Base_Stop_IT+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	4a0b      	ldr	r2, [pc, #44]	; (8006228 <HAL_TIM_Base_Stop_IT+0x58>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	d107      	bne.n	8006210 <HAL_TIM_Base_Stop_IT+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2101      	movs	r1, #1
 800620c:	438a      	bics	r2, r1
 800620e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223d      	movs	r2, #61	; 0x3d
 8006214:	2101      	movs	r1, #1
 8006216:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b002      	add	sp, #8
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	00001111 	.word	0x00001111
 8006228:	00000444 	.word	0x00000444

0800622c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e042      	b.n	80062c4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	223d      	movs	r2, #61	; 0x3d
 8006242:	5c9b      	ldrb	r3, [r3, r2]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d107      	bne.n	800625a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	223c      	movs	r2, #60	; 0x3c
 800624e:	2100      	movs	r1, #0
 8006250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	0018      	movs	r0, r3
 8006256:	f000 f839 	bl	80062cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	223d      	movs	r2, #61	; 0x3d
 800625e:	2102      	movs	r1, #2
 8006260:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	0019      	movs	r1, r3
 800626c:	0010      	movs	r0, r2
 800626e:	f000 fd29 	bl	8006cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2246      	movs	r2, #70	; 0x46
 8006276:	2101      	movs	r1, #1
 8006278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	223e      	movs	r2, #62	; 0x3e
 800627e:	2101      	movs	r1, #1
 8006280:	5499      	strb	r1, [r3, r2]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	223f      	movs	r2, #63	; 0x3f
 8006286:	2101      	movs	r1, #1
 8006288:	5499      	strb	r1, [r3, r2]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	2101      	movs	r1, #1
 8006290:	5499      	strb	r1, [r3, r2]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2241      	movs	r2, #65	; 0x41
 8006296:	2101      	movs	r1, #1
 8006298:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2242      	movs	r2, #66	; 0x42
 800629e:	2101      	movs	r1, #1
 80062a0:	5499      	strb	r1, [r3, r2]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2243      	movs	r2, #67	; 0x43
 80062a6:	2101      	movs	r1, #1
 80062a8:	5499      	strb	r1, [r3, r2]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2244      	movs	r2, #68	; 0x44
 80062ae:	2101      	movs	r1, #1
 80062b0:	5499      	strb	r1, [r3, r2]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2245      	movs	r2, #69	; 0x45
 80062b6:	2101      	movs	r1, #1
 80062b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	223d      	movs	r2, #61	; 0x3d
 80062be:	2101      	movs	r1, #1
 80062c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b002      	add	sp, #8
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e042      	b.n	8006374 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	223d      	movs	r2, #61	; 0x3d
 80062f2:	5c9b      	ldrb	r3, [r3, r2]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	223c      	movs	r2, #60	; 0x3c
 80062fe:	2100      	movs	r1, #0
 8006300:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0018      	movs	r0, r3
 8006306:	f000 f839 	bl	800637c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223d      	movs	r2, #61	; 0x3d
 800630e:	2102      	movs	r1, #2
 8006310:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3304      	adds	r3, #4
 800631a:	0019      	movs	r1, r3
 800631c:	0010      	movs	r0, r2
 800631e:	f000 fcd1 	bl	8006cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2246      	movs	r2, #70	; 0x46
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	223e      	movs	r2, #62	; 0x3e
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	223f      	movs	r2, #63	; 0x3f
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2240      	movs	r2, #64	; 0x40
 800633e:	2101      	movs	r1, #1
 8006340:	5499      	strb	r1, [r3, r2]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2241      	movs	r2, #65	; 0x41
 8006346:	2101      	movs	r1, #1
 8006348:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2242      	movs	r2, #66	; 0x42
 800634e:	2101      	movs	r1, #1
 8006350:	5499      	strb	r1, [r3, r2]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2243      	movs	r2, #67	; 0x43
 8006356:	2101      	movs	r1, #1
 8006358:	5499      	strb	r1, [r3, r2]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2244      	movs	r2, #68	; 0x44
 800635e:	2101      	movs	r1, #1
 8006360:	5499      	strb	r1, [r3, r2]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2245      	movs	r2, #69	; 0x45
 8006366:	2101      	movs	r1, #1
 8006368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	223d      	movs	r2, #61	; 0x3d
 800636e:	2101      	movs	r1, #1
 8006370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	0018      	movs	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	b002      	add	sp, #8
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b002      	add	sp, #8
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <HAL_TIM_PWM_Start+0x22>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	223e      	movs	r2, #62	; 0x3e
 80063a0:	5c9b      	ldrb	r3, [r3, r2]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	1e5a      	subs	r2, r3, #1
 80063a8:	4193      	sbcs	r3, r2
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	e01f      	b.n	80063ee <HAL_TIM_PWM_Start+0x62>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d108      	bne.n	80063c6 <HAL_TIM_PWM_Start+0x3a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	223f      	movs	r2, #63	; 0x3f
 80063b8:	5c9b      	ldrb	r3, [r3, r2]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	1e5a      	subs	r2, r3, #1
 80063c0:	4193      	sbcs	r3, r2
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	e013      	b.n	80063ee <HAL_TIM_PWM_Start+0x62>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d108      	bne.n	80063de <HAL_TIM_PWM_Start+0x52>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	5c9b      	ldrb	r3, [r3, r2]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	4193      	sbcs	r3, r2
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	e007      	b.n	80063ee <HAL_TIM_PWM_Start+0x62>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2241      	movs	r2, #65	; 0x41
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	1e5a      	subs	r2, r3, #1
 80063ea:	4193      	sbcs	r3, r2
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e06e      	b.n	80064d4 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Start+0x7a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	223e      	movs	r2, #62	; 0x3e
 8006400:	2102      	movs	r1, #2
 8006402:	5499      	strb	r1, [r3, r2]
 8006404:	e013      	b.n	800642e <HAL_TIM_PWM_Start+0xa2>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Start+0x8a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	223f      	movs	r2, #63	; 0x3f
 8006410:	2102      	movs	r1, #2
 8006412:	5499      	strb	r1, [r3, r2]
 8006414:	e00b      	b.n	800642e <HAL_TIM_PWM_Start+0xa2>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d104      	bne.n	8006426 <HAL_TIM_PWM_Start+0x9a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2240      	movs	r2, #64	; 0x40
 8006420:	2102      	movs	r1, #2
 8006422:	5499      	strb	r1, [r3, r2]
 8006424:	e003      	b.n	800642e <HAL_TIM_PWM_Start+0xa2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2241      	movs	r2, #65	; 0x41
 800642a:	2102      	movs	r1, #2
 800642c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	2201      	movs	r2, #1
 8006436:	0018      	movs	r0, r3
 8006438:	f000 ffe2 	bl	8007400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a26      	ldr	r2, [pc, #152]	; (80064dc <HAL_TIM_PWM_Start+0x150>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_TIM_PWM_Start+0xd8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a25      	ldr	r2, [pc, #148]	; (80064e0 <HAL_TIM_PWM_Start+0x154>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_TIM_PWM_Start+0xd8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a23      	ldr	r2, [pc, #140]	; (80064e4 <HAL_TIM_PWM_Start+0x158>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_TIM_PWM_Start+0xd8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a22      	ldr	r2, [pc, #136]	; (80064e8 <HAL_TIM_PWM_Start+0x15c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d101      	bne.n	8006468 <HAL_TIM_PWM_Start+0xdc>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_TIM_PWM_Start+0xde>
 8006468:	2300      	movs	r3, #0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2180      	movs	r1, #128	; 0x80
 800647a:	0209      	lsls	r1, r1, #8
 800647c:	430a      	orrs	r2, r1
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_TIM_PWM_Start+0x150>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIM_PWM_Start+0x112>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a17      	ldr	r2, [pc, #92]	; (80064ec <HAL_TIM_PWM_Start+0x160>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIM_PWM_Start+0x112>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <HAL_TIM_PWM_Start+0x154>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d111      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2207      	movs	r2, #7
 80064a6:	4013      	ands	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b06      	cmp	r3, #6
 80064ae:	d010      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2101      	movs	r1, #1
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	e007      	b.n	80064d2 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2101      	movs	r1, #1
 80064ce:	430a      	orrs	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	0018      	movs	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	b004      	add	sp, #16
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800
 80064ec:	40000400 	.word	0x40000400

080064f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	0018      	movs	r0, r3
 8006504:	f000 ff7c 	bl	8007400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2f      	ldr	r2, [pc, #188]	; (80065cc <HAL_TIM_PWM_Stop+0xdc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x40>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <HAL_TIM_PWM_Stop+0xe0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2c      	ldr	r2, [pc, #176]	; (80065d4 <HAL_TIM_PWM_Stop+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x40>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <HAL_TIM_PWM_Stop+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d101      	bne.n	8006534 <HAL_TIM_PWM_Stop+0x44>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <HAL_TIM_PWM_Stop+0x46>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d013      	beq.n	8006562 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4a26      	ldr	r2, [pc, #152]	; (80065dc <HAL_TIM_PWM_Stop+0xec>)
 8006542:	4013      	ands	r3, r2
 8006544:	d10d      	bne.n	8006562 <HAL_TIM_PWM_Stop+0x72>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	4a24      	ldr	r2, [pc, #144]	; (80065e0 <HAL_TIM_PWM_Stop+0xf0>)
 800654e:	4013      	ands	r3, r2
 8006550:	d107      	bne.n	8006562 <HAL_TIM_PWM_Stop+0x72>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4921      	ldr	r1, [pc, #132]	; (80065e4 <HAL_TIM_PWM_Stop+0xf4>)
 800655e:	400a      	ands	r2, r1
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_TIM_PWM_Stop+0xec>)
 800656a:	4013      	ands	r3, r2
 800656c:	d10d      	bne.n	800658a <HAL_TIM_PWM_Stop+0x9a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <HAL_TIM_PWM_Stop+0xf0>)
 8006576:	4013      	ands	r3, r2
 8006578:	d107      	bne.n	800658a <HAL_TIM_PWM_Stop+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2101      	movs	r1, #1
 8006586:	438a      	bics	r2, r1
 8006588:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <HAL_TIM_PWM_Stop+0xaa>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	223e      	movs	r2, #62	; 0x3e
 8006594:	2101      	movs	r1, #1
 8006596:	5499      	strb	r1, [r3, r2]
 8006598:	e013      	b.n	80065c2 <HAL_TIM_PWM_Stop+0xd2>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b04      	cmp	r3, #4
 800659e:	d104      	bne.n	80065aa <HAL_TIM_PWM_Stop+0xba>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	223f      	movs	r2, #63	; 0x3f
 80065a4:	2101      	movs	r1, #1
 80065a6:	5499      	strb	r1, [r3, r2]
 80065a8:	e00b      	b.n	80065c2 <HAL_TIM_PWM_Stop+0xd2>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d104      	bne.n	80065ba <HAL_TIM_PWM_Stop+0xca>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2240      	movs	r2, #64	; 0x40
 80065b4:	2101      	movs	r1, #1
 80065b6:	5499      	strb	r1, [r3, r2]
 80065b8:	e003      	b.n	80065c2 <HAL_TIM_PWM_Stop+0xd2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2241      	movs	r2, #65	; 0x41
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b002      	add	sp, #8
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800
 80065dc:	00001111 	.word	0x00001111
 80065e0:	00000444 	.word	0x00000444
 80065e4:	ffff7fff 	.word	0xffff7fff

080065e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2202      	movs	r2, #2
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d124      	bne.n	8006648 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2202      	movs	r2, #2
 8006606:	4013      	ands	r3, r2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d11d      	bne.n	8006648 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2203      	movs	r2, #3
 8006612:	4252      	negs	r2, r2
 8006614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	2203      	movs	r2, #3
 8006624:	4013      	ands	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	0018      	movs	r0, r3
 800662c:	f000 fb32 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 8006630:	e007      	b.n	8006642 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0018      	movs	r0, r3
 8006636:	f000 fb25 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	0018      	movs	r0, r3
 800663e:	f000 fb31 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2204      	movs	r2, #4
 8006650:	4013      	ands	r3, r2
 8006652:	2b04      	cmp	r3, #4
 8006654:	d125      	bne.n	80066a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2204      	movs	r2, #4
 800665e:	4013      	ands	r3, r2
 8006660:	2b04      	cmp	r3, #4
 8006662:	d11e      	bne.n	80066a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2205      	movs	r2, #5
 800666a:	4252      	negs	r2, r2
 800666c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	23c0      	movs	r3, #192	; 0xc0
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4013      	ands	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0018      	movs	r0, r3
 8006686:	f000 fb05 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 800668a:	e007      	b.n	800669c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 faf8 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	0018      	movs	r0, r3
 8006698:	f000 fb04 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2208      	movs	r2, #8
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d124      	bne.n	80066fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2208      	movs	r2, #8
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d11d      	bne.n	80066fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2209      	movs	r2, #9
 80066c4:	4252      	negs	r2, r2
 80066c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2204      	movs	r2, #4
 80066cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2203      	movs	r2, #3
 80066d6:	4013      	ands	r3, r2
 80066d8:	d004      	beq.n	80066e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 fad9 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 80066e2:	e007      	b.n	80066f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f000 facc 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	0018      	movs	r0, r3
 80066f0:	f000 fad8 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2210      	movs	r2, #16
 8006702:	4013      	ands	r3, r2
 8006704:	2b10      	cmp	r3, #16
 8006706:	d125      	bne.n	8006754 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2210      	movs	r2, #16
 8006710:	4013      	ands	r3, r2
 8006712:	2b10      	cmp	r3, #16
 8006714:	d11e      	bne.n	8006754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2211      	movs	r2, #17
 800671c:	4252      	negs	r2, r2
 800671e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	23c0      	movs	r3, #192	; 0xc0
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4013      	ands	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	0018      	movs	r0, r3
 8006738:	f000 faac 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 800673c:	e007      	b.n	800674e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0018      	movs	r0, r3
 8006742:	f000 fa9f 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	0018      	movs	r0, r3
 800674a:	f000 faab 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2201      	movs	r2, #1
 800675c:	4013      	ands	r3, r2
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10f      	bne.n	8006782 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	4013      	ands	r3, r2
 800676c:	2b01      	cmp	r3, #1
 800676e:	d108      	bne.n	8006782 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2202      	movs	r2, #2
 8006776:	4252      	negs	r2, r2
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0018      	movs	r0, r3
 800677e:	f7fc fa01 	bl	8002b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2280      	movs	r2, #128	; 0x80
 800678a:	4013      	ands	r3, r2
 800678c:	2b80      	cmp	r3, #128	; 0x80
 800678e:	d10f      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	4013      	ands	r3, r2
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	d108      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2281      	movs	r2, #129	; 0x81
 80067a4:	4252      	negs	r2, r2
 80067a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f000 ff0a 	bl	80075c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d10f      	bne.n	80067de <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2240      	movs	r2, #64	; 0x40
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b40      	cmp	r3, #64	; 0x40
 80067ca:	d108      	bne.n	80067de <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2241      	movs	r2, #65	; 0x41
 80067d2:	4252      	negs	r2, r2
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 fa6b 	bl	8006cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2220      	movs	r2, #32
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d10f      	bne.n	800680c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d108      	bne.n	800680c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2221      	movs	r2, #33	; 0x21
 8006800:	4252      	negs	r2, r2
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0018      	movs	r0, r3
 8006808:	f000 fed4 	bl	80075b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800680c:	46c0      	nop			; (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b002      	add	sp, #8
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	2317      	movs	r3, #23
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	223c      	movs	r2, #60	; 0x3c
 800682c:	5c9b      	ldrb	r3, [r3, r2]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_TIM_OC_ConfigChannel+0x22>
 8006832:	2302      	movs	r3, #2
 8006834:	e042      	b.n	80068bc <HAL_TIM_OC_ConfigChannel+0xa8>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	223c      	movs	r2, #60	; 0x3c
 800683a:	2101      	movs	r1, #1
 800683c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b0c      	cmp	r3, #12
 8006842:	d027      	beq.n	8006894 <HAL_TIM_OC_ConfigChannel+0x80>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b0c      	cmp	r3, #12
 8006848:	d82c      	bhi.n	80068a4 <HAL_TIM_OC_ConfigChannel+0x90>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d019      	beq.n	8006884 <HAL_TIM_OC_ConfigChannel+0x70>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b08      	cmp	r3, #8
 8006854:	d826      	bhi.n	80068a4 <HAL_TIM_OC_ConfigChannel+0x90>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_TIM_OC_ConfigChannel+0x50>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b04      	cmp	r3, #4
 8006860:	d008      	beq.n	8006874 <HAL_TIM_OC_ConfigChannel+0x60>
 8006862:	e01f      	b.n	80068a4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	0011      	movs	r1, r2
 800686c:	0018      	movs	r0, r3
 800686e:	f000 fa9f 	bl	8006db0 <TIM_OC1_SetConfig>
      break;
 8006872:	e01c      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f000 fb1f 	bl	8006ec0 <TIM_OC2_SetConfig>
      break;
 8006882:	e014      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	0011      	movs	r1, r2
 800688c:	0018      	movs	r0, r3
 800688e:	f000 fb9b 	bl	8006fc8 <TIM_OC3_SetConfig>
      break;
 8006892:	e00c      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f000 fc19 	bl	80070d4 <TIM_OC4_SetConfig>
      break;
 80068a2:	e004      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80068a4:	2317      	movs	r3, #23
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
      break;
 80068ac:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	223c      	movs	r2, #60	; 0x3c
 80068b2:	2100      	movs	r1, #0
 80068b4:	5499      	strb	r1, [r3, r2]

  return status;
 80068b6:	2317      	movs	r3, #23
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	781b      	ldrb	r3, [r3, #0]
}
 80068bc:	0018      	movs	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	b006      	add	sp, #24
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d0:	2317      	movs	r3, #23
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	223c      	movs	r2, #60	; 0x3c
 80068dc:	5c9b      	ldrb	r3, [r3, r2]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e0ad      	b.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	223c      	movs	r2, #60	; 0x3c
 80068ea:	2101      	movs	r1, #1
 80068ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b0c      	cmp	r3, #12
 80068f2:	d100      	bne.n	80068f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80068f4:	e076      	b.n	80069e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	d900      	bls.n	80068fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80068fc:	e095      	b.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x166>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d04e      	beq.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b08      	cmp	r3, #8
 8006908:	d900      	bls.n	800690c <HAL_TIM_PWM_ConfigChannel+0x48>
 800690a:	e08e      	b.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x166>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_PWM_ConfigChannel+0x56>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d021      	beq.n	800695c <HAL_TIM_PWM_ConfigChannel+0x98>
 8006918:	e087      	b.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	0011      	movs	r1, r2
 8006922:	0018      	movs	r0, r3
 8006924:	f000 fa44 	bl	8006db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2108      	movs	r1, #8
 8006934:	430a      	orrs	r2, r1
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2104      	movs	r1, #4
 8006944:	438a      	bics	r2, r1
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	619a      	str	r2, [r3, #24]
      break;
 800695a:	e06b      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	0011      	movs	r1, r2
 8006964:	0018      	movs	r0, r3
 8006966:	f000 faab 	bl	8006ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2180      	movs	r1, #128	; 0x80
 8006976:	0109      	lsls	r1, r1, #4
 8006978:	430a      	orrs	r2, r1
 800697a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4931      	ldr	r1, [pc, #196]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006988:	400a      	ands	r2, r1
 800698a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6999      	ldr	r1, [r3, #24]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	619a      	str	r2, [r3, #24]
      break;
 80069a0:	e048      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	0011      	movs	r1, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 fb0c 	bl	8006fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69da      	ldr	r2, [r3, #28]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2108      	movs	r1, #8
 80069bc:	430a      	orrs	r2, r1
 80069be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2104      	movs	r1, #4
 80069cc:	438a      	bics	r2, r1
 80069ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69d9      	ldr	r1, [r3, #28]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	61da      	str	r2, [r3, #28]
      break;
 80069e2:	e027      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	0011      	movs	r1, r2
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 fb71 	bl	80070d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	0109      	lsls	r1, r1, #4
 8006a00:	430a      	orrs	r2, r1
 8006a02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	490f      	ldr	r1, [pc, #60]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006a10:	400a      	ands	r2, r1
 8006a12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69d9      	ldr	r1, [r3, #28]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	61da      	str	r2, [r3, #28]
      break;
 8006a28:	e004      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006a2a:	2317      	movs	r3, #23
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	223c      	movs	r2, #60	; 0x3c
 8006a38:	2100      	movs	r1, #0
 8006a3a:	5499      	strb	r1, [r3, r2]

  return status;
 8006a3c:	2317      	movs	r3, #23
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	781b      	ldrb	r3, [r3, #0]
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b006      	add	sp, #24
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	fffffbff 	.word	0xfffffbff

08006a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5a:	230f      	movs	r3, #15
 8006a5c:	18fb      	adds	r3, r7, r3
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	223c      	movs	r2, #60	; 0x3c
 8006a66:	5c9b      	ldrb	r3, [r3, r2]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIM_ConfigClockSource+0x20>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0bc      	b.n	8006bea <HAL_TIM_ConfigClockSource+0x19a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	223c      	movs	r2, #60	; 0x3c
 8006a74:	2101      	movs	r1, #1
 8006a76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	223d      	movs	r2, #61	; 0x3d
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2277      	movs	r2, #119	; 0x77
 8006a8c:	4393      	bics	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a58      	ldr	r2, [pc, #352]	; (8006bf4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2280      	movs	r2, #128	; 0x80
 8006aa6:	0192      	lsls	r2, r2, #6
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d040      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0xde>
 8006aac:	2280      	movs	r2, #128	; 0x80
 8006aae:	0192      	lsls	r2, r2, #6
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d900      	bls.n	8006ab6 <HAL_TIM_ConfigClockSource+0x66>
 8006ab4:	e088      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	0152      	lsls	r2, r2, #5
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <HAL_TIM_ConfigClockSource+0x70>
 8006abe:	e088      	b.n	8006bd2 <HAL_TIM_ConfigClockSource+0x182>
 8006ac0:	2280      	movs	r2, #128	; 0x80
 8006ac2:	0152      	lsls	r2, r2, #5
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d900      	bls.n	8006aca <HAL_TIM_ConfigClockSource+0x7a>
 8006ac8:	e07e      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006aca:	2b70      	cmp	r3, #112	; 0x70
 8006acc:	d018      	beq.n	8006b00 <HAL_TIM_ConfigClockSource+0xb0>
 8006ace:	d900      	bls.n	8006ad2 <HAL_TIM_ConfigClockSource+0x82>
 8006ad0:	e07a      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006ad2:	2b60      	cmp	r3, #96	; 0x60
 8006ad4:	d04f      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0x126>
 8006ad6:	d900      	bls.n	8006ada <HAL_TIM_ConfigClockSource+0x8a>
 8006ad8:	e076      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006ada:	2b50      	cmp	r3, #80	; 0x50
 8006adc:	d03b      	beq.n	8006b56 <HAL_TIM_ConfigClockSource+0x106>
 8006ade:	d900      	bls.n	8006ae2 <HAL_TIM_ConfigClockSource+0x92>
 8006ae0:	e072      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d057      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x146>
 8006ae6:	d900      	bls.n	8006aea <HAL_TIM_ConfigClockSource+0x9a>
 8006ae8:	e06e      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006aea:	2b30      	cmp	r3, #48	; 0x30
 8006aec:	d063      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x166>
 8006aee:	d86b      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d060      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x166>
 8006af4:	d868      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d05d      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x166>
 8006afa:	2b10      	cmp	r3, #16
 8006afc:	d05b      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x166>
 8006afe:	e063      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	6899      	ldr	r1, [r3, #8]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f000 fc56 	bl	80073c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2277      	movs	r2, #119	; 0x77
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	609a      	str	r2, [r3, #8]
      break;
 8006b2c:	e052      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f000 fc3f 	bl	80073c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2180      	movs	r1, #128	; 0x80
 8006b4e:	01c9      	lsls	r1, r1, #7
 8006b50:	430a      	orrs	r2, r1
 8006b52:	609a      	str	r2, [r3, #8]
      break;
 8006b54:	e03e      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6859      	ldr	r1, [r3, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	001a      	movs	r2, r3
 8006b64:	f000 fbb2 	bl	80072cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2150      	movs	r1, #80	; 0x50
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f000 fc0c 	bl	800738c <TIM_ITRx_SetConfig>
      break;
 8006b74:	e02e      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	001a      	movs	r2, r3
 8006b84:	f000 fbd0 	bl	8007328 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2160      	movs	r1, #96	; 0x60
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f000 fbfc 	bl	800738c <TIM_ITRx_SetConfig>
      break;
 8006b94:	e01e      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6859      	ldr	r1, [r3, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	f000 fb92 	bl	80072cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2140      	movs	r1, #64	; 0x40
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f000 fbec 	bl	800738c <TIM_ITRx_SetConfig>
      break;
 8006bb4:	e00e      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	0019      	movs	r1, r3
 8006bc0:	0010      	movs	r0, r2
 8006bc2:	f000 fbe3 	bl	800738c <TIM_ITRx_SetConfig>
      break;
 8006bc6:	e005      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006bc8:	230f      	movs	r3, #15
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	2201      	movs	r2, #1
 8006bce:	701a      	strb	r2, [r3, #0]
      break;
 8006bd0:	e000      	b.n	8006bd4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006bd2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	223d      	movs	r2, #61	; 0x3d
 8006bd8:	2101      	movs	r1, #1
 8006bda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	223c      	movs	r2, #60	; 0x3c
 8006be0:	2100      	movs	r1, #0
 8006be2:	5499      	strb	r1, [r3, r2]

  return status;
 8006be4:	230f      	movs	r3, #15
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	781b      	ldrb	r3, [r3, #0]
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b004      	add	sp, #16
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	ffff00ff 	.word	0xffff00ff

08006bf8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	223c      	movs	r2, #60	; 0x3c
 8006c06:	5c9b      	ldrb	r3, [r3, r2]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e032      	b.n	8006c76 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	223c      	movs	r2, #60	; 0x3c
 8006c14:	2101      	movs	r1, #1
 8006c16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	223d      	movs	r2, #61	; 0x3d
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0011      	movs	r1, r2
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 fabe 	bl	80071a8 <TIM_SlaveTimer_SetConfig>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d009      	beq.n	8006c44 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	223d      	movs	r2, #61	; 0x3d
 8006c34:	2101      	movs	r1, #1
 8006c36:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	223c      	movs	r2, #60	; 0x3c
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e018      	b.n	8006c76 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2140      	movs	r1, #64	; 0x40
 8006c50:	438a      	bics	r2, r1
 8006c52:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4908      	ldr	r1, [pc, #32]	; (8006c80 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8006c60:	400a      	ands	r2, r1
 8006c62:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	223d      	movs	r2, #61	; 0x3d
 8006c68:	2101      	movs	r1, #1
 8006c6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	223c      	movs	r2, #60	; 0x3c
 8006c70:	2100      	movs	r1, #0
 8006c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	0018      	movs	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b002      	add	sp, #8
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	ffffbfff 	.word	0xffffbfff

08006c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b002      	add	sp, #8
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a2f      	ldr	r2, [pc, #188]	; (8006d94 <TIM_Base_SetConfig+0xd0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_Base_SetConfig+0x20>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a2e      	ldr	r2, [pc, #184]	; (8006d98 <TIM_Base_SetConfig+0xd4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d108      	bne.n	8006cf6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2270      	movs	r2, #112	; 0x70
 8006ce8:	4393      	bics	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <TIM_Base_SetConfig+0xd0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <TIM_Base_SetConfig+0x62>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a25      	ldr	r2, [pc, #148]	; (8006d98 <TIM_Base_SetConfig+0xd4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00f      	beq.n	8006d26 <TIM_Base_SetConfig+0x62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a24      	ldr	r2, [pc, #144]	; (8006d9c <TIM_Base_SetConfig+0xd8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00b      	beq.n	8006d26 <TIM_Base_SetConfig+0x62>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <TIM_Base_SetConfig+0xdc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <TIM_Base_SetConfig+0x62>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <TIM_Base_SetConfig+0xe0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_Base_SetConfig+0x62>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a21      	ldr	r2, [pc, #132]	; (8006da8 <TIM_Base_SetConfig+0xe4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d108      	bne.n	8006d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a20      	ldr	r2, [pc, #128]	; (8006dac <TIM_Base_SetConfig+0xe8>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2280      	movs	r2, #128	; 0x80
 8006d3c:	4393      	bics	r3, r2
 8006d3e:	001a      	movs	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <TIM_Base_SetConfig+0xd0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <TIM_Base_SetConfig+0xba>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <TIM_Base_SetConfig+0xdc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <TIM_Base_SetConfig+0xba>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <TIM_Base_SetConfig+0xe0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d003      	beq.n	8006d7e <TIM_Base_SetConfig+0xba>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a0b      	ldr	r2, [pc, #44]	; (8006da8 <TIM_Base_SetConfig+0xe4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d103      	bne.n	8006d86 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	615a      	str	r2, [r3, #20]
}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40002000 	.word	0x40002000
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800
 8006dac:	fffffcff 	.word	0xfffffcff

08006db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4393      	bics	r3, r2
 8006dc2:	001a      	movs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2270      	movs	r2, #112	; 0x70
 8006dde:	4393      	bics	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2203      	movs	r2, #3
 8006de6:	4393      	bics	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2202      	movs	r2, #2
 8006df8:	4393      	bics	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a27      	ldr	r2, [pc, #156]	; (8006ea8 <TIM_OC1_SetConfig+0xf8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00b      	beq.n	8006e26 <TIM_OC1_SetConfig+0x76>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a26      	ldr	r2, [pc, #152]	; (8006eac <TIM_OC1_SetConfig+0xfc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_OC1_SetConfig+0x76>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <TIM_OC1_SetConfig+0x100>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC1_SetConfig+0x76>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <TIM_OC1_SetConfig+0x104>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10c      	bne.n	8006e40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	4393      	bics	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	4393      	bics	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <TIM_OC1_SetConfig+0xf8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00b      	beq.n	8006e60 <TIM_OC1_SetConfig+0xb0>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a18      	ldr	r2, [pc, #96]	; (8006eac <TIM_OC1_SetConfig+0xfc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_OC1_SetConfig+0xb0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <TIM_OC1_SetConfig+0x100>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC1_SetConfig+0xb0>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <TIM_OC1_SetConfig+0x104>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d111      	bne.n	8006e84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <TIM_OC1_SetConfig+0x108>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <TIM_OC1_SetConfig+0x10c>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b006      	add	sp, #24
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800
 8006eb8:	fffffeff 	.word	0xfffffeff
 8006ebc:	fffffdff 	.word	0xfffffdff

08006ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	2210      	movs	r2, #16
 8006ed0:	4393      	bics	r3, r2
 8006ed2:	001a      	movs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a2e      	ldr	r2, [pc, #184]	; (8006fa8 <TIM_OC2_SetConfig+0xe8>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a2d      	ldr	r2, [pc, #180]	; (8006fac <TIM_OC2_SetConfig+0xec>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	4393      	bics	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <TIM_OC2_SetConfig+0xf0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10d      	bne.n	8006f3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2280      	movs	r2, #128	; 0x80
 8006f26:	4393      	bics	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2240      	movs	r2, #64	; 0x40
 8006f3a:	4393      	bics	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <TIM_OC2_SetConfig+0xf0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_OC2_SetConfig+0x9e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1a      	ldr	r2, [pc, #104]	; (8006fb4 <TIM_OC2_SetConfig+0xf4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC2_SetConfig+0x9e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a19      	ldr	r2, [pc, #100]	; (8006fb8 <TIM_OC2_SetConfig+0xf8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC2_SetConfig+0x9e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <TIM_OC2_SetConfig+0xfc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d113      	bne.n	8006f86 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <TIM_OC2_SetConfig+0x100>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <TIM_OC2_SetConfig+0x104>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b006      	add	sp, #24
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	ffff8fff 	.word	0xffff8fff
 8006fac:	fffffcff 	.word	0xfffffcff
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	fffffbff 	.word	0xfffffbff
 8006fc4:	fffff7ff 	.word	0xfffff7ff

08006fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	4a35      	ldr	r2, [pc, #212]	; (80070ac <TIM_OC3_SetConfig+0xe4>)
 8006fd8:	401a      	ands	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2270      	movs	r2, #112	; 0x70
 8006ff4:	4393      	bics	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	4393      	bics	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4a28      	ldr	r2, [pc, #160]	; (80070b0 <TIM_OC3_SetConfig+0xe8>)
 800700e:	4013      	ands	r3, r2
 8007010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a24      	ldr	r2, [pc, #144]	; (80070b4 <TIM_OC3_SetConfig+0xec>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10d      	bne.n	8007042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	4a23      	ldr	r2, [pc, #140]	; (80070b8 <TIM_OC3_SetConfig+0xf0>)
 800702a:	4013      	ands	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <TIM_OC3_SetConfig+0xf4>)
 800703e:	4013      	ands	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <TIM_OC3_SetConfig+0xec>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC3_SetConfig+0x9a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <TIM_OC3_SetConfig+0xf8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC3_SetConfig+0x9a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <TIM_OC3_SetConfig+0xfc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC3_SetConfig+0x9a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1a      	ldr	r2, [pc, #104]	; (80070c8 <TIM_OC3_SetConfig+0x100>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d113      	bne.n	800708a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4a19      	ldr	r2, [pc, #100]	; (80070cc <TIM_OC3_SetConfig+0x104>)
 8007066:	4013      	ands	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <TIM_OC3_SetConfig+0x108>)
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b006      	add	sp, #24
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	fffffeff 	.word	0xfffffeff
 80070b0:	fffffdff 	.word	0xfffffdff
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	fffff7ff 	.word	0xfffff7ff
 80070bc:	fffffbff 	.word	0xfffffbff
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800
 80070cc:	ffffefff 	.word	0xffffefff
 80070d0:	ffffdfff 	.word	0xffffdfff

080070d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	4a28      	ldr	r2, [pc, #160]	; (8007184 <TIM_OC4_SetConfig+0xb0>)
 80070e4:	401a      	ands	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a22      	ldr	r2, [pc, #136]	; (8007188 <TIM_OC4_SetConfig+0xb4>)
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a21      	ldr	r2, [pc, #132]	; (800718c <TIM_OC4_SetConfig+0xb8>)
 8007108:	4013      	ands	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4a1d      	ldr	r2, [pc, #116]	; (8007190 <TIM_OC4_SetConfig+0xbc>)
 800711c:	4013      	ands	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	031b      	lsls	r3, r3, #12
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a19      	ldr	r2, [pc, #100]	; (8007194 <TIM_OC4_SetConfig+0xc0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_OC4_SetConfig+0x78>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <TIM_OC4_SetConfig+0xc4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_OC4_SetConfig+0x78>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <TIM_OC4_SetConfig+0xc8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC4_SetConfig+0x78>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <TIM_OC4_SetConfig+0xcc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d109      	bne.n	8007160 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <TIM_OC4_SetConfig+0xd0>)
 8007150:	4013      	ands	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	46bd      	mov	sp, r7
 800717e:	b006      	add	sp, #24
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	ffffefff 	.word	0xffffefff
 8007188:	ffff8fff 	.word	0xffff8fff
 800718c:	fffffcff 	.word	0xfffffcff
 8007190:	ffffdfff 	.word	0xffffdfff
 8007194:	40012c00 	.word	0x40012c00
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800
 80071a4:	ffffbfff 	.word	0xffffbfff

080071a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071b2:	2317      	movs	r3, #23
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2270      	movs	r2, #112	; 0x70
 80071c6:	4393      	bics	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2207      	movs	r2, #7
 80071d8:	4393      	bics	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b70      	cmp	r3, #112	; 0x70
 80071f4:	d015      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x7a>
 80071f6:	d900      	bls.n	80071fa <TIM_SlaveTimer_SetConfig+0x52>
 80071f8:	e05b      	b.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
 80071fa:	2b60      	cmp	r3, #96	; 0x60
 80071fc:	d04f      	beq.n	800729e <TIM_SlaveTimer_SetConfig+0xf6>
 80071fe:	d858      	bhi.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
 8007200:	2b50      	cmp	r3, #80	; 0x50
 8007202:	d042      	beq.n	800728a <TIM_SlaveTimer_SetConfig+0xe2>
 8007204:	d855      	bhi.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d016      	beq.n	8007238 <TIM_SlaveTimer_SetConfig+0x90>
 800720a:	d852      	bhi.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
 800720c:	2b30      	cmp	r3, #48	; 0x30
 800720e:	d055      	beq.n	80072bc <TIM_SlaveTimer_SetConfig+0x114>
 8007210:	d84f      	bhi.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d052      	beq.n	80072bc <TIM_SlaveTimer_SetConfig+0x114>
 8007216:	d84c      	bhi.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d04f      	beq.n	80072bc <TIM_SlaveTimer_SetConfig+0x114>
 800721c:	2b10      	cmp	r3, #16
 800721e:	d04d      	beq.n	80072bc <TIM_SlaveTimer_SetConfig+0x114>
 8007220:	e047      	b.n	80072b2 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68d9      	ldr	r1, [r3, #12]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f000 f8c5 	bl	80073c0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007236:	e042      	b.n	80072be <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b05      	cmp	r3, #5
 800723e:	d101      	bne.n	8007244 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e03f      	b.n	80072c4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a1a      	ldr	r2, [r3, #32]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2101      	movs	r1, #1
 8007258:	438a      	bics	r2, r1
 800725a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	22f0      	movs	r2, #240	; 0xf0
 8007268:	4393      	bics	r3, r2
 800726a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4313      	orrs	r3, r2
 8007276:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	621a      	str	r2, [r3, #32]
      break;
 8007288:	e019      	b.n	80072be <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6899      	ldr	r1, [r3, #8]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	001a      	movs	r2, r3
 8007298:	f000 f818 	bl	80072cc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800729c:	e00f      	b.n	80072be <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6899      	ldr	r1, [r3, #8]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	001a      	movs	r2, r3
 80072ac:	f000 f83c 	bl	8007328 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072b0:	e005      	b.n	80072be <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80072b2:	2317      	movs	r3, #23
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
      break;
 80072ba:	e000      	b.n	80072be <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80072bc:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80072be:	2317      	movs	r3, #23
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	781b      	ldrb	r3, [r3, #0]
}
 80072c4:	0018      	movs	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b006      	add	sp, #24
 80072ca:	bd80      	pop	{r7, pc}

080072cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	2201      	movs	r2, #1
 80072e4:	4393      	bics	r3, r2
 80072e6:	001a      	movs	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	22f0      	movs	r2, #240	; 0xf0
 80072f6:	4393      	bics	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	220a      	movs	r2, #10
 8007308:	4393      	bics	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	621a      	str	r2, [r3, #32]
}
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	b006      	add	sp, #24
 8007326:	bd80      	pop	{r7, pc}

08007328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	2210      	movs	r2, #16
 800733a:	4393      	bics	r3, r2
 800733c:	001a      	movs	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4a0d      	ldr	r2, [pc, #52]	; (8007388 <TIM_TI2_ConfigInputStage+0x60>)
 8007352:	4013      	ands	r3, r2
 8007354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	22a0      	movs	r2, #160	; 0xa0
 8007364:	4393      	bics	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	b006      	add	sp, #24
 8007384:	bd80      	pop	{r7, pc}
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	ffff0fff 	.word	0xffff0fff

0800738c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2270      	movs	r2, #112	; 0x70
 80073a0:	4393      	bics	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	2207      	movs	r2, #7
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	609a      	str	r2, [r3, #8]
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b004      	add	sp, #16
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <TIM_ETR_SetConfig+0x3c>)
 80073d8:	4013      	ands	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b006      	add	sp, #24
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	ffff00ff 	.word	0xffff00ff

08007400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	221f      	movs	r2, #31
 8007410:	4013      	ands	r3, r2
 8007412:	2201      	movs	r2, #1
 8007414:	409a      	lsls	r2, r3
 8007416:	0013      	movs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	43d2      	mvns	r2, r2
 8007422:	401a      	ands	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a1a      	ldr	r2, [r3, #32]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	211f      	movs	r1, #31
 8007430:	400b      	ands	r3, r1
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4099      	lsls	r1, r3
 8007436:	000b      	movs	r3, r1
 8007438:	431a      	orrs	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	46bd      	mov	sp, r7
 8007442:	b006      	add	sp, #24
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	223c      	movs	r2, #60	; 0x3c
 8007456:	5c9b      	ldrb	r3, [r3, r2]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800745c:	2302      	movs	r3, #2
 800745e:	e041      	b.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	223c      	movs	r2, #60	; 0x3c
 8007464:	2101      	movs	r1, #1
 8007466:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	223d      	movs	r2, #61	; 0x3d
 800746c:	2102      	movs	r1, #2
 800746e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2270      	movs	r2, #112	; 0x70
 8007484:	4393      	bics	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d10c      	bne.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2280      	movs	r2, #128	; 0x80
 80074bc:	4393      	bics	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	223d      	movs	r2, #61	; 0x3d
 80074d6:	2101      	movs	r1, #1
 80074d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	223c      	movs	r2, #60	; 0x3c
 80074de:	2100      	movs	r1, #0
 80074e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b004      	add	sp, #16
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40014000 	.word	0x40014000

080074f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	223c      	movs	r2, #60	; 0x3c
 800750a:	5c9b      	ldrb	r3, [r3, r2]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007510:	2302      	movs	r3, #2
 8007512:	e03e      	b.n	8007592 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	223c      	movs	r2, #60	; 0x3c
 8007518:	2101      	movs	r1, #1
 800751a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	22ff      	movs	r2, #255	; 0xff
 8007520:	4393      	bics	r3, r2
 8007522:	001a      	movs	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a1b      	ldr	r2, [pc, #108]	; (800759c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007530:	401a      	ands	r2, r3
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800753e:	401a      	ands	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800754c:	401a      	ands	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800755a:	401a      	ands	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a11      	ldr	r2, [pc, #68]	; (80075ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007568:	401a      	ands	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4a0e      	ldr	r2, [pc, #56]	; (80075b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007576:	401a      	ands	r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	223c      	movs	r2, #60	; 0x3c
 800758c:	2100      	movs	r1, #0
 800758e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	0018      	movs	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	b004      	add	sp, #16
 8007598:	bd80      	pop	{r7, pc}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	fffffcff 	.word	0xfffffcff
 80075a0:	fffffbff 	.word	0xfffffbff
 80075a4:	fffff7ff 	.word	0xfffff7ff
 80075a8:	ffffefff 	.word	0xffffefff
 80075ac:	ffffdfff 	.word	0xffffdfff
 80075b0:	ffffbfff 	.word	0xffffbfff

080075b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075bc:	46c0      	nop			; (mov r8, r8)
 80075be:	46bd      	mov	sp, r7
 80075c0:	b002      	add	sp, #8
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b002      	add	sp, #8
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e044      	b.n	8007670 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2278      	movs	r2, #120	; 0x78
 80075f2:	2100      	movs	r1, #0
 80075f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0018      	movs	r0, r3
 80075fa:	f7fc fdf3 	bl	80041e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2101      	movs	r1, #1
 8007610:	438a      	bics	r2, r1
 8007612:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	0018      	movs	r0, r3
 8007618:	f000 fc0c 	bl	8007e34 <UART_SetConfig>
 800761c:	0003      	movs	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e024      	b.n	8007670 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0018      	movs	r0, r3
 8007632:	f000 fd3f 	bl	80080b4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	490d      	ldr	r1, [pc, #52]	; (8007678 <HAL_UART_Init+0xa4>)
 8007642:	400a      	ands	r2, r1
 8007644:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2108      	movs	r1, #8
 8007652:	438a      	bics	r2, r1
 8007654:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2101      	movs	r1, #1
 8007662:	430a      	orrs	r2, r1
 8007664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	0018      	movs	r0, r3
 800766a:	f000 fdd7 	bl	800821c <UART_CheckIdleState>
 800766e:	0003      	movs	r3, r0
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b002      	add	sp, #8
 8007676:	bd80      	pop	{r7, pc}
 8007678:	fffff7ff 	.word	0xfffff7ff

0800767c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	1dbb      	adds	r3, r7, #6
 800768a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007690:	2b20      	cmp	r3, #32
 8007692:	d000      	beq.n	8007696 <HAL_UART_Transmit+0x1a>
 8007694:	e08d      	b.n	80077b2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_UART_Transmit+0x28>
 800769c:	1dbb      	adds	r3, r7, #6
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e085      	b.n	80077b4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	015b      	lsls	r3, r3, #5
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d109      	bne.n	80076c8 <HAL_UART_Transmit+0x4c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2201      	movs	r2, #1
 80076c0:	4013      	ands	r3, r2
 80076c2:	d001      	beq.n	80076c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e075      	b.n	80077b4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2284      	movs	r2, #132	; 0x84
 80076cc:	2100      	movs	r1, #0
 80076ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2221      	movs	r2, #33	; 0x21
 80076d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076d6:	f7fc feab 	bl	8004430 <HAL_GetTick>
 80076da:	0003      	movs	r3, r0
 80076dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1dba      	adds	r2, r7, #6
 80076e2:	2150      	movs	r1, #80	; 0x50
 80076e4:	8812      	ldrh	r2, [r2, #0]
 80076e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	1dba      	adds	r2, r7, #6
 80076ec:	2152      	movs	r1, #82	; 0x52
 80076ee:	8812      	ldrh	r2, [r2, #0]
 80076f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	015b      	lsls	r3, r3, #5
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d108      	bne.n	8007710 <HAL_UART_Transmit+0x94>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	61bb      	str	r3, [r7, #24]
 800770e:	e003      	b.n	8007718 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007714:	2300      	movs	r3, #0
 8007716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007718:	e030      	b.n	800777c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	0013      	movs	r3, r2
 8007724:	2200      	movs	r2, #0
 8007726:	2180      	movs	r1, #128	; 0x80
 8007728:	f000 fe20 	bl	800836c <UART_WaitOnFlagUntilTimeout>
 800772c:	1e03      	subs	r3, r0, #0
 800772e:	d004      	beq.n	800773a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e03c      	b.n	80077b4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	881a      	ldrh	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	05d2      	lsls	r2, r2, #23
 800774a:	0dd2      	lsrs	r2, r2, #23
 800774c:	b292      	uxth	r2, r2
 800774e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	3302      	adds	r3, #2
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	e008      	b.n	800776a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	b292      	uxth	r2, r2
 8007762:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	3301      	adds	r3, #1
 8007768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2252      	movs	r2, #82	; 0x52
 800776e:	5a9b      	ldrh	r3, [r3, r2]
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b299      	uxth	r1, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2252      	movs	r2, #82	; 0x52
 800777a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2252      	movs	r2, #82	; 0x52
 8007780:	5a9b      	ldrh	r3, [r3, r2]
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1c8      	bne.n	800771a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	0013      	movs	r3, r2
 8007792:	2200      	movs	r2, #0
 8007794:	2140      	movs	r1, #64	; 0x40
 8007796:	f000 fde9 	bl	800836c <UART_WaitOnFlagUntilTimeout>
 800779a:	1e03      	subs	r3, r0, #0
 800779c:	d004      	beq.n	80077a8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e005      	b.n	80077b4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e000      	b.n	80077b4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
  }
}
 80077b4:	0018      	movs	r0, r3
 80077b6:	46bd      	mov	sp, r7
 80077b8:	b008      	add	sp, #32
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	1dbb      	adds	r3, r7, #6
 80077c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2280      	movs	r2, #128	; 0x80
 80077ce:	589b      	ldr	r3, [r3, r2]
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d145      	bne.n	8007860 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_UART_Receive_IT+0x26>
 80077da:	1dbb      	adds	r3, r7, #6
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e03d      	b.n	8007862 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	2380      	movs	r3, #128	; 0x80
 80077ec:	015b      	lsls	r3, r3, #5
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d109      	bne.n	8007806 <HAL_UART_Receive_IT+0x4a>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d105      	bne.n	8007806 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2201      	movs	r2, #1
 80077fe:	4013      	ands	r3, r2
 8007800:	d001      	beq.n	8007806 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e02d      	b.n	8007862 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	2380      	movs	r3, #128	; 0x80
 8007814:	041b      	lsls	r3, r3, #16
 8007816:	4013      	ands	r3, r2
 8007818:	d019      	beq.n	800784e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800781a:	f3ef 8310 	mrs	r3, PRIMASK
 800781e:	613b      	str	r3, [r7, #16]
  return(result);
 8007820:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f383 8810 	msr	PRIMASK, r3
}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2180      	movs	r1, #128	; 0x80
 800783c:	04c9      	lsls	r1, r1, #19
 800783e:	430a      	orrs	r2, r1
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f383 8810 	msr	PRIMASK, r3
}
 800784c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800784e:	1dbb      	adds	r3, r7, #6
 8007850:	881a      	ldrh	r2, [r3, #0]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	0018      	movs	r0, r3
 8007858:	f000 fdf2 	bl	8008440 <UART_Start_Receive_IT>
 800785c:	0003      	movs	r3, r0
 800785e:	e000      	b.n	8007862 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	0018      	movs	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	b008      	add	sp, #32
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800786c:	b590      	push	{r4, r7, lr}
 800786e:	b0ab      	sub	sp, #172	; 0xac
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	22a4      	movs	r2, #164	; 0xa4
 800787c:	18b9      	adds	r1, r7, r2
 800787e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	20a0      	movs	r0, #160	; 0xa0
 8007888:	1839      	adds	r1, r7, r0
 800788a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	219c      	movs	r1, #156	; 0x9c
 8007894:	1879      	adds	r1, r7, r1
 8007896:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007898:	0011      	movs	r1, r2
 800789a:	18bb      	adds	r3, r7, r2
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a99      	ldr	r2, [pc, #612]	; (8007b04 <HAL_UART_IRQHandler+0x298>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	2298      	movs	r2, #152	; 0x98
 80078a4:	18bc      	adds	r4, r7, r2
 80078a6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80078a8:	18bb      	adds	r3, r7, r2
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d114      	bne.n	80078da <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2220      	movs	r2, #32
 80078b6:	4013      	ands	r3, r2
 80078b8:	d00f      	beq.n	80078da <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078ba:	183b      	adds	r3, r7, r0
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2220      	movs	r2, #32
 80078c0:	4013      	ands	r3, r2
 80078c2:	d00a      	beq.n	80078da <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d100      	bne.n	80078ce <HAL_UART_IRQHandler+0x62>
 80078cc:	e286      	b.n	8007ddc <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	0010      	movs	r0, r2
 80078d6:	4798      	blx	r3
      }
      return;
 80078d8:	e280      	b.n	8007ddc <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078da:	2398      	movs	r3, #152	; 0x98
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d100      	bne.n	80078e6 <HAL_UART_IRQHandler+0x7a>
 80078e4:	e114      	b.n	8007b10 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078e6:	239c      	movs	r3, #156	; 0x9c
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2201      	movs	r2, #1
 80078ee:	4013      	ands	r3, r2
 80078f0:	d106      	bne.n	8007900 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80078f2:	23a0      	movs	r3, #160	; 0xa0
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a83      	ldr	r2, [pc, #524]	; (8007b08 <HAL_UART_IRQHandler+0x29c>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	d100      	bne.n	8007900 <HAL_UART_IRQHandler+0x94>
 80078fe:	e107      	b.n	8007b10 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007900:	23a4      	movs	r3, #164	; 0xa4
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2201      	movs	r2, #1
 8007908:	4013      	ands	r3, r2
 800790a:	d012      	beq.n	8007932 <HAL_UART_IRQHandler+0xc6>
 800790c:	23a0      	movs	r3, #160	; 0xa0
 800790e:	18fb      	adds	r3, r7, r3
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	2380      	movs	r3, #128	; 0x80
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4013      	ands	r3, r2
 8007918:	d00b      	beq.n	8007932 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2201      	movs	r2, #1
 8007920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2284      	movs	r2, #132	; 0x84
 8007926:	589b      	ldr	r3, [r3, r2]
 8007928:	2201      	movs	r2, #1
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2184      	movs	r1, #132	; 0x84
 8007930:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007932:	23a4      	movs	r3, #164	; 0xa4
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2202      	movs	r2, #2
 800793a:	4013      	ands	r3, r2
 800793c:	d011      	beq.n	8007962 <HAL_UART_IRQHandler+0xf6>
 800793e:	239c      	movs	r3, #156	; 0x9c
 8007940:	18fb      	adds	r3, r7, r3
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2201      	movs	r2, #1
 8007946:	4013      	ands	r3, r2
 8007948:	d00b      	beq.n	8007962 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2202      	movs	r2, #2
 8007950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2284      	movs	r2, #132	; 0x84
 8007956:	589b      	ldr	r3, [r3, r2]
 8007958:	2204      	movs	r2, #4
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2184      	movs	r1, #132	; 0x84
 8007960:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007962:	23a4      	movs	r3, #164	; 0xa4
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2204      	movs	r2, #4
 800796a:	4013      	ands	r3, r2
 800796c:	d011      	beq.n	8007992 <HAL_UART_IRQHandler+0x126>
 800796e:	239c      	movs	r3, #156	; 0x9c
 8007970:	18fb      	adds	r3, r7, r3
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2201      	movs	r2, #1
 8007976:	4013      	ands	r3, r2
 8007978:	d00b      	beq.n	8007992 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2204      	movs	r2, #4
 8007980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2284      	movs	r2, #132	; 0x84
 8007986:	589b      	ldr	r3, [r3, r2]
 8007988:	2202      	movs	r2, #2
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2184      	movs	r1, #132	; 0x84
 8007990:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007992:	23a4      	movs	r3, #164	; 0xa4
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2208      	movs	r2, #8
 800799a:	4013      	ands	r3, r2
 800799c:	d017      	beq.n	80079ce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800799e:	23a0      	movs	r3, #160	; 0xa0
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2220      	movs	r2, #32
 80079a6:	4013      	ands	r3, r2
 80079a8:	d105      	bne.n	80079b6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079aa:	239c      	movs	r3, #156	; 0x9c
 80079ac:	18fb      	adds	r3, r7, r3
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2201      	movs	r2, #1
 80079b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079b4:	d00b      	beq.n	80079ce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2208      	movs	r2, #8
 80079bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2284      	movs	r2, #132	; 0x84
 80079c2:	589b      	ldr	r3, [r3, r2]
 80079c4:	2208      	movs	r2, #8
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2184      	movs	r1, #132	; 0x84
 80079cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079ce:	23a4      	movs	r3, #164	; 0xa4
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	2380      	movs	r3, #128	; 0x80
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4013      	ands	r3, r2
 80079da:	d013      	beq.n	8007a04 <HAL_UART_IRQHandler+0x198>
 80079dc:	23a0      	movs	r3, #160	; 0xa0
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	2380      	movs	r3, #128	; 0x80
 80079e4:	04db      	lsls	r3, r3, #19
 80079e6:	4013      	ands	r3, r2
 80079e8:	d00c      	beq.n	8007a04 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2280      	movs	r2, #128	; 0x80
 80079f0:	0112      	lsls	r2, r2, #4
 80079f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2284      	movs	r2, #132	; 0x84
 80079f8:	589b      	ldr	r3, [r3, r2]
 80079fa:	2220      	movs	r2, #32
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2184      	movs	r1, #132	; 0x84
 8007a02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2284      	movs	r2, #132	; 0x84
 8007a08:	589b      	ldr	r3, [r3, r2]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d100      	bne.n	8007a10 <HAL_UART_IRQHandler+0x1a4>
 8007a0e:	e1e7      	b.n	8007de0 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a10:	23a4      	movs	r3, #164	; 0xa4
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2220      	movs	r2, #32
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a1c:	23a0      	movs	r3, #160	; 0xa0
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2220      	movs	r2, #32
 8007a24:	4013      	ands	r3, r2
 8007a26:	d008      	beq.n	8007a3a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d004      	beq.n	8007a3a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	0010      	movs	r0, r2
 8007a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2284      	movs	r2, #132	; 0x84
 8007a3e:	589b      	ldr	r3, [r3, r2]
 8007a40:	2194      	movs	r1, #148	; 0x94
 8007a42:	187a      	adds	r2, r7, r1
 8007a44:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2240      	movs	r2, #64	; 0x40
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d004      	beq.n	8007a5e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a54:	187b      	adds	r3, r7, r1
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2228      	movs	r2, #40	; 0x28
 8007a5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a5c:	d047      	beq.n	8007aee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 fda3 	bl	80085ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2240      	movs	r2, #64	; 0x40
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d137      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a74:	f3ef 8310 	mrs	r3, PRIMASK
 8007a78:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7c:	2090      	movs	r0, #144	; 0x90
 8007a7e:	183a      	adds	r2, r7, r0
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	2301      	movs	r3, #1
 8007a84:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a88:	f383 8810 	msr	PRIMASK, r3
}
 8007a8c:	46c0      	nop			; (mov r8, r8)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2140      	movs	r1, #64	; 0x40
 8007a9a:	438a      	bics	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]
 8007a9e:	183b      	adds	r3, r7, r0
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aa6:	f383 8810 	msr	PRIMASK, r3
}
 8007aaa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d012      	beq.n	8007ada <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab8:	4a14      	ldr	r2, [pc, #80]	; (8007b0c <HAL_UART_IRQHandler+0x2a0>)
 8007aba:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f7fd fa53 	bl	8004f6c <HAL_DMA_Abort_IT>
 8007ac6:	1e03      	subs	r3, r0, #0
 8007ac8:	d01a      	beq.n	8007b00 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad8:	e012      	b.n	8007b00 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	0018      	movs	r0, r3
 8007ade:	f000 f995 	bl	8007e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae2:	e00d      	b.n	8007b00 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f000 f990 	bl	8007e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	e008      	b.n	8007b00 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f98b 	bl	8007e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2284      	movs	r2, #132	; 0x84
 8007afa:	2100      	movs	r1, #0
 8007afc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007afe:	e16f      	b.n	8007de0 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b00:	46c0      	nop			; (mov r8, r8)
    return;
 8007b02:	e16d      	b.n	8007de0 <HAL_UART_IRQHandler+0x574>
 8007b04:	0000080f 	.word	0x0000080f
 8007b08:	04000120 	.word	0x04000120
 8007b0c:	08008675 	.word	0x08008675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d000      	beq.n	8007b1a <HAL_UART_IRQHandler+0x2ae>
 8007b18:	e139      	b.n	8007d8e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b1a:	23a4      	movs	r3, #164	; 0xa4
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2210      	movs	r2, #16
 8007b22:	4013      	ands	r3, r2
 8007b24:	d100      	bne.n	8007b28 <HAL_UART_IRQHandler+0x2bc>
 8007b26:	e132      	b.n	8007d8e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b28:	23a0      	movs	r3, #160	; 0xa0
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2210      	movs	r2, #16
 8007b30:	4013      	ands	r3, r2
 8007b32:	d100      	bne.n	8007b36 <HAL_UART_IRQHandler+0x2ca>
 8007b34:	e12b      	b.n	8007d8e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2210      	movs	r2, #16
 8007b3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2240      	movs	r2, #64	; 0x40
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d000      	beq.n	8007b4e <HAL_UART_IRQHandler+0x2e2>
 8007b4c:	e09f      	b.n	8007c8e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	217e      	movs	r1, #126	; 0x7e
 8007b58:	187b      	adds	r3, r7, r1
 8007b5a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007b5c:	187b      	adds	r3, r7, r1
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d100      	bne.n	8007b66 <HAL_UART_IRQHandler+0x2fa>
 8007b64:	e13e      	b.n	8007de4 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2258      	movs	r2, #88	; 0x58
 8007b6a:	5a9b      	ldrh	r3, [r3, r2]
 8007b6c:	187a      	adds	r2, r7, r1
 8007b6e:	8812      	ldrh	r2, [r2, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d300      	bcc.n	8007b76 <HAL_UART_IRQHandler+0x30a>
 8007b74:	e136      	b.n	8007de4 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	187a      	adds	r2, r7, r1
 8007b7a:	215a      	movs	r1, #90	; 0x5a
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d06f      	beq.n	8007c6a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b92:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b94:	2301      	movs	r3, #1
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	f383 8810 	msr	PRIMASK, r3
}
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4992      	ldr	r1, [pc, #584]	; (8007df4 <HAL_UART_IRQHandler+0x588>)
 8007bac:	400a      	ands	r2, r1
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f383 8810 	msr	PRIMASK, r3
}
 8007bba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bcc:	f383 8810 	msr	PRIMASK, r3
}
 8007bd0:	46c0      	nop			; (mov r8, r8)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	438a      	bics	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]
 8007be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be8:	f383 8810 	msr	PRIMASK, r3
}
 8007bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bee:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bfe:	f383 8810 	msr	PRIMASK, r3
}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2140      	movs	r1, #64	; 0x40
 8007c10:	438a      	bics	r2, r1
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c16:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c1a:	f383 8810 	msr	PRIMASK, r3
}
 8007c1e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	2120      	movs	r1, #32
 8007c26:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c32:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c38:	2301      	movs	r3, #1
 8007c3a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c3e:	f383 8810 	msr	PRIMASK, r3
}
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2110      	movs	r1, #16
 8007c50:	438a      	bics	r2, r1
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c56:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5a:	f383 8810 	msr	PRIMASK, r3
}
 8007c5e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	0018      	movs	r0, r3
 8007c66:	f7fd f949 	bl	8004efc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2258      	movs	r2, #88	; 0x58
 8007c74:	5a9a      	ldrh	r2, [r3, r2]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	215a      	movs	r1, #90	; 0x5a
 8007c7a:	5a5b      	ldrh	r3, [r3, r1]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0011      	movs	r1, r2
 8007c86:	0018      	movs	r0, r3
 8007c88:	f000 f8c8 	bl	8007e1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c8c:	e0aa      	b.n	8007de4 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2258      	movs	r2, #88	; 0x58
 8007c92:	5a99      	ldrh	r1, [r3, r2]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	225a      	movs	r2, #90	; 0x5a
 8007c98:	5a9b      	ldrh	r3, [r3, r2]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	208e      	movs	r0, #142	; 0x8e
 8007c9e:	183b      	adds	r3, r7, r0
 8007ca0:	1a8a      	subs	r2, r1, r2
 8007ca2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	225a      	movs	r2, #90	; 0x5a
 8007ca8:	5a9b      	ldrh	r3, [r3, r2]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d100      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x446>
 8007cb0:	e09a      	b.n	8007de8 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8007cb2:	183b      	adds	r3, r7, r0
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d100      	bne.n	8007cbc <HAL_UART_IRQHandler+0x450>
 8007cba:	e095      	b.n	8007de8 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007cc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc4:	2488      	movs	r4, #136	; 0x88
 8007cc6:	193a      	adds	r2, r7, r4
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	2301      	movs	r3, #1
 8007ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f383 8810 	msr	PRIMASK, r3
}
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4945      	ldr	r1, [pc, #276]	; (8007df8 <HAL_UART_IRQHandler+0x58c>)
 8007ce2:	400a      	ands	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	193b      	adds	r3, r7, r4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f383 8810 	msr	PRIMASK, r3
}
 8007cf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cfa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfc:	2484      	movs	r4, #132	; 0x84
 8007cfe:	193a      	adds	r2, r7, r4
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	2301      	movs	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f383 8810 	msr	PRIMASK, r3
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2101      	movs	r1, #1
 8007d1a:	438a      	bics	r2, r1
 8007d1c:	609a      	str	r2, [r3, #8]
 8007d1e:	193b      	adds	r3, r7, r4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	f383 8810 	msr	PRIMASK, r3
}
 8007d2a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2280      	movs	r2, #128	; 0x80
 8007d30:	2120      	movs	r1, #32
 8007d32:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d40:	f3ef 8310 	mrs	r3, PRIMASK
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d48:	2480      	movs	r4, #128	; 0x80
 8007d4a:	193a      	adds	r2, r7, r4
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	2301      	movs	r3, #1
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	f383 8810 	msr	PRIMASK, r3
}
 8007d58:	46c0      	nop			; (mov r8, r8)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2110      	movs	r1, #16
 8007d66:	438a      	bics	r2, r1
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	193b      	adds	r3, r7, r4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	f383 8810 	msr	PRIMASK, r3
}
 8007d76:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d7e:	183b      	adds	r3, r7, r0
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0011      	movs	r1, r2
 8007d86:	0018      	movs	r0, r3
 8007d88:	f000 f848 	bl	8007e1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d8c:	e02c      	b.n	8007de8 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d8e:	23a4      	movs	r3, #164	; 0xa4
 8007d90:	18fb      	adds	r3, r7, r3
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2280      	movs	r2, #128	; 0x80
 8007d96:	4013      	ands	r3, r2
 8007d98:	d00f      	beq.n	8007dba <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d9a:	23a0      	movs	r3, #160	; 0xa0
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2280      	movs	r2, #128	; 0x80
 8007da2:	4013      	ands	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01e      	beq.n	8007dec <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	0010      	movs	r0, r2
 8007db6:	4798      	blx	r3
    }
    return;
 8007db8:	e018      	b.n	8007dec <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dba:	23a4      	movs	r3, #164	; 0xa4
 8007dbc:	18fb      	adds	r3, r7, r3
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2240      	movs	r2, #64	; 0x40
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d013      	beq.n	8007dee <HAL_UART_IRQHandler+0x582>
 8007dc6:	23a0      	movs	r3, #160	; 0xa0
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2240      	movs	r2, #64	; 0x40
 8007dce:	4013      	ands	r3, r2
 8007dd0:	d00d      	beq.n	8007dee <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f000 fc64 	bl	80086a2 <UART_EndTransmit_IT>
    return;
 8007dda:	e008      	b.n	8007dee <HAL_UART_IRQHandler+0x582>
      return;
 8007ddc:	46c0      	nop			; (mov r8, r8)
 8007dde:	e006      	b.n	8007dee <HAL_UART_IRQHandler+0x582>
    return;
 8007de0:	46c0      	nop			; (mov r8, r8)
 8007de2:	e004      	b.n	8007dee <HAL_UART_IRQHandler+0x582>
      return;
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	e002      	b.n	8007dee <HAL_UART_IRQHandler+0x582>
      return;
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	e000      	b.n	8007dee <HAL_UART_IRQHandler+0x582>
    return;
 8007dec:	46c0      	nop			; (mov r8, r8)
  }

}
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b02b      	add	sp, #172	; 0xac
 8007df2:	bd90      	pop	{r4, r7, pc}
 8007df4:	fffffeff 	.word	0xfffffeff
 8007df8:	fffffedf 	.word	0xfffffedf

08007dfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b002      	add	sp, #8
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e14:	46c0      	nop			; (mov r8, r8)
 8007e16:	46bd      	mov	sp, r7
 8007e18:	b002      	add	sp, #8
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	000a      	movs	r2, r1
 8007e26:	1cbb      	adds	r3, r7, #2
 8007e28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b002      	add	sp, #8
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e3c:	231e      	movs	r3, #30
 8007e3e:	18fb      	adds	r3, r7, r3
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a8d      	ldr	r2, [pc, #564]	; (8008098 <UART_SetConfig+0x264>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	0019      	movs	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a88      	ldr	r2, [pc, #544]	; (800809c <UART_SetConfig+0x268>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	0019      	movs	r1, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	4a7f      	ldr	r2, [pc, #508]	; (80080a0 <UART_SetConfig+0x26c>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	0019      	movs	r1, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a7b      	ldr	r2, [pc, #492]	; (80080a4 <UART_SetConfig+0x270>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d127      	bne.n	8007f0a <UART_SetConfig+0xd6>
 8007eba:	4b7b      	ldr	r3, [pc, #492]	; (80080a8 <UART_SetConfig+0x274>)
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d00d      	beq.n	8007ee2 <UART_SetConfig+0xae>
 8007ec6:	d81b      	bhi.n	8007f00 <UART_SetConfig+0xcc>
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d014      	beq.n	8007ef6 <UART_SetConfig+0xc2>
 8007ecc:	d818      	bhi.n	8007f00 <UART_SetConfig+0xcc>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <UART_SetConfig+0xa4>
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d00a      	beq.n	8007eec <UART_SetConfig+0xb8>
 8007ed6:	e013      	b.n	8007f00 <UART_SetConfig+0xcc>
 8007ed8:	231f      	movs	r3, #31
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
 8007ee0:	e021      	b.n	8007f26 <UART_SetConfig+0xf2>
 8007ee2:	231f      	movs	r3, #31
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	e01c      	b.n	8007f26 <UART_SetConfig+0xf2>
 8007eec:	231f      	movs	r3, #31
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e017      	b.n	8007f26 <UART_SetConfig+0xf2>
 8007ef6:	231f      	movs	r3, #31
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	2208      	movs	r2, #8
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	e012      	b.n	8007f26 <UART_SetConfig+0xf2>
 8007f00:	231f      	movs	r3, #31
 8007f02:	18fb      	adds	r3, r7, r3
 8007f04:	2210      	movs	r2, #16
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e00d      	b.n	8007f26 <UART_SetConfig+0xf2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a67      	ldr	r2, [pc, #412]	; (80080ac <UART_SetConfig+0x278>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d104      	bne.n	8007f1e <UART_SetConfig+0xea>
 8007f14:	231f      	movs	r3, #31
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e003      	b.n	8007f26 <UART_SetConfig+0xf2>
 8007f1e:	231f      	movs	r3, #31
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	2210      	movs	r2, #16
 8007f24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	2380      	movs	r3, #128	; 0x80
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d15c      	bne.n	8007fec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8007f32:	231f      	movs	r3, #31
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d015      	beq.n	8007f68 <UART_SetConfig+0x134>
 8007f3c:	dc18      	bgt.n	8007f70 <UART_SetConfig+0x13c>
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d00d      	beq.n	8007f5e <UART_SetConfig+0x12a>
 8007f42:	dc15      	bgt.n	8007f70 <UART_SetConfig+0x13c>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <UART_SetConfig+0x11a>
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d005      	beq.n	8007f58 <UART_SetConfig+0x124>
 8007f4c:	e010      	b.n	8007f70 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4e:	f7fd ff55 	bl	8005dfc <HAL_RCC_GetPCLK1Freq>
 8007f52:	0003      	movs	r3, r0
 8007f54:	61bb      	str	r3, [r7, #24]
        break;
 8007f56:	e012      	b.n	8007f7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f58:	4b55      	ldr	r3, [pc, #340]	; (80080b0 <UART_SetConfig+0x27c>)
 8007f5a:	61bb      	str	r3, [r7, #24]
        break;
 8007f5c:	e00f      	b.n	8007f7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f5e:	f7fd feed 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 8007f62:	0003      	movs	r3, r0
 8007f64:	61bb      	str	r3, [r7, #24]
        break;
 8007f66:	e00a      	b.n	8007f7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f68:	2380      	movs	r3, #128	; 0x80
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	61bb      	str	r3, [r7, #24]
        break;
 8007f6e:	e006      	b.n	8007f7e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f74:	231e      	movs	r3, #30
 8007f76:	18fb      	adds	r3, r7, r3
 8007f78:	2201      	movs	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
        break;
 8007f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d100      	bne.n	8007f86 <UART_SetConfig+0x152>
 8007f84:	e07a      	b.n	800807c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	005a      	lsls	r2, r3, #1
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	18d2      	adds	r2, r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	0019      	movs	r1, r3
 8007f98:	0010      	movs	r0, r2
 8007f9a:	f7f8 f8d1 	bl	8000140 <__udivsi3>
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	d91c      	bls.n	8007fe2 <UART_SetConfig+0x1ae>
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	2380      	movs	r3, #128	; 0x80
 8007fac:	025b      	lsls	r3, r3, #9
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d217      	bcs.n	8007fe2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	200e      	movs	r0, #14
 8007fb8:	183b      	adds	r3, r7, r0
 8007fba:	210f      	movs	r1, #15
 8007fbc:	438a      	bics	r2, r1
 8007fbe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	4013      	ands	r3, r2
 8007fca:	b299      	uxth	r1, r3
 8007fcc:	183b      	adds	r3, r7, r0
 8007fce:	183a      	adds	r2, r7, r0
 8007fd0:	8812      	ldrh	r2, [r2, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	183a      	adds	r2, r7, r0
 8007fdc:	8812      	ldrh	r2, [r2, #0]
 8007fde:	60da      	str	r2, [r3, #12]
 8007fe0:	e04c      	b.n	800807c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe2:	231e      	movs	r3, #30
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	e047      	b.n	800807c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fec:	231f      	movs	r3, #31
 8007fee:	18fb      	adds	r3, r7, r3
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d015      	beq.n	8008022 <UART_SetConfig+0x1ee>
 8007ff6:	dc18      	bgt.n	800802a <UART_SetConfig+0x1f6>
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d00d      	beq.n	8008018 <UART_SetConfig+0x1e4>
 8007ffc:	dc15      	bgt.n	800802a <UART_SetConfig+0x1f6>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <UART_SetConfig+0x1d4>
 8008002:	2b02      	cmp	r3, #2
 8008004:	d005      	beq.n	8008012 <UART_SetConfig+0x1de>
 8008006:	e010      	b.n	800802a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008008:	f7fd fef8 	bl	8005dfc <HAL_RCC_GetPCLK1Freq>
 800800c:	0003      	movs	r3, r0
 800800e:	61bb      	str	r3, [r7, #24]
        break;
 8008010:	e012      	b.n	8008038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008012:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <UART_SetConfig+0x27c>)
 8008014:	61bb      	str	r3, [r7, #24]
        break;
 8008016:	e00f      	b.n	8008038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008018:	f7fd fe90 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 800801c:	0003      	movs	r3, r0
 800801e:	61bb      	str	r3, [r7, #24]
        break;
 8008020:	e00a      	b.n	8008038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008022:	2380      	movs	r3, #128	; 0x80
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	61bb      	str	r3, [r7, #24]
        break;
 8008028:	e006      	b.n	8008038 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800802e:	231e      	movs	r3, #30
 8008030:	18fb      	adds	r3, r7, r3
 8008032:	2201      	movs	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
        break;
 8008036:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01e      	beq.n	800807c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	085a      	lsrs	r2, r3, #1
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	18d2      	adds	r2, r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	0019      	movs	r1, r3
 800804e:	0010      	movs	r0, r2
 8008050:	f7f8 f876 	bl	8000140 <__udivsi3>
 8008054:	0003      	movs	r3, r0
 8008056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b0f      	cmp	r3, #15
 800805c:	d90a      	bls.n	8008074 <UART_SetConfig+0x240>
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	025b      	lsls	r3, r3, #9
 8008064:	429a      	cmp	r2, r3
 8008066:	d205      	bcs.n	8008074 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e003      	b.n	800807c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008074:	231e      	movs	r3, #30
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	2201      	movs	r2, #1
 800807a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008088:	231e      	movs	r3, #30
 800808a:	18fb      	adds	r3, r7, r3
 800808c:	781b      	ldrb	r3, [r3, #0]
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b008      	add	sp, #32
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	ffff69f3 	.word	0xffff69f3
 800809c:	ffffcfff 	.word	0xffffcfff
 80080a0:	fffff4ff 	.word	0xfffff4ff
 80080a4:	40013800 	.word	0x40013800
 80080a8:	40021000 	.word	0x40021000
 80080ac:	40004400 	.word	0x40004400
 80080b0:	007a1200 	.word	0x007a1200

080080b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2201      	movs	r2, #1
 80080c2:	4013      	ands	r3, r2
 80080c4:	d00b      	beq.n	80080de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a4a      	ldr	r2, [pc, #296]	; (80081f8 <UART_AdvFeatureConfig+0x144>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	0019      	movs	r1, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2202      	movs	r2, #2
 80080e4:	4013      	ands	r3, r2
 80080e6:	d00b      	beq.n	8008100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4a43      	ldr	r2, [pc, #268]	; (80081fc <UART_AdvFeatureConfig+0x148>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	0019      	movs	r1, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	2204      	movs	r2, #4
 8008106:	4013      	ands	r3, r2
 8008108:	d00b      	beq.n	8008122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a3b      	ldr	r2, [pc, #236]	; (8008200 <UART_AdvFeatureConfig+0x14c>)
 8008112:	4013      	ands	r3, r2
 8008114:	0019      	movs	r1, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2208      	movs	r2, #8
 8008128:	4013      	ands	r3, r2
 800812a:	d00b      	beq.n	8008144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a34      	ldr	r2, [pc, #208]	; (8008204 <UART_AdvFeatureConfig+0x150>)
 8008134:	4013      	ands	r3, r2
 8008136:	0019      	movs	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2210      	movs	r2, #16
 800814a:	4013      	ands	r3, r2
 800814c:	d00b      	beq.n	8008166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <UART_AdvFeatureConfig+0x154>)
 8008156:	4013      	ands	r3, r2
 8008158:	0019      	movs	r1, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2220      	movs	r2, #32
 800816c:	4013      	ands	r3, r2
 800816e:	d00b      	beq.n	8008188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	4a25      	ldr	r2, [pc, #148]	; (800820c <UART_AdvFeatureConfig+0x158>)
 8008178:	4013      	ands	r3, r2
 800817a:	0019      	movs	r1, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2240      	movs	r2, #64	; 0x40
 800818e:	4013      	ands	r3, r2
 8008190:	d01d      	beq.n	80081ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <UART_AdvFeatureConfig+0x15c>)
 800819a:	4013      	ands	r3, r2
 800819c:	0019      	movs	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ae:	2380      	movs	r3, #128	; 0x80
 80081b0:	035b      	lsls	r3, r3, #13
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d10b      	bne.n	80081ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a15      	ldr	r2, [pc, #84]	; (8008214 <UART_AdvFeatureConfig+0x160>)
 80081be:	4013      	ands	r3, r2
 80081c0:	0019      	movs	r1, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2280      	movs	r2, #128	; 0x80
 80081d4:	4013      	ands	r3, r2
 80081d6:	d00b      	beq.n	80081f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4a0e      	ldr	r2, [pc, #56]	; (8008218 <UART_AdvFeatureConfig+0x164>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	0019      	movs	r1, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }
}
 80081f0:	46c0      	nop			; (mov r8, r8)
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b002      	add	sp, #8
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	fffdffff 	.word	0xfffdffff
 80081fc:	fffeffff 	.word	0xfffeffff
 8008200:	fffbffff 	.word	0xfffbffff
 8008204:	ffff7fff 	.word	0xffff7fff
 8008208:	ffffefff 	.word	0xffffefff
 800820c:	ffffdfff 	.word	0xffffdfff
 8008210:	ffefffff 	.word	0xffefffff
 8008214:	ff9fffff 	.word	0xff9fffff
 8008218:	fff7ffff 	.word	0xfff7ffff

0800821c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b092      	sub	sp, #72	; 0x48
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2284      	movs	r2, #132	; 0x84
 8008228:	2100      	movs	r1, #0
 800822a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800822c:	f7fc f900 	bl	8004430 <HAL_GetTick>
 8008230:	0003      	movs	r3, r0
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2208      	movs	r2, #8
 800823c:	4013      	ands	r3, r2
 800823e:	2b08      	cmp	r3, #8
 8008240:	d12c      	bne.n	800829c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	2280      	movs	r2, #128	; 0x80
 8008246:	0391      	lsls	r1, r2, #14
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	4a46      	ldr	r2, [pc, #280]	; (8008364 <UART_CheckIdleState+0x148>)
 800824c:	9200      	str	r2, [sp, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	f000 f88c 	bl	800836c <UART_WaitOnFlagUntilTimeout>
 8008254:	1e03      	subs	r3, r0, #0
 8008256:	d021      	beq.n	800829c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008258:	f3ef 8310 	mrs	r3, PRIMASK
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008260:	63bb      	str	r3, [r7, #56]	; 0x38
 8008262:	2301      	movs	r3, #1
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	f383 8810 	msr	PRIMASK, r3
}
 800826c:	46c0      	nop			; (mov r8, r8)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	438a      	bics	r2, r1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	f383 8810 	msr	PRIMASK, r3
}
 8008288:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2278      	movs	r2, #120	; 0x78
 8008294:	2100      	movs	r1, #0
 8008296:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e05f      	b.n	800835c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2204      	movs	r2, #4
 80082a4:	4013      	ands	r3, r2
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d146      	bne.n	8008338 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ac:	2280      	movs	r2, #128	; 0x80
 80082ae:	03d1      	lsls	r1, r2, #15
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <UART_CheckIdleState+0x148>)
 80082b4:	9200      	str	r2, [sp, #0]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f000 f858 	bl	800836c <UART_WaitOnFlagUntilTimeout>
 80082bc:	1e03      	subs	r3, r0, #0
 80082be:	d03b      	beq.n	8008338 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c0:	f3ef 8310 	mrs	r3, PRIMASK
 80082c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80082c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
 80082ca:	2301      	movs	r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f383 8810 	msr	PRIMASK, r3
}
 80082d4:	46c0      	nop			; (mov r8, r8)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4921      	ldr	r1, [pc, #132]	; (8008368 <UART_CheckIdleState+0x14c>)
 80082e2:	400a      	ands	r2, r1
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f383 8810 	msr	PRIMASK, r3
}
 80082f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f2:	f3ef 8310 	mrs	r3, PRIMASK
 80082f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80082f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
 80082fc:	2301      	movs	r3, #1
 80082fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f383 8810 	msr	PRIMASK, r3
}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2101      	movs	r1, #1
 8008314:	438a      	bics	r2, r1
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	f383 8810 	msr	PRIMASK, r3
}
 8008322:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2280      	movs	r2, #128	; 0x80
 8008328:	2120      	movs	r1, #32
 800832a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2278      	movs	r2, #120	; 0x78
 8008330:	2100      	movs	r1, #0
 8008332:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e011      	b.n	800835c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2280      	movs	r2, #128	; 0x80
 8008342:	2120      	movs	r1, #32
 8008344:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2278      	movs	r2, #120	; 0x78
 8008356:	2100      	movs	r1, #0
 8008358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	0018      	movs	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	b010      	add	sp, #64	; 0x40
 8008362:	bd80      	pop	{r7, pc}
 8008364:	01ffffff 	.word	0x01ffffff
 8008368:	fffffedf 	.word	0xfffffedf

0800836c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	1dfb      	adds	r3, r7, #7
 800837a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800837c:	e04b      	b.n	8008416 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3301      	adds	r3, #1
 8008382:	d048      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008384:	f7fc f854 	bl	8004430 <HAL_GetTick>
 8008388:	0002      	movs	r2, r0
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	429a      	cmp	r2, r3
 8008392:	d302      	bcc.n	800839a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e04b      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2204      	movs	r2, #4
 80083a6:	4013      	ands	r3, r2
 80083a8:	d035      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2208      	movs	r2, #8
 80083b2:	4013      	ands	r3, r2
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d111      	bne.n	80083dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2208      	movs	r2, #8
 80083be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	0018      	movs	r0, r3
 80083c4:	f000 f8f2 	bl	80085ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2284      	movs	r2, #132	; 0x84
 80083cc:	2108      	movs	r1, #8
 80083ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2278      	movs	r2, #120	; 0x78
 80083d4:	2100      	movs	r1, #0
 80083d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e02c      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69da      	ldr	r2, [r3, #28]
 80083e2:	2380      	movs	r3, #128	; 0x80
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	401a      	ands	r2, r3
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d112      	bne.n	8008416 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2280      	movs	r2, #128	; 0x80
 80083f6:	0112      	lsls	r2, r2, #4
 80083f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	0018      	movs	r0, r3
 80083fe:	f000 f8d5 	bl	80085ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2284      	movs	r2, #132	; 0x84
 8008406:	2120      	movs	r1, #32
 8008408:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2278      	movs	r2, #120	; 0x78
 800840e:	2100      	movs	r1, #0
 8008410:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e00f      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4013      	ands	r3, r2
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	425a      	negs	r2, r3
 8008426:	4153      	adcs	r3, r2
 8008428:	b2db      	uxtb	r3, r3
 800842a:	001a      	movs	r2, r3
 800842c:	1dfb      	adds	r3, r7, #7
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d0a4      	beq.n	800837e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	0018      	movs	r0, r3
 8008438:	46bd      	mov	sp, r7
 800843a:	b004      	add	sp, #16
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b090      	sub	sp, #64	; 0x40
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	1dbb      	adds	r3, r7, #6
 800844c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	1dba      	adds	r2, r7, #6
 8008458:	2158      	movs	r1, #88	; 0x58
 800845a:	8812      	ldrh	r2, [r2, #0]
 800845c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1dba      	adds	r2, r7, #6
 8008462:	215a      	movs	r1, #90	; 0x5a
 8008464:	8812      	ldrh	r2, [r2, #0]
 8008466:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	2380      	movs	r3, #128	; 0x80
 8008474:	015b      	lsls	r3, r3, #5
 8008476:	429a      	cmp	r2, r3
 8008478:	d10d      	bne.n	8008496 <UART_Start_Receive_IT+0x56>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <UART_Start_Receive_IT+0x4c>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	225c      	movs	r2, #92	; 0x5c
 8008486:	4946      	ldr	r1, [pc, #280]	; (80085a0 <UART_Start_Receive_IT+0x160>)
 8008488:	5299      	strh	r1, [r3, r2]
 800848a:	e01a      	b.n	80084c2 <UART_Start_Receive_IT+0x82>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	225c      	movs	r2, #92	; 0x5c
 8008490:	21ff      	movs	r1, #255	; 0xff
 8008492:	5299      	strh	r1, [r3, r2]
 8008494:	e015      	b.n	80084c2 <UART_Start_Receive_IT+0x82>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10d      	bne.n	80084ba <UART_Start_Receive_IT+0x7a>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d104      	bne.n	80084b0 <UART_Start_Receive_IT+0x70>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	225c      	movs	r2, #92	; 0x5c
 80084aa:	21ff      	movs	r1, #255	; 0xff
 80084ac:	5299      	strh	r1, [r3, r2]
 80084ae:	e008      	b.n	80084c2 <UART_Start_Receive_IT+0x82>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	225c      	movs	r2, #92	; 0x5c
 80084b4:	217f      	movs	r1, #127	; 0x7f
 80084b6:	5299      	strh	r1, [r3, r2]
 80084b8:	e003      	b.n	80084c2 <UART_Start_Receive_IT+0x82>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	225c      	movs	r2, #92	; 0x5c
 80084be:	2100      	movs	r1, #0
 80084c0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2284      	movs	r2, #132	; 0x84
 80084c6:	2100      	movs	r1, #0
 80084c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2280      	movs	r2, #128	; 0x80
 80084ce:	2122      	movs	r1, #34	; 0x22
 80084d0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084d2:	f3ef 8310 	mrs	r3, PRIMASK
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084dc:	2301      	movs	r3, #1
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	f383 8810 	msr	PRIMASK, r3
}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2101      	movs	r1, #1
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	f383 8810 	msr	PRIMASK, r3
}
 8008502:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	2380      	movs	r3, #128	; 0x80
 800850a:	015b      	lsls	r3, r3, #5
 800850c:	429a      	cmp	r2, r3
 800850e:	d107      	bne.n	8008520 <UART_Start_Receive_IT+0xe0>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4a22      	ldr	r2, [pc, #136]	; (80085a4 <UART_Start_Receive_IT+0x164>)
 800851c:	669a      	str	r2, [r3, #104]	; 0x68
 800851e:	e002      	b.n	8008526 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4a21      	ldr	r2, [pc, #132]	; (80085a8 <UART_Start_Receive_IT+0x168>)
 8008524:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d019      	beq.n	8008562 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852e:	f3ef 8310 	mrs	r3, PRIMASK
 8008532:	61fb      	str	r3, [r7, #28]
  return(result);
 8008534:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
 8008538:	2301      	movs	r3, #1
 800853a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	f383 8810 	msr	PRIMASK, r3
}
 8008542:	46c0      	nop			; (mov r8, r8)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2190      	movs	r1, #144	; 0x90
 8008550:	0049      	lsls	r1, r1, #1
 8008552:	430a      	orrs	r2, r1
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	f383 8810 	msr	PRIMASK, r3
}
 8008560:	e018      	b.n	8008594 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008562:	f3ef 8310 	mrs	r3, PRIMASK
 8008566:	613b      	str	r3, [r7, #16]
  return(result);
 8008568:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800856a:	63bb      	str	r3, [r7, #56]	; 0x38
 800856c:	2301      	movs	r3, #1
 800856e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f383 8810 	msr	PRIMASK, r3
}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2120      	movs	r1, #32
 8008584:	430a      	orrs	r2, r1
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f383 8810 	msr	PRIMASK, r3
}
 8008592:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b010      	add	sp, #64	; 0x40
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	000001ff 	.word	0x000001ff
 80085a4:	080088b1 	.word	0x080088b1
 80085a8:	080086f9 	.word	0x080086f9

080085ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b4:	f3ef 8310 	mrs	r3, PRIMASK
 80085b8:	617b      	str	r3, [r7, #20]
  return(result);
 80085ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
 80085be:	2301      	movs	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f383 8810 	msr	PRIMASK, r3
}
 80085c8:	46c0      	nop			; (mov r8, r8)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4926      	ldr	r1, [pc, #152]	; (8008670 <UART_EndRxTransfer+0xc4>)
 80085d6:	400a      	ands	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f383 8810 	msr	PRIMASK, r3
}
 80085e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ea:	623b      	str	r3, [r7, #32]
  return(result);
 80085ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30
 80085f0:	2301      	movs	r3, #1
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	f383 8810 	msr	PRIMASK, r3
}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2101      	movs	r1, #1
 8008608:	438a      	bics	r2, r1
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	f383 8810 	msr	PRIMASK, r3
}
 8008616:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861c:	2b01      	cmp	r3, #1
 800861e:	d118      	bne.n	8008652 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008620:	f3ef 8310 	mrs	r3, PRIMASK
 8008624:	60bb      	str	r3, [r7, #8]
  return(result);
 8008626:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800862a:	2301      	movs	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f383 8810 	msr	PRIMASK, r3
}
 8008634:	46c0      	nop			; (mov r8, r8)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2110      	movs	r1, #16
 8008642:	438a      	bics	r2, r1
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f383 8810 	msr	PRIMASK, r3
}
 8008650:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2280      	movs	r2, #128	; 0x80
 8008656:	2120      	movs	r1, #32
 8008658:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	46bd      	mov	sp, r7
 800866a:	b00e      	add	sp, #56	; 0x38
 800866c:	bd80      	pop	{r7, pc}
 800866e:	46c0      	nop			; (mov r8, r8)
 8008670:	fffffedf 	.word	0xfffffedf

08008674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	225a      	movs	r2, #90	; 0x5a
 8008686:	2100      	movs	r1, #0
 8008688:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2252      	movs	r2, #82	; 0x52
 800868e:	2100      	movs	r1, #0
 8008690:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	0018      	movs	r0, r3
 8008696:	f7ff fbb9 	bl	8007e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	46bd      	mov	sp, r7
 800869e:	b004      	add	sp, #16
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086aa:	f3ef 8310 	mrs	r3, PRIMASK
 80086ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80086b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	2301      	movs	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f383 8810 	msr	PRIMASK, r3
}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2140      	movs	r1, #64	; 0x40
 80086cc:	438a      	bics	r2, r1
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f383 8810 	msr	PRIMASK, r3
}
 80086da:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7ff fb86 	bl	8007dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086f0:	46c0      	nop			; (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b006      	add	sp, #24
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b094      	sub	sp, #80	; 0x50
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008700:	204e      	movs	r0, #78	; 0x4e
 8008702:	183b      	adds	r3, r7, r0
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	215c      	movs	r1, #92	; 0x5c
 8008708:	5a52      	ldrh	r2, [r2, r1]
 800870a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	589b      	ldr	r3, [r3, r2]
 8008712:	2b22      	cmp	r3, #34	; 0x22
 8008714:	d000      	beq.n	8008718 <UART_RxISR_8BIT+0x20>
 8008716:	e0ba      	b.n	800888e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	214c      	movs	r1, #76	; 0x4c
 800871e:	187b      	adds	r3, r7, r1
 8008720:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008722:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008724:	187b      	adds	r3, r7, r1
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b2da      	uxtb	r2, r3
 800872a:	183b      	adds	r3, r7, r0
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b2d9      	uxtb	r1, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	400a      	ands	r2, r1
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	225a      	movs	r2, #90	; 0x5a
 8008748:	5a9b      	ldrh	r3, [r3, r2]
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b299      	uxth	r1, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	225a      	movs	r2, #90	; 0x5a
 8008754:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	225a      	movs	r2, #90	; 0x5a
 800875a:	5a9b      	ldrh	r3, [r3, r2]
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d000      	beq.n	8008764 <UART_RxISR_8BIT+0x6c>
 8008762:	e09c      	b.n	800889e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008764:	f3ef 8310 	mrs	r3, PRIMASK
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876c:	64bb      	str	r3, [r7, #72]	; 0x48
 800876e:	2301      	movs	r3, #1
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	f383 8810 	msr	PRIMASK, r3
}
 8008778:	46c0      	nop			; (mov r8, r8)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4948      	ldr	r1, [pc, #288]	; (80088a8 <UART_RxISR_8BIT+0x1b0>)
 8008786:	400a      	ands	r2, r1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	f383 8810 	msr	PRIMASK, r3
}
 8008794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008796:	f3ef 8310 	mrs	r3, PRIMASK
 800879a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879e:	647b      	str	r3, [r7, #68]	; 0x44
 80087a0:	2301      	movs	r3, #1
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	f383 8810 	msr	PRIMASK, r3
}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2101      	movs	r1, #1
 80087b8:	438a      	bics	r2, r1
 80087ba:	609a      	str	r2, [r3, #8]
 80087bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	f383 8810 	msr	PRIMASK, r3
}
 80087c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2280      	movs	r2, #128	; 0x80
 80087cc:	2120      	movs	r1, #32
 80087ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	2380      	movs	r3, #128	; 0x80
 80087e4:	041b      	lsls	r3, r3, #16
 80087e6:	4013      	ands	r3, r2
 80087e8:	d018      	beq.n	800881c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ea:	f3ef 8310 	mrs	r3, PRIMASK
 80087ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80087f0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087f2:	643b      	str	r3, [r7, #64]	; 0x40
 80087f4:	2301      	movs	r3, #1
 80087f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	f383 8810 	msr	PRIMASK, r3
}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4928      	ldr	r1, [pc, #160]	; (80088ac <UART_RxISR_8BIT+0x1b4>)
 800880c:	400a      	ands	r2, r1
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	f383 8810 	msr	PRIMASK, r3
}
 800881a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008820:	2b01      	cmp	r3, #1
 8008822:	d12f      	bne.n	8008884 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800882a:	f3ef 8310 	mrs	r3, PRIMASK
 800882e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008830:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008834:	2301      	movs	r3, #1
 8008836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f383 8810 	msr	PRIMASK, r3
}
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2110      	movs	r1, #16
 800884c:	438a      	bics	r2, r1
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f383 8810 	msr	PRIMASK, r3
}
 800885a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	2210      	movs	r2, #16
 8008864:	4013      	ands	r3, r2
 8008866:	2b10      	cmp	r3, #16
 8008868:	d103      	bne.n	8008872 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2210      	movs	r2, #16
 8008870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2258      	movs	r2, #88	; 0x58
 8008876:	5a9a      	ldrh	r2, [r3, r2]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	0011      	movs	r1, r2
 800887c:	0018      	movs	r0, r3
 800887e:	f7ff facd 	bl	8007e1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008882:	e00c      	b.n	800889e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	0018      	movs	r0, r3
 8008888:	f7fa fa6c 	bl	8002d64 <HAL_UART_RxCpltCallback>
}
 800888c:	e007      	b.n	800889e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2108      	movs	r1, #8
 800889a:	430a      	orrs	r2, r1
 800889c:	619a      	str	r2, [r3, #24]
}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b014      	add	sp, #80	; 0x50
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	fffffedf 	.word	0xfffffedf
 80088ac:	fbffffff 	.word	0xfbffffff

080088b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b094      	sub	sp, #80	; 0x50
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088b8:	204e      	movs	r0, #78	; 0x4e
 80088ba:	183b      	adds	r3, r7, r0
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	215c      	movs	r1, #92	; 0x5c
 80088c0:	5a52      	ldrh	r2, [r2, r1]
 80088c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2280      	movs	r2, #128	; 0x80
 80088c8:	589b      	ldr	r3, [r3, r2]
 80088ca:	2b22      	cmp	r3, #34	; 0x22
 80088cc:	d000      	beq.n	80088d0 <UART_RxISR_16BIT+0x20>
 80088ce:	e0ba      	b.n	8008a46 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	214c      	movs	r1, #76	; 0x4c
 80088d6:	187b      	adds	r3, r7, r1
 80088d8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80088da:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80088e2:	187b      	adds	r3, r7, r1
 80088e4:	183a      	adds	r2, r7, r0
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	8812      	ldrh	r2, [r2, #0]
 80088ea:	4013      	ands	r3, r2
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	1c9a      	adds	r2, r3, #2
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	225a      	movs	r2, #90	; 0x5a
 8008900:	5a9b      	ldrh	r3, [r3, r2]
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b299      	uxth	r1, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	225a      	movs	r2, #90	; 0x5a
 800890c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	225a      	movs	r2, #90	; 0x5a
 8008912:	5a9b      	ldrh	r3, [r3, r2]
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d000      	beq.n	800891c <UART_RxISR_16BIT+0x6c>
 800891a:	e09c      	b.n	8008a56 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800891c:	f3ef 8310 	mrs	r3, PRIMASK
 8008920:	623b      	str	r3, [r7, #32]
  return(result);
 8008922:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
 8008926:	2301      	movs	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	f383 8810 	msr	PRIMASK, r3
}
 8008930:	46c0      	nop			; (mov r8, r8)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4948      	ldr	r1, [pc, #288]	; (8008a60 <UART_RxISR_16BIT+0x1b0>)
 800893e:	400a      	ands	r2, r1
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	f383 8810 	msr	PRIMASK, r3
}
 800894c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894e:	f3ef 8310 	mrs	r3, PRIMASK
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008956:	643b      	str	r3, [r7, #64]	; 0x40
 8008958:	2301      	movs	r3, #1
 800895a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	f383 8810 	msr	PRIMASK, r3
}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2101      	movs	r1, #1
 8008970:	438a      	bics	r2, r1
 8008972:	609a      	str	r2, [r3, #8]
 8008974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	f383 8810 	msr	PRIMASK, r3
}
 800897e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2280      	movs	r2, #128	; 0x80
 8008984:	2120      	movs	r1, #32
 8008986:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	2380      	movs	r3, #128	; 0x80
 800899c:	041b      	lsls	r3, r3, #16
 800899e:	4013      	ands	r3, r2
 80089a0:	d018      	beq.n	80089d4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a2:	f3ef 8310 	mrs	r3, PRIMASK
 80089a6:	617b      	str	r3, [r7, #20]
  return(result);
 80089a8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ac:	2301      	movs	r3, #1
 80089ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f383 8810 	msr	PRIMASK, r3
}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4928      	ldr	r1, [pc, #160]	; (8008a64 <UART_RxISR_16BIT+0x1b4>)
 80089c4:	400a      	ands	r2, r1
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f383 8810 	msr	PRIMASK, r3
}
 80089d2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d12f      	bne.n	8008a3c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e2:	f3ef 8310 	mrs	r3, PRIMASK
 80089e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80089e8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ec:	2301      	movs	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2110      	movs	r1, #16
 8008a04:	438a      	bics	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f383 8810 	msr	PRIMASK, r3
}
 8008a12:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b10      	cmp	r3, #16
 8008a20:	d103      	bne.n	8008a2a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2210      	movs	r2, #16
 8008a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2258      	movs	r2, #88	; 0x58
 8008a2e:	5a9a      	ldrh	r2, [r3, r2]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7ff f9f1 	bl	8007e1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a3a:	e00c      	b.n	8008a56 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f7fa f990 	bl	8002d64 <HAL_UART_RxCpltCallback>
}
 8008a44:	e007      	b.n	8008a56 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699a      	ldr	r2, [r3, #24]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2108      	movs	r1, #8
 8008a52:	430a      	orrs	r2, r1
 8008a54:	619a      	str	r2, [r3, #24]
}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	b014      	add	sp, #80	; 0x50
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	fffffedf 	.word	0xfffffedf
 8008a64:	fbffffff 	.word	0xfbffffff

08008a68 <__errno>:
 8008a68:	4b01      	ldr	r3, [pc, #4]	; (8008a70 <__errno+0x8>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	4770      	bx	lr
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	20000030 	.word	0x20000030

08008a74 <__libc_init_array>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	2600      	movs	r6, #0
 8008a78:	4d0c      	ldr	r5, [pc, #48]	; (8008aac <__libc_init_array+0x38>)
 8008a7a:	4c0d      	ldr	r4, [pc, #52]	; (8008ab0 <__libc_init_array+0x3c>)
 8008a7c:	1b64      	subs	r4, r4, r5
 8008a7e:	10a4      	asrs	r4, r4, #2
 8008a80:	42a6      	cmp	r6, r4
 8008a82:	d109      	bne.n	8008a98 <__libc_init_array+0x24>
 8008a84:	2600      	movs	r6, #0
 8008a86:	f004 fde1 	bl	800d64c <_init>
 8008a8a:	4d0a      	ldr	r5, [pc, #40]	; (8008ab4 <__libc_init_array+0x40>)
 8008a8c:	4c0a      	ldr	r4, [pc, #40]	; (8008ab8 <__libc_init_array+0x44>)
 8008a8e:	1b64      	subs	r4, r4, r5
 8008a90:	10a4      	asrs	r4, r4, #2
 8008a92:	42a6      	cmp	r6, r4
 8008a94:	d105      	bne.n	8008aa2 <__libc_init_array+0x2e>
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	00b3      	lsls	r3, r6, #2
 8008a9a:	58eb      	ldr	r3, [r5, r3]
 8008a9c:	4798      	blx	r3
 8008a9e:	3601      	adds	r6, #1
 8008aa0:	e7ee      	b.n	8008a80 <__libc_init_array+0xc>
 8008aa2:	00b3      	lsls	r3, r6, #2
 8008aa4:	58eb      	ldr	r3, [r5, r3]
 8008aa6:	4798      	blx	r3
 8008aa8:	3601      	adds	r6, #1
 8008aaa:	e7f2      	b.n	8008a92 <__libc_init_array+0x1e>
 8008aac:	0800dcac 	.word	0x0800dcac
 8008ab0:	0800dcac 	.word	0x0800dcac
 8008ab4:	0800dcac 	.word	0x0800dcac
 8008ab8:	0800dcb0 	.word	0x0800dcb0

08008abc <memcpy>:
 8008abc:	2300      	movs	r3, #0
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d100      	bne.n	8008ac6 <memcpy+0xa>
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	5ccc      	ldrb	r4, [r1, r3]
 8008ac8:	54c4      	strb	r4, [r0, r3]
 8008aca:	3301      	adds	r3, #1
 8008acc:	e7f8      	b.n	8008ac0 <memcpy+0x4>

08008ace <memset>:
 8008ace:	0003      	movs	r3, r0
 8008ad0:	1882      	adds	r2, r0, r2
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d100      	bne.n	8008ad8 <memset+0xa>
 8008ad6:	4770      	bx	lr
 8008ad8:	7019      	strb	r1, [r3, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	e7f9      	b.n	8008ad2 <memset+0x4>

08008ade <__cvt>:
 8008ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae0:	001e      	movs	r6, r3
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	0014      	movs	r4, r2
 8008ae6:	b08b      	sub	sp, #44	; 0x2c
 8008ae8:	429e      	cmp	r6, r3
 8008aea:	da04      	bge.n	8008af6 <__cvt+0x18>
 8008aec:	2180      	movs	r1, #128	; 0x80
 8008aee:	0609      	lsls	r1, r1, #24
 8008af0:	1873      	adds	r3, r6, r1
 8008af2:	001e      	movs	r6, r3
 8008af4:	232d      	movs	r3, #45	; 0x2d
 8008af6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008af8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008afa:	7013      	strb	r3, [r2, #0]
 8008afc:	2320      	movs	r3, #32
 8008afe:	2203      	movs	r2, #3
 8008b00:	439f      	bics	r7, r3
 8008b02:	2f46      	cmp	r7, #70	; 0x46
 8008b04:	d007      	beq.n	8008b16 <__cvt+0x38>
 8008b06:	003b      	movs	r3, r7
 8008b08:	3b45      	subs	r3, #69	; 0x45
 8008b0a:	4259      	negs	r1, r3
 8008b0c:	414b      	adcs	r3, r1
 8008b0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b10:	3a01      	subs	r2, #1
 8008b12:	18cb      	adds	r3, r1, r3
 8008b14:	9310      	str	r3, [sp, #64]	; 0x40
 8008b16:	ab09      	add	r3, sp, #36	; 0x24
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	ab08      	add	r3, sp, #32
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b20:	9200      	str	r2, [sp, #0]
 8008b22:	9302      	str	r3, [sp, #8]
 8008b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b26:	0022      	movs	r2, r4
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	0033      	movs	r3, r6
 8008b2c:	f001 ff28 	bl	800a980 <_dtoa_r>
 8008b30:	0005      	movs	r5, r0
 8008b32:	2f47      	cmp	r7, #71	; 0x47
 8008b34:	d102      	bne.n	8008b3c <__cvt+0x5e>
 8008b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b38:	07db      	lsls	r3, r3, #31
 8008b3a:	d528      	bpl.n	8008b8e <__cvt+0xb0>
 8008b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b3e:	18eb      	adds	r3, r5, r3
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	2f46      	cmp	r7, #70	; 0x46
 8008b44:	d114      	bne.n	8008b70 <__cvt+0x92>
 8008b46:	782b      	ldrb	r3, [r5, #0]
 8008b48:	2b30      	cmp	r3, #48	; 0x30
 8008b4a:	d10c      	bne.n	8008b66 <__cvt+0x88>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	0020      	movs	r0, r4
 8008b52:	0031      	movs	r1, r6
 8008b54:	f7f7 fc7a 	bl	800044c <__aeabi_dcmpeq>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d104      	bne.n	8008b66 <__cvt+0x88>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b68:	9a07      	ldr	r2, [sp, #28]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	18d3      	adds	r3, r2, r3
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2300      	movs	r3, #0
 8008b74:	0020      	movs	r0, r4
 8008b76:	0031      	movs	r1, r6
 8008b78:	f7f7 fc68 	bl	800044c <__aeabi_dcmpeq>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d001      	beq.n	8008b84 <__cvt+0xa6>
 8008b80:	9b07      	ldr	r3, [sp, #28]
 8008b82:	9309      	str	r3, [sp, #36]	; 0x24
 8008b84:	2230      	movs	r2, #48	; 0x30
 8008b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b88:	9907      	ldr	r1, [sp, #28]
 8008b8a:	428b      	cmp	r3, r1
 8008b8c:	d306      	bcc.n	8008b9c <__cvt+0xbe>
 8008b8e:	0028      	movs	r0, r5
 8008b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b94:	1b5b      	subs	r3, r3, r5
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	b00b      	add	sp, #44	; 0x2c
 8008b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9c:	1c59      	adds	r1, r3, #1
 8008b9e:	9109      	str	r1, [sp, #36]	; 0x24
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e7f0      	b.n	8008b86 <__cvt+0xa8>

08008ba4 <__exponent>:
 8008ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba6:	1c83      	adds	r3, r0, #2
 8008ba8:	b087      	sub	sp, #28
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	0005      	movs	r5, r0
 8008bae:	000c      	movs	r4, r1
 8008bb0:	232b      	movs	r3, #43	; 0x2b
 8008bb2:	7002      	strb	r2, [r0, #0]
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	da01      	bge.n	8008bbc <__exponent+0x18>
 8008bb8:	424c      	negs	r4, r1
 8008bba:	3302      	adds	r3, #2
 8008bbc:	706b      	strb	r3, [r5, #1]
 8008bbe:	2c09      	cmp	r4, #9
 8008bc0:	dd31      	ble.n	8008c26 <__exponent+0x82>
 8008bc2:	270a      	movs	r7, #10
 8008bc4:	ab04      	add	r3, sp, #16
 8008bc6:	1dde      	adds	r6, r3, #7
 8008bc8:	0020      	movs	r0, r4
 8008bca:	0039      	movs	r1, r7
 8008bcc:	9601      	str	r6, [sp, #4]
 8008bce:	f7f7 fc27 	bl	8000420 <__aeabi_idivmod>
 8008bd2:	3e01      	subs	r6, #1
 8008bd4:	3130      	adds	r1, #48	; 0x30
 8008bd6:	0020      	movs	r0, r4
 8008bd8:	7031      	strb	r1, [r6, #0]
 8008bda:	0039      	movs	r1, r7
 8008bdc:	9402      	str	r4, [sp, #8]
 8008bde:	f7f7 fb39 	bl	8000254 <__divsi3>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	0004      	movs	r4, r0
 8008be6:	2b63      	cmp	r3, #99	; 0x63
 8008be8:	dcee      	bgt.n	8008bc8 <__exponent+0x24>
 8008bea:	9b01      	ldr	r3, [sp, #4]
 8008bec:	3430      	adds	r4, #48	; 0x30
 8008bee:	1e9a      	subs	r2, r3, #2
 8008bf0:	0013      	movs	r3, r2
 8008bf2:	9903      	ldr	r1, [sp, #12]
 8008bf4:	7014      	strb	r4, [r2, #0]
 8008bf6:	a804      	add	r0, sp, #16
 8008bf8:	3007      	adds	r0, #7
 8008bfa:	4298      	cmp	r0, r3
 8008bfc:	d80e      	bhi.n	8008c1c <__exponent+0x78>
 8008bfe:	ab04      	add	r3, sp, #16
 8008c00:	3307      	adds	r3, #7
 8008c02:	2000      	movs	r0, #0
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d804      	bhi.n	8008c12 <__exponent+0x6e>
 8008c08:	ab04      	add	r3, sp, #16
 8008c0a:	3009      	adds	r0, #9
 8008c0c:	18c0      	adds	r0, r0, r3
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	1ac0      	subs	r0, r0, r3
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	1818      	adds	r0, r3, r0
 8008c16:	1b40      	subs	r0, r0, r5
 8008c18:	b007      	add	sp, #28
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	7818      	ldrb	r0, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	7008      	strb	r0, [r1, #0]
 8008c22:	3101      	adds	r1, #1
 8008c24:	e7e7      	b.n	8008bf6 <__exponent+0x52>
 8008c26:	2330      	movs	r3, #48	; 0x30
 8008c28:	18e4      	adds	r4, r4, r3
 8008c2a:	70ab      	strb	r3, [r5, #2]
 8008c2c:	1d28      	adds	r0, r5, #4
 8008c2e:	70ec      	strb	r4, [r5, #3]
 8008c30:	e7f1      	b.n	8008c16 <__exponent+0x72>
	...

08008c34 <_printf_float>:
 8008c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c36:	b095      	sub	sp, #84	; 0x54
 8008c38:	000c      	movs	r4, r1
 8008c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c3c:	001e      	movs	r6, r3
 8008c3e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008c40:	0007      	movs	r7, r0
 8008c42:	f003 f9f9 	bl	800c038 <_localeconv_r>
 8008c46:	6803      	ldr	r3, [r0, #0]
 8008c48:	0018      	movs	r0, r3
 8008c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c4c:	f7f7 fa5c 	bl	8000108 <strlen>
 8008c50:	2300      	movs	r3, #0
 8008c52:	9312      	str	r3, [sp, #72]	; 0x48
 8008c54:	7e23      	ldrb	r3, [r4, #24]
 8008c56:	2207      	movs	r2, #7
 8008c58:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	900e      	str	r0, [sp, #56]	; 0x38
 8008c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	05c9      	lsls	r1, r1, #23
 8008c66:	d547      	bpl.n	8008cf8 <_printf_float+0xc4>
 8008c68:	189b      	adds	r3, r3, r2
 8008c6a:	4393      	bics	r3, r2
 8008c6c:	001a      	movs	r2, r3
 8008c6e:	3208      	adds	r2, #8
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	64a2      	str	r2, [r4, #72]	; 0x48
 8008c78:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008c7e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c82:	006b      	lsls	r3, r5, #1
 8008c84:	085b      	lsrs	r3, r3, #1
 8008c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c8a:	4ba7      	ldr	r3, [pc, #668]	; (8008f28 <_printf_float+0x2f4>)
 8008c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c8e:	4252      	negs	r2, r2
 8008c90:	f7f9 fce8 	bl	8002664 <__aeabi_dcmpun>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d131      	bne.n	8008cfc <_printf_float+0xc8>
 8008c98:	2201      	movs	r2, #1
 8008c9a:	4ba3      	ldr	r3, [pc, #652]	; (8008f28 <_printf_float+0x2f4>)
 8008c9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008ca0:	4252      	negs	r2, r2
 8008ca2:	f7f7 fbe3 	bl	800046c <__aeabi_dcmple>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d128      	bne.n	8008cfc <_printf_float+0xc8>
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	0029      	movs	r1, r5
 8008cb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008cb2:	f7f7 fbd1 	bl	8000458 <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d003      	beq.n	8008cc2 <_printf_float+0x8e>
 8008cba:	0023      	movs	r3, r4
 8008cbc:	222d      	movs	r2, #45	; 0x2d
 8008cbe:	3343      	adds	r3, #67	; 0x43
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc4:	4d99      	ldr	r5, [pc, #612]	; (8008f2c <_printf_float+0x2f8>)
 8008cc6:	2b47      	cmp	r3, #71	; 0x47
 8008cc8:	d900      	bls.n	8008ccc <_printf_float+0x98>
 8008cca:	4d99      	ldr	r5, [pc, #612]	; (8008f30 <_printf_float+0x2fc>)
 8008ccc:	2303      	movs	r3, #3
 8008cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	439a      	bics	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cde:	0021      	movs	r1, r4
 8008ce0:	0038      	movs	r0, r7
 8008ce2:	9600      	str	r6, [sp, #0]
 8008ce4:	aa13      	add	r2, sp, #76	; 0x4c
 8008ce6:	f000 f9e7 	bl	80090b8 <_printf_common>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d000      	beq.n	8008cf0 <_printf_float+0xbc>
 8008cee:	e0a2      	b.n	8008e36 <_printf_float+0x202>
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	4240      	negs	r0, r0
 8008cf4:	b015      	add	sp, #84	; 0x54
 8008cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf8:	3307      	adds	r3, #7
 8008cfa:	e7b6      	b.n	8008c6a <_printf_float+0x36>
 8008cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cfe:	002b      	movs	r3, r5
 8008d00:	0010      	movs	r0, r2
 8008d02:	0029      	movs	r1, r5
 8008d04:	f7f9 fcae 	bl	8002664 <__aeabi_dcmpun>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d00b      	beq.n	8008d24 <_printf_float+0xf0>
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	da03      	bge.n	8008d18 <_printf_float+0xe4>
 8008d10:	0023      	movs	r3, r4
 8008d12:	222d      	movs	r2, #45	; 0x2d
 8008d14:	3343      	adds	r3, #67	; 0x43
 8008d16:	701a      	strb	r2, [r3, #0]
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	4d86      	ldr	r5, [pc, #536]	; (8008f34 <_printf_float+0x300>)
 8008d1c:	2b47      	cmp	r3, #71	; 0x47
 8008d1e:	d9d5      	bls.n	8008ccc <_printf_float+0x98>
 8008d20:	4d85      	ldr	r5, [pc, #532]	; (8008f38 <_printf_float+0x304>)
 8008d22:	e7d3      	b.n	8008ccc <_printf_float+0x98>
 8008d24:	2220      	movs	r2, #32
 8008d26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	4391      	bics	r1, r2
 8008d2c:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	d149      	bne.n	8008dc6 <_printf_float+0x192>
 8008d32:	3307      	adds	r3, #7
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	9206      	str	r2, [sp, #24]
 8008d42:	aa12      	add	r2, sp, #72	; 0x48
 8008d44:	9205      	str	r2, [sp, #20]
 8008d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d48:	a908      	add	r1, sp, #32
 8008d4a:	9204      	str	r2, [sp, #16]
 8008d4c:	aa11      	add	r2, sp, #68	; 0x44
 8008d4e:	9203      	str	r2, [sp, #12]
 8008d50:	2223      	movs	r2, #35	; 0x23
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	1852      	adds	r2, r2, r1
 8008d5a:	9202      	str	r2, [sp, #8]
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	0038      	movs	r0, r7
 8008d60:	002b      	movs	r3, r5
 8008d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d64:	f7ff febb 	bl	8008ade <__cvt>
 8008d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d6a:	0005      	movs	r5, r0
 8008d6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d6e:	2b47      	cmp	r3, #71	; 0x47
 8008d70:	d108      	bne.n	8008d84 <_printf_float+0x150>
 8008d72:	1ccb      	adds	r3, r1, #3
 8008d74:	db02      	blt.n	8008d7c <_printf_float+0x148>
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	dd48      	ble.n	8008e0e <_printf_float+0x1da>
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7e:	3b02      	subs	r3, #2
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	930a      	str	r3, [sp, #40]	; 0x28
 8008d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d86:	2b65      	cmp	r3, #101	; 0x65
 8008d88:	d824      	bhi.n	8008dd4 <_printf_float+0x1a0>
 8008d8a:	0020      	movs	r0, r4
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	3901      	subs	r1, #1
 8008d90:	3050      	adds	r0, #80	; 0x50
 8008d92:	9111      	str	r1, [sp, #68]	; 0x44
 8008d94:	f7ff ff06 	bl	8008ba4 <__exponent>
 8008d98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d9c:	1813      	adds	r3, r2, r0
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	2a01      	cmp	r2, #1
 8008da2:	dc02      	bgt.n	8008daa <_printf_float+0x176>
 8008da4:	6822      	ldr	r2, [r4, #0]
 8008da6:	07d2      	lsls	r2, r2, #31
 8008da8:	d501      	bpl.n	8008dae <_printf_float+0x17a>
 8008daa:	3301      	adds	r3, #1
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	2323      	movs	r3, #35	; 0x23
 8008db0:	aa08      	add	r2, sp, #32
 8008db2:	189b      	adds	r3, r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d100      	bne.n	8008dbc <_printf_float+0x188>
 8008dba:	e78f      	b.n	8008cdc <_printf_float+0xa8>
 8008dbc:	0023      	movs	r3, r4
 8008dbe:	222d      	movs	r2, #45	; 0x2d
 8008dc0:	3343      	adds	r3, #67	; 0x43
 8008dc2:	701a      	strb	r2, [r3, #0]
 8008dc4:	e78a      	b.n	8008cdc <_printf_float+0xa8>
 8008dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dc8:	2a47      	cmp	r2, #71	; 0x47
 8008dca:	d1b4      	bne.n	8008d36 <_printf_float+0x102>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1b2      	bne.n	8008d36 <_printf_float+0x102>
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	e7af      	b.n	8008d34 <_printf_float+0x100>
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd6:	2b66      	cmp	r3, #102	; 0x66
 8008dd8:	d11b      	bne.n	8008e12 <_printf_float+0x1de>
 8008dda:	6863      	ldr	r3, [r4, #4]
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	dd0d      	ble.n	8008dfc <_printf_float+0x1c8>
 8008de0:	6121      	str	r1, [r4, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <_printf_float+0x1b8>
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	07d2      	lsls	r2, r2, #31
 8008dea:	d502      	bpl.n	8008df2 <_printf_float+0x1be>
 8008dec:	3301      	adds	r3, #1
 8008dee:	1859      	adds	r1, r3, r1
 8008df0:	6121      	str	r1, [r4, #16]
 8008df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008df4:	65a3      	str	r3, [r4, #88]	; 0x58
 8008df6:	2300      	movs	r3, #0
 8008df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfa:	e7d8      	b.n	8008dae <_printf_float+0x17a>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d103      	bne.n	8008e08 <_printf_float+0x1d4>
 8008e00:	2201      	movs	r2, #1
 8008e02:	6821      	ldr	r1, [r4, #0]
 8008e04:	4211      	tst	r1, r2
 8008e06:	d000      	beq.n	8008e0a <_printf_float+0x1d6>
 8008e08:	1c9a      	adds	r2, r3, #2
 8008e0a:	6122      	str	r2, [r4, #16]
 8008e0c:	e7f1      	b.n	8008df2 <_printf_float+0x1be>
 8008e0e:	2367      	movs	r3, #103	; 0x67
 8008e10:	930a      	str	r3, [sp, #40]	; 0x28
 8008e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e16:	4293      	cmp	r3, r2
 8008e18:	db06      	blt.n	8008e28 <_printf_float+0x1f4>
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	07d2      	lsls	r2, r2, #31
 8008e20:	d5e7      	bpl.n	8008df2 <_printf_float+0x1be>
 8008e22:	3301      	adds	r3, #1
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	e7e4      	b.n	8008df2 <_printf_float+0x1be>
 8008e28:	2101      	movs	r1, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dc01      	bgt.n	8008e32 <_printf_float+0x1fe>
 8008e2e:	1849      	adds	r1, r1, r1
 8008e30:	1ac9      	subs	r1, r1, r3
 8008e32:	1852      	adds	r2, r2, r1
 8008e34:	e7e9      	b.n	8008e0a <_printf_float+0x1d6>
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	0553      	lsls	r3, r2, #21
 8008e3a:	d407      	bmi.n	8008e4c <_printf_float+0x218>
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	002a      	movs	r2, r5
 8008e40:	0038      	movs	r0, r7
 8008e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e44:	47b0      	blx	r6
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	d128      	bne.n	8008e9c <_printf_float+0x268>
 8008e4a:	e751      	b.n	8008cf0 <_printf_float+0xbc>
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4e:	2b65      	cmp	r3, #101	; 0x65
 8008e50:	d800      	bhi.n	8008e54 <_printf_float+0x220>
 8008e52:	e0e1      	b.n	8009018 <_printf_float+0x3e4>
 8008e54:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008e56:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f7f7 faf6 	bl	800044c <__aeabi_dcmpeq>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d031      	beq.n	8008ec8 <_printf_float+0x294>
 8008e64:	2301      	movs	r3, #1
 8008e66:	0038      	movs	r0, r7
 8008e68:	4a34      	ldr	r2, [pc, #208]	; (8008f3c <_printf_float+0x308>)
 8008e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e6c:	47b0      	blx	r6
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d100      	bne.n	8008e74 <_printf_float+0x240>
 8008e72:	e73d      	b.n	8008cf0 <_printf_float+0xbc>
 8008e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	db02      	blt.n	8008e82 <_printf_float+0x24e>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07db      	lsls	r3, r3, #31
 8008e80:	d50c      	bpl.n	8008e9c <_printf_float+0x268>
 8008e82:	0038      	movs	r0, r7
 8008e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e8a:	47b0      	blx	r6
 8008e8c:	2500      	movs	r5, #0
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d100      	bne.n	8008e94 <_printf_float+0x260>
 8008e92:	e72d      	b.n	8008cf0 <_printf_float+0xbc>
 8008e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e96:	3b01      	subs	r3, #1
 8008e98:	42ab      	cmp	r3, r5
 8008e9a:	dc0a      	bgt.n	8008eb2 <_printf_float+0x27e>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	079b      	lsls	r3, r3, #30
 8008ea0:	d500      	bpl.n	8008ea4 <_printf_float+0x270>
 8008ea2:	e106      	b.n	80090b2 <_printf_float+0x47e>
 8008ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ea6:	68e0      	ldr	r0, [r4, #12]
 8008ea8:	4298      	cmp	r0, r3
 8008eaa:	db00      	blt.n	8008eae <_printf_float+0x27a>
 8008eac:	e722      	b.n	8008cf4 <_printf_float+0xc0>
 8008eae:	0018      	movs	r0, r3
 8008eb0:	e720      	b.n	8008cf4 <_printf_float+0xc0>
 8008eb2:	0022      	movs	r2, r4
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	0038      	movs	r0, r7
 8008eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eba:	321a      	adds	r2, #26
 8008ebc:	47b0      	blx	r6
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	d100      	bne.n	8008ec4 <_printf_float+0x290>
 8008ec2:	e715      	b.n	8008cf0 <_printf_float+0xbc>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	e7e5      	b.n	8008e94 <_printf_float+0x260>
 8008ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dc38      	bgt.n	8008f40 <_printf_float+0x30c>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	0038      	movs	r0, r7
 8008ed2:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <_printf_float+0x308>)
 8008ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ed6:	47b0      	blx	r6
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d100      	bne.n	8008ede <_printf_float+0x2aa>
 8008edc:	e708      	b.n	8008cf0 <_printf_float+0xbc>
 8008ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	d102      	bne.n	8008eec <_printf_float+0x2b8>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	07db      	lsls	r3, r3, #31
 8008eea:	d5d7      	bpl.n	8008e9c <_printf_float+0x268>
 8008eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eee:	0038      	movs	r0, r7
 8008ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ef4:	47b0      	blx	r6
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d100      	bne.n	8008efc <_printf_float+0x2c8>
 8008efa:	e6f9      	b.n	8008cf0 <_printf_float+0xbc>
 8008efc:	2300      	movs	r3, #0
 8008efe:	930a      	str	r3, [sp, #40]	; 0x28
 8008f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f04:	425b      	negs	r3, r3
 8008f06:	4293      	cmp	r3, r2
 8008f08:	dc01      	bgt.n	8008f0e <_printf_float+0x2da>
 8008f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f0c:	e797      	b.n	8008e3e <_printf_float+0x20a>
 8008f0e:	0022      	movs	r2, r4
 8008f10:	2301      	movs	r3, #1
 8008f12:	0038      	movs	r0, r7
 8008f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f16:	321a      	adds	r2, #26
 8008f18:	47b0      	blx	r6
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d100      	bne.n	8008f20 <_printf_float+0x2ec>
 8008f1e:	e6e7      	b.n	8008cf0 <_printf_float+0xbc>
 8008f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f22:	3301      	adds	r3, #1
 8008f24:	e7eb      	b.n	8008efe <_printf_float+0x2ca>
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	7fefffff 	.word	0x7fefffff
 8008f2c:	0800d800 	.word	0x0800d800
 8008f30:	0800d804 	.word	0x0800d804
 8008f34:	0800d808 	.word	0x0800d808
 8008f38:	0800d80c 	.word	0x0800d80c
 8008f3c:	0800d810 	.word	0x0800d810
 8008f40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f44:	920a      	str	r2, [sp, #40]	; 0x28
 8008f46:	429a      	cmp	r2, r3
 8008f48:	dd00      	ble.n	8008f4c <_printf_float+0x318>
 8008f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dc3c      	bgt.n	8008fcc <_printf_float+0x398>
 8008f52:	2300      	movs	r3, #0
 8008f54:	930d      	str	r3, [sp, #52]	; 0x34
 8008f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	17db      	asrs	r3, r3, #31
 8008f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f66:	4013      	ands	r3, r2
 8008f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	dc34      	bgt.n	8008fdc <_printf_float+0x3a8>
 8008f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f76:	4293      	cmp	r3, r2
 8008f78:	db3d      	blt.n	8008ff6 <_printf_float+0x3c2>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	07db      	lsls	r3, r3, #31
 8008f7e:	d43a      	bmi.n	8008ff6 <_printf_float+0x3c2>
 8008f80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	1a52      	subs	r2, r2, r1
 8008f8a:	920a      	str	r2, [sp, #40]	; 0x28
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	dd00      	ble.n	8008f92 <_printf_float+0x35e>
 8008f90:	930a      	str	r3, [sp, #40]	; 0x28
 8008f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc36      	bgt.n	8009006 <_printf_float+0x3d2>
 8008f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	17db      	asrs	r3, r3, #31
 8008fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fac:	400a      	ands	r2, r1
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dc00      	bgt.n	8008fb6 <_printf_float+0x382>
 8008fb4:	e772      	b.n	8008e9c <_printf_float+0x268>
 8008fb6:	0022      	movs	r2, r4
 8008fb8:	2301      	movs	r3, #1
 8008fba:	0038      	movs	r0, r7
 8008fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fbe:	321a      	adds	r2, #26
 8008fc0:	47b0      	blx	r6
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	d100      	bne.n	8008fc8 <_printf_float+0x394>
 8008fc6:	e693      	b.n	8008cf0 <_printf_float+0xbc>
 8008fc8:	3501      	adds	r5, #1
 8008fca:	e7ea      	b.n	8008fa2 <_printf_float+0x36e>
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fce:	002a      	movs	r2, r5
 8008fd0:	0038      	movs	r0, r7
 8008fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fd4:	47b0      	blx	r6
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d1bb      	bne.n	8008f52 <_printf_float+0x31e>
 8008fda:	e689      	b.n	8008cf0 <_printf_float+0xbc>
 8008fdc:	0022      	movs	r2, r4
 8008fde:	2301      	movs	r3, #1
 8008fe0:	0038      	movs	r0, r7
 8008fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fe4:	321a      	adds	r2, #26
 8008fe6:	47b0      	blx	r6
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d100      	bne.n	8008fee <_printf_float+0x3ba>
 8008fec:	e680      	b.n	8008cf0 <_printf_float+0xbc>
 8008fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff4:	e7b3      	b.n	8008f5e <_printf_float+0x32a>
 8008ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff8:	0038      	movs	r0, r7
 8008ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffe:	47b0      	blx	r6
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d1bd      	bne.n	8008f80 <_printf_float+0x34c>
 8009004:	e674      	b.n	8008cf0 <_printf_float+0xbc>
 8009006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009008:	0038      	movs	r0, r7
 800900a:	18ea      	adds	r2, r5, r3
 800900c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800900e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009010:	47b0      	blx	r6
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	d1c0      	bne.n	8008f98 <_printf_float+0x364>
 8009016:	e66b      	b.n	8008cf0 <_printf_float+0xbc>
 8009018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800901a:	2b01      	cmp	r3, #1
 800901c:	dc02      	bgt.n	8009024 <_printf_float+0x3f0>
 800901e:	2301      	movs	r3, #1
 8009020:	421a      	tst	r2, r3
 8009022:	d034      	beq.n	800908e <_printf_float+0x45a>
 8009024:	2301      	movs	r3, #1
 8009026:	002a      	movs	r2, r5
 8009028:	0038      	movs	r0, r7
 800902a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800902c:	47b0      	blx	r6
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d100      	bne.n	8009034 <_printf_float+0x400>
 8009032:	e65d      	b.n	8008cf0 <_printf_float+0xbc>
 8009034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009036:	0038      	movs	r0, r7
 8009038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800903a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800903c:	47b0      	blx	r6
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	d100      	bne.n	8009044 <_printf_float+0x410>
 8009042:	e655      	b.n	8008cf0 <_printf_float+0xbc>
 8009044:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009046:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	f7f7 f9fe 	bl	800044c <__aeabi_dcmpeq>
 8009050:	2800      	cmp	r0, #0
 8009052:	d11a      	bne.n	800908a <_printf_float+0x456>
 8009054:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009056:	1c6a      	adds	r2, r5, #1
 8009058:	3b01      	subs	r3, #1
 800905a:	0038      	movs	r0, r7
 800905c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905e:	47b0      	blx	r6
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d10e      	bne.n	8009082 <_printf_float+0x44e>
 8009064:	e644      	b.n	8008cf0 <_printf_float+0xbc>
 8009066:	0022      	movs	r2, r4
 8009068:	2301      	movs	r3, #1
 800906a:	0038      	movs	r0, r7
 800906c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800906e:	321a      	adds	r2, #26
 8009070:	47b0      	blx	r6
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d100      	bne.n	8009078 <_printf_float+0x444>
 8009076:	e63b      	b.n	8008cf0 <_printf_float+0xbc>
 8009078:	3501      	adds	r5, #1
 800907a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800907c:	3b01      	subs	r3, #1
 800907e:	42ab      	cmp	r3, r5
 8009080:	dcf1      	bgt.n	8009066 <_printf_float+0x432>
 8009082:	0022      	movs	r2, r4
 8009084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009086:	3250      	adds	r2, #80	; 0x50
 8009088:	e6da      	b.n	8008e40 <_printf_float+0x20c>
 800908a:	2500      	movs	r5, #0
 800908c:	e7f5      	b.n	800907a <_printf_float+0x446>
 800908e:	002a      	movs	r2, r5
 8009090:	e7e3      	b.n	800905a <_printf_float+0x426>
 8009092:	0022      	movs	r2, r4
 8009094:	2301      	movs	r3, #1
 8009096:	0038      	movs	r0, r7
 8009098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800909a:	3219      	adds	r2, #25
 800909c:	47b0      	blx	r6
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d100      	bne.n	80090a4 <_printf_float+0x470>
 80090a2:	e625      	b.n	8008cf0 <_printf_float+0xbc>
 80090a4:	3501      	adds	r5, #1
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dcf0      	bgt.n	8009092 <_printf_float+0x45e>
 80090b0:	e6f8      	b.n	8008ea4 <_printf_float+0x270>
 80090b2:	2500      	movs	r5, #0
 80090b4:	e7f7      	b.n	80090a6 <_printf_float+0x472>
 80090b6:	46c0      	nop			; (mov r8, r8)

080090b8 <_printf_common>:
 80090b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ba:	0015      	movs	r5, r2
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	688a      	ldr	r2, [r1, #8]
 80090c0:	690b      	ldr	r3, [r1, #16]
 80090c2:	000c      	movs	r4, r1
 80090c4:	9000      	str	r0, [sp, #0]
 80090c6:	4293      	cmp	r3, r2
 80090c8:	da00      	bge.n	80090cc <_printf_common+0x14>
 80090ca:	0013      	movs	r3, r2
 80090cc:	0022      	movs	r2, r4
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	3243      	adds	r2, #67	; 0x43
 80090d2:	7812      	ldrb	r2, [r2, #0]
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	d001      	beq.n	80090dc <_printf_common+0x24>
 80090d8:	3301      	adds	r3, #1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	069b      	lsls	r3, r3, #26
 80090e0:	d502      	bpl.n	80090e8 <_printf_common+0x30>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	3302      	adds	r3, #2
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	6822      	ldr	r2, [r4, #0]
 80090ea:	2306      	movs	r3, #6
 80090ec:	0017      	movs	r7, r2
 80090ee:	401f      	ands	r7, r3
 80090f0:	421a      	tst	r2, r3
 80090f2:	d027      	beq.n	8009144 <_printf_common+0x8c>
 80090f4:	0023      	movs	r3, r4
 80090f6:	3343      	adds	r3, #67	; 0x43
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	1e5a      	subs	r2, r3, #1
 80090fc:	4193      	sbcs	r3, r2
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	0692      	lsls	r2, r2, #26
 8009102:	d430      	bmi.n	8009166 <_printf_common+0xae>
 8009104:	0022      	movs	r2, r4
 8009106:	9901      	ldr	r1, [sp, #4]
 8009108:	9800      	ldr	r0, [sp, #0]
 800910a:	9e08      	ldr	r6, [sp, #32]
 800910c:	3243      	adds	r2, #67	; 0x43
 800910e:	47b0      	blx	r6
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d025      	beq.n	8009160 <_printf_common+0xa8>
 8009114:	2306      	movs	r3, #6
 8009116:	6820      	ldr	r0, [r4, #0]
 8009118:	682a      	ldr	r2, [r5, #0]
 800911a:	68e1      	ldr	r1, [r4, #12]
 800911c:	2500      	movs	r5, #0
 800911e:	4003      	ands	r3, r0
 8009120:	2b04      	cmp	r3, #4
 8009122:	d103      	bne.n	800912c <_printf_common+0x74>
 8009124:	1a8d      	subs	r5, r1, r2
 8009126:	43eb      	mvns	r3, r5
 8009128:	17db      	asrs	r3, r3, #31
 800912a:	401d      	ands	r5, r3
 800912c:	68a3      	ldr	r3, [r4, #8]
 800912e:	6922      	ldr	r2, [r4, #16]
 8009130:	4293      	cmp	r3, r2
 8009132:	dd01      	ble.n	8009138 <_printf_common+0x80>
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	18ed      	adds	r5, r5, r3
 8009138:	2700      	movs	r7, #0
 800913a:	42bd      	cmp	r5, r7
 800913c:	d120      	bne.n	8009180 <_printf_common+0xc8>
 800913e:	2000      	movs	r0, #0
 8009140:	e010      	b.n	8009164 <_printf_common+0xac>
 8009142:	3701      	adds	r7, #1
 8009144:	68e3      	ldr	r3, [r4, #12]
 8009146:	682a      	ldr	r2, [r5, #0]
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	42bb      	cmp	r3, r7
 800914c:	ddd2      	ble.n	80090f4 <_printf_common+0x3c>
 800914e:	0022      	movs	r2, r4
 8009150:	2301      	movs	r3, #1
 8009152:	9901      	ldr	r1, [sp, #4]
 8009154:	9800      	ldr	r0, [sp, #0]
 8009156:	9e08      	ldr	r6, [sp, #32]
 8009158:	3219      	adds	r2, #25
 800915a:	47b0      	blx	r6
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d1f0      	bne.n	8009142 <_printf_common+0x8a>
 8009160:	2001      	movs	r0, #1
 8009162:	4240      	negs	r0, r0
 8009164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009166:	2030      	movs	r0, #48	; 0x30
 8009168:	18e1      	adds	r1, r4, r3
 800916a:	3143      	adds	r1, #67	; 0x43
 800916c:	7008      	strb	r0, [r1, #0]
 800916e:	0021      	movs	r1, r4
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	3145      	adds	r1, #69	; 0x45
 8009174:	7809      	ldrb	r1, [r1, #0]
 8009176:	18a2      	adds	r2, r4, r2
 8009178:	3243      	adds	r2, #67	; 0x43
 800917a:	3302      	adds	r3, #2
 800917c:	7011      	strb	r1, [r2, #0]
 800917e:	e7c1      	b.n	8009104 <_printf_common+0x4c>
 8009180:	0022      	movs	r2, r4
 8009182:	2301      	movs	r3, #1
 8009184:	9901      	ldr	r1, [sp, #4]
 8009186:	9800      	ldr	r0, [sp, #0]
 8009188:	9e08      	ldr	r6, [sp, #32]
 800918a:	321a      	adds	r2, #26
 800918c:	47b0      	blx	r6
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d0e6      	beq.n	8009160 <_printf_common+0xa8>
 8009192:	3701      	adds	r7, #1
 8009194:	e7d1      	b.n	800913a <_printf_common+0x82>
	...

08009198 <_printf_i>:
 8009198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919a:	b08b      	sub	sp, #44	; 0x2c
 800919c:	9206      	str	r2, [sp, #24]
 800919e:	000a      	movs	r2, r1
 80091a0:	3243      	adds	r2, #67	; 0x43
 80091a2:	9307      	str	r3, [sp, #28]
 80091a4:	9005      	str	r0, [sp, #20]
 80091a6:	9204      	str	r2, [sp, #16]
 80091a8:	7e0a      	ldrb	r2, [r1, #24]
 80091aa:	000c      	movs	r4, r1
 80091ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ae:	2a78      	cmp	r2, #120	; 0x78
 80091b0:	d807      	bhi.n	80091c2 <_printf_i+0x2a>
 80091b2:	2a62      	cmp	r2, #98	; 0x62
 80091b4:	d809      	bhi.n	80091ca <_printf_i+0x32>
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	d100      	bne.n	80091bc <_printf_i+0x24>
 80091ba:	e0c1      	b.n	8009340 <_printf_i+0x1a8>
 80091bc:	2a58      	cmp	r2, #88	; 0x58
 80091be:	d100      	bne.n	80091c2 <_printf_i+0x2a>
 80091c0:	e08c      	b.n	80092dc <_printf_i+0x144>
 80091c2:	0026      	movs	r6, r4
 80091c4:	3642      	adds	r6, #66	; 0x42
 80091c6:	7032      	strb	r2, [r6, #0]
 80091c8:	e022      	b.n	8009210 <_printf_i+0x78>
 80091ca:	0010      	movs	r0, r2
 80091cc:	3863      	subs	r0, #99	; 0x63
 80091ce:	2815      	cmp	r0, #21
 80091d0:	d8f7      	bhi.n	80091c2 <_printf_i+0x2a>
 80091d2:	f7f6 ffab 	bl	800012c <__gnu_thumb1_case_shi>
 80091d6:	0016      	.short	0x0016
 80091d8:	fff6001f 	.word	0xfff6001f
 80091dc:	fff6fff6 	.word	0xfff6fff6
 80091e0:	001ffff6 	.word	0x001ffff6
 80091e4:	fff6fff6 	.word	0xfff6fff6
 80091e8:	fff6fff6 	.word	0xfff6fff6
 80091ec:	003600a8 	.word	0x003600a8
 80091f0:	fff6009a 	.word	0xfff6009a
 80091f4:	00b9fff6 	.word	0x00b9fff6
 80091f8:	0036fff6 	.word	0x0036fff6
 80091fc:	fff6fff6 	.word	0xfff6fff6
 8009200:	009e      	.short	0x009e
 8009202:	0026      	movs	r6, r4
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	3642      	adds	r6, #66	; 0x42
 8009208:	1d11      	adds	r1, r2, #4
 800920a:	6019      	str	r1, [r3, #0]
 800920c:	6813      	ldr	r3, [r2, #0]
 800920e:	7033      	strb	r3, [r6, #0]
 8009210:	2301      	movs	r3, #1
 8009212:	e0a7      	b.n	8009364 <_printf_i+0x1cc>
 8009214:	6808      	ldr	r0, [r1, #0]
 8009216:	6819      	ldr	r1, [r3, #0]
 8009218:	1d0a      	adds	r2, r1, #4
 800921a:	0605      	lsls	r5, r0, #24
 800921c:	d50b      	bpl.n	8009236 <_printf_i+0x9e>
 800921e:	680d      	ldr	r5, [r1, #0]
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	2d00      	cmp	r5, #0
 8009224:	da03      	bge.n	800922e <_printf_i+0x96>
 8009226:	232d      	movs	r3, #45	; 0x2d
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	426d      	negs	r5, r5
 800922c:	7013      	strb	r3, [r2, #0]
 800922e:	4b61      	ldr	r3, [pc, #388]	; (80093b4 <_printf_i+0x21c>)
 8009230:	270a      	movs	r7, #10
 8009232:	9303      	str	r3, [sp, #12]
 8009234:	e01b      	b.n	800926e <_printf_i+0xd6>
 8009236:	680d      	ldr	r5, [r1, #0]
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	0641      	lsls	r1, r0, #25
 800923c:	d5f1      	bpl.n	8009222 <_printf_i+0x8a>
 800923e:	b22d      	sxth	r5, r5
 8009240:	e7ef      	b.n	8009222 <_printf_i+0x8a>
 8009242:	680d      	ldr	r5, [r1, #0]
 8009244:	6819      	ldr	r1, [r3, #0]
 8009246:	1d08      	adds	r0, r1, #4
 8009248:	6018      	str	r0, [r3, #0]
 800924a:	062e      	lsls	r6, r5, #24
 800924c:	d501      	bpl.n	8009252 <_printf_i+0xba>
 800924e:	680d      	ldr	r5, [r1, #0]
 8009250:	e003      	b.n	800925a <_printf_i+0xc2>
 8009252:	066d      	lsls	r5, r5, #25
 8009254:	d5fb      	bpl.n	800924e <_printf_i+0xb6>
 8009256:	680d      	ldr	r5, [r1, #0]
 8009258:	b2ad      	uxth	r5, r5
 800925a:	4b56      	ldr	r3, [pc, #344]	; (80093b4 <_printf_i+0x21c>)
 800925c:	2708      	movs	r7, #8
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	2a6f      	cmp	r2, #111	; 0x6f
 8009262:	d000      	beq.n	8009266 <_printf_i+0xce>
 8009264:	3702      	adds	r7, #2
 8009266:	0023      	movs	r3, r4
 8009268:	2200      	movs	r2, #0
 800926a:	3343      	adds	r3, #67	; 0x43
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	6863      	ldr	r3, [r4, #4]
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	db03      	blt.n	800927e <_printf_i+0xe6>
 8009276:	2204      	movs	r2, #4
 8009278:	6821      	ldr	r1, [r4, #0]
 800927a:	4391      	bics	r1, r2
 800927c:	6021      	str	r1, [r4, #0]
 800927e:	2d00      	cmp	r5, #0
 8009280:	d102      	bne.n	8009288 <_printf_i+0xf0>
 8009282:	9e04      	ldr	r6, [sp, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00c      	beq.n	80092a2 <_printf_i+0x10a>
 8009288:	9e04      	ldr	r6, [sp, #16]
 800928a:	0028      	movs	r0, r5
 800928c:	0039      	movs	r1, r7
 800928e:	f7f6 ffdd 	bl	800024c <__aeabi_uidivmod>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	3e01      	subs	r6, #1
 8009296:	5c5b      	ldrb	r3, [r3, r1]
 8009298:	7033      	strb	r3, [r6, #0]
 800929a:	002b      	movs	r3, r5
 800929c:	0005      	movs	r5, r0
 800929e:	429f      	cmp	r7, r3
 80092a0:	d9f3      	bls.n	800928a <_printf_i+0xf2>
 80092a2:	2f08      	cmp	r7, #8
 80092a4:	d109      	bne.n	80092ba <_printf_i+0x122>
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	07db      	lsls	r3, r3, #31
 80092aa:	d506      	bpl.n	80092ba <_printf_i+0x122>
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	6922      	ldr	r2, [r4, #16]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	dc02      	bgt.n	80092ba <_printf_i+0x122>
 80092b4:	2330      	movs	r3, #48	; 0x30
 80092b6:	3e01      	subs	r6, #1
 80092b8:	7033      	strb	r3, [r6, #0]
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	1b9b      	subs	r3, r3, r6
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	9b07      	ldr	r3, [sp, #28]
 80092c2:	0021      	movs	r1, r4
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	9b06      	ldr	r3, [sp, #24]
 80092ca:	aa09      	add	r2, sp, #36	; 0x24
 80092cc:	f7ff fef4 	bl	80090b8 <_printf_common>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d14c      	bne.n	800936e <_printf_i+0x1d6>
 80092d4:	2001      	movs	r0, #1
 80092d6:	4240      	negs	r0, r0
 80092d8:	b00b      	add	sp, #44	; 0x2c
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092dc:	3145      	adds	r1, #69	; 0x45
 80092de:	700a      	strb	r2, [r1, #0]
 80092e0:	4a34      	ldr	r2, [pc, #208]	; (80093b4 <_printf_i+0x21c>)
 80092e2:	9203      	str	r2, [sp, #12]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	6821      	ldr	r1, [r4, #0]
 80092e8:	ca20      	ldmia	r2!, {r5}
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	0608      	lsls	r0, r1, #24
 80092ee:	d516      	bpl.n	800931e <_printf_i+0x186>
 80092f0:	07cb      	lsls	r3, r1, #31
 80092f2:	d502      	bpl.n	80092fa <_printf_i+0x162>
 80092f4:	2320      	movs	r3, #32
 80092f6:	4319      	orrs	r1, r3
 80092f8:	6021      	str	r1, [r4, #0]
 80092fa:	2710      	movs	r7, #16
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	d1b2      	bne.n	8009266 <_printf_i+0xce>
 8009300:	2320      	movs	r3, #32
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	439a      	bics	r2, r3
 8009306:	6022      	str	r2, [r4, #0]
 8009308:	e7ad      	b.n	8009266 <_printf_i+0xce>
 800930a:	2220      	movs	r2, #32
 800930c:	6809      	ldr	r1, [r1, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	0022      	movs	r2, r4
 8009314:	2178      	movs	r1, #120	; 0x78
 8009316:	3245      	adds	r2, #69	; 0x45
 8009318:	7011      	strb	r1, [r2, #0]
 800931a:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <_printf_i+0x220>)
 800931c:	e7e1      	b.n	80092e2 <_printf_i+0x14a>
 800931e:	0648      	lsls	r0, r1, #25
 8009320:	d5e6      	bpl.n	80092f0 <_printf_i+0x158>
 8009322:	b2ad      	uxth	r5, r5
 8009324:	e7e4      	b.n	80092f0 <_printf_i+0x158>
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	680d      	ldr	r5, [r1, #0]
 800932a:	1d10      	adds	r0, r2, #4
 800932c:	6949      	ldr	r1, [r1, #20]
 800932e:	6018      	str	r0, [r3, #0]
 8009330:	6813      	ldr	r3, [r2, #0]
 8009332:	062e      	lsls	r6, r5, #24
 8009334:	d501      	bpl.n	800933a <_printf_i+0x1a2>
 8009336:	6019      	str	r1, [r3, #0]
 8009338:	e002      	b.n	8009340 <_printf_i+0x1a8>
 800933a:	066d      	lsls	r5, r5, #25
 800933c:	d5fb      	bpl.n	8009336 <_printf_i+0x19e>
 800933e:	8019      	strh	r1, [r3, #0]
 8009340:	2300      	movs	r3, #0
 8009342:	9e04      	ldr	r6, [sp, #16]
 8009344:	6123      	str	r3, [r4, #16]
 8009346:	e7bb      	b.n	80092c0 <_printf_i+0x128>
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	1d11      	adds	r1, r2, #4
 800934c:	6019      	str	r1, [r3, #0]
 800934e:	6816      	ldr	r6, [r2, #0]
 8009350:	2100      	movs	r1, #0
 8009352:	0030      	movs	r0, r6
 8009354:	6862      	ldr	r2, [r4, #4]
 8009356:	f002 feff 	bl	800c158 <memchr>
 800935a:	2800      	cmp	r0, #0
 800935c:	d001      	beq.n	8009362 <_printf_i+0x1ca>
 800935e:	1b80      	subs	r0, r0, r6
 8009360:	6060      	str	r0, [r4, #4]
 8009362:	6863      	ldr	r3, [r4, #4]
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	2300      	movs	r3, #0
 8009368:	9a04      	ldr	r2, [sp, #16]
 800936a:	7013      	strb	r3, [r2, #0]
 800936c:	e7a8      	b.n	80092c0 <_printf_i+0x128>
 800936e:	6923      	ldr	r3, [r4, #16]
 8009370:	0032      	movs	r2, r6
 8009372:	9906      	ldr	r1, [sp, #24]
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	9d07      	ldr	r5, [sp, #28]
 8009378:	47a8      	blx	r5
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d0aa      	beq.n	80092d4 <_printf_i+0x13c>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	079b      	lsls	r3, r3, #30
 8009382:	d415      	bmi.n	80093b0 <_printf_i+0x218>
 8009384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009386:	68e0      	ldr	r0, [r4, #12]
 8009388:	4298      	cmp	r0, r3
 800938a:	daa5      	bge.n	80092d8 <_printf_i+0x140>
 800938c:	0018      	movs	r0, r3
 800938e:	e7a3      	b.n	80092d8 <_printf_i+0x140>
 8009390:	0022      	movs	r2, r4
 8009392:	2301      	movs	r3, #1
 8009394:	9906      	ldr	r1, [sp, #24]
 8009396:	9805      	ldr	r0, [sp, #20]
 8009398:	9e07      	ldr	r6, [sp, #28]
 800939a:	3219      	adds	r2, #25
 800939c:	47b0      	blx	r6
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d098      	beq.n	80092d4 <_printf_i+0x13c>
 80093a2:	3501      	adds	r5, #1
 80093a4:	68e3      	ldr	r3, [r4, #12]
 80093a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093a8:	1a9b      	subs	r3, r3, r2
 80093aa:	42ab      	cmp	r3, r5
 80093ac:	dcf0      	bgt.n	8009390 <_printf_i+0x1f8>
 80093ae:	e7e9      	b.n	8009384 <_printf_i+0x1ec>
 80093b0:	2500      	movs	r5, #0
 80093b2:	e7f7      	b.n	80093a4 <_printf_i+0x20c>
 80093b4:	0800d812 	.word	0x0800d812
 80093b8:	0800d823 	.word	0x0800d823

080093bc <_scanf_float>:
 80093bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093be:	b08b      	sub	sp, #44	; 0x2c
 80093c0:	0015      	movs	r5, r2
 80093c2:	9001      	str	r0, [sp, #4]
 80093c4:	22ae      	movs	r2, #174	; 0xae
 80093c6:	2000      	movs	r0, #0
 80093c8:	9306      	str	r3, [sp, #24]
 80093ca:	688b      	ldr	r3, [r1, #8]
 80093cc:	000e      	movs	r6, r1
 80093ce:	1e59      	subs	r1, r3, #1
 80093d0:	0052      	lsls	r2, r2, #1
 80093d2:	9005      	str	r0, [sp, #20]
 80093d4:	4291      	cmp	r1, r2
 80093d6:	d905      	bls.n	80093e4 <_scanf_float+0x28>
 80093d8:	3b5e      	subs	r3, #94	; 0x5e
 80093da:	3bff      	subs	r3, #255	; 0xff
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	235e      	movs	r3, #94	; 0x5e
 80093e0:	33ff      	adds	r3, #255	; 0xff
 80093e2:	60b3      	str	r3, [r6, #8]
 80093e4:	23f0      	movs	r3, #240	; 0xf0
 80093e6:	6832      	ldr	r2, [r6, #0]
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	4313      	orrs	r3, r2
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	0033      	movs	r3, r6
 80093f0:	2400      	movs	r4, #0
 80093f2:	331c      	adds	r3, #28
 80093f4:	001f      	movs	r7, r3
 80093f6:	9303      	str	r3, [sp, #12]
 80093f8:	9402      	str	r4, [sp, #8]
 80093fa:	9408      	str	r4, [sp, #32]
 80093fc:	9407      	str	r4, [sp, #28]
 80093fe:	9400      	str	r4, [sp, #0]
 8009400:	9404      	str	r4, [sp, #16]
 8009402:	68b2      	ldr	r2, [r6, #8]
 8009404:	2a00      	cmp	r2, #0
 8009406:	d00a      	beq.n	800941e <_scanf_float+0x62>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b4e      	cmp	r3, #78	; 0x4e
 800940e:	d844      	bhi.n	800949a <_scanf_float+0xde>
 8009410:	0018      	movs	r0, r3
 8009412:	2b40      	cmp	r3, #64	; 0x40
 8009414:	d82c      	bhi.n	8009470 <_scanf_float+0xb4>
 8009416:	382b      	subs	r0, #43	; 0x2b
 8009418:	b2c1      	uxtb	r1, r0
 800941a:	290e      	cmp	r1, #14
 800941c:	d92a      	bls.n	8009474 <_scanf_float+0xb8>
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <_scanf_float+0x70>
 8009424:	6832      	ldr	r2, [r6, #0]
 8009426:	4ba4      	ldr	r3, [pc, #656]	; (80096b8 <_scanf_float+0x2fc>)
 8009428:	4013      	ands	r3, r2
 800942a:	6033      	str	r3, [r6, #0]
 800942c:	9b02      	ldr	r3, [sp, #8]
 800942e:	3b01      	subs	r3, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	d900      	bls.n	8009436 <_scanf_float+0x7a>
 8009434:	e0f9      	b.n	800962a <_scanf_float+0x26e>
 8009436:	24be      	movs	r4, #190	; 0xbe
 8009438:	0064      	lsls	r4, r4, #1
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	429f      	cmp	r7, r3
 800943e:	d900      	bls.n	8009442 <_scanf_float+0x86>
 8009440:	e0e9      	b.n	8009616 <_scanf_float+0x25a>
 8009442:	2301      	movs	r3, #1
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	e185      	b.n	8009754 <_scanf_float+0x398>
 8009448:	0018      	movs	r0, r3
 800944a:	3861      	subs	r0, #97	; 0x61
 800944c:	280d      	cmp	r0, #13
 800944e:	d8e6      	bhi.n	800941e <_scanf_float+0x62>
 8009450:	f7f6 fe6c 	bl	800012c <__gnu_thumb1_case_shi>
 8009454:	ffe50083 	.word	0xffe50083
 8009458:	ffe5ffe5 	.word	0xffe5ffe5
 800945c:	00a200b6 	.word	0x00a200b6
 8009460:	ffe5ffe5 	.word	0xffe5ffe5
 8009464:	ffe50089 	.word	0xffe50089
 8009468:	ffe5ffe5 	.word	0xffe5ffe5
 800946c:	0065ffe5 	.word	0x0065ffe5
 8009470:	3841      	subs	r0, #65	; 0x41
 8009472:	e7eb      	b.n	800944c <_scanf_float+0x90>
 8009474:	280e      	cmp	r0, #14
 8009476:	d8d2      	bhi.n	800941e <_scanf_float+0x62>
 8009478:	f7f6 fe58 	bl	800012c <__gnu_thumb1_case_shi>
 800947c:	ffd1004b 	.word	0xffd1004b
 8009480:	0098004b 	.word	0x0098004b
 8009484:	0020ffd1 	.word	0x0020ffd1
 8009488:	00400040 	.word	0x00400040
 800948c:	00400040 	.word	0x00400040
 8009490:	00400040 	.word	0x00400040
 8009494:	00400040 	.word	0x00400040
 8009498:	0040      	.short	0x0040
 800949a:	2b6e      	cmp	r3, #110	; 0x6e
 800949c:	d809      	bhi.n	80094b2 <_scanf_float+0xf6>
 800949e:	2b60      	cmp	r3, #96	; 0x60
 80094a0:	d8d2      	bhi.n	8009448 <_scanf_float+0x8c>
 80094a2:	2b54      	cmp	r3, #84	; 0x54
 80094a4:	d07d      	beq.n	80095a2 <_scanf_float+0x1e6>
 80094a6:	2b59      	cmp	r3, #89	; 0x59
 80094a8:	d1b9      	bne.n	800941e <_scanf_float+0x62>
 80094aa:	2c07      	cmp	r4, #7
 80094ac:	d1b7      	bne.n	800941e <_scanf_float+0x62>
 80094ae:	2408      	movs	r4, #8
 80094b0:	e02c      	b.n	800950c <_scanf_float+0x150>
 80094b2:	2b74      	cmp	r3, #116	; 0x74
 80094b4:	d075      	beq.n	80095a2 <_scanf_float+0x1e6>
 80094b6:	2b79      	cmp	r3, #121	; 0x79
 80094b8:	d0f7      	beq.n	80094aa <_scanf_float+0xee>
 80094ba:	e7b0      	b.n	800941e <_scanf_float+0x62>
 80094bc:	6831      	ldr	r1, [r6, #0]
 80094be:	05c8      	lsls	r0, r1, #23
 80094c0:	d51c      	bpl.n	80094fc <_scanf_float+0x140>
 80094c2:	2380      	movs	r3, #128	; 0x80
 80094c4:	4399      	bics	r1, r3
 80094c6:	9b00      	ldr	r3, [sp, #0]
 80094c8:	6031      	str	r1, [r6, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	9b05      	ldr	r3, [sp, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <_scanf_float+0x120>
 80094d4:	3b01      	subs	r3, #1
 80094d6:	3201      	adds	r2, #1
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	60b2      	str	r2, [r6, #8]
 80094dc:	68b3      	ldr	r3, [r6, #8]
 80094de:	3b01      	subs	r3, #1
 80094e0:	60b3      	str	r3, [r6, #8]
 80094e2:	6933      	ldr	r3, [r6, #16]
 80094e4:	3301      	adds	r3, #1
 80094e6:	6133      	str	r3, [r6, #16]
 80094e8:	686b      	ldr	r3, [r5, #4]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	606b      	str	r3, [r5, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dc00      	bgt.n	80094f4 <_scanf_float+0x138>
 80094f2:	e086      	b.n	8009602 <_scanf_float+0x246>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	e782      	b.n	8009402 <_scanf_float+0x46>
 80094fc:	9a02      	ldr	r2, [sp, #8]
 80094fe:	1912      	adds	r2, r2, r4
 8009500:	2a00      	cmp	r2, #0
 8009502:	d18c      	bne.n	800941e <_scanf_float+0x62>
 8009504:	4a6d      	ldr	r2, [pc, #436]	; (80096bc <_scanf_float+0x300>)
 8009506:	6831      	ldr	r1, [r6, #0]
 8009508:	400a      	ands	r2, r1
 800950a:	6032      	str	r2, [r6, #0]
 800950c:	703b      	strb	r3, [r7, #0]
 800950e:	3701      	adds	r7, #1
 8009510:	e7e4      	b.n	80094dc <_scanf_float+0x120>
 8009512:	2180      	movs	r1, #128	; 0x80
 8009514:	6832      	ldr	r2, [r6, #0]
 8009516:	420a      	tst	r2, r1
 8009518:	d081      	beq.n	800941e <_scanf_float+0x62>
 800951a:	438a      	bics	r2, r1
 800951c:	e7f5      	b.n	800950a <_scanf_float+0x14e>
 800951e:	9a02      	ldr	r2, [sp, #8]
 8009520:	2a00      	cmp	r2, #0
 8009522:	d10f      	bne.n	8009544 <_scanf_float+0x188>
 8009524:	9a00      	ldr	r2, [sp, #0]
 8009526:	2a00      	cmp	r2, #0
 8009528:	d10f      	bne.n	800954a <_scanf_float+0x18e>
 800952a:	6832      	ldr	r2, [r6, #0]
 800952c:	21e0      	movs	r1, #224	; 0xe0
 800952e:	0010      	movs	r0, r2
 8009530:	00c9      	lsls	r1, r1, #3
 8009532:	4008      	ands	r0, r1
 8009534:	4288      	cmp	r0, r1
 8009536:	d108      	bne.n	800954a <_scanf_float+0x18e>
 8009538:	4961      	ldr	r1, [pc, #388]	; (80096c0 <_scanf_float+0x304>)
 800953a:	400a      	ands	r2, r1
 800953c:	6032      	str	r2, [r6, #0]
 800953e:	2201      	movs	r2, #1
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	e7e3      	b.n	800950c <_scanf_float+0x150>
 8009544:	9a02      	ldr	r2, [sp, #8]
 8009546:	2a02      	cmp	r2, #2
 8009548:	d059      	beq.n	80095fe <_scanf_float+0x242>
 800954a:	2c01      	cmp	r4, #1
 800954c:	d002      	beq.n	8009554 <_scanf_float+0x198>
 800954e:	2c04      	cmp	r4, #4
 8009550:	d000      	beq.n	8009554 <_scanf_float+0x198>
 8009552:	e764      	b.n	800941e <_scanf_float+0x62>
 8009554:	3401      	adds	r4, #1
 8009556:	b2e4      	uxtb	r4, r4
 8009558:	e7d8      	b.n	800950c <_scanf_float+0x150>
 800955a:	9a02      	ldr	r2, [sp, #8]
 800955c:	2a01      	cmp	r2, #1
 800955e:	d000      	beq.n	8009562 <_scanf_float+0x1a6>
 8009560:	e75d      	b.n	800941e <_scanf_float+0x62>
 8009562:	2202      	movs	r2, #2
 8009564:	e7ec      	b.n	8009540 <_scanf_float+0x184>
 8009566:	2c00      	cmp	r4, #0
 8009568:	d110      	bne.n	800958c <_scanf_float+0x1d0>
 800956a:	9a00      	ldr	r2, [sp, #0]
 800956c:	2a00      	cmp	r2, #0
 800956e:	d000      	beq.n	8009572 <_scanf_float+0x1b6>
 8009570:	e758      	b.n	8009424 <_scanf_float+0x68>
 8009572:	6832      	ldr	r2, [r6, #0]
 8009574:	21e0      	movs	r1, #224	; 0xe0
 8009576:	0010      	movs	r0, r2
 8009578:	00c9      	lsls	r1, r1, #3
 800957a:	4008      	ands	r0, r1
 800957c:	4288      	cmp	r0, r1
 800957e:	d000      	beq.n	8009582 <_scanf_float+0x1c6>
 8009580:	e754      	b.n	800942c <_scanf_float+0x70>
 8009582:	494f      	ldr	r1, [pc, #316]	; (80096c0 <_scanf_float+0x304>)
 8009584:	3401      	adds	r4, #1
 8009586:	400a      	ands	r2, r1
 8009588:	6032      	str	r2, [r6, #0]
 800958a:	e7bf      	b.n	800950c <_scanf_float+0x150>
 800958c:	21fd      	movs	r1, #253	; 0xfd
 800958e:	1ee2      	subs	r2, r4, #3
 8009590:	420a      	tst	r2, r1
 8009592:	d000      	beq.n	8009596 <_scanf_float+0x1da>
 8009594:	e743      	b.n	800941e <_scanf_float+0x62>
 8009596:	e7dd      	b.n	8009554 <_scanf_float+0x198>
 8009598:	2c02      	cmp	r4, #2
 800959a:	d000      	beq.n	800959e <_scanf_float+0x1e2>
 800959c:	e73f      	b.n	800941e <_scanf_float+0x62>
 800959e:	2403      	movs	r4, #3
 80095a0:	e7b4      	b.n	800950c <_scanf_float+0x150>
 80095a2:	2c06      	cmp	r4, #6
 80095a4:	d000      	beq.n	80095a8 <_scanf_float+0x1ec>
 80095a6:	e73a      	b.n	800941e <_scanf_float+0x62>
 80095a8:	2407      	movs	r4, #7
 80095aa:	e7af      	b.n	800950c <_scanf_float+0x150>
 80095ac:	6832      	ldr	r2, [r6, #0]
 80095ae:	0591      	lsls	r1, r2, #22
 80095b0:	d400      	bmi.n	80095b4 <_scanf_float+0x1f8>
 80095b2:	e734      	b.n	800941e <_scanf_float+0x62>
 80095b4:	4943      	ldr	r1, [pc, #268]	; (80096c4 <_scanf_float+0x308>)
 80095b6:	400a      	ands	r2, r1
 80095b8:	6032      	str	r2, [r6, #0]
 80095ba:	9a00      	ldr	r2, [sp, #0]
 80095bc:	9204      	str	r2, [sp, #16]
 80095be:	e7a5      	b.n	800950c <_scanf_float+0x150>
 80095c0:	21a0      	movs	r1, #160	; 0xa0
 80095c2:	2080      	movs	r0, #128	; 0x80
 80095c4:	6832      	ldr	r2, [r6, #0]
 80095c6:	00c9      	lsls	r1, r1, #3
 80095c8:	4011      	ands	r1, r2
 80095ca:	00c0      	lsls	r0, r0, #3
 80095cc:	4281      	cmp	r1, r0
 80095ce:	d006      	beq.n	80095de <_scanf_float+0x222>
 80095d0:	4202      	tst	r2, r0
 80095d2:	d100      	bne.n	80095d6 <_scanf_float+0x21a>
 80095d4:	e723      	b.n	800941e <_scanf_float+0x62>
 80095d6:	9900      	ldr	r1, [sp, #0]
 80095d8:	2900      	cmp	r1, #0
 80095da:	d100      	bne.n	80095de <_scanf_float+0x222>
 80095dc:	e726      	b.n	800942c <_scanf_float+0x70>
 80095de:	0591      	lsls	r1, r2, #22
 80095e0:	d404      	bmi.n	80095ec <_scanf_float+0x230>
 80095e2:	9900      	ldr	r1, [sp, #0]
 80095e4:	9804      	ldr	r0, [sp, #16]
 80095e6:	9708      	str	r7, [sp, #32]
 80095e8:	1a09      	subs	r1, r1, r0
 80095ea:	9107      	str	r1, [sp, #28]
 80095ec:	4934      	ldr	r1, [pc, #208]	; (80096c0 <_scanf_float+0x304>)
 80095ee:	400a      	ands	r2, r1
 80095f0:	21c0      	movs	r1, #192	; 0xc0
 80095f2:	0049      	lsls	r1, r1, #1
 80095f4:	430a      	orrs	r2, r1
 80095f6:	6032      	str	r2, [r6, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	9200      	str	r2, [sp, #0]
 80095fc:	e786      	b.n	800950c <_scanf_float+0x150>
 80095fe:	2203      	movs	r2, #3
 8009600:	e79e      	b.n	8009540 <_scanf_float+0x184>
 8009602:	23c0      	movs	r3, #192	; 0xc0
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	0029      	movs	r1, r5
 8009608:	58f3      	ldr	r3, [r6, r3]
 800960a:	9801      	ldr	r0, [sp, #4]
 800960c:	4798      	blx	r3
 800960e:	2800      	cmp	r0, #0
 8009610:	d100      	bne.n	8009614 <_scanf_float+0x258>
 8009612:	e6f6      	b.n	8009402 <_scanf_float+0x46>
 8009614:	e703      	b.n	800941e <_scanf_float+0x62>
 8009616:	3f01      	subs	r7, #1
 8009618:	5933      	ldr	r3, [r6, r4]
 800961a:	002a      	movs	r2, r5
 800961c:	7839      	ldrb	r1, [r7, #0]
 800961e:	9801      	ldr	r0, [sp, #4]
 8009620:	4798      	blx	r3
 8009622:	6933      	ldr	r3, [r6, #16]
 8009624:	3b01      	subs	r3, #1
 8009626:	6133      	str	r3, [r6, #16]
 8009628:	e707      	b.n	800943a <_scanf_float+0x7e>
 800962a:	1e63      	subs	r3, r4, #1
 800962c:	2b06      	cmp	r3, #6
 800962e:	d80e      	bhi.n	800964e <_scanf_float+0x292>
 8009630:	9702      	str	r7, [sp, #8]
 8009632:	2c02      	cmp	r4, #2
 8009634:	d920      	bls.n	8009678 <_scanf_float+0x2bc>
 8009636:	1be3      	subs	r3, r4, r7
 8009638:	b2db      	uxtb	r3, r3
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	9b02      	ldr	r3, [sp, #8]
 800963e:	9a05      	ldr	r2, [sp, #20]
 8009640:	189b      	adds	r3, r3, r2
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b03      	cmp	r3, #3
 8009646:	d827      	bhi.n	8009698 <_scanf_float+0x2dc>
 8009648:	3c03      	subs	r4, #3
 800964a:	b2e4      	uxtb	r4, r4
 800964c:	1b3f      	subs	r7, r7, r4
 800964e:	6833      	ldr	r3, [r6, #0]
 8009650:	05da      	lsls	r2, r3, #23
 8009652:	d554      	bpl.n	80096fe <_scanf_float+0x342>
 8009654:	055b      	lsls	r3, r3, #21
 8009656:	d537      	bpl.n	80096c8 <_scanf_float+0x30c>
 8009658:	24be      	movs	r4, #190	; 0xbe
 800965a:	0064      	lsls	r4, r4, #1
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	429f      	cmp	r7, r3
 8009660:	d800      	bhi.n	8009664 <_scanf_float+0x2a8>
 8009662:	e6ee      	b.n	8009442 <_scanf_float+0x86>
 8009664:	3f01      	subs	r7, #1
 8009666:	5933      	ldr	r3, [r6, r4]
 8009668:	002a      	movs	r2, r5
 800966a:	7839      	ldrb	r1, [r7, #0]
 800966c:	9801      	ldr	r0, [sp, #4]
 800966e:	4798      	blx	r3
 8009670:	6933      	ldr	r3, [r6, #16]
 8009672:	3b01      	subs	r3, #1
 8009674:	6133      	str	r3, [r6, #16]
 8009676:	e7f1      	b.n	800965c <_scanf_float+0x2a0>
 8009678:	24be      	movs	r4, #190	; 0xbe
 800967a:	0064      	lsls	r4, r4, #1
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	429f      	cmp	r7, r3
 8009680:	d800      	bhi.n	8009684 <_scanf_float+0x2c8>
 8009682:	e6de      	b.n	8009442 <_scanf_float+0x86>
 8009684:	3f01      	subs	r7, #1
 8009686:	5933      	ldr	r3, [r6, r4]
 8009688:	002a      	movs	r2, r5
 800968a:	7839      	ldrb	r1, [r7, #0]
 800968c:	9801      	ldr	r0, [sp, #4]
 800968e:	4798      	blx	r3
 8009690:	6933      	ldr	r3, [r6, #16]
 8009692:	3b01      	subs	r3, #1
 8009694:	6133      	str	r3, [r6, #16]
 8009696:	e7f1      	b.n	800967c <_scanf_float+0x2c0>
 8009698:	9b02      	ldr	r3, [sp, #8]
 800969a:	002a      	movs	r2, r5
 800969c:	3b01      	subs	r3, #1
 800969e:	7819      	ldrb	r1, [r3, #0]
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	23be      	movs	r3, #190	; 0xbe
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	58f3      	ldr	r3, [r6, r3]
 80096a8:	9801      	ldr	r0, [sp, #4]
 80096aa:	9309      	str	r3, [sp, #36]	; 0x24
 80096ac:	4798      	blx	r3
 80096ae:	6933      	ldr	r3, [r6, #16]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	6133      	str	r3, [r6, #16]
 80096b4:	e7c2      	b.n	800963c <_scanf_float+0x280>
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	fffffeff 	.word	0xfffffeff
 80096bc:	fffffe7f 	.word	0xfffffe7f
 80096c0:	fffff87f 	.word	0xfffff87f
 80096c4:	fffffd7f 	.word	0xfffffd7f
 80096c8:	6933      	ldr	r3, [r6, #16]
 80096ca:	1e7c      	subs	r4, r7, #1
 80096cc:	7821      	ldrb	r1, [r4, #0]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	6133      	str	r3, [r6, #16]
 80096d2:	2965      	cmp	r1, #101	; 0x65
 80096d4:	d00c      	beq.n	80096f0 <_scanf_float+0x334>
 80096d6:	2945      	cmp	r1, #69	; 0x45
 80096d8:	d00a      	beq.n	80096f0 <_scanf_float+0x334>
 80096da:	23be      	movs	r3, #190	; 0xbe
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	58f3      	ldr	r3, [r6, r3]
 80096e0:	002a      	movs	r2, r5
 80096e2:	9801      	ldr	r0, [sp, #4]
 80096e4:	4798      	blx	r3
 80096e6:	6933      	ldr	r3, [r6, #16]
 80096e8:	1ebc      	subs	r4, r7, #2
 80096ea:	3b01      	subs	r3, #1
 80096ec:	7821      	ldrb	r1, [r4, #0]
 80096ee:	6133      	str	r3, [r6, #16]
 80096f0:	23be      	movs	r3, #190	; 0xbe
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	002a      	movs	r2, r5
 80096f6:	58f3      	ldr	r3, [r6, r3]
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	4798      	blx	r3
 80096fc:	0027      	movs	r7, r4
 80096fe:	6832      	ldr	r2, [r6, #0]
 8009700:	2310      	movs	r3, #16
 8009702:	0011      	movs	r1, r2
 8009704:	4019      	ands	r1, r3
 8009706:	9102      	str	r1, [sp, #8]
 8009708:	421a      	tst	r2, r3
 800970a:	d158      	bne.n	80097be <_scanf_float+0x402>
 800970c:	23c0      	movs	r3, #192	; 0xc0
 800970e:	7039      	strb	r1, [r7, #0]
 8009710:	6832      	ldr	r2, [r6, #0]
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4013      	ands	r3, r2
 8009716:	2280      	movs	r2, #128	; 0x80
 8009718:	00d2      	lsls	r2, r2, #3
 800971a:	4293      	cmp	r3, r2
 800971c:	d11d      	bne.n	800975a <_scanf_float+0x39e>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	9a00      	ldr	r2, [sp, #0]
 8009722:	9900      	ldr	r1, [sp, #0]
 8009724:	1a9a      	subs	r2, r3, r2
 8009726:	428b      	cmp	r3, r1
 8009728:	d124      	bne.n	8009774 <_scanf_float+0x3b8>
 800972a:	2200      	movs	r2, #0
 800972c:	9903      	ldr	r1, [sp, #12]
 800972e:	9801      	ldr	r0, [sp, #4]
 8009730:	f000 ff32 	bl	800a598 <_strtod_r>
 8009734:	9b06      	ldr	r3, [sp, #24]
 8009736:	000d      	movs	r5, r1
 8009738:	6831      	ldr	r1, [r6, #0]
 800973a:	0004      	movs	r4, r0
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	078a      	lsls	r2, r1, #30
 8009740:	d525      	bpl.n	800978e <_scanf_float+0x3d2>
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	9906      	ldr	r1, [sp, #24]
 8009746:	600a      	str	r2, [r1, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	601c      	str	r4, [r3, #0]
 800974c:	605d      	str	r5, [r3, #4]
 800974e:	68f3      	ldr	r3, [r6, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	60f3      	str	r3, [r6, #12]
 8009754:	9802      	ldr	r0, [sp, #8]
 8009756:	b00b      	add	sp, #44	; 0x2c
 8009758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975a:	9b07      	ldr	r3, [sp, #28]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0e4      	beq.n	800972a <_scanf_float+0x36e>
 8009760:	9b08      	ldr	r3, [sp, #32]
 8009762:	9a02      	ldr	r2, [sp, #8]
 8009764:	1c59      	adds	r1, r3, #1
 8009766:	9801      	ldr	r0, [sp, #4]
 8009768:	230a      	movs	r3, #10
 800976a:	f000 ffab 	bl	800a6c4 <_strtol_r>
 800976e:	9b07      	ldr	r3, [sp, #28]
 8009770:	9f08      	ldr	r7, [sp, #32]
 8009772:	1ac2      	subs	r2, r0, r3
 8009774:	0033      	movs	r3, r6
 8009776:	3370      	adds	r3, #112	; 0x70
 8009778:	33ff      	adds	r3, #255	; 0xff
 800977a:	429f      	cmp	r7, r3
 800977c:	d302      	bcc.n	8009784 <_scanf_float+0x3c8>
 800977e:	0037      	movs	r7, r6
 8009780:	376f      	adds	r7, #111	; 0x6f
 8009782:	37ff      	adds	r7, #255	; 0xff
 8009784:	0038      	movs	r0, r7
 8009786:	490f      	ldr	r1, [pc, #60]	; (80097c4 <_scanf_float+0x408>)
 8009788:	f000 f8ba 	bl	8009900 <siprintf>
 800978c:	e7cd      	b.n	800972a <_scanf_float+0x36e>
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	0749      	lsls	r1, r1, #29
 8009792:	d4d7      	bmi.n	8009744 <_scanf_float+0x388>
 8009794:	9906      	ldr	r1, [sp, #24]
 8009796:	0020      	movs	r0, r4
 8009798:	600a      	str	r2, [r1, #0]
 800979a:	681f      	ldr	r7, [r3, #0]
 800979c:	0022      	movs	r2, r4
 800979e:	002b      	movs	r3, r5
 80097a0:	0029      	movs	r1, r5
 80097a2:	f7f8 ff5f 	bl	8002664 <__aeabi_dcmpun>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d004      	beq.n	80097b4 <_scanf_float+0x3f8>
 80097aa:	4807      	ldr	r0, [pc, #28]	; (80097c8 <_scanf_float+0x40c>)
 80097ac:	f000 f8a4 	bl	80098f8 <nanf>
 80097b0:	6038      	str	r0, [r7, #0]
 80097b2:	e7cc      	b.n	800974e <_scanf_float+0x392>
 80097b4:	0020      	movs	r0, r4
 80097b6:	0029      	movs	r1, r5
 80097b8:	f7f9 f846 	bl	8002848 <__aeabi_d2f>
 80097bc:	e7f8      	b.n	80097b0 <_scanf_float+0x3f4>
 80097be:	2300      	movs	r3, #0
 80097c0:	e640      	b.n	8009444 <_scanf_float+0x88>
 80097c2:	46c0      	nop			; (mov r8, r8)
 80097c4:	0800d834 	.word	0x0800d834
 80097c8:	0800dca8 	.word	0x0800dca8

080097cc <iprintf>:
 80097cc:	b40f      	push	{r0, r1, r2, r3}
 80097ce:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <iprintf+0x30>)
 80097d0:	b513      	push	{r0, r1, r4, lr}
 80097d2:	681c      	ldr	r4, [r3, #0]
 80097d4:	2c00      	cmp	r4, #0
 80097d6:	d005      	beq.n	80097e4 <iprintf+0x18>
 80097d8:	69a3      	ldr	r3, [r4, #24]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d102      	bne.n	80097e4 <iprintf+0x18>
 80097de:	0020      	movs	r0, r4
 80097e0:	f002 f816 	bl	800b810 <__sinit>
 80097e4:	ab05      	add	r3, sp, #20
 80097e6:	0020      	movs	r0, r4
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	68a1      	ldr	r1, [r4, #8]
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	f003 fc21 	bl	800d034 <_vfiprintf_r>
 80097f2:	bc16      	pop	{r1, r2, r4}
 80097f4:	bc08      	pop	{r3}
 80097f6:	b004      	add	sp, #16
 80097f8:	4718      	bx	r3
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	20000030 	.word	0x20000030

08009800 <_puts_r>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	0005      	movs	r5, r0
 8009804:	000e      	movs	r6, r1
 8009806:	2800      	cmp	r0, #0
 8009808:	d004      	beq.n	8009814 <_puts_r+0x14>
 800980a:	6983      	ldr	r3, [r0, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <_puts_r+0x14>
 8009810:	f001 fffe 	bl	800b810 <__sinit>
 8009814:	69ab      	ldr	r3, [r5, #24]
 8009816:	68ac      	ldr	r4, [r5, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <_puts_r+0x22>
 800981c:	0028      	movs	r0, r5
 800981e:	f001 fff7 	bl	800b810 <__sinit>
 8009822:	4b2d      	ldr	r3, [pc, #180]	; (80098d8 <_puts_r+0xd8>)
 8009824:	429c      	cmp	r4, r3
 8009826:	d122      	bne.n	800986e <_puts_r+0x6e>
 8009828:	686c      	ldr	r4, [r5, #4]
 800982a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800982c:	07db      	lsls	r3, r3, #31
 800982e:	d405      	bmi.n	800983c <_puts_r+0x3c>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	059b      	lsls	r3, r3, #22
 8009834:	d402      	bmi.n	800983c <_puts_r+0x3c>
 8009836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009838:	f002 fc03 	bl	800c042 <__retarget_lock_acquire_recursive>
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	071b      	lsls	r3, r3, #28
 8009840:	d502      	bpl.n	8009848 <_puts_r+0x48>
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d129      	bne.n	800989c <_puts_r+0x9c>
 8009848:	0021      	movs	r1, r4
 800984a:	0028      	movs	r0, r5
 800984c:	f000 ff94 	bl	800a778 <__swsetup_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	d023      	beq.n	800989c <_puts_r+0x9c>
 8009854:	2501      	movs	r5, #1
 8009856:	426d      	negs	r5, r5
 8009858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800985a:	07db      	lsls	r3, r3, #31
 800985c:	d405      	bmi.n	800986a <_puts_r+0x6a>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	059b      	lsls	r3, r3, #22
 8009862:	d402      	bmi.n	800986a <_puts_r+0x6a>
 8009864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009866:	f002 fbed 	bl	800c044 <__retarget_lock_release_recursive>
 800986a:	0028      	movs	r0, r5
 800986c:	bd70      	pop	{r4, r5, r6, pc}
 800986e:	4b1b      	ldr	r3, [pc, #108]	; (80098dc <_puts_r+0xdc>)
 8009870:	429c      	cmp	r4, r3
 8009872:	d101      	bne.n	8009878 <_puts_r+0x78>
 8009874:	68ac      	ldr	r4, [r5, #8]
 8009876:	e7d8      	b.n	800982a <_puts_r+0x2a>
 8009878:	4b19      	ldr	r3, [pc, #100]	; (80098e0 <_puts_r+0xe0>)
 800987a:	429c      	cmp	r4, r3
 800987c:	d1d5      	bne.n	800982a <_puts_r+0x2a>
 800987e:	68ec      	ldr	r4, [r5, #12]
 8009880:	e7d3      	b.n	800982a <_puts_r+0x2a>
 8009882:	3601      	adds	r6, #1
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	da04      	bge.n	8009894 <_puts_r+0x94>
 800988a:	69a2      	ldr	r2, [r4, #24]
 800988c:	429a      	cmp	r2, r3
 800988e:	dc16      	bgt.n	80098be <_puts_r+0xbe>
 8009890:	290a      	cmp	r1, #10
 8009892:	d014      	beq.n	80098be <_puts_r+0xbe>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	6022      	str	r2, [r4, #0]
 800989a:	7019      	strb	r1, [r3, #0]
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	7831      	ldrb	r1, [r6, #0]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	2900      	cmp	r1, #0
 80098a4:	d1ed      	bne.n	8009882 <_puts_r+0x82>
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0f      	bge.n	80098cc <_puts_r+0xcc>
 80098ac:	0028      	movs	r0, r5
 80098ae:	0022      	movs	r2, r4
 80098b0:	310a      	adds	r1, #10
 80098b2:	f000 ff0b 	bl	800a6cc <__swbuf_r>
 80098b6:	250a      	movs	r5, #10
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d1cd      	bne.n	8009858 <_puts_r+0x58>
 80098bc:	e7ca      	b.n	8009854 <_puts_r+0x54>
 80098be:	0022      	movs	r2, r4
 80098c0:	0028      	movs	r0, r5
 80098c2:	f000 ff03 	bl	800a6cc <__swbuf_r>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	d1e8      	bne.n	800989c <_puts_r+0x9c>
 80098ca:	e7c3      	b.n	8009854 <_puts_r+0x54>
 80098cc:	250a      	movs	r5, #10
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	6022      	str	r2, [r4, #0]
 80098d4:	701d      	strb	r5, [r3, #0]
 80098d6:	e7bf      	b.n	8009858 <_puts_r+0x58>
 80098d8:	0800da44 	.word	0x0800da44
 80098dc:	0800da64 	.word	0x0800da64
 80098e0:	0800da24 	.word	0x0800da24

080098e4 <puts>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4b03      	ldr	r3, [pc, #12]	; (80098f4 <puts+0x10>)
 80098e8:	0001      	movs	r1, r0
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	f7ff ff88 	bl	8009800 <_puts_r>
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	20000030 	.word	0x20000030

080098f8 <nanf>:
 80098f8:	4800      	ldr	r0, [pc, #0]	; (80098fc <nanf+0x4>)
 80098fa:	4770      	bx	lr
 80098fc:	7fc00000 	.word	0x7fc00000

08009900 <siprintf>:
 8009900:	b40e      	push	{r1, r2, r3}
 8009902:	b500      	push	{lr}
 8009904:	490b      	ldr	r1, [pc, #44]	; (8009934 <siprintf+0x34>)
 8009906:	b09c      	sub	sp, #112	; 0x70
 8009908:	ab1d      	add	r3, sp, #116	; 0x74
 800990a:	9002      	str	r0, [sp, #8]
 800990c:	9006      	str	r0, [sp, #24]
 800990e:	9107      	str	r1, [sp, #28]
 8009910:	9104      	str	r1, [sp, #16]
 8009912:	4809      	ldr	r0, [pc, #36]	; (8009938 <siprintf+0x38>)
 8009914:	4909      	ldr	r1, [pc, #36]	; (800993c <siprintf+0x3c>)
 8009916:	cb04      	ldmia	r3!, {r2}
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	a902      	add	r1, sp, #8
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	f003 fa60 	bl	800cde4 <_svfiprintf_r>
 8009924:	2300      	movs	r3, #0
 8009926:	9a02      	ldr	r2, [sp, #8]
 8009928:	7013      	strb	r3, [r2, #0]
 800992a:	b01c      	add	sp, #112	; 0x70
 800992c:	bc08      	pop	{r3}
 800992e:	b003      	add	sp, #12
 8009930:	4718      	bx	r3
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	7fffffff 	.word	0x7fffffff
 8009938:	20000030 	.word	0x20000030
 800993c:	ffff0208 	.word	0xffff0208

08009940 <sulp>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	0016      	movs	r6, r2
 8009944:	000d      	movs	r5, r1
 8009946:	f002 ff97 	bl	800c878 <__ulp>
 800994a:	2e00      	cmp	r6, #0
 800994c:	d00d      	beq.n	800996a <sulp+0x2a>
 800994e:	236b      	movs	r3, #107	; 0x6b
 8009950:	006a      	lsls	r2, r5, #1
 8009952:	0d52      	lsrs	r2, r2, #21
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	2b00      	cmp	r3, #0
 8009958:	dd07      	ble.n	800996a <sulp+0x2a>
 800995a:	2400      	movs	r4, #0
 800995c:	4a03      	ldr	r2, [pc, #12]	; (800996c <sulp+0x2c>)
 800995e:	051b      	lsls	r3, r3, #20
 8009960:	189d      	adds	r5, r3, r2
 8009962:	002b      	movs	r3, r5
 8009964:	0022      	movs	r2, r4
 8009966:	f7f8 f87f 	bl	8001a68 <__aeabi_dmul>
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	3ff00000 	.word	0x3ff00000

08009970 <_strtod_l>:
 8009970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009972:	001d      	movs	r5, r3
 8009974:	2300      	movs	r3, #0
 8009976:	b0a5      	sub	sp, #148	; 0x94
 8009978:	9320      	str	r3, [sp, #128]	; 0x80
 800997a:	4bac      	ldr	r3, [pc, #688]	; (8009c2c <_strtod_l+0x2bc>)
 800997c:	9005      	str	r0, [sp, #20]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	9108      	str	r1, [sp, #32]
 8009982:	0018      	movs	r0, r3
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	921b      	str	r2, [sp, #108]	; 0x6c
 8009988:	f7f6 fbbe 	bl	8000108 <strlen>
 800998c:	2600      	movs	r6, #0
 800998e:	0004      	movs	r4, r0
 8009990:	2700      	movs	r7, #0
 8009992:	9b08      	ldr	r3, [sp, #32]
 8009994:	931f      	str	r3, [sp, #124]	; 0x7c
 8009996:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009998:	7813      	ldrb	r3, [r2, #0]
 800999a:	2b2b      	cmp	r3, #43	; 0x2b
 800999c:	d058      	beq.n	8009a50 <_strtod_l+0xe0>
 800999e:	d844      	bhi.n	8009a2a <_strtod_l+0xba>
 80099a0:	2b0d      	cmp	r3, #13
 80099a2:	d83d      	bhi.n	8009a20 <_strtod_l+0xb0>
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d83d      	bhi.n	8009a24 <_strtod_l+0xb4>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d047      	beq.n	8009a3c <_strtod_l+0xcc>
 80099ac:	2300      	movs	r3, #0
 80099ae:	930e      	str	r3, [sp, #56]	; 0x38
 80099b0:	2200      	movs	r2, #0
 80099b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099b4:	920a      	str	r2, [sp, #40]	; 0x28
 80099b6:	9306      	str	r3, [sp, #24]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b30      	cmp	r3, #48	; 0x30
 80099bc:	d000      	beq.n	80099c0 <_strtod_l+0x50>
 80099be:	e07f      	b.n	8009ac0 <_strtod_l+0x150>
 80099c0:	9b06      	ldr	r3, [sp, #24]
 80099c2:	3220      	adds	r2, #32
 80099c4:	785b      	ldrb	r3, [r3, #1]
 80099c6:	4393      	bics	r3, r2
 80099c8:	2b58      	cmp	r3, #88	; 0x58
 80099ca:	d000      	beq.n	80099ce <_strtod_l+0x5e>
 80099cc:	e06e      	b.n	8009aac <_strtod_l+0x13c>
 80099ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099d0:	9502      	str	r5, [sp, #8]
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	ab20      	add	r3, sp, #128	; 0x80
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4a95      	ldr	r2, [pc, #596]	; (8009c30 <_strtod_l+0x2c0>)
 80099da:	ab21      	add	r3, sp, #132	; 0x84
 80099dc:	9805      	ldr	r0, [sp, #20]
 80099de:	a91f      	add	r1, sp, #124	; 0x7c
 80099e0:	f002 f820 	bl	800ba24 <__gethex>
 80099e4:	2307      	movs	r3, #7
 80099e6:	0005      	movs	r5, r0
 80099e8:	0004      	movs	r4, r0
 80099ea:	401d      	ands	r5, r3
 80099ec:	4218      	tst	r0, r3
 80099ee:	d006      	beq.n	80099fe <_strtod_l+0x8e>
 80099f0:	2d06      	cmp	r5, #6
 80099f2:	d12f      	bne.n	8009a54 <_strtod_l+0xe4>
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	3301      	adds	r3, #1
 80099f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80099fa:	2300      	movs	r3, #0
 80099fc:	930e      	str	r3, [sp, #56]	; 0x38
 80099fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <_strtod_l+0x9a>
 8009a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01c      	beq.n	8009a4a <_strtod_l+0xda>
 8009a10:	2380      	movs	r3, #128	; 0x80
 8009a12:	0032      	movs	r2, r6
 8009a14:	061b      	lsls	r3, r3, #24
 8009a16:	18fb      	adds	r3, r7, r3
 8009a18:	0010      	movs	r0, r2
 8009a1a:	0019      	movs	r1, r3
 8009a1c:	b025      	add	sp, #148	; 0x94
 8009a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d1c3      	bne.n	80099ac <_strtod_l+0x3c>
 8009a24:	3201      	adds	r2, #1
 8009a26:	921f      	str	r2, [sp, #124]	; 0x7c
 8009a28:	e7b5      	b.n	8009996 <_strtod_l+0x26>
 8009a2a:	2b2d      	cmp	r3, #45	; 0x2d
 8009a2c:	d1be      	bne.n	80099ac <_strtod_l+0x3c>
 8009a2e:	3b2c      	subs	r3, #44	; 0x2c
 8009a30:	930e      	str	r3, [sp, #56]	; 0x38
 8009a32:	1c53      	adds	r3, r2, #1
 8009a34:	931f      	str	r3, [sp, #124]	; 0x7c
 8009a36:	7853      	ldrb	r3, [r2, #1]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1b9      	bne.n	80099b0 <_strtod_l+0x40>
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009a40:	2300      	movs	r3, #0
 8009a42:	930e      	str	r3, [sp, #56]	; 0x38
 8009a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1dc      	bne.n	8009a04 <_strtod_l+0x94>
 8009a4a:	0032      	movs	r2, r6
 8009a4c:	003b      	movs	r3, r7
 8009a4e:	e7e3      	b.n	8009a18 <_strtod_l+0xa8>
 8009a50:	2300      	movs	r3, #0
 8009a52:	e7ed      	b.n	8009a30 <_strtod_l+0xc0>
 8009a54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	d007      	beq.n	8009a6a <_strtod_l+0xfa>
 8009a5a:	2135      	movs	r1, #53	; 0x35
 8009a5c:	a822      	add	r0, sp, #136	; 0x88
 8009a5e:	f003 f80c 	bl	800ca7a <__copybits>
 8009a62:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009a64:	9805      	ldr	r0, [sp, #20]
 8009a66:	f002 fbc7 	bl	800c1f8 <_Bfree>
 8009a6a:	1e68      	subs	r0, r5, #1
 8009a6c:	2804      	cmp	r0, #4
 8009a6e:	d806      	bhi.n	8009a7e <_strtod_l+0x10e>
 8009a70:	f7f6 fb52 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009a74:	1816030b 	.word	0x1816030b
 8009a78:	0b          	.byte	0x0b
 8009a79:	00          	.byte	0x00
 8009a7a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009a7c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8009a7e:	0723      	lsls	r3, r4, #28
 8009a80:	d5bd      	bpl.n	80099fe <_strtod_l+0x8e>
 8009a82:	2380      	movs	r3, #128	; 0x80
 8009a84:	061b      	lsls	r3, r3, #24
 8009a86:	431f      	orrs	r7, r3
 8009a88:	e7b9      	b.n	80099fe <_strtod_l+0x8e>
 8009a8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a8c:	4a69      	ldr	r2, [pc, #420]	; (8009c34 <_strtod_l+0x2c4>)
 8009a8e:	496a      	ldr	r1, [pc, #424]	; (8009c38 <_strtod_l+0x2c8>)
 8009a90:	401a      	ands	r2, r3
 8009a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a94:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009a96:	185b      	adds	r3, r3, r1
 8009a98:	051b      	lsls	r3, r3, #20
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	0017      	movs	r7, r2
 8009a9e:	e7ee      	b.n	8009a7e <_strtod_l+0x10e>
 8009aa0:	4f66      	ldr	r7, [pc, #408]	; (8009c3c <_strtod_l+0x2cc>)
 8009aa2:	e7ec      	b.n	8009a7e <_strtod_l+0x10e>
 8009aa4:	2601      	movs	r6, #1
 8009aa6:	4f66      	ldr	r7, [pc, #408]	; (8009c40 <_strtod_l+0x2d0>)
 8009aa8:	4276      	negs	r6, r6
 8009aaa:	e7e8      	b.n	8009a7e <_strtod_l+0x10e>
 8009aac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	921f      	str	r2, [sp, #124]	; 0x7c
 8009ab2:	785b      	ldrb	r3, [r3, #1]
 8009ab4:	2b30      	cmp	r3, #48	; 0x30
 8009ab6:	d0f9      	beq.n	8009aac <_strtod_l+0x13c>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0a0      	beq.n	80099fe <_strtod_l+0x8e>
 8009abc:	2301      	movs	r3, #1
 8009abe:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ac2:	220a      	movs	r2, #10
 8009ac4:	9310      	str	r3, [sp, #64]	; 0x40
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009acc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ace:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009ad0:	7805      	ldrb	r5, [r0, #0]
 8009ad2:	002b      	movs	r3, r5
 8009ad4:	3b30      	subs	r3, #48	; 0x30
 8009ad6:	b2d9      	uxtb	r1, r3
 8009ad8:	2909      	cmp	r1, #9
 8009ada:	d927      	bls.n	8009b2c <_strtod_l+0x1bc>
 8009adc:	0022      	movs	r2, r4
 8009ade:	9907      	ldr	r1, [sp, #28]
 8009ae0:	f003 fc46 	bl	800d370 <strncmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d033      	beq.n	8009b50 <_strtod_l+0x1e0>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	002b      	movs	r3, r5
 8009aec:	4684      	mov	ip, r0
 8009aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af0:	900c      	str	r0, [sp, #48]	; 0x30
 8009af2:	9206      	str	r2, [sp, #24]
 8009af4:	2220      	movs	r2, #32
 8009af6:	0019      	movs	r1, r3
 8009af8:	4391      	bics	r1, r2
 8009afa:	000a      	movs	r2, r1
 8009afc:	2100      	movs	r1, #0
 8009afe:	9107      	str	r1, [sp, #28]
 8009b00:	2a45      	cmp	r2, #69	; 0x45
 8009b02:	d000      	beq.n	8009b06 <_strtod_l+0x196>
 8009b04:	e0c5      	b.n	8009c92 <_strtod_l+0x322>
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0a:	4303      	orrs	r3, r0
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	428b      	cmp	r3, r1
 8009b10:	d094      	beq.n	8009a3c <_strtod_l+0xcc>
 8009b12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b14:	9308      	str	r3, [sp, #32]
 8009b16:	3301      	adds	r3, #1
 8009b18:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	785b      	ldrb	r3, [r3, #1]
 8009b1e:	2b2b      	cmp	r3, #43	; 0x2b
 8009b20:	d076      	beq.n	8009c10 <_strtod_l+0x2a0>
 8009b22:	000c      	movs	r4, r1
 8009b24:	2b2d      	cmp	r3, #45	; 0x2d
 8009b26:	d179      	bne.n	8009c1c <_strtod_l+0x2ac>
 8009b28:	2401      	movs	r4, #1
 8009b2a:	e072      	b.n	8009c12 <_strtod_l+0x2a2>
 8009b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b2e:	2908      	cmp	r1, #8
 8009b30:	dc09      	bgt.n	8009b46 <_strtod_l+0x1d6>
 8009b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b34:	4351      	muls	r1, r2
 8009b36:	185b      	adds	r3, r3, r1
 8009b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	3301      	adds	r3, #1
 8009b40:	9309      	str	r3, [sp, #36]	; 0x24
 8009b42:	901f      	str	r0, [sp, #124]	; 0x7c
 8009b44:	e7c3      	b.n	8009ace <_strtod_l+0x15e>
 8009b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b48:	4351      	muls	r1, r2
 8009b4a:	185b      	adds	r3, r3, r1
 8009b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b4e:	e7f4      	b.n	8009b3a <_strtod_l+0x1ca>
 8009b50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b54:	191c      	adds	r4, r3, r4
 8009b56:	941f      	str	r4, [sp, #124]	; 0x7c
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d039      	beq.n	8009bd2 <_strtod_l+0x262>
 8009b5e:	900c      	str	r0, [sp, #48]	; 0x30
 8009b60:	9206      	str	r2, [sp, #24]
 8009b62:	001a      	movs	r2, r3
 8009b64:	3a30      	subs	r2, #48	; 0x30
 8009b66:	2a09      	cmp	r2, #9
 8009b68:	d912      	bls.n	8009b90 <_strtod_l+0x220>
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4694      	mov	ip, r2
 8009b6e:	e7c1      	b.n	8009af4 <_strtod_l+0x184>
 8009b70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b72:	3001      	adds	r0, #1
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b78:	785b      	ldrb	r3, [r3, #1]
 8009b7a:	2b30      	cmp	r3, #48	; 0x30
 8009b7c:	d0f8      	beq.n	8009b70 <_strtod_l+0x200>
 8009b7e:	001a      	movs	r2, r3
 8009b80:	3a31      	subs	r2, #49	; 0x31
 8009b82:	2a08      	cmp	r2, #8
 8009b84:	d83f      	bhi.n	8009c06 <_strtod_l+0x296>
 8009b86:	900c      	str	r0, [sp, #48]	; 0x30
 8009b88:	2000      	movs	r0, #0
 8009b8a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009b8c:	9006      	str	r0, [sp, #24]
 8009b8e:	9210      	str	r2, [sp, #64]	; 0x40
 8009b90:	001a      	movs	r2, r3
 8009b92:	1c41      	adds	r1, r0, #1
 8009b94:	3a30      	subs	r2, #48	; 0x30
 8009b96:	2b30      	cmp	r3, #48	; 0x30
 8009b98:	d015      	beq.n	8009bc6 <_strtod_l+0x256>
 8009b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b9c:	185b      	adds	r3, r3, r1
 8009b9e:	210a      	movs	r1, #10
 8009ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	18c4      	adds	r4, r0, r3
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	d115      	bne.n	8009bd6 <_strtod_l+0x266>
 8009baa:	9906      	ldr	r1, [sp, #24]
 8009bac:	9b06      	ldr	r3, [sp, #24]
 8009bae:	3101      	adds	r1, #1
 8009bb0:	1809      	adds	r1, r1, r0
 8009bb2:	181b      	adds	r3, r3, r0
 8009bb4:	9106      	str	r1, [sp, #24]
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	dc1b      	bgt.n	8009bf2 <_strtod_l+0x282>
 8009bba:	230a      	movs	r3, #10
 8009bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bbe:	434b      	muls	r3, r1
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	18d3      	adds	r3, r2, r3
 8009bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bc8:	0008      	movs	r0, r1
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	921f      	str	r2, [sp, #124]	; 0x7c
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	e7c7      	b.n	8009b62 <_strtod_l+0x1f2>
 8009bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd4:	e7d1      	b.n	8009b7a <_strtod_l+0x20a>
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	dc04      	bgt.n	8009be4 <_strtod_l+0x274>
 8009bda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009bdc:	434d      	muls	r5, r1
 8009bde:	950b      	str	r5, [sp, #44]	; 0x2c
 8009be0:	3301      	adds	r3, #1
 8009be2:	e7e0      	b.n	8009ba6 <_strtod_l+0x236>
 8009be4:	1c5d      	adds	r5, r3, #1
 8009be6:	2d10      	cmp	r5, #16
 8009be8:	dcfa      	bgt.n	8009be0 <_strtod_l+0x270>
 8009bea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bec:	434d      	muls	r5, r1
 8009bee:	950f      	str	r5, [sp, #60]	; 0x3c
 8009bf0:	e7f6      	b.n	8009be0 <_strtod_l+0x270>
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	2b10      	cmp	r3, #16
 8009bf8:	dce5      	bgt.n	8009bc6 <_strtod_l+0x256>
 8009bfa:	230a      	movs	r3, #10
 8009bfc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009bfe:	4343      	muls	r3, r0
 8009c00:	18d3      	adds	r3, r2, r3
 8009c02:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c04:	e7df      	b.n	8009bc6 <_strtod_l+0x256>
 8009c06:	2200      	movs	r2, #0
 8009c08:	920c      	str	r2, [sp, #48]	; 0x30
 8009c0a:	9206      	str	r2, [sp, #24]
 8009c0c:	3201      	adds	r2, #1
 8009c0e:	e7ad      	b.n	8009b6c <_strtod_l+0x1fc>
 8009c10:	2400      	movs	r4, #0
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	3302      	adds	r3, #2
 8009c16:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	789b      	ldrb	r3, [r3, #2]
 8009c1c:	001a      	movs	r2, r3
 8009c1e:	3a30      	subs	r2, #48	; 0x30
 8009c20:	2a09      	cmp	r2, #9
 8009c22:	d913      	bls.n	8009c4c <_strtod_l+0x2dc>
 8009c24:	9a08      	ldr	r2, [sp, #32]
 8009c26:	921f      	str	r2, [sp, #124]	; 0x7c
 8009c28:	2200      	movs	r2, #0
 8009c2a:	e031      	b.n	8009c90 <_strtod_l+0x320>
 8009c2c:	0800daec 	.word	0x0800daec
 8009c30:	0800d83c 	.word	0x0800d83c
 8009c34:	ffefffff 	.word	0xffefffff
 8009c38:	00000433 	.word	0x00000433
 8009c3c:	7ff00000 	.word	0x7ff00000
 8009c40:	7fffffff 	.word	0x7fffffff
 8009c44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	921f      	str	r2, [sp, #124]	; 0x7c
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b30      	cmp	r3, #48	; 0x30
 8009c4e:	d0f9      	beq.n	8009c44 <_strtod_l+0x2d4>
 8009c50:	2200      	movs	r2, #0
 8009c52:	9207      	str	r2, [sp, #28]
 8009c54:	001a      	movs	r2, r3
 8009c56:	3a31      	subs	r2, #49	; 0x31
 8009c58:	2a08      	cmp	r2, #8
 8009c5a:	d81a      	bhi.n	8009c92 <_strtod_l+0x322>
 8009c5c:	3b30      	subs	r3, #48	; 0x30
 8009c5e:	001a      	movs	r2, r3
 8009c60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c62:	9307      	str	r3, [sp, #28]
 8009c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c66:	1c59      	adds	r1, r3, #1
 8009c68:	911f      	str	r1, [sp, #124]	; 0x7c
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	001d      	movs	r5, r3
 8009c6e:	3d30      	subs	r5, #48	; 0x30
 8009c70:	2d09      	cmp	r5, #9
 8009c72:	d939      	bls.n	8009ce8 <_strtod_l+0x378>
 8009c74:	9d07      	ldr	r5, [sp, #28]
 8009c76:	1b49      	subs	r1, r1, r5
 8009c78:	4db0      	ldr	r5, [pc, #704]	; (8009f3c <_strtod_l+0x5cc>)
 8009c7a:	9507      	str	r5, [sp, #28]
 8009c7c:	2908      	cmp	r1, #8
 8009c7e:	dc03      	bgt.n	8009c88 <_strtod_l+0x318>
 8009c80:	9207      	str	r2, [sp, #28]
 8009c82:	42aa      	cmp	r2, r5
 8009c84:	dd00      	ble.n	8009c88 <_strtod_l+0x318>
 8009c86:	9507      	str	r5, [sp, #28]
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d002      	beq.n	8009c92 <_strtod_l+0x322>
 8009c8c:	9a07      	ldr	r2, [sp, #28]
 8009c8e:	4252      	negs	r2, r2
 8009c90:	9207      	str	r2, [sp, #28]
 8009c92:	9a06      	ldr	r2, [sp, #24]
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	d14b      	bne.n	8009d30 <_strtod_l+0x3c0>
 8009c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c9a:	4310      	orrs	r0, r2
 8009c9c:	d000      	beq.n	8009ca0 <_strtod_l+0x330>
 8009c9e:	e6ae      	b.n	80099fe <_strtod_l+0x8e>
 8009ca0:	4662      	mov	r2, ip
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d000      	beq.n	8009ca8 <_strtod_l+0x338>
 8009ca6:	e6c9      	b.n	8009a3c <_strtod_l+0xcc>
 8009ca8:	2b69      	cmp	r3, #105	; 0x69
 8009caa:	d025      	beq.n	8009cf8 <_strtod_l+0x388>
 8009cac:	dc21      	bgt.n	8009cf2 <_strtod_l+0x382>
 8009cae:	2b49      	cmp	r3, #73	; 0x49
 8009cb0:	d022      	beq.n	8009cf8 <_strtod_l+0x388>
 8009cb2:	2b4e      	cmp	r3, #78	; 0x4e
 8009cb4:	d000      	beq.n	8009cb8 <_strtod_l+0x348>
 8009cb6:	e6c1      	b.n	8009a3c <_strtod_l+0xcc>
 8009cb8:	49a1      	ldr	r1, [pc, #644]	; (8009f40 <_strtod_l+0x5d0>)
 8009cba:	a81f      	add	r0, sp, #124	; 0x7c
 8009cbc:	f002 f900 	bl	800bec0 <__match>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d100      	bne.n	8009cc6 <_strtod_l+0x356>
 8009cc4:	e6ba      	b.n	8009a3c <_strtod_l+0xcc>
 8009cc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b28      	cmp	r3, #40	; 0x28
 8009ccc:	d12a      	bne.n	8009d24 <_strtod_l+0x3b4>
 8009cce:	499d      	ldr	r1, [pc, #628]	; (8009f44 <_strtod_l+0x5d4>)
 8009cd0:	aa22      	add	r2, sp, #136	; 0x88
 8009cd2:	a81f      	add	r0, sp, #124	; 0x7c
 8009cd4:	f002 f908 	bl	800bee8 <__hexnan>
 8009cd8:	2805      	cmp	r0, #5
 8009cda:	d123      	bne.n	8009d24 <_strtod_l+0x3b4>
 8009cdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cde:	4a9a      	ldr	r2, [pc, #616]	; (8009f48 <_strtod_l+0x5d8>)
 8009ce0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	0017      	movs	r7, r2
 8009ce6:	e68a      	b.n	80099fe <_strtod_l+0x8e>
 8009ce8:	210a      	movs	r1, #10
 8009cea:	434a      	muls	r2, r1
 8009cec:	18d2      	adds	r2, r2, r3
 8009cee:	3a30      	subs	r2, #48	; 0x30
 8009cf0:	e7b8      	b.n	8009c64 <_strtod_l+0x2f4>
 8009cf2:	2b6e      	cmp	r3, #110	; 0x6e
 8009cf4:	d0e0      	beq.n	8009cb8 <_strtod_l+0x348>
 8009cf6:	e6a1      	b.n	8009a3c <_strtod_l+0xcc>
 8009cf8:	4994      	ldr	r1, [pc, #592]	; (8009f4c <_strtod_l+0x5dc>)
 8009cfa:	a81f      	add	r0, sp, #124	; 0x7c
 8009cfc:	f002 f8e0 	bl	800bec0 <__match>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d100      	bne.n	8009d06 <_strtod_l+0x396>
 8009d04:	e69a      	b.n	8009a3c <_strtod_l+0xcc>
 8009d06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d08:	4991      	ldr	r1, [pc, #580]	; (8009f50 <_strtod_l+0x5e0>)
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	a81f      	add	r0, sp, #124	; 0x7c
 8009d0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d10:	f002 f8d6 	bl	800bec0 <__match>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d102      	bne.n	8009d1e <_strtod_l+0x3ae>
 8009d18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d1e:	2600      	movs	r6, #0
 8009d20:	4f89      	ldr	r7, [pc, #548]	; (8009f48 <_strtod_l+0x5d8>)
 8009d22:	e66c      	b.n	80099fe <_strtod_l+0x8e>
 8009d24:	488b      	ldr	r0, [pc, #556]	; (8009f54 <_strtod_l+0x5e4>)
 8009d26:	f003 fabf 	bl	800d2a8 <nan>
 8009d2a:	0006      	movs	r6, r0
 8009d2c:	000f      	movs	r7, r1
 8009d2e:	e666      	b.n	80099fe <_strtod_l+0x8e>
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	930a      	str	r3, [sp, #40]	; 0x28
 8009d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <_strtod_l+0x3d2>
 8009d3e:	9b06      	ldr	r3, [sp, #24]
 8009d40:	9309      	str	r3, [sp, #36]	; 0x24
 8009d42:	9c06      	ldr	r4, [sp, #24]
 8009d44:	2c10      	cmp	r4, #16
 8009d46:	dd00      	ble.n	8009d4a <_strtod_l+0x3da>
 8009d48:	2410      	movs	r4, #16
 8009d4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009d4c:	f7f8 fd0e 	bl	800276c <__aeabi_ui2d>
 8009d50:	9b06      	ldr	r3, [sp, #24]
 8009d52:	0006      	movs	r6, r0
 8009d54:	000f      	movs	r7, r1
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	dd15      	ble.n	8009d86 <_strtod_l+0x416>
 8009d5a:	0022      	movs	r2, r4
 8009d5c:	4b7e      	ldr	r3, [pc, #504]	; (8009f58 <_strtod_l+0x5e8>)
 8009d5e:	3a09      	subs	r2, #9
 8009d60:	00d2      	lsls	r2, r2, #3
 8009d62:	189b      	adds	r3, r3, r2
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f7f7 fe7e 	bl	8001a68 <__aeabi_dmul>
 8009d6c:	0006      	movs	r6, r0
 8009d6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009d70:	000f      	movs	r7, r1
 8009d72:	f7f8 fcfb 	bl	800276c <__aeabi_ui2d>
 8009d76:	0002      	movs	r2, r0
 8009d78:	000b      	movs	r3, r1
 8009d7a:	0030      	movs	r0, r6
 8009d7c:	0039      	movs	r1, r7
 8009d7e:	f7f6 ff35 	bl	8000bec <__aeabi_dadd>
 8009d82:	0006      	movs	r6, r0
 8009d84:	000f      	movs	r7, r1
 8009d86:	9b06      	ldr	r3, [sp, #24]
 8009d88:	2b0f      	cmp	r3, #15
 8009d8a:	dc39      	bgt.n	8009e00 <_strtod_l+0x490>
 8009d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d100      	bne.n	8009d94 <_strtod_l+0x424>
 8009d92:	e634      	b.n	80099fe <_strtod_l+0x8e>
 8009d94:	dd24      	ble.n	8009de0 <_strtod_l+0x470>
 8009d96:	2b16      	cmp	r3, #22
 8009d98:	dc09      	bgt.n	8009dae <_strtod_l+0x43e>
 8009d9a:	496f      	ldr	r1, [pc, #444]	; (8009f58 <_strtod_l+0x5e8>)
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	18c9      	adds	r1, r1, r3
 8009da0:	0032      	movs	r2, r6
 8009da2:	6808      	ldr	r0, [r1, #0]
 8009da4:	6849      	ldr	r1, [r1, #4]
 8009da6:	003b      	movs	r3, r7
 8009da8:	f7f7 fe5e 	bl	8001a68 <__aeabi_dmul>
 8009dac:	e7bd      	b.n	8009d2a <_strtod_l+0x3ba>
 8009dae:	2325      	movs	r3, #37	; 0x25
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009db6:	4293      	cmp	r3, r2
 8009db8:	db22      	blt.n	8009e00 <_strtod_l+0x490>
 8009dba:	240f      	movs	r4, #15
 8009dbc:	9b06      	ldr	r3, [sp, #24]
 8009dbe:	4d66      	ldr	r5, [pc, #408]	; (8009f58 <_strtod_l+0x5e8>)
 8009dc0:	1ae4      	subs	r4, r4, r3
 8009dc2:	00e1      	lsls	r1, r4, #3
 8009dc4:	1869      	adds	r1, r5, r1
 8009dc6:	0032      	movs	r2, r6
 8009dc8:	6808      	ldr	r0, [r1, #0]
 8009dca:	6849      	ldr	r1, [r1, #4]
 8009dcc:	003b      	movs	r3, r7
 8009dce:	f7f7 fe4b 	bl	8001a68 <__aeabi_dmul>
 8009dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd4:	1b1c      	subs	r4, r3, r4
 8009dd6:	00e4      	lsls	r4, r4, #3
 8009dd8:	192c      	adds	r4, r5, r4
 8009dda:	6822      	ldr	r2, [r4, #0]
 8009ddc:	6863      	ldr	r3, [r4, #4]
 8009dde:	e7e3      	b.n	8009da8 <_strtod_l+0x438>
 8009de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009de2:	3316      	adds	r3, #22
 8009de4:	db0c      	blt.n	8009e00 <_strtod_l+0x490>
 8009de6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009de8:	9a07      	ldr	r2, [sp, #28]
 8009dea:	0030      	movs	r0, r6
 8009dec:	1a9a      	subs	r2, r3, r2
 8009dee:	4b5a      	ldr	r3, [pc, #360]	; (8009f58 <_strtod_l+0x5e8>)
 8009df0:	00d2      	lsls	r2, r2, #3
 8009df2:	189b      	adds	r3, r3, r2
 8009df4:	0039      	movs	r1, r7
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f7f7 fa33 	bl	8001264 <__aeabi_ddiv>
 8009dfe:	e794      	b.n	8009d2a <_strtod_l+0x3ba>
 8009e00:	9b06      	ldr	r3, [sp, #24]
 8009e02:	1b1c      	subs	r4, r3, r4
 8009e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e06:	18e4      	adds	r4, r4, r3
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	dd72      	ble.n	8009ef2 <_strtod_l+0x582>
 8009e0c:	230f      	movs	r3, #15
 8009e0e:	0021      	movs	r1, r4
 8009e10:	4019      	ands	r1, r3
 8009e12:	421c      	tst	r4, r3
 8009e14:	d00a      	beq.n	8009e2c <_strtod_l+0x4bc>
 8009e16:	00cb      	lsls	r3, r1, #3
 8009e18:	494f      	ldr	r1, [pc, #316]	; (8009f58 <_strtod_l+0x5e8>)
 8009e1a:	0032      	movs	r2, r6
 8009e1c:	18c9      	adds	r1, r1, r3
 8009e1e:	6808      	ldr	r0, [r1, #0]
 8009e20:	6849      	ldr	r1, [r1, #4]
 8009e22:	003b      	movs	r3, r7
 8009e24:	f7f7 fe20 	bl	8001a68 <__aeabi_dmul>
 8009e28:	0006      	movs	r6, r0
 8009e2a:	000f      	movs	r7, r1
 8009e2c:	230f      	movs	r3, #15
 8009e2e:	439c      	bics	r4, r3
 8009e30:	d04a      	beq.n	8009ec8 <_strtod_l+0x558>
 8009e32:	3326      	adds	r3, #38	; 0x26
 8009e34:	33ff      	adds	r3, #255	; 0xff
 8009e36:	429c      	cmp	r4, r3
 8009e38:	dd22      	ble.n	8009e80 <_strtod_l+0x510>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	9307      	str	r3, [sp, #28]
 8009e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e42:	9309      	str	r3, [sp, #36]	; 0x24
 8009e44:	2322      	movs	r3, #34	; 0x22
 8009e46:	2600      	movs	r6, #0
 8009e48:	9a05      	ldr	r2, [sp, #20]
 8009e4a:	4f3f      	ldr	r7, [pc, #252]	; (8009f48 <_strtod_l+0x5d8>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e50:	42b3      	cmp	r3, r6
 8009e52:	d100      	bne.n	8009e56 <_strtod_l+0x4e6>
 8009e54:	e5d3      	b.n	80099fe <_strtod_l+0x8e>
 8009e56:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009e58:	9805      	ldr	r0, [sp, #20]
 8009e5a:	f002 f9cd 	bl	800c1f8 <_Bfree>
 8009e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e60:	9805      	ldr	r0, [sp, #20]
 8009e62:	f002 f9c9 	bl	800c1f8 <_Bfree>
 8009e66:	9907      	ldr	r1, [sp, #28]
 8009e68:	9805      	ldr	r0, [sp, #20]
 8009e6a:	f002 f9c5 	bl	800c1f8 <_Bfree>
 8009e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e70:	9805      	ldr	r0, [sp, #20]
 8009e72:	f002 f9c1 	bl	800c1f8 <_Bfree>
 8009e76:	9906      	ldr	r1, [sp, #24]
 8009e78:	9805      	ldr	r0, [sp, #20]
 8009e7a:	f002 f9bd 	bl	800c1f8 <_Bfree>
 8009e7e:	e5be      	b.n	80099fe <_strtod_l+0x8e>
 8009e80:	2300      	movs	r3, #0
 8009e82:	0030      	movs	r0, r6
 8009e84:	0039      	movs	r1, r7
 8009e86:	4d35      	ldr	r5, [pc, #212]	; (8009f5c <_strtod_l+0x5ec>)
 8009e88:	1124      	asrs	r4, r4, #4
 8009e8a:	9308      	str	r3, [sp, #32]
 8009e8c:	2c01      	cmp	r4, #1
 8009e8e:	dc1e      	bgt.n	8009ece <_strtod_l+0x55e>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <_strtod_l+0x528>
 8009e94:	0006      	movs	r6, r0
 8009e96:	000f      	movs	r7, r1
 8009e98:	4b31      	ldr	r3, [pc, #196]	; (8009f60 <_strtod_l+0x5f0>)
 8009e9a:	0032      	movs	r2, r6
 8009e9c:	18ff      	adds	r7, r7, r3
 8009e9e:	9b08      	ldr	r3, [sp, #32]
 8009ea0:	00dd      	lsls	r5, r3, #3
 8009ea2:	4b2e      	ldr	r3, [pc, #184]	; (8009f5c <_strtod_l+0x5ec>)
 8009ea4:	195d      	adds	r5, r3, r5
 8009ea6:	6828      	ldr	r0, [r5, #0]
 8009ea8:	6869      	ldr	r1, [r5, #4]
 8009eaa:	003b      	movs	r3, r7
 8009eac:	f7f7 fddc 	bl	8001a68 <__aeabi_dmul>
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <_strtod_l+0x5d8>)
 8009eb2:	4a2c      	ldr	r2, [pc, #176]	; (8009f64 <_strtod_l+0x5f4>)
 8009eb4:	0006      	movs	r6, r0
 8009eb6:	400b      	ands	r3, r1
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d8be      	bhi.n	8009e3a <_strtod_l+0x4ca>
 8009ebc:	4a2a      	ldr	r2, [pc, #168]	; (8009f68 <_strtod_l+0x5f8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d913      	bls.n	8009eea <_strtod_l+0x57a>
 8009ec2:	2601      	movs	r6, #1
 8009ec4:	4f29      	ldr	r7, [pc, #164]	; (8009f6c <_strtod_l+0x5fc>)
 8009ec6:	4276      	negs	r6, r6
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9308      	str	r3, [sp, #32]
 8009ecc:	e087      	b.n	8009fde <_strtod_l+0x66e>
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4214      	tst	r4, r2
 8009ed2:	d004      	beq.n	8009ede <_strtod_l+0x56e>
 8009ed4:	682a      	ldr	r2, [r5, #0]
 8009ed6:	686b      	ldr	r3, [r5, #4]
 8009ed8:	f7f7 fdc6 	bl	8001a68 <__aeabi_dmul>
 8009edc:	2301      	movs	r3, #1
 8009ede:	9a08      	ldr	r2, [sp, #32]
 8009ee0:	1064      	asrs	r4, r4, #1
 8009ee2:	3201      	adds	r2, #1
 8009ee4:	9208      	str	r2, [sp, #32]
 8009ee6:	3508      	adds	r5, #8
 8009ee8:	e7d0      	b.n	8009e8c <_strtod_l+0x51c>
 8009eea:	23d4      	movs	r3, #212	; 0xd4
 8009eec:	049b      	lsls	r3, r3, #18
 8009eee:	18cf      	adds	r7, r1, r3
 8009ef0:	e7ea      	b.n	8009ec8 <_strtod_l+0x558>
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	d0e8      	beq.n	8009ec8 <_strtod_l+0x558>
 8009ef6:	4264      	negs	r4, r4
 8009ef8:	220f      	movs	r2, #15
 8009efa:	0023      	movs	r3, r4
 8009efc:	4013      	ands	r3, r2
 8009efe:	4214      	tst	r4, r2
 8009f00:	d00a      	beq.n	8009f18 <_strtod_l+0x5a8>
 8009f02:	00da      	lsls	r2, r3, #3
 8009f04:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <_strtod_l+0x5e8>)
 8009f06:	0030      	movs	r0, r6
 8009f08:	189b      	adds	r3, r3, r2
 8009f0a:	0039      	movs	r1, r7
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f7f7 f9a8 	bl	8001264 <__aeabi_ddiv>
 8009f14:	0006      	movs	r6, r0
 8009f16:	000f      	movs	r7, r1
 8009f18:	1124      	asrs	r4, r4, #4
 8009f1a:	d0d5      	beq.n	8009ec8 <_strtod_l+0x558>
 8009f1c:	2c1f      	cmp	r4, #31
 8009f1e:	dd27      	ble.n	8009f70 <_strtod_l+0x600>
 8009f20:	2300      	movs	r3, #0
 8009f22:	9306      	str	r3, [sp, #24]
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f28:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2a:	2322      	movs	r3, #34	; 0x22
 8009f2c:	9a05      	ldr	r2, [sp, #20]
 8009f2e:	2600      	movs	r6, #0
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f34:	2700      	movs	r7, #0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d18d      	bne.n	8009e56 <_strtod_l+0x4e6>
 8009f3a:	e560      	b.n	80099fe <_strtod_l+0x8e>
 8009f3c:	00004e1f 	.word	0x00004e1f
 8009f40:	0800d80d 	.word	0x0800d80d
 8009f44:	0800d850 	.word	0x0800d850
 8009f48:	7ff00000 	.word	0x7ff00000
 8009f4c:	0800d805 	.word	0x0800d805
 8009f50:	0800d994 	.word	0x0800d994
 8009f54:	0800dca8 	.word	0x0800dca8
 8009f58:	0800db88 	.word	0x0800db88
 8009f5c:	0800db60 	.word	0x0800db60
 8009f60:	fcb00000 	.word	0xfcb00000
 8009f64:	7ca00000 	.word	0x7ca00000
 8009f68:	7c900000 	.word	0x7c900000
 8009f6c:	7fefffff 	.word	0x7fefffff
 8009f70:	2310      	movs	r3, #16
 8009f72:	0022      	movs	r2, r4
 8009f74:	401a      	ands	r2, r3
 8009f76:	9208      	str	r2, [sp, #32]
 8009f78:	421c      	tst	r4, r3
 8009f7a:	d001      	beq.n	8009f80 <_strtod_l+0x610>
 8009f7c:	335a      	adds	r3, #90	; 0x5a
 8009f7e:	9308      	str	r3, [sp, #32]
 8009f80:	0030      	movs	r0, r6
 8009f82:	0039      	movs	r1, r7
 8009f84:	2300      	movs	r3, #0
 8009f86:	4dc5      	ldr	r5, [pc, #788]	; (800a29c <_strtod_l+0x92c>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	4214      	tst	r4, r2
 8009f8c:	d004      	beq.n	8009f98 <_strtod_l+0x628>
 8009f8e:	682a      	ldr	r2, [r5, #0]
 8009f90:	686b      	ldr	r3, [r5, #4]
 8009f92:	f7f7 fd69 	bl	8001a68 <__aeabi_dmul>
 8009f96:	2301      	movs	r3, #1
 8009f98:	1064      	asrs	r4, r4, #1
 8009f9a:	3508      	adds	r5, #8
 8009f9c:	2c00      	cmp	r4, #0
 8009f9e:	d1f3      	bne.n	8009f88 <_strtod_l+0x618>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <_strtod_l+0x638>
 8009fa4:	0006      	movs	r6, r0
 8009fa6:	000f      	movs	r7, r1
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00f      	beq.n	8009fce <_strtod_l+0x65e>
 8009fae:	236b      	movs	r3, #107	; 0x6b
 8009fb0:	007a      	lsls	r2, r7, #1
 8009fb2:	0d52      	lsrs	r2, r2, #21
 8009fb4:	0039      	movs	r1, r7
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	dd08      	ble.n	8009fce <_strtod_l+0x65e>
 8009fbc:	2b1f      	cmp	r3, #31
 8009fbe:	dc00      	bgt.n	8009fc2 <_strtod_l+0x652>
 8009fc0:	e124      	b.n	800a20c <_strtod_l+0x89c>
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	2b34      	cmp	r3, #52	; 0x34
 8009fc6:	dc00      	bgt.n	8009fca <_strtod_l+0x65a>
 8009fc8:	e119      	b.n	800a1fe <_strtod_l+0x88e>
 8009fca:	27dc      	movs	r7, #220	; 0xdc
 8009fcc:	04bf      	lsls	r7, r7, #18
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	0030      	movs	r0, r6
 8009fd4:	0039      	movs	r1, r7
 8009fd6:	f7f6 fa39 	bl	800044c <__aeabi_dcmpeq>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d1a0      	bne.n	8009f20 <_strtod_l+0x5b0>
 8009fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	9805      	ldr	r0, [sp, #20]
 8009fea:	f002 f96d 	bl	800c2c8 <__s2b>
 8009fee:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d100      	bne.n	8009ff6 <_strtod_l+0x686>
 8009ff4:	e721      	b.n	8009e3a <_strtod_l+0x4ca>
 8009ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff8:	9907      	ldr	r1, [sp, #28]
 8009ffa:	17da      	asrs	r2, r3, #31
 8009ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ffe:	1a5b      	subs	r3, r3, r1
 800a000:	401a      	ands	r2, r3
 800a002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a004:	9215      	str	r2, [sp, #84]	; 0x54
 800a006:	43db      	mvns	r3, r3
 800a008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a00a:	17db      	asrs	r3, r3, #31
 800a00c:	401a      	ands	r2, r3
 800a00e:	2300      	movs	r3, #0
 800a010:	921a      	str	r2, [sp, #104]	; 0x68
 800a012:	9306      	str	r3, [sp, #24]
 800a014:	9307      	str	r3, [sp, #28]
 800a016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	6859      	ldr	r1, [r3, #4]
 800a01c:	f002 f8a8 	bl	800c170 <_Balloc>
 800a020:	9009      	str	r0, [sp, #36]	; 0x24
 800a022:	2800      	cmp	r0, #0
 800a024:	d100      	bne.n	800a028 <_strtod_l+0x6b8>
 800a026:	e70d      	b.n	8009e44 <_strtod_l+0x4d4>
 800a028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	310c      	adds	r1, #12
 800a030:	1c9a      	adds	r2, r3, #2
 800a032:	0092      	lsls	r2, r2, #2
 800a034:	300c      	adds	r0, #12
 800a036:	930c      	str	r3, [sp, #48]	; 0x30
 800a038:	f7fe fd40 	bl	8008abc <memcpy>
 800a03c:	ab22      	add	r3, sp, #136	; 0x88
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	ab21      	add	r3, sp, #132	; 0x84
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	0032      	movs	r2, r6
 800a046:	003b      	movs	r3, r7
 800a048:	9805      	ldr	r0, [sp, #20]
 800a04a:	9612      	str	r6, [sp, #72]	; 0x48
 800a04c:	9713      	str	r7, [sp, #76]	; 0x4c
 800a04e:	f002 fc87 	bl	800c960 <__d2b>
 800a052:	9020      	str	r0, [sp, #128]	; 0x80
 800a054:	2800      	cmp	r0, #0
 800a056:	d100      	bne.n	800a05a <_strtod_l+0x6ea>
 800a058:	e6f4      	b.n	8009e44 <_strtod_l+0x4d4>
 800a05a:	2101      	movs	r1, #1
 800a05c:	9805      	ldr	r0, [sp, #20]
 800a05e:	f002 f9c7 	bl	800c3f0 <__i2b>
 800a062:	9007      	str	r0, [sp, #28]
 800a064:	2800      	cmp	r0, #0
 800a066:	d100      	bne.n	800a06a <_strtod_l+0x6fa>
 800a068:	e6ec      	b.n	8009e44 <_strtod_l+0x4d4>
 800a06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a06c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a06e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a070:	1ad4      	subs	r4, r2, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	db01      	blt.n	800a07a <_strtod_l+0x70a>
 800a076:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a078:	195d      	adds	r5, r3, r5
 800a07a:	9908      	ldr	r1, [sp, #32]
 800a07c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a07e:	1a5b      	subs	r3, r3, r1
 800a080:	2136      	movs	r1, #54	; 0x36
 800a082:	189b      	adds	r3, r3, r2
 800a084:	1a8a      	subs	r2, r1, r2
 800a086:	4986      	ldr	r1, [pc, #536]	; (800a2a0 <_strtod_l+0x930>)
 800a088:	2001      	movs	r0, #1
 800a08a:	468c      	mov	ip, r1
 800a08c:	2100      	movs	r1, #0
 800a08e:	3b01      	subs	r3, #1
 800a090:	9110      	str	r1, [sp, #64]	; 0x40
 800a092:	9014      	str	r0, [sp, #80]	; 0x50
 800a094:	4563      	cmp	r3, ip
 800a096:	da07      	bge.n	800a0a8 <_strtod_l+0x738>
 800a098:	4661      	mov	r1, ip
 800a09a:	1ac9      	subs	r1, r1, r3
 800a09c:	1a52      	subs	r2, r2, r1
 800a09e:	291f      	cmp	r1, #31
 800a0a0:	dd00      	ble.n	800a0a4 <_strtod_l+0x734>
 800a0a2:	e0b8      	b.n	800a216 <_strtod_l+0x8a6>
 800a0a4:	4088      	lsls	r0, r1
 800a0a6:	9014      	str	r0, [sp, #80]	; 0x50
 800a0a8:	18ab      	adds	r3, r5, r2
 800a0aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a0ac:	18a4      	adds	r4, r4, r2
 800a0ae:	9b08      	ldr	r3, [sp, #32]
 800a0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0b2:	191c      	adds	r4, r3, r4
 800a0b4:	002b      	movs	r3, r5
 800a0b6:	4295      	cmp	r5, r2
 800a0b8:	dd00      	ble.n	800a0bc <_strtod_l+0x74c>
 800a0ba:	0013      	movs	r3, r2
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	dd00      	ble.n	800a0c2 <_strtod_l+0x752>
 800a0c0:	0023      	movs	r3, r4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd04      	ble.n	800a0d0 <_strtod_l+0x760>
 800a0c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0c8:	1ae4      	subs	r4, r4, r3
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	920c      	str	r2, [sp, #48]	; 0x30
 800a0ce:	1aed      	subs	r5, r5, r3
 800a0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dd17      	ble.n	800a106 <_strtod_l+0x796>
 800a0d6:	001a      	movs	r2, r3
 800a0d8:	9907      	ldr	r1, [sp, #28]
 800a0da:	9805      	ldr	r0, [sp, #20]
 800a0dc:	f002 fa4e 	bl	800c57c <__pow5mult>
 800a0e0:	9007      	str	r0, [sp, #28]
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d100      	bne.n	800a0e8 <_strtod_l+0x778>
 800a0e6:	e6ad      	b.n	8009e44 <_strtod_l+0x4d4>
 800a0e8:	0001      	movs	r1, r0
 800a0ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a0ec:	9805      	ldr	r0, [sp, #20]
 800a0ee:	f002 f995 	bl	800c41c <__multiply>
 800a0f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d100      	bne.n	800a0fa <_strtod_l+0x78a>
 800a0f8:	e6a4      	b.n	8009e44 <_strtod_l+0x4d4>
 800a0fa:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a0fc:	9805      	ldr	r0, [sp, #20]
 800a0fe:	f002 f87b 	bl	800c1f8 <_Bfree>
 800a102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a104:	9320      	str	r3, [sp, #128]	; 0x80
 800a106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dd00      	ble.n	800a10e <_strtod_l+0x79e>
 800a10c:	e089      	b.n	800a222 <_strtod_l+0x8b2>
 800a10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a110:	2b00      	cmp	r3, #0
 800a112:	dd08      	ble.n	800a126 <_strtod_l+0x7b6>
 800a114:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a116:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a118:	9805      	ldr	r0, [sp, #20]
 800a11a:	f002 fa2f 	bl	800c57c <__pow5mult>
 800a11e:	9009      	str	r0, [sp, #36]	; 0x24
 800a120:	2800      	cmp	r0, #0
 800a122:	d100      	bne.n	800a126 <_strtod_l+0x7b6>
 800a124:	e68e      	b.n	8009e44 <_strtod_l+0x4d4>
 800a126:	2c00      	cmp	r4, #0
 800a128:	dd08      	ble.n	800a13c <_strtod_l+0x7cc>
 800a12a:	0022      	movs	r2, r4
 800a12c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a12e:	9805      	ldr	r0, [sp, #20]
 800a130:	f002 fa80 	bl	800c634 <__lshift>
 800a134:	9009      	str	r0, [sp, #36]	; 0x24
 800a136:	2800      	cmp	r0, #0
 800a138:	d100      	bne.n	800a13c <_strtod_l+0x7cc>
 800a13a:	e683      	b.n	8009e44 <_strtod_l+0x4d4>
 800a13c:	2d00      	cmp	r5, #0
 800a13e:	dd08      	ble.n	800a152 <_strtod_l+0x7e2>
 800a140:	002a      	movs	r2, r5
 800a142:	9907      	ldr	r1, [sp, #28]
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	f002 fa75 	bl	800c634 <__lshift>
 800a14a:	9007      	str	r0, [sp, #28]
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d100      	bne.n	800a152 <_strtod_l+0x7e2>
 800a150:	e678      	b.n	8009e44 <_strtod_l+0x4d4>
 800a152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a154:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a156:	9805      	ldr	r0, [sp, #20]
 800a158:	f002 faf6 	bl	800c748 <__mdiff>
 800a15c:	9006      	str	r0, [sp, #24]
 800a15e:	2800      	cmp	r0, #0
 800a160:	d100      	bne.n	800a164 <_strtod_l+0x7f4>
 800a162:	e66f      	b.n	8009e44 <_strtod_l+0x4d4>
 800a164:	2200      	movs	r2, #0
 800a166:	68c3      	ldr	r3, [r0, #12]
 800a168:	9907      	ldr	r1, [sp, #28]
 800a16a:	60c2      	str	r2, [r0, #12]
 800a16c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a16e:	f002 facf 	bl	800c710 <__mcmp>
 800a172:	2800      	cmp	r0, #0
 800a174:	da5f      	bge.n	800a236 <_strtod_l+0x8c6>
 800a176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a178:	4333      	orrs	r3, r6
 800a17a:	d000      	beq.n	800a17e <_strtod_l+0x80e>
 800a17c:	e08a      	b.n	800a294 <_strtod_l+0x924>
 800a17e:	033b      	lsls	r3, r7, #12
 800a180:	d000      	beq.n	800a184 <_strtod_l+0x814>
 800a182:	e087      	b.n	800a294 <_strtod_l+0x924>
 800a184:	22d6      	movs	r2, #214	; 0xd6
 800a186:	4b47      	ldr	r3, [pc, #284]	; (800a2a4 <_strtod_l+0x934>)
 800a188:	04d2      	lsls	r2, r2, #19
 800a18a:	403b      	ands	r3, r7
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d800      	bhi.n	800a192 <_strtod_l+0x822>
 800a190:	e080      	b.n	800a294 <_strtod_l+0x924>
 800a192:	9b06      	ldr	r3, [sp, #24]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	930a      	str	r3, [sp, #40]	; 0x28
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <_strtod_l+0x836>
 800a19c:	9b06      	ldr	r3, [sp, #24]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	dd76      	ble.n	800a294 <_strtod_l+0x924>
 800a1a6:	9906      	ldr	r1, [sp, #24]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	9805      	ldr	r0, [sp, #20]
 800a1ac:	f002 fa42 	bl	800c634 <__lshift>
 800a1b0:	9907      	ldr	r1, [sp, #28]
 800a1b2:	9006      	str	r0, [sp, #24]
 800a1b4:	f002 faac 	bl	800c710 <__mcmp>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	dd6b      	ble.n	800a294 <_strtod_l+0x924>
 800a1bc:	9908      	ldr	r1, [sp, #32]
 800a1be:	003b      	movs	r3, r7
 800a1c0:	4a38      	ldr	r2, [pc, #224]	; (800a2a4 <_strtod_l+0x934>)
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	d100      	bne.n	800a1c8 <_strtod_l+0x858>
 800a1c6:	e092      	b.n	800a2ee <_strtod_l+0x97e>
 800a1c8:	0011      	movs	r1, r2
 800a1ca:	20d6      	movs	r0, #214	; 0xd6
 800a1cc:	4039      	ands	r1, r7
 800a1ce:	04c0      	lsls	r0, r0, #19
 800a1d0:	4281      	cmp	r1, r0
 800a1d2:	dd00      	ble.n	800a1d6 <_strtod_l+0x866>
 800a1d4:	e08b      	b.n	800a2ee <_strtod_l+0x97e>
 800a1d6:	23dc      	movs	r3, #220	; 0xdc
 800a1d8:	049b      	lsls	r3, r3, #18
 800a1da:	4299      	cmp	r1, r3
 800a1dc:	dc00      	bgt.n	800a1e0 <_strtod_l+0x870>
 800a1de:	e6a4      	b.n	8009f2a <_strtod_l+0x5ba>
 800a1e0:	0030      	movs	r0, r6
 800a1e2:	0039      	movs	r1, r7
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4b30      	ldr	r3, [pc, #192]	; (800a2a8 <_strtod_l+0x938>)
 800a1e8:	f7f7 fc3e 	bl	8001a68 <__aeabi_dmul>
 800a1ec:	0006      	movs	r6, r0
 800a1ee:	000f      	movs	r7, r1
 800a1f0:	4308      	orrs	r0, r1
 800a1f2:	d000      	beq.n	800a1f6 <_strtod_l+0x886>
 800a1f4:	e62f      	b.n	8009e56 <_strtod_l+0x4e6>
 800a1f6:	2322      	movs	r3, #34	; 0x22
 800a1f8:	9a05      	ldr	r2, [sp, #20]
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	e62b      	b.n	8009e56 <_strtod_l+0x4e6>
 800a1fe:	234b      	movs	r3, #75	; 0x4b
 800a200:	1a9a      	subs	r2, r3, r2
 800a202:	3b4c      	subs	r3, #76	; 0x4c
 800a204:	4093      	lsls	r3, r2
 800a206:	4019      	ands	r1, r3
 800a208:	000f      	movs	r7, r1
 800a20a:	e6e0      	b.n	8009fce <_strtod_l+0x65e>
 800a20c:	2201      	movs	r2, #1
 800a20e:	4252      	negs	r2, r2
 800a210:	409a      	lsls	r2, r3
 800a212:	4016      	ands	r6, r2
 800a214:	e6db      	b.n	8009fce <_strtod_l+0x65e>
 800a216:	4925      	ldr	r1, [pc, #148]	; (800a2ac <_strtod_l+0x93c>)
 800a218:	1acb      	subs	r3, r1, r3
 800a21a:	0001      	movs	r1, r0
 800a21c:	4099      	lsls	r1, r3
 800a21e:	9110      	str	r1, [sp, #64]	; 0x40
 800a220:	e741      	b.n	800a0a6 <_strtod_l+0x736>
 800a222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a224:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a226:	9805      	ldr	r0, [sp, #20]
 800a228:	f002 fa04 	bl	800c634 <__lshift>
 800a22c:	9020      	str	r0, [sp, #128]	; 0x80
 800a22e:	2800      	cmp	r0, #0
 800a230:	d000      	beq.n	800a234 <_strtod_l+0x8c4>
 800a232:	e76c      	b.n	800a10e <_strtod_l+0x79e>
 800a234:	e606      	b.n	8009e44 <_strtod_l+0x4d4>
 800a236:	970c      	str	r7, [sp, #48]	; 0x30
 800a238:	2800      	cmp	r0, #0
 800a23a:	d176      	bne.n	800a32a <_strtod_l+0x9ba>
 800a23c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a23e:	033b      	lsls	r3, r7, #12
 800a240:	0b1b      	lsrs	r3, r3, #12
 800a242:	2a00      	cmp	r2, #0
 800a244:	d038      	beq.n	800a2b8 <_strtod_l+0x948>
 800a246:	4a1a      	ldr	r2, [pc, #104]	; (800a2b0 <_strtod_l+0x940>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d138      	bne.n	800a2be <_strtod_l+0x94e>
 800a24c:	2201      	movs	r2, #1
 800a24e:	9b08      	ldr	r3, [sp, #32]
 800a250:	4252      	negs	r2, r2
 800a252:	0031      	movs	r1, r6
 800a254:	0010      	movs	r0, r2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00b      	beq.n	800a272 <_strtod_l+0x902>
 800a25a:	24d4      	movs	r4, #212	; 0xd4
 800a25c:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <_strtod_l+0x934>)
 800a25e:	0010      	movs	r0, r2
 800a260:	403b      	ands	r3, r7
 800a262:	04e4      	lsls	r4, r4, #19
 800a264:	42a3      	cmp	r3, r4
 800a266:	d804      	bhi.n	800a272 <_strtod_l+0x902>
 800a268:	306c      	adds	r0, #108	; 0x6c
 800a26a:	0d1b      	lsrs	r3, r3, #20
 800a26c:	1ac3      	subs	r3, r0, r3
 800a26e:	409a      	lsls	r2, r3
 800a270:	0010      	movs	r0, r2
 800a272:	4281      	cmp	r1, r0
 800a274:	d123      	bne.n	800a2be <_strtod_l+0x94e>
 800a276:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <_strtod_l+0x944>)
 800a278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d102      	bne.n	800a284 <_strtod_l+0x914>
 800a27e:	1c4b      	adds	r3, r1, #1
 800a280:	d100      	bne.n	800a284 <_strtod_l+0x914>
 800a282:	e5df      	b.n	8009e44 <_strtod_l+0x4d4>
 800a284:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <_strtod_l+0x934>)
 800a286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a288:	2600      	movs	r6, #0
 800a28a:	401a      	ands	r2, r3
 800a28c:	0013      	movs	r3, r2
 800a28e:	2280      	movs	r2, #128	; 0x80
 800a290:	0352      	lsls	r2, r2, #13
 800a292:	189f      	adds	r7, r3, r2
 800a294:	9b08      	ldr	r3, [sp, #32]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1a2      	bne.n	800a1e0 <_strtod_l+0x870>
 800a29a:	e5dc      	b.n	8009e56 <_strtod_l+0x4e6>
 800a29c:	0800d868 	.word	0x0800d868
 800a2a0:	fffffc02 	.word	0xfffffc02
 800a2a4:	7ff00000 	.word	0x7ff00000
 800a2a8:	39500000 	.word	0x39500000
 800a2ac:	fffffbe2 	.word	0xfffffbe2
 800a2b0:	000fffff 	.word	0x000fffff
 800a2b4:	7fefffff 	.word	0x7fefffff
 800a2b8:	4333      	orrs	r3, r6
 800a2ba:	d100      	bne.n	800a2be <_strtod_l+0x94e>
 800a2bc:	e77e      	b.n	800a1bc <_strtod_l+0x84c>
 800a2be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01d      	beq.n	800a300 <_strtod_l+0x990>
 800a2c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2c8:	4213      	tst	r3, r2
 800a2ca:	d0e3      	beq.n	800a294 <_strtod_l+0x924>
 800a2cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ce:	0030      	movs	r0, r6
 800a2d0:	0039      	movs	r1, r7
 800a2d2:	9a08      	ldr	r2, [sp, #32]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d017      	beq.n	800a308 <_strtod_l+0x998>
 800a2d8:	f7ff fb32 	bl	8009940 <sulp>
 800a2dc:	0002      	movs	r2, r0
 800a2de:	000b      	movs	r3, r1
 800a2e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a2e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2e4:	f7f6 fc82 	bl	8000bec <__aeabi_dadd>
 800a2e8:	0006      	movs	r6, r0
 800a2ea:	000f      	movs	r7, r1
 800a2ec:	e7d2      	b.n	800a294 <_strtod_l+0x924>
 800a2ee:	2601      	movs	r6, #1
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	4a99      	ldr	r2, [pc, #612]	; (800a558 <_strtod_l+0xbe8>)
 800a2f4:	4276      	negs	r6, r6
 800a2f6:	189b      	adds	r3, r3, r2
 800a2f8:	4a98      	ldr	r2, [pc, #608]	; (800a55c <_strtod_l+0xbec>)
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	0017      	movs	r7, r2
 800a2fe:	e7c9      	b.n	800a294 <_strtod_l+0x924>
 800a300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a302:	4233      	tst	r3, r6
 800a304:	d0c6      	beq.n	800a294 <_strtod_l+0x924>
 800a306:	e7e1      	b.n	800a2cc <_strtod_l+0x95c>
 800a308:	f7ff fb1a 	bl	8009940 <sulp>
 800a30c:	0002      	movs	r2, r0
 800a30e:	000b      	movs	r3, r1
 800a310:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a312:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a314:	f7f7 fe14 	bl	8001f40 <__aeabi_dsub>
 800a318:	2200      	movs	r2, #0
 800a31a:	2300      	movs	r3, #0
 800a31c:	0006      	movs	r6, r0
 800a31e:	000f      	movs	r7, r1
 800a320:	f7f6 f894 	bl	800044c <__aeabi_dcmpeq>
 800a324:	2800      	cmp	r0, #0
 800a326:	d0b5      	beq.n	800a294 <_strtod_l+0x924>
 800a328:	e5ff      	b.n	8009f2a <_strtod_l+0x5ba>
 800a32a:	9907      	ldr	r1, [sp, #28]
 800a32c:	9806      	ldr	r0, [sp, #24]
 800a32e:	f002 fb7b 	bl	800ca28 <__ratio>
 800a332:	2380      	movs	r3, #128	; 0x80
 800a334:	2200      	movs	r2, #0
 800a336:	05db      	lsls	r3, r3, #23
 800a338:	0004      	movs	r4, r0
 800a33a:	000d      	movs	r5, r1
 800a33c:	f7f6 f896 	bl	800046c <__aeabi_dcmple>
 800a340:	2800      	cmp	r0, #0
 800a342:	d075      	beq.n	800a430 <_strtod_l+0xac0>
 800a344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d047      	beq.n	800a3da <_strtod_l+0xa6a>
 800a34a:	2300      	movs	r3, #0
 800a34c:	4c84      	ldr	r4, [pc, #528]	; (800a560 <_strtod_l+0xbf0>)
 800a34e:	2500      	movs	r5, #0
 800a350:	9310      	str	r3, [sp, #64]	; 0x40
 800a352:	9411      	str	r4, [sp, #68]	; 0x44
 800a354:	4c82      	ldr	r4, [pc, #520]	; (800a560 <_strtod_l+0xbf0>)
 800a356:	4a83      	ldr	r2, [pc, #524]	; (800a564 <_strtod_l+0xbf4>)
 800a358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a35a:	4013      	ands	r3, r2
 800a35c:	9314      	str	r3, [sp, #80]	; 0x50
 800a35e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a360:	4b81      	ldr	r3, [pc, #516]	; (800a568 <_strtod_l+0xbf8>)
 800a362:	429a      	cmp	r2, r3
 800a364:	d000      	beq.n	800a368 <_strtod_l+0x9f8>
 800a366:	e0ac      	b.n	800a4c2 <_strtod_l+0xb52>
 800a368:	4a80      	ldr	r2, [pc, #512]	; (800a56c <_strtod_l+0xbfc>)
 800a36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a36c:	4694      	mov	ip, r2
 800a36e:	4463      	add	r3, ip
 800a370:	001f      	movs	r7, r3
 800a372:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a374:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a376:	0030      	movs	r0, r6
 800a378:	0039      	movs	r1, r7
 800a37a:	920c      	str	r2, [sp, #48]	; 0x30
 800a37c:	930d      	str	r3, [sp, #52]	; 0x34
 800a37e:	f002 fa7b 	bl	800c878 <__ulp>
 800a382:	0002      	movs	r2, r0
 800a384:	000b      	movs	r3, r1
 800a386:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a388:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a38a:	f7f7 fb6d 	bl	8001a68 <__aeabi_dmul>
 800a38e:	0032      	movs	r2, r6
 800a390:	003b      	movs	r3, r7
 800a392:	f7f6 fc2b 	bl	8000bec <__aeabi_dadd>
 800a396:	4a73      	ldr	r2, [pc, #460]	; (800a564 <_strtod_l+0xbf4>)
 800a398:	4b75      	ldr	r3, [pc, #468]	; (800a570 <_strtod_l+0xc00>)
 800a39a:	0006      	movs	r6, r0
 800a39c:	400a      	ands	r2, r1
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d95e      	bls.n	800a460 <_strtod_l+0xaf0>
 800a3a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3a4:	4b73      	ldr	r3, [pc, #460]	; (800a574 <_strtod_l+0xc04>)
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d103      	bne.n	800a3b2 <_strtod_l+0xa42>
 800a3aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	d100      	bne.n	800a3b2 <_strtod_l+0xa42>
 800a3b0:	e548      	b.n	8009e44 <_strtod_l+0x4d4>
 800a3b2:	2601      	movs	r6, #1
 800a3b4:	4f6f      	ldr	r7, [pc, #444]	; (800a574 <_strtod_l+0xc04>)
 800a3b6:	4276      	negs	r6, r6
 800a3b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a3ba:	9805      	ldr	r0, [sp, #20]
 800a3bc:	f001 ff1c 	bl	800c1f8 <_Bfree>
 800a3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3c2:	9805      	ldr	r0, [sp, #20]
 800a3c4:	f001 ff18 	bl	800c1f8 <_Bfree>
 800a3c8:	9907      	ldr	r1, [sp, #28]
 800a3ca:	9805      	ldr	r0, [sp, #20]
 800a3cc:	f001 ff14 	bl	800c1f8 <_Bfree>
 800a3d0:	9906      	ldr	r1, [sp, #24]
 800a3d2:	9805      	ldr	r0, [sp, #20]
 800a3d4:	f001 ff10 	bl	800c1f8 <_Bfree>
 800a3d8:	e61d      	b.n	800a016 <_strtod_l+0x6a6>
 800a3da:	2e00      	cmp	r6, #0
 800a3dc:	d11c      	bne.n	800a418 <_strtod_l+0xaa8>
 800a3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3e0:	031b      	lsls	r3, r3, #12
 800a3e2:	d11f      	bne.n	800a424 <_strtod_l+0xab4>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	0020      	movs	r0, r4
 800a3e8:	0029      	movs	r1, r5
 800a3ea:	4b5d      	ldr	r3, [pc, #372]	; (800a560 <_strtod_l+0xbf0>)
 800a3ec:	f7f6 f834 	bl	8000458 <__aeabi_dcmplt>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d11a      	bne.n	800a42a <_strtod_l+0xaba>
 800a3f4:	0020      	movs	r0, r4
 800a3f6:	0029      	movs	r1, r5
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4b5f      	ldr	r3, [pc, #380]	; (800a578 <_strtod_l+0xc08>)
 800a3fc:	f7f7 fb34 	bl	8001a68 <__aeabi_dmul>
 800a400:	0005      	movs	r5, r0
 800a402:	000c      	movs	r4, r1
 800a404:	2380      	movs	r3, #128	; 0x80
 800a406:	061b      	lsls	r3, r3, #24
 800a408:	18e3      	adds	r3, r4, r3
 800a40a:	951c      	str	r5, [sp, #112]	; 0x70
 800a40c:	931d      	str	r3, [sp, #116]	; 0x74
 800a40e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a412:	9210      	str	r2, [sp, #64]	; 0x40
 800a414:	9311      	str	r3, [sp, #68]	; 0x44
 800a416:	e79e      	b.n	800a356 <_strtod_l+0x9e6>
 800a418:	2e01      	cmp	r6, #1
 800a41a:	d103      	bne.n	800a424 <_strtod_l+0xab4>
 800a41c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d100      	bne.n	800a424 <_strtod_l+0xab4>
 800a422:	e582      	b.n	8009f2a <_strtod_l+0x5ba>
 800a424:	2300      	movs	r3, #0
 800a426:	4c55      	ldr	r4, [pc, #340]	; (800a57c <_strtod_l+0xc0c>)
 800a428:	e791      	b.n	800a34e <_strtod_l+0x9de>
 800a42a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a42c:	4c52      	ldr	r4, [pc, #328]	; (800a578 <_strtod_l+0xc08>)
 800a42e:	e7e9      	b.n	800a404 <_strtod_l+0xa94>
 800a430:	2200      	movs	r2, #0
 800a432:	0020      	movs	r0, r4
 800a434:	0029      	movs	r1, r5
 800a436:	4b50      	ldr	r3, [pc, #320]	; (800a578 <_strtod_l+0xc08>)
 800a438:	f7f7 fb16 	bl	8001a68 <__aeabi_dmul>
 800a43c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a43e:	0005      	movs	r5, r0
 800a440:	000b      	movs	r3, r1
 800a442:	000c      	movs	r4, r1
 800a444:	2a00      	cmp	r2, #0
 800a446:	d107      	bne.n	800a458 <_strtod_l+0xae8>
 800a448:	2280      	movs	r2, #128	; 0x80
 800a44a:	0612      	lsls	r2, r2, #24
 800a44c:	188b      	adds	r3, r1, r2
 800a44e:	9016      	str	r0, [sp, #88]	; 0x58
 800a450:	9317      	str	r3, [sp, #92]	; 0x5c
 800a452:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a456:	e7dc      	b.n	800a412 <_strtod_l+0xaa2>
 800a458:	0002      	movs	r2, r0
 800a45a:	9216      	str	r2, [sp, #88]	; 0x58
 800a45c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a45e:	e7f8      	b.n	800a452 <_strtod_l+0xae2>
 800a460:	23d4      	movs	r3, #212	; 0xd4
 800a462:	049b      	lsls	r3, r3, #18
 800a464:	18cf      	adds	r7, r1, r3
 800a466:	9b08      	ldr	r3, [sp, #32]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1a5      	bne.n	800a3b8 <_strtod_l+0xa48>
 800a46c:	4b3d      	ldr	r3, [pc, #244]	; (800a564 <_strtod_l+0xbf4>)
 800a46e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a470:	403b      	ands	r3, r7
 800a472:	429a      	cmp	r2, r3
 800a474:	d1a0      	bne.n	800a3b8 <_strtod_l+0xa48>
 800a476:	0028      	movs	r0, r5
 800a478:	0021      	movs	r1, r4
 800a47a:	f7f6 f833 	bl	80004e4 <__aeabi_d2lz>
 800a47e:	f7f6 f86d 	bl	800055c <__aeabi_l2d>
 800a482:	0002      	movs	r2, r0
 800a484:	000b      	movs	r3, r1
 800a486:	0028      	movs	r0, r5
 800a488:	0021      	movs	r1, r4
 800a48a:	f7f7 fd59 	bl	8001f40 <__aeabi_dsub>
 800a48e:	033b      	lsls	r3, r7, #12
 800a490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a492:	0b1b      	lsrs	r3, r3, #12
 800a494:	4333      	orrs	r3, r6
 800a496:	4313      	orrs	r3, r2
 800a498:	0004      	movs	r4, r0
 800a49a:	000d      	movs	r5, r1
 800a49c:	4a38      	ldr	r2, [pc, #224]	; (800a580 <_strtod_l+0xc10>)
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d055      	beq.n	800a54e <_strtod_l+0xbde>
 800a4a2:	4b38      	ldr	r3, [pc, #224]	; (800a584 <_strtod_l+0xc14>)
 800a4a4:	f7f5 ffd8 	bl	8000458 <__aeabi_dcmplt>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d000      	beq.n	800a4ae <_strtod_l+0xb3e>
 800a4ac:	e4d3      	b.n	8009e56 <_strtod_l+0x4e6>
 800a4ae:	0020      	movs	r0, r4
 800a4b0:	0029      	movs	r1, r5
 800a4b2:	4a35      	ldr	r2, [pc, #212]	; (800a588 <_strtod_l+0xc18>)
 800a4b4:	4b30      	ldr	r3, [pc, #192]	; (800a578 <_strtod_l+0xc08>)
 800a4b6:	f7f5 ffe3 	bl	8000480 <__aeabi_dcmpgt>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d100      	bne.n	800a4c0 <_strtod_l+0xb50>
 800a4be:	e77b      	b.n	800a3b8 <_strtod_l+0xa48>
 800a4c0:	e4c9      	b.n	8009e56 <_strtod_l+0x4e6>
 800a4c2:	9b08      	ldr	r3, [sp, #32]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d02b      	beq.n	800a520 <_strtod_l+0xbb0>
 800a4c8:	23d4      	movs	r3, #212	; 0xd4
 800a4ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4cc:	04db      	lsls	r3, r3, #19
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d826      	bhi.n	800a520 <_strtod_l+0xbb0>
 800a4d2:	0028      	movs	r0, r5
 800a4d4:	0021      	movs	r1, r4
 800a4d6:	4a2d      	ldr	r2, [pc, #180]	; (800a58c <_strtod_l+0xc1c>)
 800a4d8:	4b2d      	ldr	r3, [pc, #180]	; (800a590 <_strtod_l+0xc20>)
 800a4da:	f7f5 ffc7 	bl	800046c <__aeabi_dcmple>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d017      	beq.n	800a512 <_strtod_l+0xba2>
 800a4e2:	0028      	movs	r0, r5
 800a4e4:	0021      	movs	r1, r4
 800a4e6:	f7f5 ffdf 	bl	80004a8 <__aeabi_d2uiz>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d100      	bne.n	800a4f0 <_strtod_l+0xb80>
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	f7f8 f93c 	bl	800276c <__aeabi_ui2d>
 800a4f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4f6:	0005      	movs	r5, r0
 800a4f8:	000b      	movs	r3, r1
 800a4fa:	000c      	movs	r4, r1
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	d122      	bne.n	800a546 <_strtod_l+0xbd6>
 800a500:	2280      	movs	r2, #128	; 0x80
 800a502:	0612      	lsls	r2, r2, #24
 800a504:	188b      	adds	r3, r1, r2
 800a506:	9018      	str	r0, [sp, #96]	; 0x60
 800a508:	9319      	str	r3, [sp, #100]	; 0x64
 800a50a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a50c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a50e:	9210      	str	r2, [sp, #64]	; 0x40
 800a510:	9311      	str	r3, [sp, #68]	; 0x44
 800a512:	22d6      	movs	r2, #214	; 0xd6
 800a514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a516:	04d2      	lsls	r2, r2, #19
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	9311      	str	r3, [sp, #68]	; 0x44
 800a520:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a522:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a524:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a526:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a528:	f002 f9a6 	bl	800c878 <__ulp>
 800a52c:	0002      	movs	r2, r0
 800a52e:	000b      	movs	r3, r1
 800a530:	0030      	movs	r0, r6
 800a532:	0039      	movs	r1, r7
 800a534:	f7f7 fa98 	bl	8001a68 <__aeabi_dmul>
 800a538:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a53a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a53c:	f7f6 fb56 	bl	8000bec <__aeabi_dadd>
 800a540:	0006      	movs	r6, r0
 800a542:	000f      	movs	r7, r1
 800a544:	e78f      	b.n	800a466 <_strtod_l+0xaf6>
 800a546:	0002      	movs	r2, r0
 800a548:	9218      	str	r2, [sp, #96]	; 0x60
 800a54a:	9319      	str	r3, [sp, #100]	; 0x64
 800a54c:	e7dd      	b.n	800a50a <_strtod_l+0xb9a>
 800a54e:	4b11      	ldr	r3, [pc, #68]	; (800a594 <_strtod_l+0xc24>)
 800a550:	f7f5 ff82 	bl	8000458 <__aeabi_dcmplt>
 800a554:	e7b1      	b.n	800a4ba <_strtod_l+0xb4a>
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	fff00000 	.word	0xfff00000
 800a55c:	000fffff 	.word	0x000fffff
 800a560:	3ff00000 	.word	0x3ff00000
 800a564:	7ff00000 	.word	0x7ff00000
 800a568:	7fe00000 	.word	0x7fe00000
 800a56c:	fcb00000 	.word	0xfcb00000
 800a570:	7c9fffff 	.word	0x7c9fffff
 800a574:	7fefffff 	.word	0x7fefffff
 800a578:	3fe00000 	.word	0x3fe00000
 800a57c:	bff00000 	.word	0xbff00000
 800a580:	94a03595 	.word	0x94a03595
 800a584:	3fdfffff 	.word	0x3fdfffff
 800a588:	35afe535 	.word	0x35afe535
 800a58c:	ffc00000 	.word	0xffc00000
 800a590:	41dfffff 	.word	0x41dfffff
 800a594:	3fcfffff 	.word	0x3fcfffff

0800a598 <_strtod_r>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <_strtod_r+0xc>)
 800a59c:	f7ff f9e8 	bl	8009970 <_strtod_l>
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	20000098 	.word	0x20000098

0800a5a8 <_strtol_l.constprop.0>:
 800a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	001e      	movs	r6, r3
 800a5ae:	9005      	str	r0, [sp, #20]
 800a5b0:	9101      	str	r1, [sp, #4]
 800a5b2:	9202      	str	r2, [sp, #8]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d045      	beq.n	800a644 <_strtol_l.constprop.0+0x9c>
 800a5b8:	000b      	movs	r3, r1
 800a5ba:	2e24      	cmp	r6, #36	; 0x24
 800a5bc:	d842      	bhi.n	800a644 <_strtol_l.constprop.0+0x9c>
 800a5be:	4a3f      	ldr	r2, [pc, #252]	; (800a6bc <_strtol_l.constprop.0+0x114>)
 800a5c0:	2108      	movs	r1, #8
 800a5c2:	4694      	mov	ip, r2
 800a5c4:	001a      	movs	r2, r3
 800a5c6:	4660      	mov	r0, ip
 800a5c8:	7814      	ldrb	r4, [r2, #0]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	5d00      	ldrb	r0, [r0, r4]
 800a5ce:	001d      	movs	r5, r3
 800a5d0:	0007      	movs	r7, r0
 800a5d2:	400f      	ands	r7, r1
 800a5d4:	4208      	tst	r0, r1
 800a5d6:	d1f5      	bne.n	800a5c4 <_strtol_l.constprop.0+0x1c>
 800a5d8:	2c2d      	cmp	r4, #45	; 0x2d
 800a5da:	d13a      	bne.n	800a652 <_strtol_l.constprop.0+0xaa>
 800a5dc:	2701      	movs	r7, #1
 800a5de:	781c      	ldrb	r4, [r3, #0]
 800a5e0:	1c95      	adds	r5, r2, #2
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	d065      	beq.n	800a6b2 <_strtol_l.constprop.0+0x10a>
 800a5e6:	2e10      	cmp	r6, #16
 800a5e8:	d109      	bne.n	800a5fe <_strtol_l.constprop.0+0x56>
 800a5ea:	2c30      	cmp	r4, #48	; 0x30
 800a5ec:	d107      	bne.n	800a5fe <_strtol_l.constprop.0+0x56>
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	782b      	ldrb	r3, [r5, #0]
 800a5f2:	4393      	bics	r3, r2
 800a5f4:	2b58      	cmp	r3, #88	; 0x58
 800a5f6:	d157      	bne.n	800a6a8 <_strtol_l.constprop.0+0x100>
 800a5f8:	2610      	movs	r6, #16
 800a5fa:	786c      	ldrb	r4, [r5, #1]
 800a5fc:	3502      	adds	r5, #2
 800a5fe:	4b30      	ldr	r3, [pc, #192]	; (800a6c0 <_strtol_l.constprop.0+0x118>)
 800a600:	0031      	movs	r1, r6
 800a602:	18fb      	adds	r3, r7, r3
 800a604:	0018      	movs	r0, r3
 800a606:	9303      	str	r3, [sp, #12]
 800a608:	f7f5 fe20 	bl	800024c <__aeabi_uidivmod>
 800a60c:	2300      	movs	r3, #0
 800a60e:	2201      	movs	r2, #1
 800a610:	4684      	mov	ip, r0
 800a612:	0018      	movs	r0, r3
 800a614:	9104      	str	r1, [sp, #16]
 800a616:	4252      	negs	r2, r2
 800a618:	0021      	movs	r1, r4
 800a61a:	3930      	subs	r1, #48	; 0x30
 800a61c:	2909      	cmp	r1, #9
 800a61e:	d81d      	bhi.n	800a65c <_strtol_l.constprop.0+0xb4>
 800a620:	000c      	movs	r4, r1
 800a622:	42a6      	cmp	r6, r4
 800a624:	dd28      	ble.n	800a678 <_strtol_l.constprop.0+0xd0>
 800a626:	2b00      	cmp	r3, #0
 800a628:	db24      	blt.n	800a674 <_strtol_l.constprop.0+0xcc>
 800a62a:	0013      	movs	r3, r2
 800a62c:	4584      	cmp	ip, r0
 800a62e:	d306      	bcc.n	800a63e <_strtol_l.constprop.0+0x96>
 800a630:	d102      	bne.n	800a638 <_strtol_l.constprop.0+0x90>
 800a632:	9904      	ldr	r1, [sp, #16]
 800a634:	42a1      	cmp	r1, r4
 800a636:	db02      	blt.n	800a63e <_strtol_l.constprop.0+0x96>
 800a638:	2301      	movs	r3, #1
 800a63a:	4370      	muls	r0, r6
 800a63c:	1820      	adds	r0, r4, r0
 800a63e:	782c      	ldrb	r4, [r5, #0]
 800a640:	3501      	adds	r5, #1
 800a642:	e7e9      	b.n	800a618 <_strtol_l.constprop.0+0x70>
 800a644:	f7fe fa10 	bl	8008a68 <__errno>
 800a648:	2316      	movs	r3, #22
 800a64a:	6003      	str	r3, [r0, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	b007      	add	sp, #28
 800a650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a652:	2c2b      	cmp	r4, #43	; 0x2b
 800a654:	d1c5      	bne.n	800a5e2 <_strtol_l.constprop.0+0x3a>
 800a656:	781c      	ldrb	r4, [r3, #0]
 800a658:	1c95      	adds	r5, r2, #2
 800a65a:	e7c2      	b.n	800a5e2 <_strtol_l.constprop.0+0x3a>
 800a65c:	0021      	movs	r1, r4
 800a65e:	3941      	subs	r1, #65	; 0x41
 800a660:	2919      	cmp	r1, #25
 800a662:	d801      	bhi.n	800a668 <_strtol_l.constprop.0+0xc0>
 800a664:	3c37      	subs	r4, #55	; 0x37
 800a666:	e7dc      	b.n	800a622 <_strtol_l.constprop.0+0x7a>
 800a668:	0021      	movs	r1, r4
 800a66a:	3961      	subs	r1, #97	; 0x61
 800a66c:	2919      	cmp	r1, #25
 800a66e:	d803      	bhi.n	800a678 <_strtol_l.constprop.0+0xd0>
 800a670:	3c57      	subs	r4, #87	; 0x57
 800a672:	e7d6      	b.n	800a622 <_strtol_l.constprop.0+0x7a>
 800a674:	0013      	movs	r3, r2
 800a676:	e7e2      	b.n	800a63e <_strtol_l.constprop.0+0x96>
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da09      	bge.n	800a690 <_strtol_l.constprop.0+0xe8>
 800a67c:	2322      	movs	r3, #34	; 0x22
 800a67e:	9a05      	ldr	r2, [sp, #20]
 800a680:	9803      	ldr	r0, [sp, #12]
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0e1      	beq.n	800a64e <_strtol_l.constprop.0+0xa6>
 800a68a:	1e6b      	subs	r3, r5, #1
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	e007      	b.n	800a6a0 <_strtol_l.constprop.0+0xf8>
 800a690:	2f00      	cmp	r7, #0
 800a692:	d000      	beq.n	800a696 <_strtol_l.constprop.0+0xee>
 800a694:	4240      	negs	r0, r0
 800a696:	9a02      	ldr	r2, [sp, #8]
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d0d8      	beq.n	800a64e <_strtol_l.constprop.0+0xa6>
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f4      	bne.n	800a68a <_strtol_l.constprop.0+0xe2>
 800a6a0:	9b02      	ldr	r3, [sp, #8]
 800a6a2:	9a01      	ldr	r2, [sp, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	e7d2      	b.n	800a64e <_strtol_l.constprop.0+0xa6>
 800a6a8:	2430      	movs	r4, #48	; 0x30
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d1a7      	bne.n	800a5fe <_strtol_l.constprop.0+0x56>
 800a6ae:	3608      	adds	r6, #8
 800a6b0:	e7a5      	b.n	800a5fe <_strtol_l.constprop.0+0x56>
 800a6b2:	2c30      	cmp	r4, #48	; 0x30
 800a6b4:	d09b      	beq.n	800a5ee <_strtol_l.constprop.0+0x46>
 800a6b6:	260a      	movs	r6, #10
 800a6b8:	e7a1      	b.n	800a5fe <_strtol_l.constprop.0+0x56>
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	0800d891 	.word	0x0800d891
 800a6c0:	7fffffff 	.word	0x7fffffff

0800a6c4 <_strtol_r>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	f7ff ff6f 	bl	800a5a8 <_strtol_l.constprop.0>
 800a6ca:	bd10      	pop	{r4, pc}

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	0005      	movs	r5, r0
 800a6d0:	000e      	movs	r6, r1
 800a6d2:	0014      	movs	r4, r2
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d004      	beq.n	800a6e2 <__swbuf_r+0x16>
 800a6d8:	6983      	ldr	r3, [r0, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <__swbuf_r+0x16>
 800a6de:	f001 f897 	bl	800b810 <__sinit>
 800a6e2:	4b22      	ldr	r3, [pc, #136]	; (800a76c <__swbuf_r+0xa0>)
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	d12e      	bne.n	800a746 <__swbuf_r+0x7a>
 800a6e8:	686c      	ldr	r4, [r5, #4]
 800a6ea:	69a3      	ldr	r3, [r4, #24]
 800a6ec:	60a3      	str	r3, [r4, #8]
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	071b      	lsls	r3, r3, #28
 800a6f2:	d532      	bpl.n	800a75a <__swbuf_r+0x8e>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d02f      	beq.n	800a75a <__swbuf_r+0x8e>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6922      	ldr	r2, [r4, #16]
 800a6fe:	b2f7      	uxtb	r7, r6
 800a700:	1a98      	subs	r0, r3, r2
 800a702:	6963      	ldr	r3, [r4, #20]
 800a704:	b2f6      	uxtb	r6, r6
 800a706:	4283      	cmp	r3, r0
 800a708:	dc05      	bgt.n	800a716 <__swbuf_r+0x4a>
 800a70a:	0021      	movs	r1, r4
 800a70c:	0028      	movs	r0, r5
 800a70e:	f000 ffdd 	bl	800b6cc <_fflush_r>
 800a712:	2800      	cmp	r0, #0
 800a714:	d127      	bne.n	800a766 <__swbuf_r+0x9a>
 800a716:	68a3      	ldr	r3, [r4, #8]
 800a718:	3001      	adds	r0, #1
 800a71a:	3b01      	subs	r3, #1
 800a71c:	60a3      	str	r3, [r4, #8]
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	6022      	str	r2, [r4, #0]
 800a724:	701f      	strb	r7, [r3, #0]
 800a726:	6963      	ldr	r3, [r4, #20]
 800a728:	4283      	cmp	r3, r0
 800a72a:	d004      	beq.n	800a736 <__swbuf_r+0x6a>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	07db      	lsls	r3, r3, #31
 800a730:	d507      	bpl.n	800a742 <__swbuf_r+0x76>
 800a732:	2e0a      	cmp	r6, #10
 800a734:	d105      	bne.n	800a742 <__swbuf_r+0x76>
 800a736:	0021      	movs	r1, r4
 800a738:	0028      	movs	r0, r5
 800a73a:	f000 ffc7 	bl	800b6cc <_fflush_r>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d111      	bne.n	800a766 <__swbuf_r+0x9a>
 800a742:	0030      	movs	r0, r6
 800a744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a746:	4b0a      	ldr	r3, [pc, #40]	; (800a770 <__swbuf_r+0xa4>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	d101      	bne.n	800a750 <__swbuf_r+0x84>
 800a74c:	68ac      	ldr	r4, [r5, #8]
 800a74e:	e7cc      	b.n	800a6ea <__swbuf_r+0x1e>
 800a750:	4b08      	ldr	r3, [pc, #32]	; (800a774 <__swbuf_r+0xa8>)
 800a752:	429c      	cmp	r4, r3
 800a754:	d1c9      	bne.n	800a6ea <__swbuf_r+0x1e>
 800a756:	68ec      	ldr	r4, [r5, #12]
 800a758:	e7c7      	b.n	800a6ea <__swbuf_r+0x1e>
 800a75a:	0021      	movs	r1, r4
 800a75c:	0028      	movs	r0, r5
 800a75e:	f000 f80b 	bl	800a778 <__swsetup_r>
 800a762:	2800      	cmp	r0, #0
 800a764:	d0c9      	beq.n	800a6fa <__swbuf_r+0x2e>
 800a766:	2601      	movs	r6, #1
 800a768:	4276      	negs	r6, r6
 800a76a:	e7ea      	b.n	800a742 <__swbuf_r+0x76>
 800a76c:	0800da44 	.word	0x0800da44
 800a770:	0800da64 	.word	0x0800da64
 800a774:	0800da24 	.word	0x0800da24

0800a778 <__swsetup_r>:
 800a778:	4b37      	ldr	r3, [pc, #220]	; (800a858 <__swsetup_r+0xe0>)
 800a77a:	b570      	push	{r4, r5, r6, lr}
 800a77c:	681d      	ldr	r5, [r3, #0]
 800a77e:	0006      	movs	r6, r0
 800a780:	000c      	movs	r4, r1
 800a782:	2d00      	cmp	r5, #0
 800a784:	d005      	beq.n	800a792 <__swsetup_r+0x1a>
 800a786:	69ab      	ldr	r3, [r5, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <__swsetup_r+0x1a>
 800a78c:	0028      	movs	r0, r5
 800a78e:	f001 f83f 	bl	800b810 <__sinit>
 800a792:	4b32      	ldr	r3, [pc, #200]	; (800a85c <__swsetup_r+0xe4>)
 800a794:	429c      	cmp	r4, r3
 800a796:	d10f      	bne.n	800a7b8 <__swsetup_r+0x40>
 800a798:	686c      	ldr	r4, [r5, #4]
 800a79a:	230c      	movs	r3, #12
 800a79c:	5ee2      	ldrsh	r2, [r4, r3]
 800a79e:	b293      	uxth	r3, r2
 800a7a0:	0711      	lsls	r1, r2, #28
 800a7a2:	d42d      	bmi.n	800a800 <__swsetup_r+0x88>
 800a7a4:	06d9      	lsls	r1, r3, #27
 800a7a6:	d411      	bmi.n	800a7cc <__swsetup_r+0x54>
 800a7a8:	2309      	movs	r3, #9
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	6033      	str	r3, [r6, #0]
 800a7ae:	3337      	adds	r3, #55	; 0x37
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	4240      	negs	r0, r0
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	4b29      	ldr	r3, [pc, #164]	; (800a860 <__swsetup_r+0xe8>)
 800a7ba:	429c      	cmp	r4, r3
 800a7bc:	d101      	bne.n	800a7c2 <__swsetup_r+0x4a>
 800a7be:	68ac      	ldr	r4, [r5, #8]
 800a7c0:	e7eb      	b.n	800a79a <__swsetup_r+0x22>
 800a7c2:	4b28      	ldr	r3, [pc, #160]	; (800a864 <__swsetup_r+0xec>)
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	d1e8      	bne.n	800a79a <__swsetup_r+0x22>
 800a7c8:	68ec      	ldr	r4, [r5, #12]
 800a7ca:	e7e6      	b.n	800a79a <__swsetup_r+0x22>
 800a7cc:	075b      	lsls	r3, r3, #29
 800a7ce:	d513      	bpl.n	800a7f8 <__swsetup_r+0x80>
 800a7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	d008      	beq.n	800a7e8 <__swsetup_r+0x70>
 800a7d6:	0023      	movs	r3, r4
 800a7d8:	3344      	adds	r3, #68	; 0x44
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	d002      	beq.n	800a7e4 <__swsetup_r+0x6c>
 800a7de:	0030      	movs	r0, r6
 800a7e0:	f002 f9bc 	bl	800cb5c <_free_r>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6363      	str	r3, [r4, #52]	; 0x34
 800a7e8:	2224      	movs	r2, #36	; 0x24
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	4393      	bics	r3, r2
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6063      	str	r3, [r4, #4]
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	89a2      	ldrh	r2, [r4, #12]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <__swsetup_r+0xa6>
 800a806:	21a0      	movs	r1, #160	; 0xa0
 800a808:	2280      	movs	r2, #128	; 0x80
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	0089      	lsls	r1, r1, #2
 800a80e:	0092      	lsls	r2, r2, #2
 800a810:	400b      	ands	r3, r1
 800a812:	4293      	cmp	r3, r2
 800a814:	d003      	beq.n	800a81e <__swsetup_r+0xa6>
 800a816:	0021      	movs	r1, r4
 800a818:	0030      	movs	r0, r6
 800a81a:	f001 fc3d 	bl	800c098 <__smakebuf_r>
 800a81e:	220c      	movs	r2, #12
 800a820:	5ea3      	ldrsh	r3, [r4, r2]
 800a822:	2001      	movs	r0, #1
 800a824:	001a      	movs	r2, r3
 800a826:	b299      	uxth	r1, r3
 800a828:	4002      	ands	r2, r0
 800a82a:	4203      	tst	r3, r0
 800a82c:	d00f      	beq.n	800a84e <__swsetup_r+0xd6>
 800a82e:	2200      	movs	r2, #0
 800a830:	60a2      	str	r2, [r4, #8]
 800a832:	6962      	ldr	r2, [r4, #20]
 800a834:	4252      	negs	r2, r2
 800a836:	61a2      	str	r2, [r4, #24]
 800a838:	2000      	movs	r0, #0
 800a83a:	6922      	ldr	r2, [r4, #16]
 800a83c:	4282      	cmp	r2, r0
 800a83e:	d1ba      	bne.n	800a7b6 <__swsetup_r+0x3e>
 800a840:	060a      	lsls	r2, r1, #24
 800a842:	d5b8      	bpl.n	800a7b6 <__swsetup_r+0x3e>
 800a844:	2240      	movs	r2, #64	; 0x40
 800a846:	4313      	orrs	r3, r2
 800a848:	81a3      	strh	r3, [r4, #12]
 800a84a:	3801      	subs	r0, #1
 800a84c:	e7b3      	b.n	800a7b6 <__swsetup_r+0x3e>
 800a84e:	0788      	lsls	r0, r1, #30
 800a850:	d400      	bmi.n	800a854 <__swsetup_r+0xdc>
 800a852:	6962      	ldr	r2, [r4, #20]
 800a854:	60a2      	str	r2, [r4, #8]
 800a856:	e7ef      	b.n	800a838 <__swsetup_r+0xc0>
 800a858:	20000030 	.word	0x20000030
 800a85c:	0800da44 	.word	0x0800da44
 800a860:	0800da64 	.word	0x0800da64
 800a864:	0800da24 	.word	0x0800da24

0800a868 <quorem>:
 800a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a86a:	0006      	movs	r6, r0
 800a86c:	690b      	ldr	r3, [r1, #16]
 800a86e:	6932      	ldr	r2, [r6, #16]
 800a870:	b087      	sub	sp, #28
 800a872:	2000      	movs	r0, #0
 800a874:	9103      	str	r1, [sp, #12]
 800a876:	429a      	cmp	r2, r3
 800a878:	db65      	blt.n	800a946 <quorem+0xde>
 800a87a:	3b01      	subs	r3, #1
 800a87c:	009c      	lsls	r4, r3, #2
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	000b      	movs	r3, r1
 800a882:	3314      	adds	r3, #20
 800a884:	9305      	str	r3, [sp, #20]
 800a886:	191b      	adds	r3, r3, r4
 800a888:	9304      	str	r3, [sp, #16]
 800a88a:	0033      	movs	r3, r6
 800a88c:	3314      	adds	r3, #20
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	191c      	adds	r4, r3, r4
 800a892:	9b04      	ldr	r3, [sp, #16]
 800a894:	6827      	ldr	r7, [r4, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	0038      	movs	r0, r7
 800a89a:	1c5d      	adds	r5, r3, #1
 800a89c:	0029      	movs	r1, r5
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	f7f5 fc4e 	bl	8000140 <__udivsi3>
 800a8a4:	9001      	str	r0, [sp, #4]
 800a8a6:	42af      	cmp	r7, r5
 800a8a8:	d324      	bcc.n	800a8f4 <quorem+0x8c>
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	46ac      	mov	ip, r5
 800a8ae:	9802      	ldr	r0, [sp, #8]
 800a8b0:	9f05      	ldr	r7, [sp, #20]
 800a8b2:	cf08      	ldmia	r7!, {r3}
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	b299      	uxth	r1, r3
 800a8b8:	4351      	muls	r1, r2
 800a8ba:	0c1b      	lsrs	r3, r3, #16
 800a8bc:	4353      	muls	r3, r2
 800a8be:	1949      	adds	r1, r1, r5
 800a8c0:	0c0a      	lsrs	r2, r1, #16
 800a8c2:	189b      	adds	r3, r3, r2
 800a8c4:	6802      	ldr	r2, [r0, #0]
 800a8c6:	b289      	uxth	r1, r1
 800a8c8:	b292      	uxth	r2, r2
 800a8ca:	4462      	add	r2, ip
 800a8cc:	1a52      	subs	r2, r2, r1
 800a8ce:	6801      	ldr	r1, [r0, #0]
 800a8d0:	0c1d      	lsrs	r5, r3, #16
 800a8d2:	0c09      	lsrs	r1, r1, #16
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	1acb      	subs	r3, r1, r3
 800a8d8:	1411      	asrs	r1, r2, #16
 800a8da:	185b      	adds	r3, r3, r1
 800a8dc:	1419      	asrs	r1, r3, #16
 800a8de:	b292      	uxth	r2, r2
 800a8e0:	041b      	lsls	r3, r3, #16
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	468c      	mov	ip, r1
 800a8e8:	c004      	stmia	r0!, {r2}
 800a8ea:	42bb      	cmp	r3, r7
 800a8ec:	d2e1      	bcs.n	800a8b2 <quorem+0x4a>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d030      	beq.n	800a956 <quorem+0xee>
 800a8f4:	0030      	movs	r0, r6
 800a8f6:	9903      	ldr	r1, [sp, #12]
 800a8f8:	f001 ff0a 	bl	800c710 <__mcmp>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	db21      	blt.n	800a944 <quorem+0xdc>
 800a900:	0030      	movs	r0, r6
 800a902:	2400      	movs	r4, #0
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	9903      	ldr	r1, [sp, #12]
 800a908:	3301      	adds	r3, #1
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	3014      	adds	r0, #20
 800a90e:	3114      	adds	r1, #20
 800a910:	6803      	ldr	r3, [r0, #0]
 800a912:	c920      	ldmia	r1!, {r5}
 800a914:	b29a      	uxth	r2, r3
 800a916:	1914      	adds	r4, r2, r4
 800a918:	b2aa      	uxth	r2, r5
 800a91a:	1aa2      	subs	r2, r4, r2
 800a91c:	0c1b      	lsrs	r3, r3, #16
 800a91e:	0c2d      	lsrs	r5, r5, #16
 800a920:	1414      	asrs	r4, r2, #16
 800a922:	1b5b      	subs	r3, r3, r5
 800a924:	191b      	adds	r3, r3, r4
 800a926:	141c      	asrs	r4, r3, #16
 800a928:	b292      	uxth	r2, r2
 800a92a:	041b      	lsls	r3, r3, #16
 800a92c:	4313      	orrs	r3, r2
 800a92e:	c008      	stmia	r0!, {r3}
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	428b      	cmp	r3, r1
 800a934:	d2ec      	bcs.n	800a910 <quorem+0xa8>
 800a936:	9b00      	ldr	r3, [sp, #0]
 800a938:	9a02      	ldr	r2, [sp, #8]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	18d3      	adds	r3, r2, r3
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	2a00      	cmp	r2, #0
 800a942:	d015      	beq.n	800a970 <quorem+0x108>
 800a944:	9801      	ldr	r0, [sp, #4]
 800a946:	b007      	add	sp, #28
 800a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <quorem+0xf6>
 800a950:	9b00      	ldr	r3, [sp, #0]
 800a952:	3b01      	subs	r3, #1
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	3c04      	subs	r4, #4
 800a95a:	42a3      	cmp	r3, r4
 800a95c:	d3f5      	bcc.n	800a94a <quorem+0xe2>
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	6133      	str	r3, [r6, #16]
 800a962:	e7c7      	b.n	800a8f4 <quorem+0x8c>
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	2a00      	cmp	r2, #0
 800a968:	d106      	bne.n	800a978 <quorem+0x110>
 800a96a:	9a00      	ldr	r2, [sp, #0]
 800a96c:	3a01      	subs	r2, #1
 800a96e:	9200      	str	r2, [sp, #0]
 800a970:	9a02      	ldr	r2, [sp, #8]
 800a972:	3b04      	subs	r3, #4
 800a974:	429a      	cmp	r2, r3
 800a976:	d3f5      	bcc.n	800a964 <quorem+0xfc>
 800a978:	9b00      	ldr	r3, [sp, #0]
 800a97a:	6133      	str	r3, [r6, #16]
 800a97c:	e7e2      	b.n	800a944 <quorem+0xdc>
	...

0800a980 <_dtoa_r>:
 800a980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a982:	b09d      	sub	sp, #116	; 0x74
 800a984:	9202      	str	r2, [sp, #8]
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	9b02      	ldr	r3, [sp, #8]
 800a98a:	9c03      	ldr	r4, [sp, #12]
 800a98c:	9308      	str	r3, [sp, #32]
 800a98e:	9409      	str	r4, [sp, #36]	; 0x24
 800a990:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a992:	0007      	movs	r7, r0
 800a994:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a996:	2c00      	cmp	r4, #0
 800a998:	d10e      	bne.n	800a9b8 <_dtoa_r+0x38>
 800a99a:	2010      	movs	r0, #16
 800a99c:	f001 fbc0 	bl	800c120 <malloc>
 800a9a0:	1e02      	subs	r2, r0, #0
 800a9a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a9a4:	d104      	bne.n	800a9b0 <_dtoa_r+0x30>
 800a9a6:	21ea      	movs	r1, #234	; 0xea
 800a9a8:	4bc7      	ldr	r3, [pc, #796]	; (800acc8 <_dtoa_r+0x348>)
 800a9aa:	48c8      	ldr	r0, [pc, #800]	; (800accc <_dtoa_r+0x34c>)
 800a9ac:	f002 fd14 	bl	800d3d8 <__assert_func>
 800a9b0:	6044      	str	r4, [r0, #4]
 800a9b2:	6084      	str	r4, [r0, #8]
 800a9b4:	6004      	str	r4, [r0, #0]
 800a9b6:	60c4      	str	r4, [r0, #12]
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	6819      	ldr	r1, [r3, #0]
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d00a      	beq.n	800a9d6 <_dtoa_r+0x56>
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4093      	lsls	r3, r2
 800a9c6:	604a      	str	r2, [r1, #4]
 800a9c8:	608b      	str	r3, [r1, #8]
 800a9ca:	0038      	movs	r0, r7
 800a9cc:	f001 fc14 	bl	800c1f8 <_Bfree>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	da20      	bge.n	800aa1e <_dtoa_r+0x9e>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	085b      	lsrs	r3, r3, #1
 800a9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a9ea:	4bb9      	ldr	r3, [pc, #740]	; (800acd0 <_dtoa_r+0x350>)
 800a9ec:	4ab8      	ldr	r2, [pc, #736]	; (800acd0 <_dtoa_r+0x350>)
 800a9ee:	402b      	ands	r3, r5
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d117      	bne.n	800aa24 <_dtoa_r+0xa4>
 800a9f4:	4bb7      	ldr	r3, [pc, #732]	; (800acd4 <_dtoa_r+0x354>)
 800a9f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a9f8:	0328      	lsls	r0, r5, #12
 800a9fa:	6013      	str	r3, [r2, #0]
 800a9fc:	9b02      	ldr	r3, [sp, #8]
 800a9fe:	0b00      	lsrs	r0, r0, #12
 800aa00:	4318      	orrs	r0, r3
 800aa02:	d101      	bne.n	800aa08 <_dtoa_r+0x88>
 800aa04:	f000 fdbf 	bl	800b586 <_dtoa_r+0xc06>
 800aa08:	48b3      	ldr	r0, [pc, #716]	; (800acd8 <_dtoa_r+0x358>)
 800aa0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa0c:	9006      	str	r0, [sp, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <_dtoa_r+0x98>
 800aa12:	4bb2      	ldr	r3, [pc, #712]	; (800acdc <_dtoa_r+0x35c>)
 800aa14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	9806      	ldr	r0, [sp, #24]
 800aa1a:	b01d      	add	sp, #116	; 0x74
 800aa1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa1e:	2300      	movs	r3, #0
 800aa20:	602b      	str	r3, [r5, #0]
 800aa22:	e7e1      	b.n	800a9e8 <_dtoa_r+0x68>
 800aa24:	9b08      	ldr	r3, [sp, #32]
 800aa26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aa28:	9312      	str	r3, [sp, #72]	; 0x48
 800aa2a:	9413      	str	r4, [sp, #76]	; 0x4c
 800aa2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa30:	2200      	movs	r2, #0
 800aa32:	2300      	movs	r3, #0
 800aa34:	f7f5 fd0a 	bl	800044c <__aeabi_dcmpeq>
 800aa38:	1e04      	subs	r4, r0, #0
 800aa3a:	d009      	beq.n	800aa50 <_dtoa_r+0xd0>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	4ba7      	ldr	r3, [pc, #668]	; (800ace0 <_dtoa_r+0x360>)
 800aa44:	9306      	str	r3, [sp, #24]
 800aa46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0e5      	beq.n	800aa18 <_dtoa_r+0x98>
 800aa4c:	4ba5      	ldr	r3, [pc, #660]	; (800ace4 <_dtoa_r+0x364>)
 800aa4e:	e7e1      	b.n	800aa14 <_dtoa_r+0x94>
 800aa50:	ab1a      	add	r3, sp, #104	; 0x68
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	ab1b      	add	r3, sp, #108	; 0x6c
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	0038      	movs	r0, r7
 800aa5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa5e:	f001 ff7f 	bl	800c960 <__d2b>
 800aa62:	006e      	lsls	r6, r5, #1
 800aa64:	9005      	str	r0, [sp, #20]
 800aa66:	0d76      	lsrs	r6, r6, #21
 800aa68:	d100      	bne.n	800aa6c <_dtoa_r+0xec>
 800aa6a:	e07c      	b.n	800ab66 <_dtoa_r+0x1e6>
 800aa6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa72:	4a9d      	ldr	r2, [pc, #628]	; (800ace8 <_dtoa_r+0x368>)
 800aa74:	031b      	lsls	r3, r3, #12
 800aa76:	0b1b      	lsrs	r3, r3, #12
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	0011      	movs	r1, r2
 800aa7c:	4b9b      	ldr	r3, [pc, #620]	; (800acec <_dtoa_r+0x36c>)
 800aa7e:	9418      	str	r4, [sp, #96]	; 0x60
 800aa80:	18f6      	adds	r6, r6, r3
 800aa82:	2200      	movs	r2, #0
 800aa84:	4b9a      	ldr	r3, [pc, #616]	; (800acf0 <_dtoa_r+0x370>)
 800aa86:	f7f7 fa5b 	bl	8001f40 <__aeabi_dsub>
 800aa8a:	4a9a      	ldr	r2, [pc, #616]	; (800acf4 <_dtoa_r+0x374>)
 800aa8c:	4b9a      	ldr	r3, [pc, #616]	; (800acf8 <_dtoa_r+0x378>)
 800aa8e:	f7f6 ffeb 	bl	8001a68 <__aeabi_dmul>
 800aa92:	4a9a      	ldr	r2, [pc, #616]	; (800acfc <_dtoa_r+0x37c>)
 800aa94:	4b9a      	ldr	r3, [pc, #616]	; (800ad00 <_dtoa_r+0x380>)
 800aa96:	f7f6 f8a9 	bl	8000bec <__aeabi_dadd>
 800aa9a:	0004      	movs	r4, r0
 800aa9c:	0030      	movs	r0, r6
 800aa9e:	000d      	movs	r5, r1
 800aaa0:	f7f7 fe34 	bl	800270c <__aeabi_i2d>
 800aaa4:	4a97      	ldr	r2, [pc, #604]	; (800ad04 <_dtoa_r+0x384>)
 800aaa6:	4b98      	ldr	r3, [pc, #608]	; (800ad08 <_dtoa_r+0x388>)
 800aaa8:	f7f6 ffde 	bl	8001a68 <__aeabi_dmul>
 800aaac:	0002      	movs	r2, r0
 800aaae:	000b      	movs	r3, r1
 800aab0:	0020      	movs	r0, r4
 800aab2:	0029      	movs	r1, r5
 800aab4:	f7f6 f89a 	bl	8000bec <__aeabi_dadd>
 800aab8:	0004      	movs	r4, r0
 800aaba:	000d      	movs	r5, r1
 800aabc:	f7f7 fdf0 	bl	80026a0 <__aeabi_d2iz>
 800aac0:	2200      	movs	r2, #0
 800aac2:	9002      	str	r0, [sp, #8]
 800aac4:	2300      	movs	r3, #0
 800aac6:	0020      	movs	r0, r4
 800aac8:	0029      	movs	r1, r5
 800aaca:	f7f5 fcc5 	bl	8000458 <__aeabi_dcmplt>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d00b      	beq.n	800aaea <_dtoa_r+0x16a>
 800aad2:	9802      	ldr	r0, [sp, #8]
 800aad4:	f7f7 fe1a 	bl	800270c <__aeabi_i2d>
 800aad8:	002b      	movs	r3, r5
 800aada:	0022      	movs	r2, r4
 800aadc:	f7f5 fcb6 	bl	800044c <__aeabi_dcmpeq>
 800aae0:	4243      	negs	r3, r0
 800aae2:	4158      	adcs	r0, r3
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	1a1b      	subs	r3, r3, r0
 800aae8:	9302      	str	r3, [sp, #8]
 800aaea:	2301      	movs	r3, #1
 800aaec:	9316      	str	r3, [sp, #88]	; 0x58
 800aaee:	9b02      	ldr	r3, [sp, #8]
 800aaf0:	2b16      	cmp	r3, #22
 800aaf2:	d80f      	bhi.n	800ab14 <_dtoa_r+0x194>
 800aaf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aaf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aaf8:	00da      	lsls	r2, r3, #3
 800aafa:	4b84      	ldr	r3, [pc, #528]	; (800ad0c <_dtoa_r+0x38c>)
 800aafc:	189b      	adds	r3, r3, r2
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f7f5 fca9 	bl	8000458 <__aeabi_dcmplt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d049      	beq.n	800ab9e <_dtoa_r+0x21e>
 800ab0a:	9b02      	ldr	r3, [sp, #8]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	9302      	str	r3, [sp, #8]
 800ab10:	2300      	movs	r3, #0
 800ab12:	9316      	str	r3, [sp, #88]	; 0x58
 800ab14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ab16:	1b9e      	subs	r6, r3, r6
 800ab18:	2300      	movs	r3, #0
 800ab1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab1c:	0033      	movs	r3, r6
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	930d      	str	r3, [sp, #52]	; 0x34
 800ab22:	d504      	bpl.n	800ab2e <_dtoa_r+0x1ae>
 800ab24:	2301      	movs	r3, #1
 800ab26:	1b9b      	subs	r3, r3, r6
 800ab28:	930a      	str	r3, [sp, #40]	; 0x28
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab2e:	9b02      	ldr	r3, [sp, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	db36      	blt.n	800aba2 <_dtoa_r+0x222>
 800ab34:	9a02      	ldr	r2, [sp, #8]
 800ab36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab38:	4694      	mov	ip, r2
 800ab3a:	4463      	add	r3, ip
 800ab3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab3e:	2300      	movs	r3, #0
 800ab40:	9215      	str	r2, [sp, #84]	; 0x54
 800ab42:	930e      	str	r3, [sp, #56]	; 0x38
 800ab44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab46:	2401      	movs	r4, #1
 800ab48:	2b09      	cmp	r3, #9
 800ab4a:	d864      	bhi.n	800ac16 <_dtoa_r+0x296>
 800ab4c:	2b05      	cmp	r3, #5
 800ab4e:	dd02      	ble.n	800ab56 <_dtoa_r+0x1d6>
 800ab50:	2400      	movs	r4, #0
 800ab52:	3b04      	subs	r3, #4
 800ab54:	9322      	str	r3, [sp, #136]	; 0x88
 800ab56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab58:	1e98      	subs	r0, r3, #2
 800ab5a:	2803      	cmp	r0, #3
 800ab5c:	d864      	bhi.n	800ac28 <_dtoa_r+0x2a8>
 800ab5e:	f7f5 fadb 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ab62:	3829      	.short	0x3829
 800ab64:	5836      	.short	0x5836
 800ab66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ab68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab6a:	189e      	adds	r6, r3, r2
 800ab6c:	4b68      	ldr	r3, [pc, #416]	; (800ad10 <_dtoa_r+0x390>)
 800ab6e:	18f2      	adds	r2, r6, r3
 800ab70:	2a20      	cmp	r2, #32
 800ab72:	dd0f      	ble.n	800ab94 <_dtoa_r+0x214>
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	409d      	lsls	r5, r3
 800ab7a:	4b66      	ldr	r3, [pc, #408]	; (800ad14 <_dtoa_r+0x394>)
 800ab7c:	9802      	ldr	r0, [sp, #8]
 800ab7e:	18f3      	adds	r3, r6, r3
 800ab80:	40d8      	lsrs	r0, r3
 800ab82:	4328      	orrs	r0, r5
 800ab84:	f7f7 fdf2 	bl	800276c <__aeabi_ui2d>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4c63      	ldr	r4, [pc, #396]	; (800ad18 <_dtoa_r+0x398>)
 800ab8c:	3e01      	subs	r6, #1
 800ab8e:	1909      	adds	r1, r1, r4
 800ab90:	9318      	str	r3, [sp, #96]	; 0x60
 800ab92:	e776      	b.n	800aa82 <_dtoa_r+0x102>
 800ab94:	2320      	movs	r3, #32
 800ab96:	9802      	ldr	r0, [sp, #8]
 800ab98:	1a9b      	subs	r3, r3, r2
 800ab9a:	4098      	lsls	r0, r3
 800ab9c:	e7f2      	b.n	800ab84 <_dtoa_r+0x204>
 800ab9e:	9016      	str	r0, [sp, #88]	; 0x58
 800aba0:	e7b8      	b.n	800ab14 <_dtoa_r+0x194>
 800aba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba4:	9a02      	ldr	r2, [sp, #8]
 800aba6:	1a9b      	subs	r3, r3, r2
 800aba8:	930a      	str	r3, [sp, #40]	; 0x28
 800abaa:	4253      	negs	r3, r2
 800abac:	930e      	str	r3, [sp, #56]	; 0x38
 800abae:	2300      	movs	r3, #0
 800abb0:	9315      	str	r3, [sp, #84]	; 0x54
 800abb2:	e7c7      	b.n	800ab44 <_dtoa_r+0x1c4>
 800abb4:	2300      	movs	r3, #0
 800abb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abba:	930c      	str	r3, [sp, #48]	; 0x30
 800abbc:	9307      	str	r3, [sp, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dc13      	bgt.n	800abea <_dtoa_r+0x26a>
 800abc2:	2301      	movs	r3, #1
 800abc4:	001a      	movs	r2, r3
 800abc6:	930c      	str	r3, [sp, #48]	; 0x30
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	9223      	str	r2, [sp, #140]	; 0x8c
 800abcc:	e00d      	b.n	800abea <_dtoa_r+0x26a>
 800abce:	2301      	movs	r3, #1
 800abd0:	e7f1      	b.n	800abb6 <_dtoa_r+0x236>
 800abd2:	2300      	movs	r3, #0
 800abd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800abd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abd8:	4694      	mov	ip, r2
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	4463      	add	r3, ip
 800abde:	930c      	str	r3, [sp, #48]	; 0x30
 800abe0:	3301      	adds	r3, #1
 800abe2:	9307      	str	r3, [sp, #28]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dc00      	bgt.n	800abea <_dtoa_r+0x26a>
 800abe8:	2301      	movs	r3, #1
 800abea:	2200      	movs	r2, #0
 800abec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abee:	6042      	str	r2, [r0, #4]
 800abf0:	3204      	adds	r2, #4
 800abf2:	0015      	movs	r5, r2
 800abf4:	3514      	adds	r5, #20
 800abf6:	6841      	ldr	r1, [r0, #4]
 800abf8:	429d      	cmp	r5, r3
 800abfa:	d919      	bls.n	800ac30 <_dtoa_r+0x2b0>
 800abfc:	0038      	movs	r0, r7
 800abfe:	f001 fab7 	bl	800c170 <_Balloc>
 800ac02:	9006      	str	r0, [sp, #24]
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d117      	bne.n	800ac38 <_dtoa_r+0x2b8>
 800ac08:	21d5      	movs	r1, #213	; 0xd5
 800ac0a:	0002      	movs	r2, r0
 800ac0c:	4b43      	ldr	r3, [pc, #268]	; (800ad1c <_dtoa_r+0x39c>)
 800ac0e:	0049      	lsls	r1, r1, #1
 800ac10:	e6cb      	b.n	800a9aa <_dtoa_r+0x2a>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7de      	b.n	800abd4 <_dtoa_r+0x254>
 800ac16:	2300      	movs	r3, #0
 800ac18:	940f      	str	r4, [sp, #60]	; 0x3c
 800ac1a:	9322      	str	r3, [sp, #136]	; 0x88
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	2200      	movs	r2, #0
 800ac24:	3313      	adds	r3, #19
 800ac26:	e7d0      	b.n	800abca <_dtoa_r+0x24a>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac2c:	3b02      	subs	r3, #2
 800ac2e:	e7f6      	b.n	800ac1e <_dtoa_r+0x29e>
 800ac30:	3101      	adds	r1, #1
 800ac32:	6041      	str	r1, [r0, #4]
 800ac34:	0052      	lsls	r2, r2, #1
 800ac36:	e7dc      	b.n	800abf2 <_dtoa_r+0x272>
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	9a06      	ldr	r2, [sp, #24]
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	9b07      	ldr	r3, [sp, #28]
 800ac40:	2b0e      	cmp	r3, #14
 800ac42:	d900      	bls.n	800ac46 <_dtoa_r+0x2c6>
 800ac44:	e0eb      	b.n	800ae1e <_dtoa_r+0x49e>
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d100      	bne.n	800ac4c <_dtoa_r+0x2cc>
 800ac4a:	e0e8      	b.n	800ae1e <_dtoa_r+0x49e>
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dd68      	ble.n	800ad24 <_dtoa_r+0x3a4>
 800ac52:	001a      	movs	r2, r3
 800ac54:	210f      	movs	r1, #15
 800ac56:	4b2d      	ldr	r3, [pc, #180]	; (800ad0c <_dtoa_r+0x38c>)
 800ac58:	400a      	ands	r2, r1
 800ac5a:	00d2      	lsls	r2, r2, #3
 800ac5c:	189b      	adds	r3, r3, r2
 800ac5e:	681d      	ldr	r5, [r3, #0]
 800ac60:	685e      	ldr	r6, [r3, #4]
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	111c      	asrs	r4, r3, #4
 800ac66:	2302      	movs	r3, #2
 800ac68:	9310      	str	r3, [sp, #64]	; 0x40
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	05db      	lsls	r3, r3, #23
 800ac6e:	d50b      	bpl.n	800ac88 <_dtoa_r+0x308>
 800ac70:	4b2b      	ldr	r3, [pc, #172]	; (800ad20 <_dtoa_r+0x3a0>)
 800ac72:	400c      	ands	r4, r1
 800ac74:	6a1a      	ldr	r2, [r3, #32]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ac7c:	f7f6 faf2 	bl	8001264 <__aeabi_ddiv>
 800ac80:	2303      	movs	r3, #3
 800ac82:	9008      	str	r0, [sp, #32]
 800ac84:	9109      	str	r1, [sp, #36]	; 0x24
 800ac86:	9310      	str	r3, [sp, #64]	; 0x40
 800ac88:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <_dtoa_r+0x3a0>)
 800ac8a:	9314      	str	r3, [sp, #80]	; 0x50
 800ac8c:	2c00      	cmp	r4, #0
 800ac8e:	d108      	bne.n	800aca2 <_dtoa_r+0x322>
 800ac90:	9808      	ldr	r0, [sp, #32]
 800ac92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac94:	002a      	movs	r2, r5
 800ac96:	0033      	movs	r3, r6
 800ac98:	f7f6 fae4 	bl	8001264 <__aeabi_ddiv>
 800ac9c:	9008      	str	r0, [sp, #32]
 800ac9e:	9109      	str	r1, [sp, #36]	; 0x24
 800aca0:	e05c      	b.n	800ad5c <_dtoa_r+0x3dc>
 800aca2:	2301      	movs	r3, #1
 800aca4:	421c      	tst	r4, r3
 800aca6:	d00b      	beq.n	800acc0 <_dtoa_r+0x340>
 800aca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acaa:	0028      	movs	r0, r5
 800acac:	3301      	adds	r3, #1
 800acae:	9310      	str	r3, [sp, #64]	; 0x40
 800acb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acb2:	0031      	movs	r1, r6
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f7f6 fed6 	bl	8001a68 <__aeabi_dmul>
 800acbc:	0005      	movs	r5, r0
 800acbe:	000e      	movs	r6, r1
 800acc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acc2:	1064      	asrs	r4, r4, #1
 800acc4:	3308      	adds	r3, #8
 800acc6:	e7e0      	b.n	800ac8a <_dtoa_r+0x30a>
 800acc8:	0800d99e 	.word	0x0800d99e
 800accc:	0800d9b5 	.word	0x0800d9b5
 800acd0:	7ff00000 	.word	0x7ff00000
 800acd4:	0000270f 	.word	0x0000270f
 800acd8:	0800d99a 	.word	0x0800d99a
 800acdc:	0800d99d 	.word	0x0800d99d
 800ace0:	0800d810 	.word	0x0800d810
 800ace4:	0800d811 	.word	0x0800d811
 800ace8:	3ff00000 	.word	0x3ff00000
 800acec:	fffffc01 	.word	0xfffffc01
 800acf0:	3ff80000 	.word	0x3ff80000
 800acf4:	636f4361 	.word	0x636f4361
 800acf8:	3fd287a7 	.word	0x3fd287a7
 800acfc:	8b60c8b3 	.word	0x8b60c8b3
 800ad00:	3fc68a28 	.word	0x3fc68a28
 800ad04:	509f79fb 	.word	0x509f79fb
 800ad08:	3fd34413 	.word	0x3fd34413
 800ad0c:	0800db88 	.word	0x0800db88
 800ad10:	00000432 	.word	0x00000432
 800ad14:	00000412 	.word	0x00000412
 800ad18:	fe100000 	.word	0xfe100000
 800ad1c:	0800da10 	.word	0x0800da10
 800ad20:	0800db60 	.word	0x0800db60
 800ad24:	2302      	movs	r3, #2
 800ad26:	9310      	str	r3, [sp, #64]	; 0x40
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d016      	beq.n	800ad5c <_dtoa_r+0x3dc>
 800ad2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ad30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ad32:	425c      	negs	r4, r3
 800ad34:	230f      	movs	r3, #15
 800ad36:	4ab6      	ldr	r2, [pc, #728]	; (800b010 <_dtoa_r+0x690>)
 800ad38:	4023      	ands	r3, r4
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	18d3      	adds	r3, r2, r3
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f7f6 fe91 	bl	8001a68 <__aeabi_dmul>
 800ad46:	2601      	movs	r6, #1
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9008      	str	r0, [sp, #32]
 800ad4c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad4e:	4db1      	ldr	r5, [pc, #708]	; (800b014 <_dtoa_r+0x694>)
 800ad50:	1124      	asrs	r4, r4, #4
 800ad52:	2c00      	cmp	r4, #0
 800ad54:	d000      	beq.n	800ad58 <_dtoa_r+0x3d8>
 800ad56:	e094      	b.n	800ae82 <_dtoa_r+0x502>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d19f      	bne.n	800ac9c <_dtoa_r+0x31c>
 800ad5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d100      	bne.n	800ad64 <_dtoa_r+0x3e4>
 800ad62:	e09b      	b.n	800ae9c <_dtoa_r+0x51c>
 800ad64:	9c08      	ldr	r4, [sp, #32]
 800ad66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad68:	2200      	movs	r2, #0
 800ad6a:	0020      	movs	r0, r4
 800ad6c:	0029      	movs	r1, r5
 800ad6e:	4baa      	ldr	r3, [pc, #680]	; (800b018 <_dtoa_r+0x698>)
 800ad70:	f7f5 fb72 	bl	8000458 <__aeabi_dcmplt>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d100      	bne.n	800ad7a <_dtoa_r+0x3fa>
 800ad78:	e090      	b.n	800ae9c <_dtoa_r+0x51c>
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d100      	bne.n	800ad82 <_dtoa_r+0x402>
 800ad80:	e08c      	b.n	800ae9c <_dtoa_r+0x51c>
 800ad82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dd46      	ble.n	800ae16 <_dtoa_r+0x496>
 800ad88:	9b02      	ldr	r3, [sp, #8]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	0020      	movs	r0, r4
 800ad8e:	0029      	movs	r1, r5
 800ad90:	1e5e      	subs	r6, r3, #1
 800ad92:	4ba2      	ldr	r3, [pc, #648]	; (800b01c <_dtoa_r+0x69c>)
 800ad94:	f7f6 fe68 	bl	8001a68 <__aeabi_dmul>
 800ad98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad9a:	9008      	str	r0, [sp, #32]
 800ad9c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad9e:	3301      	adds	r3, #1
 800ada0:	9310      	str	r3, [sp, #64]	; 0x40
 800ada2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ada4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ada6:	9c08      	ldr	r4, [sp, #32]
 800ada8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800adaa:	9314      	str	r3, [sp, #80]	; 0x50
 800adac:	f7f7 fcae 	bl	800270c <__aeabi_i2d>
 800adb0:	0022      	movs	r2, r4
 800adb2:	002b      	movs	r3, r5
 800adb4:	f7f6 fe58 	bl	8001a68 <__aeabi_dmul>
 800adb8:	2200      	movs	r2, #0
 800adba:	4b99      	ldr	r3, [pc, #612]	; (800b020 <_dtoa_r+0x6a0>)
 800adbc:	f7f5 ff16 	bl	8000bec <__aeabi_dadd>
 800adc0:	9010      	str	r0, [sp, #64]	; 0x40
 800adc2:	9111      	str	r1, [sp, #68]	; 0x44
 800adc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adc8:	9208      	str	r2, [sp, #32]
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
 800adcc:	4a95      	ldr	r2, [pc, #596]	; (800b024 <_dtoa_r+0x6a4>)
 800adce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800add0:	4694      	mov	ip, r2
 800add2:	4463      	add	r3, ip
 800add4:	9317      	str	r3, [sp, #92]	; 0x5c
 800add6:	9309      	str	r3, [sp, #36]	; 0x24
 800add8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adda:	2b00      	cmp	r3, #0
 800addc:	d161      	bne.n	800aea2 <_dtoa_r+0x522>
 800adde:	2200      	movs	r2, #0
 800ade0:	0020      	movs	r0, r4
 800ade2:	0029      	movs	r1, r5
 800ade4:	4b90      	ldr	r3, [pc, #576]	; (800b028 <_dtoa_r+0x6a8>)
 800ade6:	f7f7 f8ab 	bl	8001f40 <__aeabi_dsub>
 800adea:	9a08      	ldr	r2, [sp, #32]
 800adec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adee:	0004      	movs	r4, r0
 800adf0:	000d      	movs	r5, r1
 800adf2:	f7f5 fb45 	bl	8000480 <__aeabi_dcmpgt>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d000      	beq.n	800adfc <_dtoa_r+0x47c>
 800adfa:	e2af      	b.n	800b35c <_dtoa_r+0x9dc>
 800adfc:	488b      	ldr	r0, [pc, #556]	; (800b02c <_dtoa_r+0x6ac>)
 800adfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae00:	4684      	mov	ip, r0
 800ae02:	4461      	add	r1, ip
 800ae04:	000b      	movs	r3, r1
 800ae06:	0020      	movs	r0, r4
 800ae08:	0029      	movs	r1, r5
 800ae0a:	9a08      	ldr	r2, [sp, #32]
 800ae0c:	f7f5 fb24 	bl	8000458 <__aeabi_dcmplt>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d000      	beq.n	800ae16 <_dtoa_r+0x496>
 800ae14:	e29f      	b.n	800b356 <_dtoa_r+0x9d6>
 800ae16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ae1a:	9308      	str	r3, [sp, #32]
 800ae1c:	9409      	str	r4, [sp, #36]	; 0x24
 800ae1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	da00      	bge.n	800ae26 <_dtoa_r+0x4a6>
 800ae24:	e172      	b.n	800b10c <_dtoa_r+0x78c>
 800ae26:	9a02      	ldr	r2, [sp, #8]
 800ae28:	2a0e      	cmp	r2, #14
 800ae2a:	dd00      	ble.n	800ae2e <_dtoa_r+0x4ae>
 800ae2c:	e16e      	b.n	800b10c <_dtoa_r+0x78c>
 800ae2e:	4b78      	ldr	r3, [pc, #480]	; (800b010 <_dtoa_r+0x690>)
 800ae30:	00d2      	lsls	r2, r2, #3
 800ae32:	189b      	adds	r3, r3, r2
 800ae34:	685c      	ldr	r4, [r3, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	930a      	str	r3, [sp, #40]	; 0x28
 800ae3a:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	db00      	blt.n	800ae44 <_dtoa_r+0x4c4>
 800ae42:	e0f7      	b.n	800b034 <_dtoa_r+0x6b4>
 800ae44:	9b07      	ldr	r3, [sp, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	dd00      	ble.n	800ae4c <_dtoa_r+0x4cc>
 800ae4a:	e0f3      	b.n	800b034 <_dtoa_r+0x6b4>
 800ae4c:	d000      	beq.n	800ae50 <_dtoa_r+0x4d0>
 800ae4e:	e282      	b.n	800b356 <_dtoa_r+0x9d6>
 800ae50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae54:	2200      	movs	r2, #0
 800ae56:	4b74      	ldr	r3, [pc, #464]	; (800b028 <_dtoa_r+0x6a8>)
 800ae58:	f7f6 fe06 	bl	8001a68 <__aeabi_dmul>
 800ae5c:	9a08      	ldr	r2, [sp, #32]
 800ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae60:	f7f5 fb18 	bl	8000494 <__aeabi_dcmpge>
 800ae64:	9e07      	ldr	r6, [sp, #28]
 800ae66:	0035      	movs	r5, r6
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d000      	beq.n	800ae6e <_dtoa_r+0x4ee>
 800ae6c:	e259      	b.n	800b322 <_dtoa_r+0x9a2>
 800ae6e:	9b06      	ldr	r3, [sp, #24]
 800ae70:	9a06      	ldr	r2, [sp, #24]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9308      	str	r3, [sp, #32]
 800ae76:	2331      	movs	r3, #49	; 0x31
 800ae78:	7013      	strb	r3, [r2, #0]
 800ae7a:	9b02      	ldr	r3, [sp, #8]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	9302      	str	r3, [sp, #8]
 800ae80:	e254      	b.n	800b32c <_dtoa_r+0x9ac>
 800ae82:	4234      	tst	r4, r6
 800ae84:	d007      	beq.n	800ae96 <_dtoa_r+0x516>
 800ae86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9310      	str	r3, [sp, #64]	; 0x40
 800ae8c:	682a      	ldr	r2, [r5, #0]
 800ae8e:	686b      	ldr	r3, [r5, #4]
 800ae90:	f7f6 fdea 	bl	8001a68 <__aeabi_dmul>
 800ae94:	0033      	movs	r3, r6
 800ae96:	1064      	asrs	r4, r4, #1
 800ae98:	3508      	adds	r5, #8
 800ae9a:	e75a      	b.n	800ad52 <_dtoa_r+0x3d2>
 800ae9c:	9e02      	ldr	r6, [sp, #8]
 800ae9e:	9b07      	ldr	r3, [sp, #28]
 800aea0:	e780      	b.n	800ada4 <_dtoa_r+0x424>
 800aea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aea6:	1e5a      	subs	r2, r3, #1
 800aea8:	4b59      	ldr	r3, [pc, #356]	; (800b010 <_dtoa_r+0x690>)
 800aeaa:	00d2      	lsls	r2, r2, #3
 800aeac:	189b      	adds	r3, r3, r2
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	d051      	beq.n	800af5a <_dtoa_r+0x5da>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	495d      	ldr	r1, [pc, #372]	; (800b030 <_dtoa_r+0x6b0>)
 800aeba:	f7f6 f9d3 	bl	8001264 <__aeabi_ddiv>
 800aebe:	9a08      	ldr	r2, [sp, #32]
 800aec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec2:	f7f7 f83d 	bl	8001f40 <__aeabi_dsub>
 800aec6:	9a06      	ldr	r2, [sp, #24]
 800aec8:	9b06      	ldr	r3, [sp, #24]
 800aeca:	4694      	mov	ip, r2
 800aecc:	9317      	str	r3, [sp, #92]	; 0x5c
 800aece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aed0:	9010      	str	r0, [sp, #64]	; 0x40
 800aed2:	9111      	str	r1, [sp, #68]	; 0x44
 800aed4:	4463      	add	r3, ip
 800aed6:	9319      	str	r3, [sp, #100]	; 0x64
 800aed8:	0029      	movs	r1, r5
 800aeda:	0020      	movs	r0, r4
 800aedc:	f7f7 fbe0 	bl	80026a0 <__aeabi_d2iz>
 800aee0:	9014      	str	r0, [sp, #80]	; 0x50
 800aee2:	f7f7 fc13 	bl	800270c <__aeabi_i2d>
 800aee6:	0002      	movs	r2, r0
 800aee8:	000b      	movs	r3, r1
 800aeea:	0020      	movs	r0, r4
 800aeec:	0029      	movs	r1, r5
 800aeee:	f7f7 f827 	bl	8001f40 <__aeabi_dsub>
 800aef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aef6:	3301      	adds	r3, #1
 800aef8:	9308      	str	r3, [sp, #32]
 800aefa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aefc:	0004      	movs	r4, r0
 800aefe:	3330      	adds	r3, #48	; 0x30
 800af00:	7013      	strb	r3, [r2, #0]
 800af02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af06:	000d      	movs	r5, r1
 800af08:	f7f5 faa6 	bl	8000458 <__aeabi_dcmplt>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d175      	bne.n	800affc <_dtoa_r+0x67c>
 800af10:	0022      	movs	r2, r4
 800af12:	002b      	movs	r3, r5
 800af14:	2000      	movs	r0, #0
 800af16:	4940      	ldr	r1, [pc, #256]	; (800b018 <_dtoa_r+0x698>)
 800af18:	f7f7 f812 	bl	8001f40 <__aeabi_dsub>
 800af1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af20:	f7f5 fa9a 	bl	8000458 <__aeabi_dcmplt>
 800af24:	2800      	cmp	r0, #0
 800af26:	d000      	beq.n	800af2a <_dtoa_r+0x5aa>
 800af28:	e0d2      	b.n	800b0d0 <_dtoa_r+0x750>
 800af2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af2c:	9a08      	ldr	r2, [sp, #32]
 800af2e:	4293      	cmp	r3, r2
 800af30:	d100      	bne.n	800af34 <_dtoa_r+0x5b4>
 800af32:	e770      	b.n	800ae16 <_dtoa_r+0x496>
 800af34:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af36:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af38:	2200      	movs	r2, #0
 800af3a:	4b38      	ldr	r3, [pc, #224]	; (800b01c <_dtoa_r+0x69c>)
 800af3c:	f7f6 fd94 	bl	8001a68 <__aeabi_dmul>
 800af40:	4b36      	ldr	r3, [pc, #216]	; (800b01c <_dtoa_r+0x69c>)
 800af42:	9010      	str	r0, [sp, #64]	; 0x40
 800af44:	9111      	str	r1, [sp, #68]	; 0x44
 800af46:	2200      	movs	r2, #0
 800af48:	0020      	movs	r0, r4
 800af4a:	0029      	movs	r1, r5
 800af4c:	f7f6 fd8c 	bl	8001a68 <__aeabi_dmul>
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	0004      	movs	r4, r0
 800af54:	000d      	movs	r5, r1
 800af56:	9317      	str	r3, [sp, #92]	; 0x5c
 800af58:	e7be      	b.n	800aed8 <_dtoa_r+0x558>
 800af5a:	9808      	ldr	r0, [sp, #32]
 800af5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af5e:	f7f6 fd83 	bl	8001a68 <__aeabi_dmul>
 800af62:	9a06      	ldr	r2, [sp, #24]
 800af64:	9b06      	ldr	r3, [sp, #24]
 800af66:	4694      	mov	ip, r2
 800af68:	9308      	str	r3, [sp, #32]
 800af6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af6c:	9010      	str	r0, [sp, #64]	; 0x40
 800af6e:	9111      	str	r1, [sp, #68]	; 0x44
 800af70:	4463      	add	r3, ip
 800af72:	9319      	str	r3, [sp, #100]	; 0x64
 800af74:	0029      	movs	r1, r5
 800af76:	0020      	movs	r0, r4
 800af78:	f7f7 fb92 	bl	80026a0 <__aeabi_d2iz>
 800af7c:	9017      	str	r0, [sp, #92]	; 0x5c
 800af7e:	f7f7 fbc5 	bl	800270c <__aeabi_i2d>
 800af82:	0002      	movs	r2, r0
 800af84:	000b      	movs	r3, r1
 800af86:	0020      	movs	r0, r4
 800af88:	0029      	movs	r1, r5
 800af8a:	f7f6 ffd9 	bl	8001f40 <__aeabi_dsub>
 800af8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af90:	9a08      	ldr	r2, [sp, #32]
 800af92:	3330      	adds	r3, #48	; 0x30
 800af94:	7013      	strb	r3, [r2, #0]
 800af96:	0013      	movs	r3, r2
 800af98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af9a:	3301      	adds	r3, #1
 800af9c:	0004      	movs	r4, r0
 800af9e:	000d      	movs	r5, r1
 800afa0:	9308      	str	r3, [sp, #32]
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d12c      	bne.n	800b000 <_dtoa_r+0x680>
 800afa6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800afa8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afaa:	9a06      	ldr	r2, [sp, #24]
 800afac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afae:	4694      	mov	ip, r2
 800afb0:	4463      	add	r3, ip
 800afb2:	2200      	movs	r2, #0
 800afb4:	9308      	str	r3, [sp, #32]
 800afb6:	4b1e      	ldr	r3, [pc, #120]	; (800b030 <_dtoa_r+0x6b0>)
 800afb8:	f7f5 fe18 	bl	8000bec <__aeabi_dadd>
 800afbc:	0002      	movs	r2, r0
 800afbe:	000b      	movs	r3, r1
 800afc0:	0020      	movs	r0, r4
 800afc2:	0029      	movs	r1, r5
 800afc4:	f7f5 fa5c 	bl	8000480 <__aeabi_dcmpgt>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d000      	beq.n	800afce <_dtoa_r+0x64e>
 800afcc:	e080      	b.n	800b0d0 <_dtoa_r+0x750>
 800afce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afd2:	2000      	movs	r0, #0
 800afd4:	4916      	ldr	r1, [pc, #88]	; (800b030 <_dtoa_r+0x6b0>)
 800afd6:	f7f6 ffb3 	bl	8001f40 <__aeabi_dsub>
 800afda:	0002      	movs	r2, r0
 800afdc:	000b      	movs	r3, r1
 800afde:	0020      	movs	r0, r4
 800afe0:	0029      	movs	r1, r5
 800afe2:	f7f5 fa39 	bl	8000458 <__aeabi_dcmplt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d100      	bne.n	800afec <_dtoa_r+0x66c>
 800afea:	e714      	b.n	800ae16 <_dtoa_r+0x496>
 800afec:	9b08      	ldr	r3, [sp, #32]
 800afee:	001a      	movs	r2, r3
 800aff0:	3a01      	subs	r2, #1
 800aff2:	9208      	str	r2, [sp, #32]
 800aff4:	7812      	ldrb	r2, [r2, #0]
 800aff6:	2a30      	cmp	r2, #48	; 0x30
 800aff8:	d0f8      	beq.n	800afec <_dtoa_r+0x66c>
 800affa:	9308      	str	r3, [sp, #32]
 800affc:	9602      	str	r6, [sp, #8]
 800affe:	e055      	b.n	800b0ac <_dtoa_r+0x72c>
 800b000:	2200      	movs	r2, #0
 800b002:	4b06      	ldr	r3, [pc, #24]	; (800b01c <_dtoa_r+0x69c>)
 800b004:	f7f6 fd30 	bl	8001a68 <__aeabi_dmul>
 800b008:	0004      	movs	r4, r0
 800b00a:	000d      	movs	r5, r1
 800b00c:	e7b2      	b.n	800af74 <_dtoa_r+0x5f4>
 800b00e:	46c0      	nop			; (mov r8, r8)
 800b010:	0800db88 	.word	0x0800db88
 800b014:	0800db60 	.word	0x0800db60
 800b018:	3ff00000 	.word	0x3ff00000
 800b01c:	40240000 	.word	0x40240000
 800b020:	401c0000 	.word	0x401c0000
 800b024:	fcc00000 	.word	0xfcc00000
 800b028:	40140000 	.word	0x40140000
 800b02c:	7cc00000 	.word	0x7cc00000
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	9b07      	ldr	r3, [sp, #28]
 800b036:	9e06      	ldr	r6, [sp, #24]
 800b038:	3b01      	subs	r3, #1
 800b03a:	199b      	adds	r3, r3, r6
 800b03c:	930c      	str	r3, [sp, #48]	; 0x30
 800b03e:	9c08      	ldr	r4, [sp, #32]
 800b040:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b046:	0020      	movs	r0, r4
 800b048:	0029      	movs	r1, r5
 800b04a:	f7f6 f90b 	bl	8001264 <__aeabi_ddiv>
 800b04e:	f7f7 fb27 	bl	80026a0 <__aeabi_d2iz>
 800b052:	9007      	str	r0, [sp, #28]
 800b054:	f7f7 fb5a 	bl	800270c <__aeabi_i2d>
 800b058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b05c:	f7f6 fd04 	bl	8001a68 <__aeabi_dmul>
 800b060:	0002      	movs	r2, r0
 800b062:	000b      	movs	r3, r1
 800b064:	0020      	movs	r0, r4
 800b066:	0029      	movs	r1, r5
 800b068:	f7f6 ff6a 	bl	8001f40 <__aeabi_dsub>
 800b06c:	0033      	movs	r3, r6
 800b06e:	9a07      	ldr	r2, [sp, #28]
 800b070:	3601      	adds	r6, #1
 800b072:	3230      	adds	r2, #48	; 0x30
 800b074:	701a      	strb	r2, [r3, #0]
 800b076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b078:	9608      	str	r6, [sp, #32]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d139      	bne.n	800b0f2 <_dtoa_r+0x772>
 800b07e:	0002      	movs	r2, r0
 800b080:	000b      	movs	r3, r1
 800b082:	f7f5 fdb3 	bl	8000bec <__aeabi_dadd>
 800b086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b08a:	0004      	movs	r4, r0
 800b08c:	000d      	movs	r5, r1
 800b08e:	f7f5 f9f7 	bl	8000480 <__aeabi_dcmpgt>
 800b092:	2800      	cmp	r0, #0
 800b094:	d11b      	bne.n	800b0ce <_dtoa_r+0x74e>
 800b096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09a:	0020      	movs	r0, r4
 800b09c:	0029      	movs	r1, r5
 800b09e:	f7f5 f9d5 	bl	800044c <__aeabi_dcmpeq>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d002      	beq.n	800b0ac <_dtoa_r+0x72c>
 800b0a6:	9b07      	ldr	r3, [sp, #28]
 800b0a8:	07db      	lsls	r3, r3, #31
 800b0aa:	d410      	bmi.n	800b0ce <_dtoa_r+0x74e>
 800b0ac:	0038      	movs	r0, r7
 800b0ae:	9905      	ldr	r1, [sp, #20]
 800b0b0:	f001 f8a2 	bl	800c1f8 <_Bfree>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9a08      	ldr	r2, [sp, #32]
 800b0b8:	9802      	ldr	r0, [sp, #8]
 800b0ba:	7013      	strb	r3, [r2, #0]
 800b0bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0be:	3001      	adds	r0, #1
 800b0c0:	6018      	str	r0, [r3, #0]
 800b0c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d100      	bne.n	800b0ca <_dtoa_r+0x74a>
 800b0c8:	e4a6      	b.n	800aa18 <_dtoa_r+0x98>
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	e4a4      	b.n	800aa18 <_dtoa_r+0x98>
 800b0ce:	9e02      	ldr	r6, [sp, #8]
 800b0d0:	9b08      	ldr	r3, [sp, #32]
 800b0d2:	9308      	str	r3, [sp, #32]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	2a39      	cmp	r2, #57	; 0x39
 800b0da:	d106      	bne.n	800b0ea <_dtoa_r+0x76a>
 800b0dc:	9a06      	ldr	r2, [sp, #24]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d1f7      	bne.n	800b0d2 <_dtoa_r+0x752>
 800b0e2:	2230      	movs	r2, #48	; 0x30
 800b0e4:	9906      	ldr	r1, [sp, #24]
 800b0e6:	3601      	adds	r6, #1
 800b0e8:	700a      	strb	r2, [r1, #0]
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	3201      	adds	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e784      	b.n	800affc <_dtoa_r+0x67c>
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4baa      	ldr	r3, [pc, #680]	; (800b3a0 <_dtoa_r+0xa20>)
 800b0f6:	f7f6 fcb7 	bl	8001a68 <__aeabi_dmul>
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	0004      	movs	r4, r0
 800b100:	000d      	movs	r5, r1
 800b102:	f7f5 f9a3 	bl	800044c <__aeabi_dcmpeq>
 800b106:	2800      	cmp	r0, #0
 800b108:	d09b      	beq.n	800b042 <_dtoa_r+0x6c2>
 800b10a:	e7cf      	b.n	800b0ac <_dtoa_r+0x72c>
 800b10c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b10e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b110:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b112:	2d00      	cmp	r5, #0
 800b114:	d012      	beq.n	800b13c <_dtoa_r+0x7bc>
 800b116:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b118:	2a01      	cmp	r2, #1
 800b11a:	dc66      	bgt.n	800b1ea <_dtoa_r+0x86a>
 800b11c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d05d      	beq.n	800b1de <_dtoa_r+0x85e>
 800b122:	4aa0      	ldr	r2, [pc, #640]	; (800b3a4 <_dtoa_r+0xa24>)
 800b124:	189b      	adds	r3, r3, r2
 800b126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b128:	2101      	movs	r1, #1
 800b12a:	18d2      	adds	r2, r2, r3
 800b12c:	920a      	str	r2, [sp, #40]	; 0x28
 800b12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b130:	0038      	movs	r0, r7
 800b132:	18d3      	adds	r3, r2, r3
 800b134:	930d      	str	r3, [sp, #52]	; 0x34
 800b136:	f001 f95b 	bl	800c3f0 <__i2b>
 800b13a:	0005      	movs	r5, r0
 800b13c:	2c00      	cmp	r4, #0
 800b13e:	dd0e      	ble.n	800b15e <_dtoa_r+0x7de>
 800b140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b142:	2b00      	cmp	r3, #0
 800b144:	dd0b      	ble.n	800b15e <_dtoa_r+0x7de>
 800b146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b148:	0023      	movs	r3, r4
 800b14a:	4294      	cmp	r4, r2
 800b14c:	dd00      	ble.n	800b150 <_dtoa_r+0x7d0>
 800b14e:	0013      	movs	r3, r2
 800b150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b152:	1ae4      	subs	r4, r4, r3
 800b154:	1ad2      	subs	r2, r2, r3
 800b156:	920a      	str	r2, [sp, #40]	; 0x28
 800b158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	930d      	str	r3, [sp, #52]	; 0x34
 800b15e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b160:	2b00      	cmp	r3, #0
 800b162:	d01f      	beq.n	800b1a4 <_dtoa_r+0x824>
 800b164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b166:	2b00      	cmp	r3, #0
 800b168:	d054      	beq.n	800b214 <_dtoa_r+0x894>
 800b16a:	2e00      	cmp	r6, #0
 800b16c:	dd11      	ble.n	800b192 <_dtoa_r+0x812>
 800b16e:	0029      	movs	r1, r5
 800b170:	0032      	movs	r2, r6
 800b172:	0038      	movs	r0, r7
 800b174:	f001 fa02 	bl	800c57c <__pow5mult>
 800b178:	9a05      	ldr	r2, [sp, #20]
 800b17a:	0001      	movs	r1, r0
 800b17c:	0005      	movs	r5, r0
 800b17e:	0038      	movs	r0, r7
 800b180:	f001 f94c 	bl	800c41c <__multiply>
 800b184:	9905      	ldr	r1, [sp, #20]
 800b186:	9014      	str	r0, [sp, #80]	; 0x50
 800b188:	0038      	movs	r0, r7
 800b18a:	f001 f835 	bl	800c1f8 <_Bfree>
 800b18e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b190:	9305      	str	r3, [sp, #20]
 800b192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b194:	1b9a      	subs	r2, r3, r6
 800b196:	42b3      	cmp	r3, r6
 800b198:	d004      	beq.n	800b1a4 <_dtoa_r+0x824>
 800b19a:	0038      	movs	r0, r7
 800b19c:	9905      	ldr	r1, [sp, #20]
 800b19e:	f001 f9ed 	bl	800c57c <__pow5mult>
 800b1a2:	9005      	str	r0, [sp, #20]
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	0038      	movs	r0, r7
 800b1a8:	f001 f922 	bl	800c3f0 <__i2b>
 800b1ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ae:	0006      	movs	r6, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dd31      	ble.n	800b218 <_dtoa_r+0x898>
 800b1b4:	001a      	movs	r2, r3
 800b1b6:	0001      	movs	r1, r0
 800b1b8:	0038      	movs	r0, r7
 800b1ba:	f001 f9df 	bl	800c57c <__pow5mult>
 800b1be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1c0:	0006      	movs	r6, r0
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	dd2d      	ble.n	800b222 <_dtoa_r+0x8a2>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b1ca:	6933      	ldr	r3, [r6, #16]
 800b1cc:	3303      	adds	r3, #3
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	18f3      	adds	r3, r6, r3
 800b1d2:	6858      	ldr	r0, [r3, #4]
 800b1d4:	f001 f8c4 	bl	800c360 <__hi0bits>
 800b1d8:	2320      	movs	r3, #32
 800b1da:	1a18      	subs	r0, r3, r0
 800b1dc:	e039      	b.n	800b252 <_dtoa_r+0x8d2>
 800b1de:	2336      	movs	r3, #54	; 0x36
 800b1e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b1e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	e79d      	b.n	800b126 <_dtoa_r+0x7a6>
 800b1ea:	9b07      	ldr	r3, [sp, #28]
 800b1ec:	1e5e      	subs	r6, r3, #1
 800b1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1f0:	42b3      	cmp	r3, r6
 800b1f2:	db07      	blt.n	800b204 <_dtoa_r+0x884>
 800b1f4:	1b9e      	subs	r6, r3, r6
 800b1f6:	9b07      	ldr	r3, [sp, #28]
 800b1f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	da93      	bge.n	800b126 <_dtoa_r+0x7a6>
 800b1fe:	1ae4      	subs	r4, r4, r3
 800b200:	2300      	movs	r3, #0
 800b202:	e790      	b.n	800b126 <_dtoa_r+0x7a6>
 800b204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b206:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b208:	1af3      	subs	r3, r6, r3
 800b20a:	18d3      	adds	r3, r2, r3
 800b20c:	960e      	str	r6, [sp, #56]	; 0x38
 800b20e:	9315      	str	r3, [sp, #84]	; 0x54
 800b210:	2600      	movs	r6, #0
 800b212:	e7f0      	b.n	800b1f6 <_dtoa_r+0x876>
 800b214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b216:	e7c0      	b.n	800b19a <_dtoa_r+0x81a>
 800b218:	2300      	movs	r3, #0
 800b21a:	930e      	str	r3, [sp, #56]	; 0x38
 800b21c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b21e:	2b01      	cmp	r3, #1
 800b220:	dc13      	bgt.n	800b24a <_dtoa_r+0x8ca>
 800b222:	2300      	movs	r3, #0
 800b224:	930e      	str	r3, [sp, #56]	; 0x38
 800b226:	9b08      	ldr	r3, [sp, #32]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10e      	bne.n	800b24a <_dtoa_r+0x8ca>
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	031b      	lsls	r3, r3, #12
 800b230:	d10b      	bne.n	800b24a <_dtoa_r+0x8ca>
 800b232:	4b5d      	ldr	r3, [pc, #372]	; (800b3a8 <_dtoa_r+0xa28>)
 800b234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b236:	4213      	tst	r3, r2
 800b238:	d007      	beq.n	800b24a <_dtoa_r+0x8ca>
 800b23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23c:	3301      	adds	r3, #1
 800b23e:	930a      	str	r3, [sp, #40]	; 0x28
 800b240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b242:	3301      	adds	r3, #1
 800b244:	930d      	str	r3, [sp, #52]	; 0x34
 800b246:	2301      	movs	r3, #1
 800b248:	930e      	str	r3, [sp, #56]	; 0x38
 800b24a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b24c:	2001      	movs	r0, #1
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1bb      	bne.n	800b1ca <_dtoa_r+0x84a>
 800b252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b254:	221f      	movs	r2, #31
 800b256:	1818      	adds	r0, r3, r0
 800b258:	0003      	movs	r3, r0
 800b25a:	4013      	ands	r3, r2
 800b25c:	4210      	tst	r0, r2
 800b25e:	d046      	beq.n	800b2ee <_dtoa_r+0x96e>
 800b260:	3201      	adds	r2, #1
 800b262:	1ad2      	subs	r2, r2, r3
 800b264:	2a04      	cmp	r2, #4
 800b266:	dd3f      	ble.n	800b2e8 <_dtoa_r+0x968>
 800b268:	221c      	movs	r2, #28
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b26e:	18e4      	adds	r4, r4, r3
 800b270:	18d2      	adds	r2, r2, r3
 800b272:	920a      	str	r2, [sp, #40]	; 0x28
 800b274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b276:	18d3      	adds	r3, r2, r3
 800b278:	930d      	str	r3, [sp, #52]	; 0x34
 800b27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dd05      	ble.n	800b28c <_dtoa_r+0x90c>
 800b280:	001a      	movs	r2, r3
 800b282:	0038      	movs	r0, r7
 800b284:	9905      	ldr	r1, [sp, #20]
 800b286:	f001 f9d5 	bl	800c634 <__lshift>
 800b28a:	9005      	str	r0, [sp, #20]
 800b28c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dd05      	ble.n	800b29e <_dtoa_r+0x91e>
 800b292:	0031      	movs	r1, r6
 800b294:	001a      	movs	r2, r3
 800b296:	0038      	movs	r0, r7
 800b298:	f001 f9cc 	bl	800c634 <__lshift>
 800b29c:	0006      	movs	r6, r0
 800b29e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d026      	beq.n	800b2f2 <_dtoa_r+0x972>
 800b2a4:	0031      	movs	r1, r6
 800b2a6:	9805      	ldr	r0, [sp, #20]
 800b2a8:	f001 fa32 	bl	800c710 <__mcmp>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	da20      	bge.n	800b2f2 <_dtoa_r+0x972>
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	220a      	movs	r2, #10
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	0038      	movs	r0, r7
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	9905      	ldr	r1, [sp, #20]
 800b2be:	f000 ffbf 	bl	800c240 <__multadd>
 800b2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2c4:	9005      	str	r0, [sp, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d100      	bne.n	800b2cc <_dtoa_r+0x94c>
 800b2ca:	e166      	b.n	800b59a <_dtoa_r+0xc1a>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	0029      	movs	r1, r5
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	0038      	movs	r0, r7
 800b2d4:	f000 ffb4 	bl	800c240 <__multadd>
 800b2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2da:	0005      	movs	r5, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dc47      	bgt.n	800b370 <_dtoa_r+0x9f0>
 800b2e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	dc0d      	bgt.n	800b302 <_dtoa_r+0x982>
 800b2e6:	e043      	b.n	800b370 <_dtoa_r+0x9f0>
 800b2e8:	2a04      	cmp	r2, #4
 800b2ea:	d0c6      	beq.n	800b27a <_dtoa_r+0x8fa>
 800b2ec:	0013      	movs	r3, r2
 800b2ee:	331c      	adds	r3, #28
 800b2f0:	e7bc      	b.n	800b26c <_dtoa_r+0x8ec>
 800b2f2:	9b07      	ldr	r3, [sp, #28]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dc35      	bgt.n	800b364 <_dtoa_r+0x9e4>
 800b2f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	dd32      	ble.n	800b364 <_dtoa_r+0x9e4>
 800b2fe:	9b07      	ldr	r3, [sp, #28]
 800b300:	930c      	str	r3, [sp, #48]	; 0x30
 800b302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10c      	bne.n	800b322 <_dtoa_r+0x9a2>
 800b308:	0031      	movs	r1, r6
 800b30a:	2205      	movs	r2, #5
 800b30c:	0038      	movs	r0, r7
 800b30e:	f000 ff97 	bl	800c240 <__multadd>
 800b312:	0006      	movs	r6, r0
 800b314:	0001      	movs	r1, r0
 800b316:	9805      	ldr	r0, [sp, #20]
 800b318:	f001 f9fa 	bl	800c710 <__mcmp>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	dd00      	ble.n	800b322 <_dtoa_r+0x9a2>
 800b320:	e5a5      	b.n	800ae6e <_dtoa_r+0x4ee>
 800b322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b324:	43db      	mvns	r3, r3
 800b326:	9302      	str	r3, [sp, #8]
 800b328:	9b06      	ldr	r3, [sp, #24]
 800b32a:	9308      	str	r3, [sp, #32]
 800b32c:	2400      	movs	r4, #0
 800b32e:	0031      	movs	r1, r6
 800b330:	0038      	movs	r0, r7
 800b332:	f000 ff61 	bl	800c1f8 <_Bfree>
 800b336:	2d00      	cmp	r5, #0
 800b338:	d100      	bne.n	800b33c <_dtoa_r+0x9bc>
 800b33a:	e6b7      	b.n	800b0ac <_dtoa_r+0x72c>
 800b33c:	2c00      	cmp	r4, #0
 800b33e:	d005      	beq.n	800b34c <_dtoa_r+0x9cc>
 800b340:	42ac      	cmp	r4, r5
 800b342:	d003      	beq.n	800b34c <_dtoa_r+0x9cc>
 800b344:	0021      	movs	r1, r4
 800b346:	0038      	movs	r0, r7
 800b348:	f000 ff56 	bl	800c1f8 <_Bfree>
 800b34c:	0029      	movs	r1, r5
 800b34e:	0038      	movs	r0, r7
 800b350:	f000 ff52 	bl	800c1f8 <_Bfree>
 800b354:	e6aa      	b.n	800b0ac <_dtoa_r+0x72c>
 800b356:	2600      	movs	r6, #0
 800b358:	0035      	movs	r5, r6
 800b35a:	e7e2      	b.n	800b322 <_dtoa_r+0x9a2>
 800b35c:	9602      	str	r6, [sp, #8]
 800b35e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b360:	0035      	movs	r5, r6
 800b362:	e584      	b.n	800ae6e <_dtoa_r+0x4ee>
 800b364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d100      	bne.n	800b36c <_dtoa_r+0x9ec>
 800b36a:	e0ce      	b.n	800b50a <_dtoa_r+0xb8a>
 800b36c:	9b07      	ldr	r3, [sp, #28]
 800b36e:	930c      	str	r3, [sp, #48]	; 0x30
 800b370:	2c00      	cmp	r4, #0
 800b372:	dd05      	ble.n	800b380 <_dtoa_r+0xa00>
 800b374:	0029      	movs	r1, r5
 800b376:	0022      	movs	r2, r4
 800b378:	0038      	movs	r0, r7
 800b37a:	f001 f95b 	bl	800c634 <__lshift>
 800b37e:	0005      	movs	r5, r0
 800b380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b382:	0028      	movs	r0, r5
 800b384:	2b00      	cmp	r3, #0
 800b386:	d022      	beq.n	800b3ce <_dtoa_r+0xa4e>
 800b388:	0038      	movs	r0, r7
 800b38a:	6869      	ldr	r1, [r5, #4]
 800b38c:	f000 fef0 	bl	800c170 <_Balloc>
 800b390:	1e04      	subs	r4, r0, #0
 800b392:	d10f      	bne.n	800b3b4 <_dtoa_r+0xa34>
 800b394:	0002      	movs	r2, r0
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <_dtoa_r+0xa2c>)
 800b398:	4905      	ldr	r1, [pc, #20]	; (800b3b0 <_dtoa_r+0xa30>)
 800b39a:	f7ff fb06 	bl	800a9aa <_dtoa_r+0x2a>
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	40240000 	.word	0x40240000
 800b3a4:	00000433 	.word	0x00000433
 800b3a8:	7ff00000 	.word	0x7ff00000
 800b3ac:	0800da10 	.word	0x0800da10
 800b3b0:	000002ea 	.word	0x000002ea
 800b3b4:	0029      	movs	r1, r5
 800b3b6:	692b      	ldr	r3, [r5, #16]
 800b3b8:	310c      	adds	r1, #12
 800b3ba:	1c9a      	adds	r2, r3, #2
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	300c      	adds	r0, #12
 800b3c0:	f7fd fb7c 	bl	8008abc <memcpy>
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	0021      	movs	r1, r4
 800b3c8:	0038      	movs	r0, r7
 800b3ca:	f001 f933 	bl	800c634 <__lshift>
 800b3ce:	9b06      	ldr	r3, [sp, #24]
 800b3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	2201      	movs	r2, #1
 800b3da:	002c      	movs	r4, r5
 800b3dc:	0005      	movs	r5, r0
 800b3de:	9314      	str	r3, [sp, #80]	; 0x50
 800b3e0:	9b08      	ldr	r3, [sp, #32]
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3e6:	0031      	movs	r1, r6
 800b3e8:	9805      	ldr	r0, [sp, #20]
 800b3ea:	f7ff fa3d 	bl	800a868 <quorem>
 800b3ee:	0003      	movs	r3, r0
 800b3f0:	0021      	movs	r1, r4
 800b3f2:	3330      	adds	r3, #48	; 0x30
 800b3f4:	900d      	str	r0, [sp, #52]	; 0x34
 800b3f6:	9805      	ldr	r0, [sp, #20]
 800b3f8:	9307      	str	r3, [sp, #28]
 800b3fa:	f001 f989 	bl	800c710 <__mcmp>
 800b3fe:	002a      	movs	r2, r5
 800b400:	900e      	str	r0, [sp, #56]	; 0x38
 800b402:	0031      	movs	r1, r6
 800b404:	0038      	movs	r0, r7
 800b406:	f001 f99f 	bl	800c748 <__mdiff>
 800b40a:	68c3      	ldr	r3, [r0, #12]
 800b40c:	9008      	str	r0, [sp, #32]
 800b40e:	9310      	str	r3, [sp, #64]	; 0x40
 800b410:	2301      	movs	r3, #1
 800b412:	930c      	str	r3, [sp, #48]	; 0x30
 800b414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <_dtoa_r+0xaa4>
 800b41a:	0001      	movs	r1, r0
 800b41c:	9805      	ldr	r0, [sp, #20]
 800b41e:	f001 f977 	bl	800c710 <__mcmp>
 800b422:	900c      	str	r0, [sp, #48]	; 0x30
 800b424:	0038      	movs	r0, r7
 800b426:	9908      	ldr	r1, [sp, #32]
 800b428:	f000 fee6 	bl	800c1f8 <_Bfree>
 800b42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b42e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b430:	3301      	adds	r3, #1
 800b432:	9308      	str	r3, [sp, #32]
 800b434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b436:	4313      	orrs	r3, r2
 800b438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b43a:	4313      	orrs	r3, r2
 800b43c:	d10c      	bne.n	800b458 <_dtoa_r+0xad8>
 800b43e:	9b07      	ldr	r3, [sp, #28]
 800b440:	2b39      	cmp	r3, #57	; 0x39
 800b442:	d026      	beq.n	800b492 <_dtoa_r+0xb12>
 800b444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd02      	ble.n	800b450 <_dtoa_r+0xad0>
 800b44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b44c:	3331      	adds	r3, #49	; 0x31
 800b44e:	9307      	str	r3, [sp, #28]
 800b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b452:	9a07      	ldr	r2, [sp, #28]
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e76a      	b.n	800b32e <_dtoa_r+0x9ae>
 800b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	db04      	blt.n	800b468 <_dtoa_r+0xae8>
 800b45e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b460:	4313      	orrs	r3, r2
 800b462:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b464:	4313      	orrs	r3, r2
 800b466:	d11f      	bne.n	800b4a8 <_dtoa_r+0xb28>
 800b468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	ddf0      	ble.n	800b450 <_dtoa_r+0xad0>
 800b46e:	9905      	ldr	r1, [sp, #20]
 800b470:	2201      	movs	r2, #1
 800b472:	0038      	movs	r0, r7
 800b474:	f001 f8de 	bl	800c634 <__lshift>
 800b478:	0031      	movs	r1, r6
 800b47a:	9005      	str	r0, [sp, #20]
 800b47c:	f001 f948 	bl	800c710 <__mcmp>
 800b480:	2800      	cmp	r0, #0
 800b482:	dc03      	bgt.n	800b48c <_dtoa_r+0xb0c>
 800b484:	d1e4      	bne.n	800b450 <_dtoa_r+0xad0>
 800b486:	9b07      	ldr	r3, [sp, #28]
 800b488:	07db      	lsls	r3, r3, #31
 800b48a:	d5e1      	bpl.n	800b450 <_dtoa_r+0xad0>
 800b48c:	9b07      	ldr	r3, [sp, #28]
 800b48e:	2b39      	cmp	r3, #57	; 0x39
 800b490:	d1db      	bne.n	800b44a <_dtoa_r+0xaca>
 800b492:	2339      	movs	r3, #57	; 0x39
 800b494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b496:	7013      	strb	r3, [r2, #0]
 800b498:	9b08      	ldr	r3, [sp, #32]
 800b49a:	9308      	str	r3, [sp, #32]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	2a39      	cmp	r2, #57	; 0x39
 800b4a2:	d068      	beq.n	800b576 <_dtoa_r+0xbf6>
 800b4a4:	3201      	adds	r2, #1
 800b4a6:	e7d5      	b.n	800b454 <_dtoa_r+0xad4>
 800b4a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	dd07      	ble.n	800b4be <_dtoa_r+0xb3e>
 800b4ae:	9b07      	ldr	r3, [sp, #28]
 800b4b0:	2b39      	cmp	r3, #57	; 0x39
 800b4b2:	d0ee      	beq.n	800b492 <_dtoa_r+0xb12>
 800b4b4:	9b07      	ldr	r3, [sp, #28]
 800b4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	7013      	strb	r3, [r2, #0]
 800b4bc:	e737      	b.n	800b32e <_dtoa_r+0x9ae>
 800b4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c0:	9a07      	ldr	r2, [sp, #28]
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d03e      	beq.n	800b54a <_dtoa_r+0xbca>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	220a      	movs	r2, #10
 800b4d0:	9905      	ldr	r1, [sp, #20]
 800b4d2:	0038      	movs	r0, r7
 800b4d4:	f000 feb4 	bl	800c240 <__multadd>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9005      	str	r0, [sp, #20]
 800b4dc:	220a      	movs	r2, #10
 800b4de:	0021      	movs	r1, r4
 800b4e0:	0038      	movs	r0, r7
 800b4e2:	42ac      	cmp	r4, r5
 800b4e4:	d106      	bne.n	800b4f4 <_dtoa_r+0xb74>
 800b4e6:	f000 feab 	bl	800c240 <__multadd>
 800b4ea:	0004      	movs	r4, r0
 800b4ec:	0005      	movs	r5, r0
 800b4ee:	9b08      	ldr	r3, [sp, #32]
 800b4f0:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f2:	e778      	b.n	800b3e6 <_dtoa_r+0xa66>
 800b4f4:	f000 fea4 	bl	800c240 <__multadd>
 800b4f8:	0029      	movs	r1, r5
 800b4fa:	0004      	movs	r4, r0
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	220a      	movs	r2, #10
 800b500:	0038      	movs	r0, r7
 800b502:	f000 fe9d 	bl	800c240 <__multadd>
 800b506:	0005      	movs	r5, r0
 800b508:	e7f1      	b.n	800b4ee <_dtoa_r+0xb6e>
 800b50a:	9b07      	ldr	r3, [sp, #28]
 800b50c:	930c      	str	r3, [sp, #48]	; 0x30
 800b50e:	2400      	movs	r4, #0
 800b510:	0031      	movs	r1, r6
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	f7ff f9a8 	bl	800a868 <quorem>
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	3030      	adds	r0, #48	; 0x30
 800b51c:	5518      	strb	r0, [r3, r4]
 800b51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b520:	3401      	adds	r4, #1
 800b522:	9007      	str	r0, [sp, #28]
 800b524:	42a3      	cmp	r3, r4
 800b526:	dd07      	ble.n	800b538 <_dtoa_r+0xbb8>
 800b528:	2300      	movs	r3, #0
 800b52a:	220a      	movs	r2, #10
 800b52c:	0038      	movs	r0, r7
 800b52e:	9905      	ldr	r1, [sp, #20]
 800b530:	f000 fe86 	bl	800c240 <__multadd>
 800b534:	9005      	str	r0, [sp, #20]
 800b536:	e7eb      	b.n	800b510 <_dtoa_r+0xb90>
 800b538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b53a:	2001      	movs	r0, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dd00      	ble.n	800b542 <_dtoa_r+0xbc2>
 800b540:	0018      	movs	r0, r3
 800b542:	2400      	movs	r4, #0
 800b544:	9b06      	ldr	r3, [sp, #24]
 800b546:	181b      	adds	r3, r3, r0
 800b548:	9308      	str	r3, [sp, #32]
 800b54a:	9905      	ldr	r1, [sp, #20]
 800b54c:	2201      	movs	r2, #1
 800b54e:	0038      	movs	r0, r7
 800b550:	f001 f870 	bl	800c634 <__lshift>
 800b554:	0031      	movs	r1, r6
 800b556:	9005      	str	r0, [sp, #20]
 800b558:	f001 f8da 	bl	800c710 <__mcmp>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	dc9b      	bgt.n	800b498 <_dtoa_r+0xb18>
 800b560:	d102      	bne.n	800b568 <_dtoa_r+0xbe8>
 800b562:	9b07      	ldr	r3, [sp, #28]
 800b564:	07db      	lsls	r3, r3, #31
 800b566:	d497      	bmi.n	800b498 <_dtoa_r+0xb18>
 800b568:	9b08      	ldr	r3, [sp, #32]
 800b56a:	9308      	str	r3, [sp, #32]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	781a      	ldrb	r2, [r3, #0]
 800b570:	2a30      	cmp	r2, #48	; 0x30
 800b572:	d0fa      	beq.n	800b56a <_dtoa_r+0xbea>
 800b574:	e6db      	b.n	800b32e <_dtoa_r+0x9ae>
 800b576:	9a06      	ldr	r2, [sp, #24]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d18e      	bne.n	800b49a <_dtoa_r+0xb1a>
 800b57c:	9b02      	ldr	r3, [sp, #8]
 800b57e:	3301      	adds	r3, #1
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	2331      	movs	r3, #49	; 0x31
 800b584:	e799      	b.n	800b4ba <_dtoa_r+0xb3a>
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <_dtoa_r+0xc2c>)
 800b588:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b58a:	9306      	str	r3, [sp, #24]
 800b58c:	4b08      	ldr	r3, [pc, #32]	; (800b5b0 <_dtoa_r+0xc30>)
 800b58e:	2a00      	cmp	r2, #0
 800b590:	d001      	beq.n	800b596 <_dtoa_r+0xc16>
 800b592:	f7ff fa3f 	bl	800aa14 <_dtoa_r+0x94>
 800b596:	f7ff fa3f 	bl	800aa18 <_dtoa_r+0x98>
 800b59a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dcb6      	bgt.n	800b50e <_dtoa_r+0xb8e>
 800b5a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	dd00      	ble.n	800b5a8 <_dtoa_r+0xc28>
 800b5a6:	e6ac      	b.n	800b302 <_dtoa_r+0x982>
 800b5a8:	e7b1      	b.n	800b50e <_dtoa_r+0xb8e>
 800b5aa:	46c0      	nop			; (mov r8, r8)
 800b5ac:	0800d991 	.word	0x0800d991
 800b5b0:	0800d999 	.word	0x0800d999

0800b5b4 <__sflush_r>:
 800b5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5b6:	898b      	ldrh	r3, [r1, #12]
 800b5b8:	0005      	movs	r5, r0
 800b5ba:	000c      	movs	r4, r1
 800b5bc:	071a      	lsls	r2, r3, #28
 800b5be:	d45f      	bmi.n	800b680 <__sflush_r+0xcc>
 800b5c0:	684a      	ldr	r2, [r1, #4]
 800b5c2:	2a00      	cmp	r2, #0
 800b5c4:	dc04      	bgt.n	800b5d0 <__sflush_r+0x1c>
 800b5c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b5c8:	2a00      	cmp	r2, #0
 800b5ca:	dc01      	bgt.n	800b5d0 <__sflush_r+0x1c>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	d0fa      	beq.n	800b5cc <__sflush_r+0x18>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2180      	movs	r1, #128	; 0x80
 800b5da:	682e      	ldr	r6, [r5, #0]
 800b5dc:	602a      	str	r2, [r5, #0]
 800b5de:	001a      	movs	r2, r3
 800b5e0:	0149      	lsls	r1, r1, #5
 800b5e2:	400a      	ands	r2, r1
 800b5e4:	420b      	tst	r3, r1
 800b5e6:	d034      	beq.n	800b652 <__sflush_r+0x9e>
 800b5e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	075b      	lsls	r3, r3, #29
 800b5ee:	d506      	bpl.n	800b5fe <__sflush_r+0x4a>
 800b5f0:	6863      	ldr	r3, [r4, #4]
 800b5f2:	1ac0      	subs	r0, r0, r3
 800b5f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <__sflush_r+0x4a>
 800b5fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5fc:	1ac0      	subs	r0, r0, r3
 800b5fe:	0002      	movs	r2, r0
 800b600:	6a21      	ldr	r1, [r4, #32]
 800b602:	2300      	movs	r3, #0
 800b604:	0028      	movs	r0, r5
 800b606:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b608:	47b8      	blx	r7
 800b60a:	89a1      	ldrh	r1, [r4, #12]
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d106      	bne.n	800b61e <__sflush_r+0x6a>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	2b1d      	cmp	r3, #29
 800b614:	d831      	bhi.n	800b67a <__sflush_r+0xc6>
 800b616:	4a2c      	ldr	r2, [pc, #176]	; (800b6c8 <__sflush_r+0x114>)
 800b618:	40da      	lsrs	r2, r3
 800b61a:	07d3      	lsls	r3, r2, #31
 800b61c:	d52d      	bpl.n	800b67a <__sflush_r+0xc6>
 800b61e:	2300      	movs	r3, #0
 800b620:	6063      	str	r3, [r4, #4]
 800b622:	6923      	ldr	r3, [r4, #16]
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	04cb      	lsls	r3, r1, #19
 800b628:	d505      	bpl.n	800b636 <__sflush_r+0x82>
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	d102      	bne.n	800b634 <__sflush_r+0x80>
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d100      	bne.n	800b636 <__sflush_r+0x82>
 800b634:	6560      	str	r0, [r4, #84]	; 0x54
 800b636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b638:	602e      	str	r6, [r5, #0]
 800b63a:	2900      	cmp	r1, #0
 800b63c:	d0c6      	beq.n	800b5cc <__sflush_r+0x18>
 800b63e:	0023      	movs	r3, r4
 800b640:	3344      	adds	r3, #68	; 0x44
 800b642:	4299      	cmp	r1, r3
 800b644:	d002      	beq.n	800b64c <__sflush_r+0x98>
 800b646:	0028      	movs	r0, r5
 800b648:	f001 fa88 	bl	800cb5c <_free_r>
 800b64c:	2000      	movs	r0, #0
 800b64e:	6360      	str	r0, [r4, #52]	; 0x34
 800b650:	e7bd      	b.n	800b5ce <__sflush_r+0x1a>
 800b652:	2301      	movs	r3, #1
 800b654:	0028      	movs	r0, r5
 800b656:	6a21      	ldr	r1, [r4, #32]
 800b658:	47b8      	blx	r7
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d1c5      	bne.n	800b5ea <__sflush_r+0x36>
 800b65e:	682b      	ldr	r3, [r5, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0c2      	beq.n	800b5ea <__sflush_r+0x36>
 800b664:	2b1d      	cmp	r3, #29
 800b666:	d001      	beq.n	800b66c <__sflush_r+0xb8>
 800b668:	2b16      	cmp	r3, #22
 800b66a:	d101      	bne.n	800b670 <__sflush_r+0xbc>
 800b66c:	602e      	str	r6, [r5, #0]
 800b66e:	e7ad      	b.n	800b5cc <__sflush_r+0x18>
 800b670:	2340      	movs	r3, #64	; 0x40
 800b672:	89a2      	ldrh	r2, [r4, #12]
 800b674:	4313      	orrs	r3, r2
 800b676:	81a3      	strh	r3, [r4, #12]
 800b678:	e7a9      	b.n	800b5ce <__sflush_r+0x1a>
 800b67a:	2340      	movs	r3, #64	; 0x40
 800b67c:	430b      	orrs	r3, r1
 800b67e:	e7fa      	b.n	800b676 <__sflush_r+0xc2>
 800b680:	690f      	ldr	r7, [r1, #16]
 800b682:	2f00      	cmp	r7, #0
 800b684:	d0a2      	beq.n	800b5cc <__sflush_r+0x18>
 800b686:	680a      	ldr	r2, [r1, #0]
 800b688:	600f      	str	r7, [r1, #0]
 800b68a:	1bd2      	subs	r2, r2, r7
 800b68c:	9201      	str	r2, [sp, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	079b      	lsls	r3, r3, #30
 800b692:	d100      	bne.n	800b696 <__sflush_r+0xe2>
 800b694:	694a      	ldr	r2, [r1, #20]
 800b696:	60a2      	str	r2, [r4, #8]
 800b698:	9b01      	ldr	r3, [sp, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dc00      	bgt.n	800b6a0 <__sflush_r+0xec>
 800b69e:	e795      	b.n	800b5cc <__sflush_r+0x18>
 800b6a0:	003a      	movs	r2, r7
 800b6a2:	0028      	movs	r0, r5
 800b6a4:	9b01      	ldr	r3, [sp, #4]
 800b6a6:	6a21      	ldr	r1, [r4, #32]
 800b6a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6aa:	47b0      	blx	r6
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	dc06      	bgt.n	800b6be <__sflush_r+0x10a>
 800b6b0:	2340      	movs	r3, #64	; 0x40
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	89a2      	ldrh	r2, [r4, #12]
 800b6b6:	4240      	negs	r0, r0
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	e787      	b.n	800b5ce <__sflush_r+0x1a>
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	183f      	adds	r7, r7, r0
 800b6c2:	1a1b      	subs	r3, r3, r0
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	e7e7      	b.n	800b698 <__sflush_r+0xe4>
 800b6c8:	20400001 	.word	0x20400001

0800b6cc <_fflush_r>:
 800b6cc:	690b      	ldr	r3, [r1, #16]
 800b6ce:	b570      	push	{r4, r5, r6, lr}
 800b6d0:	0005      	movs	r5, r0
 800b6d2:	000c      	movs	r4, r1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <_fflush_r+0x12>
 800b6d8:	2500      	movs	r5, #0
 800b6da:	0028      	movs	r0, r5
 800b6dc:	bd70      	pop	{r4, r5, r6, pc}
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d004      	beq.n	800b6ec <_fflush_r+0x20>
 800b6e2:	6983      	ldr	r3, [r0, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <_fflush_r+0x20>
 800b6e8:	f000 f892 	bl	800b810 <__sinit>
 800b6ec:	4b14      	ldr	r3, [pc, #80]	; (800b740 <_fflush_r+0x74>)
 800b6ee:	429c      	cmp	r4, r3
 800b6f0:	d11b      	bne.n	800b72a <_fflush_r+0x5e>
 800b6f2:	686c      	ldr	r4, [r5, #4]
 800b6f4:	220c      	movs	r2, #12
 800b6f6:	5ea3      	ldrsh	r3, [r4, r2]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0ed      	beq.n	800b6d8 <_fflush_r+0xc>
 800b6fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6fe:	07d2      	lsls	r2, r2, #31
 800b700:	d404      	bmi.n	800b70c <_fflush_r+0x40>
 800b702:	059b      	lsls	r3, r3, #22
 800b704:	d402      	bmi.n	800b70c <_fflush_r+0x40>
 800b706:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b708:	f000 fc9b 	bl	800c042 <__retarget_lock_acquire_recursive>
 800b70c:	0028      	movs	r0, r5
 800b70e:	0021      	movs	r1, r4
 800b710:	f7ff ff50 	bl	800b5b4 <__sflush_r>
 800b714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b716:	0005      	movs	r5, r0
 800b718:	07db      	lsls	r3, r3, #31
 800b71a:	d4de      	bmi.n	800b6da <_fflush_r+0xe>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	059b      	lsls	r3, r3, #22
 800b720:	d4db      	bmi.n	800b6da <_fflush_r+0xe>
 800b722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b724:	f000 fc8e 	bl	800c044 <__retarget_lock_release_recursive>
 800b728:	e7d7      	b.n	800b6da <_fflush_r+0xe>
 800b72a:	4b06      	ldr	r3, [pc, #24]	; (800b744 <_fflush_r+0x78>)
 800b72c:	429c      	cmp	r4, r3
 800b72e:	d101      	bne.n	800b734 <_fflush_r+0x68>
 800b730:	68ac      	ldr	r4, [r5, #8]
 800b732:	e7df      	b.n	800b6f4 <_fflush_r+0x28>
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <_fflush_r+0x7c>)
 800b736:	429c      	cmp	r4, r3
 800b738:	d1dc      	bne.n	800b6f4 <_fflush_r+0x28>
 800b73a:	68ec      	ldr	r4, [r5, #12]
 800b73c:	e7da      	b.n	800b6f4 <_fflush_r+0x28>
 800b73e:	46c0      	nop			; (mov r8, r8)
 800b740:	0800da44 	.word	0x0800da44
 800b744:	0800da64 	.word	0x0800da64
 800b748:	0800da24 	.word	0x0800da24

0800b74c <std>:
 800b74c:	2300      	movs	r3, #0
 800b74e:	b510      	push	{r4, lr}
 800b750:	0004      	movs	r4, r0
 800b752:	6003      	str	r3, [r0, #0]
 800b754:	6043      	str	r3, [r0, #4]
 800b756:	6083      	str	r3, [r0, #8]
 800b758:	8181      	strh	r1, [r0, #12]
 800b75a:	6643      	str	r3, [r0, #100]	; 0x64
 800b75c:	0019      	movs	r1, r3
 800b75e:	81c2      	strh	r2, [r0, #14]
 800b760:	6103      	str	r3, [r0, #16]
 800b762:	6143      	str	r3, [r0, #20]
 800b764:	6183      	str	r3, [r0, #24]
 800b766:	2208      	movs	r2, #8
 800b768:	305c      	adds	r0, #92	; 0x5c
 800b76a:	f7fd f9b0 	bl	8008ace <memset>
 800b76e:	4b05      	ldr	r3, [pc, #20]	; (800b784 <std+0x38>)
 800b770:	6224      	str	r4, [r4, #32]
 800b772:	6263      	str	r3, [r4, #36]	; 0x24
 800b774:	4b04      	ldr	r3, [pc, #16]	; (800b788 <std+0x3c>)
 800b776:	62a3      	str	r3, [r4, #40]	; 0x28
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <std+0x40>)
 800b77a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <std+0x44>)
 800b77e:	6323      	str	r3, [r4, #48]	; 0x30
 800b780:	bd10      	pop	{r4, pc}
 800b782:	46c0      	nop			; (mov r8, r8)
 800b784:	0800d2d9 	.word	0x0800d2d9
 800b788:	0800d301 	.word	0x0800d301
 800b78c:	0800d339 	.word	0x0800d339
 800b790:	0800d365 	.word	0x0800d365

0800b794 <_cleanup_r>:
 800b794:	b510      	push	{r4, lr}
 800b796:	4902      	ldr	r1, [pc, #8]	; (800b7a0 <_cleanup_r+0xc>)
 800b798:	f000 f8ba 	bl	800b910 <_fwalk_reent>
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	0800b6cd 	.word	0x0800b6cd

0800b7a4 <__sfmoreglue>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	2568      	movs	r5, #104	; 0x68
 800b7a8:	1e4a      	subs	r2, r1, #1
 800b7aa:	4355      	muls	r5, r2
 800b7ac:	000e      	movs	r6, r1
 800b7ae:	0029      	movs	r1, r5
 800b7b0:	3174      	adds	r1, #116	; 0x74
 800b7b2:	f001 fa3f 	bl	800cc34 <_malloc_r>
 800b7b6:	1e04      	subs	r4, r0, #0
 800b7b8:	d008      	beq.n	800b7cc <__sfmoreglue+0x28>
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	002a      	movs	r2, r5
 800b7be:	6001      	str	r1, [r0, #0]
 800b7c0:	6046      	str	r6, [r0, #4]
 800b7c2:	300c      	adds	r0, #12
 800b7c4:	60a0      	str	r0, [r4, #8]
 800b7c6:	3268      	adds	r2, #104	; 0x68
 800b7c8:	f7fd f981 	bl	8008ace <memset>
 800b7cc:	0020      	movs	r0, r4
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}

0800b7d0 <__sfp_lock_acquire>:
 800b7d0:	b510      	push	{r4, lr}
 800b7d2:	4802      	ldr	r0, [pc, #8]	; (800b7dc <__sfp_lock_acquire+0xc>)
 800b7d4:	f000 fc35 	bl	800c042 <__retarget_lock_acquire_recursive>
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	46c0      	nop			; (mov r8, r8)
 800b7dc:	20000625 	.word	0x20000625

0800b7e0 <__sfp_lock_release>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	4802      	ldr	r0, [pc, #8]	; (800b7ec <__sfp_lock_release+0xc>)
 800b7e4:	f000 fc2e 	bl	800c044 <__retarget_lock_release_recursive>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	20000625 	.word	0x20000625

0800b7f0 <__sinit_lock_acquire>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	4802      	ldr	r0, [pc, #8]	; (800b7fc <__sinit_lock_acquire+0xc>)
 800b7f4:	f000 fc25 	bl	800c042 <__retarget_lock_acquire_recursive>
 800b7f8:	bd10      	pop	{r4, pc}
 800b7fa:	46c0      	nop			; (mov r8, r8)
 800b7fc:	20000626 	.word	0x20000626

0800b800 <__sinit_lock_release>:
 800b800:	b510      	push	{r4, lr}
 800b802:	4802      	ldr	r0, [pc, #8]	; (800b80c <__sinit_lock_release+0xc>)
 800b804:	f000 fc1e 	bl	800c044 <__retarget_lock_release_recursive>
 800b808:	bd10      	pop	{r4, pc}
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	20000626 	.word	0x20000626

0800b810 <__sinit>:
 800b810:	b513      	push	{r0, r1, r4, lr}
 800b812:	0004      	movs	r4, r0
 800b814:	f7ff ffec 	bl	800b7f0 <__sinit_lock_acquire>
 800b818:	69a3      	ldr	r3, [r4, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <__sinit+0x14>
 800b81e:	f7ff ffef 	bl	800b800 <__sinit_lock_release>
 800b822:	bd13      	pop	{r0, r1, r4, pc}
 800b824:	64a3      	str	r3, [r4, #72]	; 0x48
 800b826:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b828:	6523      	str	r3, [r4, #80]	; 0x50
 800b82a:	4b13      	ldr	r3, [pc, #76]	; (800b878 <__sinit+0x68>)
 800b82c:	4a13      	ldr	r2, [pc, #76]	; (800b87c <__sinit+0x6c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	62a2      	str	r2, [r4, #40]	; 0x28
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	42a3      	cmp	r3, r4
 800b836:	d101      	bne.n	800b83c <__sinit+0x2c>
 800b838:	2301      	movs	r3, #1
 800b83a:	61a3      	str	r3, [r4, #24]
 800b83c:	0020      	movs	r0, r4
 800b83e:	f000 f81f 	bl	800b880 <__sfp>
 800b842:	6060      	str	r0, [r4, #4]
 800b844:	0020      	movs	r0, r4
 800b846:	f000 f81b 	bl	800b880 <__sfp>
 800b84a:	60a0      	str	r0, [r4, #8]
 800b84c:	0020      	movs	r0, r4
 800b84e:	f000 f817 	bl	800b880 <__sfp>
 800b852:	2200      	movs	r2, #0
 800b854:	2104      	movs	r1, #4
 800b856:	60e0      	str	r0, [r4, #12]
 800b858:	6860      	ldr	r0, [r4, #4]
 800b85a:	f7ff ff77 	bl	800b74c <std>
 800b85e:	2201      	movs	r2, #1
 800b860:	2109      	movs	r1, #9
 800b862:	68a0      	ldr	r0, [r4, #8]
 800b864:	f7ff ff72 	bl	800b74c <std>
 800b868:	2202      	movs	r2, #2
 800b86a:	2112      	movs	r1, #18
 800b86c:	68e0      	ldr	r0, [r4, #12]
 800b86e:	f7ff ff6d 	bl	800b74c <std>
 800b872:	2301      	movs	r3, #1
 800b874:	61a3      	str	r3, [r4, #24]
 800b876:	e7d2      	b.n	800b81e <__sinit+0xe>
 800b878:	0800d7fc 	.word	0x0800d7fc
 800b87c:	0800b795 	.word	0x0800b795

0800b880 <__sfp>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	0007      	movs	r7, r0
 800b884:	f7ff ffa4 	bl	800b7d0 <__sfp_lock_acquire>
 800b888:	4b1f      	ldr	r3, [pc, #124]	; (800b908 <__sfp+0x88>)
 800b88a:	681e      	ldr	r6, [r3, #0]
 800b88c:	69b3      	ldr	r3, [r6, #24]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <__sfp+0x18>
 800b892:	0030      	movs	r0, r6
 800b894:	f7ff ffbc 	bl	800b810 <__sinit>
 800b898:	3648      	adds	r6, #72	; 0x48
 800b89a:	68b4      	ldr	r4, [r6, #8]
 800b89c:	6873      	ldr	r3, [r6, #4]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	d504      	bpl.n	800b8ac <__sfp+0x2c>
 800b8a2:	6833      	ldr	r3, [r6, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d022      	beq.n	800b8ee <__sfp+0x6e>
 800b8a8:	6836      	ldr	r6, [r6, #0]
 800b8aa:	e7f6      	b.n	800b89a <__sfp+0x1a>
 800b8ac:	220c      	movs	r2, #12
 800b8ae:	5ea5      	ldrsh	r5, [r4, r2]
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d11a      	bne.n	800b8ea <__sfp+0x6a>
 800b8b4:	0020      	movs	r0, r4
 800b8b6:	4b15      	ldr	r3, [pc, #84]	; (800b90c <__sfp+0x8c>)
 800b8b8:	3058      	adds	r0, #88	; 0x58
 800b8ba:	60e3      	str	r3, [r4, #12]
 800b8bc:	6665      	str	r5, [r4, #100]	; 0x64
 800b8be:	f000 fbbf 	bl	800c040 <__retarget_lock_init_recursive>
 800b8c2:	f7ff ff8d 	bl	800b7e0 <__sfp_lock_release>
 800b8c6:	0020      	movs	r0, r4
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	0029      	movs	r1, r5
 800b8cc:	6025      	str	r5, [r4, #0]
 800b8ce:	60a5      	str	r5, [r4, #8]
 800b8d0:	6065      	str	r5, [r4, #4]
 800b8d2:	6125      	str	r5, [r4, #16]
 800b8d4:	6165      	str	r5, [r4, #20]
 800b8d6:	61a5      	str	r5, [r4, #24]
 800b8d8:	305c      	adds	r0, #92	; 0x5c
 800b8da:	f7fd f8f8 	bl	8008ace <memset>
 800b8de:	6365      	str	r5, [r4, #52]	; 0x34
 800b8e0:	63a5      	str	r5, [r4, #56]	; 0x38
 800b8e2:	64a5      	str	r5, [r4, #72]	; 0x48
 800b8e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b8e6:	0020      	movs	r0, r4
 800b8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ea:	3468      	adds	r4, #104	; 0x68
 800b8ec:	e7d7      	b.n	800b89e <__sfp+0x1e>
 800b8ee:	2104      	movs	r1, #4
 800b8f0:	0038      	movs	r0, r7
 800b8f2:	f7ff ff57 	bl	800b7a4 <__sfmoreglue>
 800b8f6:	1e04      	subs	r4, r0, #0
 800b8f8:	6030      	str	r0, [r6, #0]
 800b8fa:	d1d5      	bne.n	800b8a8 <__sfp+0x28>
 800b8fc:	f7ff ff70 	bl	800b7e0 <__sfp_lock_release>
 800b900:	230c      	movs	r3, #12
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	e7ef      	b.n	800b8e6 <__sfp+0x66>
 800b906:	46c0      	nop			; (mov r8, r8)
 800b908:	0800d7fc 	.word	0x0800d7fc
 800b90c:	ffff0001 	.word	0xffff0001

0800b910 <_fwalk_reent>:
 800b910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b912:	0004      	movs	r4, r0
 800b914:	0006      	movs	r6, r0
 800b916:	2700      	movs	r7, #0
 800b918:	9101      	str	r1, [sp, #4]
 800b91a:	3448      	adds	r4, #72	; 0x48
 800b91c:	6863      	ldr	r3, [r4, #4]
 800b91e:	68a5      	ldr	r5, [r4, #8]
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	9b00      	ldr	r3, [sp, #0]
 800b924:	3b01      	subs	r3, #1
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	d504      	bpl.n	800b934 <_fwalk_reent+0x24>
 800b92a:	6824      	ldr	r4, [r4, #0]
 800b92c:	2c00      	cmp	r4, #0
 800b92e:	d1f5      	bne.n	800b91c <_fwalk_reent+0xc>
 800b930:	0038      	movs	r0, r7
 800b932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b934:	89ab      	ldrh	r3, [r5, #12]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d908      	bls.n	800b94c <_fwalk_reent+0x3c>
 800b93a:	220e      	movs	r2, #14
 800b93c:	5eab      	ldrsh	r3, [r5, r2]
 800b93e:	3301      	adds	r3, #1
 800b940:	d004      	beq.n	800b94c <_fwalk_reent+0x3c>
 800b942:	0029      	movs	r1, r5
 800b944:	0030      	movs	r0, r6
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	4798      	blx	r3
 800b94a:	4307      	orrs	r7, r0
 800b94c:	3568      	adds	r5, #104	; 0x68
 800b94e:	e7e8      	b.n	800b922 <_fwalk_reent+0x12>

0800b950 <rshift>:
 800b950:	0002      	movs	r2, r0
 800b952:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b954:	6904      	ldr	r4, [r0, #16]
 800b956:	3214      	adds	r2, #20
 800b958:	0013      	movs	r3, r2
 800b95a:	b085      	sub	sp, #20
 800b95c:	114f      	asrs	r7, r1, #5
 800b95e:	42bc      	cmp	r4, r7
 800b960:	dd31      	ble.n	800b9c6 <rshift+0x76>
 800b962:	00bb      	lsls	r3, r7, #2
 800b964:	18d3      	adds	r3, r2, r3
 800b966:	261f      	movs	r6, #31
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	000b      	movs	r3, r1
 800b96c:	00a5      	lsls	r5, r4, #2
 800b96e:	4033      	ands	r3, r6
 800b970:	1955      	adds	r5, r2, r5
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	4231      	tst	r1, r6
 800b976:	d10c      	bne.n	800b992 <rshift+0x42>
 800b978:	0016      	movs	r6, r2
 800b97a:	9901      	ldr	r1, [sp, #4]
 800b97c:	428d      	cmp	r5, r1
 800b97e:	d838      	bhi.n	800b9f2 <rshift+0xa2>
 800b980:	9901      	ldr	r1, [sp, #4]
 800b982:	2300      	movs	r3, #0
 800b984:	3903      	subs	r1, #3
 800b986:	428d      	cmp	r5, r1
 800b988:	d301      	bcc.n	800b98e <rshift+0x3e>
 800b98a:	1be3      	subs	r3, r4, r7
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	18d3      	adds	r3, r2, r3
 800b990:	e019      	b.n	800b9c6 <rshift+0x76>
 800b992:	2120      	movs	r1, #32
 800b994:	9b02      	ldr	r3, [sp, #8]
 800b996:	9e01      	ldr	r6, [sp, #4]
 800b998:	1acb      	subs	r3, r1, r3
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	ce02      	ldmia	r6!, {r1}
 800b99e:	9b02      	ldr	r3, [sp, #8]
 800b9a0:	4694      	mov	ip, r2
 800b9a2:	40d9      	lsrs	r1, r3
 800b9a4:	9100      	str	r1, [sp, #0]
 800b9a6:	42b5      	cmp	r5, r6
 800b9a8:	d816      	bhi.n	800b9d8 <rshift+0x88>
 800b9aa:	9e01      	ldr	r6, [sp, #4]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	42b5      	cmp	r5, r6
 800b9b2:	d302      	bcc.n	800b9ba <rshift+0x6a>
 800b9b4:	1be3      	subs	r3, r4, r7
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	3b04      	subs	r3, #4
 800b9ba:	9900      	ldr	r1, [sp, #0]
 800b9bc:	18d3      	adds	r3, r2, r3
 800b9be:	6019      	str	r1, [r3, #0]
 800b9c0:	2900      	cmp	r1, #0
 800b9c2:	d000      	beq.n	800b9c6 <rshift+0x76>
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	1a99      	subs	r1, r3, r2
 800b9c8:	1089      	asrs	r1, r1, #2
 800b9ca:	6101      	str	r1, [r0, #16]
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d101      	bne.n	800b9d4 <rshift+0x84>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	6143      	str	r3, [r0, #20]
 800b9d4:	b005      	add	sp, #20
 800b9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	9903      	ldr	r1, [sp, #12]
 800b9dc:	408b      	lsls	r3, r1
 800b9de:	9900      	ldr	r1, [sp, #0]
 800b9e0:	4319      	orrs	r1, r3
 800b9e2:	4663      	mov	r3, ip
 800b9e4:	c302      	stmia	r3!, {r1}
 800b9e6:	469c      	mov	ip, r3
 800b9e8:	ce02      	ldmia	r6!, {r1}
 800b9ea:	9b02      	ldr	r3, [sp, #8]
 800b9ec:	40d9      	lsrs	r1, r3
 800b9ee:	9100      	str	r1, [sp, #0]
 800b9f0:	e7d9      	b.n	800b9a6 <rshift+0x56>
 800b9f2:	c908      	ldmia	r1!, {r3}
 800b9f4:	c608      	stmia	r6!, {r3}
 800b9f6:	e7c1      	b.n	800b97c <rshift+0x2c>

0800b9f8 <__hexdig_fun>:
 800b9f8:	0002      	movs	r2, r0
 800b9fa:	3a30      	subs	r2, #48	; 0x30
 800b9fc:	0003      	movs	r3, r0
 800b9fe:	2a09      	cmp	r2, #9
 800ba00:	d802      	bhi.n	800ba08 <__hexdig_fun+0x10>
 800ba02:	3b20      	subs	r3, #32
 800ba04:	b2d8      	uxtb	r0, r3
 800ba06:	4770      	bx	lr
 800ba08:	0002      	movs	r2, r0
 800ba0a:	3a61      	subs	r2, #97	; 0x61
 800ba0c:	2a05      	cmp	r2, #5
 800ba0e:	d801      	bhi.n	800ba14 <__hexdig_fun+0x1c>
 800ba10:	3b47      	subs	r3, #71	; 0x47
 800ba12:	e7f7      	b.n	800ba04 <__hexdig_fun+0xc>
 800ba14:	001a      	movs	r2, r3
 800ba16:	3a41      	subs	r2, #65	; 0x41
 800ba18:	2000      	movs	r0, #0
 800ba1a:	2a05      	cmp	r2, #5
 800ba1c:	d8f3      	bhi.n	800ba06 <__hexdig_fun+0xe>
 800ba1e:	3b27      	subs	r3, #39	; 0x27
 800ba20:	e7f0      	b.n	800ba04 <__hexdig_fun+0xc>
	...

0800ba24 <__gethex>:
 800ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba26:	b08d      	sub	sp, #52	; 0x34
 800ba28:	930a      	str	r3, [sp, #40]	; 0x28
 800ba2a:	4bbf      	ldr	r3, [pc, #764]	; (800bd28 <__gethex+0x304>)
 800ba2c:	9005      	str	r0, [sp, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	9109      	str	r1, [sp, #36]	; 0x24
 800ba32:	0018      	movs	r0, r3
 800ba34:	9202      	str	r2, [sp, #8]
 800ba36:	9307      	str	r3, [sp, #28]
 800ba38:	f7f4 fb66 	bl	8000108 <strlen>
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	9b07      	ldr	r3, [sp, #28]
 800ba40:	4252      	negs	r2, r2
 800ba42:	181b      	adds	r3, r3, r0
 800ba44:	3b01      	subs	r3, #1
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	9003      	str	r0, [sp, #12]
 800ba4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4e:	6819      	ldr	r1, [r3, #0]
 800ba50:	1c8b      	adds	r3, r1, #2
 800ba52:	1a52      	subs	r2, r2, r1
 800ba54:	18d1      	adds	r1, r2, r3
 800ba56:	9301      	str	r3, [sp, #4]
 800ba58:	9108      	str	r1, [sp, #32]
 800ba5a:	9901      	ldr	r1, [sp, #4]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	7808      	ldrb	r0, [r1, #0]
 800ba60:	2830      	cmp	r0, #48	; 0x30
 800ba62:	d0f7      	beq.n	800ba54 <__gethex+0x30>
 800ba64:	f7ff ffc8 	bl	800b9f8 <__hexdig_fun>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	001c      	movs	r4, r3
 800ba6c:	9304      	str	r3, [sp, #16]
 800ba6e:	4298      	cmp	r0, r3
 800ba70:	d11f      	bne.n	800bab2 <__gethex+0x8e>
 800ba72:	9a03      	ldr	r2, [sp, #12]
 800ba74:	9907      	ldr	r1, [sp, #28]
 800ba76:	9801      	ldr	r0, [sp, #4]
 800ba78:	f001 fc7a 	bl	800d370 <strncmp>
 800ba7c:	0007      	movs	r7, r0
 800ba7e:	42a0      	cmp	r0, r4
 800ba80:	d000      	beq.n	800ba84 <__gethex+0x60>
 800ba82:	e06b      	b.n	800bb5c <__gethex+0x138>
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	9a03      	ldr	r2, [sp, #12]
 800ba88:	5c98      	ldrb	r0, [r3, r2]
 800ba8a:	189d      	adds	r5, r3, r2
 800ba8c:	f7ff ffb4 	bl	800b9f8 <__hexdig_fun>
 800ba90:	2301      	movs	r3, #1
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	42a0      	cmp	r0, r4
 800ba96:	d030      	beq.n	800bafa <__gethex+0xd6>
 800ba98:	9501      	str	r5, [sp, #4]
 800ba9a:	9b01      	ldr	r3, [sp, #4]
 800ba9c:	7818      	ldrb	r0, [r3, #0]
 800ba9e:	2830      	cmp	r0, #48	; 0x30
 800baa0:	d009      	beq.n	800bab6 <__gethex+0x92>
 800baa2:	f7ff ffa9 	bl	800b9f8 <__hexdig_fun>
 800baa6:	4242      	negs	r2, r0
 800baa8:	4142      	adcs	r2, r0
 800baaa:	2301      	movs	r3, #1
 800baac:	002c      	movs	r4, r5
 800baae:	9204      	str	r2, [sp, #16]
 800bab0:	9308      	str	r3, [sp, #32]
 800bab2:	9d01      	ldr	r5, [sp, #4]
 800bab4:	e004      	b.n	800bac0 <__gethex+0x9c>
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	3301      	adds	r3, #1
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	e7ed      	b.n	800ba9a <__gethex+0x76>
 800babe:	3501      	adds	r5, #1
 800bac0:	7828      	ldrb	r0, [r5, #0]
 800bac2:	f7ff ff99 	bl	800b9f8 <__hexdig_fun>
 800bac6:	1e07      	subs	r7, r0, #0
 800bac8:	d1f9      	bne.n	800babe <__gethex+0x9a>
 800baca:	0028      	movs	r0, r5
 800bacc:	9a03      	ldr	r2, [sp, #12]
 800bace:	9907      	ldr	r1, [sp, #28]
 800bad0:	f001 fc4e 	bl	800d370 <strncmp>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d10e      	bne.n	800baf6 <__gethex+0xd2>
 800bad8:	2c00      	cmp	r4, #0
 800bada:	d107      	bne.n	800baec <__gethex+0xc8>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	18ed      	adds	r5, r5, r3
 800bae0:	002c      	movs	r4, r5
 800bae2:	7828      	ldrb	r0, [r5, #0]
 800bae4:	f7ff ff88 	bl	800b9f8 <__hexdig_fun>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d102      	bne.n	800baf2 <__gethex+0xce>
 800baec:	1b64      	subs	r4, r4, r5
 800baee:	00a7      	lsls	r7, r4, #2
 800baf0:	e003      	b.n	800bafa <__gethex+0xd6>
 800baf2:	3501      	adds	r5, #1
 800baf4:	e7f5      	b.n	800bae2 <__gethex+0xbe>
 800baf6:	2c00      	cmp	r4, #0
 800baf8:	d1f8      	bne.n	800baec <__gethex+0xc8>
 800bafa:	2220      	movs	r2, #32
 800bafc:	782b      	ldrb	r3, [r5, #0]
 800bafe:	002e      	movs	r6, r5
 800bb00:	4393      	bics	r3, r2
 800bb02:	2b50      	cmp	r3, #80	; 0x50
 800bb04:	d11d      	bne.n	800bb42 <__gethex+0x11e>
 800bb06:	786b      	ldrb	r3, [r5, #1]
 800bb08:	2b2b      	cmp	r3, #43	; 0x2b
 800bb0a:	d02c      	beq.n	800bb66 <__gethex+0x142>
 800bb0c:	2b2d      	cmp	r3, #45	; 0x2d
 800bb0e:	d02e      	beq.n	800bb6e <__gethex+0x14a>
 800bb10:	2300      	movs	r3, #0
 800bb12:	1c6e      	adds	r6, r5, #1
 800bb14:	9306      	str	r3, [sp, #24]
 800bb16:	7830      	ldrb	r0, [r6, #0]
 800bb18:	f7ff ff6e 	bl	800b9f8 <__hexdig_fun>
 800bb1c:	1e43      	subs	r3, r0, #1
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b18      	cmp	r3, #24
 800bb22:	d82b      	bhi.n	800bb7c <__gethex+0x158>
 800bb24:	3810      	subs	r0, #16
 800bb26:	0004      	movs	r4, r0
 800bb28:	7870      	ldrb	r0, [r6, #1]
 800bb2a:	f7ff ff65 	bl	800b9f8 <__hexdig_fun>
 800bb2e:	1e43      	subs	r3, r0, #1
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	3601      	adds	r6, #1
 800bb34:	2b18      	cmp	r3, #24
 800bb36:	d91c      	bls.n	800bb72 <__gethex+0x14e>
 800bb38:	9b06      	ldr	r3, [sp, #24]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d000      	beq.n	800bb40 <__gethex+0x11c>
 800bb3e:	4264      	negs	r4, r4
 800bb40:	193f      	adds	r7, r7, r4
 800bb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb44:	601e      	str	r6, [r3, #0]
 800bb46:	9b04      	ldr	r3, [sp, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d019      	beq.n	800bb80 <__gethex+0x15c>
 800bb4c:	2600      	movs	r6, #0
 800bb4e:	9b08      	ldr	r3, [sp, #32]
 800bb50:	42b3      	cmp	r3, r6
 800bb52:	d100      	bne.n	800bb56 <__gethex+0x132>
 800bb54:	3606      	adds	r6, #6
 800bb56:	0030      	movs	r0, r6
 800bb58:	b00d      	add	sp, #52	; 0x34
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	2700      	movs	r7, #0
 800bb60:	9d01      	ldr	r5, [sp, #4]
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	e7c9      	b.n	800bafa <__gethex+0xd6>
 800bb66:	2300      	movs	r3, #0
 800bb68:	9306      	str	r3, [sp, #24]
 800bb6a:	1cae      	adds	r6, r5, #2
 800bb6c:	e7d3      	b.n	800bb16 <__gethex+0xf2>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e7fa      	b.n	800bb68 <__gethex+0x144>
 800bb72:	230a      	movs	r3, #10
 800bb74:	435c      	muls	r4, r3
 800bb76:	1824      	adds	r4, r4, r0
 800bb78:	3c10      	subs	r4, #16
 800bb7a:	e7d5      	b.n	800bb28 <__gethex+0x104>
 800bb7c:	002e      	movs	r6, r5
 800bb7e:	e7e0      	b.n	800bb42 <__gethex+0x11e>
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	9904      	ldr	r1, [sp, #16]
 800bb84:	1aeb      	subs	r3, r5, r3
 800bb86:	3b01      	subs	r3, #1
 800bb88:	2b07      	cmp	r3, #7
 800bb8a:	dc0a      	bgt.n	800bba2 <__gethex+0x17e>
 800bb8c:	9805      	ldr	r0, [sp, #20]
 800bb8e:	f000 faef 	bl	800c170 <_Balloc>
 800bb92:	1e04      	subs	r4, r0, #0
 800bb94:	d108      	bne.n	800bba8 <__gethex+0x184>
 800bb96:	0002      	movs	r2, r0
 800bb98:	21de      	movs	r1, #222	; 0xde
 800bb9a:	4b64      	ldr	r3, [pc, #400]	; (800bd2c <__gethex+0x308>)
 800bb9c:	4864      	ldr	r0, [pc, #400]	; (800bd30 <__gethex+0x30c>)
 800bb9e:	f001 fc1b 	bl	800d3d8 <__assert_func>
 800bba2:	3101      	adds	r1, #1
 800bba4:	105b      	asrs	r3, r3, #1
 800bba6:	e7ef      	b.n	800bb88 <__gethex+0x164>
 800bba8:	0003      	movs	r3, r0
 800bbaa:	3314      	adds	r3, #20
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	001e      	movs	r6, r3
 800bbb4:	9306      	str	r3, [sp, #24]
 800bbb6:	9b01      	ldr	r3, [sp, #4]
 800bbb8:	42ab      	cmp	r3, r5
 800bbba:	d340      	bcc.n	800bc3e <__gethex+0x21a>
 800bbbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	c540      	stmia	r5!, {r6}
 800bbc2:	1aed      	subs	r5, r5, r3
 800bbc4:	10ad      	asrs	r5, r5, #2
 800bbc6:	0030      	movs	r0, r6
 800bbc8:	6125      	str	r5, [r4, #16]
 800bbca:	f000 fbc9 	bl	800c360 <__hi0bits>
 800bbce:	9b02      	ldr	r3, [sp, #8]
 800bbd0:	016d      	lsls	r5, r5, #5
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	1a2e      	subs	r6, r5, r0
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	429e      	cmp	r6, r3
 800bbda:	dd5a      	ble.n	800bc92 <__gethex+0x26e>
 800bbdc:	1af6      	subs	r6, r6, r3
 800bbde:	0031      	movs	r1, r6
 800bbe0:	0020      	movs	r0, r4
 800bbe2:	f000 ff6b 	bl	800cabc <__any_on>
 800bbe6:	1e05      	subs	r5, r0, #0
 800bbe8:	d016      	beq.n	800bc18 <__gethex+0x1f4>
 800bbea:	2501      	movs	r5, #1
 800bbec:	211f      	movs	r1, #31
 800bbee:	0028      	movs	r0, r5
 800bbf0:	1e73      	subs	r3, r6, #1
 800bbf2:	4019      	ands	r1, r3
 800bbf4:	4088      	lsls	r0, r1
 800bbf6:	0001      	movs	r1, r0
 800bbf8:	115a      	asrs	r2, r3, #5
 800bbfa:	9804      	ldr	r0, [sp, #16]
 800bbfc:	0092      	lsls	r2, r2, #2
 800bbfe:	5812      	ldr	r2, [r2, r0]
 800bc00:	420a      	tst	r2, r1
 800bc02:	d009      	beq.n	800bc18 <__gethex+0x1f4>
 800bc04:	42ab      	cmp	r3, r5
 800bc06:	dd06      	ble.n	800bc16 <__gethex+0x1f2>
 800bc08:	0020      	movs	r0, r4
 800bc0a:	1eb1      	subs	r1, r6, #2
 800bc0c:	f000 ff56 	bl	800cabc <__any_on>
 800bc10:	3502      	adds	r5, #2
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d100      	bne.n	800bc18 <__gethex+0x1f4>
 800bc16:	2502      	movs	r5, #2
 800bc18:	0031      	movs	r1, r6
 800bc1a:	0020      	movs	r0, r4
 800bc1c:	f7ff fe98 	bl	800b950 <rshift>
 800bc20:	19bf      	adds	r7, r7, r6
 800bc22:	9b02      	ldr	r3, [sp, #8]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	9303      	str	r3, [sp, #12]
 800bc28:	42bb      	cmp	r3, r7
 800bc2a:	da42      	bge.n	800bcb2 <__gethex+0x28e>
 800bc2c:	0021      	movs	r1, r4
 800bc2e:	9805      	ldr	r0, [sp, #20]
 800bc30:	f000 fae2 	bl	800c1f8 <_Bfree>
 800bc34:	2300      	movs	r3, #0
 800bc36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc38:	26a3      	movs	r6, #163	; 0xa3
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	e78b      	b.n	800bb56 <__gethex+0x132>
 800bc3e:	1e6b      	subs	r3, r5, #1
 800bc40:	9308      	str	r3, [sp, #32]
 800bc42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d014      	beq.n	800bc74 <__gethex+0x250>
 800bc4a:	9b06      	ldr	r3, [sp, #24]
 800bc4c:	2b20      	cmp	r3, #32
 800bc4e:	d104      	bne.n	800bc5a <__gethex+0x236>
 800bc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc52:	c340      	stmia	r3!, {r6}
 800bc54:	2600      	movs	r6, #0
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
 800bc58:	9606      	str	r6, [sp, #24]
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	7818      	ldrb	r0, [r3, #0]
 800bc5e:	f7ff fecb 	bl	800b9f8 <__hexdig_fun>
 800bc62:	230f      	movs	r3, #15
 800bc64:	4018      	ands	r0, r3
 800bc66:	9b06      	ldr	r3, [sp, #24]
 800bc68:	9d08      	ldr	r5, [sp, #32]
 800bc6a:	4098      	lsls	r0, r3
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	4306      	orrs	r6, r0
 800bc70:	9306      	str	r3, [sp, #24]
 800bc72:	e7a0      	b.n	800bbb6 <__gethex+0x192>
 800bc74:	2301      	movs	r3, #1
 800bc76:	9a03      	ldr	r2, [sp, #12]
 800bc78:	1a9d      	subs	r5, r3, r2
 800bc7a:	9b08      	ldr	r3, [sp, #32]
 800bc7c:	195d      	adds	r5, r3, r5
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	429d      	cmp	r5, r3
 800bc82:	d3e2      	bcc.n	800bc4a <__gethex+0x226>
 800bc84:	0028      	movs	r0, r5
 800bc86:	9907      	ldr	r1, [sp, #28]
 800bc88:	f001 fb72 	bl	800d370 <strncmp>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d1dc      	bne.n	800bc4a <__gethex+0x226>
 800bc90:	e791      	b.n	800bbb6 <__gethex+0x192>
 800bc92:	9b01      	ldr	r3, [sp, #4]
 800bc94:	2500      	movs	r5, #0
 800bc96:	429e      	cmp	r6, r3
 800bc98:	dac3      	bge.n	800bc22 <__gethex+0x1fe>
 800bc9a:	1b9e      	subs	r6, r3, r6
 800bc9c:	0021      	movs	r1, r4
 800bc9e:	0032      	movs	r2, r6
 800bca0:	9805      	ldr	r0, [sp, #20]
 800bca2:	f000 fcc7 	bl	800c634 <__lshift>
 800bca6:	0003      	movs	r3, r0
 800bca8:	3314      	adds	r3, #20
 800bcaa:	0004      	movs	r4, r0
 800bcac:	1bbf      	subs	r7, r7, r6
 800bcae:	9304      	str	r3, [sp, #16]
 800bcb0:	e7b7      	b.n	800bc22 <__gethex+0x1fe>
 800bcb2:	9b02      	ldr	r3, [sp, #8]
 800bcb4:	685e      	ldr	r6, [r3, #4]
 800bcb6:	42be      	cmp	r6, r7
 800bcb8:	dd71      	ble.n	800bd9e <__gethex+0x37a>
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	1bf6      	subs	r6, r6, r7
 800bcbe:	42b3      	cmp	r3, r6
 800bcc0:	dc38      	bgt.n	800bd34 <__gethex+0x310>
 800bcc2:	9b02      	ldr	r3, [sp, #8]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d026      	beq.n	800bd18 <__gethex+0x2f4>
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d028      	beq.n	800bd20 <__gethex+0x2fc>
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d119      	bne.n	800bd06 <__gethex+0x2e2>
 800bcd2:	9b01      	ldr	r3, [sp, #4]
 800bcd4:	42b3      	cmp	r3, r6
 800bcd6:	d116      	bne.n	800bd06 <__gethex+0x2e2>
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d10d      	bne.n	800bcf8 <__gethex+0x2d4>
 800bcdc:	9b02      	ldr	r3, [sp, #8]
 800bcde:	2662      	movs	r6, #98	; 0x62
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	9a01      	ldr	r2, [sp, #4]
 800bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	2301      	movs	r3, #1
 800bcec:	9a04      	ldr	r2, [sp, #16]
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcf4:	601c      	str	r4, [r3, #0]
 800bcf6:	e72e      	b.n	800bb56 <__gethex+0x132>
 800bcf8:	9901      	ldr	r1, [sp, #4]
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	3901      	subs	r1, #1
 800bcfe:	f000 fedd 	bl	800cabc <__any_on>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d1ea      	bne.n	800bcdc <__gethex+0x2b8>
 800bd06:	0021      	movs	r1, r4
 800bd08:	9805      	ldr	r0, [sp, #20]
 800bd0a:	f000 fa75 	bl	800c1f8 <_Bfree>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd12:	2650      	movs	r6, #80	; 0x50
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	e71e      	b.n	800bb56 <__gethex+0x132>
 800bd18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f3      	bne.n	800bd06 <__gethex+0x2e2>
 800bd1e:	e7dd      	b.n	800bcdc <__gethex+0x2b8>
 800bd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1da      	bne.n	800bcdc <__gethex+0x2b8>
 800bd26:	e7ee      	b.n	800bd06 <__gethex+0x2e2>
 800bd28:	0800daec 	.word	0x0800daec
 800bd2c:	0800da10 	.word	0x0800da10
 800bd30:	0800da84 	.word	0x0800da84
 800bd34:	1e77      	subs	r7, r6, #1
 800bd36:	2d00      	cmp	r5, #0
 800bd38:	d12f      	bne.n	800bd9a <__gethex+0x376>
 800bd3a:	2f00      	cmp	r7, #0
 800bd3c:	d004      	beq.n	800bd48 <__gethex+0x324>
 800bd3e:	0039      	movs	r1, r7
 800bd40:	0020      	movs	r0, r4
 800bd42:	f000 febb 	bl	800cabc <__any_on>
 800bd46:	0005      	movs	r5, r0
 800bd48:	231f      	movs	r3, #31
 800bd4a:	117a      	asrs	r2, r7, #5
 800bd4c:	401f      	ands	r7, r3
 800bd4e:	3b1e      	subs	r3, #30
 800bd50:	40bb      	lsls	r3, r7
 800bd52:	9904      	ldr	r1, [sp, #16]
 800bd54:	0092      	lsls	r2, r2, #2
 800bd56:	5852      	ldr	r2, [r2, r1]
 800bd58:	421a      	tst	r2, r3
 800bd5a:	d001      	beq.n	800bd60 <__gethex+0x33c>
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	431d      	orrs	r5, r3
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	0031      	movs	r1, r6
 800bd64:	1b9b      	subs	r3, r3, r6
 800bd66:	2602      	movs	r6, #2
 800bd68:	0020      	movs	r0, r4
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	f7ff fdf0 	bl	800b950 <rshift>
 800bd70:	9b02      	ldr	r3, [sp, #8]
 800bd72:	685f      	ldr	r7, [r3, #4]
 800bd74:	2d00      	cmp	r5, #0
 800bd76:	d041      	beq.n	800bdfc <__gethex+0x3d8>
 800bd78:	9b02      	ldr	r3, [sp, #8]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d010      	beq.n	800bda2 <__gethex+0x37e>
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d012      	beq.n	800bdaa <__gethex+0x386>
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d106      	bne.n	800bd96 <__gethex+0x372>
 800bd88:	07aa      	lsls	r2, r5, #30
 800bd8a:	d504      	bpl.n	800bd96 <__gethex+0x372>
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	6810      	ldr	r0, [r2, #0]
 800bd90:	4305      	orrs	r5, r0
 800bd92:	421d      	tst	r5, r3
 800bd94:	d10c      	bne.n	800bdb0 <__gethex+0x38c>
 800bd96:	2310      	movs	r3, #16
 800bd98:	e02f      	b.n	800bdfa <__gethex+0x3d6>
 800bd9a:	2501      	movs	r5, #1
 800bd9c:	e7d4      	b.n	800bd48 <__gethex+0x324>
 800bd9e:	2601      	movs	r6, #1
 800bda0:	e7e8      	b.n	800bd74 <__gethex+0x350>
 800bda2:	2301      	movs	r3, #1
 800bda4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bda6:	1a9b      	subs	r3, r3, r2
 800bda8:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0f2      	beq.n	800bd96 <__gethex+0x372>
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	9303      	str	r3, [sp, #12]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	9304      	str	r3, [sp, #16]
 800bdba:	0023      	movs	r3, r4
 800bdbc:	9a04      	ldr	r2, [sp, #16]
 800bdbe:	3314      	adds	r3, #20
 800bdc0:	1899      	adds	r1, r3, r2
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	1c55      	adds	r5, r2, #1
 800bdc6:	d01e      	beq.n	800be06 <__gethex+0x3e2>
 800bdc8:	3201      	adds	r2, #1
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	0023      	movs	r3, r4
 800bdce:	3314      	adds	r3, #20
 800bdd0:	2e02      	cmp	r6, #2
 800bdd2:	d140      	bne.n	800be56 <__gethex+0x432>
 800bdd4:	9a02      	ldr	r2, [sp, #8]
 800bdd6:	9901      	ldr	r1, [sp, #4]
 800bdd8:	6812      	ldr	r2, [r2, #0]
 800bdda:	3a01      	subs	r2, #1
 800bddc:	428a      	cmp	r2, r1
 800bdde:	d10b      	bne.n	800bdf8 <__gethex+0x3d4>
 800bde0:	114a      	asrs	r2, r1, #5
 800bde2:	211f      	movs	r1, #31
 800bde4:	9801      	ldr	r0, [sp, #4]
 800bde6:	0092      	lsls	r2, r2, #2
 800bde8:	4001      	ands	r1, r0
 800bdea:	2001      	movs	r0, #1
 800bdec:	0005      	movs	r5, r0
 800bdee:	408d      	lsls	r5, r1
 800bdf0:	58d3      	ldr	r3, [r2, r3]
 800bdf2:	422b      	tst	r3, r5
 800bdf4:	d000      	beq.n	800bdf8 <__gethex+0x3d4>
 800bdf6:	2601      	movs	r6, #1
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	431e      	orrs	r6, r3
 800bdfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdfe:	601c      	str	r4, [r3, #0]
 800be00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be02:	601f      	str	r7, [r3, #0]
 800be04:	e6a7      	b.n	800bb56 <__gethex+0x132>
 800be06:	c301      	stmia	r3!, {r0}
 800be08:	4299      	cmp	r1, r3
 800be0a:	d8da      	bhi.n	800bdc2 <__gethex+0x39e>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	68a2      	ldr	r2, [r4, #8]
 800be10:	4293      	cmp	r3, r2
 800be12:	db17      	blt.n	800be44 <__gethex+0x420>
 800be14:	6863      	ldr	r3, [r4, #4]
 800be16:	9805      	ldr	r0, [sp, #20]
 800be18:	1c59      	adds	r1, r3, #1
 800be1a:	f000 f9a9 	bl	800c170 <_Balloc>
 800be1e:	1e05      	subs	r5, r0, #0
 800be20:	d103      	bne.n	800be2a <__gethex+0x406>
 800be22:	0002      	movs	r2, r0
 800be24:	2184      	movs	r1, #132	; 0x84
 800be26:	4b1c      	ldr	r3, [pc, #112]	; (800be98 <__gethex+0x474>)
 800be28:	e6b8      	b.n	800bb9c <__gethex+0x178>
 800be2a:	0021      	movs	r1, r4
 800be2c:	6923      	ldr	r3, [r4, #16]
 800be2e:	310c      	adds	r1, #12
 800be30:	1c9a      	adds	r2, r3, #2
 800be32:	0092      	lsls	r2, r2, #2
 800be34:	300c      	adds	r0, #12
 800be36:	f7fc fe41 	bl	8008abc <memcpy>
 800be3a:	0021      	movs	r1, r4
 800be3c:	9805      	ldr	r0, [sp, #20]
 800be3e:	f000 f9db 	bl	800c1f8 <_Bfree>
 800be42:	002c      	movs	r4, r5
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	6122      	str	r2, [r4, #16]
 800be4a:	2201      	movs	r2, #1
 800be4c:	3304      	adds	r3, #4
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	18e3      	adds	r3, r4, r3
 800be52:	605a      	str	r2, [r3, #4]
 800be54:	e7ba      	b.n	800bdcc <__gethex+0x3a8>
 800be56:	6922      	ldr	r2, [r4, #16]
 800be58:	9903      	ldr	r1, [sp, #12]
 800be5a:	428a      	cmp	r2, r1
 800be5c:	dd09      	ble.n	800be72 <__gethex+0x44e>
 800be5e:	2101      	movs	r1, #1
 800be60:	0020      	movs	r0, r4
 800be62:	f7ff fd75 	bl	800b950 <rshift>
 800be66:	9b02      	ldr	r3, [sp, #8]
 800be68:	3701      	adds	r7, #1
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	42bb      	cmp	r3, r7
 800be6e:	dac2      	bge.n	800bdf6 <__gethex+0x3d2>
 800be70:	e6dc      	b.n	800bc2c <__gethex+0x208>
 800be72:	221f      	movs	r2, #31
 800be74:	9d01      	ldr	r5, [sp, #4]
 800be76:	9901      	ldr	r1, [sp, #4]
 800be78:	2601      	movs	r6, #1
 800be7a:	4015      	ands	r5, r2
 800be7c:	4211      	tst	r1, r2
 800be7e:	d0bb      	beq.n	800bdf8 <__gethex+0x3d4>
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	189b      	adds	r3, r3, r2
 800be84:	3b04      	subs	r3, #4
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	f000 fa6a 	bl	800c360 <__hi0bits>
 800be8c:	2320      	movs	r3, #32
 800be8e:	1b5d      	subs	r5, r3, r5
 800be90:	42a8      	cmp	r0, r5
 800be92:	dbe4      	blt.n	800be5e <__gethex+0x43a>
 800be94:	e7b0      	b.n	800bdf8 <__gethex+0x3d4>
 800be96:	46c0      	nop			; (mov r8, r8)
 800be98:	0800da10 	.word	0x0800da10

0800be9c <L_shift>:
 800be9c:	2308      	movs	r3, #8
 800be9e:	b570      	push	{r4, r5, r6, lr}
 800bea0:	2520      	movs	r5, #32
 800bea2:	1a9a      	subs	r2, r3, r2
 800bea4:	0092      	lsls	r2, r2, #2
 800bea6:	1aad      	subs	r5, r5, r2
 800bea8:	6843      	ldr	r3, [r0, #4]
 800beaa:	6806      	ldr	r6, [r0, #0]
 800beac:	001c      	movs	r4, r3
 800beae:	40ac      	lsls	r4, r5
 800beb0:	40d3      	lsrs	r3, r2
 800beb2:	4334      	orrs	r4, r6
 800beb4:	6004      	str	r4, [r0, #0]
 800beb6:	6043      	str	r3, [r0, #4]
 800beb8:	3004      	adds	r0, #4
 800beba:	4288      	cmp	r0, r1
 800bebc:	d3f4      	bcc.n	800bea8 <L_shift+0xc>
 800bebe:	bd70      	pop	{r4, r5, r6, pc}

0800bec0 <__match>:
 800bec0:	b530      	push	{r4, r5, lr}
 800bec2:	6803      	ldr	r3, [r0, #0]
 800bec4:	780c      	ldrb	r4, [r1, #0]
 800bec6:	3301      	adds	r3, #1
 800bec8:	2c00      	cmp	r4, #0
 800beca:	d102      	bne.n	800bed2 <__match+0x12>
 800becc:	6003      	str	r3, [r0, #0]
 800bece:	2001      	movs	r0, #1
 800bed0:	bd30      	pop	{r4, r5, pc}
 800bed2:	781a      	ldrb	r2, [r3, #0]
 800bed4:	0015      	movs	r5, r2
 800bed6:	3d41      	subs	r5, #65	; 0x41
 800bed8:	2d19      	cmp	r5, #25
 800beda:	d800      	bhi.n	800bede <__match+0x1e>
 800bedc:	3220      	adds	r2, #32
 800bede:	3101      	adds	r1, #1
 800bee0:	42a2      	cmp	r2, r4
 800bee2:	d0ef      	beq.n	800bec4 <__match+0x4>
 800bee4:	2000      	movs	r0, #0
 800bee6:	e7f3      	b.n	800bed0 <__match+0x10>

0800bee8 <__hexnan>:
 800bee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beea:	680b      	ldr	r3, [r1, #0]
 800beec:	b08b      	sub	sp, #44	; 0x2c
 800beee:	9201      	str	r2, [sp, #4]
 800bef0:	9901      	ldr	r1, [sp, #4]
 800bef2:	115a      	asrs	r2, r3, #5
 800bef4:	0092      	lsls	r2, r2, #2
 800bef6:	188a      	adds	r2, r1, r2
 800bef8:	9202      	str	r2, [sp, #8]
 800befa:	0019      	movs	r1, r3
 800befc:	221f      	movs	r2, #31
 800befe:	4011      	ands	r1, r2
 800bf00:	9008      	str	r0, [sp, #32]
 800bf02:	9106      	str	r1, [sp, #24]
 800bf04:	4213      	tst	r3, r2
 800bf06:	d002      	beq.n	800bf0e <__hexnan+0x26>
 800bf08:	9b02      	ldr	r3, [sp, #8]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	9302      	str	r3, [sp, #8]
 800bf0e:	9b02      	ldr	r3, [sp, #8]
 800bf10:	2500      	movs	r5, #0
 800bf12:	1f1e      	subs	r6, r3, #4
 800bf14:	0037      	movs	r7, r6
 800bf16:	0034      	movs	r4, r6
 800bf18:	9b08      	ldr	r3, [sp, #32]
 800bf1a:	6035      	str	r5, [r6, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	9507      	str	r5, [sp, #28]
 800bf20:	9305      	str	r3, [sp, #20]
 800bf22:	9503      	str	r5, [sp, #12]
 800bf24:	9b05      	ldr	r3, [sp, #20]
 800bf26:	3301      	adds	r3, #1
 800bf28:	9309      	str	r3, [sp, #36]	; 0x24
 800bf2a:	9b05      	ldr	r3, [sp, #20]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d028      	beq.n	800bf86 <__hexnan+0x9e>
 800bf34:	9804      	ldr	r0, [sp, #16]
 800bf36:	f7ff fd5f 	bl	800b9f8 <__hexdig_fun>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d154      	bne.n	800bfe8 <__hexnan+0x100>
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	2b20      	cmp	r3, #32
 800bf42:	d819      	bhi.n	800bf78 <__hexnan+0x90>
 800bf44:	9b03      	ldr	r3, [sp, #12]
 800bf46:	9a07      	ldr	r2, [sp, #28]
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	dd12      	ble.n	800bf72 <__hexnan+0x8a>
 800bf4c:	42bc      	cmp	r4, r7
 800bf4e:	d206      	bcs.n	800bf5e <__hexnan+0x76>
 800bf50:	2d07      	cmp	r5, #7
 800bf52:	dc04      	bgt.n	800bf5e <__hexnan+0x76>
 800bf54:	002a      	movs	r2, r5
 800bf56:	0039      	movs	r1, r7
 800bf58:	0020      	movs	r0, r4
 800bf5a:	f7ff ff9f 	bl	800be9c <L_shift>
 800bf5e:	9b01      	ldr	r3, [sp, #4]
 800bf60:	2508      	movs	r5, #8
 800bf62:	429c      	cmp	r4, r3
 800bf64:	d905      	bls.n	800bf72 <__hexnan+0x8a>
 800bf66:	1f27      	subs	r7, r4, #4
 800bf68:	2500      	movs	r5, #0
 800bf6a:	003c      	movs	r4, r7
 800bf6c:	9b03      	ldr	r3, [sp, #12]
 800bf6e:	603d      	str	r5, [r7, #0]
 800bf70:	9307      	str	r3, [sp, #28]
 800bf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf74:	9305      	str	r3, [sp, #20]
 800bf76:	e7d5      	b.n	800bf24 <__hexnan+0x3c>
 800bf78:	9b04      	ldr	r3, [sp, #16]
 800bf7a:	2b29      	cmp	r3, #41	; 0x29
 800bf7c:	d159      	bne.n	800c032 <__hexnan+0x14a>
 800bf7e:	9b05      	ldr	r3, [sp, #20]
 800bf80:	9a08      	ldr	r2, [sp, #32]
 800bf82:	3302      	adds	r3, #2
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d052      	beq.n	800c032 <__hexnan+0x14a>
 800bf8c:	42bc      	cmp	r4, r7
 800bf8e:	d206      	bcs.n	800bf9e <__hexnan+0xb6>
 800bf90:	2d07      	cmp	r5, #7
 800bf92:	dc04      	bgt.n	800bf9e <__hexnan+0xb6>
 800bf94:	002a      	movs	r2, r5
 800bf96:	0039      	movs	r1, r7
 800bf98:	0020      	movs	r0, r4
 800bf9a:	f7ff ff7f 	bl	800be9c <L_shift>
 800bf9e:	9b01      	ldr	r3, [sp, #4]
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	d935      	bls.n	800c010 <__hexnan+0x128>
 800bfa4:	001a      	movs	r2, r3
 800bfa6:	0023      	movs	r3, r4
 800bfa8:	cb02      	ldmia	r3!, {r1}
 800bfaa:	c202      	stmia	r2!, {r1}
 800bfac:	429e      	cmp	r6, r3
 800bfae:	d2fb      	bcs.n	800bfa8 <__hexnan+0xc0>
 800bfb0:	9b02      	ldr	r3, [sp, #8]
 800bfb2:	1c61      	adds	r1, r4, #1
 800bfb4:	1eda      	subs	r2, r3, #3
 800bfb6:	2304      	movs	r3, #4
 800bfb8:	4291      	cmp	r1, r2
 800bfba:	d805      	bhi.n	800bfc8 <__hexnan+0xe0>
 800bfbc:	9b02      	ldr	r3, [sp, #8]
 800bfbe:	3b04      	subs	r3, #4
 800bfc0:	1b1b      	subs	r3, r3, r4
 800bfc2:	089b      	lsrs	r3, r3, #2
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	9a01      	ldr	r2, [sp, #4]
 800bfca:	18d3      	adds	r3, r2, r3
 800bfcc:	2200      	movs	r2, #0
 800bfce:	c304      	stmia	r3!, {r2}
 800bfd0:	429e      	cmp	r6, r3
 800bfd2:	d2fc      	bcs.n	800bfce <__hexnan+0xe6>
 800bfd4:	6833      	ldr	r3, [r6, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d104      	bne.n	800bfe4 <__hexnan+0xfc>
 800bfda:	9b01      	ldr	r3, [sp, #4]
 800bfdc:	429e      	cmp	r6, r3
 800bfde:	d126      	bne.n	800c02e <__hexnan+0x146>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	6033      	str	r3, [r6, #0]
 800bfe4:	2005      	movs	r0, #5
 800bfe6:	e025      	b.n	800c034 <__hexnan+0x14c>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	3501      	adds	r5, #1
 800bfec:	3301      	adds	r3, #1
 800bfee:	9303      	str	r3, [sp, #12]
 800bff0:	2d08      	cmp	r5, #8
 800bff2:	dd06      	ble.n	800c002 <__hexnan+0x11a>
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	429c      	cmp	r4, r3
 800bff8:	d9bb      	bls.n	800bf72 <__hexnan+0x8a>
 800bffa:	2300      	movs	r3, #0
 800bffc:	2501      	movs	r5, #1
 800bffe:	3c04      	subs	r4, #4
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	220f      	movs	r2, #15
 800c004:	6823      	ldr	r3, [r4, #0]
 800c006:	4010      	ands	r0, r2
 800c008:	011b      	lsls	r3, r3, #4
 800c00a:	4318      	orrs	r0, r3
 800c00c:	6020      	str	r0, [r4, #0]
 800c00e:	e7b0      	b.n	800bf72 <__hexnan+0x8a>
 800c010:	9b06      	ldr	r3, [sp, #24]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0de      	beq.n	800bfd4 <__hexnan+0xec>
 800c016:	2120      	movs	r1, #32
 800c018:	9a06      	ldr	r2, [sp, #24]
 800c01a:	9b02      	ldr	r3, [sp, #8]
 800c01c:	1a89      	subs	r1, r1, r2
 800c01e:	2201      	movs	r2, #1
 800c020:	4252      	negs	r2, r2
 800c022:	40ca      	lsrs	r2, r1
 800c024:	3b04      	subs	r3, #4
 800c026:	6819      	ldr	r1, [r3, #0]
 800c028:	400a      	ands	r2, r1
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	e7d2      	b.n	800bfd4 <__hexnan+0xec>
 800c02e:	3e04      	subs	r6, #4
 800c030:	e7d0      	b.n	800bfd4 <__hexnan+0xec>
 800c032:	2004      	movs	r0, #4
 800c034:	b00b      	add	sp, #44	; 0x2c
 800c036:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c038 <_localeconv_r>:
 800c038:	4800      	ldr	r0, [pc, #0]	; (800c03c <_localeconv_r+0x4>)
 800c03a:	4770      	bx	lr
 800c03c:	20000188 	.word	0x20000188

0800c040 <__retarget_lock_init_recursive>:
 800c040:	4770      	bx	lr

0800c042 <__retarget_lock_acquire_recursive>:
 800c042:	4770      	bx	lr

0800c044 <__retarget_lock_release_recursive>:
 800c044:	4770      	bx	lr
	...

0800c048 <__swhatbuf_r>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	000e      	movs	r6, r1
 800c04c:	001d      	movs	r5, r3
 800c04e:	230e      	movs	r3, #14
 800c050:	5ec9      	ldrsh	r1, [r1, r3]
 800c052:	0014      	movs	r4, r2
 800c054:	b096      	sub	sp, #88	; 0x58
 800c056:	2900      	cmp	r1, #0
 800c058:	da08      	bge.n	800c06c <__swhatbuf_r+0x24>
 800c05a:	220c      	movs	r2, #12
 800c05c:	5eb3      	ldrsh	r3, [r6, r2]
 800c05e:	2200      	movs	r2, #0
 800c060:	602a      	str	r2, [r5, #0]
 800c062:	061b      	lsls	r3, r3, #24
 800c064:	d411      	bmi.n	800c08a <__swhatbuf_r+0x42>
 800c066:	2380      	movs	r3, #128	; 0x80
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	e00f      	b.n	800c08c <__swhatbuf_r+0x44>
 800c06c:	466a      	mov	r2, sp
 800c06e:	f001 f9f3 	bl	800d458 <_fstat_r>
 800c072:	2800      	cmp	r0, #0
 800c074:	dbf1      	blt.n	800c05a <__swhatbuf_r+0x12>
 800c076:	23f0      	movs	r3, #240	; 0xf0
 800c078:	9901      	ldr	r1, [sp, #4]
 800c07a:	021b      	lsls	r3, r3, #8
 800c07c:	4019      	ands	r1, r3
 800c07e:	4b05      	ldr	r3, [pc, #20]	; (800c094 <__swhatbuf_r+0x4c>)
 800c080:	18c9      	adds	r1, r1, r3
 800c082:	424b      	negs	r3, r1
 800c084:	4159      	adcs	r1, r3
 800c086:	6029      	str	r1, [r5, #0]
 800c088:	e7ed      	b.n	800c066 <__swhatbuf_r+0x1e>
 800c08a:	2340      	movs	r3, #64	; 0x40
 800c08c:	2000      	movs	r0, #0
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	b016      	add	sp, #88	; 0x58
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	ffffe000 	.word	0xffffe000

0800c098 <__smakebuf_r>:
 800c098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c09a:	2602      	movs	r6, #2
 800c09c:	898b      	ldrh	r3, [r1, #12]
 800c09e:	0005      	movs	r5, r0
 800c0a0:	000c      	movs	r4, r1
 800c0a2:	4233      	tst	r3, r6
 800c0a4:	d006      	beq.n	800c0b4 <__smakebuf_r+0x1c>
 800c0a6:	0023      	movs	r3, r4
 800c0a8:	3347      	adds	r3, #71	; 0x47
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	6123      	str	r3, [r4, #16]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	6163      	str	r3, [r4, #20]
 800c0b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c0b4:	466a      	mov	r2, sp
 800c0b6:	ab01      	add	r3, sp, #4
 800c0b8:	f7ff ffc6 	bl	800c048 <__swhatbuf_r>
 800c0bc:	9900      	ldr	r1, [sp, #0]
 800c0be:	0007      	movs	r7, r0
 800c0c0:	0028      	movs	r0, r5
 800c0c2:	f000 fdb7 	bl	800cc34 <_malloc_r>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d108      	bne.n	800c0dc <__smakebuf_r+0x44>
 800c0ca:	220c      	movs	r2, #12
 800c0cc:	5ea3      	ldrsh	r3, [r4, r2]
 800c0ce:	059a      	lsls	r2, r3, #22
 800c0d0:	d4ef      	bmi.n	800c0b2 <__smakebuf_r+0x1a>
 800c0d2:	2203      	movs	r2, #3
 800c0d4:	4393      	bics	r3, r2
 800c0d6:	431e      	orrs	r6, r3
 800c0d8:	81a6      	strh	r6, [r4, #12]
 800c0da:	e7e4      	b.n	800c0a6 <__smakebuf_r+0xe>
 800c0dc:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <__smakebuf_r+0x84>)
 800c0de:	62ab      	str	r3, [r5, #40]	; 0x28
 800c0e0:	2380      	movs	r3, #128	; 0x80
 800c0e2:	89a2      	ldrh	r2, [r4, #12]
 800c0e4:	6020      	str	r0, [r4, #0]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	81a3      	strh	r3, [r4, #12]
 800c0ea:	9b00      	ldr	r3, [sp, #0]
 800c0ec:	6120      	str	r0, [r4, #16]
 800c0ee:	6163      	str	r3, [r4, #20]
 800c0f0:	9b01      	ldr	r3, [sp, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00d      	beq.n	800c112 <__smakebuf_r+0x7a>
 800c0f6:	0028      	movs	r0, r5
 800c0f8:	230e      	movs	r3, #14
 800c0fa:	5ee1      	ldrsh	r1, [r4, r3]
 800c0fc:	f001 f9be 	bl	800d47c <_isatty_r>
 800c100:	2800      	cmp	r0, #0
 800c102:	d006      	beq.n	800c112 <__smakebuf_r+0x7a>
 800c104:	2203      	movs	r2, #3
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	4393      	bics	r3, r2
 800c10a:	001a      	movs	r2, r3
 800c10c:	2301      	movs	r3, #1
 800c10e:	4313      	orrs	r3, r2
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	89a0      	ldrh	r0, [r4, #12]
 800c114:	4307      	orrs	r7, r0
 800c116:	81a7      	strh	r7, [r4, #12]
 800c118:	e7cb      	b.n	800c0b2 <__smakebuf_r+0x1a>
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	0800b795 	.word	0x0800b795

0800c120 <malloc>:
 800c120:	b510      	push	{r4, lr}
 800c122:	4b03      	ldr	r3, [pc, #12]	; (800c130 <malloc+0x10>)
 800c124:	0001      	movs	r1, r0
 800c126:	6818      	ldr	r0, [r3, #0]
 800c128:	f000 fd84 	bl	800cc34 <_malloc_r>
 800c12c:	bd10      	pop	{r4, pc}
 800c12e:	46c0      	nop			; (mov r8, r8)
 800c130:	20000030 	.word	0x20000030

0800c134 <__ascii_mbtowc>:
 800c134:	b082      	sub	sp, #8
 800c136:	2900      	cmp	r1, #0
 800c138:	d100      	bne.n	800c13c <__ascii_mbtowc+0x8>
 800c13a:	a901      	add	r1, sp, #4
 800c13c:	1e10      	subs	r0, r2, #0
 800c13e:	d006      	beq.n	800c14e <__ascii_mbtowc+0x1a>
 800c140:	2b00      	cmp	r3, #0
 800c142:	d006      	beq.n	800c152 <__ascii_mbtowc+0x1e>
 800c144:	7813      	ldrb	r3, [r2, #0]
 800c146:	600b      	str	r3, [r1, #0]
 800c148:	7810      	ldrb	r0, [r2, #0]
 800c14a:	1e43      	subs	r3, r0, #1
 800c14c:	4198      	sbcs	r0, r3
 800c14e:	b002      	add	sp, #8
 800c150:	4770      	bx	lr
 800c152:	2002      	movs	r0, #2
 800c154:	4240      	negs	r0, r0
 800c156:	e7fa      	b.n	800c14e <__ascii_mbtowc+0x1a>

0800c158 <memchr>:
 800c158:	b2c9      	uxtb	r1, r1
 800c15a:	1882      	adds	r2, r0, r2
 800c15c:	4290      	cmp	r0, r2
 800c15e:	d101      	bne.n	800c164 <memchr+0xc>
 800c160:	2000      	movs	r0, #0
 800c162:	4770      	bx	lr
 800c164:	7803      	ldrb	r3, [r0, #0]
 800c166:	428b      	cmp	r3, r1
 800c168:	d0fb      	beq.n	800c162 <memchr+0xa>
 800c16a:	3001      	adds	r0, #1
 800c16c:	e7f6      	b.n	800c15c <memchr+0x4>
	...

0800c170 <_Balloc>:
 800c170:	b570      	push	{r4, r5, r6, lr}
 800c172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c174:	0006      	movs	r6, r0
 800c176:	000c      	movs	r4, r1
 800c178:	2d00      	cmp	r5, #0
 800c17a:	d10e      	bne.n	800c19a <_Balloc+0x2a>
 800c17c:	2010      	movs	r0, #16
 800c17e:	f7ff ffcf 	bl	800c120 <malloc>
 800c182:	1e02      	subs	r2, r0, #0
 800c184:	6270      	str	r0, [r6, #36]	; 0x24
 800c186:	d104      	bne.n	800c192 <_Balloc+0x22>
 800c188:	2166      	movs	r1, #102	; 0x66
 800c18a:	4b19      	ldr	r3, [pc, #100]	; (800c1f0 <_Balloc+0x80>)
 800c18c:	4819      	ldr	r0, [pc, #100]	; (800c1f4 <_Balloc+0x84>)
 800c18e:	f001 f923 	bl	800d3d8 <__assert_func>
 800c192:	6045      	str	r5, [r0, #4]
 800c194:	6085      	str	r5, [r0, #8]
 800c196:	6005      	str	r5, [r0, #0]
 800c198:	60c5      	str	r5, [r0, #12]
 800c19a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c19c:	68eb      	ldr	r3, [r5, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d013      	beq.n	800c1ca <_Balloc+0x5a>
 800c1a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c1a4:	00a2      	lsls	r2, r4, #2
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	189b      	adds	r3, r3, r2
 800c1aa:	6818      	ldr	r0, [r3, #0]
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d118      	bne.n	800c1e2 <_Balloc+0x72>
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	000d      	movs	r5, r1
 800c1b4:	40a5      	lsls	r5, r4
 800c1b6:	1d6a      	adds	r2, r5, #5
 800c1b8:	0030      	movs	r0, r6
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	f000 fca1 	bl	800cb02 <_calloc_r>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d00c      	beq.n	800c1de <_Balloc+0x6e>
 800c1c4:	6044      	str	r4, [r0, #4]
 800c1c6:	6085      	str	r5, [r0, #8]
 800c1c8:	e00d      	b.n	800c1e6 <_Balloc+0x76>
 800c1ca:	2221      	movs	r2, #33	; 0x21
 800c1cc:	2104      	movs	r1, #4
 800c1ce:	0030      	movs	r0, r6
 800c1d0:	f000 fc97 	bl	800cb02 <_calloc_r>
 800c1d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c1d6:	60e8      	str	r0, [r5, #12]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e1      	bne.n	800c1a2 <_Balloc+0x32>
 800c1de:	2000      	movs	r0, #0
 800c1e0:	bd70      	pop	{r4, r5, r6, pc}
 800c1e2:	6802      	ldr	r2, [r0, #0]
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	6103      	str	r3, [r0, #16]
 800c1ea:	60c3      	str	r3, [r0, #12]
 800c1ec:	e7f8      	b.n	800c1e0 <_Balloc+0x70>
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	0800d99e 	.word	0x0800d99e
 800c1f4:	0800db00 	.word	0x0800db00

0800c1f8 <_Bfree>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1fc:	0005      	movs	r5, r0
 800c1fe:	000c      	movs	r4, r1
 800c200:	2e00      	cmp	r6, #0
 800c202:	d10e      	bne.n	800c222 <_Bfree+0x2a>
 800c204:	2010      	movs	r0, #16
 800c206:	f7ff ff8b 	bl	800c120 <malloc>
 800c20a:	1e02      	subs	r2, r0, #0
 800c20c:	6268      	str	r0, [r5, #36]	; 0x24
 800c20e:	d104      	bne.n	800c21a <_Bfree+0x22>
 800c210:	218a      	movs	r1, #138	; 0x8a
 800c212:	4b09      	ldr	r3, [pc, #36]	; (800c238 <_Bfree+0x40>)
 800c214:	4809      	ldr	r0, [pc, #36]	; (800c23c <_Bfree+0x44>)
 800c216:	f001 f8df 	bl	800d3d8 <__assert_func>
 800c21a:	6046      	str	r6, [r0, #4]
 800c21c:	6086      	str	r6, [r0, #8]
 800c21e:	6006      	str	r6, [r0, #0]
 800c220:	60c6      	str	r6, [r0, #12]
 800c222:	2c00      	cmp	r4, #0
 800c224:	d007      	beq.n	800c236 <_Bfree+0x3e>
 800c226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c228:	6862      	ldr	r2, [r4, #4]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	0092      	lsls	r2, r2, #2
 800c22e:	189b      	adds	r3, r3, r2
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	6022      	str	r2, [r4, #0]
 800c234:	601c      	str	r4, [r3, #0]
 800c236:	bd70      	pop	{r4, r5, r6, pc}
 800c238:	0800d99e 	.word	0x0800d99e
 800c23c:	0800db00 	.word	0x0800db00

0800c240 <__multadd>:
 800c240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c242:	000e      	movs	r6, r1
 800c244:	9001      	str	r0, [sp, #4]
 800c246:	000c      	movs	r4, r1
 800c248:	001d      	movs	r5, r3
 800c24a:	2000      	movs	r0, #0
 800c24c:	690f      	ldr	r7, [r1, #16]
 800c24e:	3614      	adds	r6, #20
 800c250:	6833      	ldr	r3, [r6, #0]
 800c252:	3001      	adds	r0, #1
 800c254:	b299      	uxth	r1, r3
 800c256:	4351      	muls	r1, r2
 800c258:	0c1b      	lsrs	r3, r3, #16
 800c25a:	4353      	muls	r3, r2
 800c25c:	1949      	adds	r1, r1, r5
 800c25e:	0c0d      	lsrs	r5, r1, #16
 800c260:	195b      	adds	r3, r3, r5
 800c262:	0c1d      	lsrs	r5, r3, #16
 800c264:	b289      	uxth	r1, r1
 800c266:	041b      	lsls	r3, r3, #16
 800c268:	185b      	adds	r3, r3, r1
 800c26a:	c608      	stmia	r6!, {r3}
 800c26c:	4287      	cmp	r7, r0
 800c26e:	dcef      	bgt.n	800c250 <__multadd+0x10>
 800c270:	2d00      	cmp	r5, #0
 800c272:	d022      	beq.n	800c2ba <__multadd+0x7a>
 800c274:	68a3      	ldr	r3, [r4, #8]
 800c276:	42bb      	cmp	r3, r7
 800c278:	dc19      	bgt.n	800c2ae <__multadd+0x6e>
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	9801      	ldr	r0, [sp, #4]
 800c27e:	1c59      	adds	r1, r3, #1
 800c280:	f7ff ff76 	bl	800c170 <_Balloc>
 800c284:	1e06      	subs	r6, r0, #0
 800c286:	d105      	bne.n	800c294 <__multadd+0x54>
 800c288:	0002      	movs	r2, r0
 800c28a:	21b5      	movs	r1, #181	; 0xb5
 800c28c:	4b0c      	ldr	r3, [pc, #48]	; (800c2c0 <__multadd+0x80>)
 800c28e:	480d      	ldr	r0, [pc, #52]	; (800c2c4 <__multadd+0x84>)
 800c290:	f001 f8a2 	bl	800d3d8 <__assert_func>
 800c294:	0021      	movs	r1, r4
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	310c      	adds	r1, #12
 800c29a:	1c9a      	adds	r2, r3, #2
 800c29c:	0092      	lsls	r2, r2, #2
 800c29e:	300c      	adds	r0, #12
 800c2a0:	f7fc fc0c 	bl	8008abc <memcpy>
 800c2a4:	0021      	movs	r1, r4
 800c2a6:	9801      	ldr	r0, [sp, #4]
 800c2a8:	f7ff ffa6 	bl	800c1f8 <_Bfree>
 800c2ac:	0034      	movs	r4, r6
 800c2ae:	1d3b      	adds	r3, r7, #4
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	18e3      	adds	r3, r4, r3
 800c2b4:	605d      	str	r5, [r3, #4]
 800c2b6:	1c7b      	adds	r3, r7, #1
 800c2b8:	6123      	str	r3, [r4, #16]
 800c2ba:	0020      	movs	r0, r4
 800c2bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	0800da10 	.word	0x0800da10
 800c2c4:	0800db00 	.word	0x0800db00

0800c2c8 <__s2b>:
 800c2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ca:	0006      	movs	r6, r0
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	000c      	movs	r4, r1
 800c2d0:	3008      	adds	r0, #8
 800c2d2:	2109      	movs	r1, #9
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	0015      	movs	r5, r2
 800c2d8:	f7f3 ffbc 	bl	8000254 <__divsi3>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	2100      	movs	r1, #0
 800c2e0:	4283      	cmp	r3, r0
 800c2e2:	db0a      	blt.n	800c2fa <__s2b+0x32>
 800c2e4:	0030      	movs	r0, r6
 800c2e6:	f7ff ff43 	bl	800c170 <_Balloc>
 800c2ea:	1e01      	subs	r1, r0, #0
 800c2ec:	d108      	bne.n	800c300 <__s2b+0x38>
 800c2ee:	0002      	movs	r2, r0
 800c2f0:	4b19      	ldr	r3, [pc, #100]	; (800c358 <__s2b+0x90>)
 800c2f2:	481a      	ldr	r0, [pc, #104]	; (800c35c <__s2b+0x94>)
 800c2f4:	31ce      	adds	r1, #206	; 0xce
 800c2f6:	f001 f86f 	bl	800d3d8 <__assert_func>
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	3101      	adds	r1, #1
 800c2fe:	e7ef      	b.n	800c2e0 <__s2b+0x18>
 800c300:	9b08      	ldr	r3, [sp, #32]
 800c302:	6143      	str	r3, [r0, #20]
 800c304:	2301      	movs	r3, #1
 800c306:	6103      	str	r3, [r0, #16]
 800c308:	2d09      	cmp	r5, #9
 800c30a:	dd18      	ble.n	800c33e <__s2b+0x76>
 800c30c:	0023      	movs	r3, r4
 800c30e:	3309      	adds	r3, #9
 800c310:	001f      	movs	r7, r3
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	1964      	adds	r4, r4, r5
 800c316:	783b      	ldrb	r3, [r7, #0]
 800c318:	220a      	movs	r2, #10
 800c31a:	0030      	movs	r0, r6
 800c31c:	3b30      	subs	r3, #48	; 0x30
 800c31e:	f7ff ff8f 	bl	800c240 <__multadd>
 800c322:	3701      	adds	r7, #1
 800c324:	0001      	movs	r1, r0
 800c326:	42a7      	cmp	r7, r4
 800c328:	d1f5      	bne.n	800c316 <__s2b+0x4e>
 800c32a:	002c      	movs	r4, r5
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	3c08      	subs	r4, #8
 800c330:	191c      	adds	r4, r3, r4
 800c332:	002f      	movs	r7, r5
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	429f      	cmp	r7, r3
 800c338:	db04      	blt.n	800c344 <__s2b+0x7c>
 800c33a:	0008      	movs	r0, r1
 800c33c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c33e:	2509      	movs	r5, #9
 800c340:	340a      	adds	r4, #10
 800c342:	e7f6      	b.n	800c332 <__s2b+0x6a>
 800c344:	1b63      	subs	r3, r4, r5
 800c346:	5ddb      	ldrb	r3, [r3, r7]
 800c348:	220a      	movs	r2, #10
 800c34a:	0030      	movs	r0, r6
 800c34c:	3b30      	subs	r3, #48	; 0x30
 800c34e:	f7ff ff77 	bl	800c240 <__multadd>
 800c352:	3701      	adds	r7, #1
 800c354:	0001      	movs	r1, r0
 800c356:	e7ed      	b.n	800c334 <__s2b+0x6c>
 800c358:	0800da10 	.word	0x0800da10
 800c35c:	0800db00 	.word	0x0800db00

0800c360 <__hi0bits>:
 800c360:	0003      	movs	r3, r0
 800c362:	0c02      	lsrs	r2, r0, #16
 800c364:	2000      	movs	r0, #0
 800c366:	4282      	cmp	r2, r0
 800c368:	d101      	bne.n	800c36e <__hi0bits+0xe>
 800c36a:	041b      	lsls	r3, r3, #16
 800c36c:	3010      	adds	r0, #16
 800c36e:	0e1a      	lsrs	r2, r3, #24
 800c370:	d101      	bne.n	800c376 <__hi0bits+0x16>
 800c372:	3008      	adds	r0, #8
 800c374:	021b      	lsls	r3, r3, #8
 800c376:	0f1a      	lsrs	r2, r3, #28
 800c378:	d101      	bne.n	800c37e <__hi0bits+0x1e>
 800c37a:	3004      	adds	r0, #4
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	0f9a      	lsrs	r2, r3, #30
 800c380:	d101      	bne.n	800c386 <__hi0bits+0x26>
 800c382:	3002      	adds	r0, #2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	db03      	blt.n	800c392 <__hi0bits+0x32>
 800c38a:	3001      	adds	r0, #1
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	d400      	bmi.n	800c392 <__hi0bits+0x32>
 800c390:	2020      	movs	r0, #32
 800c392:	4770      	bx	lr

0800c394 <__lo0bits>:
 800c394:	6803      	ldr	r3, [r0, #0]
 800c396:	0002      	movs	r2, r0
 800c398:	2107      	movs	r1, #7
 800c39a:	0018      	movs	r0, r3
 800c39c:	4008      	ands	r0, r1
 800c39e:	420b      	tst	r3, r1
 800c3a0:	d00d      	beq.n	800c3be <__lo0bits+0x2a>
 800c3a2:	3906      	subs	r1, #6
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	420b      	tst	r3, r1
 800c3a8:	d105      	bne.n	800c3b6 <__lo0bits+0x22>
 800c3aa:	3002      	adds	r0, #2
 800c3ac:	4203      	tst	r3, r0
 800c3ae:	d003      	beq.n	800c3b8 <__lo0bits+0x24>
 800c3b0:	40cb      	lsrs	r3, r1
 800c3b2:	0008      	movs	r0, r1
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	4770      	bx	lr
 800c3b8:	089b      	lsrs	r3, r3, #2
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	e7fb      	b.n	800c3b6 <__lo0bits+0x22>
 800c3be:	b299      	uxth	r1, r3
 800c3c0:	2900      	cmp	r1, #0
 800c3c2:	d101      	bne.n	800c3c8 <__lo0bits+0x34>
 800c3c4:	2010      	movs	r0, #16
 800c3c6:	0c1b      	lsrs	r3, r3, #16
 800c3c8:	b2d9      	uxtb	r1, r3
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	d101      	bne.n	800c3d2 <__lo0bits+0x3e>
 800c3ce:	3008      	adds	r0, #8
 800c3d0:	0a1b      	lsrs	r3, r3, #8
 800c3d2:	0719      	lsls	r1, r3, #28
 800c3d4:	d101      	bne.n	800c3da <__lo0bits+0x46>
 800c3d6:	3004      	adds	r0, #4
 800c3d8:	091b      	lsrs	r3, r3, #4
 800c3da:	0799      	lsls	r1, r3, #30
 800c3dc:	d101      	bne.n	800c3e2 <__lo0bits+0x4e>
 800c3de:	3002      	adds	r0, #2
 800c3e0:	089b      	lsrs	r3, r3, #2
 800c3e2:	07d9      	lsls	r1, r3, #31
 800c3e4:	d4e9      	bmi.n	800c3ba <__lo0bits+0x26>
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	d1e6      	bne.n	800c3ba <__lo0bits+0x26>
 800c3ec:	2020      	movs	r0, #32
 800c3ee:	e7e2      	b.n	800c3b6 <__lo0bits+0x22>

0800c3f0 <__i2b>:
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	000c      	movs	r4, r1
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	f7ff febb 	bl	800c170 <_Balloc>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d106      	bne.n	800c40c <__i2b+0x1c>
 800c3fe:	21a0      	movs	r1, #160	; 0xa0
 800c400:	0002      	movs	r2, r0
 800c402:	4b04      	ldr	r3, [pc, #16]	; (800c414 <__i2b+0x24>)
 800c404:	4804      	ldr	r0, [pc, #16]	; (800c418 <__i2b+0x28>)
 800c406:	0049      	lsls	r1, r1, #1
 800c408:	f000 ffe6 	bl	800d3d8 <__assert_func>
 800c40c:	2301      	movs	r3, #1
 800c40e:	6144      	str	r4, [r0, #20]
 800c410:	6103      	str	r3, [r0, #16]
 800c412:	bd10      	pop	{r4, pc}
 800c414:	0800da10 	.word	0x0800da10
 800c418:	0800db00 	.word	0x0800db00

0800c41c <__multiply>:
 800c41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41e:	690b      	ldr	r3, [r1, #16]
 800c420:	0014      	movs	r4, r2
 800c422:	6912      	ldr	r2, [r2, #16]
 800c424:	000d      	movs	r5, r1
 800c426:	b089      	sub	sp, #36	; 0x24
 800c428:	4293      	cmp	r3, r2
 800c42a:	da01      	bge.n	800c430 <__multiply+0x14>
 800c42c:	0025      	movs	r5, r4
 800c42e:	000c      	movs	r4, r1
 800c430:	692f      	ldr	r7, [r5, #16]
 800c432:	6926      	ldr	r6, [r4, #16]
 800c434:	6869      	ldr	r1, [r5, #4]
 800c436:	19bb      	adds	r3, r7, r6
 800c438:	9302      	str	r3, [sp, #8]
 800c43a:	68ab      	ldr	r3, [r5, #8]
 800c43c:	19ba      	adds	r2, r7, r6
 800c43e:	4293      	cmp	r3, r2
 800c440:	da00      	bge.n	800c444 <__multiply+0x28>
 800c442:	3101      	adds	r1, #1
 800c444:	f7ff fe94 	bl	800c170 <_Balloc>
 800c448:	9001      	str	r0, [sp, #4]
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d106      	bne.n	800c45c <__multiply+0x40>
 800c44e:	215e      	movs	r1, #94	; 0x5e
 800c450:	0002      	movs	r2, r0
 800c452:	4b48      	ldr	r3, [pc, #288]	; (800c574 <__multiply+0x158>)
 800c454:	4848      	ldr	r0, [pc, #288]	; (800c578 <__multiply+0x15c>)
 800c456:	31ff      	adds	r1, #255	; 0xff
 800c458:	f000 ffbe 	bl	800d3d8 <__assert_func>
 800c45c:	9b01      	ldr	r3, [sp, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	3314      	adds	r3, #20
 800c462:	469c      	mov	ip, r3
 800c464:	19bb      	adds	r3, r7, r6
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4463      	add	r3, ip
 800c46a:	9303      	str	r3, [sp, #12]
 800c46c:	4663      	mov	r3, ip
 800c46e:	9903      	ldr	r1, [sp, #12]
 800c470:	428b      	cmp	r3, r1
 800c472:	d32c      	bcc.n	800c4ce <__multiply+0xb2>
 800c474:	002b      	movs	r3, r5
 800c476:	0022      	movs	r2, r4
 800c478:	3314      	adds	r3, #20
 800c47a:	00bf      	lsls	r7, r7, #2
 800c47c:	3214      	adds	r2, #20
 800c47e:	9306      	str	r3, [sp, #24]
 800c480:	00b6      	lsls	r6, r6, #2
 800c482:	19db      	adds	r3, r3, r7
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	1993      	adds	r3, r2, r6
 800c488:	9307      	str	r3, [sp, #28]
 800c48a:	2304      	movs	r3, #4
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	002b      	movs	r3, r5
 800c490:	9904      	ldr	r1, [sp, #16]
 800c492:	3315      	adds	r3, #21
 800c494:	9200      	str	r2, [sp, #0]
 800c496:	4299      	cmp	r1, r3
 800c498:	d305      	bcc.n	800c4a6 <__multiply+0x8a>
 800c49a:	1b4b      	subs	r3, r1, r5
 800c49c:	3b15      	subs	r3, #21
 800c49e:	089b      	lsrs	r3, r3, #2
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	9305      	str	r3, [sp, #20]
 800c4a6:	9b07      	ldr	r3, [sp, #28]
 800c4a8:	9a00      	ldr	r2, [sp, #0]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d311      	bcc.n	800c4d2 <__multiply+0xb6>
 800c4ae:	9b02      	ldr	r3, [sp, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	dd06      	ble.n	800c4c2 <__multiply+0xa6>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	3b04      	subs	r3, #4
 800c4b8:	9303      	str	r3, [sp, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d053      	beq.n	800c56a <__multiply+0x14e>
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	9a02      	ldr	r2, [sp, #8]
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	611a      	str	r2, [r3, #16]
 800c4ca:	b009      	add	sp, #36	; 0x24
 800c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ce:	c304      	stmia	r3!, {r2}
 800c4d0:	e7cd      	b.n	800c46e <__multiply+0x52>
 800c4d2:	9b00      	ldr	r3, [sp, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	b298      	uxth	r0, r3
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d01b      	beq.n	800c514 <__multiply+0xf8>
 800c4dc:	4667      	mov	r7, ip
 800c4de:	2400      	movs	r4, #0
 800c4e0:	9e06      	ldr	r6, [sp, #24]
 800c4e2:	ce02      	ldmia	r6!, {r1}
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	b28b      	uxth	r3, r1
 800c4e8:	4343      	muls	r3, r0
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	189b      	adds	r3, r3, r2
 800c4ee:	191b      	adds	r3, r3, r4
 800c4f0:	0c0c      	lsrs	r4, r1, #16
 800c4f2:	4344      	muls	r4, r0
 800c4f4:	683a      	ldr	r2, [r7, #0]
 800c4f6:	0c11      	lsrs	r1, r2, #16
 800c4f8:	1861      	adds	r1, r4, r1
 800c4fa:	0c1c      	lsrs	r4, r3, #16
 800c4fc:	1909      	adds	r1, r1, r4
 800c4fe:	0c0c      	lsrs	r4, r1, #16
 800c500:	b29b      	uxth	r3, r3
 800c502:	0409      	lsls	r1, r1, #16
 800c504:	430b      	orrs	r3, r1
 800c506:	c708      	stmia	r7!, {r3}
 800c508:	9b04      	ldr	r3, [sp, #16]
 800c50a:	42b3      	cmp	r3, r6
 800c50c:	d8e9      	bhi.n	800c4e2 <__multiply+0xc6>
 800c50e:	4663      	mov	r3, ip
 800c510:	9a05      	ldr	r2, [sp, #20]
 800c512:	509c      	str	r4, [r3, r2]
 800c514:	9b00      	ldr	r3, [sp, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	0c1e      	lsrs	r6, r3, #16
 800c51a:	d020      	beq.n	800c55e <__multiply+0x142>
 800c51c:	4663      	mov	r3, ip
 800c51e:	002c      	movs	r4, r5
 800c520:	4660      	mov	r0, ip
 800c522:	2700      	movs	r7, #0
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3414      	adds	r4, #20
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	b291      	uxth	r1, r2
 800c52e:	4371      	muls	r1, r6
 800c530:	6802      	ldr	r2, [r0, #0]
 800c532:	0c12      	lsrs	r2, r2, #16
 800c534:	1889      	adds	r1, r1, r2
 800c536:	19cf      	adds	r7, r1, r7
 800c538:	0439      	lsls	r1, r7, #16
 800c53a:	430b      	orrs	r3, r1
 800c53c:	6003      	str	r3, [r0, #0]
 800c53e:	cc02      	ldmia	r4!, {r1}
 800c540:	6843      	ldr	r3, [r0, #4]
 800c542:	0c09      	lsrs	r1, r1, #16
 800c544:	4371      	muls	r1, r6
 800c546:	b29b      	uxth	r3, r3
 800c548:	0c3f      	lsrs	r7, r7, #16
 800c54a:	18cb      	adds	r3, r1, r3
 800c54c:	9a04      	ldr	r2, [sp, #16]
 800c54e:	19db      	adds	r3, r3, r7
 800c550:	0c1f      	lsrs	r7, r3, #16
 800c552:	3004      	adds	r0, #4
 800c554:	42a2      	cmp	r2, r4
 800c556:	d8e7      	bhi.n	800c528 <__multiply+0x10c>
 800c558:	4662      	mov	r2, ip
 800c55a:	9905      	ldr	r1, [sp, #20]
 800c55c:	5053      	str	r3, [r2, r1]
 800c55e:	9b00      	ldr	r3, [sp, #0]
 800c560:	3304      	adds	r3, #4
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	2304      	movs	r3, #4
 800c566:	449c      	add	ip, r3
 800c568:	e79d      	b.n	800c4a6 <__multiply+0x8a>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	9302      	str	r3, [sp, #8]
 800c570:	e79d      	b.n	800c4ae <__multiply+0x92>
 800c572:	46c0      	nop			; (mov r8, r8)
 800c574:	0800da10 	.word	0x0800da10
 800c578:	0800db00 	.word	0x0800db00

0800c57c <__pow5mult>:
 800c57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c57e:	2303      	movs	r3, #3
 800c580:	0015      	movs	r5, r2
 800c582:	0007      	movs	r7, r0
 800c584:	000e      	movs	r6, r1
 800c586:	401a      	ands	r2, r3
 800c588:	421d      	tst	r5, r3
 800c58a:	d008      	beq.n	800c59e <__pow5mult+0x22>
 800c58c:	4925      	ldr	r1, [pc, #148]	; (800c624 <__pow5mult+0xa8>)
 800c58e:	3a01      	subs	r2, #1
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	5852      	ldr	r2, [r2, r1]
 800c594:	2300      	movs	r3, #0
 800c596:	0031      	movs	r1, r6
 800c598:	f7ff fe52 	bl	800c240 <__multadd>
 800c59c:	0006      	movs	r6, r0
 800c59e:	10ad      	asrs	r5, r5, #2
 800c5a0:	d03d      	beq.n	800c61e <__pow5mult+0xa2>
 800c5a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d10f      	bne.n	800c5c8 <__pow5mult+0x4c>
 800c5a8:	2010      	movs	r0, #16
 800c5aa:	f7ff fdb9 	bl	800c120 <malloc>
 800c5ae:	1e02      	subs	r2, r0, #0
 800c5b0:	6278      	str	r0, [r7, #36]	; 0x24
 800c5b2:	d105      	bne.n	800c5c0 <__pow5mult+0x44>
 800c5b4:	21d7      	movs	r1, #215	; 0xd7
 800c5b6:	4b1c      	ldr	r3, [pc, #112]	; (800c628 <__pow5mult+0xac>)
 800c5b8:	481c      	ldr	r0, [pc, #112]	; (800c62c <__pow5mult+0xb0>)
 800c5ba:	0049      	lsls	r1, r1, #1
 800c5bc:	f000 ff0c 	bl	800d3d8 <__assert_func>
 800c5c0:	6044      	str	r4, [r0, #4]
 800c5c2:	6084      	str	r4, [r0, #8]
 800c5c4:	6004      	str	r4, [r0, #0]
 800c5c6:	60c4      	str	r4, [r0, #12]
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	689c      	ldr	r4, [r3, #8]
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	2c00      	cmp	r4, #0
 800c5d0:	d108      	bne.n	800c5e4 <__pow5mult+0x68>
 800c5d2:	0038      	movs	r0, r7
 800c5d4:	4916      	ldr	r1, [pc, #88]	; (800c630 <__pow5mult+0xb4>)
 800c5d6:	f7ff ff0b 	bl	800c3f0 <__i2b>
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	0004      	movs	r4, r0
 800c5de:	6098      	str	r0, [r3, #8]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	6003      	str	r3, [r0, #0]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	421d      	tst	r5, r3
 800c5e8:	d00a      	beq.n	800c600 <__pow5mult+0x84>
 800c5ea:	0031      	movs	r1, r6
 800c5ec:	0022      	movs	r2, r4
 800c5ee:	0038      	movs	r0, r7
 800c5f0:	f7ff ff14 	bl	800c41c <__multiply>
 800c5f4:	0031      	movs	r1, r6
 800c5f6:	9001      	str	r0, [sp, #4]
 800c5f8:	0038      	movs	r0, r7
 800c5fa:	f7ff fdfd 	bl	800c1f8 <_Bfree>
 800c5fe:	9e01      	ldr	r6, [sp, #4]
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	d00c      	beq.n	800c61e <__pow5mult+0xa2>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	2800      	cmp	r0, #0
 800c608:	d107      	bne.n	800c61a <__pow5mult+0x9e>
 800c60a:	0022      	movs	r2, r4
 800c60c:	0021      	movs	r1, r4
 800c60e:	0038      	movs	r0, r7
 800c610:	f7ff ff04 	bl	800c41c <__multiply>
 800c614:	2300      	movs	r3, #0
 800c616:	6020      	str	r0, [r4, #0]
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	0004      	movs	r4, r0
 800c61c:	e7e2      	b.n	800c5e4 <__pow5mult+0x68>
 800c61e:	0030      	movs	r0, r6
 800c620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c622:	46c0      	nop			; (mov r8, r8)
 800c624:	0800dc50 	.word	0x0800dc50
 800c628:	0800d99e 	.word	0x0800d99e
 800c62c:	0800db00 	.word	0x0800db00
 800c630:	00000271 	.word	0x00000271

0800c634 <__lshift>:
 800c634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c636:	000c      	movs	r4, r1
 800c638:	0017      	movs	r7, r2
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	1155      	asrs	r5, r2, #5
 800c63e:	b087      	sub	sp, #28
 800c640:	18eb      	adds	r3, r5, r3
 800c642:	9302      	str	r3, [sp, #8]
 800c644:	3301      	adds	r3, #1
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	6849      	ldr	r1, [r1, #4]
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	9004      	str	r0, [sp, #16]
 800c64e:	9a01      	ldr	r2, [sp, #4]
 800c650:	4293      	cmp	r3, r2
 800c652:	db10      	blt.n	800c676 <__lshift+0x42>
 800c654:	9804      	ldr	r0, [sp, #16]
 800c656:	f7ff fd8b 	bl	800c170 <_Balloc>
 800c65a:	2300      	movs	r3, #0
 800c65c:	0002      	movs	r2, r0
 800c65e:	0006      	movs	r6, r0
 800c660:	0019      	movs	r1, r3
 800c662:	3214      	adds	r2, #20
 800c664:	4298      	cmp	r0, r3
 800c666:	d10c      	bne.n	800c682 <__lshift+0x4e>
 800c668:	21da      	movs	r1, #218	; 0xda
 800c66a:	0002      	movs	r2, r0
 800c66c:	4b26      	ldr	r3, [pc, #152]	; (800c708 <__lshift+0xd4>)
 800c66e:	4827      	ldr	r0, [pc, #156]	; (800c70c <__lshift+0xd8>)
 800c670:	31ff      	adds	r1, #255	; 0xff
 800c672:	f000 feb1 	bl	800d3d8 <__assert_func>
 800c676:	3101      	adds	r1, #1
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	e7e8      	b.n	800c64e <__lshift+0x1a>
 800c67c:	0098      	lsls	r0, r3, #2
 800c67e:	5011      	str	r1, [r2, r0]
 800c680:	3301      	adds	r3, #1
 800c682:	42ab      	cmp	r3, r5
 800c684:	dbfa      	blt.n	800c67c <__lshift+0x48>
 800c686:	43eb      	mvns	r3, r5
 800c688:	17db      	asrs	r3, r3, #31
 800c68a:	401d      	ands	r5, r3
 800c68c:	211f      	movs	r1, #31
 800c68e:	0023      	movs	r3, r4
 800c690:	0038      	movs	r0, r7
 800c692:	00ad      	lsls	r5, r5, #2
 800c694:	1955      	adds	r5, r2, r5
 800c696:	6922      	ldr	r2, [r4, #16]
 800c698:	3314      	adds	r3, #20
 800c69a:	0092      	lsls	r2, r2, #2
 800c69c:	4008      	ands	r0, r1
 800c69e:	4684      	mov	ip, r0
 800c6a0:	189a      	adds	r2, r3, r2
 800c6a2:	420f      	tst	r7, r1
 800c6a4:	d02a      	beq.n	800c6fc <__lshift+0xc8>
 800c6a6:	3101      	adds	r1, #1
 800c6a8:	1a09      	subs	r1, r1, r0
 800c6aa:	9105      	str	r1, [sp, #20]
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	9503      	str	r5, [sp, #12]
 800c6b0:	4667      	mov	r7, ip
 800c6b2:	6818      	ldr	r0, [r3, #0]
 800c6b4:	40b8      	lsls	r0, r7
 800c6b6:	4301      	orrs	r1, r0
 800c6b8:	9803      	ldr	r0, [sp, #12]
 800c6ba:	c002      	stmia	r0!, {r1}
 800c6bc:	cb02      	ldmia	r3!, {r1}
 800c6be:	9003      	str	r0, [sp, #12]
 800c6c0:	9805      	ldr	r0, [sp, #20]
 800c6c2:	40c1      	lsrs	r1, r0
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d8f3      	bhi.n	800c6b0 <__lshift+0x7c>
 800c6c8:	0020      	movs	r0, r4
 800c6ca:	3015      	adds	r0, #21
 800c6cc:	2304      	movs	r3, #4
 800c6ce:	4282      	cmp	r2, r0
 800c6d0:	d304      	bcc.n	800c6dc <__lshift+0xa8>
 800c6d2:	1b13      	subs	r3, r2, r4
 800c6d4:	3b15      	subs	r3, #21
 800c6d6:	089b      	lsrs	r3, r3, #2
 800c6d8:	3301      	adds	r3, #1
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	50e9      	str	r1, [r5, r3]
 800c6de:	2900      	cmp	r1, #0
 800c6e0:	d002      	beq.n	800c6e8 <__lshift+0xb4>
 800c6e2:	9b02      	ldr	r3, [sp, #8]
 800c6e4:	3302      	adds	r3, #2
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	9b01      	ldr	r3, [sp, #4]
 800c6ea:	9804      	ldr	r0, [sp, #16]
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	0021      	movs	r1, r4
 800c6f0:	6133      	str	r3, [r6, #16]
 800c6f2:	f7ff fd81 	bl	800c1f8 <_Bfree>
 800c6f6:	0030      	movs	r0, r6
 800c6f8:	b007      	add	sp, #28
 800c6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fc:	cb02      	ldmia	r3!, {r1}
 800c6fe:	c502      	stmia	r5!, {r1}
 800c700:	429a      	cmp	r2, r3
 800c702:	d8fb      	bhi.n	800c6fc <__lshift+0xc8>
 800c704:	e7f0      	b.n	800c6e8 <__lshift+0xb4>
 800c706:	46c0      	nop			; (mov r8, r8)
 800c708:	0800da10 	.word	0x0800da10
 800c70c:	0800db00 	.word	0x0800db00

0800c710 <__mcmp>:
 800c710:	6902      	ldr	r2, [r0, #16]
 800c712:	690b      	ldr	r3, [r1, #16]
 800c714:	b530      	push	{r4, r5, lr}
 800c716:	0004      	movs	r4, r0
 800c718:	1ad0      	subs	r0, r2, r3
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d10d      	bne.n	800c73a <__mcmp+0x2a>
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	3414      	adds	r4, #20
 800c722:	3114      	adds	r1, #20
 800c724:	18e2      	adds	r2, r4, r3
 800c726:	18c9      	adds	r1, r1, r3
 800c728:	3a04      	subs	r2, #4
 800c72a:	3904      	subs	r1, #4
 800c72c:	6815      	ldr	r5, [r2, #0]
 800c72e:	680b      	ldr	r3, [r1, #0]
 800c730:	429d      	cmp	r5, r3
 800c732:	d003      	beq.n	800c73c <__mcmp+0x2c>
 800c734:	2001      	movs	r0, #1
 800c736:	429d      	cmp	r5, r3
 800c738:	d303      	bcc.n	800c742 <__mcmp+0x32>
 800c73a:	bd30      	pop	{r4, r5, pc}
 800c73c:	4294      	cmp	r4, r2
 800c73e:	d3f3      	bcc.n	800c728 <__mcmp+0x18>
 800c740:	e7fb      	b.n	800c73a <__mcmp+0x2a>
 800c742:	4240      	negs	r0, r0
 800c744:	e7f9      	b.n	800c73a <__mcmp+0x2a>
	...

0800c748 <__mdiff>:
 800c748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c74a:	000e      	movs	r6, r1
 800c74c:	0007      	movs	r7, r0
 800c74e:	0011      	movs	r1, r2
 800c750:	0030      	movs	r0, r6
 800c752:	b087      	sub	sp, #28
 800c754:	0014      	movs	r4, r2
 800c756:	f7ff ffdb 	bl	800c710 <__mcmp>
 800c75a:	1e05      	subs	r5, r0, #0
 800c75c:	d110      	bne.n	800c780 <__mdiff+0x38>
 800c75e:	0001      	movs	r1, r0
 800c760:	0038      	movs	r0, r7
 800c762:	f7ff fd05 	bl	800c170 <_Balloc>
 800c766:	1e02      	subs	r2, r0, #0
 800c768:	d104      	bne.n	800c774 <__mdiff+0x2c>
 800c76a:	4b40      	ldr	r3, [pc, #256]	; (800c86c <__mdiff+0x124>)
 800c76c:	4940      	ldr	r1, [pc, #256]	; (800c870 <__mdiff+0x128>)
 800c76e:	4841      	ldr	r0, [pc, #260]	; (800c874 <__mdiff+0x12c>)
 800c770:	f000 fe32 	bl	800d3d8 <__assert_func>
 800c774:	2301      	movs	r3, #1
 800c776:	6145      	str	r5, [r0, #20]
 800c778:	6103      	str	r3, [r0, #16]
 800c77a:	0010      	movs	r0, r2
 800c77c:	b007      	add	sp, #28
 800c77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c780:	2301      	movs	r3, #1
 800c782:	9301      	str	r3, [sp, #4]
 800c784:	2800      	cmp	r0, #0
 800c786:	db04      	blt.n	800c792 <__mdiff+0x4a>
 800c788:	0023      	movs	r3, r4
 800c78a:	0034      	movs	r4, r6
 800c78c:	001e      	movs	r6, r3
 800c78e:	2300      	movs	r3, #0
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	0038      	movs	r0, r7
 800c794:	6861      	ldr	r1, [r4, #4]
 800c796:	f7ff fceb 	bl	800c170 <_Balloc>
 800c79a:	1e02      	subs	r2, r0, #0
 800c79c:	d103      	bne.n	800c7a6 <__mdiff+0x5e>
 800c79e:	2190      	movs	r1, #144	; 0x90
 800c7a0:	4b32      	ldr	r3, [pc, #200]	; (800c86c <__mdiff+0x124>)
 800c7a2:	0089      	lsls	r1, r1, #2
 800c7a4:	e7e3      	b.n	800c76e <__mdiff+0x26>
 800c7a6:	9b01      	ldr	r3, [sp, #4]
 800c7a8:	2700      	movs	r7, #0
 800c7aa:	60c3      	str	r3, [r0, #12]
 800c7ac:	6920      	ldr	r0, [r4, #16]
 800c7ae:	3414      	adds	r4, #20
 800c7b0:	9401      	str	r4, [sp, #4]
 800c7b2:	9b01      	ldr	r3, [sp, #4]
 800c7b4:	0084      	lsls	r4, r0, #2
 800c7b6:	191b      	adds	r3, r3, r4
 800c7b8:	0034      	movs	r4, r6
 800c7ba:	9302      	str	r3, [sp, #8]
 800c7bc:	6933      	ldr	r3, [r6, #16]
 800c7be:	3414      	adds	r4, #20
 800c7c0:	0099      	lsls	r1, r3, #2
 800c7c2:	1863      	adds	r3, r4, r1
 800c7c4:	9303      	str	r3, [sp, #12]
 800c7c6:	0013      	movs	r3, r2
 800c7c8:	3314      	adds	r3, #20
 800c7ca:	469c      	mov	ip, r3
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	9b01      	ldr	r3, [sp, #4]
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	9b04      	ldr	r3, [sp, #16]
 800c7d4:	cc02      	ldmia	r4!, {r1}
 800c7d6:	cb20      	ldmia	r3!, {r5}
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	b2ab      	uxth	r3, r5
 800c7dc:	19df      	adds	r7, r3, r7
 800c7de:	b28b      	uxth	r3, r1
 800c7e0:	1afb      	subs	r3, r7, r3
 800c7e2:	0c09      	lsrs	r1, r1, #16
 800c7e4:	0c2d      	lsrs	r5, r5, #16
 800c7e6:	1a6d      	subs	r5, r5, r1
 800c7e8:	1419      	asrs	r1, r3, #16
 800c7ea:	186d      	adds	r5, r5, r1
 800c7ec:	4661      	mov	r1, ip
 800c7ee:	142f      	asrs	r7, r5, #16
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	042d      	lsls	r5, r5, #16
 800c7f4:	432b      	orrs	r3, r5
 800c7f6:	c108      	stmia	r1!, {r3}
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	468c      	mov	ip, r1
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	d8e8      	bhi.n	800c7d2 <__mdiff+0x8a>
 800c800:	0031      	movs	r1, r6
 800c802:	9c03      	ldr	r4, [sp, #12]
 800c804:	3115      	adds	r1, #21
 800c806:	2304      	movs	r3, #4
 800c808:	428c      	cmp	r4, r1
 800c80a:	d304      	bcc.n	800c816 <__mdiff+0xce>
 800c80c:	1ba3      	subs	r3, r4, r6
 800c80e:	3b15      	subs	r3, #21
 800c810:	089b      	lsrs	r3, r3, #2
 800c812:	3301      	adds	r3, #1
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	9901      	ldr	r1, [sp, #4]
 800c818:	18cc      	adds	r4, r1, r3
 800c81a:	9905      	ldr	r1, [sp, #20]
 800c81c:	0026      	movs	r6, r4
 800c81e:	18cb      	adds	r3, r1, r3
 800c820:	469c      	mov	ip, r3
 800c822:	9902      	ldr	r1, [sp, #8]
 800c824:	428e      	cmp	r6, r1
 800c826:	d310      	bcc.n	800c84a <__mdiff+0x102>
 800c828:	9e02      	ldr	r6, [sp, #8]
 800c82a:	1ee1      	subs	r1, r4, #3
 800c82c:	2500      	movs	r5, #0
 800c82e:	428e      	cmp	r6, r1
 800c830:	d304      	bcc.n	800c83c <__mdiff+0xf4>
 800c832:	0031      	movs	r1, r6
 800c834:	3103      	adds	r1, #3
 800c836:	1b0c      	subs	r4, r1, r4
 800c838:	08a4      	lsrs	r4, r4, #2
 800c83a:	00a5      	lsls	r5, r4, #2
 800c83c:	195b      	adds	r3, r3, r5
 800c83e:	3b04      	subs	r3, #4
 800c840:	6819      	ldr	r1, [r3, #0]
 800c842:	2900      	cmp	r1, #0
 800c844:	d00f      	beq.n	800c866 <__mdiff+0x11e>
 800c846:	6110      	str	r0, [r2, #16]
 800c848:	e797      	b.n	800c77a <__mdiff+0x32>
 800c84a:	ce02      	ldmia	r6!, {r1}
 800c84c:	b28d      	uxth	r5, r1
 800c84e:	19ed      	adds	r5, r5, r7
 800c850:	0c0f      	lsrs	r7, r1, #16
 800c852:	1429      	asrs	r1, r5, #16
 800c854:	1879      	adds	r1, r7, r1
 800c856:	140f      	asrs	r7, r1, #16
 800c858:	b2ad      	uxth	r5, r5
 800c85a:	0409      	lsls	r1, r1, #16
 800c85c:	430d      	orrs	r5, r1
 800c85e:	4661      	mov	r1, ip
 800c860:	c120      	stmia	r1!, {r5}
 800c862:	468c      	mov	ip, r1
 800c864:	e7dd      	b.n	800c822 <__mdiff+0xda>
 800c866:	3801      	subs	r0, #1
 800c868:	e7e9      	b.n	800c83e <__mdiff+0xf6>
 800c86a:	46c0      	nop			; (mov r8, r8)
 800c86c:	0800da10 	.word	0x0800da10
 800c870:	00000232 	.word	0x00000232
 800c874:	0800db00 	.word	0x0800db00

0800c878 <__ulp>:
 800c878:	4b0f      	ldr	r3, [pc, #60]	; (800c8b8 <__ulp+0x40>)
 800c87a:	4019      	ands	r1, r3
 800c87c:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <__ulp+0x44>)
 800c87e:	18c9      	adds	r1, r1, r3
 800c880:	2900      	cmp	r1, #0
 800c882:	dd04      	ble.n	800c88e <__ulp+0x16>
 800c884:	2200      	movs	r2, #0
 800c886:	000b      	movs	r3, r1
 800c888:	0010      	movs	r0, r2
 800c88a:	0019      	movs	r1, r3
 800c88c:	4770      	bx	lr
 800c88e:	4249      	negs	r1, r1
 800c890:	2200      	movs	r2, #0
 800c892:	2300      	movs	r3, #0
 800c894:	1509      	asrs	r1, r1, #20
 800c896:	2913      	cmp	r1, #19
 800c898:	dc04      	bgt.n	800c8a4 <__ulp+0x2c>
 800c89a:	2080      	movs	r0, #128	; 0x80
 800c89c:	0300      	lsls	r0, r0, #12
 800c89e:	4108      	asrs	r0, r1
 800c8a0:	0003      	movs	r3, r0
 800c8a2:	e7f1      	b.n	800c888 <__ulp+0x10>
 800c8a4:	3914      	subs	r1, #20
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	291e      	cmp	r1, #30
 800c8aa:	dc02      	bgt.n	800c8b2 <__ulp+0x3a>
 800c8ac:	2080      	movs	r0, #128	; 0x80
 800c8ae:	0600      	lsls	r0, r0, #24
 800c8b0:	40c8      	lsrs	r0, r1
 800c8b2:	0002      	movs	r2, r0
 800c8b4:	e7e8      	b.n	800c888 <__ulp+0x10>
 800c8b6:	46c0      	nop			; (mov r8, r8)
 800c8b8:	7ff00000 	.word	0x7ff00000
 800c8bc:	fcc00000 	.word	0xfcc00000

0800c8c0 <__b2d>:
 800c8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c2:	0006      	movs	r6, r0
 800c8c4:	6903      	ldr	r3, [r0, #16]
 800c8c6:	3614      	adds	r6, #20
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	18f3      	adds	r3, r6, r3
 800c8cc:	1f1d      	subs	r5, r3, #4
 800c8ce:	682c      	ldr	r4, [r5, #0]
 800c8d0:	000f      	movs	r7, r1
 800c8d2:	0020      	movs	r0, r4
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	f7ff fd43 	bl	800c360 <__hi0bits>
 800c8da:	2320      	movs	r3, #32
 800c8dc:	1a1b      	subs	r3, r3, r0
 800c8de:	491f      	ldr	r1, [pc, #124]	; (800c95c <__b2d+0x9c>)
 800c8e0:	603b      	str	r3, [r7, #0]
 800c8e2:	280a      	cmp	r0, #10
 800c8e4:	dc16      	bgt.n	800c914 <__b2d+0x54>
 800c8e6:	230b      	movs	r3, #11
 800c8e8:	0027      	movs	r7, r4
 800c8ea:	1a1b      	subs	r3, r3, r0
 800c8ec:	40df      	lsrs	r7, r3
 800c8ee:	4339      	orrs	r1, r7
 800c8f0:	469c      	mov	ip, r3
 800c8f2:	000b      	movs	r3, r1
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	42ae      	cmp	r6, r5
 800c8f8:	d202      	bcs.n	800c900 <__b2d+0x40>
 800c8fa:	9901      	ldr	r1, [sp, #4]
 800c8fc:	3908      	subs	r1, #8
 800c8fe:	6809      	ldr	r1, [r1, #0]
 800c900:	3015      	adds	r0, #21
 800c902:	4084      	lsls	r4, r0
 800c904:	4660      	mov	r0, ip
 800c906:	40c1      	lsrs	r1, r0
 800c908:	430c      	orrs	r4, r1
 800c90a:	0022      	movs	r2, r4
 800c90c:	0010      	movs	r0, r2
 800c90e:	0019      	movs	r1, r3
 800c910:	b003      	add	sp, #12
 800c912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c914:	2700      	movs	r7, #0
 800c916:	42ae      	cmp	r6, r5
 800c918:	d202      	bcs.n	800c920 <__b2d+0x60>
 800c91a:	9d01      	ldr	r5, [sp, #4]
 800c91c:	3d08      	subs	r5, #8
 800c91e:	682f      	ldr	r7, [r5, #0]
 800c920:	230b      	movs	r3, #11
 800c922:	425b      	negs	r3, r3
 800c924:	469c      	mov	ip, r3
 800c926:	4484      	add	ip, r0
 800c928:	280b      	cmp	r0, #11
 800c92a:	d013      	beq.n	800c954 <__b2d+0x94>
 800c92c:	4663      	mov	r3, ip
 800c92e:	2020      	movs	r0, #32
 800c930:	409c      	lsls	r4, r3
 800c932:	1ac0      	subs	r0, r0, r3
 800c934:	003b      	movs	r3, r7
 800c936:	40c3      	lsrs	r3, r0
 800c938:	431c      	orrs	r4, r3
 800c93a:	4321      	orrs	r1, r4
 800c93c:	000b      	movs	r3, r1
 800c93e:	2100      	movs	r1, #0
 800c940:	42b5      	cmp	r5, r6
 800c942:	d901      	bls.n	800c948 <__b2d+0x88>
 800c944:	3d04      	subs	r5, #4
 800c946:	6829      	ldr	r1, [r5, #0]
 800c948:	4664      	mov	r4, ip
 800c94a:	40c1      	lsrs	r1, r0
 800c94c:	40a7      	lsls	r7, r4
 800c94e:	430f      	orrs	r7, r1
 800c950:	003a      	movs	r2, r7
 800c952:	e7db      	b.n	800c90c <__b2d+0x4c>
 800c954:	4321      	orrs	r1, r4
 800c956:	000b      	movs	r3, r1
 800c958:	e7fa      	b.n	800c950 <__b2d+0x90>
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	3ff00000 	.word	0x3ff00000

0800c960 <__d2b>:
 800c960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c962:	2101      	movs	r1, #1
 800c964:	0014      	movs	r4, r2
 800c966:	001e      	movs	r6, r3
 800c968:	9f08      	ldr	r7, [sp, #32]
 800c96a:	f7ff fc01 	bl	800c170 <_Balloc>
 800c96e:	1e05      	subs	r5, r0, #0
 800c970:	d105      	bne.n	800c97e <__d2b+0x1e>
 800c972:	0002      	movs	r2, r0
 800c974:	4b26      	ldr	r3, [pc, #152]	; (800ca10 <__d2b+0xb0>)
 800c976:	4927      	ldr	r1, [pc, #156]	; (800ca14 <__d2b+0xb4>)
 800c978:	4827      	ldr	r0, [pc, #156]	; (800ca18 <__d2b+0xb8>)
 800c97a:	f000 fd2d 	bl	800d3d8 <__assert_func>
 800c97e:	0333      	lsls	r3, r6, #12
 800c980:	0076      	lsls	r6, r6, #1
 800c982:	0b1b      	lsrs	r3, r3, #12
 800c984:	0d76      	lsrs	r6, r6, #21
 800c986:	d124      	bne.n	800c9d2 <__d2b+0x72>
 800c988:	9301      	str	r3, [sp, #4]
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	d027      	beq.n	800c9de <__d2b+0x7e>
 800c98e:	4668      	mov	r0, sp
 800c990:	9400      	str	r4, [sp, #0]
 800c992:	f7ff fcff 	bl	800c394 <__lo0bits>
 800c996:	9c00      	ldr	r4, [sp, #0]
 800c998:	2800      	cmp	r0, #0
 800c99a:	d01e      	beq.n	800c9da <__d2b+0x7a>
 800c99c:	9b01      	ldr	r3, [sp, #4]
 800c99e:	2120      	movs	r1, #32
 800c9a0:	001a      	movs	r2, r3
 800c9a2:	1a09      	subs	r1, r1, r0
 800c9a4:	408a      	lsls	r2, r1
 800c9a6:	40c3      	lsrs	r3, r0
 800c9a8:	4322      	orrs	r2, r4
 800c9aa:	616a      	str	r2, [r5, #20]
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	9c01      	ldr	r4, [sp, #4]
 800c9b0:	61ac      	str	r4, [r5, #24]
 800c9b2:	1e63      	subs	r3, r4, #1
 800c9b4:	419c      	sbcs	r4, r3
 800c9b6:	3401      	adds	r4, #1
 800c9b8:	612c      	str	r4, [r5, #16]
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	d018      	beq.n	800c9f0 <__d2b+0x90>
 800c9be:	4b17      	ldr	r3, [pc, #92]	; (800ca1c <__d2b+0xbc>)
 800c9c0:	18f6      	adds	r6, r6, r3
 800c9c2:	2335      	movs	r3, #53	; 0x35
 800c9c4:	1836      	adds	r6, r6, r0
 800c9c6:	1a18      	subs	r0, r3, r0
 800c9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ca:	603e      	str	r6, [r7, #0]
 800c9cc:	6018      	str	r0, [r3, #0]
 800c9ce:	0028      	movs	r0, r5
 800c9d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9d2:	2280      	movs	r2, #128	; 0x80
 800c9d4:	0352      	lsls	r2, r2, #13
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	e7d6      	b.n	800c988 <__d2b+0x28>
 800c9da:	616c      	str	r4, [r5, #20]
 800c9dc:	e7e7      	b.n	800c9ae <__d2b+0x4e>
 800c9de:	a801      	add	r0, sp, #4
 800c9e0:	f7ff fcd8 	bl	800c394 <__lo0bits>
 800c9e4:	2401      	movs	r4, #1
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	612c      	str	r4, [r5, #16]
 800c9ea:	616b      	str	r3, [r5, #20]
 800c9ec:	3020      	adds	r0, #32
 800c9ee:	e7e4      	b.n	800c9ba <__d2b+0x5a>
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <__d2b+0xc0>)
 800c9f2:	18c0      	adds	r0, r0, r3
 800c9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ca24 <__d2b+0xc4>)
 800c9f6:	6038      	str	r0, [r7, #0]
 800c9f8:	18e3      	adds	r3, r4, r3
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	18eb      	adds	r3, r5, r3
 800c9fe:	6958      	ldr	r0, [r3, #20]
 800ca00:	f7ff fcae 	bl	800c360 <__hi0bits>
 800ca04:	0164      	lsls	r4, r4, #5
 800ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca08:	1a24      	subs	r4, r4, r0
 800ca0a:	601c      	str	r4, [r3, #0]
 800ca0c:	e7df      	b.n	800c9ce <__d2b+0x6e>
 800ca0e:	46c0      	nop			; (mov r8, r8)
 800ca10:	0800da10 	.word	0x0800da10
 800ca14:	0000030a 	.word	0x0000030a
 800ca18:	0800db00 	.word	0x0800db00
 800ca1c:	fffffbcd 	.word	0xfffffbcd
 800ca20:	fffffbce 	.word	0xfffffbce
 800ca24:	3fffffff 	.word	0x3fffffff

0800ca28 <__ratio>:
 800ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	000f      	movs	r7, r1
 800ca2e:	a904      	add	r1, sp, #16
 800ca30:	0006      	movs	r6, r0
 800ca32:	f7ff ff45 	bl	800c8c0 <__b2d>
 800ca36:	9000      	str	r0, [sp, #0]
 800ca38:	9101      	str	r1, [sp, #4]
 800ca3a:	9c00      	ldr	r4, [sp, #0]
 800ca3c:	9d01      	ldr	r5, [sp, #4]
 800ca3e:	0038      	movs	r0, r7
 800ca40:	a905      	add	r1, sp, #20
 800ca42:	f7ff ff3d 	bl	800c8c0 <__b2d>
 800ca46:	9002      	str	r0, [sp, #8]
 800ca48:	9103      	str	r1, [sp, #12]
 800ca4a:	9a02      	ldr	r2, [sp, #8]
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	6931      	ldr	r1, [r6, #16]
 800ca50:	6938      	ldr	r0, [r7, #16]
 800ca52:	9e05      	ldr	r6, [sp, #20]
 800ca54:	1a08      	subs	r0, r1, r0
 800ca56:	9904      	ldr	r1, [sp, #16]
 800ca58:	0140      	lsls	r0, r0, #5
 800ca5a:	1b89      	subs	r1, r1, r6
 800ca5c:	1841      	adds	r1, r0, r1
 800ca5e:	0508      	lsls	r0, r1, #20
 800ca60:	2900      	cmp	r1, #0
 800ca62:	dd07      	ble.n	800ca74 <__ratio+0x4c>
 800ca64:	9901      	ldr	r1, [sp, #4]
 800ca66:	1845      	adds	r5, r0, r1
 800ca68:	0020      	movs	r0, r4
 800ca6a:	0029      	movs	r1, r5
 800ca6c:	f7f4 fbfa 	bl	8001264 <__aeabi_ddiv>
 800ca70:	b007      	add	sp, #28
 800ca72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca74:	9903      	ldr	r1, [sp, #12]
 800ca76:	1a0b      	subs	r3, r1, r0
 800ca78:	e7f6      	b.n	800ca68 <__ratio+0x40>

0800ca7a <__copybits>:
 800ca7a:	b570      	push	{r4, r5, r6, lr}
 800ca7c:	0014      	movs	r4, r2
 800ca7e:	0005      	movs	r5, r0
 800ca80:	3901      	subs	r1, #1
 800ca82:	6913      	ldr	r3, [r2, #16]
 800ca84:	1149      	asrs	r1, r1, #5
 800ca86:	3101      	adds	r1, #1
 800ca88:	0089      	lsls	r1, r1, #2
 800ca8a:	3414      	adds	r4, #20
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	1841      	adds	r1, r0, r1
 800ca90:	18e3      	adds	r3, r4, r3
 800ca92:	42a3      	cmp	r3, r4
 800ca94:	d80d      	bhi.n	800cab2 <__copybits+0x38>
 800ca96:	0014      	movs	r4, r2
 800ca98:	3411      	adds	r4, #17
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	429c      	cmp	r4, r3
 800ca9e:	d803      	bhi.n	800caa8 <__copybits+0x2e>
 800caa0:	1a9b      	subs	r3, r3, r2
 800caa2:	3b11      	subs	r3, #17
 800caa4:	089b      	lsrs	r3, r3, #2
 800caa6:	009d      	lsls	r5, r3, #2
 800caa8:	2300      	movs	r3, #0
 800caaa:	1940      	adds	r0, r0, r5
 800caac:	4281      	cmp	r1, r0
 800caae:	d803      	bhi.n	800cab8 <__copybits+0x3e>
 800cab0:	bd70      	pop	{r4, r5, r6, pc}
 800cab2:	cc40      	ldmia	r4!, {r6}
 800cab4:	c540      	stmia	r5!, {r6}
 800cab6:	e7ec      	b.n	800ca92 <__copybits+0x18>
 800cab8:	c008      	stmia	r0!, {r3}
 800caba:	e7f7      	b.n	800caac <__copybits+0x32>

0800cabc <__any_on>:
 800cabc:	0002      	movs	r2, r0
 800cabe:	6900      	ldr	r0, [r0, #16]
 800cac0:	b510      	push	{r4, lr}
 800cac2:	3214      	adds	r2, #20
 800cac4:	114b      	asrs	r3, r1, #5
 800cac6:	4298      	cmp	r0, r3
 800cac8:	db13      	blt.n	800caf2 <__any_on+0x36>
 800caca:	dd0c      	ble.n	800cae6 <__any_on+0x2a>
 800cacc:	241f      	movs	r4, #31
 800cace:	0008      	movs	r0, r1
 800cad0:	4020      	ands	r0, r4
 800cad2:	4221      	tst	r1, r4
 800cad4:	d007      	beq.n	800cae6 <__any_on+0x2a>
 800cad6:	0099      	lsls	r1, r3, #2
 800cad8:	588c      	ldr	r4, [r1, r2]
 800cada:	0021      	movs	r1, r4
 800cadc:	40c1      	lsrs	r1, r0
 800cade:	4081      	lsls	r1, r0
 800cae0:	2001      	movs	r0, #1
 800cae2:	428c      	cmp	r4, r1
 800cae4:	d104      	bne.n	800caf0 <__any_on+0x34>
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	18d3      	adds	r3, r2, r3
 800caea:	4293      	cmp	r3, r2
 800caec:	d803      	bhi.n	800caf6 <__any_on+0x3a>
 800caee:	2000      	movs	r0, #0
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	0003      	movs	r3, r0
 800caf4:	e7f7      	b.n	800cae6 <__any_on+0x2a>
 800caf6:	3b04      	subs	r3, #4
 800caf8:	6819      	ldr	r1, [r3, #0]
 800cafa:	2900      	cmp	r1, #0
 800cafc:	d0f5      	beq.n	800caea <__any_on+0x2e>
 800cafe:	2001      	movs	r0, #1
 800cb00:	e7f6      	b.n	800caf0 <__any_on+0x34>

0800cb02 <_calloc_r>:
 800cb02:	b570      	push	{r4, r5, r6, lr}
 800cb04:	0c13      	lsrs	r3, r2, #16
 800cb06:	0c0d      	lsrs	r5, r1, #16
 800cb08:	d11e      	bne.n	800cb48 <_calloc_r+0x46>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10c      	bne.n	800cb28 <_calloc_r+0x26>
 800cb0e:	b289      	uxth	r1, r1
 800cb10:	b294      	uxth	r4, r2
 800cb12:	434c      	muls	r4, r1
 800cb14:	0021      	movs	r1, r4
 800cb16:	f000 f88d 	bl	800cc34 <_malloc_r>
 800cb1a:	1e05      	subs	r5, r0, #0
 800cb1c:	d01b      	beq.n	800cb56 <_calloc_r+0x54>
 800cb1e:	0022      	movs	r2, r4
 800cb20:	2100      	movs	r1, #0
 800cb22:	f7fb ffd4 	bl	8008ace <memset>
 800cb26:	e016      	b.n	800cb56 <_calloc_r+0x54>
 800cb28:	1c1d      	adds	r5, r3, #0
 800cb2a:	1c0b      	adds	r3, r1, #0
 800cb2c:	b292      	uxth	r2, r2
 800cb2e:	b289      	uxth	r1, r1
 800cb30:	b29c      	uxth	r4, r3
 800cb32:	4351      	muls	r1, r2
 800cb34:	b2ab      	uxth	r3, r5
 800cb36:	4363      	muls	r3, r4
 800cb38:	0c0c      	lsrs	r4, r1, #16
 800cb3a:	191c      	adds	r4, r3, r4
 800cb3c:	0c22      	lsrs	r2, r4, #16
 800cb3e:	d107      	bne.n	800cb50 <_calloc_r+0x4e>
 800cb40:	0424      	lsls	r4, r4, #16
 800cb42:	b289      	uxth	r1, r1
 800cb44:	430c      	orrs	r4, r1
 800cb46:	e7e5      	b.n	800cb14 <_calloc_r+0x12>
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d101      	bne.n	800cb50 <_calloc_r+0x4e>
 800cb4c:	1c13      	adds	r3, r2, #0
 800cb4e:	e7ed      	b.n	800cb2c <_calloc_r+0x2a>
 800cb50:	230c      	movs	r3, #12
 800cb52:	2500      	movs	r5, #0
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	0028      	movs	r0, r5
 800cb58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb5c <_free_r>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	0005      	movs	r5, r0
 800cb60:	2900      	cmp	r1, #0
 800cb62:	d010      	beq.n	800cb86 <_free_r+0x2a>
 800cb64:	1f0c      	subs	r4, r1, #4
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	da00      	bge.n	800cb6e <_free_r+0x12>
 800cb6c:	18e4      	adds	r4, r4, r3
 800cb6e:	0028      	movs	r0, r5
 800cb70:	f000 fcbe 	bl	800d4f0 <__malloc_lock>
 800cb74:	4a1d      	ldr	r2, [pc, #116]	; (800cbec <_free_r+0x90>)
 800cb76:	6813      	ldr	r3, [r2, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d105      	bne.n	800cb88 <_free_r+0x2c>
 800cb7c:	6063      	str	r3, [r4, #4]
 800cb7e:	6014      	str	r4, [r2, #0]
 800cb80:	0028      	movs	r0, r5
 800cb82:	f000 fcbd 	bl	800d500 <__malloc_unlock>
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	d908      	bls.n	800cb9e <_free_r+0x42>
 800cb8c:	6821      	ldr	r1, [r4, #0]
 800cb8e:	1860      	adds	r0, r4, r1
 800cb90:	4283      	cmp	r3, r0
 800cb92:	d1f3      	bne.n	800cb7c <_free_r+0x20>
 800cb94:	6818      	ldr	r0, [r3, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	1841      	adds	r1, r0, r1
 800cb9a:	6021      	str	r1, [r4, #0]
 800cb9c:	e7ee      	b.n	800cb7c <_free_r+0x20>
 800cb9e:	001a      	movs	r2, r3
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <_free_r+0x4e>
 800cba6:	42a3      	cmp	r3, r4
 800cba8:	d9f9      	bls.n	800cb9e <_free_r+0x42>
 800cbaa:	6811      	ldr	r1, [r2, #0]
 800cbac:	1850      	adds	r0, r2, r1
 800cbae:	42a0      	cmp	r0, r4
 800cbb0:	d10b      	bne.n	800cbca <_free_r+0x6e>
 800cbb2:	6820      	ldr	r0, [r4, #0]
 800cbb4:	1809      	adds	r1, r1, r0
 800cbb6:	1850      	adds	r0, r2, r1
 800cbb8:	6011      	str	r1, [r2, #0]
 800cbba:	4283      	cmp	r3, r0
 800cbbc:	d1e0      	bne.n	800cb80 <_free_r+0x24>
 800cbbe:	6818      	ldr	r0, [r3, #0]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	1841      	adds	r1, r0, r1
 800cbc4:	6011      	str	r1, [r2, #0]
 800cbc6:	6053      	str	r3, [r2, #4]
 800cbc8:	e7da      	b.n	800cb80 <_free_r+0x24>
 800cbca:	42a0      	cmp	r0, r4
 800cbcc:	d902      	bls.n	800cbd4 <_free_r+0x78>
 800cbce:	230c      	movs	r3, #12
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	e7d5      	b.n	800cb80 <_free_r+0x24>
 800cbd4:	6821      	ldr	r1, [r4, #0]
 800cbd6:	1860      	adds	r0, r4, r1
 800cbd8:	4283      	cmp	r3, r0
 800cbda:	d103      	bne.n	800cbe4 <_free_r+0x88>
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	1841      	adds	r1, r0, r1
 800cbe2:	6021      	str	r1, [r4, #0]
 800cbe4:	6063      	str	r3, [r4, #4]
 800cbe6:	6054      	str	r4, [r2, #4]
 800cbe8:	e7ca      	b.n	800cb80 <_free_r+0x24>
 800cbea:	46c0      	nop			; (mov r8, r8)
 800cbec:	20000628 	.word	0x20000628

0800cbf0 <sbrk_aligned>:
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	4e0f      	ldr	r6, [pc, #60]	; (800cc30 <sbrk_aligned+0x40>)
 800cbf4:	000d      	movs	r5, r1
 800cbf6:	6831      	ldr	r1, [r6, #0]
 800cbf8:	0004      	movs	r4, r0
 800cbfa:	2900      	cmp	r1, #0
 800cbfc:	d102      	bne.n	800cc04 <sbrk_aligned+0x14>
 800cbfe:	f000 fb59 	bl	800d2b4 <_sbrk_r>
 800cc02:	6030      	str	r0, [r6, #0]
 800cc04:	0029      	movs	r1, r5
 800cc06:	0020      	movs	r0, r4
 800cc08:	f000 fb54 	bl	800d2b4 <_sbrk_r>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d00a      	beq.n	800cc26 <sbrk_aligned+0x36>
 800cc10:	2303      	movs	r3, #3
 800cc12:	1cc5      	adds	r5, r0, #3
 800cc14:	439d      	bics	r5, r3
 800cc16:	42a8      	cmp	r0, r5
 800cc18:	d007      	beq.n	800cc2a <sbrk_aligned+0x3a>
 800cc1a:	1a29      	subs	r1, r5, r0
 800cc1c:	0020      	movs	r0, r4
 800cc1e:	f000 fb49 	bl	800d2b4 <_sbrk_r>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	d101      	bne.n	800cc2a <sbrk_aligned+0x3a>
 800cc26:	2501      	movs	r5, #1
 800cc28:	426d      	negs	r5, r5
 800cc2a:	0028      	movs	r0, r5
 800cc2c:	bd70      	pop	{r4, r5, r6, pc}
 800cc2e:	46c0      	nop			; (mov r8, r8)
 800cc30:	2000062c 	.word	0x2000062c

0800cc34 <_malloc_r>:
 800cc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc36:	2203      	movs	r2, #3
 800cc38:	1ccb      	adds	r3, r1, #3
 800cc3a:	4393      	bics	r3, r2
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	0006      	movs	r6, r0
 800cc40:	001f      	movs	r7, r3
 800cc42:	2b0c      	cmp	r3, #12
 800cc44:	d232      	bcs.n	800ccac <_malloc_r+0x78>
 800cc46:	270c      	movs	r7, #12
 800cc48:	42b9      	cmp	r1, r7
 800cc4a:	d831      	bhi.n	800ccb0 <_malloc_r+0x7c>
 800cc4c:	0030      	movs	r0, r6
 800cc4e:	f000 fc4f 	bl	800d4f0 <__malloc_lock>
 800cc52:	4d32      	ldr	r5, [pc, #200]	; (800cd1c <_malloc_r+0xe8>)
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	001c      	movs	r4, r3
 800cc58:	2c00      	cmp	r4, #0
 800cc5a:	d12e      	bne.n	800ccba <_malloc_r+0x86>
 800cc5c:	0039      	movs	r1, r7
 800cc5e:	0030      	movs	r0, r6
 800cc60:	f7ff ffc6 	bl	800cbf0 <sbrk_aligned>
 800cc64:	0004      	movs	r4, r0
 800cc66:	1c43      	adds	r3, r0, #1
 800cc68:	d11e      	bne.n	800cca8 <_malloc_r+0x74>
 800cc6a:	682c      	ldr	r4, [r5, #0]
 800cc6c:	0025      	movs	r5, r4
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	d14a      	bne.n	800cd08 <_malloc_r+0xd4>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	0029      	movs	r1, r5
 800cc76:	18e3      	adds	r3, r4, r3
 800cc78:	0030      	movs	r0, r6
 800cc7a:	9301      	str	r3, [sp, #4]
 800cc7c:	f000 fb1a 	bl	800d2b4 <_sbrk_r>
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	4283      	cmp	r3, r0
 800cc84:	d143      	bne.n	800cd0e <_malloc_r+0xda>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	3703      	adds	r7, #3
 800cc8a:	1aff      	subs	r7, r7, r3
 800cc8c:	2303      	movs	r3, #3
 800cc8e:	439f      	bics	r7, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	2f0c      	cmp	r7, #12
 800cc94:	d200      	bcs.n	800cc98 <_malloc_r+0x64>
 800cc96:	270c      	movs	r7, #12
 800cc98:	0039      	movs	r1, r7
 800cc9a:	0030      	movs	r0, r6
 800cc9c:	f7ff ffa8 	bl	800cbf0 <sbrk_aligned>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d034      	beq.n	800cd0e <_malloc_r+0xda>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	19df      	adds	r7, r3, r7
 800cca8:	6027      	str	r7, [r4, #0]
 800ccaa:	e013      	b.n	800ccd4 <_malloc_r+0xa0>
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dacb      	bge.n	800cc48 <_malloc_r+0x14>
 800ccb0:	230c      	movs	r3, #12
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	0028      	movs	r0, r5
 800ccb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	1bd1      	subs	r1, r2, r7
 800ccbe:	d420      	bmi.n	800cd02 <_malloc_r+0xce>
 800ccc0:	290b      	cmp	r1, #11
 800ccc2:	d917      	bls.n	800ccf4 <_malloc_r+0xc0>
 800ccc4:	19e2      	adds	r2, r4, r7
 800ccc6:	6027      	str	r7, [r4, #0]
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	d111      	bne.n	800ccf0 <_malloc_r+0xbc>
 800cccc:	602a      	str	r2, [r5, #0]
 800ccce:	6863      	ldr	r3, [r4, #4]
 800ccd0:	6011      	str	r1, [r2, #0]
 800ccd2:	6053      	str	r3, [r2, #4]
 800ccd4:	0030      	movs	r0, r6
 800ccd6:	0025      	movs	r5, r4
 800ccd8:	f000 fc12 	bl	800d500 <__malloc_unlock>
 800ccdc:	2207      	movs	r2, #7
 800ccde:	350b      	adds	r5, #11
 800cce0:	1d23      	adds	r3, r4, #4
 800cce2:	4395      	bics	r5, r2
 800cce4:	1aea      	subs	r2, r5, r3
 800cce6:	429d      	cmp	r5, r3
 800cce8:	d0e5      	beq.n	800ccb6 <_malloc_r+0x82>
 800ccea:	1b5b      	subs	r3, r3, r5
 800ccec:	50a3      	str	r3, [r4, r2]
 800ccee:	e7e2      	b.n	800ccb6 <_malloc_r+0x82>
 800ccf0:	605a      	str	r2, [r3, #4]
 800ccf2:	e7ec      	b.n	800ccce <_malloc_r+0x9a>
 800ccf4:	6862      	ldr	r2, [r4, #4]
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	d101      	bne.n	800ccfe <_malloc_r+0xca>
 800ccfa:	602a      	str	r2, [r5, #0]
 800ccfc:	e7ea      	b.n	800ccd4 <_malloc_r+0xa0>
 800ccfe:	605a      	str	r2, [r3, #4]
 800cd00:	e7e8      	b.n	800ccd4 <_malloc_r+0xa0>
 800cd02:	0023      	movs	r3, r4
 800cd04:	6864      	ldr	r4, [r4, #4]
 800cd06:	e7a7      	b.n	800cc58 <_malloc_r+0x24>
 800cd08:	002c      	movs	r4, r5
 800cd0a:	686d      	ldr	r5, [r5, #4]
 800cd0c:	e7af      	b.n	800cc6e <_malloc_r+0x3a>
 800cd0e:	230c      	movs	r3, #12
 800cd10:	0030      	movs	r0, r6
 800cd12:	6033      	str	r3, [r6, #0]
 800cd14:	f000 fbf4 	bl	800d500 <__malloc_unlock>
 800cd18:	e7cd      	b.n	800ccb6 <_malloc_r+0x82>
 800cd1a:	46c0      	nop			; (mov r8, r8)
 800cd1c:	20000628 	.word	0x20000628

0800cd20 <__ssputs_r>:
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	688e      	ldr	r6, [r1, #8]
 800cd24:	b085      	sub	sp, #20
 800cd26:	0007      	movs	r7, r0
 800cd28:	000c      	movs	r4, r1
 800cd2a:	9203      	str	r2, [sp, #12]
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	429e      	cmp	r6, r3
 800cd30:	d83c      	bhi.n	800cdac <__ssputs_r+0x8c>
 800cd32:	2390      	movs	r3, #144	; 0x90
 800cd34:	898a      	ldrh	r2, [r1, #12]
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	421a      	tst	r2, r3
 800cd3a:	d034      	beq.n	800cda6 <__ssputs_r+0x86>
 800cd3c:	6909      	ldr	r1, [r1, #16]
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	6960      	ldr	r0, [r4, #20]
 800cd42:	1a5b      	subs	r3, r3, r1
 800cd44:	9302      	str	r3, [sp, #8]
 800cd46:	2303      	movs	r3, #3
 800cd48:	4343      	muls	r3, r0
 800cd4a:	0fdd      	lsrs	r5, r3, #31
 800cd4c:	18ed      	adds	r5, r5, r3
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	9802      	ldr	r0, [sp, #8]
 800cd52:	3301      	adds	r3, #1
 800cd54:	181b      	adds	r3, r3, r0
 800cd56:	106d      	asrs	r5, r5, #1
 800cd58:	42ab      	cmp	r3, r5
 800cd5a:	d900      	bls.n	800cd5e <__ssputs_r+0x3e>
 800cd5c:	001d      	movs	r5, r3
 800cd5e:	0553      	lsls	r3, r2, #21
 800cd60:	d532      	bpl.n	800cdc8 <__ssputs_r+0xa8>
 800cd62:	0029      	movs	r1, r5
 800cd64:	0038      	movs	r0, r7
 800cd66:	f7ff ff65 	bl	800cc34 <_malloc_r>
 800cd6a:	1e06      	subs	r6, r0, #0
 800cd6c:	d109      	bne.n	800cd82 <__ssputs_r+0x62>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	603b      	str	r3, [r7, #0]
 800cd72:	2340      	movs	r3, #64	; 0x40
 800cd74:	2001      	movs	r0, #1
 800cd76:	89a2      	ldrh	r2, [r4, #12]
 800cd78:	4240      	negs	r0, r0
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	81a3      	strh	r3, [r4, #12]
 800cd7e:	b005      	add	sp, #20
 800cd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd82:	9a02      	ldr	r2, [sp, #8]
 800cd84:	6921      	ldr	r1, [r4, #16]
 800cd86:	f7fb fe99 	bl	8008abc <memcpy>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	4a14      	ldr	r2, [pc, #80]	; (800cde0 <__ssputs_r+0xc0>)
 800cd8e:	401a      	ands	r2, r3
 800cd90:	2380      	movs	r3, #128	; 0x80
 800cd92:	4313      	orrs	r3, r2
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	9b02      	ldr	r3, [sp, #8]
 800cd98:	6126      	str	r6, [r4, #16]
 800cd9a:	18f6      	adds	r6, r6, r3
 800cd9c:	6026      	str	r6, [r4, #0]
 800cd9e:	6165      	str	r5, [r4, #20]
 800cda0:	9e01      	ldr	r6, [sp, #4]
 800cda2:	1aed      	subs	r5, r5, r3
 800cda4:	60a5      	str	r5, [r4, #8]
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	d900      	bls.n	800cdae <__ssputs_r+0x8e>
 800cdac:	9e01      	ldr	r6, [sp, #4]
 800cdae:	0032      	movs	r2, r6
 800cdb0:	9903      	ldr	r1, [sp, #12]
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	f000 fb88 	bl	800d4c8 <memmove>
 800cdb8:	68a3      	ldr	r3, [r4, #8]
 800cdba:	2000      	movs	r0, #0
 800cdbc:	1b9b      	subs	r3, r3, r6
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	199e      	adds	r6, r3, r6
 800cdc4:	6026      	str	r6, [r4, #0]
 800cdc6:	e7da      	b.n	800cd7e <__ssputs_r+0x5e>
 800cdc8:	002a      	movs	r2, r5
 800cdca:	0038      	movs	r0, r7
 800cdcc:	f000 fba0 	bl	800d510 <_realloc_r>
 800cdd0:	1e06      	subs	r6, r0, #0
 800cdd2:	d1e0      	bne.n	800cd96 <__ssputs_r+0x76>
 800cdd4:	0038      	movs	r0, r7
 800cdd6:	6921      	ldr	r1, [r4, #16]
 800cdd8:	f7ff fec0 	bl	800cb5c <_free_r>
 800cddc:	e7c7      	b.n	800cd6e <__ssputs_r+0x4e>
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	fffffb7f 	.word	0xfffffb7f

0800cde4 <_svfiprintf_r>:
 800cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde6:	b0a1      	sub	sp, #132	; 0x84
 800cde8:	9003      	str	r0, [sp, #12]
 800cdea:	001d      	movs	r5, r3
 800cdec:	898b      	ldrh	r3, [r1, #12]
 800cdee:	000f      	movs	r7, r1
 800cdf0:	0016      	movs	r6, r2
 800cdf2:	061b      	lsls	r3, r3, #24
 800cdf4:	d511      	bpl.n	800ce1a <_svfiprintf_r+0x36>
 800cdf6:	690b      	ldr	r3, [r1, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10e      	bne.n	800ce1a <_svfiprintf_r+0x36>
 800cdfc:	2140      	movs	r1, #64	; 0x40
 800cdfe:	f7ff ff19 	bl	800cc34 <_malloc_r>
 800ce02:	6038      	str	r0, [r7, #0]
 800ce04:	6138      	str	r0, [r7, #16]
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d105      	bne.n	800ce16 <_svfiprintf_r+0x32>
 800ce0a:	230c      	movs	r3, #12
 800ce0c:	9a03      	ldr	r2, [sp, #12]
 800ce0e:	3801      	subs	r0, #1
 800ce10:	6013      	str	r3, [r2, #0]
 800ce12:	b021      	add	sp, #132	; 0x84
 800ce14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce16:	2340      	movs	r3, #64	; 0x40
 800ce18:	617b      	str	r3, [r7, #20]
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	ac08      	add	r4, sp, #32
 800ce1e:	6163      	str	r3, [r4, #20]
 800ce20:	3320      	adds	r3, #32
 800ce22:	7663      	strb	r3, [r4, #25]
 800ce24:	3310      	adds	r3, #16
 800ce26:	76a3      	strb	r3, [r4, #26]
 800ce28:	9507      	str	r5, [sp, #28]
 800ce2a:	0035      	movs	r5, r6
 800ce2c:	782b      	ldrb	r3, [r5, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <_svfiprintf_r+0x52>
 800ce32:	2b25      	cmp	r3, #37	; 0x25
 800ce34:	d147      	bne.n	800cec6 <_svfiprintf_r+0xe2>
 800ce36:	1bab      	subs	r3, r5, r6
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	42b5      	cmp	r5, r6
 800ce3c:	d00c      	beq.n	800ce58 <_svfiprintf_r+0x74>
 800ce3e:	0032      	movs	r2, r6
 800ce40:	0039      	movs	r1, r7
 800ce42:	9803      	ldr	r0, [sp, #12]
 800ce44:	f7ff ff6c 	bl	800cd20 <__ssputs_r>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d100      	bne.n	800ce4e <_svfiprintf_r+0x6a>
 800ce4c:	e0ae      	b.n	800cfac <_svfiprintf_r+0x1c8>
 800ce4e:	6962      	ldr	r2, [r4, #20]
 800ce50:	9b05      	ldr	r3, [sp, #20]
 800ce52:	4694      	mov	ip, r2
 800ce54:	4463      	add	r3, ip
 800ce56:	6163      	str	r3, [r4, #20]
 800ce58:	782b      	ldrb	r3, [r5, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d100      	bne.n	800ce60 <_svfiprintf_r+0x7c>
 800ce5e:	e0a5      	b.n	800cfac <_svfiprintf_r+0x1c8>
 800ce60:	2201      	movs	r2, #1
 800ce62:	2300      	movs	r3, #0
 800ce64:	4252      	negs	r2, r2
 800ce66:	6062      	str	r2, [r4, #4]
 800ce68:	a904      	add	r1, sp, #16
 800ce6a:	3254      	adds	r2, #84	; 0x54
 800ce6c:	1852      	adds	r2, r2, r1
 800ce6e:	1c6e      	adds	r6, r5, #1
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	60e3      	str	r3, [r4, #12]
 800ce74:	60a3      	str	r3, [r4, #8]
 800ce76:	7013      	strb	r3, [r2, #0]
 800ce78:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce7a:	2205      	movs	r2, #5
 800ce7c:	7831      	ldrb	r1, [r6, #0]
 800ce7e:	4854      	ldr	r0, [pc, #336]	; (800cfd0 <_svfiprintf_r+0x1ec>)
 800ce80:	f7ff f96a 	bl	800c158 <memchr>
 800ce84:	1c75      	adds	r5, r6, #1
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d11f      	bne.n	800ceca <_svfiprintf_r+0xe6>
 800ce8a:	6822      	ldr	r2, [r4, #0]
 800ce8c:	06d3      	lsls	r3, r2, #27
 800ce8e:	d504      	bpl.n	800ce9a <_svfiprintf_r+0xb6>
 800ce90:	2353      	movs	r3, #83	; 0x53
 800ce92:	a904      	add	r1, sp, #16
 800ce94:	185b      	adds	r3, r3, r1
 800ce96:	2120      	movs	r1, #32
 800ce98:	7019      	strb	r1, [r3, #0]
 800ce9a:	0713      	lsls	r3, r2, #28
 800ce9c:	d504      	bpl.n	800cea8 <_svfiprintf_r+0xc4>
 800ce9e:	2353      	movs	r3, #83	; 0x53
 800cea0:	a904      	add	r1, sp, #16
 800cea2:	185b      	adds	r3, r3, r1
 800cea4:	212b      	movs	r1, #43	; 0x2b
 800cea6:	7019      	strb	r1, [r3, #0]
 800cea8:	7833      	ldrb	r3, [r6, #0]
 800ceaa:	2b2a      	cmp	r3, #42	; 0x2a
 800ceac:	d016      	beq.n	800cedc <_svfiprintf_r+0xf8>
 800ceae:	0035      	movs	r5, r6
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	200a      	movs	r0, #10
 800ceb4:	68e3      	ldr	r3, [r4, #12]
 800ceb6:	782a      	ldrb	r2, [r5, #0]
 800ceb8:	1c6e      	adds	r6, r5, #1
 800ceba:	3a30      	subs	r2, #48	; 0x30
 800cebc:	2a09      	cmp	r2, #9
 800cebe:	d94e      	bls.n	800cf5e <_svfiprintf_r+0x17a>
 800cec0:	2900      	cmp	r1, #0
 800cec2:	d111      	bne.n	800cee8 <_svfiprintf_r+0x104>
 800cec4:	e017      	b.n	800cef6 <_svfiprintf_r+0x112>
 800cec6:	3501      	adds	r5, #1
 800cec8:	e7b0      	b.n	800ce2c <_svfiprintf_r+0x48>
 800ceca:	4b41      	ldr	r3, [pc, #260]	; (800cfd0 <_svfiprintf_r+0x1ec>)
 800cecc:	6822      	ldr	r2, [r4, #0]
 800cece:	1ac0      	subs	r0, r0, r3
 800ced0:	2301      	movs	r3, #1
 800ced2:	4083      	lsls	r3, r0
 800ced4:	4313      	orrs	r3, r2
 800ced6:	002e      	movs	r6, r5
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	e7ce      	b.n	800ce7a <_svfiprintf_r+0x96>
 800cedc:	9b07      	ldr	r3, [sp, #28]
 800cede:	1d19      	adds	r1, r3, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	9107      	str	r1, [sp, #28]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	db01      	blt.n	800ceec <_svfiprintf_r+0x108>
 800cee8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceea:	e004      	b.n	800cef6 <_svfiprintf_r+0x112>
 800ceec:	425b      	negs	r3, r3
 800ceee:	60e3      	str	r3, [r4, #12]
 800cef0:	2302      	movs	r3, #2
 800cef2:	4313      	orrs	r3, r2
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	782b      	ldrb	r3, [r5, #0]
 800cef8:	2b2e      	cmp	r3, #46	; 0x2e
 800cefa:	d10a      	bne.n	800cf12 <_svfiprintf_r+0x12e>
 800cefc:	786b      	ldrb	r3, [r5, #1]
 800cefe:	2b2a      	cmp	r3, #42	; 0x2a
 800cf00:	d135      	bne.n	800cf6e <_svfiprintf_r+0x18a>
 800cf02:	9b07      	ldr	r3, [sp, #28]
 800cf04:	3502      	adds	r5, #2
 800cf06:	1d1a      	adds	r2, r3, #4
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	9207      	str	r2, [sp, #28]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	db2b      	blt.n	800cf68 <_svfiprintf_r+0x184>
 800cf10:	9309      	str	r3, [sp, #36]	; 0x24
 800cf12:	4e30      	ldr	r6, [pc, #192]	; (800cfd4 <_svfiprintf_r+0x1f0>)
 800cf14:	2203      	movs	r2, #3
 800cf16:	0030      	movs	r0, r6
 800cf18:	7829      	ldrb	r1, [r5, #0]
 800cf1a:	f7ff f91d 	bl	800c158 <memchr>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d006      	beq.n	800cf30 <_svfiprintf_r+0x14c>
 800cf22:	2340      	movs	r3, #64	; 0x40
 800cf24:	1b80      	subs	r0, r0, r6
 800cf26:	4083      	lsls	r3, r0
 800cf28:	6822      	ldr	r2, [r4, #0]
 800cf2a:	3501      	adds	r5, #1
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	6023      	str	r3, [r4, #0]
 800cf30:	7829      	ldrb	r1, [r5, #0]
 800cf32:	2206      	movs	r2, #6
 800cf34:	4828      	ldr	r0, [pc, #160]	; (800cfd8 <_svfiprintf_r+0x1f4>)
 800cf36:	1c6e      	adds	r6, r5, #1
 800cf38:	7621      	strb	r1, [r4, #24]
 800cf3a:	f7ff f90d 	bl	800c158 <memchr>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d03c      	beq.n	800cfbc <_svfiprintf_r+0x1d8>
 800cf42:	4b26      	ldr	r3, [pc, #152]	; (800cfdc <_svfiprintf_r+0x1f8>)
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d125      	bne.n	800cf94 <_svfiprintf_r+0x1b0>
 800cf48:	2207      	movs	r2, #7
 800cf4a:	9b07      	ldr	r3, [sp, #28]
 800cf4c:	3307      	adds	r3, #7
 800cf4e:	4393      	bics	r3, r2
 800cf50:	3308      	adds	r3, #8
 800cf52:	9307      	str	r3, [sp, #28]
 800cf54:	6963      	ldr	r3, [r4, #20]
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	189b      	adds	r3, r3, r2
 800cf5a:	6163      	str	r3, [r4, #20]
 800cf5c:	e765      	b.n	800ce2a <_svfiprintf_r+0x46>
 800cf5e:	4343      	muls	r3, r0
 800cf60:	0035      	movs	r5, r6
 800cf62:	2101      	movs	r1, #1
 800cf64:	189b      	adds	r3, r3, r2
 800cf66:	e7a6      	b.n	800ceb6 <_svfiprintf_r+0xd2>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	425b      	negs	r3, r3
 800cf6c:	e7d0      	b.n	800cf10 <_svfiprintf_r+0x12c>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	200a      	movs	r0, #10
 800cf72:	001a      	movs	r2, r3
 800cf74:	3501      	adds	r5, #1
 800cf76:	6063      	str	r3, [r4, #4]
 800cf78:	7829      	ldrb	r1, [r5, #0]
 800cf7a:	1c6e      	adds	r6, r5, #1
 800cf7c:	3930      	subs	r1, #48	; 0x30
 800cf7e:	2909      	cmp	r1, #9
 800cf80:	d903      	bls.n	800cf8a <_svfiprintf_r+0x1a6>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0c5      	beq.n	800cf12 <_svfiprintf_r+0x12e>
 800cf86:	9209      	str	r2, [sp, #36]	; 0x24
 800cf88:	e7c3      	b.n	800cf12 <_svfiprintf_r+0x12e>
 800cf8a:	4342      	muls	r2, r0
 800cf8c:	0035      	movs	r5, r6
 800cf8e:	2301      	movs	r3, #1
 800cf90:	1852      	adds	r2, r2, r1
 800cf92:	e7f1      	b.n	800cf78 <_svfiprintf_r+0x194>
 800cf94:	ab07      	add	r3, sp, #28
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	003a      	movs	r2, r7
 800cf9a:	0021      	movs	r1, r4
 800cf9c:	4b10      	ldr	r3, [pc, #64]	; (800cfe0 <_svfiprintf_r+0x1fc>)
 800cf9e:	9803      	ldr	r0, [sp, #12]
 800cfa0:	f7fb fe48 	bl	8008c34 <_printf_float>
 800cfa4:	9004      	str	r0, [sp, #16]
 800cfa6:	9b04      	ldr	r3, [sp, #16]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	d1d3      	bne.n	800cf54 <_svfiprintf_r+0x170>
 800cfac:	89bb      	ldrh	r3, [r7, #12]
 800cfae:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cfb0:	065b      	lsls	r3, r3, #25
 800cfb2:	d400      	bmi.n	800cfb6 <_svfiprintf_r+0x1d2>
 800cfb4:	e72d      	b.n	800ce12 <_svfiprintf_r+0x2e>
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	4240      	negs	r0, r0
 800cfba:	e72a      	b.n	800ce12 <_svfiprintf_r+0x2e>
 800cfbc:	ab07      	add	r3, sp, #28
 800cfbe:	9300      	str	r3, [sp, #0]
 800cfc0:	003a      	movs	r2, r7
 800cfc2:	0021      	movs	r1, r4
 800cfc4:	4b06      	ldr	r3, [pc, #24]	; (800cfe0 <_svfiprintf_r+0x1fc>)
 800cfc6:	9803      	ldr	r0, [sp, #12]
 800cfc8:	f7fc f8e6 	bl	8009198 <_printf_i>
 800cfcc:	e7ea      	b.n	800cfa4 <_svfiprintf_r+0x1c0>
 800cfce:	46c0      	nop			; (mov r8, r8)
 800cfd0:	0800dc5c 	.word	0x0800dc5c
 800cfd4:	0800dc62 	.word	0x0800dc62
 800cfd8:	0800dc66 	.word	0x0800dc66
 800cfdc:	08008c35 	.word	0x08008c35
 800cfe0:	0800cd21 	.word	0x0800cd21

0800cfe4 <__sfputc_r>:
 800cfe4:	6893      	ldr	r3, [r2, #8]
 800cfe6:	b510      	push	{r4, lr}
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	6093      	str	r3, [r2, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	da04      	bge.n	800cffa <__sfputc_r+0x16>
 800cff0:	6994      	ldr	r4, [r2, #24]
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	db07      	blt.n	800d006 <__sfputc_r+0x22>
 800cff6:	290a      	cmp	r1, #10
 800cff8:	d005      	beq.n	800d006 <__sfputc_r+0x22>
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	1c58      	adds	r0, r3, #1
 800cffe:	6010      	str	r0, [r2, #0]
 800d000:	7019      	strb	r1, [r3, #0]
 800d002:	0008      	movs	r0, r1
 800d004:	bd10      	pop	{r4, pc}
 800d006:	f7fd fb61 	bl	800a6cc <__swbuf_r>
 800d00a:	0001      	movs	r1, r0
 800d00c:	e7f9      	b.n	800d002 <__sfputc_r+0x1e>

0800d00e <__sfputs_r>:
 800d00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d010:	0006      	movs	r6, r0
 800d012:	000f      	movs	r7, r1
 800d014:	0014      	movs	r4, r2
 800d016:	18d5      	adds	r5, r2, r3
 800d018:	42ac      	cmp	r4, r5
 800d01a:	d101      	bne.n	800d020 <__sfputs_r+0x12>
 800d01c:	2000      	movs	r0, #0
 800d01e:	e007      	b.n	800d030 <__sfputs_r+0x22>
 800d020:	7821      	ldrb	r1, [r4, #0]
 800d022:	003a      	movs	r2, r7
 800d024:	0030      	movs	r0, r6
 800d026:	f7ff ffdd 	bl	800cfe4 <__sfputc_r>
 800d02a:	3401      	adds	r4, #1
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d1f3      	bne.n	800d018 <__sfputs_r+0xa>
 800d030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d034 <_vfiprintf_r>:
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	b0a1      	sub	sp, #132	; 0x84
 800d038:	0006      	movs	r6, r0
 800d03a:	000c      	movs	r4, r1
 800d03c:	001f      	movs	r7, r3
 800d03e:	9203      	str	r2, [sp, #12]
 800d040:	2800      	cmp	r0, #0
 800d042:	d004      	beq.n	800d04e <_vfiprintf_r+0x1a>
 800d044:	6983      	ldr	r3, [r0, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <_vfiprintf_r+0x1a>
 800d04a:	f7fe fbe1 	bl	800b810 <__sinit>
 800d04e:	4b8e      	ldr	r3, [pc, #568]	; (800d288 <_vfiprintf_r+0x254>)
 800d050:	429c      	cmp	r4, r3
 800d052:	d11c      	bne.n	800d08e <_vfiprintf_r+0x5a>
 800d054:	6874      	ldr	r4, [r6, #4]
 800d056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d058:	07db      	lsls	r3, r3, #31
 800d05a:	d405      	bmi.n	800d068 <_vfiprintf_r+0x34>
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	059b      	lsls	r3, r3, #22
 800d060:	d402      	bmi.n	800d068 <_vfiprintf_r+0x34>
 800d062:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d064:	f7fe ffed 	bl	800c042 <__retarget_lock_acquire_recursive>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	071b      	lsls	r3, r3, #28
 800d06c:	d502      	bpl.n	800d074 <_vfiprintf_r+0x40>
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d11d      	bne.n	800d0b0 <_vfiprintf_r+0x7c>
 800d074:	0021      	movs	r1, r4
 800d076:	0030      	movs	r0, r6
 800d078:	f7fd fb7e 	bl	800a778 <__swsetup_r>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d017      	beq.n	800d0b0 <_vfiprintf_r+0x7c>
 800d080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d082:	07db      	lsls	r3, r3, #31
 800d084:	d50d      	bpl.n	800d0a2 <_vfiprintf_r+0x6e>
 800d086:	2001      	movs	r0, #1
 800d088:	4240      	negs	r0, r0
 800d08a:	b021      	add	sp, #132	; 0x84
 800d08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d08e:	4b7f      	ldr	r3, [pc, #508]	; (800d28c <_vfiprintf_r+0x258>)
 800d090:	429c      	cmp	r4, r3
 800d092:	d101      	bne.n	800d098 <_vfiprintf_r+0x64>
 800d094:	68b4      	ldr	r4, [r6, #8]
 800d096:	e7de      	b.n	800d056 <_vfiprintf_r+0x22>
 800d098:	4b7d      	ldr	r3, [pc, #500]	; (800d290 <_vfiprintf_r+0x25c>)
 800d09a:	429c      	cmp	r4, r3
 800d09c:	d1db      	bne.n	800d056 <_vfiprintf_r+0x22>
 800d09e:	68f4      	ldr	r4, [r6, #12]
 800d0a0:	e7d9      	b.n	800d056 <_vfiprintf_r+0x22>
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	059b      	lsls	r3, r3, #22
 800d0a6:	d4ee      	bmi.n	800d086 <_vfiprintf_r+0x52>
 800d0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0aa:	f7fe ffcb 	bl	800c044 <__retarget_lock_release_recursive>
 800d0ae:	e7ea      	b.n	800d086 <_vfiprintf_r+0x52>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	ad08      	add	r5, sp, #32
 800d0b4:	616b      	str	r3, [r5, #20]
 800d0b6:	3320      	adds	r3, #32
 800d0b8:	766b      	strb	r3, [r5, #25]
 800d0ba:	3310      	adds	r3, #16
 800d0bc:	76ab      	strb	r3, [r5, #26]
 800d0be:	9707      	str	r7, [sp, #28]
 800d0c0:	9f03      	ldr	r7, [sp, #12]
 800d0c2:	783b      	ldrb	r3, [r7, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <_vfiprintf_r+0x98>
 800d0c8:	2b25      	cmp	r3, #37	; 0x25
 800d0ca:	d14e      	bne.n	800d16a <_vfiprintf_r+0x136>
 800d0cc:	9b03      	ldr	r3, [sp, #12]
 800d0ce:	1afb      	subs	r3, r7, r3
 800d0d0:	9305      	str	r3, [sp, #20]
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	429f      	cmp	r7, r3
 800d0d6:	d00d      	beq.n	800d0f4 <_vfiprintf_r+0xc0>
 800d0d8:	9b05      	ldr	r3, [sp, #20]
 800d0da:	0021      	movs	r1, r4
 800d0dc:	0030      	movs	r0, r6
 800d0de:	9a03      	ldr	r2, [sp, #12]
 800d0e0:	f7ff ff95 	bl	800d00e <__sfputs_r>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d100      	bne.n	800d0ea <_vfiprintf_r+0xb6>
 800d0e8:	e0b5      	b.n	800d256 <_vfiprintf_r+0x222>
 800d0ea:	696a      	ldr	r2, [r5, #20]
 800d0ec:	9b05      	ldr	r3, [sp, #20]
 800d0ee:	4694      	mov	ip, r2
 800d0f0:	4463      	add	r3, ip
 800d0f2:	616b      	str	r3, [r5, #20]
 800d0f4:	783b      	ldrb	r3, [r7, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d100      	bne.n	800d0fc <_vfiprintf_r+0xc8>
 800d0fa:	e0ac      	b.n	800d256 <_vfiprintf_r+0x222>
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	1c7b      	adds	r3, r7, #1
 800d100:	9303      	str	r3, [sp, #12]
 800d102:	2300      	movs	r3, #0
 800d104:	4252      	negs	r2, r2
 800d106:	606a      	str	r2, [r5, #4]
 800d108:	a904      	add	r1, sp, #16
 800d10a:	3254      	adds	r2, #84	; 0x54
 800d10c:	1852      	adds	r2, r2, r1
 800d10e:	602b      	str	r3, [r5, #0]
 800d110:	60eb      	str	r3, [r5, #12]
 800d112:	60ab      	str	r3, [r5, #8]
 800d114:	7013      	strb	r3, [r2, #0]
 800d116:	65ab      	str	r3, [r5, #88]	; 0x58
 800d118:	9b03      	ldr	r3, [sp, #12]
 800d11a:	2205      	movs	r2, #5
 800d11c:	7819      	ldrb	r1, [r3, #0]
 800d11e:	485d      	ldr	r0, [pc, #372]	; (800d294 <_vfiprintf_r+0x260>)
 800d120:	f7ff f81a 	bl	800c158 <memchr>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	1c5f      	adds	r7, r3, #1
 800d128:	2800      	cmp	r0, #0
 800d12a:	d120      	bne.n	800d16e <_vfiprintf_r+0x13a>
 800d12c:	682a      	ldr	r2, [r5, #0]
 800d12e:	06d3      	lsls	r3, r2, #27
 800d130:	d504      	bpl.n	800d13c <_vfiprintf_r+0x108>
 800d132:	2353      	movs	r3, #83	; 0x53
 800d134:	a904      	add	r1, sp, #16
 800d136:	185b      	adds	r3, r3, r1
 800d138:	2120      	movs	r1, #32
 800d13a:	7019      	strb	r1, [r3, #0]
 800d13c:	0713      	lsls	r3, r2, #28
 800d13e:	d504      	bpl.n	800d14a <_vfiprintf_r+0x116>
 800d140:	2353      	movs	r3, #83	; 0x53
 800d142:	a904      	add	r1, sp, #16
 800d144:	185b      	adds	r3, r3, r1
 800d146:	212b      	movs	r1, #43	; 0x2b
 800d148:	7019      	strb	r1, [r3, #0]
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b2a      	cmp	r3, #42	; 0x2a
 800d150:	d016      	beq.n	800d180 <_vfiprintf_r+0x14c>
 800d152:	2100      	movs	r1, #0
 800d154:	68eb      	ldr	r3, [r5, #12]
 800d156:	9f03      	ldr	r7, [sp, #12]
 800d158:	783a      	ldrb	r2, [r7, #0]
 800d15a:	1c78      	adds	r0, r7, #1
 800d15c:	3a30      	subs	r2, #48	; 0x30
 800d15e:	4684      	mov	ip, r0
 800d160:	2a09      	cmp	r2, #9
 800d162:	d94f      	bls.n	800d204 <_vfiprintf_r+0x1d0>
 800d164:	2900      	cmp	r1, #0
 800d166:	d111      	bne.n	800d18c <_vfiprintf_r+0x158>
 800d168:	e017      	b.n	800d19a <_vfiprintf_r+0x166>
 800d16a:	3701      	adds	r7, #1
 800d16c:	e7a9      	b.n	800d0c2 <_vfiprintf_r+0x8e>
 800d16e:	4b49      	ldr	r3, [pc, #292]	; (800d294 <_vfiprintf_r+0x260>)
 800d170:	682a      	ldr	r2, [r5, #0]
 800d172:	1ac0      	subs	r0, r0, r3
 800d174:	2301      	movs	r3, #1
 800d176:	4083      	lsls	r3, r0
 800d178:	4313      	orrs	r3, r2
 800d17a:	602b      	str	r3, [r5, #0]
 800d17c:	9703      	str	r7, [sp, #12]
 800d17e:	e7cb      	b.n	800d118 <_vfiprintf_r+0xe4>
 800d180:	9b07      	ldr	r3, [sp, #28]
 800d182:	1d19      	adds	r1, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	9107      	str	r1, [sp, #28]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	db01      	blt.n	800d190 <_vfiprintf_r+0x15c>
 800d18c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d18e:	e004      	b.n	800d19a <_vfiprintf_r+0x166>
 800d190:	425b      	negs	r3, r3
 800d192:	60eb      	str	r3, [r5, #12]
 800d194:	2302      	movs	r3, #2
 800d196:	4313      	orrs	r3, r2
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	783b      	ldrb	r3, [r7, #0]
 800d19c:	2b2e      	cmp	r3, #46	; 0x2e
 800d19e:	d10a      	bne.n	800d1b6 <_vfiprintf_r+0x182>
 800d1a0:	787b      	ldrb	r3, [r7, #1]
 800d1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a4:	d137      	bne.n	800d216 <_vfiprintf_r+0x1e2>
 800d1a6:	9b07      	ldr	r3, [sp, #28]
 800d1a8:	3702      	adds	r7, #2
 800d1aa:	1d1a      	adds	r2, r3, #4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	9207      	str	r2, [sp, #28]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	db2d      	blt.n	800d210 <_vfiprintf_r+0x1dc>
 800d1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b6:	2203      	movs	r2, #3
 800d1b8:	7839      	ldrb	r1, [r7, #0]
 800d1ba:	4837      	ldr	r0, [pc, #220]	; (800d298 <_vfiprintf_r+0x264>)
 800d1bc:	f7fe ffcc 	bl	800c158 <memchr>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d007      	beq.n	800d1d4 <_vfiprintf_r+0x1a0>
 800d1c4:	4b34      	ldr	r3, [pc, #208]	; (800d298 <_vfiprintf_r+0x264>)
 800d1c6:	682a      	ldr	r2, [r5, #0]
 800d1c8:	1ac0      	subs	r0, r0, r3
 800d1ca:	2340      	movs	r3, #64	; 0x40
 800d1cc:	4083      	lsls	r3, r0
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	3701      	adds	r7, #1
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	7839      	ldrb	r1, [r7, #0]
 800d1d6:	1c7b      	adds	r3, r7, #1
 800d1d8:	2206      	movs	r2, #6
 800d1da:	4830      	ldr	r0, [pc, #192]	; (800d29c <_vfiprintf_r+0x268>)
 800d1dc:	9303      	str	r3, [sp, #12]
 800d1de:	7629      	strb	r1, [r5, #24]
 800d1e0:	f7fe ffba 	bl	800c158 <memchr>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d045      	beq.n	800d274 <_vfiprintf_r+0x240>
 800d1e8:	4b2d      	ldr	r3, [pc, #180]	; (800d2a0 <_vfiprintf_r+0x26c>)
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d127      	bne.n	800d23e <_vfiprintf_r+0x20a>
 800d1ee:	2207      	movs	r2, #7
 800d1f0:	9b07      	ldr	r3, [sp, #28]
 800d1f2:	3307      	adds	r3, #7
 800d1f4:	4393      	bics	r3, r2
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	9307      	str	r3, [sp, #28]
 800d1fa:	696b      	ldr	r3, [r5, #20]
 800d1fc:	9a04      	ldr	r2, [sp, #16]
 800d1fe:	189b      	adds	r3, r3, r2
 800d200:	616b      	str	r3, [r5, #20]
 800d202:	e75d      	b.n	800d0c0 <_vfiprintf_r+0x8c>
 800d204:	210a      	movs	r1, #10
 800d206:	434b      	muls	r3, r1
 800d208:	4667      	mov	r7, ip
 800d20a:	189b      	adds	r3, r3, r2
 800d20c:	3909      	subs	r1, #9
 800d20e:	e7a3      	b.n	800d158 <_vfiprintf_r+0x124>
 800d210:	2301      	movs	r3, #1
 800d212:	425b      	negs	r3, r3
 800d214:	e7ce      	b.n	800d1b4 <_vfiprintf_r+0x180>
 800d216:	2300      	movs	r3, #0
 800d218:	001a      	movs	r2, r3
 800d21a:	3701      	adds	r7, #1
 800d21c:	606b      	str	r3, [r5, #4]
 800d21e:	7839      	ldrb	r1, [r7, #0]
 800d220:	1c78      	adds	r0, r7, #1
 800d222:	3930      	subs	r1, #48	; 0x30
 800d224:	4684      	mov	ip, r0
 800d226:	2909      	cmp	r1, #9
 800d228:	d903      	bls.n	800d232 <_vfiprintf_r+0x1fe>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0c3      	beq.n	800d1b6 <_vfiprintf_r+0x182>
 800d22e:	9209      	str	r2, [sp, #36]	; 0x24
 800d230:	e7c1      	b.n	800d1b6 <_vfiprintf_r+0x182>
 800d232:	230a      	movs	r3, #10
 800d234:	435a      	muls	r2, r3
 800d236:	4667      	mov	r7, ip
 800d238:	1852      	adds	r2, r2, r1
 800d23a:	3b09      	subs	r3, #9
 800d23c:	e7ef      	b.n	800d21e <_vfiprintf_r+0x1ea>
 800d23e:	ab07      	add	r3, sp, #28
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	0022      	movs	r2, r4
 800d244:	0029      	movs	r1, r5
 800d246:	0030      	movs	r0, r6
 800d248:	4b16      	ldr	r3, [pc, #88]	; (800d2a4 <_vfiprintf_r+0x270>)
 800d24a:	f7fb fcf3 	bl	8008c34 <_printf_float>
 800d24e:	9004      	str	r0, [sp, #16]
 800d250:	9b04      	ldr	r3, [sp, #16]
 800d252:	3301      	adds	r3, #1
 800d254:	d1d1      	bne.n	800d1fa <_vfiprintf_r+0x1c6>
 800d256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d258:	07db      	lsls	r3, r3, #31
 800d25a:	d405      	bmi.n	800d268 <_vfiprintf_r+0x234>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	059b      	lsls	r3, r3, #22
 800d260:	d402      	bmi.n	800d268 <_vfiprintf_r+0x234>
 800d262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d264:	f7fe feee 	bl	800c044 <__retarget_lock_release_recursive>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	065b      	lsls	r3, r3, #25
 800d26c:	d500      	bpl.n	800d270 <_vfiprintf_r+0x23c>
 800d26e:	e70a      	b.n	800d086 <_vfiprintf_r+0x52>
 800d270:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d272:	e70a      	b.n	800d08a <_vfiprintf_r+0x56>
 800d274:	ab07      	add	r3, sp, #28
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	0022      	movs	r2, r4
 800d27a:	0029      	movs	r1, r5
 800d27c:	0030      	movs	r0, r6
 800d27e:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <_vfiprintf_r+0x270>)
 800d280:	f7fb ff8a 	bl	8009198 <_printf_i>
 800d284:	e7e3      	b.n	800d24e <_vfiprintf_r+0x21a>
 800d286:	46c0      	nop			; (mov r8, r8)
 800d288:	0800da44 	.word	0x0800da44
 800d28c:	0800da64 	.word	0x0800da64
 800d290:	0800da24 	.word	0x0800da24
 800d294:	0800dc5c 	.word	0x0800dc5c
 800d298:	0800dc62 	.word	0x0800dc62
 800d29c:	0800dc66 	.word	0x0800dc66
 800d2a0:	08008c35 	.word	0x08008c35
 800d2a4:	0800d00f 	.word	0x0800d00f

0800d2a8 <nan>:
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	4901      	ldr	r1, [pc, #4]	; (800d2b0 <nan+0x8>)
 800d2ac:	4770      	bx	lr
 800d2ae:	46c0      	nop			; (mov r8, r8)
 800d2b0:	7ff80000 	.word	0x7ff80000

0800d2b4 <_sbrk_r>:
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	b570      	push	{r4, r5, r6, lr}
 800d2b8:	4d06      	ldr	r5, [pc, #24]	; (800d2d4 <_sbrk_r+0x20>)
 800d2ba:	0004      	movs	r4, r0
 800d2bc:	0008      	movs	r0, r1
 800d2be:	602b      	str	r3, [r5, #0]
 800d2c0:	f7f6 fb4c 	bl	800395c <_sbrk>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d103      	bne.n	800d2d0 <_sbrk_r+0x1c>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d000      	beq.n	800d2d0 <_sbrk_r+0x1c>
 800d2ce:	6023      	str	r3, [r4, #0]
 800d2d0:	bd70      	pop	{r4, r5, r6, pc}
 800d2d2:	46c0      	nop			; (mov r8, r8)
 800d2d4:	20000630 	.word	0x20000630

0800d2d8 <__sread>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	000c      	movs	r4, r1
 800d2dc:	250e      	movs	r5, #14
 800d2de:	5f49      	ldrsh	r1, [r1, r5]
 800d2e0:	f000 f946 	bl	800d570 <_read_r>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	db03      	blt.n	800d2f0 <__sread+0x18>
 800d2e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d2ea:	181b      	adds	r3, r3, r0
 800d2ec:	6563      	str	r3, [r4, #84]	; 0x54
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
 800d2f0:	89a3      	ldrh	r3, [r4, #12]
 800d2f2:	4a02      	ldr	r2, [pc, #8]	; (800d2fc <__sread+0x24>)
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	e7f9      	b.n	800d2ee <__sread+0x16>
 800d2fa:	46c0      	nop			; (mov r8, r8)
 800d2fc:	ffffefff 	.word	0xffffefff

0800d300 <__swrite>:
 800d300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d302:	001f      	movs	r7, r3
 800d304:	898b      	ldrh	r3, [r1, #12]
 800d306:	0005      	movs	r5, r0
 800d308:	000c      	movs	r4, r1
 800d30a:	0016      	movs	r6, r2
 800d30c:	05db      	lsls	r3, r3, #23
 800d30e:	d505      	bpl.n	800d31c <__swrite+0x1c>
 800d310:	230e      	movs	r3, #14
 800d312:	5ec9      	ldrsh	r1, [r1, r3]
 800d314:	2200      	movs	r2, #0
 800d316:	2302      	movs	r3, #2
 800d318:	f000 f8c2 	bl	800d4a0 <_lseek_r>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	4a05      	ldr	r2, [pc, #20]	; (800d334 <__swrite+0x34>)
 800d320:	0028      	movs	r0, r5
 800d322:	4013      	ands	r3, r2
 800d324:	81a3      	strh	r3, [r4, #12]
 800d326:	0032      	movs	r2, r6
 800d328:	230e      	movs	r3, #14
 800d32a:	5ee1      	ldrsh	r1, [r4, r3]
 800d32c:	003b      	movs	r3, r7
 800d32e:	f000 f83f 	bl	800d3b0 <_write_r>
 800d332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d334:	ffffefff 	.word	0xffffefff

0800d338 <__sseek>:
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	000c      	movs	r4, r1
 800d33c:	250e      	movs	r5, #14
 800d33e:	5f49      	ldrsh	r1, [r1, r5]
 800d340:	f000 f8ae 	bl	800d4a0 <_lseek_r>
 800d344:	89a3      	ldrh	r3, [r4, #12]
 800d346:	1c42      	adds	r2, r0, #1
 800d348:	d103      	bne.n	800d352 <__sseek+0x1a>
 800d34a:	4a05      	ldr	r2, [pc, #20]	; (800d360 <__sseek+0x28>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	81a3      	strh	r3, [r4, #12]
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	2280      	movs	r2, #128	; 0x80
 800d354:	0152      	lsls	r2, r2, #5
 800d356:	4313      	orrs	r3, r2
 800d358:	81a3      	strh	r3, [r4, #12]
 800d35a:	6560      	str	r0, [r4, #84]	; 0x54
 800d35c:	e7f8      	b.n	800d350 <__sseek+0x18>
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	ffffefff 	.word	0xffffefff

0800d364 <__sclose>:
 800d364:	b510      	push	{r4, lr}
 800d366:	230e      	movs	r3, #14
 800d368:	5ec9      	ldrsh	r1, [r1, r3]
 800d36a:	f000 f853 	bl	800d414 <_close_r>
 800d36e:	bd10      	pop	{r4, pc}

0800d370 <strncmp>:
 800d370:	b530      	push	{r4, r5, lr}
 800d372:	0005      	movs	r5, r0
 800d374:	1e10      	subs	r0, r2, #0
 800d376:	d008      	beq.n	800d38a <strncmp+0x1a>
 800d378:	2400      	movs	r4, #0
 800d37a:	3a01      	subs	r2, #1
 800d37c:	5d2b      	ldrb	r3, [r5, r4]
 800d37e:	5d08      	ldrb	r0, [r1, r4]
 800d380:	4283      	cmp	r3, r0
 800d382:	d101      	bne.n	800d388 <strncmp+0x18>
 800d384:	4294      	cmp	r4, r2
 800d386:	d101      	bne.n	800d38c <strncmp+0x1c>
 800d388:	1a18      	subs	r0, r3, r0
 800d38a:	bd30      	pop	{r4, r5, pc}
 800d38c:	3401      	adds	r4, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1f4      	bne.n	800d37c <strncmp+0xc>
 800d392:	e7f9      	b.n	800d388 <strncmp+0x18>

0800d394 <__ascii_wctomb>:
 800d394:	0003      	movs	r3, r0
 800d396:	1e08      	subs	r0, r1, #0
 800d398:	d005      	beq.n	800d3a6 <__ascii_wctomb+0x12>
 800d39a:	2aff      	cmp	r2, #255	; 0xff
 800d39c:	d904      	bls.n	800d3a8 <__ascii_wctomb+0x14>
 800d39e:	228a      	movs	r2, #138	; 0x8a
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	4240      	negs	r0, r0
 800d3a6:	4770      	bx	lr
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	700a      	strb	r2, [r1, #0]
 800d3ac:	e7fb      	b.n	800d3a6 <__ascii_wctomb+0x12>
	...

0800d3b0 <_write_r>:
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	0004      	movs	r4, r0
 800d3b4:	0008      	movs	r0, r1
 800d3b6:	0011      	movs	r1, r2
 800d3b8:	001a      	movs	r2, r3
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	4d05      	ldr	r5, [pc, #20]	; (800d3d4 <_write_r+0x24>)
 800d3be:	602b      	str	r3, [r5, #0]
 800d3c0:	f7f6 fa83 	bl	80038ca <_write>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d103      	bne.n	800d3d0 <_write_r+0x20>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d000      	beq.n	800d3d0 <_write_r+0x20>
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	bd70      	pop	{r4, r5, r6, pc}
 800d3d2:	46c0      	nop			; (mov r8, r8)
 800d3d4:	20000630 	.word	0x20000630

0800d3d8 <__assert_func>:
 800d3d8:	b530      	push	{r4, r5, lr}
 800d3da:	0014      	movs	r4, r2
 800d3dc:	001a      	movs	r2, r3
 800d3de:	4b09      	ldr	r3, [pc, #36]	; (800d404 <__assert_func+0x2c>)
 800d3e0:	0005      	movs	r5, r0
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	68d8      	ldr	r0, [r3, #12]
 800d3e8:	4b07      	ldr	r3, [pc, #28]	; (800d408 <__assert_func+0x30>)
 800d3ea:	2c00      	cmp	r4, #0
 800d3ec:	d101      	bne.n	800d3f2 <__assert_func+0x1a>
 800d3ee:	4b07      	ldr	r3, [pc, #28]	; (800d40c <__assert_func+0x34>)
 800d3f0:	001c      	movs	r4, r3
 800d3f2:	9301      	str	r3, [sp, #4]
 800d3f4:	9100      	str	r1, [sp, #0]
 800d3f6:	002b      	movs	r3, r5
 800d3f8:	4905      	ldr	r1, [pc, #20]	; (800d410 <__assert_func+0x38>)
 800d3fa:	9402      	str	r4, [sp, #8]
 800d3fc:	f000 f81c 	bl	800d438 <fiprintf>
 800d400:	f000 f8ca 	bl	800d598 <abort>
 800d404:	20000030 	.word	0x20000030
 800d408:	0800dc6d 	.word	0x0800dc6d
 800d40c:	0800dca8 	.word	0x0800dca8
 800d410:	0800dc7a 	.word	0x0800dc7a

0800d414 <_close_r>:
 800d414:	2300      	movs	r3, #0
 800d416:	b570      	push	{r4, r5, r6, lr}
 800d418:	4d06      	ldr	r5, [pc, #24]	; (800d434 <_close_r+0x20>)
 800d41a:	0004      	movs	r4, r0
 800d41c:	0008      	movs	r0, r1
 800d41e:	602b      	str	r3, [r5, #0]
 800d420:	f7f6 fa6f 	bl	8003902 <_close>
 800d424:	1c43      	adds	r3, r0, #1
 800d426:	d103      	bne.n	800d430 <_close_r+0x1c>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d000      	beq.n	800d430 <_close_r+0x1c>
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	bd70      	pop	{r4, r5, r6, pc}
 800d432:	46c0      	nop			; (mov r8, r8)
 800d434:	20000630 	.word	0x20000630

0800d438 <fiprintf>:
 800d438:	b40e      	push	{r1, r2, r3}
 800d43a:	b503      	push	{r0, r1, lr}
 800d43c:	0001      	movs	r1, r0
 800d43e:	ab03      	add	r3, sp, #12
 800d440:	4804      	ldr	r0, [pc, #16]	; (800d454 <fiprintf+0x1c>)
 800d442:	cb04      	ldmia	r3!, {r2}
 800d444:	6800      	ldr	r0, [r0, #0]
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	f7ff fdf4 	bl	800d034 <_vfiprintf_r>
 800d44c:	b002      	add	sp, #8
 800d44e:	bc08      	pop	{r3}
 800d450:	b003      	add	sp, #12
 800d452:	4718      	bx	r3
 800d454:	20000030 	.word	0x20000030

0800d458 <_fstat_r>:
 800d458:	2300      	movs	r3, #0
 800d45a:	b570      	push	{r4, r5, r6, lr}
 800d45c:	4d06      	ldr	r5, [pc, #24]	; (800d478 <_fstat_r+0x20>)
 800d45e:	0004      	movs	r4, r0
 800d460:	0008      	movs	r0, r1
 800d462:	0011      	movs	r1, r2
 800d464:	602b      	str	r3, [r5, #0]
 800d466:	f7f6 fa56 	bl	8003916 <_fstat>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	d103      	bne.n	800d476 <_fstat_r+0x1e>
 800d46e:	682b      	ldr	r3, [r5, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d000      	beq.n	800d476 <_fstat_r+0x1e>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	20000630 	.word	0x20000630

0800d47c <_isatty_r>:
 800d47c:	2300      	movs	r3, #0
 800d47e:	b570      	push	{r4, r5, r6, lr}
 800d480:	4d06      	ldr	r5, [pc, #24]	; (800d49c <_isatty_r+0x20>)
 800d482:	0004      	movs	r4, r0
 800d484:	0008      	movs	r0, r1
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f6 fa53 	bl	8003932 <_isatty>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d103      	bne.n	800d498 <_isatty_r+0x1c>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d000      	beq.n	800d498 <_isatty_r+0x1c>
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	bd70      	pop	{r4, r5, r6, pc}
 800d49a:	46c0      	nop			; (mov r8, r8)
 800d49c:	20000630 	.word	0x20000630

0800d4a0 <_lseek_r>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	0004      	movs	r4, r0
 800d4a4:	0008      	movs	r0, r1
 800d4a6:	0011      	movs	r1, r2
 800d4a8:	001a      	movs	r2, r3
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4d05      	ldr	r5, [pc, #20]	; (800d4c4 <_lseek_r+0x24>)
 800d4ae:	602b      	str	r3, [r5, #0]
 800d4b0:	f7f6 fa48 	bl	8003944 <_lseek>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	d103      	bne.n	800d4c0 <_lseek_r+0x20>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d000      	beq.n	800d4c0 <_lseek_r+0x20>
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	20000630 	.word	0x20000630

0800d4c8 <memmove>:
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	4288      	cmp	r0, r1
 800d4cc:	d902      	bls.n	800d4d4 <memmove+0xc>
 800d4ce:	188b      	adds	r3, r1, r2
 800d4d0:	4298      	cmp	r0, r3
 800d4d2:	d303      	bcc.n	800d4dc <memmove+0x14>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e007      	b.n	800d4e8 <memmove+0x20>
 800d4d8:	5c8b      	ldrb	r3, [r1, r2]
 800d4da:	5483      	strb	r3, [r0, r2]
 800d4dc:	3a01      	subs	r2, #1
 800d4de:	d2fb      	bcs.n	800d4d8 <memmove+0x10>
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	5ccc      	ldrb	r4, [r1, r3]
 800d4e4:	54c4      	strb	r4, [r0, r3]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d1fa      	bne.n	800d4e2 <memmove+0x1a>
 800d4ec:	e7f8      	b.n	800d4e0 <memmove+0x18>
	...

0800d4f0 <__malloc_lock>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	4802      	ldr	r0, [pc, #8]	; (800d4fc <__malloc_lock+0xc>)
 800d4f4:	f7fe fda5 	bl	800c042 <__retarget_lock_acquire_recursive>
 800d4f8:	bd10      	pop	{r4, pc}
 800d4fa:	46c0      	nop			; (mov r8, r8)
 800d4fc:	20000624 	.word	0x20000624

0800d500 <__malloc_unlock>:
 800d500:	b510      	push	{r4, lr}
 800d502:	4802      	ldr	r0, [pc, #8]	; (800d50c <__malloc_unlock+0xc>)
 800d504:	f7fe fd9e 	bl	800c044 <__retarget_lock_release_recursive>
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	46c0      	nop			; (mov r8, r8)
 800d50c:	20000624 	.word	0x20000624

0800d510 <_realloc_r>:
 800d510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d512:	0007      	movs	r7, r0
 800d514:	000e      	movs	r6, r1
 800d516:	0014      	movs	r4, r2
 800d518:	2900      	cmp	r1, #0
 800d51a:	d105      	bne.n	800d528 <_realloc_r+0x18>
 800d51c:	0011      	movs	r1, r2
 800d51e:	f7ff fb89 	bl	800cc34 <_malloc_r>
 800d522:	0005      	movs	r5, r0
 800d524:	0028      	movs	r0, r5
 800d526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d528:	2a00      	cmp	r2, #0
 800d52a:	d103      	bne.n	800d534 <_realloc_r+0x24>
 800d52c:	f7ff fb16 	bl	800cb5c <_free_r>
 800d530:	0025      	movs	r5, r4
 800d532:	e7f7      	b.n	800d524 <_realloc_r+0x14>
 800d534:	f000 f837 	bl	800d5a6 <_malloc_usable_size_r>
 800d538:	9001      	str	r0, [sp, #4]
 800d53a:	4284      	cmp	r4, r0
 800d53c:	d803      	bhi.n	800d546 <_realloc_r+0x36>
 800d53e:	0035      	movs	r5, r6
 800d540:	0843      	lsrs	r3, r0, #1
 800d542:	42a3      	cmp	r3, r4
 800d544:	d3ee      	bcc.n	800d524 <_realloc_r+0x14>
 800d546:	0021      	movs	r1, r4
 800d548:	0038      	movs	r0, r7
 800d54a:	f7ff fb73 	bl	800cc34 <_malloc_r>
 800d54e:	1e05      	subs	r5, r0, #0
 800d550:	d0e8      	beq.n	800d524 <_realloc_r+0x14>
 800d552:	9b01      	ldr	r3, [sp, #4]
 800d554:	0022      	movs	r2, r4
 800d556:	429c      	cmp	r4, r3
 800d558:	d900      	bls.n	800d55c <_realloc_r+0x4c>
 800d55a:	001a      	movs	r2, r3
 800d55c:	0031      	movs	r1, r6
 800d55e:	0028      	movs	r0, r5
 800d560:	f7fb faac 	bl	8008abc <memcpy>
 800d564:	0031      	movs	r1, r6
 800d566:	0038      	movs	r0, r7
 800d568:	f7ff faf8 	bl	800cb5c <_free_r>
 800d56c:	e7da      	b.n	800d524 <_realloc_r+0x14>
	...

0800d570 <_read_r>:
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	0004      	movs	r4, r0
 800d574:	0008      	movs	r0, r1
 800d576:	0011      	movs	r1, r2
 800d578:	001a      	movs	r2, r3
 800d57a:	2300      	movs	r3, #0
 800d57c:	4d05      	ldr	r5, [pc, #20]	; (800d594 <_read_r+0x24>)
 800d57e:	602b      	str	r3, [r5, #0]
 800d580:	f7f6 f986 	bl	8003890 <_read>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d103      	bne.n	800d590 <_read_r+0x20>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d000      	beq.n	800d590 <_read_r+0x20>
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	bd70      	pop	{r4, r5, r6, pc}
 800d592:	46c0      	nop			; (mov r8, r8)
 800d594:	20000630 	.word	0x20000630

0800d598 <abort>:
 800d598:	2006      	movs	r0, #6
 800d59a:	b510      	push	{r4, lr}
 800d59c:	f000 f836 	bl	800d60c <raise>
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	f7f6 f969 	bl	8003878 <_exit>

0800d5a6 <_malloc_usable_size_r>:
 800d5a6:	1f0b      	subs	r3, r1, #4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	1f18      	subs	r0, r3, #4
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	da01      	bge.n	800d5b4 <_malloc_usable_size_r+0xe>
 800d5b0:	580b      	ldr	r3, [r1, r0]
 800d5b2:	18c0      	adds	r0, r0, r3
 800d5b4:	4770      	bx	lr

0800d5b6 <_raise_r>:
 800d5b6:	b570      	push	{r4, r5, r6, lr}
 800d5b8:	0004      	movs	r4, r0
 800d5ba:	000d      	movs	r5, r1
 800d5bc:	291f      	cmp	r1, #31
 800d5be:	d904      	bls.n	800d5ca <_raise_r+0x14>
 800d5c0:	2316      	movs	r3, #22
 800d5c2:	6003      	str	r3, [r0, #0]
 800d5c4:	2001      	movs	r0, #1
 800d5c6:	4240      	negs	r0, r0
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <_raise_r+0x24>
 800d5d0:	008a      	lsls	r2, r1, #2
 800d5d2:	189b      	adds	r3, r3, r2
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	d108      	bne.n	800d5ec <_raise_r+0x36>
 800d5da:	0020      	movs	r0, r4
 800d5dc:	f000 f832 	bl	800d644 <_getpid_r>
 800d5e0:	002a      	movs	r2, r5
 800d5e2:	0001      	movs	r1, r0
 800d5e4:	0020      	movs	r0, r4
 800d5e6:	f000 f81b 	bl	800d620 <_kill_r>
 800d5ea:	e7ed      	b.n	800d5c8 <_raise_r+0x12>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	2a01      	cmp	r2, #1
 800d5f0:	d0ea      	beq.n	800d5c8 <_raise_r+0x12>
 800d5f2:	1c51      	adds	r1, r2, #1
 800d5f4:	d103      	bne.n	800d5fe <_raise_r+0x48>
 800d5f6:	2316      	movs	r3, #22
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	6023      	str	r3, [r4, #0]
 800d5fc:	e7e4      	b.n	800d5c8 <_raise_r+0x12>
 800d5fe:	2400      	movs	r4, #0
 800d600:	0028      	movs	r0, r5
 800d602:	601c      	str	r4, [r3, #0]
 800d604:	4790      	blx	r2
 800d606:	0020      	movs	r0, r4
 800d608:	e7de      	b.n	800d5c8 <_raise_r+0x12>
	...

0800d60c <raise>:
 800d60c:	b510      	push	{r4, lr}
 800d60e:	4b03      	ldr	r3, [pc, #12]	; (800d61c <raise+0x10>)
 800d610:	0001      	movs	r1, r0
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	f7ff ffcf 	bl	800d5b6 <_raise_r>
 800d618:	bd10      	pop	{r4, pc}
 800d61a:	46c0      	nop			; (mov r8, r8)
 800d61c:	20000030 	.word	0x20000030

0800d620 <_kill_r>:
 800d620:	2300      	movs	r3, #0
 800d622:	b570      	push	{r4, r5, r6, lr}
 800d624:	4d06      	ldr	r5, [pc, #24]	; (800d640 <_kill_r+0x20>)
 800d626:	0004      	movs	r4, r0
 800d628:	0008      	movs	r0, r1
 800d62a:	0011      	movs	r1, r2
 800d62c:	602b      	str	r3, [r5, #0]
 800d62e:	f7f6 f913 	bl	8003858 <_kill>
 800d632:	1c43      	adds	r3, r0, #1
 800d634:	d103      	bne.n	800d63e <_kill_r+0x1e>
 800d636:	682b      	ldr	r3, [r5, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d000      	beq.n	800d63e <_kill_r+0x1e>
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	20000630 	.word	0x20000630

0800d644 <_getpid_r>:
 800d644:	b510      	push	{r4, lr}
 800d646:	f7f6 f901 	bl	800384c <_getpid>
 800d64a:	bd10      	pop	{r4, pc}

0800d64c <_init>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	46c0      	nop			; (mov r8, r8)
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr

0800d658 <_fini>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	46c0      	nop			; (mov r8, r8)
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr
